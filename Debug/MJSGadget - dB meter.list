
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002232c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028c8  080223f0  080223f0  000233f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024cb8  08024cb8  00026420  2**0
                  CONTENTS
  4 .ARM          00000008  08024cb8  08024cb8  00025cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024cc0  08024cc0  00026420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024cc0  08024cc0  00025cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08024cc4  08024cc4  00025cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000420  20000000  08024cc8  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003510  20000420  080250e8  00026420  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003930  080250e8  00026930  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00026420  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034acb  00000000  00000000  00026448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000097fb  00000000  00000000  0005af13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b18  00000000  00000000  00064710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fdf  00000000  00000000  00067228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232f9  00000000  00000000  00069207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000433cf  00000000  00000000  0008c500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0568  00000000  00000000  000cf8cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016fe37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae78  00000000  00000000  0016fee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017ad60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0017adcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017d349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000420 	.word	0x20000420
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080223d4 	.word	0x080223d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000424 	.word	0x20000424
 8000104:	080223d4 	.word	0x080223d4

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08023eec 	.word	0x08023eec
 8000e0c:	08023f2c 	.word	0x08023f2c
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08023f68 	.word	0x08023f68
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00b fd34 	bl	800f0d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00b fd8b 	bl	800f1a0 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00b fd3e 	bl	800f12c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	2000043c 	.word	0x2000043c

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00b fcba 	bl	800f0d0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00b fce9 	bl	800f148 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00b fccd 	bl	800f12c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static ESP_States EspState = ESP_STATE_INIT;
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000998 	.word	0x20000998

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00a fc6a 	bl	800e090 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
//  ATExpectation = RECEIVE_EXPECTATION_OK;
//  ATCommand = AT_WAKEUP;
//  EspState = ESP_STATE_INIT;
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000994 	.word	0x20000994

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fc6c 	bl	80060b4 <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <setCharges+0x20>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037e2:	f002 fcc9 	bl	8006178 <ReadSolarVoltage>
 80037e6:	1c02      	adds	r2, r0, #0
 80037e8:	4b03      	ldr	r3, [pc, #12]	@ (80037f8 <setCharges+0x24>)
 80037ea:	601a      	str	r2, [r3, #0]
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	2000056c 	.word	0x2000056c
 80037f8:	20000570 	.word	0x20000570

080037fc <checkEEprom>:
bool checkEEprom(){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <checkEEprom+0x5c>)
 8003804:	4815      	ldr	r0, [pc, #84]	@ (800385c <checkEEprom+0x60>)
 8003806:	220c      	movs	r2, #12
 8003808:	0019      	movs	r1, r3
 800380a:	f7ff ff75 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e00e      	b.n	8003834 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4a0f      	ldr	r2, [pc, #60]	@ (8003858 <checkEEprom+0x5c>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	001a      	movs	r2, r3
 8003820:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <checkEEprom+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	18d2      	adds	r2, r2, r3
 8003826:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <checkEEprom+0x64>)
 8003828:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800382a:	1dfb      	adds	r3, r7, #7
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	3201      	adds	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b0b      	cmp	r3, #11
 800383a:	d9ec      	bls.n	8003816 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800383c:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <checkEEprom+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	425a      	negs	r2, r3
 8003842:	4153      	adcs	r3, r2
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <checkEEprom+0x68>)
 8003848:	701a      	strb	r2, [r3, #0]
  return test;
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <checkEEprom+0x68>)
 800384c:	781b      	ldrb	r3, [r3, #0]
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	200009a8 	.word	0x200009a8
 800385c:	0808000c 	.word	0x0808000c
 8003860:	200009b4 	.word	0x200009b4
 8003864:	200009b8 	.word	0x200009b8

08003868 <checkName>:
bool checkName(){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <checkName+0x5c>)
 8003870:	4815      	ldr	r0, [pc, #84]	@ (80038c8 <checkName+0x60>)
 8003872:	221e      	movs	r2, #30
 8003874:	0019      	movs	r1, r3
 8003876:	f7ff ff3f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800387a:	1dfb      	adds	r3, r7, #7
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e00e      	b.n	80038a0 <checkName+0x38>
    configSum += nameConfig[i];
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4a0f      	ldr	r2, [pc, #60]	@ (80038c4 <checkName+0x5c>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	001a      	movs	r2, r3
 800388c:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <checkName+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	18d2      	adds	r2, r2, r3
 8003892:	4b0e      	ldr	r3, [pc, #56]	@ (80038cc <checkName+0x64>)
 8003894:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	3201      	adds	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b0b      	cmp	r3, #11
 80038a6:	d9ec      	bls.n	8003882 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038a8:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <checkName+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	4193      	sbcs	r3, r2
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <checkName+0x68>)
 80038b4:	701a      	strb	r2, [r3, #0]
  return test;
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <checkName+0x68>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	200009bc 	.word	0x200009bc
 80038c8:	08080090 	.word	0x08080090
 80038cc:	200009dc 	.word	0x200009dc
 80038d0:	200009e0 	.word	0x200009e0

080038d4 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038de:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <ESP_GetHT+0x20>)
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <ESP_GetHT+0x24>)
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b002      	add	sp, #8
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	20000564 	.word	0x20000564
 80038f8:	20000568 	.word	0x20000568

080038fc <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	1dbb      	adds	r3, r7, #6
 8003908:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 800390a:	4b07      	ldr	r3, [pc, #28]	@ (8003928 <setMeasurement+0x2c>)
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 8003910:	4b06      	ldr	r3, [pc, #24]	@ (800392c <setMeasurement+0x30>)
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <setMeasurement+0x34>)
 8003918:	1dba      	adds	r2, r7, #6
 800391a:	8812      	ldrh	r2, [r2, #0]
 800391c:	801a      	strh	r2, [r3, #0]
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	20000564 	.word	0x20000564
 800392c:	20000568 	.word	0x20000568
 8003930:	20000574 	.word	0x20000574

08003934 <setMic>:
void setMic(float dB){
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  dBA = dB;
 800393c:	4b03      	ldr	r3, [pc, #12]	@ (800394c <setMic+0x18>)
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	601a      	str	r2, [r3, #0]
}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b002      	add	sp, #8
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			@ (mov r8, r8)
 800394c:	20000578 	.word	0x20000578

08003950 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	0002      	movs	r2, r0
 8003958:	1dbb      	adds	r3, r7, #6
 800395a:	801a      	strh	r2, [r3, #0]
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	1c0a      	adds	r2, r1, #0
 8003960:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003962:	1dbb      	adds	r3, r7, #6
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	0018      	movs	r0, r3
 8003968:	f7fd fe32 	bl	80015d0 <__aeabi_i2f>
 800396c:	1c03      	adds	r3, r0, #0
 800396e:	490d      	ldr	r1, [pc, #52]	@ (80039a4 <setPMs+0x54>)
 8003970:	1c18      	adds	r0, r3, #0
 8003972:	f7fd f92f 	bl	8000bd4 <__aeabi_fdiv>
 8003976:	1c03      	adds	r3, r0, #0
 8003978:	1c1a      	adds	r2, r3, #0
 800397a:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <setPMs+0x58>)
 800397c:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	0018      	movs	r0, r3
 8003984:	f7fd fe24 	bl	80015d0 <__aeabi_i2f>
 8003988:	1c03      	adds	r3, r0, #0
 800398a:	4906      	ldr	r1, [pc, #24]	@ (80039a4 <setPMs+0x54>)
 800398c:	1c18      	adds	r0, r3, #0
 800398e:	f7fd f921 	bl	8000bd4 <__aeabi_fdiv>
 8003992:	1c03      	adds	r3, r0, #0
 8003994:	1c1a      	adds	r2, r3, #0
 8003996:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <setPMs+0x5c>)
 8003998:	601a      	str	r2, [r3, #0]
}
 800399a:	46c0      	nop			@ (mov r8, r8)
 800399c:	46bd      	mov	sp, r7
 800399e:	b002      	add	sp, #8
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	41200000 	.word	0x41200000
 80039a8:	2000057c 	.word	0x2000057c
 80039ac:	20000580 	.word	0x20000580

080039b0 <SetConfigMode>:

void SetConfigMode(){
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 80039b4:	4b02      	ldr	r3, [pc, #8]	@ (80039c0 <SetConfigMode+0x10>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	701a      	strb	r2, [r3, #0]
}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	2000054b 	.word	0x2000054b

080039c4 <ESP_GetUID>:
//};


//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 80039c8:	f00a fbac 	bl	800e124 <HAL_GetUIDw0>
 80039cc:	0002      	movs	r2, r0
 80039ce:	4b07      	ldr	r3, [pc, #28]	@ (80039ec <ESP_GetUID+0x28>)
 80039d0:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039d2:	f00a fbb1 	bl	800e138 <HAL_GetUIDw1>
 80039d6:	0002      	movs	r2, r0
 80039d8:	4b04      	ldr	r3, [pc, #16]	@ (80039ec <ESP_GetUID+0x28>)
 80039da:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039dc:	f00a fbb6 	bl	800e14c <HAL_GetUIDw2>
 80039e0:	0002      	movs	r2, r0
 80039e2:	4b02      	ldr	r3, [pc, #8]	@ (80039ec <ESP_GetUID+0x28>)
 80039e4:	609a      	str	r2, [r3, #8]
}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000550 	.word	0x20000550

080039f0 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80039f8:	4b08      	ldr	r3, [pc, #32]	@ (8003a1c <ESP_Init+0x2c>)
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80039fe:	4b08      	ldr	r3, [pc, #32]	@ (8003a20 <ESP_Init+0x30>)
 8003a00:	2202      	movs	r2, #2
 8003a02:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003a04:	f7ff ffde 	bl	80039c4 <ESP_GetUID>
  beurs = checkEEprom();
 8003a08:	f7ff fef8 	bl	80037fc <checkEEprom>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	001a      	movs	r2, r3
 8003a10:	4b04      	ldr	r3, [pc, #16]	@ (8003a24 <ESP_Init+0x34>)
 8003a12:	701a      	strb	r2, [r3, #0]
}
 8003a14:	46c0      	nop			@ (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b002      	add	sp, #8
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000440 	.word	0x20000440
 8003a20:	20000028 	.word	0x20000028
 8003a24:	2000054e 	.word	0x2000054e

08003a28 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003a28:	b5b0      	push	{r4, r5, r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	000a      	movs	r2, r1
 8003a32:	1cbb      	adds	r3, r7, #2
 8003a34:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a10      	ldr	r2, [pc, #64]	@ (8003a7c <ESP_Send+0x54>)
 8003a3a:	4911      	ldr	r1, [pc, #68]	@ (8003a80 <ESP_Send+0x58>)
 8003a3c:	2003      	movs	r0, #3
 8003a3e:	f009 ff89 	bl	800d954 <CreateLine>
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a42:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <ESP_Send+0x5c>)
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	250f      	movs	r5, #15
 8003a48:	197c      	adds	r4, r7, r5
 8003a4a:	1cbb      	adds	r3, r7, #2
 8003a4c:	881a      	ldrh	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	0019      	movs	r1, r3
 8003a52:	f012 fdf3 	bl	801663c <HAL_UART_Transmit_DMA>
 8003a56:	0003      	movs	r3, r0
 8003a58:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a5a:	197b      	adds	r3, r7, r5
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a62:	4a09      	ldr	r2, [pc, #36]	@ (8003a88 <ESP_Send+0x60>)
 8003a64:	4b09      	ldr	r3, [pc, #36]	@ (8003a8c <ESP_Send+0x64>)
 8003a66:	0019      	movs	r1, r3
 8003a68:	2001      	movs	r0, #1
 8003a6a:	f009 ff73 	bl	800d954 <CreateLine>
    return false;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <ESP_Send+0x4c>
  }
  return true;
 8003a72:	2301      	movs	r3, #1
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b004      	add	sp, #16
 8003a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7c:	080223f0 	.word	0x080223f0
 8003a80:	08022400 	.word	0x08022400
 8003a84:	20000440 	.word	0x20000440
 8003a88:	08022404 	.word	0x08022404
 8003a8c:	08022424 	.word	0x08022424

08003a90 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a90:	b5b0      	push	{r4, r5, r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	000a      	movs	r2, r1
 8003a9a:	1cbb      	adds	r3, r7, #2
 8003a9c:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b94 <ESP_Receive+0x104>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8003b98 <ESP_Receive+0x108>)
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	250f      	movs	r5, #15
 8003aaa:	197c      	adds	r4, r7, r5
 8003aac:	1cbb      	adds	r3, r7, #2
 8003aae:	881a      	ldrh	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	f012 fe52 	bl	801675c <HAL_UART_Receive_DMA>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003abc:	002c      	movs	r4, r5
 8003abe:	193b      	adds	r3, r7, r4
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d060      	beq.n	8003b88 <ESP_Receive+0xf8>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003ac6:	4b34      	ldr	r3, [pc, #208]	@ (8003b98 <ESP_Receive+0x108>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2284      	movs	r2, #132	@ 0x84
 8003acc:	589b      	ldr	r3, [r3, r2]
 8003ace:	4a33      	ldr	r2, [pc, #204]	@ (8003b9c <ESP_Receive+0x10c>)
 8003ad0:	4933      	ldr	r1, [pc, #204]	@ (8003ba0 <ESP_Receive+0x110>)
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f009 ff3e 	bl	800d954 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003ad8:	193b      	adds	r3, r7, r4
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2201      	movs	r2, #1
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d005      	beq.n	8003aee <ESP_Receive+0x5e>
      Error("Parity error in UART to ESP module");
 8003ae2:	4a30      	ldr	r2, [pc, #192]	@ (8003ba4 <ESP_Receive+0x114>)
 8003ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8003ba0 <ESP_Receive+0x110>)
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	2001      	movs	r0, #1
 8003aea:	f009 ff33 	bl	800d954 <CreateLine>
    }
    if (status & HAL_UART_ERROR_NE) {
 8003aee:	230f      	movs	r3, #15
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2202      	movs	r2, #2
 8003af6:	4013      	ands	r3, r2
 8003af8:	d005      	beq.n	8003b06 <ESP_Receive+0x76>
      Error("Noise error in UART to ESP module");
 8003afa:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba8 <ESP_Receive+0x118>)
 8003afc:	4b28      	ldr	r3, [pc, #160]	@ (8003ba0 <ESP_Receive+0x110>)
 8003afe:	0019      	movs	r1, r3
 8003b00:	2001      	movs	r0, #1
 8003b02:	f009 ff27 	bl	800d954 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003b06:	230f      	movs	r3, #15
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2204      	movs	r2, #4
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d005      	beq.n	8003b1e <ESP_Receive+0x8e>
      Error("Frame error in UART to ESP module");
 8003b12:	4a26      	ldr	r2, [pc, #152]	@ (8003bac <ESP_Receive+0x11c>)
 8003b14:	4b22      	ldr	r3, [pc, #136]	@ (8003ba0 <ESP_Receive+0x110>)
 8003b16:	0019      	movs	r1, r3
 8003b18:	2001      	movs	r0, #1
 8003b1a:	f009 ff1b 	bl	800d954 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003b1e:	230f      	movs	r3, #15
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2208      	movs	r2, #8
 8003b26:	4013      	ands	r3, r2
 8003b28:	d005      	beq.n	8003b36 <ESP_Receive+0xa6>
      Error("Overrun error in UART to ESP module");
 8003b2a:	4a21      	ldr	r2, [pc, #132]	@ (8003bb0 <ESP_Receive+0x120>)
 8003b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba0 <ESP_Receive+0x110>)
 8003b2e:	0019      	movs	r1, r3
 8003b30:	2001      	movs	r0, #1
 8003b32:	f009 ff0f 	bl	800d954 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003b36:	230f      	movs	r3, #15
 8003b38:	18fb      	adds	r3, r7, r3
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d005      	beq.n	8003b4e <ESP_Receive+0xbe>
      Error("DMA transfer error in UART to ESP module");
 8003b42:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb4 <ESP_Receive+0x124>)
 8003b44:	4b16      	ldr	r3, [pc, #88]	@ (8003ba0 <ESP_Receive+0x110>)
 8003b46:	0019      	movs	r1, r3
 8003b48:	2001      	movs	r0, #1
 8003b4a:	f009 ff03 	bl	800d954 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003b4e:	230f      	movs	r3, #15
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2220      	movs	r2, #32
 8003b56:	4013      	ands	r3, r2
 8003b58:	d005      	beq.n	8003b66 <ESP_Receive+0xd6>
      Error("Receiver Timeout error in UART to ESP module");
 8003b5a:	4a17      	ldr	r2, [pc, #92]	@ (8003bb8 <ESP_Receive+0x128>)
 8003b5c:	4b10      	ldr	r3, [pc, #64]	@ (8003ba0 <ESP_Receive+0x110>)
 8003b5e:	0019      	movs	r1, r3
 8003b60:	2001      	movs	r0, #1
 8003b62:	f009 fef7 	bl	800d954 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003b66:	230f      	movs	r3, #15
 8003b68:	18fb      	adds	r3, r7, r3
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2240      	movs	r2, #64	@ 0x40
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d005      	beq.n	8003b7e <ESP_Receive+0xee>
      Error("Invalid Callback error in UART to ESP module");
 8003b72:	4a12      	ldr	r2, [pc, #72]	@ (8003bbc <ESP_Receive+0x12c>)
 8003b74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba0 <ESP_Receive+0x110>)
 8003b76:	0019      	movs	r1, r3
 8003b78:	2001      	movs	r0, #1
 8003b7a:	f009 feeb 	bl	800d954 <CreateLine>
    }
#endif
    RxComplete = true;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ESP_Receive+0x104>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
    return false;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e000      	b.n	8003b8a <ESP_Receive+0xfa>
  }
  return true;
 8003b88:	2301      	movs	r3, #1
}
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b004      	add	sp, #16
 8003b90:	bdb0      	pop	{r4, r5, r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000444 	.word	0x20000444
 8003b98:	20000440 	.word	0x20000440
 8003b9c:	08022428 	.word	0x08022428
 8003ba0:	08022424 	.word	0x08022424
 8003ba4:	08022458 	.word	0x08022458
 8003ba8:	0802247c 	.word	0x0802247c
 8003bac:	080224a0 	.word	0x080224a0
 8003bb0:	080224c4 	.word	0x080224c4
 8003bb4:	080224e8 	.word	0x080224e8
 8003bb8:	08022514 	.word	0x08022514
 8003bbc:	08022544 	.word	0x08022544

08003bc0 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf4 <HAL_UART_ErrorCallback+0x34>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d10c      	bne.n	8003bec <HAL_UART_ErrorCallback+0x2c>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    if (huart->ErrorCode != 4) {
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2284      	movs	r2, #132	@ 0x84
 8003bd6:	589b      	ldr	r3, [r3, r2]
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d007      	beq.n	8003bec <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2284      	movs	r2, #132	@ 0x84
 8003be0:	589b      	ldr	r3, [r3, r2]
 8003be2:	4a05      	ldr	r2, [pc, #20]	@ (8003bf8 <HAL_UART_ErrorCallback+0x38>)
 8003be4:	4905      	ldr	r1, [pc, #20]	@ (8003bfc <HAL_UART_ErrorCallback+0x3c>)
 8003be6:	2003      	movs	r0, #3
 8003be8:	f009 feb4 	bl	800d954 <CreateLine>
    }
  }
}
 8003bec:	46c0      	nop			@ (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b002      	add	sp, #8
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000440 	.word	0x20000440
 8003bf8:	08022574 	.word	0x08022574
 8003bfc:	08022400 	.word	0x08022400

08003c00 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	e010      	b.n	8003c32 <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	001a      	movs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	1898      	adds	r0, r3, r2
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	18d3      	adds	r3, r2, r3
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	001a      	movs	r2, r3
 8003c24:	4b07      	ldr	r3, [pc, #28]	@ (8003c44 <uint8ArrayToString+0x44>)
 8003c26:	0019      	movs	r1, r3
 8003c28:	f01b faf2 	bl	801f210 <siprintf>
  for (int i = 0; i < 12; i++)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b0b      	cmp	r3, #11
 8003c36:	ddeb      	ble.n	8003c10 <uint8ArrayToString+0x10>
  }
}
 8003c38:	46c0      	nop			@ (mov r8, r8)
 8003c3a:	46c0      	nop			@ (mov r8, r8)
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b004      	add	sp, #16
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			@ (mov r8, r8)
 8003c44:	080225a0 	.word	0x080225a0

08003c48 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c4a:	b089      	sub	sp, #36	@ 0x24
 8003c4c:	af04      	add	r7, sp, #16
 8003c4e:	0002      	movs	r2, r0
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	701a      	strb	r2, [r3, #0]
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003c54:	4be5      	ldr	r3, [pc, #916]	@ (8003fec <CreateMessage+0x3a4>)
 8003c56:	48e6      	ldr	r0, [pc, #920]	@ (8003ff0 <CreateMessage+0x3a8>)
 8003c58:	220c      	movs	r2, #12
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	f7ff fd4c 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003c60:	4be4      	ldr	r3, [pc, #912]	@ (8003ff4 <CreateMessage+0x3ac>)
 8003c62:	48e5      	ldr	r0, [pc, #916]	@ (8003ff8 <CreateMessage+0x3b0>)
 8003c64:	220c      	movs	r2, #12
 8003c66:	0019      	movs	r1, r3
 8003c68:	f7ff fd46 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003c6c:	4be3      	ldr	r3, [pc, #908]	@ (8003ffc <CreateMessage+0x3b4>)
 8003c6e:	48e4      	ldr	r0, [pc, #912]	@ (8004000 <CreateMessage+0x3b8>)
 8003c70:	220c      	movs	r2, #12
 8003c72:	0019      	movs	r1, r3
 8003c74:	f7ff fd40 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003c78:	4be2      	ldr	r3, [pc, #904]	@ (8004004 <CreateMessage+0x3bc>)
 8003c7a:	48e3      	ldr	r0, [pc, #908]	@ (8004008 <CreateMessage+0x3c0>)
 8003c7c:	220c      	movs	r2, #12
 8003c7e:	0019      	movs	r1, r3
 8003c80:	f7ff fd3a 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003c84:	4be1      	ldr	r3, [pc, #900]	@ (800400c <CreateMessage+0x3c4>)
 8003c86:	48e2      	ldr	r0, [pc, #904]	@ (8004010 <CreateMessage+0x3c8>)
 8003c88:	220c      	movs	r2, #12
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	f7ff fd34 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003c90:	4be0      	ldr	r3, [pc, #896]	@ (8004014 <CreateMessage+0x3cc>)
 8003c92:	48e1      	ldr	r0, [pc, #900]	@ (8004018 <CreateMessage+0x3d0>)
 8003c94:	220c      	movs	r2, #12
 8003c96:	0019      	movs	r1, r3
 8003c98:	f7ff fd2e 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003c9c:	4bdf      	ldr	r3, [pc, #892]	@ (800401c <CreateMessage+0x3d4>)
 8003c9e:	48e0      	ldr	r0, [pc, #896]	@ (8004020 <CreateMessage+0x3d8>)
 8003ca0:	220c      	movs	r2, #12
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	f7ff fd28 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003ca8:	4bde      	ldr	r3, [pc, #888]	@ (8004024 <CreateMessage+0x3dc>)
 8003caa:	48df      	ldr	r0, [pc, #892]	@ (8004028 <CreateMessage+0x3e0>)
 8003cac:	220c      	movs	r2, #12
 8003cae:	0019      	movs	r1, r3
 8003cb0:	f7ff fd22 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003cb4:	f7ff fdd8 	bl	8003868 <checkName>
 8003cb8:	1e03      	subs	r3, r0, #0
 8003cba:	d006      	beq.n	8003cca <CreateMessage+0x82>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003cbc:	4bdb      	ldr	r3, [pc, #876]	@ (800402c <CreateMessage+0x3e4>)
 8003cbe:	48dc      	ldr	r0, [pc, #880]	@ (8004030 <CreateMessage+0x3e8>)
 8003cc0:	221e      	movs	r2, #30
 8003cc2:	0019      	movs	r1, r3
 8003cc4:	f7ff fd18 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003cc8:	e005      	b.n	8003cd6 <CreateMessage+0x8e>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003cca:	4bd8      	ldr	r3, [pc, #864]	@ (800402c <CreateMessage+0x3e4>)
 8003ccc:	4ad9      	ldr	r2, [pc, #868]	@ (8004034 <CreateMessage+0x3ec>)
 8003cce:	6811      	ldr	r1, [r2, #0]
 8003cd0:	6019      	str	r1, [r3, #0]
 8003cd2:	7912      	ldrb	r2, [r2, #4]
 8003cd4:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003cd6:	f7ff fd7d 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1024);
 8003cda:	2380      	movs	r3, #128	@ 0x80
 8003cdc:	00da      	lsls	r2, r3, #3
 8003cde:	4bd6      	ldr	r3, [pc, #856]	@ (8004038 <CreateMessage+0x3f0>)
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f01b fbd8 	bl	801f498 <memset>
  uint16_t index = 0;
 8003ce8:	260e      	movs	r6, #14
 8003cea:	19bb      	adds	r3, r7, r6
 8003cec:	2200      	movs	r2, #0
 8003cee:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003cf0:	19bb      	adds	r3, r7, r6
 8003cf2:	881a      	ldrh	r2, [r3, #0]
 8003cf4:	4bd0      	ldr	r3, [pc, #832]	@ (8004038 <CreateMessage+0x3f0>)
 8003cf6:	18d3      	adds	r3, r2, r3
 8003cf8:	4ad0      	ldr	r2, [pc, #832]	@ (800403c <CreateMessage+0x3f4>)
 8003cfa:	0011      	movs	r1, r2
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f01b fa87 	bl	801f210 <siprintf>
  index = strlen(message);
 8003d02:	4bcd      	ldr	r3, [pc, #820]	@ (8004038 <CreateMessage+0x3f0>)
 8003d04:	0018      	movs	r0, r3
 8003d06:	f7fc fa31 	bl	800016c <strlen>
 8003d0a:	0002      	movs	r2, r0
 8003d0c:	19bb      	adds	r3, r7, r6
 8003d0e:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003d10:	4ab6      	ldr	r2, [pc, #728]	@ (8003fec <CreateMessage+0x3a4>)
 8003d12:	4bcb      	ldr	r3, [pc, #812]	@ (8004040 <CreateMessage+0x3f8>)
 8003d14:	0011      	movs	r1, r2
 8003d16:	0018      	movs	r0, r3
 8003d18:	f7ff ff72 	bl	8003c00 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003d1c:	19bb      	adds	r3, r7, r6
 8003d1e:	881a      	ldrh	r2, [r3, #0]
 8003d20:	4bc5      	ldr	r3, [pc, #788]	@ (8004038 <CreateMessage+0x3f0>)
 8003d22:	18d4      	adds	r4, r2, r3
 8003d24:	4bc7      	ldr	r3, [pc, #796]	@ (8004044 <CreateMessage+0x3fc>)
 8003d26:	689d      	ldr	r5, [r3, #8]
 8003d28:	4bc7      	ldr	r3, [pc, #796]	@ (8004048 <CreateMessage+0x400>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	1c18      	adds	r0, r3, #0
 8003d2e:	f7ff fb99 	bl	8003464 <__aeabi_f2d>
 8003d32:	0002      	movs	r2, r0
 8003d34:	000b      	movs	r3, r1
 8003d36:	48bd      	ldr	r0, [pc, #756]	@ (800402c <CreateMessage+0x3e4>)
 8003d38:	49c4      	ldr	r1, [pc, #784]	@ (800404c <CreateMessage+0x404>)
 8003d3a:	9202      	str	r2, [sp, #8]
 8003d3c:	9303      	str	r3, [sp, #12]
 8003d3e:	4bc0      	ldr	r3, [pc, #768]	@ (8004040 <CreateMessage+0x3f8>)
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	0003      	movs	r3, r0
 8003d44:	002a      	movs	r2, r5
 8003d46:	0020      	movs	r0, r4
 8003d48:	f01b fa62 	bl	801f210 <siprintf>
  index = strlen(message);
 8003d4c:	4bba      	ldr	r3, [pc, #744]	@ (8004038 <CreateMessage+0x3f0>)
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f7fc fa0c 	bl	800016c <strlen>
 8003d54:	0002      	movs	r2, r0
 8003d56:	19bb      	adds	r3, r7, r6
 8003d58:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003d5a:	4aa6      	ldr	r2, [pc, #664]	@ (8003ff4 <CreateMessage+0x3ac>)
 8003d5c:	4bb8      	ldr	r3, [pc, #736]	@ (8004040 <CreateMessage+0x3f8>)
 8003d5e:	0011      	movs	r1, r2
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7ff ff4d 	bl	8003c00 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003d66:	19bb      	adds	r3, r7, r6
 8003d68:	881a      	ldrh	r2, [r3, #0]
 8003d6a:	4bb3      	ldr	r3, [pc, #716]	@ (8004038 <CreateMessage+0x3f0>)
 8003d6c:	18d4      	adds	r4, r2, r3
 8003d6e:	4bb5      	ldr	r3, [pc, #724]	@ (8004044 <CreateMessage+0x3fc>)
 8003d70:	689d      	ldr	r5, [r3, #8]
 8003d72:	4bb7      	ldr	r3, [pc, #732]	@ (8004050 <CreateMessage+0x408>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	1c18      	adds	r0, r3, #0
 8003d78:	f7ff fb74 	bl	8003464 <__aeabi_f2d>
 8003d7c:	0002      	movs	r2, r0
 8003d7e:	000b      	movs	r3, r1
 8003d80:	48aa      	ldr	r0, [pc, #680]	@ (800402c <CreateMessage+0x3e4>)
 8003d82:	49b4      	ldr	r1, [pc, #720]	@ (8004054 <CreateMessage+0x40c>)
 8003d84:	9202      	str	r2, [sp, #8]
 8003d86:	9303      	str	r3, [sp, #12]
 8003d88:	4bad      	ldr	r3, [pc, #692]	@ (8004040 <CreateMessage+0x3f8>)
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	002a      	movs	r2, r5
 8003d90:	0020      	movs	r0, r4
 8003d92:	f01b fa3d 	bl	801f210 <siprintf>
  index = strlen(message);
 8003d96:	4ba8      	ldr	r3, [pc, #672]	@ (8004038 <CreateMessage+0x3f0>)
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f7fc f9e7 	bl	800016c <strlen>
 8003d9e:	0002      	movs	r2, r0
 8003da0:	19bb      	adds	r3, r7, r6
 8003da2:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003da4:	4a95      	ldr	r2, [pc, #596]	@ (8003ffc <CreateMessage+0x3b4>)
 8003da6:	4ba6      	ldr	r3, [pc, #664]	@ (8004040 <CreateMessage+0x3f8>)
 8003da8:	0011      	movs	r1, r2
 8003daa:	0018      	movs	r0, r3
 8003dac:	f7ff ff28 	bl	8003c00 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBA);
 8003db0:	19bb      	adds	r3, r7, r6
 8003db2:	881a      	ldrh	r2, [r3, #0]
 8003db4:	4ba0      	ldr	r3, [pc, #640]	@ (8004038 <CreateMessage+0x3f0>)
 8003db6:	18d4      	adds	r4, r2, r3
 8003db8:	4ba2      	ldr	r3, [pc, #648]	@ (8004044 <CreateMessage+0x3fc>)
 8003dba:	689d      	ldr	r5, [r3, #8]
 8003dbc:	4ba6      	ldr	r3, [pc, #664]	@ (8004058 <CreateMessage+0x410>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	1c18      	adds	r0, r3, #0
 8003dc2:	f7ff fb4f 	bl	8003464 <__aeabi_f2d>
 8003dc6:	0002      	movs	r2, r0
 8003dc8:	000b      	movs	r3, r1
 8003dca:	4898      	ldr	r0, [pc, #608]	@ (800402c <CreateMessage+0x3e4>)
 8003dcc:	49a3      	ldr	r1, [pc, #652]	@ (800405c <CreateMessage+0x414>)
 8003dce:	9202      	str	r2, [sp, #8]
 8003dd0:	9303      	str	r3, [sp, #12]
 8003dd2:	4b9b      	ldr	r3, [pc, #620]	@ (8004040 <CreateMessage+0x3f8>)
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	002a      	movs	r2, r5
 8003dda:	0020      	movs	r0, r4
 8003ddc:	f01b fa18 	bl	801f210 <siprintf>
  index = strlen(message);
 8003de0:	4b95      	ldr	r3, [pc, #596]	@ (8004038 <CreateMessage+0x3f0>)
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7fc f9c2 	bl	800016c <strlen>
 8003de8:	0002      	movs	r2, r0
 8003dea:	19bb      	adds	r3, r7, r6
 8003dec:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003dee:	4a85      	ldr	r2, [pc, #532]	@ (8004004 <CreateMessage+0x3bc>)
 8003df0:	4b93      	ldr	r3, [pc, #588]	@ (8004040 <CreateMessage+0x3f8>)
 8003df2:	0011      	movs	r1, r2
 8003df4:	0018      	movs	r0, r3
 8003df6:	f7ff ff03 	bl	8003c00 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003dfa:	19bb      	adds	r3, r7, r6
 8003dfc:	881a      	ldrh	r2, [r3, #0]
 8003dfe:	4b8e      	ldr	r3, [pc, #568]	@ (8004038 <CreateMessage+0x3f0>)
 8003e00:	18d0      	adds	r0, r2, r3
 8003e02:	4b90      	ldr	r3, [pc, #576]	@ (8004044 <CreateMessage+0x3fc>)
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	4b96      	ldr	r3, [pc, #600]	@ (8004060 <CreateMessage+0x418>)
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	4c88      	ldr	r4, [pc, #544]	@ (800402c <CreateMessage+0x3e4>)
 8003e0c:	4995      	ldr	r1, [pc, #596]	@ (8004064 <CreateMessage+0x41c>)
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	4b8b      	ldr	r3, [pc, #556]	@ (8004040 <CreateMessage+0x3f8>)
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	0023      	movs	r3, r4
 8003e16:	f01b f9fb 	bl	801f210 <siprintf>
  index = strlen(message);
 8003e1a:	4b87      	ldr	r3, [pc, #540]	@ (8004038 <CreateMessage+0x3f0>)
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f7fc f9a5 	bl	800016c <strlen>
 8003e22:	0002      	movs	r2, r0
 8003e24:	19bb      	adds	r3, r7, r6
 8003e26:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003e28:	1dfb      	adds	r3, r7, #7
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	4053      	eors	r3, r2
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d100      	bne.n	8003e38 <CreateMessage+0x1f0>
 8003e36:	e094      	b.n	8003f62 <CreateMessage+0x31a>
    uint8ArrayToString(Buffer, batteryConfig);
 8003e38:	4a74      	ldr	r2, [pc, #464]	@ (800400c <CreateMessage+0x3c4>)
 8003e3a:	4b81      	ldr	r3, [pc, #516]	@ (8004040 <CreateMessage+0x3f8>)
 8003e3c:	0011      	movs	r1, r2
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f7ff fede 	bl	8003c00 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003e44:	19bb      	adds	r3, r7, r6
 8003e46:	881a      	ldrh	r2, [r3, #0]
 8003e48:	4b7b      	ldr	r3, [pc, #492]	@ (8004038 <CreateMessage+0x3f0>)
 8003e4a:	18d4      	adds	r4, r2, r3
 8003e4c:	4b7d      	ldr	r3, [pc, #500]	@ (8004044 <CreateMessage+0x3fc>)
 8003e4e:	689d      	ldr	r5, [r3, #8]
 8003e50:	4b85      	ldr	r3, [pc, #532]	@ (8004068 <CreateMessage+0x420>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	1c18      	adds	r0, r3, #0
 8003e56:	f7ff fb05 	bl	8003464 <__aeabi_f2d>
 8003e5a:	0002      	movs	r2, r0
 8003e5c:	000b      	movs	r3, r1
 8003e5e:	4873      	ldr	r0, [pc, #460]	@ (800402c <CreateMessage+0x3e4>)
 8003e60:	4982      	ldr	r1, [pc, #520]	@ (800406c <CreateMessage+0x424>)
 8003e62:	9202      	str	r2, [sp, #8]
 8003e64:	9303      	str	r3, [sp, #12]
 8003e66:	4b76      	ldr	r3, [pc, #472]	@ (8004040 <CreateMessage+0x3f8>)
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	0003      	movs	r3, r0
 8003e6c:	002a      	movs	r2, r5
 8003e6e:	0020      	movs	r0, r4
 8003e70:	f01b f9ce 	bl	801f210 <siprintf>
    index = strlen(message);
 8003e74:	4b70      	ldr	r3, [pc, #448]	@ (8004038 <CreateMessage+0x3f0>)
 8003e76:	0018      	movs	r0, r3
 8003e78:	f7fc f978 	bl	800016c <strlen>
 8003e7c:	0002      	movs	r2, r0
 8003e7e:	19bb      	adds	r3, r7, r6
 8003e80:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003e82:	4a64      	ldr	r2, [pc, #400]	@ (8004014 <CreateMessage+0x3cc>)
 8003e84:	4b6e      	ldr	r3, [pc, #440]	@ (8004040 <CreateMessage+0x3f8>)
 8003e86:	0011      	movs	r1, r2
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f7ff feb9 	bl	8003c00 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003e8e:	19bb      	adds	r3, r7, r6
 8003e90:	881a      	ldrh	r2, [r3, #0]
 8003e92:	4b69      	ldr	r3, [pc, #420]	@ (8004038 <CreateMessage+0x3f0>)
 8003e94:	18d4      	adds	r4, r2, r3
 8003e96:	4b6b      	ldr	r3, [pc, #428]	@ (8004044 <CreateMessage+0x3fc>)
 8003e98:	689d      	ldr	r5, [r3, #8]
 8003e9a:	4b75      	ldr	r3, [pc, #468]	@ (8004070 <CreateMessage+0x428>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	1c18      	adds	r0, r3, #0
 8003ea0:	f7ff fae0 	bl	8003464 <__aeabi_f2d>
 8003ea4:	0002      	movs	r2, r0
 8003ea6:	000b      	movs	r3, r1
 8003ea8:	4860      	ldr	r0, [pc, #384]	@ (800402c <CreateMessage+0x3e4>)
 8003eaa:	4972      	ldr	r1, [pc, #456]	@ (8004074 <CreateMessage+0x42c>)
 8003eac:	9202      	str	r2, [sp, #8]
 8003eae:	9303      	str	r3, [sp, #12]
 8003eb0:	4b63      	ldr	r3, [pc, #396]	@ (8004040 <CreateMessage+0x3f8>)
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	002a      	movs	r2, r5
 8003eb8:	0020      	movs	r0, r4
 8003eba:	f01b f9a9 	bl	801f210 <siprintf>
    index = strlen(message);
 8003ebe:	4b5e      	ldr	r3, [pc, #376]	@ (8004038 <CreateMessage+0x3f0>)
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f7fc f953 	bl	800016c <strlen>
 8003ec6:	0002      	movs	r2, r0
 8003ec8:	19bb      	adds	r3, r7, r6
 8003eca:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8003ecc:	4a53      	ldr	r2, [pc, #332]	@ (800401c <CreateMessage+0x3d4>)
 8003ece:	4b5c      	ldr	r3, [pc, #368]	@ (8004040 <CreateMessage+0x3f8>)
 8003ed0:	0011      	movs	r1, r2
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f7ff fe94 	bl	8003c00 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 8003ed8:	19bb      	adds	r3, r7, r6
 8003eda:	881a      	ldrh	r2, [r3, #0]
 8003edc:	4b56      	ldr	r3, [pc, #344]	@ (8004038 <CreateMessage+0x3f0>)
 8003ede:	18d4      	adds	r4, r2, r3
 8003ee0:	4b58      	ldr	r3, [pc, #352]	@ (8004044 <CreateMessage+0x3fc>)
 8003ee2:	689d      	ldr	r5, [r3, #8]
 8003ee4:	4b64      	ldr	r3, [pc, #400]	@ (8004078 <CreateMessage+0x430>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	1c18      	adds	r0, r3, #0
 8003eea:	f7ff fabb 	bl	8003464 <__aeabi_f2d>
 8003eee:	0002      	movs	r2, r0
 8003ef0:	000b      	movs	r3, r1
 8003ef2:	484e      	ldr	r0, [pc, #312]	@ (800402c <CreateMessage+0x3e4>)
 8003ef4:	4961      	ldr	r1, [pc, #388]	@ (800407c <CreateMessage+0x434>)
 8003ef6:	9202      	str	r2, [sp, #8]
 8003ef8:	9303      	str	r3, [sp, #12]
 8003efa:	4b51      	ldr	r3, [pc, #324]	@ (8004040 <CreateMessage+0x3f8>)
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	0003      	movs	r3, r0
 8003f00:	002a      	movs	r2, r5
 8003f02:	0020      	movs	r0, r4
 8003f04:	f01b f984 	bl	801f210 <siprintf>
    index = strlen(message);
 8003f08:	4b4b      	ldr	r3, [pc, #300]	@ (8004038 <CreateMessage+0x3f0>)
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f7fc f92e 	bl	800016c <strlen>
 8003f10:	0002      	movs	r2, r0
 8003f12:	19bb      	adds	r3, r7, r6
 8003f14:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 8003f16:	4a43      	ldr	r2, [pc, #268]	@ (8004024 <CreateMessage+0x3dc>)
 8003f18:	4b49      	ldr	r3, [pc, #292]	@ (8004040 <CreateMessage+0x3f8>)
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7ff fe6f 	bl	8003c00 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 8003f22:	19bb      	adds	r3, r7, r6
 8003f24:	881a      	ldrh	r2, [r3, #0]
 8003f26:	4b44      	ldr	r3, [pc, #272]	@ (8004038 <CreateMessage+0x3f0>)
 8003f28:	18d4      	adds	r4, r2, r3
 8003f2a:	4b46      	ldr	r3, [pc, #280]	@ (8004044 <CreateMessage+0x3fc>)
 8003f2c:	689d      	ldr	r5, [r3, #8]
 8003f2e:	4b54      	ldr	r3, [pc, #336]	@ (8004080 <CreateMessage+0x438>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	1c18      	adds	r0, r3, #0
 8003f34:	f7ff fa96 	bl	8003464 <__aeabi_f2d>
 8003f38:	0002      	movs	r2, r0
 8003f3a:	000b      	movs	r3, r1
 8003f3c:	483b      	ldr	r0, [pc, #236]	@ (800402c <CreateMessage+0x3e4>)
 8003f3e:	4951      	ldr	r1, [pc, #324]	@ (8004084 <CreateMessage+0x43c>)
 8003f40:	9202      	str	r2, [sp, #8]
 8003f42:	9303      	str	r3, [sp, #12]
 8003f44:	4b3e      	ldr	r3, [pc, #248]	@ (8004040 <CreateMessage+0x3f8>)
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	0003      	movs	r3, r0
 8003f4a:	002a      	movs	r2, r5
 8003f4c:	0020      	movs	r0, r4
 8003f4e:	f01b f95f 	bl	801f210 <siprintf>
    index = strlen(message);
 8003f52:	4b39      	ldr	r3, [pc, #228]	@ (8004038 <CreateMessage+0x3f0>)
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7fc f909 	bl	800016c <strlen>
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	19bb      	adds	r3, r7, r6
 8003f5e:	801a      	strh	r2, [r3, #0]
 8003f60:	e025      	b.n	8003fae <CreateMessage+0x366>

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003f62:	4a2a      	ldr	r2, [pc, #168]	@ (800400c <CreateMessage+0x3c4>)
 8003f64:	4b36      	ldr	r3, [pc, #216]	@ (8004040 <CreateMessage+0x3f8>)
 8003f66:	0011      	movs	r1, r2
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7ff fe49 	bl	8003c00 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003f6e:	260e      	movs	r6, #14
 8003f70:	19bb      	adds	r3, r7, r6
 8003f72:	881a      	ldrh	r2, [r3, #0]
 8003f74:	4b30      	ldr	r3, [pc, #192]	@ (8004038 <CreateMessage+0x3f0>)
 8003f76:	18d4      	adds	r4, r2, r3
 8003f78:	4b32      	ldr	r3, [pc, #200]	@ (8004044 <CreateMessage+0x3fc>)
 8003f7a:	689d      	ldr	r5, [r3, #8]
 8003f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8004068 <CreateMessage+0x420>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	1c18      	adds	r0, r3, #0
 8003f82:	f7ff fa6f 	bl	8003464 <__aeabi_f2d>
 8003f86:	0002      	movs	r2, r0
 8003f88:	000b      	movs	r3, r1
 8003f8a:	4828      	ldr	r0, [pc, #160]	@ (800402c <CreateMessage+0x3e4>)
 8003f8c:	493e      	ldr	r1, [pc, #248]	@ (8004088 <CreateMessage+0x440>)
 8003f8e:	9202      	str	r2, [sp, #8]
 8003f90:	9303      	str	r3, [sp, #12]
 8003f92:	4b2b      	ldr	r3, [pc, #172]	@ (8004040 <CreateMessage+0x3f8>)
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	0003      	movs	r3, r0
 8003f98:	002a      	movs	r2, r5
 8003f9a:	0020      	movs	r0, r4
 8003f9c:	f01b f938 	bl	801f210 <siprintf>
    index = strlen(message);
 8003fa0:	4b25      	ldr	r3, [pc, #148]	@ (8004038 <CreateMessage+0x3f0>)
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f7fc f8e2 	bl	800016c <strlen>
 8003fa8:	0002      	movs	r2, r0
 8003faa:	19bb      	adds	r3, r7, r6
 8003fac:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  Debug("Length of datagram: %d", index);
 8003fae:	240e      	movs	r4, #14
 8003fb0:	193b      	adds	r3, r7, r4
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	4a35      	ldr	r2, [pc, #212]	@ (800408c <CreateMessage+0x444>)
 8003fb6:	4936      	ldr	r1, [pc, #216]	@ (8004090 <CreateMessage+0x448>)
 8003fb8:	2003      	movs	r0, #3
 8003fba:	f009 fccb 	bl	800d954 <CreateLine>
  index = sprintf(&message[index], "]");
 8003fbe:	193b      	adds	r3, r7, r4
 8003fc0:	881a      	ldrh	r2, [r3, #0]
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8004038 <CreateMessage+0x3f0>)
 8003fc4:	18d3      	adds	r3, r2, r3
 8003fc6:	4a33      	ldr	r2, [pc, #204]	@ (8004094 <CreateMessage+0x44c>)
 8003fc8:	0011      	movs	r1, r2
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f01b f920 	bl	801f210 <siprintf>
 8003fd0:	0002      	movs	r2, r0
 8003fd2:	193b      	adds	r3, r7, r4
 8003fd4:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 8003fd6:	4b18      	ldr	r3, [pc, #96]	@ (8004038 <CreateMessage+0x3f0>)
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7fc f8c7 	bl	800016c <strlen>
 8003fde:	0003      	movs	r3, r0
 8003fe0:	b29b      	uxth	r3, r3
}
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b005      	add	sp, #20
 8003fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	200009e4 	.word	0x200009e4
 8003ff0:	0808000c 	.word	0x0808000c
 8003ff4:	200009f0 	.word	0x200009f0
 8003ff8:	08080018 	.word	0x08080018
 8003ffc:	200009fc 	.word	0x200009fc
 8004000:	08080048 	.word	0x08080048
 8004004:	20000a08 	.word	0x20000a08
 8004008:	08080030 	.word	0x08080030
 800400c:	20000a14 	.word	0x20000a14
 8004010:	0808006c 	.word	0x0808006c
 8004014:	20000a20 	.word	0x20000a20
 8004018:	08080078 	.word	0x08080078
 800401c:	20000a2c 	.word	0x20000a2c
 8004020:	08080054 	.word	0x08080054
 8004024:	20000a38 	.word	0x20000a38
 8004028:	08080060 	.word	0x08080060
 800402c:	20000a44 	.word	0x20000a44
 8004030:	08080090 	.word	0x08080090
 8004034:	08023fcc 	.word	0x08023fcc
 8004038:	20000584 	.word	0x20000584
 800403c:	080225a8 	.word	0x080225a8
 8004040:	20000a64 	.word	0x20000a64
 8004044:	20000550 	.word	0x20000550
 8004048:	20000564 	.word	0x20000564
 800404c:	080225ac 	.word	0x080225ac
 8004050:	20000568 	.word	0x20000568
 8004054:	08022600 	.word	0x08022600
 8004058:	20000578 	.word	0x20000578
 800405c:	08022658 	.word	0x08022658
 8004060:	20000574 	.word	0x20000574
 8004064:	080226b4 	.word	0x080226b4
 8004068:	2000056c 	.word	0x2000056c
 800406c:	08022708 	.word	0x08022708
 8004070:	20000570 	.word	0x20000570
 8004074:	08022768 	.word	0x08022768
 8004078:	2000057c 	.word	0x2000057c
 800407c:	080227c8 	.word	0x080227c8
 8004080:	20000580 	.word	0x20000580
 8004084:	08022824 	.word	0x08022824
 8004088:	0802287c 	.word	0x0802287c
 800408c:	080228d4 	.word	0x080228d4
 8004090:	08022400 	.word	0x08022400
 8004094:	080228ec 	.word	0x080228ec

08004098 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 800409c:	2064      	movs	r0, #100	@ 0x64
 800409e:	f00a f801 	bl	800e0a4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80040a2:	4b15      	ldr	r3, [pc, #84]	@ (80040f8 <StartProg+0x60>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	2101      	movs	r1, #1
 80040a8:	0018      	movs	r0, r3
 80040aa:	f00b fa6c 	bl	800f586 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80040ae:	2064      	movs	r0, #100	@ 0x64
 80040b0:	f009 fff8 	bl	800e0a4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80040b4:	4b10      	ldr	r3, [pc, #64]	@ (80040f8 <StartProg+0x60>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	2102      	movs	r1, #2
 80040ba:	0018      	movs	r0, r3
 80040bc:	f00b fa63 	bl	800f586 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80040c0:	23fa      	movs	r3, #250	@ 0xfa
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	0018      	movs	r0, r3
 80040c6:	f009 ffed 	bl	800e0a4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80040ca:	4b0b      	ldr	r3, [pc, #44]	@ (80040f8 <StartProg+0x60>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	2101      	movs	r1, #1
 80040d0:	0018      	movs	r0, r3
 80040d2:	f00b fa58 	bl	800f586 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80040d6:	23fa      	movs	r3, #250	@ 0xfa
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	0018      	movs	r0, r3
 80040dc:	f009 ffe2 	bl	800e0a4 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80040e0:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <StartProg+0x60>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	2102      	movs	r1, #2
 80040e6:	0018      	movs	r0, r3
 80040e8:	f00b fa4d 	bl	800f586 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 80040ec:	2028      	movs	r0, #40	@ 0x28
 80040ee:	f009 ffd9 	bl	800e0a4 <HAL_Delay>
}
 80040f2:	46c0      	nop			@ (mov r8, r8)
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	50001c00 	.word	0x50001c00

080040fc <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 80040fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040fe:	b0d9      	sub	sp, #356	@ 0x164
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	0008      	movs	r0, r1
 8004106:	0011      	movs	r1, r2
 8004108:	4ba1      	ldr	r3, [pc, #644]	@ (8004390 <ParseBuffer+0x294>)
 800410a:	24b0      	movs	r4, #176	@ 0xb0
 800410c:	0064      	lsls	r4, r4, #1
 800410e:	191b      	adds	r3, r3, r4
 8004110:	19db      	adds	r3, r3, r7
 8004112:	1c02      	adds	r2, r0, #0
 8004114:	801a      	strh	r2, [r3, #0]
 8004116:	4b9f      	ldr	r3, [pc, #636]	@ (8004394 <ParseBuffer+0x298>)
 8004118:	191b      	adds	r3, r3, r4
 800411a:	19db      	adds	r3, r3, r7
 800411c:	1c0a      	adds	r2, r1, #0
 800411e:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8004120:	2380      	movs	r3, #128	@ 0x80
 8004122:	005a      	lsls	r2, r3, #1
 8004124:	2348      	movs	r3, #72	@ 0x48
 8004126:	18fb      	adds	r3, r7, r3
 8004128:	2100      	movs	r1, #0
 800412a:	0018      	movs	r0, r3
 800412c:	f01b f9b4 	bl	801f498 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8004130:	2360      	movs	r3, #96	@ 0x60
 8004132:	33ff      	adds	r3, #255	@ 0xff
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	2203      	movs	r2, #3
 8004138:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800413a:	23ae      	movs	r3, #174	@ 0xae
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	18fb      	adds	r3, r7, r3
 8004140:	2200      	movs	r2, #0
 8004142:	801a      	strh	r2, [r3, #0]
 8004144:	e013      	b.n	800416e <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8004146:	20ae      	movs	r0, #174	@ 0xae
 8004148:	0040      	lsls	r0, r0, #1
 800414a:	183b      	adds	r3, r7, r0
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	18d2      	adds	r2, r2, r3
 8004152:	183b      	adds	r3, r7, r0
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	7811      	ldrb	r1, [r2, #0]
 8004158:	4a8f      	ldr	r2, [pc, #572]	@ (8004398 <ParseBuffer+0x29c>)
 800415a:	24b0      	movs	r4, #176	@ 0xb0
 800415c:	0064      	lsls	r4, r4, #1
 800415e:	1912      	adds	r2, r2, r4
 8004160:	19d2      	adds	r2, r2, r7
 8004162:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8004164:	183b      	adds	r3, r7, r0
 8004166:	881a      	ldrh	r2, [r3, #0]
 8004168:	183b      	adds	r3, r7, r0
 800416a:	3201      	adds	r2, #1
 800416c:	801a      	strh	r2, [r3, #0]
 800416e:	23ae      	movs	r3, #174	@ 0xae
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	18fa      	adds	r2, r7, r3
 8004174:	4b86      	ldr	r3, [pc, #536]	@ (8004390 <ParseBuffer+0x294>)
 8004176:	24b0      	movs	r4, #176	@ 0xb0
 8004178:	0064      	lsls	r4, r4, #1
 800417a:	191b      	adds	r3, r3, r4
 800417c:	19db      	adds	r3, r3, r7
 800417e:	8812      	ldrh	r2, [r2, #0]
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d3df      	bcc.n	8004146 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8004186:	4b82      	ldr	r3, [pc, #520]	@ (8004390 <ParseBuffer+0x294>)
 8004188:	191b      	adds	r3, r3, r4
 800418a:	19db      	adds	r3, r3, r7
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	4a82      	ldr	r2, [pc, #520]	@ (8004398 <ParseBuffer+0x29c>)
 8004190:	1912      	adds	r2, r2, r4
 8004192:	19d2      	adds	r2, r2, r7
 8004194:	2100      	movs	r1, #0
 8004196:	54d1      	strb	r1, [r2, r3]
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 8004198:	2648      	movs	r6, #72	@ 0x48
 800419a:	19bb      	adds	r3, r7, r6
 800419c:	4a7f      	ldr	r2, [pc, #508]	@ (800439c <ParseBuffer+0x2a0>)
 800419e:	4980      	ldr	r1, [pc, #512]	@ (80043a0 <ParseBuffer+0x2a4>)
 80041a0:	2003      	movs	r0, #3
 80041a2:	f009 fbd7 	bl	800d954 <CreateLine>
#endif
  char * ParsePoint = 0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	22ac      	movs	r2, #172	@ 0xac
 80041aa:	0052      	lsls	r2, r2, #1
 80041ac:	18b9      	adds	r1, r7, r2
 80041ae:	600b      	str	r3, [r1, #0]
  const char OK[] = AT_RESPONSE_OK;
 80041b0:	4b7c      	ldr	r3, [pc, #496]	@ (80043a4 <ParseBuffer+0x2a8>)
 80041b2:	0025      	movs	r5, r4
 80041b4:	195b      	adds	r3, r3, r5
 80041b6:	19db      	adds	r3, r3, r7
 80041b8:	4a7b      	ldr	r2, [pc, #492]	@ (80043a8 <ParseBuffer+0x2ac>)
 80041ba:	8811      	ldrh	r1, [r2, #0]
 80041bc:	8019      	strh	r1, [r3, #0]
 80041be:	7892      	ldrb	r2, [r2, #2]
 80041c0:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80041c2:	4b7a      	ldr	r3, [pc, #488]	@ (80043ac <ParseBuffer+0x2b0>)
 80041c4:	195b      	adds	r3, r3, r5
 80041c6:	19db      	adds	r3, r3, r7
 80041c8:	4a79      	ldr	r2, [pc, #484]	@ (80043b0 <ParseBuffer+0x2b4>)
 80041ca:	6811      	ldr	r1, [r2, #0]
 80041cc:	6019      	str	r1, [r3, #0]
 80041ce:	8892      	ldrh	r2, [r2, #4]
 80041d0:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 80041d2:	4b78      	ldr	r3, [pc, #480]	@ (80043b4 <ParseBuffer+0x2b8>)
 80041d4:	195b      	adds	r3, r3, r5
 80041d6:	19db      	adds	r3, r3, r7
 80041d8:	4a77      	ldr	r2, [pc, #476]	@ (80043b8 <ParseBuffer+0x2bc>)
 80041da:	6811      	ldr	r1, [r2, #0]
 80041dc:	6019      	str	r1, [r3, #0]
 80041de:	7912      	ldrb	r2, [r2, #4]
 80041e0:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 80041e2:	4b76      	ldr	r3, [pc, #472]	@ (80043bc <ParseBuffer+0x2c0>)
 80041e4:	195b      	adds	r3, r3, r5
 80041e6:	19db      	adds	r3, r3, r7
 80041e8:	4a75      	ldr	r2, [pc, #468]	@ (80043c0 <ParseBuffer+0x2c4>)
 80041ea:	6811      	ldr	r1, [r2, #0]
 80041ec:	6019      	str	r1, [r3, #0]
 80041ee:	8892      	ldrh	r2, [r2, #4]
 80041f0:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 80041f2:	4b74      	ldr	r3, [pc, #464]	@ (80043c4 <ParseBuffer+0x2c8>)
 80041f4:	195b      	adds	r3, r3, r5
 80041f6:	19db      	adds	r3, r3, r7
 80041f8:	223e      	movs	r2, #62	@ 0x3e
 80041fa:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 80041fc:	4b72      	ldr	r3, [pc, #456]	@ (80043c8 <ParseBuffer+0x2cc>)
 80041fe:	195b      	adds	r3, r3, r5
 8004200:	19db      	adds	r3, r3, r7
 8004202:	4a72      	ldr	r2, [pc, #456]	@ (80043cc <ParseBuffer+0x2d0>)
 8004204:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004206:	c313      	stmia	r3!, {r0, r1, r4}
 8004208:	8811      	ldrh	r1, [r2, #0]
 800420a:	8019      	strh	r1, [r3, #0]
 800420c:	7892      	ldrb	r2, [r2, #2]
 800420e:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004210:	4b6f      	ldr	r3, [pc, #444]	@ (80043d0 <ParseBuffer+0x2d4>)
 8004212:	195b      	adds	r3, r3, r5
 8004214:	19db      	adds	r3, r3, r7
 8004216:	4a6f      	ldr	r2, [pc, #444]	@ (80043d4 <ParseBuffer+0x2d8>)
 8004218:	ca13      	ldmia	r2!, {r0, r1, r4}
 800421a:	c313      	stmia	r3!, {r0, r1, r4}
 800421c:	8812      	ldrh	r2, [r2, #0]
 800421e:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8004220:	4b5c      	ldr	r3, [pc, #368]	@ (8004394 <ParseBuffer+0x298>)
 8004222:	195b      	adds	r3, r3, r5
 8004224:	19db      	adds	r3, r3, r7
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10b      	bne.n	8004244 <ParseBuffer+0x148>
    ParsePoint = strstr(tempBuf, OK);
 800422c:	2344      	movs	r3, #68	@ 0x44
 800422e:	18fa      	adds	r2, r7, r3
 8004230:	19bb      	adds	r3, r7, r6
 8004232:	0011      	movs	r1, r2
 8004234:	0018      	movs	r0, r3
 8004236:	f01b f96a 	bl	801f50e <strstr>
 800423a:	0003      	movs	r3, r0
 800423c:	22ac      	movs	r2, #172	@ 0xac
 800423e:	0052      	lsls	r2, r2, #1
 8004240:	18ba      	adds	r2, r7, r2
 8004242:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004244:	4b53      	ldr	r3, [pc, #332]	@ (8004394 <ParseBuffer+0x298>)
 8004246:	22b0      	movs	r2, #176	@ 0xb0
 8004248:	0052      	lsls	r2, r2, #1
 800424a:	189b      	adds	r3, r3, r2
 800424c:	19db      	adds	r3, r3, r7
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d10c      	bne.n	800426e <ParseBuffer+0x172>
    ParsePoint = strstr(tempBuf, ready);
 8004254:	232c      	movs	r3, #44	@ 0x2c
 8004256:	18fa      	adds	r2, r7, r3
 8004258:	2348      	movs	r3, #72	@ 0x48
 800425a:	18fb      	adds	r3, r7, r3
 800425c:	0011      	movs	r1, r2
 800425e:	0018      	movs	r0, r3
 8004260:	f01b f955 	bl	801f50e <strstr>
 8004264:	0003      	movs	r3, r0
 8004266:	22ac      	movs	r2, #172	@ 0xac
 8004268:	0052      	lsls	r2, r2, #1
 800426a:	18ba      	adds	r2, r7, r2
 800426c:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 800426e:	4b49      	ldr	r3, [pc, #292]	@ (8004394 <ParseBuffer+0x298>)
 8004270:	22b0      	movs	r2, #176	@ 0xb0
 8004272:	0052      	lsls	r2, r2, #1
 8004274:	189b      	adds	r3, r3, r2
 8004276:	19db      	adds	r3, r3, r7
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d10c      	bne.n	8004298 <ParseBuffer+0x19c>
    ParsePoint = strstr(tempBuf, start);
 800427e:	2328      	movs	r3, #40	@ 0x28
 8004280:	18fa      	adds	r2, r7, r3
 8004282:	2348      	movs	r3, #72	@ 0x48
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	0011      	movs	r1, r2
 8004288:	0018      	movs	r0, r3
 800428a:	f01b f940 	bl	801f50e <strstr>
 800428e:	0003      	movs	r3, r0
 8004290:	22ac      	movs	r2, #172	@ 0xac
 8004292:	0052      	lsls	r2, r2, #1
 8004294:	18ba      	adds	r2, r7, r2
 8004296:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8004298:	4b3e      	ldr	r3, [pc, #248]	@ (8004394 <ParseBuffer+0x298>)
 800429a:	22b0      	movs	r2, #176	@ 0xb0
 800429c:	0052      	lsls	r2, r2, #1
 800429e:	189b      	adds	r3, r3, r2
 80042a0:	19db      	adds	r3, r3, r7
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b05      	cmp	r3, #5
 80042a6:	d10c      	bne.n	80042c2 <ParseBuffer+0x1c6>
    ParsePoint = strstr(tempBuf, TIME);
 80042a8:	2308      	movs	r3, #8
 80042aa:	18fa      	adds	r2, r7, r3
 80042ac:	2348      	movs	r3, #72	@ 0x48
 80042ae:	18fb      	adds	r3, r7, r3
 80042b0:	0011      	movs	r1, r2
 80042b2:	0018      	movs	r0, r3
 80042b4:	f01b f92b 	bl	801f50e <strstr>
 80042b8:	0003      	movs	r3, r0
 80042ba:	22ac      	movs	r2, #172	@ 0xac
 80042bc:	0052      	lsls	r2, r2, #1
 80042be:	18ba      	adds	r2, r7, r2
 80042c0:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80042c2:	233c      	movs	r3, #60	@ 0x3c
 80042c4:	18fa      	adds	r2, r7, r3
 80042c6:	2448      	movs	r4, #72	@ 0x48
 80042c8:	193b      	adds	r3, r7, r4
 80042ca:	0011      	movs	r1, r2
 80042cc:	0018      	movs	r0, r3
 80042ce:	f01b f91e 	bl	801f50e <strstr>
 80042d2:	0003      	movs	r3, r0
 80042d4:	22aa      	movs	r2, #170	@ 0xaa
 80042d6:	0052      	lsls	r2, r2, #1
 80042d8:	18ba      	adds	r2, r7, r2
 80042da:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80042dc:	2318      	movs	r3, #24
 80042de:	18fa      	adds	r2, r7, r3
 80042e0:	193b      	adds	r3, r7, r4
 80042e2:	0011      	movs	r1, r2
 80042e4:	0018      	movs	r0, r3
 80042e6:	f01b f912 	bl	801f50e <strstr>
 80042ea:	0003      	movs	r3, r0
 80042ec:	22a8      	movs	r2, #168	@ 0xa8
 80042ee:	0052      	lsls	r2, r2, #1
 80042f0:	18ba      	adds	r2, r7, r2
 80042f2:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 80042f4:	4a38      	ldr	r2, [pc, #224]	@ (80043d8 <ParseBuffer+0x2dc>)
 80042f6:	193b      	adds	r3, r7, r4
 80042f8:	0011      	movs	r1, r2
 80042fa:	0018      	movs	r0, r3
 80042fc:	f01b f907 	bl	801f50e <strstr>
 8004300:	0003      	movs	r3, r0
 8004302:	22a6      	movs	r2, #166	@ 0xa6
 8004304:	0052      	lsls	r2, r2, #1
 8004306:	18ba      	adds	r2, r7, r2
 8004308:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800430a:	2334      	movs	r3, #52	@ 0x34
 800430c:	18fa      	adds	r2, r7, r3
 800430e:	193b      	adds	r3, r7, r4
 8004310:	0011      	movs	r1, r2
 8004312:	0018      	movs	r0, r3
 8004314:	f01b f8fb 	bl	801f50e <strstr>
 8004318:	0003      	movs	r3, r0
 800431a:	22a4      	movs	r2, #164	@ 0xa4
 800431c:	0052      	lsls	r2, r2, #1
 800431e:	18ba      	adds	r2, r7, r2
 8004320:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004322:	4b1b      	ldr	r3, [pc, #108]	@ (8004390 <ParseBuffer+0x294>)
 8004324:	21b0      	movs	r1, #176	@ 0xb0
 8004326:	0049      	lsls	r1, r1, #1
 8004328:	185b      	adds	r3, r3, r1
 800432a:	19db      	adds	r3, r3, r7
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d800      	bhi.n	8004334 <ParseBuffer+0x238>
 8004332:	e0c0      	b.n	80044b6 <ParseBuffer+0x3ba>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004334:	22ac      	movs	r2, #172	@ 0xac
 8004336:	0052      	lsls	r2, r2, #1
 8004338:	18bb      	adds	r3, r7, r2
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d053      	beq.n	80043e8 <ParseBuffer+0x2ec>
 8004340:	18bb      	adds	r3, r7, r2
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b4f      	cmp	r3, #79	@ 0x4f
 8004348:	d14e      	bne.n	80043e8 <ParseBuffer+0x2ec>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 800434a:	2360      	movs	r3, #96	@ 0x60
 800434c:	33ff      	adds	r3, #255	@ 0xff
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004354:	4b21      	ldr	r3, [pc, #132]	@ (80043dc <ParseBuffer+0x2e0>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b12      	cmp	r3, #18
 800435a:	d145      	bne.n	80043e8 <ParseBuffer+0x2ec>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800435c:	4b0c      	ldr	r3, [pc, #48]	@ (8004390 <ParseBuffer+0x294>)
 800435e:	185b      	adds	r3, r3, r1
 8004360:	19db      	adds	r3, r3, r7
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	2b2b      	cmp	r3, #43	@ 0x2b
 8004366:	d10b      	bne.n	8004380 <ParseBuffer+0x284>
 8004368:	4b0b      	ldr	r3, [pc, #44]	@ (8004398 <ParseBuffer+0x29c>)
 800436a:	185b      	adds	r3, r3, r1
 800436c:	19db      	adds	r3, r3, r7
 800436e:	2221      	movs	r2, #33	@ 0x21
 8004370:	5c9b      	ldrb	r3, [r3, r2]
 8004372:	2b32      	cmp	r3, #50	@ 0x32
 8004374:	d104      	bne.n	8004380 <ParseBuffer+0x284>
          ParseTime(tempBuf);
 8004376:	193b      	adds	r3, r7, r4
 8004378:	0018      	movs	r0, r3
 800437a:	f002 f8c7 	bl	800650c <ParseTime>
 800437e:	e033      	b.n	80043e8 <ParseBuffer+0x2ec>
        }
        else {
          Error("Error getting time");
 8004380:	4a17      	ldr	r2, [pc, #92]	@ (80043e0 <ParseBuffer+0x2e4>)
 8004382:	4b18      	ldr	r3, [pc, #96]	@ (80043e4 <ParseBuffer+0x2e8>)
 8004384:	0019      	movs	r1, r3
 8004386:	2001      	movs	r0, #1
 8004388:	f009 fae4 	bl	800d954 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800438c:	2306      	movs	r3, #6
 800438e:	e096      	b.n	80044be <ParseBuffer+0x3c2>
 8004390:	fffffea2 	.word	0xfffffea2
 8004394:	fffffea1 	.word	0xfffffea1
 8004398:	fffffee8 	.word	0xfffffee8
 800439c:	080228f0 	.word	0x080228f0
 80043a0:	08022400 	.word	0x08022400
 80043a4:	fffffee4 	.word	0xfffffee4
 80043a8:	0802291c 	.word	0x0802291c
 80043ac:	fffffedc 	.word	0xfffffedc
 80043b0:	08022920 	.word	0x08022920
 80043b4:	fffffed4 	.word	0xfffffed4
 80043b8:	08022928 	.word	0x08022928
 80043bc:	fffffecc 	.word	0xfffffecc
 80043c0:	08022930 	.word	0x08022930
 80043c4:	fffffec8 	.word	0xfffffec8
 80043c8:	fffffeb8 	.word	0xfffffeb8
 80043cc:	08022938 	.word	0x08022938
 80043d0:	fffffea8 	.word	0xfffffea8
 80043d4:	08022948 	.word	0x08022948
 80043d8:	08023fa8 	.word	0x08023fa8
 80043dc:	200009a2 	.word	0x200009a2
 80043e0:	08022908 	.word	0x08022908
 80043e4:	08022424 	.word	0x08022424
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80043e8:	22ac      	movs	r2, #172	@ 0xac
 80043ea:	0052      	lsls	r2, r2, #1
 80043ec:	18bb      	adds	r3, r7, r2
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d009      	beq.n	8004408 <ParseBuffer+0x30c>
 80043f4:	18bb      	adds	r3, r7, r2
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b72      	cmp	r3, #114	@ 0x72
 80043fc:	d104      	bne.n	8004408 <ParseBuffer+0x30c>
      status = RECEIVE_STATUS_READY;
 80043fe:	2360      	movs	r3, #96	@ 0x60
 8004400:	33ff      	adds	r3, #255	@ 0xff
 8004402:	18fb      	adds	r3, r7, r3
 8004404:	2202      	movs	r2, #2
 8004406:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8004408:	22ac      	movs	r2, #172	@ 0xac
 800440a:	0052      	lsls	r2, r2, #1
 800440c:	18bb      	adds	r3, r7, r2
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d009      	beq.n	8004428 <ParseBuffer+0x32c>
 8004414:	18bb      	adds	r3, r7, r2
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b3e      	cmp	r3, #62	@ 0x3e
 800441c:	d104      	bne.n	8004428 <ParseBuffer+0x32c>
      status = RECEIVE_STATUS_START;
 800441e:	2360      	movs	r3, #96	@ 0x60
 8004420:	33ff      	adds	r3, #255	@ 0xff
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	2205      	movs	r2, #5
 8004426:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8004428:	22ac      	movs	r2, #172	@ 0xac
 800442a:	0052      	lsls	r2, r2, #1
 800442c:	18bb      	adds	r3, r7, r2
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d009      	beq.n	8004448 <ParseBuffer+0x34c>
 8004434:	18bb      	adds	r3, r7, r2
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b2b      	cmp	r3, #43	@ 0x2b
 800443c:	d104      	bne.n	8004448 <ParseBuffer+0x34c>
      status = RECEIVE_STATUS_TIME;
 800443e:	2360      	movs	r3, #96	@ 0x60
 8004440:	33ff      	adds	r3, #255	@ 0xff
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	220b      	movs	r2, #11
 8004446:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8004448:	22aa      	movs	r2, #170	@ 0xaa
 800444a:	0052      	lsls	r2, r2, #1
 800444c:	18bb      	adds	r3, r7, r2
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d004      	beq.n	800445e <ParseBuffer+0x362>
 8004454:	18bb      	adds	r3, r7, r2
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2b45      	cmp	r3, #69	@ 0x45
 800445c:	d00a      	beq.n	8004474 <ParseBuffer+0x378>
 800445e:	22a4      	movs	r2, #164	@ 0xa4
 8004460:	0052      	lsls	r2, r2, #1
 8004462:	18bb      	adds	r3, r7, r2
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <ParseBuffer+0x382>
 800446a:	18bb      	adds	r3, r7, r2
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b46      	cmp	r3, #70	@ 0x46
 8004472:	d104      	bne.n	800447e <ParseBuffer+0x382>
      status = RECEIVE_STATUS_ERROR;
 8004474:	2360      	movs	r3, #96	@ 0x60
 8004476:	33ff      	adds	r3, #255	@ 0xff
 8004478:	18fb      	adds	r3, r7, r3
 800447a:	2201      	movs	r2, #1
 800447c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 800447e:	22a8      	movs	r2, #168	@ 0xa8
 8004480:	0052      	lsls	r2, r2, #1
 8004482:	18bb      	adds	r3, r7, r2
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d007      	beq.n	800449a <ParseBuffer+0x39e>
 800448a:	18bb      	adds	r3, r7, r2
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b57      	cmp	r3, #87	@ 0x57
 8004492:	d102      	bne.n	800449a <ParseBuffer+0x39e>
      ConnectionMade = true;
 8004494:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <ParseBuffer+0x3cc>)
 8004496:	2201      	movs	r2, #1
 8004498:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800449a:	22a6      	movs	r2, #166	@ 0xa6
 800449c:	0052      	lsls	r2, r2, #1
 800449e:	18bb      	adds	r3, r7, r2
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <ParseBuffer+0x3ba>
 80044a6:	18bb      	adds	r3, r7, r2
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b32      	cmp	r3, #50	@ 0x32
 80044ae:	d102      	bne.n	80044b6 <ParseBuffer+0x3ba>
      beurs = true;
 80044b0:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <ParseBuffer+0x3d0>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80044b6:	2360      	movs	r3, #96	@ 0x60
 80044b8:	33ff      	adds	r3, #255	@ 0xff
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	781b      	ldrb	r3, [r3, #0]

}
 80044be:	0018      	movs	r0, r3
 80044c0:	46bd      	mov	sp, r7
 80044c2:	b059      	add	sp, #356	@ 0x164
 80044c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044c6:	46c0      	nop			@ (mov r8, r8)
 80044c8:	2000054c 	.word	0x2000054c
 80044cc:	2000054e 	.word	0x2000054e

080044d0 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80044d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004504 <PollAwake+0x34>)
 80044d8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	0018      	movs	r0, r3
 80044de:	f7fb fe45 	bl	800016c <strlen>
 80044e2:	0003      	movs	r3, r0
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	0011      	movs	r1, r2
 80044ea:	0018      	movs	r0, r3
 80044ec:	f7ff fa9c 	bl	8003a28 <ESP_Send>
 80044f0:	1e03      	subs	r3, r0, #0
 80044f2:	d001      	beq.n	80044f8 <PollAwake+0x28>
    return true;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e000      	b.n	80044fa <PollAwake+0x2a>
  }
  else{
    return false;
 80044f8:	2300      	movs	r3, #0
  }
}
 80044fa:	0018      	movs	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b002      	add	sp, #8
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	08022958 	.word	0x08022958

08004508 <RFPower>:
bool RFPower(){
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800450e:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <RFPower+0x34>)
 8004510:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	0018      	movs	r0, r3
 8004516:	f7fb fe29 	bl	800016c <strlen>
 800451a:	0003      	movs	r3, r0
 800451c:	b29a      	uxth	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	0011      	movs	r1, r2
 8004522:	0018      	movs	r0, r3
 8004524:	f7ff fa80 	bl	8003a28 <ESP_Send>
 8004528:	1e03      	subs	r3, r0, #0
 800452a:	d001      	beq.n	8004530 <RFPower+0x28>
    return true;
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <RFPower+0x2a>
  }
  else{
    return false;
 8004530:	2300      	movs	r3, #0
  }
}
 8004532:	0018      	movs	r0, r3
 8004534:	46bd      	mov	sp, r7
 8004536:	b002      	add	sp, #8
 8004538:	bd80      	pop	{r7, pc}
 800453a:	46c0      	nop			@ (mov r8, r8)
 800453c:	08022960 	.word	0x08022960

08004540 <CheckRFPower>:
bool CheckRFPower(){
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8004546:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <CheckRFPower+0x34>)
 8004548:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	0018      	movs	r0, r3
 800454e:	f7fb fe0d 	bl	800016c <strlen>
 8004552:	0003      	movs	r3, r0
 8004554:	b29a      	uxth	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	0011      	movs	r1, r2
 800455a:	0018      	movs	r0, r3
 800455c:	f7ff fa64 	bl	8003a28 <ESP_Send>
 8004560:	1e03      	subs	r3, r0, #0
 8004562:	d001      	beq.n	8004568 <CheckRFPower+0x28>
    return true;
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <CheckRFPower+0x2a>
  }
  else{
    return false;
 8004568:	2300      	movs	r3, #0
  }
}
 800456a:	0018      	movs	r0, r3
 800456c:	46bd      	mov	sp, r7
 800456e:	b002      	add	sp, #8
 8004570:	bd80      	pop	{r7, pc}
 8004572:	46c0      	nop			@ (mov r8, r8)
 8004574:	08022970 	.word	0x08022970

08004578 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 800457e:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <ATRestore+0x34>)
 8004580:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	0018      	movs	r0, r3
 8004586:	f7fb fdf1 	bl	800016c <strlen>
 800458a:	0003      	movs	r3, r0
 800458c:	b29a      	uxth	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	0011      	movs	r1, r2
 8004592:	0018      	movs	r0, r3
 8004594:	f7ff fa48 	bl	8003a28 <ESP_Send>
 8004598:	1e03      	subs	r3, r0, #0
 800459a:	d001      	beq.n	80045a0 <ATRestore+0x28>
    return true;
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <ATRestore+0x2a>
  }
  else{
    return false;
 80045a0:	2300      	movs	r3, #0
  }
}
 80045a2:	0018      	movs	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	b002      	add	sp, #8
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	08022980 	.word	0x08022980

080045b0 <CWINIT>:
bool CWINIT(){
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80045b6:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <CWINIT+0x34>)
 80045b8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0018      	movs	r0, r3
 80045be:	f7fb fdd5 	bl	800016c <strlen>
 80045c2:	0003      	movs	r3, r0
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	0011      	movs	r1, r2
 80045ca:	0018      	movs	r0, r3
 80045cc:	f7ff fa2c 	bl	8003a28 <ESP_Send>
 80045d0:	1e03      	subs	r3, r0, #0
 80045d2:	d001      	beq.n	80045d8 <CWINIT+0x28>
    return true;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <CWINIT+0x2a>
  }
  else{
    return false;
 80045d8:	2300      	movs	r3, #0
  }
}
 80045da:	0018      	movs	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	b002      	add	sp, #8
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	08022990 	.word	0x08022990

080045e8 <CWMODE1>:
bool CWMODE1(){
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80045ee:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <CWMODE1+0x34>)
 80045f0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	0018      	movs	r0, r3
 80045f6:	f7fb fdb9 	bl	800016c <strlen>
 80045fa:	0003      	movs	r3, r0
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	0011      	movs	r1, r2
 8004602:	0018      	movs	r0, r3
 8004604:	f7ff fa10 	bl	8003a28 <ESP_Send>
 8004608:	1e03      	subs	r3, r0, #0
 800460a:	d001      	beq.n	8004610 <CWMODE1+0x28>
    return true;
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004610:	2300      	movs	r3, #0
  }
}
 8004612:	0018      	movs	r0, r3
 8004614:	46bd      	mov	sp, r7
 8004616:	b002      	add	sp, #8
 8004618:	bd80      	pop	{r7, pc}
 800461a:	46c0      	nop			@ (mov r8, r8)
 800461c:	080229a0 	.word	0x080229a0

08004620 <CWMODE2>:
bool CWMODE2(){
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004626:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <CWMODE2+0x34>)
 8004628:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	0018      	movs	r0, r3
 800462e:	f7fb fd9d 	bl	800016c <strlen>
 8004632:	0003      	movs	r3, r0
 8004634:	b29a      	uxth	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	0011      	movs	r1, r2
 800463a:	0018      	movs	r0, r3
 800463c:	f7ff f9f4 	bl	8003a28 <ESP_Send>
 8004640:	1e03      	subs	r3, r0, #0
 8004642:	d001      	beq.n	8004648 <CWMODE2+0x28>
    return true;
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <CWMODE2+0x2a>
  }
  else{
    return false;
 8004648:	2300      	movs	r3, #0
  }
}
 800464a:	0018      	movs	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	b002      	add	sp, #8
 8004650:	bd80      	pop	{r7, pc}
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	080229b0 	.word	0x080229b0

08004658 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 800465e:	4b0b      	ldr	r3, [pc, #44]	@ (800468c <CWAUTOCONN+0x34>)
 8004660:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	0018      	movs	r0, r3
 8004666:	f7fb fd81 	bl	800016c <strlen>
 800466a:	0003      	movs	r3, r0
 800466c:	b29a      	uxth	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	0011      	movs	r1, r2
 8004672:	0018      	movs	r0, r3
 8004674:	f7ff f9d8 	bl	8003a28 <ESP_Send>
 8004678:	1e03      	subs	r3, r0, #0
 800467a:	d001      	beq.n	8004680 <CWAUTOCONN+0x28>
    return true;
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004680:	2300      	movs	r3, #0
  }
}
 8004682:	0018      	movs	r0, r3
 8004684:	46bd      	mov	sp, r7
 8004686:	b002      	add	sp, #8
 8004688:	bd80      	pop	{r7, pc}
 800468a:	46c0      	nop			@ (mov r8, r8)
 800468c:	080229c0 	.word	0x080229c0

08004690 <CWJAP>:
bool CWJAP(){
 8004690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004692:	46c6      	mov	lr, r8
 8004694:	b500      	push	{lr}
 8004696:	b0a2      	sub	sp, #136	@ 0x88
 8004698:	af00      	add	r7, sp, #0
 800469a:	466b      	mov	r3, sp
 800469c:	4698      	mov	r8, r3
  beursTest = true;
 800469e:	4b39      	ldr	r3, [pc, #228]	@ (8004784 <CWJAP+0xf4>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80046a4:	2618      	movs	r6, #24
 80046a6:	19bb      	adds	r3, r7, r6
 80046a8:	2264      	movs	r2, #100	@ 0x64
 80046aa:	2100      	movs	r1, #0
 80046ac:	0018      	movs	r0, r3
 80046ae:	f01a fef3 	bl	801f498 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80046b2:	4b35      	ldr	r3, [pc, #212]	@ (8004788 <CWJAP+0xf8>)
 80046b4:	4a35      	ldr	r2, [pc, #212]	@ (800478c <CWJAP+0xfc>)
 80046b6:	4936      	ldr	r1, [pc, #216]	@ (8004790 <CWJAP+0x100>)
 80046b8:	19b8      	adds	r0, r7, r6
 80046ba:	f01a fda9 	bl	801f210 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80046be:	19bb      	adds	r3, r7, r6
 80046c0:	0018      	movs	r0, r3
 80046c2:	f7fb fd53 	bl	800016c <strlen>
 80046c6:	0002      	movs	r2, r0
 80046c8:	216f      	movs	r1, #111	@ 0x6f
 80046ca:	0030      	movs	r0, r6
 80046cc:	180b      	adds	r3, r1, r0
 80046ce:	19db      	adds	r3, r3, r7
 80046d0:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80046d2:	180b      	adds	r3, r1, r0
 80046d4:	19db      	adds	r3, r3, r7
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	3301      	adds	r3, #1
 80046da:	1e5a      	subs	r2, r3, #1
 80046dc:	2180      	movs	r1, #128	@ 0x80
 80046de:	1879      	adds	r1, r7, r1
 80046e0:	600a      	str	r2, [r1, #0]
 80046e2:	001a      	movs	r2, r3
 80046e4:	60ba      	str	r2, [r7, #8]
 80046e6:	2200      	movs	r2, #0
 80046e8:	60fa      	str	r2, [r7, #12]
 80046ea:	68b8      	ldr	r0, [r7, #8]
 80046ec:	68f9      	ldr	r1, [r7, #12]
 80046ee:	0002      	movs	r2, r0
 80046f0:	0f52      	lsrs	r2, r2, #29
 80046f2:	000e      	movs	r6, r1
 80046f4:	00f6      	lsls	r6, r6, #3
 80046f6:	617e      	str	r6, [r7, #20]
 80046f8:	697e      	ldr	r6, [r7, #20]
 80046fa:	4316      	orrs	r6, r2
 80046fc:	617e      	str	r6, [r7, #20]
 80046fe:	0002      	movs	r2, r0
 8004700:	00d2      	lsls	r2, r2, #3
 8004702:	613a      	str	r2, [r7, #16]
 8004704:	001a      	movs	r2, r3
 8004706:	603a      	str	r2, [r7, #0]
 8004708:	2200      	movs	r2, #0
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	6838      	ldr	r0, [r7, #0]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	0002      	movs	r2, r0
 8004712:	0f52      	lsrs	r2, r2, #29
 8004714:	000e      	movs	r6, r1
 8004716:	00f5      	lsls	r5, r6, #3
 8004718:	4315      	orrs	r5, r2
 800471a:	0002      	movs	r2, r0
 800471c:	00d4      	lsls	r4, r2, #3
 800471e:	3307      	adds	r3, #7
 8004720:	08db      	lsrs	r3, r3, #3
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	466a      	mov	r2, sp
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	469d      	mov	sp, r3
 800472a:	466b      	mov	r3, sp
 800472c:	3300      	adds	r3, #0
 800472e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004730:	246f      	movs	r4, #111	@ 0x6f
 8004732:	2518      	movs	r5, #24
 8004734:	1963      	adds	r3, r4, r5
 8004736:	19db      	adds	r3, r3, r7
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	3301      	adds	r3, #1
 800473c:	001a      	movs	r2, r3
 800473e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004740:	2100      	movs	r1, #0
 8004742:	0018      	movs	r0, r3
 8004744:	f01a fea8 	bl	801f498 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004748:	1963      	adds	r3, r4, r5
 800474a:	19db      	adds	r3, r3, r7
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	1979      	adds	r1, r7, r5
 8004750:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004752:	0018      	movs	r0, r3
 8004754:	f01a fec7 	bl	801f4e6 <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004758:	1963      	adds	r3, r4, r5
 800475a:	19db      	adds	r3, r3, r7
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	b29a      	uxth	r2, r3
 8004760:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004762:	0011      	movs	r1, r2
 8004764:	0018      	movs	r0, r3
 8004766:	f7ff f95f 	bl	8003a28 <ESP_Send>
 800476a:	1e03      	subs	r3, r0, #0
 800476c:	d001      	beq.n	8004772 <CWJAP+0xe2>
    return true;
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <CWJAP+0xe4>
  }
  else{
    return false;
 8004772:	2300      	movs	r3, #0
 8004774:	46c5      	mov	sp, r8
  }
}
 8004776:	0018      	movs	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	b022      	add	sp, #136	@ 0x88
 800477c:	bc80      	pop	{r7}
 800477e:	46b8      	mov	r8, r7
 8004780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004782:	46c0      	nop			@ (mov r8, r8)
 8004784:	2000054d 	.word	0x2000054d
 8004788:	08023fb4 	.word	0x08023fb4
 800478c:	08023fa8 	.word	0x08023fa8
 8004790:	080229d4 	.word	0x080229d4

08004794 <CWMODE3>:
bool CWMODE3(){
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800479a:	4b0b      	ldr	r3, [pc, #44]	@ (80047c8 <CWMODE3+0x34>)
 800479c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	0018      	movs	r0, r3
 80047a2:	f7fb fce3 	bl	800016c <strlen>
 80047a6:	0003      	movs	r3, r0
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	0011      	movs	r1, r2
 80047ae:	0018      	movs	r0, r3
 80047b0:	f7ff f93a 	bl	8003a28 <ESP_Send>
 80047b4:	1e03      	subs	r3, r0, #0
 80047b6:	d001      	beq.n	80047bc <CWMODE3+0x28>
    return true;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <CWMODE3+0x2a>
  }
  else{
    return false;
 80047bc:	2300      	movs	r3, #0
  }
}
 80047be:	0018      	movs	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b002      	add	sp, #8
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	46c0      	nop			@ (mov r8, r8)
 80047c8:	080229ec 	.word	0x080229ec

080047cc <CWSTATE>:
bool CWSTATE(){
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 80047d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004800 <CWSTATE+0x34>)
 80047d4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	0018      	movs	r0, r3
 80047da:	f7fb fcc7 	bl	800016c <strlen>
 80047de:	0003      	movs	r3, r0
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	0011      	movs	r1, r2
 80047e6:	0018      	movs	r0, r3
 80047e8:	f7ff f91e 	bl	8003a28 <ESP_Send>
 80047ec:	1e03      	subs	r3, r0, #0
 80047ee:	d001      	beq.n	80047f4 <CWSTATE+0x28>
    return true;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <CWSTATE+0x2a>
  }
  else{
    return false;
 80047f4:	2300      	movs	r3, #0
  }
}
 80047f6:	0018      	movs	r0, r3
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b002      	add	sp, #8
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	080229fc 	.word	0x080229fc

08004804 <CWSAP>:
bool CWSAP(){
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800480a:	4b0b      	ldr	r3, [pc, #44]	@ (8004838 <CWSAP+0x34>)
 800480c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	0018      	movs	r0, r3
 8004812:	f7fb fcab 	bl	800016c <strlen>
 8004816:	0003      	movs	r3, r0
 8004818:	b29a      	uxth	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	0011      	movs	r1, r2
 800481e:	0018      	movs	r0, r3
 8004820:	f7ff f902 	bl	8003a28 <ESP_Send>
 8004824:	1e03      	subs	r3, r0, #0
 8004826:	d001      	beq.n	800482c <CWSAP+0x28>
    return true;
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <CWSAP+0x2a>
  }
  else{
    return false;
 800482c:	2300      	movs	r3, #0
  }
}
 800482e:	0018      	movs	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	b002      	add	sp, #8
 8004834:	bd80      	pop	{r7, pc}
 8004836:	46c0      	nop			@ (mov r8, r8)
 8004838:	08022a0c 	.word	0x08022a0c

0800483c <CIPMUX>:
bool CIPMUX(){
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004842:	4b0b      	ldr	r3, [pc, #44]	@ (8004870 <CIPMUX+0x34>)
 8004844:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	0018      	movs	r0, r3
 800484a:	f7fb fc8f 	bl	800016c <strlen>
 800484e:	0003      	movs	r3, r0
 8004850:	b29a      	uxth	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	0011      	movs	r1, r2
 8004856:	0018      	movs	r0, r3
 8004858:	f7ff f8e6 	bl	8003a28 <ESP_Send>
 800485c:	1e03      	subs	r3, r0, #0
 800485e:	d001      	beq.n	8004864 <CIPMUX+0x28>
    return true;
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <CIPMUX+0x2a>
  }
  else{
    return false;
 8004864:	2300      	movs	r3, #0
  }
}
 8004866:	0018      	movs	r0, r3
 8004868:	46bd      	mov	sp, r7
 800486a:	b002      	add	sp, #8
 800486c:	bd80      	pop	{r7, pc}
 800486e:	46c0      	nop			@ (mov r8, r8)
 8004870:	08022a30 	.word	0x08022a30

08004874 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800487a:	4b0b      	ldr	r3, [pc, #44]	@ (80048a8 <WEBSERVER+0x34>)
 800487c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	0018      	movs	r0, r3
 8004882:	f7fb fc73 	bl	800016c <strlen>
 8004886:	0003      	movs	r3, r0
 8004888:	b29a      	uxth	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	0011      	movs	r1, r2
 800488e:	0018      	movs	r0, r3
 8004890:	f7ff f8ca 	bl	8003a28 <ESP_Send>
 8004894:	1e03      	subs	r3, r0, #0
 8004896:	d001      	beq.n	800489c <WEBSERVER+0x28>
    return true;
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <WEBSERVER+0x2a>
  }
  else{
    return false;
 800489c:	2300      	movs	r3, #0
  }
}
 800489e:	0018      	movs	r0, r3
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b002      	add	sp, #8
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	46c0      	nop			@ (mov r8, r8)
 80048a8:	08022a40 	.word	0x08022a40

080048ac <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80048ac:	b590      	push	{r4, r7, lr}
 80048ae:	b0c5      	sub	sp, #276	@ 0x114
 80048b0:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 80048b2:	2380      	movs	r3, #128	@ 0x80
 80048b4:	005a      	lsls	r2, r3, #1
 80048b6:	1d3b      	adds	r3, r7, #4
 80048b8:	2100      	movs	r1, #0
 80048ba:	0018      	movs	r0, r3
 80048bc:	f01a fdec 	bl	801f498 <memset>
  uint16_t length = CreateMessage(beurs);
 80048c0:	4b22      	ldr	r3, [pc, #136]	@ (800494c <HTTPCPOST+0xa0>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	1dfc      	adds	r4, r7, #7
 80048c6:	34ff      	adds	r4, #255	@ 0xff
 80048c8:	0018      	movs	r0, r3
 80048ca:	f7ff f9bd 	bl	8003c48 <CreateMessage>
 80048ce:	0003      	movs	r3, r0
 80048d0:	8023      	strh	r3, [r4, #0]
  if(beurs){
 80048d2:	4b1e      	ldr	r3, [pc, #120]	@ (800494c <HTTPCPOST+0xa0>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80048da:	1dfb      	adds	r3, r7, #7
 80048dc:	33ff      	adds	r3, #255	@ 0xff
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004950 <HTTPCPOST+0xa4>)
 80048e2:	491c      	ldr	r1, [pc, #112]	@ (8004954 <HTTPCPOST+0xa8>)
 80048e4:	1d38      	adds	r0, r7, #4
 80048e6:	f01a fc93 	bl	801f210 <siprintf>
 80048ea:	e016      	b.n	800491a <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80048ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004958 <HTTPCPOST+0xac>)
 80048ee:	481b      	ldr	r0, [pc, #108]	@ (800495c <HTTPCPOST+0xb0>)
 80048f0:	220c      	movs	r2, #12
 80048f2:	0019      	movs	r1, r3
 80048f4:	f7fe ff00 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 80048f8:	4a17      	ldr	r2, [pc, #92]	@ (8004958 <HTTPCPOST+0xac>)
 80048fa:	4b19      	ldr	r3, [pc, #100]	@ (8004960 <HTTPCPOST+0xb4>)
 80048fc:	0011      	movs	r1, r2
 80048fe:	0018      	movs	r0, r3
 8004900:	f7ff f97e 	bl	8003c00 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004904:	1dfb      	adds	r3, r7, #7
 8004906:	33ff      	adds	r3, #255	@ 0xff
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	4c15      	ldr	r4, [pc, #84]	@ (8004960 <HTTPCPOST+0xb4>)
 800490c:	4a15      	ldr	r2, [pc, #84]	@ (8004964 <HTTPCPOST+0xb8>)
 800490e:	4916      	ldr	r1, [pc, #88]	@ (8004968 <HTTPCPOST+0xbc>)
 8004910:	1d38      	adds	r0, r7, #4
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	0023      	movs	r3, r4
 8004916:	f01a fc7b 	bl	801f210 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 800491a:	1d3b      	adds	r3, r7, #4
 800491c:	0018      	movs	r0, r3
 800491e:	f7fb fc25 	bl	800016c <strlen>
 8004922:	0002      	movs	r2, r0
 8004924:	1d7b      	adds	r3, r7, #5
 8004926:	33ff      	adds	r3, #255	@ 0xff
 8004928:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 800492a:	1d7b      	adds	r3, r7, #5
 800492c:	33ff      	adds	r3, #255	@ 0xff
 800492e:	881a      	ldrh	r2, [r3, #0]
 8004930:	1d3b      	adds	r3, r7, #4
 8004932:	0011      	movs	r1, r2
 8004934:	0018      	movs	r0, r3
 8004936:	f7ff f877 	bl	8003a28 <ESP_Send>
 800493a:	1e03      	subs	r3, r0, #0
 800493c:	d001      	beq.n	8004942 <HTTPCPOST+0x96>
    return true;
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004942:	2300      	movs	r3, #0
  }
}
 8004944:	0018      	movs	r0, r3
 8004946:	46bd      	mov	sp, r7
 8004948:	b043      	add	sp, #268	@ 0x10c
 800494a:	bd90      	pop	{r4, r7, pc}
 800494c:	2000054e 	.word	0x2000054e
 8004950:	08023fd4 	.word	0x08023fd4
 8004954:	08022a58 	.word	0x08022a58
 8004958:	20000a80 	.word	0x20000a80
 800495c:	08080000 	.word	0x08080000
 8004960:	20000a8c 	.word	0x20000a8c
 8004964:	08024010 	.word	0x08024010
 8004968:	08022a90 	.word	0x08022a90

0800496c <SENDDATA>:
bool SENDDATA(){
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004972:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <SENDDATA+0x34>)
 8004974:	0018      	movs	r0, r3
 8004976:	f7fb fbf9 	bl	800016c <strlen>
 800497a:	0002      	movs	r2, r0
 800497c:	1dbb      	adds	r3, r7, #6
 800497e:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004980:	1dbb      	adds	r3, r7, #6
 8004982:	881a      	ldrh	r2, [r3, #0]
 8004984:	4b06      	ldr	r3, [pc, #24]	@ (80049a0 <SENDDATA+0x34>)
 8004986:	0011      	movs	r1, r2
 8004988:	0018      	movs	r0, r3
 800498a:	f7ff f84d 	bl	8003a28 <ESP_Send>
 800498e:	1e03      	subs	r3, r0, #0
 8004990:	d001      	beq.n	8004996 <SENDDATA+0x2a>
    return true;
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <SENDDATA+0x2c>
  }
  else{
    return false;
 8004996:	2300      	movs	r3, #0
  }
}
 8004998:	0018      	movs	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	b002      	add	sp, #8
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	20000584 	.word	0x20000584

080049a4 <SLEEP>:
bool SLEEP(){
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80049aa:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <SLEEP+0x34>)
 80049ac:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f7fb fbdb 	bl	800016c <strlen>
 80049b6:	0003      	movs	r3, r0
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	0011      	movs	r1, r2
 80049be:	0018      	movs	r0, r3
 80049c0:	f7ff f832 	bl	8003a28 <ESP_Send>
 80049c4:	1e03      	subs	r3, r0, #0
 80049c6:	d001      	beq.n	80049cc <SLEEP+0x28>
    return true;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <SLEEP+0x2a>
  }
  else{
    return false;
 80049cc:	2300      	movs	r3, #0
  }
}
 80049ce:	0018      	movs	r0, r3
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b002      	add	sp, #8
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	08022ad0 	.word	0x08022ad0

080049dc <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 80049e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a18 <CIPSNTPCFG+0x3c>)
 80049e4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	0018      	movs	r0, r3
 80049ea:	f7fb fbbf 	bl	800016c <strlen>
 80049ee:	0003      	movs	r3, r0
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	0011      	movs	r1, r2
 80049f6:	0018      	movs	r0, r3
 80049f8:	f7ff f816 	bl	8003a28 <ESP_Send>
 80049fc:	1e03      	subs	r3, r0, #0
 80049fe:	d006      	beq.n	8004a0e <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004a00:	23fa      	movs	r3, #250	@ 0xfa
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	0018      	movs	r0, r3
 8004a06:	f009 fb4d 	bl	800e0a4 <HAL_Delay>
    return true;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004a0e:	2300      	movs	r3, #0
  }
}
 8004a10:	0018      	movs	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b002      	add	sp, #8
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	08022ae0 	.word	0x08022ae0

08004a1c <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004a22:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <CIPSNTPTIME+0x34>)
 8004a24:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f7fb fb9f 	bl	800016c <strlen>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	0011      	movs	r1, r2
 8004a36:	0018      	movs	r0, r3
 8004a38:	f7fe fff6 	bl	8003a28 <ESP_Send>
 8004a3c:	1e03      	subs	r3, r0, #0
 8004a3e:	d001      	beq.n	8004a44 <CIPSNTPTIME+0x28>
    return true;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004a44:	2300      	movs	r3, #0
  }
}
 8004a46:	0018      	movs	r0, r3
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b002      	add	sp, #8
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	46c0      	nop			@ (mov r8, r8)
 8004a50:	08022b30 	.word	0x08022b30

08004a54 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a88 <CIPSNTPINTV+0x34>)
 8004a5c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f7fb fb83 	bl	800016c <strlen>
 8004a66:	0003      	movs	r3, r0
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	0011      	movs	r1, r2
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f7fe ffda 	bl	8003a28 <ESP_Send>
 8004a74:	1e03      	subs	r3, r0, #0
 8004a76:	d001      	beq.n	8004a7c <CIPSNTPINTV+0x28>
    return true;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004a7c:	2300      	movs	r3, #0
  }
}
 8004a7e:	0018      	movs	r0, r3
 8004a80:	46bd      	mov	sp, r7
 8004a82:	b002      	add	sp, #8
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	08022b44 	.word	0x08022b44

08004a8c <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004a8c:	b5b0      	push	{r4, r5, r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	0002      	movs	r2, r0
 8004a94:	1dfb      	adds	r3, r7, #7
 8004a96:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004a98:	4b73      	ldr	r3, [pc, #460]	@ (8004c68 <DMA_ProcessBuffer+0x1dc>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	200e      	movs	r0, #14
 8004aa2:	183b      	adds	r3, r7, r0
 8004aa4:	2180      	movs	r1, #128	@ 0x80
 8004aa6:	0049      	lsls	r1, r1, #1
 8004aa8:	1a8a      	subs	r2, r1, r2
 8004aaa:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004aac:	230d      	movs	r3, #13
 8004aae:	18fb      	adds	r3, r7, r3
 8004ab0:	2203      	movs	r2, #3
 8004ab2:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004ab4:	183b      	adds	r3, r7, r0
 8004ab6:	881a      	ldrh	r2, [r3, #0]
 8004ab8:	2380      	movs	r3, #128	@ 0x80
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d903      	bls.n	8004ac8 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004ac0:	183b      	adds	r3, r7, r0
 8004ac2:	2280      	movs	r2, #128	@ 0x80
 8004ac4:	0052      	lsls	r2, r2, #1
 8004ac6:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004ac8:	4b68      	ldr	r3, [pc, #416]	@ (8004c6c <DMA_ProcessBuffer+0x1e0>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	001a      	movs	r2, r3
 8004ad0:	230e      	movs	r3, #14
 8004ad2:	18fb      	adds	r3, r7, r3
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d131      	bne.n	8004b3e <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004ada:	4b65      	ldr	r3, [pc, #404]	@ (8004c70 <DMA_ProcessBuffer+0x1e4>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b14      	cmp	r3, #20
 8004ae0:	d91b      	bls.n	8004b1a <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004ae2:	4b63      	ldr	r3, [pc, #396]	@ (8004c70 <DMA_ProcessBuffer+0x1e4>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004ae8:	4b62      	ldr	r3, [pc, #392]	@ (8004c74 <DMA_ProcessBuffer+0x1e8>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d107      	bne.n	8004b00 <DMA_ProcessBuffer+0x74>
 8004af0:	4b61      	ldr	r3, [pc, #388]	@ (8004c78 <DMA_ProcessBuffer+0x1ec>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004af8:	230d      	movs	r3, #13
 8004afa:	18fb      	adds	r3, r7, r3
 8004afc:	2207      	movs	r2, #7
 8004afe:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004b00:	4b5c      	ldr	r3, [pc, #368]	@ (8004c74 <DMA_ProcessBuffer+0x1e8>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d103      	bne.n	8004b10 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004b08:	4b5c      	ldr	r3, [pc, #368]	@ (8004c7c <DMA_ProcessBuffer+0x1f0>)
 8004b0a:	220b      	movs	r2, #11
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	e016      	b.n	8004b3e <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004b10:	230d      	movs	r3, #13
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	2206      	movs	r2, #6
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e011      	b.n	8004b3e <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004b1a:	4b55      	ldr	r3, [pc, #340]	@ (8004c70 <DMA_ProcessBuffer+0x1e4>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	4b53      	ldr	r3, [pc, #332]	@ (8004c70 <DMA_ProcessBuffer+0x1e4>)
 8004b24:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004b26:	f009 fab3 	bl	800e090 <HAL_GetTick>
 8004b2a:	0003      	movs	r3, r0
 8004b2c:	33f5      	adds	r3, #245	@ 0xf5
 8004b2e:	33ff      	adds	r3, #255	@ 0xff
 8004b30:	001a      	movs	r2, r3
 8004b32:	4b53      	ldr	r3, [pc, #332]	@ (8004c80 <DMA_ProcessBuffer+0x1f4>)
 8004b34:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004b36:	230d      	movs	r3, #13
 8004b38:	18fb      	adds	r3, r7, r3
 8004b3a:	2204      	movs	r2, #4
 8004b3c:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004b3e:	4b4b      	ldr	r3, [pc, #300]	@ (8004c6c <DMA_ProcessBuffer+0x1e0>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	001a      	movs	r2, r3
 8004b46:	210e      	movs	r1, #14
 8004b48:	187b      	adds	r3, r7, r1
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d100      	bne.n	8004b52 <DMA_ProcessBuffer+0xc6>
 8004b50:	e082      	b.n	8004c58 <DMA_ProcessBuffer+0x1cc>
      retry = 0;
 8004b52:	4b47      	ldr	r3, [pc, #284]	@ (8004c70 <DMA_ProcessBuffer+0x1e4>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004b58:	4b4a      	ldr	r3, [pc, #296]	@ (8004c84 <DMA_ProcessBuffer+0x1f8>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	4b43      	ldr	r3, [pc, #268]	@ (8004c6c <DMA_ProcessBuffer+0x1e0>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d109      	bne.n	8004b7c <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004b68:	187b      	adds	r3, r7, r1
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	4b45      	ldr	r3, [pc, #276]	@ (8004c84 <DMA_ProcessBuffer+0x1f8>)
 8004b70:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004b72:	230d      	movs	r3, #13
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	220a      	movs	r2, #10
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	e06d      	b.n	8004c58 <DMA_ProcessBuffer+0x1cc>
      }
      else{
        if(TempPos != pos){
 8004b7c:	4b41      	ldr	r3, [pc, #260]	@ (8004c84 <DMA_ProcessBuffer+0x1f8>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	001a      	movs	r2, r3
 8004b84:	210e      	movs	r1, #14
 8004b86:	187b      	adds	r3, r7, r1
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004b8e:	187b      	adds	r3, r7, r1
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	4b3b      	ldr	r3, [pc, #236]	@ (8004c84 <DMA_ProcessBuffer+0x1f8>)
 8004b96:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004b98:	230d      	movs	r3, #13
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	220a      	movs	r2, #10
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	e05a      	b.n	8004c58 <DMA_ProcessBuffer+0x1cc>
        }
        else{
          if (pos > OldPos) {
 8004ba2:	4b32      	ldr	r3, [pc, #200]	@ (8004c6c <DMA_ProcessBuffer+0x1e0>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	001a      	movs	r2, r3
 8004baa:	210e      	movs	r1, #14
 8004bac:	187b      	adds	r3, r7, r1
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d917      	bls.n	8004be4 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004bb4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c6c <DMA_ProcessBuffer+0x1e0>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	001a      	movs	r2, r3
 8004bbc:	4b32      	ldr	r3, [pc, #200]	@ (8004c88 <DMA_ProcessBuffer+0x1fc>)
 8004bbe:	18d0      	adds	r0, r2, r3
 8004bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c6c <DMA_ProcessBuffer+0x1e0>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	001a      	movs	r2, r3
 8004bc8:	187b      	adds	r3, r7, r1
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	1a9b      	subs	r3, r3, r2
 8004bce:	b299      	uxth	r1, r3
 8004bd0:	230d      	movs	r3, #13
 8004bd2:	18fc      	adds	r4, r7, r3
 8004bd4:	1dfb      	adds	r3, r7, #7
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	001a      	movs	r2, r3
 8004bda:	f7ff fa8f 	bl	80040fc <ParseBuffer>
 8004bde:	0003      	movs	r3, r0
 8004be0:	7023      	strb	r3, [r4, #0]
 8004be2:	e026      	b.n	8004c32 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004be4:	4b21      	ldr	r3, [pc, #132]	@ (8004c6c <DMA_ProcessBuffer+0x1e0>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	001a      	movs	r2, r3
 8004bec:	4b26      	ldr	r3, [pc, #152]	@ (8004c88 <DMA_ProcessBuffer+0x1fc>)
 8004bee:	18d0      	adds	r0, r2, r3
 8004bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8004c6c <DMA_ProcessBuffer+0x1e0>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	001a      	movs	r2, r3
 8004bf8:	2380      	movs	r3, #128	@ 0x80
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	1a9b      	subs	r3, r3, r2
 8004bfe:	b299      	uxth	r1, r3
 8004c00:	250d      	movs	r5, #13
 8004c02:	197c      	adds	r4, r7, r5
 8004c04:	1dfb      	adds	r3, r7, #7
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	001a      	movs	r2, r3
 8004c0a:	f7ff fa77 	bl	80040fc <ParseBuffer>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004c12:	210e      	movs	r1, #14
 8004c14:	187b      	adds	r3, r7, r1
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004c1c:	197c      	adds	r4, r7, r5
 8004c1e:	1dfb      	adds	r3, r7, #7
 8004c20:	781a      	ldrb	r2, [r3, #0]
 8004c22:	187b      	adds	r3, r7, r1
 8004c24:	8819      	ldrh	r1, [r3, #0]
 8004c26:	4b18      	ldr	r3, [pc, #96]	@ (8004c88 <DMA_ProcessBuffer+0x1fc>)
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7ff fa67 	bl	80040fc <ParseBuffer>
 8004c2e:	0003      	movs	r3, r0
 8004c30:	7023      	strb	r3, [r4, #0]
              }
          }
          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
 8004c32:	4b0e      	ldr	r3, [pc, #56]	@ (8004c6c <DMA_ProcessBuffer+0x1e0>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	0018      	movs	r0, r3
 8004c3a:	240e      	movs	r4, #14
 8004c3c:	193b      	adds	r3, r7, r4
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	4a12      	ldr	r2, [pc, #72]	@ (8004c8c <DMA_ProcessBuffer+0x200>)
 8004c42:	4913      	ldr	r1, [pc, #76]	@ (8004c90 <DMA_ProcessBuffer+0x204>)
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	0003      	movs	r3, r0
 8004c48:	2003      	movs	r0, #3
 8004c4a:	f008 fe83 	bl	800d954 <CreateLine>
          OldPos = pos;
 8004c4e:	193b      	adds	r3, r7, r4
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	4b05      	ldr	r3, [pc, #20]	@ (8004c6c <DMA_ProcessBuffer+0x1e0>)
 8004c56:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004c58:	230d      	movs	r3, #13
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	781b      	ldrb	r3, [r3, #0]
}
 8004c5e:	0018      	movs	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b004      	add	sp, #16
 8004c64:	bdb0      	pop	{r4, r5, r7, pc}
 8004c66:	46c0      	nop			@ (mov r8, r8)
 8004c68:	20002480 	.word	0x20002480
 8004c6c:	20000aa5 	.word	0x20000aa5
 8004c70:	200009a0 	.word	0x200009a0
 8004c74:	200009a2 	.word	0x200009a2
 8004c78:	20000000 	.word	0x20000000
 8004c7c:	20000028 	.word	0x20000028
 8004c80:	20000994 	.word	0x20000994
 8004c84:	20000aa6 	.word	0x20000aa6
 8004c88:	20000448 	.word	0x20000448
 8004c8c:	08022b5c 	.word	0x08022b5c
 8004c90:	08022400 	.word	0x08022400

08004c94 <clearDMABuffer>:

void clearDMABuffer(){
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004c98:	2380      	movs	r3, #128	@ 0x80
 8004c9a:	005a      	lsls	r2, r3, #1
 8004c9c:	4b03      	ldr	r3, [pc, #12]	@ (8004cac <clearDMABuffer+0x18>)
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	f01a fbf9 	bl	801f498 <memset>
}
 8004ca6:	46c0      	nop			@ (mov r8, r8)
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	20000448 	.word	0x20000448

08004cb0 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	0002      	movs	r2, r0
 8004cb8:	1dfb      	adds	r3, r7, #7
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	1dbb      	adds	r3, r7, #6
 8004cbe:	1c0a      	adds	r2, r1, #0
 8004cc0:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004cc2:	210f      	movs	r1, #15
 8004cc4:	187b      	adds	r3, r7, r1
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004cca:	1dbb      	adds	r3, r7, #6
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d105      	bne.n	8004cde <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004cd2:	187b      	adds	r3, r7, r1
 8004cd4:	1dfa      	adds	r2, r7, #7
 8004cd6:	7812      	ldrb	r2, [r2, #0]
 8004cd8:	4251      	negs	r1, r2
 8004cda:	414a      	adcs	r2, r1
 8004cdc:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004cde:	1dbb      	adds	r3, r7, #6
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d107      	bne.n	8004cf6 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004ce6:	230f      	movs	r3, #15
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	1dfa      	adds	r2, r7, #7
 8004cec:	7812      	ldrb	r2, [r2, #0]
 8004cee:	3a02      	subs	r2, #2
 8004cf0:	4251      	negs	r1, r2
 8004cf2:	414a      	adcs	r2, r1
 8004cf4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004cf6:	1dbb      	adds	r3, r7, #6
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d107      	bne.n	8004d0e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004cfe:	230f      	movs	r3, #15
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	1dfa      	adds	r2, r7, #7
 8004d04:	7812      	ldrb	r2, [r2, #0]
 8004d06:	3a05      	subs	r2, #5
 8004d08:	4251      	negs	r1, r2
 8004d0a:	414a      	adcs	r2, r1
 8004d0c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004d0e:	1dbb      	adds	r3, r7, #6
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b05      	cmp	r3, #5
 8004d14:	d107      	bne.n	8004d26 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004d16:	230f      	movs	r3, #15
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	1dfa      	adds	r2, r7, #7
 8004d1c:	7812      	ldrb	r2, [r2, #0]
 8004d1e:	3a0b      	subs	r2, #11
 8004d20:	4251      	negs	r1, r2
 8004d22:	414a      	adcs	r2, r1
 8004d24:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004d26:	230f      	movs	r3, #15
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	781b      	ldrb	r3, [r3, #0]
}
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	b004      	add	sp, #16
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004d34:	b590      	push	{r4, r7, lr}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	0002      	movs	r2, r0
 8004d3c:	1dfb      	adds	r3, r7, #7
 8004d3e:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004d40:	230f      	movs	r3, #15
 8004d42:	18fb      	adds	r3, r7, r3
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004d48:	1dfb      	adds	r3, r7, #7
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b13      	cmp	r3, #19
 8004d4e:	d900      	bls.n	8004d52 <AT_Send+0x1e>
 8004d50:	e18a      	b.n	8005068 <AT_Send+0x334>
 8004d52:	009a      	lsls	r2, r3, #2
 8004d54:	4bc8      	ldr	r3, [pc, #800]	@ (8005078 <AT_Send+0x344>)
 8004d56:	18d3      	adds	r3, r2, r3
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004d5c:	4bc7      	ldr	r3, [pc, #796]	@ (800507c <AT_Send+0x348>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f008 fda1 	bl	800d8a8 <TimestampIsReached>
 8004d66:	1e03      	subs	r3, r0, #0
 8004d68:	d100      	bne.n	8004d6c <AT_Send+0x38>
 8004d6a:	e17c      	b.n	8005066 <AT_Send+0x332>
    ATCommandSend = PollAwake();
 8004d6c:	230f      	movs	r3, #15
 8004d6e:	18fc      	adds	r4, r7, r3
 8004d70:	f7ff fbae 	bl	80044d0 <PollAwake>
 8004d74:	0003      	movs	r3, r0
 8004d76:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004d78:	f009 f98a 	bl	800e090 <HAL_GetTick>
 8004d7c:	0003      	movs	r3, r0
 8004d7e:	3332      	adds	r3, #50	@ 0x32
 8004d80:	001a      	movs	r2, r3
 8004d82:	4bbe      	ldr	r3, [pc, #760]	@ (800507c <AT_Send+0x348>)
 8004d84:	601a      	str	r2, [r3, #0]
  }
  break;
 8004d86:	e16e      	b.n	8005066 <AT_Send+0x332>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004d88:	4abd      	ldr	r2, [pc, #756]	@ (8005080 <AT_Send+0x34c>)
 8004d8a:	4bbe      	ldr	r3, [pc, #760]	@ (8005084 <AT_Send+0x350>)
 8004d8c:	0019      	movs	r1, r3
 8004d8e:	2003      	movs	r0, #3
 8004d90:	f008 fde0 	bl	800d954 <CreateLine>
    ATCommandSend = RFPower();
 8004d94:	230f      	movs	r3, #15
 8004d96:	18fc      	adds	r4, r7, r3
 8004d98:	f7ff fbb6 	bl	8004508 <RFPower>
 8004d9c:	0003      	movs	r3, r0
 8004d9e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004da0:	f009 f976 	bl	800e090 <HAL_GetTick>
 8004da4:	0003      	movs	r3, r0
 8004da6:	330a      	adds	r3, #10
 8004da8:	001a      	movs	r2, r3
 8004daa:	4bb4      	ldr	r3, [pc, #720]	@ (800507c <AT_Send+0x348>)
 8004dac:	601a      	str	r2, [r3, #0]
    break;
 8004dae:	e15b      	b.n	8005068 <AT_Send+0x334>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004db0:	4ab5      	ldr	r2, [pc, #724]	@ (8005088 <AT_Send+0x354>)
 8004db2:	4bb4      	ldr	r3, [pc, #720]	@ (8005084 <AT_Send+0x350>)
 8004db4:	0019      	movs	r1, r3
 8004db6:	2003      	movs	r0, #3
 8004db8:	f008 fdcc 	bl	800d954 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004dbc:	230f      	movs	r3, #15
 8004dbe:	18fc      	adds	r4, r7, r3
 8004dc0:	f7ff fbbe 	bl	8004540 <CheckRFPower>
 8004dc4:	0003      	movs	r3, r0
 8004dc6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004dc8:	f009 f962 	bl	800e090 <HAL_GetTick>
 8004dcc:	0003      	movs	r3, r0
 8004dce:	330a      	adds	r3, #10
 8004dd0:	001a      	movs	r2, r3
 8004dd2:	4baa      	ldr	r3, [pc, #680]	@ (800507c <AT_Send+0x348>)
 8004dd4:	601a      	str	r2, [r3, #0]
    break;
 8004dd6:	e147      	b.n	8005068 <AT_Send+0x334>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004dd8:	4aac      	ldr	r2, [pc, #688]	@ (800508c <AT_Send+0x358>)
 8004dda:	4baa      	ldr	r3, [pc, #680]	@ (8005084 <AT_Send+0x350>)
 8004ddc:	0019      	movs	r1, r3
 8004dde:	2003      	movs	r0, #3
 8004de0:	f008 fdb8 	bl	800d954 <CreateLine>
    ATCommandSend = ATRestore();
 8004de4:	230f      	movs	r3, #15
 8004de6:	18fc      	adds	r4, r7, r3
 8004de8:	f7ff fbc6 	bl	8004578 <ATRestore>
 8004dec:	0003      	movs	r3, r0
 8004dee:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004df0:	f009 f94e 	bl	800e090 <HAL_GetTick>
 8004df4:	0003      	movs	r3, r0
 8004df6:	3332      	adds	r3, #50	@ 0x32
 8004df8:	001a      	movs	r2, r3
 8004dfa:	4ba0      	ldr	r3, [pc, #640]	@ (800507c <AT_Send+0x348>)
 8004dfc:	601a      	str	r2, [r3, #0]
    break;
 8004dfe:	e133      	b.n	8005068 <AT_Send+0x334>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004e00:	4aa3      	ldr	r2, [pc, #652]	@ (8005090 <AT_Send+0x35c>)
 8004e02:	4ba0      	ldr	r3, [pc, #640]	@ (8005084 <AT_Send+0x350>)
 8004e04:	0019      	movs	r1, r3
 8004e06:	2003      	movs	r0, #3
 8004e08:	f008 fda4 	bl	800d954 <CreateLine>
    ATCommandSend = CWINIT();
 8004e0c:	230f      	movs	r3, #15
 8004e0e:	18fc      	adds	r4, r7, r3
 8004e10:	f7ff fbce 	bl	80045b0 <CWINIT>
 8004e14:	0003      	movs	r3, r0
 8004e16:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004e18:	f009 f93a 	bl	800e090 <HAL_GetTick>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	33f5      	adds	r3, #245	@ 0xf5
 8004e20:	33ff      	adds	r3, #255	@ 0xff
 8004e22:	001a      	movs	r2, r3
 8004e24:	4b95      	ldr	r3, [pc, #596]	@ (800507c <AT_Send+0x348>)
 8004e26:	601a      	str	r2, [r3, #0]
    break;
 8004e28:	e11e      	b.n	8005068 <AT_Send+0x334>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004e2a:	4a9a      	ldr	r2, [pc, #616]	@ (8005094 <AT_Send+0x360>)
 8004e2c:	4b95      	ldr	r3, [pc, #596]	@ (8005084 <AT_Send+0x350>)
 8004e2e:	0019      	movs	r1, r3
 8004e30:	2003      	movs	r0, #3
 8004e32:	f008 fd8f 	bl	800d954 <CreateLine>
    ATCommandSend = CWSTATE();
 8004e36:	230f      	movs	r3, #15
 8004e38:	18fc      	adds	r4, r7, r3
 8004e3a:	f7ff fcc7 	bl	80047cc <CWSTATE>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004e42:	f009 f925 	bl	800e090 <HAL_GetTick>
 8004e46:	0003      	movs	r3, r0
 8004e48:	33f5      	adds	r3, #245	@ 0xf5
 8004e4a:	33ff      	adds	r3, #255	@ 0xff
 8004e4c:	001a      	movs	r2, r3
 8004e4e:	4b8b      	ldr	r3, [pc, #556]	@ (800507c <AT_Send+0x348>)
 8004e50:	601a      	str	r2, [r3, #0]
    break;
 8004e52:	e109      	b.n	8005068 <AT_Send+0x334>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004e54:	4a90      	ldr	r2, [pc, #576]	@ (8005098 <AT_Send+0x364>)
 8004e56:	4b8b      	ldr	r3, [pc, #556]	@ (8005084 <AT_Send+0x350>)
 8004e58:	0019      	movs	r1, r3
 8004e5a:	2003      	movs	r0, #3
 8004e5c:	f008 fd7a 	bl	800d954 <CreateLine>
    ATCommandSend = CWMODE1();
 8004e60:	230f      	movs	r3, #15
 8004e62:	18fc      	adds	r4, r7, r3
 8004e64:	f7ff fbc0 	bl	80045e8 <CWMODE1>
 8004e68:	0003      	movs	r3, r0
 8004e6a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e6c:	f009 f910 	bl	800e090 <HAL_GetTick>
 8004e70:	0003      	movs	r3, r0
 8004e72:	330a      	adds	r3, #10
 8004e74:	001a      	movs	r2, r3
 8004e76:	4b81      	ldr	r3, [pc, #516]	@ (800507c <AT_Send+0x348>)
 8004e78:	601a      	str	r2, [r3, #0]
    break;
 8004e7a:	e0f5      	b.n	8005068 <AT_Send+0x334>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004e7c:	4a86      	ldr	r2, [pc, #536]	@ (8005098 <AT_Send+0x364>)
 8004e7e:	4b81      	ldr	r3, [pc, #516]	@ (8005084 <AT_Send+0x350>)
 8004e80:	0019      	movs	r1, r3
 8004e82:	2003      	movs	r0, #3
 8004e84:	f008 fd66 	bl	800d954 <CreateLine>
    ATCommandSend = CWMODE2();
 8004e88:	230f      	movs	r3, #15
 8004e8a:	18fc      	adds	r4, r7, r3
 8004e8c:	f7ff fbc8 	bl	8004620 <CWMODE2>
 8004e90:	0003      	movs	r3, r0
 8004e92:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e94:	f009 f8fc 	bl	800e090 <HAL_GetTick>
 8004e98:	0003      	movs	r3, r0
 8004e9a:	330a      	adds	r3, #10
 8004e9c:	001a      	movs	r2, r3
 8004e9e:	4b77      	ldr	r3, [pc, #476]	@ (800507c <AT_Send+0x348>)
 8004ea0:	601a      	str	r2, [r3, #0]
    break;
 8004ea2:	e0e1      	b.n	8005068 <AT_Send+0x334>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004ea4:	4a7d      	ldr	r2, [pc, #500]	@ (800509c <AT_Send+0x368>)
 8004ea6:	4b77      	ldr	r3, [pc, #476]	@ (8005084 <AT_Send+0x350>)
 8004ea8:	0019      	movs	r1, r3
 8004eaa:	2003      	movs	r0, #3
 8004eac:	f008 fd52 	bl	800d954 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004eb0:	230f      	movs	r3, #15
 8004eb2:	18fc      	adds	r4, r7, r3
 8004eb4:	f7ff fbd0 	bl	8004658 <CWAUTOCONN>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ebc:	f009 f8e8 	bl	800e090 <HAL_GetTick>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	330a      	adds	r3, #10
 8004ec4:	001a      	movs	r2, r3
 8004ec6:	4b6d      	ldr	r3, [pc, #436]	@ (800507c <AT_Send+0x348>)
 8004ec8:	601a      	str	r2, [r3, #0]
    break;
 8004eca:	e0cd      	b.n	8005068 <AT_Send+0x334>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004ecc:	4a74      	ldr	r2, [pc, #464]	@ (80050a0 <AT_Send+0x36c>)
 8004ece:	4b6d      	ldr	r3, [pc, #436]	@ (8005084 <AT_Send+0x350>)
 8004ed0:	0019      	movs	r1, r3
 8004ed2:	2003      	movs	r0, #3
 8004ed4:	f008 fd3e 	bl	800d954 <CreateLine>
    ATCommandSend = CWJAP();
 8004ed8:	230f      	movs	r3, #15
 8004eda:	18fc      	adds	r4, r7, r3
 8004edc:	f7ff fbd8 	bl	8004690 <CWJAP>
 8004ee0:	0003      	movs	r3, r0
 8004ee2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004ee4:	f009 f8d4 	bl	800e090 <HAL_GetTick>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	3332      	adds	r3, #50	@ 0x32
 8004eec:	001a      	movs	r2, r3
 8004eee:	4b63      	ldr	r3, [pc, #396]	@ (800507c <AT_Send+0x348>)
 8004ef0:	601a      	str	r2, [r3, #0]
    break;
 8004ef2:	e0b9      	b.n	8005068 <AT_Send+0x334>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004ef4:	4a6b      	ldr	r2, [pc, #428]	@ (80050a4 <AT_Send+0x370>)
 8004ef6:	4b63      	ldr	r3, [pc, #396]	@ (8005084 <AT_Send+0x350>)
 8004ef8:	0019      	movs	r1, r3
 8004efa:	2003      	movs	r0, #3
 8004efc:	f008 fd2a 	bl	800d954 <CreateLine>
    ATCommandSend = CWMODE3();
 8004f00:	230f      	movs	r3, #15
 8004f02:	18fc      	adds	r4, r7, r3
 8004f04:	f7ff fc46 	bl	8004794 <CWMODE3>
 8004f08:	0003      	movs	r3, r0
 8004f0a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f0c:	f009 f8c0 	bl	800e090 <HAL_GetTick>
 8004f10:	0003      	movs	r3, r0
 8004f12:	330a      	adds	r3, #10
 8004f14:	001a      	movs	r2, r3
 8004f16:	4b59      	ldr	r3, [pc, #356]	@ (800507c <AT_Send+0x348>)
 8004f18:	601a      	str	r2, [r3, #0]
    break;
 8004f1a:	e0a5      	b.n	8005068 <AT_Send+0x334>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004f1c:	4a62      	ldr	r2, [pc, #392]	@ (80050a8 <AT_Send+0x374>)
 8004f1e:	4b59      	ldr	r3, [pc, #356]	@ (8005084 <AT_Send+0x350>)
 8004f20:	0019      	movs	r1, r3
 8004f22:	2003      	movs	r0, #3
 8004f24:	f008 fd16 	bl	800d954 <CreateLine>
    ATCommandSend = CWSAP();
 8004f28:	230f      	movs	r3, #15
 8004f2a:	18fc      	adds	r4, r7, r3
 8004f2c:	f7ff fc6a 	bl	8004804 <CWSAP>
 8004f30:	0003      	movs	r3, r0
 8004f32:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f34:	f009 f8ac 	bl	800e090 <HAL_GetTick>
 8004f38:	0003      	movs	r3, r0
 8004f3a:	330a      	adds	r3, #10
 8004f3c:	001a      	movs	r2, r3
 8004f3e:	4b4f      	ldr	r3, [pc, #316]	@ (800507c <AT_Send+0x348>)
 8004f40:	601a      	str	r2, [r3, #0]
    break;
 8004f42:	e091      	b.n	8005068 <AT_Send+0x334>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004f44:	230f      	movs	r3, #15
 8004f46:	18fc      	adds	r4, r7, r3
 8004f48:	f7ff fc78 	bl	800483c <CIPMUX>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f50:	f009 f89e 	bl	800e090 <HAL_GetTick>
 8004f54:	0003      	movs	r3, r0
 8004f56:	330a      	adds	r3, #10
 8004f58:	001a      	movs	r2, r3
 8004f5a:	4b48      	ldr	r3, [pc, #288]	@ (800507c <AT_Send+0x348>)
 8004f5c:	601a      	str	r2, [r3, #0]
    break;
 8004f5e:	e083      	b.n	8005068 <AT_Send+0x334>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004f60:	230f      	movs	r3, #15
 8004f62:	18fc      	adds	r4, r7, r3
 8004f64:	f7ff fc86 	bl	8004874 <WEBSERVER>
 8004f68:	0003      	movs	r3, r0
 8004f6a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f6c:	f009 f890 	bl	800e090 <HAL_GetTick>
 8004f70:	0003      	movs	r3, r0
 8004f72:	330a      	adds	r3, #10
 8004f74:	001a      	movs	r2, r3
 8004f76:	4b41      	ldr	r3, [pc, #260]	@ (800507c <AT_Send+0x348>)
 8004f78:	601a      	str	r2, [r3, #0]
    break;
 8004f7a:	e075      	b.n	8005068 <AT_Send+0x334>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004f7c:	230f      	movs	r3, #15
 8004f7e:	18fc      	adds	r4, r7, r3
 8004f80:	f7ff fc94 	bl	80048ac <HTTPCPOST>
 8004f84:	0003      	movs	r3, r0
 8004f86:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004f88:	f009 f882 	bl	800e090 <HAL_GetTick>
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	33f5      	adds	r3, #245	@ 0xf5
 8004f90:	33ff      	adds	r3, #255	@ 0xff
 8004f92:	001a      	movs	r2, r3
 8004f94:	4b39      	ldr	r3, [pc, #228]	@ (800507c <AT_Send+0x348>)
 8004f96:	601a      	str	r2, [r3, #0]
    break;
 8004f98:	e066      	b.n	8005068 <AT_Send+0x334>

  case AT_SENDDATA:
    Debug("Send the data");
 8004f9a:	4a44      	ldr	r2, [pc, #272]	@ (80050ac <AT_Send+0x378>)
 8004f9c:	4b39      	ldr	r3, [pc, #228]	@ (8005084 <AT_Send+0x350>)
 8004f9e:	0019      	movs	r1, r3
 8004fa0:	2003      	movs	r0, #3
 8004fa2:	f008 fcd7 	bl	800d954 <CreateLine>
    ATCommandSend = SENDDATA();
 8004fa6:	230f      	movs	r3, #15
 8004fa8:	18fc      	adds	r4, r7, r3
 8004faa:	f7ff fcdf 	bl	800496c <SENDDATA>
 8004fae:	0003      	movs	r3, r0
 8004fb0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8004fb2:	f009 f86d 	bl	800e090 <HAL_GetTick>
 8004fb6:	0003      	movs	r3, r0
 8004fb8:	33f5      	adds	r3, #245	@ 0xf5
 8004fba:	33ff      	adds	r3, #255	@ 0xff
 8004fbc:	001a      	movs	r2, r3
 8004fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800507c <AT_Send+0x348>)
 8004fc0:	601a      	str	r2, [r3, #0]
    break;
 8004fc2:	e051      	b.n	8005068 <AT_Send+0x334>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004fc4:	4a3a      	ldr	r2, [pc, #232]	@ (80050b0 <AT_Send+0x37c>)
 8004fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8005084 <AT_Send+0x350>)
 8004fc8:	0019      	movs	r1, r3
 8004fca:	2003      	movs	r0, #3
 8004fcc:	f008 fcc2 	bl	800d954 <CreateLine>
    ATCommandSend = SLEEP();
 8004fd0:	230f      	movs	r3, #15
 8004fd2:	18fc      	adds	r4, r7, r3
 8004fd4:	f7ff fce6 	bl	80049a4 <SLEEP>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004fdc:	f009 f858 	bl	800e090 <HAL_GetTick>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	330a      	adds	r3, #10
 8004fe4:	001a      	movs	r2, r3
 8004fe6:	4b25      	ldr	r3, [pc, #148]	@ (800507c <AT_Send+0x348>)
 8004fe8:	601a      	str	r2, [r3, #0]
    break;
 8004fea:	e03d      	b.n	8005068 <AT_Send+0x334>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8004fec:	4a31      	ldr	r2, [pc, #196]	@ (80050b4 <AT_Send+0x380>)
 8004fee:	4b25      	ldr	r3, [pc, #148]	@ (8005084 <AT_Send+0x350>)
 8004ff0:	0019      	movs	r1, r3
 8004ff2:	2003      	movs	r0, #3
 8004ff4:	f008 fcae 	bl	800d954 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8004ff8:	230f      	movs	r3, #15
 8004ffa:	18fc      	adds	r4, r7, r3
 8004ffc:	f7ff fcee 	bl	80049dc <CIPSNTPCFG>
 8005000:	0003      	movs	r3, r0
 8005002:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005004:	f009 f844 	bl	800e090 <HAL_GetTick>
 8005008:	0003      	movs	r3, r0
 800500a:	330a      	adds	r3, #10
 800500c:	001a      	movs	r2, r3
 800500e:	4b1b      	ldr	r3, [pc, #108]	@ (800507c <AT_Send+0x348>)
 8005010:	601a      	str	r2, [r3, #0]
    break;
 8005012:	e029      	b.n	8005068 <AT_Send+0x334>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8005014:	4a28      	ldr	r2, [pc, #160]	@ (80050b8 <AT_Send+0x384>)
 8005016:	4b1b      	ldr	r3, [pc, #108]	@ (8005084 <AT_Send+0x350>)
 8005018:	0019      	movs	r1, r3
 800501a:	2003      	movs	r0, #3
 800501c:	f008 fc9a 	bl	800d954 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8005020:	230f      	movs	r3, #15
 8005022:	18fc      	adds	r4, r7, r3
 8005024:	f7ff fcfa 	bl	8004a1c <CIPSNTPTIME>
 8005028:	0003      	movs	r3, r0
 800502a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800502c:	f009 f830 	bl	800e090 <HAL_GetTick>
 8005030:	0003      	movs	r3, r0
 8005032:	33f5      	adds	r3, #245	@ 0xf5
 8005034:	33ff      	adds	r3, #255	@ 0xff
 8005036:	001a      	movs	r2, r3
 8005038:	4b10      	ldr	r3, [pc, #64]	@ (800507c <AT_Send+0x348>)
 800503a:	601a      	str	r2, [r3, #0]
    break;
 800503c:	e014      	b.n	8005068 <AT_Send+0x334>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 800503e:	4a1f      	ldr	r2, [pc, #124]	@ (80050bc <AT_Send+0x388>)
 8005040:	4b10      	ldr	r3, [pc, #64]	@ (8005084 <AT_Send+0x350>)
 8005042:	0019      	movs	r1, r3
 8005044:	2003      	movs	r0, #3
 8005046:	f008 fc85 	bl	800d954 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 800504a:	230f      	movs	r3, #15
 800504c:	18fc      	adds	r4, r7, r3
 800504e:	f7ff fd01 	bl	8004a54 <CIPSNTPINTV>
 8005052:	0003      	movs	r3, r0
 8005054:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005056:	f009 f81b 	bl	800e090 <HAL_GetTick>
 800505a:	0003      	movs	r3, r0
 800505c:	330a      	adds	r3, #10
 800505e:	001a      	movs	r2, r3
 8005060:	4b06      	ldr	r3, [pc, #24]	@ (800507c <AT_Send+0x348>)
 8005062:	601a      	str	r2, [r3, #0]
    break;
 8005064:	e000      	b.n	8005068 <AT_Send+0x334>
  break;
 8005066:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8005068:	230f      	movs	r3, #15
 800506a:	18fb      	adds	r3, r7, r3
 800506c:	781b      	ldrb	r3, [r3, #0]
}
 800506e:	0018      	movs	r0, r3
 8005070:	46bd      	mov	sp, r7
 8005072:	b005      	add	sp, #20
 8005074:	bd90      	pop	{r4, r7, pc}
 8005076:	46c0      	nop			@ (mov r8, r8)
 8005078:	08024038 	.word	0x08024038
 800507c:	20000994 	.word	0x20000994
 8005080:	08022b84 	.word	0x08022b84
 8005084:	08022400 	.word	0x08022400
 8005088:	08022b98 	.word	0x08022b98
 800508c:	08022bac 	.word	0x08022bac
 8005090:	08022bbc 	.word	0x08022bbc
 8005094:	08022bd0 	.word	0x08022bd0
 8005098:	08022be8 	.word	0x08022be8
 800509c:	08022c00 	.word	0x08022c00
 80050a0:	08022c18 	.word	0x08022c18
 80050a4:	08022c2c 	.word	0x08022c2c
 80050a8:	08022c48 	.word	0x08022c48
 80050ac:	08022c64 	.word	0x08022c64
 80050b0:	08022c74 	.word	0x08022c74
 80050b4:	08022c98 	.word	0x08022c98
 80050b8:	08022cac 	.word	0x08022cac
 80050bc:	08022cc4 	.word	0x08022cc4

080050c0 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80050c0:	b590      	push	{r4, r7, lr}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80050c6:	1dfb      	adds	r3, r7, #7
 80050c8:	2200      	movs	r2, #0
 80050ca:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80050cc:	4b7a      	ldr	r3, [pc, #488]	@ (80052b8 <ESP_WakeTest+0x1f8>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b05      	cmp	r3, #5
 80050d2:	d900      	bls.n	80050d6 <ESP_WakeTest+0x16>
 80050d4:	e0d6      	b.n	8005284 <ESP_WakeTest+0x1c4>
 80050d6:	009a      	lsls	r2, r3, #2
 80050d8:	4b78      	ldr	r3, [pc, #480]	@ (80052bc <ESP_WakeTest+0x1fc>)
 80050da:	18d3      	adds	r3, r2, r3
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 80050e0:	4b77      	ldr	r3, [pc, #476]	@ (80052c0 <ESP_WakeTest+0x200>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2201      	movs	r2, #1
 80050e6:	4053      	eors	r3, r2
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d036      	beq.n	800515c <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80050ee:	2380      	movs	r3, #128	@ 0x80
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	4874      	ldr	r0, [pc, #464]	@ (80052c4 <ESP_WakeTest+0x204>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	0019      	movs	r1, r3
 80050f8:	f00a fa45 	bl	800f586 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80050fc:	2032      	movs	r0, #50	@ 0x32
 80050fe:	f008 ffd1 	bl	800e0a4 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005102:	2380      	movs	r3, #128	@ 0x80
 8005104:	011b      	lsls	r3, r3, #4
 8005106:	486f      	ldr	r0, [pc, #444]	@ (80052c4 <ESP_WakeTest+0x204>)
 8005108:	2201      	movs	r2, #1
 800510a:	0019      	movs	r1, r3
 800510c:	f00a fa3b 	bl	800f586 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005110:	200a      	movs	r0, #10
 8005112:	f008 ffc7 	bl	800e0a4 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005116:	4b6c      	ldr	r3, [pc, #432]	@ (80052c8 <ESP_WakeTest+0x208>)
 8005118:	2200      	movs	r2, #0
 800511a:	2101      	movs	r1, #1
 800511c:	0018      	movs	r0, r3
 800511e:	f00a fa32 	bl	800f586 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005122:	200a      	movs	r0, #10
 8005124:	f008 ffbe 	bl	800e0a4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8005128:	4b67      	ldr	r3, [pc, #412]	@ (80052c8 <ESP_WakeTest+0x208>)
 800512a:	2201      	movs	r2, #1
 800512c:	2102      	movs	r1, #2
 800512e:	0018      	movs	r0, r3
 8005130:	f00a fa29 	bl	800f586 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005134:	200a      	movs	r0, #10
 8005136:	f008 ffb5 	bl	800e0a4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800513a:	4b63      	ldr	r3, [pc, #396]	@ (80052c8 <ESP_WakeTest+0x208>)
 800513c:	2201      	movs	r2, #1
 800513e:	2101      	movs	r1, #1
 8005140:	0018      	movs	r0, r3
 8005142:	f00a fa20 	bl	800f586 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005146:	f008 ffa3 	bl	800e090 <HAL_GetTick>
 800514a:	0003      	movs	r3, r0
 800514c:	22af      	movs	r2, #175	@ 0xaf
 800514e:	0092      	lsls	r2, r2, #2
 8005150:	189a      	adds	r2, r3, r2
 8005152:	4b5e      	ldr	r3, [pc, #376]	@ (80052cc <ESP_WakeTest+0x20c>)
 8005154:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005156:	4b5a      	ldr	r3, [pc, #360]	@ (80052c0 <ESP_WakeTest+0x200>)
 8005158:	2201      	movs	r2, #1
 800515a:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800515c:	2380      	movs	r3, #128	@ 0x80
 800515e:	005a      	lsls	r2, r3, #1
 8005160:	4b5b      	ldr	r3, [pc, #364]	@ (80052d0 <ESP_WakeTest+0x210>)
 8005162:	0011      	movs	r1, r2
 8005164:	0018      	movs	r0, r3
 8005166:	f7fe fc93 	bl	8003a90 <ESP_Receive>
 800516a:	1e03      	subs	r3, r0, #0
 800516c:	d100      	bne.n	8005170 <ESP_WakeTest+0xb0>
 800516e:	e099      	b.n	80052a4 <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 8005170:	4b51      	ldr	r3, [pc, #324]	@ (80052b8 <ESP_WakeTest+0x1f8>)
 8005172:	2201      	movs	r2, #1
 8005174:	701a      	strb	r2, [r3, #0]
      }
      break;
 8005176:	e095      	b.n	80052a4 <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8005178:	4b54      	ldr	r3, [pc, #336]	@ (80052cc <ESP_WakeTest+0x20c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	0018      	movs	r0, r3
 800517e:	f008 fb93 	bl	800d8a8 <TimestampIsReached>
 8005182:	1e03      	subs	r3, r0, #0
 8005184:	d100      	bne.n	8005188 <ESP_WakeTest+0xc8>
 8005186:	e08f      	b.n	80052a8 <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 8005188:	4b52      	ldr	r3, [pc, #328]	@ (80052d4 <ESP_WakeTest+0x214>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	1dfc      	adds	r4, r7, #7
 800518e:	0018      	movs	r0, r3
 8005190:	f7ff fdd0 	bl	8004d34 <AT_Send>
 8005194:	0003      	movs	r3, r0
 8005196:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005198:	1dfb      	adds	r3, r7, #7
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d100      	bne.n	80051a2 <ESP_WakeTest+0xe2>
 80051a0:	e082      	b.n	80052a8 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 80051a2:	4b45      	ldr	r3, [pc, #276]	@ (80052b8 <ESP_WakeTest+0x1f8>)
 80051a4:	2202      	movs	r2, #2
 80051a6:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80051a8:	e07e      	b.n	80052a8 <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80051aa:	4b48      	ldr	r3, [pc, #288]	@ (80052cc <ESP_WakeTest+0x20c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	0018      	movs	r0, r3
 80051b0:	f008 fb7a 	bl	800d8a8 <TimestampIsReached>
 80051b4:	1e03      	subs	r3, r0, #0
 80051b6:	d100      	bne.n	80051ba <ESP_WakeTest+0xfa>
 80051b8:	e078      	b.n	80052ac <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80051ba:	4b47      	ldr	r3, [pc, #284]	@ (80052d8 <ESP_WakeTest+0x218>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	0018      	movs	r0, r3
 80051c0:	f7ff fc64 	bl	8004a8c <DMA_ProcessBuffer>
 80051c4:	0003      	movs	r3, r0
 80051c6:	001a      	movs	r2, r3
 80051c8:	4b44      	ldr	r3, [pc, #272]	@ (80052dc <ESP_WakeTest+0x21c>)
 80051ca:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80051cc:	4b43      	ldr	r3, [pc, #268]	@ (80052dc <ESP_WakeTest+0x21c>)
 80051ce:	781a      	ldrb	r2, [r3, #0]
 80051d0:	4b41      	ldr	r3, [pc, #260]	@ (80052d8 <ESP_WakeTest+0x218>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	1dbc      	adds	r4, r7, #6
 80051d6:	0019      	movs	r1, r3
 80051d8:	0010      	movs	r0, r2
 80051da:	f7ff fd69 	bl	8004cb0 <ATCompare>
 80051de:	0003      	movs	r3, r0
 80051e0:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80051e2:	4b3e      	ldr	r3, [pc, #248]	@ (80052dc <ESP_WakeTest+0x21c>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d102      	bne.n	80051f0 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 80051ea:	4b33      	ldr	r3, [pc, #204]	@ (80052b8 <ESP_WakeTest+0x1f8>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80051f0:	4b3a      	ldr	r3, [pc, #232]	@ (80052dc <ESP_WakeTest+0x21c>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b07      	cmp	r3, #7
 80051f6:	d104      	bne.n	8005202 <ESP_WakeTest+0x142>
          StartProg();
 80051f8:	f7fe ff4e 	bl	8004098 <StartProg>
          TestState = ESP_TEST_BOOT;
 80051fc:	4b2e      	ldr	r3, [pc, #184]	@ (80052b8 <ESP_WakeTest+0x1f8>)
 80051fe:	2205      	movs	r2, #5
 8005200:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005202:	4b36      	ldr	r3, [pc, #216]	@ (80052dc <ESP_WakeTest+0x21c>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b03      	cmp	r3, #3
 8005208:	d109      	bne.n	800521e <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 800520a:	f008 ff41 	bl	800e090 <HAL_GetTick>
 800520e:	0003      	movs	r3, r0
 8005210:	3332      	adds	r3, #50	@ 0x32
 8005212:	001a      	movs	r2, r3
 8005214:	4b2d      	ldr	r3, [pc, #180]	@ (80052cc <ESP_WakeTest+0x20c>)
 8005216:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8005218:	4b27      	ldr	r3, [pc, #156]	@ (80052b8 <ESP_WakeTest+0x1f8>)
 800521a:	2201      	movs	r2, #1
 800521c:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 800521e:	1dbb      	adds	r3, r7, #6
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d042      	beq.n	80052ac <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 8005226:	4b24      	ldr	r3, [pc, #144]	@ (80052b8 <ESP_WakeTest+0x1f8>)
 8005228:	2203      	movs	r2, #3
 800522a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800522c:	e03e      	b.n	80052ac <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 800522e:	4b2c      	ldr	r3, [pc, #176]	@ (80052e0 <ESP_WakeTest+0x220>)
 8005230:	22fa      	movs	r2, #250	@ 0xfa
 8005232:	0112      	lsls	r2, r2, #4
 8005234:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 8005236:	4b2a      	ldr	r3, [pc, #168]	@ (80052e0 <ESP_WakeTest+0x220>)
 8005238:	4a2a      	ldr	r2, [pc, #168]	@ (80052e4 <ESP_WakeTest+0x224>)
 800523a:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 800523c:	4b28      	ldr	r3, [pc, #160]	@ (80052e0 <ESP_WakeTest+0x220>)
 800523e:	22fa      	movs	r2, #250	@ 0xfa
 8005240:	0112      	lsls	r2, r2, #4
 8005242:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8005244:	4b1c      	ldr	r3, [pc, #112]	@ (80052b8 <ESP_WakeTest+0x1f8>)
 8005246:	2204      	movs	r2, #4
 8005248:	701a      	strb	r2, [r3, #0]

      break;
 800524a:	e030      	b.n	80052ae <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
      testRound = false;
 800524c:	4b26      	ldr	r3, [pc, #152]	@ (80052e8 <ESP_WakeTest+0x228>)
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8005252:	4b1b      	ldr	r3, [pc, #108]	@ (80052c0 <ESP_WakeTest+0x200>)
 8005254:	2200      	movs	r2, #0
 8005256:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005258:	4b1b      	ldr	r3, [pc, #108]	@ (80052c8 <ESP_WakeTest+0x208>)
 800525a:	2200      	movs	r2, #0
 800525c:	2101      	movs	r1, #1
 800525e:	0018      	movs	r0, r3
 8005260:	f00a f991 	bl	800f586 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005264:	2380      	movs	r3, #128	@ 0x80
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	4816      	ldr	r0, [pc, #88]	@ (80052c4 <ESP_WakeTest+0x204>)
 800526a:	2200      	movs	r2, #0
 800526c:	0019      	movs	r1, r3
 800526e:	f00a f98a 	bl	800f586 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005272:	4b15      	ldr	r3, [pc, #84]	@ (80052c8 <ESP_WakeTest+0x208>)
 8005274:	2200      	movs	r2, #0
 8005276:	2102      	movs	r1, #2
 8005278:	0018      	movs	r0, r3
 800527a:	f00a f984 	bl	800f586 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 800527e:	f003 fadb 	bl	8008838 <SetESPMeasurementDone>
      break;
 8005282:	e014      	b.n	80052ae <ESP_WakeTest+0x1ee>

    default:
      TestState = ESP_TEST_INIT;
 8005284:	4b0c      	ldr	r3, [pc, #48]	@ (80052b8 <ESP_WakeTest+0x1f8>)
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
      break;
 800528a:	e010      	b.n	80052ae <ESP_WakeTest+0x1ee>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 800528c:	4b14      	ldr	r3, [pc, #80]	@ (80052e0 <ESP_WakeTest+0x220>)
 800528e:	22fa      	movs	r2, #250	@ 0xfa
 8005290:	0112      	lsls	r2, r2, #4
 8005292:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8005294:	4b12      	ldr	r3, [pc, #72]	@ (80052e0 <ESP_WakeTest+0x220>)
 8005296:	22fa      	movs	r2, #250	@ 0xfa
 8005298:	0112      	lsls	r2, r2, #4
 800529a:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 800529c:	4b10      	ldr	r3, [pc, #64]	@ (80052e0 <ESP_WakeTest+0x220>)
 800529e:	2200      	movs	r2, #0
 80052a0:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 80052a2:	e004      	b.n	80052ae <ESP_WakeTest+0x1ee>
      break;
 80052a4:	46c0      	nop			@ (mov r8, r8)
 80052a6:	e002      	b.n	80052ae <ESP_WakeTest+0x1ee>
      break;
 80052a8:	46c0      	nop			@ (mov r8, r8)
 80052aa:	e000      	b.n	80052ae <ESP_WakeTest+0x1ee>
      break;
 80052ac:	46c0      	nop			@ (mov r8, r8)
  }
}
 80052ae:	46c0      	nop			@ (mov r8, r8)
 80052b0:	46bd      	mov	sp, r7
 80052b2:	b003      	add	sp, #12
 80052b4:	bd90      	pop	{r4, r7, pc}
 80052b6:	46c0      	nop			@ (mov r8, r8)
 80052b8:	200009a4 	.word	0x200009a4
 80052bc:	08024088 	.word	0x08024088
 80052c0:	20000548 	.word	0x20000548
 80052c4:	50000800 	.word	0x50000800
 80052c8:	50001c00 	.word	0x50001c00
 80052cc:	20000994 	.word	0x20000994
 80052d0:	20000448 	.word	0x20000448
 80052d4:	200009a2 	.word	0x200009a2
 80052d8:	200009a1 	.word	0x200009a1
 80052dc:	20000029 	.word	0x20000029
 80052e0:	40000400 	.word	0x40000400
 80052e4:	00000bb8 	.word	0x00000bb8
 80052e8:	20000000 	.word	0x20000000

080052ec <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80052ec:	b5b0      	push	{r4, r5, r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80052f2:	1dfb      	adds	r3, r7, #7
 80052f4:	2200      	movs	r2, #0
 80052f6:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  if (EspState != oldEspState) {
 80052f8:	4bdb      	ldr	r3, [pc, #876]	@ (8005668 <ESP_Upkeep+0x37c>)
 80052fa:	781a      	ldrb	r2, [r3, #0]
 80052fc:	4bdb      	ldr	r3, [pc, #876]	@ (800566c <ESP_Upkeep+0x380>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d01f      	beq.n	8005344 <ESP_Upkeep+0x58>
    oldEspState = EspState;
 8005304:	4bd8      	ldr	r3, [pc, #864]	@ (8005668 <ESP_Upkeep+0x37c>)
 8005306:	781a      	ldrb	r2, [r3, #0]
 8005308:	4bd8      	ldr	r3, [pc, #864]	@ (800566c <ESP_Upkeep+0x380>)
 800530a:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 800530c:	4bd7      	ldr	r3, [pc, #860]	@ (800566c <ESP_Upkeep+0x380>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b03      	cmp	r3, #3
 8005312:	d103      	bne.n	800531c <ESP_Upkeep+0x30>
 8005314:	4bd6      	ldr	r3, [pc, #856]	@ (8005670 <ESP_Upkeep+0x384>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b0e      	cmp	r3, #14
 800531a:	d013      	beq.n	8005344 <ESP_Upkeep+0x58>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 800531c:	4bd3      	ldr	r3, [pc, #844]	@ (800566c <ESP_Upkeep+0x380>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	001d      	movs	r5, r3
 8005322:	4bd3      	ldr	r3, [pc, #844]	@ (8005670 <ESP_Upkeep+0x384>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	0018      	movs	r0, r3
 8005328:	4bd2      	ldr	r3, [pc, #840]	@ (8005674 <ESP_Upkeep+0x388>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	001c      	movs	r4, r3
 800532e:	4bd2      	ldr	r3, [pc, #840]	@ (8005678 <ESP_Upkeep+0x38c>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	4ad2      	ldr	r2, [pc, #840]	@ (800567c <ESP_Upkeep+0x390>)
 8005334:	49d2      	ldr	r1, [pc, #840]	@ (8005680 <ESP_Upkeep+0x394>)
 8005336:	9302      	str	r3, [sp, #8]
 8005338:	9401      	str	r4, [sp, #4]
 800533a:	9000      	str	r0, [sp, #0]
 800533c:	002b      	movs	r3, r5
 800533e:	2003      	movs	r0, #3
 8005340:	f008 fb08 	bl	800d954 <CreateLine>
    }
  }

  switch (EspState) {
 8005344:	4bc8      	ldr	r3, [pc, #800]	@ (8005668 <ESP_Upkeep+0x37c>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b0f      	cmp	r3, #15
 800534a:	d901      	bls.n	8005350 <ESP_Upkeep+0x64>
 800534c:	f000 fbfb 	bl	8005b46 <ESP_Upkeep+0x85a>
 8005350:	009a      	lsls	r2, r3, #2
 8005352:	4bcc      	ldr	r3, [pc, #816]	@ (8005684 <ESP_Upkeep+0x398>)
 8005354:	18d3      	adds	r3, r2, r3
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 800535a:	4bc3      	ldr	r3, [pc, #780]	@ (8005668 <ESP_Upkeep+0x37c>)
 800535c:	2201      	movs	r2, #1
 800535e:	701a      	strb	r2, [r3, #0]
      break;
 8005360:	f000 fc0a 	bl	8005b78 <ESP_Upkeep+0x88c>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8005364:	4bc8      	ldr	r3, [pc, #800]	@ (8005688 <ESP_Upkeep+0x39c>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	2201      	movs	r2, #1
 800536a:	4053      	eors	r3, r2
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d036      	beq.n	80053e0 <ESP_Upkeep+0xf4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005372:	2380      	movs	r3, #128	@ 0x80
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	48c5      	ldr	r0, [pc, #788]	@ (800568c <ESP_Upkeep+0x3a0>)
 8005378:	2200      	movs	r2, #0
 800537a:	0019      	movs	r1, r3
 800537c:	f00a f903 	bl	800f586 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005380:	2001      	movs	r0, #1
 8005382:	f008 fe8f 	bl	800e0a4 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005386:	2380      	movs	r3, #128	@ 0x80
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	48c0      	ldr	r0, [pc, #768]	@ (800568c <ESP_Upkeep+0x3a0>)
 800538c:	2201      	movs	r2, #1
 800538e:	0019      	movs	r1, r3
 8005390:	f00a f8f9 	bl	800f586 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005394:	2001      	movs	r0, #1
 8005396:	f008 fe85 	bl	800e0a4 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800539a:	4bbd      	ldr	r3, [pc, #756]	@ (8005690 <ESP_Upkeep+0x3a4>)
 800539c:	2200      	movs	r2, #0
 800539e:	2101      	movs	r1, #1
 80053a0:	0018      	movs	r0, r3
 80053a2:	f00a f8f0 	bl	800f586 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80053a6:	2001      	movs	r0, #1
 80053a8:	f008 fe7c 	bl	800e0a4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80053ac:	4bb8      	ldr	r3, [pc, #736]	@ (8005690 <ESP_Upkeep+0x3a4>)
 80053ae:	2201      	movs	r2, #1
 80053b0:	2102      	movs	r1, #2
 80053b2:	0018      	movs	r0, r3
 80053b4:	f00a f8e7 	bl	800f586 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80053b8:	2001      	movs	r0, #1
 80053ba:	f008 fe73 	bl	800e0a4 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80053be:	4bb4      	ldr	r3, [pc, #720]	@ (8005690 <ESP_Upkeep+0x3a4>)
 80053c0:	2201      	movs	r2, #1
 80053c2:	2101      	movs	r1, #1
 80053c4:	0018      	movs	r0, r3
 80053c6:	f00a f8de 	bl	800f586 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80053ca:	f008 fe61 	bl	800e090 <HAL_GetTick>
 80053ce:	0003      	movs	r3, r0
 80053d0:	22af      	movs	r2, #175	@ 0xaf
 80053d2:	0092      	lsls	r2, r2, #2
 80053d4:	189a      	adds	r2, r3, r2
 80053d6:	4baf      	ldr	r3, [pc, #700]	@ (8005694 <ESP_Upkeep+0x3a8>)
 80053d8:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80053da:	4bab      	ldr	r3, [pc, #684]	@ (8005688 <ESP_Upkeep+0x39c>)
 80053dc:	2201      	movs	r2, #1
 80053de:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80053e0:	2380      	movs	r3, #128	@ 0x80
 80053e2:	005a      	lsls	r2, r3, #1
 80053e4:	4bac      	ldr	r3, [pc, #688]	@ (8005698 <ESP_Upkeep+0x3ac>)
 80053e6:	0011      	movs	r1, r2
 80053e8:	0018      	movs	r0, r3
 80053ea:	f7fe fb51 	bl	8003a90 <ESP_Receive>
 80053ee:	1e03      	subs	r3, r0, #0
 80053f0:	d101      	bne.n	80053f6 <ESP_Upkeep+0x10a>
 80053f2:	f000 fbb4 	bl	8005b5e <ESP_Upkeep+0x872>
        EspState = ESP_STATE_WAIT_AWAKE;
 80053f6:	4b9c      	ldr	r3, [pc, #624]	@ (8005668 <ESP_Upkeep+0x37c>)
 80053f8:	220f      	movs	r2, #15
 80053fa:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80053fc:	f008 fe48 	bl	800e090 <HAL_GetTick>
 8005400:	0003      	movs	r3, r0
 8005402:	22fa      	movs	r2, #250	@ 0xfa
 8005404:	00d2      	lsls	r2, r2, #3
 8005406:	189a      	adds	r2, r3, r2
 8005408:	4ba4      	ldr	r3, [pc, #656]	@ (800569c <ESP_Upkeep+0x3b0>)
 800540a:	601a      	str	r2, [r3, #0]
      }
      break;
 800540c:	f000 fba7 	bl	8005b5e <ESP_Upkeep+0x872>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8005410:	2001      	movs	r0, #1
 8005412:	f7ff fb3b 	bl	8004a8c <DMA_ProcessBuffer>
 8005416:	0003      	movs	r3, r0
 8005418:	001a      	movs	r2, r3
 800541a:	4ba1      	ldr	r3, [pc, #644]	@ (80056a0 <ESP_Upkeep+0x3b4>)
 800541c:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 800541e:	4ba0      	ldr	r3, [pc, #640]	@ (80056a0 <ESP_Upkeep+0x3b4>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	1dbc      	adds	r4, r7, #6
 8005424:	2101      	movs	r1, #1
 8005426:	0018      	movs	r0, r3
 8005428:	f7ff fc42 	bl	8004cb0 <ATCompare>
 800542c:	0003      	movs	r3, r0
 800542e:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8005430:	1dbb      	adds	r3, r7, #6
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d107      	bne.n	8005448 <ESP_Upkeep+0x15c>
 8005438:	4b98      	ldr	r3, [pc, #608]	@ (800569c <ESP_Upkeep+0x3b0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	0018      	movs	r0, r3
 800543e:	f008 fa33 	bl	800d8a8 <TimestampIsReached>
 8005442:	1e03      	subs	r3, r0, #0
 8005444:	d100      	bne.n	8005448 <ESP_Upkeep+0x15c>
 8005446:	e38c      	b.n	8005b62 <ESP_Upkeep+0x876>
          EspState = ESP_STATE_MODE_SELECT;
 8005448:	4b87      	ldr	r3, [pc, #540]	@ (8005668 <ESP_Upkeep+0x37c>)
 800544a:	220b      	movs	r2, #11
 800544c:	701a      	strb	r2, [r3, #0]
        }
        break;
 800544e:	e388      	b.n	8005b62 <ESP_Upkeep+0x876>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8005450:	4b94      	ldr	r3, [pc, #592]	@ (80056a4 <ESP_Upkeep+0x3b8>)
 8005452:	2209      	movs	r2, #9
 8005454:	2114      	movs	r1, #20
 8005456:	0018      	movs	r0, r3
 8005458:	f01a f81e 	bl	801f498 <memset>
      if(!InitIsDone || WifiReset){
 800545c:	4b92      	ldr	r3, [pc, #584]	@ (80056a8 <ESP_Upkeep+0x3bc>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2201      	movs	r2, #1
 8005462:	4053      	eors	r3, r2
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d103      	bne.n	8005472 <ESP_Upkeep+0x186>
 800546a:	4b90      	ldr	r3, [pc, #576]	@ (80056ac <ESP_Upkeep+0x3c0>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d01a      	beq.n	80054a8 <ESP_Upkeep+0x1bc>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005472:	4b8c      	ldr	r3, [pc, #560]	@ (80056a4 <ESP_Upkeep+0x3b8>)
 8005474:	4a8e      	ldr	r2, [pc, #568]	@ (80056b0 <ESP_Upkeep+0x3c4>)
 8005476:	6811      	ldr	r1, [r2, #0]
 8005478:	6019      	str	r1, [r3, #0]
 800547a:	8891      	ldrh	r1, [r2, #4]
 800547c:	8099      	strh	r1, [r3, #4]
 800547e:	7992      	ldrb	r2, [r2, #6]
 8005480:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005482:	4b79      	ldr	r3, [pc, #484]	@ (8005668 <ESP_Upkeep+0x37c>)
 8005484:	2204      	movs	r2, #4
 8005486:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005488:	4b8a      	ldr	r3, [pc, #552]	@ (80056b4 <ESP_Upkeep+0x3c8>)
 800548a:	2200      	movs	r2, #0
 800548c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 800548e:	4b79      	ldr	r3, [pc, #484]	@ (8005674 <ESP_Upkeep+0x388>)
 8005490:	2200      	movs	r2, #0
 8005492:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005494:	4b87      	ldr	r3, [pc, #540]	@ (80056b4 <ESP_Upkeep+0x3c8>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	001a      	movs	r2, r3
 800549a:	4b82      	ldr	r3, [pc, #520]	@ (80056a4 <ESP_Upkeep+0x3b8>)
 800549c:	5c9a      	ldrb	r2, [r3, r2]
 800549e:	4b74      	ldr	r3, [pc, #464]	@ (8005670 <ESP_Upkeep+0x384>)
 80054a0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80054a2:	4b75      	ldr	r3, [pc, #468]	@ (8005678 <ESP_Upkeep+0x38c>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80054a8:	4b7f      	ldr	r3, [pc, #508]	@ (80056a8 <ESP_Upkeep+0x3bc>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01f      	beq.n	80054f0 <ESP_Upkeep+0x204>
 80054b0:	4b81      	ldr	r3, [pc, #516]	@ (80056b8 <ESP_Upkeep+0x3cc>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2201      	movs	r2, #1
 80054b6:	4053      	eors	r3, r2
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d018      	beq.n	80054f0 <ESP_Upkeep+0x204>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80054be:	4b79      	ldr	r3, [pc, #484]	@ (80056a4 <ESP_Upkeep+0x3b8>)
 80054c0:	4a7e      	ldr	r2, [pc, #504]	@ (80056bc <ESP_Upkeep+0x3d0>)
 80054c2:	6811      	ldr	r1, [r2, #0]
 80054c4:	6019      	str	r1, [r3, #0]
 80054c6:	8892      	ldrh	r2, [r2, #4]
 80054c8:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80054ca:	4b67      	ldr	r3, [pc, #412]	@ (8005668 <ESP_Upkeep+0x37c>)
 80054cc:	2204      	movs	r2, #4
 80054ce:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80054d0:	4b78      	ldr	r3, [pc, #480]	@ (80056b4 <ESP_Upkeep+0x3c8>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80054d6:	4b67      	ldr	r3, [pc, #412]	@ (8005674 <ESP_Upkeep+0x388>)
 80054d8:	2201      	movs	r2, #1
 80054da:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80054dc:	4b75      	ldr	r3, [pc, #468]	@ (80056b4 <ESP_Upkeep+0x3c8>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	001a      	movs	r2, r3
 80054e2:	4b70      	ldr	r3, [pc, #448]	@ (80056a4 <ESP_Upkeep+0x3b8>)
 80054e4:	5c9a      	ldrb	r2, [r3, r2]
 80054e6:	4b62      	ldr	r3, [pc, #392]	@ (8005670 <ESP_Upkeep+0x384>)
 80054e8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80054ea:	4b63      	ldr	r3, [pc, #396]	@ (8005678 <ESP_Upkeep+0x38c>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80054f0:	4b6d      	ldr	r3, [pc, #436]	@ (80056a8 <ESP_Upkeep+0x3bc>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d021      	beq.n	800553c <ESP_Upkeep+0x250>
 80054f8:	4b6f      	ldr	r3, [pc, #444]	@ (80056b8 <ESP_Upkeep+0x3cc>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01d      	beq.n	800553c <ESP_Upkeep+0x250>
 8005500:	4b6f      	ldr	r3, [pc, #444]	@ (80056c0 <ESP_Upkeep+0x3d4>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2201      	movs	r2, #1
 8005506:	4053      	eors	r3, r2
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d016      	beq.n	800553c <ESP_Upkeep+0x250>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 800550e:	4b6d      	ldr	r3, [pc, #436]	@ (80056c4 <ESP_Upkeep+0x3d8>)
 8005510:	881a      	ldrh	r2, [r3, #0]
 8005512:	4b64      	ldr	r3, [pc, #400]	@ (80056a4 <ESP_Upkeep+0x3b8>)
 8005514:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005516:	4b54      	ldr	r3, [pc, #336]	@ (8005668 <ESP_Upkeep+0x37c>)
 8005518:	2204      	movs	r2, #4
 800551a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800551c:	4b65      	ldr	r3, [pc, #404]	@ (80056b4 <ESP_Upkeep+0x3c8>)
 800551e:	2200      	movs	r2, #0
 8005520:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8005522:	4b54      	ldr	r3, [pc, #336]	@ (8005674 <ESP_Upkeep+0x388>)
 8005524:	2204      	movs	r2, #4
 8005526:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005528:	4b62      	ldr	r3, [pc, #392]	@ (80056b4 <ESP_Upkeep+0x3c8>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	001a      	movs	r2, r3
 800552e:	4b5d      	ldr	r3, [pc, #372]	@ (80056a4 <ESP_Upkeep+0x3b8>)
 8005530:	5c9a      	ldrb	r2, [r3, r2]
 8005532:	4b4f      	ldr	r3, [pc, #316]	@ (8005670 <ESP_Upkeep+0x384>)
 8005534:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005536:	4b50      	ldr	r3, [pc, #320]	@ (8005678 <ESP_Upkeep+0x38c>)
 8005538:	2200      	movs	r2, #0
 800553a:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800553c:	4b5a      	ldr	r3, [pc, #360]	@ (80056a8 <ESP_Upkeep+0x3bc>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d02e      	beq.n	80055a2 <ESP_Upkeep+0x2b6>
 8005544:	4b5c      	ldr	r3, [pc, #368]	@ (80056b8 <ESP_Upkeep+0x3cc>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d02a      	beq.n	80055a2 <ESP_Upkeep+0x2b6>
 800554c:	4b5c      	ldr	r3, [pc, #368]	@ (80056c0 <ESP_Upkeep+0x3d4>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d026      	beq.n	80055a2 <ESP_Upkeep+0x2b6>
 8005554:	4b5c      	ldr	r3, [pc, #368]	@ (80056c8 <ESP_Upkeep+0x3dc>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2201      	movs	r2, #1
 800555a:	4053      	eors	r3, r2
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01f      	beq.n	80055a2 <ESP_Upkeep+0x2b6>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005562:	4b50      	ldr	r3, [pc, #320]	@ (80056a4 <ESP_Upkeep+0x3b8>)
 8005564:	4a59      	ldr	r2, [pc, #356]	@ (80056cc <ESP_Upkeep+0x3e0>)
 8005566:	8811      	ldrh	r1, [r2, #0]
 8005568:	8019      	strh	r1, [r3, #0]
 800556a:	7892      	ldrb	r2, [r2, #2]
 800556c:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 800556e:	4b3e      	ldr	r3, [pc, #248]	@ (8005668 <ESP_Upkeep+0x37c>)
 8005570:	2204      	movs	r2, #4
 8005572:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005574:	4b4f      	ldr	r3, [pc, #316]	@ (80056b4 <ESP_Upkeep+0x3c8>)
 8005576:	2200      	movs	r2, #0
 8005578:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 800557a:	4b3e      	ldr	r3, [pc, #248]	@ (8005674 <ESP_Upkeep+0x388>)
 800557c:	2202      	movs	r2, #2
 800557e:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005580:	f008 fd86 	bl	800e090 <HAL_GetTick>
 8005584:	0002      	movs	r2, r0
 8005586:	4b52      	ldr	r3, [pc, #328]	@ (80056d0 <ESP_Upkeep+0x3e4>)
 8005588:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 800558a:	f007 fb2d 	bl	800cbe8 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 800558e:	4b49      	ldr	r3, [pc, #292]	@ (80056b4 <ESP_Upkeep+0x3c8>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	001a      	movs	r2, r3
 8005594:	4b43      	ldr	r3, [pc, #268]	@ (80056a4 <ESP_Upkeep+0x3b8>)
 8005596:	5c9a      	ldrb	r2, [r3, r2]
 8005598:	4b35      	ldr	r3, [pc, #212]	@ (8005670 <ESP_Upkeep+0x384>)
 800559a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800559c:	4b36      	ldr	r3, [pc, #216]	@ (8005678 <ESP_Upkeep+0x38c>)
 800559e:	2200      	movs	r2, #0
 80055a0:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80055a2:	4b4c      	ldr	r3, [pc, #304]	@ (80056d4 <ESP_Upkeep+0x3e8>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d01a      	beq.n	80055e0 <ESP_Upkeep+0x2f4>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80055aa:	4b3e      	ldr	r3, [pc, #248]	@ (80056a4 <ESP_Upkeep+0x3b8>)
 80055ac:	4a4a      	ldr	r2, [pc, #296]	@ (80056d8 <ESP_Upkeep+0x3ec>)
 80055ae:	6811      	ldr	r1, [r2, #0]
 80055b0:	6019      	str	r1, [r3, #0]
 80055b2:	7912      	ldrb	r2, [r2, #4]
 80055b4:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80055b6:	4b2c      	ldr	r3, [pc, #176]	@ (8005668 <ESP_Upkeep+0x37c>)
 80055b8:	2204      	movs	r2, #4
 80055ba:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80055bc:	4b3d      	ldr	r3, [pc, #244]	@ (80056b4 <ESP_Upkeep+0x3c8>)
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80055c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005674 <ESP_Upkeep+0x388>)
 80055c4:	2203      	movs	r2, #3
 80055c6:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 80055c8:	f007 fb0e 	bl	800cbe8 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80055cc:	4b39      	ldr	r3, [pc, #228]	@ (80056b4 <ESP_Upkeep+0x3c8>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	001a      	movs	r2, r3
 80055d2:	4b34      	ldr	r3, [pc, #208]	@ (80056a4 <ESP_Upkeep+0x3b8>)
 80055d4:	5c9a      	ldrb	r2, [r3, r2]
 80055d6:	4b26      	ldr	r3, [pc, #152]	@ (8005670 <ESP_Upkeep+0x384>)
 80055d8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80055da:	4b27      	ldr	r3, [pc, #156]	@ (8005678 <ESP_Upkeep+0x38c>)
 80055dc:	2200      	movs	r2, #0
 80055de:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 80055e0:	4b31      	ldr	r3, [pc, #196]	@ (80056a8 <ESP_Upkeep+0x3bc>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d100      	bne.n	80055ea <ESP_Upkeep+0x2fe>
 80055e8:	e2bd      	b.n	8005b66 <ESP_Upkeep+0x87a>
 80055ea:	4b33      	ldr	r3, [pc, #204]	@ (80056b8 <ESP_Upkeep+0x3cc>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d100      	bne.n	80055f4 <ESP_Upkeep+0x308>
 80055f2:	e2b8      	b.n	8005b66 <ESP_Upkeep+0x87a>
 80055f4:	4b32      	ldr	r3, [pc, #200]	@ (80056c0 <ESP_Upkeep+0x3d4>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d100      	bne.n	80055fe <ESP_Upkeep+0x312>
 80055fc:	e2b3      	b.n	8005b66 <ESP_Upkeep+0x87a>
 80055fe:	4b32      	ldr	r3, [pc, #200]	@ (80056c8 <ESP_Upkeep+0x3dc>)
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d100      	bne.n	8005608 <ESP_Upkeep+0x31c>
 8005606:	e2ae      	b.n	8005b66 <ESP_Upkeep+0x87a>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005608:	4b34      	ldr	r3, [pc, #208]	@ (80056dc <ESP_Upkeep+0x3f0>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	4b25      	ldr	r3, [pc, #148]	@ (80056a4 <ESP_Upkeep+0x3b8>)
 800560e:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005610:	4b15      	ldr	r3, [pc, #84]	@ (8005668 <ESP_Upkeep+0x37c>)
 8005612:	2204      	movs	r2, #4
 8005614:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005616:	4b27      	ldr	r3, [pc, #156]	@ (80056b4 <ESP_Upkeep+0x3c8>)
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 800561c:	4b15      	ldr	r3, [pc, #84]	@ (8005674 <ESP_Upkeep+0x388>)
 800561e:	2205      	movs	r2, #5
 8005620:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005622:	f008 fd35 	bl	800e090 <HAL_GetTick>
 8005626:	0002      	movs	r2, r0
 8005628:	4b29      	ldr	r3, [pc, #164]	@ (80056d0 <ESP_Upkeep+0x3e4>)
 800562a:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 800562c:	f007 fadc 	bl	800cbe8 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005630:	4b20      	ldr	r3, [pc, #128]	@ (80056b4 <ESP_Upkeep+0x3c8>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	001a      	movs	r2, r3
 8005636:	4b1b      	ldr	r3, [pc, #108]	@ (80056a4 <ESP_Upkeep+0x3b8>)
 8005638:	5c9a      	ldrb	r2, [r3, r2]
 800563a:	4b0d      	ldr	r3, [pc, #52]	@ (8005670 <ESP_Upkeep+0x384>)
 800563c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800563e:	4b0e      	ldr	r3, [pc, #56]	@ (8005678 <ESP_Upkeep+0x38c>)
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
      }
    break;
 8005644:	e28f      	b.n	8005b66 <ESP_Upkeep+0x87a>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8005646:	4b0a      	ldr	r3, [pc, #40]	@ (8005670 <ESP_Upkeep+0x384>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	1dfc      	adds	r4, r7, #7
 800564c:	0018      	movs	r0, r3
 800564e:	f7ff fb71 	bl	8004d34 <AT_Send>
 8005652:	0003      	movs	r3, r0
 8005654:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005656:	1dfb      	adds	r3, r7, #7
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d100      	bne.n	8005660 <ESP_Upkeep+0x374>
 800565e:	e284      	b.n	8005b6a <ESP_Upkeep+0x87e>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005660:	4b01      	ldr	r3, [pc, #4]	@ (8005668 <ESP_Upkeep+0x37c>)
 8005662:	2203      	movs	r2, #3
 8005664:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005666:	e280      	b.n	8005b6a <ESP_Upkeep+0x87e>
 8005668:	20000028 	.word	0x20000028
 800566c:	20000002 	.word	0x20000002
 8005670:	200009a2 	.word	0x200009a2
 8005674:	200009a3 	.word	0x200009a3
 8005678:	200009a1 	.word	0x200009a1
 800567c:	08022ce4 	.word	0x08022ce4
 8005680:	08022400 	.word	0x08022400
 8005684:	080240a0 	.word	0x080240a0
 8005688:	20000548 	.word	0x20000548
 800568c:	50000800 	.word	0x50000800
 8005690:	50001c00 	.word	0x50001c00
 8005694:	20000994 	.word	0x20000994
 8005698:	20000448 	.word	0x20000448
 800569c:	20000aa8 	.word	0x20000aa8
 80056a0:	2000002a 	.word	0x2000002a
 80056a4:	20000984 	.word	0x20000984
 80056a8:	20000549 	.word	0x20000549
 80056ac:	2000054a 	.word	0x2000054a
 80056b0:	20000004 	.word	0x20000004
 80056b4:	2000098e 	.word	0x2000098e
 80056b8:	2000054c 	.word	0x2000054c
 80056bc:	20000014 	.word	0x20000014
 80056c0:	2000054d 	.word	0x2000054d
 80056c4:	20000010 	.word	0x20000010
 80056c8:	20000001 	.word	0x20000001
 80056cc:	2000000c 	.word	0x2000000c
 80056d0:	2000055c 	.word	0x2000055c
 80056d4:	2000054b 	.word	0x2000054b
 80056d8:	2000001c 	.word	0x2000001c
 80056dc:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 80056e0:	4bdf      	ldr	r3, [pc, #892]	@ (8005a60 <ESP_Upkeep+0x774>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	0018      	movs	r0, r3
 80056e6:	f008 f8df 	bl	800d8a8 <TimestampIsReached>
 80056ea:	1e03      	subs	r3, r0, #0
 80056ec:	d100      	bne.n	80056f0 <ESP_Upkeep+0x404>
 80056ee:	e23e      	b.n	8005b6e <ESP_Upkeep+0x882>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80056f0:	4bdc      	ldr	r3, [pc, #880]	@ (8005a64 <ESP_Upkeep+0x778>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	0018      	movs	r0, r3
 80056f6:	f7ff f9c9 	bl	8004a8c <DMA_ProcessBuffer>
 80056fa:	0003      	movs	r3, r0
 80056fc:	001a      	movs	r2, r3
 80056fe:	4bda      	ldr	r3, [pc, #872]	@ (8005a68 <ESP_Upkeep+0x77c>)
 8005700:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005702:	4bd9      	ldr	r3, [pc, #868]	@ (8005a68 <ESP_Upkeep+0x77c>)
 8005704:	781a      	ldrb	r2, [r3, #0]
 8005706:	4bd7      	ldr	r3, [pc, #860]	@ (8005a64 <ESP_Upkeep+0x778>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	1d7c      	adds	r4, r7, #5
 800570c:	0019      	movs	r1, r3
 800570e:	0010      	movs	r0, r2
 8005710:	f7ff face 	bl	8004cb0 <ATCompare>
 8005714:	0003      	movs	r3, r0
 8005716:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005718:	4bd3      	ldr	r3, [pc, #844]	@ (8005a68 <ESP_Upkeep+0x77c>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d139      	bne.n	8005794 <ESP_Upkeep+0x4a8>
          if(ATCommand == AT_SENDDATA){
 8005720:	4bd2      	ldr	r3, [pc, #840]	@ (8005a6c <ESP_Upkeep+0x780>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b0f      	cmp	r3, #15
 8005726:	d108      	bne.n	800573a <ESP_Upkeep+0x44e>
            ATCommand = AT_HTTPCPOST;
 8005728:	4bd0      	ldr	r3, [pc, #832]	@ (8005a6c <ESP_Upkeep+0x780>)
 800572a:	220e      	movs	r2, #14
 800572c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800572e:	4bcd      	ldr	r3, [pc, #820]	@ (8005a64 <ESP_Upkeep+0x778>)
 8005730:	2202      	movs	r2, #2
 8005732:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005734:	4bce      	ldr	r3, [pc, #824]	@ (8005a70 <ESP_Upkeep+0x784>)
 8005736:	2201      	movs	r2, #1
 8005738:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 800573a:	4bce      	ldr	r3, [pc, #824]	@ (8005a74 <ESP_Upkeep+0x788>)
 800573c:	2204      	movs	r2, #4
 800573e:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005740:	4bcd      	ldr	r3, [pc, #820]	@ (8005a78 <ESP_Upkeep+0x78c>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	3301      	adds	r3, #1
 8005746:	b2da      	uxtb	r2, r3
 8005748:	4bcb      	ldr	r3, [pc, #812]	@ (8005a78 <ESP_Upkeep+0x78c>)
 800574a:	701a      	strb	r2, [r3, #0]
          if (errorcntr == ESP_MAX_RETRANSMITIONS) {
 800574c:	4bca      	ldr	r3, [pc, #808]	@ (8005a78 <ESP_Upkeep+0x78c>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b03      	cmp	r3, #3
 8005752:	d11f      	bne.n	8005794 <ESP_Upkeep+0x4a8>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005754:	f008 fc9c 	bl	800e090 <HAL_GetTick>
 8005758:	0003      	movs	r3, r0
 800575a:	4ac8      	ldr	r2, [pc, #800]	@ (8005a7c <ESP_Upkeep+0x790>)
 800575c:	189a      	adds	r2, r3, r2
 800575e:	4bc0      	ldr	r3, [pc, #768]	@ (8005a60 <ESP_Upkeep+0x774>)
 8005760:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8005762:	4bc7      	ldr	r3, [pc, #796]	@ (8005a80 <ESP_Upkeep+0x794>)
 8005764:	2201      	movs	r2, #1
 8005766:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 8005768:	f007 fa56 	bl	800cc18 <ResetESPIndicator>
            clearDMABuffer();
 800576c:	f7ff fa92 	bl	8004c94 <clearDMABuffer>
            stop = HAL_GetTick();
 8005770:	f008 fc8e 	bl	800e090 <HAL_GetTick>
 8005774:	0002      	movs	r2, r0
 8005776:	4bc3      	ldr	r3, [pc, #780]	@ (8005a84 <ESP_Upkeep+0x798>)
 8005778:	601a      	str	r2, [r3, #0]
            Debug("ESP to many retransmits, terminated after %lu ms", (stop-start));
 800577a:	4bc2      	ldr	r3, [pc, #776]	@ (8005a84 <ESP_Upkeep+0x798>)
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	4bc2      	ldr	r3, [pc, #776]	@ (8005a88 <ESP_Upkeep+0x79c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	4ac1      	ldr	r2, [pc, #772]	@ (8005a8c <ESP_Upkeep+0x7a0>)
 8005786:	49c2      	ldr	r1, [pc, #776]	@ (8005a90 <ESP_Upkeep+0x7a4>)
 8005788:	2003      	movs	r0, #3
 800578a:	f008 f8e3 	bl	800d954 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 800578e:	4bb9      	ldr	r3, [pc, #740]	@ (8005a74 <ESP_Upkeep+0x788>)
 8005790:	220d      	movs	r2, #13
 8005792:	701a      	strb	r2, [r3, #0]
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005794:	4bb4      	ldr	r3, [pc, #720]	@ (8005a68 <ESP_Upkeep+0x77c>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d106      	bne.n	80057aa <ESP_Upkeep+0x4be>
          ESPTimeStamp = HAL_GetTick() + 10;
 800579c:	f008 fc78 	bl	800e090 <HAL_GetTick>
 80057a0:	0003      	movs	r3, r0
 80057a2:	330a      	adds	r3, #10
 80057a4:	001a      	movs	r2, r3
 80057a6:	4bae      	ldr	r3, [pc, #696]	@ (8005a60 <ESP_Upkeep+0x774>)
 80057a8:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80057aa:	4baf      	ldr	r3, [pc, #700]	@ (8005a68 <ESP_Upkeep+0x77c>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b0a      	cmp	r3, #10
 80057b0:	d106      	bne.n	80057c0 <ESP_Upkeep+0x4d4>
          ESPTimeStamp = HAL_GetTick() + 10;
 80057b2:	f008 fc6d 	bl	800e090 <HAL_GetTick>
 80057b6:	0003      	movs	r3, r0
 80057b8:	330a      	adds	r3, #10
 80057ba:	001a      	movs	r2, r3
 80057bc:	4ba8      	ldr	r3, [pc, #672]	@ (8005a60 <ESP_Upkeep+0x774>)
 80057be:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80057c0:	4ba9      	ldr	r3, [pc, #676]	@ (8005a68 <ESP_Upkeep+0x77c>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2b06      	cmp	r3, #6
 80057c6:	d146      	bne.n	8005856 <ESP_Upkeep+0x56a>
//====
          timeoutcntr++;
 80057c8:	4bb2      	ldr	r3, [pc, #712]	@ (8005a94 <ESP_Upkeep+0x7a8>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	3301      	adds	r3, #1
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	4bb0      	ldr	r3, [pc, #704]	@ (8005a94 <ESP_Upkeep+0x7a8>)
 80057d2:	701a      	strb	r2, [r3, #0]
          if (timeoutcntr == ESP_MAX_RETRANSMITIONS) {
 80057d4:	4baf      	ldr	r3, [pc, #700]	@ (8005a94 <ESP_Upkeep+0x7a8>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d125      	bne.n	8005828 <ESP_Upkeep+0x53c>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80057dc:	f008 fc58 	bl	800e090 <HAL_GetTick>
 80057e0:	0003      	movs	r3, r0
 80057e2:	4aa6      	ldr	r2, [pc, #664]	@ (8005a7c <ESP_Upkeep+0x790>)
 80057e4:	189a      	adds	r2, r3, r2
 80057e6:	4b9e      	ldr	r3, [pc, #632]	@ (8005a60 <ESP_Upkeep+0x774>)
 80057e8:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80057ea:	4ba5      	ldr	r3, [pc, #660]	@ (8005a80 <ESP_Upkeep+0x794>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 80057f0:	f007 fa12 	bl	800cc18 <ResetESPIndicator>
            clearDMABuffer();
 80057f4:	f7ff fa4e 	bl	8004c94 <clearDMABuffer>
            stop = HAL_GetTick();
 80057f8:	f008 fc4a 	bl	800e090 <HAL_GetTick>
 80057fc:	0002      	movs	r2, r0
 80057fe:	4ba1      	ldr	r3, [pc, #644]	@ (8005a84 <ESP_Upkeep+0x798>)
 8005800:	601a      	str	r2, [r3, #0]
            Debug("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8005802:	4ba0      	ldr	r3, [pc, #640]	@ (8005a84 <ESP_Upkeep+0x798>)
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	4ba0      	ldr	r3, [pc, #640]	@ (8005a88 <ESP_Upkeep+0x79c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	4aa2      	ldr	r2, [pc, #648]	@ (8005a98 <ESP_Upkeep+0x7ac>)
 800580e:	49a0      	ldr	r1, [pc, #640]	@ (8005a90 <ESP_Upkeep+0x7a4>)
 8005810:	2003      	movs	r0, #3
 8005812:	f008 f89f 	bl	800d954 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005816:	4b97      	ldr	r3, [pc, #604]	@ (8005a74 <ESP_Upkeep+0x788>)
 8005818:	220d      	movs	r2, #13
 800581a:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 800581c:	4b93      	ldr	r3, [pc, #588]	@ (8005a6c <ESP_Upkeep+0x780>)
 800581e:	2214      	movs	r2, #20
 8005820:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8005822:	4b90      	ldr	r3, [pc, #576]	@ (8005a64 <ESP_Upkeep+0x778>)
 8005824:	2200      	movs	r2, #0
 8005826:	701a      	strb	r2, [r3, #0]
          }
//====
          if(ATCommand != AT_SENDDATA){
 8005828:	4b90      	ldr	r3, [pc, #576]	@ (8005a6c <ESP_Upkeep+0x780>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b0f      	cmp	r3, #15
 800582e:	d003      	beq.n	8005838 <ESP_Upkeep+0x54c>
            EspState = ESP_STATE_SEND;
 8005830:	4b90      	ldr	r3, [pc, #576]	@ (8005a74 <ESP_Upkeep+0x788>)
 8005832:	2204      	movs	r2, #4
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	e00e      	b.n	8005856 <ESP_Upkeep+0x56a>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005838:	4b8c      	ldr	r3, [pc, #560]	@ (8005a6c <ESP_Upkeep+0x780>)
 800583a:	220e      	movs	r2, #14
 800583c:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 800583e:	4b8c      	ldr	r3, [pc, #560]	@ (8005a70 <ESP_Upkeep+0x784>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	3b01      	subs	r3, #1
 8005844:	b2da      	uxtb	r2, r3
 8005846:	4b8a      	ldr	r3, [pc, #552]	@ (8005a70 <ESP_Upkeep+0x784>)
 8005848:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800584a:	4b86      	ldr	r3, [pc, #536]	@ (8005a64 <ESP_Upkeep+0x778>)
 800584c:	2202      	movs	r2, #2
 800584e:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005850:	4b88      	ldr	r3, [pc, #544]	@ (8005a74 <ESP_Upkeep+0x788>)
 8005852:	2204      	movs	r2, #4
 8005854:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005856:	1d7b      	adds	r3, r7, #5
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d100      	bne.n	8005860 <ESP_Upkeep+0x574>
 800585e:	e186      	b.n	8005b6e <ESP_Upkeep+0x882>
          EspState = ESP_STATE_NEXT_AT;
 8005860:	4b84      	ldr	r3, [pc, #528]	@ (8005a74 <ESP_Upkeep+0x788>)
 8005862:	2205      	movs	r2, #5
 8005864:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005866:	e182      	b.n	8005b6e <ESP_Upkeep+0x882>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005868:	4b81      	ldr	r3, [pc, #516]	@ (8005a70 <ESP_Upkeep+0x784>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	3301      	adds	r3, #1
 800586e:	b2da      	uxtb	r2, r3
 8005870:	4b7f      	ldr	r3, [pc, #508]	@ (8005a70 <ESP_Upkeep+0x784>)
 8005872:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005874:	4b7e      	ldr	r3, [pc, #504]	@ (8005a70 <ESP_Upkeep+0x784>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	001a      	movs	r2, r3
 800587a:	4b88      	ldr	r3, [pc, #544]	@ (8005a9c <ESP_Upkeep+0x7b0>)
 800587c:	5c9a      	ldrb	r2, [r3, r2]
 800587e:	4b7b      	ldr	r3, [pc, #492]	@ (8005a6c <ESP_Upkeep+0x780>)
 8005880:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005882:	4b7a      	ldr	r3, [pc, #488]	@ (8005a6c <ESP_Upkeep+0x780>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b03      	cmp	r3, #3
 8005888:	d102      	bne.n	8005890 <ESP_Upkeep+0x5a4>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 800588a:	4b76      	ldr	r3, [pc, #472]	@ (8005a64 <ESP_Upkeep+0x778>)
 800588c:	2201      	movs	r2, #1
 800588e:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005890:	4b76      	ldr	r3, [pc, #472]	@ (8005a6c <ESP_Upkeep+0x780>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b0e      	cmp	r3, #14
 8005896:	d102      	bne.n	800589e <ESP_Upkeep+0x5b2>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005898:	4b72      	ldr	r3, [pc, #456]	@ (8005a64 <ESP_Upkeep+0x778>)
 800589a:	2202      	movs	r2, #2
 800589c:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 800589e:	4b73      	ldr	r3, [pc, #460]	@ (8005a6c <ESP_Upkeep+0x780>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b0e      	cmp	r3, #14
 80058a4:	d006      	beq.n	80058b4 <ESP_Upkeep+0x5c8>
 80058a6:	4b71      	ldr	r3, [pc, #452]	@ (8005a6c <ESP_Upkeep+0x780>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d002      	beq.n	80058b4 <ESP_Upkeep+0x5c8>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80058ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005a64 <ESP_Upkeep+0x778>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 80058b4:	4b6d      	ldr	r3, [pc, #436]	@ (8005a6c <ESP_Upkeep+0x780>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b11      	cmp	r3, #17
 80058ba:	d102      	bne.n	80058c2 <ESP_Upkeep+0x5d6>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 80058bc:	4b69      	ldr	r3, [pc, #420]	@ (8005a64 <ESP_Upkeep+0x778>)
 80058be:	2205      	movs	r2, #5
 80058c0:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 80058c2:	4b6c      	ldr	r3, [pc, #432]	@ (8005a74 <ESP_Upkeep+0x788>)
 80058c4:	2204      	movs	r2, #4
 80058c6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 80058c8:	4b68      	ldr	r3, [pc, #416]	@ (8005a6c <ESP_Upkeep+0x780>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b14      	cmp	r3, #20
 80058ce:	d000      	beq.n	80058d2 <ESP_Upkeep+0x5e6>
 80058d0:	e14f      	b.n	8005b72 <ESP_Upkeep+0x886>
        if(Mode == AT_MODE_SEND){
 80058d2:	4b73      	ldr	r3, [pc, #460]	@ (8005aa0 <ESP_Upkeep+0x7b4>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d122      	bne.n	8005920 <ESP_Upkeep+0x634>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80058da:	f008 fbd9 	bl	800e090 <HAL_GetTick>
 80058de:	0003      	movs	r3, r0
 80058e0:	4a66      	ldr	r2, [pc, #408]	@ (8005a7c <ESP_Upkeep+0x790>)
 80058e2:	189a      	adds	r2, r3, r2
 80058e4:	4b5e      	ldr	r3, [pc, #376]	@ (8005a60 <ESP_Upkeep+0x774>)
 80058e6:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 80058e8:	f007 f996 	bl	800cc18 <ResetESPIndicator>
          clearDMABuffer();
 80058ec:	f7ff f9d2 	bl	8004c94 <clearDMABuffer>
          stop = HAL_GetTick();
 80058f0:	f008 fbce 	bl	800e090 <HAL_GetTick>
 80058f4:	0002      	movs	r2, r0
 80058f6:	4b63      	ldr	r3, [pc, #396]	@ (8005a84 <ESP_Upkeep+0x798>)
 80058f8:	601a      	str	r2, [r3, #0]
          Debug("Message send in %lu ms", (stop-start));
 80058fa:	4b62      	ldr	r3, [pc, #392]	@ (8005a84 <ESP_Upkeep+0x798>)
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b62      	ldr	r3, [pc, #392]	@ (8005a88 <ESP_Upkeep+0x79c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	4a67      	ldr	r2, [pc, #412]	@ (8005aa4 <ESP_Upkeep+0x7b8>)
 8005906:	4962      	ldr	r1, [pc, #392]	@ (8005a90 <ESP_Upkeep+0x7a4>)
 8005908:	2003      	movs	r0, #3
 800590a:	f008 f823 	bl	800d954 <CreateLine>
          showTime();
 800590e:	f000 fcc7 	bl	80062a0 <showTime>
          ESPTransmitDone = true;
 8005912:	4b5b      	ldr	r3, [pc, #364]	@ (8005a80 <ESP_Upkeep+0x794>)
 8005914:	2201      	movs	r2, #1
 8005916:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005918:	4b56      	ldr	r3, [pc, #344]	@ (8005a74 <ESP_Upkeep+0x788>)
 800591a:	220d      	movs	r2, #13
 800591c:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 800591e:	e128      	b.n	8005b72 <ESP_Upkeep+0x886>
        else if (Mode == AT_MODE_GETTIME) {
 8005920:	4b5f      	ldr	r3, [pc, #380]	@ (8005aa0 <ESP_Upkeep+0x7b4>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b05      	cmp	r3, #5
 8005926:	d12e      	bne.n	8005986 <ESP_Upkeep+0x69a>
            setTime = false;
 8005928:	4b5f      	ldr	r3, [pc, #380]	@ (8005aa8 <ESP_Upkeep+0x7bc>)
 800592a:	2200      	movs	r2, #0
 800592c:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP; // every 4 hour
 800592e:	f008 fbaf 	bl	800e090 <HAL_GetTick>
 8005932:	0003      	movs	r3, r0
 8005934:	4a5d      	ldr	r2, [pc, #372]	@ (8005aac <ESP_Upkeep+0x7c0>)
 8005936:	189a      	adds	r2, r3, r2
 8005938:	4b5d      	ldr	r3, [pc, #372]	@ (8005ab0 <ESP_Upkeep+0x7c4>)
 800593a:	601a      	str	r2, [r3, #0]
            Debug("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 800593c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ab0 <ESP_Upkeep+0x7c4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a5c      	ldr	r2, [pc, #368]	@ (8005ab4 <ESP_Upkeep+0x7c8>)
 8005942:	4953      	ldr	r1, [pc, #332]	@ (8005a90 <ESP_Upkeep+0x7a4>)
 8005944:	2003      	movs	r0, #3
 8005946:	f008 f805 	bl	800d954 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 800594a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ab8 <ESP_Upkeep+0x7cc>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4b44      	ldr	r3, [pc, #272]	@ (8005a60 <ESP_Upkeep+0x774>)
 8005950:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 8005952:	f007 f961 	bl	800cc18 <ResetESPIndicator>
            clearDMABuffer();
 8005956:	f7ff f99d 	bl	8004c94 <clearDMABuffer>
            stop = HAL_GetTick();
 800595a:	f008 fb99 	bl	800e090 <HAL_GetTick>
 800595e:	0002      	movs	r2, r0
 8005960:	4b48      	ldr	r3, [pc, #288]	@ (8005a84 <ESP_Upkeep+0x798>)
 8005962:	601a      	str	r2, [r3, #0]
            Debug("Message time update in %lu ms", (stop-start));
 8005964:	4b47      	ldr	r3, [pc, #284]	@ (8005a84 <ESP_Upkeep+0x798>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	4b47      	ldr	r3, [pc, #284]	@ (8005a88 <ESP_Upkeep+0x79c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	4a53      	ldr	r2, [pc, #332]	@ (8005abc <ESP_Upkeep+0x7d0>)
 8005970:	4947      	ldr	r1, [pc, #284]	@ (8005a90 <ESP_Upkeep+0x7a4>)
 8005972:	2003      	movs	r0, #3
 8005974:	f007 ffee 	bl	800d954 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005978:	4b3e      	ldr	r3, [pc, #248]	@ (8005a74 <ESP_Upkeep+0x788>)
 800597a:	220d      	movs	r2, #13
 800597c:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 800597e:	4b48      	ldr	r3, [pc, #288]	@ (8005aa0 <ESP_Upkeep+0x7b4>)
 8005980:	2202      	movs	r2, #2
 8005982:	701a      	strb	r2, [r3, #0]
    break;
 8005984:	e0f5      	b.n	8005b72 <ESP_Upkeep+0x886>
          EspState = ESP_STATE_RESET;
 8005986:	4b3b      	ldr	r3, [pc, #236]	@ (8005a74 <ESP_Upkeep+0x788>)
 8005988:	2209      	movs	r2, #9
 800598a:	701a      	strb	r2, [r3, #0]
    break;
 800598c:	e0f1      	b.n	8005b72 <ESP_Upkeep+0x886>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 800598e:	4b4c      	ldr	r3, [pc, #304]	@ (8005ac0 <ESP_Upkeep+0x7d4>)
 8005990:	2200      	movs	r2, #0
 8005992:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005994:	4b4b      	ldr	r3, [pc, #300]	@ (8005ac4 <ESP_Upkeep+0x7d8>)
 8005996:	2200      	movs	r2, #0
 8005998:	2101      	movs	r1, #1
 800599a:	0018      	movs	r0, r3
 800599c:	f009 fdf3 	bl	800f586 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80059a0:	2001      	movs	r0, #1
 80059a2:	f008 fb7f 	bl	800e0a4 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80059a6:	2380      	movs	r3, #128	@ 0x80
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	4847      	ldr	r0, [pc, #284]	@ (8005ac8 <ESP_Upkeep+0x7dc>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	0019      	movs	r1, r3
 80059b0:	f009 fde9 	bl	800f586 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80059b4:	2001      	movs	r0, #1
 80059b6:	f008 fb75 	bl	800e0a4 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80059ba:	4b42      	ldr	r3, [pc, #264]	@ (8005ac4 <ESP_Upkeep+0x7d8>)
 80059bc:	2200      	movs	r2, #0
 80059be:	2102      	movs	r1, #2
 80059c0:	0018      	movs	r0, r3
 80059c2:	f009 fde0 	bl	800f586 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 80059c6:	4b2b      	ldr	r3, [pc, #172]	@ (8005a74 <ESP_Upkeep+0x788>)
 80059c8:	2209      	movs	r2, #9
 80059ca:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80059cc:	2001      	movs	r0, #1
 80059ce:	f008 fb69 	bl	800e0a4 <HAL_Delay>
      errorcntr = 0;
 80059d2:	4b29      	ldr	r3, [pc, #164]	@ (8005a78 <ESP_Upkeep+0x78c>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	701a      	strb	r2, [r3, #0]
      break;
 80059d8:	e0ce      	b.n	8005b78 <ESP_Upkeep+0x88c>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 80059da:	4b21      	ldr	r3, [pc, #132]	@ (8005a60 <ESP_Upkeep+0x774>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	0018      	movs	r0, r3
 80059e0:	f007 ff62 	bl	800d8a8 <TimestampIsReached>
 80059e4:	1e03      	subs	r3, r0, #0
 80059e6:	d104      	bne.n	80059f2 <ESP_Upkeep+0x706>
 80059e8:	4b38      	ldr	r3, [pc, #224]	@ (8005acc <ESP_Upkeep+0x7e0>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d100      	bne.n	80059f2 <ESP_Upkeep+0x706>
 80059f0:	e078      	b.n	8005ae4 <ESP_Upkeep+0x7f8>
        if(Mode == AT_MODE_INIT){
 80059f2:	4b2b      	ldr	r3, [pc, #172]	@ (8005aa0 <ESP_Upkeep+0x7b4>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d105      	bne.n	8005a06 <ESP_Upkeep+0x71a>
          InitIsDone = true;
 80059fa:	4b35      	ldr	r3, [pc, #212]	@ (8005ad0 <ESP_Upkeep+0x7e4>)
 80059fc:	2201      	movs	r2, #1
 80059fe:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005a00:	4b1c      	ldr	r3, [pc, #112]	@ (8005a74 <ESP_Upkeep+0x788>)
 8005a02:	220b      	movs	r2, #11
 8005a04:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005a06:	4b26      	ldr	r3, [pc, #152]	@ (8005aa0 <ESP_Upkeep+0x7b4>)
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d108      	bne.n	8005a20 <ESP_Upkeep+0x734>
          ConnectionMade = true;
 8005a0e:	4b31      	ldr	r3, [pc, #196]	@ (8005ad4 <ESP_Upkeep+0x7e8>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005a14:	4b30      	ldr	r3, [pc, #192]	@ (8005ad8 <ESP_Upkeep+0x7ec>)
 8005a16:	2201      	movs	r2, #1
 8005a18:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005a1a:	4b16      	ldr	r3, [pc, #88]	@ (8005a74 <ESP_Upkeep+0x788>)
 8005a1c:	220b      	movs	r2, #11
 8005a1e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005a20:	4b1f      	ldr	r3, [pc, #124]	@ (8005aa0 <ESP_Upkeep+0x7b4>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d102      	bne.n	8005a2e <ESP_Upkeep+0x742>
          EspState = ESP_STATE_INIT;
 8005a28:	4b12      	ldr	r3, [pc, #72]	@ (8005a74 <ESP_Upkeep+0x788>)
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8005aa0 <ESP_Upkeep+0x7b4>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d108      	bne.n	8005a48 <ESP_Upkeep+0x75c>
          EspState = ESP_STATE_CONFIG;
 8005a36:	4b0f      	ldr	r3, [pc, #60]	@ (8005a74 <ESP_Upkeep+0x788>)
 8005a38:	220e      	movs	r2, #14
 8005a3a:	701a      	strb	r2, [r3, #0]
          Debug("Do nothing until reset");
 8005a3c:	4a27      	ldr	r2, [pc, #156]	@ (8005adc <ESP_Upkeep+0x7f0>)
 8005a3e:	4b14      	ldr	r3, [pc, #80]	@ (8005a90 <ESP_Upkeep+0x7a4>)
 8005a40:	0019      	movs	r1, r3
 8005a42:	2003      	movs	r0, #3
 8005a44:	f007 ff86 	bl	800d954 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005a48:	4b15      	ldr	r3, [pc, #84]	@ (8005aa0 <ESP_Upkeep+0x7b4>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d168      	bne.n	8005b22 <ESP_Upkeep+0x836>
          EspState = ESP_STATE_MODE_SELECT;
 8005a50:	4b08      	ldr	r3, [pc, #32]	@ (8005a74 <ESP_Upkeep+0x788>)
 8005a52:	220b      	movs	r2, #11
 8005a54:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005a56:	4b22      	ldr	r3, [pc, #136]	@ (8005ae0 <ESP_Upkeep+0x7f4>)
 8005a58:	2201      	movs	r2, #1
 8005a5a:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 8005a5c:	e061      	b.n	8005b22 <ESP_Upkeep+0x836>
 8005a5e:	46c0      	nop			@ (mov r8, r8)
 8005a60:	20000994 	.word	0x20000994
 8005a64:	200009a1 	.word	0x200009a1
 8005a68:	2000002a 	.word	0x2000002a
 8005a6c:	200009a2 	.word	0x200009a2
 8005a70:	2000098e 	.word	0x2000098e
 8005a74:	20000028 	.word	0x20000028
 8005a78:	2000098f 	.word	0x2000098f
 8005a7c:	000493e0 	.word	0x000493e0
 8005a80:	2000054f 	.word	0x2000054f
 8005a84:	20000560 	.word	0x20000560
 8005a88:	2000055c 	.word	0x2000055c
 8005a8c:	08022d10 	.word	0x08022d10
 8005a90:	08022400 	.word	0x08022400
 8005a94:	20000990 	.word	0x20000990
 8005a98:	08022d44 	.word	0x08022d44
 8005a9c:	20000984 	.word	0x20000984
 8005aa0:	200009a3 	.word	0x200009a3
 8005aa4:	08022d74 	.word	0x08022d74
 8005aa8:	20000001 	.word	0x20000001
 8005aac:	002c4020 	.word	0x002c4020
 8005ab0:	20000998 	.word	0x20000998
 8005ab4:	08022d8c 	.word	0x08022d8c
 8005ab8:	2000099c 	.word	0x2000099c
 8005abc:	08022dd0 	.word	0x08022dd0
 8005ac0:	20000548 	.word	0x20000548
 8005ac4:	50001c00 	.word	0x50001c00
 8005ac8:	50000800 	.word	0x50000800
 8005acc:	2000054b 	.word	0x2000054b
 8005ad0:	20000549 	.word	0x20000549
 8005ad4:	2000054c 	.word	0x2000054c
 8005ad8:	2000054e 	.word	0x2000054e
 8005adc:	08022df0 	.word	0x08022df0
 8005ae0:	2000054d 	.word	0x2000054d
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005ae4:	4b27      	ldr	r3, [pc, #156]	@ (8005b84 <ESP_Upkeep+0x898>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f007 fedd 	bl	800d8a8 <TimestampIsReached>
 8005aee:	1e03      	subs	r3, r0, #0
 8005af0:	d041      	beq.n	8005b76 <ESP_Upkeep+0x88a>
        if(Mode == AT_MODE_SEND ) {
 8005af2:	4b25      	ldr	r3, [pc, #148]	@ (8005b88 <ESP_Upkeep+0x89c>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d13d      	bne.n	8005b76 <ESP_Upkeep+0x88a>
            Mode = AT_MODE_GETTIME;
 8005afa:	4b23      	ldr	r3, [pc, #140]	@ (8005b88 <ESP_Upkeep+0x89c>)
 8005afc:	2205      	movs	r2, #5
 8005afe:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005b00:	4b22      	ldr	r3, [pc, #136]	@ (8005b8c <ESP_Upkeep+0x8a0>)
 8005b02:	2202      	movs	r2, #2
 8005b04:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 8005b06:	4b22      	ldr	r3, [pc, #136]	@ (8005b90 <ESP_Upkeep+0x8a4>)
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	4b22      	ldr	r3, [pc, #136]	@ (8005b94 <ESP_Upkeep+0x8a8>)
 8005b0c:	601a      	str	r2, [r3, #0]
         setTime = true;
 8005b0e:	4b22      	ldr	r3, [pc, #136]	@ (8005b98 <ESP_Upkeep+0x8ac>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	701a      	strb	r2, [r3, #0]
         Debug("setTime to true");
 8005b14:	4a21      	ldr	r2, [pc, #132]	@ (8005b9c <ESP_Upkeep+0x8b0>)
 8005b16:	4b22      	ldr	r3, [pc, #136]	@ (8005ba0 <ESP_Upkeep+0x8b4>)
 8005b18:	0019      	movs	r1, r3
 8005b1a:	2003      	movs	r0, #3
 8005b1c:	f007 ff1a 	bl	800d954 <CreateLine>
        }
      }
      break;
 8005b20:	e029      	b.n	8005b76 <ESP_Upkeep+0x88a>
 8005b22:	e028      	b.n	8005b76 <ESP_Upkeep+0x88a>

    case ESP_STATE_CONFIG:
//      Debug("Do nothing until reset");
      Process_PC_Config(GetUsbRxPointer());
 8005b24:	f016 faa0 	bl	801c068 <GetUsbRxPointer>
 8005b28:	0003      	movs	r3, r0
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f000 f8b0 	bl	8005c90 <Process_PC_Config>
      break;
 8005b30:	e022      	b.n	8005b78 <ESP_Upkeep+0x88c>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8005b32:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba4 <ESP_Upkeep+0x8b8>)
 8005b34:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba0 <ESP_Upkeep+0x8b4>)
 8005b36:	0019      	movs	r1, r3
 8005b38:	2003      	movs	r0, #3
 8005b3a:	f007 ff0b 	bl	800d954 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005b3e:	4b13      	ldr	r3, [pc, #76]	@ (8005b8c <ESP_Upkeep+0x8a0>)
 8005b40:	2202      	movs	r2, #2
 8005b42:	701a      	strb	r2, [r3, #0]
      break;
 8005b44:	e018      	b.n	8005b78 <ESP_Upkeep+0x88c>

    default:
      // Handle unexpected state
      Debug("Something unknown went wrong with the ESP_STATE");
 8005b46:	4a18      	ldr	r2, [pc, #96]	@ (8005ba8 <ESP_Upkeep+0x8bc>)
 8005b48:	4b15      	ldr	r3, [pc, #84]	@ (8005ba0 <ESP_Upkeep+0x8b4>)
 8005b4a:	0019      	movs	r1, r3
 8005b4c:	2003      	movs	r0, #3
 8005b4e:	f007 ff01 	bl	800d954 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005b52:	4b0e      	ldr	r3, [pc, #56]	@ (8005b8c <ESP_Upkeep+0x8a0>)
 8005b54:	2207      	movs	r2, #7
 8005b56:	701a      	strb	r2, [r3, #0]
      break;
 8005b58:	e00e      	b.n	8005b78 <ESP_Upkeep+0x88c>
      break;
 8005b5a:	46c0      	nop			@ (mov r8, r8)
 8005b5c:	e00c      	b.n	8005b78 <ESP_Upkeep+0x88c>
      break;
 8005b5e:	46c0      	nop			@ (mov r8, r8)
 8005b60:	e00a      	b.n	8005b78 <ESP_Upkeep+0x88c>
        break;
 8005b62:	46c0      	nop			@ (mov r8, r8)
 8005b64:	e008      	b.n	8005b78 <ESP_Upkeep+0x88c>
    break;
 8005b66:	46c0      	nop			@ (mov r8, r8)
 8005b68:	e006      	b.n	8005b78 <ESP_Upkeep+0x88c>
    break;
 8005b6a:	46c0      	nop			@ (mov r8, r8)
 8005b6c:	e004      	b.n	8005b78 <ESP_Upkeep+0x88c>
      break;
 8005b6e:	46c0      	nop			@ (mov r8, r8)
 8005b70:	e002      	b.n	8005b78 <ESP_Upkeep+0x88c>
    break;
 8005b72:	46c0      	nop			@ (mov r8, r8)
 8005b74:	e000      	b.n	8005b78 <ESP_Upkeep+0x88c>
      break;
 8005b76:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005b78:	4b04      	ldr	r3, [pc, #16]	@ (8005b8c <ESP_Upkeep+0x8a0>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
}
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b002      	add	sp, #8
 8005b82:	bdb0      	pop	{r4, r5, r7, pc}
 8005b84:	20000998 	.word	0x20000998
 8005b88:	200009a3 	.word	0x200009a3
 8005b8c:	20000028 	.word	0x20000028
 8005b90:	20000994 	.word	0x20000994
 8005b94:	2000099c 	.word	0x2000099c
 8005b98:	20000001 	.word	0x20000001
 8005b9c:	08022e08 	.word	0x08022e08
 8005ba0:	08022400 	.word	0x08022400
 8005ba4:	08022e18 	.word	0x08022e18
 8005ba8:	08022e2c 	.word	0x08022e2c

08005bac <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005bb4:	4b09      	ldr	r3, [pc, #36]	@ (8005bdc <I2CSensors_Init+0x30>)
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8005bba:	4a09      	ldr	r2, [pc, #36]	@ (8005be0 <I2CSensors_Init+0x34>)
 8005bbc:	4b09      	ldr	r3, [pc, #36]	@ (8005be4 <I2CSensors_Init+0x38>)
 8005bbe:	0011      	movs	r1, r2
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f001 fcad 	bl	8007520 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8005bc6:	4a06      	ldr	r2, [pc, #24]	@ (8005be0 <I2CSensors_Init+0x34>)
 8005bc8:	4b06      	ldr	r3, [pc, #24]	@ (8005be4 <I2CSensors_Init+0x38>)
 8005bca:	0011      	movs	r1, r2
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f001 fafd 	bl	80071cc <Gas_Init>
}
 8005bd2:	46c0      	nop			@ (mov r8, r8)
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	b002      	add	sp, #8
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	46c0      	nop			@ (mov r8, r8)
 8005bdc:	20000aac 	.word	0x20000aac
 8005be0:	08005c3d 	.word	0x08005c3d
 8005be4:	08005be9 	.word	0x08005be9

08005be8 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005be8:	b5b0      	push	{r4, r5, r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6039      	str	r1, [r7, #0]
 8005bf0:	0011      	movs	r1, r2
 8005bf2:	1dfb      	adds	r3, r7, #7
 8005bf4:	1c02      	adds	r2, r0, #0
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	1dbb      	adds	r3, r7, #6
 8005bfa:	1c0a      	adds	r2, r1, #0
 8005bfc:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8005c38 <ReadI2C+0x50>)
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	1dfb      	adds	r3, r7, #7
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	18db      	adds	r3, r3, r3
 8005c0a:	b299      	uxth	r1, r3
 8005c0c:	1dbb      	adds	r3, r7, #6
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	250f      	movs	r5, #15
 8005c14:	197c      	adds	r4, r7, r5
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	f00a f89a 	bl	800fd50 <HAL_I2C_Master_Receive_DMA>
 8005c1c:	0003      	movs	r3, r0
 8005c1e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005c20:	197b      	adds	r3, r7, r5
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <ReadI2C+0x44>
        return false;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	e000      	b.n	8005c2e <ReadI2C+0x46>
    }
    return true;
 8005c2c:	2301      	movs	r3, #1
}
 8005c2e:	0018      	movs	r0, r3
 8005c30:	46bd      	mov	sp, r7
 8005c32:	b004      	add	sp, #16
 8005c34:	bdb0      	pop	{r4, r5, r7, pc}
 8005c36:	46c0      	nop			@ (mov r8, r8)
 8005c38:	20000aac 	.word	0x20000aac

08005c3c <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005c3c:	b5b0      	push	{r4, r5, r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6039      	str	r1, [r7, #0]
 8005c44:	0011      	movs	r1, r2
 8005c46:	1dfb      	adds	r3, r7, #7
 8005c48:	1c02      	adds	r2, r0, #0
 8005c4a:	701a      	strb	r2, [r3, #0]
 8005c4c:	1dbb      	adds	r3, r7, #6
 8005c4e:	1c0a      	adds	r2, r1, #0
 8005c50:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005c52:	4b0e      	ldr	r3, [pc, #56]	@ (8005c8c <WriteI2C+0x50>)
 8005c54:	6818      	ldr	r0, [r3, #0]
 8005c56:	1dfb      	adds	r3, r7, #7
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	18db      	adds	r3, r3, r3
 8005c5e:	b299      	uxth	r1, r3
 8005c60:	1dbb      	adds	r3, r7, #6
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	250f      	movs	r5, #15
 8005c68:	197c      	adds	r4, r7, r5
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	f009 ff6a 	bl	800fb44 <HAL_I2C_Master_Transmit_DMA>
 8005c70:	0003      	movs	r3, r0
 8005c72:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005c74:	197b      	adds	r3, r7, r5
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <WriteI2C+0x44>
        return false;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e000      	b.n	8005c82 <WriteI2C+0x46>
    }
    return true;
 8005c80:	2301      	movs	r3, #1
}
 8005c82:	0018      	movs	r0, r3
 8005c84:	46bd      	mov	sp, r7
 8005c86:	b004      	add	sp, #16
 8005c88:	bdb0      	pop	{r4, r5, r7, pc}
 8005c8a:	46c0      	nop			@ (mov r8, r8)
 8005c8c:	20000aac 	.word	0x20000aac

08005c90 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005c90:	b590      	push	{r4, r7, lr}
 8005c92:	b0c3      	sub	sp, #268	@ 0x10c
 8005c94:	af3e      	add	r7, sp, #248	@ 0xf8
 8005c96:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005c98:	f016 fa06 	bl	801c0a8 <GetUsbRxDataSize>
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b05      	cmp	r3, #5
 8005ca4:	d971      	bls.n	8005d8a <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2123      	movs	r1, #35	@ 0x23
 8005caa:	0018      	movs	r0, r3
 8005cac:	f019 fbfc 	bl	801f4a8 <strchr>
 8005cb0:	0003      	movs	r3, r0
 8005cb2:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d065      	beq.n	8005d86 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	785a      	ldrb	r2, [r3, #1]
 8005cbe:	4b34      	ldr	r3, [pc, #208]	@ (8005d90 <Process_PC_Config+0x100>)
 8005cc0:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	789a      	ldrb	r2, [r3, #2]
 8005cc6:	4b32      	ldr	r3, [pc, #200]	@ (8005d90 <Process_PC_Config+0x100>)
 8005cc8:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005cca:	4b31      	ldr	r3, [pc, #196]	@ (8005d90 <Process_PC_Config+0x100>)
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	3305      	adds	r3, #5
 8005cd0:	001a      	movs	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d351      	bcc.n	8005d7c <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	1cd9      	adds	r1, r3, #3
 8005cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8005d90 <Process_PC_Config+0x100>)
 8005cde:	785b      	ldrb	r3, [r3, #1]
 8005ce0:	001a      	movs	r2, r3
 8005ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8005d94 <Process_PC_Config+0x104>)
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f019 fcb3 	bl	801f650 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005cea:	4b29      	ldr	r3, [pc, #164]	@ (8005d90 <Process_PC_Config+0x100>)
 8005cec:	785b      	ldrb	r3, [r3, #1]
 8005cee:	3303      	adds	r3, #3
 8005cf0:	001a      	movs	r2, r3
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	189b      	adds	r3, r3, r2
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	021b      	lsls	r3, r3, #8
 8005cfa:	b21a      	sxth	r2, r3
 8005cfc:	4b24      	ldr	r3, [pc, #144]	@ (8005d90 <Process_PC_Config+0x100>)
 8005cfe:	785b      	ldrb	r3, [r3, #1]
 8005d00:	3304      	adds	r3, #4
 8005d02:	68b9      	ldr	r1, [r7, #8]
 8005d04:	18cb      	adds	r3, r1, r3
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	b21b      	sxth	r3, r3
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	b21b      	sxth	r3, r3
 8005d0e:	b299      	uxth	r1, r3
 8005d10:	4a1f      	ldr	r2, [pc, #124]	@ (8005d90 <Process_PC_Config+0x100>)
 8005d12:	2381      	movs	r3, #129	@ 0x81
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005d18:	4a1d      	ldr	r2, [pc, #116]	@ (8005d90 <Process_PC_Config+0x100>)
 8005d1a:	2381      	movs	r3, #129	@ 0x81
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	5ad4      	ldrh	r4, [r2, r3]
 8005d20:	4b1b      	ldr	r3, [pc, #108]	@ (8005d90 <Process_PC_Config+0x100>)
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	3303      	adds	r3, #3
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	0011      	movs	r1, r2
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f000 f975 	bl	800601c <CRC16_ARC>
 8005d32:	0003      	movs	r3, r0
 8005d34:	429c      	cmp	r4, r3
 8005d36:	d007      	beq.n	8005d48 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005d38:	4b15      	ldr	r3, [pc, #84]	@ (8005d90 <Process_PC_Config+0x100>)
 8005d3a:	785a      	ldrb	r2, [r3, #1]
 8005d3c:	4b15      	ldr	r3, [pc, #84]	@ (8005d94 <Process_PC_Config+0x104>)
 8005d3e:	0019      	movs	r1, r3
 8005d40:	2001      	movs	r0, #1
 8005d42:	f000 f919 	bl	8005f78 <Create_Message>
 8005d46:	e016      	b.n	8005d76 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005d48:	4c11      	ldr	r4, [pc, #68]	@ (8005d90 <Process_PC_Config+0x100>)
 8005d4a:	466b      	mov	r3, sp
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	0023      	movs	r3, r4
 8005d50:	3310      	adds	r3, #16
 8005d52:	22f4      	movs	r2, #244	@ 0xf4
 8005d54:	0019      	movs	r1, r3
 8005d56:	f019 fc7b 	bl	801f650 <memcpy>
 8005d5a:	6820      	ldr	r0, [r4, #0]
 8005d5c:	6861      	ldr	r1, [r4, #4]
 8005d5e:	68a2      	ldr	r2, [r4, #8]
 8005d60:	68e3      	ldr	r3, [r4, #12]
 8005d62:	f000 f819 	bl	8005d98 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005d66:	4b0a      	ldr	r3, [pc, #40]	@ (8005d90 <Process_PC_Config+0x100>)
 8005d68:	7818      	ldrb	r0, [r3, #0]
 8005d6a:	4b09      	ldr	r3, [pc, #36]	@ (8005d90 <Process_PC_Config+0x100>)
 8005d6c:	785a      	ldrb	r2, [r3, #1]
 8005d6e:	4b09      	ldr	r3, [pc, #36]	@ (8005d94 <Process_PC_Config+0x104>)
 8005d70:	0019      	movs	r1, r3
 8005d72:	f000 f901 	bl	8005f78 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005d76:	f016 f97f 	bl	801c078 <ResetUsbRxDataSize>
                return;
 8005d7a:	e006      	b.n	8005d8a <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f016 f99c 	bl	801c0bc <GetUsbRxNextChunk>
 8005d84:	e001      	b.n	8005d8a <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005d86:	f016 f977 	bl	801c078 <ResetUsbRxDataSize>
        }
    }
}
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b005      	add	sp, #20
 8005d8e:	bd90      	pop	{r4, r7, pc}
 8005d90:	20000ab0 	.word	0x20000ab0
 8005d94:	20000ab2 	.word	0x20000ab2

08005d98 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005d98:	b084      	sub	sp, #16
 8005d9a:	b5b0      	push	{r4, r5, r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	2518      	movs	r5, #24
 8005da2:	197c      	adds	r4, r7, r5
 8005da4:	6020      	str	r0, [r4, #0]
 8005da6:	6061      	str	r1, [r4, #4]
 8005da8:	60a2      	str	r2, [r4, #8]
 8005daa:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005dac:	197b      	adds	r3, r7, r5
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	2bfe      	cmp	r3, #254	@ 0xfe
 8005db2:	d100      	bne.n	8005db6 <ProcessCmd+0x1e>
 8005db4:	e09c      	b.n	8005ef0 <ProcessCmd+0x158>
 8005db6:	dd00      	ble.n	8005dba <ProcessCmd+0x22>
 8005db8:	e0bc      	b.n	8005f34 <ProcessCmd+0x19c>
 8005dba:	2b0c      	cmp	r3, #12
 8005dbc:	dc0a      	bgt.n	8005dd4 <ProcessCmd+0x3c>
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	da00      	bge.n	8005dc4 <ProcessCmd+0x2c>
 8005dc2:	e0b7      	b.n	8005f34 <ProcessCmd+0x19c>
 8005dc4:	2b0c      	cmp	r3, #12
 8005dc6:	d900      	bls.n	8005dca <ProcessCmd+0x32>
 8005dc8:	e0b4      	b.n	8005f34 <ProcessCmd+0x19c>
 8005dca:	009a      	lsls	r2, r3, #2
 8005dcc:	4b5d      	ldr	r3, [pc, #372]	@ (8005f44 <ProcessCmd+0x1ac>)
 8005dce:	18d3      	adds	r3, r2, r3
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	469f      	mov	pc, r3
 8005dd4:	2bfd      	cmp	r3, #253	@ 0xfd
 8005dd6:	d100      	bne.n	8005dda <ProcessCmd+0x42>
 8005dd8:	e084      	b.n	8005ee4 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005dda:	e0ab      	b.n	8005f34 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ddc:	2118      	movs	r1, #24
 8005dde:	187b      	adds	r3, r7, r1
 8005de0:	785b      	ldrb	r3, [r3, #1]
 8005de2:	001a      	movs	r2, r3
 8005de4:	187b      	adds	r3, r7, r1
 8005de6:	1c99      	adds	r1, r3, #2
 8005de8:	4857      	ldr	r0, [pc, #348]	@ (8005f48 <ProcessCmd+0x1b0>)
 8005dea:	230c      	movs	r3, #12
 8005dec:	f7fd fc68 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005df0:	e0a0      	b.n	8005f34 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005df2:	2118      	movs	r1, #24
 8005df4:	187b      	adds	r3, r7, r1
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	001a      	movs	r2, r3
 8005dfa:	187b      	adds	r3, r7, r1
 8005dfc:	1c99      	adds	r1, r3, #2
 8005dfe:	4853      	ldr	r0, [pc, #332]	@ (8005f4c <ProcessCmd+0x1b4>)
 8005e00:	230c      	movs	r3, #12
 8005e02:	f7fd fc5d 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e06:	e095      	b.n	8005f34 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e08:	2118      	movs	r1, #24
 8005e0a:	187b      	adds	r3, r7, r1
 8005e0c:	785b      	ldrb	r3, [r3, #1]
 8005e0e:	001a      	movs	r2, r3
 8005e10:	187b      	adds	r3, r7, r1
 8005e12:	1c99      	adds	r1, r3, #2
 8005e14:	484e      	ldr	r0, [pc, #312]	@ (8005f50 <ProcessCmd+0x1b8>)
 8005e16:	230c      	movs	r3, #12
 8005e18:	f7fd fc52 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e1c:	e08a      	b.n	8005f34 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e1e:	2118      	movs	r1, #24
 8005e20:	187b      	adds	r3, r7, r1
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	001a      	movs	r2, r3
 8005e26:	187b      	adds	r3, r7, r1
 8005e28:	1c99      	adds	r1, r3, #2
 8005e2a:	484a      	ldr	r0, [pc, #296]	@ (8005f54 <ProcessCmd+0x1bc>)
 8005e2c:	230c      	movs	r3, #12
 8005e2e:	f7fd fc47 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e32:	e07f      	b.n	8005f34 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e34:	2118      	movs	r1, #24
 8005e36:	187b      	adds	r3, r7, r1
 8005e38:	785b      	ldrb	r3, [r3, #1]
 8005e3a:	001a      	movs	r2, r3
 8005e3c:	187b      	adds	r3, r7, r1
 8005e3e:	1c99      	adds	r1, r3, #2
 8005e40:	4845      	ldr	r0, [pc, #276]	@ (8005f58 <ProcessCmd+0x1c0>)
 8005e42:	230c      	movs	r3, #12
 8005e44:	f7fd fc3c 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e48:	e074      	b.n	8005f34 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e4a:	2118      	movs	r1, #24
 8005e4c:	187b      	adds	r3, r7, r1
 8005e4e:	785b      	ldrb	r3, [r3, #1]
 8005e50:	001a      	movs	r2, r3
 8005e52:	187b      	adds	r3, r7, r1
 8005e54:	1c99      	adds	r1, r3, #2
 8005e56:	4841      	ldr	r0, [pc, #260]	@ (8005f5c <ProcessCmd+0x1c4>)
 8005e58:	230c      	movs	r3, #12
 8005e5a:	f7fd fc31 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e5e:	e069      	b.n	8005f34 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e60:	2118      	movs	r1, #24
 8005e62:	187b      	adds	r3, r7, r1
 8005e64:	785b      	ldrb	r3, [r3, #1]
 8005e66:	001a      	movs	r2, r3
 8005e68:	187b      	adds	r3, r7, r1
 8005e6a:	1c99      	adds	r1, r3, #2
 8005e6c:	483c      	ldr	r0, [pc, #240]	@ (8005f60 <ProcessCmd+0x1c8>)
 8005e6e:	230c      	movs	r3, #12
 8005e70:	f7fd fc26 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e74:	e05e      	b.n	8005f34 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005e76:	2118      	movs	r1, #24
 8005e78:	187b      	adds	r3, r7, r1
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	001a      	movs	r2, r3
 8005e7e:	187b      	adds	r3, r7, r1
 8005e80:	1c99      	adds	r1, r3, #2
 8005e82:	4838      	ldr	r0, [pc, #224]	@ (8005f64 <ProcessCmd+0x1cc>)
 8005e84:	231e      	movs	r3, #30
 8005e86:	f7fd fc1b 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005e8a:	e053      	b.n	8005f34 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005e8c:	2118      	movs	r1, #24
 8005e8e:	187b      	adds	r3, r7, r1
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	001a      	movs	r2, r3
 8005e94:	187b      	adds	r3, r7, r1
 8005e96:	1c99      	adds	r1, r3, #2
 8005e98:	4833      	ldr	r0, [pc, #204]	@ (8005f68 <ProcessCmd+0x1d0>)
 8005e9a:	230c      	movs	r3, #12
 8005e9c:	f7fd fc10 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ea0:	e048      	b.n	8005f34 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ea2:	2118      	movs	r1, #24
 8005ea4:	187b      	adds	r3, r7, r1
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	001a      	movs	r2, r3
 8005eaa:	187b      	adds	r3, r7, r1
 8005eac:	1c99      	adds	r1, r3, #2
 8005eae:	482f      	ldr	r0, [pc, #188]	@ (8005f6c <ProcessCmd+0x1d4>)
 8005eb0:	230c      	movs	r3, #12
 8005eb2:	f7fd fc05 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005eb6:	e03d      	b.n	8005f34 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005eb8:	2118      	movs	r1, #24
 8005eba:	187b      	adds	r3, r7, r1
 8005ebc:	785b      	ldrb	r3, [r3, #1]
 8005ebe:	001a      	movs	r2, r3
 8005ec0:	187b      	adds	r3, r7, r1
 8005ec2:	1c99      	adds	r1, r3, #2
 8005ec4:	482a      	ldr	r0, [pc, #168]	@ (8005f70 <ProcessCmd+0x1d8>)
 8005ec6:	230c      	movs	r3, #12
 8005ec8:	f7fd fbfa 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ecc:	e032      	b.n	8005f34 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ece:	2118      	movs	r1, #24
 8005ed0:	187b      	adds	r3, r7, r1
 8005ed2:	785b      	ldrb	r3, [r3, #1]
 8005ed4:	001a      	movs	r2, r3
 8005ed6:	187b      	adds	r3, r7, r1
 8005ed8:	1c99      	adds	r1, r3, #2
 8005eda:	4826      	ldr	r0, [pc, #152]	@ (8005f74 <ProcessCmd+0x1dc>)
 8005edc:	230c      	movs	r3, #12
 8005ede:	f7fd fbef 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ee2:	e027      	b.n	8005f34 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005ee4:	4b18      	ldr	r3, [pc, #96]	@ (8005f48 <ProcessCmd+0x1b0>)
 8005ee6:	21ba      	movs	r1, #186	@ 0xba
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f7fd fc2e 	bl	800374a <ClearEEprom>
        break;
 8005eee:	e021      	b.n	8005f34 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005ef0:	2118      	movs	r1, #24
 8005ef2:	187b      	adds	r3, r7, r1
 8005ef4:	789b      	ldrb	r3, [r3, #2]
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	b21a      	sxth	r2, r3
 8005efa:	187b      	adds	r3, r7, r1
 8005efc:	78db      	ldrb	r3, [r3, #3]
 8005efe:	b21b      	sxth	r3, r3
 8005f00:	4313      	orrs	r3, r2
 8005f02:	b21a      	sxth	r2, r3
 8005f04:	1dbb      	adds	r3, r7, #6
 8005f06:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005f08:	1dbb      	adds	r3, r7, #6
 8005f0a:	881a      	ldrh	r2, [r3, #0]
 8005f0c:	23c0      	movs	r3, #192	@ 0xc0
 8005f0e:	015b      	lsls	r3, r3, #5
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d207      	bcs.n	8005f24 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005f14:	1dbb      	adds	r3, r7, #6
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	4a0b      	ldr	r2, [pc, #44]	@ (8005f48 <ProcessCmd+0x1b0>)
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	0010      	movs	r0, r2
 8005f1e:	f7fd fc14 	bl	800374a <ClearEEprom>
            break;
 8005f22:	e006      	b.n	8005f32 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005f24:	23c0      	movs	r3, #192	@ 0xc0
 8005f26:	015b      	lsls	r3, r3, #5
 8005f28:	4a07      	ldr	r2, [pc, #28]	@ (8005f48 <ProcessCmd+0x1b0>)
 8005f2a:	0019      	movs	r1, r3
 8005f2c:	0010      	movs	r0, r2
 8005f2e:	f7fd fc0c 	bl	800374a <ClearEEprom>
            break;
 8005f32:	46c0      	nop			@ (mov r8, r8)
}
 8005f34:	46c0      	nop			@ (mov r8, r8)
 8005f36:	46bd      	mov	sp, r7
 8005f38:	b002      	add	sp, #8
 8005f3a:	bcb0      	pop	{r4, r5, r7}
 8005f3c:	bc08      	pop	{r3}
 8005f3e:	b004      	add	sp, #16
 8005f40:	4718      	bx	r3
 8005f42:	46c0      	nop			@ (mov r8, r8)
 8005f44:	080240e0 	.word	0x080240e0
 8005f48:	08080000 	.word	0x08080000
 8005f4c:	0808000c 	.word	0x0808000c
 8005f50:	08080018 	.word	0x08080018
 8005f54:	08080024 	.word	0x08080024
 8005f58:	08080030 	.word	0x08080030
 8005f5c:	0808003c 	.word	0x0808003c
 8005f60:	08080048 	.word	0x08080048
 8005f64:	08080090 	.word	0x08080090
 8005f68:	08080078 	.word	0x08080078
 8005f6c:	0808006c 	.word	0x0808006c
 8005f70:	08080060 	.word	0x08080060
 8005f74:	08080054 	.word	0x08080054

08005f78 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6039      	str	r1, [r7, #0]
 8005f80:	0011      	movs	r1, r2
 8005f82:	1dfb      	adds	r3, r7, #7
 8005f84:	1c02      	adds	r2, r0, #0
 8005f86:	701a      	strb	r2, [r3, #0]
 8005f88:	1dbb      	adds	r3, r7, #6
 8005f8a:	1c0a      	adds	r2, r1, #0
 8005f8c:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005f8e:	2223      	movs	r2, #35	@ 0x23
 8005f90:	4b20      	ldr	r3, [pc, #128]	@ (8006014 <Create_Message+0x9c>)
 8005f92:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005f94:	4b1f      	ldr	r3, [pc, #124]	@ (8006014 <Create_Message+0x9c>)
 8005f96:	1dfa      	adds	r2, r7, #7
 8005f98:	7812      	ldrb	r2, [r2, #0]
 8005f9a:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8006014 <Create_Message+0x9c>)
 8005f9e:	1dba      	adds	r2, r7, #6
 8005fa0:	7812      	ldrb	r2, [r2, #0]
 8005fa2:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005fa4:	1dbb      	adds	r3, r7, #6
 8005fa6:	781a      	ldrb	r2, [r3, #0]
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	4b1b      	ldr	r3, [pc, #108]	@ (8006018 <Create_Message+0xa0>)
 8005fac:	0018      	movs	r0, r3
 8005fae:	f019 fb4f 	bl	801f650 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005fb2:	1dbb      	adds	r3, r7, #6
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	250e      	movs	r5, #14
 8005fba:	197b      	adds	r3, r7, r5
 8005fbc:	3203      	adds	r2, #3
 8005fbe:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005fc0:	260c      	movs	r6, #12
 8005fc2:	19bc      	adds	r4, r7, r6
 8005fc4:	197b      	adds	r3, r7, r5
 8005fc6:	881a      	ldrh	r2, [r3, #0]
 8005fc8:	4b12      	ldr	r3, [pc, #72]	@ (8006014 <Create_Message+0x9c>)
 8005fca:	0011      	movs	r1, r2
 8005fcc:	0018      	movs	r0, r3
 8005fce:	f000 f825 	bl	800601c <CRC16_ARC>
 8005fd2:	0003      	movs	r3, r0
 8005fd4:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005fd6:	0030      	movs	r0, r6
 8005fd8:	183b      	adds	r3, r7, r0
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	0a1b      	lsrs	r3, r3, #8
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	197b      	adds	r3, r7, r5
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b2d1      	uxtb	r1, r2
 8005fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8006014 <Create_Message+0x9c>)
 8005fe8:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8005fea:	197b      	adds	r3, r7, r5
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	183a      	adds	r2, r7, r0
 8005ff2:	8812      	ldrh	r2, [r2, #0]
 8005ff4:	b2d1      	uxtb	r1, r2
 8005ff6:	4a07      	ldr	r2, [pc, #28]	@ (8006014 <Create_Message+0x9c>)
 8005ff8:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8005ffa:	197b      	adds	r3, r7, r5
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	3302      	adds	r3, #2
 8006000:	b29a      	uxth	r2, r3
 8006002:	4b04      	ldr	r3, [pc, #16]	@ (8006014 <Create_Message+0x9c>)
 8006004:	0011      	movs	r1, r2
 8006006:	0018      	movs	r0, r3
 8006008:	f015 fff4 	bl	801bff4 <CDC_Transmit_FS>
}
 800600c:	46c0      	nop			@ (mov r8, r8)
 800600e:	46bd      	mov	sp, r7
 8006010:	b005      	add	sp, #20
 8006012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006014:	20000bb4 	.word	0x20000bb4
 8006018:	20000bb7 	.word	0x20000bb7

0800601c <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	000a      	movs	r2, r1
 8006026:	1cbb      	adds	r3, r7, #2
 8006028:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 800602a:	2316      	movs	r3, #22
 800602c:	18fb      	adds	r3, r7, r3
 800602e:	2200      	movs	r2, #0
 8006030:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8006032:	2300      	movs	r3, #0
 8006034:	613b      	str	r3, [r7, #16]
 8006036:	e02e      	b.n	8006096 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	18d3      	adds	r3, r2, r3
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	0019      	movs	r1, r3
 8006042:	2216      	movs	r2, #22
 8006044:	18bb      	adds	r3, r7, r2
 8006046:	18ba      	adds	r2, r7, r2
 8006048:	8812      	ldrh	r2, [r2, #0]
 800604a:	404a      	eors	r2, r1
 800604c:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	e01a      	b.n	800608a <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8006054:	2116      	movs	r1, #22
 8006056:	187b      	adds	r3, r7, r1
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	2201      	movs	r2, #1
 800605c:	4013      	ands	r3, r2
 800605e:	d00b      	beq.n	8006078 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8006060:	187b      	adds	r3, r7, r1
 8006062:	187a      	adds	r2, r7, r1
 8006064:	8812      	ldrh	r2, [r2, #0]
 8006066:	0852      	lsrs	r2, r2, #1
 8006068:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 800606a:	187b      	adds	r3, r7, r1
 800606c:	187a      	adds	r2, r7, r1
 800606e:	8812      	ldrh	r2, [r2, #0]
 8006070:	490f      	ldr	r1, [pc, #60]	@ (80060b0 <CRC16_ARC+0x94>)
 8006072:	404a      	eors	r2, r1
 8006074:	801a      	strh	r2, [r3, #0]
 8006076:	e005      	b.n	8006084 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8006078:	2216      	movs	r2, #22
 800607a:	18bb      	adds	r3, r7, r2
 800607c:	18ba      	adds	r2, r7, r2
 800607e:	8812      	ldrh	r2, [r2, #0]
 8006080:	0852      	lsrs	r2, r2, #1
 8006082:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	3301      	adds	r3, #1
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b07      	cmp	r3, #7
 800608e:	dde1      	ble.n	8006054 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	3301      	adds	r3, #1
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	1cbb      	adds	r3, r7, #2
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	429a      	cmp	r2, r3
 800609e:	dbcb      	blt.n	8006038 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80060a0:	2316      	movs	r3, #22
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	881b      	ldrh	r3, [r3, #0]
}
 80060a6:	0018      	movs	r0, r3
 80060a8:	46bd      	mov	sp, r7
 80060aa:	b006      	add	sp, #24
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	46c0      	nop			@ (mov r8, r8)
 80060b0:	ffffa001 	.word	0xffffa001

080060b4 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_14;
 80060b8:	4b26      	ldr	r3, [pc, #152]	@ (8006154 <ReadBatteryVoltage+0xa0>)
 80060ba:	4a27      	ldr	r2, [pc, #156]	@ (8006158 <ReadBatteryVoltage+0xa4>)
 80060bc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80060be:	4b25      	ldr	r3, [pc, #148]	@ (8006154 <ReadBatteryVoltage+0xa0>)
 80060c0:	2280      	movs	r2, #128	@ 0x80
 80060c2:	0152      	lsls	r2, r2, #5
 80060c4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80060c6:	4a23      	ldr	r2, [pc, #140]	@ (8006154 <ReadBatteryVoltage+0xa0>)
 80060c8:	4b24      	ldr	r3, [pc, #144]	@ (800615c <ReadBatteryVoltage+0xa8>)
 80060ca:	0011      	movs	r1, r2
 80060cc:	0018      	movs	r0, r3
 80060ce:	f008 fab7 	bl	800e640 <HAL_ADC_ConfigChannel>
 80060d2:	1e03      	subs	r3, r0, #0
 80060d4:	d001      	beq.n	80060da <ReadBatteryVoltage+0x26>
    Error_Handler();
 80060d6:	f001 ff63 	bl	8007fa0 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80060da:	4b20      	ldr	r3, [pc, #128]	@ (800615c <ReadBatteryVoltage+0xa8>)
 80060dc:	0018      	movs	r0, r3
 80060de:	f008 f9b3 	bl	800e448 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80060e2:	4b1e      	ldr	r3, [pc, #120]	@ (800615c <ReadBatteryVoltage+0xa8>)
 80060e4:	2101      	movs	r1, #1
 80060e6:	0018      	movs	r0, r3
 80060e8:	f008 fa02 	bl	800e4f0 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 80060ec:	4b1b      	ldr	r3, [pc, #108]	@ (800615c <ReadBatteryVoltage+0xa8>)
 80060ee:	0018      	movs	r0, r3
 80060f0:	f008 fa9a 	bl	800e628 <HAL_ADC_GetValue>
 80060f4:	0002      	movs	r2, r0
 80060f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006160 <ReadBatteryVoltage+0xac>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4353      	muls	r3, r2
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	4919      	ldr	r1, [pc, #100]	@ (8006164 <ReadBatteryVoltage+0xb0>)
 8006100:	0018      	movs	r0, r3
 8006102:	f7fa f84f 	bl	80001a4 <__udivsi3>
 8006106:	0003      	movs	r3, r0
 8006108:	001a      	movs	r2, r3
 800610a:	4b17      	ldr	r3, [pc, #92]	@ (8006168 <ReadBatteryVoltage+0xb4>)
 800610c:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 800610e:	4b16      	ldr	r3, [pc, #88]	@ (8006168 <ReadBatteryVoltage+0xb4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	0018      	movs	r0, r3
 8006114:	f7fb faa8 	bl	8001668 <__aeabi_ui2f>
 8006118:	1c03      	adds	r3, r0, #0
 800611a:	4914      	ldr	r1, [pc, #80]	@ (800616c <ReadBatteryVoltage+0xb8>)
 800611c:	1c18      	adds	r0, r3, #0
 800611e:	f7fa fd59 	bl	8000bd4 <__aeabi_fdiv>
 8006122:	1c03      	adds	r3, r0, #0
 8006124:	1c1a      	adds	r2, r3, #0
 8006126:	4b12      	ldr	r3, [pc, #72]	@ (8006170 <ReadBatteryVoltage+0xbc>)
 8006128:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 800612a:	4b0a      	ldr	r3, [pc, #40]	@ (8006154 <ReadBatteryVoltage+0xa0>)
 800612c:	4a0a      	ldr	r2, [pc, #40]	@ (8006158 <ReadBatteryVoltage+0xa4>)
 800612e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006130:	4b08      	ldr	r3, [pc, #32]	@ (8006154 <ReadBatteryVoltage+0xa0>)
 8006132:	4a10      	ldr	r2, [pc, #64]	@ (8006174 <ReadBatteryVoltage+0xc0>)
 8006134:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8006136:	4a07      	ldr	r2, [pc, #28]	@ (8006154 <ReadBatteryVoltage+0xa0>)
 8006138:	4b08      	ldr	r3, [pc, #32]	@ (800615c <ReadBatteryVoltage+0xa8>)
 800613a:	0011      	movs	r1, r2
 800613c:	0018      	movs	r0, r3
 800613e:	f008 fa7f 	bl	800e640 <HAL_ADC_ConfigChannel>
 8006142:	1e03      	subs	r3, r0, #0
 8006144:	d001      	beq.n	800614a <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006146:	f001 ff2b 	bl	8007fa0 <Error_Handler>
  }
  return trueValue;
 800614a:	4b09      	ldr	r3, [pc, #36]	@ (8006170 <ReadBatteryVoltage+0xbc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 }
 800614e:	1c18      	adds	r0, r3, #0
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20000cbc 	.word	0x20000cbc
 8006158:	38004000 	.word	0x38004000
 800615c:	20000cfc 	.word	0x20000cfc
 8006160:	2000002c 	.word	0x2000002c
 8006164:	00000fff 	.word	0x00000fff
 8006168:	20000cc4 	.word	0x20000cc4
 800616c:	447a0000 	.word	0x447a0000
 8006170:	20000cc8 	.word	0x20000cc8
 8006174:	00001001 	.word	0x00001001

08006178 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 800617c:	4b27      	ldr	r3, [pc, #156]	@ (800621c <ReadSolarVoltage+0xa4>)
 800617e:	4a28      	ldr	r2, [pc, #160]	@ (8006220 <ReadSolarVoltage+0xa8>)
 8006180:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006182:	4b26      	ldr	r3, [pc, #152]	@ (800621c <ReadSolarVoltage+0xa4>)
 8006184:	2280      	movs	r2, #128	@ 0x80
 8006186:	0152      	lsls	r2, r2, #5
 8006188:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800618a:	4a24      	ldr	r2, [pc, #144]	@ (800621c <ReadSolarVoltage+0xa4>)
 800618c:	4b25      	ldr	r3, [pc, #148]	@ (8006224 <ReadSolarVoltage+0xac>)
 800618e:	0011      	movs	r1, r2
 8006190:	0018      	movs	r0, r3
 8006192:	f008 fa55 	bl	800e640 <HAL_ADC_ConfigChannel>
 8006196:	1e03      	subs	r3, r0, #0
 8006198:	d001      	beq.n	800619e <ReadSolarVoltage+0x26>
    Error_Handler();
 800619a:	f001 ff01 	bl	8007fa0 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800619e:	4b21      	ldr	r3, [pc, #132]	@ (8006224 <ReadSolarVoltage+0xac>)
 80061a0:	0018      	movs	r0, r3
 80061a2:	f008 f951 	bl	800e448 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80061a6:	4b1f      	ldr	r3, [pc, #124]	@ (8006224 <ReadSolarVoltage+0xac>)
 80061a8:	2101      	movs	r1, #1
 80061aa:	0018      	movs	r0, r3
 80061ac:	f008 f9a0 	bl	800e4f0 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80061b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006224 <ReadSolarVoltage+0xac>)
 80061b2:	0018      	movs	r0, r3
 80061b4:	f008 fa38 	bl	800e628 <HAL_ADC_GetValue>
 80061b8:	0002      	movs	r2, r0
 80061ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006228 <ReadSolarVoltage+0xb0>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	435a      	muls	r2, r3
 80061c0:	0013      	movs	r3, r2
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	189b      	adds	r3, r3, r2
 80061c6:	4919      	ldr	r1, [pc, #100]	@ (800622c <ReadSolarVoltage+0xb4>)
 80061c8:	0018      	movs	r0, r3
 80061ca:	f7f9 ffeb 	bl	80001a4 <__udivsi3>
 80061ce:	0003      	movs	r3, r0
 80061d0:	001a      	movs	r2, r3
 80061d2:	4b17      	ldr	r3, [pc, #92]	@ (8006230 <ReadSolarVoltage+0xb8>)
 80061d4:	601a      	str	r2, [r3, #0]
  trueValue = (float)value / 1000.0;
 80061d6:	4b16      	ldr	r3, [pc, #88]	@ (8006230 <ReadSolarVoltage+0xb8>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	0018      	movs	r0, r3
 80061dc:	f7fb fa44 	bl	8001668 <__aeabi_ui2f>
 80061e0:	1c03      	adds	r3, r0, #0
 80061e2:	4914      	ldr	r1, [pc, #80]	@ (8006234 <ReadSolarVoltage+0xbc>)
 80061e4:	1c18      	adds	r0, r3, #0
 80061e6:	f7fa fcf5 	bl	8000bd4 <__aeabi_fdiv>
 80061ea:	1c03      	adds	r3, r0, #0
 80061ec:	1c1a      	adds	r2, r3, #0
 80061ee:	4b12      	ldr	r3, [pc, #72]	@ (8006238 <ReadSolarVoltage+0xc0>)
 80061f0:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 80061f2:	4b0a      	ldr	r3, [pc, #40]	@ (800621c <ReadSolarVoltage+0xa4>)
 80061f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006220 <ReadSolarVoltage+0xa8>)
 80061f6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80061f8:	4b08      	ldr	r3, [pc, #32]	@ (800621c <ReadSolarVoltage+0xa4>)
 80061fa:	4a10      	ldr	r2, [pc, #64]	@ (800623c <ReadSolarVoltage+0xc4>)
 80061fc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80061fe:	4a07      	ldr	r2, [pc, #28]	@ (800621c <ReadSolarVoltage+0xa4>)
 8006200:	4b08      	ldr	r3, [pc, #32]	@ (8006224 <ReadSolarVoltage+0xac>)
 8006202:	0011      	movs	r1, r2
 8006204:	0018      	movs	r0, r3
 8006206:	f008 fa1b 	bl	800e640 <HAL_ADC_ConfigChannel>
 800620a:	1e03      	subs	r3, r0, #0
 800620c:	d001      	beq.n	8006212 <ReadSolarVoltage+0x9a>
    Error_Handler();
 800620e:	f001 fec7 	bl	8007fa0 <Error_Handler>
  }
  return trueValue;
 8006212:	4b09      	ldr	r3, [pc, #36]	@ (8006238 <ReadSolarVoltage+0xc0>)
 8006214:	681b      	ldr	r3, [r3, #0]
 }
 8006216:	1c18      	adds	r0, r3, #0
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20000cbc 	.word	0x20000cbc
 8006220:	3c008000 	.word	0x3c008000
 8006224:	20000cfc 	.word	0x20000cfc
 8006228:	2000002c 	.word	0x2000002c
 800622c:	00000fff 	.word	0x00000fff
 8006230:	20000ccc 	.word	0x20000ccc
 8006234:	447a0000 	.word	0x447a0000
 8006238:	20000cd0 	.word	0x20000cd0
 800623c:	00001001 	.word	0x00001001

08006240 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006244:	23a0      	movs	r3, #160	@ 0xa0
 8006246:	05db      	lsls	r3, r3, #23
 8006248:	2180      	movs	r1, #128	@ 0x80
 800624a:	0018      	movs	r0, r3
 800624c:	f009 f97e 	bl	800f54c <HAL_GPIO_ReadPin>
 8006250:	0003      	movs	r3, r0
 8006252:	1e5a      	subs	r2, r3, #1
 8006254:	4193      	sbcs	r3, r2
 8006256:	b2db      	uxtb	r3, r3
}
 8006258:	0018      	movs	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800625e:	b580      	push	{r7, lr}
 8006260:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8006262:	2380      	movs	r3, #128	@ 0x80
 8006264:	021a      	lsls	r2, r3, #8
 8006266:	23a0      	movs	r3, #160	@ 0xa0
 8006268:	05db      	lsls	r3, r3, #23
 800626a:	0011      	movs	r1, r2
 800626c:	0018      	movs	r0, r3
 800626e:	f009 f96d 	bl	800f54c <HAL_GPIO_ReadPin>
 8006272:	0003      	movs	r3, r0
 8006274:	1e5a      	subs	r2, r3, #1
 8006276:	4193      	sbcs	r3, r2
 8006278:	b2db      	uxtb	r3, r3
}
 800627a:	0018      	movs	r0, r3
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8006284:	4b05      	ldr	r3, [pc, #20]	@ (800629c <UserButton_Pressed+0x1c>)
 8006286:	2104      	movs	r1, #4
 8006288:	0018      	movs	r0, r3
 800628a:	f009 f95f 	bl	800f54c <HAL_GPIO_ReadPin>
 800628e:	0003      	movs	r3, r0
 8006290:	425a      	negs	r2, r3
 8006292:	4153      	adcs	r3, r2
 8006294:	b2db      	uxtb	r3, r3
}
 8006296:	0018      	movs	r0, r3
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	50000c00 	.word	0x50000c00

080062a0 <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 80062a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062a2:	46d6      	mov	lr, sl
 80062a4:	464f      	mov	r7, r9
 80062a6:	4646      	mov	r6, r8
 80062a8:	b5c0      	push	{r6, r7, lr}
 80062aa:	b08e      	sub	sp, #56	@ 0x38
 80062ac:	af08      	add	r7, sp, #32
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80062ae:	003a      	movs	r2, r7
 80062b0:	1d3b      	adds	r3, r7, #4
 80062b2:	0011      	movs	r1, r2
 80062b4:	0018      	movs	r0, r3
 80062b6:	f000 f9f9 	bl	80066ac <RTC_GetTime>
  UpdateSystemUptime();
 80062ba:	f000 f83d 	bl	8006338 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80062be:	003b      	movs	r3, r7
 80062c0:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80062c2:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80062c4:	003b      	movs	r3, r7
 80062c6:	785b      	ldrb	r3, [r3, #1]
 80062c8:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80062ca:	4b18      	ldr	r3, [pc, #96]	@ (800632c <showTime+0x8c>)
 80062cc:	0092      	lsls	r2, r2, #2
 80062ce:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80062d0:	003b      	movs	r3, r7
 80062d2:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80062d4:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80062d6:	1d3b      	adds	r3, r7, #4
 80062d8:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80062da:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80062dc:	1d3b      	adds	r3, r7, #4
 80062de:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80062e0:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80062e2:	1d3b      	adds	r3, r7, #4
 80062e4:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80062e6:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80062e8:	4b11      	ldr	r3, [pc, #68]	@ (8006330 <showTime+0x90>)
 80062ea:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80062ec:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80062ee:	4b10      	ldr	r3, [pc, #64]	@ (8006330 <showTime+0x90>)
 80062f0:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80062f2:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80062f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006330 <showTime+0x90>)
 80062f6:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80062f8:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80062fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006330 <showTime+0x90>)
 80062fc:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80062fe:	480d      	ldr	r0, [pc, #52]	@ (8006334 <showTime+0x94>)
 8006300:	9306      	str	r3, [sp, #24]
 8006302:	4643      	mov	r3, r8
 8006304:	9305      	str	r3, [sp, #20]
 8006306:	4663      	mov	r3, ip
 8006308:	9304      	str	r3, [sp, #16]
 800630a:	9603      	str	r6, [sp, #12]
 800630c:	9502      	str	r5, [sp, #8]
 800630e:	9401      	str	r4, [sp, #4]
 8006310:	9100      	str	r1, [sp, #0]
 8006312:	4653      	mov	r3, sl
 8006314:	4649      	mov	r1, r9
 8006316:	f018 ff0b 	bl	801f130 <iprintf>
}
 800631a:	46c0      	nop			@ (mov r8, r8)
 800631c:	46bd      	mov	sp, r7
 800631e:	b006      	add	sp, #24
 8006320:	bce0      	pop	{r5, r6, r7}
 8006322:	46ba      	mov	sl, r7
 8006324:	46b1      	mov	r9, r6
 8006326:	46a8      	mov	r8, r5
 8006328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800632a:	46c0      	nop			@ (mov r8, r8)
 800632c:	2000004c 	.word	0x2000004c
 8006330:	20000cd4 	.word	0x20000cd4
 8006334:	08022ea8 	.word	0x08022ea8

08006338 <UpdateSystemUptime>:
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}

void UpdateSystemUptime() {
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 800633e:	003a      	movs	r2, r7
 8006340:	1d3b      	adds	r3, r7, #4
 8006342:	0011      	movs	r1, r2
 8006344:	0018      	movs	r0, r3
 8006346:	f000 f9b1 	bl	80066ac <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800634a:	1d3a      	adds	r2, r7, #4
 800634c:	003b      	movs	r3, r7
 800634e:	0011      	movs	r1, r2
 8006350:	0018      	movs	r0, r3
 8006352:	f000 fb15 	bl	8006980 <makeTime>
 8006356:	0002      	movs	r2, r0
 8006358:	4b1e      	ldr	r3, [pc, #120]	@ (80063d4 <UpdateSystemUptime+0x9c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	213c      	movs	r1, #60	@ 0x3c
 8006368:	0018      	movs	r0, r3
 800636a:	f7f9 ffa1 	bl	80002b0 <__aeabi_uidivmod>
 800636e:	000b      	movs	r3, r1
 8006370:	b2da      	uxtb	r2, r3
 8006372:	4b19      	ldr	r3, [pc, #100]	@ (80063d8 <UpdateSystemUptime+0xa0>)
 8006374:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	213c      	movs	r1, #60	@ 0x3c
 800637a:	0018      	movs	r0, r3
 800637c:	f7f9 ff12 	bl	80001a4 <__udivsi3>
 8006380:	0003      	movs	r3, r0
 8006382:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	213c      	movs	r1, #60	@ 0x3c
 8006388:	0018      	movs	r0, r3
 800638a:	f7f9 ff91 	bl	80002b0 <__aeabi_uidivmod>
 800638e:	000b      	movs	r3, r1
 8006390:	b2da      	uxtb	r2, r3
 8006392:	4b11      	ldr	r3, [pc, #68]	@ (80063d8 <UpdateSystemUptime+0xa0>)
 8006394:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	213c      	movs	r1, #60	@ 0x3c
 800639a:	0018      	movs	r0, r3
 800639c:	f7f9 ff02 	bl	80001a4 <__udivsi3>
 80063a0:	0003      	movs	r3, r0
 80063a2:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2118      	movs	r1, #24
 80063a8:	0018      	movs	r0, r3
 80063aa:	f7f9 ff81 	bl	80002b0 <__aeabi_uidivmod>
 80063ae:	000b      	movs	r3, r1
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	4b09      	ldr	r3, [pc, #36]	@ (80063d8 <UpdateSystemUptime+0xa0>)
 80063b4:	709a      	strb	r2, [r3, #2]
  myUpTime.Day /= 24; // now it is days
 80063b6:	4b08      	ldr	r3, [pc, #32]	@ (80063d8 <UpdateSystemUptime+0xa0>)
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	2118      	movs	r1, #24
 80063bc:	0018      	movs	r0, r3
 80063be:	f7f9 fef1 	bl	80001a4 <__udivsi3>
 80063c2:	0003      	movs	r3, r0
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	4b04      	ldr	r3, [pc, #16]	@ (80063d8 <UpdateSystemUptime+0xa0>)
 80063c8:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 80063ca:	46c0      	nop			@ (mov r8, r8)
 80063cc:	46bd      	mov	sp, r7
 80063ce:	b008      	add	sp, #32
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	46c0      	nop			@ (mov r8, r8)
 80063d4:	20000ce0 	.word	0x20000ce0
 80063d8:	20000cd4 	.word	0x20000cd4

080063dc <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 80063dc:	b590      	push	{r4, r7, lr}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	0008      	movs	r0, r1
 80063e6:	0011      	movs	r1, r2
 80063e8:	1cfb      	adds	r3, r7, #3
 80063ea:	1c02      	adds	r2, r0, #0
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	1cbb      	adds	r3, r7, #2
 80063f0:	1c0a      	adds	r2, r1, #0
 80063f2:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 80063f4:	230e      	movs	r3, #14
 80063f6:	18fb      	adds	r3, r7, r3
 80063f8:	2200      	movs	r2, #0
 80063fa:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80063fc:	230f      	movs	r3, #15
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	1cfa      	adds	r2, r7, #3
 8006402:	7812      	ldrb	r2, [r2, #0]
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	e015      	b.n	8006434 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006408:	200f      	movs	r0, #15
 800640a:	183b      	adds	r3, r7, r0
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	18d2      	adds	r2, r2, r3
 8006412:	240e      	movs	r4, #14
 8006414:	193b      	adds	r3, r7, r4
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	7811      	ldrb	r1, [r2, #0]
 800641a:	2208      	movs	r2, #8
 800641c:	18ba      	adds	r2, r7, r2
 800641e:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006420:	193b      	adds	r3, r7, r4
 8006422:	781a      	ldrb	r2, [r3, #0]
 8006424:	193b      	adds	r3, r7, r4
 8006426:	3201      	adds	r2, #1
 8006428:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800642a:	183b      	adds	r3, r7, r0
 800642c:	781a      	ldrb	r2, [r3, #0]
 800642e:	183b      	adds	r3, r7, r0
 8006430:	3201      	adds	r2, #1
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	200f      	movs	r0, #15
 8006436:	183a      	adds	r2, r7, r0
 8006438:	1cbb      	adds	r3, r7, #2
 800643a:	7812      	ldrb	r2, [r2, #0]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d9e2      	bls.n	8006408 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8006442:	230e      	movs	r3, #14
 8006444:	18fb      	adds	r3, r7, r3
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2208      	movs	r2, #8
 800644a:	18ba      	adds	r2, r7, r2
 800644c:	2100      	movs	r1, #0
 800644e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006450:	1cfb      	adds	r3, r7, #3
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	2b13      	cmp	r3, #19
 8006456:	d849      	bhi.n	80064ec <aBuff2int+0x110>
    if (start == 17) { //month
 8006458:	1cfb      	adds	r3, r7, #3
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	2b11      	cmp	r3, #17
 800645e:	d122      	bne.n	80064a6 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006460:	183b      	adds	r3, r7, r0
 8006462:	2200      	movs	r2, #0
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	e018      	b.n	800649a <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8006468:	240f      	movs	r4, #15
 800646a:	193b      	adds	r3, r7, r4
 800646c:	781a      	ldrb	r2, [r3, #0]
 800646e:	4b25      	ldr	r3, [pc, #148]	@ (8006504 <aBuff2int+0x128>)
 8006470:	0092      	lsls	r2, r2, #2
 8006472:	58d2      	ldr	r2, [r2, r3]
 8006474:	2308      	movs	r3, #8
 8006476:	18fb      	adds	r3, r7, r3
 8006478:	0011      	movs	r1, r2
 800647a:	0018      	movs	r0, r3
 800647c:	f7f9 fe6c 	bl	8000158 <strcmp>
 8006480:	1e03      	subs	r3, r0, #0
 8006482:	d104      	bne.n	800648e <aBuff2int+0xb2>
          return i+1;
 8006484:	193b      	adds	r3, r7, r4
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	3301      	adds	r3, #1
 800648a:	b2db      	uxtb	r3, r3
 800648c:	e035      	b.n	80064fa <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800648e:	210f      	movs	r1, #15
 8006490:	187b      	adds	r3, r7, r1
 8006492:	781a      	ldrb	r2, [r3, #0]
 8006494:	187b      	adds	r3, r7, r1
 8006496:	3201      	adds	r2, #1
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	230f      	movs	r3, #15
 800649c:	18fb      	adds	r3, r7, r3
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b0b      	cmp	r3, #11
 80064a2:	d9e1      	bls.n	8006468 <aBuff2int+0x8c>
 80064a4:	e022      	b.n	80064ec <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80064a6:	230f      	movs	r3, #15
 80064a8:	18fb      	adds	r3, r7, r3
 80064aa:	2200      	movs	r2, #0
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	e018      	b.n	80064e2 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80064b0:	240f      	movs	r4, #15
 80064b2:	193b      	adds	r3, r7, r4
 80064b4:	781a      	ldrb	r2, [r3, #0]
 80064b6:	4b14      	ldr	r3, [pc, #80]	@ (8006508 <aBuff2int+0x12c>)
 80064b8:	0092      	lsls	r2, r2, #2
 80064ba:	58d2      	ldr	r2, [r2, r3]
 80064bc:	2308      	movs	r3, #8
 80064be:	18fb      	adds	r3, r7, r3
 80064c0:	0011      	movs	r1, r2
 80064c2:	0018      	movs	r0, r3
 80064c4:	f7f9 fe48 	bl	8000158 <strcmp>
 80064c8:	1e03      	subs	r3, r0, #0
 80064ca:	d104      	bne.n	80064d6 <aBuff2int+0xfa>
          return i+1;
 80064cc:	193b      	adds	r3, r7, r4
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	3301      	adds	r3, #1
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	e011      	b.n	80064fa <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 80064d6:	210f      	movs	r1, #15
 80064d8:	187b      	adds	r3, r7, r1
 80064da:	781a      	ldrb	r2, [r3, #0]
 80064dc:	187b      	adds	r3, r7, r1
 80064de:	3201      	adds	r2, #1
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	230f      	movs	r3, #15
 80064e4:	18fb      	adds	r3, r7, r3
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b06      	cmp	r3, #6
 80064ea:	d9e1      	bls.n	80064b0 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 80064ec:	2308      	movs	r3, #8
 80064ee:	18fb      	adds	r3, r7, r3
 80064f0:	0018      	movs	r0, r3
 80064f2:	f017 fa42 	bl	801d97a <atoi>
 80064f6:	0003      	movs	r3, r0
 80064f8:	b2db      	uxtb	r3, r3
}
 80064fa:	0018      	movs	r0, r3
 80064fc:	46bd      	mov	sp, r7
 80064fe:	b005      	add	sp, #20
 8006500:	bd90      	pop	{r4, r7, pc}
 8006502:	46c0      	nop			@ (mov r8, r8)
 8006504:	2000004c 	.word	0x2000004c
 8006508:	20000030 	.word	0x20000030

0800650c <ParseTime>:

void ParseTime(char* buffer) {
 800650c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800650e:	b08b      	sub	sp, #44	@ 0x2c
 8006510:	af02      	add	r7, sp, #8
 8006512:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006514:	2508      	movs	r5, #8
 8006516:	197a      	adds	r2, r7, r5
 8006518:	240c      	movs	r4, #12
 800651a:	193b      	adds	r3, r7, r4
 800651c:	0011      	movs	r1, r2
 800651e:	0018      	movs	r0, r3
 8006520:	f000 f8c4 	bl	80066ac <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2219      	movs	r2, #25
 8006528:	2118      	movs	r1, #24
 800652a:	0018      	movs	r0, r3
 800652c:	f7ff ff56 	bl	80063dc <aBuff2int>
 8006530:	0003      	movs	r3, r0
 8006532:	001a      	movs	r2, r3
 8006534:	193b      	adds	r3, r7, r4
 8006536:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	221c      	movs	r2, #28
 800653c:	211b      	movs	r1, #27
 800653e:	0018      	movs	r0, r3
 8006540:	f7ff ff4c 	bl	80063dc <aBuff2int>
 8006544:	0003      	movs	r3, r0
 8006546:	001a      	movs	r2, r3
 8006548:	193b      	adds	r3, r7, r4
 800654a:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	221f      	movs	r2, #31
 8006550:	211e      	movs	r1, #30
 8006552:	0018      	movs	r0, r3
 8006554:	f7ff ff42 	bl	80063dc <aBuff2int>
 8006558:	0003      	movs	r3, r0
 800655a:	001a      	movs	r2, r3
 800655c:	193b      	adds	r3, r7, r4
 800655e:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2224      	movs	r2, #36	@ 0x24
 8006564:	2123      	movs	r1, #35	@ 0x23
 8006566:	0018      	movs	r0, r3
 8006568:	f7ff ff38 	bl	80063dc <aBuff2int>
 800656c:	0003      	movs	r3, r0
 800656e:	001a      	movs	r2, r3
 8006570:	002e      	movs	r6, r5
 8006572:	19bb      	adds	r3, r7, r6
 8006574:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2213      	movs	r2, #19
 800657a:	2111      	movs	r1, #17
 800657c:	0018      	movs	r0, r3
 800657e:	f7ff ff2d 	bl	80063dc <aBuff2int>
 8006582:	0003      	movs	r3, r0
 8006584:	001a      	movs	r2, r3
 8006586:	19bb      	adds	r3, r7, r6
 8006588:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2216      	movs	r2, #22
 800658e:	2115      	movs	r1, #21
 8006590:	0018      	movs	r0, r3
 8006592:	f7ff ff23 	bl	80063dc <aBuff2int>
 8006596:	0003      	movs	r3, r0
 8006598:	001a      	movs	r2, r3
 800659a:	19bb      	adds	r3, r7, r6
 800659c:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	220f      	movs	r2, #15
 80065a2:	210d      	movs	r1, #13
 80065a4:	0018      	movs	r0, r3
 80065a6:	f7ff ff19 	bl	80063dc <aBuff2int>
 80065aa:	0003      	movs	r3, r0
 80065ac:	001a      	movs	r2, r3
 80065ae:	19bb      	adds	r3, r7, r6
 80065b0:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80065b2:	0025      	movs	r5, r4
 80065b4:	197b      	adds	r3, r7, r5
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	001c      	movs	r4, r3
 80065ba:	197b      	adds	r3, r7, r5
 80065bc:	785b      	ldrb	r3, [r3, #1]
 80065be:	0018      	movs	r0, r3
 80065c0:	197b      	adds	r3, r7, r5
 80065c2:	789b      	ldrb	r3, [r3, #2]
 80065c4:	4a14      	ldr	r2, [pc, #80]	@ (8006618 <ParseTime+0x10c>)
 80065c6:	4915      	ldr	r1, [pc, #84]	@ (800661c <ParseTime+0x110>)
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	9000      	str	r0, [sp, #0]
 80065cc:	0023      	movs	r3, r4
 80065ce:	2003      	movs	r0, #3
 80065d0:	f007 f9c0 	bl	800d954 <CreateLine>
  RTC_SetTime(&currentTime);
 80065d4:	197b      	adds	r3, r7, r5
 80065d6:	0018      	movs	r0, r3
 80065d8:	f000 f824 	bl	8006624 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 80065dc:	19bb      	adds	r3, r7, r6
 80065de:	0018      	movs	r0, r3
 80065e0:	f000 f846 	bl	8006670 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 80065e4:	19bb      	adds	r3, r7, r6
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d101      	bne.n	80065f0 <ParseTime+0xe4>
    reset_fanCleaningDone();
 80065ec:	f002 fc1c 	bl	8008e28 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 80065f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006620 <ParseTime+0x114>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10a      	bne.n	800660e <ParseTime+0x102>
    posixBootTime = makeTime(&currentDate, &currentTime);
 80065f8:	230c      	movs	r3, #12
 80065fa:	18fa      	adds	r2, r7, r3
 80065fc:	2308      	movs	r3, #8
 80065fe:	18fb      	adds	r3, r7, r3
 8006600:	0011      	movs	r1, r2
 8006602:	0018      	movs	r0, r3
 8006604:	f000 f9bc 	bl	8006980 <makeTime>
 8006608:	0002      	movs	r2, r0
 800660a:	4b05      	ldr	r3, [pc, #20]	@ (8006620 <ParseTime+0x114>)
 800660c:	601a      	str	r2, [r3, #0]
  }
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
}
 800660e:	46c0      	nop			@ (mov r8, r8)
 8006610:	46bd      	mov	sp, r7
 8006612:	b009      	add	sp, #36	@ 0x24
 8006614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006616:	46c0      	nop			@ (mov r8, r8)
 8006618:	08022f00 	.word	0x08022f00
 800661c:	08022f38 	.word	0x08022f38
 8006620:	20000ce0 	.word	0x20000ce0

08006624 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800663e:	4b09      	ldr	r3, [pc, #36]	@ (8006664 <RTC_SetTime+0x40>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	0018      	movs	r0, r3
 8006648:	f00e fe1c 	bl	8015284 <HAL_RTC_SetTime>
 800664c:	1e03      	subs	r3, r0, #0
 800664e:	d005      	beq.n	800665c <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 8006650:	4a05      	ldr	r2, [pc, #20]	@ (8006668 <RTC_SetTime+0x44>)
 8006652:	4b06      	ldr	r3, [pc, #24]	@ (800666c <RTC_SetTime+0x48>)
 8006654:	0019      	movs	r1, r3
 8006656:	2001      	movs	r0, #1
 8006658:	f007 f97c 	bl	800d954 <CreateLine>
    }
}
 800665c:	46c0      	nop			@ (mov r8, r8)
 800665e:	46bd      	mov	sp, r7
 8006660:	b002      	add	sp, #8
 8006662:	bd80      	pop	{r7, pc}
 8006664:	20000cdc 	.word	0x20000cdc
 8006668:	08022f3c 	.word	0x08022f3c
 800666c:	08022f58 	.word	0x08022f58

08006670 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006678:	4b09      	ldr	r3, [pc, #36]	@ (80066a0 <RTC_SetDate+0x30>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	0018      	movs	r0, r3
 8006682:	f00e ff07 	bl	8015494 <HAL_RTC_SetDate>
 8006686:	1e03      	subs	r3, r0, #0
 8006688:	d005      	beq.n	8006696 <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 800668a:	4a06      	ldr	r2, [pc, #24]	@ (80066a4 <RTC_SetDate+0x34>)
 800668c:	4b06      	ldr	r3, [pc, #24]	@ (80066a8 <RTC_SetDate+0x38>)
 800668e:	0019      	movs	r1, r3
 8006690:	2001      	movs	r0, #1
 8006692:	f007 f95f 	bl	800d954 <CreateLine>
    }
}
 8006696:	46c0      	nop			@ (mov r8, r8)
 8006698:	46bd      	mov	sp, r7
 800669a:	b002      	add	sp, #8
 800669c:	bd80      	pop	{r7, pc}
 800669e:	46c0      	nop			@ (mov r8, r8)
 80066a0:	20000cdc 	.word	0x20000cdc
 80066a4:	08022f5c 	.word	0x08022f5c
 80066a8:	08022f58 	.word	0x08022f58

080066ac <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 80066b6:	4b11      	ldr	r3, [pc, #68]	@ (80066fc <RTC_GetTime+0x50>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	0018      	movs	r0, r3
 80066c0:	f00e fe8a 	bl	80153d8 <HAL_RTC_GetTime>
 80066c4:	1e03      	subs	r3, r0, #0
 80066c6:	d005      	beq.n	80066d4 <RTC_GetTime+0x28>
      Error("Error getting time from RTC");
 80066c8:	4a0d      	ldr	r2, [pc, #52]	@ (8006700 <RTC_GetTime+0x54>)
 80066ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006704 <RTC_GetTime+0x58>)
 80066cc:	0019      	movs	r1, r3
 80066ce:	2001      	movs	r0, #1
 80066d0:	f007 f940 	bl	800d954 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80066d4:	4b09      	ldr	r3, [pc, #36]	@ (80066fc <RTC_GetTime+0x50>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6839      	ldr	r1, [r7, #0]
 80066da:	2200      	movs	r2, #0
 80066dc:	0018      	movs	r0, r3
 80066de:	f00e ff6d 	bl	80155bc <HAL_RTC_GetDate>
 80066e2:	1e03      	subs	r3, r0, #0
 80066e4:	d005      	beq.n	80066f2 <RTC_GetTime+0x46>
      Error("Error getting date from RTC");
 80066e6:	4a08      	ldr	r2, [pc, #32]	@ (8006708 <RTC_GetTime+0x5c>)
 80066e8:	4b06      	ldr	r3, [pc, #24]	@ (8006704 <RTC_GetTime+0x58>)
 80066ea:	0019      	movs	r1, r3
 80066ec:	2001      	movs	r0, #1
 80066ee:	f007 f931 	bl	800d954 <CreateLine>
    }
}
 80066f2:	46c0      	nop			@ (mov r8, r8)
 80066f4:	46bd      	mov	sp, r7
 80066f6:	b002      	add	sp, #8
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	46c0      	nop			@ (mov r8, r8)
 80066fc:	20000cdc 	.word	0x20000cdc
 8006700:	08022f78 	.word	0x08022f78
 8006704:	08022f58 	.word	0x08022f58
 8006708:	08022f94 	.word	0x08022f94

0800670c <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006712:	003a      	movs	r2, r7
 8006714:	1d3b      	adds	r3, r7, #4
 8006716:	0011      	movs	r1, r2
 8006718:	0018      	movs	r0, r3
 800671a:	f7ff ffc7 	bl	80066ac <RTC_GetTime>
  return currentDate.WeekDay;
 800671e:	003b      	movs	r3, r7
 8006720:	781b      	ldrb	r3, [r3, #0]
}
 8006722:	0018      	movs	r0, r3
 8006724:	46bd      	mov	sp, r7
 8006726:	b006      	add	sp, #24
 8006728:	bd80      	pop	{r7, pc}

0800672a <getPosixTime>:

uint32_t getPosixTime(void) {
 800672a:	b580      	push	{r7, lr}
 800672c:	b086      	sub	sp, #24
 800672e:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006730:	003a      	movs	r2, r7
 8006732:	1d3b      	adds	r3, r7, #4
 8006734:	0011      	movs	r1, r2
 8006736:	0018      	movs	r0, r3
 8006738:	f7ff ffb8 	bl	80066ac <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800673c:	1d3a      	adds	r2, r7, #4
 800673e:	003b      	movs	r3, r7
 8006740:	0011      	movs	r1, r2
 8006742:	0018      	movs	r0, r3
 8006744:	f000 f91c 	bl	8006980 <makeTime>
 8006748:	0003      	movs	r3, r0
}
 800674a:	0018      	movs	r0, r3
 800674c:	46bd      	mov	sp, r7
 800674e:	b006      	add	sp, #24
 8006750:	bd80      	pop	{r7, pc}
	...

08006754 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006756:	b08d      	sub	sp, #52	@ 0x34
 8006758:	af04      	add	r7, sp, #16
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
//  RTC_GetTime(&currentTime, &currentDate);
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800675e:	240c      	movs	r4, #12
 8006760:	193a      	adds	r2, r7, r4
 8006762:	2508      	movs	r5, #8
 8006764:	1979      	adds	r1, r7, r5
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	0018      	movs	r0, r3
 800676a:	f000 f9d3 	bl	8006b14 <breakPosixTime>
//  printf("%s %d-%d-%d %dh:%dm:%ds\r\n", dayNames[currentDate.WeekDay - 1], currentDate.Date, currentDate.Month, currentDate.Year,
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800676e:	002a      	movs	r2, r5
 8006770:	18bb      	adds	r3, r7, r2
 8006772:	789b      	ldrb	r3, [r3, #2]
 8006774:	001e      	movs	r6, r3
 8006776:	18bb      	adds	r3, r7, r2
 8006778:	785b      	ldrb	r3, [r3, #1]
 800677a:	469c      	mov	ip, r3
 800677c:	18bb      	adds	r3, r7, r2
 800677e:	78db      	ldrb	r3, [r3, #3]
 8006780:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006782:	0021      	movs	r1, r4
 8006784:	187b      	adds	r3, r7, r1
 8006786:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006788:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800678a:	187b      	adds	r3, r7, r1
 800678c:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800678e:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006790:	187b      	adds	r3, r7, r1
 8006792:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006794:	4906      	ldr	r1, [pc, #24]	@ (80067b0 <getUTCfromPosixTime+0x5c>)
 8006796:	6838      	ldr	r0, [r7, #0]
 8006798:	9303      	str	r3, [sp, #12]
 800679a:	9502      	str	r5, [sp, #8]
 800679c:	9401      	str	r4, [sp, #4]
 800679e:	9200      	str	r2, [sp, #0]
 80067a0:	4663      	mov	r3, ip
 80067a2:	0032      	movs	r2, r6
 80067a4:	f018 fd34 	bl	801f210 <siprintf>
}
 80067a8:	46c0      	nop			@ (mov r8, r8)
 80067aa:	46bd      	mov	sp, r7
 80067ac:	b009      	add	sp, #36	@ 0x24
 80067ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067b0:	08022fb0 	.word	0x08022fb0

080067b4 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
//    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(RTC_IRQn);

    // ==== sleep insert
//    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80067bc:	4b10      	ldr	r3, [pc, #64]	@ (8006800 <RTC_SetWakeUpTimer+0x4c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	0018      	movs	r0, r3
 80067c2:	f00f f8f9 	bl	80159b8 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 80067c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006800 <RTC_SetWakeUpTimer+0x4c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	22ff      	movs	r2, #255	@ 0xff
 80067d0:	401a      	ands	r2, r3
 80067d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006800 <RTC_SetWakeUpTimer+0x4c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	490a      	ldr	r1, [pc, #40]	@ (8006804 <RTC_SetWakeUpTimer+0x50>)
 80067da:	430a      	orrs	r2, r1
 80067dc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80067de:	4b0a      	ldr	r3, [pc, #40]	@ (8006808 <RTC_SetWakeUpTimer+0x54>)
 80067e0:	2280      	movs	r2, #128	@ 0x80
 80067e2:	0352      	lsls	r2, r2, #13
 80067e4:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 80067e6:	4b06      	ldr	r3, [pc, #24]	@ (8006800 <RTC_SetWakeUpTimer+0x4c>)
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	2204      	movs	r2, #4
 80067f0:	0019      	movs	r1, r3
 80067f2:	f00f f809 	bl	8015808 <HAL_RTCEx_SetWakeUpTimer_IT>
     // ==== end sleep insert
}
 80067f6:	46c0      	nop			@ (mov r8, r8)
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b002      	add	sp, #8
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	46c0      	nop			@ (mov r8, r8)
 8006800:	20000cdc 	.word	0x20000cdc
 8006804:	fffffb7f 	.word	0xfffffb7f
 8006808:	40010400 	.word	0x40010400

0800680c <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006810:	4a0c      	ldr	r2, [pc, #48]	@ (8006844 <Enter_Standby_Mode+0x38>)
 8006812:	4b0d      	ldr	r3, [pc, #52]	@ (8006848 <Enter_Standby_Mode+0x3c>)
 8006814:	0019      	movs	r1, r3
 8006816:	2003      	movs	r0, #3
 8006818:	f007 f89c 	bl	800d954 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 800681c:	2064      	movs	r0, #100	@ 0x64
 800681e:	f007 fc41 	bl	800e0a4 <HAL_Delay>
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006822:	4b0a      	ldr	r3, [pc, #40]	@ (800684c <Enter_Standby_Mode+0x40>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	0018      	movs	r0, r3
 8006828:	f00f f8c6 	bl	80159b8 <HAL_RTCEx_DeactivateWakeUpTimer>
    // Schakel Standby Mode in only is battery is drained
    HAL_SuspendTick();
 800682c:	f007 fc5e 	bl	800e0ec <HAL_SuspendTick>
    HAL_PWR_EnterSTANDBYMode();
 8006830:	f00d fd22 	bl	8014278 <HAL_PWR_EnterSTANDBYMode>
    SystemClock_Config();
 8006834:	f001 fa6a 	bl	8007d0c <SystemClock_Config>
    HAL_ResumeTick(); // Enable SysTick after wake-up
 8006838:	f007 fc66 	bl	800e108 <HAL_ResumeTick>
}
 800683c:	46c0      	nop			@ (mov r8, r8)
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	46c0      	nop			@ (mov r8, r8)
 8006844:	08023004 	.word	0x08023004
 8006848:	08022f38 	.word	0x08022f38
 800684c:	20000cdc 	.word	0x20000cdc

08006850 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af02      	add	r7, sp, #8
 8006856:	0002      	movs	r2, r0
 8006858:	1dbb      	adds	r3, r7, #6
 800685a:	801a      	strh	r2, [r3, #0]
  sen5x_Power_Off();
 800685c:	f002 fac6 	bl	8008dec <sen5x_Power_Off>
  Info("Battery voltage %.2fV", ReadBatteryVoltage());
 8006860:	f7ff fc28 	bl	80060b4 <ReadBatteryVoltage>
 8006864:	1c03      	adds	r3, r0, #0
 8006866:	1c18      	adds	r0, r3, #0
 8006868:	f7fc fdfc 	bl	8003464 <__aeabi_f2d>
 800686c:	0002      	movs	r2, r0
 800686e:	000b      	movs	r3, r1
 8006870:	4833      	ldr	r0, [pc, #204]	@ (8006940 <Enter_Stop_Mode+0xf0>)
 8006872:	4934      	ldr	r1, [pc, #208]	@ (8006944 <Enter_Stop_Mode+0xf4>)
 8006874:	9200      	str	r2, [sp, #0]
 8006876:	9301      	str	r3, [sp, #4]
 8006878:	0002      	movs	r2, r0
 800687a:	2002      	movs	r0, #2
 800687c:	f007 f86a 	bl	800d954 <CreateLine>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006880:	1dbb      	adds	r3, r7, #6
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	4a30      	ldr	r2, [pc, #192]	@ (8006948 <Enter_Stop_Mode+0xf8>)
 8006886:	4931      	ldr	r1, [pc, #196]	@ (800694c <Enter_Stop_Mode+0xfc>)
 8006888:	2003      	movs	r0, #3
 800688a:	f007 f863 	bl	800d954 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800688e:	f7ff ff4c 	bl	800672a <getPosixTime>
 8006892:	0002      	movs	r2, r0
 8006894:	1dbb      	adds	r3, r7, #6
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	18d3      	adds	r3, r2, r3
 800689a:	4a2d      	ldr	r2, [pc, #180]	@ (8006950 <Enter_Stop_Mode+0x100>)
 800689c:	0011      	movs	r1, r2
 800689e:	0018      	movs	r0, r3
 80068a0:	f7ff ff58 	bl	8006754 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 80068a4:	4b2a      	ldr	r3, [pc, #168]	@ (8006950 <Enter_Stop_Mode+0x100>)
 80068a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006954 <Enter_Stop_Mode+0x104>)
 80068a8:	4926      	ldr	r1, [pc, #152]	@ (8006944 <Enter_Stop_Mode+0xf4>)
 80068aa:	2002      	movs	r0, #2
 80068ac:	f007 f852 	bl	800d954 <CreateLine>
  HAL_Delay(100);
 80068b0:	2064      	movs	r0, #100	@ 0x64
 80068b2:	f007 fbf7 	bl	800e0a4 <HAL_Delay>
  HAL_SuspendTick();
 80068b6:	f007 fc19 	bl	800e0ec <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 80068ba:	1dbb      	adds	r3, r7, #6
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	0018      	movs	r0, r3
 80068c0:	f7ff ff78 	bl	80067b4 <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80068c4:	2101      	movs	r1, #1
 80068c6:	2001      	movs	r0, #1
 80068c8:	f00d fc7a 	bl	80141c0 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 80068cc:	f001 fa1e 	bl	8007d0c <SystemClock_Config>
  if (enable_sen5x((uint32_t)sleepTime)) {
 80068d0:	1dbb      	adds	r3, r7, #6
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	0018      	movs	r0, r3
 80068d6:	f002 fa25 	bl	8008d24 <enable_sen5x>
 80068da:	1e03      	subs	r3, r0, #0
 80068dc:	d019      	beq.n	8006912 <Enter_Stop_Mode+0xc2>
    showTime();
 80068de:	f7ff fcdf 	bl	80062a0 <showTime>
    set_light_on_state();
 80068e2:	f002 fe43 	bl	800956c <set_light_on_state>
    if (!userToggle) {
 80068e6:	4b1c      	ldr	r3, [pc, #112]	@ (8006958 <Enter_Stop_Mode+0x108>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2201      	movs	r2, #1
 80068ec:	4053      	eors	r3, r2
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00e      	beq.n	8006912 <Enter_Stop_Mode+0xc2>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 30 seconds
 80068f4:	201e      	movs	r0, #30
 80068f6:	f7ff ff5d 	bl	80067b4 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 80068fa:	4a13      	ldr	r2, [pc, #76]	@ (8006948 <Enter_Stop_Mode+0xf8>)
 80068fc:	4913      	ldr	r1, [pc, #76]	@ (800694c <Enter_Stop_Mode+0xfc>)
 80068fe:	231e      	movs	r3, #30
 8006900:	2003      	movs	r0, #3
 8006902:	f007 f827 	bl	800d954 <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006906:	2101      	movs	r1, #1
 8006908:	2001      	movs	r0, #1
 800690a:	f00d fc59 	bl	80141c0 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 800690e:	f001 f9fd 	bl	8007d0c <SystemClock_Config>
    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006912:	f007 fbf9 	bl	800e108 <HAL_ResumeTick>
  showTime();
 8006916:	f7ff fcc3 	bl	80062a0 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 800691a:	f001 ff97 	bl	800884c <ResetDBACalculator>
  setMeasStamp(300);
 800691e:	2396      	movs	r3, #150	@ 0x96
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	0018      	movs	r0, r3
 8006924:	f001 fb8c 	bl	8008040 <setMeasStamp>
  ESPTransmitDone = false;
 8006928:	4b0c      	ldr	r3, [pc, #48]	@ (800695c <Enter_Stop_Mode+0x10c>)
 800692a:	2200      	movs	r2, #0
 800692c:	701a      	strb	r2, [r3, #0]
  setESPTimeStamp(4500);
 800692e:	4b0c      	ldr	r3, [pc, #48]	@ (8006960 <Enter_Stop_Mode+0x110>)
 8006930:	0018      	movs	r0, r3
 8006932:	f7fc ff3d 	bl	80037b0 <setESPTimeStamp>
}
 8006936:	46c0      	nop			@ (mov r8, r8)
 8006938:	46bd      	mov	sp, r7
 800693a:	b002      	add	sp, #8
 800693c:	bd80      	pop	{r7, pc}
 800693e:	46c0      	nop			@ (mov r8, r8)
 8006940:	08023028 	.word	0x08023028
 8006944:	08023040 	.word	0x08023040
 8006948:	08023044 	.word	0x08023044
 800694c:	08022f38 	.word	0x08022f38
 8006950:	20000ce4 	.word	0x20000ce4
 8006954:	08023068 	.word	0x08023068
 8006958:	2000218e 	.word	0x2000218e
 800695c:	2000054f 	.word	0x2000054f
 8006960:	00001194 	.word	0x00001194

08006964 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 800696c:	4b03      	ldr	r3, [pc, #12]	@ (800697c <InitClock+0x18>)
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	601a      	str	r2, [r3, #0]
}
 8006972:	46c0      	nop			@ (mov r8, r8)
 8006974:	46bd      	mov	sp, r7
 8006976:	b002      	add	sp, #8
 8006978:	bd80      	pop	{r7, pc}
 800697a:	46c0      	nop			@ (mov r8, r8)
 800697c:	20000cdc 	.word	0x20000cdc

08006980 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	78db      	ldrb	r3, [r3, #3]
 800698e:	001a      	movs	r2, r3
 8006990:	0013      	movs	r3, r2
 8006992:	025b      	lsls	r3, r3, #9
 8006994:	189b      	adds	r3, r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	189b      	adds	r3, r3, r2
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	189b      	adds	r3, r3, r2
 800699e:	011a      	lsls	r2, r3, #4
 80069a0:	1ad2      	subs	r2, r2, r3
 80069a2:	01d3      	lsls	r3, r2, #7
 80069a4:	001a      	movs	r2, r3
 80069a6:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	e028      	b.n	8006a00 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4a53      	ldr	r2, [pc, #332]	@ (8006b00 <makeTime+0x180>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	db21      	blt.n	80069fa <makeTime+0x7a>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4a52      	ldr	r2, [pc, #328]	@ (8006b04 <makeTime+0x184>)
 80069ba:	4694      	mov	ip, r2
 80069bc:	4463      	add	r3, ip
 80069be:	001a      	movs	r2, r3
 80069c0:	2303      	movs	r3, #3
 80069c2:	4013      	ands	r3, r2
 80069c4:	d119      	bne.n	80069fa <makeTime+0x7a>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4a4e      	ldr	r2, [pc, #312]	@ (8006b04 <makeTime+0x184>)
 80069ca:	4694      	mov	ip, r2
 80069cc:	4463      	add	r3, ip
 80069ce:	2164      	movs	r1, #100	@ 0x64
 80069d0:	0018      	movs	r0, r3
 80069d2:	f7f9 fd57 	bl	8000484 <__aeabi_idivmod>
 80069d6:	1e0b      	subs	r3, r1, #0
 80069d8:	d10a      	bne.n	80069f0 <makeTime+0x70>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4a49      	ldr	r2, [pc, #292]	@ (8006b04 <makeTime+0x184>)
 80069de:	4694      	mov	ip, r2
 80069e0:	4463      	add	r3, ip
 80069e2:	22c8      	movs	r2, #200	@ 0xc8
 80069e4:	0051      	lsls	r1, r2, #1
 80069e6:	0018      	movs	r0, r3
 80069e8:	f7f9 fd4c 	bl	8000484 <__aeabi_idivmod>
 80069ec:	1e0b      	subs	r3, r1, #0
 80069ee:	d104      	bne.n	80069fa <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4a45      	ldr	r2, [pc, #276]	@ (8006b08 <makeTime+0x188>)
 80069f4:	4694      	mov	ip, r2
 80069f6:	4463      	add	r3, ip
 80069f8:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3301      	adds	r3, #1
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	78db      	ldrb	r3, [r3, #3]
 8006a04:	001a      	movs	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	dbd0      	blt.n	80069ae <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e03c      	b.n	8006a8c <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d125      	bne.n	8006a64 <makeTime+0xe4>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	78db      	ldrb	r3, [r3, #3]
 8006a1c:	4a39      	ldr	r2, [pc, #228]	@ (8006b04 <makeTime+0x184>)
 8006a1e:	4694      	mov	ip, r2
 8006a20:	4463      	add	r3, ip
 8006a22:	001a      	movs	r2, r3
 8006a24:	2303      	movs	r3, #3
 8006a26:	4013      	ands	r3, r2
 8006a28:	d11c      	bne.n	8006a64 <makeTime+0xe4>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	78db      	ldrb	r3, [r3, #3]
 8006a2e:	4a35      	ldr	r2, [pc, #212]	@ (8006b04 <makeTime+0x184>)
 8006a30:	4694      	mov	ip, r2
 8006a32:	4463      	add	r3, ip
 8006a34:	2164      	movs	r1, #100	@ 0x64
 8006a36:	0018      	movs	r0, r3
 8006a38:	f7f9 fd24 	bl	8000484 <__aeabi_idivmod>
 8006a3c:	1e0b      	subs	r3, r1, #0
 8006a3e:	d10b      	bne.n	8006a58 <makeTime+0xd8>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	78db      	ldrb	r3, [r3, #3]
 8006a44:	4a2f      	ldr	r2, [pc, #188]	@ (8006b04 <makeTime+0x184>)
 8006a46:	4694      	mov	ip, r2
 8006a48:	4463      	add	r3, ip
 8006a4a:	22c8      	movs	r2, #200	@ 0xc8
 8006a4c:	0051      	lsls	r1, r2, #1
 8006a4e:	0018      	movs	r0, r3
 8006a50:	f7f9 fd18 	bl	8000484 <__aeabi_idivmod>
 8006a54:	1e0b      	subs	r3, r1, #0
 8006a56:	d105      	bne.n	8006a64 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4a2c      	ldr	r2, [pc, #176]	@ (8006b0c <makeTime+0x18c>)
 8006a5c:	4694      	mov	ip, r2
 8006a5e:	4463      	add	r3, ip
 8006a60:	60bb      	str	r3, [r7, #8]
 8006a62:	e010      	b.n	8006a86 <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3b01      	subs	r3, #1
 8006a68:	4a29      	ldr	r2, [pc, #164]	@ (8006b10 <makeTime+0x190>)
 8006a6a:	5cd3      	ldrb	r3, [r2, r3]
 8006a6c:	001a      	movs	r2, r3
 8006a6e:	0013      	movs	r3, r2
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	189b      	adds	r3, r3, r2
 8006a74:	011a      	lsls	r2, r3, #4
 8006a76:	1ad2      	subs	r2, r2, r3
 8006a78:	0113      	lsls	r3, r2, #4
 8006a7a:	1a9b      	subs	r3, r3, r2
 8006a7c:	01db      	lsls	r3, r3, #7
 8006a7e:	001a      	movs	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	189b      	adds	r3, r3, r2
 8006a84:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	785b      	ldrb	r3, [r3, #1]
 8006a90:	001a      	movs	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4293      	cmp	r3, r2
 8006a96:	dbbc      	blt.n	8006a12 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	789b      	ldrb	r3, [r3, #2]
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	001a      	movs	r2, r3
 8006aa0:	0013      	movs	r3, r2
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	189b      	adds	r3, r3, r2
 8006aa6:	011a      	lsls	r2, r3, #4
 8006aa8:	1ad2      	subs	r2, r2, r3
 8006aaa:	0113      	lsls	r3, r2, #4
 8006aac:	1a9b      	subs	r3, r3, r2
 8006aae:	01db      	lsls	r3, r3, #7
 8006ab0:	001a      	movs	r2, r3
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	189b      	adds	r3, r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	001a      	movs	r2, r3
 8006abe:	0013      	movs	r3, r2
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	1a9b      	subs	r3, r3, r2
 8006ac4:	011a      	lsls	r2, r3, #4
 8006ac6:	1ad2      	subs	r2, r2, r3
 8006ac8:	0113      	lsls	r3, r2, #4
 8006aca:	001a      	movs	r2, r3
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	189b      	adds	r3, r3, r2
 8006ad0:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	785b      	ldrb	r3, [r3, #1]
 8006ad6:	001a      	movs	r2, r3
 8006ad8:	0013      	movs	r3, r2
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	1a9b      	subs	r3, r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	001a      	movs	r2, r3
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	189b      	adds	r3, r3, r2
 8006ae6:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	789b      	ldrb	r3, [r3, #2]
 8006aec:	001a      	movs	r2, r3
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	189b      	adds	r3, r3, r2
 8006af2:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006af4:	68bb      	ldr	r3, [r7, #8]
}
 8006af6:	0018      	movs	r0, r3
 8006af8:	46bd      	mov	sp, r7
 8006afa:	b004      	add	sp, #16
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	46c0      	nop			@ (mov r8, r8)
 8006b00:	fffff84f 	.word	0xfffff84f
 8006b04:	000007b2 	.word	0x000007b2
 8006b08:	00015180 	.word	0x00015180
 8006b0c:	00263b80 	.word	0x00263b80
 8006b10:	08024114 	.word	0x08024114

08006b14 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006b14:	b590      	push	{r4, r7, lr}
 8006b16:	b089      	sub	sp, #36	@ 0x24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	213c      	movs	r1, #60	@ 0x3c
 8006b28:	0018      	movs	r0, r3
 8006b2a:	f7f9 fbc1 	bl	80002b0 <__aeabi_uidivmod>
 8006b2e:	000b      	movs	r3, r1
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	213c      	movs	r1, #60	@ 0x3c
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	f7f9 fb32 	bl	80001a4 <__udivsi3>
 8006b40:	0003      	movs	r3, r0
 8006b42:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	213c      	movs	r1, #60	@ 0x3c
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f7f9 fbb1 	bl	80002b0 <__aeabi_uidivmod>
 8006b4e:	000b      	movs	r3, r1
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	213c      	movs	r1, #60	@ 0x3c
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f7f9 fb22 	bl	80001a4 <__udivsi3>
 8006b60:	0003      	movs	r3, r0
 8006b62:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	2118      	movs	r1, #24
 8006b68:	0018      	movs	r0, r3
 8006b6a:	f7f9 fba1 	bl	80002b0 <__aeabi_uidivmod>
 8006b6e:	000b      	movs	r3, r1
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	2118      	movs	r1, #24
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f7f9 fb12 	bl	80001a4 <__udivsi3>
 8006b80:	0003      	movs	r3, r0
 8006b82:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	3b01      	subs	r3, #1
 8006b88:	2107      	movs	r1, #7
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	f7f9 fb90 	bl	80002b0 <__aeabi_uidivmod>
 8006b90:	000b      	movs	r3, r1
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	3301      	adds	r3, #1
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006b9c:	231f      	movs	r3, #31
 8006b9e:	18fb      	adds	r3, r7, r3
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006ba8:	e005      	b.n	8006bb6 <breakPosixTime+0xa2>
    year++;
 8006baa:	211f      	movs	r1, #31
 8006bac:	187b      	adds	r3, r7, r1
 8006bae:	781a      	ldrb	r2, [r3, #0]
 8006bb0:	187b      	adds	r3, r7, r1
 8006bb2:	3201      	adds	r2, #1
 8006bb4:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006bb6:	241f      	movs	r4, #31
 8006bb8:	193b      	adds	r3, r7, r4
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	4a64      	ldr	r2, [pc, #400]	@ (8006d50 <breakPosixTime+0x23c>)
 8006bbe:	4694      	mov	ip, r2
 8006bc0:	4463      	add	r3, ip
 8006bc2:	001a      	movs	r2, r3
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	d119      	bne.n	8006bfe <breakPosixTime+0xea>
 8006bca:	193b      	adds	r3, r7, r4
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	4a60      	ldr	r2, [pc, #384]	@ (8006d50 <breakPosixTime+0x23c>)
 8006bd0:	4694      	mov	ip, r2
 8006bd2:	4463      	add	r3, ip
 8006bd4:	2164      	movs	r1, #100	@ 0x64
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f7f9 fc54 	bl	8000484 <__aeabi_idivmod>
 8006bdc:	1e0b      	subs	r3, r1, #0
 8006bde:	d10b      	bne.n	8006bf8 <breakPosixTime+0xe4>
 8006be0:	193b      	adds	r3, r7, r4
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	4a5a      	ldr	r2, [pc, #360]	@ (8006d50 <breakPosixTime+0x23c>)
 8006be6:	4694      	mov	ip, r2
 8006be8:	4463      	add	r3, ip
 8006bea:	22c8      	movs	r2, #200	@ 0xc8
 8006bec:	0051      	lsls	r1, r2, #1
 8006bee:	0018      	movs	r0, r3
 8006bf0:	f7f9 fc48 	bl	8000484 <__aeabi_idivmod>
 8006bf4:	1e0b      	subs	r3, r1, #0
 8006bf6:	d102      	bne.n	8006bfe <breakPosixTime+0xea>
 8006bf8:	23b7      	movs	r3, #183	@ 0xb7
 8006bfa:	005b      	lsls	r3, r3, #1
 8006bfc:	e001      	b.n	8006c02 <breakPosixTime+0xee>
 8006bfe:	236e      	movs	r3, #110	@ 0x6e
 8006c00:	33ff      	adds	r3, #255	@ 0xff
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	18d3      	adds	r3, r2, r3
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d9cc      	bls.n	8006baa <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	241f      	movs	r4, #31
 8006c14:	193a      	adds	r2, r7, r4
 8006c16:	7812      	ldrb	r2, [r2, #0]
 8006c18:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006c1a:	193b      	adds	r3, r7, r4
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	4a4c      	ldr	r2, [pc, #304]	@ (8006d50 <breakPosixTime+0x23c>)
 8006c20:	4694      	mov	ip, r2
 8006c22:	4463      	add	r3, ip
 8006c24:	001a      	movs	r2, r3
 8006c26:	2303      	movs	r3, #3
 8006c28:	4013      	ands	r3, r2
 8006c2a:	d119      	bne.n	8006c60 <breakPosixTime+0x14c>
 8006c2c:	193b      	adds	r3, r7, r4
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	4a47      	ldr	r2, [pc, #284]	@ (8006d50 <breakPosixTime+0x23c>)
 8006c32:	4694      	mov	ip, r2
 8006c34:	4463      	add	r3, ip
 8006c36:	2164      	movs	r1, #100	@ 0x64
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f7f9 fc23 	bl	8000484 <__aeabi_idivmod>
 8006c3e:	1e0b      	subs	r3, r1, #0
 8006c40:	d10b      	bne.n	8006c5a <breakPosixTime+0x146>
 8006c42:	193b      	adds	r3, r7, r4
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	4a42      	ldr	r2, [pc, #264]	@ (8006d50 <breakPosixTime+0x23c>)
 8006c48:	4694      	mov	ip, r2
 8006c4a:	4463      	add	r3, ip
 8006c4c:	22c8      	movs	r2, #200	@ 0xc8
 8006c4e:	0051      	lsls	r1, r2, #1
 8006c50:	0018      	movs	r0, r3
 8006c52:	f7f9 fc17 	bl	8000484 <__aeabi_idivmod>
 8006c56:	1e0b      	subs	r3, r1, #0
 8006c58:	d102      	bne.n	8006c60 <breakPosixTime+0x14c>
 8006c5a:	23b7      	movs	r3, #183	@ 0xb7
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	e001      	b.n	8006c64 <breakPosixTime+0x150>
 8006c60:	236e      	movs	r3, #110	@ 0x6e
 8006c62:	33ff      	adds	r3, #255	@ 0xff
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	61bb      	str	r3, [r7, #24]

  days=0;
 8006c72:	2300      	movs	r3, #0
 8006c74:	617b      	str	r3, [r7, #20]
  month=0;
 8006c76:	211e      	movs	r1, #30
 8006c78:	187b      	adds	r3, r7, r1
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8006c7e:	231d      	movs	r3, #29
 8006c80:	18fb      	adds	r3, r7, r3
 8006c82:	2200      	movs	r2, #0
 8006c84:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8006c86:	187b      	adds	r3, r7, r1
 8006c88:	2200      	movs	r2, #0
 8006c8a:	701a      	strb	r2, [r3, #0]
 8006c8c:	e048      	b.n	8006d20 <breakPosixTime+0x20c>
    if (month==1) { // february
 8006c8e:	231e      	movs	r3, #30
 8006c90:	18fb      	adds	r3, r7, r3
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d12a      	bne.n	8006cee <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8006c98:	241f      	movs	r4, #31
 8006c9a:	193b      	adds	r3, r7, r4
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	4a2c      	ldr	r2, [pc, #176]	@ (8006d50 <breakPosixTime+0x23c>)
 8006ca0:	4694      	mov	ip, r2
 8006ca2:	4463      	add	r3, ip
 8006ca4:	001a      	movs	r2, r3
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	4013      	ands	r3, r2
 8006caa:	d11b      	bne.n	8006ce4 <breakPosixTime+0x1d0>
 8006cac:	193b      	adds	r3, r7, r4
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	4a27      	ldr	r2, [pc, #156]	@ (8006d50 <breakPosixTime+0x23c>)
 8006cb2:	4694      	mov	ip, r2
 8006cb4:	4463      	add	r3, ip
 8006cb6:	2164      	movs	r1, #100	@ 0x64
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f7f9 fbe3 	bl	8000484 <__aeabi_idivmod>
 8006cbe:	1e0b      	subs	r3, r1, #0
 8006cc0:	d10b      	bne.n	8006cda <breakPosixTime+0x1c6>
 8006cc2:	193b      	adds	r3, r7, r4
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	4a22      	ldr	r2, [pc, #136]	@ (8006d50 <breakPosixTime+0x23c>)
 8006cc8:	4694      	mov	ip, r2
 8006cca:	4463      	add	r3, ip
 8006ccc:	22c8      	movs	r2, #200	@ 0xc8
 8006cce:	0051      	lsls	r1, r2, #1
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	f7f9 fbd7 	bl	8000484 <__aeabi_idivmod>
 8006cd6:	1e0b      	subs	r3, r1, #0
 8006cd8:	d104      	bne.n	8006ce4 <breakPosixTime+0x1d0>
        monthLength=29;
 8006cda:	231d      	movs	r3, #29
 8006cdc:	18fb      	adds	r3, r7, r3
 8006cde:	221d      	movs	r2, #29
 8006ce0:	701a      	strb	r2, [r3, #0]
 8006ce2:	e00c      	b.n	8006cfe <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8006ce4:	231d      	movs	r3, #29
 8006ce6:	18fb      	adds	r3, r7, r3
 8006ce8:	221c      	movs	r2, #28
 8006cea:	701a      	strb	r2, [r3, #0]
 8006cec:	e007      	b.n	8006cfe <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8006cee:	231e      	movs	r3, #30
 8006cf0:	18fb      	adds	r3, r7, r3
 8006cf2:	781a      	ldrb	r2, [r3, #0]
 8006cf4:	231d      	movs	r3, #29
 8006cf6:	18fb      	adds	r3, r7, r3
 8006cf8:	4916      	ldr	r1, [pc, #88]	@ (8006d54 <breakPosixTime+0x240>)
 8006cfa:	5c8a      	ldrb	r2, [r1, r2]
 8006cfc:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8006cfe:	211d      	movs	r1, #29
 8006d00:	187b      	adds	r3, r7, r1
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d310      	bcc.n	8006d2c <breakPosixTime+0x218>
      time -= monthLength;
 8006d0a:	187b      	adds	r3, r7, r1
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 8006d14:	211e      	movs	r1, #30
 8006d16:	187b      	adds	r3, r7, r1
 8006d18:	781a      	ldrb	r2, [r3, #0]
 8006d1a:	187b      	adds	r3, r7, r1
 8006d1c:	3201      	adds	r2, #1
 8006d1e:	701a      	strb	r2, [r3, #0]
 8006d20:	231e      	movs	r3, #30
 8006d22:	18fb      	adds	r3, r7, r3
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	2b0b      	cmp	r3, #11
 8006d28:	d9b1      	bls.n	8006c8e <breakPosixTime+0x17a>
 8006d2a:	e000      	b.n	8006d2e <breakPosixTime+0x21a>
    } else {
        break;
 8006d2c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8006d2e:	231e      	movs	r3, #30
 8006d30:	18fb      	adds	r3, r7, r3
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	3301      	adds	r3, #1
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	3301      	adds	r3, #1
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	709a      	strb	r2, [r3, #2]
//  printf("breakPosixTime: daynr: %d, %s %02d-%02d-%d %02d:%02d:%02d\r\n", currentDate->WeekDay, dayNames[currentDate->WeekDay - 1],
//      currentDate->Date, currentDate->Month, currentDate->Year, currentTime->Hours, currentTime->Minutes, currentTime->Seconds);
}
 8006d48:	46c0      	nop			@ (mov r8, r8)
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	b009      	add	sp, #36	@ 0x24
 8006d4e:	bd90      	pop	{r4, r7, pc}
 8006d50:	000007b2 	.word	0x000007b2
 8006d54:	08024114 	.word	0x08024114

08006d58 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006d5e:	003b      	movs	r3, r7
 8006d60:	0018      	movs	r0, r3
 8006d62:	2308      	movs	r3, #8
 8006d64:	001a      	movs	r2, r3
 8006d66:	2100      	movs	r1, #0
 8006d68:	f018 fb96 	bl	801f498 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006d6c:	4b30      	ldr	r3, [pc, #192]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006d6e:	4a31      	ldr	r2, [pc, #196]	@ (8006e34 <MX_ADC_Init+0xdc>)
 8006d70:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8006d72:	4b2f      	ldr	r3, [pc, #188]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8006d78:	4b2d      	ldr	r3, [pc, #180]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006d7a:	22c0      	movs	r2, #192	@ 0xc0
 8006d7c:	0612      	lsls	r2, r2, #24
 8006d7e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006d80:	4b2b      	ldr	r3, [pc, #172]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006d86:	4b2a      	ldr	r3, [pc, #168]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006d8c:	4b28      	ldr	r3, [pc, #160]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006d8e:	2201      	movs	r2, #1
 8006d90:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006d92:	4b27      	ldr	r3, [pc, #156]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8006d98:	4b25      	ldr	r3, [pc, #148]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8006da0:	4b23      	ldr	r3, [pc, #140]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006da2:	2221      	movs	r2, #33	@ 0x21
 8006da4:	2101      	movs	r1, #1
 8006da6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006da8:	4b21      	ldr	r3, [pc, #132]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006dae:	4b20      	ldr	r3, [pc, #128]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006db0:	22c2      	movs	r2, #194	@ 0xc2
 8006db2:	32ff      	adds	r2, #255	@ 0xff
 8006db4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8006db6:	4b1e      	ldr	r3, [pc, #120]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006db8:	222c      	movs	r2, #44	@ 0x2c
 8006dba:	2100      	movs	r1, #0
 8006dbc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006dc0:	2204      	movs	r2, #4
 8006dc2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006dca:	4b19      	ldr	r3, [pc, #100]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8006dd0:	4b17      	ldr	r3, [pc, #92]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8006dd6:	4b16      	ldr	r3, [pc, #88]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8006ddc:	4b14      	ldr	r3, [pc, #80]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006dde:	0018      	movs	r0, r3
 8006de0:	f007 f9be 	bl	800e160 <HAL_ADC_Init>
 8006de4:	1e03      	subs	r3, r0, #0
 8006de6:	d001      	beq.n	8006dec <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8006de8:	f001 f8da 	bl	8007fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006dec:	003b      	movs	r3, r7
 8006dee:	4a12      	ldr	r2, [pc, #72]	@ (8006e38 <MX_ADC_Init+0xe0>)
 8006df0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006df2:	003b      	movs	r3, r7
 8006df4:	2280      	movs	r2, #128	@ 0x80
 8006df6:	0152      	lsls	r2, r2, #5
 8006df8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006dfa:	003a      	movs	r2, r7
 8006dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006dfe:	0011      	movs	r1, r2
 8006e00:	0018      	movs	r0, r3
 8006e02:	f007 fc1d 	bl	800e640 <HAL_ADC_ConfigChannel>
 8006e06:	1e03      	subs	r3, r0, #0
 8006e08:	d001      	beq.n	8006e0e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8006e0a:	f001 f8c9 	bl	8007fa0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006e0e:	003b      	movs	r3, r7
 8006e10:	4a0a      	ldr	r2, [pc, #40]	@ (8006e3c <MX_ADC_Init+0xe4>)
 8006e12:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006e14:	003a      	movs	r2, r7
 8006e16:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <MX_ADC_Init+0xd8>)
 8006e18:	0011      	movs	r1, r2
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	f007 fc10 	bl	800e640 <HAL_ADC_ConfigChannel>
 8006e20:	1e03      	subs	r3, r0, #0
 8006e22:	d001      	beq.n	8006e28 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8006e24:	f001 f8bc 	bl	8007fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8006e28:	46c0      	nop			@ (mov r8, r8)
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	b002      	add	sp, #8
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	20000cfc 	.word	0x20000cfc
 8006e34:	40012400 	.word	0x40012400
 8006e38:	38004000 	.word	0x38004000
 8006e3c:	3c008000 	.word	0x3c008000

08006e40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006e40:	b590      	push	{r4, r7, lr}
 8006e42:	b089      	sub	sp, #36	@ 0x24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e48:	240c      	movs	r4, #12
 8006e4a:	193b      	adds	r3, r7, r4
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	2314      	movs	r3, #20
 8006e50:	001a      	movs	r2, r3
 8006e52:	2100      	movs	r1, #0
 8006e54:	f018 fb20 	bl	801f498 <memset>
  if(adcHandle->Instance==ADC1)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a14      	ldr	r2, [pc, #80]	@ (8006eb0 <HAL_ADC_MspInit+0x70>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d121      	bne.n	8006ea6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006e62:	4b14      	ldr	r3, [pc, #80]	@ (8006eb4 <HAL_ADC_MspInit+0x74>)
 8006e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e66:	4b13      	ldr	r3, [pc, #76]	@ (8006eb4 <HAL_ADC_MspInit+0x74>)
 8006e68:	2180      	movs	r1, #128	@ 0x80
 8006e6a:	0089      	lsls	r1, r1, #2
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e70:	4b10      	ldr	r3, [pc, #64]	@ (8006eb4 <HAL_ADC_MspInit+0x74>)
 8006e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e74:	4b0f      	ldr	r3, [pc, #60]	@ (8006eb4 <HAL_ADC_MspInit+0x74>)
 8006e76:	2104      	movs	r1, #4
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb4 <HAL_ADC_MspInit+0x74>)
 8006e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e80:	2204      	movs	r2, #4
 8006e82:	4013      	ands	r3, r2
 8006e84:	60bb      	str	r3, [r7, #8]
 8006e86:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8006e88:	193b      	adds	r3, r7, r4
 8006e8a:	2230      	movs	r2, #48	@ 0x30
 8006e8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e8e:	193b      	adds	r3, r7, r4
 8006e90:	2203      	movs	r2, #3
 8006e92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e94:	193b      	adds	r3, r7, r4
 8006e96:	2200      	movs	r2, #0
 8006e98:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e9a:	193b      	adds	r3, r7, r4
 8006e9c:	4a06      	ldr	r2, [pc, #24]	@ (8006eb8 <HAL_ADC_MspInit+0x78>)
 8006e9e:	0019      	movs	r1, r3
 8006ea0:	0010      	movs	r0, r2
 8006ea2:	f008 f9d5 	bl	800f250 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006ea6:	46c0      	nop			@ (mov r8, r8)
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	b009      	add	sp, #36	@ 0x24
 8006eac:	bd90      	pop	{r4, r7, pc}
 8006eae:	46c0      	nop			@ (mov r8, r8)
 8006eb0:	40012400 	.word	0x40012400
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	50000800 	.word	0x50000800

08006ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006ec2:	4b10      	ldr	r3, [pc, #64]	@ (8006f04 <MX_DMA_Init+0x48>)
 8006ec4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8006f04 <MX_DMA_Init+0x48>)
 8006ec8:	2101      	movs	r1, #1
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ece:	4b0d      	ldr	r3, [pc, #52]	@ (8006f04 <MX_DMA_Init+0x48>)
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	607b      	str	r3, [r7, #4]
 8006ed8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8006eda:	2200      	movs	r2, #0
 8006edc:	2100      	movs	r1, #0
 8006ede:	200a      	movs	r0, #10
 8006ee0:	f007 fd68 	bl	800e9b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8006ee4:	200a      	movs	r0, #10
 8006ee6:	f007 fd7a 	bl	800e9de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8006eea:	2200      	movs	r2, #0
 8006eec:	2103      	movs	r1, #3
 8006eee:	200b      	movs	r0, #11
 8006ef0:	f007 fd60 	bl	800e9b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8006ef4:	200b      	movs	r0, #11
 8006ef6:	f007 fd72 	bl	800e9de <HAL_NVIC_EnableIRQ>

}
 8006efa:	46c0      	nop			@ (mov r8, r8)
 8006efc:	46bd      	mov	sp, r7
 8006efe:	b002      	add	sp, #8
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	46c0      	nop			@ (mov r8, r8)
 8006f04:	40021000 	.word	0x40021000

08006f08 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f18:	d901      	bls.n	8006f1e <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8006f1a:	237f      	movs	r3, #127	@ 0x7f
 8006f1c:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8006f1e:	2017      	movs	r0, #23
 8006f20:	183b      	adds	r3, r7, r0
 8006f22:	490d      	ldr	r1, [pc, #52]	@ (8006f58 <accessLUT10log10+0x50>)
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	188a      	adds	r2, r1, r2
 8006f28:	7812      	ldrb	r2, [r2, #0]
 8006f2a:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8006f2c:	0001      	movs	r1, r0
 8006f2e:	187b      	adds	r3, r7, r1
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2206      	movs	r2, #6
 8006f34:	4113      	asrs	r3, r2
 8006f36:	001a      	movs	r2, r3
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8006f3c:	187b      	adds	r3, r7, r1
 8006f3e:	781a      	ldrb	r2, [r3, #0]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2106      	movs	r1, #6
 8006f46:	408b      	lsls	r3, r1
 8006f48:	1ad2      	subs	r2, r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	601a      	str	r2, [r3, #0]
}
 8006f4e:	46c0      	nop			@ (mov r8, r8)
 8006f50:	46bd      	mov	sp, r7
 8006f52:	b006      	add	sp, #24
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	46c0      	nop			@ (mov r8, r8)
 8006f58:	08024120 	.word	0x08024120

08006f5c <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8006f5c:	b5b0      	push	{r4, r5, r7, lr}
 8006f5e:	b090      	sub	sp, #64	@ 0x40
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6138      	str	r0, [r7, #16]
 8006f64:	6179      	str	r1, [r7, #20]
 8006f66:	60fa      	str	r2, [r7, #12]
 8006f68:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8006f6a:	2308      	movs	r3, #8
 8006f6c:	001a      	movs	r2, r3
 8006f6e:	3a20      	subs	r2, #32
 8006f70:	2a00      	cmp	r2, #0
 8006f72:	db03      	blt.n	8006f7c <efficient10log10+0x20>
 8006f74:	2101      	movs	r1, #1
 8006f76:	4091      	lsls	r1, r2
 8006f78:	000d      	movs	r5, r1
 8006f7a:	e008      	b.n	8006f8e <efficient10log10+0x32>
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	1ad2      	subs	r2, r2, r3
 8006f80:	2101      	movs	r1, #1
 8006f82:	40d1      	lsrs	r1, r2
 8006f84:	000a      	movs	r2, r1
 8006f86:	2100      	movs	r1, #0
 8006f88:	4099      	lsls	r1, r3
 8006f8a:	000d      	movs	r5, r1
 8006f8c:	4315      	orrs	r5, r2
 8006f8e:	2201      	movs	r2, #1
 8006f90:	409a      	lsls	r2, r3
 8006f92:	0014      	movs	r4, r2
 8006f94:	2201      	movs	r2, #1
 8006f96:	4252      	negs	r2, r2
 8006f98:	17d3      	asrs	r3, r2, #31
 8006f9a:	1912      	adds	r2, r2, r4
 8006f9c:	416b      	adcs	r3, r5
 8006f9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fa0:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8006fa2:	2336      	movs	r3, #54	@ 0x36
 8006fa4:	2208      	movs	r2, #8
 8006fa6:	189b      	adds	r3, r3, r2
 8006fa8:	19db      	adds	r3, r3, r7
 8006faa:	2200      	movs	r2, #0
 8006fac:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8006fae:	e017      	b.n	8006fe0 <efficient10log10+0x84>
    {
        P = P >> 1;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	07db      	lsls	r3, r3, #31
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	0852      	lsrs	r2, r2, #1
 8006fb8:	603a      	str	r2, [r7, #0]
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	431a      	orrs	r2, r3
 8006fbe:	603a      	str	r2, [r7, #0]
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	085b      	lsrs	r3, r3, #1
 8006fc4:	607b      	str	r3, [r7, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	687c      	ldr	r4, [r7, #4]
 8006fca:	613b      	str	r3, [r7, #16]
 8006fcc:	617c      	str	r4, [r7, #20]
        bShift++;
 8006fce:	2136      	movs	r1, #54	@ 0x36
 8006fd0:	2008      	movs	r0, #8
 8006fd2:	180b      	adds	r3, r1, r0
 8006fd4:	19db      	adds	r3, r3, r7
 8006fd6:	881a      	ldrh	r2, [r3, #0]
 8006fd8:	180b      	adds	r3, r1, r0
 8006fda:	19db      	adds	r3, r3, r7
 8006fdc:	3201      	adds	r2, #1
 8006fde:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d8e3      	bhi.n	8006fb0 <efficient10log10+0x54>
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d103      	bne.n	8006ff8 <efficient10log10+0x9c>
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d8db      	bhi.n	8006fb0 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	2308      	movs	r3, #8
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	2101      	movs	r1, #1
 8007000:	4099      	lsls	r1, r3
 8007002:	000b      	movs	r3, r1
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8007010:	231c      	movs	r3, #28
 8007012:	2408      	movs	r4, #8
 8007014:	191b      	adds	r3, r3, r4
 8007016:	19da      	adds	r2, r3, r7
 8007018:	2320      	movs	r3, #32
 800701a:	191b      	adds	r3, r3, r4
 800701c:	19d9      	adds	r1, r3, r7
 800701e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007020:	0018      	movs	r0, r3
 8007022:	f7ff ff71 	bl	8006f08 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8007026:	2215      	movs	r2, #21
 8007028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702a:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800702c:	2036      	movs	r0, #54	@ 0x36
 800702e:	1902      	adds	r2, r0, r4
 8007030:	19d2      	adds	r2, r2, r7
 8007032:	8812      	ldrh	r2, [r2, #0]
 8007034:	2103      	movs	r1, #3
 8007036:	434a      	muls	r2, r1
 8007038:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800703a:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800703c:	0021      	movs	r1, r4
 800703e:	1843      	adds	r3, r0, r1
 8007040:	19db      	adds	r3, r3, r7
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	2201      	movs	r2, #1
 8007046:	4353      	muls	r3, r2
 8007048:	2203      	movs	r2, #3
 800704a:	4113      	asrs	r3, r2
 800704c:	001a      	movs	r2, r3
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8007052:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8007054:	2314      	movs	r3, #20
 8007056:	185b      	adds	r3, r3, r1
 8007058:	19da      	adds	r2, r3, r7
 800705a:	2318      	movs	r3, #24
 800705c:	185b      	adds	r3, r3, r1
 800705e:	19db      	adds	r3, r3, r7
 8007060:	0011      	movs	r1, r2
 8007062:	0018      	movs	r0, r3
 8007064:	f000 f80a 	bl	800707c <correctIntFracNumber>
    integerPart[0] = intPart;
 8007068:	6a3a      	ldr	r2, [r7, #32]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800706e:	69fa      	ldr	r2, [r7, #28]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	601a      	str	r2, [r3, #0]
}
 8007074:	46c0      	nop			@ (mov r8, r8)
 8007076:	46bd      	mov	sp, r7
 8007078:	b010      	add	sp, #64	@ 0x40
 800707a:	bdb0      	pop	{r4, r5, r7, pc}

0800707c <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 8007086:	e00a      	b.n	800709e <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3b0a      	subs	r3, #10
 8007098:	001a      	movs	r2, r3
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b09      	cmp	r3, #9
 80070a4:	dcf0      	bgt.n	8007088 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 80070a6:	e00a      	b.n	80070be <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	1e5a      	subs	r2, r3, #1
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	330a      	adds	r3, #10
 80070b8:	001a      	movs	r2, r3
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3309      	adds	r3, #9
 80070c4:	dbf0      	blt.n	80070a8 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	da0f      	bge.n	80070ee <correctIntFracNumber+0x72>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	dd0b      	ble.n	80070ee <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	1c5a      	adds	r2, r3, #1
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3b0a      	subs	r3, #10
 80070e6:	001a      	movs	r2, r3
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 80070ec:	e012      	b.n	8007114 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	dd0e      	ble.n	8007114 <correctIntFracNumber+0x98>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	da0a      	bge.n	8007114 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	1e5a      	subs	r2, r3, #1
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	330a      	adds	r3, #10
 800710e:	001a      	movs	r2, r3
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	601a      	str	r2, [r3, #0]
}
 8007114:	46c0      	nop			@ (mov r8, r8)
 8007116:	46bd      	mov	sp, r7
 8007118:	b002      	add	sp, #8
 800711a:	bd80      	pop	{r7, pc}

0800711c <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 800712a:	4b0c      	ldr	r3, [pc, #48]	@ (800715c <Gadget_Init+0x40>)
 800712c:	6818      	ldr	r0, [r3, #0]
 800712e:	f001 fb35 	bl	800879c <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	68b9      	ldr	r1, [r7, #8]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	0018      	movs	r0, r3
 800713a:	f000 ffa7 	bl	800808c <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	0018      	movs	r0, r3
 8007142:	f7fc fc55 	bl	80039f0 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8007146:	4a06      	ldr	r2, [pc, #24]	@ (8007160 <Gadget_Init+0x44>)
 8007148:	4b06      	ldr	r3, [pc, #24]	@ (8007164 <Gadget_Init+0x48>)
 800714a:	0019      	movs	r1, r3
 800714c:	2003      	movs	r0, #3
 800714e:	f006 fc01 	bl	800d954 <CreateLine>
}
 8007152:	46c0      	nop			@ (mov r8, r8)
 8007154:	46bd      	mov	sp, r7
 8007156:	b004      	add	sp, #16
 8007158:	bd80      	pop	{r7, pc}
 800715a:	46c0      	nop			@ (mov r8, r8)
 800715c:	2000007c 	.word	0x2000007c
 8007160:	08023088 	.word	0x08023088
 8007164:	0802309c 	.word	0x0802309c

08007168 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
  Meas_Test();
 800716c:	f001 f8c6 	bl	80082fc <Meas_Test>
}
 8007170:	46c0      	nop			@ (mov r8, r8)
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <UpkeepGadget>:

bool UpkeepGadget() {
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 800717e:	f001 fa75 	bl	800866c <Meas_Upkeep>
 8007182:	0003      	movs	r3, r0
 8007184:	001a      	movs	r2, r3
 8007186:	4b0f      	ldr	r3, [pc, #60]	@ (80071c4 <UpkeepGadget+0x4c>)
 8007188:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 800718a:	f001 f95b 	bl	8008444 <Mic_Upkeep>
 800718e:	0003      	movs	r3, r0
 8007190:	001a      	movs	r2, r3
 8007192:	4b0d      	ldr	r3, [pc, #52]	@ (80071c8 <UpkeepGadget+0x50>)
 8007194:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 8007196:	4b0b      	ldr	r3, [pc, #44]	@ (80071c4 <UpkeepGadget+0x4c>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b04      	cmp	r3, #4
 800719c:	d103      	bne.n	80071a6 <UpkeepGadget+0x2e>
 800719e:	4b0a      	ldr	r3, [pc, #40]	@ (80071c8 <UpkeepGadget+0x50>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d001      	beq.n	80071aa <UpkeepGadget+0x32>
 80071a6:	2201      	movs	r2, #1
 80071a8:	e000      	b.n	80071ac <UpkeepGadget+0x34>
 80071aa:	2200      	movs	r2, #0
 80071ac:	1dfb      	adds	r3, r7, #7
 80071ae:	701a      	strb	r2, [r3, #0]
 80071b0:	781a      	ldrb	r2, [r3, #0]
 80071b2:	2101      	movs	r1, #1
 80071b4:	400a      	ands	r2, r1
 80071b6:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 80071b8:	1dfb      	adds	r3, r7, #7
 80071ba:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 80071bc:	0018      	movs	r0, r3
 80071be:	46bd      	mov	sp, r7
 80071c0:	b002      	add	sp, #8
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	20000d58 	.word	0x20000d58
 80071c8:	20000d59 	.word	0x20000d59

080071cc <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	0011      	movs	r1, r2
 80071dc:	0018      	movs	r0, r3
 80071de:	f003 ff8b 	bl	800b0f8 <SGP_Init>
}
 80071e2:	46c0      	nop			@ (mov r8, r8)
 80071e4:	46bd      	mov	sp, r7
 80071e6:	b002      	add	sp, #8
 80071e8:	bd80      	pop	{r7, pc}

080071ea <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 80071ea:	b580      	push	{r7, lr}
 80071ec:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 80071ee:	f003 ff9d 	bl	800b12c <SGP_StartMeasurement>
}
 80071f2:	46c0      	nop			@ (mov r8, r8)
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	0018      	movs	r0, r3
 8007204:	f004 f802 	bl	800b20c <SGP_GetMeasurementValues>
 8007208:	0003      	movs	r3, r0
}
 800720a:	0018      	movs	r0, r3
 800720c:	46bd      	mov	sp, r7
 800720e:	b002      	add	sp, #8
 8007210:	bd80      	pop	{r7, pc}

08007212 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8007212:	b580      	push	{r7, lr}
 8007214:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8007216:	f004 f9ff 	bl	800b618 <SGP_DeviceConnected>
 800721a:	0003      	movs	r3, r0
}
 800721c:	0018      	movs	r0, r3
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8007224:	b590      	push	{r4, r7, lr}
 8007226:	b08b      	sub	sp, #44	@ 0x2c
 8007228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800722a:	2414      	movs	r4, #20
 800722c:	193b      	adds	r3, r7, r4
 800722e:	0018      	movs	r0, r3
 8007230:	2314      	movs	r3, #20
 8007232:	001a      	movs	r2, r3
 8007234:	2100      	movs	r1, #0
 8007236:	f018 f92f 	bl	801f498 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800723a:	4b8a      	ldr	r3, [pc, #552]	@ (8007464 <MX_GPIO_Init+0x240>)
 800723c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800723e:	4b89      	ldr	r3, [pc, #548]	@ (8007464 <MX_GPIO_Init+0x240>)
 8007240:	2104      	movs	r1, #4
 8007242:	430a      	orrs	r2, r1
 8007244:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007246:	4b87      	ldr	r3, [pc, #540]	@ (8007464 <MX_GPIO_Init+0x240>)
 8007248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800724a:	2204      	movs	r2, #4
 800724c:	4013      	ands	r3, r2
 800724e:	613b      	str	r3, [r7, #16]
 8007250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007252:	4b84      	ldr	r3, [pc, #528]	@ (8007464 <MX_GPIO_Init+0x240>)
 8007254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007256:	4b83      	ldr	r3, [pc, #524]	@ (8007464 <MX_GPIO_Init+0x240>)
 8007258:	2180      	movs	r1, #128	@ 0x80
 800725a:	430a      	orrs	r2, r1
 800725c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800725e:	4b81      	ldr	r3, [pc, #516]	@ (8007464 <MX_GPIO_Init+0x240>)
 8007260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007262:	2280      	movs	r2, #128	@ 0x80
 8007264:	4013      	ands	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800726a:	4b7e      	ldr	r3, [pc, #504]	@ (8007464 <MX_GPIO_Init+0x240>)
 800726c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800726e:	4b7d      	ldr	r3, [pc, #500]	@ (8007464 <MX_GPIO_Init+0x240>)
 8007270:	2101      	movs	r1, #1
 8007272:	430a      	orrs	r2, r1
 8007274:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007276:	4b7b      	ldr	r3, [pc, #492]	@ (8007464 <MX_GPIO_Init+0x240>)
 8007278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727a:	2201      	movs	r2, #1
 800727c:	4013      	ands	r3, r2
 800727e:	60bb      	str	r3, [r7, #8]
 8007280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007282:	4b78      	ldr	r3, [pc, #480]	@ (8007464 <MX_GPIO_Init+0x240>)
 8007284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007286:	4b77      	ldr	r3, [pc, #476]	@ (8007464 <MX_GPIO_Init+0x240>)
 8007288:	2102      	movs	r1, #2
 800728a:	430a      	orrs	r2, r1
 800728c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800728e:	4b75      	ldr	r3, [pc, #468]	@ (8007464 <MX_GPIO_Init+0x240>)
 8007290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007292:	2202      	movs	r2, #2
 8007294:	4013      	ands	r3, r2
 8007296:	607b      	str	r3, [r7, #4]
 8007298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800729a:	4b72      	ldr	r3, [pc, #456]	@ (8007464 <MX_GPIO_Init+0x240>)
 800729c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800729e:	4b71      	ldr	r3, [pc, #452]	@ (8007464 <MX_GPIO_Init+0x240>)
 80072a0:	2108      	movs	r1, #8
 80072a2:	430a      	orrs	r2, r1
 80072a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80072a6:	4b6f      	ldr	r3, [pc, #444]	@ (8007464 <MX_GPIO_Init+0x240>)
 80072a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072aa:	2208      	movs	r2, #8
 80072ac:	4013      	ands	r3, r2
 80072ae:	603b      	str	r3, [r7, #0]
 80072b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80072b2:	4b6d      	ldr	r3, [pc, #436]	@ (8007468 <MX_GPIO_Init+0x244>)
 80072b4:	2201      	movs	r2, #1
 80072b6:	2101      	movs	r1, #1
 80072b8:	0018      	movs	r0, r3
 80072ba:	f008 f964 	bl	800f586 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80072be:	4b6a      	ldr	r3, [pc, #424]	@ (8007468 <MX_GPIO_Init+0x244>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	2102      	movs	r1, #2
 80072c4:	0018      	movs	r0, r3
 80072c6:	f008 f95e 	bl	800f586 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 80072ca:	4968      	ldr	r1, [pc, #416]	@ (800746c <MX_GPIO_Init+0x248>)
 80072cc:	4b68      	ldr	r3, [pc, #416]	@ (8007470 <MX_GPIO_Init+0x24c>)
 80072ce:	2201      	movs	r2, #1
 80072d0:	0018      	movs	r0, r3
 80072d2:	f008 f958 	bl	800f586 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80072d6:	2380      	movs	r3, #128	@ 0x80
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	4866      	ldr	r0, [pc, #408]	@ (8007474 <MX_GPIO_Init+0x250>)
 80072dc:	2201      	movs	r2, #1
 80072de:	0019      	movs	r1, r3
 80072e0:	f008 f951 	bl	800f586 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80072e4:	2380      	movs	r3, #128	@ 0x80
 80072e6:	015b      	lsls	r3, r3, #5
 80072e8:	4862      	ldr	r0, [pc, #392]	@ (8007474 <MX_GPIO_Init+0x250>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	0019      	movs	r1, r3
 80072ee:	f008 f94a 	bl	800f586 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 80072f2:	193b      	adds	r3, r7, r4
 80072f4:	4a60      	ldr	r2, [pc, #384]	@ (8007478 <MX_GPIO_Init+0x254>)
 80072f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072f8:	193b      	adds	r3, r7, r4
 80072fa:	2203      	movs	r2, #3
 80072fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072fe:	193b      	adds	r3, r7, r4
 8007300:	2200      	movs	r2, #0
 8007302:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007304:	193b      	adds	r3, r7, r4
 8007306:	4a5b      	ldr	r2, [pc, #364]	@ (8007474 <MX_GPIO_Init+0x250>)
 8007308:	0019      	movs	r1, r3
 800730a:	0010      	movs	r0, r2
 800730c:	f007 ffa0 	bl	800f250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8007310:	193b      	adds	r3, r7, r4
 8007312:	2203      	movs	r2, #3
 8007314:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007316:	193b      	adds	r3, r7, r4
 8007318:	2201      	movs	r2, #1
 800731a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800731c:	193b      	adds	r3, r7, r4
 800731e:	2200      	movs	r2, #0
 8007320:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007322:	193b      	adds	r3, r7, r4
 8007324:	2200      	movs	r2, #0
 8007326:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007328:	193b      	adds	r3, r7, r4
 800732a:	4a4f      	ldr	r2, [pc, #316]	@ (8007468 <MX_GPIO_Init+0x244>)
 800732c:	0019      	movs	r1, r3
 800732e:	0010      	movs	r0, r2
 8007330:	f007 ff8e 	bl	800f250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007334:	193b      	adds	r3, r7, r4
 8007336:	2270      	movs	r2, #112	@ 0x70
 8007338:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800733a:	193b      	adds	r3, r7, r4
 800733c:	2203      	movs	r2, #3
 800733e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007340:	193b      	adds	r3, r7, r4
 8007342:	2200      	movs	r2, #0
 8007344:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007346:	193a      	adds	r2, r7, r4
 8007348:	23a0      	movs	r3, #160	@ 0xa0
 800734a:	05db      	lsls	r3, r3, #23
 800734c:	0011      	movs	r1, r2
 800734e:	0018      	movs	r0, r3
 8007350:	f007 ff7e 	bl	800f250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 8007354:	193b      	adds	r3, r7, r4
 8007356:	22c0      	movs	r2, #192	@ 0xc0
 8007358:	0052      	lsls	r2, r2, #1
 800735a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800735c:	193b      	adds	r3, r7, r4
 800735e:	2200      	movs	r2, #0
 8007360:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007362:	193b      	adds	r3, r7, r4
 8007364:	2200      	movs	r2, #0
 8007366:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007368:	193a      	adds	r2, r7, r4
 800736a:	23a0      	movs	r3, #160	@ 0xa0
 800736c:	05db      	lsls	r3, r3, #23
 800736e:	0011      	movs	r1, r2
 8007370:	0018      	movs	r0, r3
 8007372:	f007 ff6d 	bl	800f250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8007376:	193b      	adds	r3, r7, r4
 8007378:	4a3c      	ldr	r2, [pc, #240]	@ (800746c <MX_GPIO_Init+0x248>)
 800737a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800737c:	193b      	adds	r3, r7, r4
 800737e:	2201      	movs	r2, #1
 8007380:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007382:	193b      	adds	r3, r7, r4
 8007384:	2200      	movs	r2, #0
 8007386:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007388:	193b      	adds	r3, r7, r4
 800738a:	2200      	movs	r2, #0
 800738c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800738e:	193b      	adds	r3, r7, r4
 8007390:	4a37      	ldr	r2, [pc, #220]	@ (8007470 <MX_GPIO_Init+0x24c>)
 8007392:	0019      	movs	r1, r3
 8007394:	0010      	movs	r0, r2
 8007396:	f007 ff5b 	bl	800f250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800739a:	193b      	adds	r3, r7, r4
 800739c:	4a37      	ldr	r2, [pc, #220]	@ (800747c <MX_GPIO_Init+0x258>)
 800739e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073a0:	193b      	adds	r3, r7, r4
 80073a2:	2203      	movs	r2, #3
 80073a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073a6:	193b      	adds	r3, r7, r4
 80073a8:	2200      	movs	r2, #0
 80073aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073ac:	193b      	adds	r3, r7, r4
 80073ae:	4a30      	ldr	r2, [pc, #192]	@ (8007470 <MX_GPIO_Init+0x24c>)
 80073b0:	0019      	movs	r1, r3
 80073b2:	0010      	movs	r0, r2
 80073b4:	f007 ff4c 	bl	800f250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80073b8:	0021      	movs	r1, r4
 80073ba:	187b      	adds	r3, r7, r1
 80073bc:	2280      	movs	r2, #128	@ 0x80
 80073be:	0092      	lsls	r2, r2, #2
 80073c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073c2:	000c      	movs	r4, r1
 80073c4:	193b      	adds	r3, r7, r4
 80073c6:	2200      	movs	r2, #0
 80073c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ca:	193b      	adds	r3, r7, r4
 80073cc:	2200      	movs	r2, #0
 80073ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 80073d0:	193b      	adds	r3, r7, r4
 80073d2:	4a28      	ldr	r2, [pc, #160]	@ (8007474 <MX_GPIO_Init+0x250>)
 80073d4:	0019      	movs	r1, r3
 80073d6:	0010      	movs	r0, r2
 80073d8:	f007 ff3a 	bl	800f250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 80073dc:	193b      	adds	r3, r7, r4
 80073de:	2280      	movs	r2, #128	@ 0x80
 80073e0:	0212      	lsls	r2, r2, #8
 80073e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80073e4:	193b      	adds	r3, r7, r4
 80073e6:	2288      	movs	r2, #136	@ 0x88
 80073e8:	0352      	lsls	r2, r2, #13
 80073ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ec:	193b      	adds	r3, r7, r4
 80073ee:	2200      	movs	r2, #0
 80073f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 80073f2:	193a      	adds	r2, r7, r4
 80073f4:	23a0      	movs	r3, #160	@ 0xa0
 80073f6:	05db      	lsls	r3, r3, #23
 80073f8:	0011      	movs	r1, r2
 80073fa:	0018      	movs	r0, r3
 80073fc:	f007 ff28 	bl	800f250 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8007400:	0021      	movs	r1, r4
 8007402:	187b      	adds	r3, r7, r1
 8007404:	22c0      	movs	r2, #192	@ 0xc0
 8007406:	0152      	lsls	r2, r2, #5
 8007408:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800740a:	000c      	movs	r4, r1
 800740c:	193b      	adds	r3, r7, r4
 800740e:	2201      	movs	r2, #1
 8007410:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007412:	193b      	adds	r3, r7, r4
 8007414:	2200      	movs	r2, #0
 8007416:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007418:	193b      	adds	r3, r7, r4
 800741a:	2200      	movs	r2, #0
 800741c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800741e:	193b      	adds	r3, r7, r4
 8007420:	4a14      	ldr	r2, [pc, #80]	@ (8007474 <MX_GPIO_Init+0x250>)
 8007422:	0019      	movs	r1, r3
 8007424:	0010      	movs	r0, r2
 8007426:	f007 ff13 	bl	800f250 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800742a:	0021      	movs	r1, r4
 800742c:	187b      	adds	r3, r7, r1
 800742e:	2204      	movs	r2, #4
 8007430:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007432:	187b      	adds	r3, r7, r1
 8007434:	2200      	movs	r2, #0
 8007436:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007438:	187b      	adds	r3, r7, r1
 800743a:	2201      	movs	r2, #1
 800743c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800743e:	187b      	adds	r3, r7, r1
 8007440:	4a0f      	ldr	r2, [pc, #60]	@ (8007480 <MX_GPIO_Init+0x25c>)
 8007442:	0019      	movs	r1, r3
 8007444:	0010      	movs	r0, r2
 8007446:	f007 ff03 	bl	800f250 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800744a:	2200      	movs	r2, #0
 800744c:	2100      	movs	r1, #0
 800744e:	2007      	movs	r0, #7
 8007450:	f007 fab0 	bl	800e9b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007454:	2007      	movs	r0, #7
 8007456:	f007 fac2 	bl	800e9de <HAL_NVIC_EnableIRQ>

}
 800745a:	46c0      	nop			@ (mov r8, r8)
 800745c:	46bd      	mov	sp, r7
 800745e:	b00b      	add	sp, #44	@ 0x2c
 8007460:	bd90      	pop	{r4, r7, pc}
 8007462:	46c0      	nop			@ (mov r8, r8)
 8007464:	40021000 	.word	0x40021000
 8007468:	50001c00 	.word	0x50001c00
 800746c:	00000301 	.word	0x00000301
 8007470:	50000400 	.word	0x50000400
 8007474:	50000800 	.word	0x50000800
 8007478:	0000200c 	.word	0x0000200c
 800747c:	0000403e 	.word	0x0000403e
 8007480:	50000c00 	.word	0x50000c00

08007484 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2100      	movs	r1, #0
 8007492:	0018      	movs	r0, r3
 8007494:	f00e fc14 	bl	8015cc0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2108      	movs	r1, #8
 800749c:	0018      	movs	r0, r3
 800749e:	f00e fc0f 	bl	8015cc0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	210c      	movs	r1, #12
 80074a6:	0018      	movs	r0, r3
 80074a8:	f00e fc0a 	bl	8015cc0 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80074ac:	2380      	movs	r3, #128	@ 0x80
 80074ae:	05db      	lsls	r3, r3, #23
 80074b0:	22fa      	movs	r2, #250	@ 0xfa
 80074b2:	0112      	lsls	r2, r2, #4
 80074b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80074b6:	2380      	movs	r3, #128	@ 0x80
 80074b8:	05db      	lsls	r3, r3, #23
 80074ba:	22fa      	movs	r2, #250	@ 0xfa
 80074bc:	0112      	lsls	r2, r2, #4
 80074be:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80074c0:	2380      	movs	r3, #128	@ 0x80
 80074c2:	05db      	lsls	r3, r3, #23
 80074c4:	22fa      	movs	r2, #250	@ 0xfa
 80074c6:	0112      	lsls	r2, r2, #4
 80074c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80074ca:	2380      	movs	r3, #128	@ 0x80
 80074cc:	05db      	lsls	r3, r3, #23
 80074ce:	22fa      	movs	r2, #250	@ 0xfa
 80074d0:	0112      	lsls	r2, r2, #4
 80074d2:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2100      	movs	r1, #0
 80074d8:	0018      	movs	r0, r3
 80074da:	f00e fbf1 	bl	8015cc0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2104      	movs	r1, #4
 80074e2:	0018      	movs	r0, r3
 80074e4:	f00e fbec 	bl	8015cc0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2108      	movs	r1, #8
 80074ec:	0018      	movs	r0, r3
 80074ee:	f00e fbe7 	bl	8015cc0 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 80074f2:	4b0a      	ldr	r3, [pc, #40]	@ (800751c <GPIO_InitPWMLEDs+0x98>)
 80074f4:	22fa      	movs	r2, #250	@ 0xfa
 80074f6:	0112      	lsls	r2, r2, #4
 80074f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 80074fa:	4b08      	ldr	r3, [pc, #32]	@ (800751c <GPIO_InitPWMLEDs+0x98>)
 80074fc:	22fa      	movs	r2, #250	@ 0xfa
 80074fe:	0112      	lsls	r2, r2, #4
 8007500:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8007502:	4b06      	ldr	r3, [pc, #24]	@ (800751c <GPIO_InitPWMLEDs+0x98>)
 8007504:	22fa      	movs	r2, #250	@ 0xfa
 8007506:	0112      	lsls	r2, r2, #4
 8007508:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800750a:	4b04      	ldr	r3, [pc, #16]	@ (800751c <GPIO_InitPWMLEDs+0x98>)
 800750c:	22fa      	movs	r2, #250	@ 0xfa
 800750e:	0112      	lsls	r2, r2, #4
 8007510:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007512:	46c0      	nop			@ (mov r8, r8)
 8007514:	46bd      	mov	sp, r7
 8007516:	b002      	add	sp, #8
 8007518:	bd80      	pop	{r7, pc}
 800751a:	46c0      	nop			@ (mov r8, r8)
 800751c:	40000400 	.word	0x40000400

08007520 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	0011      	movs	r1, r2
 8007530:	0018      	movs	r0, r3
 8007532:	f006 fb71 	bl	800dc18 <HIDS_Init>
}
 8007536:	46c0      	nop			@ (mov r8, r8)
 8007538:	46bd      	mov	sp, r7
 800753a:	b002      	add	sp, #8
 800753c:	bd80      	pop	{r7, pc}

0800753e <HT_StartMeasurement>:

void HT_StartMeasurement() {
 800753e:	b580      	push	{r7, lr}
 8007540:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8007542:	f006 fb8b 	bl	800dc5c <HIDS_StartMeasurement>
}
 8007546:	46c0      	nop			@ (mov r8, r8)
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	0011      	movs	r1, r2
 800755c:	0018      	movs	r0, r3
 800755e:	f006 fc63 	bl	800de28 <HIDS_GetMeasurementValues>
 8007562:	0003      	movs	r3, r0
}
 8007564:	0018      	movs	r0, r3
 8007566:	46bd      	mov	sp, r7
 8007568:	b002      	add	sp, #8
 800756a:	bd80      	pop	{r7, pc}

0800756c <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8007570:	f006 fbfe 	bl	800dd70 <HIDS_DeviceConnected>
 8007574:	0003      	movs	r3, r0
}
 8007576:	0018      	movs	r0, r3
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007580:	4b1b      	ldr	r3, [pc, #108]	@ (80075f0 <MX_I2C1_Init+0x74>)
 8007582:	4a1c      	ldr	r2, [pc, #112]	@ (80075f4 <MX_I2C1_Init+0x78>)
 8007584:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8007586:	4b1a      	ldr	r3, [pc, #104]	@ (80075f0 <MX_I2C1_Init+0x74>)
 8007588:	4a1b      	ldr	r2, [pc, #108]	@ (80075f8 <MX_I2C1_Init+0x7c>)
 800758a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800758c:	4b18      	ldr	r3, [pc, #96]	@ (80075f0 <MX_I2C1_Init+0x74>)
 800758e:	2200      	movs	r2, #0
 8007590:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007592:	4b17      	ldr	r3, [pc, #92]	@ (80075f0 <MX_I2C1_Init+0x74>)
 8007594:	2201      	movs	r2, #1
 8007596:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007598:	4b15      	ldr	r3, [pc, #84]	@ (80075f0 <MX_I2C1_Init+0x74>)
 800759a:	2200      	movs	r2, #0
 800759c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800759e:	4b14      	ldr	r3, [pc, #80]	@ (80075f0 <MX_I2C1_Init+0x74>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80075a4:	4b12      	ldr	r3, [pc, #72]	@ (80075f0 <MX_I2C1_Init+0x74>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80075aa:	4b11      	ldr	r3, [pc, #68]	@ (80075f0 <MX_I2C1_Init+0x74>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80075b0:	4b0f      	ldr	r3, [pc, #60]	@ (80075f0 <MX_I2C1_Init+0x74>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80075b6:	4b0e      	ldr	r3, [pc, #56]	@ (80075f0 <MX_I2C1_Init+0x74>)
 80075b8:	0018      	movs	r0, r3
 80075ba:	f008 f81d 	bl	800f5f8 <HAL_I2C_Init>
 80075be:	1e03      	subs	r3, r0, #0
 80075c0:	d001      	beq.n	80075c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80075c2:	f000 fced 	bl	8007fa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80075c6:	4b0a      	ldr	r3, [pc, #40]	@ (80075f0 <MX_I2C1_Init+0x74>)
 80075c8:	2100      	movs	r1, #0
 80075ca:	0018      	movs	r0, r3
 80075cc:	f00a fbee 	bl	8011dac <HAL_I2CEx_ConfigAnalogFilter>
 80075d0:	1e03      	subs	r3, r0, #0
 80075d2:	d001      	beq.n	80075d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80075d4:	f000 fce4 	bl	8007fa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80075d8:	4b05      	ldr	r3, [pc, #20]	@ (80075f0 <MX_I2C1_Init+0x74>)
 80075da:	2100      	movs	r1, #0
 80075dc:	0018      	movs	r0, r3
 80075de:	f00a fc31 	bl	8011e44 <HAL_I2CEx_ConfigDigitalFilter>
 80075e2:	1e03      	subs	r3, r0, #0
 80075e4:	d001      	beq.n	80075ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80075e6:	f000 fcdb 	bl	8007fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80075ea:	46c0      	nop			@ (mov r8, r8)
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	20000d5c 	.word	0x20000d5c
 80075f4:	40005400 	.word	0x40005400
 80075f8:	00503d58 	.word	0x00503d58

080075fc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007600:	4b1b      	ldr	r3, [pc, #108]	@ (8007670 <MX_I2C2_Init+0x74>)
 8007602:	4a1c      	ldr	r2, [pc, #112]	@ (8007674 <MX_I2C2_Init+0x78>)
 8007604:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8007606:	4b1a      	ldr	r3, [pc, #104]	@ (8007670 <MX_I2C2_Init+0x74>)
 8007608:	4a1b      	ldr	r2, [pc, #108]	@ (8007678 <MX_I2C2_Init+0x7c>)
 800760a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800760c:	4b18      	ldr	r3, [pc, #96]	@ (8007670 <MX_I2C2_Init+0x74>)
 800760e:	2200      	movs	r2, #0
 8007610:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007612:	4b17      	ldr	r3, [pc, #92]	@ (8007670 <MX_I2C2_Init+0x74>)
 8007614:	2201      	movs	r2, #1
 8007616:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007618:	4b15      	ldr	r3, [pc, #84]	@ (8007670 <MX_I2C2_Init+0x74>)
 800761a:	2200      	movs	r2, #0
 800761c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800761e:	4b14      	ldr	r3, [pc, #80]	@ (8007670 <MX_I2C2_Init+0x74>)
 8007620:	2200      	movs	r2, #0
 8007622:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007624:	4b12      	ldr	r3, [pc, #72]	@ (8007670 <MX_I2C2_Init+0x74>)
 8007626:	2200      	movs	r2, #0
 8007628:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800762a:	4b11      	ldr	r3, [pc, #68]	@ (8007670 <MX_I2C2_Init+0x74>)
 800762c:	2200      	movs	r2, #0
 800762e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007630:	4b0f      	ldr	r3, [pc, #60]	@ (8007670 <MX_I2C2_Init+0x74>)
 8007632:	2200      	movs	r2, #0
 8007634:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007636:	4b0e      	ldr	r3, [pc, #56]	@ (8007670 <MX_I2C2_Init+0x74>)
 8007638:	0018      	movs	r0, r3
 800763a:	f007 ffdd 	bl	800f5f8 <HAL_I2C_Init>
 800763e:	1e03      	subs	r3, r0, #0
 8007640:	d001      	beq.n	8007646 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007642:	f000 fcad 	bl	8007fa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007646:	4b0a      	ldr	r3, [pc, #40]	@ (8007670 <MX_I2C2_Init+0x74>)
 8007648:	2100      	movs	r1, #0
 800764a:	0018      	movs	r0, r3
 800764c:	f00a fbae 	bl	8011dac <HAL_I2CEx_ConfigAnalogFilter>
 8007650:	1e03      	subs	r3, r0, #0
 8007652:	d001      	beq.n	8007658 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007654:	f000 fca4 	bl	8007fa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007658:	4b05      	ldr	r3, [pc, #20]	@ (8007670 <MX_I2C2_Init+0x74>)
 800765a:	2100      	movs	r1, #0
 800765c:	0018      	movs	r0, r3
 800765e:	f00a fbf1 	bl	8011e44 <HAL_I2CEx_ConfigDigitalFilter>
 8007662:	1e03      	subs	r3, r0, #0
 8007664:	d001      	beq.n	800766a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007666:	f000 fc9b 	bl	8007fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800766a:	46c0      	nop			@ (mov r8, r8)
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	20000db0 	.word	0x20000db0
 8007674:	40005800 	.word	0x40005800
 8007678:	00503d58 	.word	0x00503d58

0800767c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800767c:	b590      	push	{r4, r7, lr}
 800767e:	b08b      	sub	sp, #44	@ 0x2c
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007684:	2414      	movs	r4, #20
 8007686:	193b      	adds	r3, r7, r4
 8007688:	0018      	movs	r0, r3
 800768a:	2314      	movs	r3, #20
 800768c:	001a      	movs	r2, r3
 800768e:	2100      	movs	r1, #0
 8007690:	f017 ff02 	bl	801f498 <memset>
  if(i2cHandle->Instance==I2C1)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a5d      	ldr	r2, [pc, #372]	@ (8007810 <HAL_I2C_MspInit+0x194>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d000      	beq.n	80076a0 <HAL_I2C_MspInit+0x24>
 800769e:	e083      	b.n	80077a8 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076a0:	4b5c      	ldr	r3, [pc, #368]	@ (8007814 <HAL_I2C_MspInit+0x198>)
 80076a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a4:	4b5b      	ldr	r3, [pc, #364]	@ (8007814 <HAL_I2C_MspInit+0x198>)
 80076a6:	2102      	movs	r1, #2
 80076a8:	430a      	orrs	r2, r1
 80076aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80076ac:	4b59      	ldr	r3, [pc, #356]	@ (8007814 <HAL_I2C_MspInit+0x198>)
 80076ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b0:	2202      	movs	r2, #2
 80076b2:	4013      	ands	r3, r2
 80076b4:	613b      	str	r3, [r7, #16]
 80076b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80076b8:	0021      	movs	r1, r4
 80076ba:	187b      	adds	r3, r7, r1
 80076bc:	22c0      	movs	r2, #192	@ 0xc0
 80076be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80076c0:	187b      	adds	r3, r7, r1
 80076c2:	2212      	movs	r2, #18
 80076c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076c6:	187b      	adds	r3, r7, r1
 80076c8:	2200      	movs	r2, #0
 80076ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076cc:	187b      	adds	r3, r7, r1
 80076ce:	2203      	movs	r2, #3
 80076d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80076d2:	187b      	adds	r3, r7, r1
 80076d4:	2201      	movs	r2, #1
 80076d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076d8:	187b      	adds	r3, r7, r1
 80076da:	4a4f      	ldr	r2, [pc, #316]	@ (8007818 <HAL_I2C_MspInit+0x19c>)
 80076dc:	0019      	movs	r1, r3
 80076de:	0010      	movs	r0, r2
 80076e0:	f007 fdb6 	bl	800f250 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80076e4:	4b4b      	ldr	r3, [pc, #300]	@ (8007814 <HAL_I2C_MspInit+0x198>)
 80076e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076e8:	4b4a      	ldr	r3, [pc, #296]	@ (8007814 <HAL_I2C_MspInit+0x198>)
 80076ea:	2180      	movs	r1, #128	@ 0x80
 80076ec:	0389      	lsls	r1, r1, #14
 80076ee:	430a      	orrs	r2, r1
 80076f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80076f2:	4b4a      	ldr	r3, [pc, #296]	@ (800781c <HAL_I2C_MspInit+0x1a0>)
 80076f4:	4a4a      	ldr	r2, [pc, #296]	@ (8007820 <HAL_I2C_MspInit+0x1a4>)
 80076f6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80076f8:	4b48      	ldr	r3, [pc, #288]	@ (800781c <HAL_I2C_MspInit+0x1a0>)
 80076fa:	2206      	movs	r2, #6
 80076fc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80076fe:	4b47      	ldr	r3, [pc, #284]	@ (800781c <HAL_I2C_MspInit+0x1a0>)
 8007700:	2200      	movs	r2, #0
 8007702:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007704:	4b45      	ldr	r3, [pc, #276]	@ (800781c <HAL_I2C_MspInit+0x1a0>)
 8007706:	2200      	movs	r2, #0
 8007708:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800770a:	4b44      	ldr	r3, [pc, #272]	@ (800781c <HAL_I2C_MspInit+0x1a0>)
 800770c:	2280      	movs	r2, #128	@ 0x80
 800770e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007710:	4b42      	ldr	r3, [pc, #264]	@ (800781c <HAL_I2C_MspInit+0x1a0>)
 8007712:	2200      	movs	r2, #0
 8007714:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007716:	4b41      	ldr	r3, [pc, #260]	@ (800781c <HAL_I2C_MspInit+0x1a0>)
 8007718:	2200      	movs	r2, #0
 800771a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800771c:	4b3f      	ldr	r3, [pc, #252]	@ (800781c <HAL_I2C_MspInit+0x1a0>)
 800771e:	2200      	movs	r2, #0
 8007720:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007722:	4b3e      	ldr	r3, [pc, #248]	@ (800781c <HAL_I2C_MspInit+0x1a0>)
 8007724:	2200      	movs	r2, #0
 8007726:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007728:	4b3c      	ldr	r3, [pc, #240]	@ (800781c <HAL_I2C_MspInit+0x1a0>)
 800772a:	0018      	movs	r0, r3
 800772c:	f007 f974 	bl	800ea18 <HAL_DMA_Init>
 8007730:	1e03      	subs	r3, r0, #0
 8007732:	d001      	beq.n	8007738 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8007734:	f000 fc34 	bl	8007fa0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a38      	ldr	r2, [pc, #224]	@ (800781c <HAL_I2C_MspInit+0x1a0>)
 800773c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800773e:	4b37      	ldr	r3, [pc, #220]	@ (800781c <HAL_I2C_MspInit+0x1a0>)
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8007744:	4b37      	ldr	r3, [pc, #220]	@ (8007824 <HAL_I2C_MspInit+0x1a8>)
 8007746:	4a38      	ldr	r2, [pc, #224]	@ (8007828 <HAL_I2C_MspInit+0x1ac>)
 8007748:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800774a:	4b36      	ldr	r3, [pc, #216]	@ (8007824 <HAL_I2C_MspInit+0x1a8>)
 800774c:	2206      	movs	r2, #6
 800774e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007750:	4b34      	ldr	r3, [pc, #208]	@ (8007824 <HAL_I2C_MspInit+0x1a8>)
 8007752:	2210      	movs	r2, #16
 8007754:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007756:	4b33      	ldr	r3, [pc, #204]	@ (8007824 <HAL_I2C_MspInit+0x1a8>)
 8007758:	2200      	movs	r2, #0
 800775a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800775c:	4b31      	ldr	r3, [pc, #196]	@ (8007824 <HAL_I2C_MspInit+0x1a8>)
 800775e:	2280      	movs	r2, #128	@ 0x80
 8007760:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007762:	4b30      	ldr	r3, [pc, #192]	@ (8007824 <HAL_I2C_MspInit+0x1a8>)
 8007764:	2200      	movs	r2, #0
 8007766:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007768:	4b2e      	ldr	r3, [pc, #184]	@ (8007824 <HAL_I2C_MspInit+0x1a8>)
 800776a:	2200      	movs	r2, #0
 800776c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800776e:	4b2d      	ldr	r3, [pc, #180]	@ (8007824 <HAL_I2C_MspInit+0x1a8>)
 8007770:	2200      	movs	r2, #0
 8007772:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007774:	4b2b      	ldr	r3, [pc, #172]	@ (8007824 <HAL_I2C_MspInit+0x1a8>)
 8007776:	2200      	movs	r2, #0
 8007778:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800777a:	4b2a      	ldr	r3, [pc, #168]	@ (8007824 <HAL_I2C_MspInit+0x1a8>)
 800777c:	0018      	movs	r0, r3
 800777e:	f007 f94b 	bl	800ea18 <HAL_DMA_Init>
 8007782:	1e03      	subs	r3, r0, #0
 8007784:	d001      	beq.n	800778a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8007786:	f000 fc0b 	bl	8007fa0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a25      	ldr	r2, [pc, #148]	@ (8007824 <HAL_I2C_MspInit+0x1a8>)
 800778e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007790:	4b24      	ldr	r3, [pc, #144]	@ (8007824 <HAL_I2C_MspInit+0x1a8>)
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8007796:	2200      	movs	r2, #0
 8007798:	2100      	movs	r1, #0
 800779a:	2017      	movs	r0, #23
 800779c:	f007 f90a 	bl	800e9b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80077a0:	2017      	movs	r0, #23
 80077a2:	f007 f91c 	bl	800e9de <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80077a6:	e02e      	b.n	8007806 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a1f      	ldr	r2, [pc, #124]	@ (800782c <HAL_I2C_MspInit+0x1b0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d129      	bne.n	8007806 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077b2:	4b18      	ldr	r3, [pc, #96]	@ (8007814 <HAL_I2C_MspInit+0x198>)
 80077b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b6:	4b17      	ldr	r3, [pc, #92]	@ (8007814 <HAL_I2C_MspInit+0x198>)
 80077b8:	2102      	movs	r1, #2
 80077ba:	430a      	orrs	r2, r1
 80077bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80077be:	4b15      	ldr	r3, [pc, #84]	@ (8007814 <HAL_I2C_MspInit+0x198>)
 80077c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c2:	2202      	movs	r2, #2
 80077c4:	4013      	ands	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80077ca:	2114      	movs	r1, #20
 80077cc:	187b      	adds	r3, r7, r1
 80077ce:	22c0      	movs	r2, #192	@ 0xc0
 80077d0:	0112      	lsls	r2, r2, #4
 80077d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80077d4:	187b      	adds	r3, r7, r1
 80077d6:	2212      	movs	r2, #18
 80077d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077da:	187b      	adds	r3, r7, r1
 80077dc:	2200      	movs	r2, #0
 80077de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077e0:	187b      	adds	r3, r7, r1
 80077e2:	2203      	movs	r2, #3
 80077e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80077e6:	187b      	adds	r3, r7, r1
 80077e8:	2206      	movs	r2, #6
 80077ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077ec:	187b      	adds	r3, r7, r1
 80077ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007818 <HAL_I2C_MspInit+0x19c>)
 80077f0:	0019      	movs	r1, r3
 80077f2:	0010      	movs	r0, r2
 80077f4:	f007 fd2c 	bl	800f250 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80077f8:	4b06      	ldr	r3, [pc, #24]	@ (8007814 <HAL_I2C_MspInit+0x198>)
 80077fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077fc:	4b05      	ldr	r3, [pc, #20]	@ (8007814 <HAL_I2C_MspInit+0x198>)
 80077fe:	2180      	movs	r1, #128	@ 0x80
 8007800:	03c9      	lsls	r1, r1, #15
 8007802:	430a      	orrs	r2, r1
 8007804:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007806:	46c0      	nop			@ (mov r8, r8)
 8007808:	46bd      	mov	sp, r7
 800780a:	b00b      	add	sp, #44	@ 0x2c
 800780c:	bd90      	pop	{r4, r7, pc}
 800780e:	46c0      	nop			@ (mov r8, r8)
 8007810:	40005400 	.word	0x40005400
 8007814:	40021000 	.word	0x40021000
 8007818:	50000400 	.word	0x50000400
 800781c:	20000e04 	.word	0x20000e04
 8007820:	40020030 	.word	0x40020030
 8007824:	20000e4c 	.word	0x20000e4c
 8007828:	4002001c 	.word	0x4002001c
 800782c:	40005800 	.word	0x40005800

08007830 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007834:	4b10      	ldr	r3, [pc, #64]	@ (8007878 <MX_I2S2_Init+0x48>)
 8007836:	4a11      	ldr	r2, [pc, #68]	@ (800787c <MX_I2S2_Init+0x4c>)
 8007838:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800783a:	4b0f      	ldr	r3, [pc, #60]	@ (8007878 <MX_I2S2_Init+0x48>)
 800783c:	22c0      	movs	r2, #192	@ 0xc0
 800783e:	0092      	lsls	r2, r2, #2
 8007840:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8007842:	4b0d      	ldr	r3, [pc, #52]	@ (8007878 <MX_I2S2_Init+0x48>)
 8007844:	2200      	movs	r2, #0
 8007846:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8007848:	4b0b      	ldr	r3, [pc, #44]	@ (8007878 <MX_I2S2_Init+0x48>)
 800784a:	2203      	movs	r2, #3
 800784c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800784e:	4b0a      	ldr	r3, [pc, #40]	@ (8007878 <MX_I2S2_Init+0x48>)
 8007850:	2200      	movs	r2, #0
 8007852:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007854:	4b08      	ldr	r3, [pc, #32]	@ (8007878 <MX_I2S2_Init+0x48>)
 8007856:	22fa      	movs	r2, #250	@ 0xfa
 8007858:	0192      	lsls	r2, r2, #6
 800785a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800785c:	4b06      	ldr	r3, [pc, #24]	@ (8007878 <MX_I2S2_Init+0x48>)
 800785e:	2200      	movs	r2, #0
 8007860:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007862:	4b05      	ldr	r3, [pc, #20]	@ (8007878 <MX_I2S2_Init+0x48>)
 8007864:	0018      	movs	r0, r3
 8007866:	f00a fb39 	bl	8011edc <HAL_I2S_Init>
 800786a:	1e03      	subs	r3, r0, #0
 800786c:	d001      	beq.n	8007872 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800786e:	f000 fb97 	bl	8007fa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007872:	46c0      	nop			@ (mov r8, r8)
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	20000e94 	.word	0x20000e94
 800787c:	40003800 	.word	0x40003800

08007880 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8007880:	b590      	push	{r4, r7, lr}
 8007882:	b089      	sub	sp, #36	@ 0x24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007888:	240c      	movs	r4, #12
 800788a:	193b      	adds	r3, r7, r4
 800788c:	0018      	movs	r0, r3
 800788e:	2314      	movs	r3, #20
 8007890:	001a      	movs	r2, r3
 8007892:	2100      	movs	r1, #0
 8007894:	f017 fe00 	bl	801f498 <memset>
  if(i2sHandle->Instance==SPI2)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a2d      	ldr	r2, [pc, #180]	@ (8007954 <HAL_I2S_MspInit+0xd4>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d154      	bne.n	800794c <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80078a2:	4b2d      	ldr	r3, [pc, #180]	@ (8007958 <HAL_I2S_MspInit+0xd8>)
 80078a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078a6:	4b2c      	ldr	r3, [pc, #176]	@ (8007958 <HAL_I2S_MspInit+0xd8>)
 80078a8:	2180      	movs	r1, #128	@ 0x80
 80078aa:	01c9      	lsls	r1, r1, #7
 80078ac:	430a      	orrs	r2, r1
 80078ae:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078b0:	4b29      	ldr	r3, [pc, #164]	@ (8007958 <HAL_I2S_MspInit+0xd8>)
 80078b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b4:	4b28      	ldr	r3, [pc, #160]	@ (8007958 <HAL_I2S_MspInit+0xd8>)
 80078b6:	2102      	movs	r1, #2
 80078b8:	430a      	orrs	r2, r1
 80078ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078bc:	4b26      	ldr	r3, [pc, #152]	@ (8007958 <HAL_I2S_MspInit+0xd8>)
 80078be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c0:	2202      	movs	r2, #2
 80078c2:	4013      	ands	r3, r2
 80078c4:	60bb      	str	r3, [r7, #8]
 80078c6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80078c8:	193b      	adds	r3, r7, r4
 80078ca:	22b0      	movs	r2, #176	@ 0xb0
 80078cc:	0212      	lsls	r2, r2, #8
 80078ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078d0:	0021      	movs	r1, r4
 80078d2:	187b      	adds	r3, r7, r1
 80078d4:	2202      	movs	r2, #2
 80078d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d8:	187b      	adds	r3, r7, r1
 80078da:	2200      	movs	r2, #0
 80078dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078de:	187b      	adds	r3, r7, r1
 80078e0:	2200      	movs	r2, #0
 80078e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80078e4:	187b      	adds	r3, r7, r1
 80078e6:	2200      	movs	r2, #0
 80078e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078ea:	187b      	adds	r3, r7, r1
 80078ec:	4a1b      	ldr	r2, [pc, #108]	@ (800795c <HAL_I2S_MspInit+0xdc>)
 80078ee:	0019      	movs	r1, r3
 80078f0:	0010      	movs	r0, r2
 80078f2:	f007 fcad 	bl	800f250 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80078f6:	4b1a      	ldr	r3, [pc, #104]	@ (8007960 <HAL_I2S_MspInit+0xe0>)
 80078f8:	4a1a      	ldr	r2, [pc, #104]	@ (8007964 <HAL_I2S_MspInit+0xe4>)
 80078fa:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 80078fc:	4b18      	ldr	r3, [pc, #96]	@ (8007960 <HAL_I2S_MspInit+0xe0>)
 80078fe:	2202      	movs	r2, #2
 8007900:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007902:	4b17      	ldr	r3, [pc, #92]	@ (8007960 <HAL_I2S_MspInit+0xe0>)
 8007904:	2200      	movs	r2, #0
 8007906:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007908:	4b15      	ldr	r3, [pc, #84]	@ (8007960 <HAL_I2S_MspInit+0xe0>)
 800790a:	2200      	movs	r2, #0
 800790c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800790e:	4b14      	ldr	r3, [pc, #80]	@ (8007960 <HAL_I2S_MspInit+0xe0>)
 8007910:	2280      	movs	r2, #128	@ 0x80
 8007912:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007914:	4b12      	ldr	r3, [pc, #72]	@ (8007960 <HAL_I2S_MspInit+0xe0>)
 8007916:	2280      	movs	r2, #128	@ 0x80
 8007918:	0052      	lsls	r2, r2, #1
 800791a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800791c:	4b10      	ldr	r3, [pc, #64]	@ (8007960 <HAL_I2S_MspInit+0xe0>)
 800791e:	2280      	movs	r2, #128	@ 0x80
 8007920:	00d2      	lsls	r2, r2, #3
 8007922:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007924:	4b0e      	ldr	r3, [pc, #56]	@ (8007960 <HAL_I2S_MspInit+0xe0>)
 8007926:	2220      	movs	r2, #32
 8007928:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800792a:	4b0d      	ldr	r3, [pc, #52]	@ (8007960 <HAL_I2S_MspInit+0xe0>)
 800792c:	2200      	movs	r2, #0
 800792e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007930:	4b0b      	ldr	r3, [pc, #44]	@ (8007960 <HAL_I2S_MspInit+0xe0>)
 8007932:	0018      	movs	r0, r3
 8007934:	f007 f870 	bl	800ea18 <HAL_DMA_Init>
 8007938:	1e03      	subs	r3, r0, #0
 800793a:	d001      	beq.n	8007940 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800793c:	f000 fb30 	bl	8007fa0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a07      	ldr	r2, [pc, #28]	@ (8007960 <HAL_I2S_MspInit+0xe0>)
 8007944:	631a      	str	r2, [r3, #48]	@ 0x30
 8007946:	4b06      	ldr	r3, [pc, #24]	@ (8007960 <HAL_I2S_MspInit+0xe0>)
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800794c:	46c0      	nop			@ (mov r8, r8)
 800794e:	46bd      	mov	sp, r7
 8007950:	b009      	add	sp, #36	@ 0x24
 8007952:	bd90      	pop	{r4, r7, pc}
 8007954:	40003800 	.word	0x40003800
 8007958:	40021000 	.word	0x40021000
 800795c:	50000400 	.word	0x50000400
 8007960:	20000ed0 	.word	0x20000ed0
 8007964:	40020044 	.word	0x40020044

08007968 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
  testDone = true;
 800796c:	4b1e      	ldr	r3, [pc, #120]	@ (80079e8 <SetTestDone+0x80>)
 800796e:	2201      	movs	r2, #1
 8007970:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 8007972:	23fa      	movs	r3, #250	@ 0xfa
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	0018      	movs	r0, r3
 8007978:	f006 fb94 	bl	800e0a4 <HAL_Delay>
  SetDBLED(false, false, true);
 800797c:	2201      	movs	r2, #1
 800797e:	2100      	movs	r1, #0
 8007980:	2000      	movs	r0, #0
 8007982:	f005 f857 	bl	800ca34 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007986:	4a19      	ldr	r2, [pc, #100]	@ (80079ec <SetTestDone+0x84>)
 8007988:	23fa      	movs	r3, #250	@ 0xfa
 800798a:	0119      	lsls	r1, r3, #4
 800798c:	23fa      	movs	r3, #250	@ 0xfa
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	0018      	movs	r0, r3
 8007992:	f005 f81b 	bl	800c9cc <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007996:	4a15      	ldr	r2, [pc, #84]	@ (80079ec <SetTestDone+0x84>)
 8007998:	23fa      	movs	r3, #250	@ 0xfa
 800799a:	0119      	lsls	r1, r3, #4
 800799c:	23fa      	movs	r3, #250	@ 0xfa
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	0018      	movs	r0, r3
 80079a2:	f005 f891 	bl	800cac8 <SetVocLED>
  HAL_Delay(1000);
 80079a6:	23fa      	movs	r3, #250	@ 0xfa
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	0018      	movs	r0, r3
 80079ac:	f006 fb7a 	bl	800e0a4 <HAL_Delay>
  SetDBLED(false, false, false);
 80079b0:	2200      	movs	r2, #0
 80079b2:	2100      	movs	r1, #0
 80079b4:	2000      	movs	r0, #0
 80079b6:	f005 f83d 	bl	800ca34 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 80079ba:	23fa      	movs	r3, #250	@ 0xfa
 80079bc:	011a      	lsls	r2, r3, #4
 80079be:	23fa      	movs	r3, #250	@ 0xfa
 80079c0:	0119      	lsls	r1, r3, #4
 80079c2:	23fa      	movs	r3, #250	@ 0xfa
 80079c4:	011b      	lsls	r3, r3, #4
 80079c6:	0018      	movs	r0, r3
 80079c8:	f005 f800 	bl	800c9cc <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 80079cc:	23fa      	movs	r3, #250	@ 0xfa
 80079ce:	011a      	lsls	r2, r3, #4
 80079d0:	23fa      	movs	r3, #250	@ 0xfa
 80079d2:	0119      	lsls	r1, r3, #4
 80079d4:	23fa      	movs	r3, #250	@ 0xfa
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	0018      	movs	r0, r3
 80079da:	f005 f875 	bl	800cac8 <SetVocLED>
  InitDone();
 80079de:	f004 ff9f 	bl	800c920 <InitDone>
}
 80079e2:	46c0      	nop			@ (mov r8, r8)
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20000f18 	.word	0x20000f18
 80079ec:	00000bb8 	.word	0x00000bb8

080079f0 <FlashLEDs>:

void FlashLEDs(){
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 80079f6:	1dfb      	adds	r3, r7, #7
 80079f8:	2200      	movs	r2, #0
 80079fa:	701a      	strb	r2, [r3, #0]
 80079fc:	e021      	b.n	8007a42 <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 80079fe:	2201      	movs	r2, #1
 8007a00:	2101      	movs	r1, #1
 8007a02:	2001      	movs	r0, #1
 8007a04:	f005 f816 	bl	800ca34 <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007a08:	4a12      	ldr	r2, [pc, #72]	@ (8007a54 <FlashLEDs+0x64>)
 8007a0a:	23fa      	movs	r3, #250	@ 0xfa
 8007a0c:	0119      	lsls	r1, r3, #4
 8007a0e:	23fa      	movs	r3, #250	@ 0xfa
 8007a10:	011b      	lsls	r3, r3, #4
 8007a12:	0018      	movs	r0, r3
 8007a14:	f004 ffda 	bl	800c9cc <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007a18:	4a0e      	ldr	r2, [pc, #56]	@ (8007a54 <FlashLEDs+0x64>)
 8007a1a:	23fa      	movs	r3, #250	@ 0xfa
 8007a1c:	0119      	lsls	r1, r3, #4
 8007a1e:	23fa      	movs	r3, #250	@ 0xfa
 8007a20:	011b      	lsls	r3, r3, #4
 8007a22:	0018      	movs	r0, r3
 8007a24:	f005 f850 	bl	800cac8 <SetVocLED>
    HAL_Delay(250);
 8007a28:	20fa      	movs	r0, #250	@ 0xfa
 8007a2a:	f006 fb3b 	bl	800e0a4 <HAL_Delay>
    SetLEDsOff();
 8007a2e:	f005 f909 	bl	800cc44 <SetLEDsOff>
    HAL_Delay(250);
 8007a32:	20fa      	movs	r0, #250	@ 0xfa
 8007a34:	f006 fb36 	bl	800e0a4 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007a38:	1dfb      	adds	r3, r7, #7
 8007a3a:	781a      	ldrb	r2, [r3, #0]
 8007a3c:	1dfb      	adds	r3, r7, #7
 8007a3e:	3201      	adds	r2, #1
 8007a40:	701a      	strb	r2, [r3, #0]
 8007a42:	1dfb      	adds	r3, r7, #7
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d9d9      	bls.n	80079fe <FlashLEDs+0xe>
  }
}
 8007a4a:	46c0      	nop			@ (mov r8, r8)
 8007a4c:	46c0      	nop			@ (mov r8, r8)
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	b002      	add	sp, #8
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	00000bb8 	.word	0x00000bb8

08007a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007a5c:	f006 fab2 	bl	800dfc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007a60:	f000 f954 	bl	8007d0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007a64:	f7ff fbde 	bl	8007224 <MX_GPIO_Init>
  MX_DMA_Init();
 8007a68:	f7ff fa28 	bl	8006ebc <MX_DMA_Init>
  MX_I2C1_Init();
 8007a6c:	f7ff fd86 	bl	800757c <MX_I2C1_Init>
  MX_I2S2_Init();
 8007a70:	f7ff fede 	bl	8007830 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007a74:	f005 fd7c 	bl	800d570 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007a78:	f7ff fdc0 	bl	80075fc <MX_I2C2_Init>
  MX_TIM2_Init();
 8007a7c:	f005 fb70 	bl	800d160 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007a80:	f005 fbe2 	bl	800d248 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007a84:	f005 fda8 	bl	800d5d8 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007a88:	f7ff f966 	bl	8006d58 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007a8c:	f014 fa12 	bl	801beb4 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007a90:	f001 f8a8 	bl	8008be4 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007a94:	f005 fd36 	bl	800d504 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007a98:	f005 fc54 	bl	800d344 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007a9c:	4a7c      	ldr	r2, [pc, #496]	@ (8007c90 <main+0x238>)
 8007a9e:	4b7d      	ldr	r3, [pc, #500]	@ (8007c94 <main+0x23c>)
 8007aa0:	0011      	movs	r1, r2
 8007aa2:	0018      	movs	r0, r3
 8007aa4:	f7ff fcee 	bl	8007484 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8007aa8:	f7fe fbea 	bl	8006280 <UserButton_Pressed>
 8007aac:	1e03      	subs	r3, r0, #0
 8007aae:	d004      	beq.n	8007aba <main+0x62>
    EnableESPProg();
 8007ab0:	f014 fad0 	bl	801c054 <EnableESPProg>
    ESP_Programming = true;
 8007ab4:	4b78      	ldr	r3, [pc, #480]	@ (8007c98 <main+0x240>)
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 8007aba:	2003      	movs	r0, #3
 8007abc:	f005 ffb4 	bl	800da28 <SetVerboseLevel>
  BinaryReleaseInfo();
 8007ac0:	f005 ffca 	bl	800da58 <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007ac4:	4975      	ldr	r1, [pc, #468]	@ (8007c9c <main+0x244>)
 8007ac6:	4b76      	ldr	r3, [pc, #472]	@ (8007ca0 <main+0x248>)
 8007ac8:	2201      	movs	r2, #1
 8007aca:	0018      	movs	r0, r3
 8007acc:	f00e fd58 	bl	8016580 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007ad0:	4b74      	ldr	r3, [pc, #464]	@ (8007ca4 <main+0x24c>)
 8007ad2:	0018      	movs	r0, r3
 8007ad4:	f7fe ff46 	bl	8006964 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn))
 8007ad8:	4a73      	ldr	r2, [pc, #460]	@ (8007ca8 <main+0x250>)
 8007ada:	4974      	ldr	r1, [pc, #464]	@ (8007cac <main+0x254>)
 8007adc:	4874      	ldr	r0, [pc, #464]	@ (8007cb0 <main+0x258>)
 8007ade:	230b      	movs	r3, #11
 8007ae0:	f004 f894 	bl	800bc0c <soundInit>
 8007ae4:	0003      	movs	r3, r0
 8007ae6:	001a      	movs	r2, r3
 8007ae8:	2301      	movs	r3, #1
 8007aea:	4053      	eors	r3, r2
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d005      	beq.n	8007afe <main+0xa6>
  {
      errorHandler(__func__, __LINE__, __FILE__);
 8007af2:	4a70      	ldr	r2, [pc, #448]	@ (8007cb4 <main+0x25c>)
 8007af4:	4b70      	ldr	r3, [pc, #448]	@ (8007cb8 <main+0x260>)
 8007af6:	21e5      	movs	r1, #229	@ 0xe5
 8007af8:	0018      	movs	r0, r3
 8007afa:	f005 ffe1 	bl	800dac0 <errorHandler>
  }

  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 8007afe:	4b6f      	ldr	r3, [pc, #444]	@ (8007cbc <main+0x264>)
 8007b00:	4a6f      	ldr	r2, [pc, #444]	@ (8007cc0 <main+0x268>)
 8007b02:	496a      	ldr	r1, [pc, #424]	@ (8007cac <main+0x254>)
 8007b04:	486f      	ldr	r0, [pc, #444]	@ (8007cc4 <main+0x26c>)
 8007b06:	f7ff fb09 	bl	800711c <Gadget_Init>
  Debug("Clock init done");
 8007b0a:	4a6f      	ldr	r2, [pc, #444]	@ (8007cc8 <main+0x270>)
 8007b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8007ccc <main+0x274>)
 8007b0e:	0019      	movs	r1, r3
 8007b10:	2003      	movs	r0, #3
 8007b12:	f005 ff1f 	bl	800d954 <CreateLine>
  if (!probe_sen5x()) {
 8007b16:	f001 f991 	bl	8008e3c <probe_sen5x>
 8007b1a:	1e03      	subs	r3, r0, #0
 8007b1c:	d10a      	bne.n	8007b34 <main+0xdc>
    sen5x_Present = true; // not present
 8007b1e:	4b6c      	ldr	r3, [pc, #432]	@ (8007cd0 <main+0x278>)
 8007b20:	2201      	movs	r2, #1
 8007b22:	701a      	strb	r2, [r3, #0]
    sen5x_Power_Off();      // switch off buck converter
 8007b24:	f001 f962 	bl	8008dec <sen5x_Power_Off>
    Debug("sen5x sensor not detected, polling disabled.");
 8007b28:	4a6a      	ldr	r2, [pc, #424]	@ (8007cd4 <main+0x27c>)
 8007b2a:	4b68      	ldr	r3, [pc, #416]	@ (8007ccc <main+0x274>)
 8007b2c:	0019      	movs	r1, r3
 8007b2e:	2003      	movs	r0, #3
 8007b30:	f005 ff10 	bl	800d954 <CreateLine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007b34:	4b68      	ldr	r3, [pc, #416]	@ (8007cd8 <main+0x280>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d019      	beq.n	8007b70 <main+0x118>
 8007b3c:	4b56      	ldr	r3, [pc, #344]	@ (8007c98 <main+0x240>)
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	2201      	movs	r2, #1
 8007b42:	4053      	eors	r3, r2
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d012      	beq.n	8007b70 <main+0x118>
 8007b4a:	4b64      	ldr	r3, [pc, #400]	@ (8007cdc <main+0x284>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	4053      	eors	r3, r2
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00b      	beq.n	8007b70 <main+0x118>
      MeasurementBusy = UpkeepGadget();
 8007b58:	f7ff fb0e 	bl	8007178 <UpkeepGadget>
 8007b5c:	0003      	movs	r3, r0
 8007b5e:	001a      	movs	r2, r3
 8007b60:	4b5f      	ldr	r3, [pc, #380]	@ (8007ce0 <main+0x288>)
 8007b62:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 8007b64:	f7fd fbc2 	bl	80052ec <ESP_Upkeep>
 8007b68:	0003      	movs	r3, r0
 8007b6a:	001a      	movs	r2, r3
 8007b6c:	4b5d      	ldr	r3, [pc, #372]	@ (8007ce4 <main+0x28c>)
 8007b6e:	701a      	strb	r2, [r3, #0]

    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007b70:	4b59      	ldr	r3, [pc, #356]	@ (8007cd8 <main+0x280>)
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	2201      	movs	r2, #1
 8007b76:	4053      	eors	r3, r2
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00f      	beq.n	8007b9e <main+0x146>
 8007b7e:	4b46      	ldr	r3, [pc, #280]	@ (8007c98 <main+0x240>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	2201      	movs	r2, #1
 8007b84:	4053      	eors	r3, r2
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d008      	beq.n	8007b9e <main+0x146>
 8007b8c:	4b53      	ldr	r3, [pc, #332]	@ (8007cdc <main+0x284>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	2201      	movs	r2, #1
 8007b92:	4053      	eors	r3, r2
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <main+0x146>
      Gadget_Test();
 8007b9a:	f7ff fae5 	bl	8007168 <Gadget_Test>
    }
    Status_Upkeep();
 8007b9e:	f005 f963 	bl	800ce68 <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 8007ba2:	4b51      	ldr	r3, [pc, #324]	@ (8007ce8 <main+0x290>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f005 fe7e 	bl	800d8a8 <TimestampIsReached>
 8007bac:	1e03      	subs	r3, r0, #0
 8007bae:	d00e      	beq.n	8007bce <main+0x176>
      charge = Battery_Upkeep();
 8007bb0:	f005 f961 	bl	800ce76 <Battery_Upkeep>
 8007bb4:	0003      	movs	r3, r0
 8007bb6:	001a      	movs	r2, r3
 8007bb8:	4b4c      	ldr	r3, [pc, #304]	@ (8007cec <main+0x294>)
 8007bba:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007bbc:	f006 fa68 	bl	800e090 <HAL_GetTick>
 8007bc0:	0003      	movs	r3, r0
 8007bc2:	4a4b      	ldr	r2, [pc, #300]	@ (8007cf0 <main+0x298>)
 8007bc4:	189a      	adds	r2, r3, r2
 8007bc6:	4b48      	ldr	r3, [pc, #288]	@ (8007ce8 <main+0x290>)
 8007bc8:	601a      	str	r2, [r3, #0]
      showTime();
 8007bca:	f7fe fb69 	bl	80062a0 <showTime>
    }

    if(((charge > BATTERY_LOW) || (charge == USB_PLUGGED_IN)) && sen5x_Present) {
 8007bce:	4b47      	ldr	r3, [pc, #284]	@ (8007cec <main+0x294>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d803      	bhi.n	8007bde <main+0x186>
 8007bd6:	4b45      	ldr	r3, [pc, #276]	@ (8007cec <main+0x294>)
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d119      	bne.n	8007c12 <main+0x1ba>
 8007bde:	4b3c      	ldr	r3, [pc, #240]	@ (8007cd0 <main+0x278>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d015      	beq.n	8007c12 <main+0x1ba>
      if  (charge > BATTERY_LOW) {
 8007be6:	4b41      	ldr	r3, [pc, #260]	@ (8007cec <main+0x294>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d903      	bls.n	8007bf6 <main+0x19e>
        sen5x_statemachine(0);
 8007bee:	2000      	movs	r0, #0
 8007bf0:	f001 fce0 	bl	80095b4 <sen5x_statemachine>
 8007bf4:	e00d      	b.n	8007c12 <main+0x1ba>
      }
      else {
        if (charge == USB_PLUGGED_IN) {
 8007bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8007cec <main+0x294>)
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d103      	bne.n	8007c06 <main+0x1ae>
          sen5x_statemachine(USB_PLUGGED_IN);
 8007bfe:	2001      	movs	r0, #1
 8007c00:	f001 fcd8 	bl	80095b4 <sen5x_statemachine>
 8007c04:	e005      	b.n	8007c12 <main+0x1ba>
        }
        else  {
          Info("Battery level insufficient for sen5x operation");
 8007c06:	4a3b      	ldr	r2, [pc, #236]	@ (8007cf4 <main+0x29c>)
 8007c08:	4b3b      	ldr	r3, [pc, #236]	@ (8007cf8 <main+0x2a0>)
 8007c0a:	0019      	movs	r1, r3
 8007c0c:	2002      	movs	r0, #2
 8007c0e:	f005 fea1 	bl	800d954 <CreateLine>
        }
      }
    }

    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8007c12:	4b36      	ldr	r3, [pc, #216]	@ (8007cec <main+0x294>)
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d003      	beq.n	8007c22 <main+0x1ca>
 8007c1a:	4b34      	ldr	r3, [pc, #208]	@ (8007cec <main+0x294>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <main+0x1ce>
      FlashLEDs();
 8007c22:	f7ff fee5 	bl	80079f0 <FlashLEDs>
    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 8007c26:	4b31      	ldr	r3, [pc, #196]	@ (8007cec <main+0x294>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d109      	bne.n	8007c42 <main+0x1ea>
 8007c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8007ce4 <main+0x28c>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	2b09      	cmp	r3, #9
 8007c34:	d105      	bne.n	8007c42 <main+0x1ea>
      batteryEmpty = true;
 8007c36:	4b29      	ldr	r3, [pc, #164]	@ (8007cdc <main+0x284>)
 8007c38:	2201      	movs	r2, #1
 8007c3a:	701a      	strb	r2, [r3, #0]
      Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8007c3c:	f7fe fde6 	bl	800680c <Enter_Standby_Mode>
 8007c40:	e002      	b.n	8007c48 <main+0x1f0>
    }
    else{
      batteryEmpty = false;
 8007c42:	4b26      	ldr	r3, [pc, #152]	@ (8007cdc <main+0x284>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	701a      	strb	r2, [r3, #0]
    }
    if (!usbPluggedIn && !userToggle && ESPTransmitDone && !EspTurnedOn) {
 8007c48:	4b2c      	ldr	r3, [pc, #176]	@ (8007cfc <main+0x2a4>)
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	4053      	eors	r3, r2
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d100      	bne.n	8007c58 <main+0x200>
 8007c56:	e76d      	b.n	8007b34 <main+0xdc>
 8007c58:	4b29      	ldr	r3, [pc, #164]	@ (8007d00 <main+0x2a8>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	4053      	eors	r3, r2
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d100      	bne.n	8007c68 <main+0x210>
 8007c66:	e765      	b.n	8007b34 <main+0xdc>
 8007c68:	4b26      	ldr	r3, [pc, #152]	@ (8007d04 <main+0x2ac>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d100      	bne.n	8007c72 <main+0x21a>
 8007c70:	e760      	b.n	8007b34 <main+0xdc>
 8007c72:	4b25      	ldr	r3, [pc, #148]	@ (8007d08 <main+0x2b0>)
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	2201      	movs	r2, #1
 8007c78:	4053      	eors	r3, r2
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d100      	bne.n	8007c82 <main+0x22a>
 8007c80:	e758      	b.n	8007b34 <main+0xdc>
      // ok to operate on battery
      Enter_Stop_Mode(880);
 8007c82:	23dc      	movs	r3, #220	@ 0xdc
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	0018      	movs	r0, r3
 8007c88:	f7fe fde2 	bl	8006850 <Enter_Stop_Mode>
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007c8c:	e752      	b.n	8007b34 <main+0xdc>
 8007c8e:	46c0      	nop			@ (mov r8, r8)
 8007c90:	200021d8 	.word	0x200021d8
 8007c94:	20002198 	.word	0x20002198
 8007c98:	20000f19 	.word	0x20000f19
 8007c9c:	20000f28 	.word	0x20000f28
 8007ca0:	20002310 	.word	0x20002310
 8007ca4:	200011ec 	.word	0x200011ec
 8007ca8:	20002218 	.word	0x20002218
 8007cac:	20000e94 	.word	0x20000e94
 8007cb0:	20000ed0 	.word	0x20000ed0
 8007cb4:	080230a0 	.word	0x080230a0
 8007cb8:	080241f0 	.word	0x080241f0
 8007cbc:	20000cfc 	.word	0x20000cfc
 8007cc0:	200023c8 	.word	0x200023c8
 8007cc4:	20000d5c 	.word	0x20000d5c
 8007cc8:	080230b4 	.word	0x080230b4
 8007ccc:	080230c4 	.word	0x080230c4
 8007cd0:	20000f1c 	.word	0x20000f1c
 8007cd4:	080230c8 	.word	0x080230c8
 8007cd8:	20000f18 	.word	0x20000f18
 8007cdc:	20000f1a 	.word	0x20000f1a
 8007ce0:	20000f1b 	.word	0x20000f1b
 8007ce4:	20000f25 	.word	0x20000f25
 8007ce8:	20000f20 	.word	0x20000f20
 8007cec:	20000f24 	.word	0x20000f24
 8007cf0:	0000c350 	.word	0x0000c350
 8007cf4:	080230f8 	.word	0x080230f8
 8007cf8:	08023128 	.word	0x08023128
 8007cfc:	2000218d 	.word	0x2000218d
 8007d00:	2000218e 	.word	0x2000218e
 8007d04:	2000054f 	.word	0x2000054f
 8007d08:	20000548 	.word	0x20000548

08007d0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007d0c:	b590      	push	{r4, r7, lr}
 8007d0e:	b09d      	sub	sp, #116	@ 0x74
 8007d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d12:	2438      	movs	r4, #56	@ 0x38
 8007d14:	193b      	adds	r3, r7, r4
 8007d16:	0018      	movs	r0, r3
 8007d18:	2338      	movs	r3, #56	@ 0x38
 8007d1a:	001a      	movs	r2, r3
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	f017 fbbb 	bl	801f498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007d22:	2324      	movs	r3, #36	@ 0x24
 8007d24:	18fb      	adds	r3, r7, r3
 8007d26:	0018      	movs	r0, r3
 8007d28:	2314      	movs	r3, #20
 8007d2a:	001a      	movs	r2, r3
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	f017 fbb3 	bl	801f498 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007d32:	003b      	movs	r3, r7
 8007d34:	0018      	movs	r0, r3
 8007d36:	2324      	movs	r3, #36	@ 0x24
 8007d38:	001a      	movs	r2, r3
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	f017 fbac 	bl	801f498 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d40:	4b34      	ldr	r3, [pc, #208]	@ (8007e14 <SystemClock_Config+0x108>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a34      	ldr	r2, [pc, #208]	@ (8007e18 <SystemClock_Config+0x10c>)
 8007d46:	401a      	ands	r2, r3
 8007d48:	4b32      	ldr	r3, [pc, #200]	@ (8007e14 <SystemClock_Config+0x108>)
 8007d4a:	2180      	movs	r1, #128	@ 0x80
 8007d4c:	0109      	lsls	r1, r1, #4
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007d52:	f00c fa27 	bl	80141a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8007d56:	4b31      	ldr	r3, [pc, #196]	@ (8007e1c <SystemClock_Config+0x110>)
 8007d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8007e18 <SystemClock_Config+0x10c>)
 8007d5c:	401a      	ands	r2, r3
 8007d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8007e1c <SystemClock_Config+0x110>)
 8007d60:	2180      	movs	r1, #128	@ 0x80
 8007d62:	0149      	lsls	r1, r1, #5
 8007d64:	430a      	orrs	r2, r1
 8007d66:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8007d68:	193b      	adds	r3, r7, r4
 8007d6a:	2226      	movs	r2, #38	@ 0x26
 8007d6c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007d6e:	193b      	adds	r3, r7, r4
 8007d70:	2280      	movs	r2, #128	@ 0x80
 8007d72:	0052      	lsls	r2, r2, #1
 8007d74:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007d76:	0021      	movs	r1, r4
 8007d78:	187b      	adds	r3, r7, r1
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007d7e:	187b      	adds	r3, r7, r1
 8007d80:	2210      	movs	r2, #16
 8007d82:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007d84:	187b      	adds	r3, r7, r1
 8007d86:	2201      	movs	r2, #1
 8007d88:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007d8a:	187b      	adds	r3, r7, r1
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007d90:	187b      	adds	r3, r7, r1
 8007d92:	0018      	movs	r0, r3
 8007d94:	f00c fa86 	bl	80142a4 <HAL_RCC_OscConfig>
 8007d98:	1e03      	subs	r3, r0, #0
 8007d9a:	d001      	beq.n	8007da0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007d9c:	f000 f900 	bl	8007fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007da0:	2124      	movs	r1, #36	@ 0x24
 8007da2:	187b      	adds	r3, r7, r1
 8007da4:	220f      	movs	r2, #15
 8007da6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007da8:	187b      	adds	r3, r7, r1
 8007daa:	2201      	movs	r2, #1
 8007dac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007dae:	187b      	adds	r3, r7, r1
 8007db0:	2200      	movs	r2, #0
 8007db2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007db4:	187b      	adds	r3, r7, r1
 8007db6:	2200      	movs	r2, #0
 8007db8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007dba:	187b      	adds	r3, r7, r1
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007dc0:	187b      	adds	r3, r7, r1
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	f00c fe41 	bl	8014a4c <HAL_RCC_ClockConfig>
 8007dca:	1e03      	subs	r3, r0, #0
 8007dcc:	d001      	beq.n	8007dd2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8007dce:	f000 f8e7 	bl	8007fa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8007dd2:	003b      	movs	r3, r7
 8007dd4:	226d      	movs	r2, #109	@ 0x6d
 8007dd6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007dd8:	003b      	movs	r3, r7
 8007dda:	2200      	movs	r2, #0
 8007ddc:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007dde:	003b      	movs	r3, r7
 8007de0:	2200      	movs	r2, #0
 8007de2:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007de4:	003b      	movs	r3, r7
 8007de6:	2200      	movs	r2, #0
 8007de8:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8007dea:	003b      	movs	r3, r7
 8007dec:	2280      	movs	r2, #128	@ 0x80
 8007dee:	0252      	lsls	r2, r2, #9
 8007df0:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007df2:	003b      	movs	r3, r7
 8007df4:	2280      	movs	r2, #128	@ 0x80
 8007df6:	04d2      	lsls	r2, r2, #19
 8007df8:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007dfa:	003b      	movs	r3, r7
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	f00d f849 	bl	8014e94 <HAL_RCCEx_PeriphCLKConfig>
 8007e02:	1e03      	subs	r3, r0, #0
 8007e04:	d001      	beq.n	8007e0a <SystemClock_Config+0xfe>
  {
    Error_Handler();
 8007e06:	f000 f8cb 	bl	8007fa0 <Error_Handler>
  }
}
 8007e0a:	46c0      	nop			@ (mov r8, r8)
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	b01d      	add	sp, #116	@ 0x74
 8007e10:	bd90      	pop	{r4, r7, pc}
 8007e12:	46c0      	nop			@ (mov r8, r8)
 8007e14:	40007000 	.word	0x40007000
 8007e18:	ffffe7ff 	.word	0xffffe7ff
 8007e1c:	40021000 	.word	0x40021000

08007e20 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 8007e20:	b590      	push	{r4, r7, lr}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	000a      	movs	r2, r1
 8007e2a:	1cbb      	adds	r3, r7, #2
 8007e2c:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 8007e2e:	4c06      	ldr	r4, [pc, #24]	@ (8007e48 <printString+0x28>)
 8007e30:	1cbb      	adds	r3, r7, #2
 8007e32:	881a      	ldrh	r2, [r3, #0]
 8007e34:	6879      	ldr	r1, [r7, #4]
 8007e36:	4805      	ldr	r0, [pc, #20]	@ (8007e4c <printString+0x2c>)
 8007e38:	0023      	movs	r3, r4
 8007e3a:	f00e fb01 	bl	8016440 <HAL_UART_Transmit>
}
 8007e3e:	46c0      	nop			@ (mov r8, r8)
 8007e40:	46bd      	mov	sp, r7
 8007e42:	b003      	add	sp, #12
 8007e44:	bd90      	pop	{r4, r7, pc}
 8007e46:	46c0      	nop			@ (mov r8, r8)
 8007e48:	0000ffff 	.word	0x0000ffff
 8007e4c:	20002310 	.word	0x20002310

08007e50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007e58:	4936      	ldr	r1, [pc, #216]	@ (8007f34 <HAL_UART_RxCpltCallback+0xe4>)
 8007e5a:	4b37      	ldr	r3, [pc, #220]	@ (8007f38 <HAL_UART_RxCpltCallback+0xe8>)
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	0018      	movs	r0, r3
 8007e60:	f00e fb8e 	bl	8016580 <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 8007e64:	4b33      	ldr	r3, [pc, #204]	@ (8007f34 <HAL_UART_RxCpltCallback+0xe4>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	3b61      	subs	r3, #97	@ 0x61
 8007e6a:	2b13      	cmp	r3, #19
 8007e6c:	d830      	bhi.n	8007ed0 <HAL_UART_RxCpltCallback+0x80>
 8007e6e:	009a      	lsls	r2, r3, #2
 8007e70:	4b32      	ldr	r3, [pc, #200]	@ (8007f3c <HAL_UART_RxCpltCallback+0xec>)
 8007e72:	18d3      	adds	r3, r2, r3
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 8007e78:	4b31      	ldr	r3, [pc, #196]	@ (8007f40 <HAL_UART_RxCpltCallback+0xf0>)
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	f017 f9be 	bl	801f1fc <puts>
      SetVerboseLevel(VERBOSE_ALL);
 8007e80:	2003      	movs	r0, #3
 8007e82:	f005 fdd1 	bl	800da28 <SetVerboseLevel>
      break;
 8007e86:	e04a      	b.n	8007f1e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 8007e88:	f7fb fc88 	bl	800379c <forceNTPupdate>
    break;
 8007e8c:	e047      	b.n	8007f1e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 8007e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8007f44 <HAL_UART_RxCpltCallback+0xf4>)
 8007e90:	0018      	movs	r0, r3
 8007e92:	f017 f9b3 	bl	801f1fc <puts>
      SetVerboseLevel(VERBOSE_INFO);
 8007e96:	2002      	movs	r0, #2
 8007e98:	f005 fdc6 	bl	800da28 <SetVerboseLevel>
      break;
 8007e9c:	e03f      	b.n	8007f1e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 8007e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8007f48 <HAL_UART_RxCpltCallback+0xf8>)
 8007ea0:	0018      	movs	r0, r3
 8007ea2:	f017 f9ab 	bl	801f1fc <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 8007ea6:	2001      	movs	r0, #1
 8007ea8:	f005 fdbe 	bl	800da28 <SetVerboseLevel>
      break;
 8007eac:	e037      	b.n	8007f1e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 8007eae:	4b27      	ldr	r3, [pc, #156]	@ (8007f4c <HAL_UART_RxCpltCallback+0xfc>)
 8007eb0:	0018      	movs	r0, r3
 8007eb2:	f017 f9a3 	bl	801f1fc <puts>
      SetVerboseLevel(VERBOSE_NONE);
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	f005 fdb6 	bl	800da28 <SetVerboseLevel>
      break;
 8007ebc:	e02f      	b.n	8007f1e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 8007ebe:	f006 f8e7 	bl	800e090 <HAL_GetTick>
 8007ec2:	0002      	movs	r2, r0
 8007ec4:	4b22      	ldr	r3, [pc, #136]	@ (8007f50 <HAL_UART_RxCpltCallback+0x100>)
 8007ec6:	601a      	str	r2, [r3, #0]
      break;
 8007ec8:	e029      	b.n	8007f1e <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'t':
      showTime(); // show me the current time
 8007eca:	f7fe f9e9 	bl	80062a0 <showTime>
      break;
 8007ece:	e026      	b.n	8007f1e <HAL_UART_RxCpltCallback+0xce>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8007ed0:	4a20      	ldr	r2, [pc, #128]	@ (8007f54 <HAL_UART_RxCpltCallback+0x104>)
 8007ed2:	4b21      	ldr	r3, [pc, #132]	@ (8007f58 <HAL_UART_RxCpltCallback+0x108>)
 8007ed4:	0019      	movs	r1, r3
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	f005 fd3c 	bl	800d954 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8007edc:	4b1f      	ldr	r3, [pc, #124]	@ (8007f5c <HAL_UART_RxCpltCallback+0x10c>)
 8007ede:	0018      	movs	r0, r3
 8007ee0:	f017 f98c 	bl	801f1fc <puts>
      printf("a - VerboseLevel set to all\r\n");
 8007ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8007f60 <HAL_UART_RxCpltCallback+0x110>)
 8007ee6:	0018      	movs	r0, r3
 8007ee8:	f017 f988 	bl	801f1fc <puts>
      printf("f - Force NTP time synchronization\r\n");
 8007eec:	4b1d      	ldr	r3, [pc, #116]	@ (8007f64 <HAL_UART_RxCpltCallback+0x114>)
 8007eee:	0018      	movs	r0, r3
 8007ef0:	f017 f984 	bl	801f1fc <puts>
      printf("i - VerboseLevel set to info\r\n");
 8007ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8007f68 <HAL_UART_RxCpltCallback+0x118>)
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	f017 f980 	bl	801f1fc <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8007efc:	4b1b      	ldr	r3, [pc, #108]	@ (8007f6c <HAL_UART_RxCpltCallback+0x11c>)
 8007efe:	0018      	movs	r0, r3
 8007f00:	f017 f97c 	bl	801f1fc <puts>
      printf("n - VerboseLevel set to none\r\n");
 8007f04:	4b1a      	ldr	r3, [pc, #104]	@ (8007f70 <HAL_UART_RxCpltCallback+0x120>)
 8007f06:	0018      	movs	r0, r3
 8007f08:	f017 f978 	bl	801f1fc <puts>
      printf("s - Start particle measurement\r\n");
 8007f0c:	4b19      	ldr	r3, [pc, #100]	@ (8007f74 <HAL_UART_RxCpltCallback+0x124>)
 8007f0e:	0018      	movs	r0, r3
 8007f10:	f017 f974 	bl	801f1fc <puts>
      printf("t - Show actual systemtime\r\n");
 8007f14:	4b18      	ldr	r3, [pc, #96]	@ (8007f78 <HAL_UART_RxCpltCallback+0x128>)
 8007f16:	0018      	movs	r0, r3
 8007f18:	f017 f970 	bl	801f1fc <puts>
  break;
 8007f1c:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 8007f1e:	4905      	ldr	r1, [pc, #20]	@ (8007f34 <HAL_UART_RxCpltCallback+0xe4>)
 8007f20:	4b05      	ldr	r3, [pc, #20]	@ (8007f38 <HAL_UART_RxCpltCallback+0xe8>)
 8007f22:	2201      	movs	r2, #1
 8007f24:	0018      	movs	r0, r3
 8007f26:	f00e fb2b 	bl	8016580 <HAL_UART_Receive_IT>
}
 8007f2a:	46c0      	nop			@ (mov r8, r8)
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	b002      	add	sp, #8
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	46c0      	nop			@ (mov r8, r8)
 8007f34:	20000f28 	.word	0x20000f28
 8007f38:	20002310 	.word	0x20002310
 8007f3c:	080241a0 	.word	0x080241a0
 8007f40:	0802312c 	.word	0x0802312c
 8007f44:	08023148 	.word	0x08023148
 8007f48:	08023164 	.word	0x08023164
 8007f4c:	08023184 	.word	0x08023184
 8007f50:	20001214 	.word	0x20001214
 8007f54:	080231a0 	.word	0x080231a0
 8007f58:	080231d0 	.word	0x080231d0
 8007f5c:	080231d4 	.word	0x080231d4
 8007f60:	080231ec 	.word	0x080231ec
 8007f64:	0802320c 	.word	0x0802320c
 8007f68:	08023230 	.word	0x08023230
 8007f6c:	08023250 	.word	0x08023250
 8007f70:	08023274 	.word	0x08023274
 8007f74:	08023294 	.word	0x08023294
 8007f78:	080232b4 	.word	0x080232b4

08007f7c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	0002      	movs	r2, r0
 8007f84:	1dbb      	adds	r3, r7, #6
 8007f86:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8007f88:	1dbb      	adds	r3, r7, #6
 8007f8a:	881a      	ldrh	r2, [r3, #0]
 8007f8c:	2380      	movs	r3, #128	@ 0x80
 8007f8e:	021b      	lsls	r3, r3, #8
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d101      	bne.n	8007f98 <HAL_GPIO_EXTI_Callback+0x1c>
    setuserToggle();
 8007f94:	f004 ff82 	bl	800ce9c <setuserToggle>
  }
}
 8007f98:	46c0      	nop			@ (mov r8, r8)
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	b002      	add	sp, #8
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  Error("Trapped in Error_Handler, wait for reset");
 8007fa4:	4a04      	ldr	r2, [pc, #16]	@ (8007fb8 <Error_Handler+0x18>)
 8007fa6:	4b05      	ldr	r3, [pc, #20]	@ (8007fbc <Error_Handler+0x1c>)
 8007fa8:	0019      	movs	r1, r3
 8007faa:	2001      	movs	r0, #1
 8007fac:	f005 fcd2 	bl	800d954 <CreateLine>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007fb0:	b672      	cpsid	i
}
 8007fb2:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 8007fb4:	46c0      	nop			@ (mov r8, r8)
 8007fb6:	e7fd      	b.n	8007fb4 <Error_Handler+0x14>
 8007fb8:	080232d0 	.word	0x080232d0
 8007fbc:	080231d0 	.word	0x080231d0

08007fc0 <HT_StartMeasurementWrapper>:
static uint32_t MicStamp;

SoundData_t soundData = {0};


static void HT_StartMeasurementWrapper(void) {
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8007fc4:	f7ff fabb 	bl	800753e <HT_StartMeasurement>
}
 8007fc8:	46c0      	nop			@ (mov r8, r8)
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
	...

08007fd0 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8007fd4:	4a04      	ldr	r2, [pc, #16]	@ (8007fe8 <HT_IsMeasurementDoneWrapper+0x18>)
 8007fd6:	4b05      	ldr	r3, [pc, #20]	@ (8007fec <HT_IsMeasurementDoneWrapper+0x1c>)
 8007fd8:	0011      	movs	r1, r2
 8007fda:	0018      	movs	r0, r3
 8007fdc:	f7ff fab6 	bl	800754c <HT_GetMeasurementValues>
 8007fe0:	0003      	movs	r3, r0
}
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	20000f3c 	.word	0x20000f3c
 8007fec:	20000f38 	.word	0x20000f38

08007ff0 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8007ff4:	f7ff f8f9 	bl	80071ea <Gas_StartMeasurement>
}
 8007ff8:	46c0      	nop			@ (mov r8, r8)
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8008000:	b580      	push	{r7, lr}
 8008002:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8008004:	4b03      	ldr	r3, [pc, #12]	@ (8008014 <VOC_IsMeasurementDoneWrapper+0x14>)
 8008006:	0018      	movs	r0, r3
 8008008:	f7ff f8f6 	bl	80071f8 <Gas_GetMeasurementValues>
 800800c:	0003      	movs	r3, r0
}
 800800e:	0018      	movs	r0, r3
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	20000f40 	.word	0x20000f40

08008018 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
}
 800801c:	46c0      	nop			@ (mov r8, r8)
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8008022:	b580      	push	{r7, lr}
 8008024:	af00      	add	r7, sp, #0
  return true;
 8008026:	2301      	movs	r3, #1
}
 8008028:	0018      	movs	r0, r3
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <MIC_IsTestMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
  return MIC_MeasurementDone();
}

bool MIC_IsTestMeasurementDoneWrapper(void) {
 800802e:	b580      	push	{r7, lr}
 8008030:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8008032:	f000 fd85 	bl	8008b40 <MIC_TestMeasurementDone>
 8008036:	0003      	movs	r3, r0
}
 8008038:	0018      	movs	r0, r3
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <setMeasStamp>:
void setMeasStamp(uint32_t nrTicks) {
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  MeasStamp = HAL_GetTick() + nrTicks;
 8008048:	f006 f822 	bl	800e090 <HAL_GetTick>
 800804c:	0002      	movs	r2, r0
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	18d2      	adds	r2, r2, r3
 8008052:	4b03      	ldr	r3, [pc, #12]	@ (8008060 <setMeasStamp+0x20>)
 8008054:	601a      	str	r2, [r3, #0]
}
 8008056:	46c0      	nop			@ (mov r8, r8)
 8008058:	46bd      	mov	sp, r7
 800805a:	b002      	add	sp, #8
 800805c:	bd80      	pop	{r7, pc}
 800805e:	46c0      	nop			@ (mov r8, r8)
 8008060:	20000f84 	.word	0x20000f84

08008064 <testInit>:

void testInit(){
 8008064:	b580      	push	{r7, lr}
 8008066:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8008068:	4b07      	ldr	r3, [pc, #28]	@ (8008088 <testInit+0x24>)
 800806a:	2200      	movs	r2, #0
 800806c:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 800806e:	4b06      	ldr	r3, [pc, #24]	@ (8008088 <testInit+0x24>)
 8008070:	2200      	movs	r2, #0
 8008072:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 8008074:	4b04      	ldr	r3, [pc, #16]	@ (8008088 <testInit+0x24>)
 8008076:	2200      	movs	r2, #0
 8008078:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 800807a:	4b03      	ldr	r3, [pc, #12]	@ (8008088 <testInit+0x24>)
 800807c:	2200      	movs	r2, #0
 800807e:	705a      	strb	r2, [r3, #1]
}
 8008080:	46c0      	nop			@ (mov r8, r8)
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	46c0      	nop			@ (mov r8, r8)
 8008088:	20000f7c 	.word	0x20000f7c

0800808c <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 800808c:	b5b0      	push	{r4, r5, r7, lr}
 800808e:	b092      	sub	sp, #72	@ 0x48
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  //MeasState = MEAS_STATE_INIT;
  testInit();
 8008098:	f7ff ffe4 	bl	8008064 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 800809c:	4b6e      	ldr	r3, [pc, #440]	@ (8008258 <Meas_Init+0x1cc>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d103      	bne.n	80080ac <Meas_Init+0x20>
 80080a4:	4b6c      	ldr	r3, [pc, #432]	@ (8008258 <Meas_Init+0x1cc>)
 80080a6:	785b      	ldrb	r3, [r3, #1]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d068      	beq.n	800817e <Meas_Init+0xf2>
    I2CSensors_Init(sensorI2C);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	0018      	movs	r0, r3
 80080b0:	f7fd fd7c 	bl	8005bac <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 80080b4:	f7ff fa5a 	bl	800756c <HT_DeviceConnected>
 80080b8:	0003      	movs	r3, r0
 80080ba:	001a      	movs	r2, r3
 80080bc:	2301      	movs	r3, #1
 80080be:	4053      	eors	r3, r2
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00c      	beq.n	80080e0 <Meas_Init+0x54>
       Error("Humidity / Temperature sensor NOT connected!");
 80080c6:	4a65      	ldr	r2, [pc, #404]	@ (800825c <Meas_Init+0x1d0>)
 80080c8:	4b65      	ldr	r3, [pc, #404]	@ (8008260 <Meas_Init+0x1d4>)
 80080ca:	0019      	movs	r1, r3
 80080cc:	2001      	movs	r0, #1
 80080ce:	f005 fc41 	bl	800d954 <CreateLine>
       MeasTest.HT_Tested = false;
 80080d2:	4b64      	ldr	r3, [pc, #400]	@ (8008264 <Meas_Init+0x1d8>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 80080d8:	4b5f      	ldr	r3, [pc, #380]	@ (8008258 <Meas_Init+0x1cc>)
 80080da:	2200      	movs	r2, #0
 80080dc:	701a      	strb	r2, [r3, #0]
 80080de:	e008      	b.n	80080f2 <Meas_Init+0x66>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 80080e0:	4b60      	ldr	r3, [pc, #384]	@ (8008264 <Meas_Init+0x1d8>)
 80080e2:	2201      	movs	r2, #1
 80080e4:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 80080e6:	4a60      	ldr	r2, [pc, #384]	@ (8008268 <Meas_Init+0x1dc>)
 80080e8:	4b60      	ldr	r3, [pc, #384]	@ (800826c <Meas_Init+0x1e0>)
 80080ea:	0019      	movs	r1, r3
 80080ec:	2003      	movs	r0, #3
 80080ee:	f005 fc31 	bl	800d954 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 80080f2:	f7ff f88e 	bl	8007212 <Gas_DeviceConnected>
 80080f6:	0003      	movs	r3, r0
 80080f8:	001a      	movs	r2, r3
 80080fa:	2301      	movs	r3, #1
 80080fc:	4053      	eors	r3, r2
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00c      	beq.n	800811e <Meas_Init+0x92>
      MeasTest.VOC_Tested = false;
 8008104:	4b57      	ldr	r3, [pc, #348]	@ (8008264 <Meas_Init+0x1d8>)
 8008106:	2200      	movs	r2, #0
 8008108:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 800810a:	4a59      	ldr	r2, [pc, #356]	@ (8008270 <Meas_Init+0x1e4>)
 800810c:	4b54      	ldr	r3, [pc, #336]	@ (8008260 <Meas_Init+0x1d4>)
 800810e:	0019      	movs	r1, r3
 8008110:	2001      	movs	r0, #1
 8008112:	f005 fc1f 	bl	800d954 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8008116:	4b50      	ldr	r3, [pc, #320]	@ (8008258 <Meas_Init+0x1cc>)
 8008118:	2200      	movs	r2, #0
 800811a:	705a      	strb	r2, [r3, #1]
 800811c:	e008      	b.n	8008130 <Meas_Init+0xa4>
    }else{
      MeasTest.VOC_Tested = true;
 800811e:	4b51      	ldr	r3, [pc, #324]	@ (8008264 <Meas_Init+0x1d8>)
 8008120:	2201      	movs	r2, #1
 8008122:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8008124:	4a53      	ldr	r2, [pc, #332]	@ (8008274 <Meas_Init+0x1e8>)
 8008126:	4b51      	ldr	r3, [pc, #324]	@ (800826c <Meas_Init+0x1e0>)
 8008128:	0019      	movs	r1, r3
 800812a:	2003      	movs	r0, #3
 800812c:	f005 fc12 	bl	800d954 <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8008130:	4b4c      	ldr	r3, [pc, #304]	@ (8008264 <Meas_Init+0x1d8>)
 8008132:	785b      	ldrb	r3, [r3, #1]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d009      	beq.n	800814c <Meas_Init+0xc0>
 8008138:	4b4a      	ldr	r3, [pc, #296]	@ (8008264 <Meas_Init+0x1d8>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d005      	beq.n	800814c <Meas_Init+0xc0>
      SetDBLED(false, true, false);
 8008140:	2200      	movs	r2, #0
 8008142:	2101      	movs	r1, #1
 8008144:	2000      	movs	r0, #0
 8008146:	f004 fc75 	bl	800ca34 <SetDBLED>
 800814a:	e018      	b.n	800817e <Meas_Init+0xf2>
    }
    else{
      SetDBLED(true, false, false);
 800814c:	2200      	movs	r2, #0
 800814e:	2100      	movs	r1, #0
 8008150:	2001      	movs	r0, #1
 8008152:	f004 fc6f 	bl	800ca34 <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8008156:	4b48      	ldr	r3, [pc, #288]	@ (8008278 <Meas_Init+0x1ec>)
 8008158:	2200      	movs	r2, #0
 800815a:	2101      	movs	r1, #1
 800815c:	0018      	movs	r0, r3
 800815e:	f007 fa12 	bl	800f586 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8008162:	2380      	movs	r3, #128	@ 0x80
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	4844      	ldr	r0, [pc, #272]	@ (8008278 <Meas_Init+0x1ec>)
 8008168:	2201      	movs	r2, #1
 800816a:	0019      	movs	r1, r3
 800816c:	f007 fa0b 	bl	800f586 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8008170:	2380      	movs	r3, #128	@ 0x80
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4840      	ldr	r0, [pc, #256]	@ (8008278 <Meas_Init+0x1ec>)
 8008176:	2201      	movs	r2, #1
 8008178:	0019      	movs	r1, r3
 800817a:	f007 fa04 	bl	800f586 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 800817e:	4b36      	ldr	r3, [pc, #216]	@ (8008258 <Meas_Init+0x1cc>)
 8008180:	78db      	ldrb	r3, [r3, #3]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d008      	beq.n	8008198 <Meas_Init+0x10c>
//    MIC_Init(micI2s);
//    Meas_TestStart();
    Info("Meas_Init calls enableMicrophone");
 8008186:	4a3d      	ldr	r2, [pc, #244]	@ (800827c <Meas_Init+0x1f0>)
 8008188:	4b3d      	ldr	r3, [pc, #244]	@ (8008280 <Meas_Init+0x1f4>)
 800818a:	0019      	movs	r1, r3
 800818c:	2002      	movs	r0, #2
 800818e:	f005 fbe1 	bl	800d954 <CreateLine>
          enableMicrophone(true);
 8008192:	2001      	movs	r0, #1
 8008194:	f003 fda2 	bl	800bcdc <enableMicrophone>

  }
  uint8_t offset = 0;
 8008198:	2547      	movs	r5, #71	@ 0x47
 800819a:	197b      	adds	r3, r7, r5
 800819c:	2200      	movs	r2, #0
 800819e:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 80081a0:	197b      	adds	r3, r7, r5
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	197a      	adds	r2, r7, r5
 80081a6:	1c59      	adds	r1, r3, #1
 80081a8:	7011      	strb	r1, [r2, #0]
 80081aa:	4a2b      	ldr	r2, [pc, #172]	@ (8008258 <Meas_Init+0x1cc>)
 80081ac:	7814      	ldrb	r4, [r2, #0]
 80081ae:	4a35      	ldr	r2, [pc, #212]	@ (8008284 <Meas_Init+0x1f8>)
 80081b0:	0119      	lsls	r1, r3, #4
 80081b2:	4835      	ldr	r0, [pc, #212]	@ (8008288 <Meas_Init+0x1fc>)
 80081b4:	5088      	str	r0, [r1, r2]
 80081b6:	4933      	ldr	r1, [pc, #204]	@ (8008284 <Meas_Init+0x1f8>)
 80081b8:	011a      	lsls	r2, r3, #4
 80081ba:	188a      	adds	r2, r1, r2
 80081bc:	3204      	adds	r2, #4
 80081be:	4933      	ldr	r1, [pc, #204]	@ (800828c <Meas_Init+0x200>)
 80081c0:	6011      	str	r1, [r2, #0]
 80081c2:	4930      	ldr	r1, [pc, #192]	@ (8008284 <Meas_Init+0x1f8>)
 80081c4:	011a      	lsls	r2, r3, #4
 80081c6:	188a      	adds	r2, r1, r2
 80081c8:	3208      	adds	r2, #8
 80081ca:	4931      	ldr	r1, [pc, #196]	@ (8008290 <Meas_Init+0x204>)
 80081cc:	6011      	str	r1, [r2, #0]
 80081ce:	4a2d      	ldr	r2, [pc, #180]	@ (8008284 <Meas_Init+0x1f8>)
 80081d0:	011b      	lsls	r3, r3, #4
 80081d2:	18d3      	adds	r3, r2, r3
 80081d4:	330c      	adds	r3, #12
 80081d6:	1c22      	adds	r2, r4, #0
 80081d8:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 80081da:	197b      	adds	r3, r7, r5
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	197a      	adds	r2, r7, r5
 80081e0:	1c59      	adds	r1, r3, #1
 80081e2:	7011      	strb	r1, [r2, #0]
 80081e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008258 <Meas_Init+0x1cc>)
 80081e6:	7854      	ldrb	r4, [r2, #1]
 80081e8:	4a26      	ldr	r2, [pc, #152]	@ (8008284 <Meas_Init+0x1f8>)
 80081ea:	0119      	lsls	r1, r3, #4
 80081ec:	4829      	ldr	r0, [pc, #164]	@ (8008294 <Meas_Init+0x208>)
 80081ee:	5088      	str	r0, [r1, r2]
 80081f0:	4924      	ldr	r1, [pc, #144]	@ (8008284 <Meas_Init+0x1f8>)
 80081f2:	011a      	lsls	r2, r3, #4
 80081f4:	188a      	adds	r2, r1, r2
 80081f6:	3204      	adds	r2, #4
 80081f8:	4927      	ldr	r1, [pc, #156]	@ (8008298 <Meas_Init+0x20c>)
 80081fa:	6011      	str	r1, [r2, #0]
 80081fc:	4921      	ldr	r1, [pc, #132]	@ (8008284 <Meas_Init+0x1f8>)
 80081fe:	011a      	lsls	r2, r3, #4
 8008200:	188a      	adds	r2, r1, r2
 8008202:	3208      	adds	r2, #8
 8008204:	4925      	ldr	r1, [pc, #148]	@ (800829c <Meas_Init+0x210>)
 8008206:	6011      	str	r1, [r2, #0]
 8008208:	4a1e      	ldr	r2, [pc, #120]	@ (8008284 <Meas_Init+0x1f8>)
 800820a:	011b      	lsls	r3, r3, #4
 800820c:	18d3      	adds	r3, r2, r3
 800820e:	330c      	adds	r3, #12
 8008210:	1c22      	adds	r2, r4, #0
 8008212:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8008214:	197b      	adds	r3, r7, r5
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	197a      	adds	r2, r7, r5
 800821a:	1c59      	adds	r1, r3, #1
 800821c:	7011      	strb	r1, [r2, #0]
 800821e:	4a0e      	ldr	r2, [pc, #56]	@ (8008258 <Meas_Init+0x1cc>)
 8008220:	7894      	ldrb	r4, [r2, #2]
 8008222:	4a18      	ldr	r2, [pc, #96]	@ (8008284 <Meas_Init+0x1f8>)
 8008224:	0119      	lsls	r1, r3, #4
 8008226:	481e      	ldr	r0, [pc, #120]	@ (80082a0 <Meas_Init+0x214>)
 8008228:	5088      	str	r0, [r1, r2]
 800822a:	4916      	ldr	r1, [pc, #88]	@ (8008284 <Meas_Init+0x1f8>)
 800822c:	011a      	lsls	r2, r3, #4
 800822e:	188a      	adds	r2, r1, r2
 8008230:	3204      	adds	r2, #4
 8008232:	491c      	ldr	r1, [pc, #112]	@ (80082a4 <Meas_Init+0x218>)
 8008234:	6011      	str	r1, [r2, #0]
 8008236:	4913      	ldr	r1, [pc, #76]	@ (8008284 <Meas_Init+0x1f8>)
 8008238:	011a      	lsls	r2, r3, #4
 800823a:	188a      	adds	r2, r1, r2
 800823c:	3208      	adds	r2, #8
 800823e:	491a      	ldr	r1, [pc, #104]	@ (80082a8 <Meas_Init+0x21c>)
 8008240:	6011      	str	r1, [r2, #0]
 8008242:	4a10      	ldr	r2, [pc, #64]	@ (8008284 <Meas_Init+0x1f8>)
 8008244:	011b      	lsls	r3, r3, #4
 8008246:	18d3      	adds	r3, r2, r3
 8008248:	330c      	adds	r3, #12
 800824a:	1c22      	adds	r2, r4, #0
 800824c:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 800824e:	46c0      	nop			@ (mov r8, r8)
 8008250:	46bd      	mov	sp, r7
 8008252:	b012      	add	sp, #72	@ 0x48
 8008254:	bdb0      	pop	{r4, r5, r7, pc}
 8008256:	46c0      	nop			@ (mov r8, r8)
 8008258:	20000f78 	.word	0x20000f78
 800825c:	080232fc 	.word	0x080232fc
 8008260:	0802332c 	.word	0x0802332c
 8008264:	20000f7c 	.word	0x20000f7c
 8008268:	08023330 	.word	0x08023330
 800826c:	0802335c 	.word	0x0802335c
 8008270:	08023360 	.word	0x08023360
 8008274:	0802337c 	.word	0x0802337c
 8008278:	50000400 	.word	0x50000400
 800827c:	08023394 	.word	0x08023394
 8008280:	080233b8 	.word	0x080233b8
 8008284:	20000f48 	.word	0x20000f48
 8008288:	08007fc1 	.word	0x08007fc1
 800828c:	08007fd1 	.word	0x08007fd1
 8008290:	20000f44 	.word	0x20000f44
 8008294:	08007ff1 	.word	0x08007ff1
 8008298:	08008001 	.word	0x08008001
 800829c:	20000f45 	.word	0x20000f45
 80082a0:	08008019 	.word	0x08008019
 80082a4:	08008023 	.word	0x08008023
 80082a8:	20000f46 	.word	0x20000f46

080082ac <StartMeasurements>:

void StartMeasurements(void) {
 80082ac:	b580      	push	{r7, lr}
 80082ae:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80082b0:	4b10      	ldr	r3, [pc, #64]	@ (80082f4 <StartMeasurements+0x48>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	701a      	strb	r2, [r3, #0]
 80082b6:	e015      	b.n	80082e4 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80082b8:	4b0e      	ldr	r3, [pc, #56]	@ (80082f4 <StartMeasurements+0x48>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	4a0e      	ldr	r2, [pc, #56]	@ (80082f8 <StartMeasurements+0x4c>)
 80082be:	011b      	lsls	r3, r3, #4
 80082c0:	18d3      	adds	r3, r2, r3
 80082c2:	330c      	adds	r3, #12
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d006      	beq.n	80082d8 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 80082ca:	4b0a      	ldr	r3, [pc, #40]	@ (80082f4 <StartMeasurements+0x48>)
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	001a      	movs	r2, r3
 80082d0:	4b09      	ldr	r3, [pc, #36]	@ (80082f8 <StartMeasurements+0x4c>)
 80082d2:	0112      	lsls	r2, r2, #4
 80082d4:	58d3      	ldr	r3, [r2, r3]
 80082d6:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80082d8:	4b06      	ldr	r3, [pc, #24]	@ (80082f4 <StartMeasurements+0x48>)
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	3301      	adds	r3, #1
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	4b04      	ldr	r3, [pc, #16]	@ (80082f4 <StartMeasurements+0x48>)
 80082e2:	701a      	strb	r2, [r3, #0]
 80082e4:	4b03      	ldr	r3, [pc, #12]	@ (80082f4 <StartMeasurements+0x48>)
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d9e5      	bls.n	80082b8 <StartMeasurements+0xc>
    }
  }
}
 80082ec:	46c0      	nop			@ (mov r8, r8)
 80082ee:	46c0      	nop			@ (mov r8, r8)
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20000f80 	.word	0x20000f80
 80082f8:	20000f48 	.word	0x20000f48

080082fc <Meas_Test>:

void Meas_Test(){
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8008300:	4b23      	ldr	r3, [pc, #140]	@ (8008390 <Meas_Test+0x94>)
 8008302:	78db      	ldrb	r3, [r3, #3]
 8008304:	2201      	movs	r2, #1
 8008306:	4053      	eors	r3, r2
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <Meas_Test+0x16>
    ESP_WakeTest();
 800830e:	f7fc fed7 	bl	80050c0 <ESP_WakeTest>
  }

  if(!MeasTest.MIC_Tested){
 8008312:	4b1f      	ldr	r3, [pc, #124]	@ (8008390 <Meas_Test+0x94>)
 8008314:	789b      	ldrb	r3, [r3, #2]
 8008316:	2201      	movs	r2, #1
 8008318:	4053      	eors	r3, r2
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b00      	cmp	r3, #0
 800831e:	d01b      	beq.n	8008358 <Meas_Test+0x5c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8008320:	f7ff fe85 	bl	800802e <MIC_IsTestMeasurementDoneWrapper>
 8008324:	1e03      	subs	r3, r0, #0
 8008326:	d00b      	beq.n	8008340 <Meas_Test+0x44>
//      Info("In Meas_Test return of MIC_IsTestMeasurementDoneWrapper = 1");
      MeasTest.MIC_Tested = true;
 8008328:	4b19      	ldr	r3, [pc, #100]	@ (8008390 <Meas_Test+0x94>)
 800832a:	2201      	movs	r2, #1
 800832c:	709a      	strb	r2, [r3, #2]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 800832e:	23fa      	movs	r3, #250	@ 0xfa
 8008330:	011a      	lsls	r2, r3, #4
 8008332:	4918      	ldr	r1, [pc, #96]	@ (8008394 <Meas_Test+0x98>)
 8008334:	23fa      	movs	r3, #250	@ 0xfa
 8008336:	011b      	lsls	r3, r3, #4
 8008338:	0018      	movs	r0, r3
 800833a:	f004 fb47 	bl	800c9cc <SetStatusLED>
 800833e:	e00b      	b.n	8008358 <Meas_Test+0x5c>
    }
    else{
      if (micSettlingComplete()) {
 8008340:	f003 fca8 	bl	800bc94 <micSettlingComplete>
 8008344:	1e03      	subs	r3, r0, #0
 8008346:	d007      	beq.n	8008358 <Meas_Test+0x5c>
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 8008348:	23fa      	movs	r3, #250	@ 0xfa
 800834a:	011a      	lsls	r2, r3, #4
 800834c:	23fa      	movs	r3, #250	@ 0xfa
 800834e:	011b      	lsls	r3, r3, #4
 8008350:	4810      	ldr	r0, [pc, #64]	@ (8008394 <Meas_Test+0x98>)
 8008352:	0019      	movs	r1, r3
 8008354:	f004 fb3a 	bl	800c9cc <SetStatusLED>
      }
    }
  }
//  print("HT_Tested: %d, VOC_Tested: %d, ESP_Tested: %d, MIC_Tested: %d\r\n", MeasTest.HT_Tested, MeasTest.VOC_Tested, MeasTest.ESP_Tested, MeasTest.MIC_Tested);
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8008358:	4b0d      	ldr	r3, [pc, #52]	@ (8008390 <Meas_Test+0x94>)
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d013      	beq.n	8008388 <Meas_Test+0x8c>
 8008360:	4b0b      	ldr	r3, [pc, #44]	@ (8008390 <Meas_Test+0x94>)
 8008362:	785b      	ldrb	r3, [r3, #1]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00f      	beq.n	8008388 <Meas_Test+0x8c>
 8008368:	4b09      	ldr	r3, [pc, #36]	@ (8008390 <Meas_Test+0x94>)
 800836a:	78db      	ldrb	r3, [r3, #3]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00b      	beq.n	8008388 <Meas_Test+0x8c>
 8008370:	4b07      	ldr	r3, [pc, #28]	@ (8008390 <Meas_Test+0x94>)
 8008372:	789b      	ldrb	r3, [r3, #2]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d007      	beq.n	8008388 <Meas_Test+0x8c>
    Info("Test completed");
 8008378:	4a07      	ldr	r2, [pc, #28]	@ (8008398 <Meas_Test+0x9c>)
 800837a:	4b08      	ldr	r3, [pc, #32]	@ (800839c <Meas_Test+0xa0>)
 800837c:	0019      	movs	r1, r3
 800837e:	2002      	movs	r0, #2
 8008380:	f005 fae8 	bl	800d954 <CreateLine>
    SetTestDone();
 8008384:	f7ff faf0 	bl	8007968 <SetTestDone>
  }
}
 8008388:	46c0      	nop			@ (mov r8, r8)
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	46c0      	nop			@ (mov r8, r8)
 8008390:	20000f7c 	.word	0x20000f7c
 8008394:	00000bb8 	.word	0x00000bb8
 8008398:	080233bc 	.word	0x080233bc
 800839c:	080233b8 	.word	0x080233b8

080083a0 <ResetMeasurements>:
void ResetMeasurements(void) {
 80083a0:	b580      	push	{r7, lr}
 80083a2:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 80083a4:	4b0a      	ldr	r3, [pc, #40]	@ (80083d0 <ResetMeasurements+0x30>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 80083aa:	4b09      	ldr	r3, [pc, #36]	@ (80083d0 <ResetMeasurements+0x30>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 80083b0:	4b07      	ldr	r3, [pc, #28]	@ (80083d0 <ResetMeasurements+0x30>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 80083b6:	4b06      	ldr	r3, [pc, #24]	@ (80083d0 <ResetMeasurements+0x30>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 80083bc:	4b04      	ldr	r3, [pc, #16]	@ (80083d0 <ResetMeasurements+0x30>)
 80083be:	2200      	movs	r2, #0
 80083c0:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 80083c2:	4b03      	ldr	r3, [pc, #12]	@ (80083d0 <ResetMeasurements+0x30>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	739a      	strb	r2, [r3, #14]
//  MeasurementCtx.MIC_measurementDone = false;
}
 80083c8:	46c0      	nop			@ (mov r8, r8)
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	46c0      	nop			@ (mov r8, r8)
 80083d0:	20000f38 	.word	0x20000f38

080083d4 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80083d8:	4b18      	ldr	r3, [pc, #96]	@ (800843c <MeasurementsCompleted+0x68>)
 80083da:	2200      	movs	r2, #0
 80083dc:	701a      	strb	r2, [r3, #0]
 80083de:	e024      	b.n	800842a <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80083e0:	4b16      	ldr	r3, [pc, #88]	@ (800843c <MeasurementsCompleted+0x68>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	4a16      	ldr	r2, [pc, #88]	@ (8008440 <MeasurementsCompleted+0x6c>)
 80083e6:	011b      	lsls	r3, r3, #4
 80083e8:	18d3      	adds	r3, r2, r3
 80083ea:	330c      	adds	r3, #12
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d015      	beq.n	800841e <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 80083f2:	4b12      	ldr	r3, [pc, #72]	@ (800843c <MeasurementsCompleted+0x68>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	4a12      	ldr	r2, [pc, #72]	@ (8008440 <MeasurementsCompleted+0x6c>)
 80083f8:	011b      	lsls	r3, r3, #4
 80083fa:	18d3      	adds	r3, r2, r3
 80083fc:	3304      	adds	r3, #4
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4798      	blx	r3
 8008402:	1e03      	subs	r3, r0, #0
 8008404:	d009      	beq.n	800841a <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8008406:	4b0d      	ldr	r3, [pc, #52]	@ (800843c <MeasurementsCompleted+0x68>)
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	4a0d      	ldr	r2, [pc, #52]	@ (8008440 <MeasurementsCompleted+0x6c>)
 800840c:	011b      	lsls	r3, r3, #4
 800840e:	18d3      	adds	r3, r2, r3
 8008410:	3308      	adds	r3, #8
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2201      	movs	r2, #1
 8008416:	701a      	strb	r2, [r3, #0]
 8008418:	e001      	b.n	800841e <MeasurementsCompleted+0x4a>
      }else {
        return false;
 800841a:	2300      	movs	r3, #0
 800841c:	e00a      	b.n	8008434 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 800841e:	4b07      	ldr	r3, [pc, #28]	@ (800843c <MeasurementsCompleted+0x68>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	3301      	adds	r3, #1
 8008424:	b2da      	uxtb	r2, r3
 8008426:	4b05      	ldr	r3, [pc, #20]	@ (800843c <MeasurementsCompleted+0x68>)
 8008428:	701a      	strb	r2, [r3, #0]
 800842a:	4b04      	ldr	r3, [pc, #16]	@ (800843c <MeasurementsCompleted+0x68>)
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2b02      	cmp	r3, #2
 8008430:	d9d6      	bls.n	80083e0 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8008432:	2301      	movs	r3, #1
}
 8008434:	0018      	movs	r0, r3
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	46c0      	nop			@ (mov r8, r8)
 800843c:	20000f80 	.word	0x20000f80
 8008440:	20000f48 	.word	0x20000f48

08008444 <Mic_Upkeep>:


MicrophoneState Mic_Upkeep(){
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800844a:	4b78      	ldr	r3, [pc, #480]	@ (800862c <Mic_Upkeep+0x1e8>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b03      	cmp	r3, #3
 8008450:	d100      	bne.n	8008454 <Mic_Upkeep+0x10>
 8008452:	e0b8      	b.n	80085c6 <Mic_Upkeep+0x182>
 8008454:	dd00      	ble.n	8008458 <Mic_Upkeep+0x14>
 8008456:	e0d3      	b.n	8008600 <Mic_Upkeep+0x1bc>
 8008458:	2b02      	cmp	r3, #2
 800845a:	d037      	beq.n	80084cc <Mic_Upkeep+0x88>
 800845c:	dd00      	ble.n	8008460 <Mic_Upkeep+0x1c>
 800845e:	e0cf      	b.n	8008600 <Mic_Upkeep+0x1bc>
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <Mic_Upkeep+0x26>
 8008464:	2b01      	cmp	r3, #1
 8008466:	d014      	beq.n	8008492 <Mic_Upkeep+0x4e>
 8008468:	e0ca      	b.n	8008600 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true))
 800846a:	2001      	movs	r0, #1
 800846c:	f003 fc36 	bl	800bcdc <enableMicrophone>
 8008470:	0003      	movs	r3, r0
 8008472:	001a      	movs	r2, r3
 8008474:	2301      	movs	r3, #1
 8008476:	4053      	eors	r3, r2
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d005      	beq.n	800848a <Mic_Upkeep+0x46>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800847e:	4a6c      	ldr	r2, [pc, #432]	@ (8008630 <Mic_Upkeep+0x1ec>)
 8008480:	4b6c      	ldr	r3, [pc, #432]	@ (8008634 <Mic_Upkeep+0x1f0>)
 8008482:	21ca      	movs	r1, #202	@ 0xca
 8008484:	0018      	movs	r0, r3
 8008486:	f005 fb1b 	bl	800dac0 <errorHandler>
      }
  MicState = MIC_STATE_START_MEASUREMENT;
 800848a:	4b68      	ldr	r3, [pc, #416]	@ (800862c <Mic_Upkeep+0x1e8>)
 800848c:	2201      	movs	r2, #1
 800848e:	701a      	strb	r2, [r3, #0]
    break;
 8008490:	e0c5      	b.n	800861e <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8008492:	f003 fbff 	bl	800bc94 <micSettlingComplete>
 8008496:	1e03      	subs	r3, r0, #0
 8008498:	d105      	bne.n	80084a6 <Mic_Upkeep+0x62>
 800849a:	4b67      	ldr	r3, [pc, #412]	@ (8008638 <Mic_Upkeep+0x1f4>)
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d100      	bne.n	80084a6 <Mic_Upkeep+0x62>
 80084a4:	e0b6      	b.n	8008614 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 80084a6:	f003 fc83 	bl	800bdb0 <startSPLcalculation>
 80084aa:	0003      	movs	r3, r0
 80084ac:	001a      	movs	r2, r3
 80084ae:	2301      	movs	r3, #1
 80084b0:	4053      	eors	r3, r2
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d005      	beq.n	80084c4 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 80084b8:	4a5d      	ldr	r2, [pc, #372]	@ (8008630 <Mic_Upkeep+0x1ec>)
 80084ba:	4b5e      	ldr	r3, [pc, #376]	@ (8008634 <Mic_Upkeep+0x1f0>)
 80084bc:	21d3      	movs	r1, #211	@ 0xd3
 80084be:	0018      	movs	r0, r3
 80084c0:	f005 fafe 	bl	800dac0 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 80084c4:	4b59      	ldr	r3, [pc, #356]	@ (800862c <Mic_Upkeep+0x1e8>)
 80084c6:	2202      	movs	r2, #2
 80084c8:	701a      	strb	r2, [r3, #0]
    }
    break;
 80084ca:	e0a3      	b.n	8008614 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 80084cc:	4b5b      	ldr	r3, [pc, #364]	@ (800863c <Mic_Upkeep+0x1f8>)
 80084ce:	2201      	movs	r2, #1
 80084d0:	2101      	movs	r1, #1
 80084d2:	0018      	movs	r0, r3
 80084d4:	f003 fac0 	bl	800ba58 <getSoundData>
 80084d8:	1e03      	subs	r3, r0, #0
 80084da:	d100      	bne.n	80084de <Mic_Upkeep+0x9a>
 80084dc:	e09c      	b.n	8008618 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 80084de:	f003 fbb9 	bl	800bc54 <clearMaximumAmplitude>
//      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
//             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
//             soundData.peak_amp_mPa_fr_2dp);
      char dBbuffer[8];

      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 80084e2:	4b56      	ldr	r3, [pc, #344]	@ (800863c <Mic_Upkeep+0x1f8>)
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	001a      	movs	r2, r3
 80084e8:	4b54      	ldr	r3, [pc, #336]	@ (800863c <Mic_Upkeep+0x1f8>)
 80084ea:	785b      	ldrb	r3, [r3, #1]
 80084ec:	4954      	ldr	r1, [pc, #336]	@ (8008640 <Mic_Upkeep+0x1fc>)
 80084ee:	0038      	movs	r0, r7
 80084f0:	f016 fe8e 	bl	801f210 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 80084f4:	4b51      	ldr	r3, [pc, #324]	@ (800863c <Mic_Upkeep+0x1f8>)
 80084f6:	89db      	ldrh	r3, [r3, #14]
 80084f8:	001a      	movs	r2, r3
 80084fa:	4b50      	ldr	r3, [pc, #320]	@ (800863c <Mic_Upkeep+0x1f8>)
 80084fc:	7c1b      	ldrb	r3, [r3, #16]
 80084fe:	4951      	ldr	r1, [pc, #324]	@ (8008644 <Mic_Upkeep+0x200>)
 8008500:	4851      	ldr	r0, [pc, #324]	@ (8008648 <Mic_Upkeep+0x204>)
 8008502:	f016 fe85 	bl	801f210 <siprintf>
      dBValue = atof(dBbuffer);
 8008506:	003b      	movs	r3, r7
 8008508:	0018      	movs	r0, r3
 800850a:	f015 fa31 	bl	801d970 <atof>
 800850e:	0002      	movs	r2, r0
 8008510:	000b      	movs	r3, r1
 8008512:	0010      	movs	r0, r2
 8008514:	0019      	movs	r1, r3
 8008516:	f7fa ffed 	bl	80034f4 <__aeabi_d2f>
 800851a:	1c02      	adds	r2, r0, #0
 800851c:	4b4b      	ldr	r3, [pc, #300]	@ (800864c <Mic_Upkeep+0x208>)
 800851e:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008520:	4b4a      	ldr	r3, [pc, #296]	@ (800864c <Mic_Upkeep+0x208>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	494a      	ldr	r1, [pc, #296]	@ (8008650 <Mic_Upkeep+0x20c>)
 8008526:	1c18      	adds	r0, r3, #0
 8008528:	f7f8 fd3a 	bl	8000fa0 <__aeabi_fmul>
 800852c:	1c03      	adds	r3, r0, #0
 800852e:	1c18      	adds	r0, r3, #0
 8008530:	f7fa ff98 	bl	8003464 <__aeabi_f2d>
 8008534:	2200      	movs	r2, #0
 8008536:	4b47      	ldr	r3, [pc, #284]	@ (8008654 <Mic_Upkeep+0x210>)
 8008538:	f7f9 f8d8 	bl	80016ec <__aeabi_dadd>
 800853c:	0002      	movs	r2, r0
 800853e:	000b      	movs	r3, r1
 8008540:	0010      	movs	r0, r2
 8008542:	0019      	movs	r1, r3
 8008544:	f7fa ff00 	bl	8003348 <__aeabi_d2iz>
 8008548:	0003      	movs	r3, r0
 800854a:	0018      	movs	r0, r3
 800854c:	f7fa ff38 	bl	80033c0 <__aeabi_i2d>
 8008550:	2200      	movs	r2, #0
 8008552:	4b41      	ldr	r3, [pc, #260]	@ (8008658 <Mic_Upkeep+0x214>)
 8008554:	f7f9 fc2e 	bl	8001db4 <__aeabi_ddiv>
 8008558:	0002      	movs	r2, r0
 800855a:	000b      	movs	r3, r1
 800855c:	0010      	movs	r0, r2
 800855e:	0019      	movs	r1, r3
 8008560:	f7fa ffc8 	bl	80034f4 <__aeabi_d2f>
 8008564:	1c02      	adds	r2, r0, #0
 8008566:	4b39      	ldr	r3, [pc, #228]	@ (800864c <Mic_Upkeep+0x208>)
 8008568:	601a      	str	r2, [r3, #0]

      MIC_Print();
 800856a:	f000 f983 	bl	8008874 <MIC_Print>
      if (!startSPLcalculation()) {
 800856e:	f003 fc1f 	bl	800bdb0 <startSPLcalculation>
 8008572:	0003      	movs	r3, r0
 8008574:	001a      	movs	r2, r3
 8008576:	2301      	movs	r3, #1
 8008578:	4053      	eors	r3, r2
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b00      	cmp	r3, #0
 800857e:	d005      	beq.n	800858c <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8008580:	4a2b      	ldr	r2, [pc, #172]	@ (8008630 <Mic_Upkeep+0x1ec>)
 8008582:	4b2c      	ldr	r3, [pc, #176]	@ (8008634 <Mic_Upkeep+0x1f0>)
 8008584:	21e8      	movs	r1, #232	@ 0xe8
 8008586:	0018      	movs	r0, r3
 8008588:	f005 fa9a 	bl	800dac0 <errorHandler>
      }
      if (!enableMicrophone(false))
 800858c:	2000      	movs	r0, #0
 800858e:	f003 fba5 	bl	800bcdc <enableMicrophone>
 8008592:	0003      	movs	r3, r0
 8008594:	001a      	movs	r2, r3
 8008596:	2301      	movs	r3, #1
 8008598:	4053      	eors	r3, r2
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d005      	beq.n	80085ac <Mic_Upkeep+0x168>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 80085a0:	4a23      	ldr	r2, [pc, #140]	@ (8008630 <Mic_Upkeep+0x1ec>)
 80085a2:	4b24      	ldr	r3, [pc, #144]	@ (8008634 <Mic_Upkeep+0x1f0>)
 80085a4:	21ec      	movs	r1, #236	@ 0xec
 80085a6:	0018      	movs	r0, r3
 80085a8:	f005 fa8a 	bl	800dac0 <errorHandler>
        }

      MicStamp = HAL_GetTick() + 755;  // about every second
 80085ac:	f005 fd70 	bl	800e090 <HAL_GetTick>
 80085b0:	0003      	movs	r3, r0
 80085b2:	4a2a      	ldr	r2, [pc, #168]	@ (800865c <Mic_Upkeep+0x218>)
 80085b4:	189a      	adds	r2, r3, r2
 80085b6:	4b2a      	ldr	r3, [pc, #168]	@ (8008660 <Mic_Upkeep+0x21c>)
 80085b8:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 80085ba:	4b1c      	ldr	r3, [pc, #112]	@ (800862c <Mic_Upkeep+0x1e8>)
 80085bc:	2203      	movs	r2, #3
 80085be:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 80085c0:	f004 fafc 	bl	800cbbc <ResetMICIndicator>
    }
    break;
 80085c4:	e028      	b.n	8008618 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 80085c6:	4b26      	ldr	r3, [pc, #152]	@ (8008660 <Mic_Upkeep+0x21c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	0018      	movs	r0, r3
 80085cc:	f005 f96c 	bl	800d8a8 <TimestampIsReached>
 80085d0:	1e03      	subs	r3, r0, #0
 80085d2:	d023      	beq.n	800861c <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true))
 80085d4:	2001      	movs	r0, #1
 80085d6:	f003 fb81 	bl	800bcdc <enableMicrophone>
 80085da:	0003      	movs	r3, r0
 80085dc:	001a      	movs	r2, r3
 80085de:	2301      	movs	r3, #1
 80085e0:	4053      	eors	r3, r2
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d005      	beq.n	80085f4 <Mic_Upkeep+0x1b0>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 80085e8:	4a11      	ldr	r2, [pc, #68]	@ (8008630 <Mic_Upkeep+0x1ec>)
 80085ea:	4b12      	ldr	r3, [pc, #72]	@ (8008634 <Mic_Upkeep+0x1f0>)
 80085ec:	21f9      	movs	r1, #249	@ 0xf9
 80085ee:	0018      	movs	r0, r3
 80085f0:	f005 fa66 	bl	800dac0 <errorHandler>
        }
      MicState = MIC_STATE_START_MEASUREMENT;
 80085f4:	4b0d      	ldr	r3, [pc, #52]	@ (800862c <Mic_Upkeep+0x1e8>)
 80085f6:	2201      	movs	r2, #1
 80085f8:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 80085fa:	f004 fac7 	bl	800cb8c <SetMICIndicator>
    }
    break;
 80085fe:	e00d      	b.n	800861c <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 8008600:	4a18      	ldr	r2, [pc, #96]	@ (8008664 <Mic_Upkeep+0x220>)
 8008602:	4b19      	ldr	r3, [pc, #100]	@ (8008668 <Mic_Upkeep+0x224>)
 8008604:	0019      	movs	r1, r3
 8008606:	2003      	movs	r0, #3
 8008608:	f005 f9a4 	bl	800d954 <CreateLine>
    MicState = MIC_STATE_INIT;
 800860c:	4b07      	ldr	r3, [pc, #28]	@ (800862c <Mic_Upkeep+0x1e8>)
 800860e:	2200      	movs	r2, #0
 8008610:	701a      	strb	r2, [r3, #0]
    break;
 8008612:	e004      	b.n	800861e <Mic_Upkeep+0x1da>
    break;
 8008614:	46c0      	nop			@ (mov r8, r8)
 8008616:	e002      	b.n	800861e <Mic_Upkeep+0x1da>
    break;
 8008618:	46c0      	nop			@ (mov r8, r8)
 800861a:	e000      	b.n	800861e <Mic_Upkeep+0x1da>
    break;
 800861c:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800861e:	4b03      	ldr	r3, [pc, #12]	@ (800862c <Mic_Upkeep+0x1e8>)
 8008620:	781b      	ldrb	r3, [r3, #0]
}
 8008622:	0018      	movs	r0, r3
 8008624:	46bd      	mov	sp, r7
 8008626:	b002      	add	sp, #8
 8008628:	bd80      	pop	{r7, pc}
 800862a:	46c0      	nop			@ (mov r8, r8)
 800862c:	20000f9e 	.word	0x20000f9e
 8008630:	080233cc 	.word	0x080233cc
 8008634:	08024214 	.word	0x08024214
 8008638:	200012f0 	.word	0x200012f0
 800863c:	20000f8c 	.word	0x20000f8c
 8008640:	080233e8 	.word	0x080233e8
 8008644:	080233f0 	.word	0x080233f0
 8008648:	20000fa0 	.word	0x20000fa0
 800864c:	20000fe0 	.word	0x20000fe0
 8008650:	42c80000 	.word	0x42c80000
 8008654:	3fe00000 	.word	0x3fe00000
 8008658:	40590000 	.word	0x40590000
 800865c:	000002f3 	.word	0x000002f3
 8008660:	20000f88 	.word	0x20000f88
 8008664:	080233f8 	.word	0x080233f8
 8008668:	0802335c 	.word	0x0802335c

0800866c <Meas_Upkeep>:

MeasurementState Meas_Upkeep(void) {
 800866c:	b5b0      	push	{r4, r5, r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af04      	add	r7, sp, #16
  static MeasurementState MeasState = MEAS_STATE_INIT;
  switch(MeasState) {
 8008672:	4b40      	ldr	r3, [pc, #256]	@ (8008774 <Meas_Upkeep+0x108>)
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	2b06      	cmp	r3, #6
 8008678:	d86f      	bhi.n	800875a <Meas_Upkeep+0xee>
 800867a:	009a      	lsls	r2, r3, #2
 800867c:	4b3e      	ldr	r3, [pc, #248]	@ (8008778 <Meas_Upkeep+0x10c>)
 800867e:	18d3      	adds	r3, r2, r3
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 8008684:	4a3d      	ldr	r2, [pc, #244]	@ (800877c <Meas_Upkeep+0x110>)
 8008686:	4b3e      	ldr	r3, [pc, #248]	@ (8008780 <Meas_Upkeep+0x114>)
 8008688:	0019      	movs	r1, r3
 800868a:	2003      	movs	r0, #3
 800868c:	f005 f962 	bl	800d954 <CreateLine>
    break;
 8008690:	e06a      	b.n	8008768 <Meas_Upkeep+0xfc>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8008692:	f7ff fe85 	bl	80083a0 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8008696:	4b37      	ldr	r3, [pc, #220]	@ (8008774 <Meas_Upkeep+0x108>)
 8008698:	2201      	movs	r2, #1
 800869a:	701a      	strb	r2, [r3, #0]
    break;
 800869c:	e064      	b.n	8008768 <Meas_Upkeep+0xfc>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 800869e:	f7ff fe05 	bl	80082ac <StartMeasurements>
    SetMeasurementIndicator();
 80086a2:	f004 fa45 	bl	800cb30 <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 80086a6:	4b33      	ldr	r3, [pc, #204]	@ (8008774 <Meas_Upkeep+0x108>)
 80086a8:	2202      	movs	r2, #2
 80086aa:	701a      	strb	r2, [r3, #0]
   break;
 80086ac:	e05c      	b.n	8008768 <Meas_Upkeep+0xfc>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 80086ae:	f7ff fe91 	bl	80083d4 <MeasurementsCompleted>
 80086b2:	1e03      	subs	r3, r0, #0
 80086b4:	d055      	beq.n	8008762 <Meas_Upkeep+0xf6>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 80086b6:	4b2f      	ldr	r3, [pc, #188]	@ (8008774 <Meas_Upkeep+0x108>)
 80086b8:	2203      	movs	r2, #3
 80086ba:	701a      	strb	r2, [r3, #0]
    }
    break;
 80086bc:	e051      	b.n	8008762 <Meas_Upkeep+0xf6>
  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
//    Debug("Processing results.");
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 80086be:	4b31      	ldr	r3, [pc, #196]	@ (8008784 <Meas_Upkeep+0x118>)
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	4a31      	ldr	r2, [pc, #196]	@ (8008788 <Meas_Upkeep+0x11c>)
 80086c4:	492e      	ldr	r1, [pc, #184]	@ (8008780 <Meas_Upkeep+0x114>)
 80086c6:	2003      	movs	r0, #3
 80086c8:	f005 f944 	bl	800d954 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 80086cc:	4b2d      	ldr	r3, [pc, #180]	@ (8008784 <Meas_Upkeep+0x118>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	1c18      	adds	r0, r3, #0
 80086d2:	f7fa fec7 	bl	8003464 <__aeabi_f2d>
 80086d6:	0004      	movs	r4, r0
 80086d8:	000d      	movs	r5, r1
 80086da:	4b2a      	ldr	r3, [pc, #168]	@ (8008784 <Meas_Upkeep+0x118>)
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	1c18      	adds	r0, r3, #0
 80086e0:	f7fa fec0 	bl	8003464 <__aeabi_f2d>
 80086e4:	0002      	movs	r2, r0
 80086e6:	000b      	movs	r3, r1
 80086e8:	4828      	ldr	r0, [pc, #160]	@ (800878c <Meas_Upkeep+0x120>)
 80086ea:	4925      	ldr	r1, [pc, #148]	@ (8008780 <Meas_Upkeep+0x114>)
 80086ec:	9202      	str	r2, [sp, #8]
 80086ee:	9303      	str	r3, [sp, #12]
 80086f0:	9400      	str	r4, [sp, #0]
 80086f2:	9501      	str	r5, [sp, #4]
 80086f4:	0002      	movs	r2, r0
 80086f6:	2003      	movs	r0, #3
 80086f8:	f005 f92c 	bl	800d954 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 80086fc:	4b21      	ldr	r3, [pc, #132]	@ (8008784 <Meas_Upkeep+0x118>)
 80086fe:	6858      	ldr	r0, [r3, #4]
 8008700:	4b20      	ldr	r3, [pc, #128]	@ (8008784 <Meas_Upkeep+0x118>)
 8008702:	6819      	ldr	r1, [r3, #0]
 8008704:	4b1f      	ldr	r3, [pc, #124]	@ (8008784 <Meas_Upkeep+0x118>)
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	b29b      	uxth	r3, r3
 800870a:	001a      	movs	r2, r3
 800870c:	f7fb f8f6 	bl	80038fc <setMeasurement>
    ResetMeasurementIndicator();
 8008710:	f004 fa26 	bl	800cb60 <ResetMeasurementIndicator>
    if (powerCheck() == USB_PLUGGED_IN) {
 8008714:	f004 fab2 	bl	800cc7c <powerCheck>
 8008718:	0003      	movs	r3, r0
 800871a:	2b01      	cmp	r3, #1
 800871c:	d107      	bne.n	800872e <Meas_Upkeep+0xc2>
      MeasStamp = HAL_GetTick() + 10000;  // about every ten seconds when power is plugged
 800871e:	f005 fcb7 	bl	800e090 <HAL_GetTick>
 8008722:	0003      	movs	r3, r0
 8008724:	4a1a      	ldr	r2, [pc, #104]	@ (8008790 <Meas_Upkeep+0x124>)
 8008726:	189a      	adds	r2, r3, r2
 8008728:	4b1a      	ldr	r3, [pc, #104]	@ (8008794 <Meas_Upkeep+0x128>)
 800872a:	601a      	str	r2, [r3, #0]
 800872c:	e006      	b.n	800873c <Meas_Upkeep+0xd0>
    }
    else {
      MeasStamp = HAL_GetTick() + 60000;  // once a minute
 800872e:	f005 fcaf 	bl	800e090 <HAL_GetTick>
 8008732:	0003      	movs	r3, r0
 8008734:	4a18      	ldr	r2, [pc, #96]	@ (8008798 <Meas_Upkeep+0x12c>)
 8008736:	189a      	adds	r2, r3, r2
 8008738:	4b16      	ldr	r3, [pc, #88]	@ (8008794 <Meas_Upkeep+0x128>)
 800873a:	601a      	str	r2, [r3, #0]
    }
    MeasState = MEAS_STATE_WAIT;
 800873c:	4b0d      	ldr	r3, [pc, #52]	@ (8008774 <Meas_Upkeep+0x108>)
 800873e:	2206      	movs	r2, #6
 8008740:	701a      	strb	r2, [r3, #0]
    break;
 8008742:	e011      	b.n	8008768 <Meas_Upkeep+0xfc>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8008744:	4b13      	ldr	r3, [pc, #76]	@ (8008794 <Meas_Upkeep+0x128>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	0018      	movs	r0, r3
 800874a:	f005 f8ad 	bl	800d8a8 <TimestampIsReached>
 800874e:	1e03      	subs	r3, r0, #0
 8008750:	d009      	beq.n	8008766 <Meas_Upkeep+0xfa>
      MeasState = MEAS_STATE_INIT;
 8008752:	4b08      	ldr	r3, [pc, #32]	@ (8008774 <Meas_Upkeep+0x108>)
 8008754:	2200      	movs	r2, #0
 8008756:	701a      	strb	r2, [r3, #0]
    }

    break;
 8008758:	e005      	b.n	8008766 <Meas_Upkeep+0xfa>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 800875a:	4b06      	ldr	r3, [pc, #24]	@ (8008774 <Meas_Upkeep+0x108>)
 800875c:	2200      	movs	r2, #0
 800875e:	701a      	strb	r2, [r3, #0]
    break;
 8008760:	e002      	b.n	8008768 <Meas_Upkeep+0xfc>
    break;
 8008762:	46c0      	nop			@ (mov r8, r8)
 8008764:	e000      	b.n	8008768 <Meas_Upkeep+0xfc>
    break;
 8008766:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 8008768:	4b02      	ldr	r3, [pc, #8]	@ (8008774 <Meas_Upkeep+0x108>)
 800876a:	781b      	ldrb	r3, [r3, #0]
}
 800876c:	0018      	movs	r0, r3
 800876e:	46bd      	mov	sp, r7
 8008770:	bdb0      	pop	{r4, r5, r7, pc}
 8008772:	46c0      	nop			@ (mov r8, r8)
 8008774:	20000f9f 	.word	0x20000f9f
 8008778:	080241f8 	.word	0x080241f8
 800877c:	08023418 	.word	0x08023418
 8008780:	0802335c 	.word	0x0802335c
 8008784:	20000f38 	.word	0x20000f38
 8008788:	08023438 	.word	0x08023438
 800878c:	08023450 	.word	0x08023450
 8008790:	00002710 	.word	0x00002710
 8008794:	20000f84 	.word	0x20000f84
 8008798:	0000ea60 	.word	0x0000ea60

0800879c <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}
*/
void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 800879c:	b590      	push	{r4, r7, lr}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	1d3b      	adds	r3, r7, #4
 80087a4:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 80087a6:	240f      	movs	r4, #15
 80087a8:	193b      	adds	r3, r7, r4
 80087aa:	2200      	movs	r2, #0
 80087ac:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 80087ae:	4b20      	ldr	r3, [pc, #128]	@ (8008830 <Meas_SetEnabledSensors+0x94>)
 80087b0:	1d3a      	adds	r2, r7, #4
 80087b2:	6812      	ldr	r2, [r2, #0]
 80087b4:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 80087b6:	193b      	adds	r3, r7, r4
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	193a      	adds	r2, r7, r4
 80087bc:	1c59      	adds	r1, r3, #1
 80087be:	7011      	strb	r1, [r2, #0]
 80087c0:	0018      	movs	r0, r3
 80087c2:	1d3b      	adds	r3, r7, #4
 80087c4:	7819      	ldrb	r1, [r3, #0]
 80087c6:	4a1b      	ldr	r2, [pc, #108]	@ (8008834 <Meas_SetEnabledSensors+0x98>)
 80087c8:	0103      	lsls	r3, r0, #4
 80087ca:	18d3      	adds	r3, r2, r3
 80087cc:	330c      	adds	r3, #12
 80087ce:	1c0a      	adds	r2, r1, #0
 80087d0:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 80087d2:	193b      	adds	r3, r7, r4
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	193a      	adds	r2, r7, r4
 80087d8:	1c59      	adds	r1, r3, #1
 80087da:	7011      	strb	r1, [r2, #0]
 80087dc:	0018      	movs	r0, r3
 80087de:	1d3b      	adds	r3, r7, #4
 80087e0:	7859      	ldrb	r1, [r3, #1]
 80087e2:	4a14      	ldr	r2, [pc, #80]	@ (8008834 <Meas_SetEnabledSensors+0x98>)
 80087e4:	0103      	lsls	r3, r0, #4
 80087e6:	18d3      	adds	r3, r2, r3
 80087e8:	330c      	adds	r3, #12
 80087ea:	1c0a      	adds	r2, r1, #0
 80087ec:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 80087ee:	193b      	adds	r3, r7, r4
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	193a      	adds	r2, r7, r4
 80087f4:	1c59      	adds	r1, r3, #1
 80087f6:	7011      	strb	r1, [r2, #0]
 80087f8:	0018      	movs	r0, r3
 80087fa:	1d3b      	adds	r3, r7, #4
 80087fc:	7899      	ldrb	r1, [r3, #2]
 80087fe:	4a0d      	ldr	r2, [pc, #52]	@ (8008834 <Meas_SetEnabledSensors+0x98>)
 8008800:	0103      	lsls	r3, r0, #4
 8008802:	18d3      	adds	r3, r2, r3
 8008804:	330c      	adds	r3, #12
 8008806:	1c0a      	adds	r2, r1, #0
 8008808:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 800880a:	193b      	adds	r3, r7, r4
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	193a      	adds	r2, r7, r4
 8008810:	1c59      	adds	r1, r3, #1
 8008812:	7011      	strb	r1, [r2, #0]
 8008814:	0018      	movs	r0, r3
 8008816:	1d3b      	adds	r3, r7, #4
 8008818:	78d9      	ldrb	r1, [r3, #3]
 800881a:	4a06      	ldr	r2, [pc, #24]	@ (8008834 <Meas_SetEnabledSensors+0x98>)
 800881c:	0103      	lsls	r3, r0, #4
 800881e:	18d3      	adds	r3, r2, r3
 8008820:	330c      	adds	r3, #12
 8008822:	1c0a      	adds	r2, r1, #0
 8008824:	701a      	strb	r2, [r3, #0]
}
 8008826:	46c0      	nop			@ (mov r8, r8)
 8008828:	46bd      	mov	sp, r7
 800882a:	b005      	add	sp, #20
 800882c:	bd90      	pop	{r4, r7, pc}
 800882e:	46c0      	nop			@ (mov r8, r8)
 8008830:	20000f78 	.word	0x20000f78
 8008834:	20000f48 	.word	0x20000f48

08008838 <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}


void SetESPMeasurementDone(){
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 800883c:	4b02      	ldr	r3, [pc, #8]	@ (8008848 <SetESPMeasurementDone+0x10>)
 800883e:	2201      	movs	r2, #1
 8008840:	70da      	strb	r2, [r3, #3]
}
 8008842:	46c0      	nop			@ (mov r8, r8)
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	20000f7c 	.word	0x20000f7c

0800884c <ResetDBACalculator>:
uint8_t denominator = 1;
bool samplebufferfilled = false;
//bool averageReached = false;
//float sample[NUMBER_OF_SAMPLES];

void ResetDBACalculator(void) {
 800884c:	b580      	push	{r7, lr}
 800884e:	af00      	add	r7, sp, #0
  counter = 0;
 8008850:	4b05      	ldr	r3, [pc, #20]	@ (8008868 <ResetDBACalculator+0x1c>)
 8008852:	2200      	movs	r2, #0
 8008854:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 8008856:	4b05      	ldr	r3, [pc, #20]	@ (800886c <ResetDBACalculator+0x20>)
 8008858:	2201      	movs	r2, #1
 800885a:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800885c:	4b04      	ldr	r3, [pc, #16]	@ (8008870 <ResetDBACalculator+0x24>)
 800885e:	2200      	movs	r2, #0
 8008860:	701a      	strb	r2, [r3, #0]
}
 8008862:	46c0      	nop			@ (mov r8, r8)
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	20000fe8 	.word	0x20000fe8
 800886c:	20000080 	.word	0x20000080
 8008870:	20000fe9 	.word	0x20000fe9

08008874 <MIC_Print>:

void MIC_Print(void) {
 8008874:	b5b0      	push	{r4, r5, r7, lr}
 8008876:	b08a      	sub	sp, #40	@ 0x28
 8008878:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800887a:	4b9f      	ldr	r3, [pc, #636]	@ (8008af8 <MIC_Print+0x284>)
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	4b9f      	ldr	r3, [pc, #636]	@ (8008afc <MIC_Print+0x288>)
 8008880:	601a      	str	r2, [r3, #0]
//  Info("IN MIC_Print dBA: %02.1f", dBA);
  dBASamples[counter] = dBA;
 8008882:	4b9f      	ldr	r3, [pc, #636]	@ (8008b00 <MIC_Print+0x28c>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	001a      	movs	r2, r3
 8008888:	4b9c      	ldr	r3, [pc, #624]	@ (8008afc <MIC_Print+0x288>)
 800888a:	6819      	ldr	r1, [r3, #0]
 800888c:	4b9d      	ldr	r3, [pc, #628]	@ (8008b04 <MIC_Print+0x290>)
 800888e:	0092      	lsls	r2, r2, #2
 8008890:	50d1      	str	r1, [r2, r3]
//  print("dBA: %f, counter: %d, dBASamples[counter]: %f\r\n", dBA, counter, dBASamples[counter]);
  counter++;
 8008892:	4b9b      	ldr	r3, [pc, #620]	@ (8008b00 <MIC_Print+0x28c>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	3301      	adds	r3, #1
 8008898:	b2da      	uxtb	r2, r3
 800889a:	4b99      	ldr	r3, [pc, #612]	@ (8008b00 <MIC_Print+0x28c>)
 800889c:	701a      	strb	r2, [r3, #0]

  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800889e:	4b98      	ldr	r3, [pc, #608]	@ (8008b00 <MIC_Print+0x28c>)
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	2b09      	cmp	r3, #9
 80088a4:	d80b      	bhi.n	80088be <MIC_Print+0x4a>
 80088a6:	4b98      	ldr	r3, [pc, #608]	@ (8008b08 <MIC_Print+0x294>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	2201      	movs	r2, #1
 80088ac:	4053      	eors	r3, r2
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d004      	beq.n	80088be <MIC_Print+0x4a>
    denominator = counter;
 80088b4:	4b92      	ldr	r3, [pc, #584]	@ (8008b00 <MIC_Print+0x28c>)
 80088b6:	781a      	ldrb	r2, [r3, #0]
 80088b8:	4b94      	ldr	r3, [pc, #592]	@ (8008b0c <MIC_Print+0x298>)
 80088ba:	701a      	strb	r2, [r3, #0]
 80088bc:	e005      	b.n	80088ca <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 80088be:	4b93      	ldr	r3, [pc, #588]	@ (8008b0c <MIC_Print+0x298>)
 80088c0:	220a      	movs	r2, #10
 80088c2:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 80088c4:	4b90      	ldr	r3, [pc, #576]	@ (8008b08 <MIC_Print+0x294>)
 80088c6:	2201      	movs	r2, #1
 80088c8:	701a      	strb	r2, [r3, #0]
  }
  dBAmax = 0.0;
 80088ca:	4b91      	ldr	r3, [pc, #580]	@ (8008b10 <MIC_Print+0x29c>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	601a      	str	r2, [r3, #0]
  dBAsum = 0.0;
 80088d0:	4b90      	ldr	r3, [pc, #576]	@ (8008b14 <MIC_Print+0x2a0>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 80088d6:	230f      	movs	r3, #15
 80088d8:	18fb      	adds	r3, r7, r3
 80088da:	2200      	movs	r2, #0
 80088dc:	701a      	strb	r2, [r3, #0]
 80088de:	e03e      	b.n	800895e <MIC_Print+0xea>
    dBAsum += dBASamples[i];
 80088e0:	240f      	movs	r4, #15
 80088e2:	193b      	adds	r3, r7, r4
 80088e4:	781a      	ldrb	r2, [r3, #0]
 80088e6:	4b87      	ldr	r3, [pc, #540]	@ (8008b04 <MIC_Print+0x290>)
 80088e8:	0092      	lsls	r2, r2, #2
 80088ea:	58d2      	ldr	r2, [r2, r3]
 80088ec:	4b89      	ldr	r3, [pc, #548]	@ (8008b14 <MIC_Print+0x2a0>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	1c19      	adds	r1, r3, #0
 80088f2:	1c10      	adds	r0, r2, #0
 80088f4:	f7f7 ffe4 	bl	80008c0 <__aeabi_fadd>
 80088f8:	1c03      	adds	r3, r0, #0
 80088fa:	1c1a      	adds	r2, r3, #0
 80088fc:	4b85      	ldr	r3, [pc, #532]	@ (8008b14 <MIC_Print+0x2a0>)
 80088fe:	601a      	str	r2, [r3, #0]
//    print("sum of dBAsum: %f after step i:%d dBASampels[i]: %f\r\n", dBAsum, i, dBASamples[i]);
    if (dBASamples[i] > dBAmax) {
 8008900:	193b      	adds	r3, r7, r4
 8008902:	781a      	ldrb	r2, [r3, #0]
 8008904:	4b7f      	ldr	r3, [pc, #508]	@ (8008b04 <MIC_Print+0x290>)
 8008906:	0092      	lsls	r2, r2, #2
 8008908:	58d2      	ldr	r2, [r2, r3]
 800890a:	4b81      	ldr	r3, [pc, #516]	@ (8008b10 <MIC_Print+0x29c>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	1c19      	adds	r1, r3, #0
 8008910:	1c10      	adds	r0, r2, #0
 8008912:	f7f7 fe21 	bl	8000558 <__aeabi_fcmpgt>
 8008916:	1e03      	subs	r3, r0, #0
 8008918:	d006      	beq.n	8008928 <MIC_Print+0xb4>
      dBAmax = dBASamples[i];
 800891a:	193b      	adds	r3, r7, r4
 800891c:	781a      	ldrb	r2, [r3, #0]
 800891e:	4b79      	ldr	r3, [pc, #484]	@ (8008b04 <MIC_Print+0x290>)
 8008920:	0092      	lsls	r2, r2, #2
 8008922:	58d2      	ldr	r2, [r2, r3]
 8008924:	4b7a      	ldr	r3, [pc, #488]	@ (8008b10 <MIC_Print+0x29c>)
 8008926:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 8008928:	4b7a      	ldr	r3, [pc, #488]	@ (8008b14 <MIC_Print+0x2a0>)
 800892a:	681c      	ldr	r4, [r3, #0]
 800892c:	4b77      	ldr	r3, [pc, #476]	@ (8008b0c <MIC_Print+0x298>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	0018      	movs	r0, r3
 8008932:	f7f8 fe99 	bl	8001668 <__aeabi_ui2f>
 8008936:	1c03      	adds	r3, r0, #0
 8008938:	1c19      	adds	r1, r3, #0
 800893a:	1c20      	adds	r0, r4, #0
 800893c:	f7f8 f94a 	bl	8000bd4 <__aeabi_fdiv>
 8008940:	1c03      	adds	r3, r0, #0
 8008942:	1c1a      	adds	r2, r3, #0
 8008944:	4b74      	ldr	r3, [pc, #464]	@ (8008b18 <MIC_Print+0x2a4>)
 8008946:	601a      	str	r2, [r3, #0]
//    Debug("Average dBA value used for upload: %.1f", dBAAverage);
  setMic(dBAAverage);
 8008948:	4b73      	ldr	r3, [pc, #460]	@ (8008b18 <MIC_Print+0x2a4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	1c18      	adds	r0, r3, #0
 800894e:	f7fa fff1 	bl	8003934 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 8008952:	210f      	movs	r1, #15
 8008954:	187b      	adds	r3, r7, r1
 8008956:	781a      	ldrb	r2, [r3, #0]
 8008958:	187b      	adds	r3, r7, r1
 800895a:	3201      	adds	r2, #1
 800895c:	701a      	strb	r2, [r3, #0]
 800895e:	4b6b      	ldr	r3, [pc, #428]	@ (8008b0c <MIC_Print+0x298>)
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	220f      	movs	r2, #15
 8008964:	18ba      	adds	r2, r7, r2
 8008966:	7812      	ldrb	r2, [r2, #0]
 8008968:	429a      	cmp	r2, r3
 800896a:	d3b9      	bcc.n	80088e0 <MIC_Print+0x6c>
  }
  print("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 800896c:	4b63      	ldr	r3, [pc, #396]	@ (8008afc <MIC_Print+0x288>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	1c18      	adds	r0, r3, #0
 8008972:	f7fa fd77 	bl	8003464 <__aeabi_f2d>
 8008976:	6038      	str	r0, [r7, #0]
 8008978:	6079      	str	r1, [r7, #4]
 800897a:	4b65      	ldr	r3, [pc, #404]	@ (8008b10 <MIC_Print+0x29c>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	1c18      	adds	r0, r3, #0
 8008980:	f7fa fd70 	bl	8003464 <__aeabi_f2d>
 8008984:	0004      	movs	r4, r0
 8008986:	000d      	movs	r5, r1
 8008988:	4b63      	ldr	r3, [pc, #396]	@ (8008b18 <MIC_Print+0x2a4>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	1c18      	adds	r0, r3, #0
 800898e:	f7fa fd69 	bl	8003464 <__aeabi_f2d>
 8008992:	0002      	movs	r2, r0
 8008994:	000b      	movs	r3, r1
 8008996:	4961      	ldr	r1, [pc, #388]	@ (8008b1c <MIC_Print+0x2a8>)
 8008998:	9204      	str	r2, [sp, #16]
 800899a:	9305      	str	r3, [sp, #20]
 800899c:	9402      	str	r4, [sp, #8]
 800899e:	9503      	str	r5, [sp, #12]
 80089a0:	4b5f      	ldr	r3, [pc, #380]	@ (8008b20 <MIC_Print+0x2ac>)
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	683a      	ldr	r2, [r7, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	0008      	movs	r0, r1
 80089aa:	f000 f8f9 	bl	8008ba0 <print>

  if(counter > NUMBER_OF_SAMPLES){
 80089ae:	4b54      	ldr	r3, [pc, #336]	@ (8008b00 <MIC_Print+0x28c>)
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	2b0a      	cmp	r3, #10
 80089b4:	d902      	bls.n	80089bc <MIC_Print+0x148>
    counter = 0;
 80089b6:	4b52      	ldr	r3, [pc, #328]	@ (8008b00 <MIC_Print+0x28c>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	701a      	strb	r2, [r3, #0]
  }

  if(dBA >= 90){//white
 80089bc:	4b4f      	ldr	r3, [pc, #316]	@ (8008afc <MIC_Print+0x288>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4958      	ldr	r1, [pc, #352]	@ (8008b24 <MIC_Print+0x2b0>)
 80089c2:	1c18      	adds	r0, r3, #0
 80089c4:	f7f7 fdd2 	bl	800056c <__aeabi_fcmpge>
 80089c8:	1e03      	subs	r3, r0, #0
 80089ca:	d004      	beq.n	80089d6 <MIC_Print+0x162>
    SetDBLED(true, true, true);
 80089cc:	2201      	movs	r2, #1
 80089ce:	2101      	movs	r1, #1
 80089d0:	2001      	movs	r0, #1
 80089d2:	f004 f82f 	bl	800ca34 <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 80089d6:	4b49      	ldr	r3, [pc, #292]	@ (8008afc <MIC_Print+0x288>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4953      	ldr	r1, [pc, #332]	@ (8008b28 <MIC_Print+0x2b4>)
 80089dc:	1c18      	adds	r0, r3, #0
 80089de:	f7f7 fdc5 	bl	800056c <__aeabi_fcmpge>
 80089e2:	1e03      	subs	r3, r0, #0
 80089e4:	d00c      	beq.n	8008a00 <MIC_Print+0x18c>
 80089e6:	4b45      	ldr	r3, [pc, #276]	@ (8008afc <MIC_Print+0x288>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	494e      	ldr	r1, [pc, #312]	@ (8008b24 <MIC_Print+0x2b0>)
 80089ec:	1c18      	adds	r0, r3, #0
 80089ee:	f7f7 fd9f 	bl	8000530 <__aeabi_fcmplt>
 80089f2:	1e03      	subs	r3, r0, #0
 80089f4:	d004      	beq.n	8008a00 <MIC_Print+0x18c>
    SetDBLED(true, false, false);
 80089f6:	2200      	movs	r2, #0
 80089f8:	2100      	movs	r1, #0
 80089fa:	2001      	movs	r0, #1
 80089fc:	f004 f81a 	bl	800ca34 <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 8008a00:	4b3e      	ldr	r3, [pc, #248]	@ (8008afc <MIC_Print+0x288>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4949      	ldr	r1, [pc, #292]	@ (8008b2c <MIC_Print+0x2b8>)
 8008a06:	1c18      	adds	r0, r3, #0
 8008a08:	f7f7 fdb0 	bl	800056c <__aeabi_fcmpge>
 8008a0c:	1e03      	subs	r3, r0, #0
 8008a0e:	d00c      	beq.n	8008a2a <MIC_Print+0x1b6>
 8008a10:	4b3a      	ldr	r3, [pc, #232]	@ (8008afc <MIC_Print+0x288>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4944      	ldr	r1, [pc, #272]	@ (8008b28 <MIC_Print+0x2b4>)
 8008a16:	1c18      	adds	r0, r3, #0
 8008a18:	f7f7 fd8a 	bl	8000530 <__aeabi_fcmplt>
 8008a1c:	1e03      	subs	r3, r0, #0
 8008a1e:	d004      	beq.n	8008a2a <MIC_Print+0x1b6>
    SetDBLED(true, true, false);
 8008a20:	2200      	movs	r2, #0
 8008a22:	2101      	movs	r1, #1
 8008a24:	2001      	movs	r0, #1
 8008a26:	f004 f805 	bl	800ca34 <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 8008a2a:	4b34      	ldr	r3, [pc, #208]	@ (8008afc <MIC_Print+0x288>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4940      	ldr	r1, [pc, #256]	@ (8008b30 <MIC_Print+0x2bc>)
 8008a30:	1c18      	adds	r0, r3, #0
 8008a32:	f7f7 fd9b 	bl	800056c <__aeabi_fcmpge>
 8008a36:	1e03      	subs	r3, r0, #0
 8008a38:	d00c      	beq.n	8008a54 <MIC_Print+0x1e0>
 8008a3a:	4b30      	ldr	r3, [pc, #192]	@ (8008afc <MIC_Print+0x288>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	493b      	ldr	r1, [pc, #236]	@ (8008b2c <MIC_Print+0x2b8>)
 8008a40:	1c18      	adds	r0, r3, #0
 8008a42:	f7f7 fd75 	bl	8000530 <__aeabi_fcmplt>
 8008a46:	1e03      	subs	r3, r0, #0
 8008a48:	d004      	beq.n	8008a54 <MIC_Print+0x1e0>
    SetDBLED(false, true, false);
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	2000      	movs	r0, #0
 8008a50:	f003 fff0 	bl	800ca34 <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 8008a54:	4b29      	ldr	r3, [pc, #164]	@ (8008afc <MIC_Print+0x288>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4936      	ldr	r1, [pc, #216]	@ (8008b34 <MIC_Print+0x2c0>)
 8008a5a:	1c18      	adds	r0, r3, #0
 8008a5c:	f7f7 fd86 	bl	800056c <__aeabi_fcmpge>
 8008a60:	1e03      	subs	r3, r0, #0
 8008a62:	d00c      	beq.n	8008a7e <MIC_Print+0x20a>
 8008a64:	4b25      	ldr	r3, [pc, #148]	@ (8008afc <MIC_Print+0x288>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4931      	ldr	r1, [pc, #196]	@ (8008b30 <MIC_Print+0x2bc>)
 8008a6a:	1c18      	adds	r0, r3, #0
 8008a6c:	f7f7 fd60 	bl	8000530 <__aeabi_fcmplt>
 8008a70:	1e03      	subs	r3, r0, #0
 8008a72:	d004      	beq.n	8008a7e <MIC_Print+0x20a>
    SetDBLED(false, true, true);
 8008a74:	2201      	movs	r2, #1
 8008a76:	2101      	movs	r1, #1
 8008a78:	2000      	movs	r0, #0
 8008a7a:	f003 ffdb 	bl	800ca34 <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8008afc <MIC_Print+0x288>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	492d      	ldr	r1, [pc, #180]	@ (8008b38 <MIC_Print+0x2c4>)
 8008a84:	1c18      	adds	r0, r3, #0
 8008a86:	f7f7 fd71 	bl	800056c <__aeabi_fcmpge>
 8008a8a:	1e03      	subs	r3, r0, #0
 8008a8c:	d00c      	beq.n	8008aa8 <MIC_Print+0x234>
 8008a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8008afc <MIC_Print+0x288>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4928      	ldr	r1, [pc, #160]	@ (8008b34 <MIC_Print+0x2c0>)
 8008a94:	1c18      	adds	r0, r3, #0
 8008a96:	f7f7 fd4b 	bl	8000530 <__aeabi_fcmplt>
 8008a9a:	1e03      	subs	r3, r0, #0
 8008a9c:	d004      	beq.n	8008aa8 <MIC_Print+0x234>
    SetDBLED(false, false, true);
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	f003 ffc6 	bl	800ca34 <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008aa8:	4b14      	ldr	r3, [pc, #80]	@ (8008afc <MIC_Print+0x288>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4923      	ldr	r1, [pc, #140]	@ (8008b3c <MIC_Print+0x2c8>)
 8008aae:	1c18      	adds	r0, r3, #0
 8008ab0:	f7f7 fd5c 	bl	800056c <__aeabi_fcmpge>
 8008ab4:	1e03      	subs	r3, r0, #0
 8008ab6:	d00c      	beq.n	8008ad2 <MIC_Print+0x25e>
 8008ab8:	4b10      	ldr	r3, [pc, #64]	@ (8008afc <MIC_Print+0x288>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	491e      	ldr	r1, [pc, #120]	@ (8008b38 <MIC_Print+0x2c4>)
 8008abe:	1c18      	adds	r0, r3, #0
 8008ac0:	f7f7 fd36 	bl	8000530 <__aeabi_fcmplt>
 8008ac4:	1e03      	subs	r3, r0, #0
 8008ac6:	d004      	beq.n	8008ad2 <MIC_Print+0x25e>
    SetDBLED(true, false, true);
 8008ac8:	2201      	movs	r2, #1
 8008aca:	2100      	movs	r1, #0
 8008acc:	2001      	movs	r0, #1
 8008ace:	f003 ffb1 	bl	800ca34 <SetDBLED>
  }
  if(dBA < 35){//off
 8008ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8008afc <MIC_Print+0x288>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4919      	ldr	r1, [pc, #100]	@ (8008b3c <MIC_Print+0x2c8>)
 8008ad8:	1c18      	adds	r0, r3, #0
 8008ada:	f7f7 fd29 	bl	8000530 <__aeabi_fcmplt>
 8008ade:	1e03      	subs	r3, r0, #0
 8008ae0:	d100      	bne.n	8008ae4 <MIC_Print+0x270>
    SetDBLED(false, false, false);
  }
}
 8008ae2:	e004      	b.n	8008aee <MIC_Print+0x27a>
    SetDBLED(false, false, false);
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	2000      	movs	r0, #0
 8008aea:	f003 ffa3 	bl	800ca34 <SetDBLED>
}
 8008aee:	46c0      	nop			@ (mov r8, r8)
 8008af0:	46bd      	mov	sp, r7
 8008af2:	b004      	add	sp, #16
 8008af4:	bdb0      	pop	{r4, r5, r7, pc}
 8008af6:	46c0      	nop			@ (mov r8, r8)
 8008af8:	20000fe0 	.word	0x20000fe0
 8008afc:	20000fac 	.word	0x20000fac
 8008b00:	20000fe8 	.word	0x20000fe8
 8008b04:	20000fb0 	.word	0x20000fb0
 8008b08:	20000fe9 	.word	0x20000fe9
 8008b0c:	20000080 	.word	0x20000080
 8008b10:	20000fe4 	.word	0x20000fe4
 8008b14:	20000fdc 	.word	0x20000fdc
 8008b18:	20000fd8 	.word	0x20000fd8
 8008b1c:	08023484 	.word	0x08023484
 8008b20:	20000fa0 	.word	0x20000fa0
 8008b24:	42b40000 	.word	0x42b40000
 8008b28:	42a00000 	.word	0x42a00000
 8008b2c:	428c0000 	.word	0x428c0000
 8008b30:	42700000 	.word	0x42700000
 8008b34:	42480000 	.word	0x42480000
 8008b38:	42200000 	.word	0x42200000
 8008b3c:	420c0000 	.word	0x420c0000

08008b40 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8008b46:	4b11      	ldr	r3, [pc, #68]	@ (8008b8c <MIC_TestMeasurementDone+0x4c>)
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	4a10      	ldr	r2, [pc, #64]	@ (8008b90 <MIC_TestMeasurementDone+0x50>)
 8008b4e:	4911      	ldr	r1, [pc, #68]	@ (8008b94 <MIC_TestMeasurementDone+0x54>)
 8008b50:	2002      	movs	r0, #2
 8008b52:	f004 feff 	bl	800d954 <CreateLine>
  if(DataReady) {
 8008b56:	4b0d      	ldr	r3, [pc, #52]	@ (8008b8c <MIC_TestMeasurementDone+0x4c>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d010      	beq.n	8008b82 <MIC_TestMeasurementDone+0x42>
//    Check = MIC_Check();
    Check = micEnabled;
 8008b60:	1dfb      	adds	r3, r7, #7
 8008b62:	4a0d      	ldr	r2, [pc, #52]	@ (8008b98 <MIC_TestMeasurementDone+0x58>)
 8008b64:	7812      	ldrb	r2, [r2, #0]
 8008b66:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8008b68:	4b0b      	ldr	r3, [pc, #44]	@ (8008b98 <MIC_TestMeasurementDone+0x58>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8008b9c <MIC_TestMeasurementDone+0x5c>)
 8008b70:	4908      	ldr	r1, [pc, #32]	@ (8008b94 <MIC_TestMeasurementDone+0x54>)
 8008b72:	2002      	movs	r0, #2
 8008b74:	f004 feee 	bl	800d954 <CreateLine>
    ResetMICIndicator();
 8008b78:	f004 f820 	bl	800cbbc <ResetMICIndicator>
    return Check;
 8008b7c:	1dfb      	adds	r3, r7, #7
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	e000      	b.n	8008b84 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	0018      	movs	r0, r3
 8008b86:	46bd      	mov	sp, r7
 8008b88:	b002      	add	sp, #8
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	200012f0 	.word	0x200012f0
 8008b90:	080234cc 	.word	0x080234cc
 8008b94:	080234f8 	.word	0x080234f8
 8008b98:	200012f1 	.word	0x200012f1
 8008b9c:	080234fc 	.word	0x080234fc

08008ba0 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8008ba0:	b40f      	push	{r0, r1, r2, r3}
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b082      	sub	sp, #8
 8008ba6:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8008ba8:	2314      	movs	r3, #20
 8008baa:	18fb      	adds	r3, r7, r3
 8008bac:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	2180      	movs	r1, #128	@ 0x80
 8008bb4:	0089      	lsls	r1, r1, #2
 8008bb6:	480a      	ldr	r0, [pc, #40]	@ (8008be0 <print+0x40>)
 8008bb8:	f016 fbc2 	bl	801f340 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8008bbc:	4b08      	ldr	r3, [pc, #32]	@ (8008be0 <print+0x40>)
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	f7f7 fad4 	bl	800016c <strlen>
 8008bc4:	0003      	movs	r3, r0
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	4b05      	ldr	r3, [pc, #20]	@ (8008be0 <print+0x40>)
 8008bca:	0011      	movs	r1, r2
 8008bcc:	0018      	movs	r0, r3
 8008bce:	f7ff f927 	bl	8007e20 <printString>
}
 8008bd2:	46c0      	nop			@ (mov r8, r8)
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	b002      	add	sp, #8
 8008bd8:	bc80      	pop	{r7}
 8008bda:	bc08      	pop	{r3}
 8008bdc:	b004      	add	sp, #16
 8008bde:	4718      	bx	r3
 8008be0:	20000fec 	.word	0x20000fec

08008be4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008bea:	1d3b      	adds	r3, r7, #4
 8008bec:	0018      	movs	r0, r3
 8008bee:	2314      	movs	r3, #20
 8008bf0:	001a      	movs	r2, r3
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	f016 fc50 	bl	801f498 <memset>
  RTC_DateTypeDef sDate = {0};
 8008bf8:	003b      	movs	r3, r7
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008bfe:	4b2e      	ldr	r3, [pc, #184]	@ (8008cb8 <MX_RTC_Init+0xd4>)
 8008c00:	4a2e      	ldr	r2, [pc, #184]	@ (8008cbc <MX_RTC_Init+0xd8>)
 8008c02:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008c04:	4b2c      	ldr	r3, [pc, #176]	@ (8008cb8 <MX_RTC_Init+0xd4>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8008cb8 <MX_RTC_Init+0xd4>)
 8008c0c:	227f      	movs	r2, #127	@ 0x7f
 8008c0e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008c10:	4b29      	ldr	r3, [pc, #164]	@ (8008cb8 <MX_RTC_Init+0xd4>)
 8008c12:	22ff      	movs	r2, #255	@ 0xff
 8008c14:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008c16:	4b28      	ldr	r3, [pc, #160]	@ (8008cb8 <MX_RTC_Init+0xd4>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008c1c:	4b26      	ldr	r3, [pc, #152]	@ (8008cb8 <MX_RTC_Init+0xd4>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008c22:	4b25      	ldr	r3, [pc, #148]	@ (8008cb8 <MX_RTC_Init+0xd4>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008c28:	4b23      	ldr	r3, [pc, #140]	@ (8008cb8 <MX_RTC_Init+0xd4>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008c2e:	4b22      	ldr	r3, [pc, #136]	@ (8008cb8 <MX_RTC_Init+0xd4>)
 8008c30:	0018      	movs	r0, r3
 8008c32:	f00c fa8b 	bl	801514c <HAL_RTC_Init>
 8008c36:	1e03      	subs	r3, r0, #0
 8008c38:	d001      	beq.n	8008c3e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008c3a:	f7ff f9b1 	bl	8007fa0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008c3e:	1d3b      	adds	r3, r7, #4
 8008c40:	220d      	movs	r2, #13
 8008c42:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008c44:	1d3b      	adds	r3, r7, #4
 8008c46:	2200      	movs	r2, #0
 8008c48:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008c4a:	1d3b      	adds	r3, r7, #4
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008c50:	1d3b      	adds	r3, r7, #4
 8008c52:	2200      	movs	r2, #0
 8008c54:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008c56:	1d3b      	adds	r3, r7, #4
 8008c58:	2200      	movs	r2, #0
 8008c5a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008c5c:	1d39      	adds	r1, r7, #4
 8008c5e:	4b16      	ldr	r3, [pc, #88]	@ (8008cb8 <MX_RTC_Init+0xd4>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	0018      	movs	r0, r3
 8008c64:	f00c fb0e 	bl	8015284 <HAL_RTC_SetTime>
 8008c68:	1e03      	subs	r3, r0, #0
 8008c6a:	d001      	beq.n	8008c70 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008c6c:	f7ff f998 	bl	8007fa0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008c70:	003b      	movs	r3, r7
 8008c72:	2206      	movs	r2, #6
 8008c74:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008c76:	003b      	movs	r3, r7
 8008c78:	2211      	movs	r2, #17
 8008c7a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008c7c:	003b      	movs	r3, r7
 8008c7e:	2217      	movs	r2, #23
 8008c80:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008c82:	003b      	movs	r3, r7
 8008c84:	2218      	movs	r2, #24
 8008c86:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008c88:	0039      	movs	r1, r7
 8008c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008cb8 <MX_RTC_Init+0xd4>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	0018      	movs	r0, r3
 8008c90:	f00c fc00 	bl	8015494 <HAL_RTC_SetDate>
 8008c94:	1e03      	subs	r3, r0, #0
 8008c96:	d001      	beq.n	8008c9c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008c98:	f7ff f982 	bl	8007fa0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008c9c:	4b06      	ldr	r3, [pc, #24]	@ (8008cb8 <MX_RTC_Init+0xd4>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	0018      	movs	r0, r3
 8008ca4:	f00c fdb0 	bl	8015808 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008ca8:	1e03      	subs	r3, r0, #0
 8008caa:	d001      	beq.n	8008cb0 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008cac:	f7ff f978 	bl	8007fa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008cb0:	46c0      	nop			@ (mov r8, r8)
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	b006      	add	sp, #24
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	200011ec 	.word	0x200011ec
 8008cbc:	40002800 	.word	0x40002800

08008cc0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8008cf8 <HAL_RTC_MspInit+0x38>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d10e      	bne.n	8008cf0 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8008cfc <HAL_RTC_MspInit+0x3c>)
 8008cd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008cd6:	4b09      	ldr	r3, [pc, #36]	@ (8008cfc <HAL_RTC_MspInit+0x3c>)
 8008cd8:	2180      	movs	r1, #128	@ 0x80
 8008cda:	02c9      	lsls	r1, r1, #11
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	2002      	movs	r0, #2
 8008ce6:	f005 fe65 	bl	800e9b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8008cea:	2002      	movs	r0, #2
 8008cec:	f005 fe77 	bl	800e9de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008cf0:	46c0      	nop			@ (mov r8, r8)
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	b002      	add	sp, #8
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	40002800 	.word	0x40002800
 8008cfc:	40021000 	.word	0x40021000

08008d00 <setsen5xReadTimer>:
uint8_t sen5xSamples = 0;
uint8_t sen5xErrors = 0;
static sen5x_states samplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

void setsen5xReadTimer(uint32_t delayms) {
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 8008d08:	f005 f9c2 	bl	800e090 <HAL_GetTick>
 8008d0c:	0002      	movs	r2, r0
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	18d2      	adds	r2, r2, r3
 8008d12:	4b03      	ldr	r3, [pc, #12]	@ (8008d20 <setsen5xReadTimer+0x20>)
 8008d14:	601a      	str	r2, [r3, #0]
}
 8008d16:	46c0      	nop			@ (mov r8, r8)
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	b002      	add	sp, #8
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	46c0      	nop			@ (mov r8, r8)
 8008d20:	20001214 	.word	0x20001214

08008d24 <enable_sen5x>:

bool enable_sen5x(uint32_t sleepTime) {
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  if (sen5x_Present) {
 8008d2c:	4b19      	ldr	r3, [pc, #100]	@ (8008d94 <enable_sen5x+0x70>)
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d026      	beq.n	8008d82 <enable_sen5x+0x5e>
    sen5x_Enable = !sen5x_Enable;
 8008d34:	4b18      	ldr	r3, [pc, #96]	@ (8008d98 <enable_sen5x+0x74>)
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	1e5a      	subs	r2, r3, #1
 8008d3a:	4193      	sbcs	r3, r2
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2201      	movs	r2, #1
 8008d40:	4053      	eors	r3, r2
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	1c1a      	adds	r2, r3, #0
 8008d46:	2301      	movs	r3, #1
 8008d48:	4013      	ands	r3, r2
 8008d4a:	b2da      	uxtb	r2, r3
 8008d4c:	4b12      	ldr	r3, [pc, #72]	@ (8008d98 <enable_sen5x+0x74>)
 8008d4e:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 8008d50:	4b11      	ldr	r3, [pc, #68]	@ (8008d98 <enable_sen5x+0x74>)
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00a      	beq.n	8008d6e <enable_sen5x+0x4a>
      setsen5xReadTimer(0);
 8008d58:	2000      	movs	r0, #0
 8008d5a:	f7ff ffd1 	bl	8008d00 <setsen5xReadTimer>
      Debug("SEN5X status of sen5x_Enable %d", sen5x_Enable);
 8008d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8008d98 <enable_sen5x+0x74>)
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	4a0e      	ldr	r2, [pc, #56]	@ (8008d9c <enable_sen5x+0x78>)
 8008d64:	490e      	ldr	r1, [pc, #56]	@ (8008da0 <enable_sen5x+0x7c>)
 8008d66:	2003      	movs	r0, #3
 8008d68:	f004 fdf4 	bl	800d954 <CreateLine>
 8008d6c:	e009      	b.n	8008d82 <enable_sen5x+0x5e>
    }
    else {
      setsen5xReadTimer(HAL_GetTick() +( 3 * (sleepTime*1000))); //The ticker starts after 3*880, effective this turn the sen5x device will not start
 8008d6e:	f005 f98f 	bl	800e090 <HAL_GetTick>
 8008d72:	0002      	movs	r2, r0
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	490b      	ldr	r1, [pc, #44]	@ (8008da4 <enable_sen5x+0x80>)
 8008d78:	434b      	muls	r3, r1
 8008d7a:	18d3      	adds	r3, r2, r3
 8008d7c:	0018      	movs	r0, r3
 8008d7e:	f7ff ffbf 	bl	8008d00 <setsen5xReadTimer>
    }
  }
  samplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 8008d82:	4b09      	ldr	r3, [pc, #36]	@ (8008da8 <enable_sen5x+0x84>)
 8008d84:	2201      	movs	r2, #1
 8008d86:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8008d88:	4b03      	ldr	r3, [pc, #12]	@ (8008d98 <enable_sen5x+0x74>)
 8008d8a:	781b      	ldrb	r3, [r3, #0]
}
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	b002      	add	sp, #8
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	20000f1c 	.word	0x20000f1c
 8008d98:	20001212 	.word	0x20001212
 8008d9c:	08023514 	.word	0x08023514
 8008da0:	08023534 	.word	0x08023534
 8008da4:	00000bb8 	.word	0x00000bb8
 8008da8:	20000081 	.word	0x20000081

08008dac <sen5x_Power_On>:
void sen5x_Power_On(void) {
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_On");
 8008db0:	4a0a      	ldr	r2, [pc, #40]	@ (8008ddc <sen5x_Power_On+0x30>)
 8008db2:	4b0b      	ldr	r3, [pc, #44]	@ (8008de0 <sen5x_Power_On+0x34>)
 8008db4:	0019      	movs	r1, r3
 8008db6:	2003      	movs	r0, #3
 8008db8:	f004 fdcc 	bl	800d954 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 8008dbc:	2380      	movs	r3, #128	@ 0x80
 8008dbe:	015b      	lsls	r3, r3, #5
 8008dc0:	4808      	ldr	r0, [pc, #32]	@ (8008de4 <sen5x_Power_On+0x38>)
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	0019      	movs	r1, r3
 8008dc6:	f006 fbde 	bl	800f586 <HAL_GPIO_WritePin>
  sen5x_On = true;
 8008dca:	4b07      	ldr	r3, [pc, #28]	@ (8008de8 <sen5x_Power_On+0x3c>)
 8008dcc:	2201      	movs	r2, #1
 8008dce:	701a      	strb	r2, [r3, #0]
  HAL_Delay(200);
 8008dd0:	20c8      	movs	r0, #200	@ 0xc8
 8008dd2:	f005 f967 	bl	800e0a4 <HAL_Delay>
  return;
 8008dd6:	46c0      	nop			@ (mov r8, r8)
}
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	08023538 	.word	0x08023538
 8008de0:	08023534 	.word	0x08023534
 8008de4:	50000800 	.word	0x50000800
 8008de8:	20001211 	.word	0x20001211

08008dec <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8008dec:	b580      	push	{r7, lr}
 8008dee:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_Off");
 8008df0:	4a09      	ldr	r2, [pc, #36]	@ (8008e18 <sen5x_Power_Off+0x2c>)
 8008df2:	4b0a      	ldr	r3, [pc, #40]	@ (8008e1c <sen5x_Power_Off+0x30>)
 8008df4:	0019      	movs	r1, r3
 8008df6:	2003      	movs	r0, #3
 8008df8:	f004 fdac 	bl	800d954 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8008dfc:	2380      	movs	r3, #128	@ 0x80
 8008dfe:	015b      	lsls	r3, r3, #5
 8008e00:	4807      	ldr	r0, [pc, #28]	@ (8008e20 <sen5x_Power_Off+0x34>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	0019      	movs	r1, r3
 8008e06:	f006 fbbe 	bl	800f586 <HAL_GPIO_WritePin>
  sen5x_On = false;
 8008e0a:	4b06      	ldr	r3, [pc, #24]	@ (8008e24 <sen5x_Power_Off+0x38>)
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	701a      	strb	r2, [r3, #0]
  return;
 8008e10:	46c0      	nop			@ (mov r8, r8)
}
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	46c0      	nop			@ (mov r8, r8)
 8008e18:	08023554 	.word	0x08023554
 8008e1c:	08023534 	.word	0x08023534
 8008e20:	50000800 	.word	0x50000800
 8008e24:	20001211 	.word	0x20001211

08008e28 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 8008e2c:	4b02      	ldr	r3, [pc, #8]	@ (8008e38 <reset_fanCleaningDone+0x10>)
 8008e2e:	2200      	movs	r2, #0
 8008e30:	701a      	strb	r2, [r3, #0]
}
 8008e32:	46c0      	nop			@ (mov r8, r8)
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	20001210 	.word	0x20001210

08008e3c <probe_sen5x>:

int16_t probe_sen5x(void) {
 8008e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e3e:	b09b      	sub	sp, #108	@ 0x6c
 8008e40:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 8008e42:	2456      	movs	r4, #86	@ 0x56
 8008e44:	193b      	adds	r3, r7, r4
 8008e46:	2200      	movs	r2, #0
 8008e48:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 8008e4a:	2355      	movs	r3, #85	@ 0x55
 8008e4c:	18fb      	adds	r3, r7, r3
 8008e4e:	2220      	movs	r2, #32
 8008e50:	701a      	strb	r2, [r3, #0]
  unsigned char product_name[32];
  uint8_t product_name_size = 32;
 8008e52:	2354      	movs	r3, #84	@ 0x54
 8008e54:	18fb      	adds	r3, r7, r3
 8008e56:	2220      	movs	r2, #32
 8008e58:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8008e5a:	f7ff ffa7 	bl	8008dac <sen5x_Power_On>

  error = sen5x_device_reset();
 8008e5e:	0025      	movs	r5, r4
 8008e60:	193c      	adds	r4, r7, r4
 8008e62:	f000 ffed 	bl	8009e40 <sen5x_device_reset>
 8008e66:	0003      	movs	r3, r0
 8008e68:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008e6a:	002c      	movs	r4, r5
 8008e6c:	193b      	adds	r3, r7, r4
 8008e6e:	2200      	movs	r2, #0
 8008e70:	5e9b      	ldrsh	r3, [r3, r2]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00b      	beq.n	8008e8e <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 8008e76:	193b      	adds	r3, r7, r4
 8008e78:	2200      	movs	r2, #0
 8008e7a:	5e9b      	ldrsh	r3, [r3, r2]
 8008e7c:	4a6d      	ldr	r2, [pc, #436]	@ (8009034 <probe_sen5x+0x1f8>)
 8008e7e:	496e      	ldr	r1, [pc, #440]	@ (8009038 <probe_sen5x+0x1fc>)
 8008e80:	2001      	movs	r0, #1
 8008e82:	f004 fd67 	bl	800d954 <CreateLine>
      return error;
 8008e86:	193b      	adds	r3, r7, r4
 8008e88:	2200      	movs	r2, #0
 8008e8a:	5e9b      	ldrsh	r3, [r3, r2]
 8008e8c:	e0ce      	b.n	800902c <probe_sen5x+0x1f0>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 8008e8e:	2556      	movs	r5, #86	@ 0x56
 8008e90:	197c      	adds	r4, r7, r5
 8008e92:	2355      	movs	r3, #85	@ 0x55
 8008e94:	18fb      	adds	r3, r7, r3
 8008e96:	781a      	ldrb	r2, [r3, #0]
 8008e98:	232c      	movs	r3, #44	@ 0x2c
 8008e9a:	18fb      	adds	r3, r7, r3
 8008e9c:	0011      	movs	r1, r2
 8008e9e:	0018      	movs	r0, r3
 8008ea0:	f000 feba 	bl	8009c18 <sen5x_get_serial_number>
 8008ea4:	0003      	movs	r3, r0
 8008ea6:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008ea8:	197b      	adds	r3, r7, r5
 8008eaa:	2200      	movs	r2, #0
 8008eac:	5e9b      	ldrsh	r3, [r3, r2]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00b      	beq.n	8008eca <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 8008eb2:	197b      	adds	r3, r7, r5
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	5e9a      	ldrsh	r2, [r3, r2]
 8008eb8:	4b60      	ldr	r3, [pc, #384]	@ (800903c <probe_sen5x+0x200>)
 8008eba:	0011      	movs	r1, r2
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	f016 f937 	bl	801f130 <iprintf>
      return error;
 8008ec2:	197b      	adds	r3, r7, r5
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	5e9b      	ldrsh	r3, [r3, r2]
 8008ec8:	e0b0      	b.n	800902c <probe_sen5x+0x1f0>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 8008eca:	232c      	movs	r3, #44	@ 0x2c
 8008ecc:	18fa      	adds	r2, r7, r3
 8008ece:	4b5c      	ldr	r3, [pc, #368]	@ (8009040 <probe_sen5x+0x204>)
 8008ed0:	0011      	movs	r1, r2
 8008ed2:	0018      	movs	r0, r3
 8008ed4:	f016 f92c 	bl	801f130 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8008ed8:	2556      	movs	r5, #86	@ 0x56
 8008eda:	197c      	adds	r4, r7, r5
 8008edc:	2354      	movs	r3, #84	@ 0x54
 8008ede:	18fb      	adds	r3, r7, r3
 8008ee0:	781a      	ldrb	r2, [r3, #0]
 8008ee2:	230c      	movs	r3, #12
 8008ee4:	18fb      	adds	r3, r7, r3
 8008ee6:	0011      	movs	r1, r2
 8008ee8:	0018      	movs	r0, r3
 8008eea:	f000 fe3f 	bl	8009b6c <sen5x_get_product_name>
 8008eee:	0003      	movs	r3, r0
 8008ef0:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008ef2:	197b      	adds	r3, r7, r5
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	5e9b      	ldrsh	r3, [r3, r2]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00b      	beq.n	8008f14 <probe_sen5x+0xd8>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 8008efc:	197b      	adds	r3, r7, r5
 8008efe:	2200      	movs	r2, #0
 8008f00:	5e9a      	ldrsh	r2, [r3, r2]
 8008f02:	4b50      	ldr	r3, [pc, #320]	@ (8009044 <probe_sen5x+0x208>)
 8008f04:	0011      	movs	r1, r2
 8008f06:	0018      	movs	r0, r3
 8008f08:	f016 f912 	bl	801f130 <iprintf>
      return error;
 8008f0c:	197b      	adds	r3, r7, r5
 8008f0e:	2200      	movs	r2, #0
 8008f10:	5e9b      	ldrsh	r3, [r3, r2]
 8008f12:	e08b      	b.n	800902c <probe_sen5x+0x1f0>
  } else {
      printf("Product name: %s\r\n", product_name);
 8008f14:	230c      	movs	r3, #12
 8008f16:	18fa      	adds	r2, r7, r3
 8008f18:	4b4b      	ldr	r3, [pc, #300]	@ (8009048 <probe_sen5x+0x20c>)
 8008f1a:	0011      	movs	r1, r2
 8008f1c:	0018      	movs	r0, r3
 8008f1e:	f016 f907 	bl	801f130 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8008f22:	2656      	movs	r6, #86	@ 0x56
 8008f24:	19bc      	adds	r4, r7, r6
 8008f26:	2308      	movs	r3, #8
 8008f28:	18fd      	adds	r5, r7, r3
 8008f2a:	2309      	movs	r3, #9
 8008f2c:	18fa      	adds	r2, r7, r3
 8008f2e:	230a      	movs	r3, #10
 8008f30:	18f9      	adds	r1, r7, r3
 8008f32:	230b      	movs	r3, #11
 8008f34:	18f8      	adds	r0, r7, r3
 8008f36:	1d7b      	adds	r3, r7, #5
 8008f38:	9302      	str	r3, [sp, #8]
 8008f3a:	1dbb      	adds	r3, r7, #6
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	1dfb      	adds	r3, r7, #7
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	002b      	movs	r3, r5
 8008f44:	f000 febe 	bl	8009cc4 <sen5x_get_version>
 8008f48:	0003      	movs	r3, r0
 8008f4a:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8008f4c:	19bb      	adds	r3, r7, r6
 8008f4e:	2200      	movs	r2, #0
 8008f50:	5e9b      	ldrsh	r3, [r3, r2]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00b      	beq.n	8008f6e <probe_sen5x+0x132>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8008f56:	19bb      	adds	r3, r7, r6
 8008f58:	2200      	movs	r2, #0
 8008f5a:	5e9a      	ldrsh	r2, [r3, r2]
 8008f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800904c <probe_sen5x+0x210>)
 8008f5e:	0011      	movs	r1, r2
 8008f60:	0018      	movs	r0, r3
 8008f62:	f016 f8e5 	bl	801f130 <iprintf>
      return error;
 8008f66:	19bb      	adds	r3, r7, r6
 8008f68:	2200      	movs	r2, #0
 8008f6a:	5e9b      	ldrsh	r3, [r3, r2]
 8008f6c:	e05e      	b.n	800902c <probe_sen5x+0x1f0>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 8008f6e:	230b      	movs	r3, #11
 8008f70:	18fb      	adds	r3, r7, r3
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	0019      	movs	r1, r3
 8008f76:	230a      	movs	r3, #10
 8008f78:	18fb      	adds	r3, r7, r3
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	001a      	movs	r2, r3
 8008f7e:	2308      	movs	r3, #8
 8008f80:	18fb      	adds	r3, r7, r3
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	001c      	movs	r4, r3
 8008f86:	1dfb      	adds	r3, r7, #7
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	4831      	ldr	r0, [pc, #196]	@ (8009050 <probe_sen5x+0x214>)
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	0023      	movs	r3, r4
 8008f90:	f016 f8ce 	bl	801f130 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 8008f94:	2300      	movs	r3, #0
 8008f96:	653b      	str	r3, [r7, #80]	@ 0x50
  int16_t default_slope = 0;
 8008f98:	264e      	movs	r6, #78	@ 0x4e
 8008f9a:	19bb      	adds	r3, r7, r6
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8008fa0:	234c      	movs	r3, #76	@ 0x4c
 8008fa2:	18fb      	adds	r3, r7, r3
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8008fa8:	492a      	ldr	r1, [pc, #168]	@ (8009054 <probe_sen5x+0x218>)
 8008faa:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008fac:	f7f7 fff8 	bl	8000fa0 <__aeabi_fmul>
 8008fb0:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 8008fb2:	1c18      	adds	r0, r3, #0
 8008fb4:	f7f8 faec 	bl	8001590 <__aeabi_f2iz>
 8008fb8:	0003      	movs	r3, r0
 8008fba:	b218      	sxth	r0, r3
 8008fbc:	2556      	movs	r5, #86	@ 0x56
 8008fbe:	197c      	adds	r4, r7, r5
 8008fc0:	234c      	movs	r3, #76	@ 0x4c
 8008fc2:	18fb      	adds	r3, r7, r3
 8008fc4:	881a      	ldrh	r2, [r3, #0]
 8008fc6:	19bb      	adds	r3, r7, r6
 8008fc8:	2100      	movs	r1, #0
 8008fca:	5e5b      	ldrsh	r3, [r3, r1]
 8008fcc:	0019      	movs	r1, r3
 8008fce:	f000 fd69 	bl	8009aa4 <sen5x_set_temperature_offset_parameters>
 8008fd2:	0003      	movs	r3, r0
 8008fd4:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008fd6:	197b      	adds	r3, r7, r5
 8008fd8:	2200      	movs	r2, #0
 8008fda:	5e9b      	ldrsh	r3, [r3, r2]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00b      	beq.n	8008ff8 <probe_sen5x+0x1bc>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8008fe0:	197b      	adds	r3, r7, r5
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	5e9b      	ldrsh	r3, [r3, r2]
 8008fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8009058 <probe_sen5x+0x21c>)
 8008fe8:	4913      	ldr	r1, [pc, #76]	@ (8009038 <probe_sen5x+0x1fc>)
 8008fea:	2001      	movs	r0, #1
 8008fec:	f004 fcb2 	bl	800d954 <CreateLine>
      return error;
 8008ff0:	197b      	adds	r3, r7, r5
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	5e9b      	ldrsh	r3, [r3, r2]
 8008ff6:	e019      	b.n	800902c <probe_sen5x+0x1f0>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8008ff8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008ffa:	f7fa fa33 	bl	8003464 <__aeabi_f2d>
 8008ffe:	0002      	movs	r2, r0
 8009000:	000b      	movs	r3, r1
 8009002:	4816      	ldr	r0, [pc, #88]	@ (800905c <probe_sen5x+0x220>)
 8009004:	4916      	ldr	r1, [pc, #88]	@ (8009060 <probe_sen5x+0x224>)
 8009006:	9200      	str	r2, [sp, #0]
 8009008:	9301      	str	r3, [sp, #4]
 800900a:	0002      	movs	r2, r0
 800900c:	2002      	movs	r0, #2
 800900e:	f004 fca1 	bl	800d954 <CreateLine>
  }
  sen5x_Power_Off();
 8009012:	f7ff feeb 	bl	8008dec <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 8009016:	f005 f83b 	bl	800e090 <HAL_GetTick>
 800901a:	0003      	movs	r3, r0
 800901c:	4a11      	ldr	r2, [pc, #68]	@ (8009064 <probe_sen5x+0x228>)
 800901e:	189a      	adds	r2, r3, r2
 8009020:	4b11      	ldr	r3, [pc, #68]	@ (8009068 <probe_sen5x+0x22c>)
 8009022:	601a      	str	r2, [r3, #0]
  return error;
 8009024:	2356      	movs	r3, #86	@ 0x56
 8009026:	18fb      	adds	r3, r7, r3
 8009028:	2200      	movs	r2, #0
 800902a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800902c:	0018      	movs	r0, r3
 800902e:	46bd      	mov	sp, r7
 8009030:	b017      	add	sp, #92	@ 0x5c
 8009032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009034:	08023570 	.word	0x08023570
 8009038:	0802359c 	.word	0x0802359c
 800903c:	080235a0 	.word	0x080235a0
 8009040:	080235d0 	.word	0x080235d0
 8009044:	080235e4 	.word	0x080235e4
 8009048:	08023614 	.word	0x08023614
 800904c:	08023628 	.word	0x08023628
 8009050:	08023654 	.word	0x08023654
 8009054:	43480000 	.word	0x43480000
 8009058:	08023678 	.word	0x08023678
 800905c:	080236b8 	.word	0x080236b8
 8009060:	080236f0 	.word	0x080236f0
 8009064:	000061a8 	.word	0x000061a8
 8009068:	20001214 	.word	0x20001214

0800906c <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800906c:	b590      	push	{r4, r7, lr}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 8009072:	1dbb      	adds	r3, r7, #6
 8009074:	2200      	movs	r2, #0
 8009076:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  error = sen5x_start_measurement();
 8009078:	1dbc      	adds	r4, r7, #6
 800907a:	f000 fb9f 	bl	80097bc <sen5x_start_measurement>
 800907e:	0003      	movs	r3, r0
 8009080:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009082:	1dbb      	adds	r3, r7, #6
 8009084:	2200      	movs	r2, #0
 8009086:	5e9b      	ldrsh	r3, [r3, r2]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d007      	beq.n	800909c <sen5x_lightup_measurement+0x30>
      Error("Error executing sen5x_lightup_measurement(): %i", error);
 800908c:	1dbb      	adds	r3, r7, #6
 800908e:	2200      	movs	r2, #0
 8009090:	5e9b      	ldrsh	r3, [r3, r2]
 8009092:	4a06      	ldr	r2, [pc, #24]	@ (80090ac <sen5x_lightup_measurement+0x40>)
 8009094:	4906      	ldr	r1, [pc, #24]	@ (80090b0 <sen5x_lightup_measurement+0x44>)
 8009096:	2001      	movs	r0, #1
 8009098:	f004 fc5c 	bl	800d954 <CreateLine>
  }
  return error;
 800909c:	1dbb      	adds	r3, r7, #6
 800909e:	2200      	movs	r2, #0
 80090a0:	5e9b      	ldrsh	r3, [r3, r2]
}
 80090a2:	0018      	movs	r0, r3
 80090a4:	46bd      	mov	sp, r7
 80090a6:	b003      	add	sp, #12
 80090a8:	bd90      	pop	{r4, r7, pc}
 80090aa:	46c0      	nop			@ (mov r8, r8)
 80090ac:	080236f4 	.word	0x080236f4
 80090b0:	0802359c 	.word	0x0802359c

080090b4 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 80090b4:	b590      	push	{r4, r7, lr}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 80090ba:	1dbb      	adds	r3, r7, #6
 80090bc:	2200      	movs	r2, #0
 80090be:	801a      	strh	r2, [r3, #0]
  error = sen5x_stop_measurement();
 80090c0:	1dbc      	adds	r4, r7, #6
 80090c2:	f000 fba9 	bl	8009818 <sen5x_stop_measurement>
 80090c6:	0003      	movs	r3, r0
 80090c8:	8023      	strh	r3, [r4, #0]
  if (error) {
 80090ca:	1dbb      	adds	r3, r7, #6
 80090cc:	2200      	movs	r2, #0
 80090ce:	5e9b      	ldrsh	r3, [r3, r2]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d007      	beq.n	80090e4 <sen5x_extinguish_measurement+0x30>
    Error("Error executing sen5x_stop_measurement(): %i", error);
 80090d4:	1dbb      	adds	r3, r7, #6
 80090d6:	2200      	movs	r2, #0
 80090d8:	5e9b      	ldrsh	r3, [r3, r2]
 80090da:	4a06      	ldr	r2, [pc, #24]	@ (80090f4 <sen5x_extinguish_measurement+0x40>)
 80090dc:	4906      	ldr	r1, [pc, #24]	@ (80090f8 <sen5x_extinguish_measurement+0x44>)
 80090de:	2001      	movs	r0, #1
 80090e0:	f004 fc38 	bl	800d954 <CreateLine>
  }
  return error;
 80090e4:	1dbb      	adds	r3, r7, #6
 80090e6:	2200      	movs	r2, #0
 80090e8:	5e9b      	ldrsh	r3, [r3, r2]
}
 80090ea:	0018      	movs	r0, r3
 80090ec:	46bd      	mov	sp, r7
 80090ee:	b003      	add	sp, #12
 80090f0:	bd90      	pop	{r4, r7, pc}
 80090f2:	46c0      	nop			@ (mov r8, r8)
 80090f4:	08023724 	.word	0x08023724
 80090f8:	0802359c 	.word	0x0802359c

080090fc <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 80090fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090fe:	b08d      	sub	sp, #52	@ 0x34
 8009100:	af04      	add	r7, sp, #16
 8009102:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 8009104:	261e      	movs	r6, #30
 8009106:	19bb      	adds	r3, r7, r6
 8009108:	2200      	movs	r2, #0
 800910a:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800910c:	19bc      	adds	r4, r7, r6
 800910e:	2316      	movs	r3, #22
 8009110:	18fd      	adds	r5, r7, r3
 8009112:	2318      	movs	r3, #24
 8009114:	18fa      	adds	r2, r7, r3
 8009116:	231a      	movs	r3, #26
 8009118:	18f9      	adds	r1, r7, r3
 800911a:	231c      	movs	r3, #28
 800911c:	18f8      	adds	r0, r7, r3
 800911e:	230e      	movs	r3, #14
 8009120:	18fb      	adds	r3, r7, r3
 8009122:	9303      	str	r3, [sp, #12]
 8009124:	2310      	movs	r3, #16
 8009126:	18fb      	adds	r3, r7, r3
 8009128:	9302      	str	r3, [sp, #8]
 800912a:	2312      	movs	r3, #18
 800912c:	18fb      	adds	r3, r7, r3
 800912e:	9301      	str	r3, [sp, #4]
 8009130:	2314      	movs	r3, #20
 8009132:	18fb      	adds	r3, r7, r3
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	002b      	movs	r3, r5
 8009138:	f000 fbf0 	bl	800991c <sen5x_read_measured_values>
 800913c:	0003      	movs	r3, r0
 800913e:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 8009140:	19bb      	adds	r3, r7, r6
 8009142:	2200      	movs	r2, #0
 8009144:	5e9b      	ldrsh	r3, [r3, r2]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d003      	beq.n	8009152 <sen5x_read_measurement+0x56>
    return error;
 800914a:	19bb      	adds	r3, r7, r6
 800914c:	2200      	movs	r2, #0
 800914e:	5e9b      	ldrsh	r3, [r3, r2]
 8009150:	e034      	b.n	80091bc <sen5x_read_measurement+0xc0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 8009152:	231c      	movs	r3, #28
 8009154:	18fb      	adds	r3, r7, r3
 8009156:	881a      	ldrh	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800915c:	211a      	movs	r1, #26
 800915e:	187b      	adds	r3, r7, r1
 8009160:	881a      	ldrh	r2, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 8009166:	2318      	movs	r3, #24
 8009168:	18fb      	adds	r3, r7, r3
 800916a:	881a      	ldrh	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 8009170:	2016      	movs	r0, #22
 8009172:	183b      	adds	r3, r7, r0
 8009174:	881a      	ldrh	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800917a:	2314      	movs	r3, #20
 800917c:	18fb      	adds	r3, r7, r3
 800917e:	2200      	movs	r2, #0
 8009180:	5e9a      	ldrsh	r2, [r3, r2]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 8009186:	2312      	movs	r3, #18
 8009188:	18fb      	adds	r3, r7, r3
 800918a:	2200      	movs	r2, #0
 800918c:	5e9a      	ldrsh	r2, [r3, r2]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 8009192:	2310      	movs	r3, #16
 8009194:	18fb      	adds	r3, r7, r3
 8009196:	2200      	movs	r2, #0
 8009198:	5e9a      	ldrsh	r2, [r3, r2]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800919e:	230e      	movs	r3, #14
 80091a0:	18fb      	adds	r3, r7, r3
 80091a2:	2200      	movs	r2, #0
 80091a4:	5e9a      	ldrsh	r2, [r3, r2]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	81da      	strh	r2, [r3, #14]
  setPMs(mass_concentration_pm2p5, mass_concentration_pm10p0);
 80091aa:	187b      	adds	r3, r7, r1
 80091ac:	881a      	ldrh	r2, [r3, #0]
 80091ae:	183b      	adds	r3, r7, r0
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	0019      	movs	r1, r3
 80091b4:	0010      	movs	r0, r2
 80091b6:	f7fa fbcb 	bl	8003950 <setPMs>
  return 0;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	0018      	movs	r0, r3
 80091be:	46bd      	mov	sp, r7
 80091c0:	b009      	add	sp, #36	@ 0x24
 80091c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091c4 <sen5x_measurement>:

int16_t sen5x_measurement(void) {
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
  // Read Measurement
  int16_t error = 0;
 80091ca:	1dbb      	adds	r3, r7, #6
 80091cc:	2200      	movs	r2, #0
 80091ce:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_measurement");
    if (sen5x_read_measurement(&sen5x_data)) {
 80091d0:	4b6b      	ldr	r3, [pc, #428]	@ (8009380 <sen5x_measurement+0x1bc>)
 80091d2:	0018      	movs	r0, r3
 80091d4:	f7ff ff92 	bl	80090fc <sen5x_read_measurement>
 80091d8:	1e03      	subs	r3, r0, #0
 80091da:	d008      	beq.n	80091ee <sen5x_measurement+0x2a>
      Error("Error executing sen5x_read_measured_values(): %i", error);
 80091dc:	1dbb      	adds	r3, r7, #6
 80091de:	2200      	movs	r2, #0
 80091e0:	5e9b      	ldrsh	r3, [r3, r2]
 80091e2:	4a68      	ldr	r2, [pc, #416]	@ (8009384 <sen5x_measurement+0x1c0>)
 80091e4:	4968      	ldr	r1, [pc, #416]	@ (8009388 <sen5x_measurement+0x1c4>)
 80091e6:	2001      	movs	r0, #1
 80091e8:	f004 fbb4 	bl	800d954 <CreateLine>
 80091ec:	e0c1      	b.n	8009372 <sen5x_measurement+0x1ae>
    }
    else {
      if (sen5xSamples == 0) {
 80091ee:	4b67      	ldr	r3, [pc, #412]	@ (800938c <sen5x_measurement+0x1c8>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <sen5x_measurement+0x36>
      return 0; // first sample reads zero's
 80091f6:	2300      	movs	r3, #0
 80091f8:	e0be      	b.n	8009378 <sen5x_measurement+0x1b4>
    }
    printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 80091fa:	4b61      	ldr	r3, [pc, #388]	@ (8009380 <sen5x_measurement+0x1bc>)
 80091fc:	881b      	ldrh	r3, [r3, #0]
 80091fe:	0018      	movs	r0, r3
 8009200:	f7f8 f9e6 	bl	80015d0 <__aeabi_i2f>
 8009204:	1c03      	adds	r3, r0, #0
 8009206:	4962      	ldr	r1, [pc, #392]	@ (8009390 <sen5x_measurement+0x1cc>)
 8009208:	1c18      	adds	r0, r3, #0
 800920a:	f7f7 fce3 	bl	8000bd4 <__aeabi_fdiv>
 800920e:	1c03      	adds	r3, r0, #0
 8009210:	1c18      	adds	r0, r3, #0
 8009212:	f7fa f927 	bl	8003464 <__aeabi_f2d>
 8009216:	0002      	movs	r2, r0
 8009218:	000b      	movs	r3, r1
 800921a:	495e      	ldr	r1, [pc, #376]	@ (8009394 <sen5x_measurement+0x1d0>)
 800921c:	0008      	movs	r0, r1
 800921e:	f015 ff87 	bl	801f130 <iprintf>
    printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 8009222:	4b57      	ldr	r3, [pc, #348]	@ (8009380 <sen5x_measurement+0x1bc>)
 8009224:	885b      	ldrh	r3, [r3, #2]
 8009226:	0018      	movs	r0, r3
 8009228:	f7f8 f9d2 	bl	80015d0 <__aeabi_i2f>
 800922c:	1c03      	adds	r3, r0, #0
 800922e:	4958      	ldr	r1, [pc, #352]	@ (8009390 <sen5x_measurement+0x1cc>)
 8009230:	1c18      	adds	r0, r3, #0
 8009232:	f7f7 fccf 	bl	8000bd4 <__aeabi_fdiv>
 8009236:	1c03      	adds	r3, r0, #0
 8009238:	1c18      	adds	r0, r3, #0
 800923a:	f7fa f913 	bl	8003464 <__aeabi_f2d>
 800923e:	0002      	movs	r2, r0
 8009240:	000b      	movs	r3, r1
 8009242:	4955      	ldr	r1, [pc, #340]	@ (8009398 <sen5x_measurement+0x1d4>)
 8009244:	0008      	movs	r0, r1
 8009246:	f015 ff73 	bl	801f130 <iprintf>
    printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800924a:	4b4d      	ldr	r3, [pc, #308]	@ (8009380 <sen5x_measurement+0x1bc>)
 800924c:	889b      	ldrh	r3, [r3, #4]
 800924e:	0018      	movs	r0, r3
 8009250:	f7f8 f9be 	bl	80015d0 <__aeabi_i2f>
 8009254:	1c03      	adds	r3, r0, #0
 8009256:	494e      	ldr	r1, [pc, #312]	@ (8009390 <sen5x_measurement+0x1cc>)
 8009258:	1c18      	adds	r0, r3, #0
 800925a:	f7f7 fcbb 	bl	8000bd4 <__aeabi_fdiv>
 800925e:	1c03      	adds	r3, r0, #0
 8009260:	1c18      	adds	r0, r3, #0
 8009262:	f7fa f8ff 	bl	8003464 <__aeabi_f2d>
 8009266:	0002      	movs	r2, r0
 8009268:	000b      	movs	r3, r1
 800926a:	494c      	ldr	r1, [pc, #304]	@ (800939c <sen5x_measurement+0x1d8>)
 800926c:	0008      	movs	r0, r1
 800926e:	f015 ff5f 	bl	801f130 <iprintf>
    printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 8009272:	4b43      	ldr	r3, [pc, #268]	@ (8009380 <sen5x_measurement+0x1bc>)
 8009274:	88db      	ldrh	r3, [r3, #6]
 8009276:	0018      	movs	r0, r3
 8009278:	f7f8 f9aa 	bl	80015d0 <__aeabi_i2f>
 800927c:	1c03      	adds	r3, r0, #0
 800927e:	4944      	ldr	r1, [pc, #272]	@ (8009390 <sen5x_measurement+0x1cc>)
 8009280:	1c18      	adds	r0, r3, #0
 8009282:	f7f7 fca7 	bl	8000bd4 <__aeabi_fdiv>
 8009286:	1c03      	adds	r3, r0, #0
 8009288:	1c18      	adds	r0, r3, #0
 800928a:	f7fa f8eb 	bl	8003464 <__aeabi_f2d>
 800928e:	0002      	movs	r2, r0
 8009290:	000b      	movs	r3, r1
 8009292:	4943      	ldr	r1, [pc, #268]	@ (80093a0 <sen5x_measurement+0x1dc>)
 8009294:	0008      	movs	r0, r1
 8009296:	f015 ff4b 	bl	801f130 <iprintf>
    if (sen5x_data.ambient_humidity != 0x7fff) {
 800929a:	4b39      	ldr	r3, [pc, #228]	@ (8009380 <sen5x_measurement+0x1bc>)
 800929c:	2208      	movs	r2, #8
 800929e:	5e9b      	ldrsh	r3, [r3, r2]
 80092a0:	4a40      	ldr	r2, [pc, #256]	@ (80093a4 <sen5x_measurement+0x1e0>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d014      	beq.n	80092d0 <sen5x_measurement+0x10c>
      printf("Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 80092a6:	4b36      	ldr	r3, [pc, #216]	@ (8009380 <sen5x_measurement+0x1bc>)
 80092a8:	2208      	movs	r2, #8
 80092aa:	5e9b      	ldrsh	r3, [r3, r2]
 80092ac:	0018      	movs	r0, r3
 80092ae:	f7f8 f98f 	bl	80015d0 <__aeabi_i2f>
 80092b2:	1c03      	adds	r3, r0, #0
 80092b4:	493c      	ldr	r1, [pc, #240]	@ (80093a8 <sen5x_measurement+0x1e4>)
 80092b6:	1c18      	adds	r0, r3, #0
 80092b8:	f7f7 fc8c 	bl	8000bd4 <__aeabi_fdiv>
 80092bc:	1c03      	adds	r3, r0, #0
 80092be:	1c18      	adds	r0, r3, #0
 80092c0:	f7fa f8d0 	bl	8003464 <__aeabi_f2d>
 80092c4:	0002      	movs	r2, r0
 80092c6:	000b      	movs	r3, r1
 80092c8:	4938      	ldr	r1, [pc, #224]	@ (80093ac <sen5x_measurement+0x1e8>)
 80092ca:	0008      	movs	r0, r1
 80092cc:	f015 ff30 	bl	801f130 <iprintf>
    }
    if (sen5x_data.ambient_temperature != 0x7fff) {
 80092d0:	4b2b      	ldr	r3, [pc, #172]	@ (8009380 <sen5x_measurement+0x1bc>)
 80092d2:	220a      	movs	r2, #10
 80092d4:	5e9b      	ldrsh	r3, [r3, r2]
 80092d6:	4a33      	ldr	r2, [pc, #204]	@ (80093a4 <sen5x_measurement+0x1e0>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d014      	beq.n	8009306 <sen5x_measurement+0x142>
      printf("Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 80092dc:	4b28      	ldr	r3, [pc, #160]	@ (8009380 <sen5x_measurement+0x1bc>)
 80092de:	220a      	movs	r2, #10
 80092e0:	5e9b      	ldrsh	r3, [r3, r2]
 80092e2:	0018      	movs	r0, r3
 80092e4:	f7f8 f974 	bl	80015d0 <__aeabi_i2f>
 80092e8:	1c03      	adds	r3, r0, #0
 80092ea:	4931      	ldr	r1, [pc, #196]	@ (80093b0 <sen5x_measurement+0x1ec>)
 80092ec:	1c18      	adds	r0, r3, #0
 80092ee:	f7f7 fc71 	bl	8000bd4 <__aeabi_fdiv>
 80092f2:	1c03      	adds	r3, r0, #0
 80092f4:	1c18      	adds	r0, r3, #0
 80092f6:	f7fa f8b5 	bl	8003464 <__aeabi_f2d>
 80092fa:	0002      	movs	r2, r0
 80092fc:	000b      	movs	r3, r1
 80092fe:	492d      	ldr	r1, [pc, #180]	@ (80093b4 <sen5x_measurement+0x1f0>)
 8009300:	0008      	movs	r0, r1
 8009302:	f015 ff15 	bl	801f130 <iprintf>
    }
    if (sen5x_data.voc_index != 0x7fff) {
 8009306:	4b1e      	ldr	r3, [pc, #120]	@ (8009380 <sen5x_measurement+0x1bc>)
 8009308:	220c      	movs	r2, #12
 800930a:	5e9b      	ldrsh	r3, [r3, r2]
 800930c:	4a25      	ldr	r2, [pc, #148]	@ (80093a4 <sen5x_measurement+0x1e0>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d014      	beq.n	800933c <sen5x_measurement+0x178>
      printf("Voc index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 8009312:	4b1b      	ldr	r3, [pc, #108]	@ (8009380 <sen5x_measurement+0x1bc>)
 8009314:	220c      	movs	r2, #12
 8009316:	5e9b      	ldrsh	r3, [r3, r2]
 8009318:	0018      	movs	r0, r3
 800931a:	f7f8 f959 	bl	80015d0 <__aeabi_i2f>
 800931e:	1c03      	adds	r3, r0, #0
 8009320:	491b      	ldr	r1, [pc, #108]	@ (8009390 <sen5x_measurement+0x1cc>)
 8009322:	1c18      	adds	r0, r3, #0
 8009324:	f7f7 fc56 	bl	8000bd4 <__aeabi_fdiv>
 8009328:	1c03      	adds	r3, r0, #0
 800932a:	1c18      	adds	r0, r3, #0
 800932c:	f7fa f89a 	bl	8003464 <__aeabi_f2d>
 8009330:	0002      	movs	r2, r0
 8009332:	000b      	movs	r3, r1
 8009334:	4920      	ldr	r1, [pc, #128]	@ (80093b8 <sen5x_measurement+0x1f4>)
 8009336:	0008      	movs	r0, r1
 8009338:	f015 fefa 	bl	801f130 <iprintf>
    }
    if (sen5x_data.nox_index != 0x7fff) {
 800933c:	4b10      	ldr	r3, [pc, #64]	@ (8009380 <sen5x_measurement+0x1bc>)
 800933e:	220e      	movs	r2, #14
 8009340:	5e9b      	ldrsh	r3, [r3, r2]
 8009342:	4a18      	ldr	r2, [pc, #96]	@ (80093a4 <sen5x_measurement+0x1e0>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d014      	beq.n	8009372 <sen5x_measurement+0x1ae>
      printf("Nox index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 8009348:	4b0d      	ldr	r3, [pc, #52]	@ (8009380 <sen5x_measurement+0x1bc>)
 800934a:	220e      	movs	r2, #14
 800934c:	5e9b      	ldrsh	r3, [r3, r2]
 800934e:	0018      	movs	r0, r3
 8009350:	f7f8 f93e 	bl	80015d0 <__aeabi_i2f>
 8009354:	1c03      	adds	r3, r0, #0
 8009356:	490e      	ldr	r1, [pc, #56]	@ (8009390 <sen5x_measurement+0x1cc>)
 8009358:	1c18      	adds	r0, r3, #0
 800935a:	f7f7 fc3b 	bl	8000bd4 <__aeabi_fdiv>
 800935e:	1c03      	adds	r3, r0, #0
 8009360:	1c18      	adds	r0, r3, #0
 8009362:	f7fa f87f 	bl	8003464 <__aeabi_f2d>
 8009366:	0002      	movs	r2, r0
 8009368:	000b      	movs	r3, r1
 800936a:	4914      	ldr	r1, [pc, #80]	@ (80093bc <sen5x_measurement+0x1f8>)
 800936c:	0008      	movs	r0, r1
 800936e:	f015 fedf 	bl	801f130 <iprintf>
    }
  }
  return error;
 8009372:	1dbb      	adds	r3, r7, #6
 8009374:	2200      	movs	r2, #0
 8009376:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009378:	0018      	movs	r0, r3
 800937a:	46bd      	mov	sp, r7
 800937c:	b002      	add	sp, #8
 800937e:	bd80      	pop	{r7, pc}
 8009380:	2000121c 	.word	0x2000121c
 8009384:	08023754 	.word	0x08023754
 8009388:	0802359c 	.word	0x0802359c
 800938c:	20001218 	.word	0x20001218
 8009390:	41200000 	.word	0x41200000
 8009394:	08023788 	.word	0x08023788
 8009398:	080237b4 	.word	0x080237b4
 800939c:	080237e0 	.word	0x080237e0
 80093a0:	0802380c 	.word	0x0802380c
 80093a4:	00007fff 	.word	0x00007fff
 80093a8:	42c80000 	.word	0x42c80000
 80093ac:	08023838 	.word	0x08023838
 80093b0:	43480000 	.word	0x43480000
 80093b4:	08023858 	.word	0x08023858
 80093b8:	08023878 	.word	0x08023878
 80093bc:	0802388c 	.word	0x0802388c

080093c0 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 80093c0:	b590      	push	{r4, r7, lr}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af02      	add	r7, sp, #8
 80093c6:	6039      	str	r1, [r7, #0]
 80093c8:	0011      	movs	r1, r2
 80093ca:	1dfb      	adds	r3, r7, #7
 80093cc:	1c02      	adds	r2, r0, #0
 80093ce:	701a      	strb	r2, [r3, #0]
 80093d0:	1d3b      	adds	r3, r7, #4
 80093d2:	1c0a      	adds	r2, r1, #0
 80093d4:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 80093d6:	1dfb      	adds	r3, r7, #7
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	b29b      	uxth	r3, r3
 80093dc:	18db      	adds	r3, r3, r3
 80093de:	b299      	uxth	r1, r3
 80093e0:	1d3b      	adds	r3, r7, #4
 80093e2:	881b      	ldrh	r3, [r3, #0]
 80093e4:	683a      	ldr	r2, [r7, #0]
 80093e6:	4805      	ldr	r0, [pc, #20]	@ (80093fc <sensirion_i2c_hal_read+0x3c>)
 80093e8:	2464      	movs	r4, #100	@ 0x64
 80093ea:	9400      	str	r4, [sp, #0]
 80093ec:	f006 faa2 	bl	800f934 <HAL_I2C_Master_Receive>
 80093f0:	0003      	movs	r3, r0
 80093f2:	b25b      	sxtb	r3, r3
}
 80093f4:	0018      	movs	r0, r3
 80093f6:	46bd      	mov	sp, r7
 80093f8:	b003      	add	sp, #12
 80093fa:	bd90      	pop	{r4, r7, pc}
 80093fc:	20000db0 	.word	0x20000db0

08009400 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8009400:	b590      	push	{r4, r7, lr}
 8009402:	b085      	sub	sp, #20
 8009404:	af02      	add	r7, sp, #8
 8009406:	6039      	str	r1, [r7, #0]
 8009408:	0011      	movs	r1, r2
 800940a:	1dfb      	adds	r3, r7, #7
 800940c:	1c02      	adds	r2, r0, #0
 800940e:	701a      	strb	r2, [r3, #0]
 8009410:	1d3b      	adds	r3, r7, #4
 8009412:	1c0a      	adds	r2, r1, #0
 8009414:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8009416:	1dfb      	adds	r3, r7, #7
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	b29b      	uxth	r3, r3
 800941c:	18db      	adds	r3, r3, r3
 800941e:	b299      	uxth	r1, r3
 8009420:	1d3b      	adds	r3, r7, #4
 8009422:	881b      	ldrh	r3, [r3, #0]
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	4805      	ldr	r0, [pc, #20]	@ (800943c <sensirion_i2c_hal_write+0x3c>)
 8009428:	2464      	movs	r4, #100	@ 0x64
 800942a:	9400      	str	r4, [sp, #0]
 800942c:	f006 f97a 	bl	800f724 <HAL_I2C_Master_Transmit>
 8009430:	0003      	movs	r3, r0
 8009432:	b25b      	sxtb	r3, r3
}
 8009434:	0018      	movs	r0, r3
 8009436:	46bd      	mov	sp, r7
 8009438:	b003      	add	sp, #12
 800943a:	bd90      	pop	{r4, r7, pc}
 800943c:	20000db0 	.word	0x20000db0

08009440 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	22fa      	movs	r2, #250	@ 0xfa
 800944c:	0091      	lsls	r1, r2, #2
 800944e:	0018      	movs	r0, r3
 8009450:	f7f6 fea8 	bl	80001a4 <__udivsi3>
 8009454:	0003      	movs	r3, r0
 8009456:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	22fa      	movs	r2, #250	@ 0xfa
 800945c:	0091      	lsls	r1, r2, #2
 800945e:	0018      	movs	r0, r3
 8009460:	f7f6 ff26 	bl	80002b0 <__aeabi_uidivmod>
 8009464:	1e0b      	subs	r3, r1, #0
 8009466:	d002      	beq.n	800946e <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	3301      	adds	r3, #1
 800946c:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	0018      	movs	r0, r3
 8009472:	f004 fe17 	bl	800e0a4 <HAL_Delay>
}
 8009476:	46c0      	nop			@ (mov r8, r8)
 8009478:	46bd      	mov	sp, r7
 800947a:	b004      	add	sp, #16
 800947c:	bd80      	pop	{r7, pc}
	...

08009480 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800948a:	1d3b      	adds	r3, r7, #4
 800948c:	0018      	movs	r0, r3
 800948e:	f000 fc85 	bl	8009d9c <sen5x_read_device_status>
 8009492:	1e03      	subs	r3, r0, #0
 8009494:	d007      	beq.n	80094a6 <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 8009496:	4a2b      	ldr	r2, [pc, #172]	@ (8009544 <sen5x_check_for_errors+0xc4>)
 8009498:	4b2b      	ldr	r3, [pc, #172]	@ (8009548 <sen5x_check_for_errors+0xc8>)
 800949a:	0019      	movs	r1, r3
 800949c:	2001      	movs	r0, #1
 800949e:	f004 fa59 	bl	800d954 <CreateLine>
//    device_status = SEN5X_NO_RESPONSE;
    return 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	e049      	b.n	800953a <sen5x_check_for_errors+0xba>
  }
  if (device_status == 0) {
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d107      	bne.n	80094bc <sen5x_check_for_errors+0x3c>
    Debug("sen5x operates normal");
 80094ac:	4a27      	ldr	r2, [pc, #156]	@ (800954c <sen5x_check_for_errors+0xcc>)
 80094ae:	4b28      	ldr	r3, [pc, #160]	@ (8009550 <sen5x_check_for_errors+0xd0>)
 80094b0:	0019      	movs	r1, r3
 80094b2:	2003      	movs	r0, #3
 80094b4:	f004 fa4e 	bl	800d954 <CreateLine>
    return 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	e03e      	b.n	800953a <sen5x_check_for_errors+0xba>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	2380      	movs	r3, #128	@ 0x80
 80094c0:	039b      	lsls	r3, r3, #14
 80094c2:	4013      	ands	r3, r2
 80094c4:	d005      	beq.n	80094d2 <sen5x_check_for_errors+0x52>
    Debug("sen5x Fan speed out of range");
 80094c6:	4a23      	ldr	r2, [pc, #140]	@ (8009554 <sen5x_check_for_errors+0xd4>)
 80094c8:	4b21      	ldr	r3, [pc, #132]	@ (8009550 <sen5x_check_for_errors+0xd0>)
 80094ca:	0019      	movs	r1, r3
 80094cc:	2003      	movs	r0, #3
 80094ce:	f004 fa41 	bl	800d954 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	2380      	movs	r3, #128	@ 0x80
 80094d6:	031b      	lsls	r3, r3, #12
 80094d8:	4013      	ands	r3, r2
 80094da:	d005      	beq.n	80094e8 <sen5x_check_for_errors+0x68>
    Debug("sen5x Fan cleaning active");
 80094dc:	4a1e      	ldr	r2, [pc, #120]	@ (8009558 <sen5x_check_for_errors+0xd8>)
 80094de:	4b1c      	ldr	r3, [pc, #112]	@ (8009550 <sen5x_check_for_errors+0xd0>)
 80094e0:	0019      	movs	r1, r3
 80094e2:	2003      	movs	r0, #3
 80094e4:	f004 fa36 	bl	800d954 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2280      	movs	r2, #128	@ 0x80
 80094ec:	4013      	ands	r3, r2
 80094ee:	d005      	beq.n	80094fc <sen5x_check_for_errors+0x7c>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 80094f0:	4a1a      	ldr	r2, [pc, #104]	@ (800955c <sen5x_check_for_errors+0xdc>)
 80094f2:	4b17      	ldr	r3, [pc, #92]	@ (8009550 <sen5x_check_for_errors+0xd0>)
 80094f4:	0019      	movs	r1, r3
 80094f6:	2003      	movs	r0, #3
 80094f8:	f004 fa2c 	bl	800d954 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2240      	movs	r2, #64	@ 0x40
 8009500:	4013      	ands	r3, r2
 8009502:	d005      	beq.n	8009510 <sen5x_check_for_errors+0x90>
    Debug("sen5x RHT communication error");
 8009504:	4a16      	ldr	r2, [pc, #88]	@ (8009560 <sen5x_check_for_errors+0xe0>)
 8009506:	4b12      	ldr	r3, [pc, #72]	@ (8009550 <sen5x_check_for_errors+0xd0>)
 8009508:	0019      	movs	r1, r3
 800950a:	2003      	movs	r0, #3
 800950c:	f004 fa22 	bl	800d954 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2220      	movs	r2, #32
 8009514:	4013      	ands	r3, r2
 8009516:	d005      	beq.n	8009524 <sen5x_check_for_errors+0xa4>
    Debug("sen5x Laser failure");
 8009518:	4a12      	ldr	r2, [pc, #72]	@ (8009564 <sen5x_check_for_errors+0xe4>)
 800951a:	4b0d      	ldr	r3, [pc, #52]	@ (8009550 <sen5x_check_for_errors+0xd0>)
 800951c:	0019      	movs	r1, r3
 800951e:	2003      	movs	r0, #3
 8009520:	f004 fa18 	bl	800d954 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2210      	movs	r2, #16
 8009528:	4013      	ands	r3, r2
 800952a:	d005      	beq.n	8009538 <sen5x_check_for_errors+0xb8>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800952c:	4a0e      	ldr	r2, [pc, #56]	@ (8009568 <sen5x_check_for_errors+0xe8>)
 800952e:	4b08      	ldr	r3, [pc, #32]	@ (8009550 <sen5x_check_for_errors+0xd0>)
 8009530:	0019      	movs	r1, r3
 8009532:	2003      	movs	r0, #3
 8009534:	f004 fa0e 	bl	800d954 <CreateLine>
  }
  return 1;
 8009538:	2301      	movs	r3, #1
}
 800953a:	0018      	movs	r0, r3
 800953c:	46bd      	mov	sp, r7
 800953e:	b002      	add	sp, #8
 8009540:	bd80      	pop	{r7, pc}
 8009542:	46c0      	nop			@ (mov r8, r8)
 8009544:	080238a0 	.word	0x080238a0
 8009548:	0802359c 	.word	0x0802359c
 800954c:	080238cc 	.word	0x080238cc
 8009550:	08023534 	.word	0x08023534
 8009554:	080238e4 	.word	0x080238e4
 8009558:	08023904 	.word	0x08023904
 800955c:	08023920 	.word	0x08023920
 8009560:	08023944 	.word	0x08023944
 8009564:	08023964 	.word	0x08023964
 8009568:	08023978 	.word	0x08023978

0800956c <set_light_on_state>:

void set_light_on_state(void) {
 800956c:	b580      	push	{r7, lr}
 800956e:	af00      	add	r7, sp, #0
  sen5x_Power_On();
 8009570:	f7ff fc1c 	bl	8008dac <sen5x_Power_On>
  Debug("sen5x powered on, warming up for 30 sec.");
 8009574:	4a0a      	ldr	r2, [pc, #40]	@ (80095a0 <set_light_on_state+0x34>)
 8009576:	4b0b      	ldr	r3, [pc, #44]	@ (80095a4 <set_light_on_state+0x38>)
 8009578:	0019      	movs	r1, r3
 800957a:	2003      	movs	r0, #3
 800957c:	f004 f9ea 	bl	800d954 <CreateLine>
  if (sen5x_lightup_measurement()) {
 8009580:	f7ff fd74 	bl	800906c <sen5x_lightup_measurement>
 8009584:	1e03      	subs	r3, r0, #0
 8009586:	d005      	beq.n	8009594 <set_light_on_state+0x28>
    Error("Error executing sen5x_lightup_measurement()");
 8009588:	4a07      	ldr	r2, [pc, #28]	@ (80095a8 <set_light_on_state+0x3c>)
 800958a:	4b08      	ldr	r3, [pc, #32]	@ (80095ac <set_light_on_state+0x40>)
 800958c:	0019      	movs	r1, r3
 800958e:	2001      	movs	r0, #1
 8009590:	f004 f9e0 	bl	800d954 <CreateLine>
  }
  samplesState = CHECK_SEN5X;
 8009594:	4b06      	ldr	r3, [pc, #24]	@ (80095b0 <set_light_on_state+0x44>)
 8009596:	2203      	movs	r2, #3
 8009598:	701a      	strb	r2, [r3, #0]
}
 800959a:	46c0      	nop			@ (mov r8, r8)
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	080239b4 	.word	0x080239b4
 80095a4:	08023534 	.word	0x08023534
 80095a8:	080239e0 	.word	0x080239e0
 80095ac:	0802359c 	.word	0x0802359c
 80095b0:	20000081 	.word	0x20000081

080095b4 <sen5x_statemachine>:

void sen5x_statemachine(uint8_t delayfactor) {
 80095b4:	b590      	push	{r4, r7, lr}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	0002      	movs	r2, r0
 80095bc:	1dfb      	adds	r3, r7, #7
 80095be:	701a      	strb	r2, [r3, #0]
  bool data_ready = false;
 80095c0:	230f      	movs	r3, #15
 80095c2:	18fb      	adds	r3, r7, r3
 80095c4:	2200      	movs	r2, #0
 80095c6:	701a      	strb	r2, [r3, #0]
  if (delayfactor == USB_PLUGGED_IN) {
 80095c8:	1dfb      	adds	r3, r7, #7
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d103      	bne.n	80095d8 <sen5x_statemachine+0x24>
    delayfactor =100; // if operated on USB read about every 30 seconds
 80095d0:	1dfb      	adds	r3, r7, #7
 80095d2:	2264      	movs	r2, #100	@ 0x64
 80095d4:	701a      	strb	r2, [r3, #0]
 80095d6:	e002      	b.n	80095de <sen5x_statemachine+0x2a>
  }
  else {
    delayfactor = 1;
 80095d8:	1dfb      	adds	r3, r7, #7
 80095da:	2201      	movs	r2, #1
 80095dc:	701a      	strb	r2, [r3, #0]
  }
  if (TimestampIsReached(sen5xReadTimer)) {
 80095de:	4b67      	ldr	r3, [pc, #412]	@ (800977c <sen5x_statemachine+0x1c8>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	0018      	movs	r0, r3
 80095e4:	f004 f960 	bl	800d8a8 <TimestampIsReached>
 80095e8:	1e03      	subs	r3, r0, #0
 80095ea:	d100      	bne.n	80095ee <sen5x_statemachine+0x3a>
 80095ec:	e0c2      	b.n	8009774 <sen5x_statemachine+0x1c0>
    switch (samplesState) {
 80095ee:	4b64      	ldr	r3, [pc, #400]	@ (8009780 <sen5x_statemachine+0x1cc>)
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	2b05      	cmp	r3, #5
 80095f4:	d900      	bls.n	80095f8 <sen5x_statemachine+0x44>
 80095f6:	e0bd      	b.n	8009774 <sen5x_statemachine+0x1c0>
 80095f8:	009a      	lsls	r2, r3, #2
 80095fa:	4b62      	ldr	r3, [pc, #392]	@ (8009784 <sen5x_statemachine+0x1d0>)
 80095fc:	18d3      	adds	r3, r2, r3
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009602:	4a61      	ldr	r2, [pc, #388]	@ (8009788 <sen5x_statemachine+0x1d4>)
 8009604:	4b61      	ldr	r3, [pc, #388]	@ (800978c <sen5x_statemachine+0x1d8>)
 8009606:	0019      	movs	r1, r3
 8009608:	2001      	movs	r0, #1
 800960a:	f004 f9a3 	bl	800d954 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + (3141592 / delayfactor); //some more less then an hour
 800960e:	f004 fd3f 	bl	800e090 <HAL_GetTick>
 8009612:	0004      	movs	r4, r0
 8009614:	1dfb      	adds	r3, r7, #7
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	0019      	movs	r1, r3
 800961a:	485d      	ldr	r0, [pc, #372]	@ (8009790 <sen5x_statemachine+0x1dc>)
 800961c:	f7f6 fe4c 	bl	80002b8 <__divsi3>
 8009620:	0003      	movs	r3, r0
 8009622:	18e2      	adds	r2, r4, r3
 8009624:	4b55      	ldr	r3, [pc, #340]	@ (800977c <sen5x_statemachine+0x1c8>)
 8009626:	601a      	str	r2, [r3, #0]
      break;
 8009628:	e0a4      	b.n	8009774 <sen5x_statemachine+0x1c0>
    case LIGHT_OUT:
//      Debug(" state is LIGHT_OUT");
      set_light_on_state();
 800962a:	f7ff ff9f 	bl	800956c <set_light_on_state>
      sen5xReadTimer = HAL_GetTick() + 228000; // about every 50 minutes with microphone enabled
 800962e:	f004 fd2f 	bl	800e090 <HAL_GetTick>
 8009632:	0003      	movs	r3, r0
 8009634:	4a57      	ldr	r2, [pc, #348]	@ (8009794 <sen5x_statemachine+0x1e0>)
 8009636:	189a      	adds	r2, r3, r2
 8009638:	4b50      	ldr	r3, [pc, #320]	@ (800977c <sen5x_statemachine+0x1c8>)
 800963a:	601a      	str	r2, [r3, #0]
      break;
 800963c:	e09a      	b.n	8009774 <sen5x_statemachine+0x1c0>
    case CHECK_SEN5X:
      samplesState = LIGHT_ON;
 800963e:	4b50      	ldr	r3, [pc, #320]	@ (8009780 <sen5x_statemachine+0x1cc>)
 8009640:	2202      	movs	r2, #2
 8009642:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 8009644:	4b54      	ldr	r3, [pc, #336]	@ (8009798 <sen5x_statemachine+0x1e4>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	2b05      	cmp	r3, #5
 800964a:	d905      	bls.n	8009658 <sen5x_statemachine+0xa4>
        samplesState = S5X_DISABLED;
 800964c:	4b4c      	ldr	r3, [pc, #304]	@ (8009780 <sen5x_statemachine+0x1cc>)
 800964e:	2200      	movs	r2, #0
 8009650:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009652:	f7ff fbcb 	bl	8008dec <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 8009656:	e08c      	b.n	8009772 <sen5x_statemachine+0x1be>
        if (sen5x_check_for_errors()) {
 8009658:	f7ff ff12 	bl	8009480 <sen5x_check_for_errors>
 800965c:	1e03      	subs	r3, r0, #0
 800965e:	d100      	bne.n	8009662 <sen5x_statemachine+0xae>
 8009660:	e087      	b.n	8009772 <sen5x_statemachine+0x1be>
          if (sen5x_device_reset()) {
 8009662:	f000 fbed 	bl	8009e40 <sen5x_device_reset>
 8009666:	1e03      	subs	r3, r0, #0
 8009668:	d006      	beq.n	8009678 <sen5x_statemachine+0xc4>
            Error("Error resetting sen5x");
 800966a:	4a4c      	ldr	r2, [pc, #304]	@ (800979c <sen5x_statemachine+0x1e8>)
 800966c:	4b47      	ldr	r3, [pc, #284]	@ (800978c <sen5x_statemachine+0x1d8>)
 800966e:	0019      	movs	r1, r3
 8009670:	2001      	movs	r0, #1
 8009672:	f004 f96f 	bl	800d954 <CreateLine>
 8009676:	e005      	b.n	8009684 <sen5x_statemachine+0xd0>
            Info("sen5x reset executed");
 8009678:	4a49      	ldr	r2, [pc, #292]	@ (80097a0 <sen5x_statemachine+0x1ec>)
 800967a:	4b4a      	ldr	r3, [pc, #296]	@ (80097a4 <sen5x_statemachine+0x1f0>)
 800967c:	0019      	movs	r1, r3
 800967e:	2002      	movs	r0, #2
 8009680:	f004 f968 	bl	800d954 <CreateLine>
          sen5xErrors++;
 8009684:	4b44      	ldr	r3, [pc, #272]	@ (8009798 <sen5x_statemachine+0x1e4>)
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	3301      	adds	r3, #1
 800968a:	b2da      	uxtb	r2, r3
 800968c:	4b42      	ldr	r3, [pc, #264]	@ (8009798 <sen5x_statemachine+0x1e4>)
 800968e:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 8009690:	f004 fcfe 	bl	800e090 <HAL_GetTick>
 8009694:	0003      	movs	r3, r0
 8009696:	3396      	adds	r3, #150	@ 0x96
 8009698:	001a      	movs	r2, r3
 800969a:	4b38      	ldr	r3, [pc, #224]	@ (800977c <sen5x_statemachine+0x1c8>)
 800969c:	601a      	str	r2, [r3, #0]
      break;
 800969e:	e068      	b.n	8009772 <sen5x_statemachine+0x1be>
    case LIGHT_ON:
//      Debug(" state is LIGHT_ON");
      sen5x_read_data_ready(&data_ready);  // is new data ready?
 80096a0:	240f      	movs	r4, #15
 80096a2:	193b      	adds	r3, r7, r4
 80096a4:	0018      	movs	r0, r3
 80096a6:	f000 f8e7 	bl	8009878 <sen5x_read_data_ready>
      if (data_ready) {
 80096aa:	193b      	adds	r3, r7, r4
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d026      	beq.n	8009700 <sen5x_statemachine+0x14c>
        if (sen5x_measurement()) {
 80096b2:	f7ff fd87 	bl	80091c4 <sen5x_measurement>
 80096b6:	1e03      	subs	r3, r0, #0
 80096b8:	d005      	beq.n	80096c6 <sen5x_statemachine+0x112>
          Error("Error executing sen5x_measurement()");
 80096ba:	4a3b      	ldr	r2, [pc, #236]	@ (80097a8 <sen5x_statemachine+0x1f4>)
 80096bc:	4b33      	ldr	r3, [pc, #204]	@ (800978c <sen5x_statemachine+0x1d8>)
 80096be:	0019      	movs	r1, r3
 80096c0:	2001      	movs	r0, #1
 80096c2:	f004 f947 	bl	800d954 <CreateLine>
        }
        if (sen5xSamples >= 1) { // take 2 samples, show 1 sample
 80096c6:	4b39      	ldr	r3, [pc, #228]	@ (80097ac <sen5x_statemachine+0x1f8>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d012      	beq.n	80096f4 <sen5x_statemachine+0x140>
          if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 80096ce:	f7fd f81d 	bl	800670c <RTC_GetWeekday>
 80096d2:	0003      	movs	r3, r0
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d10a      	bne.n	80096ee <sen5x_statemachine+0x13a>
 80096d8:	4b35      	ldr	r3, [pc, #212]	@ (80097b0 <sen5x_statemachine+0x1fc>)
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	2201      	movs	r2, #1
 80096de:	4053      	eors	r3, r2
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d003      	beq.n	80096ee <sen5x_statemachine+0x13a>
            samplesState = CLEAN_FAN;
 80096e6:	4b26      	ldr	r3, [pc, #152]	@ (8009780 <sen5x_statemachine+0x1cc>)
 80096e8:	2204      	movs	r2, #4
 80096ea:	701a      	strb	r2, [r3, #0]
 80096ec:	e002      	b.n	80096f4 <sen5x_statemachine+0x140>
          }
          else {
            samplesState = SAMPLES_TAKEN;
 80096ee:	4b24      	ldr	r3, [pc, #144]	@ (8009780 <sen5x_statemachine+0x1cc>)
 80096f0:	2205      	movs	r2, #5
 80096f2:	701a      	strb	r2, [r3, #0]
          }
        }
        sen5xSamples++;
 80096f4:	4b2d      	ldr	r3, [pc, #180]	@ (80097ac <sen5x_statemachine+0x1f8>)
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	3301      	adds	r3, #1
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	4b2b      	ldr	r3, [pc, #172]	@ (80097ac <sen5x_statemachine+0x1f8>)
 80096fe:	701a      	strb	r2, [r3, #0]
      }
      sen5xReadTimer = HAL_GetTick() + 1000;
 8009700:	f004 fcc6 	bl	800e090 <HAL_GetTick>
 8009704:	0003      	movs	r3, r0
 8009706:	22fa      	movs	r2, #250	@ 0xfa
 8009708:	0092      	lsls	r2, r2, #2
 800970a:	189a      	adds	r2, r3, r2
 800970c:	4b1b      	ldr	r3, [pc, #108]	@ (800977c <sen5x_statemachine+0x1c8>)
 800970e:	601a      	str	r2, [r3, #0]
      break;
 8009710:	e030      	b.n	8009774 <sen5x_statemachine+0x1c0>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      sen5x_start_fan_cleaning();
 8009712:	f000 f997 	bl	8009a44 <sen5x_start_fan_cleaning>
      sen5xReadTimer = HAL_GetTick() + 11000;
 8009716:	f004 fcbb 	bl	800e090 <HAL_GetTick>
 800971a:	0003      	movs	r3, r0
 800971c:	4a25      	ldr	r2, [pc, #148]	@ (80097b4 <sen5x_statemachine+0x200>)
 800971e:	189a      	adds	r2, r3, r2
 8009720:	4b16      	ldr	r3, [pc, #88]	@ (800977c <sen5x_statemachine+0x1c8>)
 8009722:	601a      	str	r2, [r3, #0]
      fanCleaningDone = true;
 8009724:	4b22      	ldr	r3, [pc, #136]	@ (80097b0 <sen5x_statemachine+0x1fc>)
 8009726:	2201      	movs	r2, #1
 8009728:	701a      	strb	r2, [r3, #0]
      samplesState = SAMPLES_TAKEN;
 800972a:	4b15      	ldr	r3, [pc, #84]	@ (8009780 <sen5x_statemachine+0x1cc>)
 800972c:	2205      	movs	r2, #5
 800972e:	701a      	strb	r2, [r3, #0]
      break;
 8009730:	e020      	b.n	8009774 <sen5x_statemachine+0x1c0>

    case SAMPLES_TAKEN:
//      Debug(" state is SAMPLES_TAKEN");
      sen5xSamples = 0;
 8009732:	4b1e      	ldr	r3, [pc, #120]	@ (80097ac <sen5x_statemachine+0x1f8>)
 8009734:	2200      	movs	r2, #0
 8009736:	701a      	strb	r2, [r3, #0]
      if (sen5x_extinguish_measurement()) {
 8009738:	f7ff fcbc 	bl	80090b4 <sen5x_extinguish_measurement>
 800973c:	1e03      	subs	r3, r0, #0
 800973e:	d005      	beq.n	800974c <sen5x_statemachine+0x198>
        Error("Error executing sen5x_extinguish_measurement()");
 8009740:	4a1d      	ldr	r2, [pc, #116]	@ (80097b8 <sen5x_statemachine+0x204>)
 8009742:	4b12      	ldr	r3, [pc, #72]	@ (800978c <sen5x_statemachine+0x1d8>)
 8009744:	0019      	movs	r1, r3
 8009746:	2001      	movs	r0, #1
 8009748:	f004 f904 	bl	800d954 <CreateLine>
      }
      sen5x_Power_Off();
 800974c:	f7ff fb4e 	bl	8008dec <sen5x_Power_Off>
      sen5xReadTimer = HAL_GetTick() + (3141592 / delayfactor); //some more less then an hour
 8009750:	f004 fc9e 	bl	800e090 <HAL_GetTick>
 8009754:	0004      	movs	r4, r0
 8009756:	1dfb      	adds	r3, r7, #7
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	0019      	movs	r1, r3
 800975c:	480c      	ldr	r0, [pc, #48]	@ (8009790 <sen5x_statemachine+0x1dc>)
 800975e:	f7f6 fdab 	bl	80002b8 <__divsi3>
 8009762:	0003      	movs	r3, r0
 8009764:	18e2      	adds	r2, r4, r3
 8009766:	4b05      	ldr	r3, [pc, #20]	@ (800977c <sen5x_statemachine+0x1c8>)
 8009768:	601a      	str	r2, [r3, #0]
      samplesState = LIGHT_OUT;
 800976a:	4b05      	ldr	r3, [pc, #20]	@ (8009780 <sen5x_statemachine+0x1cc>)
 800976c:	2201      	movs	r2, #1
 800976e:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8009770:	e000      	b.n	8009774 <sen5x_statemachine+0x1c0>
      break;
 8009772:	46c0      	nop			@ (mov r8, r8)
}
 8009774:	46c0      	nop			@ (mov r8, r8)
 8009776:	46bd      	mov	sp, r7
 8009778:	b005      	add	sp, #20
 800977a:	bd90      	pop	{r4, r7, pc}
 800977c:	20001214 	.word	0x20001214
 8009780:	20000081 	.word	0x20000081
 8009784:	08024220 	.word	0x08024220
 8009788:	08023a0c 	.word	0x08023a0c
 800978c:	0802359c 	.word	0x0802359c
 8009790:	002fefd8 	.word	0x002fefd8
 8009794:	00037aa0 	.word	0x00037aa0
 8009798:	20001219 	.word	0x20001219
 800979c:	08023a3c 	.word	0x08023a3c
 80097a0:	08023a54 	.word	0x08023a54
 80097a4:	080236f0 	.word	0x080236f0
 80097a8:	08023a6c 	.word	0x08023a6c
 80097ac:	20001218 	.word	0x20001218
 80097b0:	20001210 	.word	0x20001210
 80097b4:	00002af8 	.word	0x00002af8
 80097b8:	08023a90 	.word	0x08023a90

080097bc <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 80097bc:	b590      	push	{r4, r7, lr}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80097c2:	1dbb      	adds	r3, r7, #6
 80097c4:	2200      	movs	r2, #0
 80097c6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 80097c8:	1dbc      	adds	r4, r7, #6
 80097ca:	1dbb      	adds	r3, r7, #6
 80097cc:	8819      	ldrh	r1, [r3, #0]
 80097ce:	003b      	movs	r3, r7
 80097d0:	2221      	movs	r2, #33	@ 0x21
 80097d2:	0018      	movs	r0, r3
 80097d4:	f001 fb28 	bl	800ae28 <sensirion_i2c_add_command_to_buffer>
 80097d8:	0003      	movs	r3, r0
 80097da:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80097dc:	1d3c      	adds	r4, r7, #4
 80097de:	1dbb      	adds	r3, r7, #6
 80097e0:	881a      	ldrh	r2, [r3, #0]
 80097e2:	003b      	movs	r3, r7
 80097e4:	0019      	movs	r1, r3
 80097e6:	2069      	movs	r0, #105	@ 0x69
 80097e8:	f001 fba2 	bl	800af30 <sensirion_i2c_write_data>
 80097ec:	0003      	movs	r3, r0
 80097ee:	8023      	strh	r3, [r4, #0]
    if (error) {
 80097f0:	1d3b      	adds	r3, r7, #4
 80097f2:	2200      	movs	r2, #0
 80097f4:	5e9b      	ldrsh	r3, [r3, r2]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d003      	beq.n	8009802 <sen5x_start_measurement+0x46>
        return error;
 80097fa:	1d3b      	adds	r3, r7, #4
 80097fc:	2200      	movs	r2, #0
 80097fe:	5e9b      	ldrsh	r3, [r3, r2]
 8009800:	e004      	b.n	800980c <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009802:	4b04      	ldr	r3, [pc, #16]	@ (8009814 <sen5x_start_measurement+0x58>)
 8009804:	0018      	movs	r0, r3
 8009806:	f7ff fe1b 	bl	8009440 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800980a:	2300      	movs	r3, #0
}
 800980c:	0018      	movs	r0, r3
 800980e:	46bd      	mov	sp, r7
 8009810:	b003      	add	sp, #12
 8009812:	bd90      	pop	{r4, r7, pc}
 8009814:	0000c350 	.word	0x0000c350

08009818 <sen5x_stop_measurement>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t sen5x_stop_measurement(void) {
 8009818:	b590      	push	{r4, r7, lr}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800981e:	1dbb      	adds	r3, r7, #6
 8009820:	2200      	movs	r2, #0
 8009822:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 8009824:	1dbc      	adds	r4, r7, #6
 8009826:	2382      	movs	r3, #130	@ 0x82
 8009828:	005a      	lsls	r2, r3, #1
 800982a:	1dbb      	adds	r3, r7, #6
 800982c:	8819      	ldrh	r1, [r3, #0]
 800982e:	003b      	movs	r3, r7
 8009830:	0018      	movs	r0, r3
 8009832:	f001 faf9 	bl	800ae28 <sensirion_i2c_add_command_to_buffer>
 8009836:	0003      	movs	r3, r0
 8009838:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800983a:	1d3c      	adds	r4, r7, #4
 800983c:	1dbb      	adds	r3, r7, #6
 800983e:	881a      	ldrh	r2, [r3, #0]
 8009840:	003b      	movs	r3, r7
 8009842:	0019      	movs	r1, r3
 8009844:	2069      	movs	r0, #105	@ 0x69
 8009846:	f001 fb73 	bl	800af30 <sensirion_i2c_write_data>
 800984a:	0003      	movs	r3, r0
 800984c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800984e:	1d3b      	adds	r3, r7, #4
 8009850:	2200      	movs	r2, #0
 8009852:	5e9b      	ldrsh	r3, [r3, r2]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d003      	beq.n	8009860 <sen5x_stop_measurement+0x48>
        return error;
 8009858:	1d3b      	adds	r3, r7, #4
 800985a:	2200      	movs	r2, #0
 800985c:	5e9b      	ldrsh	r3, [r3, r2]
 800985e:	e004      	b.n	800986a <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009860:	4b04      	ldr	r3, [pc, #16]	@ (8009874 <sen5x_stop_measurement+0x5c>)
 8009862:	0018      	movs	r0, r3
 8009864:	f7ff fdec 	bl	8009440 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009868:	2300      	movs	r3, #0
}
 800986a:	0018      	movs	r0, r3
 800986c:	46bd      	mov	sp, r7
 800986e:	b003      	add	sp, #12
 8009870:	bd90      	pop	{r4, r7, pc}
 8009872:	46c0      	nop			@ (mov r8, r8)
 8009874:	00030d40 	.word	0x00030d40

08009878 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 8009878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8009880:	250e      	movs	r5, #14
 8009882:	197b      	adds	r3, r7, r5
 8009884:	2200      	movs	r2, #0
 8009886:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 8009888:	197c      	adds	r4, r7, r5
 800988a:	4a22      	ldr	r2, [pc, #136]	@ (8009914 <sen5x_read_data_ready+0x9c>)
 800988c:	197b      	adds	r3, r7, r5
 800988e:	8819      	ldrh	r1, [r3, #0]
 8009890:	2308      	movs	r3, #8
 8009892:	18fb      	adds	r3, r7, r3
 8009894:	0018      	movs	r0, r3
 8009896:	f001 fac7 	bl	800ae28 <sensirion_i2c_add_command_to_buffer>
 800989a:	0003      	movs	r3, r0
 800989c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800989e:	260c      	movs	r6, #12
 80098a0:	19bc      	adds	r4, r7, r6
 80098a2:	197b      	adds	r3, r7, r5
 80098a4:	881a      	ldrh	r2, [r3, #0]
 80098a6:	2308      	movs	r3, #8
 80098a8:	18fb      	adds	r3, r7, r3
 80098aa:	0019      	movs	r1, r3
 80098ac:	2069      	movs	r0, #105	@ 0x69
 80098ae:	f001 fb3f 	bl	800af30 <sensirion_i2c_write_data>
 80098b2:	0003      	movs	r3, r0
 80098b4:	8023      	strh	r3, [r4, #0]
    if (error) {
 80098b6:	19bb      	adds	r3, r7, r6
 80098b8:	2200      	movs	r2, #0
 80098ba:	5e9b      	ldrsh	r3, [r3, r2]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d003      	beq.n	80098c8 <sen5x_read_data_ready+0x50>
        return error;
 80098c0:	19bb      	adds	r3, r7, r6
 80098c2:	2200      	movs	r2, #0
 80098c4:	5e9b      	ldrsh	r3, [r3, r2]
 80098c6:	e020      	b.n	800990a <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 80098c8:	4b13      	ldr	r3, [pc, #76]	@ (8009918 <sen5x_read_data_ready+0xa0>)
 80098ca:	0018      	movs	r0, r3
 80098cc:	f7ff fdb8 	bl	8009440 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 80098d0:	250c      	movs	r5, #12
 80098d2:	197c      	adds	r4, r7, r5
 80098d4:	2308      	movs	r3, #8
 80098d6:	18fb      	adds	r3, r7, r3
 80098d8:	2202      	movs	r2, #2
 80098da:	0019      	movs	r1, r3
 80098dc:	2069      	movs	r0, #105	@ 0x69
 80098de:	f001 fb3f 	bl	800af60 <sensirion_i2c_read_data_inplace>
 80098e2:	0003      	movs	r3, r0
 80098e4:	8023      	strh	r3, [r4, #0]
    if (error) {
 80098e6:	197b      	adds	r3, r7, r5
 80098e8:	2200      	movs	r2, #0
 80098ea:	5e9b      	ldrsh	r3, [r3, r2]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d003      	beq.n	80098f8 <sen5x_read_data_ready+0x80>
        return error;
 80098f0:	197b      	adds	r3, r7, r5
 80098f2:	2200      	movs	r2, #0
 80098f4:	5e9b      	ldrsh	r3, [r3, r2]
 80098f6:	e008      	b.n	800990a <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 80098f8:	2308      	movs	r3, #8
 80098fa:	18fb      	adds	r3, r7, r3
 80098fc:	785b      	ldrb	r3, [r3, #1]
 80098fe:	1e5a      	subs	r2, r3, #1
 8009900:	4193      	sbcs	r3, r2
 8009902:	b2da      	uxtb	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009908:	2300      	movs	r3, #0
}
 800990a:	0018      	movs	r0, r3
 800990c:	46bd      	mov	sp, r7
 800990e:	b005      	add	sp, #20
 8009910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009912:	46c0      	nop			@ (mov r8, r8)
 8009914:	00000202 	.word	0x00000202
 8009918:	00004e20 	.word	0x00004e20

0800991c <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800991c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800991e:	b08d      	sub	sp, #52	@ 0x34
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
 8009928:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800992a:	252e      	movs	r5, #46	@ 0x2e
 800992c:	197b      	adds	r3, r7, r5
 800992e:	2200      	movs	r2, #0
 8009930:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 8009932:	197c      	adds	r4, r7, r5
 8009934:	23f1      	movs	r3, #241	@ 0xf1
 8009936:	009a      	lsls	r2, r3, #2
 8009938:	197b      	adds	r3, r7, r5
 800993a:	8819      	ldrh	r1, [r3, #0]
 800993c:	2314      	movs	r3, #20
 800993e:	18fb      	adds	r3, r7, r3
 8009940:	0018      	movs	r0, r3
 8009942:	f001 fa71 	bl	800ae28 <sensirion_i2c_add_command_to_buffer>
 8009946:	0003      	movs	r3, r0
 8009948:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800994a:	262c      	movs	r6, #44	@ 0x2c
 800994c:	19bc      	adds	r4, r7, r6
 800994e:	197b      	adds	r3, r7, r5
 8009950:	881a      	ldrh	r2, [r3, #0]
 8009952:	2314      	movs	r3, #20
 8009954:	18fb      	adds	r3, r7, r3
 8009956:	0019      	movs	r1, r3
 8009958:	2069      	movs	r0, #105	@ 0x69
 800995a:	f001 fae9 	bl	800af30 <sensirion_i2c_write_data>
 800995e:	0003      	movs	r3, r0
 8009960:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009962:	19bb      	adds	r3, r7, r6
 8009964:	2200      	movs	r2, #0
 8009966:	5e9b      	ldrsh	r3, [r3, r2]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <sen5x_read_measured_values+0x58>
        return error;
 800996c:	19bb      	adds	r3, r7, r6
 800996e:	2200      	movs	r2, #0
 8009970:	5e9b      	ldrsh	r3, [r3, r2]
 8009972:	e060      	b.n	8009a36 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009974:	4b32      	ldr	r3, [pc, #200]	@ (8009a40 <sen5x_read_measured_values+0x124>)
 8009976:	0018      	movs	r0, r3
 8009978:	f7ff fd62 	bl	8009440 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800997c:	252c      	movs	r5, #44	@ 0x2c
 800997e:	197c      	adds	r4, r7, r5
 8009980:	2314      	movs	r3, #20
 8009982:	18fb      	adds	r3, r7, r3
 8009984:	2210      	movs	r2, #16
 8009986:	0019      	movs	r1, r3
 8009988:	2069      	movs	r0, #105	@ 0x69
 800998a:	f001 fae9 	bl	800af60 <sensirion_i2c_read_data_inplace>
 800998e:	0003      	movs	r3, r0
 8009990:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009992:	197b      	adds	r3, r7, r5
 8009994:	2200      	movs	r2, #0
 8009996:	5e9b      	ldrsh	r3, [r3, r2]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <sen5x_read_measured_values+0x88>
        return error;
 800999c:	197b      	adds	r3, r7, r5
 800999e:	2200      	movs	r2, #0
 80099a0:	5e9b      	ldrsh	r3, [r3, r2]
 80099a2:	e048      	b.n	8009a36 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 80099a4:	2414      	movs	r4, #20
 80099a6:	193b      	adds	r3, r7, r4
 80099a8:	0018      	movs	r0, r3
 80099aa:	f000 fa79 	bl	8009ea0 <sensirion_common_bytes_to_uint16_t>
 80099ae:	0003      	movs	r3, r0
 80099b0:	001a      	movs	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 80099b6:	193b      	adds	r3, r7, r4
 80099b8:	3302      	adds	r3, #2
 80099ba:	0018      	movs	r0, r3
 80099bc:	f000 fa70 	bl	8009ea0 <sensirion_common_bytes_to_uint16_t>
 80099c0:	0003      	movs	r3, r0
 80099c2:	001a      	movs	r2, r3
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 80099c8:	193b      	adds	r3, r7, r4
 80099ca:	3304      	adds	r3, #4
 80099cc:	0018      	movs	r0, r3
 80099ce:	f000 fa67 	bl	8009ea0 <sensirion_common_bytes_to_uint16_t>
 80099d2:	0003      	movs	r3, r0
 80099d4:	001a      	movs	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 80099da:	193b      	adds	r3, r7, r4
 80099dc:	3306      	adds	r3, #6
 80099de:	0018      	movs	r0, r3
 80099e0:	f000 fa5e 	bl	8009ea0 <sensirion_common_bytes_to_uint16_t>
 80099e4:	0003      	movs	r3, r0
 80099e6:	001a      	movs	r2, r3
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 80099ec:	193b      	adds	r3, r7, r4
 80099ee:	3308      	adds	r3, #8
 80099f0:	0018      	movs	r0, r3
 80099f2:	f000 fa81 	bl	8009ef8 <sensirion_common_bytes_to_int16_t>
 80099f6:	0003      	movs	r3, r0
 80099f8:	001a      	movs	r2, r3
 80099fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099fc:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 80099fe:	193b      	adds	r3, r7, r4
 8009a00:	330a      	adds	r3, #10
 8009a02:	0018      	movs	r0, r3
 8009a04:	f000 fa78 	bl	8009ef8 <sensirion_common_bytes_to_int16_t>
 8009a08:	0003      	movs	r3, r0
 8009a0a:	001a      	movs	r2, r3
 8009a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a0e:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8009a10:	193b      	adds	r3, r7, r4
 8009a12:	330c      	adds	r3, #12
 8009a14:	0018      	movs	r0, r3
 8009a16:	f000 fa6f 	bl	8009ef8 <sensirion_common_bytes_to_int16_t>
 8009a1a:	0003      	movs	r3, r0
 8009a1c:	001a      	movs	r2, r3
 8009a1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a20:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8009a22:	193b      	adds	r3, r7, r4
 8009a24:	330e      	adds	r3, #14
 8009a26:	0018      	movs	r0, r3
 8009a28:	f000 fa66 	bl	8009ef8 <sensirion_common_bytes_to_int16_t>
 8009a2c:	0003      	movs	r3, r0
 8009a2e:	001a      	movs	r2, r3
 8009a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a32:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	0018      	movs	r0, r3
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	b00d      	add	sp, #52	@ 0x34
 8009a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a3e:	46c0      	nop			@ (mov r8, r8)
 8009a40:	00004e20 	.word	0x00004e20

08009a44 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 8009a44:	b590      	push	{r4, r7, lr}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009a4a:	1dbb      	adds	r3, r7, #6
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 8009a50:	1dbc      	adds	r4, r7, #6
 8009a52:	4a12      	ldr	r2, [pc, #72]	@ (8009a9c <sen5x_start_fan_cleaning+0x58>)
 8009a54:	1dbb      	adds	r3, r7, #6
 8009a56:	8819      	ldrh	r1, [r3, #0]
 8009a58:	003b      	movs	r3, r7
 8009a5a:	0018      	movs	r0, r3
 8009a5c:	f001 f9e4 	bl	800ae28 <sensirion_i2c_add_command_to_buffer>
 8009a60:	0003      	movs	r3, r0
 8009a62:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009a64:	1d3c      	adds	r4, r7, #4
 8009a66:	1dbb      	adds	r3, r7, #6
 8009a68:	881a      	ldrh	r2, [r3, #0]
 8009a6a:	003b      	movs	r3, r7
 8009a6c:	0019      	movs	r1, r3
 8009a6e:	2069      	movs	r0, #105	@ 0x69
 8009a70:	f001 fa5e 	bl	800af30 <sensirion_i2c_write_data>
 8009a74:	0003      	movs	r3, r0
 8009a76:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009a78:	1d3b      	adds	r3, r7, #4
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	5e9b      	ldrsh	r3, [r3, r2]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <sen5x_start_fan_cleaning+0x46>
        return error;
 8009a82:	1d3b      	adds	r3, r7, #4
 8009a84:	2200      	movs	r2, #0
 8009a86:	5e9b      	ldrsh	r3, [r3, r2]
 8009a88:	e004      	b.n	8009a94 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009a8a:	4b05      	ldr	r3, [pc, #20]	@ (8009aa0 <sen5x_start_fan_cleaning+0x5c>)
 8009a8c:	0018      	movs	r0, r3
 8009a8e:	f7ff fcd7 	bl	8009440 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	0018      	movs	r0, r3
 8009a96:	46bd      	mov	sp, r7
 8009a98:	b003      	add	sp, #12
 8009a9a:	bd90      	pop	{r4, r7, pc}
 8009a9c:	00005607 	.word	0x00005607
 8009aa0:	00004e20 	.word	0x00004e20

08009aa4 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 8009aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aa6:	b087      	sub	sp, #28
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	0004      	movs	r4, r0
 8009aac:	0008      	movs	r0, r1
 8009aae:	0011      	movs	r1, r2
 8009ab0:	1dbb      	adds	r3, r7, #6
 8009ab2:	1c22      	adds	r2, r4, #0
 8009ab4:	801a      	strh	r2, [r3, #0]
 8009ab6:	1d3b      	adds	r3, r7, #4
 8009ab8:	1c02      	adds	r2, r0, #0
 8009aba:	801a      	strh	r2, [r3, #0]
 8009abc:	1cbb      	adds	r3, r7, #2
 8009abe:	1c0a      	adds	r2, r1, #0
 8009ac0:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 8009ac2:	2516      	movs	r5, #22
 8009ac4:	197b      	adds	r3, r7, r5
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 8009aca:	197c      	adds	r4, r7, r5
 8009acc:	4a25      	ldr	r2, [pc, #148]	@ (8009b64 <sen5x_set_temperature_offset_parameters+0xc0>)
 8009ace:	197b      	adds	r3, r7, r5
 8009ad0:	8819      	ldrh	r1, [r3, #0]
 8009ad2:	2608      	movs	r6, #8
 8009ad4:	19bb      	adds	r3, r7, r6
 8009ad6:	0018      	movs	r0, r3
 8009ad8:	f001 f9a6 	bl	800ae28 <sensirion_i2c_add_command_to_buffer>
 8009adc:	0003      	movs	r3, r0
 8009ade:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 8009ae0:	197c      	adds	r4, r7, r5
 8009ae2:	1dbb      	adds	r3, r7, #6
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	5e9a      	ldrsh	r2, [r3, r2]
 8009ae8:	197b      	adds	r3, r7, r5
 8009aea:	8819      	ldrh	r1, [r3, #0]
 8009aec:	19bb      	adds	r3, r7, r6
 8009aee:	0018      	movs	r0, r3
 8009af0:	f001 fa05 	bl	800aefe <sensirion_i2c_add_int16_t_to_buffer>
 8009af4:	0003      	movs	r3, r0
 8009af6:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 8009af8:	197c      	adds	r4, r7, r5
 8009afa:	1d3b      	adds	r3, r7, #4
 8009afc:	2200      	movs	r2, #0
 8009afe:	5e9a      	ldrsh	r2, [r3, r2]
 8009b00:	197b      	adds	r3, r7, r5
 8009b02:	8819      	ldrh	r1, [r3, #0]
 8009b04:	19bb      	adds	r3, r7, r6
 8009b06:	0018      	movs	r0, r3
 8009b08:	f001 f9f9 	bl	800aefe <sensirion_i2c_add_int16_t_to_buffer>
 8009b0c:	0003      	movs	r3, r0
 8009b0e:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 8009b10:	197c      	adds	r4, r7, r5
 8009b12:	1cbb      	adds	r3, r7, #2
 8009b14:	881a      	ldrh	r2, [r3, #0]
 8009b16:	197b      	adds	r3, r7, r5
 8009b18:	8819      	ldrh	r1, [r3, #0]
 8009b1a:	19bb      	adds	r3, r7, r6
 8009b1c:	0018      	movs	r0, r3
 8009b1e:	f001 f9af 	bl	800ae80 <sensirion_i2c_add_uint16_t_to_buffer>
 8009b22:	0003      	movs	r3, r0
 8009b24:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009b26:	2214      	movs	r2, #20
 8009b28:	18bc      	adds	r4, r7, r2
 8009b2a:	197b      	adds	r3, r7, r5
 8009b2c:	881a      	ldrh	r2, [r3, #0]
 8009b2e:	19bb      	adds	r3, r7, r6
 8009b30:	0019      	movs	r1, r3
 8009b32:	2069      	movs	r0, #105	@ 0x69
 8009b34:	f001 f9fc 	bl	800af30 <sensirion_i2c_write_data>
 8009b38:	0003      	movs	r3, r0
 8009b3a:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009b3c:	2214      	movs	r2, #20
 8009b3e:	18bb      	adds	r3, r7, r2
 8009b40:	2100      	movs	r1, #0
 8009b42:	5e5b      	ldrsh	r3, [r3, r1]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d003      	beq.n	8009b50 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 8009b48:	18bb      	adds	r3, r7, r2
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	5e9b      	ldrsh	r3, [r3, r2]
 8009b4e:	e004      	b.n	8009b5a <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009b50:	4b05      	ldr	r3, [pc, #20]	@ (8009b68 <sen5x_set_temperature_offset_parameters+0xc4>)
 8009b52:	0018      	movs	r0, r3
 8009b54:	f7ff fc74 	bl	8009440 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	0018      	movs	r0, r3
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	b007      	add	sp, #28
 8009b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b62:	46c0      	nop			@ (mov r8, r8)
 8009b64:	000060b2 	.word	0x000060b2
 8009b68:	00004e20 	.word	0x00004e20

08009b6c <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 8009b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b6e:	b091      	sub	sp, #68	@ 0x44
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	000a      	movs	r2, r1
 8009b76:	1cfb      	adds	r3, r7, #3
 8009b78:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8009b7a:	253e      	movs	r5, #62	@ 0x3e
 8009b7c:	197b      	adds	r3, r7, r5
 8009b7e:	2200      	movs	r2, #0
 8009b80:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 8009b82:	197c      	adds	r4, r7, r5
 8009b84:	4a22      	ldr	r2, [pc, #136]	@ (8009c10 <sen5x_get_product_name+0xa4>)
 8009b86:	197b      	adds	r3, r7, r5
 8009b88:	8819      	ldrh	r1, [r3, #0]
 8009b8a:	230c      	movs	r3, #12
 8009b8c:	18fb      	adds	r3, r7, r3
 8009b8e:	0018      	movs	r0, r3
 8009b90:	f001 f94a 	bl	800ae28 <sensirion_i2c_add_command_to_buffer>
 8009b94:	0003      	movs	r3, r0
 8009b96:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009b98:	263c      	movs	r6, #60	@ 0x3c
 8009b9a:	19bc      	adds	r4, r7, r6
 8009b9c:	197b      	adds	r3, r7, r5
 8009b9e:	881a      	ldrh	r2, [r3, #0]
 8009ba0:	230c      	movs	r3, #12
 8009ba2:	18fb      	adds	r3, r7, r3
 8009ba4:	0019      	movs	r1, r3
 8009ba6:	2069      	movs	r0, #105	@ 0x69
 8009ba8:	f001 f9c2 	bl	800af30 <sensirion_i2c_write_data>
 8009bac:	0003      	movs	r3, r0
 8009bae:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009bb0:	19bb      	adds	r3, r7, r6
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	5e9b      	ldrsh	r3, [r3, r2]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d003      	beq.n	8009bc2 <sen5x_get_product_name+0x56>
        return error;
 8009bba:	19bb      	adds	r3, r7, r6
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	5e9b      	ldrsh	r3, [r3, r2]
 8009bc0:	e021      	b.n	8009c06 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009bc2:	4b14      	ldr	r3, [pc, #80]	@ (8009c14 <sen5x_get_product_name+0xa8>)
 8009bc4:	0018      	movs	r0, r3
 8009bc6:	f7ff fc3b 	bl	8009440 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009bca:	253c      	movs	r5, #60	@ 0x3c
 8009bcc:	197c      	adds	r4, r7, r5
 8009bce:	230c      	movs	r3, #12
 8009bd0:	18fb      	adds	r3, r7, r3
 8009bd2:	2220      	movs	r2, #32
 8009bd4:	0019      	movs	r1, r3
 8009bd6:	2069      	movs	r0, #105	@ 0x69
 8009bd8:	f001 f9c2 	bl	800af60 <sensirion_i2c_read_data_inplace>
 8009bdc:	0003      	movs	r3, r0
 8009bde:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009be0:	197b      	adds	r3, r7, r5
 8009be2:	2200      	movs	r2, #0
 8009be4:	5e9b      	ldrsh	r3, [r3, r2]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <sen5x_get_product_name+0x86>
        return error;
 8009bea:	197b      	adds	r3, r7, r5
 8009bec:	2200      	movs	r2, #0
 8009bee:	5e9b      	ldrsh	r3, [r3, r2]
 8009bf0:	e009      	b.n	8009c06 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 8009bf2:	1cfb      	adds	r3, r7, #3
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	6879      	ldr	r1, [r7, #4]
 8009bfa:	230c      	movs	r3, #12
 8009bfc:	18fb      	adds	r3, r7, r3
 8009bfe:	0018      	movs	r0, r3
 8009c00:	f000 f988 	bl	8009f14 <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	0018      	movs	r0, r3
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	b011      	add	sp, #68	@ 0x44
 8009c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c0e:	46c0      	nop			@ (mov r8, r8)
 8009c10:	0000d014 	.word	0x0000d014
 8009c14:	0000c350 	.word	0x0000c350

08009c18 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 8009c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c1a:	b091      	sub	sp, #68	@ 0x44
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	000a      	movs	r2, r1
 8009c22:	1cfb      	adds	r3, r7, #3
 8009c24:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8009c26:	253e      	movs	r5, #62	@ 0x3e
 8009c28:	197b      	adds	r3, r7, r5
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 8009c2e:	197c      	adds	r4, r7, r5
 8009c30:	4a22      	ldr	r2, [pc, #136]	@ (8009cbc <sen5x_get_serial_number+0xa4>)
 8009c32:	197b      	adds	r3, r7, r5
 8009c34:	8819      	ldrh	r1, [r3, #0]
 8009c36:	230c      	movs	r3, #12
 8009c38:	18fb      	adds	r3, r7, r3
 8009c3a:	0018      	movs	r0, r3
 8009c3c:	f001 f8f4 	bl	800ae28 <sensirion_i2c_add_command_to_buffer>
 8009c40:	0003      	movs	r3, r0
 8009c42:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009c44:	263c      	movs	r6, #60	@ 0x3c
 8009c46:	19bc      	adds	r4, r7, r6
 8009c48:	197b      	adds	r3, r7, r5
 8009c4a:	881a      	ldrh	r2, [r3, #0]
 8009c4c:	230c      	movs	r3, #12
 8009c4e:	18fb      	adds	r3, r7, r3
 8009c50:	0019      	movs	r1, r3
 8009c52:	2069      	movs	r0, #105	@ 0x69
 8009c54:	f001 f96c 	bl	800af30 <sensirion_i2c_write_data>
 8009c58:	0003      	movs	r3, r0
 8009c5a:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009c5c:	19bb      	adds	r3, r7, r6
 8009c5e:	2200      	movs	r2, #0
 8009c60:	5e9b      	ldrsh	r3, [r3, r2]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <sen5x_get_serial_number+0x56>
        return error;
 8009c66:	19bb      	adds	r3, r7, r6
 8009c68:	2200      	movs	r2, #0
 8009c6a:	5e9b      	ldrsh	r3, [r3, r2]
 8009c6c:	e021      	b.n	8009cb2 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009c6e:	4b14      	ldr	r3, [pc, #80]	@ (8009cc0 <sen5x_get_serial_number+0xa8>)
 8009c70:	0018      	movs	r0, r3
 8009c72:	f7ff fbe5 	bl	8009440 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8009c76:	253c      	movs	r5, #60	@ 0x3c
 8009c78:	197c      	adds	r4, r7, r5
 8009c7a:	230c      	movs	r3, #12
 8009c7c:	18fb      	adds	r3, r7, r3
 8009c7e:	2220      	movs	r2, #32
 8009c80:	0019      	movs	r1, r3
 8009c82:	2069      	movs	r0, #105	@ 0x69
 8009c84:	f001 f96c 	bl	800af60 <sensirion_i2c_read_data_inplace>
 8009c88:	0003      	movs	r3, r0
 8009c8a:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009c8c:	197b      	adds	r3, r7, r5
 8009c8e:	2200      	movs	r2, #0
 8009c90:	5e9b      	ldrsh	r3, [r3, r2]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d003      	beq.n	8009c9e <sen5x_get_serial_number+0x86>
        return error;
 8009c96:	197b      	adds	r3, r7, r5
 8009c98:	2200      	movs	r2, #0
 8009c9a:	5e9b      	ldrsh	r3, [r3, r2]
 8009c9c:	e009      	b.n	8009cb2 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 8009c9e:	1cfb      	adds	r3, r7, #3
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	6879      	ldr	r1, [r7, #4]
 8009ca6:	230c      	movs	r3, #12
 8009ca8:	18fb      	adds	r3, r7, r3
 8009caa:	0018      	movs	r0, r3
 8009cac:	f000 f932 	bl	8009f14 <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009cb0:	2300      	movs	r3, #0
}
 8009cb2:	0018      	movs	r0, r3
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	b011      	add	sp, #68	@ 0x44
 8009cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cba:	46c0      	nop			@ (mov r8, r8)
 8009cbc:	0000d033 	.word	0x0000d033
 8009cc0:	0000c350 	.word	0x0000c350

08009cc4 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 8009cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cc6:	b089      	sub	sp, #36	@ 0x24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
 8009cd0:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 8009cd2:	251e      	movs	r5, #30
 8009cd4:	197b      	adds	r3, r7, r5
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 8009cda:	197c      	adds	r4, r7, r5
 8009cdc:	23d1      	movs	r3, #209	@ 0xd1
 8009cde:	021a      	lsls	r2, r3, #8
 8009ce0:	197b      	adds	r3, r7, r5
 8009ce2:	8819      	ldrh	r1, [r3, #0]
 8009ce4:	2310      	movs	r3, #16
 8009ce6:	18fb      	adds	r3, r7, r3
 8009ce8:	0018      	movs	r0, r3
 8009cea:	f001 f89d 	bl	800ae28 <sensirion_i2c_add_command_to_buffer>
 8009cee:	0003      	movs	r3, r0
 8009cf0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009cf2:	261c      	movs	r6, #28
 8009cf4:	19bc      	adds	r4, r7, r6
 8009cf6:	197b      	adds	r3, r7, r5
 8009cf8:	881a      	ldrh	r2, [r3, #0]
 8009cfa:	2310      	movs	r3, #16
 8009cfc:	18fb      	adds	r3, r7, r3
 8009cfe:	0019      	movs	r1, r3
 8009d00:	2069      	movs	r0, #105	@ 0x69
 8009d02:	f001 f915 	bl	800af30 <sensirion_i2c_write_data>
 8009d06:	0003      	movs	r3, r0
 8009d08:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d0a:	19bb      	adds	r3, r7, r6
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	5e9b      	ldrsh	r3, [r3, r2]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d003      	beq.n	8009d1c <sen5x_get_version+0x58>
        return error;
 8009d14:	19bb      	adds	r3, r7, r6
 8009d16:	2200      	movs	r2, #0
 8009d18:	5e9b      	ldrsh	r3, [r3, r2]
 8009d1a:	e038      	b.n	8009d8e <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8009d98 <sen5x_get_version+0xd4>)
 8009d1e:	0018      	movs	r0, r3
 8009d20:	f7ff fb8e 	bl	8009440 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 8009d24:	251c      	movs	r5, #28
 8009d26:	197c      	adds	r4, r7, r5
 8009d28:	2310      	movs	r3, #16
 8009d2a:	18fb      	adds	r3, r7, r3
 8009d2c:	2208      	movs	r2, #8
 8009d2e:	0019      	movs	r1, r3
 8009d30:	2069      	movs	r0, #105	@ 0x69
 8009d32:	f001 f915 	bl	800af60 <sensirion_i2c_read_data_inplace>
 8009d36:	0003      	movs	r3, r0
 8009d38:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d3a:	197b      	adds	r3, r7, r5
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	5e9b      	ldrsh	r3, [r3, r2]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d003      	beq.n	8009d4c <sen5x_get_version+0x88>
        return error;
 8009d44:	197b      	adds	r3, r7, r5
 8009d46:	2200      	movs	r2, #0
 8009d48:	5e9b      	ldrsh	r3, [r3, r2]
 8009d4a:	e020      	b.n	8009d8e <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 8009d4c:	2110      	movs	r1, #16
 8009d4e:	187b      	adds	r3, r7, r1
 8009d50:	781a      	ldrb	r2, [r3, #0]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 8009d56:	187b      	adds	r3, r7, r1
 8009d58:	785a      	ldrb	r2, [r3, #1]
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 8009d5e:	187b      	adds	r3, r7, r1
 8009d60:	789b      	ldrb	r3, [r3, #2]
 8009d62:	1e5a      	subs	r2, r3, #1
 8009d64:	4193      	sbcs	r3, r2
 8009d66:	b2da      	uxtb	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 8009d6c:	187b      	adds	r3, r7, r1
 8009d6e:	78da      	ldrb	r2, [r3, #3]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 8009d74:	187b      	adds	r3, r7, r1
 8009d76:	791a      	ldrb	r2, [r3, #4]
 8009d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7a:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 8009d7c:	187b      	adds	r3, r7, r1
 8009d7e:	795a      	ldrb	r2, [r3, #5]
 8009d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d82:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 8009d84:	187b      	adds	r3, r7, r1
 8009d86:	799a      	ldrb	r2, [r3, #6]
 8009d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d8a:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	0018      	movs	r0, r3
 8009d90:	46bd      	mov	sp, r7
 8009d92:	b009      	add	sp, #36	@ 0x24
 8009d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d96:	46c0      	nop			@ (mov r8, r8)
 8009d98:	00004e20 	.word	0x00004e20

08009d9c <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 8009d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d9e:	b087      	sub	sp, #28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8009da4:	2516      	movs	r5, #22
 8009da6:	197b      	adds	r3, r7, r5
 8009da8:	2200      	movs	r2, #0
 8009daa:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 8009dac:	197c      	adds	r4, r7, r5
 8009dae:	4a22      	ldr	r2, [pc, #136]	@ (8009e38 <sen5x_read_device_status+0x9c>)
 8009db0:	197b      	adds	r3, r7, r5
 8009db2:	8819      	ldrh	r1, [r3, #0]
 8009db4:	230c      	movs	r3, #12
 8009db6:	18fb      	adds	r3, r7, r3
 8009db8:	0018      	movs	r0, r3
 8009dba:	f001 f835 	bl	800ae28 <sensirion_i2c_add_command_to_buffer>
 8009dbe:	0003      	movs	r3, r0
 8009dc0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009dc2:	2614      	movs	r6, #20
 8009dc4:	19bc      	adds	r4, r7, r6
 8009dc6:	197b      	adds	r3, r7, r5
 8009dc8:	881a      	ldrh	r2, [r3, #0]
 8009dca:	230c      	movs	r3, #12
 8009dcc:	18fb      	adds	r3, r7, r3
 8009dce:	0019      	movs	r1, r3
 8009dd0:	2069      	movs	r0, #105	@ 0x69
 8009dd2:	f001 f8ad 	bl	800af30 <sensirion_i2c_write_data>
 8009dd6:	0003      	movs	r3, r0
 8009dd8:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009dda:	19bb      	adds	r3, r7, r6
 8009ddc:	2200      	movs	r2, #0
 8009dde:	5e9b      	ldrsh	r3, [r3, r2]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d003      	beq.n	8009dec <sen5x_read_device_status+0x50>
        return error;
 8009de4:	19bb      	adds	r3, r7, r6
 8009de6:	2200      	movs	r2, #0
 8009de8:	5e9b      	ldrsh	r3, [r3, r2]
 8009dea:	e020      	b.n	8009e2e <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009dec:	4b13      	ldr	r3, [pc, #76]	@ (8009e3c <sen5x_read_device_status+0xa0>)
 8009dee:	0018      	movs	r0, r3
 8009df0:	f7ff fb26 	bl	8009440 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 8009df4:	2514      	movs	r5, #20
 8009df6:	197c      	adds	r4, r7, r5
 8009df8:	230c      	movs	r3, #12
 8009dfa:	18fb      	adds	r3, r7, r3
 8009dfc:	2204      	movs	r2, #4
 8009dfe:	0019      	movs	r1, r3
 8009e00:	2069      	movs	r0, #105	@ 0x69
 8009e02:	f001 f8ad 	bl	800af60 <sensirion_i2c_read_data_inplace>
 8009e06:	0003      	movs	r3, r0
 8009e08:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e0a:	197b      	adds	r3, r7, r5
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	5e9b      	ldrsh	r3, [r3, r2]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <sen5x_read_device_status+0x80>
        return error;
 8009e14:	197b      	adds	r3, r7, r5
 8009e16:	2200      	movs	r2, #0
 8009e18:	5e9b      	ldrsh	r3, [r3, r2]
 8009e1a:	e008      	b.n	8009e2e <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 8009e1c:	230c      	movs	r3, #12
 8009e1e:	18fb      	adds	r3, r7, r3
 8009e20:	0018      	movs	r0, r3
 8009e22:	f000 f850 	bl	8009ec6 <sensirion_common_bytes_to_uint32_t>
 8009e26:	0002      	movs	r2, r0
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	0018      	movs	r0, r3
 8009e30:	46bd      	mov	sp, r7
 8009e32:	b007      	add	sp, #28
 8009e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e36:	46c0      	nop			@ (mov r8, r8)
 8009e38:	0000d206 	.word	0x0000d206
 8009e3c:	00004e20 	.word	0x00004e20

08009e40 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 8009e40:	b590      	push	{r4, r7, lr}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009e46:	1dbb      	adds	r3, r7, #6
 8009e48:	2200      	movs	r2, #0
 8009e4a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 8009e4c:	1dbc      	adds	r4, r7, #6
 8009e4e:	4a12      	ldr	r2, [pc, #72]	@ (8009e98 <sen5x_device_reset+0x58>)
 8009e50:	1dbb      	adds	r3, r7, #6
 8009e52:	8819      	ldrh	r1, [r3, #0]
 8009e54:	003b      	movs	r3, r7
 8009e56:	0018      	movs	r0, r3
 8009e58:	f000 ffe6 	bl	800ae28 <sensirion_i2c_add_command_to_buffer>
 8009e5c:	0003      	movs	r3, r0
 8009e5e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009e60:	1d3c      	adds	r4, r7, #4
 8009e62:	1dbb      	adds	r3, r7, #6
 8009e64:	881a      	ldrh	r2, [r3, #0]
 8009e66:	003b      	movs	r3, r7
 8009e68:	0019      	movs	r1, r3
 8009e6a:	2069      	movs	r0, #105	@ 0x69
 8009e6c:	f001 f860 	bl	800af30 <sensirion_i2c_write_data>
 8009e70:	0003      	movs	r3, r0
 8009e72:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e74:	1d3b      	adds	r3, r7, #4
 8009e76:	2200      	movs	r2, #0
 8009e78:	5e9b      	ldrsh	r3, [r3, r2]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d003      	beq.n	8009e86 <sen5x_device_reset+0x46>
        return error;
 8009e7e:	1d3b      	adds	r3, r7, #4
 8009e80:	2200      	movs	r2, #0
 8009e82:	5e9b      	ldrsh	r3, [r3, r2]
 8009e84:	e004      	b.n	8009e90 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009e86:	4b05      	ldr	r3, [pc, #20]	@ (8009e9c <sen5x_device_reset+0x5c>)
 8009e88:	0018      	movs	r0, r3
 8009e8a:	f7ff fad9 	bl	8009440 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	0018      	movs	r0, r3
 8009e92:	46bd      	mov	sp, r7
 8009e94:	b003      	add	sp, #12
 8009e96:	bd90      	pop	{r4, r7, pc}
 8009e98:	0000d304 	.word	0x0000d304
 8009e9c:	00030d40 	.word	0x00030d40

08009ea0 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	021b      	lsls	r3, r3, #8
 8009eae:	b21a      	sxth	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	b21b      	sxth	r3, r3
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	b21b      	sxth	r3, r3
 8009ebc:	b29b      	uxth	r3, r3
}
 8009ebe:	0018      	movs	r0, r3
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	b002      	add	sp, #8
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	061a      	lsls	r2, r3, #24
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	041b      	lsls	r3, r3, #16
 8009edc:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	3302      	adds	r3, #2
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009ee6:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	3203      	adds	r2, #3
 8009eec:	7812      	ldrb	r2, [r2, #0]
 8009eee:	4313      	orrs	r3, r2
}
 8009ef0:	0018      	movs	r0, r3
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	b002      	add	sp, #8
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	0018      	movs	r0, r3
 8009f04:	f7ff ffcc 	bl	8009ea0 <sensirion_common_bytes_to_uint16_t>
 8009f08:	0003      	movs	r3, r0
 8009f0a:	b21b      	sxth	r3, r3
}
 8009f0c:	0018      	movs	r0, r3
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	b002      	add	sp, #8
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	1dbb      	adds	r3, r7, #6
 8009f20:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 8009f22:	2316      	movs	r3, #22
 8009f24:	18fb      	adds	r3, r7, r3
 8009f26:	2200      	movs	r2, #0
 8009f28:	801a      	strh	r2, [r3, #0]
 8009f2a:	e00f      	b.n	8009f4c <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 8009f2c:	2016      	movs	r0, #22
 8009f2e:	183b      	adds	r3, r7, r0
 8009f30:	881b      	ldrh	r3, [r3, #0]
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	18d2      	adds	r2, r2, r3
 8009f36:	183b      	adds	r3, r7, r0
 8009f38:	881b      	ldrh	r3, [r3, #0]
 8009f3a:	68b9      	ldr	r1, [r7, #8]
 8009f3c:	18cb      	adds	r3, r1, r3
 8009f3e:	7812      	ldrb	r2, [r2, #0]
 8009f40:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 8009f42:	183b      	adds	r3, r7, r0
 8009f44:	881a      	ldrh	r2, [r3, #0]
 8009f46:	183b      	adds	r3, r7, r0
 8009f48:	3201      	adds	r2, #1
 8009f4a:	801a      	strh	r2, [r3, #0]
 8009f4c:	2316      	movs	r3, #22
 8009f4e:	18fa      	adds	r2, r7, r3
 8009f50:	1dbb      	adds	r3, r7, #6
 8009f52:	8812      	ldrh	r2, [r2, #0]
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d3e8      	bcc.n	8009f2c <sensirion_common_copy_bytes+0x18>
    }
}
 8009f5a:	46c0      	nop			@ (mov r8, r8)
 8009f5c:	46c0      	nop			@ (mov r8, r8)
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	b006      	add	sp, #24
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	68ba      	ldr	r2, [r7, #8]
 8009f74:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d113      	bne.n	8009faa <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	22fe      	movs	r2, #254	@ 0xfe
 8009f86:	0592      	lsls	r2, r2, #22
 8009f88:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8009ff8 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8009f8e:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	4a1a      	ldr	r2, [pc, #104]	@ (8009ffc <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8009f94:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	4a19      	ldr	r2, [pc, #100]	@ (800a000 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8009f9a:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4a19      	ldr	r2, [pc, #100]	@ (800a004 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8009fa0:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	4a18      	ldr	r2, [pc, #96]	@ (800a008 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8009fa6:	61da      	str	r2, [r3, #28]
 8009fa8:	e011      	b.n	8009fce <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	4a17      	ldr	r2, [pc, #92]	@ (800a00c <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8009fae:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	4a17      	ldr	r2, [pc, #92]	@ (800a010 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8009fb4:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	4a16      	ldr	r2, [pc, #88]	@ (800a014 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8009fba:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4a16      	ldr	r2, [pc, #88]	@ (800a018 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8009fc0:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	4a15      	ldr	r2, [pc, #84]	@ (800a01c <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8009fc6:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	4a15      	ldr	r2, [pc, #84]	@ (800a020 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8009fcc:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	4a14      	ldr	r2, [pc, #80]	@ (800a024 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8009fd2:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4a14      	ldr	r2, [pc, #80]	@ (800a028 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009fd8:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	4a12      	ldr	r2, [pc, #72]	@ (800a028 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009fde:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	4a12      	ldr	r2, [pc, #72]	@ (800a02c <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8009fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	0018      	movs	r0, r3
 8009fea:	f000 f833 	bl	800a054 <GasIndexAlgorithm_reset>
}
 8009fee:	46c0      	nop			@ (mov r8, r8)
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	b004      	add	sp, #16
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	46c0      	nop			@ (mov r8, r8)
 8009ff8:	00002710 	.word	0x00002710
 8009ffc:	44340000 	.word	0x44340000
 800a000:	46859800 	.word	0x46859800
 800a004:	46a05000 	.word	0x46a05000
 800a008:	41f00000 	.word	0x41f00000
 800a00c:	42c80000 	.word	0x42c80000
 800a010:	00004e20 	.word	0x00004e20
 800a014:	43340000 	.word	0x43340000
 800a018:	4528c000 	.word	0x4528c000
 800a01c:	45a32000 	.word	0x45a32000
 800a020:	43aa0000 	.word	0x43aa0000
 800a024:	43660000 	.word	0x43660000
 800a028:	41400000 	.word	0x41400000
 800a02c:	42480000 	.word	0x42480000

0800a030 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800a03a:	4a05      	ldr	r2, [pc, #20]	@ (800a050 <GasIndexAlgorithm_init+0x20>)
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	0018      	movs	r0, r3
 800a042:	f7ff ff8f 	bl	8009f64 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800a046:	46c0      	nop			@ (mov r8, r8)
 800a048:	46bd      	mov	sp, r7
 800a04a:	b002      	add	sp, #8
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	46c0      	nop			@ (mov r8, r8)
 800a050:	44610000 	.word	0x44610000

0800a054 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	0018      	movs	r0, r3
 800a072:	f000 f805 	bl	800a080 <GasIndexAlgorithm__init_instances>
}
 800a076:	46c0      	nop			@ (mov r8, r8)
 800a078:	46bd      	mov	sp, r7
 800a07a:	b002      	add	sp, #8
 800a07c:	bd80      	pop	{r7, pc}
	...

0800a080 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800a080:	b590      	push	{r4, r7, lr}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	0018      	movs	r0, r3
 800a08c:	f000 f8e8 	bl	800a260 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	0018      	movs	r0, r3
 800a094:	f000 f9a6 	bl	800a3e4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a098:	1c04      	adds	r4, r0, #0
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	0018      	movs	r0, r3
 800a09e:	f000 f9ab 	bl	800a3f8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a0a2:	1c02      	adds	r2, r0, #0
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	1c21      	adds	r1, r4, #0
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	f000 fc3b 	bl	800a924 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d107      	bne.n	800a0c6 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a0b6:	23fe      	movs	r3, #254	@ 0xfe
 800a0b8:	059b      	lsls	r3, r3, #22
 800a0ba:	4a0a      	ldr	r2, [pc, #40]	@ (800a0e4 <GasIndexAlgorithm__init_instances+0x64>)
 800a0bc:	490a      	ldr	r1, [pc, #40]	@ (800a0e8 <GasIndexAlgorithm__init_instances+0x68>)
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fc86 	bl	800a9d0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800a0c4:	e005      	b.n	800a0d2 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a0c6:	4b09      	ldr	r3, [pc, #36]	@ (800a0ec <GasIndexAlgorithm__init_instances+0x6c>)
 800a0c8:	4a09      	ldr	r2, [pc, #36]	@ (800a0f0 <GasIndexAlgorithm__init_instances+0x70>)
 800a0ca:	490a      	ldr	r1, [pc, #40]	@ (800a0f4 <GasIndexAlgorithm__init_instances+0x74>)
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fc7f 	bl	800a9d0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	0018      	movs	r0, r3
 800a0d6:	f000 fd35 	bl	800ab44 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800a0da:	46c0      	nop			@ (mov r8, r8)
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	b003      	add	sp, #12
 800a0e0:	bd90      	pop	{r4, r7, pc}
 800a0e2:	46c0      	nop			@ (mov r8, r8)
 800a0e4:	bc257a78 	.word	0xbc257a78
 800a0e8:	44198000 	.word	0x44198000
 800a0ec:	42c80000 	.word	0x42c80000
 800a0f0:	bbd4fdf4 	.word	0xbbd4fdf4
 800a0f4:	43550000 	.word	0x43550000

0800a0f8 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800a0f8:	b590      	push	{r4, r7, lr}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a108:	4952      	ldr	r1, [pc, #328]	@ (800a254 <GasIndexAlgorithm_process+0x15c>)
 800a10a:	1c18      	adds	r0, r3, #0
 800a10c:	f7f6 fa1a 	bl	8000544 <__aeabi_fcmple>
 800a110:	1e03      	subs	r3, r0, #0
 800a112:	d00c      	beq.n	800a12e <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	1c19      	adds	r1, r3, #0
 800a11e:	1c10      	adds	r0, r2, #0
 800a120:	f7f6 fbce 	bl	80008c0 <__aeabi_fadd>
 800a124:	1c03      	adds	r3, r0, #0
 800a126:	1c1a      	adds	r2, r3, #0
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	631a      	str	r2, [r3, #48]	@ 0x30
 800a12c:	e080      	b.n	800a230 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	2b00      	cmp	r3, #0
 800a132:	dd25      	ble.n	800a180 <GasIndexAlgorithm_process+0x88>
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	4a48      	ldr	r2, [pc, #288]	@ (800a258 <GasIndexAlgorithm_process+0x160>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	dc21      	bgt.n	800a180 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	429a      	cmp	r2, r3
 800a144:	dc04      	bgt.n	800a150 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	3301      	adds	r3, #1
 800a14c:	60bb      	str	r3, [r7, #8]
 800a14e:	e00d      	b.n	800a16c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	4a41      	ldr	r2, [pc, #260]	@ (800a25c <GasIndexAlgorithm_process+0x164>)
 800a156:	4694      	mov	ip, r2
 800a158:	4463      	add	r3, ip
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	dd05      	ble.n	800a16c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	4a3d      	ldr	r2, [pc, #244]	@ (800a25c <GasIndexAlgorithm_process+0x164>)
 800a166:	4694      	mov	ip, r2
 800a168:	4463      	add	r3, ip
 800a16a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	0018      	movs	r0, r3
 800a176:	f7f7 fa2b 	bl	80015d0 <__aeabi_i2f>
 800a17a:	1c02      	adds	r2, r0, #0
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d005      	beq.n	800a194 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	0018      	movs	r0, r3
 800a18c:	f000 f945 	bl	800a41a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800a190:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800a192:	d014      	beq.n	800a1be <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	1c11      	adds	r1, r2, #0
 800a19c:	0018      	movs	r0, r3
 800a19e:	f000 fbd1 	bl	800a944 <GasIndexAlgorithm__mox_model__process>
 800a1a2:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	1c11      	adds	r1, r2, #0
 800a1b0:	0018      	movs	r0, r3
 800a1b2:	f000 fc25 	bl	800aa00 <GasIndexAlgorithm__sigmoid_scaled__process>
 800a1b6:	1c02      	adds	r2, r0, #0
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	639a      	str	r2, [r3, #56]	@ 0x38
 800a1bc:	e003      	b.n	800a1c6 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	689a      	ldr	r2, [r3, #8]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	1c11      	adds	r1, r2, #0
 800a1ce:	0018      	movs	r0, r3
 800a1d0:	f000 fcec 	bl	800abac <GasIndexAlgorithm__adaptive_lowpass__process>
 800a1d4:	1c02      	adds	r2, r0, #0
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1de:	21fc      	movs	r1, #252	@ 0xfc
 800a1e0:	0589      	lsls	r1, r1, #22
 800a1e2:	1c18      	adds	r0, r3, #0
 800a1e4:	f7f6 f9a4 	bl	8000530 <__aeabi_fcmplt>
 800a1e8:	1e03      	subs	r3, r0, #0
 800a1ea:	d003      	beq.n	800a1f4 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	22fc      	movs	r2, #252	@ 0xfc
 800a1f0:	0592      	lsls	r2, r2, #22
 800a1f2:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	1c18      	adds	r0, r3, #0
 800a1fc:	f7f6 f9ac 	bl	8000558 <__aeabi_fcmpgt>
 800a200:	1e03      	subs	r3, r0, #0
 800a202:	d015      	beq.n	800a230 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	1c11      	adds	r1, r2, #0
 800a20c:	0018      	movs	r0, r3
 800a20e:	f000 fa4f 	bl	800a6b0 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	0018      	movs	r0, r3
 800a216:	f000 f8e5 	bl	800a3e4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a21a:	1c04      	adds	r4, r0, #0
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	0018      	movs	r0, r3
 800a220:	f000 f8ea 	bl	800a3f8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a224:	1c02      	adds	r2, r0, #0
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	1c21      	adds	r1, r4, #0
 800a22a:	0018      	movs	r0, r3
 800a22c:	f000 fb7a 	bl	800a924 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a234:	21fc      	movs	r1, #252	@ 0xfc
 800a236:	0589      	lsls	r1, r1, #22
 800a238:	1c18      	adds	r0, r3, #0
 800a23a:	f7f6 fb41 	bl	80008c0 <__aeabi_fadd>
 800a23e:	1c03      	adds	r3, r0, #0
 800a240:	1c18      	adds	r0, r3, #0
 800a242:	f7f7 f9a5 	bl	8001590 <__aeabi_f2iz>
 800a246:	0002      	movs	r2, r0
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	601a      	str	r2, [r3, #0]
    return;
 800a24c:	46c0      	nop			@ (mov r8, r8)
}
 800a24e:	46bd      	mov	sp, r7
 800a250:	b005      	add	sp, #20
 800a252:	bd90      	pop	{r4, r7, pc}
 800a254:	42340000 	.word	0x42340000
 800a258:	0000fde7 	.word	0x0000fde7
 800a25c:	00007fff 	.word	0x00007fff

0800a260 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a260:	b5b0      	push	{r4, r5, r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	223c      	movs	r2, #60	@ 0x3c
 800a26c:	2100      	movs	r1, #0
 800a26e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	4952      	ldr	r1, [pc, #328]	@ (800a3d4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a28a:	1c18      	adds	r0, r3, #0
 800a28c:	f7f6 fca2 	bl	8000bd4 <__aeabi_fdiv>
 800a290:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a292:	2188      	movs	r1, #136	@ 0x88
 800a294:	05c9      	lsls	r1, r1, #23
 800a296:	1c18      	adds	r0, r3, #0
 800a298:	f7f6 fe82 	bl	8000fa0 <__aeabi_fmul>
 800a29c:	1c03      	adds	r3, r0, #0
 800a29e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	494a      	ldr	r1, [pc, #296]	@ (800a3d4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a2aa:	1c18      	adds	r0, r3, #0
 800a2ac:	f7f6 fc92 	bl	8000bd4 <__aeabi_fdiv>
 800a2b0:	1c03      	adds	r3, r0, #0
 800a2b2:	1c19      	adds	r1, r3, #0
 800a2b4:	1c20      	adds	r0, r4, #0
 800a2b6:	f7f6 fb03 	bl	80008c0 <__aeabi_fadd>
 800a2ba:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a2bc:	1c19      	adds	r1, r3, #0
 800a2be:	1c28      	adds	r0, r5, #0
 800a2c0:	f7f6 fc88 	bl	8000bd4 <__aeabi_fdiv>
 800a2c4:	1c03      	adds	r3, r0, #0
 800a2c6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	4940      	ldr	r1, [pc, #256]	@ (800a3d4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a2d2:	1c18      	adds	r0, r3, #0
 800a2d4:	f7f6 fc7e 	bl	8000bd4 <__aeabi_fdiv>
 800a2d8:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a2da:	2185      	movs	r1, #133	@ 0x85
 800a2dc:	05c9      	lsls	r1, r1, #23
 800a2de:	1c18      	adds	r0, r3, #0
 800a2e0:	f7f6 fe5e 	bl	8000fa0 <__aeabi_fmul>
 800a2e4:	1c03      	adds	r3, r0, #0
 800a2e6:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	4938      	ldr	r1, [pc, #224]	@ (800a3d4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a2f2:	1c18      	adds	r0, r3, #0
 800a2f4:	f7f6 fc6e 	bl	8000bd4 <__aeabi_fdiv>
 800a2f8:	1c03      	adds	r3, r0, #0
 800a2fa:	1c19      	adds	r1, r3, #0
 800a2fc:	1c20      	adds	r0, r4, #0
 800a2fe:	f7f6 fadf 	bl	80008c0 <__aeabi_fadd>
 800a302:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a304:	1c19      	adds	r1, r3, #0
 800a306:	1c28      	adds	r0, r5, #0
 800a308:	f7f6 fc64 	bl	8000bd4 <__aeabi_fdiv>
 800a30c:	1c03      	adds	r3, r0, #0
 800a30e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d118      	bne.n	800a34e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a320:	2188      	movs	r1, #136	@ 0x88
 800a322:	05c9      	lsls	r1, r1, #23
 800a324:	1c18      	adds	r0, r3, #0
 800a326:	f7f6 fe3b 	bl	8000fa0 <__aeabi_fmul>
 800a32a:	1c03      	adds	r3, r0, #0
 800a32c:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800a332:	4929      	ldr	r1, [pc, #164]	@ (800a3d8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800a334:	1c18      	adds	r0, r3, #0
 800a336:	f7f6 fac3 	bl	80008c0 <__aeabi_fadd>
 800a33a:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a33c:	1c19      	adds	r1, r3, #0
 800a33e:	1c20      	adds	r0, r4, #0
 800a340:	f7f6 fc48 	bl	8000bd4 <__aeabi_fdiv>
 800a344:	1c03      	adds	r3, r0, #0
 800a346:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	655a      	str	r2, [r3, #84]	@ 0x54
 800a34c:	e017      	b.n	800a37e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a352:	2188      	movs	r1, #136	@ 0x88
 800a354:	05c9      	lsls	r1, r1, #23
 800a356:	1c18      	adds	r0, r3, #0
 800a358:	f7f6 fe22 	bl	8000fa0 <__aeabi_fmul>
 800a35c:	1c03      	adds	r3, r0, #0
 800a35e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800a364:	491d      	ldr	r1, [pc, #116]	@ (800a3dc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800a366:	1c18      	adds	r0, r3, #0
 800a368:	f7f6 faaa 	bl	80008c0 <__aeabi_fadd>
 800a36c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a36e:	1c19      	adds	r1, r3, #0
 800a370:	1c20      	adds	r0, r4, #0
 800a372:	f7f6 fc2f 	bl	8000bd4 <__aeabi_fdiv>
 800a376:	1c03      	adds	r3, r0, #0
 800a378:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a382:	2185      	movs	r1, #133	@ 0x85
 800a384:	05c9      	lsls	r1, r1, #23
 800a386:	1c18      	adds	r0, r3, #0
 800a388:	f7f6 fe0a 	bl	8000fa0 <__aeabi_fmul>
 800a38c:	1c03      	adds	r3, r0, #0
 800a38e:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	4912      	ldr	r1, [pc, #72]	@ (800a3e0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800a396:	1c18      	adds	r0, r3, #0
 800a398:	f7f6 fa92 	bl	80008c0 <__aeabi_fadd>
 800a39c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800a39e:	1c19      	adds	r1, r3, #0
 800a3a0:	1c20      	adds	r0, r4, #0
 800a3a2:	f7f6 fc17 	bl	8000bd4 <__aeabi_fdiv>
 800a3a6:	1c03      	adds	r3, r0, #0
 800a3a8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800a3cc:	46c0      	nop			@ (mov r8, r8)
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	b002      	add	sp, #8
 800a3d2:	bdb0      	pop	{r4, r5, r7, pc}
 800a3d4:	45610000 	.word	0x45610000
 800a3d8:	44960000 	.word	0x44960000
 800a3dc:	41a00000 	.word	0x41a00000
 800a3e0:	451c4000 	.word	0x451c4000

0800a3e4 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800a3f0:	1c18      	adds	r0, r3, #0
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	b002      	add	sp, #8
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800a408:	1c19      	adds	r1, r3, #0
 800a40a:	1c10      	adds	r0, r2, #0
 800a40c:	f7f6 fa58 	bl	80008c0 <__aeabi_fadd>
 800a410:	1c03      	adds	r3, r0, #0
}
 800a412:	1c18      	adds	r0, r3, #0
 800a414:	46bd      	mov	sp, r7
 800a416:	b002      	add	sp, #8
 800a418:	bd80      	pop	{r7, pc}

0800a41a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b082      	sub	sp, #8
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	223c      	movs	r2, #60	@ 0x3c
 800a426:	5c9b      	ldrb	r3, [r3, r2]
}
 800a428:	0018      	movs	r0, r3
 800a42a:	46bd      	mov	sp, r7
 800a42c:	b002      	add	sp, #8
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800a430:	b5b0      	push	{r4, r5, r7, lr}
 800a432:	b08c      	sub	sp, #48	@ 0x30
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800a43c:	1c19      	adds	r1, r3, #0
 800a43e:	4895      	ldr	r0, [pc, #596]	@ (800a694 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800a440:	f7f6 feec 	bl	800121c <__aeabi_fsub>
 800a444:	1c03      	adds	r3, r0, #0
 800a446:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a44c:	1c19      	adds	r1, r3, #0
 800a44e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a450:	f7f6 f882 	bl	8000558 <__aeabi_fcmpgt>
 800a454:	1e03      	subs	r3, r0, #0
 800a456:	d00b      	beq.n	800a470 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a460:	1c19      	adds	r1, r3, #0
 800a462:	1c10      	adds	r0, r2, #0
 800a464:	f7f6 fa2c 	bl	80008c0 <__aeabi_fadd>
 800a468:	1c03      	adds	r3, r0, #0
 800a46a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a474:	1c19      	adds	r1, r3, #0
 800a476:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a478:	f7f6 f86e 	bl	8000558 <__aeabi_fcmpgt>
 800a47c:	1e03      	subs	r3, r0, #0
 800a47e:	d00b      	beq.n	800a498 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a488:	1c19      	adds	r1, r3, #0
 800a48a:	1c10      	adds	r0, r2, #0
 800a48c:	f7f6 fa18 	bl	80008c0 <__aeabi_fadd>
 800a490:	1c03      	adds	r3, r0, #0
 800a492:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6959      	ldr	r1, [r3, #20]
 800a49c:	4a7e      	ldr	r2, [pc, #504]	@ (800a698 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	0018      	movs	r0, r3
 800a4a2:	f000 f9f1 	bl	800a888 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	1c11      	adds	r1, r2, #0
 800a4ae:	0018      	movs	r0, r3
 800a4b0:	f000 f9fa 	bl	800a8a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a4b4:	1c03      	adds	r3, r0, #0
 800a4b6:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800a4c4:	1c19      	adds	r1, r3, #0
 800a4c6:	1c10      	adds	r0, r2, #0
 800a4c8:	f7f6 fea8 	bl	800121c <__aeabi_fsub>
 800a4cc:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800a4ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4d0:	1c18      	adds	r0, r3, #0
 800a4d2:	f7f6 fd65 	bl	8000fa0 <__aeabi_fmul>
 800a4d6:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800a4d8:	1c19      	adds	r1, r3, #0
 800a4da:	1c20      	adds	r0, r4, #0
 800a4dc:	f7f6 f9f0 	bl	80008c0 <__aeabi_fadd>
 800a4e0:	1c03      	adds	r3, r0, #0
 800a4e2:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a4ec:	1c19      	adds	r1, r3, #0
 800a4ee:	486b      	ldr	r0, [pc, #428]	@ (800a69c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a4f0:	f7f6 fe94 	bl	800121c <__aeabi_fsub>
 800a4f4:	1c03      	adds	r3, r0, #0
 800a4f6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	1c11      	adds	r1, r2, #0
 800a500:	0018      	movs	r0, r3
 800a502:	f000 f9d1 	bl	800a8a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a506:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a508:	1c19      	adds	r1, r3, #0
 800a50a:	1c28      	adds	r0, r5, #0
 800a50c:	f7f6 fd48 	bl	8000fa0 <__aeabi_fmul>
 800a510:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800a512:	1c19      	adds	r1, r3, #0
 800a514:	1c20      	adds	r0, r4, #0
 800a516:	f7f6 f9d3 	bl	80008c0 <__aeabi_fadd>
 800a51a:	1c03      	adds	r3, r0, #0
 800a51c:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a51e:	4a60      	ldr	r2, [pc, #384]	@ (800a6a0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a520:	6a39      	ldr	r1, [r7, #32]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	0018      	movs	r0, r3
 800a526:	f000 f9af 	bl	800a888 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	1c11      	adds	r1, r2, #0
 800a532:	0018      	movs	r0, r3
 800a534:	f000 f9b8 	bl	800a8a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a538:	1c03      	adds	r3, r0, #0
 800a53a:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800a53c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a53e:	69f8      	ldr	r0, [r7, #28]
 800a540:	f7f6 fd2e 	bl	8000fa0 <__aeabi_fmul>
 800a544:	1c03      	adds	r3, r0, #0
 800a546:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6999      	ldr	r1, [r3, #24]
 800a550:	4a51      	ldr	r2, [pc, #324]	@ (800a698 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	0018      	movs	r0, r3
 800a556:	f000 f997 	bl	800a888 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	1c11      	adds	r1, r2, #0
 800a562:	0018      	movs	r0, r3
 800a564:	f000 f9a0 	bl	800a8a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a568:	1c03      	adds	r3, r0, #0
 800a56a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a578:	1c19      	adds	r1, r3, #0
 800a57a:	1c10      	adds	r0, r2, #0
 800a57c:	f7f6 fe4e 	bl	800121c <__aeabi_fsub>
 800a580:	1c03      	adds	r3, r0, #0
 800a582:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800a584:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a586:	69b8      	ldr	r0, [r7, #24]
 800a588:	f7f6 fe48 	bl	800121c <__aeabi_fsub>
 800a58c:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a58e:	1c19      	adds	r1, r3, #0
 800a590:	1c28      	adds	r0, r5, #0
 800a592:	f7f6 fd05 	bl	8000fa0 <__aeabi_fmul>
 800a596:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800a598:	1c19      	adds	r1, r3, #0
 800a59a:	1c20      	adds	r0, r4, #0
 800a59c:	f7f6 f990 	bl	80008c0 <__aeabi_fadd>
 800a5a0:	1c03      	adds	r3, r0, #0
 800a5a2:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a5ac:	1c19      	adds	r1, r3, #0
 800a5ae:	483b      	ldr	r0, [pc, #236]	@ (800a69c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a5b0:	f7f6 fe34 	bl	800121c <__aeabi_fsub>
 800a5b4:	1c03      	adds	r3, r0, #0
 800a5b6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	1c11      	adds	r1, r2, #0
 800a5c0:	0018      	movs	r0, r3
 800a5c2:	f000 f971 	bl	800a8a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a5c6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a5c8:	1c19      	adds	r1, r3, #0
 800a5ca:	1c28      	adds	r0, r5, #0
 800a5cc:	f7f6 fce8 	bl	8000fa0 <__aeabi_fmul>
 800a5d0:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800a5d2:	1c19      	adds	r1, r3, #0
 800a5d4:	1c20      	adds	r0, r4, #0
 800a5d6:	f7f6 f973 	bl	80008c0 <__aeabi_fadd>
 800a5da:	1c03      	adds	r3, r0, #0
 800a5dc:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a5de:	4a30      	ldr	r2, [pc, #192]	@ (800a6a0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a5e0:	6939      	ldr	r1, [r7, #16]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	0018      	movs	r0, r3
 800a5e6:	f000 f94f 	bl	800a888 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	1c11      	adds	r1, r2, #0
 800a5f2:	0018      	movs	r0, r3
 800a5f4:	f000 f958 	bl	800a8a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a5f8:	1c03      	adds	r3, r0, #0
 800a5fa:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800a5fc:	6979      	ldr	r1, [r7, #20]
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f7f6 fcce 	bl	8000fa0 <__aeabi_fmul>
 800a604:	1c03      	adds	r3, r0, #0
 800a606:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	4923      	ldr	r1, [pc, #140]	@ (800a6a4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800a616:	1c18      	adds	r0, r3, #0
 800a618:	f7f6 fadc 	bl	8000bd4 <__aeabi_fdiv>
 800a61c:	1c03      	adds	r3, r0, #0
 800a61e:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800a620:	69f9      	ldr	r1, [r7, #28]
 800a622:	20fe      	movs	r0, #254	@ 0xfe
 800a624:	0580      	lsls	r0, r0, #22
 800a626:	f7f6 fdf9 	bl	800121c <__aeabi_fsub>
 800a62a:	1c03      	adds	r3, r0, #0
 800a62c:	491e      	ldr	r1, [pc, #120]	@ (800a6a8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800a62e:	1c18      	adds	r0, r3, #0
 800a630:	f7f6 fcb6 	bl	8000fa0 <__aeabi_fmul>
 800a634:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800a636:	491d      	ldr	r1, [pc, #116]	@ (800a6ac <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800a638:	1c18      	adds	r0, r3, #0
 800a63a:	f7f6 fdef 	bl	800121c <__aeabi_fsub>
 800a63e:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800a640:	1c19      	adds	r1, r3, #0
 800a642:	1c28      	adds	r0, r5, #0
 800a644:	f7f6 fcac 	bl	8000fa0 <__aeabi_fmul>
 800a648:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a64a:	1c19      	adds	r1, r3, #0
 800a64c:	1c20      	adds	r0, r4, #0
 800a64e:	f7f6 f937 	bl	80008c0 <__aeabi_fadd>
 800a652:	1c03      	adds	r3, r0, #0
 800a654:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a65e:	2100      	movs	r1, #0
 800a660:	1c18      	adds	r0, r3, #0
 800a662:	f7f5 ff65 	bl	8000530 <__aeabi_fcmplt>
 800a666:	1e03      	subs	r3, r0, #0
 800a668:	d002      	beq.n	800a670 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a678:	1c19      	adds	r1, r3, #0
 800a67a:	1c10      	adds	r0, r2, #0
 800a67c:	f7f5 ff6c 	bl	8000558 <__aeabi_fcmpgt>
 800a680:	1e03      	subs	r3, r0, #0
 800a682:	d100      	bne.n	800a686 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800a684:	e002      	b.n	800a68c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a68c:	46c0      	nop			@ (mov r8, r8)
 800a68e:	46bd      	mov	sp, r7
 800a690:	b00c      	add	sp, #48	@ 0x30
 800a692:	bdb0      	pop	{r4, r5, r7, pc}
 800a694:	46fffe00 	.word	0x46fffe00
 800a698:	3c23d70a 	.word	0x3c23d70a
 800a69c:	43ff0000 	.word	0x43ff0000
 800a6a0:	3db851ec 	.word	0x3db851ec
 800a6a4:	42700000 	.word	0x42700000
 800a6a8:	3fa66666 	.word	0x3fa66666
 800a6ac:	3e99999a 	.word	0x3e99999a

0800a6b0 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800a6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6b2:	b087      	sub	sp, #28
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	223c      	movs	r2, #60	@ 0x3c
 800a6be:	5c9b      	ldrb	r3, [r3, r2]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	4053      	eors	r3, r2
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00a      	beq.n	800a6e0 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	223c      	movs	r2, #60	@ 0x3c
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800a6de:	e0c8      	b.n	800a872 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e4:	4965      	ldr	r1, [pc, #404]	@ (800a87c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800a6e6:	1c18      	adds	r0, r3, #0
 800a6e8:	f7f5 ff40 	bl	800056c <__aeabi_fcmpge>
 800a6ec:	1e03      	subs	r3, r0, #0
 800a6ee:	d107      	bne.n	800a700 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a6f4:	4962      	ldr	r1, [pc, #392]	@ (800a880 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800a6f6:	1c18      	adds	r0, r3, #0
 800a6f8:	f7f5 ff24 	bl	8000544 <__aeabi_fcmple>
 800a6fc:	1e03      	subs	r3, r0, #0
 800a6fe:	d00e      	beq.n	800a71e <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a708:	1c19      	adds	r1, r3, #0
 800a70a:	1c10      	adds	r0, r2, #0
 800a70c:	f7f6 f8d8 	bl	80008c0 <__aeabi_fadd>
 800a710:	1c03      	adds	r3, r0, #0
 800a712:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a722:	1c19      	adds	r1, r3, #0
 800a724:	6838      	ldr	r0, [r7, #0]
 800a726:	f7f6 fd79 	bl	800121c <__aeabi_fsub>
 800a72a:	1c03      	adds	r3, r0, #0
 800a72c:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	0018      	movs	r0, r3
 800a732:	f7ff fe7d 	bl	800a430 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a73a:	1c19      	adds	r1, r3, #0
 800a73c:	6838      	ldr	r0, [r7, #0]
 800a73e:	f7f6 fd6d 	bl	800121c <__aeabi_fsub>
 800a742:	1c03      	adds	r3, r0, #0
 800a744:	2185      	movs	r1, #133	@ 0x85
 800a746:	05c9      	lsls	r1, r1, #23
 800a748:	1c18      	adds	r0, r3, #0
 800a74a:	f7f6 fa43 	bl	8000bd4 <__aeabi_fdiv>
 800a74e:	1c03      	adds	r3, r0, #0
 800a750:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800a752:	2100      	movs	r1, #0
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f7f5 feeb 	bl	8000530 <__aeabi_fcmplt>
 800a75a:	1e03      	subs	r3, r0, #0
 800a75c:	d008      	beq.n	800a770 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a762:	68f9      	ldr	r1, [r7, #12]
 800a764:	1c18      	adds	r0, r3, #0
 800a766:	f7f6 fd59 	bl	800121c <__aeabi_fsub>
 800a76a:	1c03      	adds	r3, r0, #0
 800a76c:	617b      	str	r3, [r7, #20]
 800a76e:	e007      	b.n	800a780 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a774:	1c19      	adds	r1, r3, #0
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f7f6 f8a2 	bl	80008c0 <__aeabi_fadd>
 800a77c:	1c03      	adds	r3, r0, #0
 800a77e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800a780:	23fe      	movs	r3, #254	@ 0xfe
 800a782:	059b      	lsls	r3, r3, #22
 800a784:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800a786:	493f      	ldr	r1, [pc, #252]	@ (800a884 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a788:	6978      	ldr	r0, [r7, #20]
 800a78a:	f7f5 fee5 	bl	8000558 <__aeabi_fcmpgt>
 800a78e:	1e03      	subs	r3, r0, #0
 800a790:	d010      	beq.n	800a7b4 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800a792:	493c      	ldr	r1, [pc, #240]	@ (800a884 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a794:	6978      	ldr	r0, [r7, #20]
 800a796:	f7f6 fa1d 	bl	8000bd4 <__aeabi_fdiv>
 800a79a:	1c03      	adds	r3, r0, #0
 800a79c:	1c1c      	adds	r4, r3, #0
 800a79e:	4939      	ldr	r1, [pc, #228]	@ (800a884 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a7a0:	6978      	ldr	r0, [r7, #20]
 800a7a2:	f7f6 fa17 	bl	8000bd4 <__aeabi_fdiv>
 800a7a6:	1c03      	adds	r3, r0, #0
 800a7a8:	1c19      	adds	r1, r3, #0
 800a7aa:	1c20      	adds	r0, r4, #0
 800a7ac:	f7f6 fbf8 	bl	8000fa0 <__aeabi_fmul>
 800a7b0:	1c03      	adds	r3, r0, #0
 800a7b2:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800a7b8:	1c19      	adds	r1, r3, #0
 800a7ba:	2085      	movs	r0, #133	@ 0x85
 800a7bc:	05c0      	lsls	r0, r0, #23
 800a7be:	f7f6 fd2d 	bl	800121c <__aeabi_fsub>
 800a7c2:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800a7c4:	6939      	ldr	r1, [r7, #16]
 800a7c6:	1c18      	adds	r0, r3, #0
 800a7c8:	f7f6 fbea 	bl	8000fa0 <__aeabi_fmul>
 800a7cc:	1c03      	adds	r3, r0, #0
 800a7ce:	1c18      	adds	r0, r3, #0
 800a7d0:	f017 fc2c 	bl	802202c <sqrtf>
 800a7d4:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a7de:	2185      	movs	r1, #133	@ 0x85
 800a7e0:	05c9      	lsls	r1, r1, #23
 800a7e2:	6938      	ldr	r0, [r7, #16]
 800a7e4:	f7f6 fbdc 	bl	8000fa0 <__aeabi_fmul>
 800a7e8:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800a7ea:	1c19      	adds	r1, r3, #0
 800a7ec:	1c28      	adds	r0, r5, #0
 800a7ee:	f7f6 f9f1 	bl	8000bd4 <__aeabi_fdiv>
 800a7f2:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a7f4:	1c19      	adds	r1, r3, #0
 800a7f6:	1c20      	adds	r0, r4, #0
 800a7f8:	f7f6 fbd2 	bl	8000fa0 <__aeabi_fmul>
 800a7fc:	1c03      	adds	r3, r0, #0
 800a7fe:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a804:	68f9      	ldr	r1, [r7, #12]
 800a806:	1c18      	adds	r0, r3, #0
 800a808:	f7f6 fbca 	bl	8000fa0 <__aeabi_fmul>
 800a80c:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800a80e:	6939      	ldr	r1, [r7, #16]
 800a810:	1c18      	adds	r0, r3, #0
 800a812:	f7f6 f9df 	bl	8000bd4 <__aeabi_fdiv>
 800a816:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800a818:	68f9      	ldr	r1, [r7, #12]
 800a81a:	1c18      	adds	r0, r3, #0
 800a81c:	f7f6 fbc0 	bl	8000fa0 <__aeabi_fmul>
 800a820:	1c03      	adds	r3, r0, #0
             sqrtf(
 800a822:	1c19      	adds	r1, r3, #0
 800a824:	1c20      	adds	r0, r4, #0
 800a826:	f7f6 f84b 	bl	80008c0 <__aeabi_fadd>
 800a82a:	1c03      	adds	r3, r0, #0
 800a82c:	1c18      	adds	r0, r3, #0
 800a82e:	f017 fbfd 	bl	802202c <sqrtf>
 800a832:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a834:	1c19      	adds	r1, r3, #0
 800a836:	1c30      	adds	r0, r6, #0
 800a838:	f7f6 fbb2 	bl	8000fa0 <__aeabi_fmul>
 800a83c:	1c03      	adds	r3, r0, #0
 800a83e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a84c:	68f9      	ldr	r1, [r7, #12]
 800a84e:	1c18      	adds	r0, r3, #0
 800a850:	f7f6 fba6 	bl	8000fa0 <__aeabi_fmul>
 800a854:	1c03      	adds	r3, r0, #0
 800a856:	2182      	movs	r1, #130	@ 0x82
 800a858:	05c9      	lsls	r1, r1, #23
 800a85a:	1c18      	adds	r0, r3, #0
 800a85c:	f7f6 f9ba 	bl	8000bd4 <__aeabi_fdiv>
 800a860:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800a862:	1c19      	adds	r1, r3, #0
 800a864:	1c20      	adds	r0, r4, #0
 800a866:	f7f6 f82b 	bl	80008c0 <__aeabi_fadd>
 800a86a:	1c03      	adds	r3, r0, #0
 800a86c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a872:	46c0      	nop			@ (mov r8, r8)
 800a874:	46bd      	mov	sp, r7
 800a876:	b007      	add	sp, #28
 800a878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a87a:	46c0      	nop			@ (mov r8, r8)
 800a87c:	42c80000 	.word	0x42c80000
 800a880:	c2c80000 	.word	0xc2c80000
 800a884:	44b40000 	.word	0x44b40000

0800a888 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	68ba      	ldr	r2, [r7, #8]
 800a89e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a8a0:	46c0      	nop			@ (mov r8, r8)
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	b004      	add	sp, #16
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800a8a8:	b590      	push	{r4, r7, lr}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8ba:	1c19      	adds	r1, r3, #0
 800a8bc:	6838      	ldr	r0, [r7, #0]
 800a8be:	f7f6 fcad 	bl	800121c <__aeabi_fsub>
 800a8c2:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a8c4:	1c19      	adds	r1, r3, #0
 800a8c6:	1c20      	adds	r0, r4, #0
 800a8c8:	f7f6 fb6a 	bl	8000fa0 <__aeabi_fmul>
 800a8cc:	1c03      	adds	r3, r0, #0
 800a8ce:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800a8d0:	4912      	ldr	r1, [pc, #72]	@ (800a91c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f7f5 fe2c 	bl	8000530 <__aeabi_fcmplt>
 800a8d8:	1e03      	subs	r3, r0, #0
 800a8da:	d002      	beq.n	800a8e2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800a8dc:	23fe      	movs	r3, #254	@ 0xfe
 800a8de:	059b      	lsls	r3, r3, #22
 800a8e0:	e018      	b.n	800a914 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800a8e2:	490f      	ldr	r1, [pc, #60]	@ (800a920 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f7f5 fe37 	bl	8000558 <__aeabi_fcmpgt>
 800a8ea:	1e03      	subs	r3, r0, #0
 800a8ec:	d001      	beq.n	800a8f2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	e010      	b.n	800a914 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	1c18      	adds	r0, r3, #0
 800a8f6:	f017 fb71 	bl	8021fdc <expf>
 800a8fa:	1c03      	adds	r3, r0, #0
 800a8fc:	21fe      	movs	r1, #254	@ 0xfe
 800a8fe:	0589      	lsls	r1, r1, #22
 800a900:	1c18      	adds	r0, r3, #0
 800a902:	f7f5 ffdd 	bl	80008c0 <__aeabi_fadd>
 800a906:	1c03      	adds	r3, r0, #0
 800a908:	1c19      	adds	r1, r3, #0
 800a90a:	20fe      	movs	r0, #254	@ 0xfe
 800a90c:	0580      	lsls	r0, r0, #22
 800a90e:	f7f6 f961 	bl	8000bd4 <__aeabi_fdiv>
 800a912:	1c03      	adds	r3, r0, #0
    }
}
 800a914:	1c18      	adds	r0, r3, #0
 800a916:	46bd      	mov	sp, r7
 800a918:	b005      	add	sp, #20
 800a91a:	bd90      	pop	{r4, r7, pc}
 800a91c:	c2480000 	.word	0xc2480000
 800a920:	42480000 	.word	0x42480000

0800a924 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	68ba      	ldr	r2, [r7, #8]
 800a934:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a93c:	46c0      	nop			@ (mov r8, r8)
 800a93e:	46bd      	mov	sp, r7
 800a940:	b004      	add	sp, #16
 800a942:	bd80      	pop	{r7, pc}

0800a944 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800a944:	b590      	push	{r4, r7, lr}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2b01      	cmp	r3, #1
 800a954:	d114      	bne.n	800a980 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a95a:	1c19      	adds	r1, r3, #0
 800a95c:	6838      	ldr	r0, [r7, #0]
 800a95e:	f7f6 fc5d 	bl	800121c <__aeabi_fsub>
 800a962:	1c03      	adds	r3, r0, #0
 800a964:	4918      	ldr	r1, [pc, #96]	@ (800a9c8 <GasIndexAlgorithm__mox_model__process+0x84>)
 800a966:	1c18      	adds	r0, r3, #0
 800a968:	f7f6 f934 	bl	8000bd4 <__aeabi_fdiv>
 800a96c:	1c03      	adds	r3, r0, #0
 800a96e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800a974:	1c19      	adds	r1, r3, #0
 800a976:	1c10      	adds	r0, r2, #0
 800a978:	f7f6 fb12 	bl	8000fa0 <__aeabi_fmul>
 800a97c:	1c03      	adds	r3, r0, #0
 800a97e:	e01f      	b.n	800a9c0 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a984:	1c19      	adds	r1, r3, #0
 800a986:	6838      	ldr	r0, [r7, #0]
 800a988:	f7f6 fc48 	bl	800121c <__aeabi_fsub>
 800a98c:	1c03      	adds	r3, r0, #0
 800a98e:	1c1a      	adds	r2, r3, #0
 800a990:	2380      	movs	r3, #128	@ 0x80
 800a992:	061b      	lsls	r3, r3, #24
 800a994:	4053      	eors	r3, r2
 800a996:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a99c:	490b      	ldr	r1, [pc, #44]	@ (800a9cc <GasIndexAlgorithm__mox_model__process+0x88>)
 800a99e:	1c18      	adds	r0, r3, #0
 800a9a0:	f7f5 ff8e 	bl	80008c0 <__aeabi_fadd>
 800a9a4:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a9a6:	1c19      	adds	r1, r3, #0
 800a9a8:	1c20      	adds	r0, r4, #0
 800a9aa:	f7f6 f913 	bl	8000bd4 <__aeabi_fdiv>
 800a9ae:	1c03      	adds	r3, r0, #0
 800a9b0:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800a9b6:	1c19      	adds	r1, r3, #0
 800a9b8:	1c10      	adds	r0, r2, #0
 800a9ba:	f7f6 faf1 	bl	8000fa0 <__aeabi_fmul>
 800a9be:	1c03      	adds	r3, r0, #0
    }
}
 800a9c0:	1c18      	adds	r0, r3, #0
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	b003      	add	sp, #12
 800a9c6:	bd90      	pop	{r4, r7, pc}
 800a9c8:	44fa0000 	.word	0x44fa0000
 800a9cc:	435c0000 	.word	0x435c0000

0800a9d0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
 800a9dc:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2180      	movs	r1, #128	@ 0x80
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2184      	movs	r1, #132	@ 0x84
 800a9ea:	68ba      	ldr	r2, [r7, #8]
 800a9ec:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2188      	movs	r1, #136	@ 0x88
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	505a      	str	r2, [r3, r1]
}
 800a9f6:	46c0      	nop			@ (mov r8, r8)
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	b004      	add	sp, #16
 800a9fc:	bd80      	pop	{r7, pc}
	...

0800aa00 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800aa00:	b590      	push	{r4, r7, lr}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2280      	movs	r2, #128	@ 0x80
 800aa0e:	589c      	ldr	r4, [r3, r2]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2284      	movs	r2, #132	@ 0x84
 800aa14:	589b      	ldr	r3, [r3, r2]
 800aa16:	1c19      	adds	r1, r3, #0
 800aa18:	6838      	ldr	r0, [r7, #0]
 800aa1a:	f7f6 fbff 	bl	800121c <__aeabi_fsub>
 800aa1e:	1c03      	adds	r3, r0, #0
 800aa20:	1c19      	adds	r1, r3, #0
 800aa22:	1c20      	adds	r0, r4, #0
 800aa24:	f7f6 fabc 	bl	8000fa0 <__aeabi_fmul>
 800aa28:	1c03      	adds	r3, r0, #0
 800aa2a:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800aa2c:	4940      	ldr	r1, [pc, #256]	@ (800ab30 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800aa2e:	68b8      	ldr	r0, [r7, #8]
 800aa30:	f7f5 fd7e 	bl	8000530 <__aeabi_fcmplt>
 800aa34:	1e03      	subs	r3, r0, #0
 800aa36:	d001      	beq.n	800aa3c <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800aa38:	4b3e      	ldr	r3, [pc, #248]	@ (800ab34 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800aa3a:	e075      	b.n	800ab28 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800aa3c:	493e      	ldr	r1, [pc, #248]	@ (800ab38 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800aa3e:	68b8      	ldr	r0, [r7, #8]
 800aa40:	f7f5 fd8a 	bl	8000558 <__aeabi_fcmpgt>
 800aa44:	1e03      	subs	r3, r0, #0
 800aa46:	d001      	beq.n	800aa4c <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	e06d      	b.n	800ab28 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	6838      	ldr	r0, [r7, #0]
 800aa50:	f7f5 fd8c 	bl	800056c <__aeabi_fcmpge>
 800aa54:	1e03      	subs	r3, r0, #0
 800aa56:	d047      	beq.n	800aae8 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2288      	movs	r2, #136	@ 0x88
 800aa5c:	589b      	ldr	r3, [r3, r2]
 800aa5e:	21fe      	movs	r1, #254	@ 0xfe
 800aa60:	0589      	lsls	r1, r1, #22
 800aa62:	1c18      	adds	r0, r3, #0
 800aa64:	f7f5 fd5e 	bl	8000524 <__aeabi_fcmpeq>
 800aa68:	1e03      	subs	r3, r0, #0
 800aa6a:	d00e      	beq.n	800aa8a <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	1c19      	adds	r1, r3, #0
 800aa72:	20fe      	movs	r0, #254	@ 0xfe
 800aa74:	0580      	lsls	r0, r0, #22
 800aa76:	f7f6 fbd1 	bl	800121c <__aeabi_fsub>
 800aa7a:	1c03      	adds	r3, r0, #0
 800aa7c:	492f      	ldr	r1, [pc, #188]	@ (800ab3c <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800aa7e:	1c18      	adds	r0, r3, #0
 800aa80:	f7f6 fa8e 	bl	8000fa0 <__aeabi_fmul>
 800aa84:	1c03      	adds	r3, r0, #0
 800aa86:	60fb      	str	r3, [r7, #12]
 800aa88:	e012      	b.n	800aab0 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	492c      	ldr	r1, [pc, #176]	@ (800ab40 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800aa90:	1c18      	adds	r0, r3, #0
 800aa92:	f7f6 fa85 	bl	8000fa0 <__aeabi_fmul>
 800aa96:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800aa98:	1c19      	adds	r1, r3, #0
 800aa9a:	4826      	ldr	r0, [pc, #152]	@ (800ab34 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800aa9c:	f7f6 fbbe 	bl	800121c <__aeabi_fsub>
 800aaa0:	1c03      	adds	r3, r0, #0
 800aaa2:	2181      	movs	r1, #129	@ 0x81
 800aaa4:	05c9      	lsls	r1, r1, #23
 800aaa6:	1c18      	adds	r0, r3, #0
 800aaa8:	f7f6 f894 	bl	8000bd4 <__aeabi_fdiv>
 800aaac:	1c03      	adds	r3, r0, #0
 800aaae:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800aab0:	4920      	ldr	r1, [pc, #128]	@ (800ab34 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f7f5 ff04 	bl	80008c0 <__aeabi_fadd>
 800aab8:	1c03      	adds	r3, r0, #0
 800aaba:	1c1c      	adds	r4, r3, #0
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	1c18      	adds	r0, r3, #0
 800aac0:	f017 fa8c 	bl	8021fdc <expf>
 800aac4:	1c03      	adds	r3, r0, #0
 800aac6:	21fe      	movs	r1, #254	@ 0xfe
 800aac8:	0589      	lsls	r1, r1, #22
 800aaca:	1c18      	adds	r0, r3, #0
 800aacc:	f7f5 fef8 	bl	80008c0 <__aeabi_fadd>
 800aad0:	1c03      	adds	r3, r0, #0
 800aad2:	1c19      	adds	r1, r3, #0
 800aad4:	1c20      	adds	r0, r4, #0
 800aad6:	f7f6 f87d 	bl	8000bd4 <__aeabi_fdiv>
 800aada:	1c03      	adds	r3, r0, #0
 800aadc:	68f9      	ldr	r1, [r7, #12]
 800aade:	1c18      	adds	r0, r3, #0
 800aae0:	f7f6 fb9c 	bl	800121c <__aeabi_fsub>
 800aae4:	1c03      	adds	r3, r0, #0
 800aae6:	e01f      	b.n	800ab28 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2188      	movs	r1, #136	@ 0x88
 800aaf0:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800aaf2:	1c19      	adds	r1, r3, #0
 800aaf4:	1c10      	adds	r0, r2, #0
 800aaf6:	f7f6 f86d 	bl	8000bd4 <__aeabi_fdiv>
 800aafa:	1c03      	adds	r3, r0, #0
 800aafc:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	1c18      	adds	r0, r3, #0
 800ab02:	f017 fa6b 	bl	8021fdc <expf>
 800ab06:	1c03      	adds	r3, r0, #0
 800ab08:	21fe      	movs	r1, #254	@ 0xfe
 800ab0a:	0589      	lsls	r1, r1, #22
 800ab0c:	1c18      	adds	r0, r3, #0
 800ab0e:	f7f5 fed7 	bl	80008c0 <__aeabi_fadd>
 800ab12:	1c03      	adds	r3, r0, #0
 800ab14:	1c19      	adds	r1, r3, #0
 800ab16:	4807      	ldr	r0, [pc, #28]	@ (800ab34 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800ab18:	f7f6 f85c 	bl	8000bd4 <__aeabi_fdiv>
 800ab1c:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800ab1e:	1c19      	adds	r1, r3, #0
 800ab20:	1c20      	adds	r0, r4, #0
 800ab22:	f7f6 fa3d 	bl	8000fa0 <__aeabi_fmul>
 800ab26:	1c03      	adds	r3, r0, #0
        }
    }
}
 800ab28:	1c18      	adds	r0, r3, #0
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	b005      	add	sp, #20
 800ab2e:	bd90      	pop	{r4, r7, pc}
 800ab30:	c2480000 	.word	0xc2480000
 800ab34:	43fa0000 	.word	0x43fa0000
 800ab38:	42480000 	.word	0x42480000
 800ab3c:	3f8041ab 	.word	0x3f8041ab
 800ab40:	40a00000 	.word	0x40a00000

0800ab44 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800ab44:	b590      	push	{r4, r7, lr}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	4913      	ldr	r1, [pc, #76]	@ (800aba4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800ab56:	1c18      	adds	r0, r3, #0
 800ab58:	f7f5 feb2 	bl	80008c0 <__aeabi_fadd>
 800ab5c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800ab5e:	1c19      	adds	r1, r3, #0
 800ab60:	1c20      	adds	r0, r4, #0
 800ab62:	f7f6 f837 	bl	8000bd4 <__aeabi_fdiv>
 800ab66:	1c03      	adds	r3, r0, #0
 800ab68:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	228c      	movs	r2, #140	@ 0x8c
 800ab6e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	490b      	ldr	r1, [pc, #44]	@ (800aba8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800ab7a:	1c18      	adds	r0, r3, #0
 800ab7c:	f7f5 fea0 	bl	80008c0 <__aeabi_fadd>
 800ab80:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800ab82:	1c19      	adds	r1, r3, #0
 800ab84:	1c20      	adds	r0, r4, #0
 800ab86:	f7f6 f825 	bl	8000bd4 <__aeabi_fdiv>
 800ab8a:	1c03      	adds	r3, r0, #0
 800ab8c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2290      	movs	r2, #144	@ 0x90
 800ab92:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2294      	movs	r2, #148	@ 0x94
 800ab98:	2100      	movs	r1, #0
 800ab9a:	5499      	strb	r1, [r3, r2]
}
 800ab9c:	46c0      	nop			@ (mov r8, r8)
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	b003      	add	sp, #12
 800aba2:	bd90      	pop	{r4, r7, pc}
 800aba4:	41a00000 	.word	0x41a00000
 800aba8:	43fa0000 	.word	0x43fa0000

0800abac <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800abac:	b590      	push	{r4, r7, lr}
 800abae:	b087      	sub	sp, #28
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2294      	movs	r2, #148	@ 0x94
 800abba:	5c9b      	ldrb	r3, [r3, r2]
 800abbc:	2201      	movs	r2, #1
 800abbe:	4053      	eors	r3, r2
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00f      	beq.n	800abe6 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2198      	movs	r1, #152	@ 0x98
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	219c      	movs	r1, #156	@ 0x9c
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	21a0      	movs	r1, #160	@ 0xa0
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2294      	movs	r2, #148	@ 0x94
 800abe2:	2101      	movs	r1, #1
 800abe4:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	228c      	movs	r2, #140	@ 0x8c
 800abea:	589b      	ldr	r3, [r3, r2]
 800abec:	1c19      	adds	r1, r3, #0
 800abee:	20fe      	movs	r0, #254	@ 0xfe
 800abf0:	0580      	lsls	r0, r0, #22
 800abf2:	f7f6 fb13 	bl	800121c <__aeabi_fsub>
 800abf6:	1c03      	adds	r3, r0, #0
 800abf8:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2298      	movs	r2, #152	@ 0x98
 800abfe:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800ac00:	1c19      	adds	r1, r3, #0
 800ac02:	f7f6 f9cd 	bl	8000fa0 <__aeabi_fmul>
 800ac06:	1c03      	adds	r3, r0, #0
 800ac08:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	228c      	movs	r2, #140	@ 0x8c
 800ac0e:	589b      	ldr	r3, [r3, r2]
 800ac10:	6839      	ldr	r1, [r7, #0]
 800ac12:	1c18      	adds	r0, r3, #0
 800ac14:	f7f6 f9c4 	bl	8000fa0 <__aeabi_fmul>
 800ac18:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800ac1a:	1c19      	adds	r1, r3, #0
 800ac1c:	1c20      	adds	r0, r4, #0
 800ac1e:	f7f5 fe4f 	bl	80008c0 <__aeabi_fadd>
 800ac22:	1c03      	adds	r3, r0, #0
 800ac24:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2298      	movs	r2, #152	@ 0x98
 800ac2a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2290      	movs	r2, #144	@ 0x90
 800ac30:	589b      	ldr	r3, [r3, r2]
 800ac32:	1c19      	adds	r1, r3, #0
 800ac34:	20fe      	movs	r0, #254	@ 0xfe
 800ac36:	0580      	lsls	r0, r0, #22
 800ac38:	f7f6 faf0 	bl	800121c <__aeabi_fsub>
 800ac3c:	1c03      	adds	r3, r0, #0
 800ac3e:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	229c      	movs	r2, #156	@ 0x9c
 800ac44:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800ac46:	1c19      	adds	r1, r3, #0
 800ac48:	f7f6 f9aa 	bl	8000fa0 <__aeabi_fmul>
 800ac4c:	1c03      	adds	r3, r0, #0
 800ac4e:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2290      	movs	r2, #144	@ 0x90
 800ac54:	589b      	ldr	r3, [r3, r2]
 800ac56:	6839      	ldr	r1, [r7, #0]
 800ac58:	1c18      	adds	r0, r3, #0
 800ac5a:	f7f6 f9a1 	bl	8000fa0 <__aeabi_fmul>
 800ac5e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800ac60:	1c19      	adds	r1, r3, #0
 800ac62:	1c20      	adds	r0, r4, #0
 800ac64:	f7f5 fe2c 	bl	80008c0 <__aeabi_fadd>
 800ac68:	1c03      	adds	r3, r0, #0
 800ac6a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	229c      	movs	r2, #156	@ 0x9c
 800ac70:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2298      	movs	r2, #152	@ 0x98
 800ac76:	589a      	ldr	r2, [r3, r2]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	219c      	movs	r1, #156	@ 0x9c
 800ac7c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800ac7e:	1c19      	adds	r1, r3, #0
 800ac80:	1c10      	adds	r0, r2, #0
 800ac82:	f7f6 facb 	bl	800121c <__aeabi_fsub>
 800ac86:	1c03      	adds	r3, r0, #0
 800ac88:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	6978      	ldr	r0, [r7, #20]
 800ac8e:	f7f5 fc4f 	bl	8000530 <__aeabi_fcmplt>
 800ac92:	1e03      	subs	r3, r0, #0
 800ac94:	d004      	beq.n	800aca0 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	2280      	movs	r2, #128	@ 0x80
 800ac9a:	0612      	lsls	r2, r2, #24
 800ac9c:	4053      	eors	r3, r2
 800ac9e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800aca0:	4923      	ldr	r1, [pc, #140]	@ (800ad30 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800aca2:	6978      	ldr	r0, [r7, #20]
 800aca4:	f7f6 f97c 	bl	8000fa0 <__aeabi_fmul>
 800aca8:	1c03      	adds	r3, r0, #0
 800acaa:	1c18      	adds	r0, r3, #0
 800acac:	f017 f996 	bl	8021fdc <expf>
 800acb0:	1c03      	adds	r3, r0, #0
 800acb2:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800acb4:	491f      	ldr	r1, [pc, #124]	@ (800ad34 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800acb6:	6938      	ldr	r0, [r7, #16]
 800acb8:	f7f6 f972 	bl	8000fa0 <__aeabi_fmul>
 800acbc:	1c03      	adds	r3, r0, #0
 800acbe:	491e      	ldr	r1, [pc, #120]	@ (800ad38 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800acc0:	1c18      	adds	r0, r3, #0
 800acc2:	f7f5 fdfd 	bl	80008c0 <__aeabi_fadd>
 800acc6:	1c03      	adds	r3, r0, #0
 800acc8:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	685c      	ldr	r4, [r3, #4]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	68f9      	ldr	r1, [r7, #12]
 800acd4:	1c18      	adds	r0, r3, #0
 800acd6:	f7f5 fdf3 	bl	80008c0 <__aeabi_fadd>
 800acda:	1c03      	adds	r3, r0, #0
 800acdc:	1c19      	adds	r1, r3, #0
 800acde:	1c20      	adds	r0, r4, #0
 800ace0:	f7f5 ff78 	bl	8000bd4 <__aeabi_fdiv>
 800ace4:	1c03      	adds	r3, r0, #0
 800ace6:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800ace8:	68b9      	ldr	r1, [r7, #8]
 800acea:	20fe      	movs	r0, #254	@ 0xfe
 800acec:	0580      	lsls	r0, r0, #22
 800acee:	f7f6 fa95 	bl	800121c <__aeabi_fsub>
 800acf2:	1c03      	adds	r3, r0, #0
 800acf4:	1c18      	adds	r0, r3, #0
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	22a0      	movs	r2, #160	@ 0xa0
 800acfa:	589b      	ldr	r3, [r3, r2]
 800acfc:	1c19      	adds	r1, r3, #0
 800acfe:	f7f6 f94f 	bl	8000fa0 <__aeabi_fmul>
 800ad02:	1c03      	adds	r3, r0, #0
 800ad04:	1c1c      	adds	r4, r3, #0
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	68b8      	ldr	r0, [r7, #8]
 800ad0a:	f7f6 f949 	bl	8000fa0 <__aeabi_fmul>
 800ad0e:	1c03      	adds	r3, r0, #0
 800ad10:	1c19      	adds	r1, r3, #0
 800ad12:	1c20      	adds	r0, r4, #0
 800ad14:	f7f5 fdd4 	bl	80008c0 <__aeabi_fadd>
 800ad18:	1c03      	adds	r3, r0, #0
 800ad1a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	22a0      	movs	r2, #160	@ 0xa0
 800ad20:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	22a0      	movs	r2, #160	@ 0xa0
 800ad26:	589b      	ldr	r3, [r3, r2]
}
 800ad28:	1c18      	adds	r0, r3, #0
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	b007      	add	sp, #28
 800ad2e:	bd90      	pop	{r4, r7, pc}
 800ad30:	be4ccccd 	.word	0xbe4ccccd
 800ad34:	43f00000 	.word	0x43f00000
 800ad38:	41a00000 	.word	0x41a00000

0800ad3c <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	000a      	movs	r2, r1
 800ad46:	1cbb      	adds	r3, r7, #2
 800ad48:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800ad4a:	230d      	movs	r3, #13
 800ad4c:	18fb      	adds	r3, r7, r3
 800ad4e:	22ff      	movs	r2, #255	@ 0xff
 800ad50:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800ad52:	230e      	movs	r3, #14
 800ad54:	18fb      	adds	r3, r7, r3
 800ad56:	2200      	movs	r2, #0
 800ad58:	801a      	strh	r2, [r3, #0]
 800ad5a:	e037      	b.n	800adcc <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800ad5c:	230e      	movs	r3, #14
 800ad5e:	18fb      	adds	r3, r7, r3
 800ad60:	881b      	ldrh	r3, [r3, #0]
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	18d3      	adds	r3, r2, r3
 800ad66:	7819      	ldrb	r1, [r3, #0]
 800ad68:	220d      	movs	r2, #13
 800ad6a:	18bb      	adds	r3, r7, r2
 800ad6c:	18ba      	adds	r2, r7, r2
 800ad6e:	7812      	ldrb	r2, [r2, #0]
 800ad70:	404a      	eors	r2, r1
 800ad72:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800ad74:	230c      	movs	r3, #12
 800ad76:	18fb      	adds	r3, r7, r3
 800ad78:	2208      	movs	r2, #8
 800ad7a:	701a      	strb	r2, [r3, #0]
 800ad7c:	e01b      	b.n	800adb6 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800ad7e:	210d      	movs	r1, #13
 800ad80:	187b      	adds	r3, r7, r1
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	b25b      	sxtb	r3, r3
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	da09      	bge.n	800ad9e <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800ad8a:	187b      	adds	r3, r7, r1
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	005b      	lsls	r3, r3, #1
 800ad90:	b25b      	sxtb	r3, r3
 800ad92:	2231      	movs	r2, #49	@ 0x31
 800ad94:	4053      	eors	r3, r2
 800ad96:	b25a      	sxtb	r2, r3
 800ad98:	187b      	adds	r3, r7, r1
 800ad9a:	701a      	strb	r2, [r3, #0]
 800ad9c:	e005      	b.n	800adaa <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800ad9e:	230d      	movs	r3, #13
 800ada0:	18fa      	adds	r2, r7, r3
 800ada2:	18fb      	adds	r3, r7, r3
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	18db      	adds	r3, r3, r3
 800ada8:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800adaa:	220c      	movs	r2, #12
 800adac:	18bb      	adds	r3, r7, r2
 800adae:	18ba      	adds	r2, r7, r2
 800adb0:	7812      	ldrb	r2, [r2, #0]
 800adb2:	3a01      	subs	r2, #1
 800adb4:	701a      	strb	r2, [r3, #0]
 800adb6:	230c      	movs	r3, #12
 800adb8:	18fb      	adds	r3, r7, r3
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1de      	bne.n	800ad7e <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800adc0:	220e      	movs	r2, #14
 800adc2:	18bb      	adds	r3, r7, r2
 800adc4:	18ba      	adds	r2, r7, r2
 800adc6:	8812      	ldrh	r2, [r2, #0]
 800adc8:	3201      	adds	r2, #1
 800adca:	801a      	strh	r2, [r3, #0]
 800adcc:	230e      	movs	r3, #14
 800adce:	18fa      	adds	r2, r7, r3
 800add0:	1cbb      	adds	r3, r7, #2
 800add2:	8812      	ldrh	r2, [r2, #0]
 800add4:	881b      	ldrh	r3, [r3, #0]
 800add6:	429a      	cmp	r2, r3
 800add8:	d3c0      	bcc.n	800ad5c <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800adda:	230d      	movs	r3, #13
 800addc:	18fb      	adds	r3, r7, r3
 800adde:	781b      	ldrb	r3, [r3, #0]
}
 800ade0:	0018      	movs	r0, r3
 800ade2:	46bd      	mov	sp, r7
 800ade4:	b004      	add	sp, #16
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800ade8:	b580      	push	{r7, lr}
 800adea:	b082      	sub	sp, #8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	0008      	movs	r0, r1
 800adf2:	0011      	movs	r1, r2
 800adf4:	1cbb      	adds	r3, r7, #2
 800adf6:	1c02      	adds	r2, r0, #0
 800adf8:	801a      	strh	r2, [r3, #0]
 800adfa:	1c7b      	adds	r3, r7, #1
 800adfc:	1c0a      	adds	r2, r1, #0
 800adfe:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800ae00:	1cbb      	adds	r3, r7, #2
 800ae02:	881a      	ldrh	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	0011      	movs	r1, r2
 800ae08:	0018      	movs	r0, r3
 800ae0a:	f7ff ff97 	bl	800ad3c <sensirion_i2c_generate_crc>
 800ae0e:	0003      	movs	r3, r0
 800ae10:	001a      	movs	r2, r3
 800ae12:	1c7b      	adds	r3, r7, #1
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d001      	beq.n	800ae1e <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e000      	b.n	800ae20 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	0018      	movs	r0, r3
 800ae22:	46bd      	mov	sp, r7
 800ae24:	b002      	add	sp, #8
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	0008      	movs	r0, r1
 800ae32:	0011      	movs	r1, r2
 800ae34:	1cbb      	adds	r3, r7, #2
 800ae36:	1c02      	adds	r2, r0, #0
 800ae38:	801a      	strh	r2, [r3, #0]
 800ae3a:	003b      	movs	r3, r7
 800ae3c:	1c0a      	adds	r2, r1, #0
 800ae3e:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800ae40:	003b      	movs	r3, r7
 800ae42:	881b      	ldrh	r3, [r3, #0]
 800ae44:	0a1b      	lsrs	r3, r3, #8
 800ae46:	b299      	uxth	r1, r3
 800ae48:	1cbb      	adds	r3, r7, #2
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	1cba      	adds	r2, r7, #2
 800ae4e:	1c58      	adds	r0, r3, #1
 800ae50:	8010      	strh	r0, [r2, #0]
 800ae52:	001a      	movs	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	189b      	adds	r3, r3, r2
 800ae58:	b2ca      	uxtb	r2, r1
 800ae5a:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800ae5c:	1cbb      	adds	r3, r7, #2
 800ae5e:	881b      	ldrh	r3, [r3, #0]
 800ae60:	1cba      	adds	r2, r7, #2
 800ae62:	1c59      	adds	r1, r3, #1
 800ae64:	8011      	strh	r1, [r2, #0]
 800ae66:	001a      	movs	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	189b      	adds	r3, r3, r2
 800ae6c:	003a      	movs	r2, r7
 800ae6e:	8812      	ldrh	r2, [r2, #0]
 800ae70:	b2d2      	uxtb	r2, r2
 800ae72:	701a      	strb	r2, [r3, #0]
    return offset;
 800ae74:	1cbb      	adds	r3, r7, #2
 800ae76:	881b      	ldrh	r3, [r3, #0]
}
 800ae78:	0018      	movs	r0, r3
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	b002      	add	sp, #8
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800ae80:	b590      	push	{r4, r7, lr}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	0008      	movs	r0, r1
 800ae8a:	0011      	movs	r1, r2
 800ae8c:	1cbb      	adds	r3, r7, #2
 800ae8e:	1c02      	adds	r2, r0, #0
 800ae90:	801a      	strh	r2, [r3, #0]
 800ae92:	003b      	movs	r3, r7
 800ae94:	1c0a      	adds	r2, r1, #0
 800ae96:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800ae98:	003b      	movs	r3, r7
 800ae9a:	881b      	ldrh	r3, [r3, #0]
 800ae9c:	0a1b      	lsrs	r3, r3, #8
 800ae9e:	b299      	uxth	r1, r3
 800aea0:	1cbb      	adds	r3, r7, #2
 800aea2:	881b      	ldrh	r3, [r3, #0]
 800aea4:	1cba      	adds	r2, r7, #2
 800aea6:	1c58      	adds	r0, r3, #1
 800aea8:	8010      	strh	r0, [r2, #0]
 800aeaa:	001a      	movs	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	189b      	adds	r3, r3, r2
 800aeb0:	b2ca      	uxtb	r2, r1
 800aeb2:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800aeb4:	1cbb      	adds	r3, r7, #2
 800aeb6:	881b      	ldrh	r3, [r3, #0]
 800aeb8:	1cba      	adds	r2, r7, #2
 800aeba:	1c59      	adds	r1, r3, #1
 800aebc:	8011      	strh	r1, [r2, #0]
 800aebe:	001a      	movs	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	189b      	adds	r3, r3, r2
 800aec4:	003a      	movs	r2, r7
 800aec6:	8812      	ldrh	r2, [r2, #0]
 800aec8:	b2d2      	uxtb	r2, r2
 800aeca:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800aecc:	1cbb      	adds	r3, r7, #2
 800aece:	881b      	ldrh	r3, [r3, #0]
 800aed0:	3b02      	subs	r3, #2
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800aed6:	1cbb      	adds	r3, r7, #2
 800aed8:	881b      	ldrh	r3, [r3, #0]
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	18d4      	adds	r4, r2, r3
 800aede:	2102      	movs	r1, #2
 800aee0:	f7ff ff2c 	bl	800ad3c <sensirion_i2c_generate_crc>
 800aee4:	0003      	movs	r3, r0
 800aee6:	7023      	strb	r3, [r4, #0]
    offset++;
 800aee8:	1cbb      	adds	r3, r7, #2
 800aeea:	881a      	ldrh	r2, [r3, #0]
 800aeec:	1cbb      	adds	r3, r7, #2
 800aeee:	3201      	adds	r2, #1
 800aef0:	801a      	strh	r2, [r3, #0]

    return offset;
 800aef2:	1cbb      	adds	r3, r7, #2
 800aef4:	881b      	ldrh	r3, [r3, #0]
}
 800aef6:	0018      	movs	r0, r3
 800aef8:	46bd      	mov	sp, r7
 800aefa:	b003      	add	sp, #12
 800aefc:	bd90      	pop	{r4, r7, pc}

0800aefe <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800aefe:	b580      	push	{r7, lr}
 800af00:	b082      	sub	sp, #8
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	0008      	movs	r0, r1
 800af08:	0011      	movs	r1, r2
 800af0a:	1cbb      	adds	r3, r7, #2
 800af0c:	1c02      	adds	r2, r0, #0
 800af0e:	801a      	strh	r2, [r3, #0]
 800af10:	003b      	movs	r3, r7
 800af12:	1c0a      	adds	r2, r1, #0
 800af14:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800af16:	003b      	movs	r3, r7
 800af18:	881a      	ldrh	r2, [r3, #0]
 800af1a:	1cbb      	adds	r3, r7, #2
 800af1c:	8819      	ldrh	r1, [r3, #0]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	0018      	movs	r0, r3
 800af22:	f7ff ffad 	bl	800ae80 <sensirion_i2c_add_uint16_t_to_buffer>
 800af26:	0003      	movs	r3, r0
}
 800af28:	0018      	movs	r0, r3
 800af2a:	46bd      	mov	sp, r7
 800af2c:	b002      	add	sp, #8
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6039      	str	r1, [r7, #0]
 800af38:	0011      	movs	r1, r2
 800af3a:	1dfb      	adds	r3, r7, #7
 800af3c:	1c02      	adds	r2, r0, #0
 800af3e:	701a      	strb	r2, [r3, #0]
 800af40:	1d3b      	adds	r3, r7, #4
 800af42:	1c0a      	adds	r2, r1, #0
 800af44:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800af46:	1d3b      	adds	r3, r7, #4
 800af48:	881a      	ldrh	r2, [r3, #0]
 800af4a:	6839      	ldr	r1, [r7, #0]
 800af4c:	1dfb      	adds	r3, r7, #7
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	0018      	movs	r0, r3
 800af52:	f7fe fa55 	bl	8009400 <sensirion_i2c_hal_write>
 800af56:	0003      	movs	r3, r0
}
 800af58:	0018      	movs	r0, r3
 800af5a:	46bd      	mov	sp, r7
 800af5c:	b002      	add	sp, #8
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800af60:	b5b0      	push	{r4, r5, r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6039      	str	r1, [r7, #0]
 800af68:	0011      	movs	r1, r2
 800af6a:	1dfb      	adds	r3, r7, #7
 800af6c:	1c02      	adds	r2, r0, #0
 800af6e:	701a      	strb	r2, [r3, #0]
 800af70:	1d3b      	adds	r3, r7, #4
 800af72:	1c0a      	adds	r2, r1, #0
 800af74:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800af76:	1d3b      	adds	r3, r7, #4
 800af78:	881b      	ldrh	r3, [r3, #0]
 800af7a:	085b      	lsrs	r3, r3, #1
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	220a      	movs	r2, #10
 800af80:	18ba      	adds	r2, r7, r2
 800af82:	1c19      	adds	r1, r3, #0
 800af84:	1c0b      	adds	r3, r1, #0
 800af86:	18db      	adds	r3, r3, r3
 800af88:	185b      	adds	r3, r3, r1
 800af8a:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800af8c:	1d3b      	adds	r3, r7, #4
 800af8e:	881b      	ldrh	r3, [r3, #0]
 800af90:	2201      	movs	r2, #1
 800af92:	4013      	ands	r3, r2
 800af94:	b29b      	uxth	r3, r3
 800af96:	2b00      	cmp	r3, #0
 800af98:	d001      	beq.n	800af9e <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800af9a:	2304      	movs	r3, #4
 800af9c:	e06b      	b.n	800b076 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800af9e:	230a      	movs	r3, #10
 800afa0:	18fb      	adds	r3, r7, r3
 800afa2:	881a      	ldrh	r2, [r3, #0]
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	1dfb      	adds	r3, r7, #7
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	0018      	movs	r0, r3
 800afac:	f7fe fa08 	bl	80093c0 <sensirion_i2c_hal_read>
 800afb0:	0003      	movs	r3, r0
 800afb2:	001a      	movs	r2, r3
 800afb4:	2108      	movs	r1, #8
 800afb6:	187b      	adds	r3, r7, r1
 800afb8:	801a      	strh	r2, [r3, #0]
    if (error) {
 800afba:	000a      	movs	r2, r1
 800afbc:	18bb      	adds	r3, r7, r2
 800afbe:	2100      	movs	r1, #0
 800afc0:	5e5b      	ldrsh	r3, [r3, r1]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d003      	beq.n	800afce <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800afc6:	18bb      	adds	r3, r7, r2
 800afc8:	2200      	movs	r2, #0
 800afca:	5e9b      	ldrsh	r3, [r3, r2]
 800afcc:	e053      	b.n	800b076 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800afce:	230e      	movs	r3, #14
 800afd0:	18fb      	adds	r3, r7, r3
 800afd2:	2200      	movs	r2, #0
 800afd4:	801a      	strh	r2, [r3, #0]
 800afd6:	230c      	movs	r3, #12
 800afd8:	18fb      	adds	r3, r7, r3
 800afda:	2200      	movs	r2, #0
 800afdc:	801a      	strh	r2, [r3, #0]
 800afde:	e041      	b.n	800b064 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800afe0:	210e      	movs	r1, #14
 800afe2:	187b      	adds	r3, r7, r1
 800afe4:	881b      	ldrh	r3, [r3, #0]
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800afea:	187b      	adds	r3, r7, r1
 800afec:	881b      	ldrh	r3, [r3, #0]
 800afee:	3302      	adds	r3, #2
 800aff0:	683a      	ldr	r2, [r7, #0]
 800aff2:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	001a      	movs	r2, r3
 800aff8:	2102      	movs	r1, #2
 800affa:	f7ff fef5 	bl	800ade8 <sensirion_i2c_check_crc>
 800affe:	0003      	movs	r3, r0
 800b000:	001a      	movs	r2, r3
 800b002:	2108      	movs	r1, #8
 800b004:	187b      	adds	r3, r7, r1
 800b006:	801a      	strh	r2, [r3, #0]
        if (error) {
 800b008:	000a      	movs	r2, r1
 800b00a:	18bb      	adds	r3, r7, r2
 800b00c:	2100      	movs	r1, #0
 800b00e:	5e5b      	ldrsh	r3, [r3, r1]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d003      	beq.n	800b01c <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800b014:	18bb      	adds	r3, r7, r2
 800b016:	2200      	movs	r2, #0
 800b018:	5e9b      	ldrsh	r3, [r3, r2]
 800b01a:	e02c      	b.n	800b076 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800b01c:	240e      	movs	r4, #14
 800b01e:	193b      	adds	r3, r7, r4
 800b020:	881b      	ldrh	r3, [r3, #0]
 800b022:	683a      	ldr	r2, [r7, #0]
 800b024:	18d2      	adds	r2, r2, r3
 800b026:	250c      	movs	r5, #12
 800b028:	197b      	adds	r3, r7, r5
 800b02a:	881b      	ldrh	r3, [r3, #0]
 800b02c:	1979      	adds	r1, r7, r5
 800b02e:	1c58      	adds	r0, r3, #1
 800b030:	8008      	strh	r0, [r1, #0]
 800b032:	0019      	movs	r1, r3
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	185b      	adds	r3, r3, r1
 800b038:	7812      	ldrb	r2, [r2, #0]
 800b03a:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800b03c:	193b      	adds	r3, r7, r4
 800b03e:	881b      	ldrh	r3, [r3, #0]
 800b040:	3301      	adds	r3, #1
 800b042:	683a      	ldr	r2, [r7, #0]
 800b044:	18d2      	adds	r2, r2, r3
 800b046:	197b      	adds	r3, r7, r5
 800b048:	881b      	ldrh	r3, [r3, #0]
 800b04a:	1979      	adds	r1, r7, r5
 800b04c:	1c58      	adds	r0, r3, #1
 800b04e:	8008      	strh	r0, [r1, #0]
 800b050:	0019      	movs	r1, r3
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	185b      	adds	r3, r3, r1
 800b056:	7812      	ldrb	r2, [r2, #0]
 800b058:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b05a:	193b      	adds	r3, r7, r4
 800b05c:	193a      	adds	r2, r7, r4
 800b05e:	8812      	ldrh	r2, [r2, #0]
 800b060:	3203      	adds	r2, #3
 800b062:	801a      	strh	r2, [r3, #0]
 800b064:	230e      	movs	r3, #14
 800b066:	18fa      	adds	r2, r7, r3
 800b068:	230a      	movs	r3, #10
 800b06a:	18fb      	adds	r3, r7, r3
 800b06c:	8812      	ldrh	r2, [r2, #0]
 800b06e:	881b      	ldrh	r3, [r3, #0]
 800b070:	429a      	cmp	r2, r3
 800b072:	d3b5      	bcc.n	800afe0 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800b074:	2300      	movs	r3, #0
}
 800b076:	0018      	movs	r0, r3
 800b078:	46bd      	mov	sp, r7
 800b07a:	b004      	add	sp, #16
 800b07c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b080 <ReadRegister>:

//void forceVOCstart(void) {
//  SGP_MeasurementDutyCycle = HAL_GetTick() + 500;
//}

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b080:	b590      	push	{r4, r7, lr}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6039      	str	r1, [r7, #0]
 800b088:	0011      	movs	r1, r2
 800b08a:	1dfb      	adds	r3, r7, #7
 800b08c:	1c02      	adds	r2, r0, #0
 800b08e:	701a      	strb	r2, [r3, #0]
 800b090:	1dbb      	adds	r3, r7, #6
 800b092:	1c0a      	adds	r2, r1, #0
 800b094:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800b096:	4b08      	ldr	r3, [pc, #32]	@ (800b0b8 <ReadRegister+0x38>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d008      	beq.n	800b0b0 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800b09e:	4b06      	ldr	r3, [pc, #24]	@ (800b0b8 <ReadRegister+0x38>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	1dba      	adds	r2, r7, #6
 800b0a4:	7814      	ldrb	r4, [r2, #0]
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	1dfa      	adds	r2, r7, #7
 800b0aa:	7810      	ldrb	r0, [r2, #0]
 800b0ac:	0022      	movs	r2, r4
 800b0ae:	4798      	blx	r3
  }
}
 800b0b0:	46c0      	nop			@ (mov r8, r8)
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	b003      	add	sp, #12
 800b0b6:	bd90      	pop	{r4, r7, pc}
 800b0b8:	2000122c 	.word	0x2000122c

0800b0bc <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b0bc:	b590      	push	{r4, r7, lr}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6039      	str	r1, [r7, #0]
 800b0c4:	0011      	movs	r1, r2
 800b0c6:	1dfb      	adds	r3, r7, #7
 800b0c8:	1c02      	adds	r2, r0, #0
 800b0ca:	701a      	strb	r2, [r3, #0]
 800b0cc:	1dbb      	adds	r3, r7, #6
 800b0ce:	1c0a      	adds	r2, r1, #0
 800b0d0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b0d2:	4b08      	ldr	r3, [pc, #32]	@ (800b0f4 <WriteRegister+0x38>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d008      	beq.n	800b0ec <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800b0da:	4b06      	ldr	r3, [pc, #24]	@ (800b0f4 <WriteRegister+0x38>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	1dba      	adds	r2, r7, #6
 800b0e0:	7814      	ldrb	r4, [r2, #0]
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	1dfa      	adds	r2, r7, #7
 800b0e6:	7810      	ldrb	r0, [r2, #0]
 800b0e8:	0022      	movs	r2, r4
 800b0ea:	4798      	blx	r3
  }
}
 800b0ec:	46c0      	nop			@ (mov r8, r8)
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	b003      	add	sp, #12
 800b0f2:	bd90      	pop	{r4, r7, pc}
 800b0f4:	20001230 	.word	0x20001230

0800b0f8 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800b102:	4b07      	ldr	r3, [pc, #28]	@ (800b120 <SGP_Init+0x28>)
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b108:	4b06      	ldr	r3, [pc, #24]	@ (800b124 <SGP_Init+0x2c>)
 800b10a:	683a      	ldr	r2, [r7, #0]
 800b10c:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800b10e:	4b06      	ldr	r3, [pc, #24]	@ (800b128 <SGP_Init+0x30>)
 800b110:	2100      	movs	r1, #0
 800b112:	0018      	movs	r0, r3
 800b114:	f7fe ff8c 	bl	800a030 <GasIndexAlgorithm_init>
}
 800b118:	46c0      	nop			@ (mov r8, r8)
 800b11a:	46bd      	mov	sp, r7
 800b11c:	b002      	add	sp, #8
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	2000122c 	.word	0x2000122c
 800b124:	20001230 	.word	0x20001230
 800b128:	20001240 	.word	0x20001240

0800b12c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800b12c:	b580      	push	{r7, lr}
 800b12e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800b130:	4b13      	ldr	r3, [pc, #76]	@ (800b180 <SGP_StartMeasurement+0x54>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00d      	beq.n	800b154 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b138:	4b12      	ldr	r3, [pc, #72]	@ (800b184 <SGP_StartMeasurement+0x58>)
 800b13a:	2208      	movs	r2, #8
 800b13c:	0019      	movs	r1, r3
 800b13e:	2059      	movs	r0, #89	@ 0x59
 800b140:	f7ff ffbc 	bl	800b0bc <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800b144:	f002 fc80 	bl	800da48 <GetCurrentHalTicks>
 800b148:	0003      	movs	r3, r0
 800b14a:	331e      	adds	r3, #30
 800b14c:	001a      	movs	r2, r3
 800b14e:	4b0e      	ldr	r3, [pc, #56]	@ (800b188 <SGP_StartMeasurement+0x5c>)
 800b150:	601a      	str	r2, [r3, #0]
 800b152:	e00c      	b.n	800b16e <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b154:	4b0d      	ldr	r3, [pc, #52]	@ (800b18c <SGP_StartMeasurement+0x60>)
 800b156:	2208      	movs	r2, #8
 800b158:	0019      	movs	r1, r3
 800b15a:	2059      	movs	r0, #89	@ 0x59
 800b15c:	f7ff ffae 	bl	800b0bc <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 800b160:	f002 fc72 	bl	800da48 <GetCurrentHalTicks>
 800b164:	0003      	movs	r3, r0
 800b166:	33aa      	adds	r3, #170	@ 0xaa
 800b168:	001a      	movs	r2, r3
 800b16a:	4b09      	ldr	r3, [pc, #36]	@ (800b190 <SGP_StartMeasurement+0x64>)
 800b16c:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800b16e:	4b09      	ldr	r3, [pc, #36]	@ (800b194 <SGP_StartMeasurement+0x68>)
 800b170:	2200      	movs	r2, #0
 800b172:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800b174:	4b08      	ldr	r3, [pc, #32]	@ (800b198 <SGP_StartMeasurement+0x6c>)
 800b176:	2200      	movs	r2, #0
 800b178:	701a      	strb	r2, [r3, #0]
}
 800b17a:	46c0      	nop			@ (mov r8, r8)
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	200012e8 	.word	0x200012e8
 800b184:	20000094 	.word	0x20000094
 800b188:	200000a8 	.word	0x200000a8
 800b18c:	2000008c 	.word	0x2000008c
 800b190:	200000a0 	.word	0x200000a0
 800b194:	2000123e 	.word	0x2000123e
 800b198:	2000123f 	.word	0x2000123f

0800b19c <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 800b19c:	b580      	push	{r7, lr}
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	4b04      	ldr	r3, [pc, #16]	@ (800b1b4 <SGP_HeatedUp+0x18>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	0018      	movs	r0, r3
 800b1a6:	f002 fb7f 	bl	800d8a8 <TimestampIsReached>
 800b1aa:	0003      	movs	r3, r0
 800b1ac:	0018      	movs	r0, r3
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	46c0      	nop			@ (mov r8, r8)
 800b1b4:	200000a0 	.word	0x200000a0

0800b1b8 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800b1bc:	4b04      	ldr	r3, [pc, #16]	@ (800b1d0 <SGP_MeasurementReady+0x18>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	0018      	movs	r0, r3
 800b1c2:	f002 fb71 	bl	800d8a8 <TimestampIsReached>
 800b1c6:	0003      	movs	r3, r0
}
 800b1c8:	0018      	movs	r0, r3
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	46c0      	nop			@ (mov r8, r8)
 800b1d0:	200000a8 	.word	0x200000a8

0800b1d4 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800b1d8:	4b04      	ldr	r3, [pc, #16]	@ (800b1ec <SGP_MeasurementDone+0x18>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	0018      	movs	r0, r3
 800b1de:	f002 fb63 	bl	800d8a8 <TimestampIsReached>
 800b1e2:	0003      	movs	r3, r0
}
 800b1e4:	0018      	movs	r0, r3
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	46c0      	nop			@ (mov r8, r8)
 800b1ec:	200000a4 	.word	0x200000a4

0800b1f0 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b1f4:	4b04      	ldr	r3, [pc, #16]	@ (800b208 <SGP_TurnHeaterOff+0x18>)
 800b1f6:	2202      	movs	r2, #2
 800b1f8:	0019      	movs	r1, r3
 800b1fa:	2059      	movs	r0, #89	@ 0x59
 800b1fc:	f7ff ff5e 	bl	800b0bc <WriteRegister>
}
 800b200:	46c0      	nop			@ (mov r8, r8)
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	46c0      	nop			@ (mov r8, r8)
 800b208:	20000084 	.word	0x20000084

0800b20c <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800b20c:	b5b0      	push	{r4, r5, r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af02      	add	r7, sp, #8
 800b212:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800b214:	f7ff ffc2 	bl	800b19c <SGP_HeatedUp>
 800b218:	1e03      	subs	r3, r0, #0
 800b21a:	d038      	beq.n	800b28e <SGP_GetMeasurementValues+0x82>
 800b21c:	4bcf      	ldr	r3, [pc, #828]	@ (800b55c <SGP_GetMeasurementValues+0x350>)
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	2201      	movs	r2, #1
 800b222:	4053      	eors	r3, r2
 800b224:	b2db      	uxtb	r3, r3
 800b226:	2b00      	cmp	r3, #0
 800b228:	d031      	beq.n	800b28e <SGP_GetMeasurementValues+0x82>
 800b22a:	4bcd      	ldr	r3, [pc, #820]	@ (800b560 <SGP_GetMeasurementValues+0x354>)
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	2201      	movs	r2, #1
 800b230:	4053      	eors	r3, r2
 800b232:	b2db      	uxtb	r3, r3
 800b234:	2b00      	cmp	r3, #0
 800b236:	d02a      	beq.n	800b28e <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up");
 800b238:	4aca      	ldr	r2, [pc, #808]	@ (800b564 <SGP_GetMeasurementValues+0x358>)
 800b23a:	4bcb      	ldr	r3, [pc, #812]	@ (800b568 <SGP_GetMeasurementValues+0x35c>)
 800b23c:	0019      	movs	r1, r3
 800b23e:	2003      	movs	r0, #3
 800b240:	f002 fb88 	bl	800d954 <CreateLine>
    HeatUpIsDone = true;
 800b244:	4bc5      	ldr	r3, [pc, #788]	@ (800b55c <SGP_GetMeasurementValues+0x350>)
 800b246:	2201      	movs	r2, #1
 800b248:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b24a:	4bc8      	ldr	r3, [pc, #800]	@ (800b56c <SGP_GetMeasurementValues+0x360>)
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00d      	beq.n	800b26e <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b252:	4bc7      	ldr	r3, [pc, #796]	@ (800b570 <SGP_GetMeasurementValues+0x364>)
 800b254:	2208      	movs	r2, #8
 800b256:	0019      	movs	r1, r3
 800b258:	2059      	movs	r0, #89	@ 0x59
 800b25a:	f7ff ff2f 	bl	800b0bc <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800b25e:	f002 fbf3 	bl	800da48 <GetCurrentHalTicks>
 800b262:	0003      	movs	r3, r0
 800b264:	331e      	adds	r3, #30
 800b266:	001a      	movs	r2, r3
 800b268:	4bc2      	ldr	r3, [pc, #776]	@ (800b574 <SGP_GetMeasurementValues+0x368>)
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	e00c      	b.n	800b288 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b26e:	4bc2      	ldr	r3, [pc, #776]	@ (800b578 <SGP_GetMeasurementValues+0x36c>)
 800b270:	2208      	movs	r2, #8
 800b272:	0019      	movs	r1, r3
 800b274:	2059      	movs	r0, #89	@ 0x59
 800b276:	f7ff ff21 	bl	800b0bc <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800b27a:	f002 fbe5 	bl	800da48 <GetCurrentHalTicks>
 800b27e:	0003      	movs	r3, r0
 800b280:	331e      	adds	r3, #30
 800b282:	001a      	movs	r2, r3
 800b284:	4bbb      	ldr	r3, [pc, #748]	@ (800b574 <SGP_GetMeasurementValues+0x368>)
 800b286:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800b288:	4bb5      	ldr	r3, [pc, #724]	@ (800b560 <SGP_GetMeasurementValues+0x354>)
 800b28a:	2201      	movs	r2, #1
 800b28c:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800b28e:	4bb3      	ldr	r3, [pc, #716]	@ (800b55c <SGP_GetMeasurementValues+0x350>)
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d100      	bne.n	800b298 <SGP_GetMeasurementValues+0x8c>
 800b296:	e199      	b.n	800b5cc <SGP_GetMeasurementValues+0x3c0>
 800b298:	f7ff ff8e 	bl	800b1b8 <SGP_MeasurementReady>
 800b29c:	1e03      	subs	r3, r0, #0
 800b29e:	d100      	bne.n	800b2a2 <SGP_GetMeasurementValues+0x96>
 800b2a0:	e194      	b.n	800b5cc <SGP_GetMeasurementValues+0x3c0>
 800b2a2:	4bb6      	ldr	r3, [pc, #728]	@ (800b57c <SGP_GetMeasurementValues+0x370>)
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	4053      	eors	r3, r2
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d100      	bne.n	800b2b2 <SGP_GetMeasurementValues+0xa6>
 800b2b0:	e18c      	b.n	800b5cc <SGP_GetMeasurementValues+0x3c0>
    Debug("SGP sample[%i] is ready", SGP_AmountOfSamplesDone + 1);
 800b2b2:	4bb3      	ldr	r3, [pc, #716]	@ (800b580 <SGP_GetMeasurementValues+0x374>)
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	4ab2      	ldr	r2, [pc, #712]	@ (800b584 <SGP_GetMeasurementValues+0x378>)
 800b2ba:	49ab      	ldr	r1, [pc, #684]	@ (800b568 <SGP_GetMeasurementValues+0x35c>)
 800b2bc:	2003      	movs	r0, #3
 800b2be:	f002 fb49 	bl	800d954 <CreateLine>
    MeasurementIsReady = true;
 800b2c2:	4bae      	ldr	r3, [pc, #696]	@ (800b57c <SGP_GetMeasurementValues+0x370>)
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800b2c8:	4baf      	ldr	r3, [pc, #700]	@ (800b588 <SGP_GetMeasurementValues+0x37c>)
 800b2ca:	2203      	movs	r2, #3
 800b2cc:	0019      	movs	r1, r3
 800b2ce:	2059      	movs	r0, #89	@ 0x59
 800b2d0:	f7ff fed6 	bl	800b080 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800b2d4:	4bac      	ldr	r3, [pc, #688]	@ (800b588 <SGP_GetMeasurementValues+0x37c>)
 800b2d6:	2203      	movs	r2, #3
 800b2d8:	2103      	movs	r1, #3
 800b2da:	0018      	movs	r0, r3
 800b2dc:	f000 f9dc 	bl	800b698 <CheckCRC>
 800b2e0:	0003      	movs	r3, r0
 800b2e2:	001a      	movs	r2, r3
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	4053      	eors	r3, r2
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d02a      	beq.n	800b344 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800b2ee:	4aa7      	ldr	r2, [pc, #668]	@ (800b58c <SGP_GetMeasurementValues+0x380>)
 800b2f0:	4ba7      	ldr	r3, [pc, #668]	@ (800b590 <SGP_GetMeasurementValues+0x384>)
 800b2f2:	0019      	movs	r1, r3
 800b2f4:	2001      	movs	r0, #1
 800b2f6:	f002 fb2d 	bl	800d954 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800b2fa:	4aa6      	ldr	r2, [pc, #664]	@ (800b594 <SGP_GetMeasurementValues+0x388>)
 800b2fc:	4ba6      	ldr	r3, [pc, #664]	@ (800b598 <SGP_GetMeasurementValues+0x38c>)
 800b2fe:	0019      	movs	r1, r3
 800b300:	2002      	movs	r0, #2
 800b302:	f002 fb27 	bl	800d954 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b306:	230f      	movs	r3, #15
 800b308:	18fb      	adds	r3, r7, r3
 800b30a:	2200      	movs	r2, #0
 800b30c:	701a      	strb	r2, [r3, #0]
 800b30e:	e012      	b.n	800b336 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800b310:	240f      	movs	r4, #15
 800b312:	193b      	adds	r3, r7, r4
 800b314:	7818      	ldrb	r0, [r3, #0]
 800b316:	193b      	adds	r3, r7, r4
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	4a9b      	ldr	r2, [pc, #620]	@ (800b588 <SGP_GetMeasurementValues+0x37c>)
 800b31c:	5cd3      	ldrb	r3, [r2, r3]
 800b31e:	4a9f      	ldr	r2, [pc, #636]	@ (800b59c <SGP_GetMeasurementValues+0x390>)
 800b320:	4991      	ldr	r1, [pc, #580]	@ (800b568 <SGP_GetMeasurementValues+0x35c>)
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	0003      	movs	r3, r0
 800b326:	2003      	movs	r0, #3
 800b328:	f002 fb14 	bl	800d954 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b32c:	193b      	adds	r3, r7, r4
 800b32e:	781a      	ldrb	r2, [r3, #0]
 800b330:	193b      	adds	r3, r7, r4
 800b332:	3201      	adds	r2, #1
 800b334:	701a      	strb	r2, [r3, #0]
 800b336:	230f      	movs	r3, #15
 800b338:	18fb      	adds	r3, r7, r3
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	2b02      	cmp	r3, #2
 800b33e:	d9e7      	bls.n	800b310 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 800b340:	2300      	movs	r3, #0
 800b342:	e15b      	b.n	800b5fc <SGP_GetMeasurementValues+0x3f0>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 800b344:	f002 fb80 	bl	800da48 <GetCurrentHalTicks>
 800b348:	0003      	movs	r3, r0
 800b34a:	22fa      	movs	r2, #250	@ 0xfa
 800b34c:	0092      	lsls	r2, r2, #2
 800b34e:	189a      	adds	r2, r3, r2
 800b350:	4b93      	ldr	r3, [pc, #588]	@ (800b5a0 <SGP_GetMeasurementValues+0x394>)
 800b352:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800b354:	f7ff ff4c 	bl	800b1f0 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800b358:	4b89      	ldr	r3, [pc, #548]	@ (800b580 <SGP_GetMeasurementValues+0x374>)
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	3301      	adds	r3, #1
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	4b87      	ldr	r3, [pc, #540]	@ (800b580 <SGP_GetMeasurementValues+0x374>)
 800b362:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800b364:	4b86      	ldr	r3, [pc, #536]	@ (800b580 <SGP_GetMeasurementValues+0x374>)
 800b366:	781a      	ldrb	r2, [r3, #0]
 800b368:	4b8e      	ldr	r3, [pc, #568]	@ (800b5a4 <SGP_GetMeasurementValues+0x398>)
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d200      	bcs.n	800b372 <SGP_GetMeasurementValues+0x166>
 800b370:	e12c      	b.n	800b5cc <SGP_GetMeasurementValues+0x3c0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800b372:	4b85      	ldr	r3, [pc, #532]	@ (800b588 <SGP_GetMeasurementValues+0x37c>)
 800b374:	785b      	ldrb	r3, [r3, #1]
 800b376:	021b      	lsls	r3, r3, #8
 800b378:	b21a      	sxth	r2, r3
 800b37a:	4b83      	ldr	r3, [pc, #524]	@ (800b588 <SGP_GetMeasurementValues+0x37c>)
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	b21b      	sxth	r3, r3
 800b380:	4313      	orrs	r3, r2
 800b382:	b21a      	sxth	r2, r3
 800b384:	240c      	movs	r4, #12
 800b386:	193b      	adds	r3, r7, r4
 800b388:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 800b38a:	193b      	adds	r3, r7, r4
 800b38c:	881b      	ldrh	r3, [r3, #0]
 800b38e:	4a86      	ldr	r2, [pc, #536]	@ (800b5a8 <SGP_GetMeasurementValues+0x39c>)
 800b390:	4975      	ldr	r1, [pc, #468]	@ (800b568 <SGP_GetMeasurementValues+0x35c>)
 800b392:	2003      	movs	r0, #3
 800b394:	f002 fade 	bl	800d954 <CreateLine>
      int32_t tempVocIndex = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800b39c:	193b      	adds	r3, r7, r4
 800b39e:	8819      	ldrh	r1, [r3, #0]
 800b3a0:	2308      	movs	r3, #8
 800b3a2:	18fa      	adds	r2, r7, r3
 800b3a4:	4b81      	ldr	r3, [pc, #516]	@ (800b5ac <SGP_GetMeasurementValues+0x3a0>)
 800b3a6:	0018      	movs	r0, r3
 800b3a8:	f7fe fea6 	bl	800a0f8 <GasIndexAlgorithm_process>
//      Debug("vocIndex value: %d", tempVocIndex);
      *vocIndex = tempVocIndex;
 800b3ac:	68ba      	ldr	r2, [r7, #8]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0 && *vocIndex <= 100){
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	dd5a      	ble.n	800b470 <SGP_GetMeasurementValues+0x264>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b64      	cmp	r3, #100	@ 0x64
 800b3c0:	dc56      	bgt.n	800b470 <SGP_GetMeasurementValues+0x264>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	0018      	movs	r0, r3
 800b3c8:	f7f7 fffa 	bl	80033c0 <__aeabi_i2d>
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	4b78      	ldr	r3, [pc, #480]	@ (800b5b0 <SGP_GetMeasurementValues+0x3a4>)
 800b3d0:	f7f6 fcf0 	bl	8001db4 <__aeabi_ddiv>
 800b3d4:	0002      	movs	r2, r0
 800b3d6:	000b      	movs	r3, r1
 800b3d8:	2000      	movs	r0, #0
 800b3da:	4976      	ldr	r1, [pc, #472]	@ (800b5b4 <SGP_GetMeasurementValues+0x3a8>)
 800b3dc:	f7f7 fbf6 	bl	8002bcc <__aeabi_dsub>
 800b3e0:	0002      	movs	r2, r0
 800b3e2:	000b      	movs	r3, r1
 800b3e4:	0014      	movs	r4, r2
 800b3e6:	001d      	movs	r5, r3
 800b3e8:	4b73      	ldr	r3, [pc, #460]	@ (800b5b8 <SGP_GetMeasurementValues+0x3ac>)
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	0018      	movs	r0, r3
 800b3ee:	f7f7 ffe7 	bl	80033c0 <__aeabi_i2d>
 800b3f2:	0002      	movs	r2, r0
 800b3f4:	000b      	movs	r3, r1
 800b3f6:	0020      	movs	r0, r4
 800b3f8:	0029      	movs	r1, r5
 800b3fa:	f7f7 f91f 	bl	800263c <__aeabi_dmul>
 800b3fe:	0002      	movs	r2, r0
 800b400:	000b      	movs	r3, r1
 800b402:	0010      	movs	r0, r2
 800b404:	0019      	movs	r1, r3
 800b406:	f7f5 f921 	bl	800064c <__aeabi_d2uiz>
 800b40a:	0003      	movs	r3, r0
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	4b6b      	ldr	r3, [pc, #428]	@ (800b5bc <SGP_GetMeasurementValues+0x3b0>)
 800b410:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	0018      	movs	r0, r3
 800b418:	f7f7 ffd2 	bl	80033c0 <__aeabi_i2d>
 800b41c:	2200      	movs	r2, #0
 800b41e:	4b64      	ldr	r3, [pc, #400]	@ (800b5b0 <SGP_GetMeasurementValues+0x3a4>)
 800b420:	f7f6 fcc8 	bl	8001db4 <__aeabi_ddiv>
 800b424:	0002      	movs	r2, r0
 800b426:	000b      	movs	r3, r1
 800b428:	0014      	movs	r4, r2
 800b42a:	001d      	movs	r5, r3
 800b42c:	4b62      	ldr	r3, [pc, #392]	@ (800b5b8 <SGP_GetMeasurementValues+0x3ac>)
 800b42e:	881b      	ldrh	r3, [r3, #0]
 800b430:	0018      	movs	r0, r3
 800b432:	f7f7 ffc5 	bl	80033c0 <__aeabi_i2d>
 800b436:	0002      	movs	r2, r0
 800b438:	000b      	movs	r3, r1
 800b43a:	0020      	movs	r0, r4
 800b43c:	0029      	movs	r1, r5
 800b43e:	f7f7 f8fd 	bl	800263c <__aeabi_dmul>
 800b442:	0002      	movs	r2, r0
 800b444:	000b      	movs	r3, r1
 800b446:	0010      	movs	r0, r2
 800b448:	0019      	movs	r1, r3
 800b44a:	f7f5 f8ff 	bl	800064c <__aeabi_d2uiz>
 800b44e:	0003      	movs	r3, r0
 800b450:	b29a      	uxth	r2, r3
 800b452:	4b5b      	ldr	r3, [pc, #364]	@ (800b5c0 <SGP_GetMeasurementValues+0x3b4>)
 800b454:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 800b456:	4b58      	ldr	r3, [pc, #352]	@ (800b5b8 <SGP_GetMeasurementValues+0x3ac>)
 800b458:	881a      	ldrh	r2, [r3, #0]
 800b45a:	4b5a      	ldr	r3, [pc, #360]	@ (800b5c4 <SGP_GetMeasurementValues+0x3b8>)
 800b45c:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 800b45e:	4b59      	ldr	r3, [pc, #356]	@ (800b5c4 <SGP_GetMeasurementValues+0x3b8>)
 800b460:	8818      	ldrh	r0, [r3, #0]
 800b462:	4b56      	ldr	r3, [pc, #344]	@ (800b5bc <SGP_GetMeasurementValues+0x3b0>)
 800b464:	8819      	ldrh	r1, [r3, #0]
 800b466:	4b56      	ldr	r3, [pc, #344]	@ (800b5c0 <SGP_GetMeasurementValues+0x3b4>)
 800b468:	881b      	ldrh	r3, [r3, #0]
 800b46a:	001a      	movs	r2, r3
 800b46c:	f001 fb2c 	bl	800cac8 <SetVocLED>
      }
      if(*vocIndex > 100){
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b64      	cmp	r3, #100	@ 0x64
 800b476:	dd66      	ble.n	800b546 <SGP_GetMeasurementValues+0x33a>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	0018      	movs	r0, r3
 800b47e:	f7f7 ff9f 	bl	80033c0 <__aeabi_i2d>
 800b482:	2200      	movs	r2, #0
 800b484:	4b4a      	ldr	r3, [pc, #296]	@ (800b5b0 <SGP_GetMeasurementValues+0x3a4>)
 800b486:	f7f7 fba1 	bl	8002bcc <__aeabi_dsub>
 800b48a:	0002      	movs	r2, r0
 800b48c:	000b      	movs	r3, r1
 800b48e:	0010      	movs	r0, r2
 800b490:	0019      	movs	r1, r3
 800b492:	2200      	movs	r2, #0
 800b494:	4b4c      	ldr	r3, [pc, #304]	@ (800b5c8 <SGP_GetMeasurementValues+0x3bc>)
 800b496:	f7f6 fc8d 	bl	8001db4 <__aeabi_ddiv>
 800b49a:	0002      	movs	r2, r0
 800b49c:	000b      	movs	r3, r1
 800b49e:	0014      	movs	r4, r2
 800b4a0:	001d      	movs	r5, r3
 800b4a2:	4b45      	ldr	r3, [pc, #276]	@ (800b5b8 <SGP_GetMeasurementValues+0x3ac>)
 800b4a4:	881b      	ldrh	r3, [r3, #0]
 800b4a6:	0018      	movs	r0, r3
 800b4a8:	f7f7 ff8a 	bl	80033c0 <__aeabi_i2d>
 800b4ac:	0002      	movs	r2, r0
 800b4ae:	000b      	movs	r3, r1
 800b4b0:	0020      	movs	r0, r4
 800b4b2:	0029      	movs	r1, r5
 800b4b4:	f7f7 f8c2 	bl	800263c <__aeabi_dmul>
 800b4b8:	0002      	movs	r2, r0
 800b4ba:	000b      	movs	r3, r1
 800b4bc:	0010      	movs	r0, r2
 800b4be:	0019      	movs	r1, r3
 800b4c0:	f7f5 f8c4 	bl	800064c <__aeabi_d2uiz>
 800b4c4:	0003      	movs	r3, r0
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	4b3c      	ldr	r3, [pc, #240]	@ (800b5bc <SGP_GetMeasurementValues+0x3b0>)
 800b4ca:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	0018      	movs	r0, r3
 800b4d2:	f7f7 ff75 	bl	80033c0 <__aeabi_i2d>
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	4b35      	ldr	r3, [pc, #212]	@ (800b5b0 <SGP_GetMeasurementValues+0x3a4>)
 800b4da:	f7f7 fb77 	bl	8002bcc <__aeabi_dsub>
 800b4de:	0002      	movs	r2, r0
 800b4e0:	000b      	movs	r3, r1
 800b4e2:	0010      	movs	r0, r2
 800b4e4:	0019      	movs	r1, r3
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	4b37      	ldr	r3, [pc, #220]	@ (800b5c8 <SGP_GetMeasurementValues+0x3bc>)
 800b4ea:	f7f6 fc63 	bl	8001db4 <__aeabi_ddiv>
 800b4ee:	0002      	movs	r2, r0
 800b4f0:	000b      	movs	r3, r1
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	492f      	ldr	r1, [pc, #188]	@ (800b5b4 <SGP_GetMeasurementValues+0x3a8>)
 800b4f6:	f7f7 fb69 	bl	8002bcc <__aeabi_dsub>
 800b4fa:	0002      	movs	r2, r0
 800b4fc:	000b      	movs	r3, r1
 800b4fe:	0014      	movs	r4, r2
 800b500:	001d      	movs	r5, r3
 800b502:	4b2d      	ldr	r3, [pc, #180]	@ (800b5b8 <SGP_GetMeasurementValues+0x3ac>)
 800b504:	881b      	ldrh	r3, [r3, #0]
 800b506:	0018      	movs	r0, r3
 800b508:	f7f7 ff5a 	bl	80033c0 <__aeabi_i2d>
 800b50c:	0002      	movs	r2, r0
 800b50e:	000b      	movs	r3, r1
 800b510:	0020      	movs	r0, r4
 800b512:	0029      	movs	r1, r5
 800b514:	f7f7 f892 	bl	800263c <__aeabi_dmul>
 800b518:	0002      	movs	r2, r0
 800b51a:	000b      	movs	r3, r1
 800b51c:	0010      	movs	r0, r2
 800b51e:	0019      	movs	r1, r3
 800b520:	f7f5 f894 	bl	800064c <__aeabi_d2uiz>
 800b524:	0003      	movs	r3, r0
 800b526:	b29a      	uxth	r2, r3
 800b528:	4b26      	ldr	r3, [pc, #152]	@ (800b5c4 <SGP_GetMeasurementValues+0x3b8>)
 800b52a:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800b52c:	4b22      	ldr	r3, [pc, #136]	@ (800b5b8 <SGP_GetMeasurementValues+0x3ac>)
 800b52e:	881a      	ldrh	r2, [r3, #0]
 800b530:	4b23      	ldr	r3, [pc, #140]	@ (800b5c0 <SGP_GetMeasurementValues+0x3b4>)
 800b532:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800b534:	4b23      	ldr	r3, [pc, #140]	@ (800b5c4 <SGP_GetMeasurementValues+0x3b8>)
 800b536:	8818      	ldrh	r0, [r3, #0]
 800b538:	4b20      	ldr	r3, [pc, #128]	@ (800b5bc <SGP_GetMeasurementValues+0x3b0>)
 800b53a:	8819      	ldrh	r1, [r3, #0]
 800b53c:	4b20      	ldr	r3, [pc, #128]	@ (800b5c0 <SGP_GetMeasurementValues+0x3b4>)
 800b53e:	881b      	ldrh	r3, [r3, #0]
 800b540:	001a      	movs	r2, r3
 800b542:	f001 fac1 	bl	800cac8 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800b546:	4b0e      	ldr	r3, [pc, #56]	@ (800b580 <SGP_GetMeasurementValues+0x374>)
 800b548:	2200      	movs	r2, #0
 800b54a:	701a      	strb	r2, [r3, #0]
//      Debug("SGP_Measurement completely done.");
      HT_MeasurementReceived = false;
 800b54c:	4b07      	ldr	r3, [pc, #28]	@ (800b56c <SGP_GetMeasurementValues+0x360>)
 800b54e:	2200      	movs	r2, #0
 800b550:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800b552:	4b03      	ldr	r3, [pc, #12]	@ (800b560 <SGP_GetMeasurementValues+0x354>)
 800b554:	2200      	movs	r2, #0
 800b556:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800b558:	2301      	movs	r3, #1
 800b55a:	e04f      	b.n	800b5fc <SGP_GetMeasurementValues+0x3f0>
 800b55c:	2000123e 	.word	0x2000123e
 800b560:	200012e9 	.word	0x200012e9
 800b564:	08023ac0 	.word	0x08023ac0
 800b568:	08023ad4 	.word	0x08023ad4
 800b56c:	200012e8 	.word	0x200012e8
 800b570:	20000094 	.word	0x20000094
 800b574:	200000a8 	.word	0x200000a8
 800b578:	2000008c 	.word	0x2000008c
 800b57c:	2000123f 	.word	0x2000123f
 800b580:	2000123d 	.word	0x2000123d
 800b584:	08023ad8 	.word	0x08023ad8
 800b588:	20001234 	.word	0x20001234
 800b58c:	08023af0 	.word	0x08023af0
 800b590:	08023b14 	.word	0x08023b14
 800b594:	08023b18 	.word	0x08023b18
 800b598:	08023b38 	.word	0x08023b38
 800b59c:	08023b3c 	.word	0x08023b3c
 800b5a0:	200000a4 	.word	0x200000a4
 800b5a4:	2000009c 	.word	0x2000009c
 800b5a8:	08023b5c 	.word	0x08023b5c
 800b5ac:	20001240 	.word	0x20001240
 800b5b0:	40590000 	.word	0x40590000
 800b5b4:	3ff00000 	.word	0x3ff00000
 800b5b8:	200000ac 	.word	0x200000ac
 800b5bc:	200012ee 	.word	0x200012ee
 800b5c0:	200012ec 	.word	0x200012ec
 800b5c4:	200012ea 	.word	0x200012ea
 800b5c8:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800b5cc:	f7ff fe02 	bl	800b1d4 <SGP_MeasurementDone>
 800b5d0:	1e03      	subs	r3, r0, #0
 800b5d2:	d012      	beq.n	800b5fa <SGP_GetMeasurementValues+0x3ee>
 800b5d4:	4b0b      	ldr	r3, [pc, #44]	@ (800b604 <SGP_GetMeasurementValues+0x3f8>)
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00e      	beq.n	800b5fa <SGP_GetMeasurementValues+0x3ee>
 800b5dc:	4b0a      	ldr	r3, [pc, #40]	@ (800b608 <SGP_GetMeasurementValues+0x3fc>)
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00a      	beq.n	800b5fa <SGP_GetMeasurementValues+0x3ee>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800b5e4:	4a09      	ldr	r2, [pc, #36]	@ (800b60c <SGP_GetMeasurementValues+0x400>)
 800b5e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b610 <SGP_GetMeasurementValues+0x404>)
 800b5e8:	0019      	movs	r1, r3
 800b5ea:	2003      	movs	r0, #3
 800b5ec:	f002 f9b2 	bl	800d954 <CreateLine>
    SGP_StartMeasurement();
 800b5f0:	f7ff fd9c 	bl	800b12c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800b5f4:	4b07      	ldr	r3, [pc, #28]	@ (800b614 <SGP_GetMeasurementValues+0x408>)
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	0018      	movs	r0, r3
 800b5fe:	46bd      	mov	sp, r7
 800b600:	b004      	add	sp, #16
 800b602:	bdb0      	pop	{r4, r5, r7, pc}
 800b604:	2000123e 	.word	0x2000123e
 800b608:	2000123f 	.word	0x2000123f
 800b60c:	08023b70 	.word	0x08023b70
 800b610:	08023ad4 	.word	0x08023ad4
 800b614:	200012e9 	.word	0x200012e9

0800b618 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b61e:	4b1a      	ldr	r3, [pc, #104]	@ (800b688 <SGP_DeviceConnected+0x70>)
 800b620:	2202      	movs	r2, #2
 800b622:	0019      	movs	r1, r3
 800b624:	2059      	movs	r0, #89	@ 0x59
 800b626:	f7ff fd49 	bl	800b0bc <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800b62a:	2001      	movs	r0, #1
 800b62c:	f002 fd3a 	bl	800e0a4 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800b630:	4b16      	ldr	r3, [pc, #88]	@ (800b68c <SGP_DeviceConnected+0x74>)
 800b632:	2209      	movs	r2, #9
 800b634:	0019      	movs	r1, r3
 800b636:	2059      	movs	r0, #89	@ 0x59
 800b638:	f7ff fd22 	bl	800b080 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b63c:	1dfb      	adds	r3, r7, #7
 800b63e:	2200      	movs	r2, #0
 800b640:	701a      	strb	r2, [r3, #0]
 800b642:	e011      	b.n	800b668 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800b644:	1dfb      	adds	r3, r7, #7
 800b646:	7818      	ldrb	r0, [r3, #0]
 800b648:	1dfb      	adds	r3, r7, #7
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	4a0f      	ldr	r2, [pc, #60]	@ (800b68c <SGP_DeviceConnected+0x74>)
 800b64e:	5cd3      	ldrb	r3, [r2, r3]
 800b650:	4a0f      	ldr	r2, [pc, #60]	@ (800b690 <SGP_DeviceConnected+0x78>)
 800b652:	4910      	ldr	r1, [pc, #64]	@ (800b694 <SGP_DeviceConnected+0x7c>)
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	0003      	movs	r3, r0
 800b658:	2002      	movs	r0, #2
 800b65a:	f002 f97b 	bl	800d954 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b65e:	1dfb      	adds	r3, r7, #7
 800b660:	781a      	ldrb	r2, [r3, #0]
 800b662:	1dfb      	adds	r3, r7, #7
 800b664:	3201      	adds	r2, #1
 800b666:	701a      	strb	r2, [r3, #0]
 800b668:	1dfb      	adds	r3, r7, #7
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	2b08      	cmp	r3, #8
 800b66e:	d9e9      	bls.n	800b644 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800b670:	4b06      	ldr	r3, [pc, #24]	@ (800b68c <SGP_DeviceConnected+0x74>)
 800b672:	2203      	movs	r2, #3
 800b674:	2109      	movs	r1, #9
 800b676:	0018      	movs	r0, r3
 800b678:	f000 f80e 	bl	800b698 <CheckCRC>
 800b67c:	0003      	movs	r3, r0
}
 800b67e:	0018      	movs	r0, r3
 800b680:	46bd      	mov	sp, r7
 800b682:	b002      	add	sp, #8
 800b684:	bd80      	pop	{r7, pc}
 800b686:	46c0      	nop			@ (mov r8, r8)
 800b688:	20000088 	.word	0x20000088
 800b68c:	20001234 	.word	0x20001234
 800b690:	08023b90 	.word	0x08023b90
 800b694:	08023b38 	.word	0x08023b38

0800b698 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800b698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b69a:	b08f      	sub	sp, #60	@ 0x3c
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6278      	str	r0, [r7, #36]	@ 0x24
 800b6a0:	0008      	movs	r0, r1
 800b6a2:	0011      	movs	r1, r2
 800b6a4:	2323      	movs	r3, #35	@ 0x23
 800b6a6:	18fb      	adds	r3, r7, r3
 800b6a8:	1c02      	adds	r2, r0, #0
 800b6aa:	701a      	strb	r2, [r3, #0]
 800b6ac:	2322      	movs	r3, #34	@ 0x22
 800b6ae:	18fb      	adds	r3, r7, r3
 800b6b0:	1c0a      	adds	r2, r1, #0
 800b6b2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b6b4:	2317      	movs	r3, #23
 800b6b6:	2220      	movs	r2, #32
 800b6b8:	189b      	adds	r3, r3, r2
 800b6ba:	19db      	adds	r3, r3, r7
 800b6bc:	2200      	movs	r2, #0
 800b6be:	701a      	strb	r2, [r3, #0]
 800b6c0:	e09f      	b.n	800b802 <CheckCRC+0x16a>
 800b6c2:	466b      	mov	r3, sp
 800b6c4:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800b6c6:	2322      	movs	r3, #34	@ 0x22
 800b6c8:	18fb      	adds	r3, r7, r3
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	001a      	movs	r2, r3
 800b6ce:	3a01      	subs	r2, #1
 800b6d0:	633a      	str	r2, [r7, #48]	@ 0x30
 800b6d2:	60bb      	str	r3, [r7, #8]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	60fa      	str	r2, [r7, #12]
 800b6d8:	68b8      	ldr	r0, [r7, #8]
 800b6da:	68f9      	ldr	r1, [r7, #12]
 800b6dc:	0002      	movs	r2, r0
 800b6de:	0f52      	lsrs	r2, r2, #29
 800b6e0:	000c      	movs	r4, r1
 800b6e2:	00e4      	lsls	r4, r4, #3
 800b6e4:	61fc      	str	r4, [r7, #28]
 800b6e6:	69fc      	ldr	r4, [r7, #28]
 800b6e8:	4314      	orrs	r4, r2
 800b6ea:	61fc      	str	r4, [r7, #28]
 800b6ec:	0002      	movs	r2, r0
 800b6ee:	00d2      	lsls	r2, r2, #3
 800b6f0:	61ba      	str	r2, [r7, #24]
 800b6f2:	603b      	str	r3, [r7, #0]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	607a      	str	r2, [r7, #4]
 800b6f8:	6838      	ldr	r0, [r7, #0]
 800b6fa:	6879      	ldr	r1, [r7, #4]
 800b6fc:	0002      	movs	r2, r0
 800b6fe:	0f52      	lsrs	r2, r2, #29
 800b700:	000c      	movs	r4, r1
 800b702:	00e4      	lsls	r4, r4, #3
 800b704:	617c      	str	r4, [r7, #20]
 800b706:	697c      	ldr	r4, [r7, #20]
 800b708:	4314      	orrs	r4, r2
 800b70a:	617c      	str	r4, [r7, #20]
 800b70c:	0002      	movs	r2, r0
 800b70e:	00d2      	lsls	r2, r2, #3
 800b710:	613a      	str	r2, [r7, #16]
 800b712:	3307      	adds	r3, #7
 800b714:	08db      	lsrs	r3, r3, #3
 800b716:	00db      	lsls	r3, r3, #3
 800b718:	466a      	mov	r2, sp
 800b71a:	1ad3      	subs	r3, r2, r3
 800b71c:	469d      	mov	sp, r3
 800b71e:	466b      	mov	r3, sp
 800b720:	3300      	adds	r3, #0
 800b722:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800b724:	2316      	movs	r3, #22
 800b726:	2220      	movs	r2, #32
 800b728:	189b      	adds	r3, r3, r2
 800b72a:	19db      	adds	r3, r3, r7
 800b72c:	2200      	movs	r2, #0
 800b72e:	701a      	strb	r2, [r3, #0]
 800b730:	e01e      	b.n	800b770 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800b732:	2317      	movs	r3, #23
 800b734:	2220      	movs	r2, #32
 800b736:	189b      	adds	r3, r3, r2
 800b738:	19db      	adds	r3, r3, r7
 800b73a:	781a      	ldrb	r2, [r3, #0]
 800b73c:	2116      	movs	r1, #22
 800b73e:	2320      	movs	r3, #32
 800b740:	18cb      	adds	r3, r1, r3
 800b742:	19db      	adds	r3, r3, r7
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	18d3      	adds	r3, r2, r3
 800b748:	001a      	movs	r2, r3
 800b74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74c:	189a      	adds	r2, r3, r2
 800b74e:	0008      	movs	r0, r1
 800b750:	2320      	movs	r3, #32
 800b752:	18cb      	adds	r3, r1, r3
 800b754:	19db      	adds	r3, r3, r7
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	7811      	ldrb	r1, [r2, #0]
 800b75a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b75c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800b75e:	2320      	movs	r3, #32
 800b760:	18c3      	adds	r3, r0, r3
 800b762:	19db      	adds	r3, r3, r7
 800b764:	781a      	ldrb	r2, [r3, #0]
 800b766:	2320      	movs	r3, #32
 800b768:	18c3      	adds	r3, r0, r3
 800b76a:	19db      	adds	r3, r3, r7
 800b76c:	3201      	adds	r2, #1
 800b76e:	701a      	strb	r2, [r3, #0]
 800b770:	2316      	movs	r3, #22
 800b772:	2220      	movs	r2, #32
 800b774:	189b      	adds	r3, r3, r2
 800b776:	19da      	adds	r2, r3, r7
 800b778:	2322      	movs	r3, #34	@ 0x22
 800b77a:	18fb      	adds	r3, r7, r3
 800b77c:	7812      	ldrb	r2, [r2, #0]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	429a      	cmp	r2, r3
 800b782:	d3d6      	bcc.n	800b732 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800b784:	2417      	movs	r4, #23
 800b786:	2320      	movs	r3, #32
 800b788:	18e3      	adds	r3, r4, r3
 800b78a:	19db      	adds	r3, r3, r7
 800b78c:	781a      	ldrb	r2, [r3, #0]
 800b78e:	2322      	movs	r3, #34	@ 0x22
 800b790:	18fb      	adds	r3, r7, r3
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	18d3      	adds	r3, r2, r3
 800b796:	3b01      	subs	r3, #1
 800b798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b79a:	18d2      	adds	r2, r2, r3
 800b79c:	250b      	movs	r5, #11
 800b79e:	2320      	movs	r3, #32
 800b7a0:	18eb      	adds	r3, r5, r3
 800b7a2:	19db      	adds	r3, r3, r7
 800b7a4:	7812      	ldrb	r2, [r2, #0]
 800b7a6:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800b7a8:	2322      	movs	r3, #34	@ 0x22
 800b7aa:	18fb      	adds	r3, r7, r3
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	b2da      	uxtb	r2, r3
 800b7b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7b4:	0011      	movs	r1, r2
 800b7b6:	0018      	movs	r0, r3
 800b7b8:	f000 f838 	bl	800b82c <CalculateCRC>
 800b7bc:	0003      	movs	r3, r0
 800b7be:	001a      	movs	r2, r3
 800b7c0:	2320      	movs	r3, #32
 800b7c2:	18eb      	adds	r3, r5, r3
 800b7c4:	19db      	adds	r3, r3, r7
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d00c      	beq.n	800b7e6 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800b7cc:	2320      	movs	r3, #32
 800b7ce:	18e3      	adds	r3, r4, r3
 800b7d0:	19db      	adds	r3, r3, r7
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	4a13      	ldr	r2, [pc, #76]	@ (800b824 <CheckCRC+0x18c>)
 800b7d8:	4913      	ldr	r1, [pc, #76]	@ (800b828 <CheckCRC+0x190>)
 800b7da:	2001      	movs	r0, #1
 800b7dc:	f002 f8ba 	bl	800d954 <CreateLine>
      return false;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	46b5      	mov	sp, r6
 800b7e4:	e019      	b.n	800b81a <CheckCRC+0x182>
 800b7e6:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b7e8:	2217      	movs	r2, #23
 800b7ea:	2320      	movs	r3, #32
 800b7ec:	18d3      	adds	r3, r2, r3
 800b7ee:	19db      	adds	r3, r3, r7
 800b7f0:	2120      	movs	r1, #32
 800b7f2:	1852      	adds	r2, r2, r1
 800b7f4:	19d1      	adds	r1, r2, r7
 800b7f6:	2222      	movs	r2, #34	@ 0x22
 800b7f8:	18ba      	adds	r2, r7, r2
 800b7fa:	7809      	ldrb	r1, [r1, #0]
 800b7fc:	7812      	ldrb	r2, [r2, #0]
 800b7fe:	188a      	adds	r2, r1, r2
 800b800:	701a      	strb	r2, [r3, #0]
 800b802:	2317      	movs	r3, #23
 800b804:	2220      	movs	r2, #32
 800b806:	189b      	adds	r3, r3, r2
 800b808:	19da      	adds	r2, r3, r7
 800b80a:	2323      	movs	r3, #35	@ 0x23
 800b80c:	18fb      	adds	r3, r7, r3
 800b80e:	7812      	ldrb	r2, [r2, #0]
 800b810:	781b      	ldrb	r3, [r3, #0]
 800b812:	429a      	cmp	r2, r3
 800b814:	d200      	bcs.n	800b818 <CheckCRC+0x180>
 800b816:	e754      	b.n	800b6c2 <CheckCRC+0x2a>
    }
  }
  return true;
 800b818:	2301      	movs	r3, #1
}
 800b81a:	0018      	movs	r0, r3
 800b81c:	46bd      	mov	sp, r7
 800b81e:	b00f      	add	sp, #60	@ 0x3c
 800b820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b822:	46c0      	nop			@ (mov r8, r8)
 800b824:	08023bb0 	.word	0x08023bb0
 800b828:	08023b14 	.word	0x08023b14

0800b82c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	000a      	movs	r2, r1
 800b836:	1cfb      	adds	r3, r7, #3
 800b838:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800b83a:	230f      	movs	r3, #15
 800b83c:	18fb      	adds	r3, r7, r3
 800b83e:	22ff      	movs	r2, #255	@ 0xff
 800b840:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800b842:	230e      	movs	r3, #14
 800b844:	18fb      	adds	r3, r7, r3
 800b846:	2200      	movs	r2, #0
 800b848:	701a      	strb	r2, [r3, #0]
 800b84a:	e037      	b.n	800b8bc <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800b84c:	230e      	movs	r3, #14
 800b84e:	18fb      	adds	r3, r7, r3
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	18d3      	adds	r3, r2, r3
 800b856:	7819      	ldrb	r1, [r3, #0]
 800b858:	220f      	movs	r2, #15
 800b85a:	18bb      	adds	r3, r7, r2
 800b85c:	18ba      	adds	r2, r7, r2
 800b85e:	7812      	ldrb	r2, [r2, #0]
 800b860:	404a      	eors	r2, r1
 800b862:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800b864:	230d      	movs	r3, #13
 800b866:	18fb      	adds	r3, r7, r3
 800b868:	2200      	movs	r2, #0
 800b86a:	701a      	strb	r2, [r3, #0]
 800b86c:	e01b      	b.n	800b8a6 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800b86e:	210f      	movs	r1, #15
 800b870:	187b      	adds	r3, r7, r1
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	b25b      	sxtb	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	da09      	bge.n	800b88e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800b87a:	187b      	adds	r3, r7, r1
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	005b      	lsls	r3, r3, #1
 800b880:	b25b      	sxtb	r3, r3
 800b882:	2231      	movs	r2, #49	@ 0x31
 800b884:	4053      	eors	r3, r2
 800b886:	b25a      	sxtb	r2, r3
 800b888:	187b      	adds	r3, r7, r1
 800b88a:	701a      	strb	r2, [r3, #0]
 800b88c:	e005      	b.n	800b89a <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800b88e:	230f      	movs	r3, #15
 800b890:	18fa      	adds	r2, r7, r3
 800b892:	18fb      	adds	r3, r7, r3
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	18db      	adds	r3, r3, r3
 800b898:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800b89a:	210d      	movs	r1, #13
 800b89c:	187b      	adds	r3, r7, r1
 800b89e:	781a      	ldrb	r2, [r3, #0]
 800b8a0:	187b      	adds	r3, r7, r1
 800b8a2:	3201      	adds	r2, #1
 800b8a4:	701a      	strb	r2, [r3, #0]
 800b8a6:	230d      	movs	r3, #13
 800b8a8:	18fb      	adds	r3, r7, r3
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	2b07      	cmp	r3, #7
 800b8ae:	d9de      	bls.n	800b86e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800b8b0:	210e      	movs	r1, #14
 800b8b2:	187b      	adds	r3, r7, r1
 800b8b4:	781a      	ldrb	r2, [r3, #0]
 800b8b6:	187b      	adds	r3, r7, r1
 800b8b8:	3201      	adds	r2, #1
 800b8ba:	701a      	strb	r2, [r3, #0]
 800b8bc:	230e      	movs	r3, #14
 800b8be:	18fa      	adds	r2, r7, r3
 800b8c0:	1cfb      	adds	r3, r7, #3
 800b8c2:	7812      	ldrb	r2, [r2, #0]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d3c0      	bcc.n	800b84c <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800b8ca:	230f      	movs	r3, #15
 800b8cc:	18fb      	adds	r3, r7, r3
 800b8ce:	781b      	ldrb	r3, [r3, #0]
}
 800b8d0:	0018      	movs	r0, r3
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	b004      	add	sp, #16
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4936      	ldr	r1, [pc, #216]	@ (800b9c0 <SGP_GetHT+0xe8>)
 800b8e8:	1c18      	adds	r0, r3, #0
 800b8ea:	f7f4 ffe9 	bl	80008c0 <__aeabi_fadd>
 800b8ee:	1c03      	adds	r3, r0, #0
 800b8f0:	4934      	ldr	r1, [pc, #208]	@ (800b9c4 <SGP_GetHT+0xec>)
 800b8f2:	1c18      	adds	r0, r3, #0
 800b8f4:	f7f5 f96e 	bl	8000bd4 <__aeabi_fdiv>
 800b8f8:	1c03      	adds	r3, r0, #0
 800b8fa:	4933      	ldr	r1, [pc, #204]	@ (800b9c8 <SGP_GetHT+0xf0>)
 800b8fc:	1c18      	adds	r0, r3, #0
 800b8fe:	f7f5 fb4f 	bl	8000fa0 <__aeabi_fmul>
 800b902:	1c03      	adds	r3, r0, #0
 800b904:	1c18      	adds	r0, r3, #0
 800b906:	f7f4 fe89 	bl	800061c <__aeabi_f2uiz>
 800b90a:	0003      	movs	r3, r0
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	4b2f      	ldr	r3, [pc, #188]	@ (800b9cc <SGP_GetHT+0xf4>)
 800b910:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	492e      	ldr	r1, [pc, #184]	@ (800b9d0 <SGP_GetHT+0xf8>)
 800b918:	1c18      	adds	r0, r3, #0
 800b91a:	f7f5 f95b 	bl	8000bd4 <__aeabi_fdiv>
 800b91e:	1c03      	adds	r3, r0, #0
 800b920:	4929      	ldr	r1, [pc, #164]	@ (800b9c8 <SGP_GetHT+0xf0>)
 800b922:	1c18      	adds	r0, r3, #0
 800b924:	f7f5 fb3c 	bl	8000fa0 <__aeabi_fmul>
 800b928:	1c03      	adds	r3, r0, #0
 800b92a:	1c18      	adds	r0, r3, #0
 800b92c:	f7f4 fe76 	bl	800061c <__aeabi_f2uiz>
 800b930:	0003      	movs	r3, r0
 800b932:	b29a      	uxth	r2, r3
 800b934:	4b27      	ldr	r3, [pc, #156]	@ (800b9d4 <SGP_GetHT+0xfc>)
 800b936:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800b938:	4b26      	ldr	r3, [pc, #152]	@ (800b9d4 <SGP_GetHT+0xfc>)
 800b93a:	881b      	ldrh	r3, [r3, #0]
 800b93c:	0a1b      	lsrs	r3, r3, #8
 800b93e:	b29b      	uxth	r3, r3
 800b940:	b2da      	uxtb	r2, r3
 800b942:	4b25      	ldr	r3, [pc, #148]	@ (800b9d8 <SGP_GetHT+0x100>)
 800b944:	709a      	strb	r2, [r3, #2]
 800b946:	4b24      	ldr	r3, [pc, #144]	@ (800b9d8 <SGP_GetHT+0x100>)
 800b948:	789a      	ldrb	r2, [r3, #2]
 800b94a:	210c      	movs	r1, #12
 800b94c:	187b      	adds	r3, r7, r1
 800b94e:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800b950:	4b20      	ldr	r3, [pc, #128]	@ (800b9d4 <SGP_GetHT+0xfc>)
 800b952:	881b      	ldrh	r3, [r3, #0]
 800b954:	b2da      	uxtb	r2, r3
 800b956:	4b20      	ldr	r3, [pc, #128]	@ (800b9d8 <SGP_GetHT+0x100>)
 800b958:	70da      	strb	r2, [r3, #3]
 800b95a:	4b1f      	ldr	r3, [pc, #124]	@ (800b9d8 <SGP_GetHT+0x100>)
 800b95c:	78da      	ldrb	r2, [r3, #3]
 800b95e:	187b      	adds	r3, r7, r1
 800b960:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800b962:	187b      	adds	r3, r7, r1
 800b964:	2102      	movs	r1, #2
 800b966:	0018      	movs	r0, r3
 800b968:	f7ff ff60 	bl	800b82c <CalculateCRC>
 800b96c:	0003      	movs	r3, r0
 800b96e:	001a      	movs	r2, r3
 800b970:	4b19      	ldr	r3, [pc, #100]	@ (800b9d8 <SGP_GetHT+0x100>)
 800b972:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800b974:	4b15      	ldr	r3, [pc, #84]	@ (800b9cc <SGP_GetHT+0xf4>)
 800b976:	881b      	ldrh	r3, [r3, #0]
 800b978:	0a1b      	lsrs	r3, r3, #8
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	4b16      	ldr	r3, [pc, #88]	@ (800b9d8 <SGP_GetHT+0x100>)
 800b980:	715a      	strb	r2, [r3, #5]
 800b982:	4b15      	ldr	r3, [pc, #84]	@ (800b9d8 <SGP_GetHT+0x100>)
 800b984:	795a      	ldrb	r2, [r3, #5]
 800b986:	2108      	movs	r1, #8
 800b988:	187b      	adds	r3, r7, r1
 800b98a:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800b98c:	4b0f      	ldr	r3, [pc, #60]	@ (800b9cc <SGP_GetHT+0xf4>)
 800b98e:	881b      	ldrh	r3, [r3, #0]
 800b990:	b2da      	uxtb	r2, r3
 800b992:	4b11      	ldr	r3, [pc, #68]	@ (800b9d8 <SGP_GetHT+0x100>)
 800b994:	719a      	strb	r2, [r3, #6]
 800b996:	4b10      	ldr	r3, [pc, #64]	@ (800b9d8 <SGP_GetHT+0x100>)
 800b998:	799a      	ldrb	r2, [r3, #6]
 800b99a:	187b      	adds	r3, r7, r1
 800b99c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800b99e:	187b      	adds	r3, r7, r1
 800b9a0:	2102      	movs	r1, #2
 800b9a2:	0018      	movs	r0, r3
 800b9a4:	f7ff ff42 	bl	800b82c <CalculateCRC>
 800b9a8:	0003      	movs	r3, r0
 800b9aa:	001a      	movs	r2, r3
 800b9ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d8 <SGP_GetHT+0x100>)
 800b9ae:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800b9b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b9dc <SGP_GetHT+0x104>)
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	701a      	strb	r2, [r3, #0]
}
 800b9b6:	46c0      	nop			@ (mov r8, r8)
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	b004      	add	sp, #16
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	46c0      	nop			@ (mov r8, r8)
 800b9c0:	42340000 	.word	0x42340000
 800b9c4:	432f0000 	.word	0x432f0000
 800b9c8:	477fff00 	.word	0x477fff00
 800b9cc:	200012e6 	.word	0x200012e6
 800b9d0:	42c80000 	.word	0x42c80000
 800b9d4:	200012e4 	.word	0x200012e4
 800b9d8:	20000094 	.word	0x20000094
 800b9dc:	200012e8 	.word	0x200012e8

0800b9e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	0002      	movs	r2, r0
 800b9e8:	1dfb      	adds	r3, r7, #7
 800b9ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800b9ec:	1dfb      	adds	r3, r7, #7
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	2b7f      	cmp	r3, #127	@ 0x7f
 800b9f2:	d809      	bhi.n	800ba08 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b9f4:	1dfb      	adds	r3, r7, #7
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	001a      	movs	r2, r3
 800b9fa:	231f      	movs	r3, #31
 800b9fc:	401a      	ands	r2, r3
 800b9fe:	4b04      	ldr	r3, [pc, #16]	@ (800ba10 <__NVIC_EnableIRQ+0x30>)
 800ba00:	2101      	movs	r1, #1
 800ba02:	4091      	lsls	r1, r2
 800ba04:	000a      	movs	r2, r1
 800ba06:	601a      	str	r2, [r3, #0]
  }
}
 800ba08:	46c0      	nop			@ (mov r8, r8)
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	b002      	add	sp, #8
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	e000e100 	.word	0xe000e100

0800ba14 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	0002      	movs	r2, r0
 800ba1c:	1dfb      	adds	r3, r7, #7
 800ba1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ba20:	1dfb      	adds	r3, r7, #7
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba26:	d810      	bhi.n	800ba4a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ba28:	1dfb      	adds	r3, r7, #7
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	001a      	movs	r2, r3
 800ba2e:	231f      	movs	r3, #31
 800ba30:	4013      	ands	r3, r2
 800ba32:	4908      	ldr	r1, [pc, #32]	@ (800ba54 <__NVIC_DisableIRQ+0x40>)
 800ba34:	2201      	movs	r2, #1
 800ba36:	409a      	lsls	r2, r3
 800ba38:	0013      	movs	r3, r2
 800ba3a:	2280      	movs	r2, #128	@ 0x80
 800ba3c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ba3e:	f3bf 8f4f 	dsb	sy
}
 800ba42:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800ba44:	f3bf 8f6f 	isb	sy
}
 800ba48:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800ba4a:	46c0      	nop			@ (mov r8, r8)
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	b002      	add	sp, #8
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	46c0      	nop			@ (mov r8, r8)
 800ba54:	e000e100 	.word	0xe000e100

0800ba58 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800ba58:	b5b0      	push	{r4, r5, r7, lr}
 800ba5a:	b088      	sub	sp, #32
 800ba5c:	af02      	add	r7, sp, #8
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	0008      	movs	r0, r1
 800ba62:	0011      	movs	r1, r2
 800ba64:	1cfb      	adds	r3, r7, #3
 800ba66:	1c02      	adds	r2, r0, #0
 800ba68:	701a      	strb	r2, [r3, #0]
 800ba6a:	1cbb      	adds	r3, r7, #2
 800ba6c:	1c0a      	adds	r2, r1, #0
 800ba6e:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800ba70:	4b5b      	ldr	r3, [pc, #364]	@ (800bbe0 <getSoundData+0x188>)
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	2201      	movs	r2, #1
 800ba78:	4053      	eors	r3, r2
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d107      	bne.n	800ba90 <getSoundData+0x38>
 800ba80:	4b58      	ldr	r3, [pc, #352]	@ (800bbe4 <getSoundData+0x18c>)
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	2201      	movs	r2, #1
 800ba88:	4053      	eors	r3, r2
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d001      	beq.n	800ba94 <getSoundData+0x3c>
    {
        return false;
 800ba90:	2300      	movs	r3, #0
 800ba92:	e0a0      	b.n	800bbd6 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800ba94:	4b54      	ldr	r3, [pc, #336]	@ (800bbe8 <getSoundData+0x190>)
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d005      	beq.n	800baaa <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800ba9e:	4b53      	ldr	r3, [pc, #332]	@ (800bbec <getSoundData+0x194>)
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	b25b      	sxtb	r3, r3
 800baa4:	0018      	movs	r0, r3
 800baa6:	f7ff ffb5 	bl	800ba14 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800baaa:	f3bf 8f4f 	dsb	sy
}
 800baae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800bab0:	f3bf 8f6f 	isb	sy
}
 800bab4:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800bab6:	1cfb      	adds	r3, r7, #3
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d04c      	beq.n	800bb58 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800babe:	4b4c      	ldr	r3, [pc, #304]	@ (800bbf0 <getSoundData+0x198>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d11b      	bne.n	800bafe <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bad2:	2300      	movs	r3, #0
 800bad4:	617b      	str	r3, [r7, #20]
 800bad6:	e00e      	b.n	800baf6 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	18d3      	adds	r3, r2, r3
 800bade:	3302      	adds	r3, #2
 800bae0:	2200      	movs	r2, #0
 800bae2:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	18d3      	adds	r3, r2, r3
 800baea:	3308      	adds	r3, #8
 800baec:	2200      	movs	r2, #0
 800baee:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	3301      	adds	r3, #1
 800baf4:	617b      	str	r3, [r7, #20]
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	2b05      	cmp	r3, #5
 800bafa:	d9ed      	bls.n	800bad8 <getSoundData+0x80>
 800bafc:	e02c      	b.n	800bb58 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	1c59      	adds	r1, r3, #1
 800bb04:	4b3b      	ldr	r3, [pc, #236]	@ (800bbf4 <getSoundData+0x19c>)
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	4b3b      	ldr	r3, [pc, #236]	@ (800bbf8 <getSoundData+0x1a0>)
 800bb0a:	681c      	ldr	r4, [r3, #0]
 800bb0c:	4b38      	ldr	r3, [pc, #224]	@ (800bbf0 <getSoundData+0x198>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	9300      	str	r3, [sp, #0]
 800bb12:	0023      	movs	r3, r4
 800bb14:	f000 fde8 	bl	800c6e8 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bb18:	2300      	movs	r3, #0
 800bb1a:	613b      	str	r3, [r7, #16]
 800bb1c:	e019      	b.n	800bb52 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	18d3      	adds	r3, r2, r3
 800bb24:	1c98      	adds	r0, r3, #2
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	3308      	adds	r3, #8
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800bb2e:	4b33      	ldr	r3, [pc, #204]	@ (800bbfc <getSoundData+0x1a4>)
 800bb30:	693a      	ldr	r2, [r7, #16]
 800bb32:	0092      	lsls	r2, r2, #2
 800bb34:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800bb36:	4b32      	ldr	r3, [pc, #200]	@ (800bc00 <getSoundData+0x1a8>)
 800bb38:	693a      	ldr	r2, [r7, #16]
 800bb3a:	0092      	lsls	r2, r2, #2
 800bb3c:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800bb3e:	4b2c      	ldr	r3, [pc, #176]	@ (800bbf0 <getSoundData+0x198>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	0013      	movs	r3, r2
 800bb46:	0022      	movs	r2, r4
 800bb48:	f000 fdce 	bl	800c6e8 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	613b      	str	r3, [r7, #16]
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	2b05      	cmp	r3, #5
 800bb56:	d9e2      	bls.n	800bb1e <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800bb58:	1cbb      	adds	r3, r7, #2
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d028      	beq.n	800bbb2 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800bb60:	240e      	movs	r4, #14
 800bb62:	193b      	adds	r3, r7, r4
 800bb64:	2200      	movs	r2, #0
 800bb66:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800bb68:	250d      	movs	r5, #13
 800bb6a:	197b      	adds	r3, r7, r5
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800bb70:	4b24      	ldr	r3, [pc, #144]	@ (800bc04 <getSoundData+0x1ac>)
 800bb72:	6818      	ldr	r0, [r3, #0]
 800bb74:	4924      	ldr	r1, [pc, #144]	@ (800bc08 <getSoundData+0x1b0>)
 800bb76:	197b      	adds	r3, r7, r5
 800bb78:	193a      	adds	r2, r7, r4
 800bb7a:	f000 fe59 	bl	800c830 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800bb7e:	193b      	adds	r3, r7, r4
 800bb80:	881a      	ldrh	r2, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	21ff      	movs	r1, #255	@ 0xff
 800bb86:	4011      	ands	r1, r2
 800bb88:	000c      	movs	r4, r1
 800bb8a:	7b99      	ldrb	r1, [r3, #14]
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	4001      	ands	r1, r0
 800bb90:	1c08      	adds	r0, r1, #0
 800bb92:	1c21      	adds	r1, r4, #0
 800bb94:	4301      	orrs	r1, r0
 800bb96:	7399      	strb	r1, [r3, #14]
 800bb98:	0a12      	lsrs	r2, r2, #8
 800bb9a:	b290      	uxth	r0, r2
 800bb9c:	7bda      	ldrb	r2, [r3, #15]
 800bb9e:	2100      	movs	r1, #0
 800bba0:	400a      	ands	r2, r1
 800bba2:	1c11      	adds	r1, r2, #0
 800bba4:	1c02      	adds	r2, r0, #0
 800bba6:	430a      	orrs	r2, r1
 800bba8:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800bbaa:	197b      	adds	r3, r7, r5
 800bbac:	781a      	ldrb	r2, [r3, #0]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800bbb2:	f000 f86f 	bl	800bc94 <micSettlingComplete>
 800bbb6:	0003      	movs	r3, r0
 800bbb8:	001a      	movs	r2, r3
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800bbbe:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe8 <getSoundData+0x190>)
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d005      	beq.n	800bbd4 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800bbc8:	4b08      	ldr	r3, [pc, #32]	@ (800bbec <getSoundData+0x194>)
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	b25b      	sxtb	r3, r3
 800bbce:	0018      	movs	r0, r3
 800bbd0:	f7ff ff06 	bl	800b9e0 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800bbd4:	2301      	movs	r3, #1
}
 800bbd6:	0018      	movs	r0, r3
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	b006      	add	sp, #24
 800bbdc:	bdb0      	pop	{r4, r5, r7, pc}
 800bbde:	46c0      	nop			@ (mov r8, r8)
 800bbe0:	200012f1 	.word	0x200012f1
 800bbe4:	200012f4 	.word	0x200012f4
 800bbe8:	200012f3 	.word	0x200012f3
 800bbec:	20001d44 	.word	0x20001d44
 800bbf0:	20001d80 	.word	0x20001d80
 800bbf4:	20001d48 	.word	0x20001d48
 800bbf8:	20001d4c 	.word	0x20001d4c
 800bbfc:	20001d50 	.word	0x20001d50
 800bc00:	20001d68 	.word	0x20001d68
 800bc04:	200012fc 	.word	0x200012fc
 800bc08:	3b5c7333 	.word	0x3b5c7333

0800bc0c <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
 800bc18:	001a      	movs	r2, r3
 800bc1a:	1cfb      	adds	r3, r7, #3
 800bc1c:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800bc1e:	4b09      	ldr	r3, [pc, #36]	@ (800bc44 <soundInit+0x38>)
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800bc24:	4b08      	ldr	r3, [pc, #32]	@ (800bc48 <soundInit+0x3c>)
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800bc2a:	4b08      	ldr	r3, [pc, #32]	@ (800bc4c <soundInit+0x40>)
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800bc30:	4b07      	ldr	r3, [pc, #28]	@ (800bc50 <soundInit+0x44>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	569a      	ldrsb	r2, [r3, r2]
 800bc36:	4b06      	ldr	r3, [pc, #24]	@ (800bc50 <soundInit+0x44>)
 800bc38:	701a      	strb	r2, [r3, #0]

    return true;
 800bc3a:	2301      	movs	r3, #1
}
 800bc3c:	0018      	movs	r0, r3
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	b004      	add	sp, #16
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	20001d3c 	.word	0x20001d3c
 800bc48:	20001d38 	.word	0x20001d38
 800bc4c:	20001d40 	.word	0x20001d40
 800bc50:	20001d44 	.word	0x20001d44

0800bc54 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800bc58:	4b02      	ldr	r3, [pc, #8]	@ (800bc64 <clearMaximumAmplitude+0x10>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	601a      	str	r2, [r3, #0]
}
 800bc5e:	46c0      	nop			@ (mov r8, r8)
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	200012fc 	.word	0x200012fc

0800bc68 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800bc6c:	4b08      	ldr	r3, [pc, #32]	@ (800bc90 <startMicSettlingPeriod+0x28>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2200      	movs	r2, #0
 800bc74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800bc76:	4b06      	ldr	r3, [pc, #24]	@ (800bc90 <startMicSettlingPeriod+0x28>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	0018      	movs	r0, r3
 800bc7c:	f009 ff78 	bl	8015b70 <HAL_TIM_Base_Start>
 800bc80:	1e03      	subs	r3, r0, #0
 800bc82:	d001      	beq.n	800bc88 <startMicSettlingPeriod+0x20>
    {
        return false;
 800bc84:	2300      	movs	r3, #0
 800bc86:	e000      	b.n	800bc8a <startMicSettlingPeriod+0x22>
    }
    return true;
 800bc88:	2301      	movs	r3, #1
}
 800bc8a:	0018      	movs	r0, r3
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	20001d38 	.word	0x20001d38

0800bc94 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800bc9a:	4b0e      	ldr	r3, [pc, #56]	@ (800bcd4 <micSettlingComplete+0x40>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	2201      	movs	r2, #1
 800bca4:	401a      	ands	r2, r3
 800bca6:	1dfb      	adds	r3, r7, #7
 800bca8:	3a01      	subs	r2, #1
 800bcaa:	4251      	negs	r1, r2
 800bcac:	414a      	adcs	r2, r1
 800bcae:	701a      	strb	r2, [r3, #0]
    if (complete)
 800bcb0:	1dfb      	adds	r3, r7, #7
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d007      	beq.n	800bcc8 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800bcb8:	4b06      	ldr	r3, [pc, #24]	@ (800bcd4 <micSettlingComplete+0x40>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	0018      	movs	r0, r3
 800bcbe:	f009 ffa1 	bl	8015c04 <HAL_TIM_Base_Stop>
      DataReady = true;
 800bcc2:	4b05      	ldr	r3, [pc, #20]	@ (800bcd8 <micSettlingComplete+0x44>)
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800bcc8:	1dfb      	adds	r3, r7, #7
 800bcca:	781b      	ldrb	r3, [r3, #0]
}
 800bccc:	0018      	movs	r0, r3
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	b002      	add	sp, #8
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	20001d38 	.word	0x20001d38
 800bcd8:	200012f0 	.word	0x200012f0

0800bcdc <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	0002      	movs	r2, r0
 800bce4:	1dfb      	adds	r3, r7, #7
 800bce6:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800bce8:	4b29      	ldr	r3, [pc, #164]	@ (800bd90 <enableMicrophone+0xb4>)
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	1dfa      	adds	r2, r7, #7
 800bcf0:	7812      	ldrb	r2, [r2, #0]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d101      	bne.n	800bcfa <enableMicrophone+0x1e>
    {
        return true;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e045      	b.n	800bd86 <enableMicrophone+0xaa>
    }
    if (bEnable)
 800bcfa:	1dfb      	adds	r3, r7, #7
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d025      	beq.n	800bd4e <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800bd02:	f7ff ffb1 	bl	800bc68 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800bd06:	4b23      	ldr	r3, [pc, #140]	@ (800bd94 <enableMicrophone+0xb8>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2280      	movs	r2, #128	@ 0x80
 800bd0c:	0092      	lsls	r2, r2, #2
 800bd0e:	4922      	ldr	r1, [pc, #136]	@ (800bd98 <enableMicrophone+0xbc>)
 800bd10:	0018      	movs	r0, r3
 800bd12:	f006 f9d5 	bl	80120c0 <HAL_I2S_Receive_DMA>
 800bd16:	1e03      	subs	r3, r0, #0
 800bd18:	d001      	beq.n	800bd1e <enableMicrophone+0x42>
        {
            return false;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	e033      	b.n	800bd86 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800bd1e:	f7ff ff99 	bl	800bc54 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800bd22:	4b1e      	ldr	r3, [pc, #120]	@ (800bd9c <enableMicrophone+0xc0>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800bd28:	4b1d      	ldr	r3, [pc, #116]	@ (800bda0 <enableMicrophone+0xc4>)
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	b25b      	sxtb	r3, r3
 800bd2e:	0018      	movs	r0, r3
 800bd30:	f7ff fe56 	bl	800b9e0 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800bd34:	4b1b      	ldr	r3, [pc, #108]	@ (800bda4 <enableMicrophone+0xc8>)
 800bd36:	2201      	movs	r2, #1
 800bd38:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800bd3a:	4b15      	ldr	r3, [pc, #84]	@ (800bd90 <enableMicrophone+0xb4>)
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800bd40:	4b19      	ldr	r3, [pc, #100]	@ (800bda8 <enableMicrophone+0xcc>)
 800bd42:	2200      	movs	r2, #0
 800bd44:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800bd46:	4b19      	ldr	r3, [pc, #100]	@ (800bdac <enableMicrophone+0xd0>)
 800bd48:	2200      	movs	r2, #0
 800bd4a:	701a      	strb	r2, [r3, #0]
 800bd4c:	e01a      	b.n	800bd84 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800bd4e:	4b14      	ldr	r3, [pc, #80]	@ (800bda0 <enableMicrophone+0xc4>)
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	b25b      	sxtb	r3, r3
 800bd54:	0018      	movs	r0, r3
 800bd56:	f7ff fe5d 	bl	800ba14 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800bd5a:	4b12      	ldr	r3, [pc, #72]	@ (800bda4 <enableMicrophone+0xc8>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800bd60:	4b11      	ldr	r3, [pc, #68]	@ (800bda8 <enableMicrophone+0xcc>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800bd66:	4b11      	ldr	r3, [pc, #68]	@ (800bdac <enableMicrophone+0xd0>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800bd6c:	4b09      	ldr	r3, [pc, #36]	@ (800bd94 <enableMicrophone+0xb8>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	0018      	movs	r0, r3
 800bd72:	f006 fa67 	bl	8012244 <HAL_I2S_DMAStop>
 800bd76:	1e03      	subs	r3, r0, #0
 800bd78:	d001      	beq.n	800bd7e <enableMicrophone+0xa2>
        {
            return false;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	e003      	b.n	800bd86 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800bd7e:	4b04      	ldr	r3, [pc, #16]	@ (800bd90 <enableMicrophone+0xb4>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800bd84:	2301      	movs	r3, #1
}
 800bd86:	0018      	movs	r0, r3
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	b002      	add	sp, #8
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	46c0      	nop			@ (mov r8, r8)
 800bd90:	200012f1 	.word	0x200012f1
 800bd94:	20001d3c 	.word	0x20001d3c
 800bd98:	20001338 	.word	0x20001338
 800bd9c:	200012f8 	.word	0x200012f8
 800bda0:	20001d44 	.word	0x20001d44
 800bda4:	200012f3 	.word	0x200012f3
 800bda8:	200012f2 	.word	0x200012f2
 800bdac:	200012f4 	.word	0x200012f4

0800bdb0 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800bdb4:	4b0c      	ldr	r3, [pc, #48]	@ (800bde8 <startSPLcalculation+0x38>)
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	2201      	movs	r2, #1
 800bdbc:	4053      	eors	r3, r2
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d001      	beq.n	800bdc8 <startSPLcalculation+0x18>
    {
        return false;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	e00c      	b.n	800bde2 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800bdc8:	4b08      	ldr	r3, [pc, #32]	@ (800bdec <startSPLcalculation+0x3c>)
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d001      	beq.n	800bdd6 <startSPLcalculation+0x26>
    {
        return true;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e005      	b.n	800bde2 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800bdd6:	f000 fb63 	bl	800c4a0 <resetSPLstate>
    SPLcalcEnabled = true;
 800bdda:	4b04      	ldr	r3, [pc, #16]	@ (800bdec <startSPLcalculation+0x3c>)
 800bddc:	2201      	movs	r2, #1
 800bdde:	701a      	strb	r2, [r3, #0]
    return true;
 800bde0:	2301      	movs	r3, #1
}
 800bde2:	0018      	movs	r0, r3
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	200012f1 	.word	0x200012f1
 800bdec:	200012f2 	.word	0x200012f2

0800bdf0 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800bdf8:	4b05      	ldr	r3, [pc, #20]	@ (800be10 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d102      	bne.n	800be08 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800be02:	2000      	movs	r0, #0
 800be04:	f000 f81a 	bl	800be3c <processHalfDMAbuffer>
  }
}
 800be08:	46c0      	nop			@ (mov r8, r8)
 800be0a:	46bd      	mov	sp, r7
 800be0c:	b002      	add	sp, #8
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	20001d3c 	.word	0x20001d3c

0800be14 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800be1c:	4b06      	ldr	r3, [pc, #24]	@ (800be38 <HAL_I2S_RxCpltCallback+0x24>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	429a      	cmp	r2, r3
 800be24:	d104      	bne.n	800be30 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800be26:	2380      	movs	r3, #128	@ 0x80
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	0018      	movs	r0, r3
 800be2c:	f000 f806 	bl	800be3c <processHalfDMAbuffer>
  }
}
 800be30:	46c0      	nop			@ (mov r8, r8)
 800be32:	46bd      	mov	sp, r7
 800be34:	b002      	add	sp, #8
 800be36:	bd80      	pop	{r7, pc}
 800be38:	20001d3c 	.word	0x20001d3c

0800be3c <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	005a      	lsls	r2, r3, #1
 800be48:	4b15      	ldr	r3, [pc, #84]	@ (800bea0 <processHalfDMAbuffer+0x64>)
 800be4a:	18d3      	adds	r3, r2, r3
 800be4c:	4a15      	ldr	r2, [pc, #84]	@ (800bea4 <processHalfDMAbuffer+0x68>)
 800be4e:	2180      	movs	r1, #128	@ 0x80
 800be50:	0089      	lsls	r1, r1, #2
 800be52:	0018      	movs	r0, r3
 800be54:	f000 fd35 	bl	800c8c2 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800be58:	4b13      	ldr	r3, [pc, #76]	@ (800bea8 <processHalfDMAbuffer+0x6c>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	425a      	negs	r2, r3
 800be5e:	4153      	adcs	r3, r2
 800be60:	b2da      	uxtb	r2, r3
 800be62:	4b11      	ldr	r3, [pc, #68]	@ (800bea8 <processHalfDMAbuffer+0x6c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2109      	movs	r1, #9
 800be68:	4299      	cmp	r1, r3
 800be6a:	419b      	sbcs	r3, r3
 800be6c:	425b      	negs	r3, r3
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	480c      	ldr	r0, [pc, #48]	@ (800bea4 <processHalfDMAbuffer+0x68>)
 800be72:	2180      	movs	r1, #128	@ 0x80
 800be74:	f000 fb46 	bl	800c504 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800be78:	4b0b      	ldr	r3, [pc, #44]	@ (800bea8 <processHalfDMAbuffer+0x6c>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b09      	cmp	r3, #9
 800be7e:	d804      	bhi.n	800be8a <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800be80:	4b09      	ldr	r3, [pc, #36]	@ (800bea8 <processHalfDMAbuffer+0x6c>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	1c5a      	adds	r2, r3, #1
 800be86:	4b08      	ldr	r3, [pc, #32]	@ (800bea8 <processHalfDMAbuffer+0x6c>)
 800be88:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800be8a:	4b08      	ldr	r3, [pc, #32]	@ (800beac <processHalfDMAbuffer+0x70>)
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	2b00      	cmp	r3, #0
 800be92:	d001      	beq.n	800be98 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800be94:	f000 f826 	bl	800bee4 <calculateSPLQ31>
    }
}
 800be98:	46c0      	nop			@ (mov r8, r8)
 800be9a:	46bd      	mov	sp, r7
 800be9c:	b002      	add	sp, #8
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	20001338 	.word	0x20001338
 800bea4:	20001b38 	.word	0x20001b38
 800bea8:	200012f8 	.word	0x200012f8
 800beac:	200012f2 	.word	0x200012f2

0800beb0 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800beb8:	4b07      	ldr	r3, [pc, #28]	@ (800bed8 <HAL_I2S_ErrorCallback+0x28>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d106      	bne.n	800bed0 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800bec2:	4a06      	ldr	r2, [pc, #24]	@ (800bedc <HAL_I2S_ErrorCallback+0x2c>)
 800bec4:	239f      	movs	r3, #159	@ 0x9f
 800bec6:	0059      	lsls	r1, r3, #1
 800bec8:	4b05      	ldr	r3, [pc, #20]	@ (800bee0 <HAL_I2S_ErrorCallback+0x30>)
 800beca:	0018      	movs	r0, r3
 800becc:	f001 fdf8 	bl	800dac0 <errorHandler>
  }
}
 800bed0:	46c0      	nop			@ (mov r8, r8)
 800bed2:	46bd      	mov	sp, r7
 800bed4:	b002      	add	sp, #8
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	20001d3c 	.word	0x20001d3c
 800bedc:	08023c58 	.word	0x08023c58
 800bee0:	08024308 	.word	0x08024308

0800bee4 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800bee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bee6:	b0b3      	sub	sp, #204	@ 0xcc
 800bee8:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800beea:	4ae2      	ldr	r2, [pc, #904]	@ (800c274 <calculateSPLQ31+0x390>)
 800beec:	2338      	movs	r3, #56	@ 0x38
 800beee:	2030      	movs	r0, #48	@ 0x30
 800bef0:	181b      	adds	r3, r3, r0
 800bef2:	19d9      	adds	r1, r3, r7
 800bef4:	2334      	movs	r3, #52	@ 0x34
 800bef6:	181b      	adds	r3, r3, r0
 800bef8:	19d8      	adds	r0, r3, r7
 800befa:	2380      	movs	r3, #128	@ 0x80
 800befc:	f000 fc36 	bl	800c76c <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800bf00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	da00      	bge.n	800bf08 <calculateSPLQ31+0x24>
 800bf06:	3301      	adds	r3, #1
 800bf08:	105b      	asrs	r3, r3, #1
 800bf0a:	001a      	movs	r2, r3
 800bf0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	da00      	bge.n	800bf14 <calculateSPLQ31+0x30>
 800bf12:	3301      	adds	r3, #1
 800bf14:	105b      	asrs	r3, r3, #1
 800bf16:	18d3      	adds	r3, r2, r3
 800bf18:	2188      	movs	r1, #136	@ 0x88
 800bf1a:	187a      	adds	r2, r7, r1
 800bf1c:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800bf1e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bf20:	187b      	adds	r3, r7, r1
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	1ad3      	subs	r3, r2, r3
 800bf26:	3304      	adds	r3, #4
 800bf28:	2284      	movs	r2, #132	@ 0x84
 800bf2a:	18b9      	adds	r1, r7, r2
 800bf2c:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800bf2e:	18bb      	adds	r3, r7, r2
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4ad1      	ldr	r2, [pc, #836]	@ (800c278 <calculateSPLQ31+0x394>)
 800bf34:	0019      	movs	r1, r3
 800bf36:	0010      	movs	r0, r2
 800bf38:	f000 fc58 	bl	800c7ec <getPo2factor>
 800bf3c:	0003      	movs	r3, r0
 800bf3e:	2280      	movs	r2, #128	@ 0x80
 800bf40:	18ba      	adds	r2, r7, r2
 800bf42:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800bf44:	2300      	movs	r3, #0
 800bf46:	2284      	movs	r2, #132	@ 0x84
 800bf48:	2130      	movs	r1, #48	@ 0x30
 800bf4a:	1852      	adds	r2, r2, r1
 800bf4c:	19d2      	adds	r2, r2, r7
 800bf4e:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800bf50:	2300      	movs	r3, #0
 800bf52:	2280      	movs	r2, #128	@ 0x80
 800bf54:	1852      	adds	r2, r2, r1
 800bf56:	19d2      	adds	r2, r2, r7
 800bf58:	6013      	str	r3, [r2, #0]
 800bf5a:	e032      	b.n	800bfc2 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800bf5c:	4ac5      	ldr	r2, [pc, #788]	@ (800c274 <calculateSPLQ31+0x390>)
 800bf5e:	2680      	movs	r6, #128	@ 0x80
 800bf60:	2330      	movs	r3, #48	@ 0x30
 800bf62:	18f1      	adds	r1, r6, r3
 800bf64:	19cb      	adds	r3, r1, r7
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	589a      	ldr	r2, [r3, r2]
 800bf6c:	2188      	movs	r1, #136	@ 0x88
 800bf6e:	1879      	adds	r1, r7, r1
 800bf70:	680b      	ldr	r3, [r1, #0]
 800bf72:	1ad2      	subs	r2, r2, r3
 800bf74:	2180      	movs	r1, #128	@ 0x80
 800bf76:	1879      	adds	r1, r7, r1
 800bf78:	680b      	ldr	r3, [r1, #0]
 800bf7a:	409a      	lsls	r2, r3
 800bf7c:	0011      	movs	r1, r2
 800bf7e:	4abf      	ldr	r2, [pc, #764]	@ (800c27c <calculateSPLQ31+0x398>)
 800bf80:	2084      	movs	r0, #132	@ 0x84
 800bf82:	2330      	movs	r3, #48	@ 0x30
 800bf84:	18c3      	adds	r3, r0, r3
 800bf86:	19db      	adds	r3, r3, r7
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800bf8e:	2230      	movs	r2, #48	@ 0x30
 800bf90:	1883      	adds	r3, r0, r2
 800bf92:	19db      	adds	r3, r3, r7
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	3301      	adds	r3, #1
 800bf98:	49b8      	ldr	r1, [pc, #736]	@ (800c27c <calculateSPLQ31+0x398>)
 800bf9a:	009a      	lsls	r2, r3, #2
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	5053      	str	r3, [r2, r1]
        count += 2;
 800bfa0:	2230      	movs	r2, #48	@ 0x30
 800bfa2:	1883      	adds	r3, r0, r2
 800bfa4:	19db      	adds	r3, r3, r7
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	3302      	adds	r3, #2
 800bfaa:	0011      	movs	r1, r2
 800bfac:	1882      	adds	r2, r0, r2
 800bfae:	19d2      	adds	r2, r2, r7
 800bfb0:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800bfb2:	000a      	movs	r2, r1
 800bfb4:	18b3      	adds	r3, r6, r2
 800bfb6:	19db      	adds	r3, r3, r7
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	18b2      	adds	r2, r6, r2
 800bfbe:	19d2      	adds	r2, r2, r7
 800bfc0:	6013      	str	r3, [r2, #0]
 800bfc2:	2380      	movs	r3, #128	@ 0x80
 800bfc4:	2630      	movs	r6, #48	@ 0x30
 800bfc6:	199b      	adds	r3, r3, r6
 800bfc8:	19db      	adds	r3, r3, r7
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b7f      	cmp	r3, #127	@ 0x7f
 800bfce:	d9c5      	bls.n	800bf5c <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800bfd0:	4bab      	ldr	r3, [pc, #684]	@ (800c280 <calculateSPLQ31+0x39c>)
 800bfd2:	6818      	ldr	r0, [r3, #0]
 800bfd4:	49a9      	ldr	r1, [pc, #676]	@ (800c27c <calculateSPLQ31+0x398>)
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f010 fe8f 	bl	801ccfc <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800bfde:	4aa9      	ldr	r2, [pc, #676]	@ (800c284 <calculateSPLQ31+0x3a0>)
 800bfe0:	2338      	movs	r3, #56	@ 0x38
 800bfe2:	199b      	adds	r3, r3, r6
 800bfe4:	19d9      	adds	r1, r3, r7
 800bfe6:	2334      	movs	r3, #52	@ 0x34
 800bfe8:	199b      	adds	r3, r3, r6
 800bfea:	19d8      	adds	r0, r3, r7
 800bfec:	237e      	movs	r3, #126	@ 0x7e
 800bfee:	f000 fbbd 	bl	800c76c <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800bff2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bff4:	2380      	movs	r3, #128	@ 0x80
 800bff6:	061b      	lsls	r3, r3, #24
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d101      	bne.n	800c000 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800bffc:	4b9e      	ldr	r3, [pc, #632]	@ (800c278 <calculateSPLQ31+0x394>)
 800bffe:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c000:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c002:	2380      	movs	r3, #128	@ 0x80
 800c004:	061b      	lsls	r3, r3, #24
 800c006:	429a      	cmp	r2, r3
 800c008:	d101      	bne.n	800c00e <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c00a:	4b9b      	ldr	r3, [pc, #620]	@ (800c278 <calculateSPLQ31+0x394>)
 800c00c:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c00e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c010:	17da      	asrs	r2, r3, #31
 800c012:	189b      	adds	r3, r3, r2
 800c014:	4053      	eors	r3, r2
 800c016:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c018:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c01a:	17da      	asrs	r2, r3, #31
 800c01c:	189b      	adds	r3, r3, r2
 800c01e:	4053      	eors	r3, r2
 800c020:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c022:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c024:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c026:	429a      	cmp	r2, r3
 800c028:	dd01      	ble.n	800c02e <calculateSPLQ31+0x14a>
    {
        max = min;
 800c02a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c02c:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c02e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c030:	3304      	adds	r3, #4
 800c032:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c034:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c036:	4a90      	ldr	r2, [pc, #576]	@ (800c278 <calculateSPLQ31+0x394>)
 800c038:	0019      	movs	r1, r3
 800c03a:	0010      	movs	r0, r2
 800c03c:	f000 fbd6 	bl	800c7ec <getPo2factor>
 800c040:	0003      	movs	r3, r0
 800c042:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800c044:	2302      	movs	r3, #2
 800c046:	22ac      	movs	r2, #172	@ 0xac
 800c048:	18ba      	adds	r2, r7, r2
 800c04a:	6013      	str	r3, [r2, #0]
 800c04c:	e012      	b.n	800c074 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800c04e:	4a8b      	ldr	r2, [pc, #556]	@ (800c27c <calculateSPLQ31+0x398>)
 800c050:	20ac      	movs	r0, #172	@ 0xac
 800c052:	183b      	adds	r3, r7, r0
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	589a      	ldr	r2, [r3, r2]
 800c05a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c05c:	409a      	lsls	r2, r3
 800c05e:	0011      	movs	r1, r2
 800c060:	4a86      	ldr	r2, [pc, #536]	@ (800c27c <calculateSPLQ31+0x398>)
 800c062:	183b      	adds	r3, r7, r0
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800c06a:	183b      	adds	r3, r7, r0
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	3301      	adds	r3, #1
 800c070:	183a      	adds	r2, r7, r0
 800c072:	6013      	str	r3, [r2, #0]
 800c074:	23ac      	movs	r3, #172	@ 0xac
 800c076:	18fb      	adds	r3, r7, r3
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c07c:	d9e7      	bls.n	800c04e <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800c07e:	4b7d      	ldr	r3, [pc, #500]	@ (800c274 <calculateSPLQ31+0x390>)
 800c080:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800c082:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c084:	4b7d      	ldr	r3, [pc, #500]	@ (800c27c <calculateSPLQ31+0x398>)
 800c086:	2240      	movs	r2, #64	@ 0x40
 800c088:	0018      	movs	r0, r3
 800c08a:	f011 fbe1 	bl	801d850 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800c08e:	2330      	movs	r3, #48	@ 0x30
 800c090:	18fb      	adds	r3, r7, r3
 800c092:	0018      	movs	r0, r3
 800c094:	2330      	movs	r3, #48	@ 0x30
 800c096:	001a      	movs	r2, r3
 800c098:	2100      	movs	r1, #0
 800c09a:	f013 f9fd 	bl	801f498 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800c09e:	2200      	movs	r2, #0
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	21a0      	movs	r1, #160	@ 0xa0
 800c0a4:	1879      	adds	r1, r7, r1
 800c0a6:	600a      	str	r2, [r1, #0]
 800c0a8:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	229c      	movs	r2, #156	@ 0x9c
 800c0ae:	18ba      	adds	r2, r7, r2
 800c0b0:	6013      	str	r3, [r2, #0]
 800c0b2:	e05b      	b.n	800c16c <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800c0b4:	269c      	movs	r6, #156	@ 0x9c
 800c0b6:	19bb      	adds	r3, r7, r6
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	009a      	lsls	r2, r3, #2
 800c0bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c0be:	189b      	adds	r3, r3, r2
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	613b      	str	r3, [r7, #16]
 800c0c4:	17db      	asrs	r3, r3, #31
 800c0c6:	617b      	str	r3, [r7, #20]
 800c0c8:	4b6f      	ldr	r3, [pc, #444]	@ (800c288 <calculateSPLQ31+0x3a4>)
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	19bb      	adds	r3, r7, r6
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	005b      	lsls	r3, r3, #1
 800c0d2:	18d3      	adds	r3, r2, r3
 800c0d4:	881b      	ldrh	r3, [r3, #0]
 800c0d6:	60bb      	str	r3, [r7, #8]
 800c0d8:	2300      	movs	r3, #0
 800c0da:	60fb      	str	r3, [r7, #12]
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6938      	ldr	r0, [r7, #16]
 800c0e2:	6979      	ldr	r1, [r7, #20]
 800c0e4:	f7f4 fa6c 	bl	80005c0 <__aeabi_lmul>
 800c0e8:	0002      	movs	r2, r0
 800c0ea:	000b      	movs	r3, r1
 800c0ec:	0010      	movs	r0, r2
 800c0ee:	0019      	movs	r1, r3
 800c0f0:	23a0      	movs	r3, #160	@ 0xa0
 800c0f2:	18fa      	adds	r2, r7, r3
 800c0f4:	6853      	ldr	r3, [r2, #4]
 800c0f6:	6812      	ldr	r2, [r2, #0]
 800c0f8:	1812      	adds	r2, r2, r0
 800c0fa:	414b      	adcs	r3, r1
 800c0fc:	21a0      	movs	r1, #160	@ 0xa0
 800c0fe:	1879      	adds	r1, r7, r1
 800c100:	600a      	str	r2, [r1, #0]
 800c102:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800c104:	4b61      	ldr	r3, [pc, #388]	@ (800c28c <calculateSPLQ31+0x3a8>)
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	19bb      	adds	r3, r7, r6
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	18d3      	adds	r3, r2, r3
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	2b06      	cmp	r3, #6
 800c112:	d025      	beq.n	800c160 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800c114:	4b5d      	ldr	r3, [pc, #372]	@ (800c28c <calculateSPLQ31+0x3a8>)
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	19bb      	adds	r3, r7, r6
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	18d3      	adds	r3, r2, r3
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	2230      	movs	r2, #48	@ 0x30
 800c122:	18ba      	adds	r2, r7, r2
 800c124:	00db      	lsls	r3, r3, #3
 800c126:	18d3      	adds	r3, r2, r3
 800c128:	6818      	ldr	r0, [r3, #0]
 800c12a:	6859      	ldr	r1, [r3, #4]
 800c12c:	19bb      	adds	r3, r7, r6
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	009a      	lsls	r2, r3, #2
 800c132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c134:	189b      	adds	r3, r3, r2
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	603b      	str	r3, [r7, #0]
 800c13a:	17db      	asrs	r3, r3, #31
 800c13c:	607b      	str	r3, [r7, #4]
 800c13e:	4b53      	ldr	r3, [pc, #332]	@ (800c28c <calculateSPLQ31+0x3a8>)
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	19be      	adds	r6, r7, r6
 800c144:	6833      	ldr	r3, [r6, #0]
 800c146:	18d3      	adds	r3, r2, r3
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	001e      	movs	r6, r3
 800c14c:	683a      	ldr	r2, [r7, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	1880      	adds	r0, r0, r2
 800c152:	4159      	adcs	r1, r3
 800c154:	2330      	movs	r3, #48	@ 0x30
 800c156:	18fa      	adds	r2, r7, r3
 800c158:	00f3      	lsls	r3, r6, #3
 800c15a:	18d3      	adds	r3, r2, r3
 800c15c:	6018      	str	r0, [r3, #0]
 800c15e:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c160:	229c      	movs	r2, #156	@ 0x9c
 800c162:	18bb      	adds	r3, r7, r2
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	3301      	adds	r3, #1
 800c168:	18ba      	adds	r2, r7, r2
 800c16a:	6013      	str	r3, [r2, #0]
 800c16c:	239c      	movs	r3, #156	@ 0x9c
 800c16e:	18fb      	adds	r3, r7, r3
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2b3f      	cmp	r3, #63	@ 0x3f
 800c174:	d99e      	bls.n	800c0b4 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800c176:	2380      	movs	r3, #128	@ 0x80
 800c178:	18fb      	adds	r3, r7, r3
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	005b      	lsls	r3, r3, #1
 800c17e:	001a      	movs	r2, r3
 800c180:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c182:	005b      	lsls	r3, r3, #1
 800c184:	18d3      	adds	r3, r2, r3
 800c186:	3b22      	subs	r3, #34	@ 0x22
 800c188:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c18a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c18c:	17da      	asrs	r2, r3, #31
 800c18e:	189b      	adds	r3, r3, r2
 800c190:	4053      	eors	r3, r2
 800c192:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c194:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c196:	2b00      	cmp	r3, #0
 800c198:	da62      	bge.n	800c260 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c19a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c19c:	3b20      	subs	r3, #32
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	db05      	blt.n	800c1ae <calculateSPLQ31+0x2ca>
 800c1a2:	22a0      	movs	r2, #160	@ 0xa0
 800c1a4:	18ba      	adds	r2, r7, r2
 800c1a6:	6812      	ldr	r2, [r2, #0]
 800c1a8:	409a      	lsls	r2, r3
 800c1aa:	627a      	str	r2, [r7, #36]	@ 0x24
 800c1ac:	e010      	b.n	800c1d0 <calculateSPLQ31+0x2ec>
 800c1ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1b0:	2220      	movs	r2, #32
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	22a0      	movs	r2, #160	@ 0xa0
 800c1b6:	18ba      	adds	r2, r7, r2
 800c1b8:	6812      	ldr	r2, [r2, #0]
 800c1ba:	40da      	lsrs	r2, r3
 800c1bc:	0013      	movs	r3, r2
 800c1be:	22a4      	movs	r2, #164	@ 0xa4
 800c1c0:	18ba      	adds	r2, r7, r2
 800c1c2:	6811      	ldr	r1, [r2, #0]
 800c1c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c1c6:	4091      	lsls	r1, r2
 800c1c8:	6279      	str	r1, [r7, #36]	@ 0x24
 800c1ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1cc:	431a      	orrs	r2, r3
 800c1ce:	627a      	str	r2, [r7, #36]	@ 0x24
 800c1d0:	21a0      	movs	r1, #160	@ 0xa0
 800c1d2:	187b      	adds	r3, r7, r1
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1d8:	409a      	lsls	r2, r3
 800c1da:	623a      	str	r2, [r7, #32]
 800c1dc:	6a3b      	ldr	r3, [r7, #32]
 800c1de:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c1e0:	187a      	adds	r2, r7, r1
 800c1e2:	6013      	str	r3, [r2, #0]
 800c1e4:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	2298      	movs	r2, #152	@ 0x98
 800c1ea:	18ba      	adds	r2, r7, r2
 800c1ec:	6013      	str	r3, [r2, #0]
 800c1ee:	e031      	b.n	800c254 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c1f0:	2330      	movs	r3, #48	@ 0x30
 800c1f2:	18fa      	adds	r2, r7, r3
 800c1f4:	2398      	movs	r3, #152	@ 0x98
 800c1f6:	18fb      	adds	r3, r7, r3
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	00db      	lsls	r3, r3, #3
 800c1fc:	18d3      	adds	r3, r2, r3
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c204:	3920      	subs	r1, #32
 800c206:	2900      	cmp	r1, #0
 800c208:	db03      	blt.n	800c212 <calculateSPLQ31+0x32e>
 800c20a:	0010      	movs	r0, r2
 800c20c:	4088      	lsls	r0, r1
 800c20e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c210:	e00c      	b.n	800c22c <calculateSPLQ31+0x348>
 800c212:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c214:	2020      	movs	r0, #32
 800c216:	1a41      	subs	r1, r0, r1
 800c218:	0010      	movs	r0, r2
 800c21a:	40c8      	lsrs	r0, r1
 800c21c:	0001      	movs	r1, r0
 800c21e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c220:	001c      	movs	r4, r3
 800c222:	4084      	lsls	r4, r0
 800c224:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c226:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c228:	4308      	orrs	r0, r1
 800c22a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c22c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c22e:	0013      	movs	r3, r2
 800c230:	408b      	lsls	r3, r1
 800c232:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c234:	2330      	movs	r3, #48	@ 0x30
 800c236:	18fa      	adds	r2, r7, r3
 800c238:	2098      	movs	r0, #152	@ 0x98
 800c23a:	183b      	adds	r3, r7, r0
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	18d3      	adds	r3, r2, r3
 800c242:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c244:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c246:	6019      	str	r1, [r3, #0]
 800c248:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c24a:	183b      	adds	r3, r7, r0
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	3301      	adds	r3, #1
 800c250:	183a      	adds	r2, r7, r0
 800c252:	6013      	str	r3, [r2, #0]
 800c254:	2398      	movs	r3, #152	@ 0x98
 800c256:	18fb      	adds	r3, r7, r3
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b05      	cmp	r3, #5
 800c25c:	d9c8      	bls.n	800c1f0 <calculateSPLQ31+0x30c>
 800c25e:	e06b      	b.n	800c338 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800c260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c262:	3b20      	subs	r3, #32
 800c264:	2b00      	cmp	r3, #0
 800c266:	db13      	blt.n	800c290 <calculateSPLQ31+0x3ac>
 800c268:	22a4      	movs	r2, #164	@ 0xa4
 800c26a:	18ba      	adds	r2, r7, r2
 800c26c:	6812      	ldr	r2, [r2, #0]
 800c26e:	40da      	lsrs	r2, r3
 800c270:	61ba      	str	r2, [r7, #24]
 800c272:	e01e      	b.n	800c2b2 <calculateSPLQ31+0x3ce>
 800c274:	20001b38 	.word	0x20001b38
 800c278:	7fffffff 	.word	0x7fffffff
 800c27c:	20001d84 	.word	0x20001d84
 800c280:	200000b0 	.word	0x200000b0
 800c284:	20001d8c 	.word	0x20001d8c
 800c288:	200000b4 	.word	0x200000b4
 800c28c:	200000c0 	.word	0x200000c0
 800c290:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c292:	2220      	movs	r2, #32
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	22a4      	movs	r2, #164	@ 0xa4
 800c298:	18ba      	adds	r2, r7, r2
 800c29a:	6812      	ldr	r2, [r2, #0]
 800c29c:	409a      	lsls	r2, r3
 800c29e:	0013      	movs	r3, r2
 800c2a0:	22a0      	movs	r2, #160	@ 0xa0
 800c2a2:	18ba      	adds	r2, r7, r2
 800c2a4:	6811      	ldr	r1, [r2, #0]
 800c2a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c2a8:	40d1      	lsrs	r1, r2
 800c2aa:	61b9      	str	r1, [r7, #24]
 800c2ac:	69ba      	ldr	r2, [r7, #24]
 800c2ae:	431a      	orrs	r2, r3
 800c2b0:	61ba      	str	r2, [r7, #24]
 800c2b2:	23a4      	movs	r3, #164	@ 0xa4
 800c2b4:	18fb      	adds	r3, r7, r3
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2ba:	40da      	lsrs	r2, r3
 800c2bc:	61fa      	str	r2, [r7, #28]
 800c2be:	69ba      	ldr	r2, [r7, #24]
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	21a0      	movs	r1, #160	@ 0xa0
 800c2c4:	1879      	adds	r1, r7, r1
 800c2c6:	600a      	str	r2, [r1, #0]
 800c2c8:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	2294      	movs	r2, #148	@ 0x94
 800c2ce:	18ba      	adds	r2, r7, r2
 800c2d0:	6013      	str	r3, [r2, #0]
 800c2d2:	e02c      	b.n	800c32e <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800c2d4:	2330      	movs	r3, #48	@ 0x30
 800c2d6:	18fa      	adds	r2, r7, r3
 800c2d8:	2394      	movs	r3, #148	@ 0x94
 800c2da:	18fb      	adds	r3, r7, r3
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	18d3      	adds	r3, r2, r3
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c2e8:	3920      	subs	r1, #32
 800c2ea:	2900      	cmp	r1, #0
 800c2ec:	db03      	blt.n	800c2f6 <calculateSPLQ31+0x412>
 800c2ee:	0018      	movs	r0, r3
 800c2f0:	40c8      	lsrs	r0, r1
 800c2f2:	0004      	movs	r4, r0
 800c2f4:	e00a      	b.n	800c30c <calculateSPLQ31+0x428>
 800c2f6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c2f8:	2020      	movs	r0, #32
 800c2fa:	1a41      	subs	r1, r0, r1
 800c2fc:	0018      	movs	r0, r3
 800c2fe:	4088      	lsls	r0, r1
 800c300:	0001      	movs	r1, r0
 800c302:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c304:	0016      	movs	r6, r2
 800c306:	40c6      	lsrs	r6, r0
 800c308:	0034      	movs	r4, r6
 800c30a:	430c      	orrs	r4, r1
 800c30c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c30e:	40cb      	lsrs	r3, r1
 800c310:	001d      	movs	r5, r3
 800c312:	2330      	movs	r3, #48	@ 0x30
 800c314:	18fa      	adds	r2, r7, r3
 800c316:	2194      	movs	r1, #148	@ 0x94
 800c318:	187b      	adds	r3, r7, r1
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	00db      	lsls	r3, r3, #3
 800c31e:	18d3      	adds	r3, r2, r3
 800c320:	601c      	str	r4, [r3, #0]
 800c322:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c324:	187b      	adds	r3, r7, r1
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	3301      	adds	r3, #1
 800c32a:	187a      	adds	r2, r7, r1
 800c32c:	6013      	str	r3, [r2, #0]
 800c32e:	2394      	movs	r3, #148	@ 0x94
 800c330:	18fb      	adds	r3, r7, r3
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2b05      	cmp	r3, #5
 800c336:	d9cd      	bls.n	800c2d4 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800c338:	230f      	movs	r3, #15
 800c33a:	425d      	negs	r5, r3
 800c33c:	2305      	movs	r3, #5
 800c33e:	425e      	negs	r6, r3
 800c340:	4b4a      	ldr	r3, [pc, #296]	@ (800c46c <calculateSPLQ31+0x588>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	4b4a      	ldr	r3, [pc, #296]	@ (800c470 <calculateSPLQ31+0x58c>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	21a0      	movs	r1, #160	@ 0xa0
 800c34e:	1879      	adds	r1, r7, r1
 800c350:	6808      	ldr	r0, [r1, #0]
 800c352:	6849      	ldr	r1, [r1, #4]
 800c354:	4c47      	ldr	r4, [pc, #284]	@ (800c474 <calculateSPLQ31+0x590>)
 800c356:	9403      	str	r4, [sp, #12]
 800c358:	4c47      	ldr	r4, [pc, #284]	@ (800c478 <calculateSPLQ31+0x594>)
 800c35a:	9402      	str	r4, [sp, #8]
 800c35c:	9301      	str	r3, [sp, #4]
 800c35e:	9200      	str	r2, [sp, #0]
 800c360:	0033      	movs	r3, r6
 800c362:	002a      	movs	r2, r5
 800c364:	f000 fa86 	bl	800c874 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c368:	2300      	movs	r3, #0
 800c36a:	2290      	movs	r2, #144	@ 0x90
 800c36c:	18ba      	adds	r2, r7, r2
 800c36e:	6013      	str	r3, [r2, #0]
 800c370:	e026      	b.n	800c3c0 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800c372:	2330      	movs	r3, #48	@ 0x30
 800c374:	18fa      	adds	r2, r7, r3
 800c376:	2490      	movs	r4, #144	@ 0x90
 800c378:	193b      	adds	r3, r7, r4
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	00db      	lsls	r3, r3, #3
 800c37e:	18d3      	adds	r3, r2, r3
 800c380:	6818      	ldr	r0, [r3, #0]
 800c382:	6859      	ldr	r1, [r3, #4]
 800c384:	230f      	movs	r3, #15
 800c386:	425d      	negs	r5, r3
 800c388:	2305      	movs	r3, #5
 800c38a:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800c38c:	193b      	adds	r3, r7, r4
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	009a      	lsls	r2, r3, #2
 800c392:	4b3a      	ldr	r3, [pc, #232]	@ (800c47c <calculateSPLQ31+0x598>)
 800c394:	18d3      	adds	r3, r2, r3
 800c396:	193a      	adds	r2, r7, r4
 800c398:	6812      	ldr	r2, [r2, #0]
 800c39a:	0094      	lsls	r4, r2, #2
 800c39c:	4a38      	ldr	r2, [pc, #224]	@ (800c480 <calculateSPLQ31+0x59c>)
 800c39e:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800c3a0:	9203      	str	r2, [sp, #12]
 800c3a2:	9302      	str	r3, [sp, #8]
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	0033      	movs	r3, r6
 800c3ae:	002a      	movs	r2, r5
 800c3b0:	f000 fa60 	bl	800c874 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c3b4:	2490      	movs	r4, #144	@ 0x90
 800c3b6:	193b      	adds	r3, r7, r4
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	193a      	adds	r2, r7, r4
 800c3be:	6013      	str	r3, [r2, #0]
 800c3c0:	2390      	movs	r3, #144	@ 0x90
 800c3c2:	18fb      	adds	r3, r7, r3
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	2b05      	cmp	r3, #5
 800c3c8:	d9d3      	bls.n	800c372 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800c3ca:	4b2b      	ldr	r3, [pc, #172]	@ (800c478 <calculateSPLQ31+0x594>)
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	4b2d      	ldr	r3, [pc, #180]	@ (800c484 <calculateSPLQ31+0x5a0>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	18d2      	adds	r2, r2, r3
 800c3d4:	4b2b      	ldr	r3, [pc, #172]	@ (800c484 <calculateSPLQ31+0x5a0>)
 800c3d6:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800c3d8:	4b26      	ldr	r3, [pc, #152]	@ (800c474 <calculateSPLQ31+0x590>)
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	4b2a      	ldr	r3, [pc, #168]	@ (800c488 <calculateSPLQ31+0x5a4>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	18d2      	adds	r2, r2, r3
 800c3e2:	4b29      	ldr	r3, [pc, #164]	@ (800c488 <calculateSPLQ31+0x5a4>)
 800c3e4:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	228c      	movs	r2, #140	@ 0x8c
 800c3ea:	18ba      	adds	r2, r7, r2
 800c3ec:	6013      	str	r3, [r2, #0]
 800c3ee:	e025      	b.n	800c43c <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800c3f0:	4b22      	ldr	r3, [pc, #136]	@ (800c47c <calculateSPLQ31+0x598>)
 800c3f2:	208c      	movs	r0, #140	@ 0x8c
 800c3f4:	183a      	adds	r2, r7, r0
 800c3f6:	6812      	ldr	r2, [r2, #0]
 800c3f8:	0092      	lsls	r2, r2, #2
 800c3fa:	58d2      	ldr	r2, [r2, r3]
 800c3fc:	4b23      	ldr	r3, [pc, #140]	@ (800c48c <calculateSPLQ31+0x5a8>)
 800c3fe:	1839      	adds	r1, r7, r0
 800c400:	6809      	ldr	r1, [r1, #0]
 800c402:	0089      	lsls	r1, r1, #2
 800c404:	58cb      	ldr	r3, [r1, r3]
 800c406:	18d1      	adds	r1, r2, r3
 800c408:	4b20      	ldr	r3, [pc, #128]	@ (800c48c <calculateSPLQ31+0x5a8>)
 800c40a:	183a      	adds	r2, r7, r0
 800c40c:	6812      	ldr	r2, [r2, #0]
 800c40e:	0092      	lsls	r2, r2, #2
 800c410:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800c412:	4b1b      	ldr	r3, [pc, #108]	@ (800c480 <calculateSPLQ31+0x59c>)
 800c414:	183a      	adds	r2, r7, r0
 800c416:	6812      	ldr	r2, [r2, #0]
 800c418:	0092      	lsls	r2, r2, #2
 800c41a:	58d2      	ldr	r2, [r2, r3]
 800c41c:	4b1c      	ldr	r3, [pc, #112]	@ (800c490 <calculateSPLQ31+0x5ac>)
 800c41e:	1839      	adds	r1, r7, r0
 800c420:	6809      	ldr	r1, [r1, #0]
 800c422:	0089      	lsls	r1, r1, #2
 800c424:	58cb      	ldr	r3, [r1, r3]
 800c426:	18d1      	adds	r1, r2, r3
 800c428:	4b19      	ldr	r3, [pc, #100]	@ (800c490 <calculateSPLQ31+0x5ac>)
 800c42a:	183a      	adds	r2, r7, r0
 800c42c:	6812      	ldr	r2, [r2, #0]
 800c42e:	0092      	lsls	r2, r2, #2
 800c430:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c432:	183b      	adds	r3, r7, r0
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	3301      	adds	r3, #1
 800c438:	183a      	adds	r2, r7, r0
 800c43a:	6013      	str	r3, [r2, #0]
 800c43c:	238c      	movs	r3, #140	@ 0x8c
 800c43e:	18fb      	adds	r3, r7, r3
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2b05      	cmp	r3, #5
 800c444:	d9d4      	bls.n	800c3f0 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800c446:	4b13      	ldr	r3, [pc, #76]	@ (800c494 <calculateSPLQ31+0x5b0>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	1c5a      	adds	r2, r3, #1
 800c44c:	4b11      	ldr	r3, [pc, #68]	@ (800c494 <calculateSPLQ31+0x5b0>)
 800c44e:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800c450:	4b10      	ldr	r3, [pc, #64]	@ (800c494 <calculateSPLQ31+0x5b0>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	2b0f      	cmp	r3, #15
 800c456:	d905      	bls.n	800c464 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800c458:	4b0f      	ldr	r3, [pc, #60]	@ (800c498 <calculateSPLQ31+0x5b4>)
 800c45a:	2201      	movs	r2, #1
 800c45c:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c45e:	4b0f      	ldr	r3, [pc, #60]	@ (800c49c <calculateSPLQ31+0x5b8>)
 800c460:	2200      	movs	r2, #0
 800c462:	701a      	strb	r2, [r3, #0]
    }
}
 800c464:	46c0      	nop			@ (mov r8, r8)
 800c466:	46bd      	mov	sp, r7
 800c468:	b02f      	add	sp, #188	@ 0xbc
 800c46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c46c:	200000b8 	.word	0x200000b8
 800c470:	200000bc 	.word	0x200000bc
 800c474:	20001304 	.word	0x20001304
 800c478:	20001300 	.word	0x20001300
 800c47c:	20001308 	.word	0x20001308
 800c480:	20001320 	.word	0x20001320
 800c484:	20001d48 	.word	0x20001d48
 800c488:	20001d4c 	.word	0x20001d4c
 800c48c:	20001d50 	.word	0x20001d50
 800c490:	20001d68 	.word	0x20001d68
 800c494:	20001d80 	.word	0x20001d80
 800c498:	200012f4 	.word	0x200012f4
 800c49c:	200012f2 	.word	0x200012f2

0800c4a0 <resetSPLstate>:

static void resetSPLstate(void)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800c4a6:	4b11      	ldr	r3, [pc, #68]	@ (800c4ec <resetSPLstate+0x4c>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800c4ac:	4b10      	ldr	r3, [pc, #64]	@ (800c4f0 <resetSPLstate+0x50>)
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800c4b2:	4b10      	ldr	r3, [pc, #64]	@ (800c4f4 <resetSPLstate+0x54>)
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	607b      	str	r3, [r7, #4]
 800c4bc:	e00c      	b.n	800c4d8 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800c4be:	4b0e      	ldr	r3, [pc, #56]	@ (800c4f8 <resetSPLstate+0x58>)
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	0092      	lsls	r2, r2, #2
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800c4c8:	4b0c      	ldr	r3, [pc, #48]	@ (800c4fc <resetSPLstate+0x5c>)
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	0092      	lsls	r2, r2, #2
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	607b      	str	r3, [r7, #4]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2b05      	cmp	r3, #5
 800c4dc:	d9ef      	bls.n	800c4be <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800c4de:	4b08      	ldr	r3, [pc, #32]	@ (800c500 <resetSPLstate+0x60>)
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	701a      	strb	r2, [r3, #0]
}
 800c4e4:	46c0      	nop			@ (mov r8, r8)
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	b002      	add	sp, #8
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	20001d48 	.word	0x20001d48
 800c4f0:	20001d4c 	.word	0x20001d4c
 800c4f4:	20001d80 	.word	0x20001d80
 800c4f8:	20001d50 	.word	0x20001d50
 800c4fc:	20001d68 	.word	0x20001d68
 800c500:	200012f4 	.word	0x200012f4

0800c504 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800c504:	b5b0      	push	{r4, r5, r7, lr}
 800c506:	b090      	sub	sp, #64	@ 0x40
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	0019      	movs	r1, r3
 800c510:	1dfb      	adds	r3, r7, #7
 800c512:	701a      	strb	r2, [r3, #0]
 800c514:	1dbb      	adds	r3, r7, #6
 800c516:	1c0a      	adds	r2, r1, #0
 800c518:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800c51a:	1dfb      	adds	r3, r7, #7
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d005      	beq.n	800c52e <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800c522:	4b3b      	ldr	r3, [pc, #236]	@ (800c610 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c524:	2200      	movs	r2, #0
 800c526:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800c528:	4b3a      	ldr	r3, [pc, #232]	@ (800c614 <getFilteredMaxAmplitudeQ31+0x110>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800c52e:	2300      	movs	r3, #0
 800c530:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800c532:	2300      	movs	r3, #0
 800c534:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800c536:	2305      	movs	r3, #5
 800c538:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800c53a:	2300      	movs	r3, #0
 800c53c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c53e:	e040      	b.n	800c5c2 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800c540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	18d3      	adds	r3, r2, r3
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c54c:	409a      	lsls	r2, r3
 800c54e:	0013      	movs	r3, r2
 800c550:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800c552:	4b30      	ldr	r3, [pc, #192]	@ (800c614 <getFilteredMaxAmplitudeQ31+0x110>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	425a      	negs	r2, r3
 800c558:	4b2e      	ldr	r3, [pc, #184]	@ (800c614 <getFilteredMaxAmplitudeQ31+0x110>)
 800c55a:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800c55c:	2418      	movs	r4, #24
 800c55e:	193a      	adds	r2, r7, r4
 800c560:	492c      	ldr	r1, [pc, #176]	@ (800c614 <getFilteredMaxAmplitudeQ31+0x110>)
 800c562:	231c      	movs	r3, #28
 800c564:	18f8      	adds	r0, r7, r3
 800c566:	2301      	movs	r3, #1
 800c568:	f011 f9ca 	bl	801d900 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800c56c:	2514      	movs	r5, #20
 800c56e:	197a      	adds	r2, r7, r5
 800c570:	1939      	adds	r1, r7, r4
 800c572:	4829      	ldr	r0, [pc, #164]	@ (800c618 <getFilteredMaxAmplitudeQ31+0x114>)
 800c574:	2301      	movs	r3, #1
 800c576:	f011 f991 	bl	801d89c <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800c57a:	2410      	movs	r4, #16
 800c57c:	193a      	adds	r2, r7, r4
 800c57e:	4924      	ldr	r1, [pc, #144]	@ (800c610 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c580:	4826      	ldr	r0, [pc, #152]	@ (800c61c <getFilteredMaxAmplitudeQ31+0x118>)
 800c582:	2301      	movs	r3, #1
 800c584:	f011 f98a 	bl	801d89c <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800c588:	4a21      	ldr	r2, [pc, #132]	@ (800c610 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c58a:	1939      	adds	r1, r7, r4
 800c58c:	1978      	adds	r0, r7, r5
 800c58e:	2301      	movs	r3, #1
 800c590:	f011 f9b6 	bl	801d900 <arm_add_q31>

        lastData = fx;
 800c594:	69fa      	ldr	r2, [r7, #28]
 800c596:	4b1f      	ldr	r3, [pc, #124]	@ (800c614 <getFilteredMaxAmplitudeQ31+0x110>)
 800c598:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800c59a:	4b1d      	ldr	r3, [pc, #116]	@ (800c610 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	da03      	bge.n	800c5ac <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800c5a4:	4b1a      	ldr	r3, [pc, #104]	@ (800c610 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5aa:	e007      	b.n	800c5bc <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800c5ac:	4b18      	ldr	r3, [pc, #96]	@ (800c610 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	dd02      	ble.n	800c5bc <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800c5b6:	4b16      	ldr	r3, [pc, #88]	@ (800c610 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800c5bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5be:	3301      	adds	r3, #1
 800c5c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d3ba      	bcc.n	800c540 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800c5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5cc:	17da      	asrs	r2, r3, #31
 800c5ce:	189b      	adds	r3, r3, r2
 800c5d0:	4053      	eors	r3, r2
 800c5d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800c5d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800c5d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d200      	bcs.n	800c5e2 <getFilteredMaxAmplitudeQ31+0xde>
 800c5e0:	0013      	movs	r3, r2
 800c5e2:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800c5e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e8:	40da      	lsrs	r2, r3
 800c5ea:	0013      	movs	r3, r2
 800c5ec:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800c5ee:	1dbb      	adds	r3, r7, #6
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d007      	beq.n	800c606 <getFilteredMaxAmplitudeQ31+0x102>
 800c5f6:	4b0a      	ldr	r3, [pc, #40]	@ (800c620 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	6a3a      	ldr	r2, [r7, #32]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d902      	bls.n	800c606 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800c600:	4b07      	ldr	r3, [pc, #28]	@ (800c620 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c602:	6a3a      	ldr	r2, [r7, #32]
 800c604:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800c606:	6a3b      	ldr	r3, [r7, #32]
}
 800c608:	0018      	movs	r0, r3
 800c60a:	46bd      	mov	sp, r7
 800c60c:	b010      	add	sp, #64	@ 0x40
 800c60e:	bdb0      	pop	{r4, r5, r7, pc}
 800c610:	20002184 	.word	0x20002184
 800c614:	20002188 	.word	0x20002188
 800c618:	08024300 	.word	0x08024300
 800c61c:	08024304 	.word	0x08024304
 800c620:	200012fc 	.word	0x200012fc

0800c624 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800c630:	4913      	ldr	r1, [pc, #76]	@ (800c680 <floatToIntAndFrac2dp+0x5c>)
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f7f4 fcb4 	bl	8000fa0 <__aeabi_fmul>
 800c638:	1c03      	adds	r3, r0, #0
 800c63a:	1c18      	adds	r0, r3, #0
 800c63c:	f015 fd94 	bl	8022168 <roundf>
 800c640:	1c03      	adds	r3, r0, #0
 800c642:	1c18      	adds	r0, r3, #0
 800c644:	f7f3 ffea 	bl	800061c <__aeabi_f2uiz>
 800c648:	0003      	movs	r3, r0
 800c64a:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	2164      	movs	r1, #100	@ 0x64
 800c650:	0018      	movs	r0, r3
 800c652:	f7f3 fda7 	bl	80001a4 <__udivsi3>
 800c656:	0003      	movs	r3, r0
 800c658:	001a      	movs	r2, r3
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	b2da      	uxtb	r2, r3
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	b2db      	uxtb	r3, r3
 800c668:	2164      	movs	r1, #100	@ 0x64
 800c66a:	434b      	muls	r3, r1
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	1ad3      	subs	r3, r2, r3
 800c670:	b2da      	uxtb	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	701a      	strb	r2, [r3, #0]
}
 800c676:	46c0      	nop			@ (mov r8, r8)
 800c678:	46bd      	mov	sp, r7
 800c67a:	b006      	add	sp, #24
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	46c0      	nop			@ (mov r8, r8)
 800c680:	42c80000 	.word	0x42c80000

0800c684 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800c690:	4914      	ldr	r1, [pc, #80]	@ (800c6e4 <floatToIntAndFrac1dp+0x60>)
 800c692:	68f8      	ldr	r0, [r7, #12]
 800c694:	f7f4 fc84 	bl	8000fa0 <__aeabi_fmul>
 800c698:	1c03      	adds	r3, r0, #0
 800c69a:	1c18      	adds	r0, r3, #0
 800c69c:	f015 fd64 	bl	8022168 <roundf>
 800c6a0:	1c03      	adds	r3, r0, #0
 800c6a2:	1c18      	adds	r0, r3, #0
 800c6a4:	f7f3 ffba 	bl	800061c <__aeabi_f2uiz>
 800c6a8:	0003      	movs	r3, r0
 800c6aa:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	210a      	movs	r1, #10
 800c6b0:	0018      	movs	r0, r3
 800c6b2:	f7f3 fd77 	bl	80001a4 <__udivsi3>
 800c6b6:	0003      	movs	r3, r0
 800c6b8:	001a      	movs	r2, r3
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	b2da      	uxtb	r2, r3
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	1c19      	adds	r1, r3, #0
 800c6ca:	0089      	lsls	r1, r1, #2
 800c6cc:	18cb      	adds	r3, r1, r3
 800c6ce:	18db      	adds	r3, r3, r3
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	701a      	strb	r2, [r3, #0]
}
 800c6da:	46c0      	nop			@ (mov r8, r8)
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	b006      	add	sp, #24
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	46c0      	nop			@ (mov r8, r8)
 800c6e4:	41200000 	.word	0x41200000

0800c6e8 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800c6e8:	b590      	push	{r4, r7, lr}
 800c6ea:	b087      	sub	sp, #28
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
 800c6f4:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f7f4 ff6a 	bl	80015d0 <__aeabi_i2f>
 800c6fc:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c6fe:	6838      	ldr	r0, [r7, #0]
 800c700:	f7f4 ff66 	bl	80015d0 <__aeabi_i2f>
 800c704:	1c03      	adds	r3, r0, #0
 800c706:	4918      	ldr	r1, [pc, #96]	@ (800c768 <sumToIntAverage+0x80>)
 800c708:	1c18      	adds	r0, r3, #0
 800c70a:	f7f4 fa63 	bl	8000bd4 <__aeabi_fdiv>
 800c70e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c710:	1c19      	adds	r1, r3, #0
 800c712:	1c20      	adds	r0, r4, #0
 800c714:	f7f4 f8d4 	bl	80008c0 <__aeabi_fadd>
 800c718:	1c03      	adds	r3, r0, #0
 800c71a:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c71c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c71e:	f7f4 ffa3 	bl	8001668 <__aeabi_ui2f>
 800c722:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c724:	1c19      	adds	r1, r3, #0
 800c726:	1c20      	adds	r0, r4, #0
 800c728:	f7f4 fa54 	bl	8000bd4 <__aeabi_fdiv>
 800c72c:	1c03      	adds	r3, r0, #0
 800c72e:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800c730:	2300      	movs	r3, #0
 800c732:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800c734:	68ba      	ldr	r2, [r7, #8]
 800c736:	2310      	movs	r3, #16
 800c738:	18f9      	adds	r1, r7, r3
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	1c18      	adds	r0, r3, #0
 800c73e:	f7ff ffa1 	bl	800c684 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	2bff      	cmp	r3, #255	@ 0xff
 800c746:	d906      	bls.n	800c756 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	22ff      	movs	r2, #255	@ 0xff
 800c74c:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	2209      	movs	r2, #9
 800c752:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800c754:	e003      	b.n	800c75e <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	b2da      	uxtb	r2, r3
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	701a      	strb	r2, [r3, #0]
}
 800c75e:	46c0      	nop			@ (mov r8, r8)
 800c760:	46bd      	mov	sp, r7
 800c762:	b007      	add	sp, #28
 800c764:	bd90      	pop	{r4, r7, pc}
 800c766:	46c0      	nop			@ (mov r8, r8)
 800c768:	41200000 	.word	0x41200000

0800c76c <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b086      	sub	sp, #24
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	607a      	str	r2, [r7, #4]
 800c778:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	2280      	movs	r2, #128	@ 0x80
 800c77e:	0612      	lsls	r2, r2, #24
 800c780:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	4a18      	ldr	r2, [pc, #96]	@ (800c7e8 <findMinMax+0x7c>)
 800c786:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c788:	2300      	movs	r3, #0
 800c78a:	617b      	str	r3, [r7, #20]
 800c78c:	e022      	b.n	800c7d4 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	18d3      	adds	r3, r2, r3
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	da06      	bge.n	800c7ae <findMinMax+0x42>
        {
            min[0] = array[i];
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	18d3      	adds	r3, r2, r3
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	18d3      	adds	r3, r2, r3
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	dd06      	ble.n	800c7ce <findMinMax+0x62>
        {
            max[0] = array[i];
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	18d3      	adds	r3, r2, r3
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	617b      	str	r3, [r7, #20]
 800c7d4:	697a      	ldr	r2, [r7, #20]
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d3d8      	bcc.n	800c78e <findMinMax+0x22>
        }
    }
}
 800c7dc:	46c0      	nop			@ (mov r8, r8)
 800c7de:	46c0      	nop			@ (mov r8, r8)
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	b006      	add	sp, #24
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	46c0      	nop			@ (mov r8, r8)
 800c7e8:	7fffffff 	.word	0x7fffffff

0800c7ec <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d302      	bcc.n	800c808 <getPo2factor+0x1c>
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d107      	bne.n	800c818 <getPo2factor+0x2c>
    {
        return 0;
 800c808:	2300      	movs	r3, #0
 800c80a:	e00d      	b.n	800c828 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	085b      	lsrs	r3, r3, #1
 800c810:	607b      	str	r3, [r7, #4]
        bitShift++;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	3301      	adds	r3, #1
 800c816:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d2f5      	bcs.n	800c80c <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	3b01      	subs	r3, #1
 800c824:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800c826:	68fb      	ldr	r3, [r7, #12]
}
 800c828:	0018      	movs	r0, r3
 800c82a:	46bd      	mov	sp, r7
 800c82c:	b004      	add	sp, #16
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	60b9      	str	r1, [r7, #8]
 800c83a:	607a      	str	r2, [r7, #4]
 800c83c:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800c83e:	68f8      	ldr	r0, [r7, #12]
 800c840:	f7f4 ff12 	bl	8001668 <__aeabi_ui2f>
 800c844:	1c03      	adds	r3, r0, #0
 800c846:	1c19      	adds	r1, r3, #0
 800c848:	68b8      	ldr	r0, [r7, #8]
 800c84a:	f7f4 fba9 	bl	8000fa0 <__aeabi_fmul>
 800c84e:	1c03      	adds	r3, r0, #0
 800c850:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800c852:	2300      	movs	r3, #0
 800c854:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800c856:	683a      	ldr	r2, [r7, #0]
 800c858:	2310      	movs	r3, #16
 800c85a:	18f9      	adds	r1, r7, r3
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	1c18      	adds	r0, r3, #0
 800c860:	f7ff fee0 	bl	800c624 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	b29a      	uxth	r2, r3
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	801a      	strh	r2, [r3, #0]
}
 800c86c:	46c0      	nop			@ (mov r8, r8)
 800c86e:	46bd      	mov	sp, r7
 800c870:	b006      	add	sp, #24
 800c872:	bd80      	pop	{r7, pc}

0800c874 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60b8      	str	r0, [r7, #8]
 800c87c:	60f9      	str	r1, [r7, #12]
 800c87e:	607a      	str	r2, [r7, #4]
 800c880:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800c882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c884:	6a3a      	ldr	r2, [r7, #32]
 800c886:	68b8      	ldr	r0, [r7, #8]
 800c888:	68f9      	ldr	r1, [r7, #12]
 800c88a:	f7fa fb67 	bl	8006f5c <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800c88e:	6a3b      	ldr	r3, [r7, #32]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	18d2      	adds	r2, r2, r3
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	18d2      	adds	r2, r2, r3
 800c89a:	6a3b      	ldr	r3, [r7, #32]
 800c89c:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800c89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	18d2      	adds	r2, r2, r3
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	18d2      	adds	r2, r2, r3
 800c8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ac:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800c8ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8b0:	6a3b      	ldr	r3, [r7, #32]
 800c8b2:	0011      	movs	r1, r2
 800c8b4:	0018      	movs	r0, r3
 800c8b6:	f7fa fbe1 	bl	800707c <correctIntFracNumber>
}
 800c8ba:	46c0      	nop			@ (mov r8, r8)
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	b004      	add	sp, #16
 800c8c0:	bd80      	pop	{r7, pc}

0800c8c2 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800c8c2:	b580      	push	{r7, lr}
 800c8c4:	b086      	sub	sp, #24
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	60f8      	str	r0, [r7, #12]
 800c8ca:	60b9      	str	r1, [r7, #8]
 800c8cc:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	613b      	str	r3, [r7, #16]
 800c8d6:	e019      	b.n	800c90c <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	005b      	lsls	r3, r3, #1
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	18d3      	adds	r3, r2, r3
 800c8e0:	881b      	ldrh	r3, [r3, #0]
 800c8e2:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800c8e4:	693a      	ldr	r2, [r7, #16]
 800c8e6:	3201      	adds	r2, #1
 800c8e8:	0052      	lsls	r2, r2, #1
 800c8ea:	68f9      	ldr	r1, [r7, #12]
 800c8ec:	188a      	adds	r2, r1, r2
 800c8ee:	8812      	ldrh	r2, [r2, #0]
 800c8f0:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c8f2:	0019      	movs	r1, r3
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800c8fc:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c8fe:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	3301      	adds	r3, #1
 800c904:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	3304      	adds	r3, #4
 800c90a:	613b      	str	r3, [r7, #16]
 800c90c:	693a      	ldr	r2, [r7, #16]
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	429a      	cmp	r2, r3
 800c912:	d3e1      	bcc.n	800c8d8 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800c914:	46c0      	nop			@ (mov r8, r8)
 800c916:	46c0      	nop			@ (mov r8, r8)
 800c918:	46bd      	mov	sp, r7
 800c91a:	b006      	add	sp, #24
 800c91c:	bd80      	pop	{r7, pc}
	...

0800c920 <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 800c920:	b580      	push	{r7, lr}
 800c922:	af00      	add	r7, sp, #0
  init = false;
 800c924:	4b02      	ldr	r3, [pc, #8]	@ (800c930 <InitDone+0x10>)
 800c926:	2200      	movs	r2, #0
 800c928:	701a      	strb	r2, [r3, #0]
}
 800c92a:	46c0      	nop			@ (mov r8, r8)
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	200000c4 	.word	0x200000c4

0800c934 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800c934:	b580      	push	{r7, lr}
 800c936:	b082      	sub	sp, #8
 800c938:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 800c93a:	f7f9 fbbb 	bl	80060b4 <ReadBatteryVoltage>
 800c93e:	1c03      	adds	r3, r0, #0
 800c940:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 800c942:	491f      	ldr	r1, [pc, #124]	@ (800c9c0 <batteryChargeCheck+0x8c>)
 800c944:	6838      	ldr	r0, [r7, #0]
 800c946:	f7f3 fdf3 	bl	8000530 <__aeabi_fcmplt>
 800c94a:	1e03      	subs	r3, r0, #0
 800c94c:	d002      	beq.n	800c954 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 800c94e:	1dfb      	adds	r3, r7, #7
 800c950:	2200      	movs	r2, #0
 800c952:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800c954:	6838      	ldr	r0, [r7, #0]
 800c956:	f7f6 fd85 	bl	8003464 <__aeabi_f2d>
 800c95a:	4a1a      	ldr	r2, [pc, #104]	@ (800c9c4 <batteryChargeCheck+0x90>)
 800c95c:	4b1a      	ldr	r3, [pc, #104]	@ (800c9c8 <batteryChargeCheck+0x94>)
 800c95e:	f7f3 fdad 	bl	80004bc <__aeabi_dcmplt>
 800c962:	1e03      	subs	r3, r0, #0
 800c964:	d008      	beq.n	800c978 <batteryChargeCheck+0x44>
 800c966:	4916      	ldr	r1, [pc, #88]	@ (800c9c0 <batteryChargeCheck+0x8c>)
 800c968:	6838      	ldr	r0, [r7, #0]
 800c96a:	f7f3 fdff 	bl	800056c <__aeabi_fcmpge>
 800c96e:	1e03      	subs	r3, r0, #0
 800c970:	d002      	beq.n	800c978 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 800c972:	1dfb      	adds	r3, r7, #7
 800c974:	2202      	movs	r2, #2
 800c976:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800c978:	2181      	movs	r1, #129	@ 0x81
 800c97a:	05c9      	lsls	r1, r1, #23
 800c97c:	6838      	ldr	r0, [r7, #0]
 800c97e:	f7f3 fdd7 	bl	8000530 <__aeabi_fcmplt>
 800c982:	1e03      	subs	r3, r0, #0
 800c984:	d00b      	beq.n	800c99e <batteryChargeCheck+0x6a>
 800c986:	6838      	ldr	r0, [r7, #0]
 800c988:	f7f6 fd6c 	bl	8003464 <__aeabi_f2d>
 800c98c:	4a0d      	ldr	r2, [pc, #52]	@ (800c9c4 <batteryChargeCheck+0x90>)
 800c98e:	4b0e      	ldr	r3, [pc, #56]	@ (800c9c8 <batteryChargeCheck+0x94>)
 800c990:	f7f3 fdb2 	bl	80004f8 <__aeabi_dcmpge>
 800c994:	1e03      	subs	r3, r0, #0
 800c996:	d002      	beq.n	800c99e <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 800c998:	1dfb      	adds	r3, r7, #7
 800c99a:	2203      	movs	r2, #3
 800c99c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800c99e:	2181      	movs	r1, #129	@ 0x81
 800c9a0:	05c9      	lsls	r1, r1, #23
 800c9a2:	6838      	ldr	r0, [r7, #0]
 800c9a4:	f7f3 fde2 	bl	800056c <__aeabi_fcmpge>
 800c9a8:	1e03      	subs	r3, r0, #0
 800c9aa:	d002      	beq.n	800c9b2 <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 800c9ac:	1dfb      	adds	r3, r7, #7
 800c9ae:	2204      	movs	r2, #4
 800c9b0:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800c9b2:	1dfb      	adds	r3, r7, #7
 800c9b4:	781b      	ldrb	r3, [r3, #0]
}
 800c9b6:	0018      	movs	r0, r3
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	b002      	add	sp, #8
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	46c0      	nop			@ (mov r8, r8)
 800c9c0:	40600000 	.word	0x40600000
 800c9c4:	9999999a 	.word	0x9999999a
 800c9c8:	400d9999 	.word	0x400d9999

0800c9cc <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800c9cc:	b590      	push	{r4, r7, lr}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	0004      	movs	r4, r0
 800c9d4:	0008      	movs	r0, r1
 800c9d6:	0011      	movs	r1, r2
 800c9d8:	1dbb      	adds	r3, r7, #6
 800c9da:	1c22      	adds	r2, r4, #0
 800c9dc:	801a      	strh	r2, [r3, #0]
 800c9de:	1d3b      	adds	r3, r7, #4
 800c9e0:	1c02      	adds	r2, r0, #0
 800c9e2:	801a      	strh	r2, [r3, #0]
 800c9e4:	1cbb      	adds	r3, r7, #2
 800c9e6:	1c0a      	adds	r2, r1, #0
 800c9e8:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800c9ea:	4b0f      	ldr	r3, [pc, #60]	@ (800ca28 <SetStatusLED+0x5c>)
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d107      	bne.n	800ca02 <SetStatusLED+0x36>
 800c9f2:	4b0e      	ldr	r3, [pc, #56]	@ (800ca2c <SetStatusLED+0x60>)
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d103      	bne.n	800ca02 <SetStatusLED+0x36>
 800c9fa:	4b0d      	ldr	r3, [pc, #52]	@ (800ca30 <SetStatusLED+0x64>)
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00e      	beq.n	800ca20 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800ca02:	2380      	movs	r3, #128	@ 0x80
 800ca04:	05db      	lsls	r3, r3, #23
 800ca06:	1dba      	adds	r2, r7, #6
 800ca08:	8812      	ldrh	r2, [r2, #0]
 800ca0a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800ca0c:	2380      	movs	r3, #128	@ 0x80
 800ca0e:	05db      	lsls	r3, r3, #23
 800ca10:	1d3a      	adds	r2, r7, #4
 800ca12:	8812      	ldrh	r2, [r2, #0]
 800ca14:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800ca16:	2380      	movs	r3, #128	@ 0x80
 800ca18:	05db      	lsls	r3, r3, #23
 800ca1a:	1cba      	adds	r2, r7, #2
 800ca1c:	8812      	ldrh	r2, [r2, #0]
 800ca1e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800ca20:	46c0      	nop			@ (mov r8, r8)
 800ca22:	46bd      	mov	sp, r7
 800ca24:	b003      	add	sp, #12
 800ca26:	bd90      	pop	{r4, r7, pc}
 800ca28:	2000218d 	.word	0x2000218d
 800ca2c:	200000c4 	.word	0x200000c4
 800ca30:	2000218e 	.word	0x2000218e

0800ca34 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800ca34:	b590      	push	{r4, r7, lr}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	0004      	movs	r4, r0
 800ca3c:	0008      	movs	r0, r1
 800ca3e:	0011      	movs	r1, r2
 800ca40:	1dfb      	adds	r3, r7, #7
 800ca42:	1c22      	adds	r2, r4, #0
 800ca44:	701a      	strb	r2, [r3, #0]
 800ca46:	1dbb      	adds	r3, r7, #6
 800ca48:	1c02      	adds	r2, r0, #0
 800ca4a:	701a      	strb	r2, [r3, #0]
 800ca4c:	1d7b      	adds	r3, r7, #5
 800ca4e:	1c0a      	adds	r2, r1, #0
 800ca50:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800ca52:	4b19      	ldr	r3, [pc, #100]	@ (800cab8 <SetDBLED+0x84>)
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d107      	bne.n	800ca6a <SetDBLED+0x36>
 800ca5a:	4b18      	ldr	r3, [pc, #96]	@ (800cabc <SetDBLED+0x88>)
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d103      	bne.n	800ca6a <SetDBLED+0x36>
 800ca62:	4b17      	ldr	r3, [pc, #92]	@ (800cac0 <SetDBLED+0x8c>)
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d022      	beq.n	800cab0 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800ca6a:	1dfb      	adds	r3, r7, #7
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	2201      	movs	r2, #1
 800ca70:	4053      	eors	r3, r2
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	001a      	movs	r2, r3
 800ca76:	4b13      	ldr	r3, [pc, #76]	@ (800cac4 <SetDBLED+0x90>)
 800ca78:	2101      	movs	r1, #1
 800ca7a:	0018      	movs	r0, r3
 800ca7c:	f002 fd83 	bl	800f586 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800ca80:	1dbb      	adds	r3, r7, #6
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	2201      	movs	r2, #1
 800ca86:	4053      	eors	r3, r2
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	001a      	movs	r2, r3
 800ca8c:	2380      	movs	r3, #128	@ 0x80
 800ca8e:	005b      	lsls	r3, r3, #1
 800ca90:	480c      	ldr	r0, [pc, #48]	@ (800cac4 <SetDBLED+0x90>)
 800ca92:	0019      	movs	r1, r3
 800ca94:	f002 fd77 	bl	800f586 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800ca98:	1d7b      	adds	r3, r7, #5
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	4053      	eors	r3, r2
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	001a      	movs	r2, r3
 800caa4:	2380      	movs	r3, #128	@ 0x80
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	4806      	ldr	r0, [pc, #24]	@ (800cac4 <SetDBLED+0x90>)
 800caaa:	0019      	movs	r1, r3
 800caac:	f002 fd6b 	bl	800f586 <HAL_GPIO_WritePin>
  }
}
 800cab0:	46c0      	nop			@ (mov r8, r8)
 800cab2:	46bd      	mov	sp, r7
 800cab4:	b003      	add	sp, #12
 800cab6:	bd90      	pop	{r4, r7, pc}
 800cab8:	2000218d 	.word	0x2000218d
 800cabc:	200000c4 	.word	0x200000c4
 800cac0:	2000218e 	.word	0x2000218e
 800cac4:	50000400 	.word	0x50000400

0800cac8 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800cac8:	b590      	push	{r4, r7, lr}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	0004      	movs	r4, r0
 800cad0:	0008      	movs	r0, r1
 800cad2:	0011      	movs	r1, r2
 800cad4:	1dbb      	adds	r3, r7, #6
 800cad6:	1c22      	adds	r2, r4, #0
 800cad8:	801a      	strh	r2, [r3, #0]
 800cada:	1d3b      	adds	r3, r7, #4
 800cadc:	1c02      	adds	r2, r0, #0
 800cade:	801a      	strh	r2, [r3, #0]
 800cae0:	1cbb      	adds	r3, r7, #2
 800cae2:	1c0a      	adds	r2, r1, #0
 800cae4:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800cae6:	4b0e      	ldr	r3, [pc, #56]	@ (800cb20 <SetVocLED+0x58>)
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d107      	bne.n	800cafe <SetVocLED+0x36>
 800caee:	4b0d      	ldr	r3, [pc, #52]	@ (800cb24 <SetVocLED+0x5c>)
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d103      	bne.n	800cafe <SetVocLED+0x36>
 800caf6:	4b0c      	ldr	r3, [pc, #48]	@ (800cb28 <SetVocLED+0x60>)
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00b      	beq.n	800cb16 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800cafe:	4b0b      	ldr	r3, [pc, #44]	@ (800cb2c <SetVocLED+0x64>)
 800cb00:	1dba      	adds	r2, r7, #6
 800cb02:	8812      	ldrh	r2, [r2, #0]
 800cb04:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800cb06:	4b09      	ldr	r3, [pc, #36]	@ (800cb2c <SetVocLED+0x64>)
 800cb08:	1d3a      	adds	r2, r7, #4
 800cb0a:	8812      	ldrh	r2, [r2, #0]
 800cb0c:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800cb0e:	4b07      	ldr	r3, [pc, #28]	@ (800cb2c <SetVocLED+0x64>)
 800cb10:	1cba      	adds	r2, r7, #2
 800cb12:	8812      	ldrh	r2, [r2, #0]
 800cb14:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800cb16:	46c0      	nop			@ (mov r8, r8)
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	b003      	add	sp, #12
 800cb1c:	bd90      	pop	{r4, r7, pc}
 800cb1e:	46c0      	nop			@ (mov r8, r8)
 800cb20:	2000218d 	.word	0x2000218d
 800cb24:	200000c4 	.word	0x200000c4
 800cb28:	2000218e 	.word	0x2000218e
 800cb2c:	40000400 	.word	0x40000400

0800cb30 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800cb30:	b580      	push	{r7, lr}
 800cb32:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cb34:	4b07      	ldr	r3, [pc, #28]	@ (800cb54 <SetMeasurementIndicator+0x24>)
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d103      	bne.n	800cb44 <SetMeasurementIndicator+0x14>
 800cb3c:	4b06      	ldr	r3, [pc, #24]	@ (800cb58 <SetMeasurementIndicator+0x28>)
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d003      	beq.n	800cb4c <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800cb44:	2380      	movs	r3, #128	@ 0x80
 800cb46:	05db      	lsls	r3, r3, #23
 800cb48:	4a04      	ldr	r2, [pc, #16]	@ (800cb5c <SetMeasurementIndicator+0x2c>)
 800cb4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800cb4c:	46c0      	nop			@ (mov r8, r8)
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	46c0      	nop			@ (mov r8, r8)
 800cb54:	2000218d 	.word	0x2000218d
 800cb58:	2000218e 	.word	0x2000218e
 800cb5c:	00000bb8 	.word	0x00000bb8

0800cb60 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800cb60:	b580      	push	{r7, lr}
 800cb62:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cb64:	4b07      	ldr	r3, [pc, #28]	@ (800cb84 <ResetMeasurementIndicator+0x24>)
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d103      	bne.n	800cb74 <ResetMeasurementIndicator+0x14>
 800cb6c:	4b06      	ldr	r3, [pc, #24]	@ (800cb88 <ResetMeasurementIndicator+0x28>)
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d004      	beq.n	800cb7e <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800cb74:	2380      	movs	r3, #128	@ 0x80
 800cb76:	05db      	lsls	r3, r3, #23
 800cb78:	22fa      	movs	r2, #250	@ 0xfa
 800cb7a:	0112      	lsls	r2, r2, #4
 800cb7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800cb7e:	46c0      	nop			@ (mov r8, r8)
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	2000218d 	.word	0x2000218d
 800cb88:	2000218e 	.word	0x2000218e

0800cb8c <SetMICIndicator>:
void SetMICIndicator(){
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cb90:	4b07      	ldr	r3, [pc, #28]	@ (800cbb0 <SetMICIndicator+0x24>)
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d103      	bne.n	800cba0 <SetMICIndicator+0x14>
 800cb98:	4b06      	ldr	r3, [pc, #24]	@ (800cbb4 <SetMICIndicator+0x28>)
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d003      	beq.n	800cba8 <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = LED_ON;
 800cba0:	2380      	movs	r3, #128	@ 0x80
 800cba2:	05db      	lsls	r3, r3, #23
 800cba4:	4a04      	ldr	r2, [pc, #16]	@ (800cbb8 <SetMICIndicator+0x2c>)
 800cba6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800cba8:	46c0      	nop			@ (mov r8, r8)
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	46c0      	nop			@ (mov r8, r8)
 800cbb0:	2000218d 	.word	0x2000218d
 800cbb4:	2000218e 	.word	0x2000218e
 800cbb8:	00000bb8 	.word	0x00000bb8

0800cbbc <ResetMICIndicator>:
void ResetMICIndicator(){
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cbc0:	4b07      	ldr	r3, [pc, #28]	@ (800cbe0 <ResetMICIndicator+0x24>)
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d103      	bne.n	800cbd0 <ResetMICIndicator+0x14>
 800cbc8:	4b06      	ldr	r3, [pc, #24]	@ (800cbe4 <ResetMICIndicator+0x28>)
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d004      	beq.n	800cbda <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_OFF;
 800cbd0:	2380      	movs	r3, #128	@ 0x80
 800cbd2:	05db      	lsls	r3, r3, #23
 800cbd4:	22fa      	movs	r2, #250	@ 0xfa
 800cbd6:	0112      	lsls	r2, r2, #4
 800cbd8:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800cbda:	46c0      	nop			@ (mov r8, r8)
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	2000218d 	.word	0x2000218d
 800cbe4:	2000218e 	.word	0x2000218e

0800cbe8 <SetESPIndicator>:
void SetESPIndicator(){
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cbec:	4b07      	ldr	r3, [pc, #28]	@ (800cc0c <SetESPIndicator+0x24>)
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d103      	bne.n	800cbfc <SetESPIndicator+0x14>
 800cbf4:	4b06      	ldr	r3, [pc, #24]	@ (800cc10 <SetESPIndicator+0x28>)
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d003      	beq.n	800cc04 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800cbfc:	2380      	movs	r3, #128	@ 0x80
 800cbfe:	05db      	lsls	r3, r3, #23
 800cc00:	4a04      	ldr	r2, [pc, #16]	@ (800cc14 <SetESPIndicator+0x2c>)
 800cc02:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cc04:	46c0      	nop			@ (mov r8, r8)
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	46c0      	nop			@ (mov r8, r8)
 800cc0c:	2000218d 	.word	0x2000218d
 800cc10:	2000218e 	.word	0x2000218e
 800cc14:	00000bb8 	.word	0x00000bb8

0800cc18 <ResetESPIndicator>:
void ResetESPIndicator(){
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800cc1c:	4b07      	ldr	r3, [pc, #28]	@ (800cc3c <ResetESPIndicator+0x24>)
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d103      	bne.n	800cc2c <ResetESPIndicator+0x14>
 800cc24:	4b06      	ldr	r3, [pc, #24]	@ (800cc40 <ResetESPIndicator+0x28>)
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d004      	beq.n	800cc36 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800cc2c:	2380      	movs	r3, #128	@ 0x80
 800cc2e:	05db      	lsls	r3, r3, #23
 800cc30:	22fa      	movs	r2, #250	@ 0xfa
 800cc32:	0112      	lsls	r2, r2, #4
 800cc34:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800cc36:	46c0      	nop			@ (mov r8, r8)
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}
 800cc3c:	2000218d 	.word	0x2000218d
 800cc40:	2000218e 	.word	0x2000218e

0800cc44 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800cc44:	b580      	push	{r7, lr}
 800cc46:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800cc48:	23fa      	movs	r3, #250	@ 0xfa
 800cc4a:	011a      	lsls	r2, r3, #4
 800cc4c:	23fa      	movs	r3, #250	@ 0xfa
 800cc4e:	0119      	lsls	r1, r3, #4
 800cc50:	23fa      	movs	r3, #250	@ 0xfa
 800cc52:	011b      	lsls	r3, r3, #4
 800cc54:	0018      	movs	r0, r3
 800cc56:	f7ff feb9 	bl	800c9cc <SetStatusLED>
  SetDBLED(false,false,false);
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	2000      	movs	r0, #0
 800cc60:	f7ff fee8 	bl	800ca34 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800cc64:	23fa      	movs	r3, #250	@ 0xfa
 800cc66:	011a      	lsls	r2, r3, #4
 800cc68:	23fa      	movs	r3, #250	@ 0xfa
 800cc6a:	0119      	lsls	r1, r3, #4
 800cc6c:	23fa      	movs	r3, #250	@ 0xfa
 800cc6e:	011b      	lsls	r3, r3, #4
 800cc70:	0018      	movs	r0, r3
 800cc72:	f7ff ff29 	bl	800cac8 <SetVocLED>
return;
 800cc76:	46c0      	nop			@ (mov r8, r8)
}
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <powerCheck>:

Battery_Status powerCheck(){
 800cc7c:	b590      	push	{r4, r7, lr}
 800cc7e:	b083      	sub	sp, #12
 800cc80:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800cc82:	f7f9 fadd 	bl	8006240 <Check_USB_PowerOn>
 800cc86:	0003      	movs	r3, r0
 800cc88:	001a      	movs	r2, r3
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	4053      	eors	r3, r2
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d005      	beq.n	800cca0 <powerCheck+0x24>
    status = batteryChargeCheck();
 800cc94:	1dfc      	adds	r4, r7, #7
 800cc96:	f7ff fe4d 	bl	800c934 <batteryChargeCheck>
 800cc9a:	0003      	movs	r3, r0
 800cc9c:	7023      	strb	r3, [r4, #0]
 800cc9e:	e002      	b.n	800cca6 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800cca0:	1dfb      	adds	r3, r7, #7
 800cca2:	2201      	movs	r2, #1
 800cca4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800cca6:	1dfb      	adds	r3, r7, #7
 800cca8:	781b      	ldrb	r3, [r3, #0]
}
 800ccaa:	0018      	movs	r0, r3
 800ccac:	46bd      	mov	sp, r7
 800ccae:	b003      	add	sp, #12
 800ccb0:	bd90      	pop	{r4, r7, pc}
	...

0800ccb4 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	0002      	movs	r2, r0
 800ccbc:	1dfb      	adds	r3, r7, #7
 800ccbe:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800ccc0:	1dfb      	adds	r3, r7, #7
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d105      	bne.n	800ccd4 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800ccc8:	4a18      	ldr	r2, [pc, #96]	@ (800cd2c <powerDisplay+0x78>)
 800ccca:	4b19      	ldr	r3, [pc, #100]	@ (800cd30 <powerDisplay+0x7c>)
 800cccc:	0019      	movs	r1, r3
 800ccce:	2003      	movs	r0, #3
 800ccd0:	f000 fe40 	bl	800d954 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800ccd4:	1dfb      	adds	r3, r7, #7
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	2b04      	cmp	r3, #4
 800ccda:	d105      	bne.n	800cce8 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800ccdc:	4a15      	ldr	r2, [pc, #84]	@ (800cd34 <powerDisplay+0x80>)
 800ccde:	4b14      	ldr	r3, [pc, #80]	@ (800cd30 <powerDisplay+0x7c>)
 800cce0:	0019      	movs	r1, r3
 800cce2:	2003      	movs	r0, #3
 800cce4:	f000 fe36 	bl	800d954 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800cce8:	1dfb      	adds	r3, r7, #7
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	2b03      	cmp	r3, #3
 800ccee:	d105      	bne.n	800ccfc <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800ccf0:	4a11      	ldr	r2, [pc, #68]	@ (800cd38 <powerDisplay+0x84>)
 800ccf2:	4b0f      	ldr	r3, [pc, #60]	@ (800cd30 <powerDisplay+0x7c>)
 800ccf4:	0019      	movs	r1, r3
 800ccf6:	2003      	movs	r0, #3
 800ccf8:	f000 fe2c 	bl	800d954 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800ccfc:	1dfb      	adds	r3, r7, #7
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	2b02      	cmp	r3, #2
 800cd02:	d105      	bne.n	800cd10 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800cd04:	4a0d      	ldr	r2, [pc, #52]	@ (800cd3c <powerDisplay+0x88>)
 800cd06:	4b0a      	ldr	r3, [pc, #40]	@ (800cd30 <powerDisplay+0x7c>)
 800cd08:	0019      	movs	r1, r3
 800cd0a:	2003      	movs	r0, #3
 800cd0c:	f000 fe22 	bl	800d954 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800cd10:	1dfb      	adds	r3, r7, #7
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d105      	bne.n	800cd24 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800cd18:	4a09      	ldr	r2, [pc, #36]	@ (800cd40 <powerDisplay+0x8c>)
 800cd1a:	4b05      	ldr	r3, [pc, #20]	@ (800cd30 <powerDisplay+0x7c>)
 800cd1c:	0019      	movs	r1, r3
 800cd1e:	2003      	movs	r0, #3
 800cd20:	f000 fe18 	bl	800d954 <CreateLine>
  }
}
 800cd24:	46c0      	nop			@ (mov r8, r8)
 800cd26:	46bd      	mov	sp, r7
 800cd28:	b002      	add	sp, #8
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	08023c78 	.word	0x08023c78
 800cd30:	08023c88 	.word	0x08023c88
 800cd34:	08023c8c 	.word	0x08023c8c
 800cd38:	08023ca4 	.word	0x08023ca4
 800cd3c:	08023cc4 	.word	0x08023cc4
 800cd40:	08023cdc 	.word	0x08023cdc

0800cd44 <configCheck>:

void configCheck(){
 800cd44:	b580      	push	{r7, lr}
 800cd46:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800cd48:	f7f9 fa89 	bl	800625e <BootButton_Pressed>
 800cd4c:	1e03      	subs	r3, r0, #0
 800cd4e:	d007      	beq.n	800cd60 <configCheck+0x1c>
 800cd50:	f7f9 fa96 	bl	8006280 <UserButton_Pressed>
 800cd54:	1e03      	subs	r3, r0, #0
 800cd56:	d003      	beq.n	800cd60 <configCheck+0x1c>
    configSet = true;
 800cd58:	4b3d      	ldr	r3, [pc, #244]	@ (800ce50 <configCheck+0x10c>)
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	701a      	strb	r2, [r3, #0]
 800cd5e:	e00a      	b.n	800cd76 <configCheck+0x32>
  }
  else{
    configSet = false;
 800cd60:	4b3b      	ldr	r3, [pc, #236]	@ (800ce50 <configCheck+0x10c>)
 800cd62:	2200      	movs	r2, #0
 800cd64:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800cd66:	f001 f993 	bl	800e090 <HAL_GetTick>
 800cd6a:	0003      	movs	r3, r0
 800cd6c:	22fa      	movs	r2, #250	@ 0xfa
 800cd6e:	00d2      	lsls	r2, r2, #3
 800cd70:	189a      	adds	r2, r3, r2
 800cd72:	4b38      	ldr	r3, [pc, #224]	@ (800ce54 <configCheck+0x110>)
 800cd74:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800cd76:	4b36      	ldr	r3, [pc, #216]	@ (800ce50 <configCheck+0x10c>)
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00d      	beq.n	800cd9a <configCheck+0x56>
 800cd7e:	4b35      	ldr	r3, [pc, #212]	@ (800ce54 <configCheck+0x110>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	0018      	movs	r0, r3
 800cd84:	f000 fd90 	bl	800d8a8 <TimestampIsReached>
 800cd88:	1e03      	subs	r3, r0, #0
 800cd8a:	d006      	beq.n	800cd9a <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800cd8c:	f7f6 fe10 	bl	80039b0 <SetConfigMode>
    SetDBLED(true, true, true);
 800cd90:	2201      	movs	r2, #1
 800cd92:	2101      	movs	r1, #1
 800cd94:	2001      	movs	r0, #1
 800cd96:	f7ff fe4d 	bl	800ca34 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800cd9a:	f7f9 fa60 	bl	800625e <BootButton_Pressed>
 800cd9e:	0003      	movs	r3, r0
 800cda0:	001a      	movs	r2, r3
 800cda2:	2301      	movs	r3, #1
 800cda4:	4053      	eors	r3, r2
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d01d      	beq.n	800cde8 <configCheck+0xa4>
 800cdac:	f7f9 fa68 	bl	8006280 <UserButton_Pressed>
 800cdb0:	1e03      	subs	r3, r0, #0
 800cdb2:	d019      	beq.n	800cde8 <configCheck+0xa4>
 800cdb4:	4b28      	ldr	r3, [pc, #160]	@ (800ce58 <configCheck+0x114>)
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	2201      	movs	r2, #1
 800cdba:	4053      	eors	r3, r2
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d012      	beq.n	800cde8 <configCheck+0xa4>
    SetLEDsOff();
 800cdc2:	f7ff ff3f 	bl	800cc44 <SetLEDsOff>
    userToggle = !userToggle;
 800cdc6:	4b25      	ldr	r3, [pc, #148]	@ (800ce5c <configCheck+0x118>)
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	1e5a      	subs	r2, r3, #1
 800cdcc:	4193      	sbcs	r3, r2
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	4053      	eors	r3, r2
 800cdd4:	b2db      	uxtb	r3, r3
 800cdd6:	1c1a      	adds	r2, r3, #0
 800cdd8:	2301      	movs	r3, #1
 800cdda:	4013      	ands	r3, r2
 800cddc:	b2da      	uxtb	r2, r3
 800cdde:	4b1f      	ldr	r3, [pc, #124]	@ (800ce5c <configCheck+0x118>)
 800cde0:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 800cde2:	4b1d      	ldr	r3, [pc, #116]	@ (800ce58 <configCheck+0x114>)
 800cde4:	2201      	movs	r2, #1
 800cde6:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800cde8:	f7f9 fa39 	bl	800625e <BootButton_Pressed>
 800cdec:	0003      	movs	r3, r0
 800cdee:	001a      	movs	r2, r3
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	4053      	eors	r3, r2
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00b      	beq.n	800ce12 <configCheck+0xce>
 800cdfa:	f7f9 fa41 	bl	8006280 <UserButton_Pressed>
 800cdfe:	0003      	movs	r3, r0
 800ce00:	001a      	movs	r2, r3
 800ce02:	2301      	movs	r3, #1
 800ce04:	4053      	eors	r3, r2
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d002      	beq.n	800ce12 <configCheck+0xce>
    buttonHeld = false;
 800ce0c:	4b12      	ldr	r3, [pc, #72]	@ (800ce58 <configCheck+0x114>)
 800ce0e:	2200      	movs	r2, #0
 800ce10:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800ce12:	f7f9 fa15 	bl	8006240 <Check_USB_PowerOn>
 800ce16:	1e03      	subs	r3, r0, #0
 800ce18:	d003      	beq.n	800ce22 <configCheck+0xde>
    usbPluggedIn = true;
 800ce1a:	4b11      	ldr	r3, [pc, #68]	@ (800ce60 <configCheck+0x11c>)
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800ce20:	e012      	b.n	800ce48 <configCheck+0x104>
    if(!userToggle && !init){
 800ce22:	4b0e      	ldr	r3, [pc, #56]	@ (800ce5c <configCheck+0x118>)
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	2201      	movs	r2, #1
 800ce28:	4053      	eors	r3, r2
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d008      	beq.n	800ce42 <configCheck+0xfe>
 800ce30:	4b0c      	ldr	r3, [pc, #48]	@ (800ce64 <configCheck+0x120>)
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	2201      	movs	r2, #1
 800ce36:	4053      	eors	r3, r2
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d001      	beq.n	800ce42 <configCheck+0xfe>
      SetLEDsOff();
 800ce3e:	f7ff ff01 	bl	800cc44 <SetLEDsOff>
    usbPluggedIn = false;
 800ce42:	4b07      	ldr	r3, [pc, #28]	@ (800ce60 <configCheck+0x11c>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	701a      	strb	r2, [r3, #0]
}
 800ce48:	46c0      	nop			@ (mov r8, r8)
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	46c0      	nop			@ (mov r8, r8)
 800ce50:	2000218c 	.word	0x2000218c
 800ce54:	20002190 	.word	0x20002190
 800ce58:	2000218f 	.word	0x2000218f
 800ce5c:	2000218e 	.word	0x2000218e
 800ce60:	2000218d 	.word	0x2000218d
 800ce64:	200000c4 	.word	0x200000c4

0800ce68 <Status_Upkeep>:
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  SystemClock_Config();
  HAL_ResumeTick();
}

void Status_Upkeep(){
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	af00      	add	r7, sp, #0
  configCheck();
 800ce6c:	f7ff ff6a 	bl	800cd44 <configCheck>
}
 800ce70:	46c0      	nop			@ (mov r8, r8)
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800ce76:	b590      	push	{r4, r7, lr}
 800ce78:	b083      	sub	sp, #12
 800ce7a:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800ce7c:	1dfc      	adds	r4, r7, #7
 800ce7e:	f7ff fefd 	bl	800cc7c <powerCheck>
 800ce82:	0003      	movs	r3, r0
 800ce84:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800ce86:	1dfb      	adds	r3, r7, #7
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	0018      	movs	r0, r3
 800ce8c:	f7ff ff12 	bl	800ccb4 <powerDisplay>
  return status;
 800ce90:	1dfb      	adds	r3, r7, #7
 800ce92:	781b      	ldrb	r3, [r3, #0]

}
 800ce94:	0018      	movs	r0, r3
 800ce96:	46bd      	mov	sp, r7
 800ce98:	b003      	add	sp, #12
 800ce9a:	bd90      	pop	{r4, r7, pc}

0800ce9c <setuserToggle>:

void setuserToggle(void) {
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800cea0:	f7ff feec 	bl	800cc7c <powerCheck>
 800cea4:	0003      	movs	r3, r0
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	d002      	beq.n	800ceb0 <setuserToggle+0x14>
    userToggle = true;
 800ceaa:	4b03      	ldr	r3, [pc, #12]	@ (800ceb8 <setuserToggle+0x1c>)
 800ceac:	2201      	movs	r2, #1
 800ceae:	701a      	strb	r2, [r3, #0]
  }
}
 800ceb0:	46c0      	nop			@ (mov r8, r8)
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	46c0      	nop			@ (mov r8, r8)
 800ceb8:	2000218e 	.word	0x2000218e

0800cebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cec0:	4b07      	ldr	r3, [pc, #28]	@ (800cee0 <HAL_MspInit+0x24>)
 800cec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cec4:	4b06      	ldr	r3, [pc, #24]	@ (800cee0 <HAL_MspInit+0x24>)
 800cec6:	2101      	movs	r1, #1
 800cec8:	430a      	orrs	r2, r1
 800ceca:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800cecc:	4b04      	ldr	r3, [pc, #16]	@ (800cee0 <HAL_MspInit+0x24>)
 800cece:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ced0:	4b03      	ldr	r3, [pc, #12]	@ (800cee0 <HAL_MspInit+0x24>)
 800ced2:	2180      	movs	r1, #128	@ 0x80
 800ced4:	0549      	lsls	r1, r1, #21
 800ced6:	430a      	orrs	r2, r1
 800ced8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ceda:	46c0      	nop			@ (mov r8, r8)
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	40021000 	.word	0x40021000

0800cee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800cee8:	46c0      	nop			@ (mov r8, r8)
 800ceea:	e7fd      	b.n	800cee8 <NMI_Handler+0x4>

0800ceec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cef0:	46c0      	nop			@ (mov r8, r8)
 800cef2:	e7fd      	b.n	800cef0 <HardFault_Handler+0x4>

0800cef4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800cef8:	46c0      	nop			@ (mov r8, r8)
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cf02:	46c0      	nop			@ (mov r8, r8)
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cf0c:	f001 f8ae 	bl	800e06c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800cf10:	46c0      	nop			@ (mov r8, r8)
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
	...

0800cf18 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800cf1c:	4b03      	ldr	r3, [pc, #12]	@ (800cf2c <RTC_IRQHandler+0x14>)
 800cf1e:	0018      	movs	r0, r3
 800cf20:	f008 fdae 	bl	8015a80 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800cf24:	46c0      	nop			@ (mov r8, r8)
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	46c0      	nop			@ (mov r8, r8)
 800cf2c:	200011ec 	.word	0x200011ec

0800cf30 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800cf34:	2380      	movs	r3, #128	@ 0x80
 800cf36:	021b      	lsls	r3, r3, #8
 800cf38:	0018      	movs	r0, r3
 800cf3a:	f002 fb41 	bl	800f5c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800cf3e:	46c0      	nop			@ (mov r8, r8)
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800cf48:	4b05      	ldr	r3, [pc, #20]	@ (800cf60 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800cf4a:	0018      	movs	r0, r3
 800cf4c:	f001 fec9 	bl	800ece2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800cf50:	4b04      	ldr	r3, [pc, #16]	@ (800cf64 <DMA1_Channel2_3_IRQHandler+0x20>)
 800cf52:	0018      	movs	r0, r3
 800cf54:	f001 fec5 	bl	800ece2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800cf58:	46c0      	nop			@ (mov r8, r8)
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	46c0      	nop			@ (mov r8, r8)
 800cf60:	20000e4c 	.word	0x20000e4c
 800cf64:	20000e04 	.word	0x20000e04

0800cf68 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800cf6c:	4b07      	ldr	r3, [pc, #28]	@ (800cf8c <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800cf6e:	0018      	movs	r0, r3
 800cf70:	f001 feb7 	bl	800ece2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800cf74:	4b06      	ldr	r3, [pc, #24]	@ (800cf90 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800cf76:	0018      	movs	r0, r3
 800cf78:	f001 feb3 	bl	800ece2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800cf7c:	4b05      	ldr	r3, [pc, #20]	@ (800cf94 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800cf7e:	0018      	movs	r0, r3
 800cf80:	f001 feaf 	bl	800ece2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800cf84:	46c0      	nop			@ (mov r8, r8)
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	46c0      	nop			@ (mov r8, r8)
 800cf8c:	20000ed0 	.word	0x20000ed0
 800cf90:	20002480 	.word	0x20002480
 800cf94:	200024c8 	.word	0x200024c8

0800cf98 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800cf9c:	4b03      	ldr	r3, [pc, #12]	@ (800cfac <USART4_5_IRQHandler+0x14>)
 800cf9e:	0018      	movs	r0, r3
 800cfa0:	f009 fc3a 	bl	8016818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800cfa4:	46c0      	nop			@ (mov r8, r8)
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	46c0      	nop			@ (mov r8, r8)
 800cfac:	200023c8 	.word	0x200023c8

0800cfb0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800cfb4:	4b09      	ldr	r3, [pc, #36]	@ (800cfdc <I2C1_IRQHandler+0x2c>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	699a      	ldr	r2, [r3, #24]
 800cfba:	23e0      	movs	r3, #224	@ 0xe0
 800cfbc:	00db      	lsls	r3, r3, #3
 800cfbe:	4013      	ands	r3, r2
 800cfc0:	d004      	beq.n	800cfcc <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800cfc2:	4b06      	ldr	r3, [pc, #24]	@ (800cfdc <I2C1_IRQHandler+0x2c>)
 800cfc4:	0018      	movs	r0, r3
 800cfc6:	f002 ffe3 	bl	800ff90 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800cfca:	e003      	b.n	800cfd4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800cfcc:	4b03      	ldr	r3, [pc, #12]	@ (800cfdc <I2C1_IRQHandler+0x2c>)
 800cfce:	0018      	movs	r0, r3
 800cfd0:	f002 ffc4 	bl	800ff5c <HAL_I2C_EV_IRQHandler>
}
 800cfd4:	46c0      	nop			@ (mov r8, r8)
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	46c0      	nop			@ (mov r8, r8)
 800cfdc:	20000d5c 	.word	0x20000d5c

0800cfe0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800cfe4:	4b03      	ldr	r3, [pc, #12]	@ (800cff4 <USART1_IRQHandler+0x14>)
 800cfe6:	0018      	movs	r0, r3
 800cfe8:	f009 fc16 	bl	8016818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800cfec:	46c0      	nop			@ (mov r8, r8)
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	46c0      	nop			@ (mov r8, r8)
 800cff4:	20002310 	.word	0x20002310

0800cff8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800cffc:	4b03      	ldr	r3, [pc, #12]	@ (800d00c <USB_IRQHandler+0x14>)
 800cffe:	0018      	movs	r0, r3
 800d000:	f005 fba4 	bl	801274c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800d004:	46c0      	nop			@ (mov r8, r8)
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	46c0      	nop			@ (mov r8, r8)
 800d00c:	200032d0 	.word	0x200032d0

0800d010 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	af00      	add	r7, sp, #0
  return 1;
 800d014:	2301      	movs	r3, #1
}
 800d016:	0018      	movs	r0, r3
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <_kill>:

int _kill(int pid, int sig)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d026:	f012 fadb 	bl	801f5e0 <__errno>
 800d02a:	0003      	movs	r3, r0
 800d02c:	2216      	movs	r2, #22
 800d02e:	601a      	str	r2, [r3, #0]
  return -1;
 800d030:	2301      	movs	r3, #1
 800d032:	425b      	negs	r3, r3
}
 800d034:	0018      	movs	r0, r3
 800d036:	46bd      	mov	sp, r7
 800d038:	b002      	add	sp, #8
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <_exit>:

void _exit (int status)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d044:	2301      	movs	r3, #1
 800d046:	425a      	negs	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	0011      	movs	r1, r2
 800d04c:	0018      	movs	r0, r3
 800d04e:	f7ff ffe5 	bl	800d01c <_kill>
  while (1) {}    /* Make sure we hang here */
 800d052:	46c0      	nop			@ (mov r8, r8)
 800d054:	e7fd      	b.n	800d052 <_exit+0x16>

0800d056 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b086      	sub	sp, #24
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	60f8      	str	r0, [r7, #12]
 800d05e:	60b9      	str	r1, [r7, #8]
 800d060:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d062:	2300      	movs	r3, #0
 800d064:	617b      	str	r3, [r7, #20]
 800d066:	e00a      	b.n	800d07e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d068:	e000      	b.n	800d06c <_read+0x16>
 800d06a:	bf00      	nop
 800d06c:	0001      	movs	r1, r0
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	1c5a      	adds	r2, r3, #1
 800d072:	60ba      	str	r2, [r7, #8]
 800d074:	b2ca      	uxtb	r2, r1
 800d076:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	3301      	adds	r3, #1
 800d07c:	617b      	str	r3, [r7, #20]
 800d07e:	697a      	ldr	r2, [r7, #20]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	429a      	cmp	r2, r3
 800d084:	dbf0      	blt.n	800d068 <_read+0x12>
  }

  return len;
 800d086:	687b      	ldr	r3, [r7, #4]
}
 800d088:	0018      	movs	r0, r3
 800d08a:	46bd      	mov	sp, r7
 800d08c:	b006      	add	sp, #24
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <_close>:
  }
  return len;
}

int _close(int file)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d098:	2301      	movs	r3, #1
 800d09a:	425b      	negs	r3, r3
}
 800d09c:	0018      	movs	r0, r3
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	b002      	add	sp, #8
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	2280      	movs	r2, #128	@ 0x80
 800d0b2:	0192      	lsls	r2, r2, #6
 800d0b4:	605a      	str	r2, [r3, #4]
  return 0;
 800d0b6:	2300      	movs	r3, #0
}
 800d0b8:	0018      	movs	r0, r3
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	b002      	add	sp, #8
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <_isatty>:

int _isatty(int file)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800d0c8:	2301      	movs	r3, #1
}
 800d0ca:	0018      	movs	r0, r3
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	b002      	add	sp, #8
 800d0d0:	bd80      	pop	{r7, pc}

0800d0d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b084      	sub	sp, #16
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	60f8      	str	r0, [r7, #12]
 800d0da:	60b9      	str	r1, [r7, #8]
 800d0dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	0018      	movs	r0, r3
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	b004      	add	sp, #16
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b086      	sub	sp, #24
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d0f0:	4a14      	ldr	r2, [pc, #80]	@ (800d144 <_sbrk+0x5c>)
 800d0f2:	4b15      	ldr	r3, [pc, #84]	@ (800d148 <_sbrk+0x60>)
 800d0f4:	1ad3      	subs	r3, r2, r3
 800d0f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d0fc:	4b13      	ldr	r3, [pc, #76]	@ (800d14c <_sbrk+0x64>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d102      	bne.n	800d10a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d104:	4b11      	ldr	r3, [pc, #68]	@ (800d14c <_sbrk+0x64>)
 800d106:	4a12      	ldr	r2, [pc, #72]	@ (800d150 <_sbrk+0x68>)
 800d108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d10a:	4b10      	ldr	r3, [pc, #64]	@ (800d14c <_sbrk+0x64>)
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	18d3      	adds	r3, r2, r3
 800d112:	693a      	ldr	r2, [r7, #16]
 800d114:	429a      	cmp	r2, r3
 800d116:	d207      	bcs.n	800d128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d118:	f012 fa62 	bl	801f5e0 <__errno>
 800d11c:	0003      	movs	r3, r0
 800d11e:	220c      	movs	r2, #12
 800d120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d122:	2301      	movs	r3, #1
 800d124:	425b      	negs	r3, r3
 800d126:	e009      	b.n	800d13c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d128:	4b08      	ldr	r3, [pc, #32]	@ (800d14c <_sbrk+0x64>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d12e:	4b07      	ldr	r3, [pc, #28]	@ (800d14c <_sbrk+0x64>)
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	18d2      	adds	r2, r2, r3
 800d136:	4b05      	ldr	r3, [pc, #20]	@ (800d14c <_sbrk+0x64>)
 800d138:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800d13a:	68fb      	ldr	r3, [r7, #12]
}
 800d13c:	0018      	movs	r0, r3
 800d13e:	46bd      	mov	sp, r7
 800d140:	b006      	add	sp, #24
 800d142:	bd80      	pop	{r7, pc}
 800d144:	20005000 	.word	0x20005000
 800d148:	00000400 	.word	0x00000400
 800d14c:	20002194 	.word	0x20002194
 800d150:	20003930 	.word	0x20003930

0800d154 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d158:	46c0      	nop			@ (mov r8, r8)
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
	...

0800d160 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d166:	2310      	movs	r3, #16
 800d168:	18fb      	adds	r3, r7, r3
 800d16a:	0018      	movs	r0, r3
 800d16c:	2308      	movs	r3, #8
 800d16e:	001a      	movs	r2, r3
 800d170:	2100      	movs	r1, #0
 800d172:	f012 f991 	bl	801f498 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d176:	003b      	movs	r3, r7
 800d178:	0018      	movs	r0, r3
 800d17a:	2310      	movs	r3, #16
 800d17c:	001a      	movs	r2, r3
 800d17e:	2100      	movs	r1, #0
 800d180:	f012 f98a 	bl	801f498 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d184:	4b2e      	ldr	r3, [pc, #184]	@ (800d240 <MX_TIM2_Init+0xe0>)
 800d186:	2280      	movs	r2, #128	@ 0x80
 800d188:	05d2      	lsls	r2, r2, #23
 800d18a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800d18c:	4b2c      	ldr	r3, [pc, #176]	@ (800d240 <MX_TIM2_Init+0xe0>)
 800d18e:	2200      	movs	r2, #0
 800d190:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d192:	4b2b      	ldr	r3, [pc, #172]	@ (800d240 <MX_TIM2_Init+0xe0>)
 800d194:	2200      	movs	r2, #0
 800d196:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800d198:	4b29      	ldr	r3, [pc, #164]	@ (800d240 <MX_TIM2_Init+0xe0>)
 800d19a:	4a2a      	ldr	r2, [pc, #168]	@ (800d244 <MX_TIM2_Init+0xe4>)
 800d19c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d19e:	4b28      	ldr	r3, [pc, #160]	@ (800d240 <MX_TIM2_Init+0xe0>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d1a4:	4b26      	ldr	r3, [pc, #152]	@ (800d240 <MX_TIM2_Init+0xe0>)
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800d1aa:	4b25      	ldr	r3, [pc, #148]	@ (800d240 <MX_TIM2_Init+0xe0>)
 800d1ac:	0018      	movs	r0, r3
 800d1ae:	f008 fd47 	bl	8015c40 <HAL_TIM_PWM_Init>
 800d1b2:	1e03      	subs	r3, r0, #0
 800d1b4:	d001      	beq.n	800d1ba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800d1b6:	f7fa fef3 	bl	8007fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d1ba:	2110      	movs	r1, #16
 800d1bc:	187b      	adds	r3, r7, r1
 800d1be:	2200      	movs	r2, #0
 800d1c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d1c2:	187b      	adds	r3, r7, r1
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d1c8:	187a      	adds	r2, r7, r1
 800d1ca:	4b1d      	ldr	r3, [pc, #116]	@ (800d240 <MX_TIM2_Init+0xe0>)
 800d1cc:	0011      	movs	r1, r2
 800d1ce:	0018      	movs	r0, r3
 800d1d0:	f009 f854 	bl	801627c <HAL_TIMEx_MasterConfigSynchronization>
 800d1d4:	1e03      	subs	r3, r0, #0
 800d1d6:	d001      	beq.n	800d1dc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800d1d8:	f7fa fee2 	bl	8007fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d1dc:	003b      	movs	r3, r7
 800d1de:	2260      	movs	r2, #96	@ 0x60
 800d1e0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800d1e2:	003b      	movs	r3, r7
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d1e8:	003b      	movs	r3, r7
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d1ee:	003b      	movs	r3, r7
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d1f4:	0039      	movs	r1, r7
 800d1f6:	4b12      	ldr	r3, [pc, #72]	@ (800d240 <MX_TIM2_Init+0xe0>)
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	0018      	movs	r0, r3
 800d1fc:	f008 fdf2 	bl	8015de4 <HAL_TIM_PWM_ConfigChannel>
 800d200:	1e03      	subs	r3, r0, #0
 800d202:	d001      	beq.n	800d208 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800d204:	f7fa fecc 	bl	8007fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d208:	0039      	movs	r1, r7
 800d20a:	4b0d      	ldr	r3, [pc, #52]	@ (800d240 <MX_TIM2_Init+0xe0>)
 800d20c:	2208      	movs	r2, #8
 800d20e:	0018      	movs	r0, r3
 800d210:	f008 fde8 	bl	8015de4 <HAL_TIM_PWM_ConfigChannel>
 800d214:	1e03      	subs	r3, r0, #0
 800d216:	d001      	beq.n	800d21c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800d218:	f7fa fec2 	bl	8007fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800d21c:	0039      	movs	r1, r7
 800d21e:	4b08      	ldr	r3, [pc, #32]	@ (800d240 <MX_TIM2_Init+0xe0>)
 800d220:	220c      	movs	r2, #12
 800d222:	0018      	movs	r0, r3
 800d224:	f008 fdde 	bl	8015de4 <HAL_TIM_PWM_ConfigChannel>
 800d228:	1e03      	subs	r3, r0, #0
 800d22a:	d001      	beq.n	800d230 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800d22c:	f7fa feb8 	bl	8007fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800d230:	4b03      	ldr	r3, [pc, #12]	@ (800d240 <MX_TIM2_Init+0xe0>)
 800d232:	0018      	movs	r0, r3
 800d234:	f000 f8fe 	bl	800d434 <HAL_TIM_MspPostInit>

}
 800d238:	46c0      	nop			@ (mov r8, r8)
 800d23a:	46bd      	mov	sp, r7
 800d23c:	b006      	add	sp, #24
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	20002198 	.word	0x20002198
 800d244:	0000ffff 	.word	0x0000ffff

0800d248 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b086      	sub	sp, #24
 800d24c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d24e:	2310      	movs	r3, #16
 800d250:	18fb      	adds	r3, r7, r3
 800d252:	0018      	movs	r0, r3
 800d254:	2308      	movs	r3, #8
 800d256:	001a      	movs	r2, r3
 800d258:	2100      	movs	r1, #0
 800d25a:	f012 f91d 	bl	801f498 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800d25e:	003b      	movs	r3, r7
 800d260:	0018      	movs	r0, r3
 800d262:	2310      	movs	r3, #16
 800d264:	001a      	movs	r2, r3
 800d266:	2100      	movs	r1, #0
 800d268:	f012 f916 	bl	801f498 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d26c:	4b32      	ldr	r3, [pc, #200]	@ (800d338 <MX_TIM3_Init+0xf0>)
 800d26e:	4a33      	ldr	r2, [pc, #204]	@ (800d33c <MX_TIM3_Init+0xf4>)
 800d270:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800d272:	4b31      	ldr	r3, [pc, #196]	@ (800d338 <MX_TIM3_Init+0xf0>)
 800d274:	2200      	movs	r2, #0
 800d276:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d278:	4b2f      	ldr	r3, [pc, #188]	@ (800d338 <MX_TIM3_Init+0xf0>)
 800d27a:	2200      	movs	r2, #0
 800d27c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800d27e:	4b2e      	ldr	r3, [pc, #184]	@ (800d338 <MX_TIM3_Init+0xf0>)
 800d280:	4a2f      	ldr	r2, [pc, #188]	@ (800d340 <MX_TIM3_Init+0xf8>)
 800d282:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d284:	4b2c      	ldr	r3, [pc, #176]	@ (800d338 <MX_TIM3_Init+0xf0>)
 800d286:	2200      	movs	r2, #0
 800d288:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d28a:	4b2b      	ldr	r3, [pc, #172]	@ (800d338 <MX_TIM3_Init+0xf0>)
 800d28c:	2200      	movs	r2, #0
 800d28e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800d290:	4b29      	ldr	r3, [pc, #164]	@ (800d338 <MX_TIM3_Init+0xf0>)
 800d292:	0018      	movs	r0, r3
 800d294:	f008 fcd4 	bl	8015c40 <HAL_TIM_PWM_Init>
 800d298:	1e03      	subs	r3, r0, #0
 800d29a:	d001      	beq.n	800d2a0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800d29c:	f7fa fe80 	bl	8007fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d2a0:	2110      	movs	r1, #16
 800d2a2:	187b      	adds	r3, r7, r1
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d2a8:	187b      	adds	r3, r7, r1
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800d2ae:	187a      	adds	r2, r7, r1
 800d2b0:	4b21      	ldr	r3, [pc, #132]	@ (800d338 <MX_TIM3_Init+0xf0>)
 800d2b2:	0011      	movs	r1, r2
 800d2b4:	0018      	movs	r0, r3
 800d2b6:	f008 ffe1 	bl	801627c <HAL_TIMEx_MasterConfigSynchronization>
 800d2ba:	1e03      	subs	r3, r0, #0
 800d2bc:	d001      	beq.n	800d2c2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800d2be:	f7fa fe6f 	bl	8007fa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800d2c2:	003b      	movs	r3, r7
 800d2c4:	2260      	movs	r2, #96	@ 0x60
 800d2c6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800d2c8:	003b      	movs	r3, r7
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800d2ce:	003b      	movs	r3, r7
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800d2d4:	003b      	movs	r3, r7
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800d2da:	0039      	movs	r1, r7
 800d2dc:	4b16      	ldr	r3, [pc, #88]	@ (800d338 <MX_TIM3_Init+0xf0>)
 800d2de:	2200      	movs	r2, #0
 800d2e0:	0018      	movs	r0, r3
 800d2e2:	f008 fd7f 	bl	8015de4 <HAL_TIM_PWM_ConfigChannel>
 800d2e6:	1e03      	subs	r3, r0, #0
 800d2e8:	d001      	beq.n	800d2ee <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800d2ea:	f7fa fe59 	bl	8007fa0 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800d2ee:	4b12      	ldr	r3, [pc, #72]	@ (800d338 <MX_TIM3_Init+0xf0>)
 800d2f0:	2104      	movs	r1, #4
 800d2f2:	0018      	movs	r0, r3
 800d2f4:	f009 f820 	bl	8016338 <HAL_TIMEx_RemapConfig>
 800d2f8:	1e03      	subs	r3, r0, #0
 800d2fa:	d001      	beq.n	800d300 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800d2fc:	f7fa fe50 	bl	8007fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800d300:	0039      	movs	r1, r7
 800d302:	4b0d      	ldr	r3, [pc, #52]	@ (800d338 <MX_TIM3_Init+0xf0>)
 800d304:	2204      	movs	r2, #4
 800d306:	0018      	movs	r0, r3
 800d308:	f008 fd6c 	bl	8015de4 <HAL_TIM_PWM_ConfigChannel>
 800d30c:	1e03      	subs	r3, r0, #0
 800d30e:	d001      	beq.n	800d314 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800d310:	f7fa fe46 	bl	8007fa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800d314:	0039      	movs	r1, r7
 800d316:	4b08      	ldr	r3, [pc, #32]	@ (800d338 <MX_TIM3_Init+0xf0>)
 800d318:	2208      	movs	r2, #8
 800d31a:	0018      	movs	r0, r3
 800d31c:	f008 fd62 	bl	8015de4 <HAL_TIM_PWM_ConfigChannel>
 800d320:	1e03      	subs	r3, r0, #0
 800d322:	d001      	beq.n	800d328 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800d324:	f7fa fe3c 	bl	8007fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800d328:	4b03      	ldr	r3, [pc, #12]	@ (800d338 <MX_TIM3_Init+0xf0>)
 800d32a:	0018      	movs	r0, r3
 800d32c:	f000 f882 	bl	800d434 <HAL_TIM_MspPostInit>

}
 800d330:	46c0      	nop			@ (mov r8, r8)
 800d332:	46bd      	mov	sp, r7
 800d334:	b006      	add	sp, #24
 800d336:	bd80      	pop	{r7, pc}
 800d338:	200021d8 	.word	0x200021d8
 800d33c:	40000400 	.word	0x40000400
 800d340:	0000ffff 	.word	0x0000ffff

0800d344 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d34a:	003b      	movs	r3, r7
 800d34c:	0018      	movs	r0, r3
 800d34e:	2308      	movs	r3, #8
 800d350:	001a      	movs	r2, r3
 800d352:	2100      	movs	r1, #0
 800d354:	f012 f8a0 	bl	801f498 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800d358:	4b15      	ldr	r3, [pc, #84]	@ (800d3b0 <MX_TIM6_Init+0x6c>)
 800d35a:	4a16      	ldr	r2, [pc, #88]	@ (800d3b4 <MX_TIM6_Init+0x70>)
 800d35c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800d35e:	4b14      	ldr	r3, [pc, #80]	@ (800d3b0 <MX_TIM6_Init+0x6c>)
 800d360:	220a      	movs	r2, #10
 800d362:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d364:	4b12      	ldr	r3, [pc, #72]	@ (800d3b0 <MX_TIM6_Init+0x6c>)
 800d366:	2200      	movs	r2, #0
 800d368:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800d36a:	4b11      	ldr	r3, [pc, #68]	@ (800d3b0 <MX_TIM6_Init+0x6c>)
 800d36c:	4a12      	ldr	r2, [pc, #72]	@ (800d3b8 <MX_TIM6_Init+0x74>)
 800d36e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d370:	4b0f      	ldr	r3, [pc, #60]	@ (800d3b0 <MX_TIM6_Init+0x6c>)
 800d372:	2200      	movs	r2, #0
 800d374:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800d376:	4b0e      	ldr	r3, [pc, #56]	@ (800d3b0 <MX_TIM6_Init+0x6c>)
 800d378:	0018      	movs	r0, r3
 800d37a:	f008 fbb9 	bl	8015af0 <HAL_TIM_Base_Init>
 800d37e:	1e03      	subs	r3, r0, #0
 800d380:	d001      	beq.n	800d386 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800d382:	f7fa fe0d 	bl	8007fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d386:	003b      	movs	r3, r7
 800d388:	2200      	movs	r2, #0
 800d38a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d38c:	003b      	movs	r3, r7
 800d38e:	2200      	movs	r2, #0
 800d390:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800d392:	003a      	movs	r2, r7
 800d394:	4b06      	ldr	r3, [pc, #24]	@ (800d3b0 <MX_TIM6_Init+0x6c>)
 800d396:	0011      	movs	r1, r2
 800d398:	0018      	movs	r0, r3
 800d39a:	f008 ff6f 	bl	801627c <HAL_TIMEx_MasterConfigSynchronization>
 800d39e:	1e03      	subs	r3, r0, #0
 800d3a0:	d001      	beq.n	800d3a6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800d3a2:	f7fa fdfd 	bl	8007fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800d3a6:	46c0      	nop			@ (mov r8, r8)
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	b002      	add	sp, #8
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	46c0      	nop			@ (mov r8, r8)
 800d3b0:	20002218 	.word	0x20002218
 800d3b4:	40001000 	.word	0x40001000
 800d3b8:	0000ffff 	.word	0x0000ffff

0800d3bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	2380      	movs	r3, #128	@ 0x80
 800d3ca:	05db      	lsls	r3, r3, #23
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d106      	bne.n	800d3de <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d3d0:	4b0a      	ldr	r3, [pc, #40]	@ (800d3fc <HAL_TIM_PWM_MspInit+0x40>)
 800d3d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3d4:	4b09      	ldr	r3, [pc, #36]	@ (800d3fc <HAL_TIM_PWM_MspInit+0x40>)
 800d3d6:	2101      	movs	r1, #1
 800d3d8:	430a      	orrs	r2, r1
 800d3da:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800d3dc:	e00a      	b.n	800d3f4 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4a07      	ldr	r2, [pc, #28]	@ (800d400 <HAL_TIM_PWM_MspInit+0x44>)
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d105      	bne.n	800d3f4 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d3e8:	4b04      	ldr	r3, [pc, #16]	@ (800d3fc <HAL_TIM_PWM_MspInit+0x40>)
 800d3ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3ec:	4b03      	ldr	r3, [pc, #12]	@ (800d3fc <HAL_TIM_PWM_MspInit+0x40>)
 800d3ee:	2102      	movs	r1, #2
 800d3f0:	430a      	orrs	r2, r1
 800d3f2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800d3f4:	46c0      	nop			@ (mov r8, r8)
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	b002      	add	sp, #8
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	40021000 	.word	0x40021000
 800d400:	40000400 	.word	0x40000400

0800d404 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4a06      	ldr	r2, [pc, #24]	@ (800d42c <HAL_TIM_Base_MspInit+0x28>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d105      	bne.n	800d422 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800d416:	4b06      	ldr	r3, [pc, #24]	@ (800d430 <HAL_TIM_Base_MspInit+0x2c>)
 800d418:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d41a:	4b05      	ldr	r3, [pc, #20]	@ (800d430 <HAL_TIM_Base_MspInit+0x2c>)
 800d41c:	2110      	movs	r1, #16
 800d41e:	430a      	orrs	r2, r1
 800d420:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800d422:	46c0      	nop			@ (mov r8, r8)
 800d424:	46bd      	mov	sp, r7
 800d426:	b002      	add	sp, #8
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	46c0      	nop			@ (mov r8, r8)
 800d42c:	40001000 	.word	0x40001000
 800d430:	40021000 	.word	0x40021000

0800d434 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800d434:	b590      	push	{r4, r7, lr}
 800d436:	b08b      	sub	sp, #44	@ 0x2c
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d43c:	2414      	movs	r4, #20
 800d43e:	193b      	adds	r3, r7, r4
 800d440:	0018      	movs	r0, r3
 800d442:	2314      	movs	r3, #20
 800d444:	001a      	movs	r2, r3
 800d446:	2100      	movs	r1, #0
 800d448:	f012 f826 	bl	801f498 <memset>
  if(timHandle->Instance==TIM2)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	2380      	movs	r3, #128	@ 0x80
 800d452:	05db      	lsls	r3, r3, #23
 800d454:	429a      	cmp	r2, r3
 800d456:	d123      	bne.n	800d4a0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d458:	4b27      	ldr	r3, [pc, #156]	@ (800d4f8 <HAL_TIM_MspPostInit+0xc4>)
 800d45a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d45c:	4b26      	ldr	r3, [pc, #152]	@ (800d4f8 <HAL_TIM_MspPostInit+0xc4>)
 800d45e:	2101      	movs	r1, #1
 800d460:	430a      	orrs	r2, r1
 800d462:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d464:	4b24      	ldr	r3, [pc, #144]	@ (800d4f8 <HAL_TIM_MspPostInit+0xc4>)
 800d466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d468:	2201      	movs	r2, #1
 800d46a:	4013      	ands	r3, r2
 800d46c:	613b      	str	r3, [r7, #16]
 800d46e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800d470:	0021      	movs	r1, r4
 800d472:	187b      	adds	r3, r7, r1
 800d474:	220d      	movs	r2, #13
 800d476:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d478:	187b      	adds	r3, r7, r1
 800d47a:	2202      	movs	r2, #2
 800d47c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d47e:	187b      	adds	r3, r7, r1
 800d480:	2200      	movs	r2, #0
 800d482:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d484:	187b      	adds	r3, r7, r1
 800d486:	2200      	movs	r2, #0
 800d488:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800d48a:	187b      	adds	r3, r7, r1
 800d48c:	2202      	movs	r2, #2
 800d48e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d490:	187a      	adds	r2, r7, r1
 800d492:	23a0      	movs	r3, #160	@ 0xa0
 800d494:	05db      	lsls	r3, r3, #23
 800d496:	0011      	movs	r1, r2
 800d498:	0018      	movs	r0, r3
 800d49a:	f001 fed9 	bl	800f250 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800d49e:	e027      	b.n	800d4f0 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4a15      	ldr	r2, [pc, #84]	@ (800d4fc <HAL_TIM_MspPostInit+0xc8>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d122      	bne.n	800d4f0 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d4aa:	4b13      	ldr	r3, [pc, #76]	@ (800d4f8 <HAL_TIM_MspPostInit+0xc4>)
 800d4ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ae:	4b12      	ldr	r3, [pc, #72]	@ (800d4f8 <HAL_TIM_MspPostInit+0xc4>)
 800d4b0:	2104      	movs	r1, #4
 800d4b2:	430a      	orrs	r2, r1
 800d4b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d4b6:	4b10      	ldr	r3, [pc, #64]	@ (800d4f8 <HAL_TIM_MspPostInit+0xc4>)
 800d4b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4ba:	2204      	movs	r2, #4
 800d4bc:	4013      	ands	r3, r2
 800d4be:	60fb      	str	r3, [r7, #12]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800d4c2:	2114      	movs	r1, #20
 800d4c4:	187b      	adds	r3, r7, r1
 800d4c6:	22e0      	movs	r2, #224	@ 0xe0
 800d4c8:	0052      	lsls	r2, r2, #1
 800d4ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4cc:	187b      	adds	r3, r7, r1
 800d4ce:	2202      	movs	r2, #2
 800d4d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4d2:	187b      	adds	r3, r7, r1
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d4d8:	187b      	adds	r3, r7, r1
 800d4da:	2200      	movs	r2, #0
 800d4dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800d4de:	187b      	adds	r3, r7, r1
 800d4e0:	2202      	movs	r2, #2
 800d4e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d4e4:	187b      	adds	r3, r7, r1
 800d4e6:	4a06      	ldr	r2, [pc, #24]	@ (800d500 <HAL_TIM_MspPostInit+0xcc>)
 800d4e8:	0019      	movs	r1, r3
 800d4ea:	0010      	movs	r0, r2
 800d4ec:	f001 feb0 	bl	800f250 <HAL_GPIO_Init>
}
 800d4f0:	46c0      	nop			@ (mov r8, r8)
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	b00b      	add	sp, #44	@ 0x2c
 800d4f6:	bd90      	pop	{r4, r7, pc}
 800d4f8:	40021000 	.word	0x40021000
 800d4fc:	40000400 	.word	0x40000400
 800d500:	50000800 	.word	0x50000800

0800d504 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800d508:	4b17      	ldr	r3, [pc, #92]	@ (800d568 <MX_LPUART1_UART_Init+0x64>)
 800d50a:	4a18      	ldr	r2, [pc, #96]	@ (800d56c <MX_LPUART1_UART_Init+0x68>)
 800d50c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800d50e:	4b16      	ldr	r3, [pc, #88]	@ (800d568 <MX_LPUART1_UART_Init+0x64>)
 800d510:	22e1      	movs	r2, #225	@ 0xe1
 800d512:	0252      	lsls	r2, r2, #9
 800d514:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d516:	4b14      	ldr	r3, [pc, #80]	@ (800d568 <MX_LPUART1_UART_Init+0x64>)
 800d518:	2200      	movs	r2, #0
 800d51a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800d51c:	4b12      	ldr	r3, [pc, #72]	@ (800d568 <MX_LPUART1_UART_Init+0x64>)
 800d51e:	2200      	movs	r2, #0
 800d520:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800d522:	4b11      	ldr	r3, [pc, #68]	@ (800d568 <MX_LPUART1_UART_Init+0x64>)
 800d524:	2200      	movs	r2, #0
 800d526:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800d528:	4b0f      	ldr	r3, [pc, #60]	@ (800d568 <MX_LPUART1_UART_Init+0x64>)
 800d52a:	220c      	movs	r2, #12
 800d52c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d52e:	4b0e      	ldr	r3, [pc, #56]	@ (800d568 <MX_LPUART1_UART_Init+0x64>)
 800d530:	2200      	movs	r2, #0
 800d532:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d534:	4b0c      	ldr	r3, [pc, #48]	@ (800d568 <MX_LPUART1_UART_Init+0x64>)
 800d536:	2200      	movs	r2, #0
 800d538:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800d53a:	4b0b      	ldr	r3, [pc, #44]	@ (800d568 <MX_LPUART1_UART_Init+0x64>)
 800d53c:	2218      	movs	r2, #24
 800d53e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d540:	4b09      	ldr	r3, [pc, #36]	@ (800d568 <MX_LPUART1_UART_Init+0x64>)
 800d542:	2280      	movs	r2, #128	@ 0x80
 800d544:	0212      	lsls	r2, r2, #8
 800d546:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800d548:	4b07      	ldr	r3, [pc, #28]	@ (800d568 <MX_LPUART1_UART_Init+0x64>)
 800d54a:	2280      	movs	r2, #128	@ 0x80
 800d54c:	0152      	lsls	r2, r2, #5
 800d54e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800d550:	4b05      	ldr	r3, [pc, #20]	@ (800d568 <MX_LPUART1_UART_Init+0x64>)
 800d552:	0018      	movs	r0, r3
 800d554:	f008 ff0e 	bl	8016374 <HAL_UART_Init>
 800d558:	1e03      	subs	r3, r0, #0
 800d55a:	d001      	beq.n	800d560 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800d55c:	f7fa fd20 	bl	8007fa0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800d560:	46c0      	nop			@ (mov r8, r8)
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	46c0      	nop			@ (mov r8, r8)
 800d568:	20002258 	.word	0x20002258
 800d56c:	40004800 	.word	0x40004800

0800d570 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d574:	4b16      	ldr	r3, [pc, #88]	@ (800d5d0 <MX_USART1_UART_Init+0x60>)
 800d576:	4a17      	ldr	r2, [pc, #92]	@ (800d5d4 <MX_USART1_UART_Init+0x64>)
 800d578:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d57a:	4b15      	ldr	r3, [pc, #84]	@ (800d5d0 <MX_USART1_UART_Init+0x60>)
 800d57c:	22e1      	movs	r2, #225	@ 0xe1
 800d57e:	0252      	lsls	r2, r2, #9
 800d580:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d582:	4b13      	ldr	r3, [pc, #76]	@ (800d5d0 <MX_USART1_UART_Init+0x60>)
 800d584:	2200      	movs	r2, #0
 800d586:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d588:	4b11      	ldr	r3, [pc, #68]	@ (800d5d0 <MX_USART1_UART_Init+0x60>)
 800d58a:	2200      	movs	r2, #0
 800d58c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d58e:	4b10      	ldr	r3, [pc, #64]	@ (800d5d0 <MX_USART1_UART_Init+0x60>)
 800d590:	2200      	movs	r2, #0
 800d592:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d594:	4b0e      	ldr	r3, [pc, #56]	@ (800d5d0 <MX_USART1_UART_Init+0x60>)
 800d596:	220c      	movs	r2, #12
 800d598:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d59a:	4b0d      	ldr	r3, [pc, #52]	@ (800d5d0 <MX_USART1_UART_Init+0x60>)
 800d59c:	2200      	movs	r2, #0
 800d59e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d5a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d5d0 <MX_USART1_UART_Init+0x60>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d5a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d5d0 <MX_USART1_UART_Init+0x60>)
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d5ac:	4b08      	ldr	r3, [pc, #32]	@ (800d5d0 <MX_USART1_UART_Init+0x60>)
 800d5ae:	2208      	movs	r2, #8
 800d5b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d5b2:	4b07      	ldr	r3, [pc, #28]	@ (800d5d0 <MX_USART1_UART_Init+0x60>)
 800d5b4:	2280      	movs	r2, #128	@ 0x80
 800d5b6:	0212      	lsls	r2, r2, #8
 800d5b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d5ba:	4b05      	ldr	r3, [pc, #20]	@ (800d5d0 <MX_USART1_UART_Init+0x60>)
 800d5bc:	0018      	movs	r0, r3
 800d5be:	f008 fed9 	bl	8016374 <HAL_UART_Init>
 800d5c2:	1e03      	subs	r3, r0, #0
 800d5c4:	d001      	beq.n	800d5ca <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800d5c6:	f7fa fceb 	bl	8007fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d5ca:	46c0      	nop			@ (mov r8, r8)
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	20002310 	.word	0x20002310
 800d5d4:	40013800 	.word	0x40013800

0800d5d8 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800d5dc:	4b14      	ldr	r3, [pc, #80]	@ (800d630 <MX_USART4_UART_Init+0x58>)
 800d5de:	4a15      	ldr	r2, [pc, #84]	@ (800d634 <MX_USART4_UART_Init+0x5c>)
 800d5e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800d5e2:	4b13      	ldr	r3, [pc, #76]	@ (800d630 <MX_USART4_UART_Init+0x58>)
 800d5e4:	22e1      	movs	r2, #225	@ 0xe1
 800d5e6:	0252      	lsls	r2, r2, #9
 800d5e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d5ea:	4b11      	ldr	r3, [pc, #68]	@ (800d630 <MX_USART4_UART_Init+0x58>)
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d5f0:	4b0f      	ldr	r3, [pc, #60]	@ (800d630 <MX_USART4_UART_Init+0x58>)
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d5f6:	4b0e      	ldr	r3, [pc, #56]	@ (800d630 <MX_USART4_UART_Init+0x58>)
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d5fc:	4b0c      	ldr	r3, [pc, #48]	@ (800d630 <MX_USART4_UART_Init+0x58>)
 800d5fe:	220c      	movs	r2, #12
 800d600:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d602:	4b0b      	ldr	r3, [pc, #44]	@ (800d630 <MX_USART4_UART_Init+0x58>)
 800d604:	2200      	movs	r2, #0
 800d606:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d608:	4b09      	ldr	r3, [pc, #36]	@ (800d630 <MX_USART4_UART_Init+0x58>)
 800d60a:	2200      	movs	r2, #0
 800d60c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d60e:	4b08      	ldr	r3, [pc, #32]	@ (800d630 <MX_USART4_UART_Init+0x58>)
 800d610:	2200      	movs	r2, #0
 800d612:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d614:	4b06      	ldr	r3, [pc, #24]	@ (800d630 <MX_USART4_UART_Init+0x58>)
 800d616:	2200      	movs	r2, #0
 800d618:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800d61a:	4b05      	ldr	r3, [pc, #20]	@ (800d630 <MX_USART4_UART_Init+0x58>)
 800d61c:	0018      	movs	r0, r3
 800d61e:	f008 fea9 	bl	8016374 <HAL_UART_Init>
 800d622:	1e03      	subs	r3, r0, #0
 800d624:	d001      	beq.n	800d62a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800d626:	f7fa fcbb 	bl	8007fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800d62a:	46c0      	nop			@ (mov r8, r8)
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	200023c8 	.word	0x200023c8
 800d634:	40004c00 	.word	0x40004c00

0800d638 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d638:	b590      	push	{r4, r7, lr}
 800d63a:	b08d      	sub	sp, #52	@ 0x34
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d640:	241c      	movs	r4, #28
 800d642:	193b      	adds	r3, r7, r4
 800d644:	0018      	movs	r0, r3
 800d646:	2314      	movs	r3, #20
 800d648:	001a      	movs	r2, r3
 800d64a:	2100      	movs	r1, #0
 800d64c:	f011 ff24 	bl	801f498 <memset>
  if(uartHandle->Instance==LPUART1)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a8b      	ldr	r2, [pc, #556]	@ (800d884 <HAL_UART_MspInit+0x24c>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d129      	bne.n	800d6ae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800d65a:	4b8b      	ldr	r3, [pc, #556]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d65c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d65e:	4b8a      	ldr	r3, [pc, #552]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d660:	2180      	movs	r1, #128	@ 0x80
 800d662:	02c9      	lsls	r1, r1, #11
 800d664:	430a      	orrs	r2, r1
 800d666:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d668:	4b87      	ldr	r3, [pc, #540]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d66a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d66c:	4b86      	ldr	r3, [pc, #536]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d66e:	2104      	movs	r1, #4
 800d670:	430a      	orrs	r2, r1
 800d672:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d674:	4b84      	ldr	r3, [pc, #528]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d678:	2204      	movs	r2, #4
 800d67a:	4013      	ands	r3, r2
 800d67c:	61bb      	str	r3, [r7, #24]
 800d67e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800d680:	0021      	movs	r1, r4
 800d682:	187b      	adds	r3, r7, r1
 800d684:	2203      	movs	r2, #3
 800d686:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d688:	187b      	adds	r3, r7, r1
 800d68a:	2202      	movs	r2, #2
 800d68c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d68e:	187b      	adds	r3, r7, r1
 800d690:	2200      	movs	r2, #0
 800d692:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d694:	187b      	adds	r3, r7, r1
 800d696:	2203      	movs	r2, #3
 800d698:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800d69a:	187b      	adds	r3, r7, r1
 800d69c:	2206      	movs	r2, #6
 800d69e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d6a0:	187b      	adds	r3, r7, r1
 800d6a2:	4a7a      	ldr	r2, [pc, #488]	@ (800d88c <HAL_UART_MspInit+0x254>)
 800d6a4:	0019      	movs	r1, r3
 800d6a6:	0010      	movs	r0, r2
 800d6a8:	f001 fdd2 	bl	800f250 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800d6ac:	e0e5      	b.n	800d87a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4a77      	ldr	r2, [pc, #476]	@ (800d890 <HAL_UART_MspInit+0x258>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d133      	bne.n	800d720 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800d6b8:	4b73      	ldr	r3, [pc, #460]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d6ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d6bc:	4b72      	ldr	r3, [pc, #456]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d6be:	2180      	movs	r1, #128	@ 0x80
 800d6c0:	01c9      	lsls	r1, r1, #7
 800d6c2:	430a      	orrs	r2, r1
 800d6c4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d6c6:	4b70      	ldr	r3, [pc, #448]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d6c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6ca:	4b6f      	ldr	r3, [pc, #444]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d6cc:	2101      	movs	r1, #1
 800d6ce:	430a      	orrs	r2, r1
 800d6d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d6d2:	4b6d      	ldr	r3, [pc, #436]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	4013      	ands	r3, r2
 800d6da:	617b      	str	r3, [r7, #20]
 800d6dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d6de:	211c      	movs	r1, #28
 800d6e0:	187b      	adds	r3, r7, r1
 800d6e2:	22c0      	movs	r2, #192	@ 0xc0
 800d6e4:	00d2      	lsls	r2, r2, #3
 800d6e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6e8:	187b      	adds	r3, r7, r1
 800d6ea:	2202      	movs	r2, #2
 800d6ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6ee:	187b      	adds	r3, r7, r1
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d6f4:	187b      	adds	r3, r7, r1
 800d6f6:	2203      	movs	r2, #3
 800d6f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800d6fa:	187b      	adds	r3, r7, r1
 800d6fc:	2204      	movs	r2, #4
 800d6fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d700:	187a      	adds	r2, r7, r1
 800d702:	23a0      	movs	r3, #160	@ 0xa0
 800d704:	05db      	lsls	r3, r3, #23
 800d706:	0011      	movs	r1, r2
 800d708:	0018      	movs	r0, r3
 800d70a:	f001 fda1 	bl	800f250 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800d70e:	2200      	movs	r2, #0
 800d710:	2100      	movs	r1, #0
 800d712:	201b      	movs	r0, #27
 800d714:	f001 f94e 	bl	800e9b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d718:	201b      	movs	r0, #27
 800d71a:	f001 f960 	bl	800e9de <HAL_NVIC_EnableIRQ>
}
 800d71e:	e0ac      	b.n	800d87a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	4a5b      	ldr	r2, [pc, #364]	@ (800d894 <HAL_UART_MspInit+0x25c>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d000      	beq.n	800d72c <HAL_UART_MspInit+0xf4>
 800d72a:	e0a6      	b.n	800d87a <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800d72c:	4b56      	ldr	r3, [pc, #344]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d72e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d730:	4b55      	ldr	r3, [pc, #340]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d732:	2180      	movs	r1, #128	@ 0x80
 800d734:	0309      	lsls	r1, r1, #12
 800d736:	430a      	orrs	r2, r1
 800d738:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d73a:	4b53      	ldr	r3, [pc, #332]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d73c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d73e:	4b52      	ldr	r3, [pc, #328]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d740:	2101      	movs	r1, #1
 800d742:	430a      	orrs	r2, r1
 800d744:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d746:	4b50      	ldr	r3, [pc, #320]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d74a:	2201      	movs	r2, #1
 800d74c:	4013      	ands	r3, r2
 800d74e:	613b      	str	r3, [r7, #16]
 800d750:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d752:	4b4d      	ldr	r3, [pc, #308]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d756:	4b4c      	ldr	r3, [pc, #304]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d758:	2104      	movs	r1, #4
 800d75a:	430a      	orrs	r2, r1
 800d75c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d75e:	4b4a      	ldr	r3, [pc, #296]	@ (800d888 <HAL_UART_MspInit+0x250>)
 800d760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d762:	2204      	movs	r2, #4
 800d764:	4013      	ands	r3, r2
 800d766:	60fb      	str	r3, [r7, #12]
 800d768:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d76a:	241c      	movs	r4, #28
 800d76c:	193b      	adds	r3, r7, r4
 800d76e:	2202      	movs	r2, #2
 800d770:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d772:	193b      	adds	r3, r7, r4
 800d774:	2202      	movs	r2, #2
 800d776:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d778:	193b      	adds	r3, r7, r4
 800d77a:	2200      	movs	r2, #0
 800d77c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d77e:	193b      	adds	r3, r7, r4
 800d780:	2203      	movs	r2, #3
 800d782:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d784:	193b      	adds	r3, r7, r4
 800d786:	2206      	movs	r2, #6
 800d788:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d78a:	193a      	adds	r2, r7, r4
 800d78c:	23a0      	movs	r3, #160	@ 0xa0
 800d78e:	05db      	lsls	r3, r3, #23
 800d790:	0011      	movs	r1, r2
 800d792:	0018      	movs	r0, r3
 800d794:	f001 fd5c 	bl	800f250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d798:	0021      	movs	r1, r4
 800d79a:	187b      	adds	r3, r7, r1
 800d79c:	2280      	movs	r2, #128	@ 0x80
 800d79e:	00d2      	lsls	r2, r2, #3
 800d7a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d7a2:	187b      	adds	r3, r7, r1
 800d7a4:	2202      	movs	r2, #2
 800d7a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d7a8:	187b      	adds	r3, r7, r1
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d7ae:	187b      	adds	r3, r7, r1
 800d7b0:	2203      	movs	r2, #3
 800d7b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d7b4:	187b      	adds	r3, r7, r1
 800d7b6:	2206      	movs	r2, #6
 800d7b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d7ba:	187b      	adds	r3, r7, r1
 800d7bc:	4a33      	ldr	r2, [pc, #204]	@ (800d88c <HAL_UART_MspInit+0x254>)
 800d7be:	0019      	movs	r1, r3
 800d7c0:	0010      	movs	r0, r2
 800d7c2:	f001 fd45 	bl	800f250 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800d7c6:	4b34      	ldr	r3, [pc, #208]	@ (800d898 <HAL_UART_MspInit+0x260>)
 800d7c8:	4a34      	ldr	r2, [pc, #208]	@ (800d89c <HAL_UART_MspInit+0x264>)
 800d7ca:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800d7cc:	4b32      	ldr	r3, [pc, #200]	@ (800d898 <HAL_UART_MspInit+0x260>)
 800d7ce:	220c      	movs	r2, #12
 800d7d0:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d7d2:	4b31      	ldr	r3, [pc, #196]	@ (800d898 <HAL_UART_MspInit+0x260>)
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d7d8:	4b2f      	ldr	r3, [pc, #188]	@ (800d898 <HAL_UART_MspInit+0x260>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d7de:	4b2e      	ldr	r3, [pc, #184]	@ (800d898 <HAL_UART_MspInit+0x260>)
 800d7e0:	2280      	movs	r2, #128	@ 0x80
 800d7e2:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d7e4:	4b2c      	ldr	r3, [pc, #176]	@ (800d898 <HAL_UART_MspInit+0x260>)
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d7ea:	4b2b      	ldr	r3, [pc, #172]	@ (800d898 <HAL_UART_MspInit+0x260>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800d7f0:	4b29      	ldr	r3, [pc, #164]	@ (800d898 <HAL_UART_MspInit+0x260>)
 800d7f2:	2220      	movs	r2, #32
 800d7f4:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d7f6:	4b28      	ldr	r3, [pc, #160]	@ (800d898 <HAL_UART_MspInit+0x260>)
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800d7fc:	4b26      	ldr	r3, [pc, #152]	@ (800d898 <HAL_UART_MspInit+0x260>)
 800d7fe:	0018      	movs	r0, r3
 800d800:	f001 f90a 	bl	800ea18 <HAL_DMA_Init>
 800d804:	1e03      	subs	r3, r0, #0
 800d806:	d001      	beq.n	800d80c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800d808:	f7fa fbca 	bl	8007fa0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	4a22      	ldr	r2, [pc, #136]	@ (800d898 <HAL_UART_MspInit+0x260>)
 800d810:	675a      	str	r2, [r3, #116]	@ 0x74
 800d812:	4b21      	ldr	r3, [pc, #132]	@ (800d898 <HAL_UART_MspInit+0x260>)
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800d818:	4b21      	ldr	r3, [pc, #132]	@ (800d8a0 <HAL_UART_MspInit+0x268>)
 800d81a:	4a22      	ldr	r2, [pc, #136]	@ (800d8a4 <HAL_UART_MspInit+0x26c>)
 800d81c:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800d81e:	4b20      	ldr	r3, [pc, #128]	@ (800d8a0 <HAL_UART_MspInit+0x268>)
 800d820:	220c      	movs	r2, #12
 800d822:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d824:	4b1e      	ldr	r3, [pc, #120]	@ (800d8a0 <HAL_UART_MspInit+0x268>)
 800d826:	2210      	movs	r2, #16
 800d828:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d82a:	4b1d      	ldr	r3, [pc, #116]	@ (800d8a0 <HAL_UART_MspInit+0x268>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d830:	4b1b      	ldr	r3, [pc, #108]	@ (800d8a0 <HAL_UART_MspInit+0x268>)
 800d832:	2280      	movs	r2, #128	@ 0x80
 800d834:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d836:	4b1a      	ldr	r3, [pc, #104]	@ (800d8a0 <HAL_UART_MspInit+0x268>)
 800d838:	2200      	movs	r2, #0
 800d83a:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d83c:	4b18      	ldr	r3, [pc, #96]	@ (800d8a0 <HAL_UART_MspInit+0x268>)
 800d83e:	2200      	movs	r2, #0
 800d840:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800d842:	4b17      	ldr	r3, [pc, #92]	@ (800d8a0 <HAL_UART_MspInit+0x268>)
 800d844:	2200      	movs	r2, #0
 800d846:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d848:	4b15      	ldr	r3, [pc, #84]	@ (800d8a0 <HAL_UART_MspInit+0x268>)
 800d84a:	2200      	movs	r2, #0
 800d84c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800d84e:	4b14      	ldr	r3, [pc, #80]	@ (800d8a0 <HAL_UART_MspInit+0x268>)
 800d850:	0018      	movs	r0, r3
 800d852:	f001 f8e1 	bl	800ea18 <HAL_DMA_Init>
 800d856:	1e03      	subs	r3, r0, #0
 800d858:	d001      	beq.n	800d85e <HAL_UART_MspInit+0x226>
      Error_Handler();
 800d85a:	f7fa fba1 	bl	8007fa0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4a0f      	ldr	r2, [pc, #60]	@ (800d8a0 <HAL_UART_MspInit+0x268>)
 800d862:	671a      	str	r2, [r3, #112]	@ 0x70
 800d864:	4b0e      	ldr	r3, [pc, #56]	@ (800d8a0 <HAL_UART_MspInit+0x268>)
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800d86a:	2200      	movs	r2, #0
 800d86c:	2100      	movs	r1, #0
 800d86e:	200e      	movs	r0, #14
 800d870:	f001 f8a0 	bl	800e9b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800d874:	200e      	movs	r0, #14
 800d876:	f001 f8b2 	bl	800e9de <HAL_NVIC_EnableIRQ>
}
 800d87a:	46c0      	nop			@ (mov r8, r8)
 800d87c:	46bd      	mov	sp, r7
 800d87e:	b00d      	add	sp, #52	@ 0x34
 800d880:	bd90      	pop	{r4, r7, pc}
 800d882:	46c0      	nop			@ (mov r8, r8)
 800d884:	40004800 	.word	0x40004800
 800d888:	40021000 	.word	0x40021000
 800d88c:	50000800 	.word	0x50000800
 800d890:	40013800 	.word	0x40013800
 800d894:	40004c00 	.word	0x40004c00
 800d898:	20002480 	.word	0x20002480
 800d89c:	4002006c 	.word	0x4002006c
 800d8a0:	200024c8 	.word	0x200024c8
 800d8a4:	40020080 	.word	0x40020080

0800d8a8 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b086      	sub	sp, #24
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800d8b0:	f000 fbee 	bl	800e090 <HAL_GetTick>
 800d8b4:	0003      	movs	r3, r0
 800d8b6:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800d8b8:	4b1c      	ldr	r3, [pc, #112]	@ (800d92c <TimestampIsReached+0x84>)
 800d8ba:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800d8bc:	697a      	ldr	r2, [r7, #20]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d307      	bcc.n	800d8d4 <TimestampIsReached+0x2c>
 800d8c4:	697a      	ldr	r2, [r7, #20]
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	1ad3      	subs	r3, r2, r3
 800d8ca:	693a      	ldr	r2, [r7, #16]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d901      	bls.n	800d8d4 <TimestampIsReached+0x2c>
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	e000      	b.n	800d8d6 <TimestampIsReached+0x2e>
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	230f      	movs	r3, #15
 800d8d8:	18fb      	adds	r3, r7, r3
 800d8da:	701a      	strb	r2, [r3, #0]
 800d8dc:	781a      	ldrb	r2, [r3, #0]
 800d8de:	2101      	movs	r1, #1
 800d8e0:	400a      	ands	r2, r1
 800d8e2:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800d8e4:	697a      	ldr	r2, [r7, #20]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d207      	bcs.n	800d8fc <TimestampIsReached+0x54>
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	1ad3      	subs	r3, r2, r3
 800d8f2:	693a      	ldr	r2, [r7, #16]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d201      	bcs.n	800d8fc <TimestampIsReached+0x54>
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	e000      	b.n	800d8fe <TimestampIsReached+0x56>
 800d8fc:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800d8fe:	200e      	movs	r0, #14
 800d900:	183b      	adds	r3, r7, r0
 800d902:	701a      	strb	r2, [r3, #0]
 800d904:	781a      	ldrb	r2, [r3, #0]
 800d906:	2101      	movs	r1, #1
 800d908:	400a      	ands	r2, r1
 800d90a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800d90c:	230f      	movs	r3, #15
 800d90e:	18fb      	adds	r3, r7, r3
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d103      	bne.n	800d91e <TimestampIsReached+0x76>
 800d916:	183b      	adds	r3, r7, r0
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d001      	beq.n	800d922 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800d91e:	2301      	movs	r3, #1
 800d920:	e000      	b.n	800d924 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800d922:	2300      	movs	r3, #0
}
 800d924:	0018      	movs	r0, r3
 800d926:	46bd      	mov	sp, r7
 800d928:	b006      	add	sp, #24
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	7fffffff 	.word	0x7fffffff

0800d930 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800d938:	f000 fbaa 	bl	800e090 <HAL_GetTick>
 800d93c:	0002      	movs	r2, r0
 800d93e:	4904      	ldr	r1, [pc, #16]	@ (800d950 <AddTimestamp+0x20>)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	0018      	movs	r0, r3
 800d944:	f011 fc64 	bl	801f210 <siprintf>
}
 800d948:	46c0      	nop			@ (mov r8, r8)
 800d94a:	46bd      	mov	sp, r7
 800d94c:	b002      	add	sp, #8
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	08023d24 	.word	0x08023d24

0800d954 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800d954:	b40c      	push	{r2, r3}
 800d956:	b5b0      	push	{r4, r5, r7, lr}
 800d958:	b0a4      	sub	sp, #144	@ 0x90
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	0002      	movs	r2, r0
 800d95e:	6039      	str	r1, [r7, #0]
 800d960:	1dfb      	adds	r3, r7, #7
 800d962:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800d964:	4b23      	ldr	r3, [pc, #140]	@ (800d9f4 <CreateLine+0xa0>)
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	1dfa      	adds	r2, r7, #7
 800d96a:	7812      	ldrb	r2, [r2, #0]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d839      	bhi.n	800d9e4 <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800d970:	683a      	ldr	r2, [r7, #0]
 800d972:	4921      	ldr	r1, [pc, #132]	@ (800d9f8 <CreateLine+0xa4>)
 800d974:	240c      	movs	r4, #12
 800d976:	193b      	adds	r3, r7, r4
 800d978:	0018      	movs	r0, r3
 800d97a:	f011 fc49 	bl	801f210 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800d97e:	4b1d      	ldr	r3, [pc, #116]	@ (800d9f4 <CreateLine+0xa0>)
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	2b01      	cmp	r3, #1
 800d984:	d909      	bls.n	800d99a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800d986:	193b      	adds	r3, r7, r4
 800d988:	0018      	movs	r0, r3
 800d98a:	f7f2 fbef 	bl	800016c <strlen>
 800d98e:	0002      	movs	r2, r0
 800d990:	193b      	adds	r3, r7, r4
 800d992:	189b      	adds	r3, r3, r2
 800d994:	0018      	movs	r0, r3
 800d996:	f7ff ffcb 	bl	800d930 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800d99a:	240c      	movs	r4, #12
 800d99c:	193b      	adds	r3, r7, r4
 800d99e:	0018      	movs	r0, r3
 800d9a0:	f7f2 fbe4 	bl	800016c <strlen>
 800d9a4:	0003      	movs	r3, r0
 800d9a6:	218c      	movs	r1, #140	@ 0x8c
 800d9a8:	187a      	adds	r2, r7, r1
 800d9aa:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800d9ac:	239c      	movs	r3, #156	@ 0x9c
 800d9ae:	2508      	movs	r5, #8
 800d9b0:	195b      	adds	r3, r3, r5
 800d9b2:	19db      	adds	r3, r3, r7
 800d9b4:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800d9b6:	193a      	adds	r2, r7, r4
 800d9b8:	187b      	adds	r3, r7, r1
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	18d0      	adds	r0, r2, r3
 800d9be:	187b      	adds	r3, r7, r1
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	2280      	movs	r2, #128	@ 0x80
 800d9c4:	1ad3      	subs	r3, r2, r3
 800d9c6:	0019      	movs	r1, r3
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	2298      	movs	r2, #152	@ 0x98
 800d9cc:	1952      	adds	r2, r2, r5
 800d9ce:	19d2      	adds	r2, r2, r7
 800d9d0:	6812      	ldr	r2, [r2, #0]
 800d9d2:	f011 fcb5 	bl	801f340 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800d9d6:	193a      	adds	r2, r7, r4
 800d9d8:	4b08      	ldr	r3, [pc, #32]	@ (800d9fc <CreateLine+0xa8>)
 800d9da:	0011      	movs	r1, r2
 800d9dc:	0018      	movs	r0, r3
 800d9de:	f011 fba7 	bl	801f130 <iprintf>
 800d9e2:	e000      	b.n	800d9e6 <CreateLine+0x92>
    return;
 800d9e4:	46c0      	nop			@ (mov r8, r8)
}
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	b024      	add	sp, #144	@ 0x90
 800d9ea:	bcb0      	pop	{r4, r5, r7}
 800d9ec:	bc08      	pop	{r3}
 800d9ee:	b002      	add	sp, #8
 800d9f0:	4718      	bx	r3
 800d9f2:	46c0      	nop			@ (mov r8, r8)
 800d9f4:	200000cc 	.word	0x200000cc
 800d9f8:	08023d30 	.word	0x08023d30
 800d9fc:	08023d34 	.word	0x08023d34

0800da00 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	b29a      	uxth	r2, r3
 800da10:	68b9      	ldr	r1, [r7, #8]
 800da12:	4804      	ldr	r0, [pc, #16]	@ (800da24 <_write+0x24>)
 800da14:	2364      	movs	r3, #100	@ 0x64
 800da16:	f008 fd13 	bl	8016440 <HAL_UART_Transmit>
  return count;
 800da1a:	687b      	ldr	r3, [r7, #4]
}
 800da1c:	0018      	movs	r0, r3
 800da1e:	46bd      	mov	sp, r7
 800da20:	b004      	add	sp, #16
 800da22:	bd80      	pop	{r7, pc}
 800da24:	20002310 	.word	0x20002310

0800da28 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	0002      	movs	r2, r0
 800da30:	1dfb      	adds	r3, r7, #7
 800da32:	701a      	strb	r2, [r3, #0]
 800da34:	4b03      	ldr	r3, [pc, #12]	@ (800da44 <SetVerboseLevel+0x1c>)
 800da36:	1dfa      	adds	r2, r7, #7
 800da38:	7812      	ldrb	r2, [r2, #0]
 800da3a:	701a      	strb	r2, [r3, #0]
 800da3c:	46c0      	nop			@ (mov r8, r8)
 800da3e:	46bd      	mov	sp, r7
 800da40:	b002      	add	sp, #8
 800da42:	bd80      	pop	{r7, pc}
 800da44:	200000cc 	.word	0x200000cc

0800da48 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 800da48:	b580      	push	{r7, lr}
 800da4a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800da4c:	f000 fb20 	bl	800e090 <HAL_GetTick>
 800da50:	0003      	movs	r3, r0
}
 800da52:	0018      	movs	r0, r3
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 800da58:	b580      	push	{r7, lr}
 800da5a:	b082      	sub	sp, #8
 800da5c:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800da5e:	4a0f      	ldr	r2, [pc, #60]	@ (800da9c <BinaryReleaseInfo+0x44>)
 800da60:	4b0f      	ldr	r3, [pc, #60]	@ (800daa0 <BinaryReleaseInfo+0x48>)
 800da62:	0019      	movs	r1, r3
 800da64:	2002      	movs	r0, #2
 800da66:	f7ff ff75 	bl	800d954 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800da6a:	480e      	ldr	r0, [pc, #56]	@ (800daa4 <BinaryReleaseInfo+0x4c>)
 800da6c:	4a0e      	ldr	r2, [pc, #56]	@ (800daa8 <BinaryReleaseInfo+0x50>)
 800da6e:	490c      	ldr	r1, [pc, #48]	@ (800daa0 <BinaryReleaseInfo+0x48>)
 800da70:	4b0e      	ldr	r3, [pc, #56]	@ (800daac <BinaryReleaseInfo+0x54>)
 800da72:	9300      	str	r3, [sp, #0]
 800da74:	0003      	movs	r3, r0
 800da76:	2002      	movs	r0, #2
 800da78:	f7ff ff6c 	bl	800d954 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800da7c:	4b0c      	ldr	r3, [pc, #48]	@ (800dab0 <BinaryReleaseInfo+0x58>)
 800da7e:	4a0d      	ldr	r2, [pc, #52]	@ (800dab4 <BinaryReleaseInfo+0x5c>)
 800da80:	4907      	ldr	r1, [pc, #28]	@ (800daa0 <BinaryReleaseInfo+0x48>)
 800da82:	2002      	movs	r0, #2
 800da84:	f7ff ff66 	bl	800d954 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800da88:	4b0b      	ldr	r3, [pc, #44]	@ (800dab8 <BinaryReleaseInfo+0x60>)
 800da8a:	4a0c      	ldr	r2, [pc, #48]	@ (800dabc <BinaryReleaseInfo+0x64>)
 800da8c:	4904      	ldr	r1, [pc, #16]	@ (800daa0 <BinaryReleaseInfo+0x48>)
 800da8e:	2002      	movs	r0, #2
 800da90:	f7ff ff60 	bl	800d954 <CreateLine>
}
 800da94:	46c0      	nop			@ (mov r8, r8)
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	46c0      	nop			@ (mov r8, r8)
 800da9c:	08023d3c 	.word	0x08023d3c
 800daa0:	08023d68 	.word	0x08023d68
 800daa4:	08023d6c 	.word	0x08023d6c
 800daa8:	08023d78 	.word	0x08023d78
 800daac:	08023d8c 	.word	0x08023d8c
 800dab0:	08023d98 	.word	0x08023d98
 800dab4:	08023da0 	.word	0x08023da0
 800dab8:	08023da8 	.word	0x08023da8
 800dabc:	08023db0 	.word	0x08023db0

0800dac0 <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	68f9      	ldr	r1, [r7, #12]
 800dad2:	4803      	ldr	r0, [pc, #12]	@ (800dae0 <errorHandler+0x20>)
 800dad4:	f011 fb2c 	bl	801f130 <iprintf>
//    while (true)
//    {
//    }
}
 800dad8:	46c0      	nop			@ (mov r8, r8)
 800dada:	46bd      	mov	sp, r7
 800dadc:	b004      	add	sp, #16
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	08023dc8 	.word	0x08023dc8

0800dae4 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800dae4:	b590      	push	{r4, r7, lr}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6039      	str	r1, [r7, #0]
 800daec:	0011      	movs	r1, r2
 800daee:	1dfb      	adds	r3, r7, #7
 800daf0:	1c02      	adds	r2, r0, #0
 800daf2:	701a      	strb	r2, [r3, #0]
 800daf4:	1dbb      	adds	r3, r7, #6
 800daf6:	1c0a      	adds	r2, r1, #0
 800daf8:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800dafa:	4b0a      	ldr	r3, [pc, #40]	@ (800db24 <ReadRegister+0x40>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d00a      	beq.n	800db18 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800db02:	4b08      	ldr	r3, [pc, #32]	@ (800db24 <ReadRegister+0x40>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	1dba      	adds	r2, r7, #6
 800db08:	7814      	ldrb	r4, [r2, #0]
 800db0a:	6839      	ldr	r1, [r7, #0]
 800db0c:	1dfa      	adds	r2, r7, #7
 800db0e:	7810      	ldrb	r0, [r2, #0]
 800db10:	0022      	movs	r2, r4
 800db12:	4798      	blx	r3
 800db14:	0003      	movs	r3, r0
 800db16:	e000      	b.n	800db1a <ReadRegister+0x36>
	}
	return false;
 800db18:	2300      	movs	r3, #0
}
 800db1a:	0018      	movs	r0, r3
 800db1c:	46bd      	mov	sp, r7
 800db1e:	b003      	add	sp, #12
 800db20:	bd90      	pop	{r4, r7, pc}
 800db22:	46c0      	nop			@ (mov r8, r8)
 800db24:	20002510 	.word	0x20002510

0800db28 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800db28:	b590      	push	{r4, r7, lr}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6039      	str	r1, [r7, #0]
 800db30:	0011      	movs	r1, r2
 800db32:	1dfb      	adds	r3, r7, #7
 800db34:	1c02      	adds	r2, r0, #0
 800db36:	701a      	strb	r2, [r3, #0]
 800db38:	1dbb      	adds	r3, r7, #6
 800db3a:	1c0a      	adds	r2, r1, #0
 800db3c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800db3e:	4b0a      	ldr	r3, [pc, #40]	@ (800db68 <WriteRegister+0x40>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d00a      	beq.n	800db5c <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800db46:	4b08      	ldr	r3, [pc, #32]	@ (800db68 <WriteRegister+0x40>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	1dba      	adds	r2, r7, #6
 800db4c:	7814      	ldrb	r4, [r2, #0]
 800db4e:	6839      	ldr	r1, [r7, #0]
 800db50:	1dfa      	adds	r2, r7, #7
 800db52:	7810      	ldrb	r0, [r2, #0]
 800db54:	0022      	movs	r2, r4
 800db56:	4798      	blx	r3
 800db58:	0003      	movs	r3, r0
 800db5a:	e000      	b.n	800db5e <WriteRegister+0x36>
  }
  return false;
 800db5c:	2300      	movs	r3, #0
}
 800db5e:	0018      	movs	r0, r3
 800db60:	46bd      	mov	sp, r7
 800db62:	b003      	add	sp, #12
 800db64:	bd90      	pop	{r4, r7, pc}
 800db66:	46c0      	nop			@ (mov r8, r8)
 800db68:	20002514 	.word	0x20002514

0800db6c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	000a      	movs	r2, r1
 800db76:	1cfb      	adds	r3, r7, #3
 800db78:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800db7a:	230f      	movs	r3, #15
 800db7c:	18fb      	adds	r3, r7, r3
 800db7e:	22ff      	movs	r2, #255	@ 0xff
 800db80:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800db82:	230e      	movs	r3, #14
 800db84:	18fb      	adds	r3, r7, r3
 800db86:	2200      	movs	r2, #0
 800db88:	701a      	strb	r2, [r3, #0]
 800db8a:	e037      	b.n	800dbfc <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800db8c:	230e      	movs	r3, #14
 800db8e:	18fb      	adds	r3, r7, r3
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	18d3      	adds	r3, r2, r3
 800db96:	7819      	ldrb	r1, [r3, #0]
 800db98:	220f      	movs	r2, #15
 800db9a:	18bb      	adds	r3, r7, r2
 800db9c:	18ba      	adds	r2, r7, r2
 800db9e:	7812      	ldrb	r2, [r2, #0]
 800dba0:	404a      	eors	r2, r1
 800dba2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800dba4:	230d      	movs	r3, #13
 800dba6:	18fb      	adds	r3, r7, r3
 800dba8:	2200      	movs	r2, #0
 800dbaa:	701a      	strb	r2, [r3, #0]
 800dbac:	e01b      	b.n	800dbe6 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800dbae:	210f      	movs	r1, #15
 800dbb0:	187b      	adds	r3, r7, r1
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	b25b      	sxtb	r3, r3
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	da09      	bge.n	800dbce <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800dbba:	187b      	adds	r3, r7, r1
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	005b      	lsls	r3, r3, #1
 800dbc0:	b25b      	sxtb	r3, r3
 800dbc2:	2231      	movs	r2, #49	@ 0x31
 800dbc4:	4053      	eors	r3, r2
 800dbc6:	b25a      	sxtb	r2, r3
 800dbc8:	187b      	adds	r3, r7, r1
 800dbca:	701a      	strb	r2, [r3, #0]
 800dbcc:	e005      	b.n	800dbda <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800dbce:	230f      	movs	r3, #15
 800dbd0:	18fa      	adds	r2, r7, r3
 800dbd2:	18fb      	adds	r3, r7, r3
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	18db      	adds	r3, r3, r3
 800dbd8:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800dbda:	210d      	movs	r1, #13
 800dbdc:	187b      	adds	r3, r7, r1
 800dbde:	781a      	ldrb	r2, [r3, #0]
 800dbe0:	187b      	adds	r3, r7, r1
 800dbe2:	3201      	adds	r2, #1
 800dbe4:	701a      	strb	r2, [r3, #0]
 800dbe6:	230d      	movs	r3, #13
 800dbe8:	18fb      	adds	r3, r7, r3
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	2b07      	cmp	r3, #7
 800dbee:	d9de      	bls.n	800dbae <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800dbf0:	210e      	movs	r1, #14
 800dbf2:	187b      	adds	r3, r7, r1
 800dbf4:	781a      	ldrb	r2, [r3, #0]
 800dbf6:	187b      	adds	r3, r7, r1
 800dbf8:	3201      	adds	r2, #1
 800dbfa:	701a      	strb	r2, [r3, #0]
 800dbfc:	230e      	movs	r3, #14
 800dbfe:	18fa      	adds	r2, r7, r3
 800dc00:	1cfb      	adds	r3, r7, #3
 800dc02:	7812      	ldrb	r2, [r2, #0]
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d3c0      	bcc.n	800db8c <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800dc0a:	230f      	movs	r3, #15
 800dc0c:	18fb      	adds	r3, r7, r3
 800dc0e:	781b      	ldrb	r3, [r3, #0]
}
 800dc10:	0018      	movs	r0, r3
 800dc12:	46bd      	mov	sp, r7
 800dc14:	b004      	add	sp, #16
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800dc22:	4b0a      	ldr	r3, [pc, #40]	@ (800dc4c <HIDS_Init+0x34>)
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800dc28:	4b09      	ldr	r3, [pc, #36]	@ (800dc50 <HIDS_Init+0x38>)
 800dc2a:	683a      	ldr	r2, [r7, #0]
 800dc2c:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800dc2e:	4b09      	ldr	r3, [pc, #36]	@ (800dc54 <HIDS_Init+0x3c>)
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	0018      	movs	r0, r3
 800dc34:	f000 f8da 	bl	800ddec <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800dc38:	4b07      	ldr	r3, [pc, #28]	@ (800dc58 <HIDS_Init+0x40>)
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	0018      	movs	r0, r3
 800dc3e:	f000 f82b 	bl	800dc98 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800dc42:	46c0      	nop			@ (mov r8, r8)
 800dc44:	46bd      	mov	sp, r7
 800dc46:	b002      	add	sp, #8
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	46c0      	nop			@ (mov r8, r8)
 800dc4c:	20002510 	.word	0x20002510
 800dc50:	20002514 	.word	0x20002514
 800dc54:	200000ce 	.word	0x200000ce
 800dc58:	200000cd 	.word	0x200000cd

0800dc5c <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 800dc60:	f7ff fef2 	bl	800da48 <GetCurrentHalTicks>
 800dc64:	0002      	movs	r2, r0
 800dc66:	4b08      	ldr	r3, [pc, #32]	@ (800dc88 <HIDS_StartMeasurement+0x2c>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	18d2      	adds	r2, r2, r3
 800dc6c:	4b07      	ldr	r3, [pc, #28]	@ (800dc8c <HIDS_StartMeasurement+0x30>)
 800dc6e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800dc70:	4b07      	ldr	r3, [pc, #28]	@ (800dc90 <HIDS_StartMeasurement+0x34>)
 800dc72:	2201      	movs	r2, #1
 800dc74:	0019      	movs	r1, r3
 800dc76:	2044      	movs	r0, #68	@ 0x44
 800dc78:	f7ff ff56 	bl	800db28 <WriteRegister>
  MeasurementDone = false;
 800dc7c:	4b05      	ldr	r3, [pc, #20]	@ (800dc94 <HIDS_StartMeasurement+0x38>)
 800dc7e:	2200      	movs	r2, #0
 800dc80:	701a      	strb	r2, [r3, #0]
}
 800dc82:	46c0      	nop			@ (mov r8, r8)
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	200000d4 	.word	0x200000d4
 800dc8c:	200000d0 	.word	0x200000d0
 800dc90:	200000ce 	.word	0x200000ce
 800dc94:	20002526 	.word	0x20002526

0800dc98 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	0002      	movs	r2, r0
 800dca0:	1dfb      	adds	r3, r7, #7
 800dca2:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800dca4:	4b03      	ldr	r3, [pc, #12]	@ (800dcb4 <HIDS_SetHeaterMode+0x1c>)
 800dca6:	1dfa      	adds	r2, r7, #7
 800dca8:	7812      	ldrb	r2, [r2, #0]
 800dcaa:	701a      	strb	r2, [r3, #0]
}
 800dcac:	46c0      	nop			@ (mov r8, r8)
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	b002      	add	sp, #8
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	200000cd 	.word	0x200000cd

0800dcb8 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800dcb8:	b590      	push	{r4, r7, lr}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	781a      	ldrb	r2, [r3, #0]
 800dcc4:	210c      	movs	r1, #12
 800dcc6:	187b      	adds	r3, r7, r1
 800dcc8:	701a      	strb	r2, [r3, #0]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	785a      	ldrb	r2, [r3, #1]
 800dcce:	187b      	adds	r3, r7, r1
 800dcd0:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800dcd2:	240f      	movs	r4, #15
 800dcd4:	193b      	adds	r3, r7, r4
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	7892      	ldrb	r2, [r2, #2]
 800dcda:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800dcdc:	187b      	adds	r3, r7, r1
 800dcde:	2102      	movs	r1, #2
 800dce0:	0018      	movs	r0, r3
 800dce2:	f7ff ff43 	bl	800db6c <CalculateCRC>
 800dce6:	0003      	movs	r3, r0
 800dce8:	001a      	movs	r2, r3
 800dcea:	193b      	adds	r3, r7, r4
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d007      	beq.n	800dd02 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800dcf2:	4a1a      	ldr	r2, [pc, #104]	@ (800dd5c <CheckCRC+0xa4>)
 800dcf4:	4b1a      	ldr	r3, [pc, #104]	@ (800dd60 <CheckCRC+0xa8>)
 800dcf6:	0019      	movs	r1, r3
 800dcf8:	2001      	movs	r0, #1
 800dcfa:	f7ff fe2b 	bl	800d954 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	e027      	b.n	800dd52 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	78da      	ldrb	r2, [r3, #3]
 800dd06:	2108      	movs	r1, #8
 800dd08:	187b      	adds	r3, r7, r1
 800dd0a:	701a      	strb	r2, [r3, #0]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	791a      	ldrb	r2, [r3, #4]
 800dd10:	187b      	adds	r3, r7, r1
 800dd12:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800dd14:	240e      	movs	r4, #14
 800dd16:	193b      	adds	r3, r7, r4
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	7952      	ldrb	r2, [r2, #5]
 800dd1c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800dd1e:	187b      	adds	r3, r7, r1
 800dd20:	2102      	movs	r1, #2
 800dd22:	0018      	movs	r0, r3
 800dd24:	f7ff ff22 	bl	800db6c <CalculateCRC>
 800dd28:	0003      	movs	r3, r0
 800dd2a:	001a      	movs	r2, r3
 800dd2c:	193b      	adds	r3, r7, r4
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d00d      	beq.n	800dd50 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800dd34:	4a0b      	ldr	r2, [pc, #44]	@ (800dd64 <CheckCRC+0xac>)
 800dd36:	4b0a      	ldr	r3, [pc, #40]	@ (800dd60 <CheckCRC+0xa8>)
 800dd38:	0019      	movs	r1, r3
 800dd3a:	2001      	movs	r0, #1
 800dd3c:	f7ff fe0a 	bl	800d954 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800dd40:	4a09      	ldr	r2, [pc, #36]	@ (800dd68 <CheckCRC+0xb0>)
 800dd42:	4b0a      	ldr	r3, [pc, #40]	@ (800dd6c <CheckCRC+0xb4>)
 800dd44:	2170      	movs	r1, #112	@ 0x70
 800dd46:	0018      	movs	r0, r3
 800dd48:	f7ff feba 	bl	800dac0 <errorHandler>
		return false;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	e000      	b.n	800dd52 <CheckCRC+0x9a>
	}
	return true;
 800dd50:	2301      	movs	r3, #1
}
 800dd52:	0018      	movs	r0, r3
 800dd54:	46bd      	mov	sp, r7
 800dd56:	b005      	add	sp, #20
 800dd58:	bd90      	pop	{r4, r7, pc}
 800dd5a:	46c0      	nop			@ (mov r8, r8)
 800dd5c:	08023e14 	.word	0x08023e14
 800dd60:	08023e3c 	.word	0x08023e3c
 800dd64:	08023e40 	.word	0x08023e40
 800dd68:	08023e6c 	.word	0x08023e6c
 800dd6c:	08024344 	.word	0x08024344

0800dd70 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800dd76:	1dbb      	adds	r3, r7, #6
 800dd78:	2289      	movs	r2, #137	@ 0x89
 800dd7a:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800dd7c:	1dbb      	adds	r3, r7, #6
 800dd7e:	2201      	movs	r2, #1
 800dd80:	0019      	movs	r1, r3
 800dd82:	2044      	movs	r0, #68	@ 0x44
 800dd84:	f7ff fed0 	bl	800db28 <WriteRegister>
	HAL_Delay(30);
 800dd88:	201e      	movs	r0, #30
 800dd8a:	f000 f98b 	bl	800e0a4 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800dd8e:	4b14      	ldr	r3, [pc, #80]	@ (800dde0 <HIDS_DeviceConnected+0x70>)
 800dd90:	2206      	movs	r2, #6
 800dd92:	0019      	movs	r1, r3
 800dd94:	2044      	movs	r0, #68	@ 0x44
 800dd96:	f7ff fea5 	bl	800dae4 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800dd9a:	1dfb      	adds	r3, r7, #7
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	701a      	strb	r2, [r3, #0]
 800dda0:	e011      	b.n	800ddc6 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800dda2:	1dfb      	adds	r3, r7, #7
 800dda4:	7818      	ldrb	r0, [r3, #0]
 800dda6:	1dfb      	adds	r3, r7, #7
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	4a0d      	ldr	r2, [pc, #52]	@ (800dde0 <HIDS_DeviceConnected+0x70>)
 800ddac:	5cd3      	ldrb	r3, [r2, r3]
 800ddae:	4a0d      	ldr	r2, [pc, #52]	@ (800dde4 <HIDS_DeviceConnected+0x74>)
 800ddb0:	490d      	ldr	r1, [pc, #52]	@ (800dde8 <HIDS_DeviceConnected+0x78>)
 800ddb2:	9300      	str	r3, [sp, #0]
 800ddb4:	0003      	movs	r3, r0
 800ddb6:	2002      	movs	r0, #2
 800ddb8:	f7ff fdcc 	bl	800d954 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800ddbc:	1dfb      	adds	r3, r7, #7
 800ddbe:	781a      	ldrb	r2, [r3, #0]
 800ddc0:	1dfb      	adds	r3, r7, #7
 800ddc2:	3201      	adds	r2, #1
 800ddc4:	701a      	strb	r2, [r3, #0]
 800ddc6:	1dfb      	adds	r3, r7, #7
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	2b05      	cmp	r3, #5
 800ddcc:	d9e9      	bls.n	800dda2 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800ddce:	4b04      	ldr	r3, [pc, #16]	@ (800dde0 <HIDS_DeviceConnected+0x70>)
 800ddd0:	0018      	movs	r0, r3
 800ddd2:	f7ff ff71 	bl	800dcb8 <CheckCRC>
 800ddd6:	0003      	movs	r3, r0
}
 800ddd8:	0018      	movs	r0, r3
 800ddda:	46bd      	mov	sp, r7
 800dddc:	b002      	add	sp, #8
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	20002518 	.word	0x20002518
 800dde4:	08023e84 	.word	0x08023e84
 800dde8:	08023e10 	.word	0x08023e10

0800ddec <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	0002      	movs	r2, r0
 800ddf4:	1dfb      	adds	r3, r7, #7
 800ddf6:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800ddf8:	4b03      	ldr	r3, [pc, #12]	@ (800de08 <HIDS_SetMeasurementMode+0x1c>)
 800ddfa:	1dfa      	adds	r2, r7, #7
 800ddfc:	7812      	ldrb	r2, [r2, #0]
 800ddfe:	701a      	strb	r2, [r3, #0]
}
 800de00:	46c0      	nop			@ (mov r8, r8)
 800de02:	46bd      	mov	sp, r7
 800de04:	b002      	add	sp, #8
 800de06:	bd80      	pop	{r7, pc}
 800de08:	200000ce 	.word	0x200000ce

0800de0c <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800de0c:	b580      	push	{r7, lr}
 800de0e:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800de10:	4b04      	ldr	r3, [pc, #16]	@ (800de24 <HIDS_MeasurementReady+0x18>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	0018      	movs	r0, r3
 800de16:	f7ff fd47 	bl	800d8a8 <TimestampIsReached>
 800de1a:	0003      	movs	r3, r0
}
 800de1c:	0018      	movs	r0, r3
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	46c0      	nop			@ (mov r8, r8)
 800de24:	200000d0 	.word	0x200000d0

0800de28 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800de28:	b590      	push	{r4, r7, lr}
 800de2a:	b087      	sub	sp, #28
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800de32:	4b49      	ldr	r3, [pc, #292]	@ (800df58 <HIDS_GetMeasurementValues+0x130>)
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d001      	beq.n	800de3e <HIDS_GetMeasurementValues+0x16>
 800de3a:	2301      	movs	r3, #1
 800de3c:	e087      	b.n	800df4e <HIDS_GetMeasurementValues+0x126>
  if(!HIDS_MeasurementReady()) return false;
 800de3e:	f7ff ffe5 	bl	800de0c <HIDS_MeasurementReady>
 800de42:	0003      	movs	r3, r0
 800de44:	001a      	movs	r2, r3
 800de46:	2301      	movs	r3, #1
 800de48:	4053      	eors	r3, r2
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d001      	beq.n	800de54 <HIDS_GetMeasurementValues+0x2c>
 800de50:	2300      	movs	r3, #0
 800de52:	e07c      	b.n	800df4e <HIDS_GetMeasurementValues+0x126>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800de54:	2316      	movs	r3, #22
 800de56:	18fc      	adds	r4, r7, r3
 800de58:	4b40      	ldr	r3, [pc, #256]	@ (800df5c <HIDS_GetMeasurementValues+0x134>)
 800de5a:	2206      	movs	r2, #6
 800de5c:	0019      	movs	r1, r3
 800de5e:	2044      	movs	r0, #68	@ 0x44
 800de60:	f7ff fe40 	bl	800dae4 <ReadRegister>
 800de64:	0003      	movs	r3, r0
 800de66:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800de68:	4b3c      	ldr	r3, [pc, #240]	@ (800df5c <HIDS_GetMeasurementValues+0x134>)
 800de6a:	0018      	movs	r0, r3
 800de6c:	f7ff ff24 	bl	800dcb8 <CheckCRC>
 800de70:	0003      	movs	r3, r0
 800de72:	001a      	movs	r2, r3
 800de74:	2301      	movs	r3, #1
 800de76:	4053      	eors	r3, r2
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d011      	beq.n	800dea2 <HIDS_GetMeasurementValues+0x7a>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800de7e:	2317      	movs	r3, #23
 800de80:	18fb      	adds	r3, r7, r3
 800de82:	2200      	movs	r2, #0
 800de84:	701a      	strb	r2, [r3, #0]
 800de86:	e005      	b.n	800de94 <HIDS_GetMeasurementValues+0x6c>
 800de88:	2117      	movs	r1, #23
 800de8a:	187b      	adds	r3, r7, r1
 800de8c:	781a      	ldrb	r2, [r3, #0]
 800de8e:	187b      	adds	r3, r7, r1
 800de90:	3201      	adds	r2, #1
 800de92:	701a      	strb	r2, [r3, #0]
 800de94:	2317      	movs	r3, #23
 800de96:	18fb      	adds	r3, r7, r3
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	2b05      	cmp	r3, #5
 800de9c:	d9f4      	bls.n	800de88 <HIDS_GetMeasurementValues+0x60>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800de9e:	2300      	movs	r3, #0
 800dea0:	e055      	b.n	800df4e <HIDS_GetMeasurementValues+0x126>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800dea2:	4b2e      	ldr	r3, [pc, #184]	@ (800df5c <HIDS_GetMeasurementValues+0x134>)
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	021b      	lsls	r3, r3, #8
 800dea8:	4a2c      	ldr	r2, [pc, #176]	@ (800df5c <HIDS_GetMeasurementValues+0x134>)
 800deaa:	7852      	ldrb	r2, [r2, #1]
 800deac:	4313      	orrs	r3, r2
 800deae:	22af      	movs	r2, #175	@ 0xaf
 800deb0:	4353      	muls	r3, r2
 800deb2:	0018      	movs	r0, r3
 800deb4:	f7f5 fa84 	bl	80033c0 <__aeabi_i2d>
 800deb8:	2200      	movs	r2, #0
 800deba:	4b29      	ldr	r3, [pc, #164]	@ (800df60 <HIDS_GetMeasurementValues+0x138>)
 800debc:	f7f3 ff7a 	bl	8001db4 <__aeabi_ddiv>
 800dec0:	0002      	movs	r2, r0
 800dec2:	000b      	movs	r3, r1
 800dec4:	0010      	movs	r0, r2
 800dec6:	0019      	movs	r1, r3
 800dec8:	f7f5 fb14 	bl	80034f4 <__aeabi_d2f>
 800decc:	1c03      	adds	r3, r0, #0
 800dece:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800ded0:	4924      	ldr	r1, [pc, #144]	@ (800df64 <HIDS_GetMeasurementValues+0x13c>)
 800ded2:	6938      	ldr	r0, [r7, #16]
 800ded4:	f7f3 f9a2 	bl	800121c <__aeabi_fsub>
 800ded8:	1c03      	adds	r3, r0, #0
 800deda:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800dedc:	4b1f      	ldr	r3, [pc, #124]	@ (800df5c <HIDS_GetMeasurementValues+0x134>)
 800dede:	78db      	ldrb	r3, [r3, #3]
 800dee0:	021b      	lsls	r3, r3, #8
 800dee2:	4a1e      	ldr	r2, [pc, #120]	@ (800df5c <HIDS_GetMeasurementValues+0x134>)
 800dee4:	7912      	ldrb	r2, [r2, #4]
 800dee6:	431a      	orrs	r2, r3
 800dee8:	0013      	movs	r3, r2
 800deea:	015b      	lsls	r3, r3, #5
 800deec:	1a9b      	subs	r3, r3, r2
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	189b      	adds	r3, r3, r2
 800def2:	0018      	movs	r0, r3
 800def4:	f7f5 fa64 	bl	80033c0 <__aeabi_i2d>
 800def8:	2200      	movs	r2, #0
 800defa:	4b19      	ldr	r3, [pc, #100]	@ (800df60 <HIDS_GetMeasurementValues+0x138>)
 800defc:	f7f3 ff5a 	bl	8001db4 <__aeabi_ddiv>
 800df00:	0002      	movs	r2, r0
 800df02:	000b      	movs	r3, r1
 800df04:	0010      	movs	r0, r2
 800df06:	0019      	movs	r1, r3
 800df08:	f7f5 faf4 	bl	80034f4 <__aeabi_d2f>
 800df0c:	1c03      	adds	r3, r0, #0
 800df0e:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800df10:	4915      	ldr	r1, [pc, #84]	@ (800df68 <HIDS_GetMeasurementValues+0x140>)
 800df12:	68f8      	ldr	r0, [r7, #12]
 800df14:	f7f3 f982 	bl	800121c <__aeabi_fsub>
 800df18:	1c03      	adds	r3, r0, #0
 800df1a:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	693a      	ldr	r2, [r7, #16]
 800df20:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	68fa      	ldr	r2, [r7, #12]
 800df26:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	0011      	movs	r1, r2
 800df2e:	0018      	movs	r0, r3
 800df30:	f7fd fcd2 	bl	800b8d8 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800df34:	68fa      	ldr	r2, [r7, #12]
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	1c11      	adds	r1, r2, #0
 800df3a:	1c18      	adds	r0, r3, #0
 800df3c:	f7f5 fcca 	bl	80038d4 <ESP_GetHT>

   measurements = 0;
 800df40:	4b0a      	ldr	r3, [pc, #40]	@ (800df6c <HIDS_GetMeasurementValues+0x144>)
 800df42:	2200      	movs	r2, #0
 800df44:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800df46:	4b04      	ldr	r3, [pc, #16]	@ (800df58 <HIDS_GetMeasurementValues+0x130>)
 800df48:	2201      	movs	r2, #1
 800df4a:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800df4c:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800df4e:	0018      	movs	r0, r3
 800df50:	46bd      	mov	sp, r7
 800df52:	b007      	add	sp, #28
 800df54:	bd90      	pop	{r4, r7, pc}
 800df56:	46c0      	nop			@ (mov r8, r8)
 800df58:	20002526 	.word	0x20002526
 800df5c:	20002520 	.word	0x20002520
 800df60:	40efffe0 	.word	0x40efffe0
 800df64:	42340000 	.word	0x42340000
 800df68:	40c00000 	.word	0x40c00000
 800df6c:	20002528 	.word	0x20002528

0800df70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800df70:	480d      	ldr	r0, [pc, #52]	@ (800dfa8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800df72:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800df74:	f7ff f8ee 	bl	800d154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800df78:	480c      	ldr	r0, [pc, #48]	@ (800dfac <LoopForever+0x6>)
  ldr r1, =_edata
 800df7a:	490d      	ldr	r1, [pc, #52]	@ (800dfb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800df7c:	4a0d      	ldr	r2, [pc, #52]	@ (800dfb4 <LoopForever+0xe>)
  movs r3, #0
 800df7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800df80:	e002      	b.n	800df88 <LoopCopyDataInit>

0800df82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800df82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800df84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800df86:	3304      	adds	r3, #4

0800df88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800df88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800df8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800df8c:	d3f9      	bcc.n	800df82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800df8e:	4a0a      	ldr	r2, [pc, #40]	@ (800dfb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800df90:	4c0a      	ldr	r4, [pc, #40]	@ (800dfbc <LoopForever+0x16>)
  movs r3, #0
 800df92:	2300      	movs	r3, #0
  b LoopFillZerobss
 800df94:	e001      	b.n	800df9a <LoopFillZerobss>

0800df96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800df96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800df98:	3204      	adds	r2, #4

0800df9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800df9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800df9c:	d3fb      	bcc.n	800df96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800df9e:	f011 fb25 	bl	801f5ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800dfa2:	f7f9 fd59 	bl	8007a58 <main>

0800dfa6 <LoopForever>:

LoopForever:
    b LoopForever
 800dfa6:	e7fe      	b.n	800dfa6 <LoopForever>
   ldr   r0, =_estack
 800dfa8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800dfac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800dfb0:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 800dfb4:	08024cc8 	.word	0x08024cc8
  ldr r2, =_sbss
 800dfb8:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 800dfbc:	20003930 	.word	0x20003930

0800dfc0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dfc0:	e7fe      	b.n	800dfc0 <ADC1_COMP_IRQHandler>
	...

0800dfc4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800dfca:	1dfb      	adds	r3, r7, #7
 800dfcc:	2200      	movs	r2, #0
 800dfce:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800dfd0:	4b0b      	ldr	r3, [pc, #44]	@ (800e000 <HAL_Init+0x3c>)
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	4b0a      	ldr	r3, [pc, #40]	@ (800e000 <HAL_Init+0x3c>)
 800dfd6:	2140      	movs	r1, #64	@ 0x40
 800dfd8:	430a      	orrs	r2, r1
 800dfda:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800dfdc:	2003      	movs	r0, #3
 800dfde:	f000 f811 	bl	800e004 <HAL_InitTick>
 800dfe2:	1e03      	subs	r3, r0, #0
 800dfe4:	d003      	beq.n	800dfee <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800dfe6:	1dfb      	adds	r3, r7, #7
 800dfe8:	2201      	movs	r2, #1
 800dfea:	701a      	strb	r2, [r3, #0]
 800dfec:	e001      	b.n	800dff2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800dfee:	f7fe ff65 	bl	800cebc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800dff2:	1dfb      	adds	r3, r7, #7
 800dff4:	781b      	ldrb	r3, [r3, #0]
}
 800dff6:	0018      	movs	r0, r3
 800dff8:	46bd      	mov	sp, r7
 800dffa:	b002      	add	sp, #8
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	46c0      	nop			@ (mov r8, r8)
 800e000:	40022000 	.word	0x40022000

0800e004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e004:	b590      	push	{r4, r7, lr}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e00c:	4b14      	ldr	r3, [pc, #80]	@ (800e060 <HAL_InitTick+0x5c>)
 800e00e:	681c      	ldr	r4, [r3, #0]
 800e010:	4b14      	ldr	r3, [pc, #80]	@ (800e064 <HAL_InitTick+0x60>)
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	0019      	movs	r1, r3
 800e016:	23fa      	movs	r3, #250	@ 0xfa
 800e018:	0098      	lsls	r0, r3, #2
 800e01a:	f7f2 f8c3 	bl	80001a4 <__udivsi3>
 800e01e:	0003      	movs	r3, r0
 800e020:	0019      	movs	r1, r3
 800e022:	0020      	movs	r0, r4
 800e024:	f7f2 f8be 	bl	80001a4 <__udivsi3>
 800e028:	0003      	movs	r3, r0
 800e02a:	0018      	movs	r0, r3
 800e02c:	f000 fce7 	bl	800e9fe <HAL_SYSTICK_Config>
 800e030:	1e03      	subs	r3, r0, #0
 800e032:	d001      	beq.n	800e038 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800e034:	2301      	movs	r3, #1
 800e036:	e00f      	b.n	800e058 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2b03      	cmp	r3, #3
 800e03c:	d80b      	bhi.n	800e056 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e03e:	6879      	ldr	r1, [r7, #4]
 800e040:	2301      	movs	r3, #1
 800e042:	425b      	negs	r3, r3
 800e044:	2200      	movs	r2, #0
 800e046:	0018      	movs	r0, r3
 800e048:	f000 fcb4 	bl	800e9b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e04c:	4b06      	ldr	r3, [pc, #24]	@ (800e068 <HAL_InitTick+0x64>)
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e052:	2300      	movs	r3, #0
 800e054:	e000      	b.n	800e058 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800e056:	2301      	movs	r3, #1
}
 800e058:	0018      	movs	r0, r3
 800e05a:	46bd      	mov	sp, r7
 800e05c:	b003      	add	sp, #12
 800e05e:	bd90      	pop	{r4, r7, pc}
 800e060:	200000c8 	.word	0x200000c8
 800e064:	200000dc 	.word	0x200000dc
 800e068:	200000d8 	.word	0x200000d8

0800e06c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e070:	4b05      	ldr	r3, [pc, #20]	@ (800e088 <HAL_IncTick+0x1c>)
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	001a      	movs	r2, r3
 800e076:	4b05      	ldr	r3, [pc, #20]	@ (800e08c <HAL_IncTick+0x20>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	18d2      	adds	r2, r2, r3
 800e07c:	4b03      	ldr	r3, [pc, #12]	@ (800e08c <HAL_IncTick+0x20>)
 800e07e:	601a      	str	r2, [r3, #0]
}
 800e080:	46c0      	nop			@ (mov r8, r8)
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	46c0      	nop			@ (mov r8, r8)
 800e088:	200000dc 	.word	0x200000dc
 800e08c:	2000252c 	.word	0x2000252c

0800e090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	af00      	add	r7, sp, #0
  return uwTick;
 800e094:	4b02      	ldr	r3, [pc, #8]	@ (800e0a0 <HAL_GetTick+0x10>)
 800e096:	681b      	ldr	r3, [r3, #0]
}
 800e098:	0018      	movs	r0, r3
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	46c0      	nop			@ (mov r8, r8)
 800e0a0:	2000252c 	.word	0x2000252c

0800e0a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e0ac:	f7ff fff0 	bl	800e090 <HAL_GetTick>
 800e0b0:	0003      	movs	r3, r0
 800e0b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	d005      	beq.n	800e0ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e0be:	4b0a      	ldr	r3, [pc, #40]	@ (800e0e8 <HAL_Delay+0x44>)
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	001a      	movs	r2, r3
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	189b      	adds	r3, r3, r2
 800e0c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e0ca:	46c0      	nop			@ (mov r8, r8)
 800e0cc:	f7ff ffe0 	bl	800e090 <HAL_GetTick>
 800e0d0:	0002      	movs	r2, r0
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	1ad3      	subs	r3, r2, r3
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d8f7      	bhi.n	800e0cc <HAL_Delay+0x28>
  {
  }
}
 800e0dc:	46c0      	nop			@ (mov r8, r8)
 800e0de:	46c0      	nop			@ (mov r8, r8)
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	b004      	add	sp, #16
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	46c0      	nop			@ (mov r8, r8)
 800e0e8:	200000dc 	.word	0x200000dc

0800e0ec <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800e0f0:	4b04      	ldr	r3, [pc, #16]	@ (800e104 <HAL_SuspendTick+0x18>)
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	4b03      	ldr	r3, [pc, #12]	@ (800e104 <HAL_SuspendTick+0x18>)
 800e0f6:	2102      	movs	r1, #2
 800e0f8:	438a      	bics	r2, r1
 800e0fa:	601a      	str	r2, [r3, #0]
}
 800e0fc:	46c0      	nop			@ (mov r8, r8)
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
 800e102:	46c0      	nop			@ (mov r8, r8)
 800e104:	e000e010 	.word	0xe000e010

0800e108 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800e10c:	4b04      	ldr	r3, [pc, #16]	@ (800e120 <HAL_ResumeTick+0x18>)
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	4b03      	ldr	r3, [pc, #12]	@ (800e120 <HAL_ResumeTick+0x18>)
 800e112:	2102      	movs	r1, #2
 800e114:	430a      	orrs	r2, r1
 800e116:	601a      	str	r2, [r3, #0]
}
 800e118:	46c0      	nop			@ (mov r8, r8)
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	46c0      	nop			@ (mov r8, r8)
 800e120:	e000e010 	.word	0xe000e010

0800e124 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800e128:	4b02      	ldr	r3, [pc, #8]	@ (800e134 <HAL_GetUIDw0+0x10>)
 800e12a:	681b      	ldr	r3, [r3, #0]
}
 800e12c:	0018      	movs	r0, r3
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	46c0      	nop			@ (mov r8, r8)
 800e134:	1ff80050 	.word	0x1ff80050

0800e138 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800e13c:	4b02      	ldr	r3, [pc, #8]	@ (800e148 <HAL_GetUIDw1+0x10>)
 800e13e:	681b      	ldr	r3, [r3, #0]
}
 800e140:	0018      	movs	r0, r3
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	46c0      	nop			@ (mov r8, r8)
 800e148:	1ff80054 	.word	0x1ff80054

0800e14c <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800e150:	4b02      	ldr	r3, [pc, #8]	@ (800e15c <HAL_GetUIDw2+0x10>)
 800e152:	681b      	ldr	r3, [r3, #0]
}
 800e154:	0018      	movs	r0, r3
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	46c0      	nop			@ (mov r8, r8)
 800e15c:	1ff80064 	.word	0x1ff80064

0800e160 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d101      	bne.n	800e172 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800e16e:	2301      	movs	r3, #1
 800e170:	e159      	b.n	800e426 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e176:	2b00      	cmp	r3, #0
 800e178:	d10a      	bne.n	800e190 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2200      	movs	r2, #0
 800e17e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2250      	movs	r2, #80	@ 0x50
 800e184:	2100      	movs	r1, #0
 800e186:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	0018      	movs	r0, r3
 800e18c:	f7f8 fe58 	bl	8006e40 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e194:	2210      	movs	r2, #16
 800e196:	4013      	ands	r3, r2
 800e198:	2b10      	cmp	r3, #16
 800e19a:	d005      	beq.n	800e1a8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	689b      	ldr	r3, [r3, #8]
 800e1a2:	2204      	movs	r2, #4
 800e1a4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800e1a6:	d00b      	beq.n	800e1c0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1ac:	2210      	movs	r2, #16
 800e1ae:	431a      	orrs	r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2250      	movs	r2, #80	@ 0x50
 800e1b8:	2100      	movs	r1, #0
 800e1ba:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	e132      	b.n	800e426 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1c4:	4a9a      	ldr	r2, [pc, #616]	@ (800e430 <HAL_ADC_Init+0x2d0>)
 800e1c6:	4013      	ands	r3, r2
 800e1c8:	2202      	movs	r2, #2
 800e1ca:	431a      	orrs	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	2203      	movs	r2, #3
 800e1d8:	4013      	ands	r3, r2
 800e1da:	2b01      	cmp	r3, #1
 800e1dc:	d108      	bne.n	800e1f0 <HAL_ADC_Init+0x90>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	4013      	ands	r3, r2
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d101      	bne.n	800e1f0 <HAL_ADC_Init+0x90>
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e000      	b.n	800e1f2 <HAL_ADC_Init+0x92>
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d149      	bne.n	800e28a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	685a      	ldr	r2, [r3, #4]
 800e1fa:	23c0      	movs	r3, #192	@ 0xc0
 800e1fc:	061b      	lsls	r3, r3, #24
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d00b      	beq.n	800e21a <HAL_ADC_Init+0xba>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	685a      	ldr	r2, [r3, #4]
 800e206:	2380      	movs	r3, #128	@ 0x80
 800e208:	05db      	lsls	r3, r3, #23
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d005      	beq.n	800e21a <HAL_ADC_Init+0xba>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	685a      	ldr	r2, [r3, #4]
 800e212:	2380      	movs	r3, #128	@ 0x80
 800e214:	061b      	lsls	r3, r3, #24
 800e216:	429a      	cmp	r2, r3
 800e218:	d111      	bne.n	800e23e <HAL_ADC_Init+0xde>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	691a      	ldr	r2, [r3, #16]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	0092      	lsls	r2, r2, #2
 800e226:	0892      	lsrs	r2, r2, #2
 800e228:	611a      	str	r2, [r3, #16]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	6919      	ldr	r1, [r3, #16]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	685a      	ldr	r2, [r3, #4]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	430a      	orrs	r2, r1
 800e23a:	611a      	str	r2, [r3, #16]
 800e23c:	e014      	b.n	800e268 <HAL_ADC_Init+0x108>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	691a      	ldr	r2, [r3, #16]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	0092      	lsls	r2, r2, #2
 800e24a:	0892      	lsrs	r2, r2, #2
 800e24c:	611a      	str	r2, [r3, #16]
 800e24e:	4b79      	ldr	r3, [pc, #484]	@ (800e434 <HAL_ADC_Init+0x2d4>)
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	4b78      	ldr	r3, [pc, #480]	@ (800e434 <HAL_ADC_Init+0x2d4>)
 800e254:	4978      	ldr	r1, [pc, #480]	@ (800e438 <HAL_ADC_Init+0x2d8>)
 800e256:	400a      	ands	r2, r1
 800e258:	601a      	str	r2, [r3, #0]
 800e25a:	4b76      	ldr	r3, [pc, #472]	@ (800e434 <HAL_ADC_Init+0x2d4>)
 800e25c:	6819      	ldr	r1, [r3, #0]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	685a      	ldr	r2, [r3, #4]
 800e262:	4b74      	ldr	r3, [pc, #464]	@ (800e434 <HAL_ADC_Init+0x2d4>)
 800e264:	430a      	orrs	r2, r1
 800e266:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	68da      	ldr	r2, [r3, #12]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2118      	movs	r1, #24
 800e274:	438a      	bics	r2, r1
 800e276:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	68d9      	ldr	r1, [r3, #12]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	689a      	ldr	r2, [r3, #8]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	430a      	orrs	r2, r1
 800e288:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800e28a:	4b6a      	ldr	r3, [pc, #424]	@ (800e434 <HAL_ADC_Init+0x2d4>)
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	4b69      	ldr	r3, [pc, #420]	@ (800e434 <HAL_ADC_Init+0x2d4>)
 800e290:	496a      	ldr	r1, [pc, #424]	@ (800e43c <HAL_ADC_Init+0x2dc>)
 800e292:	400a      	ands	r2, r1
 800e294:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800e296:	4b67      	ldr	r3, [pc, #412]	@ (800e434 <HAL_ADC_Init+0x2d4>)
 800e298:	6819      	ldr	r1, [r3, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e29e:	065a      	lsls	r2, r3, #25
 800e2a0:	4b64      	ldr	r3, [pc, #400]	@ (800e434 <HAL_ADC_Init+0x2d4>)
 800e2a2:	430a      	orrs	r2, r1
 800e2a4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	689a      	ldr	r2, [r3, #8]
 800e2ac:	2380      	movs	r3, #128	@ 0x80
 800e2ae:	055b      	lsls	r3, r3, #21
 800e2b0:	4013      	ands	r3, r2
 800e2b2:	d108      	bne.n	800e2c6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	689a      	ldr	r2, [r3, #8]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2180      	movs	r1, #128	@ 0x80
 800e2c0:	0549      	lsls	r1, r1, #21
 800e2c2:	430a      	orrs	r2, r1
 800e2c4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	68da      	ldr	r2, [r3, #12]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	495b      	ldr	r1, [pc, #364]	@ (800e440 <HAL_ADC_Init+0x2e0>)
 800e2d2:	400a      	ands	r2, r1
 800e2d4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	68d9      	ldr	r1, [r3, #12]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	691b      	ldr	r3, [r3, #16]
 800e2e4:	2b02      	cmp	r3, #2
 800e2e6:	d101      	bne.n	800e2ec <HAL_ADC_Init+0x18c>
 800e2e8:	2304      	movs	r3, #4
 800e2ea:	e000      	b.n	800e2ee <HAL_ADC_Init+0x18e>
 800e2ec:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e2ee:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2020      	movs	r0, #32
 800e2f4:	5c1b      	ldrb	r3, [r3, r0]
 800e2f6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800e2f8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	202c      	movs	r0, #44	@ 0x2c
 800e2fe:	5c1b      	ldrb	r3, [r3, r0]
 800e300:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800e302:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800e308:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	699b      	ldr	r3, [r3, #24]
 800e30e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800e310:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	69db      	ldr	r3, [r3, #28]
 800e316:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800e318:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	430a      	orrs	r2, r1
 800e320:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e326:	23c2      	movs	r3, #194	@ 0xc2
 800e328:	33ff      	adds	r3, #255	@ 0xff
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d00b      	beq.n	800e346 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	68d9      	ldr	r1, [r3, #12]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800e33c:	431a      	orrs	r2, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	430a      	orrs	r2, r1
 800e344:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2221      	movs	r2, #33	@ 0x21
 800e34a:	5c9b      	ldrb	r3, [r3, r2]
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	d11a      	bne.n	800e386 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2220      	movs	r2, #32
 800e354:	5c9b      	ldrb	r3, [r3, r2]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d109      	bne.n	800e36e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	68da      	ldr	r2, [r3, #12]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	2180      	movs	r1, #128	@ 0x80
 800e366:	0249      	lsls	r1, r1, #9
 800e368:	430a      	orrs	r2, r1
 800e36a:	60da      	str	r2, [r3, #12]
 800e36c:	e00b      	b.n	800e386 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e372:	2220      	movs	r2, #32
 800e374:	431a      	orrs	r2, r3
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e37e:	2201      	movs	r2, #1
 800e380:	431a      	orrs	r2, r3
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	d11f      	bne.n	800e3ce <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	691a      	ldr	r2, [r3, #16]
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	492a      	ldr	r1, [pc, #168]	@ (800e444 <HAL_ADC_Init+0x2e4>)
 800e39a:	400a      	ands	r2, r1
 800e39c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	6919      	ldr	r1, [r3, #16]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e3ac:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800e3b2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	430a      	orrs	r2, r1
 800e3ba:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	691a      	ldr	r2, [r3, #16]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2101      	movs	r1, #1
 800e3c8:	430a      	orrs	r2, r1
 800e3ca:	611a      	str	r2, [r3, #16]
 800e3cc:	e00e      	b.n	800e3ec <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	691b      	ldr	r3, [r3, #16]
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	4013      	ands	r3, r2
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d107      	bne.n	800e3ec <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	691a      	ldr	r2, [r3, #16]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	2101      	movs	r1, #1
 800e3e8:	438a      	bics	r2, r1
 800e3ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	695a      	ldr	r2, [r3, #20]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2107      	movs	r1, #7
 800e3f8:	438a      	bics	r2, r1
 800e3fa:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	6959      	ldr	r1, [r3, #20]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	430a      	orrs	r2, r1
 800e40c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2200      	movs	r2, #0
 800e412:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e418:	2203      	movs	r2, #3
 800e41a:	4393      	bics	r3, r2
 800e41c:	2201      	movs	r2, #1
 800e41e:	431a      	orrs	r2, r3
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800e424:	2300      	movs	r3, #0
}
 800e426:	0018      	movs	r0, r3
 800e428:	46bd      	mov	sp, r7
 800e42a:	b002      	add	sp, #8
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	46c0      	nop			@ (mov r8, r8)
 800e430:	fffffefd 	.word	0xfffffefd
 800e434:	40012708 	.word	0x40012708
 800e438:	ffc3ffff 	.word	0xffc3ffff
 800e43c:	fdffffff 	.word	0xfdffffff
 800e440:	fffe0219 	.word	0xfffe0219
 800e444:	fffffc03 	.word	0xfffffc03

0800e448 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800e448:	b590      	push	{r4, r7, lr}
 800e44a:	b085      	sub	sp, #20
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e450:	230f      	movs	r3, #15
 800e452:	18fb      	adds	r3, r7, r3
 800e454:	2200      	movs	r2, #0
 800e456:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	689b      	ldr	r3, [r3, #8]
 800e45e:	2204      	movs	r2, #4
 800e460:	4013      	ands	r3, r2
 800e462:	d138      	bne.n	800e4d6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2250      	movs	r2, #80	@ 0x50
 800e468:	5c9b      	ldrb	r3, [r3, r2]
 800e46a:	2b01      	cmp	r3, #1
 800e46c:	d101      	bne.n	800e472 <HAL_ADC_Start+0x2a>
 800e46e:	2302      	movs	r3, #2
 800e470:	e038      	b.n	800e4e4 <HAL_ADC_Start+0x9c>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2250      	movs	r2, #80	@ 0x50
 800e476:	2101      	movs	r1, #1
 800e478:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	69db      	ldr	r3, [r3, #28]
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d007      	beq.n	800e492 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800e482:	230f      	movs	r3, #15
 800e484:	18fc      	adds	r4, r7, r3
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	0018      	movs	r0, r3
 800e48a:	f000 f95f 	bl	800e74c <ADC_Enable>
 800e48e:	0003      	movs	r3, r0
 800e490:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800e492:	230f      	movs	r3, #15
 800e494:	18fb      	adds	r3, r7, r3
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d120      	bne.n	800e4de <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4a0:	4a12      	ldr	r2, [pc, #72]	@ (800e4ec <HAL_ADC_Start+0xa4>)
 800e4a2:	4013      	ands	r3, r2
 800e4a4:	2280      	movs	r2, #128	@ 0x80
 800e4a6:	0052      	lsls	r2, r2, #1
 800e4a8:	431a      	orrs	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2250      	movs	r2, #80	@ 0x50
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	221c      	movs	r2, #28
 800e4c2:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	689a      	ldr	r2, [r3, #8]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2104      	movs	r1, #4
 800e4d0:	430a      	orrs	r2, r1
 800e4d2:	609a      	str	r2, [r3, #8]
 800e4d4:	e003      	b.n	800e4de <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800e4d6:	230f      	movs	r3, #15
 800e4d8:	18fb      	adds	r3, r7, r3
 800e4da:	2202      	movs	r2, #2
 800e4dc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800e4de:	230f      	movs	r3, #15
 800e4e0:	18fb      	adds	r3, r7, r3
 800e4e2:	781b      	ldrb	r3, [r3, #0]
}
 800e4e4:	0018      	movs	r0, r3
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	b005      	add	sp, #20
 800e4ea:	bd90      	pop	{r4, r7, pc}
 800e4ec:	fffff0fe 	.word	0xfffff0fe

0800e4f0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800e4fe:	2300      	movs	r3, #0
 800e500:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	695b      	ldr	r3, [r3, #20]
 800e506:	2b08      	cmp	r3, #8
 800e508:	d102      	bne.n	800e510 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800e50a:	2308      	movs	r3, #8
 800e50c:	60fb      	str	r3, [r7, #12]
 800e50e:	e014      	b.n	800e53a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	68db      	ldr	r3, [r3, #12]
 800e516:	2201      	movs	r2, #1
 800e518:	4013      	ands	r3, r2
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d10b      	bne.n	800e536 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e522:	2220      	movs	r2, #32
 800e524:	431a      	orrs	r2, r3
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2250      	movs	r2, #80	@ 0x50
 800e52e:	2100      	movs	r1, #0
 800e530:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800e532:	2301      	movs	r3, #1
 800e534:	e072      	b.n	800e61c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800e536:	230c      	movs	r3, #12
 800e538:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800e53a:	f7ff fda9 	bl	800e090 <HAL_GetTick>
 800e53e:	0003      	movs	r3, r0
 800e540:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e542:	e01f      	b.n	800e584 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	3301      	adds	r3, #1
 800e548:	d01c      	beq.n	800e584 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d007      	beq.n	800e560 <HAL_ADC_PollForConversion+0x70>
 800e550:	f7ff fd9e 	bl	800e090 <HAL_GetTick>
 800e554:	0002      	movs	r2, r0
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	1ad3      	subs	r3, r2, r3
 800e55a:	683a      	ldr	r2, [r7, #0]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d211      	bcs.n	800e584 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	68fa      	ldr	r2, [r7, #12]
 800e568:	4013      	ands	r3, r2
 800e56a:	d10b      	bne.n	800e584 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e570:	2204      	movs	r2, #4
 800e572:	431a      	orrs	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2250      	movs	r2, #80	@ 0x50
 800e57c:	2100      	movs	r1, #0
 800e57e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800e580:	2303      	movs	r3, #3
 800e582:	e04b      	b.n	800e61c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	68fa      	ldr	r2, [r7, #12]
 800e58c:	4013      	ands	r3, r2
 800e58e:	d0d9      	beq.n	800e544 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e594:	2280      	movs	r2, #128	@ 0x80
 800e596:	0092      	lsls	r2, r2, #2
 800e598:	431a      	orrs	r2, r3
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	68da      	ldr	r2, [r3, #12]
 800e5a4:	23c0      	movs	r3, #192	@ 0xc0
 800e5a6:	011b      	lsls	r3, r3, #4
 800e5a8:	4013      	ands	r3, r2
 800e5aa:	d12e      	bne.n	800e60a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2220      	movs	r2, #32
 800e5b0:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d129      	bne.n	800e60a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2208      	movs	r2, #8
 800e5be:	4013      	ands	r3, r2
 800e5c0:	2b08      	cmp	r3, #8
 800e5c2:	d122      	bne.n	800e60a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	689b      	ldr	r3, [r3, #8]
 800e5ca:	2204      	movs	r2, #4
 800e5cc:	4013      	ands	r3, r2
 800e5ce:	d110      	bne.n	800e5f2 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	685a      	ldr	r2, [r3, #4]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	210c      	movs	r1, #12
 800e5dc:	438a      	bics	r2, r1
 800e5de:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5e4:	4a0f      	ldr	r2, [pc, #60]	@ (800e624 <HAL_ADC_PollForConversion+0x134>)
 800e5e6:	4013      	ands	r3, r2
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	431a      	orrs	r2, r3
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	655a      	str	r2, [r3, #84]	@ 0x54
 800e5f0:	e00b      	b.n	800e60a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e5f6:	2220      	movs	r2, #32
 800e5f8:	431a      	orrs	r2, r3
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e602:	2201      	movs	r2, #1
 800e604:	431a      	orrs	r2, r3
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	699b      	ldr	r3, [r3, #24]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d103      	bne.n	800e61a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	220c      	movs	r2, #12
 800e618:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e61a:	2300      	movs	r3, #0
}
 800e61c:	0018      	movs	r0, r3
 800e61e:	46bd      	mov	sp, r7
 800e620:	b004      	add	sp, #16
 800e622:	bd80      	pop	{r7, pc}
 800e624:	fffffefe 	.word	0xfffffefe

0800e628 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800e636:	0018      	movs	r0, r3
 800e638:	46bd      	mov	sp, r7
 800e63a:	b002      	add	sp, #8
 800e63c:	bd80      	pop	{r7, pc}
	...

0800e640 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2250      	movs	r2, #80	@ 0x50
 800e64e:	5c9b      	ldrb	r3, [r3, r2]
 800e650:	2b01      	cmp	r3, #1
 800e652:	d101      	bne.n	800e658 <HAL_ADC_ConfigChannel+0x18>
 800e654:	2302      	movs	r3, #2
 800e656:	e06c      	b.n	800e732 <HAL_ADC_ConfigChannel+0xf2>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2250      	movs	r2, #80	@ 0x50
 800e65c:	2101      	movs	r1, #1
 800e65e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	689b      	ldr	r3, [r3, #8]
 800e666:	2204      	movs	r2, #4
 800e668:	4013      	ands	r3, r2
 800e66a:	d00b      	beq.n	800e684 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e670:	2220      	movs	r2, #32
 800e672:	431a      	orrs	r2, r3
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2250      	movs	r2, #80	@ 0x50
 800e67c:	2100      	movs	r1, #0
 800e67e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800e680:	2301      	movs	r3, #1
 800e682:	e056      	b.n	800e732 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	685b      	ldr	r3, [r3, #4]
 800e688:	4a2c      	ldr	r2, [pc, #176]	@ (800e73c <HAL_ADC_ConfigChannel+0xfc>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d028      	beq.n	800e6e0 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	035b      	lsls	r3, r3, #13
 800e69a:	0b5a      	lsrs	r2, r3, #13
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	430a      	orrs	r2, r1
 800e6a2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	2380      	movs	r3, #128	@ 0x80
 800e6aa:	02db      	lsls	r3, r3, #11
 800e6ac:	4013      	ands	r3, r2
 800e6ae:	d009      	beq.n	800e6c4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800e6b0:	4b23      	ldr	r3, [pc, #140]	@ (800e740 <HAL_ADC_ConfigChannel+0x100>)
 800e6b2:	681a      	ldr	r2, [r3, #0]
 800e6b4:	4b22      	ldr	r3, [pc, #136]	@ (800e740 <HAL_ADC_ConfigChannel+0x100>)
 800e6b6:	2180      	movs	r1, #128	@ 0x80
 800e6b8:	0409      	lsls	r1, r1, #16
 800e6ba:	430a      	orrs	r2, r1
 800e6bc:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800e6be:	200a      	movs	r0, #10
 800e6c0:	f000 f8ac 	bl	800e81c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	681a      	ldr	r2, [r3, #0]
 800e6c8:	2380      	movs	r3, #128	@ 0x80
 800e6ca:	029b      	lsls	r3, r3, #10
 800e6cc:	4013      	ands	r3, r2
 800e6ce:	d02b      	beq.n	800e728 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800e6d0:	4b1b      	ldr	r3, [pc, #108]	@ (800e740 <HAL_ADC_ConfigChannel+0x100>)
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	4b1a      	ldr	r3, [pc, #104]	@ (800e740 <HAL_ADC_ConfigChannel+0x100>)
 800e6d6:	2180      	movs	r1, #128	@ 0x80
 800e6d8:	03c9      	lsls	r1, r1, #15
 800e6da:	430a      	orrs	r2, r1
 800e6dc:	601a      	str	r2, [r3, #0]
 800e6de:	e023      	b.n	800e728 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	035b      	lsls	r3, r3, #13
 800e6ec:	0b5b      	lsrs	r3, r3, #13
 800e6ee:	43d9      	mvns	r1, r3
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	400a      	ands	r2, r1
 800e6f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	2380      	movs	r3, #128	@ 0x80
 800e6fe:	02db      	lsls	r3, r3, #11
 800e700:	4013      	ands	r3, r2
 800e702:	d005      	beq.n	800e710 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800e704:	4b0e      	ldr	r3, [pc, #56]	@ (800e740 <HAL_ADC_ConfigChannel+0x100>)
 800e706:	681a      	ldr	r2, [r3, #0]
 800e708:	4b0d      	ldr	r3, [pc, #52]	@ (800e740 <HAL_ADC_ConfigChannel+0x100>)
 800e70a:	490e      	ldr	r1, [pc, #56]	@ (800e744 <HAL_ADC_ConfigChannel+0x104>)
 800e70c:	400a      	ands	r2, r1
 800e70e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	2380      	movs	r3, #128	@ 0x80
 800e716:	029b      	lsls	r3, r3, #10
 800e718:	4013      	ands	r3, r2
 800e71a:	d005      	beq.n	800e728 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800e71c:	4b08      	ldr	r3, [pc, #32]	@ (800e740 <HAL_ADC_ConfigChannel+0x100>)
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	4b07      	ldr	r3, [pc, #28]	@ (800e740 <HAL_ADC_ConfigChannel+0x100>)
 800e722:	4909      	ldr	r1, [pc, #36]	@ (800e748 <HAL_ADC_ConfigChannel+0x108>)
 800e724:	400a      	ands	r2, r1
 800e726:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2250      	movs	r2, #80	@ 0x50
 800e72c:	2100      	movs	r1, #0
 800e72e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800e730:	2300      	movs	r3, #0
}
 800e732:	0018      	movs	r0, r3
 800e734:	46bd      	mov	sp, r7
 800e736:	b002      	add	sp, #8
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	46c0      	nop			@ (mov r8, r8)
 800e73c:	00001001 	.word	0x00001001
 800e740:	40012708 	.word	0x40012708
 800e744:	ff7fffff 	.word	0xff7fffff
 800e748:	ffbfffff 	.word	0xffbfffff

0800e74c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e754:	2300      	movs	r3, #0
 800e756:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	689b      	ldr	r3, [r3, #8]
 800e75e:	2203      	movs	r2, #3
 800e760:	4013      	ands	r3, r2
 800e762:	2b01      	cmp	r3, #1
 800e764:	d108      	bne.n	800e778 <ADC_Enable+0x2c>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	2201      	movs	r2, #1
 800e76e:	4013      	ands	r3, r2
 800e770:	2b01      	cmp	r3, #1
 800e772:	d101      	bne.n	800e778 <ADC_Enable+0x2c>
 800e774:	2301      	movs	r3, #1
 800e776:	e000      	b.n	800e77a <ADC_Enable+0x2e>
 800e778:	2300      	movs	r3, #0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d146      	bne.n	800e80c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	689b      	ldr	r3, [r3, #8]
 800e784:	4a24      	ldr	r2, [pc, #144]	@ (800e818 <ADC_Enable+0xcc>)
 800e786:	4013      	ands	r3, r2
 800e788:	d00d      	beq.n	800e7a6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e78e:	2210      	movs	r2, #16
 800e790:	431a      	orrs	r2, r3
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e79a:	2201      	movs	r2, #1
 800e79c:	431a      	orrs	r2, r3
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e033      	b.n	800e80e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	689a      	ldr	r2, [r3, #8]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2101      	movs	r1, #1
 800e7b2:	430a      	orrs	r2, r1
 800e7b4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800e7b6:	2001      	movs	r0, #1
 800e7b8:	f000 f830 	bl	800e81c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800e7bc:	f7ff fc68 	bl	800e090 <HAL_GetTick>
 800e7c0:	0003      	movs	r3, r0
 800e7c2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800e7c4:	e01b      	b.n	800e7fe <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800e7c6:	f7ff fc63 	bl	800e090 <HAL_GetTick>
 800e7ca:	0002      	movs	r2, r0
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	1ad3      	subs	r3, r2, r3
 800e7d0:	2b0a      	cmp	r3, #10
 800e7d2:	d914      	bls.n	800e7fe <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	4013      	ands	r3, r2
 800e7de:	2b01      	cmp	r3, #1
 800e7e0:	d00d      	beq.n	800e7fe <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7e6:	2210      	movs	r2, #16
 800e7e8:	431a      	orrs	r2, r3
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	431a      	orrs	r2, r3
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	e007      	b.n	800e80e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	2201      	movs	r2, #1
 800e806:	4013      	ands	r3, r2
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d1dc      	bne.n	800e7c6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800e80c:	2300      	movs	r3, #0
}
 800e80e:	0018      	movs	r0, r3
 800e810:	46bd      	mov	sp, r7
 800e812:	b004      	add	sp, #16
 800e814:	bd80      	pop	{r7, pc}
 800e816:	46c0      	nop			@ (mov r8, r8)
 800e818:	80000017 	.word	0x80000017

0800e81c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800e824:	4b0b      	ldr	r3, [pc, #44]	@ (800e854 <ADC_DelayMicroSecond+0x38>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	490b      	ldr	r1, [pc, #44]	@ (800e858 <ADC_DelayMicroSecond+0x3c>)
 800e82a:	0018      	movs	r0, r3
 800e82c:	f7f1 fcba 	bl	80001a4 <__udivsi3>
 800e830:	0003      	movs	r3, r0
 800e832:	001a      	movs	r2, r3
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4353      	muls	r3, r2
 800e838:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800e83a:	e002      	b.n	800e842 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	3b01      	subs	r3, #1
 800e840:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d1f9      	bne.n	800e83c <ADC_DelayMicroSecond+0x20>
  }
}
 800e848:	46c0      	nop			@ (mov r8, r8)
 800e84a:	46c0      	nop			@ (mov r8, r8)
 800e84c:	46bd      	mov	sp, r7
 800e84e:	b004      	add	sp, #16
 800e850:	bd80      	pop	{r7, pc}
 800e852:	46c0      	nop			@ (mov r8, r8)
 800e854:	200000c8 	.word	0x200000c8
 800e858:	000f4240 	.word	0x000f4240

0800e85c <__NVIC_EnableIRQ>:
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	0002      	movs	r2, r0
 800e864:	1dfb      	adds	r3, r7, #7
 800e866:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e868:	1dfb      	adds	r3, r7, #7
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	2b7f      	cmp	r3, #127	@ 0x7f
 800e86e:	d809      	bhi.n	800e884 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e870:	1dfb      	adds	r3, r7, #7
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	001a      	movs	r2, r3
 800e876:	231f      	movs	r3, #31
 800e878:	401a      	ands	r2, r3
 800e87a:	4b04      	ldr	r3, [pc, #16]	@ (800e88c <__NVIC_EnableIRQ+0x30>)
 800e87c:	2101      	movs	r1, #1
 800e87e:	4091      	lsls	r1, r2
 800e880:	000a      	movs	r2, r1
 800e882:	601a      	str	r2, [r3, #0]
}
 800e884:	46c0      	nop			@ (mov r8, r8)
 800e886:	46bd      	mov	sp, r7
 800e888:	b002      	add	sp, #8
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	e000e100 	.word	0xe000e100

0800e890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e890:	b590      	push	{r4, r7, lr}
 800e892:	b083      	sub	sp, #12
 800e894:	af00      	add	r7, sp, #0
 800e896:	0002      	movs	r2, r0
 800e898:	6039      	str	r1, [r7, #0]
 800e89a:	1dfb      	adds	r3, r7, #7
 800e89c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e89e:	1dfb      	adds	r3, r7, #7
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800e8a4:	d828      	bhi.n	800e8f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e8a6:	4a2f      	ldr	r2, [pc, #188]	@ (800e964 <__NVIC_SetPriority+0xd4>)
 800e8a8:	1dfb      	adds	r3, r7, #7
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	b25b      	sxtb	r3, r3
 800e8ae:	089b      	lsrs	r3, r3, #2
 800e8b0:	33c0      	adds	r3, #192	@ 0xc0
 800e8b2:	009b      	lsls	r3, r3, #2
 800e8b4:	589b      	ldr	r3, [r3, r2]
 800e8b6:	1dfa      	adds	r2, r7, #7
 800e8b8:	7812      	ldrb	r2, [r2, #0]
 800e8ba:	0011      	movs	r1, r2
 800e8bc:	2203      	movs	r2, #3
 800e8be:	400a      	ands	r2, r1
 800e8c0:	00d2      	lsls	r2, r2, #3
 800e8c2:	21ff      	movs	r1, #255	@ 0xff
 800e8c4:	4091      	lsls	r1, r2
 800e8c6:	000a      	movs	r2, r1
 800e8c8:	43d2      	mvns	r2, r2
 800e8ca:	401a      	ands	r2, r3
 800e8cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	019b      	lsls	r3, r3, #6
 800e8d2:	22ff      	movs	r2, #255	@ 0xff
 800e8d4:	401a      	ands	r2, r3
 800e8d6:	1dfb      	adds	r3, r7, #7
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	0018      	movs	r0, r3
 800e8dc:	2303      	movs	r3, #3
 800e8de:	4003      	ands	r3, r0
 800e8e0:	00db      	lsls	r3, r3, #3
 800e8e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e8e4:	481f      	ldr	r0, [pc, #124]	@ (800e964 <__NVIC_SetPriority+0xd4>)
 800e8e6:	1dfb      	adds	r3, r7, #7
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	b25b      	sxtb	r3, r3
 800e8ec:	089b      	lsrs	r3, r3, #2
 800e8ee:	430a      	orrs	r2, r1
 800e8f0:	33c0      	adds	r3, #192	@ 0xc0
 800e8f2:	009b      	lsls	r3, r3, #2
 800e8f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800e8f6:	e031      	b.n	800e95c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e8f8:	4a1b      	ldr	r2, [pc, #108]	@ (800e968 <__NVIC_SetPriority+0xd8>)
 800e8fa:	1dfb      	adds	r3, r7, #7
 800e8fc:	781b      	ldrb	r3, [r3, #0]
 800e8fe:	0019      	movs	r1, r3
 800e900:	230f      	movs	r3, #15
 800e902:	400b      	ands	r3, r1
 800e904:	3b08      	subs	r3, #8
 800e906:	089b      	lsrs	r3, r3, #2
 800e908:	3306      	adds	r3, #6
 800e90a:	009b      	lsls	r3, r3, #2
 800e90c:	18d3      	adds	r3, r2, r3
 800e90e:	3304      	adds	r3, #4
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	1dfa      	adds	r2, r7, #7
 800e914:	7812      	ldrb	r2, [r2, #0]
 800e916:	0011      	movs	r1, r2
 800e918:	2203      	movs	r2, #3
 800e91a:	400a      	ands	r2, r1
 800e91c:	00d2      	lsls	r2, r2, #3
 800e91e:	21ff      	movs	r1, #255	@ 0xff
 800e920:	4091      	lsls	r1, r2
 800e922:	000a      	movs	r2, r1
 800e924:	43d2      	mvns	r2, r2
 800e926:	401a      	ands	r2, r3
 800e928:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	019b      	lsls	r3, r3, #6
 800e92e:	22ff      	movs	r2, #255	@ 0xff
 800e930:	401a      	ands	r2, r3
 800e932:	1dfb      	adds	r3, r7, #7
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	0018      	movs	r0, r3
 800e938:	2303      	movs	r3, #3
 800e93a:	4003      	ands	r3, r0
 800e93c:	00db      	lsls	r3, r3, #3
 800e93e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e940:	4809      	ldr	r0, [pc, #36]	@ (800e968 <__NVIC_SetPriority+0xd8>)
 800e942:	1dfb      	adds	r3, r7, #7
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	001c      	movs	r4, r3
 800e948:	230f      	movs	r3, #15
 800e94a:	4023      	ands	r3, r4
 800e94c:	3b08      	subs	r3, #8
 800e94e:	089b      	lsrs	r3, r3, #2
 800e950:	430a      	orrs	r2, r1
 800e952:	3306      	adds	r3, #6
 800e954:	009b      	lsls	r3, r3, #2
 800e956:	18c3      	adds	r3, r0, r3
 800e958:	3304      	adds	r3, #4
 800e95a:	601a      	str	r2, [r3, #0]
}
 800e95c:	46c0      	nop			@ (mov r8, r8)
 800e95e:	46bd      	mov	sp, r7
 800e960:	b003      	add	sp, #12
 800e962:	bd90      	pop	{r4, r7, pc}
 800e964:	e000e100 	.word	0xe000e100
 800e968:	e000ed00 	.word	0xe000ed00

0800e96c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	1e5a      	subs	r2, r3, #1
 800e978:	2380      	movs	r3, #128	@ 0x80
 800e97a:	045b      	lsls	r3, r3, #17
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d301      	bcc.n	800e984 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e980:	2301      	movs	r3, #1
 800e982:	e010      	b.n	800e9a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e984:	4b0a      	ldr	r3, [pc, #40]	@ (800e9b0 <SysTick_Config+0x44>)
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	3a01      	subs	r2, #1
 800e98a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e98c:	2301      	movs	r3, #1
 800e98e:	425b      	negs	r3, r3
 800e990:	2103      	movs	r1, #3
 800e992:	0018      	movs	r0, r3
 800e994:	f7ff ff7c 	bl	800e890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e998:	4b05      	ldr	r3, [pc, #20]	@ (800e9b0 <SysTick_Config+0x44>)
 800e99a:	2200      	movs	r2, #0
 800e99c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e99e:	4b04      	ldr	r3, [pc, #16]	@ (800e9b0 <SysTick_Config+0x44>)
 800e9a0:	2207      	movs	r2, #7
 800e9a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e9a4:	2300      	movs	r3, #0
}
 800e9a6:	0018      	movs	r0, r3
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	b002      	add	sp, #8
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	46c0      	nop			@ (mov r8, r8)
 800e9b0:	e000e010 	.word	0xe000e010

0800e9b4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60b9      	str	r1, [r7, #8]
 800e9bc:	607a      	str	r2, [r7, #4]
 800e9be:	210f      	movs	r1, #15
 800e9c0:	187b      	adds	r3, r7, r1
 800e9c2:	1c02      	adds	r2, r0, #0
 800e9c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800e9c6:	68ba      	ldr	r2, [r7, #8]
 800e9c8:	187b      	adds	r3, r7, r1
 800e9ca:	781b      	ldrb	r3, [r3, #0]
 800e9cc:	b25b      	sxtb	r3, r3
 800e9ce:	0011      	movs	r1, r2
 800e9d0:	0018      	movs	r0, r3
 800e9d2:	f7ff ff5d 	bl	800e890 <__NVIC_SetPriority>
}
 800e9d6:	46c0      	nop			@ (mov r8, r8)
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	b004      	add	sp, #16
 800e9dc:	bd80      	pop	{r7, pc}

0800e9de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e9de:	b580      	push	{r7, lr}
 800e9e0:	b082      	sub	sp, #8
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	0002      	movs	r2, r0
 800e9e6:	1dfb      	adds	r3, r7, #7
 800e9e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e9ea:	1dfb      	adds	r3, r7, #7
 800e9ec:	781b      	ldrb	r3, [r3, #0]
 800e9ee:	b25b      	sxtb	r3, r3
 800e9f0:	0018      	movs	r0, r3
 800e9f2:	f7ff ff33 	bl	800e85c <__NVIC_EnableIRQ>
}
 800e9f6:	46c0      	nop			@ (mov r8, r8)
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	b002      	add	sp, #8
 800e9fc:	bd80      	pop	{r7, pc}

0800e9fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e9fe:	b580      	push	{r7, lr}
 800ea00:	b082      	sub	sp, #8
 800ea02:	af00      	add	r7, sp, #0
 800ea04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	0018      	movs	r0, r3
 800ea0a:	f7ff ffaf 	bl	800e96c <SysTick_Config>
 800ea0e:	0003      	movs	r3, r0
}
 800ea10:	0018      	movs	r0, r3
 800ea12:	46bd      	mov	sp, r7
 800ea14:	b002      	add	sp, #8
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d101      	bne.n	800ea2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ea26:	2301      	movs	r3, #1
 800ea28:	e061      	b.n	800eaee <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4a32      	ldr	r2, [pc, #200]	@ (800eaf8 <HAL_DMA_Init+0xe0>)
 800ea30:	4694      	mov	ip, r2
 800ea32:	4463      	add	r3, ip
 800ea34:	2114      	movs	r1, #20
 800ea36:	0018      	movs	r0, r3
 800ea38:	f7f1 fbb4 	bl	80001a4 <__udivsi3>
 800ea3c:	0003      	movs	r3, r0
 800ea3e:	009a      	lsls	r2, r3, #2
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	4a2d      	ldr	r2, [pc, #180]	@ (800eafc <HAL_DMA_Init+0xe4>)
 800ea48:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2225      	movs	r2, #37	@ 0x25
 800ea4e:	2102      	movs	r1, #2
 800ea50:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	4a28      	ldr	r2, [pc, #160]	@ (800eb00 <HAL_DMA_Init+0xe8>)
 800ea5e:	4013      	ands	r3, r2
 800ea60:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800ea6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	691b      	ldr	r3, [r3, #16]
 800ea70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800ea76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	699b      	ldr	r3, [r3, #24]
 800ea7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800ea82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6a1b      	ldr	r3, [r3, #32]
 800ea88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800ea8a:	68fa      	ldr	r2, [r7, #12]
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	68fa      	ldr	r2, [r7, #12]
 800ea96:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	689a      	ldr	r2, [r3, #8]
 800ea9c:	2380      	movs	r3, #128	@ 0x80
 800ea9e:	01db      	lsls	r3, r3, #7
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d018      	beq.n	800ead6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800eaa4:	4b17      	ldr	r3, [pc, #92]	@ (800eb04 <HAL_DMA_Init+0xec>)
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eaac:	211c      	movs	r1, #28
 800eaae:	400b      	ands	r3, r1
 800eab0:	210f      	movs	r1, #15
 800eab2:	4099      	lsls	r1, r3
 800eab4:	000b      	movs	r3, r1
 800eab6:	43d9      	mvns	r1, r3
 800eab8:	4b12      	ldr	r3, [pc, #72]	@ (800eb04 <HAL_DMA_Init+0xec>)
 800eaba:	400a      	ands	r2, r1
 800eabc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800eabe:	4b11      	ldr	r3, [pc, #68]	@ (800eb04 <HAL_DMA_Init+0xec>)
 800eac0:	6819      	ldr	r1, [r3, #0]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	685a      	ldr	r2, [r3, #4]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eaca:	201c      	movs	r0, #28
 800eacc:	4003      	ands	r3, r0
 800eace:	409a      	lsls	r2, r3
 800ead0:	4b0c      	ldr	r3, [pc, #48]	@ (800eb04 <HAL_DMA_Init+0xec>)
 800ead2:	430a      	orrs	r2, r1
 800ead4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2200      	movs	r2, #0
 800eada:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2225      	movs	r2, #37	@ 0x25
 800eae0:	2101      	movs	r1, #1
 800eae2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2224      	movs	r2, #36	@ 0x24
 800eae8:	2100      	movs	r1, #0
 800eaea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800eaec:	2300      	movs	r3, #0
}
 800eaee:	0018      	movs	r0, r3
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	b004      	add	sp, #16
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	46c0      	nop			@ (mov r8, r8)
 800eaf8:	bffdfff8 	.word	0xbffdfff8
 800eafc:	40020000 	.word	0x40020000
 800eb00:	ffff800f 	.word	0xffff800f
 800eb04:	400200a8 	.word	0x400200a8

0800eb08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b086      	sub	sp, #24
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	60f8      	str	r0, [r7, #12]
 800eb10:	60b9      	str	r1, [r7, #8]
 800eb12:	607a      	str	r2, [r7, #4]
 800eb14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb16:	2317      	movs	r3, #23
 800eb18:	18fb      	adds	r3, r7, r3
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2224      	movs	r2, #36	@ 0x24
 800eb22:	5c9b      	ldrb	r3, [r3, r2]
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d101      	bne.n	800eb2c <HAL_DMA_Start_IT+0x24>
 800eb28:	2302      	movs	r3, #2
 800eb2a:	e04f      	b.n	800ebcc <HAL_DMA_Start_IT+0xc4>
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2224      	movs	r2, #36	@ 0x24
 800eb30:	2101      	movs	r1, #1
 800eb32:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2225      	movs	r2, #37	@ 0x25
 800eb38:	5c9b      	ldrb	r3, [r3, r2]
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d13a      	bne.n	800ebb6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2225      	movs	r2, #37	@ 0x25
 800eb44:	2102      	movs	r1, #2
 800eb46:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2101      	movs	r1, #1
 800eb5a:	438a      	bics	r2, r1
 800eb5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	687a      	ldr	r2, [r7, #4]
 800eb62:	68b9      	ldr	r1, [r7, #8]
 800eb64:	68f8      	ldr	r0, [r7, #12]
 800eb66:	f000 f976 	bl	800ee56 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d008      	beq.n	800eb84 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	210e      	movs	r1, #14
 800eb7e:	430a      	orrs	r2, r1
 800eb80:	601a      	str	r2, [r3, #0]
 800eb82:	e00f      	b.n	800eba4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	681a      	ldr	r2, [r3, #0]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	2104      	movs	r1, #4
 800eb90:	438a      	bics	r2, r1
 800eb92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	210a      	movs	r1, #10
 800eba0:	430a      	orrs	r2, r1
 800eba2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2101      	movs	r1, #1
 800ebb0:	430a      	orrs	r2, r1
 800ebb2:	601a      	str	r2, [r3, #0]
 800ebb4:	e007      	b.n	800ebc6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2224      	movs	r2, #36	@ 0x24
 800ebba:	2100      	movs	r1, #0
 800ebbc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800ebbe:	2317      	movs	r3, #23
 800ebc0:	18fb      	adds	r3, r7, r3
 800ebc2:	2202      	movs	r2, #2
 800ebc4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800ebc6:	2317      	movs	r3, #23
 800ebc8:	18fb      	adds	r3, r7, r3
 800ebca:	781b      	ldrb	r3, [r3, #0]
}
 800ebcc:	0018      	movs	r0, r3
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	b006      	add	sp, #24
 800ebd2:	bd80      	pop	{r7, pc}

0800ebd4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ebdc:	230f      	movs	r3, #15
 800ebde:	18fb      	adds	r3, r7, r3
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2225      	movs	r2, #37	@ 0x25
 800ebe8:	5c9b      	ldrb	r3, [r3, r2]
 800ebea:	b2db      	uxtb	r3, r3
 800ebec:	2b02      	cmp	r3, #2
 800ebee:	d008      	beq.n	800ec02 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2204      	movs	r2, #4
 800ebf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2224      	movs	r2, #36	@ 0x24
 800ebfa:	2100      	movs	r1, #0
 800ebfc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800ebfe:	2301      	movs	r3, #1
 800ec00:	e024      	b.n	800ec4c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	210e      	movs	r1, #14
 800ec0e:	438a      	bics	r2, r1
 800ec10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	681a      	ldr	r2, [r3, #0]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	2101      	movs	r1, #1
 800ec1e:	438a      	bics	r2, r1
 800ec20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec26:	221c      	movs	r2, #28
 800ec28:	401a      	ands	r2, r3
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec2e:	2101      	movs	r1, #1
 800ec30:	4091      	lsls	r1, r2
 800ec32:	000a      	movs	r2, r1
 800ec34:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2225      	movs	r2, #37	@ 0x25
 800ec3a:	2101      	movs	r1, #1
 800ec3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2224      	movs	r2, #36	@ 0x24
 800ec42:	2100      	movs	r1, #0
 800ec44:	5499      	strb	r1, [r3, r2]

    return status;
 800ec46:	230f      	movs	r3, #15
 800ec48:	18fb      	adds	r3, r7, r3
 800ec4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ec4c:	0018      	movs	r0, r3
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	b004      	add	sp, #16
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ec5c:	210f      	movs	r1, #15
 800ec5e:	187b      	adds	r3, r7, r1
 800ec60:	2200      	movs	r2, #0
 800ec62:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2225      	movs	r2, #37	@ 0x25
 800ec68:	5c9b      	ldrb	r3, [r3, r2]
 800ec6a:	b2db      	uxtb	r3, r3
 800ec6c:	2b02      	cmp	r3, #2
 800ec6e:	d006      	beq.n	800ec7e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2204      	movs	r2, #4
 800ec74:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800ec76:	187b      	adds	r3, r7, r1
 800ec78:	2201      	movs	r2, #1
 800ec7a:	701a      	strb	r2, [r3, #0]
 800ec7c:	e02a      	b.n	800ecd4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	210e      	movs	r1, #14
 800ec8a:	438a      	bics	r2, r1
 800ec8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	2101      	movs	r1, #1
 800ec9a:	438a      	bics	r2, r1
 800ec9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eca2:	221c      	movs	r2, #28
 800eca4:	401a      	ands	r2, r3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecaa:	2101      	movs	r1, #1
 800ecac:	4091      	lsls	r1, r2
 800ecae:	000a      	movs	r2, r1
 800ecb0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2225      	movs	r2, #37	@ 0x25
 800ecb6:	2101      	movs	r1, #1
 800ecb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2224      	movs	r2, #36	@ 0x24
 800ecbe:	2100      	movs	r1, #0
 800ecc0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d004      	beq.n	800ecd4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecce:	687a      	ldr	r2, [r7, #4]
 800ecd0:	0010      	movs	r0, r2
 800ecd2:	4798      	blx	r3
    }
  }
  return status;
 800ecd4:	230f      	movs	r3, #15
 800ecd6:	18fb      	adds	r3, r7, r3
 800ecd8:	781b      	ldrb	r3, [r3, #0]
}
 800ecda:	0018      	movs	r0, r3
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	b004      	add	sp, #16
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ece2:	b580      	push	{r7, lr}
 800ece4:	b084      	sub	sp, #16
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecfe:	221c      	movs	r2, #28
 800ed00:	4013      	ands	r3, r2
 800ed02:	2204      	movs	r2, #4
 800ed04:	409a      	lsls	r2, r3
 800ed06:	0013      	movs	r3, r2
 800ed08:	68fa      	ldr	r2, [r7, #12]
 800ed0a:	4013      	ands	r3, r2
 800ed0c:	d026      	beq.n	800ed5c <HAL_DMA_IRQHandler+0x7a>
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	2204      	movs	r2, #4
 800ed12:	4013      	ands	r3, r2
 800ed14:	d022      	beq.n	800ed5c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	2220      	movs	r2, #32
 800ed1e:	4013      	ands	r3, r2
 800ed20:	d107      	bne.n	800ed32 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	2104      	movs	r1, #4
 800ed2e:	438a      	bics	r2, r1
 800ed30:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed36:	221c      	movs	r2, #28
 800ed38:	401a      	ands	r2, r3
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed3e:	2104      	movs	r1, #4
 800ed40:	4091      	lsls	r1, r2
 800ed42:	000a      	movs	r2, r1
 800ed44:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d100      	bne.n	800ed50 <HAL_DMA_IRQHandler+0x6e>
 800ed4e:	e071      	b.n	800ee34 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed54:	687a      	ldr	r2, [r7, #4]
 800ed56:	0010      	movs	r0, r2
 800ed58:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800ed5a:	e06b      	b.n	800ee34 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed60:	221c      	movs	r2, #28
 800ed62:	4013      	ands	r3, r2
 800ed64:	2202      	movs	r2, #2
 800ed66:	409a      	lsls	r2, r3
 800ed68:	0013      	movs	r3, r2
 800ed6a:	68fa      	ldr	r2, [r7, #12]
 800ed6c:	4013      	ands	r3, r2
 800ed6e:	d02d      	beq.n	800edcc <HAL_DMA_IRQHandler+0xea>
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	2202      	movs	r2, #2
 800ed74:	4013      	ands	r3, r2
 800ed76:	d029      	beq.n	800edcc <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	2220      	movs	r2, #32
 800ed80:	4013      	ands	r3, r2
 800ed82:	d10b      	bne.n	800ed9c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	210a      	movs	r1, #10
 800ed90:	438a      	bics	r2, r1
 800ed92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2225      	movs	r2, #37	@ 0x25
 800ed98:	2101      	movs	r1, #1
 800ed9a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eda0:	221c      	movs	r2, #28
 800eda2:	401a      	ands	r2, r3
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eda8:	2102      	movs	r1, #2
 800edaa:	4091      	lsls	r1, r2
 800edac:	000a      	movs	r2, r1
 800edae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2224      	movs	r2, #36	@ 0x24
 800edb4:	2100      	movs	r1, #0
 800edb6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d039      	beq.n	800ee34 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	0010      	movs	r0, r2
 800edc8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800edca:	e033      	b.n	800ee34 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edd0:	221c      	movs	r2, #28
 800edd2:	4013      	ands	r3, r2
 800edd4:	2208      	movs	r2, #8
 800edd6:	409a      	lsls	r2, r3
 800edd8:	0013      	movs	r3, r2
 800edda:	68fa      	ldr	r2, [r7, #12]
 800eddc:	4013      	ands	r3, r2
 800edde:	d02a      	beq.n	800ee36 <HAL_DMA_IRQHandler+0x154>
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	2208      	movs	r2, #8
 800ede4:	4013      	ands	r3, r2
 800ede6:	d026      	beq.n	800ee36 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	681a      	ldr	r2, [r3, #0]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	210e      	movs	r1, #14
 800edf4:	438a      	bics	r2, r1
 800edf6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800edfc:	221c      	movs	r2, #28
 800edfe:	401a      	ands	r2, r3
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee04:	2101      	movs	r1, #1
 800ee06:	4091      	lsls	r1, r2
 800ee08:	000a      	movs	r2, r1
 800ee0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2225      	movs	r2, #37	@ 0x25
 800ee16:	2101      	movs	r1, #1
 800ee18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2224      	movs	r2, #36	@ 0x24
 800ee1e:	2100      	movs	r1, #0
 800ee20:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d005      	beq.n	800ee36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	0010      	movs	r0, r2
 800ee32:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ee34:	46c0      	nop			@ (mov r8, r8)
 800ee36:	46c0      	nop			@ (mov r8, r8)
}
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	b004      	add	sp, #16
 800ee3c:	bd80      	pop	{r7, pc}

0800ee3e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b082      	sub	sp, #8
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2225      	movs	r2, #37	@ 0x25
 800ee4a:	5c9b      	ldrb	r3, [r3, r2]
 800ee4c:	b2db      	uxtb	r3, r3
}
 800ee4e:	0018      	movs	r0, r3
 800ee50:	46bd      	mov	sp, r7
 800ee52:	b002      	add	sp, #8
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ee56:	b580      	push	{r7, lr}
 800ee58:	b084      	sub	sp, #16
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	60f8      	str	r0, [r7, #12]
 800ee5e:	60b9      	str	r1, [r7, #8]
 800ee60:	607a      	str	r2, [r7, #4]
 800ee62:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee68:	221c      	movs	r2, #28
 800ee6a:	401a      	ands	r2, r3
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee70:	2101      	movs	r1, #1
 800ee72:	4091      	lsls	r1, r2
 800ee74:	000a      	movs	r2, r1
 800ee76:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	683a      	ldr	r2, [r7, #0]
 800ee7e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	689b      	ldr	r3, [r3, #8]
 800ee84:	2b10      	cmp	r3, #16
 800ee86:	d108      	bne.n	800ee9a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	687a      	ldr	r2, [r7, #4]
 800ee8e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	68ba      	ldr	r2, [r7, #8]
 800ee96:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ee98:	e007      	b.n	800eeaa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	68ba      	ldr	r2, [r7, #8]
 800eea0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	60da      	str	r2, [r3, #12]
}
 800eeaa:	46c0      	nop			@ (mov r8, r8)
 800eeac:	46bd      	mov	sp, r7
 800eeae:	b004      	add	sp, #16
 800eeb0:	bd80      	pop	{r7, pc}
	...

0800eeb4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b084      	sub	sp, #16
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800eebc:	f7ff f8e8 	bl	800e090 <HAL_GetTick>
 800eec0:	0003      	movs	r3, r0
 800eec2:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800eec4:	e00f      	b.n	800eee6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	3301      	adds	r3, #1
 800eeca:	d00c      	beq.n	800eee6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d007      	beq.n	800eee2 <FLASH_WaitForLastOperation+0x2e>
 800eed2:	f7ff f8dd 	bl	800e090 <HAL_GetTick>
 800eed6:	0002      	movs	r2, r0
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	1ad3      	subs	r3, r2, r3
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d201      	bcs.n	800eee6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800eee2:	2303      	movs	r3, #3
 800eee4:	e052      	b.n	800ef8c <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800eee6:	4b2b      	ldr	r3, [pc, #172]	@ (800ef94 <FLASH_WaitForLastOperation+0xe0>)
 800eee8:	699b      	ldr	r3, [r3, #24]
 800eeea:	2201      	movs	r2, #1
 800eeec:	4013      	ands	r3, r2
 800eeee:	2b01      	cmp	r3, #1
 800eef0:	d0e9      	beq.n	800eec6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800eef2:	4b28      	ldr	r3, [pc, #160]	@ (800ef94 <FLASH_WaitForLastOperation+0xe0>)
 800eef4:	699b      	ldr	r3, [r3, #24]
 800eef6:	2202      	movs	r2, #2
 800eef8:	4013      	ands	r3, r2
 800eefa:	2b02      	cmp	r3, #2
 800eefc:	d102      	bne.n	800ef04 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800eefe:	4b25      	ldr	r3, [pc, #148]	@ (800ef94 <FLASH_WaitForLastOperation+0xe0>)
 800ef00:	2202      	movs	r2, #2
 800ef02:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ef04:	4b23      	ldr	r3, [pc, #140]	@ (800ef94 <FLASH_WaitForLastOperation+0xe0>)
 800ef06:	699a      	ldr	r2, [r3, #24]
 800ef08:	2380      	movs	r3, #128	@ 0x80
 800ef0a:	005b      	lsls	r3, r3, #1
 800ef0c:	401a      	ands	r2, r3
 800ef0e:	2380      	movs	r3, #128	@ 0x80
 800ef10:	005b      	lsls	r3, r3, #1
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d035      	beq.n	800ef82 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800ef16:	4b1f      	ldr	r3, [pc, #124]	@ (800ef94 <FLASH_WaitForLastOperation+0xe0>)
 800ef18:	699a      	ldr	r2, [r3, #24]
 800ef1a:	2380      	movs	r3, #128	@ 0x80
 800ef1c:	009b      	lsls	r3, r3, #2
 800ef1e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ef20:	2380      	movs	r3, #128	@ 0x80
 800ef22:	009b      	lsls	r3, r3, #2
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d02c      	beq.n	800ef82 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ef28:	4b1a      	ldr	r3, [pc, #104]	@ (800ef94 <FLASH_WaitForLastOperation+0xe0>)
 800ef2a:	699a      	ldr	r2, [r3, #24]
 800ef2c:	2380      	movs	r3, #128	@ 0x80
 800ef2e:	00db      	lsls	r3, r3, #3
 800ef30:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800ef32:	2380      	movs	r3, #128	@ 0x80
 800ef34:	00db      	lsls	r3, r3, #3
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d023      	beq.n	800ef82 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800ef3a:	4b16      	ldr	r3, [pc, #88]	@ (800ef94 <FLASH_WaitForLastOperation+0xe0>)
 800ef3c:	699a      	ldr	r2, [r3, #24]
 800ef3e:	2380      	movs	r3, #128	@ 0x80
 800ef40:	011b      	lsls	r3, r3, #4
 800ef42:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ef44:	2380      	movs	r3, #128	@ 0x80
 800ef46:	011b      	lsls	r3, r3, #4
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d01a      	beq.n	800ef82 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800ef4c:	4b11      	ldr	r3, [pc, #68]	@ (800ef94 <FLASH_WaitForLastOperation+0xe0>)
 800ef4e:	699a      	ldr	r2, [r3, #24]
 800ef50:	2380      	movs	r3, #128	@ 0x80
 800ef52:	019b      	lsls	r3, r3, #6
 800ef54:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800ef56:	2380      	movs	r3, #128	@ 0x80
 800ef58:	019b      	lsls	r3, r3, #6
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d011      	beq.n	800ef82 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800ef5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ef94 <FLASH_WaitForLastOperation+0xe0>)
 800ef60:	699a      	ldr	r2, [r3, #24]
 800ef62:	2380      	movs	r3, #128	@ 0x80
 800ef64:	029b      	lsls	r3, r3, #10
 800ef66:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800ef68:	2380      	movs	r3, #128	@ 0x80
 800ef6a:	029b      	lsls	r3, r3, #10
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d008      	beq.n	800ef82 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800ef70:	4b08      	ldr	r3, [pc, #32]	@ (800ef94 <FLASH_WaitForLastOperation+0xe0>)
 800ef72:	699a      	ldr	r2, [r3, #24]
 800ef74:	2380      	movs	r3, #128	@ 0x80
 800ef76:	025b      	lsls	r3, r3, #9
 800ef78:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800ef7a:	2380      	movs	r3, #128	@ 0x80
 800ef7c:	025b      	lsls	r3, r3, #9
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d103      	bne.n	800ef8a <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800ef82:	f000 f809 	bl	800ef98 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ef86:	2301      	movs	r3, #1
 800ef88:	e000      	b.n	800ef8c <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800ef8a:	2300      	movs	r3, #0
}
 800ef8c:	0018      	movs	r0, r3
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	b004      	add	sp, #16
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	40022000 	.word	0x40022000

0800ef98 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800efa2:	4b49      	ldr	r3, [pc, #292]	@ (800f0c8 <FLASH_SetErrorCode+0x130>)
 800efa4:	699a      	ldr	r2, [r3, #24]
 800efa6:	2380      	movs	r3, #128	@ 0x80
 800efa8:	005b      	lsls	r3, r3, #1
 800efaa:	401a      	ands	r2, r3
 800efac:	2380      	movs	r3, #128	@ 0x80
 800efae:	005b      	lsls	r3, r3, #1
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d10a      	bne.n	800efca <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800efb4:	4b45      	ldr	r3, [pc, #276]	@ (800f0cc <FLASH_SetErrorCode+0x134>)
 800efb6:	695b      	ldr	r3, [r3, #20]
 800efb8:	2202      	movs	r2, #2
 800efba:	431a      	orrs	r2, r3
 800efbc:	4b43      	ldr	r3, [pc, #268]	@ (800f0cc <FLASH_SetErrorCode+0x134>)
 800efbe:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2280      	movs	r2, #128	@ 0x80
 800efc4:	0052      	lsls	r2, r2, #1
 800efc6:	4313      	orrs	r3, r2
 800efc8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800efca:	4b3f      	ldr	r3, [pc, #252]	@ (800f0c8 <FLASH_SetErrorCode+0x130>)
 800efcc:	699a      	ldr	r2, [r3, #24]
 800efce:	2380      	movs	r3, #128	@ 0x80
 800efd0:	009b      	lsls	r3, r3, #2
 800efd2:	401a      	ands	r2, r3
 800efd4:	2380      	movs	r3, #128	@ 0x80
 800efd6:	009b      	lsls	r3, r3, #2
 800efd8:	429a      	cmp	r2, r3
 800efda:	d10a      	bne.n	800eff2 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800efdc:	4b3b      	ldr	r3, [pc, #236]	@ (800f0cc <FLASH_SetErrorCode+0x134>)
 800efde:	695b      	ldr	r3, [r3, #20]
 800efe0:	2201      	movs	r2, #1
 800efe2:	431a      	orrs	r2, r3
 800efe4:	4b39      	ldr	r3, [pc, #228]	@ (800f0cc <FLASH_SetErrorCode+0x134>)
 800efe6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2280      	movs	r2, #128	@ 0x80
 800efec:	0092      	lsls	r2, r2, #2
 800efee:	4313      	orrs	r3, r2
 800eff0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800eff2:	4b35      	ldr	r3, [pc, #212]	@ (800f0c8 <FLASH_SetErrorCode+0x130>)
 800eff4:	699a      	ldr	r2, [r3, #24]
 800eff6:	2380      	movs	r3, #128	@ 0x80
 800eff8:	00db      	lsls	r3, r3, #3
 800effa:	401a      	ands	r2, r3
 800effc:	2380      	movs	r3, #128	@ 0x80
 800effe:	00db      	lsls	r3, r3, #3
 800f000:	429a      	cmp	r2, r3
 800f002:	d10a      	bne.n	800f01a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800f004:	4b31      	ldr	r3, [pc, #196]	@ (800f0cc <FLASH_SetErrorCode+0x134>)
 800f006:	695b      	ldr	r3, [r3, #20]
 800f008:	2208      	movs	r2, #8
 800f00a:	431a      	orrs	r2, r3
 800f00c:	4b2f      	ldr	r3, [pc, #188]	@ (800f0cc <FLASH_SetErrorCode+0x134>)
 800f00e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2280      	movs	r2, #128	@ 0x80
 800f014:	00d2      	lsls	r2, r2, #3
 800f016:	4313      	orrs	r3, r2
 800f018:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800f01a:	4b2b      	ldr	r3, [pc, #172]	@ (800f0c8 <FLASH_SetErrorCode+0x130>)
 800f01c:	699a      	ldr	r2, [r3, #24]
 800f01e:	2380      	movs	r3, #128	@ 0x80
 800f020:	011b      	lsls	r3, r3, #4
 800f022:	401a      	ands	r2, r3
 800f024:	2380      	movs	r3, #128	@ 0x80
 800f026:	011b      	lsls	r3, r3, #4
 800f028:	429a      	cmp	r2, r3
 800f02a:	d10a      	bne.n	800f042 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800f02c:	4b27      	ldr	r3, [pc, #156]	@ (800f0cc <FLASH_SetErrorCode+0x134>)
 800f02e:	695b      	ldr	r3, [r3, #20]
 800f030:	2204      	movs	r2, #4
 800f032:	431a      	orrs	r2, r3
 800f034:	4b25      	ldr	r3, [pc, #148]	@ (800f0cc <FLASH_SetErrorCode+0x134>)
 800f036:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2280      	movs	r2, #128	@ 0x80
 800f03c:	0112      	lsls	r2, r2, #4
 800f03e:	4313      	orrs	r3, r2
 800f040:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800f042:	4b21      	ldr	r3, [pc, #132]	@ (800f0c8 <FLASH_SetErrorCode+0x130>)
 800f044:	699a      	ldr	r2, [r3, #24]
 800f046:	2380      	movs	r3, #128	@ 0x80
 800f048:	019b      	lsls	r3, r3, #6
 800f04a:	401a      	ands	r2, r3
 800f04c:	2380      	movs	r3, #128	@ 0x80
 800f04e:	019b      	lsls	r3, r3, #6
 800f050:	429a      	cmp	r2, r3
 800f052:	d10a      	bne.n	800f06a <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800f054:	4b1d      	ldr	r3, [pc, #116]	@ (800f0cc <FLASH_SetErrorCode+0x134>)
 800f056:	695b      	ldr	r3, [r3, #20]
 800f058:	2210      	movs	r2, #16
 800f05a:	431a      	orrs	r2, r3
 800f05c:	4b1b      	ldr	r3, [pc, #108]	@ (800f0cc <FLASH_SetErrorCode+0x134>)
 800f05e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2280      	movs	r2, #128	@ 0x80
 800f064:	0192      	lsls	r2, r2, #6
 800f066:	4313      	orrs	r3, r2
 800f068:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800f06a:	4b17      	ldr	r3, [pc, #92]	@ (800f0c8 <FLASH_SetErrorCode+0x130>)
 800f06c:	699a      	ldr	r2, [r3, #24]
 800f06e:	2380      	movs	r3, #128	@ 0x80
 800f070:	029b      	lsls	r3, r3, #10
 800f072:	401a      	ands	r2, r3
 800f074:	2380      	movs	r3, #128	@ 0x80
 800f076:	029b      	lsls	r3, r3, #10
 800f078:	429a      	cmp	r2, r3
 800f07a:	d109      	bne.n	800f090 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800f07c:	4b13      	ldr	r3, [pc, #76]	@ (800f0cc <FLASH_SetErrorCode+0x134>)
 800f07e:	695b      	ldr	r3, [r3, #20]
 800f080:	2220      	movs	r2, #32
 800f082:	431a      	orrs	r2, r3
 800f084:	4b11      	ldr	r3, [pc, #68]	@ (800f0cc <FLASH_SetErrorCode+0x134>)
 800f086:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2220      	movs	r2, #32
 800f08c:	4313      	orrs	r3, r2
 800f08e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800f090:	4b0d      	ldr	r3, [pc, #52]	@ (800f0c8 <FLASH_SetErrorCode+0x130>)
 800f092:	699a      	ldr	r2, [r3, #24]
 800f094:	2380      	movs	r3, #128	@ 0x80
 800f096:	025b      	lsls	r3, r3, #9
 800f098:	401a      	ands	r2, r3
 800f09a:	2380      	movs	r3, #128	@ 0x80
 800f09c:	025b      	lsls	r3, r3, #9
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d10a      	bne.n	800f0b8 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800f0a2:	4b0a      	ldr	r3, [pc, #40]	@ (800f0cc <FLASH_SetErrorCode+0x134>)
 800f0a4:	695b      	ldr	r3, [r3, #20]
 800f0a6:	2240      	movs	r2, #64	@ 0x40
 800f0a8:	431a      	orrs	r2, r3
 800f0aa:	4b08      	ldr	r3, [pc, #32]	@ (800f0cc <FLASH_SetErrorCode+0x134>)
 800f0ac:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2280      	movs	r2, #128	@ 0x80
 800f0b2:	0252      	lsls	r2, r2, #9
 800f0b4:	4313      	orrs	r3, r2
 800f0b6:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800f0b8:	4b03      	ldr	r3, [pc, #12]	@ (800f0c8 <FLASH_SetErrorCode+0x130>)
 800f0ba:	687a      	ldr	r2, [r7, #4]
 800f0bc:	619a      	str	r2, [r3, #24]
}  
 800f0be:	46c0      	nop			@ (mov r8, r8)
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	b002      	add	sp, #8
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	46c0      	nop			@ (mov r8, r8)
 800f0c8:	40022000 	.word	0x40022000
 800f0cc:	20002530 	.word	0x20002530

0800f0d0 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800f0d6:	4b12      	ldr	r3, [pc, #72]	@ (800f120 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	4013      	ands	r3, r2
 800f0de:	d019      	beq.n	800f114 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0e0:	f3ef 8310 	mrs	r3, PRIMASK
 800f0e4:	607b      	str	r3, [r7, #4]
  return(result);
 800f0e6:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800f0e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f0ea:	b672      	cpsid	i
}
 800f0ec:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800f0ee:	4b0c      	ldr	r3, [pc, #48]	@ (800f120 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f0f0:	4a0c      	ldr	r2, [pc, #48]	@ (800f124 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800f0f2:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800f0f4:	4b0a      	ldr	r3, [pc, #40]	@ (800f120 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f0f6:	4a0c      	ldr	r2, [pc, #48]	@ (800f128 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800f0f8:	60da      	str	r2, [r3, #12]
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	f383 8810 	msr	PRIMASK, r3
}
 800f104:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800f106:	4b06      	ldr	r3, [pc, #24]	@ (800f120 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	2201      	movs	r2, #1
 800f10c:	4013      	ands	r3, r2
 800f10e:	d001      	beq.n	800f114 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800f110:	2301      	movs	r3, #1
 800f112:	e000      	b.n	800f116 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800f114:	2300      	movs	r3, #0
}
 800f116:	0018      	movs	r0, r3
 800f118:	46bd      	mov	sp, r7
 800f11a:	b004      	add	sp, #16
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	46c0      	nop			@ (mov r8, r8)
 800f120:	40022000 	.word	0x40022000
 800f124:	89abcdef 	.word	0x89abcdef
 800f128:	02030405 	.word	0x02030405

0800f12c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800f130:	4b04      	ldr	r3, [pc, #16]	@ (800f144 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800f132:	685a      	ldr	r2, [r3, #4]
 800f134:	4b03      	ldr	r3, [pc, #12]	@ (800f144 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800f136:	2101      	movs	r1, #1
 800f138:	430a      	orrs	r2, r1
 800f13a:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800f13c:	2300      	movs	r3, #0
}
 800f13e:	0018      	movs	r0, r3
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}
 800f144:	40022000 	.word	0x40022000

0800f148 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800f148:	b5b0      	push	{r4, r5, r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f150:	250f      	movs	r5, #15
 800f152:	197b      	adds	r3, r7, r5
 800f154:	2200      	movs	r2, #0
 800f156:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f158:	197c      	adds	r4, r7, r5
 800f15a:	4b0f      	ldr	r3, [pc, #60]	@ (800f198 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800f15c:	0018      	movs	r0, r3
 800f15e:	f7ff fea9 	bl	800eeb4 <FLASH_WaitForLastOperation>
 800f162:	0003      	movs	r3, r0
 800f164:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800f166:	0029      	movs	r1, r5
 800f168:	187b      	adds	r3, r7, r1
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d10c      	bne.n	800f18a <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f170:	4b0a      	ldr	r3, [pc, #40]	@ (800f19c <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800f172:	2200      	movs	r2, #0
 800f174:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2200      	movs	r2, #0
 800f17a:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f17c:	187c      	adds	r4, r7, r1
 800f17e:	4b06      	ldr	r3, [pc, #24]	@ (800f198 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800f180:	0018      	movs	r0, r3
 800f182:	f7ff fe97 	bl	800eeb4 <FLASH_WaitForLastOperation>
 800f186:	0003      	movs	r3, r0
 800f188:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800f18a:	230f      	movs	r3, #15
 800f18c:	18fb      	adds	r3, r7, r3
 800f18e:	781b      	ldrb	r3, [r3, #0]
}  
 800f190:	0018      	movs	r0, r3
 800f192:	46bd      	mov	sp, r7
 800f194:	b004      	add	sp, #16
 800f196:	bdb0      	pop	{r4, r5, r7, pc}
 800f198:	0000c350 	.word	0x0000c350
 800f19c:	20002530 	.word	0x20002530

0800f1a0 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800f1a0:	b5b0      	push	{r4, r5, r7, lr}
 800f1a2:	b086      	sub	sp, #24
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800f1ac:	2317      	movs	r3, #23
 800f1ae:	18fb      	adds	r3, r7, r3
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800f1b4:	4b24      	ldr	r3, [pc, #144]	@ (800f248 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f1b6:	7c1b      	ldrb	r3, [r3, #16]
 800f1b8:	2b01      	cmp	r3, #1
 800f1ba:	d101      	bne.n	800f1c0 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800f1bc:	2302      	movs	r3, #2
 800f1be:	e03e      	b.n	800f23e <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800f1c0:	4b21      	ldr	r3, [pc, #132]	@ (800f248 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f1c6:	2517      	movs	r5, #23
 800f1c8:	197c      	adds	r4, r7, r5
 800f1ca:	4b20      	ldr	r3, [pc, #128]	@ (800f24c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800f1cc:	0018      	movs	r0, r3
 800f1ce:	f7ff fe71 	bl	800eeb4 <FLASH_WaitForLastOperation>
 800f1d2:	0003      	movs	r3, r0
 800f1d4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800f1d6:	197b      	adds	r3, r7, r5
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d129      	bne.n	800f232 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f1de:	4b1a      	ldr	r3, [pc, #104]	@ (800f248 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2b02      	cmp	r3, #2
 800f1e8:	d103      	bne.n	800f1f2 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	687a      	ldr	r2, [r7, #4]
 800f1ee:	601a      	str	r2, [r3, #0]
 800f1f0:	e013      	b.n	800f21a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	d104      	bne.n	800f202 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	b292      	uxth	r2, r2
 800f1fe:	801a      	strh	r2, [r3, #0]
 800f200:	e00b      	b.n	800f21a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d104      	bne.n	800f212 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	687a      	ldr	r2, [r7, #4]
 800f20c:	b2d2      	uxtb	r2, r2
 800f20e:	701a      	strb	r2, [r3, #0]
 800f210:	e003      	b.n	800f21a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800f212:	2317      	movs	r3, #23
 800f214:	18fb      	adds	r3, r7, r3
 800f216:	2201      	movs	r2, #1
 800f218:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800f21a:	2217      	movs	r2, #23
 800f21c:	18bb      	adds	r3, r7, r2
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d106      	bne.n	800f232 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800f224:	18bc      	adds	r4, r7, r2
 800f226:	4b09      	ldr	r3, [pc, #36]	@ (800f24c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800f228:	0018      	movs	r0, r3
 800f22a:	f7ff fe43 	bl	800eeb4 <FLASH_WaitForLastOperation>
 800f22e:	0003      	movs	r3, r0
 800f230:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800f232:	4b05      	ldr	r3, [pc, #20]	@ (800f248 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800f234:	2200      	movs	r2, #0
 800f236:	741a      	strb	r2, [r3, #16]

  return status;
 800f238:	2317      	movs	r3, #23
 800f23a:	18fb      	adds	r3, r7, r3
 800f23c:	781b      	ldrb	r3, [r3, #0]
}
 800f23e:	0018      	movs	r0, r3
 800f240:	46bd      	mov	sp, r7
 800f242:	b006      	add	sp, #24
 800f244:	bdb0      	pop	{r4, r5, r7, pc}
 800f246:	46c0      	nop			@ (mov r8, r8)
 800f248:	20002530 	.word	0x20002530
 800f24c:	0000c350 	.word	0x0000c350

0800f250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b086      	sub	sp, #24
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800f25a:	2300      	movs	r3, #0
 800f25c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800f25e:	2300      	movs	r3, #0
 800f260:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800f262:	2300      	movs	r3, #0
 800f264:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800f266:	e155      	b.n	800f514 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2101      	movs	r1, #1
 800f26e:	697a      	ldr	r2, [r7, #20]
 800f270:	4091      	lsls	r1, r2
 800f272:	000a      	movs	r2, r1
 800f274:	4013      	ands	r3, r2
 800f276:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d100      	bne.n	800f280 <HAL_GPIO_Init+0x30>
 800f27e:	e146      	b.n	800f50e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	2203      	movs	r2, #3
 800f286:	4013      	ands	r3, r2
 800f288:	2b01      	cmp	r3, #1
 800f28a:	d005      	beq.n	800f298 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	2203      	movs	r2, #3
 800f292:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800f294:	2b02      	cmp	r3, #2
 800f296:	d130      	bne.n	800f2fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	689b      	ldr	r3, [r3, #8]
 800f29c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	005b      	lsls	r3, r3, #1
 800f2a2:	2203      	movs	r2, #3
 800f2a4:	409a      	lsls	r2, r3
 800f2a6:	0013      	movs	r3, r2
 800f2a8:	43da      	mvns	r2, r3
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	4013      	ands	r3, r2
 800f2ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	68da      	ldr	r2, [r3, #12]
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	005b      	lsls	r3, r3, #1
 800f2b8:	409a      	lsls	r2, r3
 800f2ba:	0013      	movs	r3, r2
 800f2bc:	693a      	ldr	r2, [r7, #16]
 800f2be:	4313      	orrs	r3, r2
 800f2c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	693a      	ldr	r2, [r7, #16]
 800f2c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	697b      	ldr	r3, [r7, #20]
 800f2d2:	409a      	lsls	r2, r3
 800f2d4:	0013      	movs	r3, r2
 800f2d6:	43da      	mvns	r2, r3
 800f2d8:	693b      	ldr	r3, [r7, #16]
 800f2da:	4013      	ands	r3, r2
 800f2dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	091b      	lsrs	r3, r3, #4
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	401a      	ands	r2, r3
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	409a      	lsls	r2, r3
 800f2ec:	0013      	movs	r3, r2
 800f2ee:	693a      	ldr	r2, [r7, #16]
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	693a      	ldr	r2, [r7, #16]
 800f2f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	685b      	ldr	r3, [r3, #4]
 800f2fe:	2203      	movs	r2, #3
 800f300:	4013      	ands	r3, r2
 800f302:	2b03      	cmp	r3, #3
 800f304:	d017      	beq.n	800f336 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	68db      	ldr	r3, [r3, #12]
 800f30a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	005b      	lsls	r3, r3, #1
 800f310:	2203      	movs	r2, #3
 800f312:	409a      	lsls	r2, r3
 800f314:	0013      	movs	r3, r2
 800f316:	43da      	mvns	r2, r3
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	4013      	ands	r3, r2
 800f31c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	689a      	ldr	r2, [r3, #8]
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	005b      	lsls	r3, r3, #1
 800f326:	409a      	lsls	r2, r3
 800f328:	0013      	movs	r3, r2
 800f32a:	693a      	ldr	r2, [r7, #16]
 800f32c:	4313      	orrs	r3, r2
 800f32e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	693a      	ldr	r2, [r7, #16]
 800f334:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	2203      	movs	r2, #3
 800f33c:	4013      	ands	r3, r2
 800f33e:	2b02      	cmp	r3, #2
 800f340:	d123      	bne.n	800f38a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	08da      	lsrs	r2, r3, #3
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	3208      	adds	r2, #8
 800f34a:	0092      	lsls	r2, r2, #2
 800f34c:	58d3      	ldr	r3, [r2, r3]
 800f34e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	2207      	movs	r2, #7
 800f354:	4013      	ands	r3, r2
 800f356:	009b      	lsls	r3, r3, #2
 800f358:	220f      	movs	r2, #15
 800f35a:	409a      	lsls	r2, r3
 800f35c:	0013      	movs	r3, r2
 800f35e:	43da      	mvns	r2, r3
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	4013      	ands	r3, r2
 800f364:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	691a      	ldr	r2, [r3, #16]
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	2107      	movs	r1, #7
 800f36e:	400b      	ands	r3, r1
 800f370:	009b      	lsls	r3, r3, #2
 800f372:	409a      	lsls	r2, r3
 800f374:	0013      	movs	r3, r2
 800f376:	693a      	ldr	r2, [r7, #16]
 800f378:	4313      	orrs	r3, r2
 800f37a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	08da      	lsrs	r2, r3, #3
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	3208      	adds	r2, #8
 800f384:	0092      	lsls	r2, r2, #2
 800f386:	6939      	ldr	r1, [r7, #16]
 800f388:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	005b      	lsls	r3, r3, #1
 800f394:	2203      	movs	r2, #3
 800f396:	409a      	lsls	r2, r3
 800f398:	0013      	movs	r3, r2
 800f39a:	43da      	mvns	r2, r3
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	4013      	ands	r3, r2
 800f3a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	2203      	movs	r2, #3
 800f3a8:	401a      	ands	r2, r3
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	005b      	lsls	r3, r3, #1
 800f3ae:	409a      	lsls	r2, r3
 800f3b0:	0013      	movs	r3, r2
 800f3b2:	693a      	ldr	r2, [r7, #16]
 800f3b4:	4313      	orrs	r3, r2
 800f3b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	693a      	ldr	r2, [r7, #16]
 800f3bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	685a      	ldr	r2, [r3, #4]
 800f3c2:	23c0      	movs	r3, #192	@ 0xc0
 800f3c4:	029b      	lsls	r3, r3, #10
 800f3c6:	4013      	ands	r3, r2
 800f3c8:	d100      	bne.n	800f3cc <HAL_GPIO_Init+0x17c>
 800f3ca:	e0a0      	b.n	800f50e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f3cc:	4b57      	ldr	r3, [pc, #348]	@ (800f52c <HAL_GPIO_Init+0x2dc>)
 800f3ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f3d0:	4b56      	ldr	r3, [pc, #344]	@ (800f52c <HAL_GPIO_Init+0x2dc>)
 800f3d2:	2101      	movs	r1, #1
 800f3d4:	430a      	orrs	r2, r1
 800f3d6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800f3d8:	4a55      	ldr	r2, [pc, #340]	@ (800f530 <HAL_GPIO_Init+0x2e0>)
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	089b      	lsrs	r3, r3, #2
 800f3de:	3302      	adds	r3, #2
 800f3e0:	009b      	lsls	r3, r3, #2
 800f3e2:	589b      	ldr	r3, [r3, r2]
 800f3e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	2203      	movs	r2, #3
 800f3ea:	4013      	ands	r3, r2
 800f3ec:	009b      	lsls	r3, r3, #2
 800f3ee:	220f      	movs	r2, #15
 800f3f0:	409a      	lsls	r2, r3
 800f3f2:	0013      	movs	r3, r2
 800f3f4:	43da      	mvns	r2, r3
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	4013      	ands	r3, r2
 800f3fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800f3fc:	687a      	ldr	r2, [r7, #4]
 800f3fe:	23a0      	movs	r3, #160	@ 0xa0
 800f400:	05db      	lsls	r3, r3, #23
 800f402:	429a      	cmp	r2, r3
 800f404:	d01f      	beq.n	800f446 <HAL_GPIO_Init+0x1f6>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	4a4a      	ldr	r2, [pc, #296]	@ (800f534 <HAL_GPIO_Init+0x2e4>)
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d019      	beq.n	800f442 <HAL_GPIO_Init+0x1f2>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	4a49      	ldr	r2, [pc, #292]	@ (800f538 <HAL_GPIO_Init+0x2e8>)
 800f412:	4293      	cmp	r3, r2
 800f414:	d013      	beq.n	800f43e <HAL_GPIO_Init+0x1ee>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	4a48      	ldr	r2, [pc, #288]	@ (800f53c <HAL_GPIO_Init+0x2ec>)
 800f41a:	4293      	cmp	r3, r2
 800f41c:	d00d      	beq.n	800f43a <HAL_GPIO_Init+0x1ea>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	4a47      	ldr	r2, [pc, #284]	@ (800f540 <HAL_GPIO_Init+0x2f0>)
 800f422:	4293      	cmp	r3, r2
 800f424:	d007      	beq.n	800f436 <HAL_GPIO_Init+0x1e6>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	4a46      	ldr	r2, [pc, #280]	@ (800f544 <HAL_GPIO_Init+0x2f4>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d101      	bne.n	800f432 <HAL_GPIO_Init+0x1e2>
 800f42e:	2305      	movs	r3, #5
 800f430:	e00a      	b.n	800f448 <HAL_GPIO_Init+0x1f8>
 800f432:	2306      	movs	r3, #6
 800f434:	e008      	b.n	800f448 <HAL_GPIO_Init+0x1f8>
 800f436:	2304      	movs	r3, #4
 800f438:	e006      	b.n	800f448 <HAL_GPIO_Init+0x1f8>
 800f43a:	2303      	movs	r3, #3
 800f43c:	e004      	b.n	800f448 <HAL_GPIO_Init+0x1f8>
 800f43e:	2302      	movs	r3, #2
 800f440:	e002      	b.n	800f448 <HAL_GPIO_Init+0x1f8>
 800f442:	2301      	movs	r3, #1
 800f444:	e000      	b.n	800f448 <HAL_GPIO_Init+0x1f8>
 800f446:	2300      	movs	r3, #0
 800f448:	697a      	ldr	r2, [r7, #20]
 800f44a:	2103      	movs	r1, #3
 800f44c:	400a      	ands	r2, r1
 800f44e:	0092      	lsls	r2, r2, #2
 800f450:	4093      	lsls	r3, r2
 800f452:	693a      	ldr	r2, [r7, #16]
 800f454:	4313      	orrs	r3, r2
 800f456:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800f458:	4935      	ldr	r1, [pc, #212]	@ (800f530 <HAL_GPIO_Init+0x2e0>)
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	089b      	lsrs	r3, r3, #2
 800f45e:	3302      	adds	r3, #2
 800f460:	009b      	lsls	r3, r3, #2
 800f462:	693a      	ldr	r2, [r7, #16]
 800f464:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800f466:	4b38      	ldr	r3, [pc, #224]	@ (800f548 <HAL_GPIO_Init+0x2f8>)
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	43da      	mvns	r2, r3
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	4013      	ands	r3, r2
 800f474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	685a      	ldr	r2, [r3, #4]
 800f47a:	2380      	movs	r3, #128	@ 0x80
 800f47c:	035b      	lsls	r3, r3, #13
 800f47e:	4013      	ands	r3, r2
 800f480:	d003      	beq.n	800f48a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800f482:	693a      	ldr	r2, [r7, #16]
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	4313      	orrs	r3, r2
 800f488:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800f48a:	4b2f      	ldr	r3, [pc, #188]	@ (800f548 <HAL_GPIO_Init+0x2f8>)
 800f48c:	693a      	ldr	r2, [r7, #16]
 800f48e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800f490:	4b2d      	ldr	r3, [pc, #180]	@ (800f548 <HAL_GPIO_Init+0x2f8>)
 800f492:	68db      	ldr	r3, [r3, #12]
 800f494:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	43da      	mvns	r2, r3
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	4013      	ands	r3, r2
 800f49e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	685a      	ldr	r2, [r3, #4]
 800f4a4:	2380      	movs	r3, #128	@ 0x80
 800f4a6:	039b      	lsls	r3, r3, #14
 800f4a8:	4013      	ands	r3, r2
 800f4aa:	d003      	beq.n	800f4b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800f4ac:	693a      	ldr	r2, [r7, #16]
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	4313      	orrs	r3, r2
 800f4b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800f4b4:	4b24      	ldr	r3, [pc, #144]	@ (800f548 <HAL_GPIO_Init+0x2f8>)
 800f4b6:	693a      	ldr	r2, [r7, #16]
 800f4b8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800f4ba:	4b23      	ldr	r3, [pc, #140]	@ (800f548 <HAL_GPIO_Init+0x2f8>)
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	43da      	mvns	r2, r3
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	4013      	ands	r3, r2
 800f4c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	685a      	ldr	r2, [r3, #4]
 800f4ce:	2380      	movs	r3, #128	@ 0x80
 800f4d0:	029b      	lsls	r3, r3, #10
 800f4d2:	4013      	ands	r3, r2
 800f4d4:	d003      	beq.n	800f4de <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800f4d6:	693a      	ldr	r2, [r7, #16]
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800f4de:	4b1a      	ldr	r3, [pc, #104]	@ (800f548 <HAL_GPIO_Init+0x2f8>)
 800f4e0:	693a      	ldr	r2, [r7, #16]
 800f4e2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800f4e4:	4b18      	ldr	r3, [pc, #96]	@ (800f548 <HAL_GPIO_Init+0x2f8>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	43da      	mvns	r2, r3
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	4013      	ands	r3, r2
 800f4f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	685a      	ldr	r2, [r3, #4]
 800f4f8:	2380      	movs	r3, #128	@ 0x80
 800f4fa:	025b      	lsls	r3, r3, #9
 800f4fc:	4013      	ands	r3, r2
 800f4fe:	d003      	beq.n	800f508 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800f500:	693a      	ldr	r2, [r7, #16]
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	4313      	orrs	r3, r2
 800f506:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800f508:	4b0f      	ldr	r3, [pc, #60]	@ (800f548 <HAL_GPIO_Init+0x2f8>)
 800f50a:	693a      	ldr	r2, [r7, #16]
 800f50c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	3301      	adds	r3, #1
 800f512:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	681a      	ldr	r2, [r3, #0]
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	40da      	lsrs	r2, r3
 800f51c:	1e13      	subs	r3, r2, #0
 800f51e:	d000      	beq.n	800f522 <HAL_GPIO_Init+0x2d2>
 800f520:	e6a2      	b.n	800f268 <HAL_GPIO_Init+0x18>
  }
}
 800f522:	46c0      	nop			@ (mov r8, r8)
 800f524:	46c0      	nop			@ (mov r8, r8)
 800f526:	46bd      	mov	sp, r7
 800f528:	b006      	add	sp, #24
 800f52a:	bd80      	pop	{r7, pc}
 800f52c:	40021000 	.word	0x40021000
 800f530:	40010000 	.word	0x40010000
 800f534:	50000400 	.word	0x50000400
 800f538:	50000800 	.word	0x50000800
 800f53c:	50000c00 	.word	0x50000c00
 800f540:	50001000 	.word	0x50001000
 800f544:	50001c00 	.word	0x50001c00
 800f548:	40010400 	.word	0x40010400

0800f54c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b084      	sub	sp, #16
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	000a      	movs	r2, r1
 800f556:	1cbb      	adds	r3, r7, #2
 800f558:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	691b      	ldr	r3, [r3, #16]
 800f55e:	1cba      	adds	r2, r7, #2
 800f560:	8812      	ldrh	r2, [r2, #0]
 800f562:	4013      	ands	r3, r2
 800f564:	d004      	beq.n	800f570 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800f566:	230f      	movs	r3, #15
 800f568:	18fb      	adds	r3, r7, r3
 800f56a:	2201      	movs	r2, #1
 800f56c:	701a      	strb	r2, [r3, #0]
 800f56e:	e003      	b.n	800f578 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f570:	230f      	movs	r3, #15
 800f572:	18fb      	adds	r3, r7, r3
 800f574:	2200      	movs	r2, #0
 800f576:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800f578:	230f      	movs	r3, #15
 800f57a:	18fb      	adds	r3, r7, r3
 800f57c:	781b      	ldrb	r3, [r3, #0]
}
 800f57e:	0018      	movs	r0, r3
 800f580:	46bd      	mov	sp, r7
 800f582:	b004      	add	sp, #16
 800f584:	bd80      	pop	{r7, pc}

0800f586 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f586:	b580      	push	{r7, lr}
 800f588:	b082      	sub	sp, #8
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
 800f58e:	0008      	movs	r0, r1
 800f590:	0011      	movs	r1, r2
 800f592:	1cbb      	adds	r3, r7, #2
 800f594:	1c02      	adds	r2, r0, #0
 800f596:	801a      	strh	r2, [r3, #0]
 800f598:	1c7b      	adds	r3, r7, #1
 800f59a:	1c0a      	adds	r2, r1, #0
 800f59c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f59e:	1c7b      	adds	r3, r7, #1
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d004      	beq.n	800f5b0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f5a6:	1cbb      	adds	r3, r7, #2
 800f5a8:	881a      	ldrh	r2, [r3, #0]
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800f5ae:	e003      	b.n	800f5b8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800f5b0:	1cbb      	adds	r3, r7, #2
 800f5b2:	881a      	ldrh	r2, [r3, #0]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f5b8:	46c0      	nop			@ (mov r8, r8)
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	b002      	add	sp, #8
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	0002      	movs	r2, r0
 800f5c8:	1dbb      	adds	r3, r7, #6
 800f5ca:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f5cc:	4b09      	ldr	r3, [pc, #36]	@ (800f5f4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800f5ce:	695b      	ldr	r3, [r3, #20]
 800f5d0:	1dba      	adds	r2, r7, #6
 800f5d2:	8812      	ldrh	r2, [r2, #0]
 800f5d4:	4013      	ands	r3, r2
 800f5d6:	d008      	beq.n	800f5ea <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f5d8:	4b06      	ldr	r3, [pc, #24]	@ (800f5f4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800f5da:	1dba      	adds	r2, r7, #6
 800f5dc:	8812      	ldrh	r2, [r2, #0]
 800f5de:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f5e0:	1dbb      	adds	r3, r7, #6
 800f5e2:	881b      	ldrh	r3, [r3, #0]
 800f5e4:	0018      	movs	r0, r3
 800f5e6:	f7f8 fcc9 	bl	8007f7c <HAL_GPIO_EXTI_Callback>
  }
}
 800f5ea:	46c0      	nop			@ (mov r8, r8)
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	b002      	add	sp, #8
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	46c0      	nop			@ (mov r8, r8)
 800f5f4:	40010400 	.word	0x40010400

0800f5f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b082      	sub	sp, #8
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d101      	bne.n	800f60a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f606:	2301      	movs	r3, #1
 800f608:	e082      	b.n	800f710 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2241      	movs	r2, #65	@ 0x41
 800f60e:	5c9b      	ldrb	r3, [r3, r2]
 800f610:	b2db      	uxtb	r3, r3
 800f612:	2b00      	cmp	r3, #0
 800f614:	d107      	bne.n	800f626 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2240      	movs	r2, #64	@ 0x40
 800f61a:	2100      	movs	r1, #0
 800f61c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	0018      	movs	r0, r3
 800f622:	f7f8 f82b 	bl	800767c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2241      	movs	r2, #65	@ 0x41
 800f62a:	2124      	movs	r1, #36	@ 0x24
 800f62c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	681a      	ldr	r2, [r3, #0]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	2101      	movs	r1, #1
 800f63a:	438a      	bics	r2, r1
 800f63c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	685a      	ldr	r2, [r3, #4]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	4934      	ldr	r1, [pc, #208]	@ (800f718 <HAL_I2C_Init+0x120>)
 800f648:	400a      	ands	r2, r1
 800f64a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	689a      	ldr	r2, [r3, #8]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4931      	ldr	r1, [pc, #196]	@ (800f71c <HAL_I2C_Init+0x124>)
 800f658:	400a      	ands	r2, r1
 800f65a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	68db      	ldr	r3, [r3, #12]
 800f660:	2b01      	cmp	r3, #1
 800f662:	d108      	bne.n	800f676 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	689a      	ldr	r2, [r3, #8]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	2180      	movs	r1, #128	@ 0x80
 800f66e:	0209      	lsls	r1, r1, #8
 800f670:	430a      	orrs	r2, r1
 800f672:	609a      	str	r2, [r3, #8]
 800f674:	e007      	b.n	800f686 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	689a      	ldr	r2, [r3, #8]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	2184      	movs	r1, #132	@ 0x84
 800f680:	0209      	lsls	r1, r1, #8
 800f682:	430a      	orrs	r2, r1
 800f684:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	68db      	ldr	r3, [r3, #12]
 800f68a:	2b02      	cmp	r3, #2
 800f68c:	d104      	bne.n	800f698 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	2280      	movs	r2, #128	@ 0x80
 800f694:	0112      	lsls	r2, r2, #4
 800f696:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	685a      	ldr	r2, [r3, #4]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	491f      	ldr	r1, [pc, #124]	@ (800f720 <HAL_I2C_Init+0x128>)
 800f6a4:	430a      	orrs	r2, r1
 800f6a6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	68da      	ldr	r2, [r3, #12]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	491a      	ldr	r1, [pc, #104]	@ (800f71c <HAL_I2C_Init+0x124>)
 800f6b4:	400a      	ands	r2, r1
 800f6b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	691a      	ldr	r2, [r3, #16]
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	695b      	ldr	r3, [r3, #20]
 800f6c0:	431a      	orrs	r2, r3
 800f6c2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	699b      	ldr	r3, [r3, #24]
 800f6c8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	430a      	orrs	r2, r1
 800f6d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	69d9      	ldr	r1, [r3, #28]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6a1a      	ldr	r2, [r3, #32]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	430a      	orrs	r2, r1
 800f6e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	2101      	movs	r1, #1
 800f6ee:	430a      	orrs	r2, r1
 800f6f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2241      	movs	r2, #65	@ 0x41
 800f6fc:	2120      	movs	r1, #32
 800f6fe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2200      	movs	r2, #0
 800f704:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2242      	movs	r2, #66	@ 0x42
 800f70a:	2100      	movs	r1, #0
 800f70c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f70e:	2300      	movs	r3, #0
}
 800f710:	0018      	movs	r0, r3
 800f712:	46bd      	mov	sp, r7
 800f714:	b002      	add	sp, #8
 800f716:	bd80      	pop	{r7, pc}
 800f718:	f0ffffff 	.word	0xf0ffffff
 800f71c:	ffff7fff 	.word	0xffff7fff
 800f720:	02008000 	.word	0x02008000

0800f724 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f724:	b590      	push	{r4, r7, lr}
 800f726:	b089      	sub	sp, #36	@ 0x24
 800f728:	af02      	add	r7, sp, #8
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	0008      	movs	r0, r1
 800f72e:	607a      	str	r2, [r7, #4]
 800f730:	0019      	movs	r1, r3
 800f732:	230a      	movs	r3, #10
 800f734:	18fb      	adds	r3, r7, r3
 800f736:	1c02      	adds	r2, r0, #0
 800f738:	801a      	strh	r2, [r3, #0]
 800f73a:	2308      	movs	r3, #8
 800f73c:	18fb      	adds	r3, r7, r3
 800f73e:	1c0a      	adds	r2, r1, #0
 800f740:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2241      	movs	r2, #65	@ 0x41
 800f746:	5c9b      	ldrb	r3, [r3, r2]
 800f748:	b2db      	uxtb	r3, r3
 800f74a:	2b20      	cmp	r3, #32
 800f74c:	d000      	beq.n	800f750 <HAL_I2C_Master_Transmit+0x2c>
 800f74e:	e0e7      	b.n	800f920 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2240      	movs	r2, #64	@ 0x40
 800f754:	5c9b      	ldrb	r3, [r3, r2]
 800f756:	2b01      	cmp	r3, #1
 800f758:	d101      	bne.n	800f75e <HAL_I2C_Master_Transmit+0x3a>
 800f75a:	2302      	movs	r3, #2
 800f75c:	e0e1      	b.n	800f922 <HAL_I2C_Master_Transmit+0x1fe>
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	2240      	movs	r2, #64	@ 0x40
 800f762:	2101      	movs	r1, #1
 800f764:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f766:	f7fe fc93 	bl	800e090 <HAL_GetTick>
 800f76a:	0003      	movs	r3, r0
 800f76c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f76e:	2380      	movs	r3, #128	@ 0x80
 800f770:	0219      	lsls	r1, r3, #8
 800f772:	68f8      	ldr	r0, [r7, #12]
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	9300      	str	r3, [sp, #0]
 800f778:	2319      	movs	r3, #25
 800f77a:	2201      	movs	r2, #1
 800f77c:	f001 ff98 	bl	80116b0 <I2C_WaitOnFlagUntilTimeout>
 800f780:	1e03      	subs	r3, r0, #0
 800f782:	d001      	beq.n	800f788 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800f784:	2301      	movs	r3, #1
 800f786:	e0cc      	b.n	800f922 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2241      	movs	r2, #65	@ 0x41
 800f78c:	2121      	movs	r1, #33	@ 0x21
 800f78e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2242      	movs	r2, #66	@ 0x42
 800f794:	2110      	movs	r1, #16
 800f796:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	2200      	movs	r2, #0
 800f79c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2208      	movs	r2, #8
 800f7a8:	18ba      	adds	r2, r7, r2
 800f7aa:	8812      	ldrh	r2, [r2, #0]
 800f7ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	2bff      	cmp	r3, #255	@ 0xff
 800f7bc:	d911      	bls.n	800f7e2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	22ff      	movs	r2, #255	@ 0xff
 800f7c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7c8:	b2da      	uxtb	r2, r3
 800f7ca:	2380      	movs	r3, #128	@ 0x80
 800f7cc:	045c      	lsls	r4, r3, #17
 800f7ce:	230a      	movs	r3, #10
 800f7d0:	18fb      	adds	r3, r7, r3
 800f7d2:	8819      	ldrh	r1, [r3, #0]
 800f7d4:	68f8      	ldr	r0, [r7, #12]
 800f7d6:	4b55      	ldr	r3, [pc, #340]	@ (800f92c <HAL_I2C_Master_Transmit+0x208>)
 800f7d8:	9300      	str	r3, [sp, #0]
 800f7da:	0023      	movs	r3, r4
 800f7dc:	f002 f9ba 	bl	8011b54 <I2C_TransferConfig>
 800f7e0:	e075      	b.n	800f8ce <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7f0:	b2da      	uxtb	r2, r3
 800f7f2:	2380      	movs	r3, #128	@ 0x80
 800f7f4:	049c      	lsls	r4, r3, #18
 800f7f6:	230a      	movs	r3, #10
 800f7f8:	18fb      	adds	r3, r7, r3
 800f7fa:	8819      	ldrh	r1, [r3, #0]
 800f7fc:	68f8      	ldr	r0, [r7, #12]
 800f7fe:	4b4b      	ldr	r3, [pc, #300]	@ (800f92c <HAL_I2C_Master_Transmit+0x208>)
 800f800:	9300      	str	r3, [sp, #0]
 800f802:	0023      	movs	r3, r4
 800f804:	f002 f9a6 	bl	8011b54 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800f808:	e061      	b.n	800f8ce <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f80a:	697a      	ldr	r2, [r7, #20]
 800f80c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	0018      	movs	r0, r3
 800f812:	f001 ff9b 	bl	801174c <I2C_WaitOnTXISFlagUntilTimeout>
 800f816:	1e03      	subs	r3, r0, #0
 800f818:	d001      	beq.n	800f81e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800f81a:	2301      	movs	r3, #1
 800f81c:	e081      	b.n	800f922 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f822:	781a      	ldrb	r2, [r3, #0]
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f82e:	1c5a      	adds	r2, r3, #1
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f838:	b29b      	uxth	r3, r3
 800f83a:	3b01      	subs	r3, #1
 800f83c:	b29a      	uxth	r2, r3
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f846:	3b01      	subs	r3, #1
 800f848:	b29a      	uxth	r2, r3
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f852:	b29b      	uxth	r3, r3
 800f854:	2b00      	cmp	r3, #0
 800f856:	d03a      	beq.n	800f8ce <HAL_I2C_Master_Transmit+0x1aa>
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d136      	bne.n	800f8ce <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f860:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f862:	68f8      	ldr	r0, [r7, #12]
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	0013      	movs	r3, r2
 800f86a:	2200      	movs	r2, #0
 800f86c:	2180      	movs	r1, #128	@ 0x80
 800f86e:	f001 ff1f 	bl	80116b0 <I2C_WaitOnFlagUntilTimeout>
 800f872:	1e03      	subs	r3, r0, #0
 800f874:	d001      	beq.n	800f87a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800f876:	2301      	movs	r3, #1
 800f878:	e053      	b.n	800f922 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f87e:	b29b      	uxth	r3, r3
 800f880:	2bff      	cmp	r3, #255	@ 0xff
 800f882:	d911      	bls.n	800f8a8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	22ff      	movs	r2, #255	@ 0xff
 800f888:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f88e:	b2da      	uxtb	r2, r3
 800f890:	2380      	movs	r3, #128	@ 0x80
 800f892:	045c      	lsls	r4, r3, #17
 800f894:	230a      	movs	r3, #10
 800f896:	18fb      	adds	r3, r7, r3
 800f898:	8819      	ldrh	r1, [r3, #0]
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	2300      	movs	r3, #0
 800f89e:	9300      	str	r3, [sp, #0]
 800f8a0:	0023      	movs	r3, r4
 800f8a2:	f002 f957 	bl	8011b54 <I2C_TransferConfig>
 800f8a6:	e012      	b.n	800f8ce <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8ac:	b29a      	uxth	r2, r3
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f8b6:	b2da      	uxtb	r2, r3
 800f8b8:	2380      	movs	r3, #128	@ 0x80
 800f8ba:	049c      	lsls	r4, r3, #18
 800f8bc:	230a      	movs	r3, #10
 800f8be:	18fb      	adds	r3, r7, r3
 800f8c0:	8819      	ldrh	r1, [r3, #0]
 800f8c2:	68f8      	ldr	r0, [r7, #12]
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	9300      	str	r3, [sp, #0]
 800f8c8:	0023      	movs	r3, r4
 800f8ca:	f002 f943 	bl	8011b54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d198      	bne.n	800f80a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f8d8:	697a      	ldr	r2, [r7, #20]
 800f8da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	0018      	movs	r0, r3
 800f8e0:	f001 ff7a 	bl	80117d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f8e4:	1e03      	subs	r3, r0, #0
 800f8e6:	d001      	beq.n	800f8ec <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	e01a      	b.n	800f922 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	2220      	movs	r2, #32
 800f8f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	685a      	ldr	r2, [r3, #4]
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	490c      	ldr	r1, [pc, #48]	@ (800f930 <HAL_I2C_Master_Transmit+0x20c>)
 800f900:	400a      	ands	r2, r1
 800f902:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2241      	movs	r2, #65	@ 0x41
 800f908:	2120      	movs	r1, #32
 800f90a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2242      	movs	r2, #66	@ 0x42
 800f910:	2100      	movs	r1, #0
 800f912:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	2240      	movs	r2, #64	@ 0x40
 800f918:	2100      	movs	r1, #0
 800f91a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f91c:	2300      	movs	r3, #0
 800f91e:	e000      	b.n	800f922 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800f920:	2302      	movs	r3, #2
  }
}
 800f922:	0018      	movs	r0, r3
 800f924:	46bd      	mov	sp, r7
 800f926:	b007      	add	sp, #28
 800f928:	bd90      	pop	{r4, r7, pc}
 800f92a:	46c0      	nop			@ (mov r8, r8)
 800f92c:	80002000 	.word	0x80002000
 800f930:	fe00e800 	.word	0xfe00e800

0800f934 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800f934:	b590      	push	{r4, r7, lr}
 800f936:	b089      	sub	sp, #36	@ 0x24
 800f938:	af02      	add	r7, sp, #8
 800f93a:	60f8      	str	r0, [r7, #12]
 800f93c:	0008      	movs	r0, r1
 800f93e:	607a      	str	r2, [r7, #4]
 800f940:	0019      	movs	r1, r3
 800f942:	230a      	movs	r3, #10
 800f944:	18fb      	adds	r3, r7, r3
 800f946:	1c02      	adds	r2, r0, #0
 800f948:	801a      	strh	r2, [r3, #0]
 800f94a:	2308      	movs	r3, #8
 800f94c:	18fb      	adds	r3, r7, r3
 800f94e:	1c0a      	adds	r2, r1, #0
 800f950:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2241      	movs	r2, #65	@ 0x41
 800f956:	5c9b      	ldrb	r3, [r3, r2]
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	2b20      	cmp	r3, #32
 800f95c:	d000      	beq.n	800f960 <HAL_I2C_Master_Receive+0x2c>
 800f95e:	e0e8      	b.n	800fb32 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	2240      	movs	r2, #64	@ 0x40
 800f964:	5c9b      	ldrb	r3, [r3, r2]
 800f966:	2b01      	cmp	r3, #1
 800f968:	d101      	bne.n	800f96e <HAL_I2C_Master_Receive+0x3a>
 800f96a:	2302      	movs	r3, #2
 800f96c:	e0e2      	b.n	800fb34 <HAL_I2C_Master_Receive+0x200>
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2240      	movs	r2, #64	@ 0x40
 800f972:	2101      	movs	r1, #1
 800f974:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f976:	f7fe fb8b 	bl	800e090 <HAL_GetTick>
 800f97a:	0003      	movs	r3, r0
 800f97c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f97e:	2380      	movs	r3, #128	@ 0x80
 800f980:	0219      	lsls	r1, r3, #8
 800f982:	68f8      	ldr	r0, [r7, #12]
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	9300      	str	r3, [sp, #0]
 800f988:	2319      	movs	r3, #25
 800f98a:	2201      	movs	r2, #1
 800f98c:	f001 fe90 	bl	80116b0 <I2C_WaitOnFlagUntilTimeout>
 800f990:	1e03      	subs	r3, r0, #0
 800f992:	d001      	beq.n	800f998 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800f994:	2301      	movs	r3, #1
 800f996:	e0cd      	b.n	800fb34 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	2241      	movs	r2, #65	@ 0x41
 800f99c:	2122      	movs	r1, #34	@ 0x22
 800f99e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2242      	movs	r2, #66	@ 0x42
 800f9a4:	2110      	movs	r1, #16
 800f9a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	687a      	ldr	r2, [r7, #4]
 800f9b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2208      	movs	r2, #8
 800f9b8:	18ba      	adds	r2, r7, r2
 800f9ba:	8812      	ldrh	r2, [r2, #0]
 800f9bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f9c8:	b29b      	uxth	r3, r3
 800f9ca:	2bff      	cmp	r3, #255	@ 0xff
 800f9cc:	d911      	bls.n	800f9f2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	22ff      	movs	r2, #255	@ 0xff
 800f9d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f9d8:	b2da      	uxtb	r2, r3
 800f9da:	2380      	movs	r3, #128	@ 0x80
 800f9dc:	045c      	lsls	r4, r3, #17
 800f9de:	230a      	movs	r3, #10
 800f9e0:	18fb      	adds	r3, r7, r3
 800f9e2:	8819      	ldrh	r1, [r3, #0]
 800f9e4:	68f8      	ldr	r0, [r7, #12]
 800f9e6:	4b55      	ldr	r3, [pc, #340]	@ (800fb3c <HAL_I2C_Master_Receive+0x208>)
 800f9e8:	9300      	str	r3, [sp, #0]
 800f9ea:	0023      	movs	r3, r4
 800f9ec:	f002 f8b2 	bl	8011b54 <I2C_TransferConfig>
 800f9f0:	e076      	b.n	800fae0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f9f6:	b29a      	uxth	r2, r3
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa00:	b2da      	uxtb	r2, r3
 800fa02:	2380      	movs	r3, #128	@ 0x80
 800fa04:	049c      	lsls	r4, r3, #18
 800fa06:	230a      	movs	r3, #10
 800fa08:	18fb      	adds	r3, r7, r3
 800fa0a:	8819      	ldrh	r1, [r3, #0]
 800fa0c:	68f8      	ldr	r0, [r7, #12]
 800fa0e:	4b4b      	ldr	r3, [pc, #300]	@ (800fb3c <HAL_I2C_Master_Receive+0x208>)
 800fa10:	9300      	str	r3, [sp, #0]
 800fa12:	0023      	movs	r3, r4
 800fa14:	f002 f89e 	bl	8011b54 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800fa18:	e062      	b.n	800fae0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800fa1a:	697a      	ldr	r2, [r7, #20]
 800fa1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	0018      	movs	r0, r3
 800fa22:	f001 ff1d 	bl	8011860 <I2C_WaitOnRXNEFlagUntilTimeout>
 800fa26:	1e03      	subs	r3, r0, #0
 800fa28:	d001      	beq.n	800fa2e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	e082      	b.n	800fb34 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa38:	b2d2      	uxtb	r2, r2
 800fa3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa40:	1c5a      	adds	r2, r3, #1
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa4a:	3b01      	subs	r3, #1
 800fa4c:	b29a      	uxth	r2, r3
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa56:	b29b      	uxth	r3, r3
 800fa58:	3b01      	subs	r3, #1
 800fa5a:	b29a      	uxth	r2, r3
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa64:	b29b      	uxth	r3, r3
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d03a      	beq.n	800fae0 <HAL_I2C_Master_Receive+0x1ac>
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d136      	bne.n	800fae0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800fa72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	0013      	movs	r3, r2
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	2180      	movs	r1, #128	@ 0x80
 800fa80:	f001 fe16 	bl	80116b0 <I2C_WaitOnFlagUntilTimeout>
 800fa84:	1e03      	subs	r3, r0, #0
 800fa86:	d001      	beq.n	800fa8c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800fa88:	2301      	movs	r3, #1
 800fa8a:	e053      	b.n	800fb34 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	2bff      	cmp	r3, #255	@ 0xff
 800fa94:	d911      	bls.n	800faba <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	22ff      	movs	r2, #255	@ 0xff
 800fa9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800faa0:	b2da      	uxtb	r2, r3
 800faa2:	2380      	movs	r3, #128	@ 0x80
 800faa4:	045c      	lsls	r4, r3, #17
 800faa6:	230a      	movs	r3, #10
 800faa8:	18fb      	adds	r3, r7, r3
 800faaa:	8819      	ldrh	r1, [r3, #0]
 800faac:	68f8      	ldr	r0, [r7, #12]
 800faae:	2300      	movs	r3, #0
 800fab0:	9300      	str	r3, [sp, #0]
 800fab2:	0023      	movs	r3, r4
 800fab4:	f002 f84e 	bl	8011b54 <I2C_TransferConfig>
 800fab8:	e012      	b.n	800fae0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fabe:	b29a      	uxth	r2, r3
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fac8:	b2da      	uxtb	r2, r3
 800faca:	2380      	movs	r3, #128	@ 0x80
 800facc:	049c      	lsls	r4, r3, #18
 800face:	230a      	movs	r3, #10
 800fad0:	18fb      	adds	r3, r7, r3
 800fad2:	8819      	ldrh	r1, [r3, #0]
 800fad4:	68f8      	ldr	r0, [r7, #12]
 800fad6:	2300      	movs	r3, #0
 800fad8:	9300      	str	r3, [sp, #0]
 800fada:	0023      	movs	r3, r4
 800fadc:	f002 f83a 	bl	8011b54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fae4:	b29b      	uxth	r3, r3
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d197      	bne.n	800fa1a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800faea:	697a      	ldr	r2, [r7, #20]
 800faec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	0018      	movs	r0, r3
 800faf2:	f001 fe71 	bl	80117d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800faf6:	1e03      	subs	r3, r0, #0
 800faf8:	d001      	beq.n	800fafe <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800fafa:	2301      	movs	r3, #1
 800fafc:	e01a      	b.n	800fb34 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	2220      	movs	r2, #32
 800fb04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	685a      	ldr	r2, [r3, #4]
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	490b      	ldr	r1, [pc, #44]	@ (800fb40 <HAL_I2C_Master_Receive+0x20c>)
 800fb12:	400a      	ands	r2, r1
 800fb14:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	2241      	movs	r2, #65	@ 0x41
 800fb1a:	2120      	movs	r1, #32
 800fb1c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2242      	movs	r2, #66	@ 0x42
 800fb22:	2100      	movs	r1, #0
 800fb24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	2240      	movs	r2, #64	@ 0x40
 800fb2a:	2100      	movs	r1, #0
 800fb2c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	e000      	b.n	800fb34 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800fb32:	2302      	movs	r3, #2
  }
}
 800fb34:	0018      	movs	r0, r3
 800fb36:	46bd      	mov	sp, r7
 800fb38:	b007      	add	sp, #28
 800fb3a:	bd90      	pop	{r4, r7, pc}
 800fb3c:	80002400 	.word	0x80002400
 800fb40:	fe00e800 	.word	0xfe00e800

0800fb44 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800fb44:	b5b0      	push	{r4, r5, r7, lr}
 800fb46:	b088      	sub	sp, #32
 800fb48:	af02      	add	r7, sp, #8
 800fb4a:	60f8      	str	r0, [r7, #12]
 800fb4c:	0008      	movs	r0, r1
 800fb4e:	607a      	str	r2, [r7, #4]
 800fb50:	0019      	movs	r1, r3
 800fb52:	230a      	movs	r3, #10
 800fb54:	18fb      	adds	r3, r7, r3
 800fb56:	1c02      	adds	r2, r0, #0
 800fb58:	801a      	strh	r2, [r3, #0]
 800fb5a:	2308      	movs	r3, #8
 800fb5c:	18fb      	adds	r3, r7, r3
 800fb5e:	1c0a      	adds	r2, r1, #0
 800fb60:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	2241      	movs	r2, #65	@ 0x41
 800fb66:	5c9b      	ldrb	r3, [r3, r2]
 800fb68:	b2db      	uxtb	r3, r3
 800fb6a:	2b20      	cmp	r3, #32
 800fb6c:	d000      	beq.n	800fb70 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800fb6e:	e0dd      	b.n	800fd2c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	699a      	ldr	r2, [r3, #24]
 800fb76:	2380      	movs	r3, #128	@ 0x80
 800fb78:	021b      	lsls	r3, r3, #8
 800fb7a:	401a      	ands	r2, r3
 800fb7c:	2380      	movs	r3, #128	@ 0x80
 800fb7e:	021b      	lsls	r3, r3, #8
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d101      	bne.n	800fb88 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800fb84:	2302      	movs	r3, #2
 800fb86:	e0d2      	b.n	800fd2e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2240      	movs	r2, #64	@ 0x40
 800fb8c:	5c9b      	ldrb	r3, [r3, r2]
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	d101      	bne.n	800fb96 <HAL_I2C_Master_Transmit_DMA+0x52>
 800fb92:	2302      	movs	r3, #2
 800fb94:	e0cb      	b.n	800fd2e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	2240      	movs	r2, #64	@ 0x40
 800fb9a:	2101      	movs	r1, #1
 800fb9c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	2241      	movs	r2, #65	@ 0x41
 800fba2:	2121      	movs	r1, #33	@ 0x21
 800fba4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2242      	movs	r2, #66	@ 0x42
 800fbaa:	2110      	movs	r1, #16
 800fbac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	687a      	ldr	r2, [r7, #4]
 800fbb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2208      	movs	r2, #8
 800fbbe:	18ba      	adds	r2, r7, r2
 800fbc0:	8812      	ldrh	r2, [r2, #0]
 800fbc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	4a5c      	ldr	r2, [pc, #368]	@ (800fd38 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800fbc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	4a5b      	ldr	r2, [pc, #364]	@ (800fd3c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800fbce:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	2bff      	cmp	r3, #255	@ 0xff
 800fbd8:	d906      	bls.n	800fbe8 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	22ff      	movs	r2, #255	@ 0xff
 800fbde:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800fbe0:	2380      	movs	r3, #128	@ 0x80
 800fbe2:	045b      	lsls	r3, r3, #17
 800fbe4:	617b      	str	r3, [r7, #20]
 800fbe6:	e007      	b.n	800fbf8 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fbec:	b29a      	uxth	r2, r3
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800fbf2:	2380      	movs	r3, #128	@ 0x80
 800fbf4:	049b      	lsls	r3, r3, #18
 800fbf6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d100      	bne.n	800fc02 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800fc00:	e078      	b.n	800fcf4 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d023      	beq.n	800fc52 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc0e:	4a4c      	ldr	r2, [pc, #304]	@ (800fd40 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800fc10:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc16:	4a4b      	ldr	r2, [pc, #300]	@ (800fd44 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800fc18:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc1e:	2200      	movs	r2, #0
 800fc20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc26:	2200      	movs	r2, #0
 800fc28:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800fc2e:	6879      	ldr	r1, [r7, #4]
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	3328      	adds	r3, #40	@ 0x28
 800fc36:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800fc3c:	2513      	movs	r5, #19
 800fc3e:	197c      	adds	r4, r7, r5
 800fc40:	f7fe ff62 	bl	800eb08 <HAL_DMA_Start_IT>
 800fc44:	0003      	movs	r3, r0
 800fc46:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800fc48:	197b      	adds	r3, r7, r5
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d13d      	bne.n	800fccc <HAL_I2C_Master_Transmit_DMA+0x188>
 800fc50:	e013      	b.n	800fc7a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2241      	movs	r2, #65	@ 0x41
 800fc56:	2120      	movs	r1, #32
 800fc58:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2242      	movs	r2, #66	@ 0x42
 800fc5e:	2100      	movs	r1, #0
 800fc60:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc66:	2280      	movs	r2, #128	@ 0x80
 800fc68:	431a      	orrs	r2, r3
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	2240      	movs	r2, #64	@ 0x40
 800fc72:	2100      	movs	r1, #0
 800fc74:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800fc76:	2301      	movs	r3, #1
 800fc78:	e059      	b.n	800fd2e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc7e:	b2da      	uxtb	r2, r3
 800fc80:	697c      	ldr	r4, [r7, #20]
 800fc82:	230a      	movs	r3, #10
 800fc84:	18fb      	adds	r3, r7, r3
 800fc86:	8819      	ldrh	r1, [r3, #0]
 800fc88:	68f8      	ldr	r0, [r7, #12]
 800fc8a:	4b2f      	ldr	r3, [pc, #188]	@ (800fd48 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800fc8c:	9300      	str	r3, [sp, #0]
 800fc8e:	0023      	movs	r3, r4
 800fc90:	f001 ff60 	bl	8011b54 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc98:	b29a      	uxth	r2, r3
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc9e:	1ad3      	subs	r3, r2, r3
 800fca0:	b29a      	uxth	r2, r3
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	2240      	movs	r2, #64	@ 0x40
 800fcaa:	2100      	movs	r1, #0
 800fcac:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2110      	movs	r1, #16
 800fcb2:	0018      	movs	r0, r3
 800fcb4:	f001 ff88 	bl	8011bc8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	681a      	ldr	r2, [r3, #0]
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	2180      	movs	r1, #128	@ 0x80
 800fcc4:	01c9      	lsls	r1, r1, #7
 800fcc6:	430a      	orrs	r2, r1
 800fcc8:	601a      	str	r2, [r3, #0]
 800fcca:	e02d      	b.n	800fd28 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	2241      	movs	r2, #65	@ 0x41
 800fcd0:	2120      	movs	r1, #32
 800fcd2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	2242      	movs	r2, #66	@ 0x42
 800fcd8:	2100      	movs	r1, #0
 800fcda:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fce0:	2210      	movs	r2, #16
 800fce2:	431a      	orrs	r2, r3
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2240      	movs	r2, #64	@ 0x40
 800fcec:	2100      	movs	r1, #0
 800fcee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	e01c      	b.n	800fd2e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	4a15      	ldr	r2, [pc, #84]	@ (800fd4c <HAL_I2C_Master_Transmit_DMA+0x208>)
 800fcf8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcfe:	b2da      	uxtb	r2, r3
 800fd00:	2380      	movs	r3, #128	@ 0x80
 800fd02:	049c      	lsls	r4, r3, #18
 800fd04:	230a      	movs	r3, #10
 800fd06:	18fb      	adds	r3, r7, r3
 800fd08:	8819      	ldrh	r1, [r3, #0]
 800fd0a:	68f8      	ldr	r0, [r7, #12]
 800fd0c:	4b0e      	ldr	r3, [pc, #56]	@ (800fd48 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800fd0e:	9300      	str	r3, [sp, #0]
 800fd10:	0023      	movs	r3, r4
 800fd12:	f001 ff1f 	bl	8011b54 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2240      	movs	r2, #64	@ 0x40
 800fd1a:	2100      	movs	r1, #0
 800fd1c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	2101      	movs	r1, #1
 800fd22:	0018      	movs	r0, r3
 800fd24:	f001 ff50 	bl	8011bc8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	e000      	b.n	800fd2e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800fd2c:	2302      	movs	r3, #2
  }
}
 800fd2e:	0018      	movs	r0, r3
 800fd30:	46bd      	mov	sp, r7
 800fd32:	b006      	add	sp, #24
 800fd34:	bdb0      	pop	{r4, r5, r7, pc}
 800fd36:	46c0      	nop			@ (mov r8, r8)
 800fd38:	ffff0000 	.word	0xffff0000
 800fd3c:	08010549 	.word	0x08010549
 800fd40:	08011501 	.word	0x08011501
 800fd44:	08011641 	.word	0x08011641
 800fd48:	80002000 	.word	0x80002000
 800fd4c:	080100f5 	.word	0x080100f5

0800fd50 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800fd50:	b5b0      	push	{r4, r5, r7, lr}
 800fd52:	b088      	sub	sp, #32
 800fd54:	af02      	add	r7, sp, #8
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	0008      	movs	r0, r1
 800fd5a:	607a      	str	r2, [r7, #4]
 800fd5c:	0019      	movs	r1, r3
 800fd5e:	230a      	movs	r3, #10
 800fd60:	18fb      	adds	r3, r7, r3
 800fd62:	1c02      	adds	r2, r0, #0
 800fd64:	801a      	strh	r2, [r3, #0]
 800fd66:	2308      	movs	r3, #8
 800fd68:	18fb      	adds	r3, r7, r3
 800fd6a:	1c0a      	adds	r2, r1, #0
 800fd6c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	2241      	movs	r2, #65	@ 0x41
 800fd72:	5c9b      	ldrb	r3, [r3, r2]
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	2b20      	cmp	r3, #32
 800fd78:	d000      	beq.n	800fd7c <HAL_I2C_Master_Receive_DMA+0x2c>
 800fd7a:	e0dd      	b.n	800ff38 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	699a      	ldr	r2, [r3, #24]
 800fd82:	2380      	movs	r3, #128	@ 0x80
 800fd84:	021b      	lsls	r3, r3, #8
 800fd86:	401a      	ands	r2, r3
 800fd88:	2380      	movs	r3, #128	@ 0x80
 800fd8a:	021b      	lsls	r3, r3, #8
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d101      	bne.n	800fd94 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800fd90:	2302      	movs	r3, #2
 800fd92:	e0d2      	b.n	800ff3a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2240      	movs	r2, #64	@ 0x40
 800fd98:	5c9b      	ldrb	r3, [r3, r2]
 800fd9a:	2b01      	cmp	r3, #1
 800fd9c:	d101      	bne.n	800fda2 <HAL_I2C_Master_Receive_DMA+0x52>
 800fd9e:	2302      	movs	r3, #2
 800fda0:	e0cb      	b.n	800ff3a <HAL_I2C_Master_Receive_DMA+0x1ea>
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	2240      	movs	r2, #64	@ 0x40
 800fda6:	2101      	movs	r1, #1
 800fda8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	2241      	movs	r2, #65	@ 0x41
 800fdae:	2122      	movs	r1, #34	@ 0x22
 800fdb0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2242      	movs	r2, #66	@ 0x42
 800fdb6:	2110      	movs	r1, #16
 800fdb8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	687a      	ldr	r2, [r7, #4]
 800fdc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2208      	movs	r2, #8
 800fdca:	18ba      	adds	r2, r7, r2
 800fdcc:	8812      	ldrh	r2, [r2, #0]
 800fdce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	4a5c      	ldr	r2, [pc, #368]	@ (800ff44 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800fdd4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	4a5b      	ldr	r2, [pc, #364]	@ (800ff48 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800fdda:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	2bff      	cmp	r3, #255	@ 0xff
 800fde4:	d906      	bls.n	800fdf4 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	22ff      	movs	r2, #255	@ 0xff
 800fdea:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800fdec:	2380      	movs	r3, #128	@ 0x80
 800fdee:	045b      	lsls	r3, r3, #17
 800fdf0:	617b      	str	r3, [r7, #20]
 800fdf2:	e007      	b.n	800fe04 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fdf8:	b29a      	uxth	r2, r3
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800fdfe:	2380      	movs	r3, #128	@ 0x80
 800fe00:	049b      	lsls	r3, r3, #18
 800fe02:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d100      	bne.n	800fe0e <HAL_I2C_Master_Receive_DMA+0xbe>
 800fe0c:	e078      	b.n	800ff00 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d023      	beq.n	800fe5e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe1a:	4a4c      	ldr	r2, [pc, #304]	@ (800ff4c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800fe1c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe22:	4a4b      	ldr	r2, [pc, #300]	@ (800ff50 <HAL_I2C_Master_Receive_DMA+0x200>)
 800fe24:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe32:	2200      	movs	r2, #0
 800fe34:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	3324      	adds	r3, #36	@ 0x24
 800fe40:	0019      	movs	r1, r3
 800fe42:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800fe48:	2513      	movs	r5, #19
 800fe4a:	197c      	adds	r4, r7, r5
 800fe4c:	f7fe fe5c 	bl	800eb08 <HAL_DMA_Start_IT>
 800fe50:	0003      	movs	r3, r0
 800fe52:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800fe54:	197b      	adds	r3, r7, r5
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d13d      	bne.n	800fed8 <HAL_I2C_Master_Receive_DMA+0x188>
 800fe5c:	e013      	b.n	800fe86 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	2241      	movs	r2, #65	@ 0x41
 800fe62:	2120      	movs	r1, #32
 800fe64:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	2242      	movs	r2, #66	@ 0x42
 800fe6a:	2100      	movs	r1, #0
 800fe6c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe72:	2280      	movs	r2, #128	@ 0x80
 800fe74:	431a      	orrs	r2, r3
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	2240      	movs	r2, #64	@ 0x40
 800fe7e:	2100      	movs	r1, #0
 800fe80:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800fe82:	2301      	movs	r3, #1
 800fe84:	e059      	b.n	800ff3a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fe8a:	b2da      	uxtb	r2, r3
 800fe8c:	697c      	ldr	r4, [r7, #20]
 800fe8e:	230a      	movs	r3, #10
 800fe90:	18fb      	adds	r3, r7, r3
 800fe92:	8819      	ldrh	r1, [r3, #0]
 800fe94:	68f8      	ldr	r0, [r7, #12]
 800fe96:	4b2f      	ldr	r3, [pc, #188]	@ (800ff54 <HAL_I2C_Master_Receive_DMA+0x204>)
 800fe98:	9300      	str	r3, [sp, #0]
 800fe9a:	0023      	movs	r3, r4
 800fe9c:	f001 fe5a 	bl	8011b54 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fea4:	b29a      	uxth	r2, r3
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800feaa:	1ad3      	subs	r3, r2, r3
 800feac:	b29a      	uxth	r2, r3
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2240      	movs	r2, #64	@ 0x40
 800feb6:	2100      	movs	r1, #0
 800feb8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	2110      	movs	r1, #16
 800febe:	0018      	movs	r0, r3
 800fec0:	f001 fe82 	bl	8011bc8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	681a      	ldr	r2, [r3, #0]
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	2180      	movs	r1, #128	@ 0x80
 800fed0:	0209      	lsls	r1, r1, #8
 800fed2:	430a      	orrs	r2, r1
 800fed4:	601a      	str	r2, [r3, #0]
 800fed6:	e02d      	b.n	800ff34 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	2241      	movs	r2, #65	@ 0x41
 800fedc:	2120      	movs	r1, #32
 800fede:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	2242      	movs	r2, #66	@ 0x42
 800fee4:	2100      	movs	r1, #0
 800fee6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800feec:	2210      	movs	r2, #16
 800feee:	431a      	orrs	r2, r3
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	2240      	movs	r2, #64	@ 0x40
 800fef8:	2100      	movs	r1, #0
 800fefa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800fefc:	2301      	movs	r3, #1
 800fefe:	e01c      	b.n	800ff3a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	4a15      	ldr	r2, [pc, #84]	@ (800ff58 <HAL_I2C_Master_Receive_DMA+0x208>)
 800ff04:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff0a:	b2da      	uxtb	r2, r3
 800ff0c:	2380      	movs	r3, #128	@ 0x80
 800ff0e:	049c      	lsls	r4, r3, #18
 800ff10:	230a      	movs	r3, #10
 800ff12:	18fb      	adds	r3, r7, r3
 800ff14:	8819      	ldrh	r1, [r3, #0]
 800ff16:	68f8      	ldr	r0, [r7, #12]
 800ff18:	4b0e      	ldr	r3, [pc, #56]	@ (800ff54 <HAL_I2C_Master_Receive_DMA+0x204>)
 800ff1a:	9300      	str	r3, [sp, #0]
 800ff1c:	0023      	movs	r3, r4
 800ff1e:	f001 fe19 	bl	8011b54 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	2240      	movs	r2, #64	@ 0x40
 800ff26:	2100      	movs	r1, #0
 800ff28:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2101      	movs	r1, #1
 800ff2e:	0018      	movs	r0, r3
 800ff30:	f001 fe4a 	bl	8011bc8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800ff34:	2300      	movs	r3, #0
 800ff36:	e000      	b.n	800ff3a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ff38:	2302      	movs	r3, #2
  }
}
 800ff3a:	0018      	movs	r0, r3
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	b006      	add	sp, #24
 800ff40:	bdb0      	pop	{r4, r5, r7, pc}
 800ff42:	46c0      	nop			@ (mov r8, r8)
 800ff44:	ffff0000 	.word	0xffff0000
 800ff48:	08010549 	.word	0x08010549
 800ff4c:	080115a1 	.word	0x080115a1
 800ff50:	08011641 	.word	0x08011641
 800ff54:	80002400 	.word	0x80002400
 800ff58:	080100f5 	.word	0x080100f5

0800ff5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b084      	sub	sp, #16
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	699b      	ldr	r3, [r3, #24]
 800ff6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d005      	beq.n	800ff88 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff80:	68ba      	ldr	r2, [r7, #8]
 800ff82:	68f9      	ldr	r1, [r7, #12]
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	4798      	blx	r3
  }
}
 800ff88:	46c0      	nop			@ (mov r8, r8)
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	b004      	add	sp, #16
 800ff8e:	bd80      	pop	{r7, pc}

0800ff90 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b086      	sub	sp, #24
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	699b      	ldr	r3, [r3, #24]
 800ff9e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ffa8:	697a      	ldr	r2, [r7, #20]
 800ffaa:	2380      	movs	r3, #128	@ 0x80
 800ffac:	005b      	lsls	r3, r3, #1
 800ffae:	4013      	ands	r3, r2
 800ffb0:	d00e      	beq.n	800ffd0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	2280      	movs	r2, #128	@ 0x80
 800ffb6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ffb8:	d00a      	beq.n	800ffd0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	431a      	orrs	r2, r3
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2280      	movs	r2, #128	@ 0x80
 800ffcc:	0052      	lsls	r2, r2, #1
 800ffce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ffd0:	697a      	ldr	r2, [r7, #20]
 800ffd2:	2380      	movs	r3, #128	@ 0x80
 800ffd4:	00db      	lsls	r3, r3, #3
 800ffd6:	4013      	ands	r3, r2
 800ffd8:	d00e      	beq.n	800fff8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	2280      	movs	r2, #128	@ 0x80
 800ffde:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ffe0:	d00a      	beq.n	800fff8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ffe6:	2208      	movs	r2, #8
 800ffe8:	431a      	orrs	r2, r3
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	2280      	movs	r2, #128	@ 0x80
 800fff4:	00d2      	lsls	r2, r2, #3
 800fff6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800fff8:	697a      	ldr	r2, [r7, #20]
 800fffa:	2380      	movs	r3, #128	@ 0x80
 800fffc:	009b      	lsls	r3, r3, #2
 800fffe:	4013      	ands	r3, r2
 8010000:	d00e      	beq.n	8010020 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	2280      	movs	r2, #128	@ 0x80
 8010006:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010008:	d00a      	beq.n	8010020 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801000e:	2202      	movs	r2, #2
 8010010:	431a      	orrs	r2, r3
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2280      	movs	r2, #128	@ 0x80
 801001c:	0092      	lsls	r2, r2, #2
 801001e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010024:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	220b      	movs	r2, #11
 801002a:	4013      	ands	r3, r2
 801002c:	d005      	beq.n	801003a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 801002e:	68fa      	ldr	r2, [r7, #12]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	0011      	movs	r1, r2
 8010034:	0018      	movs	r0, r3
 8010036:	f001 f915 	bl	8011264 <I2C_ITError>
  }
}
 801003a:	46c0      	nop			@ (mov r8, r8)
 801003c:	46bd      	mov	sp, r7
 801003e:	b006      	add	sp, #24
 8010040:	bd80      	pop	{r7, pc}

08010042 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010042:	b580      	push	{r7, lr}
 8010044:	b082      	sub	sp, #8
 8010046:	af00      	add	r7, sp, #0
 8010048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 801004a:	46c0      	nop			@ (mov r8, r8)
 801004c:	46bd      	mov	sp, r7
 801004e:	b002      	add	sp, #8
 8010050:	bd80      	pop	{r7, pc}

08010052 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010052:	b580      	push	{r7, lr}
 8010054:	b082      	sub	sp, #8
 8010056:	af00      	add	r7, sp, #0
 8010058:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 801005a:	46c0      	nop			@ (mov r8, r8)
 801005c:	46bd      	mov	sp, r7
 801005e:	b002      	add	sp, #8
 8010060:	bd80      	pop	{r7, pc}

08010062 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010062:	b580      	push	{r7, lr}
 8010064:	b082      	sub	sp, #8
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 801006a:	46c0      	nop			@ (mov r8, r8)
 801006c:	46bd      	mov	sp, r7
 801006e:	b002      	add	sp, #8
 8010070:	bd80      	pop	{r7, pc}

08010072 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010072:	b580      	push	{r7, lr}
 8010074:	b082      	sub	sp, #8
 8010076:	af00      	add	r7, sp, #0
 8010078:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 801007a:	46c0      	nop			@ (mov r8, r8)
 801007c:	46bd      	mov	sp, r7
 801007e:	b002      	add	sp, #8
 8010080:	bd80      	pop	{r7, pc}

08010082 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8010082:	b580      	push	{r7, lr}
 8010084:	b082      	sub	sp, #8
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
 801008a:	0008      	movs	r0, r1
 801008c:	0011      	movs	r1, r2
 801008e:	1cfb      	adds	r3, r7, #3
 8010090:	1c02      	adds	r2, r0, #0
 8010092:	701a      	strb	r2, [r3, #0]
 8010094:	003b      	movs	r3, r7
 8010096:	1c0a      	adds	r2, r1, #0
 8010098:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 801009a:	46c0      	nop			@ (mov r8, r8)
 801009c:	46bd      	mov	sp, r7
 801009e:	b002      	add	sp, #8
 80100a0:	bd80      	pop	{r7, pc}

080100a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80100a2:	b580      	push	{r7, lr}
 80100a4:	b082      	sub	sp, #8
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80100aa:	46c0      	nop			@ (mov r8, r8)
 80100ac:	46bd      	mov	sp, r7
 80100ae:	b002      	add	sp, #8
 80100b0:	bd80      	pop	{r7, pc}

080100b2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80100b2:	b580      	push	{r7, lr}
 80100b4:	b082      	sub	sp, #8
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80100ba:	46c0      	nop			@ (mov r8, r8)
 80100bc:	46bd      	mov	sp, r7
 80100be:	b002      	add	sp, #8
 80100c0:	bd80      	pop	{r7, pc}

080100c2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80100c2:	b580      	push	{r7, lr}
 80100c4:	b082      	sub	sp, #8
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80100ca:	46c0      	nop			@ (mov r8, r8)
 80100cc:	46bd      	mov	sp, r7
 80100ce:	b002      	add	sp, #8
 80100d0:	bd80      	pop	{r7, pc}

080100d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80100d2:	b580      	push	{r7, lr}
 80100d4:	b082      	sub	sp, #8
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80100da:	46c0      	nop			@ (mov r8, r8)
 80100dc:	46bd      	mov	sp, r7
 80100de:	b002      	add	sp, #8
 80100e0:	bd80      	pop	{r7, pc}

080100e2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80100e2:	b580      	push	{r7, lr}
 80100e4:	b082      	sub	sp, #8
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80100ea:	46c0      	nop			@ (mov r8, r8)
 80100ec:	46bd      	mov	sp, r7
 80100ee:	b002      	add	sp, #8
 80100f0:	bd80      	pop	{r7, pc}
	...

080100f4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80100f4:	b590      	push	{r4, r7, lr}
 80100f6:	b089      	sub	sp, #36	@ 0x24
 80100f8:	af02      	add	r7, sp, #8
 80100fa:	60f8      	str	r0, [r7, #12]
 80100fc:	60b9      	str	r1, [r7, #8]
 80100fe:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2240      	movs	r2, #64	@ 0x40
 8010108:	5c9b      	ldrb	r3, [r3, r2]
 801010a:	2b01      	cmp	r3, #1
 801010c:	d101      	bne.n	8010112 <I2C_Master_ISR_IT+0x1e>
 801010e:	2302      	movs	r3, #2
 8010110:	e113      	b.n	801033a <I2C_Master_ISR_IT+0x246>
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	2240      	movs	r2, #64	@ 0x40
 8010116:	2101      	movs	r1, #1
 8010118:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	2210      	movs	r2, #16
 801011e:	4013      	ands	r3, r2
 8010120:	d012      	beq.n	8010148 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2210      	movs	r2, #16
 8010126:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010128:	d00e      	beq.n	8010148 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	2210      	movs	r2, #16
 8010130:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010136:	2204      	movs	r2, #4
 8010138:	431a      	orrs	r2, r3
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	0018      	movs	r0, r3
 8010142:	f001 f9ba 	bl	80114ba <I2C_Flush_TXDR>
 8010146:	e0e5      	b.n	8010314 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	2204      	movs	r2, #4
 801014c:	4013      	ands	r3, r2
 801014e:	d021      	beq.n	8010194 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2204      	movs	r2, #4
 8010154:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010156:	d01d      	beq.n	8010194 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	2204      	movs	r2, #4
 801015c:	4393      	bics	r3, r2
 801015e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801016a:	b2d2      	uxtb	r2, r2
 801016c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010172:	1c5a      	adds	r2, r3, #1
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801017c:	3b01      	subs	r3, #1
 801017e:	b29a      	uxth	r2, r3
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010188:	b29b      	uxth	r3, r3
 801018a:	3b01      	subs	r3, #1
 801018c:	b29a      	uxth	r2, r3
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010192:	e0bf      	b.n	8010314 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	2202      	movs	r2, #2
 8010198:	4013      	ands	r3, r2
 801019a:	d01c      	beq.n	80101d6 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2202      	movs	r2, #2
 80101a0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80101a2:	d018      	beq.n	80101d6 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101a8:	781a      	ldrb	r2, [r3, #0]
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101b4:	1c5a      	adds	r2, r3, #1
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80101be:	3b01      	subs	r3, #1
 80101c0:	b29a      	uxth	r2, r3
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80101ca:	b29b      	uxth	r3, r3
 80101cc:	3b01      	subs	r3, #1
 80101ce:	b29a      	uxth	r2, r3
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80101d4:	e09e      	b.n	8010314 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	2280      	movs	r2, #128	@ 0x80
 80101da:	4013      	ands	r3, r2
 80101dc:	d100      	bne.n	80101e0 <I2C_Master_ISR_IT+0xec>
 80101de:	e069      	b.n	80102b4 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2240      	movs	r2, #64	@ 0x40
 80101e4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80101e6:	d065      	beq.n	80102b4 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80101ec:	b29b      	uxth	r3, r3
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d04a      	beq.n	8010288 <I2C_Master_ISR_IT+0x194>
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d146      	bne.n	8010288 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	685b      	ldr	r3, [r3, #4]
 8010200:	b29a      	uxth	r2, r3
 8010202:	2112      	movs	r1, #18
 8010204:	187b      	adds	r3, r7, r1
 8010206:	0592      	lsls	r2, r2, #22
 8010208:	0d92      	lsrs	r2, r2, #22
 801020a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010210:	b29b      	uxth	r3, r3
 8010212:	2bff      	cmp	r3, #255	@ 0xff
 8010214:	d910      	bls.n	8010238 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	22ff      	movs	r2, #255	@ 0xff
 801021a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010220:	b2da      	uxtb	r2, r3
 8010222:	2380      	movs	r3, #128	@ 0x80
 8010224:	045c      	lsls	r4, r3, #17
 8010226:	187b      	adds	r3, r7, r1
 8010228:	8819      	ldrh	r1, [r3, #0]
 801022a:	68f8      	ldr	r0, [r7, #12]
 801022c:	2300      	movs	r3, #0
 801022e:	9300      	str	r3, [sp, #0]
 8010230:	0023      	movs	r3, r4
 8010232:	f001 fc8f 	bl	8011b54 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010236:	e03c      	b.n	80102b2 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801023c:	b29a      	uxth	r2, r3
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010246:	4a3f      	ldr	r2, [pc, #252]	@ (8010344 <I2C_Master_ISR_IT+0x250>)
 8010248:	4293      	cmp	r3, r2
 801024a:	d00e      	beq.n	801026a <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010250:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010256:	2312      	movs	r3, #18
 8010258:	18fb      	adds	r3, r7, r3
 801025a:	8819      	ldrh	r1, [r3, #0]
 801025c:	68f8      	ldr	r0, [r7, #12]
 801025e:	2300      	movs	r3, #0
 8010260:	9300      	str	r3, [sp, #0]
 8010262:	0023      	movs	r3, r4
 8010264:	f001 fc76 	bl	8011b54 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010268:	e023      	b.n	80102b2 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801026e:	b2da      	uxtb	r2, r3
 8010270:	2380      	movs	r3, #128	@ 0x80
 8010272:	049c      	lsls	r4, r3, #18
 8010274:	2312      	movs	r3, #18
 8010276:	18fb      	adds	r3, r7, r3
 8010278:	8819      	ldrh	r1, [r3, #0]
 801027a:	68f8      	ldr	r0, [r7, #12]
 801027c:	2300      	movs	r3, #0
 801027e:	9300      	str	r3, [sp, #0]
 8010280:	0023      	movs	r3, r4
 8010282:	f001 fc67 	bl	8011b54 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010286:	e014      	b.n	80102b2 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	685a      	ldr	r2, [r3, #4]
 801028e:	2380      	movs	r3, #128	@ 0x80
 8010290:	049b      	lsls	r3, r3, #18
 8010292:	401a      	ands	r2, r3
 8010294:	2380      	movs	r3, #128	@ 0x80
 8010296:	049b      	lsls	r3, r3, #18
 8010298:	429a      	cmp	r2, r3
 801029a:	d004      	beq.n	80102a6 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	0018      	movs	r0, r3
 80102a0:	f000 fcf4 	bl	8010c8c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80102a4:	e036      	b.n	8010314 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2140      	movs	r1, #64	@ 0x40
 80102aa:	0018      	movs	r0, r3
 80102ac:	f000 ffda 	bl	8011264 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80102b0:	e030      	b.n	8010314 <I2C_Master_ISR_IT+0x220>
 80102b2:	e02f      	b.n	8010314 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	2240      	movs	r2, #64	@ 0x40
 80102b8:	4013      	ands	r3, r2
 80102ba:	d02b      	beq.n	8010314 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2240      	movs	r2, #64	@ 0x40
 80102c0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80102c2:	d027      	beq.n	8010314 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d11d      	bne.n	801030a <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	685a      	ldr	r2, [r3, #4]
 80102d4:	2380      	movs	r3, #128	@ 0x80
 80102d6:	049b      	lsls	r3, r3, #18
 80102d8:	401a      	ands	r2, r3
 80102da:	2380      	movs	r3, #128	@ 0x80
 80102dc:	049b      	lsls	r3, r3, #18
 80102de:	429a      	cmp	r2, r3
 80102e0:	d018      	beq.n	8010314 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102e6:	4a17      	ldr	r2, [pc, #92]	@ (8010344 <I2C_Master_ISR_IT+0x250>)
 80102e8:	4293      	cmp	r3, r2
 80102ea:	d109      	bne.n	8010300 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	685a      	ldr	r2, [r3, #4]
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	2180      	movs	r1, #128	@ 0x80
 80102f8:	01c9      	lsls	r1, r1, #7
 80102fa:	430a      	orrs	r2, r1
 80102fc:	605a      	str	r2, [r3, #4]
 80102fe:	e009      	b.n	8010314 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	0018      	movs	r0, r3
 8010304:	f000 fcc2 	bl	8010c8c <I2C_ITMasterSeqCplt>
 8010308:	e004      	b.n	8010314 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2140      	movs	r1, #64	@ 0x40
 801030e:	0018      	movs	r0, r3
 8010310:	f000 ffa8 	bl	8011264 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	2220      	movs	r2, #32
 8010318:	4013      	ands	r3, r2
 801031a:	d009      	beq.n	8010330 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2220      	movs	r2, #32
 8010320:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010322:	d005      	beq.n	8010330 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8010324:	697a      	ldr	r2, [r7, #20]
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	0011      	movs	r1, r2
 801032a:	0018      	movs	r0, r3
 801032c:	f000 fd54 	bl	8010dd8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2240      	movs	r2, #64	@ 0x40
 8010334:	2100      	movs	r1, #0
 8010336:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010338:	2300      	movs	r3, #0
}
 801033a:	0018      	movs	r0, r3
 801033c:	46bd      	mov	sp, r7
 801033e:	b007      	add	sp, #28
 8010340:	bd90      	pop	{r4, r7, pc}
 8010342:	46c0      	nop			@ (mov r8, r8)
 8010344:	ffff0000 	.word	0xffff0000

08010348 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b086      	sub	sp, #24
 801034c:	af00      	add	r7, sp, #0
 801034e:	60f8      	str	r0, [r7, #12]
 8010350:	60b9      	str	r1, [r7, #8]
 8010352:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010358:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2240      	movs	r2, #64	@ 0x40
 8010362:	5c9b      	ldrb	r3, [r3, r2]
 8010364:	2b01      	cmp	r3, #1
 8010366:	d101      	bne.n	801036c <I2C_Slave_ISR_IT+0x24>
 8010368:	2302      	movs	r3, #2
 801036a:	e0e6      	b.n	801053a <I2C_Slave_ISR_IT+0x1f2>
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	2240      	movs	r2, #64	@ 0x40
 8010370:	2101      	movs	r1, #1
 8010372:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	2220      	movs	r2, #32
 8010378:	4013      	ands	r3, r2
 801037a:	d009      	beq.n	8010390 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2220      	movs	r2, #32
 8010380:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010382:	d005      	beq.n	8010390 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8010384:	693a      	ldr	r2, [r7, #16]
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	0011      	movs	r1, r2
 801038a:	0018      	movs	r0, r3
 801038c:	f000 fdf2 	bl	8010f74 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	2210      	movs	r2, #16
 8010394:	4013      	ands	r3, r2
 8010396:	d052      	beq.n	801043e <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2210      	movs	r2, #16
 801039c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801039e:	d04e      	beq.n	801043e <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d12d      	bne.n	8010406 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2241      	movs	r2, #65	@ 0x41
 80103ae:	5c9b      	ldrb	r3, [r3, r2]
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	2b28      	cmp	r3, #40	@ 0x28
 80103b4:	d10b      	bne.n	80103ce <I2C_Slave_ISR_IT+0x86>
 80103b6:	697a      	ldr	r2, [r7, #20]
 80103b8:	2380      	movs	r3, #128	@ 0x80
 80103ba:	049b      	lsls	r3, r3, #18
 80103bc:	429a      	cmp	r2, r3
 80103be:	d106      	bne.n	80103ce <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80103c0:	693a      	ldr	r2, [r7, #16]
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	0011      	movs	r1, r2
 80103c6:	0018      	movs	r0, r3
 80103c8:	f000 fef4 	bl	80111b4 <I2C_ITListenCplt>
 80103cc:	e036      	b.n	801043c <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	2241      	movs	r2, #65	@ 0x41
 80103d2:	5c9b      	ldrb	r3, [r3, r2]
 80103d4:	b2db      	uxtb	r3, r3
 80103d6:	2b29      	cmp	r3, #41	@ 0x29
 80103d8:	d110      	bne.n	80103fc <I2C_Slave_ISR_IT+0xb4>
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	4a59      	ldr	r2, [pc, #356]	@ (8010544 <I2C_Slave_ISR_IT+0x1fc>)
 80103de:	4293      	cmp	r3, r2
 80103e0:	d00c      	beq.n	80103fc <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	2210      	movs	r2, #16
 80103e8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	0018      	movs	r0, r3
 80103ee:	f001 f864 	bl	80114ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	0018      	movs	r0, r3
 80103f6:	f000 fc8b 	bl	8010d10 <I2C_ITSlaveSeqCplt>
 80103fa:	e01f      	b.n	801043c <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	2210      	movs	r2, #16
 8010402:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8010404:	e091      	b.n	801052a <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	2210      	movs	r2, #16
 801040c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010412:	2204      	movs	r2, #4
 8010414:	431a      	orrs	r2, r3
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d005      	beq.n	801042c <I2C_Slave_ISR_IT+0xe4>
 8010420:	697a      	ldr	r2, [r7, #20]
 8010422:	2380      	movs	r3, #128	@ 0x80
 8010424:	045b      	lsls	r3, r3, #17
 8010426:	429a      	cmp	r2, r3
 8010428:	d000      	beq.n	801042c <I2C_Slave_ISR_IT+0xe4>
 801042a:	e07e      	b.n	801052a <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	0011      	movs	r1, r2
 8010434:	0018      	movs	r0, r3
 8010436:	f000 ff15 	bl	8011264 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801043a:	e076      	b.n	801052a <I2C_Slave_ISR_IT+0x1e2>
 801043c:	e075      	b.n	801052a <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	2204      	movs	r2, #4
 8010442:	4013      	ands	r3, r2
 8010444:	d02f      	beq.n	80104a6 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2204      	movs	r2, #4
 801044a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801044c:	d02b      	beq.n	80104a6 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010452:	b29b      	uxth	r3, r3
 8010454:	2b00      	cmp	r3, #0
 8010456:	d018      	beq.n	801048a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010462:	b2d2      	uxtb	r2, r2
 8010464:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801046a:	1c5a      	adds	r2, r3, #1
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010474:	3b01      	subs	r3, #1
 8010476:	b29a      	uxth	r2, r3
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010480:	b29b      	uxth	r3, r3
 8010482:	3b01      	subs	r3, #1
 8010484:	b29a      	uxth	r2, r3
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801048e:	b29b      	uxth	r3, r3
 8010490:	2b00      	cmp	r3, #0
 8010492:	d14c      	bne.n	801052e <I2C_Slave_ISR_IT+0x1e6>
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	4a2b      	ldr	r2, [pc, #172]	@ (8010544 <I2C_Slave_ISR_IT+0x1fc>)
 8010498:	4293      	cmp	r3, r2
 801049a:	d048      	beq.n	801052e <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	0018      	movs	r0, r3
 80104a0:	f000 fc36 	bl	8010d10 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80104a4:	e043      	b.n	801052e <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	2208      	movs	r2, #8
 80104aa:	4013      	ands	r3, r2
 80104ac:	d00a      	beq.n	80104c4 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2208      	movs	r2, #8
 80104b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80104b4:	d006      	beq.n	80104c4 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80104b6:	693a      	ldr	r2, [r7, #16]
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	0011      	movs	r1, r2
 80104bc:	0018      	movs	r0, r3
 80104be:	f000 fb41 	bl	8010b44 <I2C_ITAddrCplt>
 80104c2:	e035      	b.n	8010530 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	2202      	movs	r2, #2
 80104c8:	4013      	ands	r3, r2
 80104ca:	d031      	beq.n	8010530 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2202      	movs	r2, #2
 80104d0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80104d2:	d02d      	beq.n	8010530 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104d8:	b29b      	uxth	r3, r3
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d018      	beq.n	8010510 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104e2:	781a      	ldrb	r2, [r3, #0]
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104ee:	1c5a      	adds	r2, r3, #1
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	3b01      	subs	r3, #1
 80104fc:	b29a      	uxth	r2, r3
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010506:	3b01      	subs	r3, #1
 8010508:	b29a      	uxth	r2, r3
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801050e:	e00f      	b.n	8010530 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8010510:	697a      	ldr	r2, [r7, #20]
 8010512:	2380      	movs	r3, #128	@ 0x80
 8010514:	045b      	lsls	r3, r3, #17
 8010516:	429a      	cmp	r2, r3
 8010518:	d002      	beq.n	8010520 <I2C_Slave_ISR_IT+0x1d8>
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d107      	bne.n	8010530 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	0018      	movs	r0, r3
 8010524:	f000 fbf4 	bl	8010d10 <I2C_ITSlaveSeqCplt>
 8010528:	e002      	b.n	8010530 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 801052a:	46c0      	nop			@ (mov r8, r8)
 801052c:	e000      	b.n	8010530 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 801052e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2240      	movs	r2, #64	@ 0x40
 8010534:	2100      	movs	r1, #0
 8010536:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010538:	2300      	movs	r3, #0
}
 801053a:	0018      	movs	r0, r3
 801053c:	46bd      	mov	sp, r7
 801053e:	b006      	add	sp, #24
 8010540:	bd80      	pop	{r7, pc}
 8010542:	46c0      	nop			@ (mov r8, r8)
 8010544:	ffff0000 	.word	0xffff0000

08010548 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8010548:	b590      	push	{r4, r7, lr}
 801054a:	b089      	sub	sp, #36	@ 0x24
 801054c:	af02      	add	r7, sp, #8
 801054e:	60f8      	str	r0, [r7, #12]
 8010550:	60b9      	str	r1, [r7, #8]
 8010552:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	2240      	movs	r2, #64	@ 0x40
 8010558:	5c9b      	ldrb	r3, [r3, r2]
 801055a:	2b01      	cmp	r3, #1
 801055c:	d101      	bne.n	8010562 <I2C_Master_ISR_DMA+0x1a>
 801055e:	2302      	movs	r3, #2
 8010560:	e0e7      	b.n	8010732 <I2C_Master_ISR_DMA+0x1ea>
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2240      	movs	r2, #64	@ 0x40
 8010566:	2101      	movs	r1, #1
 8010568:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	2210      	movs	r2, #16
 801056e:	4013      	ands	r3, r2
 8010570:	d017      	beq.n	80105a2 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2210      	movs	r2, #16
 8010576:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010578:	d013      	beq.n	80105a2 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	2210      	movs	r2, #16
 8010580:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010586:	2204      	movs	r2, #4
 8010588:	431a      	orrs	r2, r3
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	2120      	movs	r1, #32
 8010592:	0018      	movs	r0, r3
 8010594:	f001 fb18 	bl	8011bc8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	0018      	movs	r0, r3
 801059c:	f000 ff8d 	bl	80114ba <I2C_Flush_TXDR>
 80105a0:	e0c2      	b.n	8010728 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	2280      	movs	r2, #128	@ 0x80
 80105a6:	4013      	ands	r3, r2
 80105a8:	d100      	bne.n	80105ac <I2C_Master_ISR_DMA+0x64>
 80105aa:	e07c      	b.n	80106a6 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2240      	movs	r2, #64	@ 0x40
 80105b0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80105b2:	d100      	bne.n	80105b6 <I2C_Master_ISR_DMA+0x6e>
 80105b4:	e077      	b.n	80106a6 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	681a      	ldr	r2, [r3, #0]
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	2140      	movs	r1, #64	@ 0x40
 80105c2:	438a      	bics	r2, r1
 80105c4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105ca:	b29b      	uxth	r3, r3
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d055      	beq.n	801067c <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	b29a      	uxth	r2, r3
 80105d8:	2312      	movs	r3, #18
 80105da:	18fb      	adds	r3, r7, r3
 80105dc:	0592      	lsls	r2, r2, #22
 80105de:	0d92      	lsrs	r2, r2, #22
 80105e0:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105e6:	b29b      	uxth	r3, r3
 80105e8:	2bff      	cmp	r3, #255	@ 0xff
 80105ea:	d906      	bls.n	80105fa <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	22ff      	movs	r2, #255	@ 0xff
 80105f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80105f2:	2380      	movs	r3, #128	@ 0x80
 80105f4:	045b      	lsls	r3, r3, #17
 80105f6:	617b      	str	r3, [r7, #20]
 80105f8:	e010      	b.n	801061c <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105fe:	b29a      	uxth	r2, r3
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010608:	4a4c      	ldr	r2, [pc, #304]	@ (801073c <I2C_Master_ISR_DMA+0x1f4>)
 801060a:	4293      	cmp	r3, r2
 801060c:	d003      	beq.n	8010616 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010612:	617b      	str	r3, [r7, #20]
 8010614:	e002      	b.n	801061c <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8010616:	2380      	movs	r3, #128	@ 0x80
 8010618:	049b      	lsls	r3, r3, #18
 801061a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010620:	b2da      	uxtb	r2, r3
 8010622:	697c      	ldr	r4, [r7, #20]
 8010624:	2312      	movs	r3, #18
 8010626:	18fb      	adds	r3, r7, r3
 8010628:	8819      	ldrh	r1, [r3, #0]
 801062a:	68f8      	ldr	r0, [r7, #12]
 801062c:	2300      	movs	r3, #0
 801062e:	9300      	str	r3, [sp, #0]
 8010630:	0023      	movs	r3, r4
 8010632:	f001 fa8f 	bl	8011b54 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801063a:	b29a      	uxth	r2, r3
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010640:	1ad3      	subs	r3, r2, r3
 8010642:	b29a      	uxth	r2, r3
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	2241      	movs	r2, #65	@ 0x41
 801064c:	5c9b      	ldrb	r3, [r3, r2]
 801064e:	b2db      	uxtb	r3, r3
 8010650:	2b22      	cmp	r3, #34	@ 0x22
 8010652:	d109      	bne.n	8010668 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	681a      	ldr	r2, [r3, #0]
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	2180      	movs	r1, #128	@ 0x80
 8010660:	0209      	lsls	r1, r1, #8
 8010662:	430a      	orrs	r2, r1
 8010664:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010666:	e05f      	b.n	8010728 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	681a      	ldr	r2, [r3, #0]
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	2180      	movs	r1, #128	@ 0x80
 8010674:	01c9      	lsls	r1, r1, #7
 8010676:	430a      	orrs	r2, r1
 8010678:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801067a:	e055      	b.n	8010728 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	685a      	ldr	r2, [r3, #4]
 8010682:	2380      	movs	r3, #128	@ 0x80
 8010684:	049b      	lsls	r3, r3, #18
 8010686:	401a      	ands	r2, r3
 8010688:	2380      	movs	r3, #128	@ 0x80
 801068a:	049b      	lsls	r3, r3, #18
 801068c:	429a      	cmp	r2, r3
 801068e:	d004      	beq.n	801069a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	0018      	movs	r0, r3
 8010694:	f000 fafa 	bl	8010c8c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8010698:	e046      	b.n	8010728 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	2140      	movs	r1, #64	@ 0x40
 801069e:	0018      	movs	r0, r3
 80106a0:	f000 fde0 	bl	8011264 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80106a4:	e040      	b.n	8010728 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	2240      	movs	r2, #64	@ 0x40
 80106aa:	4013      	ands	r3, r2
 80106ac:	d02c      	beq.n	8010708 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2240      	movs	r2, #64	@ 0x40
 80106b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80106b4:	d028      	beq.n	8010708 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106ba:	b29b      	uxth	r3, r3
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d11d      	bne.n	80106fc <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	685a      	ldr	r2, [r3, #4]
 80106c6:	2380      	movs	r3, #128	@ 0x80
 80106c8:	049b      	lsls	r3, r3, #18
 80106ca:	401a      	ands	r2, r3
 80106cc:	2380      	movs	r3, #128	@ 0x80
 80106ce:	049b      	lsls	r3, r3, #18
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d028      	beq.n	8010726 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106d8:	4a18      	ldr	r2, [pc, #96]	@ (801073c <I2C_Master_ISR_DMA+0x1f4>)
 80106da:	4293      	cmp	r3, r2
 80106dc:	d109      	bne.n	80106f2 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	685a      	ldr	r2, [r3, #4]
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2180      	movs	r1, #128	@ 0x80
 80106ea:	01c9      	lsls	r1, r1, #7
 80106ec:	430a      	orrs	r2, r1
 80106ee:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80106f0:	e019      	b.n	8010726 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	0018      	movs	r0, r3
 80106f6:	f000 fac9 	bl	8010c8c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80106fa:	e014      	b.n	8010726 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2140      	movs	r1, #64	@ 0x40
 8010700:	0018      	movs	r0, r3
 8010702:	f000 fdaf 	bl	8011264 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8010706:	e00e      	b.n	8010726 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	2220      	movs	r2, #32
 801070c:	4013      	ands	r3, r2
 801070e:	d00b      	beq.n	8010728 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2220      	movs	r2, #32
 8010714:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010716:	d007      	beq.n	8010728 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8010718:	68ba      	ldr	r2, [r7, #8]
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	0011      	movs	r1, r2
 801071e:	0018      	movs	r0, r3
 8010720:	f000 fb5a 	bl	8010dd8 <I2C_ITMasterCplt>
 8010724:	e000      	b.n	8010728 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8010726:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2240      	movs	r2, #64	@ 0x40
 801072c:	2100      	movs	r1, #0
 801072e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010730:	2300      	movs	r3, #0
}
 8010732:	0018      	movs	r0, r3
 8010734:	46bd      	mov	sp, r7
 8010736:	b007      	add	sp, #28
 8010738:	bd90      	pop	{r4, r7, pc}
 801073a:	46c0      	nop			@ (mov r8, r8)
 801073c:	ffff0000 	.word	0xffff0000

08010740 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8010740:	b590      	push	{r4, r7, lr}
 8010742:	b089      	sub	sp, #36	@ 0x24
 8010744:	af02      	add	r7, sp, #8
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 801074c:	4b88      	ldr	r3, [pc, #544]	@ (8010970 <I2C_Mem_ISR_DMA+0x230>)
 801074e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	2240      	movs	r2, #64	@ 0x40
 8010754:	5c9b      	ldrb	r3, [r3, r2]
 8010756:	2b01      	cmp	r3, #1
 8010758:	d101      	bne.n	801075e <I2C_Mem_ISR_DMA+0x1e>
 801075a:	2302      	movs	r3, #2
 801075c:	e104      	b.n	8010968 <I2C_Mem_ISR_DMA+0x228>
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	2240      	movs	r2, #64	@ 0x40
 8010762:	2101      	movs	r1, #1
 8010764:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	2210      	movs	r2, #16
 801076a:	4013      	ands	r3, r2
 801076c:	d017      	beq.n	801079e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2210      	movs	r2, #16
 8010772:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010774:	d013      	beq.n	801079e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	2210      	movs	r2, #16
 801077c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010782:	2204      	movs	r2, #4
 8010784:	431a      	orrs	r2, r3
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	2120      	movs	r1, #32
 801078e:	0018      	movs	r0, r3
 8010790:	f001 fa1a 	bl	8011bc8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	0018      	movs	r0, r3
 8010798:	f000 fe8f 	bl	80114ba <I2C_Flush_TXDR>
 801079c:	e0df      	b.n	801095e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	2202      	movs	r2, #2
 80107a2:	4013      	ands	r3, r2
 80107a4:	d00d      	beq.n	80107c2 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2202      	movs	r2, #2
 80107aa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80107ac:	d009      	beq.n	80107c2 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	68fa      	ldr	r2, [r7, #12]
 80107b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80107b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	2201      	movs	r2, #1
 80107bc:	4252      	negs	r2, r2
 80107be:	651a      	str	r2, [r3, #80]	@ 0x50
 80107c0:	e0cd      	b.n	801095e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	2280      	movs	r2, #128	@ 0x80
 80107c6:	4013      	ands	r3, r2
 80107c8:	d05e      	beq.n	8010888 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2240      	movs	r2, #64	@ 0x40
 80107ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80107d0:	d05a      	beq.n	8010888 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	2110      	movs	r1, #16
 80107d6:	0018      	movs	r0, r3
 80107d8:	f001 f9f6 	bl	8011bc8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80107e0:	b29b      	uxth	r3, r3
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d04a      	beq.n	801087c <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	2bff      	cmp	r3, #255	@ 0xff
 80107ee:	d910      	bls.n	8010812 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	22ff      	movs	r2, #255	@ 0xff
 80107f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80107fa:	b299      	uxth	r1, r3
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010800:	b2da      	uxtb	r2, r3
 8010802:	2380      	movs	r3, #128	@ 0x80
 8010804:	045b      	lsls	r3, r3, #17
 8010806:	68f8      	ldr	r0, [r7, #12]
 8010808:	2400      	movs	r4, #0
 801080a:	9400      	str	r4, [sp, #0]
 801080c:	f001 f9a2 	bl	8011b54 <I2C_TransferConfig>
 8010810:	e011      	b.n	8010836 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010816:	b29a      	uxth	r2, r3
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010820:	b299      	uxth	r1, r3
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010826:	b2da      	uxtb	r2, r3
 8010828:	2380      	movs	r3, #128	@ 0x80
 801082a:	049b      	lsls	r3, r3, #18
 801082c:	68f8      	ldr	r0, [r7, #12]
 801082e:	2400      	movs	r4, #0
 8010830:	9400      	str	r4, [sp, #0]
 8010832:	f001 f98f 	bl	8011b54 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801083a:	b29a      	uxth	r2, r3
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010840:	1ad3      	subs	r3, r2, r3
 8010842:	b29a      	uxth	r2, r3
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2241      	movs	r2, #65	@ 0x41
 801084c:	5c9b      	ldrb	r3, [r3, r2]
 801084e:	b2db      	uxtb	r3, r3
 8010850:	2b22      	cmp	r3, #34	@ 0x22
 8010852:	d109      	bne.n	8010868 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	2180      	movs	r1, #128	@ 0x80
 8010860:	0209      	lsls	r1, r1, #8
 8010862:	430a      	orrs	r2, r1
 8010864:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010866:	e07a      	b.n	801095e <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	681a      	ldr	r2, [r3, #0]
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	2180      	movs	r1, #128	@ 0x80
 8010874:	01c9      	lsls	r1, r1, #7
 8010876:	430a      	orrs	r2, r1
 8010878:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801087a:	e070      	b.n	801095e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	2140      	movs	r1, #64	@ 0x40
 8010880:	0018      	movs	r0, r3
 8010882:	f000 fcef 	bl	8011264 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8010886:	e06a      	b.n	801095e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	2240      	movs	r2, #64	@ 0x40
 801088c:	4013      	ands	r3, r2
 801088e:	d058      	beq.n	8010942 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2240      	movs	r2, #64	@ 0x40
 8010894:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010896:	d054      	beq.n	8010942 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2241      	movs	r2, #65	@ 0x41
 801089c:	5c9b      	ldrb	r3, [r3, r2]
 801089e:	b2db      	uxtb	r3, r3
 80108a0:	2b22      	cmp	r3, #34	@ 0x22
 80108a2:	d101      	bne.n	80108a8 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 80108a4:	4b33      	ldr	r3, [pc, #204]	@ (8010974 <I2C_Mem_ISR_DMA+0x234>)
 80108a6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	2bff      	cmp	r3, #255	@ 0xff
 80108b0:	d911      	bls.n	80108d6 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	22ff      	movs	r2, #255	@ 0xff
 80108b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80108bc:	b299      	uxth	r1, r3
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108c2:	b2da      	uxtb	r2, r3
 80108c4:	2380      	movs	r3, #128	@ 0x80
 80108c6:	045c      	lsls	r4, r3, #17
 80108c8:	68f8      	ldr	r0, [r7, #12]
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	9300      	str	r3, [sp, #0]
 80108ce:	0023      	movs	r3, r4
 80108d0:	f001 f940 	bl	8011b54 <I2C_TransferConfig>
 80108d4:	e012      	b.n	80108fc <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108da:	b29a      	uxth	r2, r3
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80108e4:	b299      	uxth	r1, r3
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108ea:	b2da      	uxtb	r2, r3
 80108ec:	2380      	movs	r3, #128	@ 0x80
 80108ee:	049c      	lsls	r4, r3, #18
 80108f0:	68f8      	ldr	r0, [r7, #12]
 80108f2:	697b      	ldr	r3, [r7, #20]
 80108f4:	9300      	str	r3, [sp, #0]
 80108f6:	0023      	movs	r3, r4
 80108f8:	f001 f92c 	bl	8011b54 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010900:	b29a      	uxth	r2, r3
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010906:	1ad3      	subs	r3, r2, r3
 8010908:	b29a      	uxth	r2, r3
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	2241      	movs	r2, #65	@ 0x41
 8010912:	5c9b      	ldrb	r3, [r3, r2]
 8010914:	b2db      	uxtb	r3, r3
 8010916:	2b22      	cmp	r3, #34	@ 0x22
 8010918:	d109      	bne.n	801092e <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	681a      	ldr	r2, [r3, #0]
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	2180      	movs	r1, #128	@ 0x80
 8010926:	0209      	lsls	r1, r1, #8
 8010928:	430a      	orrs	r2, r1
 801092a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801092c:	e017      	b.n	801095e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	681a      	ldr	r2, [r3, #0]
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	2180      	movs	r1, #128	@ 0x80
 801093a:	01c9      	lsls	r1, r1, #7
 801093c:	430a      	orrs	r2, r1
 801093e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010940:	e00d      	b.n	801095e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	2220      	movs	r2, #32
 8010946:	4013      	ands	r3, r2
 8010948:	d009      	beq.n	801095e <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2220      	movs	r2, #32
 801094e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010950:	d005      	beq.n	801095e <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8010952:	68ba      	ldr	r2, [r7, #8]
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	0011      	movs	r1, r2
 8010958:	0018      	movs	r0, r3
 801095a:	f000 fa3d 	bl	8010dd8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2240      	movs	r2, #64	@ 0x40
 8010962:	2100      	movs	r1, #0
 8010964:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010966:	2300      	movs	r3, #0
}
 8010968:	0018      	movs	r0, r3
 801096a:	46bd      	mov	sp, r7
 801096c:	b007      	add	sp, #28
 801096e:	bd90      	pop	{r4, r7, pc}
 8010970:	80002000 	.word	0x80002000
 8010974:	80002400 	.word	0x80002400

08010978 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b088      	sub	sp, #32
 801097c:	af00      	add	r7, sp, #0
 801097e:	60f8      	str	r0, [r7, #12]
 8010980:	60b9      	str	r1, [r7, #8]
 8010982:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010988:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 801098a:	2300      	movs	r3, #0
 801098c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	2240      	movs	r2, #64	@ 0x40
 8010992:	5c9b      	ldrb	r3, [r3, r2]
 8010994:	2b01      	cmp	r3, #1
 8010996:	d101      	bne.n	801099c <I2C_Slave_ISR_DMA+0x24>
 8010998:	2302      	movs	r3, #2
 801099a:	e0cd      	b.n	8010b38 <I2C_Slave_ISR_DMA+0x1c0>
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	2240      	movs	r2, #64	@ 0x40
 80109a0:	2101      	movs	r1, #1
 80109a2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	2220      	movs	r2, #32
 80109a8:	4013      	ands	r3, r2
 80109aa:	d009      	beq.n	80109c0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2220      	movs	r2, #32
 80109b0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80109b2:	d005      	beq.n	80109c0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80109b4:	68ba      	ldr	r2, [r7, #8]
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	0011      	movs	r1, r2
 80109ba:	0018      	movs	r0, r3
 80109bc:	f000 fada 	bl	8010f74 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	2210      	movs	r2, #16
 80109c4:	4013      	ands	r3, r2
 80109c6:	d100      	bne.n	80109ca <I2C_Slave_ISR_DMA+0x52>
 80109c8:	e0a3      	b.n	8010b12 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2210      	movs	r2, #16
 80109ce:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80109d0:	d100      	bne.n	80109d4 <I2C_Slave_ISR_DMA+0x5c>
 80109d2:	e09e      	b.n	8010b12 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80109d4:	687a      	ldr	r2, [r7, #4]
 80109d6:	2380      	movs	r3, #128	@ 0x80
 80109d8:	01db      	lsls	r3, r3, #7
 80109da:	4013      	ands	r3, r2
 80109dc:	d105      	bne.n	80109ea <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80109de:	687a      	ldr	r2, [r7, #4]
 80109e0:	2380      	movs	r3, #128	@ 0x80
 80109e2:	021b      	lsls	r3, r3, #8
 80109e4:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80109e6:	d100      	bne.n	80109ea <I2C_Slave_ISR_DMA+0x72>
 80109e8:	e08c      	b.n	8010b04 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d00c      	beq.n	8010a0c <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80109f2:	687a      	ldr	r2, [r7, #4]
 80109f4:	2380      	movs	r3, #128	@ 0x80
 80109f6:	021b      	lsls	r3, r3, #8
 80109f8:	4013      	ands	r3, r2
 80109fa:	d007      	beq.n	8010a0c <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d101      	bne.n	8010a0c <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8010a08:	2301      	movs	r3, #1
 8010a0a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d00c      	beq.n	8010a2e <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8010a14:	687a      	ldr	r2, [r7, #4]
 8010a16:	2380      	movs	r3, #128	@ 0x80
 8010a18:	01db      	lsls	r3, r3, #7
 8010a1a:	4013      	ands	r3, r2
 8010a1c:	d007      	beq.n	8010a2e <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	685b      	ldr	r3, [r3, #4]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d101      	bne.n	8010a2e <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8010a2e:	69fb      	ldr	r3, [r7, #28]
 8010a30:	2b01      	cmp	r3, #1
 8010a32:	d12d      	bne.n	8010a90 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	2241      	movs	r2, #65	@ 0x41
 8010a38:	5c9b      	ldrb	r3, [r3, r2]
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	2b28      	cmp	r3, #40	@ 0x28
 8010a3e:	d10b      	bne.n	8010a58 <I2C_Slave_ISR_DMA+0xe0>
 8010a40:	69ba      	ldr	r2, [r7, #24]
 8010a42:	2380      	movs	r3, #128	@ 0x80
 8010a44:	049b      	lsls	r3, r3, #18
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d106      	bne.n	8010a58 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8010a4a:	68ba      	ldr	r2, [r7, #8]
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	0011      	movs	r1, r2
 8010a50:	0018      	movs	r0, r3
 8010a52:	f000 fbaf 	bl	80111b4 <I2C_ITListenCplt>
 8010a56:	e054      	b.n	8010b02 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	2241      	movs	r2, #65	@ 0x41
 8010a5c:	5c9b      	ldrb	r3, [r3, r2]
 8010a5e:	b2db      	uxtb	r3, r3
 8010a60:	2b29      	cmp	r3, #41	@ 0x29
 8010a62:	d110      	bne.n	8010a86 <I2C_Slave_ISR_DMA+0x10e>
 8010a64:	69bb      	ldr	r3, [r7, #24]
 8010a66:	4a36      	ldr	r2, [pc, #216]	@ (8010b40 <I2C_Slave_ISR_DMA+0x1c8>)
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	d00c      	beq.n	8010a86 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	2210      	movs	r2, #16
 8010a72:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	0018      	movs	r0, r3
 8010a78:	f000 fd1f 	bl	80114ba <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	0018      	movs	r0, r3
 8010a80:	f000 f946 	bl	8010d10 <I2C_ITSlaveSeqCplt>
 8010a84:	e03d      	b.n	8010b02 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	2210      	movs	r2, #16
 8010a8c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8010a8e:	e03e      	b.n	8010b0e <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	2210      	movs	r2, #16
 8010a96:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a9c:	2204      	movs	r2, #4
 8010a9e:	431a      	orrs	r2, r3
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8010aa4:	2317      	movs	r3, #23
 8010aa6:	18fb      	adds	r3, r7, r3
 8010aa8:	68fa      	ldr	r2, [r7, #12]
 8010aaa:	2141      	movs	r1, #65	@ 0x41
 8010aac:	5c52      	ldrb	r2, [r2, r1]
 8010aae:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8010ab0:	69bb      	ldr	r3, [r7, #24]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d004      	beq.n	8010ac0 <I2C_Slave_ISR_DMA+0x148>
 8010ab6:	69ba      	ldr	r2, [r7, #24]
 8010ab8:	2380      	movs	r3, #128	@ 0x80
 8010aba:	045b      	lsls	r3, r3, #17
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d126      	bne.n	8010b0e <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010ac0:	2217      	movs	r2, #23
 8010ac2:	18bb      	adds	r3, r7, r2
 8010ac4:	781b      	ldrb	r3, [r3, #0]
 8010ac6:	2b21      	cmp	r3, #33	@ 0x21
 8010ac8:	d003      	beq.n	8010ad2 <I2C_Slave_ISR_DMA+0x15a>
 8010aca:	18bb      	adds	r3, r7, r2
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	2b29      	cmp	r3, #41	@ 0x29
 8010ad0:	d103      	bne.n	8010ada <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2221      	movs	r2, #33	@ 0x21
 8010ad6:	631a      	str	r2, [r3, #48]	@ 0x30
 8010ad8:	e00b      	b.n	8010af2 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010ada:	2217      	movs	r2, #23
 8010adc:	18bb      	adds	r3, r7, r2
 8010ade:	781b      	ldrb	r3, [r3, #0]
 8010ae0:	2b22      	cmp	r3, #34	@ 0x22
 8010ae2:	d003      	beq.n	8010aec <I2C_Slave_ISR_DMA+0x174>
 8010ae4:	18bb      	adds	r3, r7, r2
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010aea:	d102      	bne.n	8010af2 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2222      	movs	r2, #34	@ 0x22
 8010af0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	0011      	movs	r1, r2
 8010afa:	0018      	movs	r0, r3
 8010afc:	f000 fbb2 	bl	8011264 <I2C_ITError>
      if (treatdmanack == 1U)
 8010b00:	e005      	b.n	8010b0e <I2C_Slave_ISR_DMA+0x196>
 8010b02:	e004      	b.n	8010b0e <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	2210      	movs	r2, #16
 8010b0a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010b0c:	e00f      	b.n	8010b2e <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8010b0e:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010b10:	e00d      	b.n	8010b2e <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	2208      	movs	r2, #8
 8010b16:	4013      	ands	r3, r2
 8010b18:	d009      	beq.n	8010b2e <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2208      	movs	r2, #8
 8010b1e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010b20:	d005      	beq.n	8010b2e <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8010b22:	68ba      	ldr	r2, [r7, #8]
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	0011      	movs	r1, r2
 8010b28:	0018      	movs	r0, r3
 8010b2a:	f000 f80b 	bl	8010b44 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	2240      	movs	r2, #64	@ 0x40
 8010b32:	2100      	movs	r1, #0
 8010b34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010b36:	2300      	movs	r3, #0
}
 8010b38:	0018      	movs	r0, r3
 8010b3a:	46bd      	mov	sp, r7
 8010b3c:	b008      	add	sp, #32
 8010b3e:	bd80      	pop	{r7, pc}
 8010b40:	ffff0000 	.word	0xffff0000

08010b44 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010b44:	b5b0      	push	{r4, r5, r7, lr}
 8010b46:	b084      	sub	sp, #16
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2241      	movs	r2, #65	@ 0x41
 8010b52:	5c9b      	ldrb	r3, [r3, r2]
 8010b54:	b2db      	uxtb	r3, r3
 8010b56:	001a      	movs	r2, r3
 8010b58:	2328      	movs	r3, #40	@ 0x28
 8010b5a:	4013      	ands	r3, r2
 8010b5c:	2b28      	cmp	r3, #40	@ 0x28
 8010b5e:	d000      	beq.n	8010b62 <I2C_ITAddrCplt+0x1e>
 8010b60:	e088      	b.n	8010c74 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	699b      	ldr	r3, [r3, #24]
 8010b68:	0c1b      	lsrs	r3, r3, #16
 8010b6a:	b2da      	uxtb	r2, r3
 8010b6c:	250f      	movs	r5, #15
 8010b6e:	197b      	adds	r3, r7, r5
 8010b70:	2101      	movs	r1, #1
 8010b72:	400a      	ands	r2, r1
 8010b74:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	699b      	ldr	r3, [r3, #24]
 8010b7c:	0c1b      	lsrs	r3, r3, #16
 8010b7e:	b29a      	uxth	r2, r3
 8010b80:	200c      	movs	r0, #12
 8010b82:	183b      	adds	r3, r7, r0
 8010b84:	21fe      	movs	r1, #254	@ 0xfe
 8010b86:	400a      	ands	r2, r1
 8010b88:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	689b      	ldr	r3, [r3, #8]
 8010b90:	b29a      	uxth	r2, r3
 8010b92:	240a      	movs	r4, #10
 8010b94:	193b      	adds	r3, r7, r4
 8010b96:	0592      	lsls	r2, r2, #22
 8010b98:	0d92      	lsrs	r2, r2, #22
 8010b9a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	68db      	ldr	r3, [r3, #12]
 8010ba2:	b29a      	uxth	r2, r3
 8010ba4:	2308      	movs	r3, #8
 8010ba6:	18fb      	adds	r3, r7, r3
 8010ba8:	21fe      	movs	r1, #254	@ 0xfe
 8010baa:	400a      	ands	r2, r1
 8010bac:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	68db      	ldr	r3, [r3, #12]
 8010bb2:	2b02      	cmp	r3, #2
 8010bb4:	d148      	bne.n	8010c48 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8010bb6:	0021      	movs	r1, r4
 8010bb8:	187b      	adds	r3, r7, r1
 8010bba:	881b      	ldrh	r3, [r3, #0]
 8010bbc:	09db      	lsrs	r3, r3, #7
 8010bbe:	b29a      	uxth	r2, r3
 8010bc0:	183b      	adds	r3, r7, r0
 8010bc2:	881b      	ldrh	r3, [r3, #0]
 8010bc4:	4053      	eors	r3, r2
 8010bc6:	b29b      	uxth	r3, r3
 8010bc8:	001a      	movs	r2, r3
 8010bca:	2306      	movs	r3, #6
 8010bcc:	4013      	ands	r3, r2
 8010bce:	d120      	bne.n	8010c12 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8010bd0:	183b      	adds	r3, r7, r0
 8010bd2:	187a      	adds	r2, r7, r1
 8010bd4:	8812      	ldrh	r2, [r2, #0]
 8010bd6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010bdc:	1c5a      	adds	r2, r3, #1
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010be6:	2b02      	cmp	r3, #2
 8010be8:	d14c      	bne.n	8010c84 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2200      	movs	r2, #0
 8010bee:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	2208      	movs	r2, #8
 8010bf6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2240      	movs	r2, #64	@ 0x40
 8010bfc:	2100      	movs	r1, #0
 8010bfe:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010c00:	183b      	adds	r3, r7, r0
 8010c02:	881a      	ldrh	r2, [r3, #0]
 8010c04:	197b      	adds	r3, r7, r5
 8010c06:	7819      	ldrb	r1, [r3, #0]
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	0018      	movs	r0, r3
 8010c0c:	f7ff fa39 	bl	8010082 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8010c10:	e038      	b.n	8010c84 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8010c12:	240c      	movs	r4, #12
 8010c14:	193b      	adds	r3, r7, r4
 8010c16:	2208      	movs	r2, #8
 8010c18:	18ba      	adds	r2, r7, r2
 8010c1a:	8812      	ldrh	r2, [r2, #0]
 8010c1c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010c1e:	2380      	movs	r3, #128	@ 0x80
 8010c20:	021a      	lsls	r2, r3, #8
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	0011      	movs	r1, r2
 8010c26:	0018      	movs	r0, r3
 8010c28:	f001 f85c 	bl	8011ce4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2240      	movs	r2, #64	@ 0x40
 8010c30:	2100      	movs	r1, #0
 8010c32:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010c34:	193b      	adds	r3, r7, r4
 8010c36:	881a      	ldrh	r2, [r3, #0]
 8010c38:	230f      	movs	r3, #15
 8010c3a:	18fb      	adds	r3, r7, r3
 8010c3c:	7819      	ldrb	r1, [r3, #0]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	0018      	movs	r0, r3
 8010c42:	f7ff fa1e 	bl	8010082 <HAL_I2C_AddrCallback>
}
 8010c46:	e01d      	b.n	8010c84 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010c48:	2380      	movs	r3, #128	@ 0x80
 8010c4a:	021a      	lsls	r2, r3, #8
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	0011      	movs	r1, r2
 8010c50:	0018      	movs	r0, r3
 8010c52:	f001 f847 	bl	8011ce4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	2240      	movs	r2, #64	@ 0x40
 8010c5a:	2100      	movs	r1, #0
 8010c5c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010c5e:	230c      	movs	r3, #12
 8010c60:	18fb      	adds	r3, r7, r3
 8010c62:	881a      	ldrh	r2, [r3, #0]
 8010c64:	230f      	movs	r3, #15
 8010c66:	18fb      	adds	r3, r7, r3
 8010c68:	7819      	ldrb	r1, [r3, #0]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	0018      	movs	r0, r3
 8010c6e:	f7ff fa08 	bl	8010082 <HAL_I2C_AddrCallback>
}
 8010c72:	e007      	b.n	8010c84 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	2208      	movs	r2, #8
 8010c7a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2240      	movs	r2, #64	@ 0x40
 8010c80:	2100      	movs	r1, #0
 8010c82:	5499      	strb	r1, [r3, r2]
}
 8010c84:	46c0      	nop			@ (mov r8, r8)
 8010c86:	46bd      	mov	sp, r7
 8010c88:	b004      	add	sp, #16
 8010c8a:	bdb0      	pop	{r4, r5, r7, pc}

08010c8c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b082      	sub	sp, #8
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2242      	movs	r2, #66	@ 0x42
 8010c98:	2100      	movs	r1, #0
 8010c9a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	2241      	movs	r2, #65	@ 0x41
 8010ca0:	5c9b      	ldrb	r3, [r3, r2]
 8010ca2:	b2db      	uxtb	r3, r3
 8010ca4:	2b21      	cmp	r3, #33	@ 0x21
 8010ca6:	d117      	bne.n	8010cd8 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2241      	movs	r2, #65	@ 0x41
 8010cac:	2120      	movs	r1, #32
 8010cae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2211      	movs	r2, #17
 8010cb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2101      	movs	r1, #1
 8010cc0:	0018      	movs	r0, r3
 8010cc2:	f001 f80f 	bl	8011ce4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2240      	movs	r2, #64	@ 0x40
 8010cca:	2100      	movs	r1, #0
 8010ccc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	0018      	movs	r0, r3
 8010cd2:	f7ff f9b6 	bl	8010042 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010cd6:	e016      	b.n	8010d06 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2241      	movs	r2, #65	@ 0x41
 8010cdc:	2120      	movs	r1, #32
 8010cde:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2212      	movs	r2, #18
 8010ce4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	2200      	movs	r2, #0
 8010cea:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2102      	movs	r1, #2
 8010cf0:	0018      	movs	r0, r3
 8010cf2:	f000 fff7 	bl	8011ce4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2240      	movs	r2, #64	@ 0x40
 8010cfa:	2100      	movs	r1, #0
 8010cfc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	0018      	movs	r0, r3
 8010d02:	f7ff f9a6 	bl	8010052 <HAL_I2C_MasterRxCpltCallback>
}
 8010d06:	46c0      	nop			@ (mov r8, r8)
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	b002      	add	sp, #8
 8010d0c:	bd80      	pop	{r7, pc}
	...

08010d10 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b084      	sub	sp, #16
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2242      	movs	r2, #66	@ 0x42
 8010d24:	2100      	movs	r1, #0
 8010d26:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010d28:	68fa      	ldr	r2, [r7, #12]
 8010d2a:	2380      	movs	r3, #128	@ 0x80
 8010d2c:	01db      	lsls	r3, r3, #7
 8010d2e:	4013      	ands	r3, r2
 8010d30:	d008      	beq.n	8010d44 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	681a      	ldr	r2, [r3, #0]
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	4924      	ldr	r1, [pc, #144]	@ (8010dd0 <I2C_ITSlaveSeqCplt+0xc0>)
 8010d3e:	400a      	ands	r2, r1
 8010d40:	601a      	str	r2, [r3, #0]
 8010d42:	e00c      	b.n	8010d5e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010d44:	68fa      	ldr	r2, [r7, #12]
 8010d46:	2380      	movs	r3, #128	@ 0x80
 8010d48:	021b      	lsls	r3, r3, #8
 8010d4a:	4013      	ands	r3, r2
 8010d4c:	d007      	beq.n	8010d5e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	491e      	ldr	r1, [pc, #120]	@ (8010dd4 <I2C_ITSlaveSeqCplt+0xc4>)
 8010d5a:	400a      	ands	r2, r1
 8010d5c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2241      	movs	r2, #65	@ 0x41
 8010d62:	5c9b      	ldrb	r3, [r3, r2]
 8010d64:	b2db      	uxtb	r3, r3
 8010d66:	2b29      	cmp	r3, #41	@ 0x29
 8010d68:	d114      	bne.n	8010d94 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2241      	movs	r2, #65	@ 0x41
 8010d6e:	2128      	movs	r1, #40	@ 0x28
 8010d70:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2221      	movs	r2, #33	@ 0x21
 8010d76:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2101      	movs	r1, #1
 8010d7c:	0018      	movs	r0, r3
 8010d7e:	f000 ffb1 	bl	8011ce4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2240      	movs	r2, #64	@ 0x40
 8010d86:	2100      	movs	r1, #0
 8010d88:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	0018      	movs	r0, r3
 8010d8e:	f7ff f968 	bl	8010062 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010d92:	e019      	b.n	8010dc8 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2241      	movs	r2, #65	@ 0x41
 8010d98:	5c9b      	ldrb	r3, [r3, r2]
 8010d9a:	b2db      	uxtb	r3, r3
 8010d9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d9e:	d113      	bne.n	8010dc8 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2241      	movs	r2, #65	@ 0x41
 8010da4:	2128      	movs	r1, #40	@ 0x28
 8010da6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2222      	movs	r2, #34	@ 0x22
 8010dac:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2102      	movs	r1, #2
 8010db2:	0018      	movs	r0, r3
 8010db4:	f000 ff96 	bl	8011ce4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2240      	movs	r2, #64	@ 0x40
 8010dbc:	2100      	movs	r1, #0
 8010dbe:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	0018      	movs	r0, r3
 8010dc4:	f7ff f955 	bl	8010072 <HAL_I2C_SlaveRxCpltCallback>
}
 8010dc8:	46c0      	nop			@ (mov r8, r8)
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	b004      	add	sp, #16
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	ffffbfff 	.word	0xffffbfff
 8010dd4:	ffff7fff 	.word	0xffff7fff

08010dd8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b086      	sub	sp, #24
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	2220      	movs	r2, #32
 8010dec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2241      	movs	r2, #65	@ 0x41
 8010df2:	5c9b      	ldrb	r3, [r3, r2]
 8010df4:	b2db      	uxtb	r3, r3
 8010df6:	2b21      	cmp	r3, #33	@ 0x21
 8010df8:	d108      	bne.n	8010e0c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2101      	movs	r1, #1
 8010dfe:	0018      	movs	r0, r3
 8010e00:	f000 ff70 	bl	8011ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2211      	movs	r2, #17
 8010e08:	631a      	str	r2, [r3, #48]	@ 0x30
 8010e0a:	e00d      	b.n	8010e28 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2241      	movs	r2, #65	@ 0x41
 8010e10:	5c9b      	ldrb	r3, [r3, r2]
 8010e12:	b2db      	uxtb	r3, r3
 8010e14:	2b22      	cmp	r3, #34	@ 0x22
 8010e16:	d107      	bne.n	8010e28 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2102      	movs	r1, #2
 8010e1c:	0018      	movs	r0, r3
 8010e1e:	f000 ff61 	bl	8011ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2212      	movs	r2, #18
 8010e26:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	685a      	ldr	r2, [r3, #4]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	494e      	ldr	r1, [pc, #312]	@ (8010f6c <I2C_ITMasterCplt+0x194>)
 8010e34:	400a      	ands	r2, r1
 8010e36:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	4a4b      	ldr	r2, [pc, #300]	@ (8010f70 <I2C_ITMasterCplt+0x198>)
 8010e42:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8010e44:	697b      	ldr	r3, [r7, #20]
 8010e46:	2210      	movs	r2, #16
 8010e48:	4013      	ands	r3, r2
 8010e4a:	d009      	beq.n	8010e60 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	2210      	movs	r2, #16
 8010e52:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e58:	2204      	movs	r2, #4
 8010e5a:	431a      	orrs	r2, r3
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2241      	movs	r2, #65	@ 0x41
 8010e64:	5c9b      	ldrb	r3, [r3, r2]
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	2b60      	cmp	r3, #96	@ 0x60
 8010e6a:	d109      	bne.n	8010e80 <I2C_ITMasterCplt+0xa8>
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	2204      	movs	r2, #4
 8010e70:	4013      	ands	r3, r2
 8010e72:	d005      	beq.n	8010e80 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8010e7e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	0018      	movs	r0, r3
 8010e84:	f000 fb19 	bl	80114ba <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e8c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	2241      	movs	r2, #65	@ 0x41
 8010e92:	5c9b      	ldrb	r3, [r3, r2]
 8010e94:	b2db      	uxtb	r3, r3
 8010e96:	2b60      	cmp	r3, #96	@ 0x60
 8010e98:	d002      	beq.n	8010ea0 <I2C_ITMasterCplt+0xc8>
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d007      	beq.n	8010eb0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	0011      	movs	r1, r2
 8010ea8:	0018      	movs	r0, r3
 8010eaa:	f000 f9db 	bl	8011264 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010eae:	e058      	b.n	8010f62 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2241      	movs	r2, #65	@ 0x41
 8010eb4:	5c9b      	ldrb	r3, [r3, r2]
 8010eb6:	b2db      	uxtb	r3, r3
 8010eb8:	2b21      	cmp	r3, #33	@ 0x21
 8010eba:	d126      	bne.n	8010f0a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2241      	movs	r2, #65	@ 0x41
 8010ec0:	2120      	movs	r1, #32
 8010ec2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2242      	movs	r2, #66	@ 0x42
 8010ece:	5c9b      	ldrb	r3, [r3, r2]
 8010ed0:	b2db      	uxtb	r3, r3
 8010ed2:	2b40      	cmp	r3, #64	@ 0x40
 8010ed4:	d10c      	bne.n	8010ef0 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2242      	movs	r2, #66	@ 0x42
 8010eda:	2100      	movs	r1, #0
 8010edc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2240      	movs	r2, #64	@ 0x40
 8010ee2:	2100      	movs	r1, #0
 8010ee4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	0018      	movs	r0, r3
 8010eea:	f7ff f8e2 	bl	80100b2 <HAL_I2C_MemTxCpltCallback>
}
 8010eee:	e038      	b.n	8010f62 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2242      	movs	r2, #66	@ 0x42
 8010ef4:	2100      	movs	r1, #0
 8010ef6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2240      	movs	r2, #64	@ 0x40
 8010efc:	2100      	movs	r1, #0
 8010efe:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	0018      	movs	r0, r3
 8010f04:	f7ff f89d 	bl	8010042 <HAL_I2C_MasterTxCpltCallback>
}
 8010f08:	e02b      	b.n	8010f62 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2241      	movs	r2, #65	@ 0x41
 8010f0e:	5c9b      	ldrb	r3, [r3, r2]
 8010f10:	b2db      	uxtb	r3, r3
 8010f12:	2b22      	cmp	r3, #34	@ 0x22
 8010f14:	d125      	bne.n	8010f62 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2241      	movs	r2, #65	@ 0x41
 8010f1a:	2120      	movs	r1, #32
 8010f1c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2200      	movs	r2, #0
 8010f22:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2242      	movs	r2, #66	@ 0x42
 8010f28:	5c9b      	ldrb	r3, [r3, r2]
 8010f2a:	b2db      	uxtb	r3, r3
 8010f2c:	2b40      	cmp	r3, #64	@ 0x40
 8010f2e:	d10c      	bne.n	8010f4a <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2242      	movs	r2, #66	@ 0x42
 8010f34:	2100      	movs	r1, #0
 8010f36:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	2240      	movs	r2, #64	@ 0x40
 8010f3c:	2100      	movs	r1, #0
 8010f3e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	0018      	movs	r0, r3
 8010f44:	f7ff f8bd 	bl	80100c2 <HAL_I2C_MemRxCpltCallback>
}
 8010f48:	e00b      	b.n	8010f62 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2242      	movs	r2, #66	@ 0x42
 8010f4e:	2100      	movs	r1, #0
 8010f50:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2240      	movs	r2, #64	@ 0x40
 8010f56:	2100      	movs	r1, #0
 8010f58:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	0018      	movs	r0, r3
 8010f5e:	f7ff f878 	bl	8010052 <HAL_I2C_MasterRxCpltCallback>
}
 8010f62:	46c0      	nop			@ (mov r8, r8)
 8010f64:	46bd      	mov	sp, r7
 8010f66:	b006      	add	sp, #24
 8010f68:	bd80      	pop	{r7, pc}
 8010f6a:	46c0      	nop			@ (mov r8, r8)
 8010f6c:	fe00e800 	.word	0xfe00e800
 8010f70:	ffff0000 	.word	0xffff0000

08010f74 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b086      	sub	sp, #24
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
 8010f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8010f86:	683b      	ldr	r3, [r7, #0]
 8010f88:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010f8a:	200f      	movs	r0, #15
 8010f8c:	183b      	adds	r3, r7, r0
 8010f8e:	687a      	ldr	r2, [r7, #4]
 8010f90:	2141      	movs	r1, #65	@ 0x41
 8010f92:	5c52      	ldrb	r2, [r2, r1]
 8010f94:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	2220      	movs	r2, #32
 8010f9c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010f9e:	183b      	adds	r3, r7, r0
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	2b21      	cmp	r3, #33	@ 0x21
 8010fa4:	d003      	beq.n	8010fae <I2C_ITSlaveCplt+0x3a>
 8010fa6:	183b      	adds	r3, r7, r0
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	2b29      	cmp	r3, #41	@ 0x29
 8010fac:	d109      	bne.n	8010fc2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8010fae:	4a7b      	ldr	r2, [pc, #492]	@ (801119c <I2C_ITSlaveCplt+0x228>)
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	0011      	movs	r1, r2
 8010fb4:	0018      	movs	r0, r3
 8010fb6:	f000 fe95 	bl	8011ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2221      	movs	r2, #33	@ 0x21
 8010fbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8010fc0:	e011      	b.n	8010fe6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010fc2:	220f      	movs	r2, #15
 8010fc4:	18bb      	adds	r3, r7, r2
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	2b22      	cmp	r3, #34	@ 0x22
 8010fca:	d003      	beq.n	8010fd4 <I2C_ITSlaveCplt+0x60>
 8010fcc:	18bb      	adds	r3, r7, r2
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8010fd2:	d108      	bne.n	8010fe6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8010fd4:	4a72      	ldr	r2, [pc, #456]	@ (80111a0 <I2C_ITSlaveCplt+0x22c>)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	0011      	movs	r1, r2
 8010fda:	0018      	movs	r0, r3
 8010fdc:	f000 fe82 	bl	8011ce4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2222      	movs	r2, #34	@ 0x22
 8010fe4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	685a      	ldr	r2, [r3, #4]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	2180      	movs	r1, #128	@ 0x80
 8010ff2:	0209      	lsls	r1, r1, #8
 8010ff4:	430a      	orrs	r2, r1
 8010ff6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	685a      	ldr	r2, [r3, #4]
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	4968      	ldr	r1, [pc, #416]	@ (80111a4 <I2C_ITSlaveCplt+0x230>)
 8011004:	400a      	ands	r2, r1
 8011006:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	0018      	movs	r0, r3
 801100c:	f000 fa55 	bl	80114ba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011010:	693a      	ldr	r2, [r7, #16]
 8011012:	2380      	movs	r3, #128	@ 0x80
 8011014:	01db      	lsls	r3, r3, #7
 8011016:	4013      	ands	r3, r2
 8011018:	d013      	beq.n	8011042 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	681a      	ldr	r2, [r3, #0]
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	4960      	ldr	r1, [pc, #384]	@ (80111a8 <I2C_ITSlaveCplt+0x234>)
 8011026:	400a      	ands	r2, r1
 8011028:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801102e:	2b00      	cmp	r3, #0
 8011030:	d01f      	beq.n	8011072 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	685b      	ldr	r3, [r3, #4]
 801103a:	b29a      	uxth	r2, r3
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011040:	e017      	b.n	8011072 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011042:	693a      	ldr	r2, [r7, #16]
 8011044:	2380      	movs	r3, #128	@ 0x80
 8011046:	021b      	lsls	r3, r3, #8
 8011048:	4013      	ands	r3, r2
 801104a:	d012      	beq.n	8011072 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	681a      	ldr	r2, [r3, #0]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	4955      	ldr	r1, [pc, #340]	@ (80111ac <I2C_ITSlaveCplt+0x238>)
 8011058:	400a      	ands	r2, r1
 801105a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011060:	2b00      	cmp	r3, #0
 8011062:	d006      	beq.n	8011072 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	b29a      	uxth	r2, r3
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	2204      	movs	r2, #4
 8011076:	4013      	ands	r3, r2
 8011078:	d020      	beq.n	80110bc <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	2204      	movs	r2, #4
 801107e:	4393      	bics	r3, r2
 8011080:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801108c:	b2d2      	uxtb	r2, r2
 801108e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011094:	1c5a      	adds	r2, r3, #1
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d00c      	beq.n	80110bc <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110a6:	3b01      	subs	r3, #1
 80110a8:	b29a      	uxth	r2, r3
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	3b01      	subs	r3, #1
 80110b6:	b29a      	uxth	r2, r3
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80110c0:	b29b      	uxth	r3, r3
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d005      	beq.n	80110d2 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110ca:	2204      	movs	r2, #4
 80110cc:	431a      	orrs	r2, r3
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2242      	movs	r2, #66	@ 0x42
 80110d6:	2100      	movs	r1, #0
 80110d8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2200      	movs	r2, #0
 80110de:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d013      	beq.n	8011110 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	0011      	movs	r1, r2
 80110f0:	0018      	movs	r0, r3
 80110f2:	f000 f8b7 	bl	8011264 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	2241      	movs	r2, #65	@ 0x41
 80110fa:	5c9b      	ldrb	r3, [r3, r2]
 80110fc:	b2db      	uxtb	r3, r3
 80110fe:	2b28      	cmp	r3, #40	@ 0x28
 8011100:	d147      	bne.n	8011192 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8011102:	697a      	ldr	r2, [r7, #20]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	0011      	movs	r1, r2
 8011108:	0018      	movs	r0, r3
 801110a:	f000 f853 	bl	80111b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801110e:	e040      	b.n	8011192 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011114:	4a26      	ldr	r2, [pc, #152]	@ (80111b0 <I2C_ITSlaveCplt+0x23c>)
 8011116:	4293      	cmp	r3, r2
 8011118:	d016      	beq.n	8011148 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	0018      	movs	r0, r3
 801111e:	f7ff fdf7 	bl	8010d10 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	4a22      	ldr	r2, [pc, #136]	@ (80111b0 <I2C_ITSlaveCplt+0x23c>)
 8011126:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2241      	movs	r2, #65	@ 0x41
 801112c:	2120      	movs	r1, #32
 801112e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2200      	movs	r2, #0
 8011134:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2240      	movs	r2, #64	@ 0x40
 801113a:	2100      	movs	r1, #0
 801113c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	0018      	movs	r0, r3
 8011142:	f7fe ffae 	bl	80100a2 <HAL_I2C_ListenCpltCallback>
}
 8011146:	e024      	b.n	8011192 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2241      	movs	r2, #65	@ 0x41
 801114c:	5c9b      	ldrb	r3, [r3, r2]
 801114e:	b2db      	uxtb	r3, r3
 8011150:	2b22      	cmp	r3, #34	@ 0x22
 8011152:	d10f      	bne.n	8011174 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2241      	movs	r2, #65	@ 0x41
 8011158:	2120      	movs	r1, #32
 801115a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2200      	movs	r2, #0
 8011160:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2240      	movs	r2, #64	@ 0x40
 8011166:	2100      	movs	r1, #0
 8011168:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	0018      	movs	r0, r3
 801116e:	f7fe ff80 	bl	8010072 <HAL_I2C_SlaveRxCpltCallback>
}
 8011172:	e00e      	b.n	8011192 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2241      	movs	r2, #65	@ 0x41
 8011178:	2120      	movs	r1, #32
 801117a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2200      	movs	r2, #0
 8011180:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2240      	movs	r2, #64	@ 0x40
 8011186:	2100      	movs	r1, #0
 8011188:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	0018      	movs	r0, r3
 801118e:	f7fe ff68 	bl	8010062 <HAL_I2C_SlaveTxCpltCallback>
}
 8011192:	46c0      	nop			@ (mov r8, r8)
 8011194:	46bd      	mov	sp, r7
 8011196:	b006      	add	sp, #24
 8011198:	bd80      	pop	{r7, pc}
 801119a:	46c0      	nop			@ (mov r8, r8)
 801119c:	00008001 	.word	0x00008001
 80111a0:	00008002 	.word	0x00008002
 80111a4:	fe00e800 	.word	0xfe00e800
 80111a8:	ffffbfff 	.word	0xffffbfff
 80111ac:	ffff7fff 	.word	0xffff7fff
 80111b0:	ffff0000 	.word	0xffff0000

080111b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
 80111bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	4a26      	ldr	r2, [pc, #152]	@ (801125c <I2C_ITListenCplt+0xa8>)
 80111c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2200      	movs	r2, #0
 80111c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2241      	movs	r2, #65	@ 0x41
 80111ce:	2120      	movs	r1, #32
 80111d0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2242      	movs	r2, #66	@ 0x42
 80111d6:	2100      	movs	r1, #0
 80111d8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2200      	movs	r2, #0
 80111de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	2204      	movs	r2, #4
 80111e4:	4013      	ands	r3, r2
 80111e6:	d022      	beq.n	801122e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111f2:	b2d2      	uxtb	r2, r2
 80111f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111fa:	1c5a      	adds	r2, r3, #1
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011204:	2b00      	cmp	r3, #0
 8011206:	d012      	beq.n	801122e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801120c:	3b01      	subs	r3, #1
 801120e:	b29a      	uxth	r2, r3
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011218:	b29b      	uxth	r3, r3
 801121a:	3b01      	subs	r3, #1
 801121c:	b29a      	uxth	r2, r3
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011226:	2204      	movs	r2, #4
 8011228:	431a      	orrs	r2, r3
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 801122e:	4a0c      	ldr	r2, [pc, #48]	@ (8011260 <I2C_ITListenCplt+0xac>)
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	0011      	movs	r1, r2
 8011234:	0018      	movs	r0, r3
 8011236:	f000 fd55 	bl	8011ce4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	2210      	movs	r2, #16
 8011240:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2240      	movs	r2, #64	@ 0x40
 8011246:	2100      	movs	r1, #0
 8011248:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	0018      	movs	r0, r3
 801124e:	f7fe ff28 	bl	80100a2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8011252:	46c0      	nop			@ (mov r8, r8)
 8011254:	46bd      	mov	sp, r7
 8011256:	b002      	add	sp, #8
 8011258:	bd80      	pop	{r7, pc}
 801125a:	46c0      	nop			@ (mov r8, r8)
 801125c:	ffff0000 	.word	0xffff0000
 8011260:	00008003 	.word	0x00008003

08011264 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b084      	sub	sp, #16
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801126e:	200f      	movs	r0, #15
 8011270:	183b      	adds	r3, r7, r0
 8011272:	687a      	ldr	r2, [r7, #4]
 8011274:	2141      	movs	r1, #65	@ 0x41
 8011276:	5c52      	ldrb	r2, [r2, r1]
 8011278:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2242      	movs	r2, #66	@ 0x42
 801127e:	2100      	movs	r1, #0
 8011280:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	4a72      	ldr	r2, [pc, #456]	@ (8011450 <I2C_ITError+0x1ec>)
 8011286:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2200      	movs	r2, #0
 801128c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	431a      	orrs	r2, r3
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801129a:	183b      	adds	r3, r7, r0
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	2b28      	cmp	r3, #40	@ 0x28
 80112a0:	d007      	beq.n	80112b2 <I2C_ITError+0x4e>
 80112a2:	183b      	adds	r3, r7, r0
 80112a4:	781b      	ldrb	r3, [r3, #0]
 80112a6:	2b29      	cmp	r3, #41	@ 0x29
 80112a8:	d003      	beq.n	80112b2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80112aa:	183b      	adds	r3, r7, r0
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80112b0:	d10c      	bne.n	80112cc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	2103      	movs	r1, #3
 80112b6:	0018      	movs	r0, r3
 80112b8:	f000 fd14 	bl	8011ce4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2241      	movs	r2, #65	@ 0x41
 80112c0:	2128      	movs	r1, #40	@ 0x28
 80112c2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	4a63      	ldr	r2, [pc, #396]	@ (8011454 <I2C_ITError+0x1f0>)
 80112c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80112ca:	e032      	b.n	8011332 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80112cc:	4a62      	ldr	r2, [pc, #392]	@ (8011458 <I2C_ITError+0x1f4>)
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	0011      	movs	r1, r2
 80112d2:	0018      	movs	r0, r3
 80112d4:	f000 fd06 	bl	8011ce4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	0018      	movs	r0, r3
 80112dc:	f000 f8ed 	bl	80114ba <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2241      	movs	r2, #65	@ 0x41
 80112e4:	5c9b      	ldrb	r3, [r3, r2]
 80112e6:	b2db      	uxtb	r3, r3
 80112e8:	2b60      	cmp	r3, #96	@ 0x60
 80112ea:	d01f      	beq.n	801132c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	2241      	movs	r2, #65	@ 0x41
 80112f0:	2120      	movs	r1, #32
 80112f2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	699b      	ldr	r3, [r3, #24]
 80112fa:	2220      	movs	r2, #32
 80112fc:	4013      	ands	r3, r2
 80112fe:	2b20      	cmp	r3, #32
 8011300:	d114      	bne.n	801132c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	699b      	ldr	r3, [r3, #24]
 8011308:	2210      	movs	r2, #16
 801130a:	4013      	ands	r3, r2
 801130c:	2b10      	cmp	r3, #16
 801130e:	d109      	bne.n	8011324 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	2210      	movs	r2, #16
 8011316:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801131c:	2204      	movs	r2, #4
 801131e:	431a      	orrs	r2, r3
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	2220      	movs	r2, #32
 801132a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2200      	movs	r2, #0
 8011330:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011336:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801133c:	2b00      	cmp	r3, #0
 801133e:	d03b      	beq.n	80113b8 <I2C_ITError+0x154>
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	2b11      	cmp	r3, #17
 8011344:	d002      	beq.n	801134c <I2C_ITError+0xe8>
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	2b21      	cmp	r3, #33	@ 0x21
 801134a:	d135      	bne.n	80113b8 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	681a      	ldr	r2, [r3, #0]
 8011352:	2380      	movs	r3, #128	@ 0x80
 8011354:	01db      	lsls	r3, r3, #7
 8011356:	401a      	ands	r2, r3
 8011358:	2380      	movs	r3, #128	@ 0x80
 801135a:	01db      	lsls	r3, r3, #7
 801135c:	429a      	cmp	r2, r3
 801135e:	d107      	bne.n	8011370 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	681a      	ldr	r2, [r3, #0]
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	493c      	ldr	r1, [pc, #240]	@ (801145c <I2C_ITError+0x1f8>)
 801136c:	400a      	ands	r2, r1
 801136e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011374:	0018      	movs	r0, r3
 8011376:	f7fd fd62 	bl	800ee3e <HAL_DMA_GetState>
 801137a:	0003      	movs	r3, r0
 801137c:	2b01      	cmp	r3, #1
 801137e:	d016      	beq.n	80113ae <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011384:	4a36      	ldr	r2, [pc, #216]	@ (8011460 <I2C_ITError+0x1fc>)
 8011386:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2240      	movs	r2, #64	@ 0x40
 801138c:	2100      	movs	r1, #0
 801138e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011394:	0018      	movs	r0, r3
 8011396:	f7fd fc5d 	bl	800ec54 <HAL_DMA_Abort_IT>
 801139a:	1e03      	subs	r3, r0, #0
 801139c:	d051      	beq.n	8011442 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113a8:	0018      	movs	r0, r3
 80113aa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80113ac:	e049      	b.n	8011442 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	0018      	movs	r0, r3
 80113b2:	f000 f859 	bl	8011468 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80113b6:	e044      	b.n	8011442 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d03b      	beq.n	8011438 <I2C_ITError+0x1d4>
 80113c0:	68bb      	ldr	r3, [r7, #8]
 80113c2:	2b12      	cmp	r3, #18
 80113c4:	d002      	beq.n	80113cc <I2C_ITError+0x168>
 80113c6:	68bb      	ldr	r3, [r7, #8]
 80113c8:	2b22      	cmp	r3, #34	@ 0x22
 80113ca:	d135      	bne.n	8011438 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	681a      	ldr	r2, [r3, #0]
 80113d2:	2380      	movs	r3, #128	@ 0x80
 80113d4:	021b      	lsls	r3, r3, #8
 80113d6:	401a      	ands	r2, r3
 80113d8:	2380      	movs	r3, #128	@ 0x80
 80113da:	021b      	lsls	r3, r3, #8
 80113dc:	429a      	cmp	r2, r3
 80113de:	d107      	bne.n	80113f0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	681a      	ldr	r2, [r3, #0]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	491e      	ldr	r1, [pc, #120]	@ (8011464 <I2C_ITError+0x200>)
 80113ec:	400a      	ands	r2, r1
 80113ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80113f4:	0018      	movs	r0, r3
 80113f6:	f7fd fd22 	bl	800ee3e <HAL_DMA_GetState>
 80113fa:	0003      	movs	r3, r0
 80113fc:	2b01      	cmp	r3, #1
 80113fe:	d016      	beq.n	801142e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011404:	4a16      	ldr	r2, [pc, #88]	@ (8011460 <I2C_ITError+0x1fc>)
 8011406:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2240      	movs	r2, #64	@ 0x40
 801140c:	2100      	movs	r1, #0
 801140e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011414:	0018      	movs	r0, r3
 8011416:	f7fd fc1d 	bl	800ec54 <HAL_DMA_Abort_IT>
 801141a:	1e03      	subs	r3, r0, #0
 801141c:	d013      	beq.n	8011446 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011422:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011428:	0018      	movs	r0, r3
 801142a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801142c:	e00b      	b.n	8011446 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	0018      	movs	r0, r3
 8011432:	f000 f819 	bl	8011468 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011436:	e006      	b.n	8011446 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	0018      	movs	r0, r3
 801143c:	f000 f814 	bl	8011468 <I2C_TreatErrorCallback>
  }
}
 8011440:	e002      	b.n	8011448 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011442:	46c0      	nop			@ (mov r8, r8)
 8011444:	e000      	b.n	8011448 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8011446:	46c0      	nop			@ (mov r8, r8)
}
 8011448:	46c0      	nop			@ (mov r8, r8)
 801144a:	46bd      	mov	sp, r7
 801144c:	b004      	add	sp, #16
 801144e:	bd80      	pop	{r7, pc}
 8011450:	ffff0000 	.word	0xffff0000
 8011454:	08010349 	.word	0x08010349
 8011458:	00008003 	.word	0x00008003
 801145c:	ffffbfff 	.word	0xffffbfff
 8011460:	08011673 	.word	0x08011673
 8011464:	ffff7fff 	.word	0xffff7fff

08011468 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2241      	movs	r2, #65	@ 0x41
 8011474:	5c9b      	ldrb	r3, [r3, r2]
 8011476:	b2db      	uxtb	r3, r3
 8011478:	2b60      	cmp	r3, #96	@ 0x60
 801147a:	d10f      	bne.n	801149c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2241      	movs	r2, #65	@ 0x41
 8011480:	2120      	movs	r1, #32
 8011482:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2200      	movs	r2, #0
 8011488:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2240      	movs	r2, #64	@ 0x40
 801148e:	2100      	movs	r1, #0
 8011490:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	0018      	movs	r0, r3
 8011496:	f7fe fe24 	bl	80100e2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801149a:	e00a      	b.n	80114b2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	2200      	movs	r2, #0
 80114a0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2240      	movs	r2, #64	@ 0x40
 80114a6:	2100      	movs	r1, #0
 80114a8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	0018      	movs	r0, r3
 80114ae:	f7fe fe10 	bl	80100d2 <HAL_I2C_ErrorCallback>
}
 80114b2:	46c0      	nop			@ (mov r8, r8)
 80114b4:	46bd      	mov	sp, r7
 80114b6:	b002      	add	sp, #8
 80114b8:	bd80      	pop	{r7, pc}

080114ba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80114ba:	b580      	push	{r7, lr}
 80114bc:	b082      	sub	sp, #8
 80114be:	af00      	add	r7, sp, #0
 80114c0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	699b      	ldr	r3, [r3, #24]
 80114c8:	2202      	movs	r2, #2
 80114ca:	4013      	ands	r3, r2
 80114cc:	2b02      	cmp	r3, #2
 80114ce:	d103      	bne.n	80114d8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	2200      	movs	r2, #0
 80114d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	699b      	ldr	r3, [r3, #24]
 80114de:	2201      	movs	r2, #1
 80114e0:	4013      	ands	r3, r2
 80114e2:	2b01      	cmp	r3, #1
 80114e4:	d007      	beq.n	80114f6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	699a      	ldr	r2, [r3, #24]
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	2101      	movs	r1, #1
 80114f2:	430a      	orrs	r2, r1
 80114f4:	619a      	str	r2, [r3, #24]
  }
}
 80114f6:	46c0      	nop			@ (mov r8, r8)
 80114f8:	46bd      	mov	sp, r7
 80114fa:	b002      	add	sp, #8
 80114fc:	bd80      	pop	{r7, pc}
	...

08011500 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b084      	sub	sp, #16
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801150c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	681a      	ldr	r2, [r3, #0]
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	4920      	ldr	r1, [pc, #128]	@ (801159c <I2C_DMAMasterTransmitCplt+0x9c>)
 801151a:	400a      	ands	r2, r1
 801151c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011522:	b29b      	uxth	r3, r3
 8011524:	2b00      	cmp	r3, #0
 8011526:	d105      	bne.n	8011534 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	2120      	movs	r1, #32
 801152c:	0018      	movs	r0, r3
 801152e:	f000 fb4b 	bl	8011bc8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8011532:	e02e      	b.n	8011592 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011538:	68fa      	ldr	r2, [r7, #12]
 801153a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801153c:	189a      	adds	r2, r3, r2
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011546:	b29b      	uxth	r3, r3
 8011548:	2bff      	cmp	r3, #255	@ 0xff
 801154a:	d903      	bls.n	8011554 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	22ff      	movs	r2, #255	@ 0xff
 8011550:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011552:	e004      	b.n	801155e <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011558:	b29a      	uxth	r2, r3
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011566:	0019      	movs	r1, r3
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	3328      	adds	r3, #40	@ 0x28
 801156e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8011574:	f7fd fac8 	bl	800eb08 <HAL_DMA_Start_IT>
 8011578:	1e03      	subs	r3, r0, #0
 801157a:	d005      	beq.n	8011588 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	2110      	movs	r1, #16
 8011580:	0018      	movs	r0, r3
 8011582:	f7ff fe6f 	bl	8011264 <I2C_ITError>
}
 8011586:	e004      	b.n	8011592 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2140      	movs	r1, #64	@ 0x40
 801158c:	0018      	movs	r0, r3
 801158e:	f000 fb1b 	bl	8011bc8 <I2C_Enable_IRQ>
}
 8011592:	46c0      	nop			@ (mov r8, r8)
 8011594:	46bd      	mov	sp, r7
 8011596:	b004      	add	sp, #16
 8011598:	bd80      	pop	{r7, pc}
 801159a:	46c0      	nop			@ (mov r8, r8)
 801159c:	ffffbfff 	.word	0xffffbfff

080115a0 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b084      	sub	sp, #16
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115ac:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	681a      	ldr	r2, [r3, #0]
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	4920      	ldr	r1, [pc, #128]	@ (801163c <I2C_DMAMasterReceiveCplt+0x9c>)
 80115ba:	400a      	ands	r2, r1
 80115bc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d105      	bne.n	80115d4 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	2120      	movs	r1, #32
 80115cc:	0018      	movs	r0, r3
 80115ce:	f000 fafb 	bl	8011bc8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80115d2:	e02e      	b.n	8011632 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115d8:	68fa      	ldr	r2, [r7, #12]
 80115da:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80115dc:	189a      	adds	r2, r3, r2
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115e6:	b29b      	uxth	r3, r3
 80115e8:	2bff      	cmp	r3, #255	@ 0xff
 80115ea:	d903      	bls.n	80115f4 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	22ff      	movs	r2, #255	@ 0xff
 80115f0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80115f2:	e004      	b.n	80115fe <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80115f8:	b29a      	uxth	r2, r3
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	3324      	adds	r3, #36	@ 0x24
 8011608:	0019      	movs	r1, r3
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801160e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8011614:	f7fd fa78 	bl	800eb08 <HAL_DMA_Start_IT>
 8011618:	1e03      	subs	r3, r0, #0
 801161a:	d005      	beq.n	8011628 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	2110      	movs	r1, #16
 8011620:	0018      	movs	r0, r3
 8011622:	f7ff fe1f 	bl	8011264 <I2C_ITError>
}
 8011626:	e004      	b.n	8011632 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	2140      	movs	r1, #64	@ 0x40
 801162c:	0018      	movs	r0, r3
 801162e:	f000 facb 	bl	8011bc8 <I2C_Enable_IRQ>
}
 8011632:	46c0      	nop			@ (mov r8, r8)
 8011634:	46bd      	mov	sp, r7
 8011636:	b004      	add	sp, #16
 8011638:	bd80      	pop	{r7, pc}
 801163a:	46c0      	nop			@ (mov r8, r8)
 801163c:	ffff7fff 	.word	0xffff7fff

08011640 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b084      	sub	sp, #16
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801164c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	685a      	ldr	r2, [r3, #4]
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	2180      	movs	r1, #128	@ 0x80
 801165a:	0209      	lsls	r1, r1, #8
 801165c:	430a      	orrs	r2, r1
 801165e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	2110      	movs	r1, #16
 8011664:	0018      	movs	r0, r3
 8011666:	f7ff fdfd 	bl	8011264 <I2C_ITError>
}
 801166a:	46c0      	nop			@ (mov r8, r8)
 801166c:	46bd      	mov	sp, r7
 801166e:	b004      	add	sp, #16
 8011670:	bd80      	pop	{r7, pc}

08011672 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8011672:	b580      	push	{r7, lr}
 8011674:	b084      	sub	sp, #16
 8011676:	af00      	add	r7, sp, #0
 8011678:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801167e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011684:	2b00      	cmp	r3, #0
 8011686:	d003      	beq.n	8011690 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801168c:	2200      	movs	r2, #0
 801168e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011694:	2b00      	cmp	r3, #0
 8011696:	d003      	beq.n	80116a0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801169c:	2200      	movs	r2, #0
 801169e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	0018      	movs	r0, r3
 80116a4:	f7ff fee0 	bl	8011468 <I2C_TreatErrorCallback>
}
 80116a8:	46c0      	nop			@ (mov r8, r8)
 80116aa:	46bd      	mov	sp, r7
 80116ac:	b004      	add	sp, #16
 80116ae:	bd80      	pop	{r7, pc}

080116b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b084      	sub	sp, #16
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	60f8      	str	r0, [r7, #12]
 80116b8:	60b9      	str	r1, [r7, #8]
 80116ba:	603b      	str	r3, [r7, #0]
 80116bc:	1dfb      	adds	r3, r7, #7
 80116be:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80116c0:	e030      	b.n	8011724 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	3301      	adds	r3, #1
 80116c6:	d02d      	beq.n	8011724 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80116c8:	f7fc fce2 	bl	800e090 <HAL_GetTick>
 80116cc:	0002      	movs	r2, r0
 80116ce:	69bb      	ldr	r3, [r7, #24]
 80116d0:	1ad3      	subs	r3, r2, r3
 80116d2:	683a      	ldr	r2, [r7, #0]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d302      	bcc.n	80116de <I2C_WaitOnFlagUntilTimeout+0x2e>
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d122      	bne.n	8011724 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	699b      	ldr	r3, [r3, #24]
 80116e4:	68ba      	ldr	r2, [r7, #8]
 80116e6:	4013      	ands	r3, r2
 80116e8:	68ba      	ldr	r2, [r7, #8]
 80116ea:	1ad3      	subs	r3, r2, r3
 80116ec:	425a      	negs	r2, r3
 80116ee:	4153      	adcs	r3, r2
 80116f0:	b2db      	uxtb	r3, r3
 80116f2:	001a      	movs	r2, r3
 80116f4:	1dfb      	adds	r3, r7, #7
 80116f6:	781b      	ldrb	r3, [r3, #0]
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d113      	bne.n	8011724 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011700:	2220      	movs	r2, #32
 8011702:	431a      	orrs	r2, r3
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	2241      	movs	r2, #65	@ 0x41
 801170c:	2120      	movs	r1, #32
 801170e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	2242      	movs	r2, #66	@ 0x42
 8011714:	2100      	movs	r1, #0
 8011716:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	2240      	movs	r2, #64	@ 0x40
 801171c:	2100      	movs	r1, #0
 801171e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8011720:	2301      	movs	r3, #1
 8011722:	e00f      	b.n	8011744 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	699b      	ldr	r3, [r3, #24]
 801172a:	68ba      	ldr	r2, [r7, #8]
 801172c:	4013      	ands	r3, r2
 801172e:	68ba      	ldr	r2, [r7, #8]
 8011730:	1ad3      	subs	r3, r2, r3
 8011732:	425a      	negs	r2, r3
 8011734:	4153      	adcs	r3, r2
 8011736:	b2db      	uxtb	r3, r3
 8011738:	001a      	movs	r2, r3
 801173a:	1dfb      	adds	r3, r7, #7
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	429a      	cmp	r2, r3
 8011740:	d0bf      	beq.n	80116c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011742:	2300      	movs	r3, #0
}
 8011744:	0018      	movs	r0, r3
 8011746:	46bd      	mov	sp, r7
 8011748:	b004      	add	sp, #16
 801174a:	bd80      	pop	{r7, pc}

0801174c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b084      	sub	sp, #16
 8011750:	af00      	add	r7, sp, #0
 8011752:	60f8      	str	r0, [r7, #12]
 8011754:	60b9      	str	r1, [r7, #8]
 8011756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011758:	e032      	b.n	80117c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801175a:	687a      	ldr	r2, [r7, #4]
 801175c:	68b9      	ldr	r1, [r7, #8]
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	0018      	movs	r0, r3
 8011762:	f000 f8ff 	bl	8011964 <I2C_IsErrorOccurred>
 8011766:	1e03      	subs	r3, r0, #0
 8011768:	d001      	beq.n	801176e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801176a:	2301      	movs	r3, #1
 801176c:	e030      	b.n	80117d0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	3301      	adds	r3, #1
 8011772:	d025      	beq.n	80117c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011774:	f7fc fc8c 	bl	800e090 <HAL_GetTick>
 8011778:	0002      	movs	r2, r0
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	1ad3      	subs	r3, r2, r3
 801177e:	68ba      	ldr	r2, [r7, #8]
 8011780:	429a      	cmp	r2, r3
 8011782:	d302      	bcc.n	801178a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d11a      	bne.n	80117c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	699b      	ldr	r3, [r3, #24]
 8011790:	2202      	movs	r2, #2
 8011792:	4013      	ands	r3, r2
 8011794:	2b02      	cmp	r3, #2
 8011796:	d013      	beq.n	80117c0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801179c:	2220      	movs	r2, #32
 801179e:	431a      	orrs	r2, r3
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	2241      	movs	r2, #65	@ 0x41
 80117a8:	2120      	movs	r1, #32
 80117aa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	2242      	movs	r2, #66	@ 0x42
 80117b0:	2100      	movs	r1, #0
 80117b2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	2240      	movs	r2, #64	@ 0x40
 80117b8:	2100      	movs	r1, #0
 80117ba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80117bc:	2301      	movs	r3, #1
 80117be:	e007      	b.n	80117d0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	699b      	ldr	r3, [r3, #24]
 80117c6:	2202      	movs	r2, #2
 80117c8:	4013      	ands	r3, r2
 80117ca:	2b02      	cmp	r3, #2
 80117cc:	d1c5      	bne.n	801175a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80117ce:	2300      	movs	r3, #0
}
 80117d0:	0018      	movs	r0, r3
 80117d2:	46bd      	mov	sp, r7
 80117d4:	b004      	add	sp, #16
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b084      	sub	sp, #16
 80117dc:	af00      	add	r7, sp, #0
 80117de:	60f8      	str	r0, [r7, #12]
 80117e0:	60b9      	str	r1, [r7, #8]
 80117e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80117e4:	e02f      	b.n	8011846 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80117e6:	687a      	ldr	r2, [r7, #4]
 80117e8:	68b9      	ldr	r1, [r7, #8]
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	0018      	movs	r0, r3
 80117ee:	f000 f8b9 	bl	8011964 <I2C_IsErrorOccurred>
 80117f2:	1e03      	subs	r3, r0, #0
 80117f4:	d001      	beq.n	80117fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80117f6:	2301      	movs	r3, #1
 80117f8:	e02d      	b.n	8011856 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80117fa:	f7fc fc49 	bl	800e090 <HAL_GetTick>
 80117fe:	0002      	movs	r2, r0
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	1ad3      	subs	r3, r2, r3
 8011804:	68ba      	ldr	r2, [r7, #8]
 8011806:	429a      	cmp	r2, r3
 8011808:	d302      	bcc.n	8011810 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801180a:	68bb      	ldr	r3, [r7, #8]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d11a      	bne.n	8011846 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	699b      	ldr	r3, [r3, #24]
 8011816:	2220      	movs	r2, #32
 8011818:	4013      	ands	r3, r2
 801181a:	2b20      	cmp	r3, #32
 801181c:	d013      	beq.n	8011846 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011822:	2220      	movs	r2, #32
 8011824:	431a      	orrs	r2, r3
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	2241      	movs	r2, #65	@ 0x41
 801182e:	2120      	movs	r1, #32
 8011830:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	2242      	movs	r2, #66	@ 0x42
 8011836:	2100      	movs	r1, #0
 8011838:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	2240      	movs	r2, #64	@ 0x40
 801183e:	2100      	movs	r1, #0
 8011840:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011842:	2301      	movs	r3, #1
 8011844:	e007      	b.n	8011856 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	699b      	ldr	r3, [r3, #24]
 801184c:	2220      	movs	r2, #32
 801184e:	4013      	ands	r3, r2
 8011850:	2b20      	cmp	r3, #32
 8011852:	d1c8      	bne.n	80117e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011854:	2300      	movs	r3, #0
}
 8011856:	0018      	movs	r0, r3
 8011858:	46bd      	mov	sp, r7
 801185a:	b004      	add	sp, #16
 801185c:	bd80      	pop	{r7, pc}
	...

08011860 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b084      	sub	sp, #16
 8011864:	af00      	add	r7, sp, #0
 8011866:	60f8      	str	r0, [r7, #12]
 8011868:	60b9      	str	r1, [r7, #8]
 801186a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801186c:	e06b      	b.n	8011946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801186e:	687a      	ldr	r2, [r7, #4]
 8011870:	68b9      	ldr	r1, [r7, #8]
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	0018      	movs	r0, r3
 8011876:	f000 f875 	bl	8011964 <I2C_IsErrorOccurred>
 801187a:	1e03      	subs	r3, r0, #0
 801187c:	d001      	beq.n	8011882 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801187e:	2301      	movs	r3, #1
 8011880:	e069      	b.n	8011956 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	699b      	ldr	r3, [r3, #24]
 8011888:	2220      	movs	r2, #32
 801188a:	4013      	ands	r3, r2
 801188c:	2b20      	cmp	r3, #32
 801188e:	d138      	bne.n	8011902 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	699b      	ldr	r3, [r3, #24]
 8011896:	2204      	movs	r2, #4
 8011898:	4013      	ands	r3, r2
 801189a:	2b04      	cmp	r3, #4
 801189c:	d105      	bne.n	80118aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d001      	beq.n	80118aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80118a6:	2300      	movs	r3, #0
 80118a8:	e055      	b.n	8011956 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	699b      	ldr	r3, [r3, #24]
 80118b0:	2210      	movs	r2, #16
 80118b2:	4013      	ands	r3, r2
 80118b4:	2b10      	cmp	r3, #16
 80118b6:	d107      	bne.n	80118c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	2210      	movs	r2, #16
 80118be:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2204      	movs	r2, #4
 80118c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80118c6:	e002      	b.n	80118ce <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	2200      	movs	r2, #0
 80118cc:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	2220      	movs	r2, #32
 80118d4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	685a      	ldr	r2, [r3, #4]
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	491f      	ldr	r1, [pc, #124]	@ (8011960 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80118e2:	400a      	ands	r2, r1
 80118e4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	2241      	movs	r2, #65	@ 0x41
 80118ea:	2120      	movs	r1, #32
 80118ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	2242      	movs	r2, #66	@ 0x42
 80118f2:	2100      	movs	r1, #0
 80118f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	2240      	movs	r2, #64	@ 0x40
 80118fa:	2100      	movs	r1, #0
 80118fc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80118fe:	2301      	movs	r3, #1
 8011900:	e029      	b.n	8011956 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011902:	f7fc fbc5 	bl	800e090 <HAL_GetTick>
 8011906:	0002      	movs	r2, r0
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	1ad3      	subs	r3, r2, r3
 801190c:	68ba      	ldr	r2, [r7, #8]
 801190e:	429a      	cmp	r2, r3
 8011910:	d302      	bcc.n	8011918 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d116      	bne.n	8011946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	699b      	ldr	r3, [r3, #24]
 801191e:	2204      	movs	r2, #4
 8011920:	4013      	ands	r3, r2
 8011922:	2b04      	cmp	r3, #4
 8011924:	d00f      	beq.n	8011946 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801192a:	2220      	movs	r2, #32
 801192c:	431a      	orrs	r2, r3
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	2241      	movs	r2, #65	@ 0x41
 8011936:	2120      	movs	r1, #32
 8011938:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	2240      	movs	r2, #64	@ 0x40
 801193e:	2100      	movs	r1, #0
 8011940:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011942:	2301      	movs	r3, #1
 8011944:	e007      	b.n	8011956 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	699b      	ldr	r3, [r3, #24]
 801194c:	2204      	movs	r2, #4
 801194e:	4013      	ands	r3, r2
 8011950:	2b04      	cmp	r3, #4
 8011952:	d18c      	bne.n	801186e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011954:	2300      	movs	r3, #0
}
 8011956:	0018      	movs	r0, r3
 8011958:	46bd      	mov	sp, r7
 801195a:	b004      	add	sp, #16
 801195c:	bd80      	pop	{r7, pc}
 801195e:	46c0      	nop			@ (mov r8, r8)
 8011960:	fe00e800 	.word	0xfe00e800

08011964 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b08a      	sub	sp, #40	@ 0x28
 8011968:	af00      	add	r7, sp, #0
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011970:	2327      	movs	r3, #39	@ 0x27
 8011972:	18fb      	adds	r3, r7, r3
 8011974:	2200      	movs	r2, #0
 8011976:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	699b      	ldr	r3, [r3, #24]
 801197e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8011980:	2300      	movs	r3, #0
 8011982:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8011988:	69bb      	ldr	r3, [r7, #24]
 801198a:	2210      	movs	r2, #16
 801198c:	4013      	ands	r3, r2
 801198e:	d100      	bne.n	8011992 <I2C_IsErrorOccurred+0x2e>
 8011990:	e079      	b.n	8011a86 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	2210      	movs	r2, #16
 8011998:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801199a:	e057      	b.n	8011a4c <I2C_IsErrorOccurred+0xe8>
 801199c:	2227      	movs	r2, #39	@ 0x27
 801199e:	18bb      	adds	r3, r7, r2
 80119a0:	18ba      	adds	r2, r7, r2
 80119a2:	7812      	ldrb	r2, [r2, #0]
 80119a4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	3301      	adds	r3, #1
 80119aa:	d04f      	beq.n	8011a4c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80119ac:	f7fc fb70 	bl	800e090 <HAL_GetTick>
 80119b0:	0002      	movs	r2, r0
 80119b2:	69fb      	ldr	r3, [r7, #28]
 80119b4:	1ad3      	subs	r3, r2, r3
 80119b6:	68ba      	ldr	r2, [r7, #8]
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d302      	bcc.n	80119c2 <I2C_IsErrorOccurred+0x5e>
 80119bc:	68bb      	ldr	r3, [r7, #8]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d144      	bne.n	8011a4c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	685a      	ldr	r2, [r3, #4]
 80119c8:	2380      	movs	r3, #128	@ 0x80
 80119ca:	01db      	lsls	r3, r3, #7
 80119cc:	4013      	ands	r3, r2
 80119ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80119d0:	2013      	movs	r0, #19
 80119d2:	183b      	adds	r3, r7, r0
 80119d4:	68fa      	ldr	r2, [r7, #12]
 80119d6:	2142      	movs	r1, #66	@ 0x42
 80119d8:	5c52      	ldrb	r2, [r2, r1]
 80119da:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	699a      	ldr	r2, [r3, #24]
 80119e2:	2380      	movs	r3, #128	@ 0x80
 80119e4:	021b      	lsls	r3, r3, #8
 80119e6:	401a      	ands	r2, r3
 80119e8:	2380      	movs	r3, #128	@ 0x80
 80119ea:	021b      	lsls	r3, r3, #8
 80119ec:	429a      	cmp	r2, r3
 80119ee:	d126      	bne.n	8011a3e <I2C_IsErrorOccurred+0xda>
 80119f0:	697a      	ldr	r2, [r7, #20]
 80119f2:	2380      	movs	r3, #128	@ 0x80
 80119f4:	01db      	lsls	r3, r3, #7
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d021      	beq.n	8011a3e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80119fa:	183b      	adds	r3, r7, r0
 80119fc:	781b      	ldrb	r3, [r3, #0]
 80119fe:	2b20      	cmp	r3, #32
 8011a00:	d01d      	beq.n	8011a3e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	685a      	ldr	r2, [r3, #4]
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	2180      	movs	r1, #128	@ 0x80
 8011a0e:	01c9      	lsls	r1, r1, #7
 8011a10:	430a      	orrs	r2, r1
 8011a12:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8011a14:	f7fc fb3c 	bl	800e090 <HAL_GetTick>
 8011a18:	0003      	movs	r3, r0
 8011a1a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011a1c:	e00f      	b.n	8011a3e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8011a1e:	f7fc fb37 	bl	800e090 <HAL_GetTick>
 8011a22:	0002      	movs	r2, r0
 8011a24:	69fb      	ldr	r3, [r7, #28]
 8011a26:	1ad3      	subs	r3, r2, r3
 8011a28:	2b19      	cmp	r3, #25
 8011a2a:	d908      	bls.n	8011a3e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8011a2c:	6a3b      	ldr	r3, [r7, #32]
 8011a2e:	2220      	movs	r2, #32
 8011a30:	4313      	orrs	r3, r2
 8011a32:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8011a34:	2327      	movs	r3, #39	@ 0x27
 8011a36:	18fb      	adds	r3, r7, r3
 8011a38:	2201      	movs	r2, #1
 8011a3a:	701a      	strb	r2, [r3, #0]

              break;
 8011a3c:	e006      	b.n	8011a4c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	699b      	ldr	r3, [r3, #24]
 8011a44:	2220      	movs	r2, #32
 8011a46:	4013      	ands	r3, r2
 8011a48:	2b20      	cmp	r3, #32
 8011a4a:	d1e8      	bne.n	8011a1e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	699b      	ldr	r3, [r3, #24]
 8011a52:	2220      	movs	r2, #32
 8011a54:	4013      	ands	r3, r2
 8011a56:	2b20      	cmp	r3, #32
 8011a58:	d004      	beq.n	8011a64 <I2C_IsErrorOccurred+0x100>
 8011a5a:	2327      	movs	r3, #39	@ 0x27
 8011a5c:	18fb      	adds	r3, r7, r3
 8011a5e:	781b      	ldrb	r3, [r3, #0]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d09b      	beq.n	801199c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8011a64:	2327      	movs	r3, #39	@ 0x27
 8011a66:	18fb      	adds	r3, r7, r3
 8011a68:	781b      	ldrb	r3, [r3, #0]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d103      	bne.n	8011a76 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	2220      	movs	r2, #32
 8011a74:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8011a76:	6a3b      	ldr	r3, [r7, #32]
 8011a78:	2204      	movs	r2, #4
 8011a7a:	4313      	orrs	r3, r2
 8011a7c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8011a7e:	2327      	movs	r3, #39	@ 0x27
 8011a80:	18fb      	adds	r3, r7, r3
 8011a82:	2201      	movs	r2, #1
 8011a84:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	699b      	ldr	r3, [r3, #24]
 8011a8c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8011a8e:	69ba      	ldr	r2, [r7, #24]
 8011a90:	2380      	movs	r3, #128	@ 0x80
 8011a92:	005b      	lsls	r3, r3, #1
 8011a94:	4013      	ands	r3, r2
 8011a96:	d00c      	beq.n	8011ab2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8011a98:	6a3b      	ldr	r3, [r7, #32]
 8011a9a:	2201      	movs	r2, #1
 8011a9c:	4313      	orrs	r3, r2
 8011a9e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	2280      	movs	r2, #128	@ 0x80
 8011aa6:	0052      	lsls	r2, r2, #1
 8011aa8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011aaa:	2327      	movs	r3, #39	@ 0x27
 8011aac:	18fb      	adds	r3, r7, r3
 8011aae:	2201      	movs	r2, #1
 8011ab0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8011ab2:	69ba      	ldr	r2, [r7, #24]
 8011ab4:	2380      	movs	r3, #128	@ 0x80
 8011ab6:	00db      	lsls	r3, r3, #3
 8011ab8:	4013      	ands	r3, r2
 8011aba:	d00c      	beq.n	8011ad6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8011abc:	6a3b      	ldr	r3, [r7, #32]
 8011abe:	2208      	movs	r2, #8
 8011ac0:	4313      	orrs	r3, r2
 8011ac2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	2280      	movs	r2, #128	@ 0x80
 8011aca:	00d2      	lsls	r2, r2, #3
 8011acc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011ace:	2327      	movs	r3, #39	@ 0x27
 8011ad0:	18fb      	adds	r3, r7, r3
 8011ad2:	2201      	movs	r2, #1
 8011ad4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8011ad6:	69ba      	ldr	r2, [r7, #24]
 8011ad8:	2380      	movs	r3, #128	@ 0x80
 8011ada:	009b      	lsls	r3, r3, #2
 8011adc:	4013      	ands	r3, r2
 8011ade:	d00c      	beq.n	8011afa <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8011ae0:	6a3b      	ldr	r3, [r7, #32]
 8011ae2:	2202      	movs	r2, #2
 8011ae4:	4313      	orrs	r3, r2
 8011ae6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	2280      	movs	r2, #128	@ 0x80
 8011aee:	0092      	lsls	r2, r2, #2
 8011af0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8011af2:	2327      	movs	r3, #39	@ 0x27
 8011af4:	18fb      	adds	r3, r7, r3
 8011af6:	2201      	movs	r2, #1
 8011af8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8011afa:	2327      	movs	r3, #39	@ 0x27
 8011afc:	18fb      	adds	r3, r7, r3
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d01d      	beq.n	8011b40 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	0018      	movs	r0, r3
 8011b08:	f7ff fcd7 	bl	80114ba <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	685a      	ldr	r2, [r3, #4]
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	490e      	ldr	r1, [pc, #56]	@ (8011b50 <I2C_IsErrorOccurred+0x1ec>)
 8011b18:	400a      	ands	r2, r1
 8011b1a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011b20:	6a3b      	ldr	r3, [r7, #32]
 8011b22:	431a      	orrs	r2, r3
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2241      	movs	r2, #65	@ 0x41
 8011b2c:	2120      	movs	r1, #32
 8011b2e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	2242      	movs	r2, #66	@ 0x42
 8011b34:	2100      	movs	r1, #0
 8011b36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	2240      	movs	r2, #64	@ 0x40
 8011b3c:	2100      	movs	r1, #0
 8011b3e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8011b40:	2327      	movs	r3, #39	@ 0x27
 8011b42:	18fb      	adds	r3, r7, r3
 8011b44:	781b      	ldrb	r3, [r3, #0]
}
 8011b46:	0018      	movs	r0, r3
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	b00a      	add	sp, #40	@ 0x28
 8011b4c:	bd80      	pop	{r7, pc}
 8011b4e:	46c0      	nop			@ (mov r8, r8)
 8011b50:	fe00e800 	.word	0xfe00e800

08011b54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8011b54:	b590      	push	{r4, r7, lr}
 8011b56:	b087      	sub	sp, #28
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	0008      	movs	r0, r1
 8011b5e:	0011      	movs	r1, r2
 8011b60:	607b      	str	r3, [r7, #4]
 8011b62:	240a      	movs	r4, #10
 8011b64:	193b      	adds	r3, r7, r4
 8011b66:	1c02      	adds	r2, r0, #0
 8011b68:	801a      	strh	r2, [r3, #0]
 8011b6a:	2009      	movs	r0, #9
 8011b6c:	183b      	adds	r3, r7, r0
 8011b6e:	1c0a      	adds	r2, r1, #0
 8011b70:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011b72:	193b      	adds	r3, r7, r4
 8011b74:	881b      	ldrh	r3, [r3, #0]
 8011b76:	059b      	lsls	r3, r3, #22
 8011b78:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011b7a:	183b      	adds	r3, r7, r0
 8011b7c:	781b      	ldrb	r3, [r3, #0]
 8011b7e:	0419      	lsls	r1, r3, #16
 8011b80:	23ff      	movs	r3, #255	@ 0xff
 8011b82:	041b      	lsls	r3, r3, #16
 8011b84:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011b86:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b8e:	4313      	orrs	r3, r2
 8011b90:	005b      	lsls	r3, r3, #1
 8011b92:	085b      	lsrs	r3, r3, #1
 8011b94:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b9e:	0d51      	lsrs	r1, r2, #21
 8011ba0:	2280      	movs	r2, #128	@ 0x80
 8011ba2:	00d2      	lsls	r2, r2, #3
 8011ba4:	400a      	ands	r2, r1
 8011ba6:	4907      	ldr	r1, [pc, #28]	@ (8011bc4 <I2C_TransferConfig+0x70>)
 8011ba8:	430a      	orrs	r2, r1
 8011baa:	43d2      	mvns	r2, r2
 8011bac:	401a      	ands	r2, r3
 8011bae:	0011      	movs	r1, r2
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	697a      	ldr	r2, [r7, #20]
 8011bb6:	430a      	orrs	r2, r1
 8011bb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8011bba:	46c0      	nop			@ (mov r8, r8)
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	b007      	add	sp, #28
 8011bc0:	bd90      	pop	{r4, r7, pc}
 8011bc2:	46c0      	nop			@ (mov r8, r8)
 8011bc4:	03ff63ff 	.word	0x03ff63ff

08011bc8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b084      	sub	sp, #16
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	000a      	movs	r2, r1
 8011bd2:	1cbb      	adds	r3, r7, #2
 8011bd4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011bde:	4b3e      	ldr	r3, [pc, #248]	@ (8011cd8 <I2C_Enable_IRQ+0x110>)
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d035      	beq.n	8011c50 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8011be8:	4b3c      	ldr	r3, [pc, #240]	@ (8011cdc <I2C_Enable_IRQ+0x114>)
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d030      	beq.n	8011c50 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8011bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8011ce0 <I2C_Enable_IRQ+0x118>)
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d02b      	beq.n	8011c50 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011bf8:	1cbb      	adds	r3, r7, #2
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	5e9b      	ldrsh	r3, [r3, r2]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	da03      	bge.n	8011c0a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	22b8      	movs	r2, #184	@ 0xb8
 8011c06:	4313      	orrs	r3, r2
 8011c08:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011c0a:	1cbb      	adds	r3, r7, #2
 8011c0c:	881b      	ldrh	r3, [r3, #0]
 8011c0e:	2201      	movs	r2, #1
 8011c10:	4013      	ands	r3, r2
 8011c12:	d003      	beq.n	8011c1c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	22f2      	movs	r2, #242	@ 0xf2
 8011c18:	4313      	orrs	r3, r2
 8011c1a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011c1c:	1cbb      	adds	r3, r7, #2
 8011c1e:	881b      	ldrh	r3, [r3, #0]
 8011c20:	2202      	movs	r2, #2
 8011c22:	4013      	ands	r3, r2
 8011c24:	d003      	beq.n	8011c2e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	22f4      	movs	r2, #244	@ 0xf4
 8011c2a:	4313      	orrs	r3, r2
 8011c2c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011c2e:	1cbb      	adds	r3, r7, #2
 8011c30:	881b      	ldrh	r3, [r3, #0]
 8011c32:	2b10      	cmp	r3, #16
 8011c34:	d103      	bne.n	8011c3e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2290      	movs	r2, #144	@ 0x90
 8011c3a:	4313      	orrs	r3, r2
 8011c3c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011c3e:	1cbb      	adds	r3, r7, #2
 8011c40:	881b      	ldrh	r3, [r3, #0]
 8011c42:	2b20      	cmp	r3, #32
 8011c44:	d13c      	bne.n	8011cc0 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	2220      	movs	r2, #32
 8011c4a:	4313      	orrs	r3, r2
 8011c4c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011c4e:	e037      	b.n	8011cc0 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011c50:	1cbb      	adds	r3, r7, #2
 8011c52:	2200      	movs	r2, #0
 8011c54:	5e9b      	ldrsh	r3, [r3, r2]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	da03      	bge.n	8011c62 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	22b8      	movs	r2, #184	@ 0xb8
 8011c5e:	4313      	orrs	r3, r2
 8011c60:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011c62:	1cbb      	adds	r3, r7, #2
 8011c64:	881b      	ldrh	r3, [r3, #0]
 8011c66:	2201      	movs	r2, #1
 8011c68:	4013      	ands	r3, r2
 8011c6a:	d003      	beq.n	8011c74 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	22f2      	movs	r2, #242	@ 0xf2
 8011c70:	4313      	orrs	r3, r2
 8011c72:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011c74:	1cbb      	adds	r3, r7, #2
 8011c76:	881b      	ldrh	r3, [r3, #0]
 8011c78:	2202      	movs	r2, #2
 8011c7a:	4013      	ands	r3, r2
 8011c7c:	d003      	beq.n	8011c86 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	22f4      	movs	r2, #244	@ 0xf4
 8011c82:	4313      	orrs	r3, r2
 8011c84:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011c86:	1cbb      	adds	r3, r7, #2
 8011c88:	881b      	ldrh	r3, [r3, #0]
 8011c8a:	2b10      	cmp	r3, #16
 8011c8c:	d103      	bne.n	8011c96 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	2290      	movs	r2, #144	@ 0x90
 8011c92:	4313      	orrs	r3, r2
 8011c94:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011c96:	1cbb      	adds	r3, r7, #2
 8011c98:	881b      	ldrh	r3, [r3, #0]
 8011c9a:	2b20      	cmp	r3, #32
 8011c9c:	d103      	bne.n	8011ca6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	2260      	movs	r2, #96	@ 0x60
 8011ca2:	4313      	orrs	r3, r2
 8011ca4:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011caa:	4b0d      	ldr	r3, [pc, #52]	@ (8011ce0 <I2C_Enable_IRQ+0x118>)
 8011cac:	429a      	cmp	r2, r3
 8011cae:	d007      	beq.n	8011cc0 <I2C_Enable_IRQ+0xf8>
 8011cb0:	1cbb      	adds	r3, r7, #2
 8011cb2:	881b      	ldrh	r3, [r3, #0]
 8011cb4:	2b40      	cmp	r3, #64	@ 0x40
 8011cb6:	d103      	bne.n	8011cc0 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	2240      	movs	r2, #64	@ 0x40
 8011cbc:	4313      	orrs	r3, r2
 8011cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	6819      	ldr	r1, [r3, #0]
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	68fa      	ldr	r2, [r7, #12]
 8011ccc:	430a      	orrs	r2, r1
 8011cce:	601a      	str	r2, [r3, #0]
}
 8011cd0:	46c0      	nop			@ (mov r8, r8)
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	b004      	add	sp, #16
 8011cd6:	bd80      	pop	{r7, pc}
 8011cd8:	08010549 	.word	0x08010549
 8011cdc:	08010979 	.word	0x08010979
 8011ce0:	08010741 	.word	0x08010741

08011ce4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b084      	sub	sp, #16
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	000a      	movs	r2, r1
 8011cee:	1cbb      	adds	r3, r7, #2
 8011cf0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011cf6:	1cbb      	adds	r3, r7, #2
 8011cf8:	881b      	ldrh	r3, [r3, #0]
 8011cfa:	2201      	movs	r2, #1
 8011cfc:	4013      	ands	r3, r2
 8011cfe:	d010      	beq.n	8011d22 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	2242      	movs	r2, #66	@ 0x42
 8011d04:	4313      	orrs	r3, r2
 8011d06:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2241      	movs	r2, #65	@ 0x41
 8011d0c:	5c9b      	ldrb	r3, [r3, r2]
 8011d0e:	b2db      	uxtb	r3, r3
 8011d10:	001a      	movs	r2, r3
 8011d12:	2328      	movs	r3, #40	@ 0x28
 8011d14:	4013      	ands	r3, r2
 8011d16:	2b28      	cmp	r3, #40	@ 0x28
 8011d18:	d003      	beq.n	8011d22 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	22b0      	movs	r2, #176	@ 0xb0
 8011d1e:	4313      	orrs	r3, r2
 8011d20:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011d22:	1cbb      	adds	r3, r7, #2
 8011d24:	881b      	ldrh	r3, [r3, #0]
 8011d26:	2202      	movs	r2, #2
 8011d28:	4013      	ands	r3, r2
 8011d2a:	d010      	beq.n	8011d4e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	2244      	movs	r2, #68	@ 0x44
 8011d30:	4313      	orrs	r3, r2
 8011d32:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2241      	movs	r2, #65	@ 0x41
 8011d38:	5c9b      	ldrb	r3, [r3, r2]
 8011d3a:	b2db      	uxtb	r3, r3
 8011d3c:	001a      	movs	r2, r3
 8011d3e:	2328      	movs	r3, #40	@ 0x28
 8011d40:	4013      	ands	r3, r2
 8011d42:	2b28      	cmp	r3, #40	@ 0x28
 8011d44:	d003      	beq.n	8011d4e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	22b0      	movs	r2, #176	@ 0xb0
 8011d4a:	4313      	orrs	r3, r2
 8011d4c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011d4e:	1cbb      	adds	r3, r7, #2
 8011d50:	2200      	movs	r2, #0
 8011d52:	5e9b      	ldrsh	r3, [r3, r2]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	da03      	bge.n	8011d60 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	22b8      	movs	r2, #184	@ 0xb8
 8011d5c:	4313      	orrs	r3, r2
 8011d5e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011d60:	1cbb      	adds	r3, r7, #2
 8011d62:	881b      	ldrh	r3, [r3, #0]
 8011d64:	2b10      	cmp	r3, #16
 8011d66:	d103      	bne.n	8011d70 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	2290      	movs	r2, #144	@ 0x90
 8011d6c:	4313      	orrs	r3, r2
 8011d6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011d70:	1cbb      	adds	r3, r7, #2
 8011d72:	881b      	ldrh	r3, [r3, #0]
 8011d74:	2b20      	cmp	r3, #32
 8011d76:	d103      	bne.n	8011d80 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	2220      	movs	r2, #32
 8011d7c:	4313      	orrs	r3, r2
 8011d7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8011d80:	1cbb      	adds	r3, r7, #2
 8011d82:	881b      	ldrh	r3, [r3, #0]
 8011d84:	2b40      	cmp	r3, #64	@ 0x40
 8011d86:	d103      	bne.n	8011d90 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	2240      	movs	r2, #64	@ 0x40
 8011d8c:	4313      	orrs	r3, r2
 8011d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	681a      	ldr	r2, [r3, #0]
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	43d9      	mvns	r1, r3
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	400a      	ands	r2, r1
 8011da0:	601a      	str	r2, [r3, #0]
}
 8011da2:	46c0      	nop			@ (mov r8, r8)
 8011da4:	46bd      	mov	sp, r7
 8011da6:	b004      	add	sp, #16
 8011da8:	bd80      	pop	{r7, pc}
	...

08011dac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b082      	sub	sp, #8
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2241      	movs	r2, #65	@ 0x41
 8011dba:	5c9b      	ldrb	r3, [r3, r2]
 8011dbc:	b2db      	uxtb	r3, r3
 8011dbe:	2b20      	cmp	r3, #32
 8011dc0:	d138      	bne.n	8011e34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2240      	movs	r2, #64	@ 0x40
 8011dc6:	5c9b      	ldrb	r3, [r3, r2]
 8011dc8:	2b01      	cmp	r3, #1
 8011dca:	d101      	bne.n	8011dd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8011dcc:	2302      	movs	r3, #2
 8011dce:	e032      	b.n	8011e36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2240      	movs	r2, #64	@ 0x40
 8011dd4:	2101      	movs	r1, #1
 8011dd6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2241      	movs	r2, #65	@ 0x41
 8011ddc:	2124      	movs	r1, #36	@ 0x24
 8011dde:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	681a      	ldr	r2, [r3, #0]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	2101      	movs	r1, #1
 8011dec:	438a      	bics	r2, r1
 8011dee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	681a      	ldr	r2, [r3, #0]
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	4911      	ldr	r1, [pc, #68]	@ (8011e40 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8011dfc:	400a      	ands	r2, r1
 8011dfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	6819      	ldr	r1, [r3, #0]
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	683a      	ldr	r2, [r7, #0]
 8011e0c:	430a      	orrs	r2, r1
 8011e0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	681a      	ldr	r2, [r3, #0]
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	2101      	movs	r1, #1
 8011e1c:	430a      	orrs	r2, r1
 8011e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2241      	movs	r2, #65	@ 0x41
 8011e24:	2120      	movs	r1, #32
 8011e26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2240      	movs	r2, #64	@ 0x40
 8011e2c:	2100      	movs	r1, #0
 8011e2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8011e30:	2300      	movs	r3, #0
 8011e32:	e000      	b.n	8011e36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011e34:	2302      	movs	r3, #2
  }
}
 8011e36:	0018      	movs	r0, r3
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	b002      	add	sp, #8
 8011e3c:	bd80      	pop	{r7, pc}
 8011e3e:	46c0      	nop			@ (mov r8, r8)
 8011e40:	ffffefff 	.word	0xffffefff

08011e44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b084      	sub	sp, #16
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2241      	movs	r2, #65	@ 0x41
 8011e52:	5c9b      	ldrb	r3, [r3, r2]
 8011e54:	b2db      	uxtb	r3, r3
 8011e56:	2b20      	cmp	r3, #32
 8011e58:	d139      	bne.n	8011ece <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	2240      	movs	r2, #64	@ 0x40
 8011e5e:	5c9b      	ldrb	r3, [r3, r2]
 8011e60:	2b01      	cmp	r3, #1
 8011e62:	d101      	bne.n	8011e68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8011e64:	2302      	movs	r3, #2
 8011e66:	e033      	b.n	8011ed0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2240      	movs	r2, #64	@ 0x40
 8011e6c:	2101      	movs	r1, #1
 8011e6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2241      	movs	r2, #65	@ 0x41
 8011e74:	2124      	movs	r1, #36	@ 0x24
 8011e76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	681a      	ldr	r2, [r3, #0]
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	2101      	movs	r1, #1
 8011e84:	438a      	bics	r2, r1
 8011e86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	4a11      	ldr	r2, [pc, #68]	@ (8011ed8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8011e94:	4013      	ands	r3, r2
 8011e96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	021b      	lsls	r3, r3, #8
 8011e9c:	68fa      	ldr	r2, [r7, #12]
 8011e9e:	4313      	orrs	r3, r2
 8011ea0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	68fa      	ldr	r2, [r7, #12]
 8011ea8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	2101      	movs	r1, #1
 8011eb6:	430a      	orrs	r2, r1
 8011eb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2241      	movs	r2, #65	@ 0x41
 8011ebe:	2120      	movs	r1, #32
 8011ec0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	2240      	movs	r2, #64	@ 0x40
 8011ec6:	2100      	movs	r1, #0
 8011ec8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	e000      	b.n	8011ed0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8011ece:	2302      	movs	r3, #2
  }
}
 8011ed0:	0018      	movs	r0, r3
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	b004      	add	sp, #16
 8011ed6:	bd80      	pop	{r7, pc}
 8011ed8:	fffff0ff 	.word	0xfffff0ff

08011edc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b088      	sub	sp, #32
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d101      	bne.n	8011eee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8011eea:	2301      	movs	r3, #1
 8011eec:	e0e1      	b.n	80120b2 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2235      	movs	r2, #53	@ 0x35
 8011ef2:	5c9b      	ldrb	r3, [r3, r2]
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d107      	bne.n	8011f0a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2234      	movs	r2, #52	@ 0x34
 8011efe:	2100      	movs	r1, #0
 8011f00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	0018      	movs	r0, r3
 8011f06:	f7f5 fcbb 	bl	8007880 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	2235      	movs	r2, #53	@ 0x35
 8011f0e:	2102      	movs	r1, #2
 8011f10:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	69da      	ldr	r2, [r3, #28]
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	4967      	ldr	r1, [pc, #412]	@ (80120bc <HAL_I2S_Init+0x1e0>)
 8011f1e:	400a      	ands	r2, r1
 8011f20:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	2202      	movs	r2, #2
 8011f28:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	695b      	ldr	r3, [r3, #20]
 8011f2e:	2b02      	cmp	r3, #2
 8011f30:	d073      	beq.n	801201a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	68db      	ldr	r3, [r3, #12]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d102      	bne.n	8011f40 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8011f3a:	2310      	movs	r3, #16
 8011f3c:	617b      	str	r3, [r7, #20]
 8011f3e:	e001      	b.n	8011f44 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8011f40:	2320      	movs	r3, #32
 8011f42:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	689b      	ldr	r3, [r3, #8]
 8011f48:	2b20      	cmp	r3, #32
 8011f4a:	d802      	bhi.n	8011f52 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	005b      	lsls	r3, r3, #1
 8011f50:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8011f52:	f002 fec3 	bl	8014cdc <HAL_RCC_GetSysClockFreq>
 8011f56:	0003      	movs	r3, r0
 8011f58:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	691a      	ldr	r2, [r3, #16]
 8011f5e:	2380      	movs	r3, #128	@ 0x80
 8011f60:	009b      	lsls	r3, r3, #2
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d131      	bne.n	8011fca <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	68db      	ldr	r3, [r3, #12]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d016      	beq.n	8011f9c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011f6e:	697b      	ldr	r3, [r7, #20]
 8011f70:	009b      	lsls	r3, r3, #2
 8011f72:	0019      	movs	r1, r3
 8011f74:	68f8      	ldr	r0, [r7, #12]
 8011f76:	f7ee f915 	bl	80001a4 <__udivsi3>
 8011f7a:	0003      	movs	r3, r0
 8011f7c:	001a      	movs	r2, r3
 8011f7e:	0013      	movs	r3, r2
 8011f80:	009b      	lsls	r3, r3, #2
 8011f82:	189b      	adds	r3, r3, r2
 8011f84:	005b      	lsls	r3, r3, #1
 8011f86:	001a      	movs	r2, r3
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	695b      	ldr	r3, [r3, #20]
 8011f8c:	0019      	movs	r1, r3
 8011f8e:	0010      	movs	r0, r2
 8011f90:	f7ee f908 	bl	80001a4 <__udivsi3>
 8011f94:	0003      	movs	r3, r0
 8011f96:	3305      	adds	r3, #5
 8011f98:	613b      	str	r3, [r7, #16]
 8011f9a:	e02a      	b.n	8011ff2 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011f9c:	697b      	ldr	r3, [r7, #20]
 8011f9e:	00db      	lsls	r3, r3, #3
 8011fa0:	0019      	movs	r1, r3
 8011fa2:	68f8      	ldr	r0, [r7, #12]
 8011fa4:	f7ee f8fe 	bl	80001a4 <__udivsi3>
 8011fa8:	0003      	movs	r3, r0
 8011faa:	001a      	movs	r2, r3
 8011fac:	0013      	movs	r3, r2
 8011fae:	009b      	lsls	r3, r3, #2
 8011fb0:	189b      	adds	r3, r3, r2
 8011fb2:	005b      	lsls	r3, r3, #1
 8011fb4:	001a      	movs	r2, r3
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	695b      	ldr	r3, [r3, #20]
 8011fba:	0019      	movs	r1, r3
 8011fbc:	0010      	movs	r0, r2
 8011fbe:	f7ee f8f1 	bl	80001a4 <__udivsi3>
 8011fc2:	0003      	movs	r3, r0
 8011fc4:	3305      	adds	r3, #5
 8011fc6:	613b      	str	r3, [r7, #16]
 8011fc8:	e013      	b.n	8011ff2 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011fca:	6979      	ldr	r1, [r7, #20]
 8011fcc:	68f8      	ldr	r0, [r7, #12]
 8011fce:	f7ee f8e9 	bl	80001a4 <__udivsi3>
 8011fd2:	0003      	movs	r3, r0
 8011fd4:	001a      	movs	r2, r3
 8011fd6:	0013      	movs	r3, r2
 8011fd8:	009b      	lsls	r3, r3, #2
 8011fda:	189b      	adds	r3, r3, r2
 8011fdc:	005b      	lsls	r3, r3, #1
 8011fde:	001a      	movs	r2, r3
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	695b      	ldr	r3, [r3, #20]
 8011fe4:	0019      	movs	r1, r3
 8011fe6:	0010      	movs	r0, r2
 8011fe8:	f7ee f8dc 	bl	80001a4 <__udivsi3>
 8011fec:	0003      	movs	r3, r0
 8011fee:	3305      	adds	r3, #5
 8011ff0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8011ff2:	693b      	ldr	r3, [r7, #16]
 8011ff4:	210a      	movs	r1, #10
 8011ff6:	0018      	movs	r0, r3
 8011ff8:	f7ee f8d4 	bl	80001a4 <__udivsi3>
 8011ffc:	0003      	movs	r3, r0
 8011ffe:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	2201      	movs	r2, #1
 8012004:	4013      	ands	r3, r2
 8012006:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012008:	693a      	ldr	r2, [r7, #16]
 801200a:	69bb      	ldr	r3, [r7, #24]
 801200c:	1ad3      	subs	r3, r2, r3
 801200e:	085b      	lsrs	r3, r3, #1
 8012010:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8012012:	69bb      	ldr	r3, [r7, #24]
 8012014:	021b      	lsls	r3, r3, #8
 8012016:	61bb      	str	r3, [r7, #24]
 8012018:	e003      	b.n	8012022 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 801201a:	2302      	movs	r3, #2
 801201c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 801201e:	2300      	movs	r3, #0
 8012020:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8012022:	69fb      	ldr	r3, [r7, #28]
 8012024:	2b01      	cmp	r3, #1
 8012026:	d902      	bls.n	801202e <HAL_I2S_Init+0x152>
 8012028:	69fb      	ldr	r3, [r7, #28]
 801202a:	2bff      	cmp	r3, #255	@ 0xff
 801202c:	d907      	bls.n	801203e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012032:	2210      	movs	r2, #16
 8012034:	431a      	orrs	r2, r3
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 801203a:	2301      	movs	r3, #1
 801203c:	e039      	b.n	80120b2 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	691a      	ldr	r2, [r3, #16]
 8012042:	69bb      	ldr	r3, [r7, #24]
 8012044:	431a      	orrs	r2, r3
 8012046:	0011      	movs	r1, r2
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	69fa      	ldr	r2, [r7, #28]
 801204e:	430a      	orrs	r2, r1
 8012050:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	69db      	ldr	r3, [r3, #28]
 8012058:	4a18      	ldr	r2, [pc, #96]	@ (80120bc <HAL_I2S_Init+0x1e0>)
 801205a:	401a      	ands	r2, r3
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	6859      	ldr	r1, [r3, #4]
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	689b      	ldr	r3, [r3, #8]
 8012064:	4319      	orrs	r1, r3
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	68db      	ldr	r3, [r3, #12]
 801206a:	4319      	orrs	r1, r3
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	699b      	ldr	r3, [r3, #24]
 8012070:	430b      	orrs	r3, r1
 8012072:	431a      	orrs	r2, r3
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	2180      	movs	r1, #128	@ 0x80
 801207a:	0109      	lsls	r1, r1, #4
 801207c:	430a      	orrs	r2, r1
 801207e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	689b      	ldr	r3, [r3, #8]
 8012084:	2b30      	cmp	r3, #48	@ 0x30
 8012086:	d003      	beq.n	8012090 <HAL_I2S_Init+0x1b4>
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	689b      	ldr	r3, [r3, #8]
 801208c:	2bb0      	cmp	r3, #176	@ 0xb0
 801208e:	d108      	bne.n	80120a2 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	69da      	ldr	r2, [r3, #28]
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	2180      	movs	r1, #128	@ 0x80
 801209c:	0149      	lsls	r1, r1, #5
 801209e:	430a      	orrs	r2, r1
 80120a0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2200      	movs	r2, #0
 80120a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2235      	movs	r2, #53	@ 0x35
 80120ac:	2101      	movs	r1, #1
 80120ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80120b0:	2300      	movs	r3, #0
}
 80120b2:	0018      	movs	r0, r3
 80120b4:	46bd      	mov	sp, r7
 80120b6:	b008      	add	sp, #32
 80120b8:	bd80      	pop	{r7, pc}
 80120ba:	46c0      	nop			@ (mov r8, r8)
 80120bc:	fffff040 	.word	0xfffff040

080120c0 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80120c0:	b580      	push	{r7, lr}
 80120c2:	b086      	sub	sp, #24
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	60f8      	str	r0, [r7, #12]
 80120c8:	60b9      	str	r1, [r7, #8]
 80120ca:	1dbb      	adds	r3, r7, #6
 80120cc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d003      	beq.n	80120dc <HAL_I2S_Receive_DMA+0x1c>
 80120d4:	1dbb      	adds	r3, r7, #6
 80120d6:	881b      	ldrh	r3, [r3, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d101      	bne.n	80120e0 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80120dc:	2301      	movs	r3, #1
 80120de:	e0a6      	b.n	801222e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	2234      	movs	r2, #52	@ 0x34
 80120e4:	5c9b      	ldrb	r3, [r3, r2]
 80120e6:	b2db      	uxtb	r3, r3
 80120e8:	2b01      	cmp	r3, #1
 80120ea:	d101      	bne.n	80120f0 <HAL_I2S_Receive_DMA+0x30>
 80120ec:	2302      	movs	r3, #2
 80120ee:	e09e      	b.n	801222e <HAL_I2S_Receive_DMA+0x16e>
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	2234      	movs	r2, #52	@ 0x34
 80120f4:	2101      	movs	r1, #1
 80120f6:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	2235      	movs	r2, #53	@ 0x35
 80120fc:	5c9b      	ldrb	r3, [r3, r2]
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	2b01      	cmp	r3, #1
 8012102:	d005      	beq.n	8012110 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2234      	movs	r2, #52	@ 0x34
 8012108:	2100      	movs	r1, #0
 801210a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 801210c:	2302      	movs	r3, #2
 801210e:	e08e      	b.n	801222e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2235      	movs	r2, #53	@ 0x35
 8012114:	2104      	movs	r1, #4
 8012116:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	2200      	movs	r2, #0
 801211c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	68ba      	ldr	r2, [r7, #8]
 8012122:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	69db      	ldr	r3, [r3, #28]
 801212a:	2207      	movs	r2, #7
 801212c:	4013      	ands	r3, r2
 801212e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	2b03      	cmp	r3, #3
 8012134:	d002      	beq.n	801213c <HAL_I2S_Receive_DMA+0x7c>
 8012136:	697b      	ldr	r3, [r7, #20]
 8012138:	2b05      	cmp	r3, #5
 801213a:	d10c      	bne.n	8012156 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 801213c:	1dbb      	adds	r3, r7, #6
 801213e:	881b      	ldrh	r3, [r3, #0]
 8012140:	18db      	adds	r3, r3, r3
 8012142:	b29a      	uxth	r2, r3
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8012148:	1dbb      	adds	r3, r7, #6
 801214a:	881b      	ldrh	r3, [r3, #0]
 801214c:	18db      	adds	r3, r3, r3
 801214e:	b29a      	uxth	r2, r3
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012154:	e007      	b.n	8012166 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	1dba      	adds	r2, r7, #6
 801215a:	8812      	ldrh	r2, [r2, #0]
 801215c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	1dba      	adds	r2, r7, #6
 8012162:	8812      	ldrh	r2, [r2, #0]
 8012164:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801216a:	4a33      	ldr	r2, [pc, #204]	@ (8012238 <HAL_I2S_Receive_DMA+0x178>)
 801216c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012172:	4a32      	ldr	r2, [pc, #200]	@ (801223c <HAL_I2S_Receive_DMA+0x17c>)
 8012174:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801217a:	4a31      	ldr	r2, [pc, #196]	@ (8012240 <HAL_I2S_Receive_DMA+0x180>)
 801217c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	69da      	ldr	r2, [r3, #28]
 8012184:	23c0      	movs	r3, #192	@ 0xc0
 8012186:	009b      	lsls	r3, r3, #2
 8012188:	401a      	ands	r2, r3
 801218a:	23c0      	movs	r3, #192	@ 0xc0
 801218c:	009b      	lsls	r3, r3, #2
 801218e:	429a      	cmp	r2, r3
 8012190:	d10a      	bne.n	80121a8 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012192:	2300      	movs	r3, #0
 8012194:	613b      	str	r3, [r7, #16]
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	68db      	ldr	r3, [r3, #12]
 801219c:	613b      	str	r3, [r7, #16]
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	689b      	ldr	r3, [r3, #8]
 80121a4:	613b      	str	r3, [r7, #16]
 80121a6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	330c      	adds	r3, #12
 80121b2:	0019      	movs	r1, r3
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121b8:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80121be:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80121c0:	f7fc fca2 	bl	800eb08 <HAL_DMA_Start_IT>
 80121c4:	1e03      	subs	r3, r0, #0
 80121c6:	d00f      	beq.n	80121e8 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80121cc:	2208      	movs	r2, #8
 80121ce:	431a      	orrs	r2, r3
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	2235      	movs	r2, #53	@ 0x35
 80121d8:	2101      	movs	r1, #1
 80121da:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	2234      	movs	r2, #52	@ 0x34
 80121e0:	2100      	movs	r1, #0
 80121e2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80121e4:	2301      	movs	r3, #1
 80121e6:	e022      	b.n	801222e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	69da      	ldr	r2, [r3, #28]
 80121ee:	2380      	movs	r3, #128	@ 0x80
 80121f0:	00db      	lsls	r3, r3, #3
 80121f2:	4013      	ands	r3, r2
 80121f4:	d108      	bne.n	8012208 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	69da      	ldr	r2, [r3, #28]
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	2180      	movs	r1, #128	@ 0x80
 8012202:	00c9      	lsls	r1, r1, #3
 8012204:	430a      	orrs	r2, r1
 8012206:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	685b      	ldr	r3, [r3, #4]
 801220e:	2201      	movs	r2, #1
 8012210:	4013      	ands	r3, r2
 8012212:	d107      	bne.n	8012224 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	685a      	ldr	r2, [r3, #4]
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2101      	movs	r1, #1
 8012220:	430a      	orrs	r2, r1
 8012222:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2234      	movs	r2, #52	@ 0x34
 8012228:	2100      	movs	r1, #0
 801222a:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 801222c:	2300      	movs	r3, #0
}
 801222e:	0018      	movs	r0, r3
 8012230:	46bd      	mov	sp, r7
 8012232:	b006      	add	sp, #24
 8012234:	bd80      	pop	{r7, pc}
 8012236:	46c0      	nop			@ (mov r8, r8)
 8012238:	08012421 	.word	0x08012421
 801223c:	080123dd 	.word	0x080123dd
 8012240:	0801243f 	.word	0x0801243f

08012244 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b086      	sub	sp, #24
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 801224c:	2317      	movs	r3, #23
 801224e:	18fb      	adds	r3, r7, r3
 8012250:	2200      	movs	r2, #0
 8012252:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	685a      	ldr	r2, [r3, #4]
 8012258:	2380      	movs	r3, #128	@ 0x80
 801225a:	009b      	lsls	r3, r3, #2
 801225c:	429a      	cmp	r2, r3
 801225e:	d003      	beq.n	8012268 <HAL_I2S_DMAStop+0x24>
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	685b      	ldr	r3, [r3, #4]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d158      	bne.n	801231a <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801226c:	2b00      	cmp	r3, #0
 801226e:	d010      	beq.n	8012292 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012274:	0018      	movs	r0, r3
 8012276:	f7fc fcad 	bl	800ebd4 <HAL_DMA_Abort>
 801227a:	1e03      	subs	r3, r0, #0
 801227c:	d009      	beq.n	8012292 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012282:	2208      	movs	r2, #8
 8012284:	431a      	orrs	r2, r3
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801228a:	2317      	movs	r3, #23
 801228c:	18fb      	adds	r3, r7, r3
 801228e:	2201      	movs	r2, #1
 8012290:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	2364      	movs	r3, #100	@ 0x64
 8012296:	2201      	movs	r2, #1
 8012298:	2102      	movs	r1, #2
 801229a:	f000 f8f7 	bl	801248c <I2S_WaitFlagStateUntilTimeout>
 801229e:	1e03      	subs	r3, r0, #0
 80122a0:	d00d      	beq.n	80122be <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122a6:	2201      	movs	r2, #1
 80122a8:	431a      	orrs	r2, r3
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2235      	movs	r2, #53	@ 0x35
 80122b2:	2101      	movs	r1, #1
 80122b4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80122b6:	2317      	movs	r3, #23
 80122b8:	18fb      	adds	r3, r7, r3
 80122ba:	2201      	movs	r2, #1
 80122bc:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	2364      	movs	r3, #100	@ 0x64
 80122c2:	2200      	movs	r2, #0
 80122c4:	2180      	movs	r1, #128	@ 0x80
 80122c6:	f000 f8e1 	bl	801248c <I2S_WaitFlagStateUntilTimeout>
 80122ca:	1e03      	subs	r3, r0, #0
 80122cc:	d00d      	beq.n	80122ea <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122d2:	2201      	movs	r2, #1
 80122d4:	431a      	orrs	r2, r3
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2235      	movs	r2, #53	@ 0x35
 80122de:	2101      	movs	r1, #1
 80122e0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80122e2:	2317      	movs	r3, #23
 80122e4:	18fb      	adds	r3, r7, r3
 80122e6:	2201      	movs	r2, #1
 80122e8:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	69da      	ldr	r2, [r3, #28]
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	4938      	ldr	r1, [pc, #224]	@ (80123d8 <HAL_I2S_DMAStop+0x194>)
 80122f6:	400a      	ands	r2, r1
 80122f8:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80122fa:	2300      	movs	r3, #0
 80122fc:	613b      	str	r3, [r7, #16]
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	689b      	ldr	r3, [r3, #8]
 8012304:	613b      	str	r3, [r7, #16]
 8012306:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	685a      	ldr	r2, [r3, #4]
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	2102      	movs	r1, #2
 8012314:	438a      	bics	r2, r1
 8012316:	605a      	str	r2, [r3, #4]
 8012318:	e053      	b.n	80123c2 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	685a      	ldr	r2, [r3, #4]
 801231e:	23c0      	movs	r3, #192	@ 0xc0
 8012320:	009b      	lsls	r3, r3, #2
 8012322:	429a      	cmp	r2, r3
 8012324:	d005      	beq.n	8012332 <HAL_I2S_DMAStop+0xee>
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	685a      	ldr	r2, [r3, #4]
 801232a:	2380      	movs	r3, #128	@ 0x80
 801232c:	005b      	lsls	r3, r3, #1
 801232e:	429a      	cmp	r2, r3
 8012330:	d147      	bne.n	80123c2 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012336:	2b00      	cmp	r3, #0
 8012338:	d010      	beq.n	801235c <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801233e:	0018      	movs	r0, r3
 8012340:	f7fc fc48 	bl	800ebd4 <HAL_DMA_Abort>
 8012344:	1e03      	subs	r3, r0, #0
 8012346:	d009      	beq.n	801235c <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801234c:	2208      	movs	r2, #8
 801234e:	431a      	orrs	r2, r3
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8012354:	2317      	movs	r3, #23
 8012356:	18fb      	adds	r3, r7, r3
 8012358:	2201      	movs	r2, #1
 801235a:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	69da      	ldr	r2, [r3, #28]
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	491c      	ldr	r1, [pc, #112]	@ (80123d8 <HAL_I2S_DMAStop+0x194>)
 8012368:	400a      	ands	r2, r1
 801236a:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801236c:	2300      	movs	r3, #0
 801236e:	60fb      	str	r3, [r7, #12]
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	68db      	ldr	r3, [r3, #12]
 8012376:	60fb      	str	r3, [r7, #12]
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	689b      	ldr	r3, [r3, #8]
 801237e:	60fb      	str	r3, [r7, #12]
 8012380:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	685a      	ldr	r2, [r3, #4]
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	2101      	movs	r1, #1
 801238e:	438a      	bics	r2, r1
 8012390:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	685a      	ldr	r2, [r3, #4]
 8012396:	2380      	movs	r3, #128	@ 0x80
 8012398:	005b      	lsls	r3, r3, #1
 801239a:	429a      	cmp	r2, r3
 801239c:	d10e      	bne.n	80123bc <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123a2:	2240      	movs	r2, #64	@ 0x40
 80123a4:	431a      	orrs	r2, r3
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2235      	movs	r2, #53	@ 0x35
 80123ae:	2101      	movs	r1, #1
 80123b0:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80123b2:	2317      	movs	r3, #23
 80123b4:	18fb      	adds	r3, r7, r3
 80123b6:	2201      	movs	r2, #1
 80123b8:	701a      	strb	r2, [r3, #0]
 80123ba:	e002      	b.n	80123c2 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2235      	movs	r2, #53	@ 0x35
 80123c6:	2101      	movs	r1, #1
 80123c8:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80123ca:	2317      	movs	r3, #23
 80123cc:	18fb      	adds	r3, r7, r3
 80123ce:	781b      	ldrb	r3, [r3, #0]
}
 80123d0:	0018      	movs	r0, r3
 80123d2:	46bd      	mov	sp, r7
 80123d4:	b006      	add	sp, #24
 80123d6:	bd80      	pop	{r7, pc}
 80123d8:	fffffbff 	.word	0xfffffbff

080123dc <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123e8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	69db      	ldr	r3, [r3, #28]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d10e      	bne.n	8012410 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	685a      	ldr	r2, [r3, #4]
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	2101      	movs	r1, #1
 80123fe:	438a      	bics	r2, r1
 8012400:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	2200      	movs	r2, #0
 8012406:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	2235      	movs	r2, #53	@ 0x35
 801240c:	2101      	movs	r1, #1
 801240e:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	0018      	movs	r0, r3
 8012414:	f7f9 fcfe 	bl	800be14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8012418:	46c0      	nop			@ (mov r8, r8)
 801241a:	46bd      	mov	sp, r7
 801241c:	b004      	add	sp, #16
 801241e:	bd80      	pop	{r7, pc}

08012420 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b084      	sub	sp, #16
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801242c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	0018      	movs	r0, r3
 8012432:	f7f9 fcdd 	bl	800bdf0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8012436:	46c0      	nop			@ (mov r8, r8)
 8012438:	46bd      	mov	sp, r7
 801243a:	b004      	add	sp, #16
 801243c:	bd80      	pop	{r7, pc}

0801243e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 801243e:	b580      	push	{r7, lr}
 8012440:	b084      	sub	sp, #16
 8012442:	af00      	add	r7, sp, #0
 8012444:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801244a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	685a      	ldr	r2, [r3, #4]
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	2103      	movs	r1, #3
 8012458:	438a      	bics	r2, r1
 801245a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	2200      	movs	r2, #0
 8012460:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	2200      	movs	r2, #0
 8012466:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	2235      	movs	r2, #53	@ 0x35
 801246c:	2101      	movs	r1, #1
 801246e:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012474:	2208      	movs	r2, #8
 8012476:	431a      	orrs	r2, r3
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	0018      	movs	r0, r3
 8012480:	f7f9 fd16 	bl	800beb0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8012484:	46c0      	nop			@ (mov r8, r8)
 8012486:	46bd      	mov	sp, r7
 8012488:	b004      	add	sp, #16
 801248a:	bd80      	pop	{r7, pc}

0801248c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b086      	sub	sp, #24
 8012490:	af00      	add	r7, sp, #0
 8012492:	60f8      	str	r0, [r7, #12]
 8012494:	60b9      	str	r1, [r7, #8]
 8012496:	603b      	str	r3, [r7, #0]
 8012498:	1dfb      	adds	r3, r7, #7
 801249a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 801249c:	f7fb fdf8 	bl	800e090 <HAL_GetTick>
 80124a0:	0003      	movs	r3, r0
 80124a2:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80124a4:	e017      	b.n	80124d6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	3301      	adds	r3, #1
 80124aa:	d014      	beq.n	80124d6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80124ac:	f7fb fdf0 	bl	800e090 <HAL_GetTick>
 80124b0:	0002      	movs	r2, r0
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	1ad3      	subs	r3, r2, r3
 80124b6:	683a      	ldr	r2, [r7, #0]
 80124b8:	429a      	cmp	r2, r3
 80124ba:	d902      	bls.n	80124c2 <I2S_WaitFlagStateUntilTimeout+0x36>
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d109      	bne.n	80124d6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	2235      	movs	r2, #53	@ 0x35
 80124c6:	2101      	movs	r1, #1
 80124c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	2234      	movs	r2, #52	@ 0x34
 80124ce:	2100      	movs	r1, #0
 80124d0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80124d2:	2303      	movs	r3, #3
 80124d4:	e00f      	b.n	80124f6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	689b      	ldr	r3, [r3, #8]
 80124dc:	68ba      	ldr	r2, [r7, #8]
 80124de:	4013      	ands	r3, r2
 80124e0:	68ba      	ldr	r2, [r7, #8]
 80124e2:	1ad3      	subs	r3, r2, r3
 80124e4:	425a      	negs	r2, r3
 80124e6:	4153      	adcs	r3, r2
 80124e8:	b2db      	uxtb	r3, r3
 80124ea:	001a      	movs	r2, r3
 80124ec:	1dfb      	adds	r3, r7, #7
 80124ee:	781b      	ldrb	r3, [r3, #0]
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d1d8      	bne.n	80124a6 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80124f4:	2300      	movs	r3, #0
}
 80124f6:	0018      	movs	r0, r3
 80124f8:	46bd      	mov	sp, r7
 80124fa:	b006      	add	sp, #24
 80124fc:	bd80      	pop	{r7, pc}
	...

08012500 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8012500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012502:	b08b      	sub	sp, #44	@ 0x2c
 8012504:	af06      	add	r7, sp, #24
 8012506:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d101      	bne.n	8012512 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801250e:	2301      	movs	r3, #1
 8012510:	e0f0      	b.n	80126f4 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	4a79      	ldr	r2, [pc, #484]	@ (80126fc <HAL_PCD_Init+0x1fc>)
 8012516:	5c9b      	ldrb	r3, [r3, r2]
 8012518:	b2db      	uxtb	r3, r3
 801251a:	2b00      	cmp	r3, #0
 801251c:	d108      	bne.n	8012530 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801251e:	687a      	ldr	r2, [r7, #4]
 8012520:	23aa      	movs	r3, #170	@ 0xaa
 8012522:	009b      	lsls	r3, r3, #2
 8012524:	2100      	movs	r1, #0
 8012526:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	0018      	movs	r0, r3
 801252c:	f009 ff0c 	bl	801c348 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	4a72      	ldr	r2, [pc, #456]	@ (80126fc <HAL_PCD_Init+0x1fc>)
 8012534:	2103      	movs	r1, #3
 8012536:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	0018      	movs	r0, r3
 801253e:	f005 febf 	bl	80182c0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8012542:	230f      	movs	r3, #15
 8012544:	18fb      	adds	r3, r7, r3
 8012546:	2200      	movs	r2, #0
 8012548:	701a      	strb	r2, [r3, #0]
 801254a:	e049      	b.n	80125e0 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801254c:	200f      	movs	r0, #15
 801254e:	183b      	adds	r3, r7, r0
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	6879      	ldr	r1, [r7, #4]
 8012554:	1c5a      	adds	r2, r3, #1
 8012556:	0013      	movs	r3, r2
 8012558:	009b      	lsls	r3, r3, #2
 801255a:	189b      	adds	r3, r3, r2
 801255c:	00db      	lsls	r3, r3, #3
 801255e:	18cb      	adds	r3, r1, r3
 8012560:	3301      	adds	r3, #1
 8012562:	2201      	movs	r2, #1
 8012564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8012566:	183b      	adds	r3, r7, r0
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	6879      	ldr	r1, [r7, #4]
 801256c:	1c5a      	adds	r2, r3, #1
 801256e:	0013      	movs	r3, r2
 8012570:	009b      	lsls	r3, r3, #2
 8012572:	189b      	adds	r3, r3, r2
 8012574:	00db      	lsls	r3, r3, #3
 8012576:	183a      	adds	r2, r7, r0
 8012578:	7812      	ldrb	r2, [r2, #0]
 801257a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 801257c:	183b      	adds	r3, r7, r0
 801257e:	781b      	ldrb	r3, [r3, #0]
 8012580:	6879      	ldr	r1, [r7, #4]
 8012582:	1c5a      	adds	r2, r3, #1
 8012584:	0013      	movs	r3, r2
 8012586:	009b      	lsls	r3, r3, #2
 8012588:	189b      	adds	r3, r3, r2
 801258a:	00db      	lsls	r3, r3, #3
 801258c:	18cb      	adds	r3, r1, r3
 801258e:	3303      	adds	r3, #3
 8012590:	2200      	movs	r2, #0
 8012592:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8012594:	183b      	adds	r3, r7, r0
 8012596:	781a      	ldrb	r2, [r3, #0]
 8012598:	6879      	ldr	r1, [r7, #4]
 801259a:	0013      	movs	r3, r2
 801259c:	009b      	lsls	r3, r3, #2
 801259e:	189b      	adds	r3, r3, r2
 80125a0:	00db      	lsls	r3, r3, #3
 80125a2:	18cb      	adds	r3, r1, r3
 80125a4:	3338      	adds	r3, #56	@ 0x38
 80125a6:	2200      	movs	r2, #0
 80125a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80125aa:	183b      	adds	r3, r7, r0
 80125ac:	781a      	ldrb	r2, [r3, #0]
 80125ae:	6879      	ldr	r1, [r7, #4]
 80125b0:	0013      	movs	r3, r2
 80125b2:	009b      	lsls	r3, r3, #2
 80125b4:	189b      	adds	r3, r3, r2
 80125b6:	00db      	lsls	r3, r3, #3
 80125b8:	18cb      	adds	r3, r1, r3
 80125ba:	333c      	adds	r3, #60	@ 0x3c
 80125bc:	2200      	movs	r2, #0
 80125be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80125c0:	183b      	adds	r3, r7, r0
 80125c2:	781a      	ldrb	r2, [r3, #0]
 80125c4:	6879      	ldr	r1, [r7, #4]
 80125c6:	0013      	movs	r3, r2
 80125c8:	009b      	lsls	r3, r3, #2
 80125ca:	189b      	adds	r3, r3, r2
 80125cc:	00db      	lsls	r3, r3, #3
 80125ce:	18cb      	adds	r3, r1, r3
 80125d0:	3340      	adds	r3, #64	@ 0x40
 80125d2:	2200      	movs	r2, #0
 80125d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80125d6:	183b      	adds	r3, r7, r0
 80125d8:	781a      	ldrb	r2, [r3, #0]
 80125da:	183b      	adds	r3, r7, r0
 80125dc:	3201      	adds	r2, #1
 80125de:	701a      	strb	r2, [r3, #0]
 80125e0:	210f      	movs	r1, #15
 80125e2:	187b      	adds	r3, r7, r1
 80125e4:	781a      	ldrb	r2, [r3, #0]
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d3ae      	bcc.n	801254c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80125ee:	187b      	adds	r3, r7, r1
 80125f0:	2200      	movs	r2, #0
 80125f2:	701a      	strb	r2, [r3, #0]
 80125f4:	e056      	b.n	80126a4 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80125f6:	240f      	movs	r4, #15
 80125f8:	193b      	adds	r3, r7, r4
 80125fa:	781a      	ldrb	r2, [r3, #0]
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	236a      	movs	r3, #106	@ 0x6a
 8012600:	33ff      	adds	r3, #255	@ 0xff
 8012602:	0019      	movs	r1, r3
 8012604:	0013      	movs	r3, r2
 8012606:	009b      	lsls	r3, r3, #2
 8012608:	189b      	adds	r3, r3, r2
 801260a:	00db      	lsls	r3, r3, #3
 801260c:	18c3      	adds	r3, r0, r3
 801260e:	185b      	adds	r3, r3, r1
 8012610:	2200      	movs	r2, #0
 8012612:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8012614:	193b      	adds	r3, r7, r4
 8012616:	781a      	ldrb	r2, [r3, #0]
 8012618:	6878      	ldr	r0, [r7, #4]
 801261a:	23b4      	movs	r3, #180	@ 0xb4
 801261c:	0059      	lsls	r1, r3, #1
 801261e:	0013      	movs	r3, r2
 8012620:	009b      	lsls	r3, r3, #2
 8012622:	189b      	adds	r3, r3, r2
 8012624:	00db      	lsls	r3, r3, #3
 8012626:	18c3      	adds	r3, r0, r3
 8012628:	185b      	adds	r3, r3, r1
 801262a:	193a      	adds	r2, r7, r4
 801262c:	7812      	ldrb	r2, [r2, #0]
 801262e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8012630:	193b      	adds	r3, r7, r4
 8012632:	781a      	ldrb	r2, [r3, #0]
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	236c      	movs	r3, #108	@ 0x6c
 8012638:	33ff      	adds	r3, #255	@ 0xff
 801263a:	0019      	movs	r1, r3
 801263c:	0013      	movs	r3, r2
 801263e:	009b      	lsls	r3, r3, #2
 8012640:	189b      	adds	r3, r3, r2
 8012642:	00db      	lsls	r3, r3, #3
 8012644:	18c3      	adds	r3, r0, r3
 8012646:	185b      	adds	r3, r3, r1
 8012648:	2200      	movs	r2, #0
 801264a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801264c:	193b      	adds	r3, r7, r4
 801264e:	781a      	ldrb	r2, [r3, #0]
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	23bc      	movs	r3, #188	@ 0xbc
 8012654:	0059      	lsls	r1, r3, #1
 8012656:	0013      	movs	r3, r2
 8012658:	009b      	lsls	r3, r3, #2
 801265a:	189b      	adds	r3, r3, r2
 801265c:	00db      	lsls	r3, r3, #3
 801265e:	18c3      	adds	r3, r0, r3
 8012660:	185b      	adds	r3, r3, r1
 8012662:	2200      	movs	r2, #0
 8012664:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8012666:	193b      	adds	r3, r7, r4
 8012668:	781a      	ldrb	r2, [r3, #0]
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	23be      	movs	r3, #190	@ 0xbe
 801266e:	0059      	lsls	r1, r3, #1
 8012670:	0013      	movs	r3, r2
 8012672:	009b      	lsls	r3, r3, #2
 8012674:	189b      	adds	r3, r3, r2
 8012676:	00db      	lsls	r3, r3, #3
 8012678:	18c3      	adds	r3, r0, r3
 801267a:	185b      	adds	r3, r3, r1
 801267c:	2200      	movs	r2, #0
 801267e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8012680:	193b      	adds	r3, r7, r4
 8012682:	781a      	ldrb	r2, [r3, #0]
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	23c0      	movs	r3, #192	@ 0xc0
 8012688:	0059      	lsls	r1, r3, #1
 801268a:	0013      	movs	r3, r2
 801268c:	009b      	lsls	r3, r3, #2
 801268e:	189b      	adds	r3, r3, r2
 8012690:	00db      	lsls	r3, r3, #3
 8012692:	18c3      	adds	r3, r0, r3
 8012694:	185b      	adds	r3, r3, r1
 8012696:	2200      	movs	r2, #0
 8012698:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801269a:	193b      	adds	r3, r7, r4
 801269c:	781a      	ldrb	r2, [r3, #0]
 801269e:	193b      	adds	r3, r7, r4
 80126a0:	3201      	adds	r2, #1
 80126a2:	701a      	strb	r2, [r3, #0]
 80126a4:	230f      	movs	r3, #15
 80126a6:	18fb      	adds	r3, r7, r3
 80126a8:	781a      	ldrb	r2, [r3, #0]
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	685b      	ldr	r3, [r3, #4]
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d3a1      	bcc.n	80125f6 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6818      	ldr	r0, [r3, #0]
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	466a      	mov	r2, sp
 80126ba:	0011      	movs	r1, r2
 80126bc:	001a      	movs	r2, r3
 80126be:	3210      	adds	r2, #16
 80126c0:	ca70      	ldmia	r2!, {r4, r5, r6}
 80126c2:	c170      	stmia	r1!, {r4, r5, r6}
 80126c4:	ca30      	ldmia	r2!, {r4, r5}
 80126c6:	c130      	stmia	r1!, {r4, r5}
 80126c8:	6859      	ldr	r1, [r3, #4]
 80126ca:	689a      	ldr	r2, [r3, #8]
 80126cc:	68db      	ldr	r3, [r3, #12]
 80126ce:	f005 fe11 	bl	80182f4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	2224      	movs	r2, #36	@ 0x24
 80126d6:	2100      	movs	r1, #0
 80126d8:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	4a07      	ldr	r2, [pc, #28]	@ (80126fc <HAL_PCD_Init+0x1fc>)
 80126de:	2101      	movs	r1, #1
 80126e0:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	69db      	ldr	r3, [r3, #28]
 80126e6:	2b01      	cmp	r3, #1
 80126e8:	d103      	bne.n	80126f2 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	0018      	movs	r0, r3
 80126ee:	f001 fd23 	bl	8014138 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80126f2:	2300      	movs	r3, #0
}
 80126f4:	0018      	movs	r0, r3
 80126f6:	46bd      	mov	sp, r7
 80126f8:	b005      	add	sp, #20
 80126fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126fc:	000002a9 	.word	0x000002a9

08012700 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8012708:	687a      	ldr	r2, [r7, #4]
 801270a:	23aa      	movs	r3, #170	@ 0xaa
 801270c:	009b      	lsls	r3, r3, #2
 801270e:	5cd3      	ldrb	r3, [r2, r3]
 8012710:	2b01      	cmp	r3, #1
 8012712:	d101      	bne.n	8012718 <HAL_PCD_Start+0x18>
 8012714:	2302      	movs	r3, #2
 8012716:	e014      	b.n	8012742 <HAL_PCD_Start+0x42>
 8012718:	687a      	ldr	r2, [r7, #4]
 801271a:	23aa      	movs	r3, #170	@ 0xaa
 801271c:	009b      	lsls	r3, r3, #2
 801271e:	2101      	movs	r1, #1
 8012720:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	0018      	movs	r0, r3
 8012728:	f005 fdb4 	bl	8018294 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	0018      	movs	r0, r3
 8012732:	f007 fdb7 	bl	801a2a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8012736:	687a      	ldr	r2, [r7, #4]
 8012738:	23aa      	movs	r3, #170	@ 0xaa
 801273a:	009b      	lsls	r3, r3, #2
 801273c:	2100      	movs	r1, #0
 801273e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012740:	2300      	movs	r3, #0
}
 8012742:	0018      	movs	r0, r3
 8012744:	46bd      	mov	sp, r7
 8012746:	b002      	add	sp, #8
 8012748:	bd80      	pop	{r7, pc}
	...

0801274c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b084      	sub	sp, #16
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	0018      	movs	r0, r3
 801275a:	f007 fdb9 	bl	801a2d0 <USB_ReadInterrupts>
 801275e:	0003      	movs	r3, r0
 8012760:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8012762:	68fa      	ldr	r2, [r7, #12]
 8012764:	2380      	movs	r3, #128	@ 0x80
 8012766:	021b      	lsls	r3, r3, #8
 8012768:	4013      	ands	r3, r2
 801276a:	d004      	beq.n	8012776 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	0018      	movs	r0, r3
 8012770:	f000 fb62 	bl	8012e38 <PCD_EP_ISR_Handler>

    return;
 8012774:	e11d      	b.n	80129b2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8012776:	68fa      	ldr	r2, [r7, #12]
 8012778:	2380      	movs	r3, #128	@ 0x80
 801277a:	00db      	lsls	r3, r3, #3
 801277c:	4013      	ands	r3, r2
 801277e:	d015      	beq.n	80127ac <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	2244      	movs	r2, #68	@ 0x44
 8012786:	5a9b      	ldrh	r3, [r3, r2]
 8012788:	b29a      	uxth	r2, r3
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	498a      	ldr	r1, [pc, #552]	@ (80129b8 <HAL_PCD_IRQHandler+0x26c>)
 8012790:	400a      	ands	r2, r1
 8012792:	b291      	uxth	r1, r2
 8012794:	2244      	movs	r2, #68	@ 0x44
 8012796:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	0018      	movs	r0, r3
 801279c:	f009 fe57 	bl	801c44e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2100      	movs	r1, #0
 80127a4:	0018      	movs	r0, r3
 80127a6:	f000 f915 	bl	80129d4 <HAL_PCD_SetAddress>

    return;
 80127aa:	e102      	b.n	80129b2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80127ac:	68fa      	ldr	r2, [r7, #12]
 80127ae:	2380      	movs	r3, #128	@ 0x80
 80127b0:	01db      	lsls	r3, r3, #7
 80127b2:	4013      	ands	r3, r2
 80127b4:	d00c      	beq.n	80127d0 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	2244      	movs	r2, #68	@ 0x44
 80127bc:	5a9b      	ldrh	r3, [r3, r2]
 80127be:	b29a      	uxth	r2, r3
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	497d      	ldr	r1, [pc, #500]	@ (80129bc <HAL_PCD_IRQHandler+0x270>)
 80127c6:	400a      	ands	r2, r1
 80127c8:	b291      	uxth	r1, r2
 80127ca:	2244      	movs	r2, #68	@ 0x44
 80127cc:	5299      	strh	r1, [r3, r2]

    return;
 80127ce:	e0f0      	b.n	80129b2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80127d0:	68fa      	ldr	r2, [r7, #12]
 80127d2:	2380      	movs	r3, #128	@ 0x80
 80127d4:	019b      	lsls	r3, r3, #6
 80127d6:	4013      	ands	r3, r2
 80127d8:	d00c      	beq.n	80127f4 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	2244      	movs	r2, #68	@ 0x44
 80127e0:	5a9b      	ldrh	r3, [r3, r2]
 80127e2:	b29a      	uxth	r2, r3
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	4975      	ldr	r1, [pc, #468]	@ (80129c0 <HAL_PCD_IRQHandler+0x274>)
 80127ea:	400a      	ands	r2, r1
 80127ec:	b291      	uxth	r1, r2
 80127ee:	2244      	movs	r2, #68	@ 0x44
 80127f0:	5299      	strh	r1, [r3, r2]

    return;
 80127f2:	e0de      	b.n	80129b2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80127f4:	68fa      	ldr	r2, [r7, #12]
 80127f6:	2380      	movs	r3, #128	@ 0x80
 80127f8:	015b      	lsls	r3, r3, #5
 80127fa:	4013      	ands	r3, r2
 80127fc:	d038      	beq.n	8012870 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	2240      	movs	r2, #64	@ 0x40
 8012804:	5a9b      	ldrh	r3, [r3, r2]
 8012806:	b29a      	uxth	r2, r3
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	2104      	movs	r1, #4
 801280e:	438a      	bics	r2, r1
 8012810:	b291      	uxth	r1, r2
 8012812:	2240      	movs	r2, #64	@ 0x40
 8012814:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	2240      	movs	r2, #64	@ 0x40
 801281c:	5a9b      	ldrh	r3, [r3, r2]
 801281e:	b29a      	uxth	r2, r3
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	2108      	movs	r1, #8
 8012826:	438a      	bics	r2, r1
 8012828:	b291      	uxth	r1, r2
 801282a:	2240      	movs	r2, #64	@ 0x40
 801282c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 801282e:	687a      	ldr	r2, [r7, #4]
 8012830:	23b8      	movs	r3, #184	@ 0xb8
 8012832:	009b      	lsls	r3, r3, #2
 8012834:	5cd3      	ldrb	r3, [r2, r3]
 8012836:	2b01      	cmp	r3, #1
 8012838:	d109      	bne.n	801284e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 801283a:	687a      	ldr	r2, [r7, #4]
 801283c:	23b8      	movs	r3, #184	@ 0xb8
 801283e:	009b      	lsls	r3, r3, #2
 8012840:	2100      	movs	r1, #0
 8012842:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2100      	movs	r1, #0
 8012848:	0018      	movs	r0, r3
 801284a:	f001 fc9f 	bl	801418c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	0018      	movs	r0, r3
 8012852:	f009 fe3d 	bl	801c4d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	2244      	movs	r2, #68	@ 0x44
 801285c:	5a9b      	ldrh	r3, [r3, r2]
 801285e:	b29a      	uxth	r2, r3
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	4957      	ldr	r1, [pc, #348]	@ (80129c4 <HAL_PCD_IRQHandler+0x278>)
 8012866:	400a      	ands	r2, r1
 8012868:	b291      	uxth	r1, r2
 801286a:	2244      	movs	r2, #68	@ 0x44
 801286c:	5299      	strh	r1, [r3, r2]

    return;
 801286e:	e0a0      	b.n	80129b2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8012870:	68fa      	ldr	r2, [r7, #12]
 8012872:	2380      	movs	r3, #128	@ 0x80
 8012874:	011b      	lsls	r3, r3, #4
 8012876:	4013      	ands	r3, r2
 8012878:	d028      	beq.n	80128cc <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	2240      	movs	r2, #64	@ 0x40
 8012880:	5a9b      	ldrh	r3, [r3, r2]
 8012882:	b29a      	uxth	r2, r3
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	2108      	movs	r1, #8
 801288a:	430a      	orrs	r2, r1
 801288c:	b291      	uxth	r1, r2
 801288e:	2240      	movs	r2, #64	@ 0x40
 8012890:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	2244      	movs	r2, #68	@ 0x44
 8012898:	5a9b      	ldrh	r3, [r3, r2]
 801289a:	b29a      	uxth	r2, r3
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	4949      	ldr	r1, [pc, #292]	@ (80129c8 <HAL_PCD_IRQHandler+0x27c>)
 80128a2:	400a      	ands	r2, r1
 80128a4:	b291      	uxth	r1, r2
 80128a6:	2244      	movs	r2, #68	@ 0x44
 80128a8:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	2240      	movs	r2, #64	@ 0x40
 80128b0:	5a9b      	ldrh	r3, [r3, r2]
 80128b2:	b29a      	uxth	r2, r3
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	2104      	movs	r1, #4
 80128ba:	430a      	orrs	r2, r1
 80128bc:	b291      	uxth	r1, r2
 80128be:	2240      	movs	r2, #64	@ 0x40
 80128c0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	0018      	movs	r0, r3
 80128c6:	f009 fde7 	bl	801c498 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80128ca:	e072      	b.n	80129b2 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	2280      	movs	r2, #128	@ 0x80
 80128d0:	4013      	ands	r3, r2
 80128d2:	d046      	beq.n	8012962 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	2244      	movs	r2, #68	@ 0x44
 80128da:	5a9b      	ldrh	r3, [r3, r2]
 80128dc:	b29a      	uxth	r2, r3
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	2180      	movs	r1, #128	@ 0x80
 80128e4:	438a      	bics	r2, r1
 80128e6:	b291      	uxth	r1, r2
 80128e8:	2244      	movs	r2, #68	@ 0x44
 80128ea:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80128ec:	687a      	ldr	r2, [r7, #4]
 80128ee:	23b8      	movs	r3, #184	@ 0xb8
 80128f0:	009b      	lsls	r3, r3, #2
 80128f2:	5cd3      	ldrb	r3, [r2, r3]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d12f      	bne.n	8012958 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2240      	movs	r2, #64	@ 0x40
 80128fe:	5a9b      	ldrh	r3, [r3, r2]
 8012900:	b29a      	uxth	r2, r3
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	2104      	movs	r1, #4
 8012908:	430a      	orrs	r2, r1
 801290a:	b291      	uxth	r1, r2
 801290c:	2240      	movs	r2, #64	@ 0x40
 801290e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	2240      	movs	r2, #64	@ 0x40
 8012916:	5a9b      	ldrh	r3, [r3, r2]
 8012918:	b29a      	uxth	r2, r3
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	2108      	movs	r1, #8
 8012920:	430a      	orrs	r2, r1
 8012922:	b291      	uxth	r1, r2
 8012924:	2240      	movs	r2, #64	@ 0x40
 8012926:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8012928:	687a      	ldr	r2, [r7, #4]
 801292a:	23b8      	movs	r3, #184	@ 0xb8
 801292c:	009b      	lsls	r3, r3, #2
 801292e:	2101      	movs	r1, #1
 8012930:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	2254      	movs	r2, #84	@ 0x54
 8012938:	5a9b      	ldrh	r3, [r3, r2]
 801293a:	b29b      	uxth	r3, r3
 801293c:	089b      	lsrs	r3, r3, #2
 801293e:	223c      	movs	r2, #60	@ 0x3c
 8012940:	4013      	ands	r3, r2
 8012942:	0019      	movs	r1, r3
 8012944:	687a      	ldr	r2, [r7, #4]
 8012946:	23b9      	movs	r3, #185	@ 0xb9
 8012948:	009b      	lsls	r3, r3, #2
 801294a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2101      	movs	r1, #1
 8012950:	0018      	movs	r0, r3
 8012952:	f001 fc1b 	bl	801418c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8012956:	e02c      	b.n	80129b2 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	0018      	movs	r0, r3
 801295c:	f009 fd9c 	bl	801c498 <HAL_PCD_SuspendCallback>
    return;
 8012960:	e027      	b.n	80129b2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8012962:	68fa      	ldr	r2, [r7, #12]
 8012964:	2380      	movs	r3, #128	@ 0x80
 8012966:	009b      	lsls	r3, r3, #2
 8012968:	4013      	ands	r3, r2
 801296a:	d010      	beq.n	801298e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	2244      	movs	r2, #68	@ 0x44
 8012972:	5a9b      	ldrh	r3, [r3, r2]
 8012974:	b29a      	uxth	r2, r3
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	4914      	ldr	r1, [pc, #80]	@ (80129cc <HAL_PCD_IRQHandler+0x280>)
 801297c:	400a      	ands	r2, r1
 801297e:	b291      	uxth	r1, r2
 8012980:	2244      	movs	r2, #68	@ 0x44
 8012982:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	0018      	movs	r0, r3
 8012988:	f009 fd52 	bl	801c430 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 801298c:	e011      	b.n	80129b2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 801298e:	68fa      	ldr	r2, [r7, #12]
 8012990:	2380      	movs	r3, #128	@ 0x80
 8012992:	005b      	lsls	r3, r3, #1
 8012994:	4013      	ands	r3, r2
 8012996:	d00c      	beq.n	80129b2 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	2244      	movs	r2, #68	@ 0x44
 801299e:	5a9b      	ldrh	r3, [r3, r2]
 80129a0:	b29a      	uxth	r2, r3
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	490a      	ldr	r1, [pc, #40]	@ (80129d0 <HAL_PCD_IRQHandler+0x284>)
 80129a8:	400a      	ands	r2, r1
 80129aa:	b291      	uxth	r1, r2
 80129ac:	2244      	movs	r2, #68	@ 0x44
 80129ae:	5299      	strh	r1, [r3, r2]

    return;
 80129b0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80129b2:	46bd      	mov	sp, r7
 80129b4:	b004      	add	sp, #16
 80129b6:	bd80      	pop	{r7, pc}
 80129b8:	fffffbff 	.word	0xfffffbff
 80129bc:	ffffbfff 	.word	0xffffbfff
 80129c0:	ffffdfff 	.word	0xffffdfff
 80129c4:	ffffefff 	.word	0xffffefff
 80129c8:	fffff7ff 	.word	0xfffff7ff
 80129cc:	fffffdff 	.word	0xfffffdff
 80129d0:	fffffeff 	.word	0xfffffeff

080129d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
 80129dc:	000a      	movs	r2, r1
 80129de:	1cfb      	adds	r3, r7, #3
 80129e0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80129e2:	687a      	ldr	r2, [r7, #4]
 80129e4:	23aa      	movs	r3, #170	@ 0xaa
 80129e6:	009b      	lsls	r3, r3, #2
 80129e8:	5cd3      	ldrb	r3, [r2, r3]
 80129ea:	2b01      	cmp	r3, #1
 80129ec:	d101      	bne.n	80129f2 <HAL_PCD_SetAddress+0x1e>
 80129ee:	2302      	movs	r3, #2
 80129f0:	e017      	b.n	8012a22 <HAL_PCD_SetAddress+0x4e>
 80129f2:	687a      	ldr	r2, [r7, #4]
 80129f4:	23aa      	movs	r3, #170	@ 0xaa
 80129f6:	009b      	lsls	r3, r3, #2
 80129f8:	2101      	movs	r1, #1
 80129fa:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	1cfa      	adds	r2, r7, #3
 8012a00:	2124      	movs	r1, #36	@ 0x24
 8012a02:	7812      	ldrb	r2, [r2, #0]
 8012a04:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	681a      	ldr	r2, [r3, #0]
 8012a0a:	1cfb      	adds	r3, r7, #3
 8012a0c:	781b      	ldrb	r3, [r3, #0]
 8012a0e:	0019      	movs	r1, r3
 8012a10:	0010      	movs	r0, r2
 8012a12:	f007 fc33 	bl	801a27c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8012a16:	687a      	ldr	r2, [r7, #4]
 8012a18:	23aa      	movs	r3, #170	@ 0xaa
 8012a1a:	009b      	lsls	r3, r3, #2
 8012a1c:	2100      	movs	r1, #0
 8012a1e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012a20:	2300      	movs	r3, #0
}
 8012a22:	0018      	movs	r0, r3
 8012a24:	46bd      	mov	sp, r7
 8012a26:	b002      	add	sp, #8
 8012a28:	bd80      	pop	{r7, pc}

08012a2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8012a2a:	b590      	push	{r4, r7, lr}
 8012a2c:	b085      	sub	sp, #20
 8012a2e:	af00      	add	r7, sp, #0
 8012a30:	6078      	str	r0, [r7, #4]
 8012a32:	000c      	movs	r4, r1
 8012a34:	0010      	movs	r0, r2
 8012a36:	0019      	movs	r1, r3
 8012a38:	1cfb      	adds	r3, r7, #3
 8012a3a:	1c22      	adds	r2, r4, #0
 8012a3c:	701a      	strb	r2, [r3, #0]
 8012a3e:	003b      	movs	r3, r7
 8012a40:	1c02      	adds	r2, r0, #0
 8012a42:	801a      	strh	r2, [r3, #0]
 8012a44:	1cbb      	adds	r3, r7, #2
 8012a46:	1c0a      	adds	r2, r1, #0
 8012a48:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8012a4a:	230b      	movs	r3, #11
 8012a4c:	18fb      	adds	r3, r7, r3
 8012a4e:	2200      	movs	r2, #0
 8012a50:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012a52:	1cfb      	adds	r3, r7, #3
 8012a54:	781b      	ldrb	r3, [r3, #0]
 8012a56:	b25b      	sxtb	r3, r3
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	da0f      	bge.n	8012a7c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012a5c:	1cfb      	adds	r3, r7, #3
 8012a5e:	781b      	ldrb	r3, [r3, #0]
 8012a60:	2207      	movs	r2, #7
 8012a62:	4013      	ands	r3, r2
 8012a64:	1c5a      	adds	r2, r3, #1
 8012a66:	0013      	movs	r3, r2
 8012a68:	009b      	lsls	r3, r3, #2
 8012a6a:	189b      	adds	r3, r3, r2
 8012a6c:	00db      	lsls	r3, r3, #3
 8012a6e:	687a      	ldr	r2, [r7, #4]
 8012a70:	18d3      	adds	r3, r2, r3
 8012a72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	2201      	movs	r2, #1
 8012a78:	705a      	strb	r2, [r3, #1]
 8012a7a:	e00f      	b.n	8012a9c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012a7c:	1cfb      	adds	r3, r7, #3
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	2207      	movs	r2, #7
 8012a82:	401a      	ands	r2, r3
 8012a84:	0013      	movs	r3, r2
 8012a86:	009b      	lsls	r3, r3, #2
 8012a88:	189b      	adds	r3, r3, r2
 8012a8a:	00db      	lsls	r3, r3, #3
 8012a8c:	3369      	adds	r3, #105	@ 0x69
 8012a8e:	33ff      	adds	r3, #255	@ 0xff
 8012a90:	687a      	ldr	r2, [r7, #4]
 8012a92:	18d3      	adds	r3, r2, r3
 8012a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	2200      	movs	r2, #0
 8012a9a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8012a9c:	1cfb      	adds	r3, r7, #3
 8012a9e:	781b      	ldrb	r3, [r3, #0]
 8012aa0:	2207      	movs	r2, #7
 8012aa2:	4013      	ands	r3, r2
 8012aa4:	b2da      	uxtb	r2, r3
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8012aaa:	003b      	movs	r3, r7
 8012aac:	881a      	ldrh	r2, [r3, #0]
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	1cba      	adds	r2, r7, #2
 8012ab6:	7812      	ldrb	r2, [r2, #0]
 8012ab8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8012aba:	1cbb      	adds	r3, r7, #2
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	2b02      	cmp	r3, #2
 8012ac0:	d102      	bne.n	8012ac8 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8012ac8:	687a      	ldr	r2, [r7, #4]
 8012aca:	23aa      	movs	r3, #170	@ 0xaa
 8012acc:	009b      	lsls	r3, r3, #2
 8012ace:	5cd3      	ldrb	r3, [r2, r3]
 8012ad0:	2b01      	cmp	r3, #1
 8012ad2:	d101      	bne.n	8012ad8 <HAL_PCD_EP_Open+0xae>
 8012ad4:	2302      	movs	r3, #2
 8012ad6:	e013      	b.n	8012b00 <HAL_PCD_EP_Open+0xd6>
 8012ad8:	687a      	ldr	r2, [r7, #4]
 8012ada:	23aa      	movs	r3, #170	@ 0xaa
 8012adc:	009b      	lsls	r3, r3, #2
 8012ade:	2101      	movs	r1, #1
 8012ae0:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	68fa      	ldr	r2, [r7, #12]
 8012ae8:	0011      	movs	r1, r2
 8012aea:	0018      	movs	r0, r3
 8012aec:	f005 fc2a 	bl	8018344 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012af0:	687a      	ldr	r2, [r7, #4]
 8012af2:	23aa      	movs	r3, #170	@ 0xaa
 8012af4:	009b      	lsls	r3, r3, #2
 8012af6:	2100      	movs	r1, #0
 8012af8:	54d1      	strb	r1, [r2, r3]

  return ret;
 8012afa:	230b      	movs	r3, #11
 8012afc:	18fb      	adds	r3, r7, r3
 8012afe:	781b      	ldrb	r3, [r3, #0]
}
 8012b00:	0018      	movs	r0, r3
 8012b02:	46bd      	mov	sp, r7
 8012b04:	b005      	add	sp, #20
 8012b06:	bd90      	pop	{r4, r7, pc}

08012b08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b084      	sub	sp, #16
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	000a      	movs	r2, r1
 8012b12:	1cfb      	adds	r3, r7, #3
 8012b14:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8012b16:	1cfb      	adds	r3, r7, #3
 8012b18:	781b      	ldrb	r3, [r3, #0]
 8012b1a:	b25b      	sxtb	r3, r3
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	da0f      	bge.n	8012b40 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012b20:	1cfb      	adds	r3, r7, #3
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	2207      	movs	r2, #7
 8012b26:	4013      	ands	r3, r2
 8012b28:	1c5a      	adds	r2, r3, #1
 8012b2a:	0013      	movs	r3, r2
 8012b2c:	009b      	lsls	r3, r3, #2
 8012b2e:	189b      	adds	r3, r3, r2
 8012b30:	00db      	lsls	r3, r3, #3
 8012b32:	687a      	ldr	r2, [r7, #4]
 8012b34:	18d3      	adds	r3, r2, r3
 8012b36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	2201      	movs	r2, #1
 8012b3c:	705a      	strb	r2, [r3, #1]
 8012b3e:	e00f      	b.n	8012b60 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012b40:	1cfb      	adds	r3, r7, #3
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	2207      	movs	r2, #7
 8012b46:	401a      	ands	r2, r3
 8012b48:	0013      	movs	r3, r2
 8012b4a:	009b      	lsls	r3, r3, #2
 8012b4c:	189b      	adds	r3, r3, r2
 8012b4e:	00db      	lsls	r3, r3, #3
 8012b50:	3369      	adds	r3, #105	@ 0x69
 8012b52:	33ff      	adds	r3, #255	@ 0xff
 8012b54:	687a      	ldr	r2, [r7, #4]
 8012b56:	18d3      	adds	r3, r2, r3
 8012b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8012b60:	1cfb      	adds	r3, r7, #3
 8012b62:	781b      	ldrb	r3, [r3, #0]
 8012b64:	2207      	movs	r2, #7
 8012b66:	4013      	ands	r3, r2
 8012b68:	b2da      	uxtb	r2, r3
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012b6e:	687a      	ldr	r2, [r7, #4]
 8012b70:	23aa      	movs	r3, #170	@ 0xaa
 8012b72:	009b      	lsls	r3, r3, #2
 8012b74:	5cd3      	ldrb	r3, [r2, r3]
 8012b76:	2b01      	cmp	r3, #1
 8012b78:	d101      	bne.n	8012b7e <HAL_PCD_EP_Close+0x76>
 8012b7a:	2302      	movs	r3, #2
 8012b7c:	e011      	b.n	8012ba2 <HAL_PCD_EP_Close+0x9a>
 8012b7e:	687a      	ldr	r2, [r7, #4]
 8012b80:	23aa      	movs	r3, #170	@ 0xaa
 8012b82:	009b      	lsls	r3, r3, #2
 8012b84:	2101      	movs	r1, #1
 8012b86:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	68fa      	ldr	r2, [r7, #12]
 8012b8e:	0011      	movs	r1, r2
 8012b90:	0018      	movs	r0, r3
 8012b92:	f005 ff79 	bl	8018a88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8012b96:	687a      	ldr	r2, [r7, #4]
 8012b98:	23aa      	movs	r3, #170	@ 0xaa
 8012b9a:	009b      	lsls	r3, r3, #2
 8012b9c:	2100      	movs	r1, #0
 8012b9e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8012ba0:	2300      	movs	r3, #0
}
 8012ba2:	0018      	movs	r0, r3
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	b004      	add	sp, #16
 8012ba8:	bd80      	pop	{r7, pc}

08012baa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012baa:	b580      	push	{r7, lr}
 8012bac:	b086      	sub	sp, #24
 8012bae:	af00      	add	r7, sp, #0
 8012bb0:	60f8      	str	r0, [r7, #12]
 8012bb2:	607a      	str	r2, [r7, #4]
 8012bb4:	603b      	str	r3, [r7, #0]
 8012bb6:	200b      	movs	r0, #11
 8012bb8:	183b      	adds	r3, r7, r0
 8012bba:	1c0a      	adds	r2, r1, #0
 8012bbc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012bbe:	0001      	movs	r1, r0
 8012bc0:	187b      	adds	r3, r7, r1
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	2207      	movs	r2, #7
 8012bc6:	401a      	ands	r2, r3
 8012bc8:	0013      	movs	r3, r2
 8012bca:	009b      	lsls	r3, r3, #2
 8012bcc:	189b      	adds	r3, r3, r2
 8012bce:	00db      	lsls	r3, r3, #3
 8012bd0:	3369      	adds	r3, #105	@ 0x69
 8012bd2:	33ff      	adds	r3, #255	@ 0xff
 8012bd4:	68fa      	ldr	r2, [r7, #12]
 8012bd6:	18d3      	adds	r3, r2, r3
 8012bd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	687a      	ldr	r2, [r7, #4]
 8012bde:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	683a      	ldr	r2, [r7, #0]
 8012be4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	2200      	movs	r2, #0
 8012bea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	2200      	movs	r2, #0
 8012bf0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012bf2:	187b      	adds	r3, r7, r1
 8012bf4:	781b      	ldrb	r3, [r3, #0]
 8012bf6:	2207      	movs	r2, #7
 8012bf8:	4013      	ands	r3, r2
 8012bfa:	b2da      	uxtb	r2, r3
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	697a      	ldr	r2, [r7, #20]
 8012c06:	0011      	movs	r1, r2
 8012c08:	0018      	movs	r0, r3
 8012c0a:	f006 f8fd 	bl	8018e08 <USB_EPStartXfer>

  return HAL_OK;
 8012c0e:	2300      	movs	r3, #0
}
 8012c10:	0018      	movs	r0, r3
 8012c12:	46bd      	mov	sp, r7
 8012c14:	b006      	add	sp, #24
 8012c16:	bd80      	pop	{r7, pc}

08012c18 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
 8012c20:	000a      	movs	r2, r1
 8012c22:	1cfb      	adds	r3, r7, #3
 8012c24:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8012c26:	1cfb      	adds	r3, r7, #3
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	2207      	movs	r2, #7
 8012c2c:	401a      	ands	r2, r3
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	23c2      	movs	r3, #194	@ 0xc2
 8012c32:	0059      	lsls	r1, r3, #1
 8012c34:	0013      	movs	r3, r2
 8012c36:	009b      	lsls	r3, r3, #2
 8012c38:	189b      	adds	r3, r3, r2
 8012c3a:	00db      	lsls	r3, r3, #3
 8012c3c:	18c3      	adds	r3, r0, r3
 8012c3e:	185b      	adds	r3, r3, r1
 8012c40:	681b      	ldr	r3, [r3, #0]
}
 8012c42:	0018      	movs	r0, r3
 8012c44:	46bd      	mov	sp, r7
 8012c46:	b002      	add	sp, #8
 8012c48:	bd80      	pop	{r7, pc}

08012c4a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012c4a:	b580      	push	{r7, lr}
 8012c4c:	b086      	sub	sp, #24
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	60f8      	str	r0, [r7, #12]
 8012c52:	607a      	str	r2, [r7, #4]
 8012c54:	603b      	str	r3, [r7, #0]
 8012c56:	200b      	movs	r0, #11
 8012c58:	183b      	adds	r3, r7, r0
 8012c5a:	1c0a      	adds	r2, r1, #0
 8012c5c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012c5e:	183b      	adds	r3, r7, r0
 8012c60:	781b      	ldrb	r3, [r3, #0]
 8012c62:	2207      	movs	r2, #7
 8012c64:	4013      	ands	r3, r2
 8012c66:	1c5a      	adds	r2, r3, #1
 8012c68:	0013      	movs	r3, r2
 8012c6a:	009b      	lsls	r3, r3, #2
 8012c6c:	189b      	adds	r3, r3, r2
 8012c6e:	00db      	lsls	r3, r3, #3
 8012c70:	68fa      	ldr	r2, [r7, #12]
 8012c72:	18d3      	adds	r3, r2, r3
 8012c74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8012c76:	697b      	ldr	r3, [r7, #20]
 8012c78:	687a      	ldr	r2, [r7, #4]
 8012c7a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012c7c:	697b      	ldr	r3, [r7, #20]
 8012c7e:	683a      	ldr	r2, [r7, #0]
 8012c80:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8012c82:	697b      	ldr	r3, [r7, #20]
 8012c84:	2224      	movs	r2, #36	@ 0x24
 8012c86:	2101      	movs	r1, #1
 8012c88:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8012c8a:	697b      	ldr	r3, [r7, #20]
 8012c8c:	683a      	ldr	r2, [r7, #0]
 8012c8e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	2200      	movs	r2, #0
 8012c94:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8012c96:	697b      	ldr	r3, [r7, #20]
 8012c98:	2201      	movs	r2, #1
 8012c9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012c9c:	183b      	adds	r3, r7, r0
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	2207      	movs	r2, #7
 8012ca2:	4013      	ands	r3, r2
 8012ca4:	b2da      	uxtb	r2, r3
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	697a      	ldr	r2, [r7, #20]
 8012cb0:	0011      	movs	r1, r2
 8012cb2:	0018      	movs	r0, r3
 8012cb4:	f006 f8a8 	bl	8018e08 <USB_EPStartXfer>

  return HAL_OK;
 8012cb8:	2300      	movs	r3, #0
}
 8012cba:	0018      	movs	r0, r3
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	b006      	add	sp, #24
 8012cc0:	bd80      	pop	{r7, pc}

08012cc2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012cc2:	b580      	push	{r7, lr}
 8012cc4:	b084      	sub	sp, #16
 8012cc6:	af00      	add	r7, sp, #0
 8012cc8:	6078      	str	r0, [r7, #4]
 8012cca:	000a      	movs	r2, r1
 8012ccc:	1cfb      	adds	r3, r7, #3
 8012cce:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8012cd0:	1cfb      	adds	r3, r7, #3
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	2207      	movs	r2, #7
 8012cd6:	401a      	ands	r2, r3
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	685b      	ldr	r3, [r3, #4]
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	d901      	bls.n	8012ce4 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	e046      	b.n	8012d72 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012ce4:	1cfb      	adds	r3, r7, #3
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	b25b      	sxtb	r3, r3
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	da0f      	bge.n	8012d0e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012cee:	1cfb      	adds	r3, r7, #3
 8012cf0:	781b      	ldrb	r3, [r3, #0]
 8012cf2:	2207      	movs	r2, #7
 8012cf4:	4013      	ands	r3, r2
 8012cf6:	1c5a      	adds	r2, r3, #1
 8012cf8:	0013      	movs	r3, r2
 8012cfa:	009b      	lsls	r3, r3, #2
 8012cfc:	189b      	adds	r3, r3, r2
 8012cfe:	00db      	lsls	r3, r3, #3
 8012d00:	687a      	ldr	r2, [r7, #4]
 8012d02:	18d3      	adds	r3, r2, r3
 8012d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	2201      	movs	r2, #1
 8012d0a:	705a      	strb	r2, [r3, #1]
 8012d0c:	e00d      	b.n	8012d2a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8012d0e:	1cfb      	adds	r3, r7, #3
 8012d10:	781a      	ldrb	r2, [r3, #0]
 8012d12:	0013      	movs	r3, r2
 8012d14:	009b      	lsls	r3, r3, #2
 8012d16:	189b      	adds	r3, r3, r2
 8012d18:	00db      	lsls	r3, r3, #3
 8012d1a:	3369      	adds	r3, #105	@ 0x69
 8012d1c:	33ff      	adds	r3, #255	@ 0xff
 8012d1e:	687a      	ldr	r2, [r7, #4]
 8012d20:	18d3      	adds	r3, r2, r3
 8012d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	2200      	movs	r2, #0
 8012d28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	2201      	movs	r2, #1
 8012d2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012d30:	1cfb      	adds	r3, r7, #3
 8012d32:	781b      	ldrb	r3, [r3, #0]
 8012d34:	2207      	movs	r2, #7
 8012d36:	4013      	ands	r3, r2
 8012d38:	b2da      	uxtb	r2, r3
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012d3e:	687a      	ldr	r2, [r7, #4]
 8012d40:	23aa      	movs	r3, #170	@ 0xaa
 8012d42:	009b      	lsls	r3, r3, #2
 8012d44:	5cd3      	ldrb	r3, [r2, r3]
 8012d46:	2b01      	cmp	r3, #1
 8012d48:	d101      	bne.n	8012d4e <HAL_PCD_EP_SetStall+0x8c>
 8012d4a:	2302      	movs	r3, #2
 8012d4c:	e011      	b.n	8012d72 <HAL_PCD_EP_SetStall+0xb0>
 8012d4e:	687a      	ldr	r2, [r7, #4]
 8012d50:	23aa      	movs	r3, #170	@ 0xaa
 8012d52:	009b      	lsls	r3, r3, #2
 8012d54:	2101      	movs	r1, #1
 8012d56:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	68fa      	ldr	r2, [r7, #12]
 8012d5e:	0011      	movs	r1, r2
 8012d60:	0018      	movs	r0, r3
 8012d62:	f007 f989 	bl	801a078 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8012d66:	687a      	ldr	r2, [r7, #4]
 8012d68:	23aa      	movs	r3, #170	@ 0xaa
 8012d6a:	009b      	lsls	r3, r3, #2
 8012d6c:	2100      	movs	r1, #0
 8012d6e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012d70:	2300      	movs	r3, #0
}
 8012d72:	0018      	movs	r0, r3
 8012d74:	46bd      	mov	sp, r7
 8012d76:	b004      	add	sp, #16
 8012d78:	bd80      	pop	{r7, pc}

08012d7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012d7a:	b580      	push	{r7, lr}
 8012d7c:	b084      	sub	sp, #16
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	6078      	str	r0, [r7, #4]
 8012d82:	000a      	movs	r2, r1
 8012d84:	1cfb      	adds	r3, r7, #3
 8012d86:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8012d88:	1cfb      	adds	r3, r7, #3
 8012d8a:	781b      	ldrb	r3, [r3, #0]
 8012d8c:	220f      	movs	r2, #15
 8012d8e:	401a      	ands	r2, r3
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	685b      	ldr	r3, [r3, #4]
 8012d94:	429a      	cmp	r2, r3
 8012d96:	d901      	bls.n	8012d9c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8012d98:	2301      	movs	r3, #1
 8012d9a:	e048      	b.n	8012e2e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012d9c:	1cfb      	adds	r3, r7, #3
 8012d9e:	781b      	ldrb	r3, [r3, #0]
 8012da0:	b25b      	sxtb	r3, r3
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	da0f      	bge.n	8012dc6 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012da6:	1cfb      	adds	r3, r7, #3
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	2207      	movs	r2, #7
 8012dac:	4013      	ands	r3, r2
 8012dae:	1c5a      	adds	r2, r3, #1
 8012db0:	0013      	movs	r3, r2
 8012db2:	009b      	lsls	r3, r3, #2
 8012db4:	189b      	adds	r3, r3, r2
 8012db6:	00db      	lsls	r3, r3, #3
 8012db8:	687a      	ldr	r2, [r7, #4]
 8012dba:	18d3      	adds	r3, r2, r3
 8012dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	2201      	movs	r2, #1
 8012dc2:	705a      	strb	r2, [r3, #1]
 8012dc4:	e00f      	b.n	8012de6 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012dc6:	1cfb      	adds	r3, r7, #3
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	2207      	movs	r2, #7
 8012dcc:	401a      	ands	r2, r3
 8012dce:	0013      	movs	r3, r2
 8012dd0:	009b      	lsls	r3, r3, #2
 8012dd2:	189b      	adds	r3, r3, r2
 8012dd4:	00db      	lsls	r3, r3, #3
 8012dd6:	3369      	adds	r3, #105	@ 0x69
 8012dd8:	33ff      	adds	r3, #255	@ 0xff
 8012dda:	687a      	ldr	r2, [r7, #4]
 8012ddc:	18d3      	adds	r3, r2, r3
 8012dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	2200      	movs	r2, #0
 8012de4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	2200      	movs	r2, #0
 8012dea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012dec:	1cfb      	adds	r3, r7, #3
 8012dee:	781b      	ldrb	r3, [r3, #0]
 8012df0:	2207      	movs	r2, #7
 8012df2:	4013      	ands	r3, r2
 8012df4:	b2da      	uxtb	r2, r3
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012dfa:	687a      	ldr	r2, [r7, #4]
 8012dfc:	23aa      	movs	r3, #170	@ 0xaa
 8012dfe:	009b      	lsls	r3, r3, #2
 8012e00:	5cd3      	ldrb	r3, [r2, r3]
 8012e02:	2b01      	cmp	r3, #1
 8012e04:	d101      	bne.n	8012e0a <HAL_PCD_EP_ClrStall+0x90>
 8012e06:	2302      	movs	r3, #2
 8012e08:	e011      	b.n	8012e2e <HAL_PCD_EP_ClrStall+0xb4>
 8012e0a:	687a      	ldr	r2, [r7, #4]
 8012e0c:	23aa      	movs	r3, #170	@ 0xaa
 8012e0e:	009b      	lsls	r3, r3, #2
 8012e10:	2101      	movs	r1, #1
 8012e12:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	68fa      	ldr	r2, [r7, #12]
 8012e1a:	0011      	movs	r1, r2
 8012e1c:	0018      	movs	r0, r3
 8012e1e:	f007 f97b 	bl	801a118 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8012e22:	687a      	ldr	r2, [r7, #4]
 8012e24:	23aa      	movs	r3, #170	@ 0xaa
 8012e26:	009b      	lsls	r3, r3, #2
 8012e28:	2100      	movs	r1, #0
 8012e2a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012e2c:	2300      	movs	r3, #0
}
 8012e2e:	0018      	movs	r0, r3
 8012e30:	46bd      	mov	sp, r7
 8012e32:	b004      	add	sp, #16
 8012e34:	bd80      	pop	{r7, pc}
	...

08012e38 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8012e38:	b5b0      	push	{r4, r5, r7, lr}
 8012e3a:	b096      	sub	sp, #88	@ 0x58
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8012e40:	f000 fbec 	bl	801361c <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	681a      	ldr	r2, [r3, #0]
 8012e48:	204e      	movs	r0, #78	@ 0x4e
 8012e4a:	183b      	adds	r3, r7, r0
 8012e4c:	2144      	movs	r1, #68	@ 0x44
 8012e4e:	5a52      	ldrh	r2, [r2, r1]
 8012e50:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8012e52:	183b      	adds	r3, r7, r0
 8012e54:	881b      	ldrh	r3, [r3, #0]
 8012e56:	b2da      	uxtb	r2, r3
 8012e58:	244d      	movs	r4, #77	@ 0x4d
 8012e5a:	193b      	adds	r3, r7, r4
 8012e5c:	210f      	movs	r1, #15
 8012e5e:	400a      	ands	r2, r1
 8012e60:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8012e62:	193b      	adds	r3, r7, r4
 8012e64:	781b      	ldrb	r3, [r3, #0]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d000      	beq.n	8012e6c <PCD_EP_ISR_Handler+0x34>
 8012e6a:	e18f      	b.n	801318c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8012e6c:	183b      	adds	r3, r7, r0
 8012e6e:	881b      	ldrh	r3, [r3, #0]
 8012e70:	2210      	movs	r2, #16
 8012e72:	4013      	ands	r3, r2
 8012e74:	d155      	bne.n	8012f22 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	881b      	ldrh	r3, [r3, #0]
 8012e7c:	b29a      	uxth	r2, r3
 8012e7e:	200e      	movs	r0, #14
 8012e80:	183b      	adds	r3, r7, r0
 8012e82:	49bb      	ldr	r1, [pc, #748]	@ (8013170 <PCD_EP_ISR_Handler+0x338>)
 8012e84:	400a      	ands	r2, r1
 8012e86:	801a      	strh	r2, [r3, #0]
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	183a      	adds	r2, r7, r0
 8012e8e:	8812      	ldrh	r2, [r2, #0]
 8012e90:	49b8      	ldr	r1, [pc, #736]	@ (8013174 <PCD_EP_ISR_Handler+0x33c>)
 8012e92:	430a      	orrs	r2, r1
 8012e94:	b292      	uxth	r2, r2
 8012e96:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	3328      	adds	r3, #40	@ 0x28
 8012e9c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	2250      	movs	r2, #80	@ 0x50
 8012ea4:	5a9b      	ldrh	r3, [r3, r2]
 8012ea6:	b29b      	uxth	r3, r3
 8012ea8:	001a      	movs	r2, r3
 8012eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012eac:	781b      	ldrb	r3, [r3, #0]
 8012eae:	00db      	lsls	r3, r3, #3
 8012eb0:	18d2      	adds	r2, r2, r3
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	18d3      	adds	r3, r2, r3
 8012eb8:	4aaf      	ldr	r2, [pc, #700]	@ (8013178 <PCD_EP_ISR_Handler+0x340>)
 8012eba:	4694      	mov	ip, r2
 8012ebc:	4463      	add	r3, ip
 8012ebe:	881b      	ldrh	r3, [r3, #0]
 8012ec0:	059b      	lsls	r3, r3, #22
 8012ec2:	0d9a      	lsrs	r2, r3, #22
 8012ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ec6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8012ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012eca:	695a      	ldr	r2, [r3, #20]
 8012ecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ece:	69db      	ldr	r3, [r3, #28]
 8012ed0:	18d2      	adds	r2, r2, r3
 8012ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ed4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	2100      	movs	r1, #0
 8012eda:	0018      	movs	r0, r3
 8012edc:	f009 fa8a 	bl	801c3f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2224      	movs	r2, #36	@ 0x24
 8012ee4:	5c9b      	ldrb	r3, [r3, r2]
 8012ee6:	b2db      	uxtb	r3, r3
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d101      	bne.n	8012ef0 <PCD_EP_ISR_Handler+0xb8>
 8012eec:	f000 fb96 	bl	801361c <PCD_EP_ISR_Handler+0x7e4>
 8012ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ef2:	699b      	ldr	r3, [r3, #24]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d001      	beq.n	8012efc <PCD_EP_ISR_Handler+0xc4>
 8012ef8:	f000 fb90 	bl	801361c <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2224      	movs	r2, #36	@ 0x24
 8012f00:	5c9b      	ldrb	r3, [r3, r2]
 8012f02:	b2db      	uxtb	r3, r3
 8012f04:	2280      	movs	r2, #128	@ 0x80
 8012f06:	4252      	negs	r2, r2
 8012f08:	4313      	orrs	r3, r2
 8012f0a:	b2da      	uxtb	r2, r3
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	0011      	movs	r1, r2
 8012f12:	224c      	movs	r2, #76	@ 0x4c
 8012f14:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2224      	movs	r2, #36	@ 0x24
 8012f1a:	2100      	movs	r1, #0
 8012f1c:	5499      	strb	r1, [r3, r2]
 8012f1e:	f000 fb7d 	bl	801361c <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	3369      	adds	r3, #105	@ 0x69
 8012f26:	33ff      	adds	r3, #255	@ 0xff
 8012f28:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681a      	ldr	r2, [r3, #0]
 8012f2e:	214a      	movs	r1, #74	@ 0x4a
 8012f30:	187b      	adds	r3, r7, r1
 8012f32:	8812      	ldrh	r2, [r2, #0]
 8012f34:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8012f36:	187b      	adds	r3, r7, r1
 8012f38:	881a      	ldrh	r2, [r3, #0]
 8012f3a:	2380      	movs	r3, #128	@ 0x80
 8012f3c:	011b      	lsls	r3, r3, #4
 8012f3e:	4013      	ands	r3, r2
 8012f40:	d037      	beq.n	8012fb2 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	2250      	movs	r2, #80	@ 0x50
 8012f48:	5a9b      	ldrh	r3, [r3, r2]
 8012f4a:	b29b      	uxth	r3, r3
 8012f4c:	001a      	movs	r2, r3
 8012f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f50:	781b      	ldrb	r3, [r3, #0]
 8012f52:	00db      	lsls	r3, r3, #3
 8012f54:	18d2      	adds	r2, r2, r3
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	18d3      	adds	r3, r2, r3
 8012f5c:	4a87      	ldr	r2, [pc, #540]	@ (801317c <PCD_EP_ISR_Handler+0x344>)
 8012f5e:	4694      	mov	ip, r2
 8012f60:	4463      	add	r3, ip
 8012f62:	881b      	ldrh	r3, [r3, #0]
 8012f64:	059b      	lsls	r3, r3, #22
 8012f66:	0d9a      	lsrs	r2, r3, #22
 8012f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f6a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	6818      	ldr	r0, [r3, #0]
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	22ac      	movs	r2, #172	@ 0xac
 8012f74:	0092      	lsls	r2, r2, #2
 8012f76:	1899      	adds	r1, r3, r2
 8012f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f7a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8012f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f7e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8012f80:	b29b      	uxth	r3, r3
 8012f82:	f007 f9fc 	bl	801a37e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	881b      	ldrh	r3, [r3, #0]
 8012f8c:	b29a      	uxth	r2, r3
 8012f8e:	2010      	movs	r0, #16
 8012f90:	183b      	adds	r3, r7, r0
 8012f92:	497b      	ldr	r1, [pc, #492]	@ (8013180 <PCD_EP_ISR_Handler+0x348>)
 8012f94:	400a      	ands	r2, r1
 8012f96:	801a      	strh	r2, [r3, #0]
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	183a      	adds	r2, r7, r0
 8012f9e:	8812      	ldrh	r2, [r2, #0]
 8012fa0:	2180      	movs	r1, #128	@ 0x80
 8012fa2:	430a      	orrs	r2, r1
 8012fa4:	b292      	uxth	r2, r2
 8012fa6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	0018      	movs	r0, r3
 8012fac:	f009 f9ec 	bl	801c388 <HAL_PCD_SetupStageCallback>
 8012fb0:	e334      	b.n	801361c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8012fb2:	234a      	movs	r3, #74	@ 0x4a
 8012fb4:	18fb      	adds	r3, r7, r3
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	5e9b      	ldrsh	r3, [r3, r2]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	db00      	blt.n	8012fc0 <PCD_EP_ISR_Handler+0x188>
 8012fbe:	e32d      	b.n	801361c <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	881b      	ldrh	r3, [r3, #0]
 8012fc6:	b29a      	uxth	r2, r3
 8012fc8:	201e      	movs	r0, #30
 8012fca:	183b      	adds	r3, r7, r0
 8012fcc:	496c      	ldr	r1, [pc, #432]	@ (8013180 <PCD_EP_ISR_Handler+0x348>)
 8012fce:	400a      	ands	r2, r1
 8012fd0:	801a      	strh	r2, [r3, #0]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	183a      	adds	r2, r7, r0
 8012fd8:	8812      	ldrh	r2, [r2, #0]
 8012fda:	2180      	movs	r1, #128	@ 0x80
 8012fdc:	430a      	orrs	r2, r1
 8012fde:	b292      	uxth	r2, r2
 8012fe0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	2250      	movs	r2, #80	@ 0x50
 8012fe8:	5a9b      	ldrh	r3, [r3, r2]
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	001a      	movs	r2, r3
 8012fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	00db      	lsls	r3, r3, #3
 8012ff4:	18d2      	adds	r2, r2, r3
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	18d3      	adds	r3, r2, r3
 8012ffc:	4a5f      	ldr	r2, [pc, #380]	@ (801317c <PCD_EP_ISR_Handler+0x344>)
 8012ffe:	4694      	mov	ip, r2
 8013000:	4463      	add	r3, ip
 8013002:	881b      	ldrh	r3, [r3, #0]
 8013004:	059b      	lsls	r3, r3, #22
 8013006:	0d9a      	lsrs	r2, r3, #22
 8013008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801300a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 801300c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801300e:	69db      	ldr	r3, [r3, #28]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d01a      	beq.n	801304a <PCD_EP_ISR_Handler+0x212>
 8013014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013016:	695b      	ldr	r3, [r3, #20]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d016      	beq.n	801304a <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	6818      	ldr	r0, [r3, #0]
 8013020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013022:	6959      	ldr	r1, [r3, #20]
 8013024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013026:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8013028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801302a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801302c:	b29b      	uxth	r3, r3
 801302e:	f007 f9a6 	bl	801a37e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8013032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013034:	695a      	ldr	r2, [r3, #20]
 8013036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013038:	69db      	ldr	r3, [r3, #28]
 801303a:	18d2      	adds	r2, r2, r3
 801303c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801303e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2100      	movs	r1, #0
 8013044:	0018      	movs	r0, r3
 8013046:	f009 f9b4 	bl	801c3b2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681a      	ldr	r2, [r3, #0]
 801304e:	214a      	movs	r1, #74	@ 0x4a
 8013050:	187b      	adds	r3, r7, r1
 8013052:	8812      	ldrh	r2, [r2, #0]
 8013054:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8013056:	187b      	adds	r3, r7, r1
 8013058:	881a      	ldrh	r2, [r3, #0]
 801305a:	2380      	movs	r3, #128	@ 0x80
 801305c:	011b      	lsls	r3, r3, #4
 801305e:	4013      	ands	r3, r2
 8013060:	d000      	beq.n	8013064 <PCD_EP_ISR_Handler+0x22c>
 8013062:	e2db      	b.n	801361c <PCD_EP_ISR_Handler+0x7e4>
 8013064:	187b      	adds	r3, r7, r1
 8013066:	881a      	ldrh	r2, [r3, #0]
 8013068:	23c0      	movs	r3, #192	@ 0xc0
 801306a:	019b      	lsls	r3, r3, #6
 801306c:	401a      	ands	r2, r3
 801306e:	23c0      	movs	r3, #192	@ 0xc0
 8013070:	019b      	lsls	r3, r3, #6
 8013072:	429a      	cmp	r2, r3
 8013074:	d100      	bne.n	8013078 <PCD_EP_ISR_Handler+0x240>
 8013076:	e2d1      	b.n	801361c <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	61bb      	str	r3, [r7, #24]
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	2250      	movs	r2, #80	@ 0x50
 8013084:	5a9b      	ldrh	r3, [r3, r2]
 8013086:	b29b      	uxth	r3, r3
 8013088:	001a      	movs	r2, r3
 801308a:	69bb      	ldr	r3, [r7, #24]
 801308c:	189b      	adds	r3, r3, r2
 801308e:	61bb      	str	r3, [r7, #24]
 8013090:	69bb      	ldr	r3, [r7, #24]
 8013092:	4a3a      	ldr	r2, [pc, #232]	@ (801317c <PCD_EP_ISR_Handler+0x344>)
 8013094:	4694      	mov	ip, r2
 8013096:	4463      	add	r3, ip
 8013098:	617b      	str	r3, [r7, #20]
 801309a:	697b      	ldr	r3, [r7, #20]
 801309c:	881b      	ldrh	r3, [r3, #0]
 801309e:	b29b      	uxth	r3, r3
 80130a0:	059b      	lsls	r3, r3, #22
 80130a2:	0d9b      	lsrs	r3, r3, #22
 80130a4:	b29a      	uxth	r2, r3
 80130a6:	697b      	ldr	r3, [r7, #20]
 80130a8:	801a      	strh	r2, [r3, #0]
 80130aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130ac:	691b      	ldr	r3, [r3, #16]
 80130ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80130b0:	d91a      	bls.n	80130e8 <PCD_EP_ISR_Handler+0x2b0>
 80130b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130b4:	691b      	ldr	r3, [r3, #16]
 80130b6:	095b      	lsrs	r3, r3, #5
 80130b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80130ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130bc:	691b      	ldr	r3, [r3, #16]
 80130be:	221f      	movs	r2, #31
 80130c0:	4013      	ands	r3, r2
 80130c2:	d102      	bne.n	80130ca <PCD_EP_ISR_Handler+0x292>
 80130c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80130c6:	3b01      	subs	r3, #1
 80130c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	881b      	ldrh	r3, [r3, #0]
 80130ce:	b29a      	uxth	r2, r3
 80130d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80130d2:	b29b      	uxth	r3, r3
 80130d4:	029b      	lsls	r3, r3, #10
 80130d6:	b29b      	uxth	r3, r3
 80130d8:	4313      	orrs	r3, r2
 80130da:	b29b      	uxth	r3, r3
 80130dc:	4a25      	ldr	r2, [pc, #148]	@ (8013174 <PCD_EP_ISR_Handler+0x33c>)
 80130de:	4313      	orrs	r3, r2
 80130e0:	b29a      	uxth	r2, r3
 80130e2:	697b      	ldr	r3, [r7, #20]
 80130e4:	801a      	strh	r2, [r3, #0]
 80130e6:	e023      	b.n	8013130 <PCD_EP_ISR_Handler+0x2f8>
 80130e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130ea:	691b      	ldr	r3, [r3, #16]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d108      	bne.n	8013102 <PCD_EP_ISR_Handler+0x2ca>
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	881b      	ldrh	r3, [r3, #0]
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	4a1f      	ldr	r2, [pc, #124]	@ (8013174 <PCD_EP_ISR_Handler+0x33c>)
 80130f8:	4313      	orrs	r3, r2
 80130fa:	b29a      	uxth	r2, r3
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	801a      	strh	r2, [r3, #0]
 8013100:	e016      	b.n	8013130 <PCD_EP_ISR_Handler+0x2f8>
 8013102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013104:	691b      	ldr	r3, [r3, #16]
 8013106:	085b      	lsrs	r3, r3, #1
 8013108:	647b      	str	r3, [r7, #68]	@ 0x44
 801310a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801310c:	691b      	ldr	r3, [r3, #16]
 801310e:	2201      	movs	r2, #1
 8013110:	4013      	ands	r3, r2
 8013112:	d002      	beq.n	801311a <PCD_EP_ISR_Handler+0x2e2>
 8013114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013116:	3301      	adds	r3, #1
 8013118:	647b      	str	r3, [r7, #68]	@ 0x44
 801311a:	697b      	ldr	r3, [r7, #20]
 801311c:	881b      	ldrh	r3, [r3, #0]
 801311e:	b29a      	uxth	r2, r3
 8013120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013122:	b29b      	uxth	r3, r3
 8013124:	029b      	lsls	r3, r3, #10
 8013126:	b29b      	uxth	r3, r3
 8013128:	4313      	orrs	r3, r2
 801312a:	b29a      	uxth	r2, r3
 801312c:	697b      	ldr	r3, [r7, #20]
 801312e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	881b      	ldrh	r3, [r3, #0]
 8013136:	b29a      	uxth	r2, r3
 8013138:	2012      	movs	r0, #18
 801313a:	183b      	adds	r3, r7, r0
 801313c:	4911      	ldr	r1, [pc, #68]	@ (8013184 <PCD_EP_ISR_Handler+0x34c>)
 801313e:	400a      	ands	r2, r1
 8013140:	801a      	strh	r2, [r3, #0]
 8013142:	183b      	adds	r3, r7, r0
 8013144:	183a      	adds	r2, r7, r0
 8013146:	8812      	ldrh	r2, [r2, #0]
 8013148:	2180      	movs	r1, #128	@ 0x80
 801314a:	0149      	lsls	r1, r1, #5
 801314c:	404a      	eors	r2, r1
 801314e:	801a      	strh	r2, [r3, #0]
 8013150:	183b      	adds	r3, r7, r0
 8013152:	183a      	adds	r2, r7, r0
 8013154:	8812      	ldrh	r2, [r2, #0]
 8013156:	2180      	movs	r1, #128	@ 0x80
 8013158:	0189      	lsls	r1, r1, #6
 801315a:	404a      	eors	r2, r1
 801315c:	801a      	strh	r2, [r3, #0]
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	183a      	adds	r2, r7, r0
 8013164:	8812      	ldrh	r2, [r2, #0]
 8013166:	4908      	ldr	r1, [pc, #32]	@ (8013188 <PCD_EP_ISR_Handler+0x350>)
 8013168:	430a      	orrs	r2, r1
 801316a:	b292      	uxth	r2, r2
 801316c:	801a      	strh	r2, [r3, #0]
 801316e:	e255      	b.n	801361c <PCD_EP_ISR_Handler+0x7e4>
 8013170:	ffff8f0f 	.word	0xffff8f0f
 8013174:	ffff8000 	.word	0xffff8000
 8013178:	00000402 	.word	0x00000402
 801317c:	00000406 	.word	0x00000406
 8013180:	00000f8f 	.word	0x00000f8f
 8013184:	ffffbf8f 	.word	0xffffbf8f
 8013188:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	001a      	movs	r2, r3
 8013192:	204d      	movs	r0, #77	@ 0x4d
 8013194:	183b      	adds	r3, r7, r0
 8013196:	781b      	ldrb	r3, [r3, #0]
 8013198:	009b      	lsls	r3, r3, #2
 801319a:	18d2      	adds	r2, r2, r3
 801319c:	214a      	movs	r1, #74	@ 0x4a
 801319e:	187b      	adds	r3, r7, r1
 80131a0:	8812      	ldrh	r2, [r2, #0]
 80131a2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80131a4:	187b      	adds	r3, r7, r1
 80131a6:	2200      	movs	r2, #0
 80131a8:	5e9b      	ldrsh	r3, [r3, r2]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	db00      	blt.n	80131b0 <PCD_EP_ISR_Handler+0x378>
 80131ae:	e0fa      	b.n	80133a6 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	001a      	movs	r2, r3
 80131b6:	183b      	adds	r3, r7, r0
 80131b8:	781b      	ldrb	r3, [r3, #0]
 80131ba:	009b      	lsls	r3, r3, #2
 80131bc:	18d3      	adds	r3, r2, r3
 80131be:	881b      	ldrh	r3, [r3, #0]
 80131c0:	b29a      	uxth	r2, r3
 80131c2:	2448      	movs	r4, #72	@ 0x48
 80131c4:	193b      	adds	r3, r7, r4
 80131c6:	49d1      	ldr	r1, [pc, #836]	@ (801350c <PCD_EP_ISR_Handler+0x6d4>)
 80131c8:	400a      	ands	r2, r1
 80131ca:	801a      	strh	r2, [r3, #0]
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	001a      	movs	r2, r3
 80131d2:	183b      	adds	r3, r7, r0
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	009b      	lsls	r3, r3, #2
 80131d8:	18d3      	adds	r3, r2, r3
 80131da:	193a      	adds	r2, r7, r4
 80131dc:	8812      	ldrh	r2, [r2, #0]
 80131de:	2180      	movs	r1, #128	@ 0x80
 80131e0:	430a      	orrs	r2, r1
 80131e2:	b292      	uxth	r2, r2
 80131e4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80131e6:	183b      	adds	r3, r7, r0
 80131e8:	781a      	ldrb	r2, [r3, #0]
 80131ea:	0013      	movs	r3, r2
 80131ec:	009b      	lsls	r3, r3, #2
 80131ee:	189b      	adds	r3, r3, r2
 80131f0:	00db      	lsls	r3, r3, #3
 80131f2:	3369      	adds	r3, #105	@ 0x69
 80131f4:	33ff      	adds	r3, #255	@ 0xff
 80131f6:	687a      	ldr	r2, [r7, #4]
 80131f8:	18d3      	adds	r3, r2, r3
 80131fa:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80131fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131fe:	7b1b      	ldrb	r3, [r3, #12]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d125      	bne.n	8013250 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	2250      	movs	r2, #80	@ 0x50
 801320a:	5a9b      	ldrh	r3, [r3, r2]
 801320c:	b29b      	uxth	r3, r3
 801320e:	001a      	movs	r2, r3
 8013210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	00db      	lsls	r3, r3, #3
 8013216:	18d2      	adds	r2, r2, r3
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	18d3      	adds	r3, r2, r3
 801321e:	4abc      	ldr	r2, [pc, #752]	@ (8013510 <PCD_EP_ISR_Handler+0x6d8>)
 8013220:	4694      	mov	ip, r2
 8013222:	4463      	add	r3, ip
 8013224:	881a      	ldrh	r2, [r3, #0]
 8013226:	2450      	movs	r4, #80	@ 0x50
 8013228:	193b      	adds	r3, r7, r4
 801322a:	0592      	lsls	r2, r2, #22
 801322c:	0d92      	lsrs	r2, r2, #22
 801322e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8013230:	193b      	adds	r3, r7, r4
 8013232:	881b      	ldrh	r3, [r3, #0]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d100      	bne.n	801323a <PCD_EP_ISR_Handler+0x402>
 8013238:	e08d      	b.n	8013356 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	6818      	ldr	r0, [r3, #0]
 801323e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013240:	6959      	ldr	r1, [r3, #20]
 8013242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013244:	88da      	ldrh	r2, [r3, #6]
 8013246:	193b      	adds	r3, r7, r4
 8013248:	881b      	ldrh	r3, [r3, #0]
 801324a:	f007 f898 	bl	801a37e <USB_ReadPMA>
 801324e:	e082      	b.n	8013356 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8013250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013252:	78db      	ldrb	r3, [r3, #3]
 8013254:	2b02      	cmp	r3, #2
 8013256:	d10c      	bne.n	8013272 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8013258:	2350      	movs	r3, #80	@ 0x50
 801325a:	18fc      	adds	r4, r7, r3
 801325c:	234a      	movs	r3, #74	@ 0x4a
 801325e:	18fb      	adds	r3, r7, r3
 8013260:	881a      	ldrh	r2, [r3, #0]
 8013262:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	0018      	movs	r0, r3
 8013268:	f000 f9ec 	bl	8013644 <HAL_PCD_EP_DB_Receive>
 801326c:	0003      	movs	r3, r0
 801326e:	8023      	strh	r3, [r4, #0]
 8013270:	e071      	b.n	8013356 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	001a      	movs	r2, r3
 8013278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801327a:	781b      	ldrb	r3, [r3, #0]
 801327c:	009b      	lsls	r3, r3, #2
 801327e:	18d3      	adds	r3, r2, r3
 8013280:	881b      	ldrh	r3, [r3, #0]
 8013282:	b29a      	uxth	r2, r3
 8013284:	2052      	movs	r0, #82	@ 0x52
 8013286:	183b      	adds	r3, r7, r0
 8013288:	49a2      	ldr	r1, [pc, #648]	@ (8013514 <PCD_EP_ISR_Handler+0x6dc>)
 801328a:	400a      	ands	r2, r1
 801328c:	801a      	strh	r2, [r3, #0]
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	001a      	movs	r2, r3
 8013294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013296:	781b      	ldrb	r3, [r3, #0]
 8013298:	009b      	lsls	r3, r3, #2
 801329a:	18d3      	adds	r3, r2, r3
 801329c:	183a      	adds	r2, r7, r0
 801329e:	8812      	ldrh	r2, [r2, #0]
 80132a0:	499d      	ldr	r1, [pc, #628]	@ (8013518 <PCD_EP_ISR_Handler+0x6e0>)
 80132a2:	430a      	orrs	r2, r1
 80132a4:	b292      	uxth	r2, r2
 80132a6:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	001a      	movs	r2, r3
 80132ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132b0:	781b      	ldrb	r3, [r3, #0]
 80132b2:	009b      	lsls	r3, r3, #2
 80132b4:	18d3      	adds	r3, r2, r3
 80132b6:	881b      	ldrh	r3, [r3, #0]
 80132b8:	b29b      	uxth	r3, r3
 80132ba:	001a      	movs	r2, r3
 80132bc:	2380      	movs	r3, #128	@ 0x80
 80132be:	01db      	lsls	r3, r3, #7
 80132c0:	4013      	ands	r3, r2
 80132c2:	d024      	beq.n	801330e <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	2250      	movs	r2, #80	@ 0x50
 80132ca:	5a9b      	ldrh	r3, [r3, r2]
 80132cc:	b29b      	uxth	r3, r3
 80132ce:	001a      	movs	r2, r3
 80132d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132d2:	781b      	ldrb	r3, [r3, #0]
 80132d4:	00db      	lsls	r3, r3, #3
 80132d6:	18d2      	adds	r2, r2, r3
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	18d3      	adds	r3, r2, r3
 80132de:	4a8f      	ldr	r2, [pc, #572]	@ (801351c <PCD_EP_ISR_Handler+0x6e4>)
 80132e0:	4694      	mov	ip, r2
 80132e2:	4463      	add	r3, ip
 80132e4:	881a      	ldrh	r2, [r3, #0]
 80132e6:	2450      	movs	r4, #80	@ 0x50
 80132e8:	193b      	adds	r3, r7, r4
 80132ea:	0592      	lsls	r2, r2, #22
 80132ec:	0d92      	lsrs	r2, r2, #22
 80132ee:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80132f0:	193b      	adds	r3, r7, r4
 80132f2:	881b      	ldrh	r3, [r3, #0]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d02e      	beq.n	8013356 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	6818      	ldr	r0, [r3, #0]
 80132fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80132fe:	6959      	ldr	r1, [r3, #20]
 8013300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013302:	891a      	ldrh	r2, [r3, #8]
 8013304:	193b      	adds	r3, r7, r4
 8013306:	881b      	ldrh	r3, [r3, #0]
 8013308:	f007 f839 	bl	801a37e <USB_ReadPMA>
 801330c:	e023      	b.n	8013356 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	2250      	movs	r2, #80	@ 0x50
 8013314:	5a9b      	ldrh	r3, [r3, r2]
 8013316:	b29b      	uxth	r3, r3
 8013318:	001a      	movs	r2, r3
 801331a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801331c:	781b      	ldrb	r3, [r3, #0]
 801331e:	00db      	lsls	r3, r3, #3
 8013320:	18d2      	adds	r2, r2, r3
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	18d3      	adds	r3, r2, r3
 8013328:	4a79      	ldr	r2, [pc, #484]	@ (8013510 <PCD_EP_ISR_Handler+0x6d8>)
 801332a:	4694      	mov	ip, r2
 801332c:	4463      	add	r3, ip
 801332e:	881a      	ldrh	r2, [r3, #0]
 8013330:	2450      	movs	r4, #80	@ 0x50
 8013332:	193b      	adds	r3, r7, r4
 8013334:	0592      	lsls	r2, r2, #22
 8013336:	0d92      	lsrs	r2, r2, #22
 8013338:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801333a:	193b      	adds	r3, r7, r4
 801333c:	881b      	ldrh	r3, [r3, #0]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d009      	beq.n	8013356 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	6818      	ldr	r0, [r3, #0]
 8013346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013348:	6959      	ldr	r1, [r3, #20]
 801334a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801334c:	895a      	ldrh	r2, [r3, #10]
 801334e:	193b      	adds	r3, r7, r4
 8013350:	881b      	ldrh	r3, [r3, #0]
 8013352:	f007 f814 	bl	801a37e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8013356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013358:	69da      	ldr	r2, [r3, #28]
 801335a:	2150      	movs	r1, #80	@ 0x50
 801335c:	187b      	adds	r3, r7, r1
 801335e:	881b      	ldrh	r3, [r3, #0]
 8013360:	18d2      	adds	r2, r2, r3
 8013362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013364:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8013366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013368:	695a      	ldr	r2, [r3, #20]
 801336a:	187b      	adds	r3, r7, r1
 801336c:	881b      	ldrh	r3, [r3, #0]
 801336e:	18d2      	adds	r2, r2, r3
 8013370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013372:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8013374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013376:	699b      	ldr	r3, [r3, #24]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d005      	beq.n	8013388 <PCD_EP_ISR_Handler+0x550>
 801337c:	187b      	adds	r3, r7, r1
 801337e:	881a      	ldrh	r2, [r3, #0]
 8013380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013382:	691b      	ldr	r3, [r3, #16]
 8013384:	429a      	cmp	r2, r3
 8013386:	d207      	bcs.n	8013398 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8013388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801338a:	781a      	ldrb	r2, [r3, #0]
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	0011      	movs	r1, r2
 8013390:	0018      	movs	r0, r3
 8013392:	f009 f80e 	bl	801c3b2 <HAL_PCD_DataOutStageCallback>
 8013396:	e006      	b.n	80133a6 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801339e:	0011      	movs	r1, r2
 80133a0:	0018      	movs	r0, r3
 80133a2:	f005 fd31 	bl	8018e08 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80133a6:	244a      	movs	r4, #74	@ 0x4a
 80133a8:	193b      	adds	r3, r7, r4
 80133aa:	881b      	ldrh	r3, [r3, #0]
 80133ac:	2280      	movs	r2, #128	@ 0x80
 80133ae:	4013      	ands	r3, r2
 80133b0:	d100      	bne.n	80133b4 <PCD_EP_ISR_Handler+0x57c>
 80133b2:	e133      	b.n	801361c <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80133b4:	204d      	movs	r0, #77	@ 0x4d
 80133b6:	183b      	adds	r3, r7, r0
 80133b8:	781b      	ldrb	r3, [r3, #0]
 80133ba:	1c5a      	adds	r2, r3, #1
 80133bc:	0013      	movs	r3, r2
 80133be:	009b      	lsls	r3, r3, #2
 80133c0:	189b      	adds	r3, r3, r2
 80133c2:	00db      	lsls	r3, r3, #3
 80133c4:	687a      	ldr	r2, [r7, #4]
 80133c6:	18d3      	adds	r3, r2, r3
 80133c8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	001a      	movs	r2, r3
 80133d0:	183b      	adds	r3, r7, r0
 80133d2:	781b      	ldrb	r3, [r3, #0]
 80133d4:	009b      	lsls	r3, r3, #2
 80133d6:	18d3      	adds	r3, r2, r3
 80133d8:	881b      	ldrh	r3, [r3, #0]
 80133da:	b29a      	uxth	r2, r3
 80133dc:	2542      	movs	r5, #66	@ 0x42
 80133de:	197b      	adds	r3, r7, r5
 80133e0:	494f      	ldr	r1, [pc, #316]	@ (8013520 <PCD_EP_ISR_Handler+0x6e8>)
 80133e2:	400a      	ands	r2, r1
 80133e4:	801a      	strh	r2, [r3, #0]
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	001a      	movs	r2, r3
 80133ec:	183b      	adds	r3, r7, r0
 80133ee:	781b      	ldrb	r3, [r3, #0]
 80133f0:	009b      	lsls	r3, r3, #2
 80133f2:	18d3      	adds	r3, r2, r3
 80133f4:	197a      	adds	r2, r7, r5
 80133f6:	8812      	ldrh	r2, [r2, #0]
 80133f8:	494a      	ldr	r1, [pc, #296]	@ (8013524 <PCD_EP_ISR_Handler+0x6ec>)
 80133fa:	430a      	orrs	r2, r1
 80133fc:	b292      	uxth	r2, r2
 80133fe:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8013400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013402:	78db      	ldrb	r3, [r3, #3]
 8013404:	2b01      	cmp	r3, #1
 8013406:	d000      	beq.n	801340a <PCD_EP_ISR_Handler+0x5d2>
 8013408:	e0af      	b.n	801356a <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801340a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801340c:	2200      	movs	r2, #0
 801340e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8013410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013412:	7b1b      	ldrb	r3, [r3, #12]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d100      	bne.n	801341a <PCD_EP_ISR_Handler+0x5e2>
 8013418:	e09f      	b.n	801355a <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801341a:	193b      	adds	r3, r7, r4
 801341c:	881b      	ldrh	r3, [r3, #0]
 801341e:	2240      	movs	r2, #64	@ 0x40
 8013420:	4013      	ands	r3, r2
 8013422:	d046      	beq.n	80134b2 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013426:	785b      	ldrb	r3, [r3, #1]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d125      	bne.n	8013478 <PCD_EP_ISR_Handler+0x640>
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	627b      	str	r3, [r7, #36]	@ 0x24
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	2250      	movs	r2, #80	@ 0x50
 8013438:	5a9b      	ldrh	r3, [r3, r2]
 801343a:	b29b      	uxth	r3, r3
 801343c:	001a      	movs	r2, r3
 801343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013440:	189b      	adds	r3, r3, r2
 8013442:	627b      	str	r3, [r7, #36]	@ 0x24
 8013444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013446:	781b      	ldrb	r3, [r3, #0]
 8013448:	00da      	lsls	r2, r3, #3
 801344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801344c:	18d3      	adds	r3, r2, r3
 801344e:	4a33      	ldr	r2, [pc, #204]	@ (801351c <PCD_EP_ISR_Handler+0x6e4>)
 8013450:	4694      	mov	ip, r2
 8013452:	4463      	add	r3, ip
 8013454:	623b      	str	r3, [r7, #32]
 8013456:	6a3b      	ldr	r3, [r7, #32]
 8013458:	881b      	ldrh	r3, [r3, #0]
 801345a:	b29b      	uxth	r3, r3
 801345c:	059b      	lsls	r3, r3, #22
 801345e:	0d9b      	lsrs	r3, r3, #22
 8013460:	b29a      	uxth	r2, r3
 8013462:	6a3b      	ldr	r3, [r7, #32]
 8013464:	801a      	strh	r2, [r3, #0]
 8013466:	6a3b      	ldr	r3, [r7, #32]
 8013468:	881b      	ldrh	r3, [r3, #0]
 801346a:	b29b      	uxth	r3, r3
 801346c:	4a2d      	ldr	r2, [pc, #180]	@ (8013524 <PCD_EP_ISR_Handler+0x6ec>)
 801346e:	4313      	orrs	r3, r2
 8013470:	b29a      	uxth	r2, r3
 8013472:	6a3b      	ldr	r3, [r7, #32]
 8013474:	801a      	strh	r2, [r3, #0]
 8013476:	e070      	b.n	801355a <PCD_EP_ISR_Handler+0x722>
 8013478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801347a:	785b      	ldrb	r3, [r3, #1]
 801347c:	2b01      	cmp	r3, #1
 801347e:	d16c      	bne.n	801355a <PCD_EP_ISR_Handler+0x722>
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	2250      	movs	r2, #80	@ 0x50
 801348c:	5a9b      	ldrh	r3, [r3, r2]
 801348e:	b29b      	uxth	r3, r3
 8013490:	001a      	movs	r2, r3
 8013492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013494:	189b      	adds	r3, r3, r2
 8013496:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801349a:	781b      	ldrb	r3, [r3, #0]
 801349c:	00da      	lsls	r2, r3, #3
 801349e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134a0:	18d3      	adds	r3, r2, r3
 80134a2:	4a1e      	ldr	r2, [pc, #120]	@ (801351c <PCD_EP_ISR_Handler+0x6e4>)
 80134a4:	4694      	mov	ip, r2
 80134a6:	4463      	add	r3, ip
 80134a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80134aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134ac:	2200      	movs	r2, #0
 80134ae:	801a      	strh	r2, [r3, #0]
 80134b0:	e053      	b.n	801355a <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80134b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134ba:	785b      	ldrb	r3, [r3, #1]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d133      	bne.n	8013528 <PCD_EP_ISR_Handler+0x6f0>
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	2250      	movs	r2, #80	@ 0x50
 80134cc:	5a9b      	ldrh	r3, [r3, r2]
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	001a      	movs	r2, r3
 80134d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134d4:	189b      	adds	r3, r3, r2
 80134d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80134d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134da:	781b      	ldrb	r3, [r3, #0]
 80134dc:	00da      	lsls	r2, r3, #3
 80134de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134e0:	18d3      	adds	r3, r2, r3
 80134e2:	4a0b      	ldr	r2, [pc, #44]	@ (8013510 <PCD_EP_ISR_Handler+0x6d8>)
 80134e4:	4694      	mov	ip, r2
 80134e6:	4463      	add	r3, ip
 80134e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80134ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134ec:	881b      	ldrh	r3, [r3, #0]
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	059b      	lsls	r3, r3, #22
 80134f2:	0d9b      	lsrs	r3, r3, #22
 80134f4:	b29a      	uxth	r2, r3
 80134f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134f8:	801a      	strh	r2, [r3, #0]
 80134fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134fc:	881b      	ldrh	r3, [r3, #0]
 80134fe:	b29b      	uxth	r3, r3
 8013500:	4a08      	ldr	r2, [pc, #32]	@ (8013524 <PCD_EP_ISR_Handler+0x6ec>)
 8013502:	4313      	orrs	r3, r2
 8013504:	b29a      	uxth	r2, r3
 8013506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013508:	801a      	strh	r2, [r3, #0]
 801350a:	e026      	b.n	801355a <PCD_EP_ISR_Handler+0x722>
 801350c:	00000f8f 	.word	0x00000f8f
 8013510:	00000406 	.word	0x00000406
 8013514:	ffff8f8f 	.word	0xffff8f8f
 8013518:	ffff80c0 	.word	0xffff80c0
 801351c:	00000402 	.word	0x00000402
 8013520:	ffff8f0f 	.word	0xffff8f0f
 8013524:	ffff8000 	.word	0xffff8000
 8013528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801352a:	785b      	ldrb	r3, [r3, #1]
 801352c:	2b01      	cmp	r3, #1
 801352e:	d114      	bne.n	801355a <PCD_EP_ISR_Handler+0x722>
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	2250      	movs	r2, #80	@ 0x50
 8013536:	5a9b      	ldrh	r3, [r3, r2]
 8013538:	b29b      	uxth	r3, r3
 801353a:	001a      	movs	r2, r3
 801353c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801353e:	189b      	adds	r3, r3, r2
 8013540:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013544:	781b      	ldrb	r3, [r3, #0]
 8013546:	00da      	lsls	r2, r3, #3
 8013548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801354a:	18d3      	adds	r3, r2, r3
 801354c:	4a3b      	ldr	r2, [pc, #236]	@ (801363c <PCD_EP_ISR_Handler+0x804>)
 801354e:	4694      	mov	ip, r2
 8013550:	4463      	add	r3, ip
 8013552:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013556:	2200      	movs	r2, #0
 8013558:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801355a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801355c:	781a      	ldrb	r2, [r3, #0]
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	0011      	movs	r1, r2
 8013562:	0018      	movs	r0, r3
 8013564:	f008 ff46 	bl	801c3f4 <HAL_PCD_DataInStageCallback>
 8013568:	e058      	b.n	801361c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801356a:	234a      	movs	r3, #74	@ 0x4a
 801356c:	18fb      	adds	r3, r7, r3
 801356e:	881a      	ldrh	r2, [r3, #0]
 8013570:	2380      	movs	r3, #128	@ 0x80
 8013572:	005b      	lsls	r3, r3, #1
 8013574:	4013      	ands	r3, r2
 8013576:	d149      	bne.n	801360c <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	2250      	movs	r2, #80	@ 0x50
 801357e:	5a9b      	ldrh	r3, [r3, r2]
 8013580:	b29b      	uxth	r3, r3
 8013582:	001a      	movs	r2, r3
 8013584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013586:	781b      	ldrb	r3, [r3, #0]
 8013588:	00db      	lsls	r3, r3, #3
 801358a:	18d2      	adds	r2, r2, r3
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	18d3      	adds	r3, r2, r3
 8013592:	4a2b      	ldr	r2, [pc, #172]	@ (8013640 <PCD_EP_ISR_Handler+0x808>)
 8013594:	4694      	mov	ip, r2
 8013596:	4463      	add	r3, ip
 8013598:	881a      	ldrh	r2, [r3, #0]
 801359a:	2140      	movs	r1, #64	@ 0x40
 801359c:	187b      	adds	r3, r7, r1
 801359e:	0592      	lsls	r2, r2, #22
 80135a0:	0d92      	lsrs	r2, r2, #22
 80135a2:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80135a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135a6:	699a      	ldr	r2, [r3, #24]
 80135a8:	187b      	adds	r3, r7, r1
 80135aa:	881b      	ldrh	r3, [r3, #0]
 80135ac:	429a      	cmp	r2, r3
 80135ae:	d907      	bls.n	80135c0 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80135b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135b2:	699a      	ldr	r2, [r3, #24]
 80135b4:	187b      	adds	r3, r7, r1
 80135b6:	881b      	ldrh	r3, [r3, #0]
 80135b8:	1ad2      	subs	r2, r2, r3
 80135ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135bc:	619a      	str	r2, [r3, #24]
 80135be:	e002      	b.n	80135c6 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80135c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135c2:	2200      	movs	r2, #0
 80135c4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80135c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135c8:	699b      	ldr	r3, [r3, #24]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d107      	bne.n	80135de <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80135ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135d0:	781a      	ldrb	r2, [r3, #0]
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	0011      	movs	r1, r2
 80135d6:	0018      	movs	r0, r3
 80135d8:	f008 ff0c 	bl	801c3f4 <HAL_PCD_DataInStageCallback>
 80135dc:	e01e      	b.n	801361c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80135de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135e0:	695a      	ldr	r2, [r3, #20]
 80135e2:	2140      	movs	r1, #64	@ 0x40
 80135e4:	187b      	adds	r3, r7, r1
 80135e6:	881b      	ldrh	r3, [r3, #0]
 80135e8:	18d2      	adds	r2, r2, r3
 80135ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135ec:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80135ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135f0:	69da      	ldr	r2, [r3, #28]
 80135f2:	187b      	adds	r3, r7, r1
 80135f4:	881b      	ldrh	r3, [r3, #0]
 80135f6:	18d2      	adds	r2, r2, r3
 80135f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135fa:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013602:	0011      	movs	r1, r2
 8013604:	0018      	movs	r0, r3
 8013606:	f005 fbff 	bl	8018e08 <USB_EPStartXfer>
 801360a:	e007      	b.n	801361c <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801360c:	234a      	movs	r3, #74	@ 0x4a
 801360e:	18fb      	adds	r3, r7, r3
 8013610:	881a      	ldrh	r2, [r3, #0]
 8013612:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	0018      	movs	r0, r3
 8013618:	f000 f930 	bl	801387c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	2244      	movs	r2, #68	@ 0x44
 8013622:	5a9b      	ldrh	r3, [r3, r2]
 8013624:	b29b      	uxth	r3, r3
 8013626:	b21b      	sxth	r3, r3
 8013628:	2b00      	cmp	r3, #0
 801362a:	da01      	bge.n	8013630 <PCD_EP_ISR_Handler+0x7f8>
 801362c:	f7ff fc0a 	bl	8012e44 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8013630:	2300      	movs	r3, #0
}
 8013632:	0018      	movs	r0, r3
 8013634:	46bd      	mov	sp, r7
 8013636:	b016      	add	sp, #88	@ 0x58
 8013638:	bdb0      	pop	{r4, r5, r7, pc}
 801363a:	46c0      	nop			@ (mov r8, r8)
 801363c:	00000406 	.word	0x00000406
 8013640:	00000402 	.word	0x00000402

08013644 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8013644:	b590      	push	{r4, r7, lr}
 8013646:	b089      	sub	sp, #36	@ 0x24
 8013648:	af00      	add	r7, sp, #0
 801364a:	60f8      	str	r0, [r7, #12]
 801364c:	60b9      	str	r1, [r7, #8]
 801364e:	1dbb      	adds	r3, r7, #6
 8013650:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013652:	1dbb      	adds	r3, r7, #6
 8013654:	881a      	ldrh	r2, [r3, #0]
 8013656:	2380      	movs	r3, #128	@ 0x80
 8013658:	01db      	lsls	r3, r3, #7
 801365a:	4013      	ands	r3, r2
 801365c:	d100      	bne.n	8013660 <HAL_PCD_EP_DB_Receive+0x1c>
 801365e:	e07d      	b.n	801375c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	2250      	movs	r2, #80	@ 0x50
 8013666:	5a9b      	ldrh	r3, [r3, r2]
 8013668:	b29b      	uxth	r3, r3
 801366a:	001a      	movs	r2, r3
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	781b      	ldrb	r3, [r3, #0]
 8013670:	00db      	lsls	r3, r3, #3
 8013672:	18d2      	adds	r2, r2, r3
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	18d3      	adds	r3, r2, r3
 801367a:	4a7a      	ldr	r2, [pc, #488]	@ (8013864 <HAL_PCD_EP_DB_Receive+0x220>)
 801367c:	4694      	mov	ip, r2
 801367e:	4463      	add	r3, ip
 8013680:	881a      	ldrh	r2, [r3, #0]
 8013682:	211a      	movs	r1, #26
 8013684:	187b      	adds	r3, r7, r1
 8013686:	0592      	lsls	r2, r2, #22
 8013688:	0d92      	lsrs	r2, r2, #22
 801368a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801368c:	68bb      	ldr	r3, [r7, #8]
 801368e:	699a      	ldr	r2, [r3, #24]
 8013690:	187b      	adds	r3, r7, r1
 8013692:	881b      	ldrh	r3, [r3, #0]
 8013694:	429a      	cmp	r2, r3
 8013696:	d307      	bcc.n	80136a8 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8013698:	68bb      	ldr	r3, [r7, #8]
 801369a:	699a      	ldr	r2, [r3, #24]
 801369c:	187b      	adds	r3, r7, r1
 801369e:	881b      	ldrh	r3, [r3, #0]
 80136a0:	1ad2      	subs	r2, r2, r3
 80136a2:	68bb      	ldr	r3, [r7, #8]
 80136a4:	619a      	str	r2, [r3, #24]
 80136a6:	e002      	b.n	80136ae <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	2200      	movs	r2, #0
 80136ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80136ae:	68bb      	ldr	r3, [r7, #8]
 80136b0:	699b      	ldr	r3, [r3, #24]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d121      	bne.n	80136fa <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	001a      	movs	r2, r3
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	781b      	ldrb	r3, [r3, #0]
 80136c0:	009b      	lsls	r3, r3, #2
 80136c2:	18d3      	adds	r3, r2, r3
 80136c4:	881b      	ldrh	r3, [r3, #0]
 80136c6:	b29a      	uxth	r2, r3
 80136c8:	2018      	movs	r0, #24
 80136ca:	183b      	adds	r3, r7, r0
 80136cc:	4966      	ldr	r1, [pc, #408]	@ (8013868 <HAL_PCD_EP_DB_Receive+0x224>)
 80136ce:	400a      	ands	r2, r1
 80136d0:	801a      	strh	r2, [r3, #0]
 80136d2:	183b      	adds	r3, r7, r0
 80136d4:	183a      	adds	r2, r7, r0
 80136d6:	8812      	ldrh	r2, [r2, #0]
 80136d8:	2180      	movs	r1, #128	@ 0x80
 80136da:	0189      	lsls	r1, r1, #6
 80136dc:	404a      	eors	r2, r1
 80136de:	801a      	strh	r2, [r3, #0]
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	001a      	movs	r2, r3
 80136e6:	68bb      	ldr	r3, [r7, #8]
 80136e8:	781b      	ldrb	r3, [r3, #0]
 80136ea:	009b      	lsls	r3, r3, #2
 80136ec:	18d3      	adds	r3, r2, r3
 80136ee:	183a      	adds	r2, r7, r0
 80136f0:	8812      	ldrh	r2, [r2, #0]
 80136f2:	495e      	ldr	r1, [pc, #376]	@ (801386c <HAL_PCD_EP_DB_Receive+0x228>)
 80136f4:	430a      	orrs	r2, r1
 80136f6:	b292      	uxth	r2, r2
 80136f8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80136fa:	1dbb      	adds	r3, r7, #6
 80136fc:	881b      	ldrh	r3, [r3, #0]
 80136fe:	2240      	movs	r2, #64	@ 0x40
 8013700:	4013      	ands	r3, r2
 8013702:	d01a      	beq.n	801373a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	001a      	movs	r2, r3
 801370a:	68bb      	ldr	r3, [r7, #8]
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	009b      	lsls	r3, r3, #2
 8013710:	18d3      	adds	r3, r2, r3
 8013712:	881b      	ldrh	r3, [r3, #0]
 8013714:	b29a      	uxth	r2, r3
 8013716:	2016      	movs	r0, #22
 8013718:	183b      	adds	r3, r7, r0
 801371a:	4955      	ldr	r1, [pc, #340]	@ (8013870 <HAL_PCD_EP_DB_Receive+0x22c>)
 801371c:	400a      	ands	r2, r1
 801371e:	801a      	strh	r2, [r3, #0]
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	001a      	movs	r2, r3
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	781b      	ldrb	r3, [r3, #0]
 801372a:	009b      	lsls	r3, r3, #2
 801372c:	18d3      	adds	r3, r2, r3
 801372e:	183a      	adds	r2, r7, r0
 8013730:	8812      	ldrh	r2, [r2, #0]
 8013732:	4950      	ldr	r1, [pc, #320]	@ (8013874 <HAL_PCD_EP_DB_Receive+0x230>)
 8013734:	430a      	orrs	r2, r1
 8013736:	b292      	uxth	r2, r2
 8013738:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801373a:	241a      	movs	r4, #26
 801373c:	193b      	adds	r3, r7, r4
 801373e:	881b      	ldrh	r3, [r3, #0]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d100      	bne.n	8013746 <HAL_PCD_EP_DB_Receive+0x102>
 8013744:	e086      	b.n	8013854 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	6818      	ldr	r0, [r3, #0]
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	6959      	ldr	r1, [r3, #20]
 801374e:	68bb      	ldr	r3, [r7, #8]
 8013750:	891a      	ldrh	r2, [r3, #8]
 8013752:	193b      	adds	r3, r7, r4
 8013754:	881b      	ldrh	r3, [r3, #0]
 8013756:	f006 fe12 	bl	801a37e <USB_ReadPMA>
 801375a:	e07b      	b.n	8013854 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	2250      	movs	r2, #80	@ 0x50
 8013762:	5a9b      	ldrh	r3, [r3, r2]
 8013764:	b29b      	uxth	r3, r3
 8013766:	001a      	movs	r2, r3
 8013768:	68bb      	ldr	r3, [r7, #8]
 801376a:	781b      	ldrb	r3, [r3, #0]
 801376c:	00db      	lsls	r3, r3, #3
 801376e:	18d2      	adds	r2, r2, r3
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	18d3      	adds	r3, r2, r3
 8013776:	4a40      	ldr	r2, [pc, #256]	@ (8013878 <HAL_PCD_EP_DB_Receive+0x234>)
 8013778:	4694      	mov	ip, r2
 801377a:	4463      	add	r3, ip
 801377c:	881a      	ldrh	r2, [r3, #0]
 801377e:	211a      	movs	r1, #26
 8013780:	187b      	adds	r3, r7, r1
 8013782:	0592      	lsls	r2, r2, #22
 8013784:	0d92      	lsrs	r2, r2, #22
 8013786:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	699a      	ldr	r2, [r3, #24]
 801378c:	187b      	adds	r3, r7, r1
 801378e:	881b      	ldrh	r3, [r3, #0]
 8013790:	429a      	cmp	r2, r3
 8013792:	d307      	bcc.n	80137a4 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	699a      	ldr	r2, [r3, #24]
 8013798:	187b      	adds	r3, r7, r1
 801379a:	881b      	ldrh	r3, [r3, #0]
 801379c:	1ad2      	subs	r2, r2, r3
 801379e:	68bb      	ldr	r3, [r7, #8]
 80137a0:	619a      	str	r2, [r3, #24]
 80137a2:	e002      	b.n	80137aa <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	2200      	movs	r2, #0
 80137a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	699b      	ldr	r3, [r3, #24]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d121      	bne.n	80137f6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	001a      	movs	r2, r3
 80137b8:	68bb      	ldr	r3, [r7, #8]
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	009b      	lsls	r3, r3, #2
 80137be:	18d3      	adds	r3, r2, r3
 80137c0:	881b      	ldrh	r3, [r3, #0]
 80137c2:	b29a      	uxth	r2, r3
 80137c4:	201e      	movs	r0, #30
 80137c6:	183b      	adds	r3, r7, r0
 80137c8:	4927      	ldr	r1, [pc, #156]	@ (8013868 <HAL_PCD_EP_DB_Receive+0x224>)
 80137ca:	400a      	ands	r2, r1
 80137cc:	801a      	strh	r2, [r3, #0]
 80137ce:	183b      	adds	r3, r7, r0
 80137d0:	183a      	adds	r2, r7, r0
 80137d2:	8812      	ldrh	r2, [r2, #0]
 80137d4:	2180      	movs	r1, #128	@ 0x80
 80137d6:	0189      	lsls	r1, r1, #6
 80137d8:	404a      	eors	r2, r1
 80137da:	801a      	strh	r2, [r3, #0]
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	001a      	movs	r2, r3
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	781b      	ldrb	r3, [r3, #0]
 80137e6:	009b      	lsls	r3, r3, #2
 80137e8:	18d3      	adds	r3, r2, r3
 80137ea:	183a      	adds	r2, r7, r0
 80137ec:	8812      	ldrh	r2, [r2, #0]
 80137ee:	491f      	ldr	r1, [pc, #124]	@ (801386c <HAL_PCD_EP_DB_Receive+0x228>)
 80137f0:	430a      	orrs	r2, r1
 80137f2:	b292      	uxth	r2, r2
 80137f4:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80137f6:	1dbb      	adds	r3, r7, #6
 80137f8:	881b      	ldrh	r3, [r3, #0]
 80137fa:	2240      	movs	r2, #64	@ 0x40
 80137fc:	4013      	ands	r3, r2
 80137fe:	d11a      	bne.n	8013836 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	001a      	movs	r2, r3
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	781b      	ldrb	r3, [r3, #0]
 801380a:	009b      	lsls	r3, r3, #2
 801380c:	18d3      	adds	r3, r2, r3
 801380e:	881b      	ldrh	r3, [r3, #0]
 8013810:	b29a      	uxth	r2, r3
 8013812:	201c      	movs	r0, #28
 8013814:	183b      	adds	r3, r7, r0
 8013816:	4916      	ldr	r1, [pc, #88]	@ (8013870 <HAL_PCD_EP_DB_Receive+0x22c>)
 8013818:	400a      	ands	r2, r1
 801381a:	801a      	strh	r2, [r3, #0]
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	001a      	movs	r2, r3
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	781b      	ldrb	r3, [r3, #0]
 8013826:	009b      	lsls	r3, r3, #2
 8013828:	18d3      	adds	r3, r2, r3
 801382a:	183a      	adds	r2, r7, r0
 801382c:	8812      	ldrh	r2, [r2, #0]
 801382e:	4911      	ldr	r1, [pc, #68]	@ (8013874 <HAL_PCD_EP_DB_Receive+0x230>)
 8013830:	430a      	orrs	r2, r1
 8013832:	b292      	uxth	r2, r2
 8013834:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8013836:	241a      	movs	r4, #26
 8013838:	193b      	adds	r3, r7, r4
 801383a:	881b      	ldrh	r3, [r3, #0]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d009      	beq.n	8013854 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	6818      	ldr	r0, [r3, #0]
 8013844:	68bb      	ldr	r3, [r7, #8]
 8013846:	6959      	ldr	r1, [r3, #20]
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	895a      	ldrh	r2, [r3, #10]
 801384c:	193b      	adds	r3, r7, r4
 801384e:	881b      	ldrh	r3, [r3, #0]
 8013850:	f006 fd95 	bl	801a37e <USB_ReadPMA>
    }
  }

  return count;
 8013854:	231a      	movs	r3, #26
 8013856:	18fb      	adds	r3, r7, r3
 8013858:	881b      	ldrh	r3, [r3, #0]
}
 801385a:	0018      	movs	r0, r3
 801385c:	46bd      	mov	sp, r7
 801385e:	b009      	add	sp, #36	@ 0x24
 8013860:	bd90      	pop	{r4, r7, pc}
 8013862:	46c0      	nop			@ (mov r8, r8)
 8013864:	00000402 	.word	0x00000402
 8013868:	ffffbf8f 	.word	0xffffbf8f
 801386c:	ffff8080 	.word	0xffff8080
 8013870:	ffff8f8f 	.word	0xffff8f8f
 8013874:	ffff80c0 	.word	0xffff80c0
 8013878:	00000406 	.word	0x00000406

0801387c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b0a4      	sub	sp, #144	@ 0x90
 8013880:	af00      	add	r7, sp, #0
 8013882:	60f8      	str	r0, [r7, #12]
 8013884:	60b9      	str	r1, [r7, #8]
 8013886:	1dbb      	adds	r3, r7, #6
 8013888:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801388a:	1dbb      	adds	r3, r7, #6
 801388c:	881b      	ldrh	r3, [r3, #0]
 801388e:	2240      	movs	r2, #64	@ 0x40
 8013890:	4013      	ands	r3, r2
 8013892:	d100      	bne.n	8013896 <HAL_PCD_EP_DB_Transmit+0x1a>
 8013894:	e1e4      	b.n	8013c60 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	2250      	movs	r2, #80	@ 0x50
 801389c:	5a9b      	ldrh	r3, [r3, r2]
 801389e:	b29b      	uxth	r3, r3
 80138a0:	001a      	movs	r2, r3
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	781b      	ldrb	r3, [r3, #0]
 80138a6:	00db      	lsls	r3, r3, #3
 80138a8:	18d2      	adds	r2, r2, r3
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	18d3      	adds	r3, r2, r3
 80138b0:	4ad0      	ldr	r2, [pc, #832]	@ (8013bf4 <HAL_PCD_EP_DB_Transmit+0x378>)
 80138b2:	4694      	mov	ip, r2
 80138b4:	4463      	add	r3, ip
 80138b6:	881a      	ldrh	r2, [r3, #0]
 80138b8:	2186      	movs	r1, #134	@ 0x86
 80138ba:	187b      	adds	r3, r7, r1
 80138bc:	0592      	lsls	r2, r2, #22
 80138be:	0d92      	lsrs	r2, r2, #22
 80138c0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	699a      	ldr	r2, [r3, #24]
 80138c6:	187b      	adds	r3, r7, r1
 80138c8:	881b      	ldrh	r3, [r3, #0]
 80138ca:	429a      	cmp	r2, r3
 80138cc:	d907      	bls.n	80138de <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	699a      	ldr	r2, [r3, #24]
 80138d2:	187b      	adds	r3, r7, r1
 80138d4:	881b      	ldrh	r3, [r3, #0]
 80138d6:	1ad2      	subs	r2, r2, r3
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	619a      	str	r2, [r3, #24]
 80138dc:	e002      	b.n	80138e4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	2200      	movs	r2, #0
 80138e2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	699b      	ldr	r3, [r3, #24]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d000      	beq.n	80138ee <HAL_PCD_EP_DB_Transmit+0x72>
 80138ec:	e0b5      	b.n	8013a5a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80138ee:	68bb      	ldr	r3, [r7, #8]
 80138f0:	785b      	ldrb	r3, [r3, #1]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d125      	bne.n	8013942 <HAL_PCD_EP_DB_Transmit+0xc6>
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	2250      	movs	r2, #80	@ 0x50
 8013902:	5a9b      	ldrh	r3, [r3, r2]
 8013904:	b29b      	uxth	r3, r3
 8013906:	001a      	movs	r2, r3
 8013908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801390a:	189b      	adds	r3, r3, r2
 801390c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801390e:	68bb      	ldr	r3, [r7, #8]
 8013910:	781b      	ldrb	r3, [r3, #0]
 8013912:	00da      	lsls	r2, r3, #3
 8013914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013916:	18d3      	adds	r3, r2, r3
 8013918:	4ab6      	ldr	r2, [pc, #728]	@ (8013bf4 <HAL_PCD_EP_DB_Transmit+0x378>)
 801391a:	4694      	mov	ip, r2
 801391c:	4463      	add	r3, ip
 801391e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013922:	881b      	ldrh	r3, [r3, #0]
 8013924:	b29b      	uxth	r3, r3
 8013926:	059b      	lsls	r3, r3, #22
 8013928:	0d9b      	lsrs	r3, r3, #22
 801392a:	b29a      	uxth	r2, r3
 801392c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801392e:	801a      	strh	r2, [r3, #0]
 8013930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013932:	881b      	ldrh	r3, [r3, #0]
 8013934:	b29b      	uxth	r3, r3
 8013936:	4ab0      	ldr	r2, [pc, #704]	@ (8013bf8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013938:	4313      	orrs	r3, r2
 801393a:	b29a      	uxth	r2, r3
 801393c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801393e:	801a      	strh	r2, [r3, #0]
 8013940:	e01b      	b.n	801397a <HAL_PCD_EP_DB_Transmit+0xfe>
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	785b      	ldrb	r3, [r3, #1]
 8013946:	2b01      	cmp	r3, #1
 8013948:	d117      	bne.n	801397a <HAL_PCD_EP_DB_Transmit+0xfe>
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	2250      	movs	r2, #80	@ 0x50
 8013956:	5a9b      	ldrh	r3, [r3, r2]
 8013958:	b29b      	uxth	r3, r3
 801395a:	001a      	movs	r2, r3
 801395c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801395e:	189b      	adds	r3, r3, r2
 8013960:	637b      	str	r3, [r7, #52]	@ 0x34
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	781b      	ldrb	r3, [r3, #0]
 8013966:	00da      	lsls	r2, r3, #3
 8013968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801396a:	18d3      	adds	r3, r2, r3
 801396c:	4aa1      	ldr	r2, [pc, #644]	@ (8013bf4 <HAL_PCD_EP_DB_Transmit+0x378>)
 801396e:	4694      	mov	ip, r2
 8013970:	4463      	add	r3, ip
 8013972:	633b      	str	r3, [r7, #48]	@ 0x30
 8013974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013976:	2200      	movs	r2, #0
 8013978:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	785b      	ldrb	r3, [r3, #1]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d125      	bne.n	80139d4 <HAL_PCD_EP_DB_Transmit+0x158>
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	61fb      	str	r3, [r7, #28]
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	2250      	movs	r2, #80	@ 0x50
 8013994:	5a9b      	ldrh	r3, [r3, r2]
 8013996:	b29b      	uxth	r3, r3
 8013998:	001a      	movs	r2, r3
 801399a:	69fb      	ldr	r3, [r7, #28]
 801399c:	189b      	adds	r3, r3, r2
 801399e:	61fb      	str	r3, [r7, #28]
 80139a0:	68bb      	ldr	r3, [r7, #8]
 80139a2:	781b      	ldrb	r3, [r3, #0]
 80139a4:	00da      	lsls	r2, r3, #3
 80139a6:	69fb      	ldr	r3, [r7, #28]
 80139a8:	18d3      	adds	r3, r2, r3
 80139aa:	4a94      	ldr	r2, [pc, #592]	@ (8013bfc <HAL_PCD_EP_DB_Transmit+0x380>)
 80139ac:	4694      	mov	ip, r2
 80139ae:	4463      	add	r3, ip
 80139b0:	61bb      	str	r3, [r7, #24]
 80139b2:	69bb      	ldr	r3, [r7, #24]
 80139b4:	881b      	ldrh	r3, [r3, #0]
 80139b6:	b29b      	uxth	r3, r3
 80139b8:	059b      	lsls	r3, r3, #22
 80139ba:	0d9b      	lsrs	r3, r3, #22
 80139bc:	b29a      	uxth	r2, r3
 80139be:	69bb      	ldr	r3, [r7, #24]
 80139c0:	801a      	strh	r2, [r3, #0]
 80139c2:	69bb      	ldr	r3, [r7, #24]
 80139c4:	881b      	ldrh	r3, [r3, #0]
 80139c6:	b29b      	uxth	r3, r3
 80139c8:	4a8b      	ldr	r2, [pc, #556]	@ (8013bf8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80139ca:	4313      	orrs	r3, r2
 80139cc:	b29a      	uxth	r2, r3
 80139ce:	69bb      	ldr	r3, [r7, #24]
 80139d0:	801a      	strh	r2, [r3, #0]
 80139d2:	e018      	b.n	8013a06 <HAL_PCD_EP_DB_Transmit+0x18a>
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	785b      	ldrb	r3, [r3, #1]
 80139d8:	2b01      	cmp	r3, #1
 80139da:	d114      	bne.n	8013a06 <HAL_PCD_EP_DB_Transmit+0x18a>
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	2250      	movs	r2, #80	@ 0x50
 80139e2:	5a9b      	ldrh	r3, [r3, r2]
 80139e4:	b29b      	uxth	r3, r3
 80139e6:	001a      	movs	r2, r3
 80139e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139ea:	189b      	adds	r3, r3, r2
 80139ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	781b      	ldrb	r3, [r3, #0]
 80139f2:	00da      	lsls	r2, r3, #3
 80139f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139f6:	18d3      	adds	r3, r2, r3
 80139f8:	4a80      	ldr	r2, [pc, #512]	@ (8013bfc <HAL_PCD_EP_DB_Transmit+0x380>)
 80139fa:	4694      	mov	ip, r2
 80139fc:	4463      	add	r3, ip
 80139fe:	623b      	str	r3, [r7, #32]
 8013a00:	6a3b      	ldr	r3, [r7, #32]
 8013a02:	2200      	movs	r2, #0
 8013a04:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013a06:	68bb      	ldr	r3, [r7, #8]
 8013a08:	781a      	ldrb	r2, [r3, #0]
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	0011      	movs	r1, r2
 8013a0e:	0018      	movs	r0, r3
 8013a10:	f008 fcf0 	bl	801c3f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013a14:	1dbb      	adds	r3, r7, #6
 8013a16:	881a      	ldrh	r2, [r3, #0]
 8013a18:	2380      	movs	r3, #128	@ 0x80
 8013a1a:	01db      	lsls	r3, r3, #7
 8013a1c:	4013      	ands	r3, r2
 8013a1e:	d100      	bne.n	8013a22 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8013a20:	e309      	b.n	8014036 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	001a      	movs	r2, r3
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	781b      	ldrb	r3, [r3, #0]
 8013a2c:	009b      	lsls	r3, r3, #2
 8013a2e:	18d3      	adds	r3, r2, r3
 8013a30:	881b      	ldrh	r3, [r3, #0]
 8013a32:	b29a      	uxth	r2, r3
 8013a34:	2016      	movs	r0, #22
 8013a36:	183b      	adds	r3, r7, r0
 8013a38:	4971      	ldr	r1, [pc, #452]	@ (8013c00 <HAL_PCD_EP_DB_Transmit+0x384>)
 8013a3a:	400a      	ands	r2, r1
 8013a3c:	801a      	strh	r2, [r3, #0]
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	001a      	movs	r2, r3
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	781b      	ldrb	r3, [r3, #0]
 8013a48:	009b      	lsls	r3, r3, #2
 8013a4a:	18d3      	adds	r3, r2, r3
 8013a4c:	183a      	adds	r2, r7, r0
 8013a4e:	8812      	ldrh	r2, [r2, #0]
 8013a50:	496c      	ldr	r1, [pc, #432]	@ (8013c04 <HAL_PCD_EP_DB_Transmit+0x388>)
 8013a52:	430a      	orrs	r2, r1
 8013a54:	b292      	uxth	r2, r2
 8013a56:	801a      	strh	r2, [r3, #0]
 8013a58:	e2ed      	b.n	8014036 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013a5a:	1dbb      	adds	r3, r7, #6
 8013a5c:	881a      	ldrh	r2, [r3, #0]
 8013a5e:	2380      	movs	r3, #128	@ 0x80
 8013a60:	01db      	lsls	r3, r3, #7
 8013a62:	4013      	ands	r3, r2
 8013a64:	d01a      	beq.n	8013a9c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	001a      	movs	r2, r3
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	009b      	lsls	r3, r3, #2
 8013a72:	18d3      	adds	r3, r2, r3
 8013a74:	881b      	ldrh	r3, [r3, #0]
 8013a76:	b29a      	uxth	r2, r3
 8013a78:	208a      	movs	r0, #138	@ 0x8a
 8013a7a:	183b      	adds	r3, r7, r0
 8013a7c:	4960      	ldr	r1, [pc, #384]	@ (8013c00 <HAL_PCD_EP_DB_Transmit+0x384>)
 8013a7e:	400a      	ands	r2, r1
 8013a80:	801a      	strh	r2, [r3, #0]
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	001a      	movs	r2, r3
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	009b      	lsls	r3, r3, #2
 8013a8e:	18d3      	adds	r3, r2, r3
 8013a90:	183a      	adds	r2, r7, r0
 8013a92:	8812      	ldrh	r2, [r2, #0]
 8013a94:	495b      	ldr	r1, [pc, #364]	@ (8013c04 <HAL_PCD_EP_DB_Transmit+0x388>)
 8013a96:	430a      	orrs	r2, r1
 8013a98:	b292      	uxth	r2, r2
 8013a9a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8013a9c:	68bb      	ldr	r3, [r7, #8]
 8013a9e:	2224      	movs	r2, #36	@ 0x24
 8013aa0:	5c9b      	ldrb	r3, [r3, r2]
 8013aa2:	2b01      	cmp	r3, #1
 8013aa4:	d000      	beq.n	8013aa8 <HAL_PCD_EP_DB_Transmit+0x22c>
 8013aa6:	e2c6      	b.n	8014036 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	695a      	ldr	r2, [r3, #20]
 8013aac:	2186      	movs	r1, #134	@ 0x86
 8013aae:	187b      	adds	r3, r7, r1
 8013ab0:	881b      	ldrh	r3, [r3, #0]
 8013ab2:	18d2      	adds	r2, r2, r3
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8013ab8:	68bb      	ldr	r3, [r7, #8]
 8013aba:	69da      	ldr	r2, [r3, #28]
 8013abc:	187b      	adds	r3, r7, r1
 8013abe:	881b      	ldrh	r3, [r3, #0]
 8013ac0:	18d2      	adds	r2, r2, r3
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	6a1a      	ldr	r2, [r3, #32]
 8013aca:	68bb      	ldr	r3, [r7, #8]
 8013acc:	691b      	ldr	r3, [r3, #16]
 8013ace:	429a      	cmp	r2, r3
 8013ad0:	d30c      	bcc.n	8013aec <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8013ad2:	68bb      	ldr	r3, [r7, #8]
 8013ad4:	691b      	ldr	r3, [r3, #16]
 8013ad6:	218c      	movs	r1, #140	@ 0x8c
 8013ad8:	187a      	adds	r2, r7, r1
 8013ada:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	6a1a      	ldr	r2, [r3, #32]
 8013ae0:	187b      	adds	r3, r7, r1
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	1ad2      	subs	r2, r2, r3
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	621a      	str	r2, [r3, #32]
 8013aea:	e01a      	b.n	8013b22 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	6a1b      	ldr	r3, [r3, #32]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d10a      	bne.n	8013b0a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8013af4:	2386      	movs	r3, #134	@ 0x86
 8013af6:	18fb      	adds	r3, r7, r3
 8013af8:	881b      	ldrh	r3, [r3, #0]
 8013afa:	228c      	movs	r2, #140	@ 0x8c
 8013afc:	18ba      	adds	r2, r7, r2
 8013afe:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8013b00:	68bb      	ldr	r3, [r7, #8]
 8013b02:	2224      	movs	r2, #36	@ 0x24
 8013b04:	2100      	movs	r1, #0
 8013b06:	5499      	strb	r1, [r3, r2]
 8013b08:	e00b      	b.n	8013b22 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	2224      	movs	r2, #36	@ 0x24
 8013b0e:	2100      	movs	r1, #0
 8013b10:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8013b12:	68bb      	ldr	r3, [r7, #8]
 8013b14:	6a1b      	ldr	r3, [r3, #32]
 8013b16:	228c      	movs	r2, #140	@ 0x8c
 8013b18:	18ba      	adds	r2, r7, r2
 8013b1a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	2200      	movs	r2, #0
 8013b20:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	785b      	ldrb	r3, [r3, #1]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d000      	beq.n	8013b2c <HAL_PCD_EP_DB_Transmit+0x2b0>
 8013b2a:	e06d      	b.n	8013c08 <HAL_PCD_EP_DB_Transmit+0x38c>
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	2250      	movs	r2, #80	@ 0x50
 8013b38:	5a9b      	ldrh	r3, [r3, r2]
 8013b3a:	b29b      	uxth	r3, r3
 8013b3c:	001a      	movs	r2, r3
 8013b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b40:	189b      	adds	r3, r3, r2
 8013b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b44:	68bb      	ldr	r3, [r7, #8]
 8013b46:	781b      	ldrb	r3, [r3, #0]
 8013b48:	00da      	lsls	r2, r3, #3
 8013b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b4c:	18d3      	adds	r3, r2, r3
 8013b4e:	4a29      	ldr	r2, [pc, #164]	@ (8013bf4 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013b50:	4694      	mov	ip, r2
 8013b52:	4463      	add	r3, ip
 8013b54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b58:	881b      	ldrh	r3, [r3, #0]
 8013b5a:	b29b      	uxth	r3, r3
 8013b5c:	059b      	lsls	r3, r3, #22
 8013b5e:	0d9b      	lsrs	r3, r3, #22
 8013b60:	b29a      	uxth	r2, r3
 8013b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b64:	801a      	strh	r2, [r3, #0]
 8013b66:	228c      	movs	r2, #140	@ 0x8c
 8013b68:	18bb      	adds	r3, r7, r2
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8013b6e:	d91a      	bls.n	8013ba6 <HAL_PCD_EP_DB_Transmit+0x32a>
 8013b70:	18bb      	adds	r3, r7, r2
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	095b      	lsrs	r3, r3, #5
 8013b76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013b78:	18bb      	adds	r3, r7, r2
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	221f      	movs	r2, #31
 8013b7e:	4013      	ands	r3, r2
 8013b80:	d102      	bne.n	8013b88 <HAL_PCD_EP_DB_Transmit+0x30c>
 8013b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013b84:	3b01      	subs	r3, #1
 8013b86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b8a:	881b      	ldrh	r3, [r3, #0]
 8013b8c:	b29a      	uxth	r2, r3
 8013b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013b90:	b29b      	uxth	r3, r3
 8013b92:	029b      	lsls	r3, r3, #10
 8013b94:	b29b      	uxth	r3, r3
 8013b96:	4313      	orrs	r3, r2
 8013b98:	b29b      	uxth	r3, r3
 8013b9a:	4a17      	ldr	r2, [pc, #92]	@ (8013bf8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013b9c:	4313      	orrs	r3, r2
 8013b9e:	b29a      	uxth	r2, r3
 8013ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ba2:	801a      	strh	r2, [r3, #0]
 8013ba4:	e04f      	b.n	8013c46 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013ba6:	238c      	movs	r3, #140	@ 0x8c
 8013ba8:	18fb      	adds	r3, r7, r3
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d108      	bne.n	8013bc2 <HAL_PCD_EP_DB_Transmit+0x346>
 8013bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bb2:	881b      	ldrh	r3, [r3, #0]
 8013bb4:	b29b      	uxth	r3, r3
 8013bb6:	4a10      	ldr	r2, [pc, #64]	@ (8013bf8 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013bb8:	4313      	orrs	r3, r2
 8013bba:	b29a      	uxth	r2, r3
 8013bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bbe:	801a      	strh	r2, [r3, #0]
 8013bc0:	e041      	b.n	8013c46 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013bc2:	228c      	movs	r2, #140	@ 0x8c
 8013bc4:	18bb      	adds	r3, r7, r2
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	085b      	lsrs	r3, r3, #1
 8013bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013bcc:	18bb      	adds	r3, r7, r2
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	2201      	movs	r2, #1
 8013bd2:	4013      	ands	r3, r2
 8013bd4:	d002      	beq.n	8013bdc <HAL_PCD_EP_DB_Transmit+0x360>
 8013bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013bd8:	3301      	adds	r3, #1
 8013bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bde:	881b      	ldrh	r3, [r3, #0]
 8013be0:	b29a      	uxth	r2, r3
 8013be2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013be4:	b29b      	uxth	r3, r3
 8013be6:	029b      	lsls	r3, r3, #10
 8013be8:	b29b      	uxth	r3, r3
 8013bea:	4313      	orrs	r3, r2
 8013bec:	b29a      	uxth	r2, r3
 8013bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bf0:	801a      	strh	r2, [r3, #0]
 8013bf2:	e028      	b.n	8013c46 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013bf4:	00000402 	.word	0x00000402
 8013bf8:	ffff8000 	.word	0xffff8000
 8013bfc:	00000406 	.word	0x00000406
 8013c00:	ffff8f8f 	.word	0xffff8f8f
 8013c04:	ffffc080 	.word	0xffffc080
 8013c08:	68bb      	ldr	r3, [r7, #8]
 8013c0a:	785b      	ldrb	r3, [r3, #1]
 8013c0c:	2b01      	cmp	r3, #1
 8013c0e:	d11a      	bne.n	8013c46 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	2250      	movs	r2, #80	@ 0x50
 8013c1c:	5a9b      	ldrh	r3, [r3, r2]
 8013c1e:	b29b      	uxth	r3, r3
 8013c20:	001a      	movs	r2, r3
 8013c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c24:	189b      	adds	r3, r3, r2
 8013c26:	647b      	str	r3, [r7, #68]	@ 0x44
 8013c28:	68bb      	ldr	r3, [r7, #8]
 8013c2a:	781b      	ldrb	r3, [r3, #0]
 8013c2c:	00da      	lsls	r2, r3, #3
 8013c2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c30:	18d3      	adds	r3, r2, r3
 8013c32:	4adb      	ldr	r2, [pc, #876]	@ (8013fa0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013c34:	4694      	mov	ip, r2
 8013c36:	4463      	add	r3, ip
 8013c38:	643b      	str	r3, [r7, #64]	@ 0x40
 8013c3a:	238c      	movs	r3, #140	@ 0x8c
 8013c3c:	18fb      	adds	r3, r7, r3
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	b29a      	uxth	r2, r3
 8013c42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013c44:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	6818      	ldr	r0, [r3, #0]
 8013c4a:	68bb      	ldr	r3, [r7, #8]
 8013c4c:	6959      	ldr	r1, [r3, #20]
 8013c4e:	68bb      	ldr	r3, [r7, #8]
 8013c50:	891a      	ldrh	r2, [r3, #8]
 8013c52:	238c      	movs	r3, #140	@ 0x8c
 8013c54:	18fb      	adds	r3, r7, r3
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	b29b      	uxth	r3, r3
 8013c5a:	f006 fb47 	bl	801a2ec <USB_WritePMA>
 8013c5e:	e1ea      	b.n	8014036 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	2250      	movs	r2, #80	@ 0x50
 8013c66:	5a9b      	ldrh	r3, [r3, r2]
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	001a      	movs	r2, r3
 8013c6c:	68bb      	ldr	r3, [r7, #8]
 8013c6e:	781b      	ldrb	r3, [r3, #0]
 8013c70:	00db      	lsls	r3, r3, #3
 8013c72:	18d2      	adds	r2, r2, r3
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	18d3      	adds	r3, r2, r3
 8013c7a:	4aca      	ldr	r2, [pc, #808]	@ (8013fa4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013c7c:	4694      	mov	ip, r2
 8013c7e:	4463      	add	r3, ip
 8013c80:	881a      	ldrh	r2, [r3, #0]
 8013c82:	2186      	movs	r1, #134	@ 0x86
 8013c84:	187b      	adds	r3, r7, r1
 8013c86:	0592      	lsls	r2, r2, #22
 8013c88:	0d92      	lsrs	r2, r2, #22
 8013c8a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8013c8c:	68bb      	ldr	r3, [r7, #8]
 8013c8e:	699a      	ldr	r2, [r3, #24]
 8013c90:	187b      	adds	r3, r7, r1
 8013c92:	881b      	ldrh	r3, [r3, #0]
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d307      	bcc.n	8013ca8 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	699a      	ldr	r2, [r3, #24]
 8013c9c:	187b      	adds	r3, r7, r1
 8013c9e:	881b      	ldrh	r3, [r3, #0]
 8013ca0:	1ad2      	subs	r2, r2, r3
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	619a      	str	r2, [r3, #24]
 8013ca6:	e002      	b.n	8013cae <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	2200      	movs	r2, #0
 8013cac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8013cae:	68bb      	ldr	r3, [r7, #8]
 8013cb0:	699b      	ldr	r3, [r3, #24]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d000      	beq.n	8013cb8 <HAL_PCD_EP_DB_Transmit+0x43c>
 8013cb6:	e0bb      	b.n	8013e30 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013cb8:	68bb      	ldr	r3, [r7, #8]
 8013cba:	785b      	ldrb	r3, [r3, #1]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d125      	bne.n	8013d0c <HAL_PCD_EP_DB_Transmit+0x490>
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	2250      	movs	r2, #80	@ 0x50
 8013ccc:	5a9b      	ldrh	r3, [r3, r2]
 8013cce:	b29b      	uxth	r3, r3
 8013cd0:	001a      	movs	r2, r3
 8013cd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013cd4:	189b      	adds	r3, r3, r2
 8013cd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	781b      	ldrb	r3, [r3, #0]
 8013cdc:	00da      	lsls	r2, r3, #3
 8013cde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013ce0:	18d3      	adds	r3, r2, r3
 8013ce2:	4aaf      	ldr	r2, [pc, #700]	@ (8013fa0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013ce4:	4694      	mov	ip, r2
 8013ce6:	4463      	add	r3, ip
 8013ce8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013cea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013cec:	881b      	ldrh	r3, [r3, #0]
 8013cee:	b29b      	uxth	r3, r3
 8013cf0:	059b      	lsls	r3, r3, #22
 8013cf2:	0d9b      	lsrs	r3, r3, #22
 8013cf4:	b29a      	uxth	r2, r3
 8013cf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013cf8:	801a      	strh	r2, [r3, #0]
 8013cfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013cfc:	881b      	ldrh	r3, [r3, #0]
 8013cfe:	b29b      	uxth	r3, r3
 8013d00:	4aa9      	ldr	r2, [pc, #676]	@ (8013fa8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013d02:	4313      	orrs	r3, r2
 8013d04:	b29a      	uxth	r2, r3
 8013d06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013d08:	801a      	strh	r2, [r3, #0]
 8013d0a:	e01b      	b.n	8013d44 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	785b      	ldrb	r3, [r3, #1]
 8013d10:	2b01      	cmp	r3, #1
 8013d12:	d117      	bne.n	8013d44 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	667b      	str	r3, [r7, #100]	@ 0x64
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	2250      	movs	r2, #80	@ 0x50
 8013d20:	5a9b      	ldrh	r3, [r3, r2]
 8013d22:	b29b      	uxth	r3, r3
 8013d24:	001a      	movs	r2, r3
 8013d26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013d28:	189b      	adds	r3, r3, r2
 8013d2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8013d2c:	68bb      	ldr	r3, [r7, #8]
 8013d2e:	781b      	ldrb	r3, [r3, #0]
 8013d30:	00da      	lsls	r2, r3, #3
 8013d32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013d34:	18d3      	adds	r3, r2, r3
 8013d36:	4a9a      	ldr	r2, [pc, #616]	@ (8013fa0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013d38:	4694      	mov	ip, r2
 8013d3a:	4463      	add	r3, ip
 8013d3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8013d3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013d40:	2200      	movs	r2, #0
 8013d42:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	677b      	str	r3, [r7, #116]	@ 0x74
 8013d4a:	68bb      	ldr	r3, [r7, #8]
 8013d4c:	785b      	ldrb	r3, [r3, #1]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d12b      	bne.n	8013daa <HAL_PCD_EP_DB_Transmit+0x52e>
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	2250      	movs	r2, #80	@ 0x50
 8013d5e:	5a9b      	ldrh	r3, [r3, r2]
 8013d60:	b29b      	uxth	r3, r3
 8013d62:	001a      	movs	r2, r3
 8013d64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013d66:	189b      	adds	r3, r3, r2
 8013d68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013d6a:	68bb      	ldr	r3, [r7, #8]
 8013d6c:	781b      	ldrb	r3, [r3, #0]
 8013d6e:	00da      	lsls	r2, r3, #3
 8013d70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013d72:	18d3      	adds	r3, r2, r3
 8013d74:	4a8b      	ldr	r2, [pc, #556]	@ (8013fa4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013d76:	4694      	mov	ip, r2
 8013d78:	4463      	add	r3, ip
 8013d7a:	2180      	movs	r1, #128	@ 0x80
 8013d7c:	187a      	adds	r2, r7, r1
 8013d7e:	6013      	str	r3, [r2, #0]
 8013d80:	187b      	adds	r3, r7, r1
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	881b      	ldrh	r3, [r3, #0]
 8013d86:	b29b      	uxth	r3, r3
 8013d88:	059b      	lsls	r3, r3, #22
 8013d8a:	0d9b      	lsrs	r3, r3, #22
 8013d8c:	b29a      	uxth	r2, r3
 8013d8e:	187b      	adds	r3, r7, r1
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	801a      	strh	r2, [r3, #0]
 8013d94:	187b      	adds	r3, r7, r1
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	881b      	ldrh	r3, [r3, #0]
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	4a82      	ldr	r2, [pc, #520]	@ (8013fa8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013d9e:	4313      	orrs	r3, r2
 8013da0:	b29a      	uxth	r2, r3
 8013da2:	187b      	adds	r3, r7, r1
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	801a      	strh	r2, [r3, #0]
 8013da8:	e018      	b.n	8013ddc <HAL_PCD_EP_DB_Transmit+0x560>
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	785b      	ldrb	r3, [r3, #1]
 8013dae:	2b01      	cmp	r3, #1
 8013db0:	d114      	bne.n	8013ddc <HAL_PCD_EP_DB_Transmit+0x560>
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	2250      	movs	r2, #80	@ 0x50
 8013db8:	5a9b      	ldrh	r3, [r3, r2]
 8013dba:	b29b      	uxth	r3, r3
 8013dbc:	001a      	movs	r2, r3
 8013dbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013dc0:	189b      	adds	r3, r3, r2
 8013dc2:	677b      	str	r3, [r7, #116]	@ 0x74
 8013dc4:	68bb      	ldr	r3, [r7, #8]
 8013dc6:	781b      	ldrb	r3, [r3, #0]
 8013dc8:	00da      	lsls	r2, r3, #3
 8013dca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013dcc:	18d3      	adds	r3, r2, r3
 8013dce:	4a75      	ldr	r2, [pc, #468]	@ (8013fa4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013dd0:	4694      	mov	ip, r2
 8013dd2:	4463      	add	r3, ip
 8013dd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8013dd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013dd8:	2200      	movs	r2, #0
 8013dda:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013ddc:	68bb      	ldr	r3, [r7, #8]
 8013dde:	781a      	ldrb	r2, [r3, #0]
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	0011      	movs	r1, r2
 8013de4:	0018      	movs	r0, r3
 8013de6:	f008 fb05 	bl	801c3f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8013dea:	1dbb      	adds	r3, r7, #6
 8013dec:	881a      	ldrh	r2, [r3, #0]
 8013dee:	2380      	movs	r3, #128	@ 0x80
 8013df0:	01db      	lsls	r3, r3, #7
 8013df2:	4013      	ands	r3, r2
 8013df4:	d000      	beq.n	8013df8 <HAL_PCD_EP_DB_Transmit+0x57c>
 8013df6:	e11e      	b.n	8014036 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	001a      	movs	r2, r3
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	781b      	ldrb	r3, [r3, #0]
 8013e02:	009b      	lsls	r3, r3, #2
 8013e04:	18d3      	adds	r3, r2, r3
 8013e06:	881b      	ldrh	r3, [r3, #0]
 8013e08:	b29a      	uxth	r2, r3
 8013e0a:	2088      	movs	r0, #136	@ 0x88
 8013e0c:	183b      	adds	r3, r7, r0
 8013e0e:	4967      	ldr	r1, [pc, #412]	@ (8013fac <HAL_PCD_EP_DB_Transmit+0x730>)
 8013e10:	400a      	ands	r2, r1
 8013e12:	801a      	strh	r2, [r3, #0]
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	001a      	movs	r2, r3
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	781b      	ldrb	r3, [r3, #0]
 8013e1e:	009b      	lsls	r3, r3, #2
 8013e20:	18d3      	adds	r3, r2, r3
 8013e22:	183a      	adds	r2, r7, r0
 8013e24:	8812      	ldrh	r2, [r2, #0]
 8013e26:	4962      	ldr	r1, [pc, #392]	@ (8013fb0 <HAL_PCD_EP_DB_Transmit+0x734>)
 8013e28:	430a      	orrs	r2, r1
 8013e2a:	b292      	uxth	r2, r2
 8013e2c:	801a      	strh	r2, [r3, #0]
 8013e2e:	e102      	b.n	8014036 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8013e30:	1dbb      	adds	r3, r7, #6
 8013e32:	881a      	ldrh	r2, [r3, #0]
 8013e34:	2380      	movs	r3, #128	@ 0x80
 8013e36:	01db      	lsls	r3, r3, #7
 8013e38:	4013      	ands	r3, r2
 8013e3a:	d11a      	bne.n	8013e72 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	001a      	movs	r2, r3
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	781b      	ldrb	r3, [r3, #0]
 8013e46:	009b      	lsls	r3, r3, #2
 8013e48:	18d3      	adds	r3, r2, r3
 8013e4a:	881b      	ldrh	r3, [r3, #0]
 8013e4c:	b29a      	uxth	r2, r3
 8013e4e:	204e      	movs	r0, #78	@ 0x4e
 8013e50:	183b      	adds	r3, r7, r0
 8013e52:	4956      	ldr	r1, [pc, #344]	@ (8013fac <HAL_PCD_EP_DB_Transmit+0x730>)
 8013e54:	400a      	ands	r2, r1
 8013e56:	801a      	strh	r2, [r3, #0]
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	001a      	movs	r2, r3
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	781b      	ldrb	r3, [r3, #0]
 8013e62:	009b      	lsls	r3, r3, #2
 8013e64:	18d3      	adds	r3, r2, r3
 8013e66:	183a      	adds	r2, r7, r0
 8013e68:	8812      	ldrh	r2, [r2, #0]
 8013e6a:	4951      	ldr	r1, [pc, #324]	@ (8013fb0 <HAL_PCD_EP_DB_Transmit+0x734>)
 8013e6c:	430a      	orrs	r2, r1
 8013e6e:	b292      	uxth	r2, r2
 8013e70:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8013e72:	68bb      	ldr	r3, [r7, #8]
 8013e74:	2224      	movs	r2, #36	@ 0x24
 8013e76:	5c9b      	ldrb	r3, [r3, r2]
 8013e78:	2b01      	cmp	r3, #1
 8013e7a:	d000      	beq.n	8013e7e <HAL_PCD_EP_DB_Transmit+0x602>
 8013e7c:	e0db      	b.n	8014036 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	695a      	ldr	r2, [r3, #20]
 8013e82:	2186      	movs	r1, #134	@ 0x86
 8013e84:	187b      	adds	r3, r7, r1
 8013e86:	881b      	ldrh	r3, [r3, #0]
 8013e88:	18d2      	adds	r2, r2, r3
 8013e8a:	68bb      	ldr	r3, [r7, #8]
 8013e8c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	69da      	ldr	r2, [r3, #28]
 8013e92:	187b      	adds	r3, r7, r1
 8013e94:	881b      	ldrh	r3, [r3, #0]
 8013e96:	18d2      	adds	r2, r2, r3
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8013e9c:	68bb      	ldr	r3, [r7, #8]
 8013e9e:	6a1a      	ldr	r2, [r3, #32]
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	691b      	ldr	r3, [r3, #16]
 8013ea4:	429a      	cmp	r2, r3
 8013ea6:	d30c      	bcc.n	8013ec2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	691b      	ldr	r3, [r3, #16]
 8013eac:	218c      	movs	r1, #140	@ 0x8c
 8013eae:	187a      	adds	r2, r7, r1
 8013eb0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	6a1a      	ldr	r2, [r3, #32]
 8013eb6:	187b      	adds	r3, r7, r1
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	1ad2      	subs	r2, r2, r3
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	621a      	str	r2, [r3, #32]
 8013ec0:	e01a      	b.n	8013ef8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8013ec2:	68bb      	ldr	r3, [r7, #8]
 8013ec4:	6a1b      	ldr	r3, [r3, #32]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d10a      	bne.n	8013ee0 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8013eca:	2386      	movs	r3, #134	@ 0x86
 8013ecc:	18fb      	adds	r3, r7, r3
 8013ece:	881b      	ldrh	r3, [r3, #0]
 8013ed0:	228c      	movs	r2, #140	@ 0x8c
 8013ed2:	18ba      	adds	r2, r7, r2
 8013ed4:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8013ed6:	68bb      	ldr	r3, [r7, #8]
 8013ed8:	2224      	movs	r2, #36	@ 0x24
 8013eda:	2100      	movs	r1, #0
 8013edc:	5499      	strb	r1, [r3, r2]
 8013ede:	e00b      	b.n	8013ef8 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8013ee0:	68bb      	ldr	r3, [r7, #8]
 8013ee2:	6a1b      	ldr	r3, [r3, #32]
 8013ee4:	228c      	movs	r2, #140	@ 0x8c
 8013ee6:	18ba      	adds	r2, r7, r2
 8013ee8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	2200      	movs	r2, #0
 8013eee:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8013ef0:	68bb      	ldr	r3, [r7, #8]
 8013ef2:	2224      	movs	r2, #36	@ 0x24
 8013ef4:	2100      	movs	r1, #0
 8013ef6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	657b      	str	r3, [r7, #84]	@ 0x54
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	785b      	ldrb	r3, [r3, #1]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d000      	beq.n	8013f08 <HAL_PCD_EP_DB_Transmit+0x68c>
 8013f06:	e06e      	b.n	8013fe6 <HAL_PCD_EP_DB_Transmit+0x76a>
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	2250      	movs	r2, #80	@ 0x50
 8013f14:	5a9b      	ldrh	r3, [r3, r2]
 8013f16:	b29b      	uxth	r3, r3
 8013f18:	001a      	movs	r2, r3
 8013f1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f1c:	189b      	adds	r3, r3, r2
 8013f1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	781b      	ldrb	r3, [r3, #0]
 8013f24:	00da      	lsls	r2, r3, #3
 8013f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f28:	18d3      	adds	r3, r2, r3
 8013f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8013fa4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013f2c:	4694      	mov	ip, r2
 8013f2e:	4463      	add	r3, ip
 8013f30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013f32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f34:	881b      	ldrh	r3, [r3, #0]
 8013f36:	b29b      	uxth	r3, r3
 8013f38:	059b      	lsls	r3, r3, #22
 8013f3a:	0d9b      	lsrs	r3, r3, #22
 8013f3c:	b29a      	uxth	r2, r3
 8013f3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f40:	801a      	strh	r2, [r3, #0]
 8013f42:	228c      	movs	r2, #140	@ 0x8c
 8013f44:	18bb      	adds	r3, r7, r2
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	2b3e      	cmp	r3, #62	@ 0x3e
 8013f4a:	d91a      	bls.n	8013f82 <HAL_PCD_EP_DB_Transmit+0x706>
 8013f4c:	18bb      	adds	r3, r7, r2
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	095b      	lsrs	r3, r3, #5
 8013f52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013f54:	18bb      	adds	r3, r7, r2
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	221f      	movs	r2, #31
 8013f5a:	4013      	ands	r3, r2
 8013f5c:	d102      	bne.n	8013f64 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8013f5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013f60:	3b01      	subs	r3, #1
 8013f62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013f64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f66:	881b      	ldrh	r3, [r3, #0]
 8013f68:	b29a      	uxth	r2, r3
 8013f6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013f6c:	b29b      	uxth	r3, r3
 8013f6e:	029b      	lsls	r3, r3, #10
 8013f70:	b29b      	uxth	r3, r3
 8013f72:	4313      	orrs	r3, r2
 8013f74:	b29b      	uxth	r3, r3
 8013f76:	4a0c      	ldr	r2, [pc, #48]	@ (8013fa8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013f78:	4313      	orrs	r3, r2
 8013f7a:	b29a      	uxth	r2, r3
 8013f7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f7e:	801a      	strh	r2, [r3, #0]
 8013f80:	e04d      	b.n	801401e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013f82:	238c      	movs	r3, #140	@ 0x8c
 8013f84:	18fb      	adds	r3, r7, r3
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d113      	bne.n	8013fb4 <HAL_PCD_EP_DB_Transmit+0x738>
 8013f8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f8e:	881b      	ldrh	r3, [r3, #0]
 8013f90:	b29b      	uxth	r3, r3
 8013f92:	4a05      	ldr	r2, [pc, #20]	@ (8013fa8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013f94:	4313      	orrs	r3, r2
 8013f96:	b29a      	uxth	r2, r3
 8013f98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f9a:	801a      	strh	r2, [r3, #0]
 8013f9c:	e03f      	b.n	801401e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013f9e:	46c0      	nop			@ (mov r8, r8)
 8013fa0:	00000402 	.word	0x00000402
 8013fa4:	00000406 	.word	0x00000406
 8013fa8:	ffff8000 	.word	0xffff8000
 8013fac:	ffff8f8f 	.word	0xffff8f8f
 8013fb0:	ffffc080 	.word	0xffffc080
 8013fb4:	228c      	movs	r2, #140	@ 0x8c
 8013fb6:	18bb      	adds	r3, r7, r2
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	085b      	lsrs	r3, r3, #1
 8013fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013fbe:	18bb      	adds	r3, r7, r2
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	2201      	movs	r2, #1
 8013fc4:	4013      	ands	r3, r2
 8013fc6:	d002      	beq.n	8013fce <HAL_PCD_EP_DB_Transmit+0x752>
 8013fc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013fca:	3301      	adds	r3, #1
 8013fcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013fce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013fd0:	881b      	ldrh	r3, [r3, #0]
 8013fd2:	b29a      	uxth	r2, r3
 8013fd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013fd6:	b29b      	uxth	r3, r3
 8013fd8:	029b      	lsls	r3, r3, #10
 8013fda:	b29b      	uxth	r3, r3
 8013fdc:	4313      	orrs	r3, r2
 8013fde:	b29a      	uxth	r2, r3
 8013fe0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013fe2:	801a      	strh	r2, [r3, #0]
 8013fe4:	e01b      	b.n	801401e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013fe6:	68bb      	ldr	r3, [r7, #8]
 8013fe8:	785b      	ldrb	r3, [r3, #1]
 8013fea:	2b01      	cmp	r3, #1
 8013fec:	d117      	bne.n	801401e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	2250      	movs	r2, #80	@ 0x50
 8013ff4:	5a9b      	ldrh	r3, [r3, r2]
 8013ff6:	b29b      	uxth	r3, r3
 8013ff8:	001a      	movs	r2, r3
 8013ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ffc:	189b      	adds	r3, r3, r2
 8013ffe:	657b      	str	r3, [r7, #84]	@ 0x54
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	781b      	ldrb	r3, [r3, #0]
 8014004:	00da      	lsls	r2, r3, #3
 8014006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014008:	18d3      	adds	r3, r2, r3
 801400a:	4a21      	ldr	r2, [pc, #132]	@ (8014090 <HAL_PCD_EP_DB_Transmit+0x814>)
 801400c:	4694      	mov	ip, r2
 801400e:	4463      	add	r3, ip
 8014010:	653b      	str	r3, [r7, #80]	@ 0x50
 8014012:	238c      	movs	r3, #140	@ 0x8c
 8014014:	18fb      	adds	r3, r7, r3
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	b29a      	uxth	r2, r3
 801401a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801401c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	6818      	ldr	r0, [r3, #0]
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	6959      	ldr	r1, [r3, #20]
 8014026:	68bb      	ldr	r3, [r7, #8]
 8014028:	895a      	ldrh	r2, [r3, #10]
 801402a:	238c      	movs	r3, #140	@ 0x8c
 801402c:	18fb      	adds	r3, r7, r3
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	b29b      	uxth	r3, r3
 8014032:	f006 f95b 	bl	801a2ec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	001a      	movs	r2, r3
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	781b      	ldrb	r3, [r3, #0]
 8014040:	009b      	lsls	r3, r3, #2
 8014042:	18d3      	adds	r3, r2, r3
 8014044:	881b      	ldrh	r3, [r3, #0]
 8014046:	b29a      	uxth	r2, r3
 8014048:	2014      	movs	r0, #20
 801404a:	183b      	adds	r3, r7, r0
 801404c:	4911      	ldr	r1, [pc, #68]	@ (8014094 <HAL_PCD_EP_DB_Transmit+0x818>)
 801404e:	400a      	ands	r2, r1
 8014050:	801a      	strh	r2, [r3, #0]
 8014052:	183b      	adds	r3, r7, r0
 8014054:	183a      	adds	r2, r7, r0
 8014056:	8812      	ldrh	r2, [r2, #0]
 8014058:	2110      	movs	r1, #16
 801405a:	404a      	eors	r2, r1
 801405c:	801a      	strh	r2, [r3, #0]
 801405e:	183b      	adds	r3, r7, r0
 8014060:	183a      	adds	r2, r7, r0
 8014062:	8812      	ldrh	r2, [r2, #0]
 8014064:	2120      	movs	r1, #32
 8014066:	404a      	eors	r2, r1
 8014068:	801a      	strh	r2, [r3, #0]
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	001a      	movs	r2, r3
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	781b      	ldrb	r3, [r3, #0]
 8014074:	009b      	lsls	r3, r3, #2
 8014076:	18d3      	adds	r3, r2, r3
 8014078:	183a      	adds	r2, r7, r0
 801407a:	8812      	ldrh	r2, [r2, #0]
 801407c:	4906      	ldr	r1, [pc, #24]	@ (8014098 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801407e:	430a      	orrs	r2, r1
 8014080:	b292      	uxth	r2, r2
 8014082:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8014084:	2300      	movs	r3, #0
}
 8014086:	0018      	movs	r0, r3
 8014088:	46bd      	mov	sp, r7
 801408a:	b024      	add	sp, #144	@ 0x90
 801408c:	bd80      	pop	{r7, pc}
 801408e:	46c0      	nop			@ (mov r8, r8)
 8014090:	00000406 	.word	0x00000406
 8014094:	ffff8fbf 	.word	0xffff8fbf
 8014098:	ffff8080 	.word	0xffff8080

0801409c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801409c:	b590      	push	{r4, r7, lr}
 801409e:	b087      	sub	sp, #28
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	60f8      	str	r0, [r7, #12]
 80140a4:	0008      	movs	r0, r1
 80140a6:	0011      	movs	r1, r2
 80140a8:	607b      	str	r3, [r7, #4]
 80140aa:	240a      	movs	r4, #10
 80140ac:	193b      	adds	r3, r7, r4
 80140ae:	1c02      	adds	r2, r0, #0
 80140b0:	801a      	strh	r2, [r3, #0]
 80140b2:	2308      	movs	r3, #8
 80140b4:	18fb      	adds	r3, r7, r3
 80140b6:	1c0a      	adds	r2, r1, #0
 80140b8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80140ba:	0021      	movs	r1, r4
 80140bc:	187b      	adds	r3, r7, r1
 80140be:	881b      	ldrh	r3, [r3, #0]
 80140c0:	2280      	movs	r2, #128	@ 0x80
 80140c2:	4013      	ands	r3, r2
 80140c4:	b29b      	uxth	r3, r3
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d00c      	beq.n	80140e4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80140ca:	187b      	adds	r3, r7, r1
 80140cc:	881b      	ldrh	r3, [r3, #0]
 80140ce:	2207      	movs	r2, #7
 80140d0:	4013      	ands	r3, r2
 80140d2:	1c5a      	adds	r2, r3, #1
 80140d4:	0013      	movs	r3, r2
 80140d6:	009b      	lsls	r3, r3, #2
 80140d8:	189b      	adds	r3, r3, r2
 80140da:	00db      	lsls	r3, r3, #3
 80140dc:	68fa      	ldr	r2, [r7, #12]
 80140de:	18d3      	adds	r3, r2, r3
 80140e0:	617b      	str	r3, [r7, #20]
 80140e2:	e00b      	b.n	80140fc <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80140e4:	230a      	movs	r3, #10
 80140e6:	18fb      	adds	r3, r7, r3
 80140e8:	881a      	ldrh	r2, [r3, #0]
 80140ea:	0013      	movs	r3, r2
 80140ec:	009b      	lsls	r3, r3, #2
 80140ee:	189b      	adds	r3, r3, r2
 80140f0:	00db      	lsls	r3, r3, #3
 80140f2:	3369      	adds	r3, #105	@ 0x69
 80140f4:	33ff      	adds	r3, #255	@ 0xff
 80140f6:	68fa      	ldr	r2, [r7, #12]
 80140f8:	18d3      	adds	r3, r2, r3
 80140fa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80140fc:	2308      	movs	r3, #8
 80140fe:	18fb      	adds	r3, r7, r3
 8014100:	881b      	ldrh	r3, [r3, #0]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d107      	bne.n	8014116 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8014106:	697b      	ldr	r3, [r7, #20]
 8014108:	2200      	movs	r2, #0
 801410a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	b29a      	uxth	r2, r3
 8014110:	697b      	ldr	r3, [r7, #20]
 8014112:	80da      	strh	r2, [r3, #6]
 8014114:	e00b      	b.n	801412e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8014116:	697b      	ldr	r3, [r7, #20]
 8014118:	2201      	movs	r2, #1
 801411a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	b29a      	uxth	r2, r3
 8014120:	697b      	ldr	r3, [r7, #20]
 8014122:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	0c1b      	lsrs	r3, r3, #16
 8014128:	b29a      	uxth	r2, r3
 801412a:	697b      	ldr	r3, [r7, #20]
 801412c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801412e:	2300      	movs	r3, #0
}
 8014130:	0018      	movs	r0, r3
 8014132:	46bd      	mov	sp, r7
 8014134:	b007      	add	sp, #28
 8014136:	bd90      	pop	{r4, r7, pc}

08014138 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b084      	sub	sp, #16
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8014146:	687a      	ldr	r2, [r7, #4]
 8014148:	23ba      	movs	r3, #186	@ 0xba
 801414a:	009b      	lsls	r3, r3, #2
 801414c:	2101      	movs	r1, #1
 801414e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8014150:	687a      	ldr	r2, [r7, #4]
 8014152:	23b8      	movs	r3, #184	@ 0xb8
 8014154:	009b      	lsls	r3, r3, #2
 8014156:	2100      	movs	r1, #0
 8014158:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	2254      	movs	r2, #84	@ 0x54
 801415e:	5a9b      	ldrh	r3, [r3, r2]
 8014160:	b29b      	uxth	r3, r3
 8014162:	2201      	movs	r2, #1
 8014164:	4313      	orrs	r3, r2
 8014166:	b299      	uxth	r1, r3
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	2254      	movs	r2, #84	@ 0x54
 801416c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	2254      	movs	r2, #84	@ 0x54
 8014172:	5a9b      	ldrh	r3, [r3, r2]
 8014174:	b29b      	uxth	r3, r3
 8014176:	2202      	movs	r2, #2
 8014178:	4313      	orrs	r3, r2
 801417a:	b299      	uxth	r1, r3
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	2254      	movs	r2, #84	@ 0x54
 8014180:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014182:	2300      	movs	r3, #0
}
 8014184:	0018      	movs	r0, r3
 8014186:	46bd      	mov	sp, r7
 8014188:	b004      	add	sp, #16
 801418a:	bd80      	pop	{r7, pc}

0801418c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b082      	sub	sp, #8
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	000a      	movs	r2, r1
 8014196:	1cfb      	adds	r3, r7, #3
 8014198:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801419a:	46c0      	nop			@ (mov r8, r8)
 801419c:	46bd      	mov	sp, r7
 801419e:	b002      	add	sp, #8
 80141a0:	bd80      	pop	{r7, pc}
	...

080141a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80141a8:	4b04      	ldr	r3, [pc, #16]	@ (80141bc <HAL_PWR_EnableBkUpAccess+0x18>)
 80141aa:	681a      	ldr	r2, [r3, #0]
 80141ac:	4b03      	ldr	r3, [pc, #12]	@ (80141bc <HAL_PWR_EnableBkUpAccess+0x18>)
 80141ae:	2180      	movs	r1, #128	@ 0x80
 80141b0:	0049      	lsls	r1, r1, #1
 80141b2:	430a      	orrs	r2, r1
 80141b4:	601a      	str	r2, [r3, #0]
}
 80141b6:	46c0      	nop			@ (mov r8, r8)
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}
 80141bc:	40007000 	.word	0x40007000

080141c0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b086      	sub	sp, #24
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	000a      	movs	r2, r1
 80141ca:	1cfb      	adds	r3, r7, #3
 80141cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80141ce:	2300      	movs	r3, #0
 80141d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80141d2:	4b25      	ldr	r3, [pc, #148]	@ (8014268 <HAL_PWR_EnterSTOPMode+0xa8>)
 80141d4:	681a      	ldr	r2, [r3, #0]
 80141d6:	2380      	movs	r3, #128	@ 0x80
 80141d8:	009b      	lsls	r3, r3, #2
 80141da:	4013      	ands	r3, r2
 80141dc:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80141de:	4b23      	ldr	r3, [pc, #140]	@ (801426c <HAL_PWR_EnterSTOPMode+0xac>)
 80141e0:	6a1b      	ldr	r3, [r3, #32]
 80141e2:	2201      	movs	r2, #1
 80141e4:	4013      	ands	r3, r2
 80141e6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80141e8:	693b      	ldr	r3, [r7, #16]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d008      	beq.n	8014200 <HAL_PWR_EnterSTOPMode+0x40>
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d005      	beq.n	8014200 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80141f4:	4b1c      	ldr	r3, [pc, #112]	@ (8014268 <HAL_PWR_EnterSTOPMode+0xa8>)
 80141f6:	681a      	ldr	r2, [r3, #0]
 80141f8:	4b1b      	ldr	r3, [pc, #108]	@ (8014268 <HAL_PWR_EnterSTOPMode+0xa8>)
 80141fa:	491d      	ldr	r1, [pc, #116]	@ (8014270 <HAL_PWR_EnterSTOPMode+0xb0>)
 80141fc:	400a      	ands	r2, r1
 80141fe:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8014200:	4b19      	ldr	r3, [pc, #100]	@ (8014268 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	2203      	movs	r2, #3
 801420a:	4393      	bics	r3, r2
 801420c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801420e:	697a      	ldr	r2, [r7, #20]
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	4313      	orrs	r3, r2
 8014214:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8014216:	4b14      	ldr	r3, [pc, #80]	@ (8014268 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014218:	697a      	ldr	r2, [r7, #20]
 801421a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801421c:	4b15      	ldr	r3, [pc, #84]	@ (8014274 <HAL_PWR_EnterSTOPMode+0xb4>)
 801421e:	691a      	ldr	r2, [r3, #16]
 8014220:	4b14      	ldr	r3, [pc, #80]	@ (8014274 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014222:	2104      	movs	r1, #4
 8014224:	430a      	orrs	r2, r1
 8014226:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8014228:	1cfb      	adds	r3, r7, #3
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	2b01      	cmp	r3, #1
 801422e:	d101      	bne.n	8014234 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8014230:	bf30      	wfi
 8014232:	e002      	b.n	801423a <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8014234:	bf40      	sev
    __WFE();
 8014236:	bf20      	wfe
    __WFE();
 8014238:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801423a:	4b0e      	ldr	r3, [pc, #56]	@ (8014274 <HAL_PWR_EnterSTOPMode+0xb4>)
 801423c:	691a      	ldr	r2, [r3, #16]
 801423e:	4b0d      	ldr	r3, [pc, #52]	@ (8014274 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014240:	2104      	movs	r1, #4
 8014242:	438a      	bics	r2, r1
 8014244:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8014246:	693b      	ldr	r3, [r7, #16]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d009      	beq.n	8014260 <HAL_PWR_EnterSTOPMode+0xa0>
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d006      	beq.n	8014260 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8014252:	4b05      	ldr	r3, [pc, #20]	@ (8014268 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014254:	681a      	ldr	r2, [r3, #0]
 8014256:	4b04      	ldr	r3, [pc, #16]	@ (8014268 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014258:	2180      	movs	r1, #128	@ 0x80
 801425a:	0089      	lsls	r1, r1, #2
 801425c:	430a      	orrs	r2, r1
 801425e:	601a      	str	r2, [r3, #0]
  }
}
 8014260:	46c0      	nop			@ (mov r8, r8)
 8014262:	46bd      	mov	sp, r7
 8014264:	b006      	add	sp, #24
 8014266:	bd80      	pop	{r7, pc}
 8014268:	40007000 	.word	0x40007000
 801426c:	40010000 	.word	0x40010000
 8014270:	fffffdff 	.word	0xfffffdff
 8014274:	e000ed00 	.word	0xe000ed00

08014278 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 801427c:	4b07      	ldr	r3, [pc, #28]	@ (801429c <HAL_PWR_EnterSTANDBYMode+0x24>)
 801427e:	681a      	ldr	r2, [r3, #0]
 8014280:	4b06      	ldr	r3, [pc, #24]	@ (801429c <HAL_PWR_EnterSTANDBYMode+0x24>)
 8014282:	2102      	movs	r1, #2
 8014284:	430a      	orrs	r2, r1
 8014286:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014288:	4b05      	ldr	r3, [pc, #20]	@ (80142a0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801428a:	691a      	ldr	r2, [r3, #16]
 801428c:	4b04      	ldr	r3, [pc, #16]	@ (80142a0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801428e:	2104      	movs	r1, #4
 8014290:	430a      	orrs	r2, r1
 8014292:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8014294:	bf30      	wfi
}
 8014296:	46c0      	nop			@ (mov r8, r8)
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}
 801429c:	40007000 	.word	0x40007000
 80142a0:	e000ed00 	.word	0xe000ed00

080142a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80142a4:	b5b0      	push	{r4, r5, r7, lr}
 80142a6:	b08a      	sub	sp, #40	@ 0x28
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d102      	bne.n	80142b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80142b2:	2301      	movs	r3, #1
 80142b4:	f000 fbbf 	bl	8014a36 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80142b8:	4bc9      	ldr	r3, [pc, #804]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 80142ba:	68db      	ldr	r3, [r3, #12]
 80142bc:	220c      	movs	r2, #12
 80142be:	4013      	ands	r3, r2
 80142c0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80142c2:	4bc7      	ldr	r3, [pc, #796]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 80142c4:	68da      	ldr	r2, [r3, #12]
 80142c6:	2380      	movs	r3, #128	@ 0x80
 80142c8:	025b      	lsls	r3, r3, #9
 80142ca:	4013      	ands	r3, r2
 80142cc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	2201      	movs	r2, #1
 80142d4:	4013      	ands	r3, r2
 80142d6:	d100      	bne.n	80142da <HAL_RCC_OscConfig+0x36>
 80142d8:	e07e      	b.n	80143d8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80142da:	69fb      	ldr	r3, [r7, #28]
 80142dc:	2b08      	cmp	r3, #8
 80142de:	d007      	beq.n	80142f0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80142e0:	69fb      	ldr	r3, [r7, #28]
 80142e2:	2b0c      	cmp	r3, #12
 80142e4:	d112      	bne.n	801430c <HAL_RCC_OscConfig+0x68>
 80142e6:	69ba      	ldr	r2, [r7, #24]
 80142e8:	2380      	movs	r3, #128	@ 0x80
 80142ea:	025b      	lsls	r3, r3, #9
 80142ec:	429a      	cmp	r2, r3
 80142ee:	d10d      	bne.n	801430c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80142f0:	4bbb      	ldr	r3, [pc, #748]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 80142f2:	681a      	ldr	r2, [r3, #0]
 80142f4:	2380      	movs	r3, #128	@ 0x80
 80142f6:	029b      	lsls	r3, r3, #10
 80142f8:	4013      	ands	r3, r2
 80142fa:	d100      	bne.n	80142fe <HAL_RCC_OscConfig+0x5a>
 80142fc:	e06b      	b.n	80143d6 <HAL_RCC_OscConfig+0x132>
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	685b      	ldr	r3, [r3, #4]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d167      	bne.n	80143d6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8014306:	2301      	movs	r3, #1
 8014308:	f000 fb95 	bl	8014a36 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	685a      	ldr	r2, [r3, #4]
 8014310:	2380      	movs	r3, #128	@ 0x80
 8014312:	025b      	lsls	r3, r3, #9
 8014314:	429a      	cmp	r2, r3
 8014316:	d107      	bne.n	8014328 <HAL_RCC_OscConfig+0x84>
 8014318:	4bb1      	ldr	r3, [pc, #708]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 801431a:	681a      	ldr	r2, [r3, #0]
 801431c:	4bb0      	ldr	r3, [pc, #704]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 801431e:	2180      	movs	r1, #128	@ 0x80
 8014320:	0249      	lsls	r1, r1, #9
 8014322:	430a      	orrs	r2, r1
 8014324:	601a      	str	r2, [r3, #0]
 8014326:	e027      	b.n	8014378 <HAL_RCC_OscConfig+0xd4>
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	685a      	ldr	r2, [r3, #4]
 801432c:	23a0      	movs	r3, #160	@ 0xa0
 801432e:	02db      	lsls	r3, r3, #11
 8014330:	429a      	cmp	r2, r3
 8014332:	d10e      	bne.n	8014352 <HAL_RCC_OscConfig+0xae>
 8014334:	4baa      	ldr	r3, [pc, #680]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 8014336:	681a      	ldr	r2, [r3, #0]
 8014338:	4ba9      	ldr	r3, [pc, #676]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 801433a:	2180      	movs	r1, #128	@ 0x80
 801433c:	02c9      	lsls	r1, r1, #11
 801433e:	430a      	orrs	r2, r1
 8014340:	601a      	str	r2, [r3, #0]
 8014342:	4ba7      	ldr	r3, [pc, #668]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 8014344:	681a      	ldr	r2, [r3, #0]
 8014346:	4ba6      	ldr	r3, [pc, #664]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 8014348:	2180      	movs	r1, #128	@ 0x80
 801434a:	0249      	lsls	r1, r1, #9
 801434c:	430a      	orrs	r2, r1
 801434e:	601a      	str	r2, [r3, #0]
 8014350:	e012      	b.n	8014378 <HAL_RCC_OscConfig+0xd4>
 8014352:	4ba3      	ldr	r3, [pc, #652]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 8014354:	681a      	ldr	r2, [r3, #0]
 8014356:	4ba2      	ldr	r3, [pc, #648]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 8014358:	49a2      	ldr	r1, [pc, #648]	@ (80145e4 <HAL_RCC_OscConfig+0x340>)
 801435a:	400a      	ands	r2, r1
 801435c:	601a      	str	r2, [r3, #0]
 801435e:	4ba0      	ldr	r3, [pc, #640]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 8014360:	681a      	ldr	r2, [r3, #0]
 8014362:	2380      	movs	r3, #128	@ 0x80
 8014364:	025b      	lsls	r3, r3, #9
 8014366:	4013      	ands	r3, r2
 8014368:	60fb      	str	r3, [r7, #12]
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	4b9c      	ldr	r3, [pc, #624]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 801436e:	681a      	ldr	r2, [r3, #0]
 8014370:	4b9b      	ldr	r3, [pc, #620]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 8014372:	499d      	ldr	r1, [pc, #628]	@ (80145e8 <HAL_RCC_OscConfig+0x344>)
 8014374:	400a      	ands	r2, r1
 8014376:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	685b      	ldr	r3, [r3, #4]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d015      	beq.n	80143ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014380:	f7f9 fe86 	bl	800e090 <HAL_GetTick>
 8014384:	0003      	movs	r3, r0
 8014386:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014388:	e009      	b.n	801439e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801438a:	f7f9 fe81 	bl	800e090 <HAL_GetTick>
 801438e:	0002      	movs	r2, r0
 8014390:	697b      	ldr	r3, [r7, #20]
 8014392:	1ad3      	subs	r3, r2, r3
 8014394:	2b64      	cmp	r3, #100	@ 0x64
 8014396:	d902      	bls.n	801439e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8014398:	2303      	movs	r3, #3
 801439a:	f000 fb4c 	bl	8014a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801439e:	4b90      	ldr	r3, [pc, #576]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 80143a0:	681a      	ldr	r2, [r3, #0]
 80143a2:	2380      	movs	r3, #128	@ 0x80
 80143a4:	029b      	lsls	r3, r3, #10
 80143a6:	4013      	ands	r3, r2
 80143a8:	d0ef      	beq.n	801438a <HAL_RCC_OscConfig+0xe6>
 80143aa:	e015      	b.n	80143d8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80143ac:	f7f9 fe70 	bl	800e090 <HAL_GetTick>
 80143b0:	0003      	movs	r3, r0
 80143b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80143b4:	e008      	b.n	80143c8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80143b6:	f7f9 fe6b 	bl	800e090 <HAL_GetTick>
 80143ba:	0002      	movs	r2, r0
 80143bc:	697b      	ldr	r3, [r7, #20]
 80143be:	1ad3      	subs	r3, r2, r3
 80143c0:	2b64      	cmp	r3, #100	@ 0x64
 80143c2:	d901      	bls.n	80143c8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80143c4:	2303      	movs	r3, #3
 80143c6:	e336      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80143c8:	4b85      	ldr	r3, [pc, #532]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 80143ca:	681a      	ldr	r2, [r3, #0]
 80143cc:	2380      	movs	r3, #128	@ 0x80
 80143ce:	029b      	lsls	r3, r3, #10
 80143d0:	4013      	ands	r3, r2
 80143d2:	d1f0      	bne.n	80143b6 <HAL_RCC_OscConfig+0x112>
 80143d4:	e000      	b.n	80143d8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80143d6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	2202      	movs	r2, #2
 80143de:	4013      	ands	r3, r2
 80143e0:	d100      	bne.n	80143e4 <HAL_RCC_OscConfig+0x140>
 80143e2:	e099      	b.n	8014518 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	68db      	ldr	r3, [r3, #12]
 80143e8:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80143ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143ec:	2220      	movs	r2, #32
 80143ee:	4013      	ands	r3, r2
 80143f0:	d009      	beq.n	8014406 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80143f2:	4b7b      	ldr	r3, [pc, #492]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 80143f4:	681a      	ldr	r2, [r3, #0]
 80143f6:	4b7a      	ldr	r3, [pc, #488]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 80143f8:	2120      	movs	r1, #32
 80143fa:	430a      	orrs	r2, r1
 80143fc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80143fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014400:	2220      	movs	r2, #32
 8014402:	4393      	bics	r3, r2
 8014404:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8014406:	69fb      	ldr	r3, [r7, #28]
 8014408:	2b04      	cmp	r3, #4
 801440a:	d005      	beq.n	8014418 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801440c:	69fb      	ldr	r3, [r7, #28]
 801440e:	2b0c      	cmp	r3, #12
 8014410:	d13e      	bne.n	8014490 <HAL_RCC_OscConfig+0x1ec>
 8014412:	69bb      	ldr	r3, [r7, #24]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d13b      	bne.n	8014490 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8014418:	4b71      	ldr	r3, [pc, #452]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	2204      	movs	r2, #4
 801441e:	4013      	ands	r3, r2
 8014420:	d004      	beq.n	801442c <HAL_RCC_OscConfig+0x188>
 8014422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014424:	2b00      	cmp	r3, #0
 8014426:	d101      	bne.n	801442c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8014428:	2301      	movs	r3, #1
 801442a:	e304      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801442c:	4b6c      	ldr	r3, [pc, #432]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 801442e:	685b      	ldr	r3, [r3, #4]
 8014430:	4a6e      	ldr	r2, [pc, #440]	@ (80145ec <HAL_RCC_OscConfig+0x348>)
 8014432:	4013      	ands	r3, r2
 8014434:	0019      	movs	r1, r3
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	691b      	ldr	r3, [r3, #16]
 801443a:	021a      	lsls	r2, r3, #8
 801443c:	4b68      	ldr	r3, [pc, #416]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 801443e:	430a      	orrs	r2, r1
 8014440:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8014442:	4b67      	ldr	r3, [pc, #412]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	2209      	movs	r2, #9
 8014448:	4393      	bics	r3, r2
 801444a:	0019      	movs	r1, r3
 801444c:	4b64      	ldr	r3, [pc, #400]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 801444e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014450:	430a      	orrs	r2, r1
 8014452:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014454:	f000 fc42 	bl	8014cdc <HAL_RCC_GetSysClockFreq>
 8014458:	0001      	movs	r1, r0
 801445a:	4b61      	ldr	r3, [pc, #388]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 801445c:	68db      	ldr	r3, [r3, #12]
 801445e:	091b      	lsrs	r3, r3, #4
 8014460:	220f      	movs	r2, #15
 8014462:	4013      	ands	r3, r2
 8014464:	4a62      	ldr	r2, [pc, #392]	@ (80145f0 <HAL_RCC_OscConfig+0x34c>)
 8014466:	5cd3      	ldrb	r3, [r2, r3]
 8014468:	000a      	movs	r2, r1
 801446a:	40da      	lsrs	r2, r3
 801446c:	4b61      	ldr	r3, [pc, #388]	@ (80145f4 <HAL_RCC_OscConfig+0x350>)
 801446e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8014470:	4b61      	ldr	r3, [pc, #388]	@ (80145f8 <HAL_RCC_OscConfig+0x354>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	2513      	movs	r5, #19
 8014476:	197c      	adds	r4, r7, r5
 8014478:	0018      	movs	r0, r3
 801447a:	f7f9 fdc3 	bl	800e004 <HAL_InitTick>
 801447e:	0003      	movs	r3, r0
 8014480:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8014482:	197b      	adds	r3, r7, r5
 8014484:	781b      	ldrb	r3, [r3, #0]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d046      	beq.n	8014518 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801448a:	197b      	adds	r3, r7, r5
 801448c:	781b      	ldrb	r3, [r3, #0]
 801448e:	e2d2      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8014490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014492:	2b00      	cmp	r3, #0
 8014494:	d027      	beq.n	80144e6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8014496:	4b52      	ldr	r3, [pc, #328]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	2209      	movs	r2, #9
 801449c:	4393      	bics	r3, r2
 801449e:	0019      	movs	r1, r3
 80144a0:	4b4f      	ldr	r3, [pc, #316]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 80144a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80144a4:	430a      	orrs	r2, r1
 80144a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80144a8:	f7f9 fdf2 	bl	800e090 <HAL_GetTick>
 80144ac:	0003      	movs	r3, r0
 80144ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80144b0:	e008      	b.n	80144c4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80144b2:	f7f9 fded 	bl	800e090 <HAL_GetTick>
 80144b6:	0002      	movs	r2, r0
 80144b8:	697b      	ldr	r3, [r7, #20]
 80144ba:	1ad3      	subs	r3, r2, r3
 80144bc:	2b02      	cmp	r3, #2
 80144be:	d901      	bls.n	80144c4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80144c0:	2303      	movs	r3, #3
 80144c2:	e2b8      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80144c4:	4b46      	ldr	r3, [pc, #280]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	2204      	movs	r2, #4
 80144ca:	4013      	ands	r3, r2
 80144cc:	d0f1      	beq.n	80144b2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80144ce:	4b44      	ldr	r3, [pc, #272]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 80144d0:	685b      	ldr	r3, [r3, #4]
 80144d2:	4a46      	ldr	r2, [pc, #280]	@ (80145ec <HAL_RCC_OscConfig+0x348>)
 80144d4:	4013      	ands	r3, r2
 80144d6:	0019      	movs	r1, r3
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	691b      	ldr	r3, [r3, #16]
 80144dc:	021a      	lsls	r2, r3, #8
 80144de:	4b40      	ldr	r3, [pc, #256]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 80144e0:	430a      	orrs	r2, r1
 80144e2:	605a      	str	r2, [r3, #4]
 80144e4:	e018      	b.n	8014518 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80144e6:	4b3e      	ldr	r3, [pc, #248]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 80144e8:	681a      	ldr	r2, [r3, #0]
 80144ea:	4b3d      	ldr	r3, [pc, #244]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 80144ec:	2101      	movs	r1, #1
 80144ee:	438a      	bics	r2, r1
 80144f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80144f2:	f7f9 fdcd 	bl	800e090 <HAL_GetTick>
 80144f6:	0003      	movs	r3, r0
 80144f8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80144fa:	e008      	b.n	801450e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80144fc:	f7f9 fdc8 	bl	800e090 <HAL_GetTick>
 8014500:	0002      	movs	r2, r0
 8014502:	697b      	ldr	r3, [r7, #20]
 8014504:	1ad3      	subs	r3, r2, r3
 8014506:	2b02      	cmp	r3, #2
 8014508:	d901      	bls.n	801450e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801450a:	2303      	movs	r3, #3
 801450c:	e293      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801450e:	4b34      	ldr	r3, [pc, #208]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	2204      	movs	r2, #4
 8014514:	4013      	ands	r3, r2
 8014516:	d1f1      	bne.n	80144fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	2210      	movs	r2, #16
 801451e:	4013      	ands	r3, r2
 8014520:	d100      	bne.n	8014524 <HAL_RCC_OscConfig+0x280>
 8014522:	e0a2      	b.n	801466a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8014524:	69fb      	ldr	r3, [r7, #28]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d140      	bne.n	80145ac <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801452a:	4b2d      	ldr	r3, [pc, #180]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 801452c:	681a      	ldr	r2, [r3, #0]
 801452e:	2380      	movs	r3, #128	@ 0x80
 8014530:	009b      	lsls	r3, r3, #2
 8014532:	4013      	ands	r3, r2
 8014534:	d005      	beq.n	8014542 <HAL_RCC_OscConfig+0x29e>
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	69db      	ldr	r3, [r3, #28]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d101      	bne.n	8014542 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801453e:	2301      	movs	r3, #1
 8014540:	e279      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014542:	4b27      	ldr	r3, [pc, #156]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 8014544:	685b      	ldr	r3, [r3, #4]
 8014546:	4a2d      	ldr	r2, [pc, #180]	@ (80145fc <HAL_RCC_OscConfig+0x358>)
 8014548:	4013      	ands	r3, r2
 801454a:	0019      	movs	r1, r3
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014550:	4b23      	ldr	r3, [pc, #140]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 8014552:	430a      	orrs	r2, r1
 8014554:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014556:	4b22      	ldr	r3, [pc, #136]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	021b      	lsls	r3, r3, #8
 801455c:	0a19      	lsrs	r1, r3, #8
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	6a1b      	ldr	r3, [r3, #32]
 8014562:	061a      	lsls	r2, r3, #24
 8014564:	4b1e      	ldr	r3, [pc, #120]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 8014566:	430a      	orrs	r2, r1
 8014568:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801456e:	0b5b      	lsrs	r3, r3, #13
 8014570:	3301      	adds	r3, #1
 8014572:	2280      	movs	r2, #128	@ 0x80
 8014574:	0212      	lsls	r2, r2, #8
 8014576:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8014578:	4b19      	ldr	r3, [pc, #100]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 801457a:	68db      	ldr	r3, [r3, #12]
 801457c:	091b      	lsrs	r3, r3, #4
 801457e:	210f      	movs	r1, #15
 8014580:	400b      	ands	r3, r1
 8014582:	491b      	ldr	r1, [pc, #108]	@ (80145f0 <HAL_RCC_OscConfig+0x34c>)
 8014584:	5ccb      	ldrb	r3, [r1, r3]
 8014586:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8014588:	4b1a      	ldr	r3, [pc, #104]	@ (80145f4 <HAL_RCC_OscConfig+0x350>)
 801458a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801458c:	4b1a      	ldr	r3, [pc, #104]	@ (80145f8 <HAL_RCC_OscConfig+0x354>)
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	2513      	movs	r5, #19
 8014592:	197c      	adds	r4, r7, r5
 8014594:	0018      	movs	r0, r3
 8014596:	f7f9 fd35 	bl	800e004 <HAL_InitTick>
 801459a:	0003      	movs	r3, r0
 801459c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801459e:	197b      	adds	r3, r7, r5
 80145a0:	781b      	ldrb	r3, [r3, #0]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d061      	beq.n	801466a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80145a6:	197b      	adds	r3, r7, r5
 80145a8:	781b      	ldrb	r3, [r3, #0]
 80145aa:	e244      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	69db      	ldr	r3, [r3, #28]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d040      	beq.n	8014636 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80145b4:	4b0a      	ldr	r3, [pc, #40]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 80145b6:	681a      	ldr	r2, [r3, #0]
 80145b8:	4b09      	ldr	r3, [pc, #36]	@ (80145e0 <HAL_RCC_OscConfig+0x33c>)
 80145ba:	2180      	movs	r1, #128	@ 0x80
 80145bc:	0049      	lsls	r1, r1, #1
 80145be:	430a      	orrs	r2, r1
 80145c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80145c2:	f7f9 fd65 	bl	800e090 <HAL_GetTick>
 80145c6:	0003      	movs	r3, r0
 80145c8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80145ca:	e019      	b.n	8014600 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80145cc:	f7f9 fd60 	bl	800e090 <HAL_GetTick>
 80145d0:	0002      	movs	r2, r0
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	1ad3      	subs	r3, r2, r3
 80145d6:	2b02      	cmp	r3, #2
 80145d8:	d912      	bls.n	8014600 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80145da:	2303      	movs	r3, #3
 80145dc:	e22b      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
 80145de:	46c0      	nop			@ (mov r8, r8)
 80145e0:	40021000 	.word	0x40021000
 80145e4:	fffeffff 	.word	0xfffeffff
 80145e8:	fffbffff 	.word	0xfffbffff
 80145ec:	ffffe0ff 	.word	0xffffe0ff
 80145f0:	08024320 	.word	0x08024320
 80145f4:	200000c8 	.word	0x200000c8
 80145f8:	200000d8 	.word	0x200000d8
 80145fc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014600:	4bca      	ldr	r3, [pc, #808]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014602:	681a      	ldr	r2, [r3, #0]
 8014604:	2380      	movs	r3, #128	@ 0x80
 8014606:	009b      	lsls	r3, r3, #2
 8014608:	4013      	ands	r3, r2
 801460a:	d0df      	beq.n	80145cc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801460c:	4bc7      	ldr	r3, [pc, #796]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 801460e:	685b      	ldr	r3, [r3, #4]
 8014610:	4ac7      	ldr	r2, [pc, #796]	@ (8014930 <HAL_RCC_OscConfig+0x68c>)
 8014612:	4013      	ands	r3, r2
 8014614:	0019      	movs	r1, r3
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801461a:	4bc4      	ldr	r3, [pc, #784]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 801461c:	430a      	orrs	r2, r1
 801461e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014620:	4bc2      	ldr	r3, [pc, #776]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014622:	685b      	ldr	r3, [r3, #4]
 8014624:	021b      	lsls	r3, r3, #8
 8014626:	0a19      	lsrs	r1, r3, #8
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	6a1b      	ldr	r3, [r3, #32]
 801462c:	061a      	lsls	r2, r3, #24
 801462e:	4bbf      	ldr	r3, [pc, #764]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014630:	430a      	orrs	r2, r1
 8014632:	605a      	str	r2, [r3, #4]
 8014634:	e019      	b.n	801466a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8014636:	4bbd      	ldr	r3, [pc, #756]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014638:	681a      	ldr	r2, [r3, #0]
 801463a:	4bbc      	ldr	r3, [pc, #752]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 801463c:	49bd      	ldr	r1, [pc, #756]	@ (8014934 <HAL_RCC_OscConfig+0x690>)
 801463e:	400a      	ands	r2, r1
 8014640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014642:	f7f9 fd25 	bl	800e090 <HAL_GetTick>
 8014646:	0003      	movs	r3, r0
 8014648:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801464a:	e008      	b.n	801465e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801464c:	f7f9 fd20 	bl	800e090 <HAL_GetTick>
 8014650:	0002      	movs	r2, r0
 8014652:	697b      	ldr	r3, [r7, #20]
 8014654:	1ad3      	subs	r3, r2, r3
 8014656:	2b02      	cmp	r3, #2
 8014658:	d901      	bls.n	801465e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801465a:	2303      	movs	r3, #3
 801465c:	e1eb      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801465e:	4bb3      	ldr	r3, [pc, #716]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014660:	681a      	ldr	r2, [r3, #0]
 8014662:	2380      	movs	r3, #128	@ 0x80
 8014664:	009b      	lsls	r3, r3, #2
 8014666:	4013      	ands	r3, r2
 8014668:	d1f0      	bne.n	801464c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2208      	movs	r2, #8
 8014670:	4013      	ands	r3, r2
 8014672:	d036      	beq.n	80146e2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	695b      	ldr	r3, [r3, #20]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d019      	beq.n	80146b0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801467c:	4bab      	ldr	r3, [pc, #684]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 801467e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014680:	4baa      	ldr	r3, [pc, #680]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014682:	2101      	movs	r1, #1
 8014684:	430a      	orrs	r2, r1
 8014686:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014688:	f7f9 fd02 	bl	800e090 <HAL_GetTick>
 801468c:	0003      	movs	r3, r0
 801468e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014690:	e008      	b.n	80146a4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014692:	f7f9 fcfd 	bl	800e090 <HAL_GetTick>
 8014696:	0002      	movs	r2, r0
 8014698:	697b      	ldr	r3, [r7, #20]
 801469a:	1ad3      	subs	r3, r2, r3
 801469c:	2b02      	cmp	r3, #2
 801469e:	d901      	bls.n	80146a4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80146a0:	2303      	movs	r3, #3
 80146a2:	e1c8      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80146a4:	4ba1      	ldr	r3, [pc, #644]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80146a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80146a8:	2202      	movs	r2, #2
 80146aa:	4013      	ands	r3, r2
 80146ac:	d0f1      	beq.n	8014692 <HAL_RCC_OscConfig+0x3ee>
 80146ae:	e018      	b.n	80146e2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80146b0:	4b9e      	ldr	r3, [pc, #632]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80146b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80146b4:	4b9d      	ldr	r3, [pc, #628]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80146b6:	2101      	movs	r1, #1
 80146b8:	438a      	bics	r2, r1
 80146ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80146bc:	f7f9 fce8 	bl	800e090 <HAL_GetTick>
 80146c0:	0003      	movs	r3, r0
 80146c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80146c4:	e008      	b.n	80146d8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80146c6:	f7f9 fce3 	bl	800e090 <HAL_GetTick>
 80146ca:	0002      	movs	r2, r0
 80146cc:	697b      	ldr	r3, [r7, #20]
 80146ce:	1ad3      	subs	r3, r2, r3
 80146d0:	2b02      	cmp	r3, #2
 80146d2:	d901      	bls.n	80146d8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80146d4:	2303      	movs	r3, #3
 80146d6:	e1ae      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80146d8:	4b94      	ldr	r3, [pc, #592]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80146da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80146dc:	2202      	movs	r2, #2
 80146de:	4013      	ands	r3, r2
 80146e0:	d1f1      	bne.n	80146c6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	2204      	movs	r2, #4
 80146e8:	4013      	ands	r3, r2
 80146ea:	d100      	bne.n	80146ee <HAL_RCC_OscConfig+0x44a>
 80146ec:	e0ae      	b.n	801484c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80146ee:	2023      	movs	r0, #35	@ 0x23
 80146f0:	183b      	adds	r3, r7, r0
 80146f2:	2200      	movs	r2, #0
 80146f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80146f6:	4b8d      	ldr	r3, [pc, #564]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80146f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80146fa:	2380      	movs	r3, #128	@ 0x80
 80146fc:	055b      	lsls	r3, r3, #21
 80146fe:	4013      	ands	r3, r2
 8014700:	d109      	bne.n	8014716 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014702:	4b8a      	ldr	r3, [pc, #552]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014706:	4b89      	ldr	r3, [pc, #548]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014708:	2180      	movs	r1, #128	@ 0x80
 801470a:	0549      	lsls	r1, r1, #21
 801470c:	430a      	orrs	r2, r1
 801470e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8014710:	183b      	adds	r3, r7, r0
 8014712:	2201      	movs	r2, #1
 8014714:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014716:	4b88      	ldr	r3, [pc, #544]	@ (8014938 <HAL_RCC_OscConfig+0x694>)
 8014718:	681a      	ldr	r2, [r3, #0]
 801471a:	2380      	movs	r3, #128	@ 0x80
 801471c:	005b      	lsls	r3, r3, #1
 801471e:	4013      	ands	r3, r2
 8014720:	d11a      	bne.n	8014758 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8014722:	4b85      	ldr	r3, [pc, #532]	@ (8014938 <HAL_RCC_OscConfig+0x694>)
 8014724:	681a      	ldr	r2, [r3, #0]
 8014726:	4b84      	ldr	r3, [pc, #528]	@ (8014938 <HAL_RCC_OscConfig+0x694>)
 8014728:	2180      	movs	r1, #128	@ 0x80
 801472a:	0049      	lsls	r1, r1, #1
 801472c:	430a      	orrs	r2, r1
 801472e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014730:	f7f9 fcae 	bl	800e090 <HAL_GetTick>
 8014734:	0003      	movs	r3, r0
 8014736:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014738:	e008      	b.n	801474c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801473a:	f7f9 fca9 	bl	800e090 <HAL_GetTick>
 801473e:	0002      	movs	r2, r0
 8014740:	697b      	ldr	r3, [r7, #20]
 8014742:	1ad3      	subs	r3, r2, r3
 8014744:	2b64      	cmp	r3, #100	@ 0x64
 8014746:	d901      	bls.n	801474c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8014748:	2303      	movs	r3, #3
 801474a:	e174      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801474c:	4b7a      	ldr	r3, [pc, #488]	@ (8014938 <HAL_RCC_OscConfig+0x694>)
 801474e:	681a      	ldr	r2, [r3, #0]
 8014750:	2380      	movs	r3, #128	@ 0x80
 8014752:	005b      	lsls	r3, r3, #1
 8014754:	4013      	ands	r3, r2
 8014756:	d0f0      	beq.n	801473a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	689a      	ldr	r2, [r3, #8]
 801475c:	2380      	movs	r3, #128	@ 0x80
 801475e:	005b      	lsls	r3, r3, #1
 8014760:	429a      	cmp	r2, r3
 8014762:	d107      	bne.n	8014774 <HAL_RCC_OscConfig+0x4d0>
 8014764:	4b71      	ldr	r3, [pc, #452]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014766:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014768:	4b70      	ldr	r3, [pc, #448]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 801476a:	2180      	movs	r1, #128	@ 0x80
 801476c:	0049      	lsls	r1, r1, #1
 801476e:	430a      	orrs	r2, r1
 8014770:	651a      	str	r2, [r3, #80]	@ 0x50
 8014772:	e031      	b.n	80147d8 <HAL_RCC_OscConfig+0x534>
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	689b      	ldr	r3, [r3, #8]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d10c      	bne.n	8014796 <HAL_RCC_OscConfig+0x4f2>
 801477c:	4b6b      	ldr	r3, [pc, #428]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 801477e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014780:	4b6a      	ldr	r3, [pc, #424]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014782:	496c      	ldr	r1, [pc, #432]	@ (8014934 <HAL_RCC_OscConfig+0x690>)
 8014784:	400a      	ands	r2, r1
 8014786:	651a      	str	r2, [r3, #80]	@ 0x50
 8014788:	4b68      	ldr	r3, [pc, #416]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 801478a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801478c:	4b67      	ldr	r3, [pc, #412]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 801478e:	496b      	ldr	r1, [pc, #428]	@ (801493c <HAL_RCC_OscConfig+0x698>)
 8014790:	400a      	ands	r2, r1
 8014792:	651a      	str	r2, [r3, #80]	@ 0x50
 8014794:	e020      	b.n	80147d8 <HAL_RCC_OscConfig+0x534>
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	689a      	ldr	r2, [r3, #8]
 801479a:	23a0      	movs	r3, #160	@ 0xa0
 801479c:	00db      	lsls	r3, r3, #3
 801479e:	429a      	cmp	r2, r3
 80147a0:	d10e      	bne.n	80147c0 <HAL_RCC_OscConfig+0x51c>
 80147a2:	4b62      	ldr	r3, [pc, #392]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80147a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80147a6:	4b61      	ldr	r3, [pc, #388]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80147a8:	2180      	movs	r1, #128	@ 0x80
 80147aa:	00c9      	lsls	r1, r1, #3
 80147ac:	430a      	orrs	r2, r1
 80147ae:	651a      	str	r2, [r3, #80]	@ 0x50
 80147b0:	4b5e      	ldr	r3, [pc, #376]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80147b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80147b4:	4b5d      	ldr	r3, [pc, #372]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80147b6:	2180      	movs	r1, #128	@ 0x80
 80147b8:	0049      	lsls	r1, r1, #1
 80147ba:	430a      	orrs	r2, r1
 80147bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80147be:	e00b      	b.n	80147d8 <HAL_RCC_OscConfig+0x534>
 80147c0:	4b5a      	ldr	r3, [pc, #360]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80147c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80147c4:	4b59      	ldr	r3, [pc, #356]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80147c6:	495b      	ldr	r1, [pc, #364]	@ (8014934 <HAL_RCC_OscConfig+0x690>)
 80147c8:	400a      	ands	r2, r1
 80147ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80147cc:	4b57      	ldr	r3, [pc, #348]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80147ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80147d0:	4b56      	ldr	r3, [pc, #344]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80147d2:	495a      	ldr	r1, [pc, #360]	@ (801493c <HAL_RCC_OscConfig+0x698>)
 80147d4:	400a      	ands	r2, r1
 80147d6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	689b      	ldr	r3, [r3, #8]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d015      	beq.n	801480c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80147e0:	f7f9 fc56 	bl	800e090 <HAL_GetTick>
 80147e4:	0003      	movs	r3, r0
 80147e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80147e8:	e009      	b.n	80147fe <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80147ea:	f7f9 fc51 	bl	800e090 <HAL_GetTick>
 80147ee:	0002      	movs	r2, r0
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	1ad3      	subs	r3, r2, r3
 80147f4:	4a52      	ldr	r2, [pc, #328]	@ (8014940 <HAL_RCC_OscConfig+0x69c>)
 80147f6:	4293      	cmp	r3, r2
 80147f8:	d901      	bls.n	80147fe <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80147fa:	2303      	movs	r3, #3
 80147fc:	e11b      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80147fe:	4b4b      	ldr	r3, [pc, #300]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014800:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014802:	2380      	movs	r3, #128	@ 0x80
 8014804:	009b      	lsls	r3, r3, #2
 8014806:	4013      	ands	r3, r2
 8014808:	d0ef      	beq.n	80147ea <HAL_RCC_OscConfig+0x546>
 801480a:	e014      	b.n	8014836 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801480c:	f7f9 fc40 	bl	800e090 <HAL_GetTick>
 8014810:	0003      	movs	r3, r0
 8014812:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014814:	e009      	b.n	801482a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014816:	f7f9 fc3b 	bl	800e090 <HAL_GetTick>
 801481a:	0002      	movs	r2, r0
 801481c:	697b      	ldr	r3, [r7, #20]
 801481e:	1ad3      	subs	r3, r2, r3
 8014820:	4a47      	ldr	r2, [pc, #284]	@ (8014940 <HAL_RCC_OscConfig+0x69c>)
 8014822:	4293      	cmp	r3, r2
 8014824:	d901      	bls.n	801482a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8014826:	2303      	movs	r3, #3
 8014828:	e105      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801482a:	4b40      	ldr	r3, [pc, #256]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 801482c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801482e:	2380      	movs	r3, #128	@ 0x80
 8014830:	009b      	lsls	r3, r3, #2
 8014832:	4013      	ands	r3, r2
 8014834:	d1ef      	bne.n	8014816 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8014836:	2323      	movs	r3, #35	@ 0x23
 8014838:	18fb      	adds	r3, r7, r3
 801483a:	781b      	ldrb	r3, [r3, #0]
 801483c:	2b01      	cmp	r3, #1
 801483e:	d105      	bne.n	801484c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014840:	4b3a      	ldr	r3, [pc, #232]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014842:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014844:	4b39      	ldr	r3, [pc, #228]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014846:	493f      	ldr	r1, [pc, #252]	@ (8014944 <HAL_RCC_OscConfig+0x6a0>)
 8014848:	400a      	ands	r2, r1
 801484a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	2220      	movs	r2, #32
 8014852:	4013      	ands	r3, r2
 8014854:	d049      	beq.n	80148ea <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	699b      	ldr	r3, [r3, #24]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d026      	beq.n	80148ac <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801485e:	4b33      	ldr	r3, [pc, #204]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014860:	689a      	ldr	r2, [r3, #8]
 8014862:	4b32      	ldr	r3, [pc, #200]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014864:	2101      	movs	r1, #1
 8014866:	430a      	orrs	r2, r1
 8014868:	609a      	str	r2, [r3, #8]
 801486a:	4b30      	ldr	r3, [pc, #192]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 801486c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801486e:	4b2f      	ldr	r3, [pc, #188]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014870:	2101      	movs	r1, #1
 8014872:	430a      	orrs	r2, r1
 8014874:	635a      	str	r2, [r3, #52]	@ 0x34
 8014876:	4b34      	ldr	r3, [pc, #208]	@ (8014948 <HAL_RCC_OscConfig+0x6a4>)
 8014878:	6a1a      	ldr	r2, [r3, #32]
 801487a:	4b33      	ldr	r3, [pc, #204]	@ (8014948 <HAL_RCC_OscConfig+0x6a4>)
 801487c:	2180      	movs	r1, #128	@ 0x80
 801487e:	0189      	lsls	r1, r1, #6
 8014880:	430a      	orrs	r2, r1
 8014882:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014884:	f7f9 fc04 	bl	800e090 <HAL_GetTick>
 8014888:	0003      	movs	r3, r0
 801488a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801488c:	e008      	b.n	80148a0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801488e:	f7f9 fbff 	bl	800e090 <HAL_GetTick>
 8014892:	0002      	movs	r2, r0
 8014894:	697b      	ldr	r3, [r7, #20]
 8014896:	1ad3      	subs	r3, r2, r3
 8014898:	2b02      	cmp	r3, #2
 801489a:	d901      	bls.n	80148a0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801489c:	2303      	movs	r3, #3
 801489e:	e0ca      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80148a0:	4b22      	ldr	r3, [pc, #136]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80148a2:	689b      	ldr	r3, [r3, #8]
 80148a4:	2202      	movs	r2, #2
 80148a6:	4013      	ands	r3, r2
 80148a8:	d0f1      	beq.n	801488e <HAL_RCC_OscConfig+0x5ea>
 80148aa:	e01e      	b.n	80148ea <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80148ac:	4b1f      	ldr	r3, [pc, #124]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80148ae:	689a      	ldr	r2, [r3, #8]
 80148b0:	4b1e      	ldr	r3, [pc, #120]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80148b2:	2101      	movs	r1, #1
 80148b4:	438a      	bics	r2, r1
 80148b6:	609a      	str	r2, [r3, #8]
 80148b8:	4b23      	ldr	r3, [pc, #140]	@ (8014948 <HAL_RCC_OscConfig+0x6a4>)
 80148ba:	6a1a      	ldr	r2, [r3, #32]
 80148bc:	4b22      	ldr	r3, [pc, #136]	@ (8014948 <HAL_RCC_OscConfig+0x6a4>)
 80148be:	4923      	ldr	r1, [pc, #140]	@ (801494c <HAL_RCC_OscConfig+0x6a8>)
 80148c0:	400a      	ands	r2, r1
 80148c2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80148c4:	f7f9 fbe4 	bl	800e090 <HAL_GetTick>
 80148c8:	0003      	movs	r3, r0
 80148ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80148cc:	e008      	b.n	80148e0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80148ce:	f7f9 fbdf 	bl	800e090 <HAL_GetTick>
 80148d2:	0002      	movs	r2, r0
 80148d4:	697b      	ldr	r3, [r7, #20]
 80148d6:	1ad3      	subs	r3, r2, r3
 80148d8:	2b02      	cmp	r3, #2
 80148da:	d901      	bls.n	80148e0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80148dc:	2303      	movs	r3, #3
 80148de:	e0aa      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80148e0:	4b12      	ldr	r3, [pc, #72]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 80148e2:	689b      	ldr	r3, [r3, #8]
 80148e4:	2202      	movs	r2, #2
 80148e6:	4013      	ands	r3, r2
 80148e8:	d1f1      	bne.n	80148ce <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d100      	bne.n	80148f4 <HAL_RCC_OscConfig+0x650>
 80148f2:	e09f      	b.n	8014a34 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80148f4:	69fb      	ldr	r3, [r7, #28]
 80148f6:	2b0c      	cmp	r3, #12
 80148f8:	d100      	bne.n	80148fc <HAL_RCC_OscConfig+0x658>
 80148fa:	e078      	b.n	80149ee <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014900:	2b02      	cmp	r3, #2
 8014902:	d159      	bne.n	80149b8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014904:	4b09      	ldr	r3, [pc, #36]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 8014906:	681a      	ldr	r2, [r3, #0]
 8014908:	4b08      	ldr	r3, [pc, #32]	@ (801492c <HAL_RCC_OscConfig+0x688>)
 801490a:	4911      	ldr	r1, [pc, #68]	@ (8014950 <HAL_RCC_OscConfig+0x6ac>)
 801490c:	400a      	ands	r2, r1
 801490e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014910:	f7f9 fbbe 	bl	800e090 <HAL_GetTick>
 8014914:	0003      	movs	r3, r0
 8014916:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014918:	e01c      	b.n	8014954 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801491a:	f7f9 fbb9 	bl	800e090 <HAL_GetTick>
 801491e:	0002      	movs	r2, r0
 8014920:	697b      	ldr	r3, [r7, #20]
 8014922:	1ad3      	subs	r3, r2, r3
 8014924:	2b02      	cmp	r3, #2
 8014926:	d915      	bls.n	8014954 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8014928:	2303      	movs	r3, #3
 801492a:	e084      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
 801492c:	40021000 	.word	0x40021000
 8014930:	ffff1fff 	.word	0xffff1fff
 8014934:	fffffeff 	.word	0xfffffeff
 8014938:	40007000 	.word	0x40007000
 801493c:	fffffbff 	.word	0xfffffbff
 8014940:	00001388 	.word	0x00001388
 8014944:	efffffff 	.word	0xefffffff
 8014948:	40010000 	.word	0x40010000
 801494c:	ffffdfff 	.word	0xffffdfff
 8014950:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014954:	4b3a      	ldr	r3, [pc, #232]	@ (8014a40 <HAL_RCC_OscConfig+0x79c>)
 8014956:	681a      	ldr	r2, [r3, #0]
 8014958:	2380      	movs	r3, #128	@ 0x80
 801495a:	049b      	lsls	r3, r3, #18
 801495c:	4013      	ands	r3, r2
 801495e:	d1dc      	bne.n	801491a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014960:	4b37      	ldr	r3, [pc, #220]	@ (8014a40 <HAL_RCC_OscConfig+0x79c>)
 8014962:	68db      	ldr	r3, [r3, #12]
 8014964:	4a37      	ldr	r2, [pc, #220]	@ (8014a44 <HAL_RCC_OscConfig+0x7a0>)
 8014966:	4013      	ands	r3, r2
 8014968:	0019      	movs	r1, r3
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014972:	431a      	orrs	r2, r3
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014978:	431a      	orrs	r2, r3
 801497a:	4b31      	ldr	r3, [pc, #196]	@ (8014a40 <HAL_RCC_OscConfig+0x79c>)
 801497c:	430a      	orrs	r2, r1
 801497e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014980:	4b2f      	ldr	r3, [pc, #188]	@ (8014a40 <HAL_RCC_OscConfig+0x79c>)
 8014982:	681a      	ldr	r2, [r3, #0]
 8014984:	4b2e      	ldr	r3, [pc, #184]	@ (8014a40 <HAL_RCC_OscConfig+0x79c>)
 8014986:	2180      	movs	r1, #128	@ 0x80
 8014988:	0449      	lsls	r1, r1, #17
 801498a:	430a      	orrs	r2, r1
 801498c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801498e:	f7f9 fb7f 	bl	800e090 <HAL_GetTick>
 8014992:	0003      	movs	r3, r0
 8014994:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8014996:	e008      	b.n	80149aa <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014998:	f7f9 fb7a 	bl	800e090 <HAL_GetTick>
 801499c:	0002      	movs	r2, r0
 801499e:	697b      	ldr	r3, [r7, #20]
 80149a0:	1ad3      	subs	r3, r2, r3
 80149a2:	2b02      	cmp	r3, #2
 80149a4:	d901      	bls.n	80149aa <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80149a6:	2303      	movs	r3, #3
 80149a8:	e045      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80149aa:	4b25      	ldr	r3, [pc, #148]	@ (8014a40 <HAL_RCC_OscConfig+0x79c>)
 80149ac:	681a      	ldr	r2, [r3, #0]
 80149ae:	2380      	movs	r3, #128	@ 0x80
 80149b0:	049b      	lsls	r3, r3, #18
 80149b2:	4013      	ands	r3, r2
 80149b4:	d0f0      	beq.n	8014998 <HAL_RCC_OscConfig+0x6f4>
 80149b6:	e03d      	b.n	8014a34 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80149b8:	4b21      	ldr	r3, [pc, #132]	@ (8014a40 <HAL_RCC_OscConfig+0x79c>)
 80149ba:	681a      	ldr	r2, [r3, #0]
 80149bc:	4b20      	ldr	r3, [pc, #128]	@ (8014a40 <HAL_RCC_OscConfig+0x79c>)
 80149be:	4922      	ldr	r1, [pc, #136]	@ (8014a48 <HAL_RCC_OscConfig+0x7a4>)
 80149c0:	400a      	ands	r2, r1
 80149c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80149c4:	f7f9 fb64 	bl	800e090 <HAL_GetTick>
 80149c8:	0003      	movs	r3, r0
 80149ca:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80149cc:	e008      	b.n	80149e0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80149ce:	f7f9 fb5f 	bl	800e090 <HAL_GetTick>
 80149d2:	0002      	movs	r2, r0
 80149d4:	697b      	ldr	r3, [r7, #20]
 80149d6:	1ad3      	subs	r3, r2, r3
 80149d8:	2b02      	cmp	r3, #2
 80149da:	d901      	bls.n	80149e0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80149dc:	2303      	movs	r3, #3
 80149de:	e02a      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80149e0:	4b17      	ldr	r3, [pc, #92]	@ (8014a40 <HAL_RCC_OscConfig+0x79c>)
 80149e2:	681a      	ldr	r2, [r3, #0]
 80149e4:	2380      	movs	r3, #128	@ 0x80
 80149e6:	049b      	lsls	r3, r3, #18
 80149e8:	4013      	ands	r3, r2
 80149ea:	d1f0      	bne.n	80149ce <HAL_RCC_OscConfig+0x72a>
 80149ec:	e022      	b.n	8014a34 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80149f2:	2b01      	cmp	r3, #1
 80149f4:	d101      	bne.n	80149fa <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80149f6:	2301      	movs	r3, #1
 80149f8:	e01d      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80149fa:	4b11      	ldr	r3, [pc, #68]	@ (8014a40 <HAL_RCC_OscConfig+0x79c>)
 80149fc:	68db      	ldr	r3, [r3, #12]
 80149fe:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014a00:	69ba      	ldr	r2, [r7, #24]
 8014a02:	2380      	movs	r3, #128	@ 0x80
 8014a04:	025b      	lsls	r3, r3, #9
 8014a06:	401a      	ands	r2, r3
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a0c:	429a      	cmp	r2, r3
 8014a0e:	d10f      	bne.n	8014a30 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014a10:	69ba      	ldr	r2, [r7, #24]
 8014a12:	23f0      	movs	r3, #240	@ 0xf0
 8014a14:	039b      	lsls	r3, r3, #14
 8014a16:	401a      	ands	r2, r3
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014a1c:	429a      	cmp	r2, r3
 8014a1e:	d107      	bne.n	8014a30 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8014a20:	69ba      	ldr	r2, [r7, #24]
 8014a22:	23c0      	movs	r3, #192	@ 0xc0
 8014a24:	041b      	lsls	r3, r3, #16
 8014a26:	401a      	ands	r2, r3
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014a2c:	429a      	cmp	r2, r3
 8014a2e:	d001      	beq.n	8014a34 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8014a30:	2301      	movs	r3, #1
 8014a32:	e000      	b.n	8014a36 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8014a34:	2300      	movs	r3, #0
}
 8014a36:	0018      	movs	r0, r3
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	b00a      	add	sp, #40	@ 0x28
 8014a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8014a3e:	46c0      	nop			@ (mov r8, r8)
 8014a40:	40021000 	.word	0x40021000
 8014a44:	ff02ffff 	.word	0xff02ffff
 8014a48:	feffffff 	.word	0xfeffffff

08014a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014a4c:	b5b0      	push	{r4, r5, r7, lr}
 8014a4e:	b084      	sub	sp, #16
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
 8014a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d101      	bne.n	8014a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	e128      	b.n	8014cb2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014a60:	4b96      	ldr	r3, [pc, #600]	@ (8014cbc <HAL_RCC_ClockConfig+0x270>)
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	2201      	movs	r2, #1
 8014a66:	4013      	ands	r3, r2
 8014a68:	683a      	ldr	r2, [r7, #0]
 8014a6a:	429a      	cmp	r2, r3
 8014a6c:	d91e      	bls.n	8014aac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014a6e:	4b93      	ldr	r3, [pc, #588]	@ (8014cbc <HAL_RCC_ClockConfig+0x270>)
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	2201      	movs	r2, #1
 8014a74:	4393      	bics	r3, r2
 8014a76:	0019      	movs	r1, r3
 8014a78:	4b90      	ldr	r3, [pc, #576]	@ (8014cbc <HAL_RCC_ClockConfig+0x270>)
 8014a7a:	683a      	ldr	r2, [r7, #0]
 8014a7c:	430a      	orrs	r2, r1
 8014a7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8014a80:	f7f9 fb06 	bl	800e090 <HAL_GetTick>
 8014a84:	0003      	movs	r3, r0
 8014a86:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014a88:	e009      	b.n	8014a9e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014a8a:	f7f9 fb01 	bl	800e090 <HAL_GetTick>
 8014a8e:	0002      	movs	r2, r0
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	1ad3      	subs	r3, r2, r3
 8014a94:	4a8a      	ldr	r2, [pc, #552]	@ (8014cc0 <HAL_RCC_ClockConfig+0x274>)
 8014a96:	4293      	cmp	r3, r2
 8014a98:	d901      	bls.n	8014a9e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8014a9a:	2303      	movs	r3, #3
 8014a9c:	e109      	b.n	8014cb2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014a9e:	4b87      	ldr	r3, [pc, #540]	@ (8014cbc <HAL_RCC_ClockConfig+0x270>)
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	2201      	movs	r2, #1
 8014aa4:	4013      	ands	r3, r2
 8014aa6:	683a      	ldr	r2, [r7, #0]
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d1ee      	bne.n	8014a8a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	2202      	movs	r2, #2
 8014ab2:	4013      	ands	r3, r2
 8014ab4:	d009      	beq.n	8014aca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014ab6:	4b83      	ldr	r3, [pc, #524]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014ab8:	68db      	ldr	r3, [r3, #12]
 8014aba:	22f0      	movs	r2, #240	@ 0xf0
 8014abc:	4393      	bics	r3, r2
 8014abe:	0019      	movs	r1, r3
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	689a      	ldr	r2, [r3, #8]
 8014ac4:	4b7f      	ldr	r3, [pc, #508]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014ac6:	430a      	orrs	r2, r1
 8014ac8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	2201      	movs	r2, #1
 8014ad0:	4013      	ands	r3, r2
 8014ad2:	d100      	bne.n	8014ad6 <HAL_RCC_ClockConfig+0x8a>
 8014ad4:	e089      	b.n	8014bea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	685b      	ldr	r3, [r3, #4]
 8014ada:	2b02      	cmp	r3, #2
 8014adc:	d107      	bne.n	8014aee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014ade:	4b79      	ldr	r3, [pc, #484]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014ae0:	681a      	ldr	r2, [r3, #0]
 8014ae2:	2380      	movs	r3, #128	@ 0x80
 8014ae4:	029b      	lsls	r3, r3, #10
 8014ae6:	4013      	ands	r3, r2
 8014ae8:	d120      	bne.n	8014b2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014aea:	2301      	movs	r3, #1
 8014aec:	e0e1      	b.n	8014cb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	685b      	ldr	r3, [r3, #4]
 8014af2:	2b03      	cmp	r3, #3
 8014af4:	d107      	bne.n	8014b06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014af6:	4b73      	ldr	r3, [pc, #460]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014af8:	681a      	ldr	r2, [r3, #0]
 8014afa:	2380      	movs	r3, #128	@ 0x80
 8014afc:	049b      	lsls	r3, r3, #18
 8014afe:	4013      	ands	r3, r2
 8014b00:	d114      	bne.n	8014b2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014b02:	2301      	movs	r3, #1
 8014b04:	e0d5      	b.n	8014cb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	685b      	ldr	r3, [r3, #4]
 8014b0a:	2b01      	cmp	r3, #1
 8014b0c:	d106      	bne.n	8014b1c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	2204      	movs	r2, #4
 8014b14:	4013      	ands	r3, r2
 8014b16:	d109      	bne.n	8014b2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014b18:	2301      	movs	r3, #1
 8014b1a:	e0ca      	b.n	8014cb2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014b1c:	4b69      	ldr	r3, [pc, #420]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014b1e:	681a      	ldr	r2, [r3, #0]
 8014b20:	2380      	movs	r3, #128	@ 0x80
 8014b22:	009b      	lsls	r3, r3, #2
 8014b24:	4013      	ands	r3, r2
 8014b26:	d101      	bne.n	8014b2c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014b28:	2301      	movs	r3, #1
 8014b2a:	e0c2      	b.n	8014cb2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014b2c:	4b65      	ldr	r3, [pc, #404]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014b2e:	68db      	ldr	r3, [r3, #12]
 8014b30:	2203      	movs	r2, #3
 8014b32:	4393      	bics	r3, r2
 8014b34:	0019      	movs	r1, r3
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	685a      	ldr	r2, [r3, #4]
 8014b3a:	4b62      	ldr	r3, [pc, #392]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014b3c:	430a      	orrs	r2, r1
 8014b3e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8014b40:	f7f9 faa6 	bl	800e090 <HAL_GetTick>
 8014b44:	0003      	movs	r3, r0
 8014b46:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	685b      	ldr	r3, [r3, #4]
 8014b4c:	2b02      	cmp	r3, #2
 8014b4e:	d111      	bne.n	8014b74 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014b50:	e009      	b.n	8014b66 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014b52:	f7f9 fa9d 	bl	800e090 <HAL_GetTick>
 8014b56:	0002      	movs	r2, r0
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	1ad3      	subs	r3, r2, r3
 8014b5c:	4a58      	ldr	r2, [pc, #352]	@ (8014cc0 <HAL_RCC_ClockConfig+0x274>)
 8014b5e:	4293      	cmp	r3, r2
 8014b60:	d901      	bls.n	8014b66 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8014b62:	2303      	movs	r3, #3
 8014b64:	e0a5      	b.n	8014cb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014b66:	4b57      	ldr	r3, [pc, #348]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014b68:	68db      	ldr	r3, [r3, #12]
 8014b6a:	220c      	movs	r2, #12
 8014b6c:	4013      	ands	r3, r2
 8014b6e:	2b08      	cmp	r3, #8
 8014b70:	d1ef      	bne.n	8014b52 <HAL_RCC_ClockConfig+0x106>
 8014b72:	e03a      	b.n	8014bea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	685b      	ldr	r3, [r3, #4]
 8014b78:	2b03      	cmp	r3, #3
 8014b7a:	d111      	bne.n	8014ba0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014b7c:	e009      	b.n	8014b92 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014b7e:	f7f9 fa87 	bl	800e090 <HAL_GetTick>
 8014b82:	0002      	movs	r2, r0
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	1ad3      	subs	r3, r2, r3
 8014b88:	4a4d      	ldr	r2, [pc, #308]	@ (8014cc0 <HAL_RCC_ClockConfig+0x274>)
 8014b8a:	4293      	cmp	r3, r2
 8014b8c:	d901      	bls.n	8014b92 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8014b8e:	2303      	movs	r3, #3
 8014b90:	e08f      	b.n	8014cb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014b92:	4b4c      	ldr	r3, [pc, #304]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014b94:	68db      	ldr	r3, [r3, #12]
 8014b96:	220c      	movs	r2, #12
 8014b98:	4013      	ands	r3, r2
 8014b9a:	2b0c      	cmp	r3, #12
 8014b9c:	d1ef      	bne.n	8014b7e <HAL_RCC_ClockConfig+0x132>
 8014b9e:	e024      	b.n	8014bea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	685b      	ldr	r3, [r3, #4]
 8014ba4:	2b01      	cmp	r3, #1
 8014ba6:	d11b      	bne.n	8014be0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8014ba8:	e009      	b.n	8014bbe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014baa:	f7f9 fa71 	bl	800e090 <HAL_GetTick>
 8014bae:	0002      	movs	r2, r0
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	1ad3      	subs	r3, r2, r3
 8014bb4:	4a42      	ldr	r2, [pc, #264]	@ (8014cc0 <HAL_RCC_ClockConfig+0x274>)
 8014bb6:	4293      	cmp	r3, r2
 8014bb8:	d901      	bls.n	8014bbe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8014bba:	2303      	movs	r3, #3
 8014bbc:	e079      	b.n	8014cb2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8014bbe:	4b41      	ldr	r3, [pc, #260]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014bc0:	68db      	ldr	r3, [r3, #12]
 8014bc2:	220c      	movs	r2, #12
 8014bc4:	4013      	ands	r3, r2
 8014bc6:	2b04      	cmp	r3, #4
 8014bc8:	d1ef      	bne.n	8014baa <HAL_RCC_ClockConfig+0x15e>
 8014bca:	e00e      	b.n	8014bea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014bcc:	f7f9 fa60 	bl	800e090 <HAL_GetTick>
 8014bd0:	0002      	movs	r2, r0
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	1ad3      	subs	r3, r2, r3
 8014bd6:	4a3a      	ldr	r2, [pc, #232]	@ (8014cc0 <HAL_RCC_ClockConfig+0x274>)
 8014bd8:	4293      	cmp	r3, r2
 8014bda:	d901      	bls.n	8014be0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8014bdc:	2303      	movs	r3, #3
 8014bde:	e068      	b.n	8014cb2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8014be0:	4b38      	ldr	r3, [pc, #224]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014be2:	68db      	ldr	r3, [r3, #12]
 8014be4:	220c      	movs	r2, #12
 8014be6:	4013      	ands	r3, r2
 8014be8:	d1f0      	bne.n	8014bcc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8014bea:	4b34      	ldr	r3, [pc, #208]	@ (8014cbc <HAL_RCC_ClockConfig+0x270>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	2201      	movs	r2, #1
 8014bf0:	4013      	ands	r3, r2
 8014bf2:	683a      	ldr	r2, [r7, #0]
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d21e      	bcs.n	8014c36 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014bf8:	4b30      	ldr	r3, [pc, #192]	@ (8014cbc <HAL_RCC_ClockConfig+0x270>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	2201      	movs	r2, #1
 8014bfe:	4393      	bics	r3, r2
 8014c00:	0019      	movs	r1, r3
 8014c02:	4b2e      	ldr	r3, [pc, #184]	@ (8014cbc <HAL_RCC_ClockConfig+0x270>)
 8014c04:	683a      	ldr	r2, [r7, #0]
 8014c06:	430a      	orrs	r2, r1
 8014c08:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8014c0a:	f7f9 fa41 	bl	800e090 <HAL_GetTick>
 8014c0e:	0003      	movs	r3, r0
 8014c10:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014c12:	e009      	b.n	8014c28 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014c14:	f7f9 fa3c 	bl	800e090 <HAL_GetTick>
 8014c18:	0002      	movs	r2, r0
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	1ad3      	subs	r3, r2, r3
 8014c1e:	4a28      	ldr	r2, [pc, #160]	@ (8014cc0 <HAL_RCC_ClockConfig+0x274>)
 8014c20:	4293      	cmp	r3, r2
 8014c22:	d901      	bls.n	8014c28 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8014c24:	2303      	movs	r3, #3
 8014c26:	e044      	b.n	8014cb2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014c28:	4b24      	ldr	r3, [pc, #144]	@ (8014cbc <HAL_RCC_ClockConfig+0x270>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	2201      	movs	r2, #1
 8014c2e:	4013      	ands	r3, r2
 8014c30:	683a      	ldr	r2, [r7, #0]
 8014c32:	429a      	cmp	r2, r3
 8014c34:	d1ee      	bne.n	8014c14 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	2204      	movs	r2, #4
 8014c3c:	4013      	ands	r3, r2
 8014c3e:	d009      	beq.n	8014c54 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014c40:	4b20      	ldr	r3, [pc, #128]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014c42:	68db      	ldr	r3, [r3, #12]
 8014c44:	4a20      	ldr	r2, [pc, #128]	@ (8014cc8 <HAL_RCC_ClockConfig+0x27c>)
 8014c46:	4013      	ands	r3, r2
 8014c48:	0019      	movs	r1, r3
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	68da      	ldr	r2, [r3, #12]
 8014c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014c50:	430a      	orrs	r2, r1
 8014c52:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	2208      	movs	r2, #8
 8014c5a:	4013      	ands	r3, r2
 8014c5c:	d00a      	beq.n	8014c74 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8014c5e:	4b19      	ldr	r3, [pc, #100]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014c60:	68db      	ldr	r3, [r3, #12]
 8014c62:	4a1a      	ldr	r2, [pc, #104]	@ (8014ccc <HAL_RCC_ClockConfig+0x280>)
 8014c64:	4013      	ands	r3, r2
 8014c66:	0019      	movs	r1, r3
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	691b      	ldr	r3, [r3, #16]
 8014c6c:	00da      	lsls	r2, r3, #3
 8014c6e:	4b15      	ldr	r3, [pc, #84]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014c70:	430a      	orrs	r2, r1
 8014c72:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014c74:	f000 f832 	bl	8014cdc <HAL_RCC_GetSysClockFreq>
 8014c78:	0001      	movs	r1, r0
 8014c7a:	4b12      	ldr	r3, [pc, #72]	@ (8014cc4 <HAL_RCC_ClockConfig+0x278>)
 8014c7c:	68db      	ldr	r3, [r3, #12]
 8014c7e:	091b      	lsrs	r3, r3, #4
 8014c80:	220f      	movs	r2, #15
 8014c82:	4013      	ands	r3, r2
 8014c84:	4a12      	ldr	r2, [pc, #72]	@ (8014cd0 <HAL_RCC_ClockConfig+0x284>)
 8014c86:	5cd3      	ldrb	r3, [r2, r3]
 8014c88:	000a      	movs	r2, r1
 8014c8a:	40da      	lsrs	r2, r3
 8014c8c:	4b11      	ldr	r3, [pc, #68]	@ (8014cd4 <HAL_RCC_ClockConfig+0x288>)
 8014c8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8014c90:	4b11      	ldr	r3, [pc, #68]	@ (8014cd8 <HAL_RCC_ClockConfig+0x28c>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	250b      	movs	r5, #11
 8014c96:	197c      	adds	r4, r7, r5
 8014c98:	0018      	movs	r0, r3
 8014c9a:	f7f9 f9b3 	bl	800e004 <HAL_InitTick>
 8014c9e:	0003      	movs	r3, r0
 8014ca0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8014ca2:	197b      	adds	r3, r7, r5
 8014ca4:	781b      	ldrb	r3, [r3, #0]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d002      	beq.n	8014cb0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8014caa:	197b      	adds	r3, r7, r5
 8014cac:	781b      	ldrb	r3, [r3, #0]
 8014cae:	e000      	b.n	8014cb2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8014cb0:	2300      	movs	r3, #0
}
 8014cb2:	0018      	movs	r0, r3
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	b004      	add	sp, #16
 8014cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8014cba:	46c0      	nop			@ (mov r8, r8)
 8014cbc:	40022000 	.word	0x40022000
 8014cc0:	00001388 	.word	0x00001388
 8014cc4:	40021000 	.word	0x40021000
 8014cc8:	fffff8ff 	.word	0xfffff8ff
 8014ccc:	ffffc7ff 	.word	0xffffc7ff
 8014cd0:	08024320 	.word	0x08024320
 8014cd4:	200000c8 	.word	0x200000c8
 8014cd8:	200000d8 	.word	0x200000d8

08014cdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014cdc:	b5b0      	push	{r4, r5, r7, lr}
 8014cde:	b08e      	sub	sp, #56	@ 0x38
 8014ce0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8014ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8014e14 <HAL_RCC_GetSysClockFreq+0x138>)
 8014ce4:	68db      	ldr	r3, [r3, #12]
 8014ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8014ce8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014cea:	230c      	movs	r3, #12
 8014cec:	4013      	ands	r3, r2
 8014cee:	2b0c      	cmp	r3, #12
 8014cf0:	d014      	beq.n	8014d1c <HAL_RCC_GetSysClockFreq+0x40>
 8014cf2:	d900      	bls.n	8014cf6 <HAL_RCC_GetSysClockFreq+0x1a>
 8014cf4:	e07b      	b.n	8014dee <HAL_RCC_GetSysClockFreq+0x112>
 8014cf6:	2b04      	cmp	r3, #4
 8014cf8:	d002      	beq.n	8014d00 <HAL_RCC_GetSysClockFreq+0x24>
 8014cfa:	2b08      	cmp	r3, #8
 8014cfc:	d00b      	beq.n	8014d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8014cfe:	e076      	b.n	8014dee <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8014d00:	4b44      	ldr	r3, [pc, #272]	@ (8014e14 <HAL_RCC_GetSysClockFreq+0x138>)
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	2210      	movs	r2, #16
 8014d06:	4013      	ands	r3, r2
 8014d08:	d002      	beq.n	8014d10 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8014d0a:	4b43      	ldr	r3, [pc, #268]	@ (8014e18 <HAL_RCC_GetSysClockFreq+0x13c>)
 8014d0c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8014d0e:	e07c      	b.n	8014e0a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8014d10:	4b42      	ldr	r3, [pc, #264]	@ (8014e1c <HAL_RCC_GetSysClockFreq+0x140>)
 8014d12:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014d14:	e079      	b.n	8014e0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8014d16:	4b42      	ldr	r3, [pc, #264]	@ (8014e20 <HAL_RCC_GetSysClockFreq+0x144>)
 8014d18:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014d1a:	e076      	b.n	8014e0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8014d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d1e:	0c9a      	lsrs	r2, r3, #18
 8014d20:	230f      	movs	r3, #15
 8014d22:	401a      	ands	r2, r3
 8014d24:	4b3f      	ldr	r3, [pc, #252]	@ (8014e24 <HAL_RCC_GetSysClockFreq+0x148>)
 8014d26:	5c9b      	ldrb	r3, [r3, r2]
 8014d28:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8014d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d2c:	0d9a      	lsrs	r2, r3, #22
 8014d2e:	2303      	movs	r3, #3
 8014d30:	4013      	ands	r3, r2
 8014d32:	3301      	adds	r3, #1
 8014d34:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8014d36:	4b37      	ldr	r3, [pc, #220]	@ (8014e14 <HAL_RCC_GetSysClockFreq+0x138>)
 8014d38:	68da      	ldr	r2, [r3, #12]
 8014d3a:	2380      	movs	r3, #128	@ 0x80
 8014d3c:	025b      	lsls	r3, r3, #9
 8014d3e:	4013      	ands	r3, r2
 8014d40:	d01a      	beq.n	8014d78 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8014d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d44:	61bb      	str	r3, [r7, #24]
 8014d46:	2300      	movs	r3, #0
 8014d48:	61fb      	str	r3, [r7, #28]
 8014d4a:	4a35      	ldr	r2, [pc, #212]	@ (8014e20 <HAL_RCC_GetSysClockFreq+0x144>)
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	69b8      	ldr	r0, [r7, #24]
 8014d50:	69f9      	ldr	r1, [r7, #28]
 8014d52:	f7eb fc35 	bl	80005c0 <__aeabi_lmul>
 8014d56:	0002      	movs	r2, r0
 8014d58:	000b      	movs	r3, r1
 8014d5a:	0010      	movs	r0, r2
 8014d5c:	0019      	movs	r1, r3
 8014d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d60:	613b      	str	r3, [r7, #16]
 8014d62:	2300      	movs	r3, #0
 8014d64:	617b      	str	r3, [r7, #20]
 8014d66:	693a      	ldr	r2, [r7, #16]
 8014d68:	697b      	ldr	r3, [r7, #20]
 8014d6a:	f7eb fc09 	bl	8000580 <__aeabi_uldivmod>
 8014d6e:	0002      	movs	r2, r0
 8014d70:	000b      	movs	r3, r1
 8014d72:	0013      	movs	r3, r2
 8014d74:	637b      	str	r3, [r7, #52]	@ 0x34
 8014d76:	e037      	b.n	8014de8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8014d78:	4b26      	ldr	r3, [pc, #152]	@ (8014e14 <HAL_RCC_GetSysClockFreq+0x138>)
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	2210      	movs	r2, #16
 8014d7e:	4013      	ands	r3, r2
 8014d80:	d01a      	beq.n	8014db8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8014d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d84:	60bb      	str	r3, [r7, #8]
 8014d86:	2300      	movs	r3, #0
 8014d88:	60fb      	str	r3, [r7, #12]
 8014d8a:	4a23      	ldr	r2, [pc, #140]	@ (8014e18 <HAL_RCC_GetSysClockFreq+0x13c>)
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	68b8      	ldr	r0, [r7, #8]
 8014d90:	68f9      	ldr	r1, [r7, #12]
 8014d92:	f7eb fc15 	bl	80005c0 <__aeabi_lmul>
 8014d96:	0002      	movs	r2, r0
 8014d98:	000b      	movs	r3, r1
 8014d9a:	0010      	movs	r0, r2
 8014d9c:	0019      	movs	r1, r3
 8014d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014da0:	603b      	str	r3, [r7, #0]
 8014da2:	2300      	movs	r3, #0
 8014da4:	607b      	str	r3, [r7, #4]
 8014da6:	683a      	ldr	r2, [r7, #0]
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	f7eb fbe9 	bl	8000580 <__aeabi_uldivmod>
 8014dae:	0002      	movs	r2, r0
 8014db0:	000b      	movs	r3, r1
 8014db2:	0013      	movs	r3, r2
 8014db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8014db6:	e017      	b.n	8014de8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8014db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014dba:	0018      	movs	r0, r3
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	0019      	movs	r1, r3
 8014dc0:	4a16      	ldr	r2, [pc, #88]	@ (8014e1c <HAL_RCC_GetSysClockFreq+0x140>)
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	f7eb fbfc 	bl	80005c0 <__aeabi_lmul>
 8014dc8:	0002      	movs	r2, r0
 8014dca:	000b      	movs	r3, r1
 8014dcc:	0010      	movs	r0, r2
 8014dce:	0019      	movs	r1, r3
 8014dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dd2:	001c      	movs	r4, r3
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	001d      	movs	r5, r3
 8014dd8:	0022      	movs	r2, r4
 8014dda:	002b      	movs	r3, r5
 8014ddc:	f7eb fbd0 	bl	8000580 <__aeabi_uldivmod>
 8014de0:	0002      	movs	r2, r0
 8014de2:	000b      	movs	r3, r1
 8014de4:	0013      	movs	r3, r2
 8014de6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8014de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014dea:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014dec:	e00d      	b.n	8014e0a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8014dee:	4b09      	ldr	r3, [pc, #36]	@ (8014e14 <HAL_RCC_GetSysClockFreq+0x138>)
 8014df0:	685b      	ldr	r3, [r3, #4]
 8014df2:	0b5b      	lsrs	r3, r3, #13
 8014df4:	2207      	movs	r2, #7
 8014df6:	4013      	ands	r3, r2
 8014df8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8014dfa:	6a3b      	ldr	r3, [r7, #32]
 8014dfc:	3301      	adds	r3, #1
 8014dfe:	2280      	movs	r2, #128	@ 0x80
 8014e00:	0212      	lsls	r2, r2, #8
 8014e02:	409a      	lsls	r2, r3
 8014e04:	0013      	movs	r3, r2
 8014e06:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014e08:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8014e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8014e0c:	0018      	movs	r0, r3
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	b00e      	add	sp, #56	@ 0x38
 8014e12:	bdb0      	pop	{r4, r5, r7, pc}
 8014e14:	40021000 	.word	0x40021000
 8014e18:	003d0900 	.word	0x003d0900
 8014e1c:	00f42400 	.word	0x00f42400
 8014e20:	007a1200 	.word	0x007a1200
 8014e24:	08024338 	.word	0x08024338

08014e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014e2c:	4b02      	ldr	r3, [pc, #8]	@ (8014e38 <HAL_RCC_GetHCLKFreq+0x10>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
}
 8014e30:	0018      	movs	r0, r3
 8014e32:	46bd      	mov	sp, r7
 8014e34:	bd80      	pop	{r7, pc}
 8014e36:	46c0      	nop			@ (mov r8, r8)
 8014e38:	200000c8 	.word	0x200000c8

08014e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8014e40:	f7ff fff2 	bl	8014e28 <HAL_RCC_GetHCLKFreq>
 8014e44:	0001      	movs	r1, r0
 8014e46:	4b06      	ldr	r3, [pc, #24]	@ (8014e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014e48:	68db      	ldr	r3, [r3, #12]
 8014e4a:	0a1b      	lsrs	r3, r3, #8
 8014e4c:	2207      	movs	r2, #7
 8014e4e:	4013      	ands	r3, r2
 8014e50:	4a04      	ldr	r2, [pc, #16]	@ (8014e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8014e52:	5cd3      	ldrb	r3, [r2, r3]
 8014e54:	40d9      	lsrs	r1, r3
 8014e56:	000b      	movs	r3, r1
}
 8014e58:	0018      	movs	r0, r3
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}
 8014e5e:	46c0      	nop			@ (mov r8, r8)
 8014e60:	40021000 	.word	0x40021000
 8014e64:	08024330 	.word	0x08024330

08014e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8014e6c:	f7ff ffdc 	bl	8014e28 <HAL_RCC_GetHCLKFreq>
 8014e70:	0001      	movs	r1, r0
 8014e72:	4b06      	ldr	r3, [pc, #24]	@ (8014e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8014e74:	68db      	ldr	r3, [r3, #12]
 8014e76:	0adb      	lsrs	r3, r3, #11
 8014e78:	2207      	movs	r2, #7
 8014e7a:	4013      	ands	r3, r2
 8014e7c:	4a04      	ldr	r2, [pc, #16]	@ (8014e90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8014e7e:	5cd3      	ldrb	r3, [r2, r3]
 8014e80:	40d9      	lsrs	r1, r3
 8014e82:	000b      	movs	r3, r1
}
 8014e84:	0018      	movs	r0, r3
 8014e86:	46bd      	mov	sp, r7
 8014e88:	bd80      	pop	{r7, pc}
 8014e8a:	46c0      	nop			@ (mov r8, r8)
 8014e8c:	40021000 	.word	0x40021000
 8014e90:	08024330 	.word	0x08024330

08014e94 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b086      	sub	sp, #24
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8014e9c:	2017      	movs	r0, #23
 8014e9e:	183b      	adds	r3, r7, r0
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	681b      	ldr	r3, [r3, #0]
 8014ea8:	2220      	movs	r2, #32
 8014eaa:	4013      	ands	r3, r2
 8014eac:	d100      	bne.n	8014eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8014eae:	e0c7      	b.n	8015040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014eb0:	4b9b      	ldr	r3, [pc, #620]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014eb4:	2380      	movs	r3, #128	@ 0x80
 8014eb6:	055b      	lsls	r3, r3, #21
 8014eb8:	4013      	ands	r3, r2
 8014eba:	d109      	bne.n	8014ed0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014ebc:	4b98      	ldr	r3, [pc, #608]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014ec0:	4b97      	ldr	r3, [pc, #604]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014ec2:	2180      	movs	r1, #128	@ 0x80
 8014ec4:	0549      	lsls	r1, r1, #21
 8014ec6:	430a      	orrs	r2, r1
 8014ec8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8014eca:	183b      	adds	r3, r7, r0
 8014ecc:	2201      	movs	r2, #1
 8014ece:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014ed0:	4b94      	ldr	r3, [pc, #592]	@ (8015124 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8014ed2:	681a      	ldr	r2, [r3, #0]
 8014ed4:	2380      	movs	r3, #128	@ 0x80
 8014ed6:	005b      	lsls	r3, r3, #1
 8014ed8:	4013      	ands	r3, r2
 8014eda:	d11a      	bne.n	8014f12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8014edc:	4b91      	ldr	r3, [pc, #580]	@ (8015124 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8014ede:	681a      	ldr	r2, [r3, #0]
 8014ee0:	4b90      	ldr	r3, [pc, #576]	@ (8015124 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8014ee2:	2180      	movs	r1, #128	@ 0x80
 8014ee4:	0049      	lsls	r1, r1, #1
 8014ee6:	430a      	orrs	r2, r1
 8014ee8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014eea:	f7f9 f8d1 	bl	800e090 <HAL_GetTick>
 8014eee:	0003      	movs	r3, r0
 8014ef0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014ef2:	e008      	b.n	8014f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014ef4:	f7f9 f8cc 	bl	800e090 <HAL_GetTick>
 8014ef8:	0002      	movs	r2, r0
 8014efa:	693b      	ldr	r3, [r7, #16]
 8014efc:	1ad3      	subs	r3, r2, r3
 8014efe:	2b64      	cmp	r3, #100	@ 0x64
 8014f00:	d901      	bls.n	8014f06 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8014f02:	2303      	movs	r3, #3
 8014f04:	e107      	b.n	8015116 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014f06:	4b87      	ldr	r3, [pc, #540]	@ (8015124 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8014f08:	681a      	ldr	r2, [r3, #0]
 8014f0a:	2380      	movs	r3, #128	@ 0x80
 8014f0c:	005b      	lsls	r3, r3, #1
 8014f0e:	4013      	ands	r3, r2
 8014f10:	d0f0      	beq.n	8014ef4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8014f12:	4b83      	ldr	r3, [pc, #524]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f14:	681a      	ldr	r2, [r3, #0]
 8014f16:	23c0      	movs	r3, #192	@ 0xc0
 8014f18:	039b      	lsls	r3, r3, #14
 8014f1a:	4013      	ands	r3, r2
 8014f1c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	685a      	ldr	r2, [r3, #4]
 8014f22:	23c0      	movs	r3, #192	@ 0xc0
 8014f24:	039b      	lsls	r3, r3, #14
 8014f26:	4013      	ands	r3, r2
 8014f28:	68fa      	ldr	r2, [r7, #12]
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d013      	beq.n	8014f56 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	685a      	ldr	r2, [r3, #4]
 8014f32:	23c0      	movs	r3, #192	@ 0xc0
 8014f34:	029b      	lsls	r3, r3, #10
 8014f36:	401a      	ands	r2, r3
 8014f38:	23c0      	movs	r3, #192	@ 0xc0
 8014f3a:	029b      	lsls	r3, r3, #10
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	d10a      	bne.n	8014f56 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8014f40:	4b77      	ldr	r3, [pc, #476]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f42:	681a      	ldr	r2, [r3, #0]
 8014f44:	2380      	movs	r3, #128	@ 0x80
 8014f46:	029b      	lsls	r3, r3, #10
 8014f48:	401a      	ands	r2, r3
 8014f4a:	2380      	movs	r3, #128	@ 0x80
 8014f4c:	029b      	lsls	r3, r3, #10
 8014f4e:	429a      	cmp	r2, r3
 8014f50:	d101      	bne.n	8014f56 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8014f52:	2301      	movs	r3, #1
 8014f54:	e0df      	b.n	8015116 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8014f56:	4b72      	ldr	r3, [pc, #456]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014f5a:	23c0      	movs	r3, #192	@ 0xc0
 8014f5c:	029b      	lsls	r3, r3, #10
 8014f5e:	4013      	ands	r3, r2
 8014f60:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d03b      	beq.n	8014fe0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	685a      	ldr	r2, [r3, #4]
 8014f6c:	23c0      	movs	r3, #192	@ 0xc0
 8014f6e:	029b      	lsls	r3, r3, #10
 8014f70:	4013      	ands	r3, r2
 8014f72:	68fa      	ldr	r2, [r7, #12]
 8014f74:	429a      	cmp	r2, r3
 8014f76:	d033      	beq.n	8014fe0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	2220      	movs	r2, #32
 8014f7e:	4013      	ands	r3, r2
 8014f80:	d02e      	beq.n	8014fe0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8014f82:	4b67      	ldr	r3, [pc, #412]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014f86:	4a68      	ldr	r2, [pc, #416]	@ (8015128 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8014f88:	4013      	ands	r3, r2
 8014f8a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8014f8c:	4b64      	ldr	r3, [pc, #400]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014f90:	4b63      	ldr	r3, [pc, #396]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f92:	2180      	movs	r1, #128	@ 0x80
 8014f94:	0309      	lsls	r1, r1, #12
 8014f96:	430a      	orrs	r2, r1
 8014f98:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8014f9a:	4b61      	ldr	r3, [pc, #388]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014f9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014f9e:	4b60      	ldr	r3, [pc, #384]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014fa0:	4962      	ldr	r1, [pc, #392]	@ (801512c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8014fa2:	400a      	ands	r2, r1
 8014fa4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8014fa6:	4b5e      	ldr	r3, [pc, #376]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014fa8:	68fa      	ldr	r2, [r7, #12]
 8014faa:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8014fac:	68fa      	ldr	r2, [r7, #12]
 8014fae:	2380      	movs	r3, #128	@ 0x80
 8014fb0:	005b      	lsls	r3, r3, #1
 8014fb2:	4013      	ands	r3, r2
 8014fb4:	d014      	beq.n	8014fe0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014fb6:	f7f9 f86b 	bl	800e090 <HAL_GetTick>
 8014fba:	0003      	movs	r3, r0
 8014fbc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014fbe:	e009      	b.n	8014fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014fc0:	f7f9 f866 	bl	800e090 <HAL_GetTick>
 8014fc4:	0002      	movs	r2, r0
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	1ad3      	subs	r3, r2, r3
 8014fca:	4a59      	ldr	r2, [pc, #356]	@ (8015130 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8014fcc:	4293      	cmp	r3, r2
 8014fce:	d901      	bls.n	8014fd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8014fd0:	2303      	movs	r3, #3
 8014fd2:	e0a0      	b.n	8015116 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014fd4:	4b52      	ldr	r3, [pc, #328]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014fd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014fd8:	2380      	movs	r3, #128	@ 0x80
 8014fda:	009b      	lsls	r3, r3, #2
 8014fdc:	4013      	ands	r3, r2
 8014fde:	d0ef      	beq.n	8014fc0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	2220      	movs	r2, #32
 8014fe6:	4013      	ands	r3, r2
 8014fe8:	d01f      	beq.n	801502a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	685a      	ldr	r2, [r3, #4]
 8014fee:	23c0      	movs	r3, #192	@ 0xc0
 8014ff0:	029b      	lsls	r3, r3, #10
 8014ff2:	401a      	ands	r2, r3
 8014ff4:	23c0      	movs	r3, #192	@ 0xc0
 8014ff6:	029b      	lsls	r3, r3, #10
 8014ff8:	429a      	cmp	r2, r3
 8014ffa:	d10c      	bne.n	8015016 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8014ffc:	4b48      	ldr	r3, [pc, #288]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	4a4c      	ldr	r2, [pc, #304]	@ (8015134 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8015002:	4013      	ands	r3, r2
 8015004:	0019      	movs	r1, r3
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	685a      	ldr	r2, [r3, #4]
 801500a:	23c0      	movs	r3, #192	@ 0xc0
 801500c:	039b      	lsls	r3, r3, #14
 801500e:	401a      	ands	r2, r3
 8015010:	4b43      	ldr	r3, [pc, #268]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015012:	430a      	orrs	r2, r1
 8015014:	601a      	str	r2, [r3, #0]
 8015016:	4b42      	ldr	r3, [pc, #264]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015018:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	685a      	ldr	r2, [r3, #4]
 801501e:	23c0      	movs	r3, #192	@ 0xc0
 8015020:	029b      	lsls	r3, r3, #10
 8015022:	401a      	ands	r2, r3
 8015024:	4b3e      	ldr	r3, [pc, #248]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015026:	430a      	orrs	r2, r1
 8015028:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801502a:	2317      	movs	r3, #23
 801502c:	18fb      	adds	r3, r7, r3
 801502e:	781b      	ldrb	r3, [r3, #0]
 8015030:	2b01      	cmp	r3, #1
 8015032:	d105      	bne.n	8015040 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015034:	4b3a      	ldr	r3, [pc, #232]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015036:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015038:	4b39      	ldr	r3, [pc, #228]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801503a:	493f      	ldr	r1, [pc, #252]	@ (8015138 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801503c:	400a      	ands	r2, r1
 801503e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	2201      	movs	r2, #1
 8015046:	4013      	ands	r3, r2
 8015048:	d009      	beq.n	801505e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801504a:	4b35      	ldr	r3, [pc, #212]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801504c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801504e:	2203      	movs	r2, #3
 8015050:	4393      	bics	r3, r2
 8015052:	0019      	movs	r1, r3
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	689a      	ldr	r2, [r3, #8]
 8015058:	4b31      	ldr	r3, [pc, #196]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801505a:	430a      	orrs	r2, r1
 801505c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	2202      	movs	r2, #2
 8015064:	4013      	ands	r3, r2
 8015066:	d009      	beq.n	801507c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8015068:	4b2d      	ldr	r3, [pc, #180]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801506a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801506c:	220c      	movs	r2, #12
 801506e:	4393      	bics	r3, r2
 8015070:	0019      	movs	r1, r3
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	68da      	ldr	r2, [r3, #12]
 8015076:	4b2a      	ldr	r3, [pc, #168]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015078:	430a      	orrs	r2, r1
 801507a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	2204      	movs	r2, #4
 8015082:	4013      	ands	r3, r2
 8015084:	d009      	beq.n	801509a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015086:	4b26      	ldr	r3, [pc, #152]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801508a:	4a2c      	ldr	r2, [pc, #176]	@ (801513c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801508c:	4013      	ands	r3, r2
 801508e:	0019      	movs	r1, r3
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	691a      	ldr	r2, [r3, #16]
 8015094:	4b22      	ldr	r3, [pc, #136]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015096:	430a      	orrs	r2, r1
 8015098:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	2208      	movs	r2, #8
 80150a0:	4013      	ands	r3, r2
 80150a2:	d009      	beq.n	80150b8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80150a4:	4b1e      	ldr	r3, [pc, #120]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80150a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80150a8:	4a25      	ldr	r2, [pc, #148]	@ (8015140 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80150aa:	4013      	ands	r3, r2
 80150ac:	0019      	movs	r1, r3
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	695a      	ldr	r2, [r3, #20]
 80150b2:	4b1b      	ldr	r3, [pc, #108]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80150b4:	430a      	orrs	r2, r1
 80150b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	681a      	ldr	r2, [r3, #0]
 80150bc:	2380      	movs	r3, #128	@ 0x80
 80150be:	005b      	lsls	r3, r3, #1
 80150c0:	4013      	ands	r3, r2
 80150c2:	d009      	beq.n	80150d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80150c4:	4b16      	ldr	r3, [pc, #88]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80150c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80150c8:	4a17      	ldr	r2, [pc, #92]	@ (8015128 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80150ca:	4013      	ands	r3, r2
 80150cc:	0019      	movs	r1, r3
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	699a      	ldr	r2, [r3, #24]
 80150d2:	4b13      	ldr	r3, [pc, #76]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80150d4:	430a      	orrs	r2, r1
 80150d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	2240      	movs	r2, #64	@ 0x40
 80150de:	4013      	ands	r3, r2
 80150e0:	d009      	beq.n	80150f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80150e2:	4b0f      	ldr	r3, [pc, #60]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80150e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80150e6:	4a17      	ldr	r2, [pc, #92]	@ (8015144 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80150e8:	4013      	ands	r3, r2
 80150ea:	0019      	movs	r1, r3
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	6a1a      	ldr	r2, [r3, #32]
 80150f0:	4b0b      	ldr	r3, [pc, #44]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80150f2:	430a      	orrs	r2, r1
 80150f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	2280      	movs	r2, #128	@ 0x80
 80150fc:	4013      	ands	r3, r2
 80150fe:	d009      	beq.n	8015114 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8015100:	4b07      	ldr	r3, [pc, #28]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015104:	4a10      	ldr	r2, [pc, #64]	@ (8015148 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8015106:	4013      	ands	r3, r2
 8015108:	0019      	movs	r1, r3
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	69da      	ldr	r2, [r3, #28]
 801510e:	4b04      	ldr	r3, [pc, #16]	@ (8015120 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015110:	430a      	orrs	r2, r1
 8015112:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8015114:	2300      	movs	r3, #0
}
 8015116:	0018      	movs	r0, r3
 8015118:	46bd      	mov	sp, r7
 801511a:	b006      	add	sp, #24
 801511c:	bd80      	pop	{r7, pc}
 801511e:	46c0      	nop			@ (mov r8, r8)
 8015120:	40021000 	.word	0x40021000
 8015124:	40007000 	.word	0x40007000
 8015128:	fffcffff 	.word	0xfffcffff
 801512c:	fff7ffff 	.word	0xfff7ffff
 8015130:	00001388 	.word	0x00001388
 8015134:	ffcfffff 	.word	0xffcfffff
 8015138:	efffffff 	.word	0xefffffff
 801513c:	fffff3ff 	.word	0xfffff3ff
 8015140:	ffffcfff 	.word	0xffffcfff
 8015144:	fbffffff 	.word	0xfbffffff
 8015148:	fff3ffff 	.word	0xfff3ffff

0801514c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801514c:	b5b0      	push	{r4, r5, r7, lr}
 801514e:	b084      	sub	sp, #16
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015154:	230f      	movs	r3, #15
 8015156:	18fb      	adds	r3, r7, r3
 8015158:	2201      	movs	r2, #1
 801515a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d101      	bne.n	8015166 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8015162:	2301      	movs	r3, #1
 8015164:	e088      	b.n	8015278 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	2221      	movs	r2, #33	@ 0x21
 801516a:	5c9b      	ldrb	r3, [r3, r2]
 801516c:	b2db      	uxtb	r3, r3
 801516e:	2b00      	cmp	r3, #0
 8015170:	d107      	bne.n	8015182 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	2220      	movs	r2, #32
 8015176:	2100      	movs	r1, #0
 8015178:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	0018      	movs	r0, r3
 801517e:	f7f3 fd9f 	bl	8008cc0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	2221      	movs	r2, #33	@ 0x21
 8015186:	2102      	movs	r1, #2
 8015188:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	68db      	ldr	r3, [r3, #12]
 8015190:	2210      	movs	r2, #16
 8015192:	4013      	ands	r3, r2
 8015194:	2b10      	cmp	r3, #16
 8015196:	d05f      	beq.n	8015258 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	22ca      	movs	r2, #202	@ 0xca
 801519e:	625a      	str	r2, [r3, #36]	@ 0x24
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	2253      	movs	r2, #83	@ 0x53
 80151a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80151a8:	250f      	movs	r5, #15
 80151aa:	197c      	adds	r4, r7, r5
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	0018      	movs	r0, r3
 80151b0:	f000 fa7c 	bl	80156ac <RTC_EnterInitMode>
 80151b4:	0003      	movs	r3, r0
 80151b6:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80151b8:	0028      	movs	r0, r5
 80151ba:	183b      	adds	r3, r7, r0
 80151bc:	781b      	ldrb	r3, [r3, #0]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d12c      	bne.n	801521c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	689a      	ldr	r2, [r3, #8]
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	492c      	ldr	r1, [pc, #176]	@ (8015280 <HAL_RTC_Init+0x134>)
 80151ce:	400a      	ands	r2, r1
 80151d0:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	6899      	ldr	r1, [r3, #8]
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	685a      	ldr	r2, [r3, #4]
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	691b      	ldr	r3, [r3, #16]
 80151e0:	431a      	orrs	r2, r3
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	699b      	ldr	r3, [r3, #24]
 80151e6:	431a      	orrs	r2, r3
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	430a      	orrs	r2, r1
 80151ee:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	687a      	ldr	r2, [r7, #4]
 80151f6:	68d2      	ldr	r2, [r2, #12]
 80151f8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	6919      	ldr	r1, [r3, #16]
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	689b      	ldr	r3, [r3, #8]
 8015204:	041a      	lsls	r2, r3, #16
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	430a      	orrs	r2, r1
 801520c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801520e:	183c      	adds	r4, r7, r0
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	0018      	movs	r0, r3
 8015214:	f000 fa8e 	bl	8015734 <RTC_ExitInitMode>
 8015218:	0003      	movs	r3, r0
 801521a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801521c:	230f      	movs	r3, #15
 801521e:	18fb      	adds	r3, r7, r3
 8015220:	781b      	ldrb	r3, [r3, #0]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d113      	bne.n	801524e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	2103      	movs	r1, #3
 8015232:	438a      	bics	r2, r1
 8015234:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	69da      	ldr	r2, [r3, #28]
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	695b      	ldr	r3, [r3, #20]
 8015244:	431a      	orrs	r2, r3
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	430a      	orrs	r2, r1
 801524c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	22ff      	movs	r2, #255	@ 0xff
 8015254:	625a      	str	r2, [r3, #36]	@ 0x24
 8015256:	e003      	b.n	8015260 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8015258:	230f      	movs	r3, #15
 801525a:	18fb      	adds	r3, r7, r3
 801525c:	2200      	movs	r2, #0
 801525e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8015260:	230f      	movs	r3, #15
 8015262:	18fb      	adds	r3, r7, r3
 8015264:	781b      	ldrb	r3, [r3, #0]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d103      	bne.n	8015272 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	2221      	movs	r2, #33	@ 0x21
 801526e:	2101      	movs	r1, #1
 8015270:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8015272:	230f      	movs	r3, #15
 8015274:	18fb      	adds	r3, r7, r3
 8015276:	781b      	ldrb	r3, [r3, #0]
}
 8015278:	0018      	movs	r0, r3
 801527a:	46bd      	mov	sp, r7
 801527c:	b004      	add	sp, #16
 801527e:	bdb0      	pop	{r4, r5, r7, pc}
 8015280:	ff8fffbf 	.word	0xff8fffbf

08015284 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8015284:	b5b0      	push	{r4, r5, r7, lr}
 8015286:	b086      	sub	sp, #24
 8015288:	af00      	add	r7, sp, #0
 801528a:	60f8      	str	r0, [r7, #12]
 801528c:	60b9      	str	r1, [r7, #8]
 801528e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8015290:	2300      	movs	r3, #0
 8015292:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	2220      	movs	r2, #32
 8015298:	5c9b      	ldrb	r3, [r3, r2]
 801529a:	2b01      	cmp	r3, #1
 801529c:	d101      	bne.n	80152a2 <HAL_RTC_SetTime+0x1e>
 801529e:	2302      	movs	r3, #2
 80152a0:	e092      	b.n	80153c8 <HAL_RTC_SetTime+0x144>
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	2220      	movs	r2, #32
 80152a6:	2101      	movs	r1, #1
 80152a8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	2221      	movs	r2, #33	@ 0x21
 80152ae:	2102      	movs	r1, #2
 80152b0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d125      	bne.n	8015304 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	689b      	ldr	r3, [r3, #8]
 80152be:	2240      	movs	r2, #64	@ 0x40
 80152c0:	4013      	ands	r3, r2
 80152c2:	d102      	bne.n	80152ca <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	2200      	movs	r2, #0
 80152c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80152ca:	68bb      	ldr	r3, [r7, #8]
 80152cc:	781b      	ldrb	r3, [r3, #0]
 80152ce:	0018      	movs	r0, r3
 80152d0:	f000 fa5a 	bl	8015788 <RTC_ByteToBcd2>
 80152d4:	0003      	movs	r3, r0
 80152d6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80152d8:	68bb      	ldr	r3, [r7, #8]
 80152da:	785b      	ldrb	r3, [r3, #1]
 80152dc:	0018      	movs	r0, r3
 80152de:	f000 fa53 	bl	8015788 <RTC_ByteToBcd2>
 80152e2:	0003      	movs	r3, r0
 80152e4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80152e6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80152e8:	68bb      	ldr	r3, [r7, #8]
 80152ea:	789b      	ldrb	r3, [r3, #2]
 80152ec:	0018      	movs	r0, r3
 80152ee:	f000 fa4b 	bl	8015788 <RTC_ByteToBcd2>
 80152f2:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80152f4:	0022      	movs	r2, r4
 80152f6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80152f8:	68bb      	ldr	r3, [r7, #8]
 80152fa:	78db      	ldrb	r3, [r3, #3]
 80152fc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80152fe:	4313      	orrs	r3, r2
 8015300:	617b      	str	r3, [r7, #20]
 8015302:	e017      	b.n	8015334 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	689b      	ldr	r3, [r3, #8]
 801530a:	2240      	movs	r2, #64	@ 0x40
 801530c:	4013      	ands	r3, r2
 801530e:	d102      	bne.n	8015316 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015310:	68bb      	ldr	r3, [r7, #8]
 8015312:	2200      	movs	r2, #0
 8015314:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015316:	68bb      	ldr	r3, [r7, #8]
 8015318:	781b      	ldrb	r3, [r3, #0]
 801531a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801531c:	68bb      	ldr	r3, [r7, #8]
 801531e:	785b      	ldrb	r3, [r3, #1]
 8015320:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015322:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8015324:	68ba      	ldr	r2, [r7, #8]
 8015326:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8015328:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801532a:	68bb      	ldr	r3, [r7, #8]
 801532c:	78db      	ldrb	r3, [r3, #3]
 801532e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015330:	4313      	orrs	r3, r2
 8015332:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	22ca      	movs	r2, #202	@ 0xca
 801533a:	625a      	str	r2, [r3, #36]	@ 0x24
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	2253      	movs	r2, #83	@ 0x53
 8015342:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8015344:	2513      	movs	r5, #19
 8015346:	197c      	adds	r4, r7, r5
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	0018      	movs	r0, r3
 801534c:	f000 f9ae 	bl	80156ac <RTC_EnterInitMode>
 8015350:	0003      	movs	r3, r0
 8015352:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8015354:	0028      	movs	r0, r5
 8015356:	183b      	adds	r3, r7, r0
 8015358:	781b      	ldrb	r3, [r3, #0]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d120      	bne.n	80153a0 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	697a      	ldr	r2, [r7, #20]
 8015364:	491a      	ldr	r1, [pc, #104]	@ (80153d0 <HAL_RTC_SetTime+0x14c>)
 8015366:	400a      	ands	r2, r1
 8015368:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	689a      	ldr	r2, [r3, #8]
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	4917      	ldr	r1, [pc, #92]	@ (80153d4 <HAL_RTC_SetTime+0x150>)
 8015376:	400a      	ands	r2, r1
 8015378:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	6899      	ldr	r1, [r3, #8]
 8015380:	68bb      	ldr	r3, [r7, #8]
 8015382:	68da      	ldr	r2, [r3, #12]
 8015384:	68bb      	ldr	r3, [r7, #8]
 8015386:	691b      	ldr	r3, [r3, #16]
 8015388:	431a      	orrs	r2, r3
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	430a      	orrs	r2, r1
 8015390:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8015392:	183c      	adds	r4, r7, r0
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	0018      	movs	r0, r3
 8015398:	f000 f9cc 	bl	8015734 <RTC_ExitInitMode>
 801539c:	0003      	movs	r3, r0
 801539e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80153a0:	2313      	movs	r3, #19
 80153a2:	18fb      	adds	r3, r7, r3
 80153a4:	781b      	ldrb	r3, [r3, #0]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d103      	bne.n	80153b2 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	2221      	movs	r2, #33	@ 0x21
 80153ae:	2101      	movs	r1, #1
 80153b0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	22ff      	movs	r2, #255	@ 0xff
 80153b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	2220      	movs	r2, #32
 80153be:	2100      	movs	r1, #0
 80153c0:	5499      	strb	r1, [r3, r2]

  return status;
 80153c2:	2313      	movs	r3, #19
 80153c4:	18fb      	adds	r3, r7, r3
 80153c6:	781b      	ldrb	r3, [r3, #0]
}
 80153c8:	0018      	movs	r0, r3
 80153ca:	46bd      	mov	sp, r7
 80153cc:	b006      	add	sp, #24
 80153ce:	bdb0      	pop	{r4, r5, r7, pc}
 80153d0:	007f7f7f 	.word	0x007f7f7f
 80153d4:	fffbffff 	.word	0xfffbffff

080153d8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b086      	sub	sp, #24
 80153dc:	af00      	add	r7, sp, #0
 80153de:	60f8      	str	r0, [r7, #12]
 80153e0:	60b9      	str	r1, [r7, #8]
 80153e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80153e4:	2300      	movs	r3, #0
 80153e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80153ee:	68bb      	ldr	r3, [r7, #8]
 80153f0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	691b      	ldr	r3, [r3, #16]
 80153f8:	045b      	lsls	r3, r3, #17
 80153fa:	0c5a      	lsrs	r2, r3, #17
 80153fc:	68bb      	ldr	r3, [r7, #8]
 80153fe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	4a22      	ldr	r2, [pc, #136]	@ (8015490 <HAL_RTC_GetTime+0xb8>)
 8015408:	4013      	ands	r3, r2
 801540a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801540c:	697b      	ldr	r3, [r7, #20]
 801540e:	0c1b      	lsrs	r3, r3, #16
 8015410:	b2db      	uxtb	r3, r3
 8015412:	223f      	movs	r2, #63	@ 0x3f
 8015414:	4013      	ands	r3, r2
 8015416:	b2da      	uxtb	r2, r3
 8015418:	68bb      	ldr	r3, [r7, #8]
 801541a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801541c:	697b      	ldr	r3, [r7, #20]
 801541e:	0a1b      	lsrs	r3, r3, #8
 8015420:	b2db      	uxtb	r3, r3
 8015422:	227f      	movs	r2, #127	@ 0x7f
 8015424:	4013      	ands	r3, r2
 8015426:	b2da      	uxtb	r2, r3
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801542c:	697b      	ldr	r3, [r7, #20]
 801542e:	b2db      	uxtb	r3, r3
 8015430:	227f      	movs	r2, #127	@ 0x7f
 8015432:	4013      	ands	r3, r2
 8015434:	b2da      	uxtb	r2, r3
 8015436:	68bb      	ldr	r3, [r7, #8]
 8015438:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801543a:	697b      	ldr	r3, [r7, #20]
 801543c:	0d9b      	lsrs	r3, r3, #22
 801543e:	b2db      	uxtb	r3, r3
 8015440:	2201      	movs	r2, #1
 8015442:	4013      	ands	r3, r2
 8015444:	b2da      	uxtb	r2, r3
 8015446:	68bb      	ldr	r3, [r7, #8]
 8015448:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d11a      	bne.n	8015486 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8015450:	68bb      	ldr	r3, [r7, #8]
 8015452:	781b      	ldrb	r3, [r3, #0]
 8015454:	0018      	movs	r0, r3
 8015456:	f000 f9b8 	bl	80157ca <RTC_Bcd2ToByte>
 801545a:	0003      	movs	r3, r0
 801545c:	001a      	movs	r2, r3
 801545e:	68bb      	ldr	r3, [r7, #8]
 8015460:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8015462:	68bb      	ldr	r3, [r7, #8]
 8015464:	785b      	ldrb	r3, [r3, #1]
 8015466:	0018      	movs	r0, r3
 8015468:	f000 f9af 	bl	80157ca <RTC_Bcd2ToByte>
 801546c:	0003      	movs	r3, r0
 801546e:	001a      	movs	r2, r3
 8015470:	68bb      	ldr	r3, [r7, #8]
 8015472:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8015474:	68bb      	ldr	r3, [r7, #8]
 8015476:	789b      	ldrb	r3, [r3, #2]
 8015478:	0018      	movs	r0, r3
 801547a:	f000 f9a6 	bl	80157ca <RTC_Bcd2ToByte>
 801547e:	0003      	movs	r3, r0
 8015480:	001a      	movs	r2, r3
 8015482:	68bb      	ldr	r3, [r7, #8]
 8015484:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8015486:	2300      	movs	r3, #0
}
 8015488:	0018      	movs	r0, r3
 801548a:	46bd      	mov	sp, r7
 801548c:	b006      	add	sp, #24
 801548e:	bd80      	pop	{r7, pc}
 8015490:	007f7f7f 	.word	0x007f7f7f

08015494 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8015494:	b5b0      	push	{r4, r5, r7, lr}
 8015496:	b086      	sub	sp, #24
 8015498:	af00      	add	r7, sp, #0
 801549a:	60f8      	str	r0, [r7, #12]
 801549c:	60b9      	str	r1, [r7, #8]
 801549e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80154a0:	2300      	movs	r3, #0
 80154a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	2220      	movs	r2, #32
 80154a8:	5c9b      	ldrb	r3, [r3, r2]
 80154aa:	2b01      	cmp	r3, #1
 80154ac:	d101      	bne.n	80154b2 <HAL_RTC_SetDate+0x1e>
 80154ae:	2302      	movs	r3, #2
 80154b0:	e07e      	b.n	80155b0 <HAL_RTC_SetDate+0x11c>
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	2220      	movs	r2, #32
 80154b6:	2101      	movs	r1, #1
 80154b8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	2221      	movs	r2, #33	@ 0x21
 80154be:	2102      	movs	r1, #2
 80154c0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d10e      	bne.n	80154e6 <HAL_RTC_SetDate+0x52>
 80154c8:	68bb      	ldr	r3, [r7, #8]
 80154ca:	785b      	ldrb	r3, [r3, #1]
 80154cc:	001a      	movs	r2, r3
 80154ce:	2310      	movs	r3, #16
 80154d0:	4013      	ands	r3, r2
 80154d2:	d008      	beq.n	80154e6 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80154d4:	68bb      	ldr	r3, [r7, #8]
 80154d6:	785b      	ldrb	r3, [r3, #1]
 80154d8:	2210      	movs	r2, #16
 80154da:	4393      	bics	r3, r2
 80154dc:	b2db      	uxtb	r3, r3
 80154de:	330a      	adds	r3, #10
 80154e0:	b2da      	uxtb	r2, r3
 80154e2:	68bb      	ldr	r3, [r7, #8]
 80154e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d11c      	bne.n	8015526 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80154ec:	68bb      	ldr	r3, [r7, #8]
 80154ee:	78db      	ldrb	r3, [r3, #3]
 80154f0:	0018      	movs	r0, r3
 80154f2:	f000 f949 	bl	8015788 <RTC_ByteToBcd2>
 80154f6:	0003      	movs	r3, r0
 80154f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	785b      	ldrb	r3, [r3, #1]
 80154fe:	0018      	movs	r0, r3
 8015500:	f000 f942 	bl	8015788 <RTC_ByteToBcd2>
 8015504:	0003      	movs	r3, r0
 8015506:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8015508:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801550a:	68bb      	ldr	r3, [r7, #8]
 801550c:	789b      	ldrb	r3, [r3, #2]
 801550e:	0018      	movs	r0, r3
 8015510:	f000 f93a 	bl	8015788 <RTC_ByteToBcd2>
 8015514:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8015516:	0022      	movs	r2, r4
 8015518:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801551a:	68bb      	ldr	r3, [r7, #8]
 801551c:	781b      	ldrb	r3, [r3, #0]
 801551e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8015520:	4313      	orrs	r3, r2
 8015522:	617b      	str	r3, [r7, #20]
 8015524:	e00e      	b.n	8015544 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8015526:	68bb      	ldr	r3, [r7, #8]
 8015528:	78db      	ldrb	r3, [r3, #3]
 801552a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	785b      	ldrb	r3, [r3, #1]
 8015530:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8015532:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8015534:	68ba      	ldr	r2, [r7, #8]
 8015536:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8015538:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801553a:	68bb      	ldr	r3, [r7, #8]
 801553c:	781b      	ldrb	r3, [r3, #0]
 801553e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8015540:	4313      	orrs	r3, r2
 8015542:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	22ca      	movs	r2, #202	@ 0xca
 801554a:	625a      	str	r2, [r3, #36]	@ 0x24
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	2253      	movs	r2, #83	@ 0x53
 8015552:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8015554:	2513      	movs	r5, #19
 8015556:	197c      	adds	r4, r7, r5
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	0018      	movs	r0, r3
 801555c:	f000 f8a6 	bl	80156ac <RTC_EnterInitMode>
 8015560:	0003      	movs	r3, r0
 8015562:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8015564:	0028      	movs	r0, r5
 8015566:	183b      	adds	r3, r7, r0
 8015568:	781b      	ldrb	r3, [r3, #0]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d10c      	bne.n	8015588 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	697a      	ldr	r2, [r7, #20]
 8015574:	4910      	ldr	r1, [pc, #64]	@ (80155b8 <HAL_RTC_SetDate+0x124>)
 8015576:	400a      	ands	r2, r1
 8015578:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801557a:	183c      	adds	r4, r7, r0
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	0018      	movs	r0, r3
 8015580:	f000 f8d8 	bl	8015734 <RTC_ExitInitMode>
 8015584:	0003      	movs	r3, r0
 8015586:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8015588:	2313      	movs	r3, #19
 801558a:	18fb      	adds	r3, r7, r3
 801558c:	781b      	ldrb	r3, [r3, #0]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d103      	bne.n	801559a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	2221      	movs	r2, #33	@ 0x21
 8015596:	2101      	movs	r1, #1
 8015598:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	22ff      	movs	r2, #255	@ 0xff
 80155a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	2220      	movs	r2, #32
 80155a6:	2100      	movs	r1, #0
 80155a8:	5499      	strb	r1, [r3, r2]

  return status;
 80155aa:	2313      	movs	r3, #19
 80155ac:	18fb      	adds	r3, r7, r3
 80155ae:	781b      	ldrb	r3, [r3, #0]
}
 80155b0:	0018      	movs	r0, r3
 80155b2:	46bd      	mov	sp, r7
 80155b4:	b006      	add	sp, #24
 80155b6:	bdb0      	pop	{r4, r5, r7, pc}
 80155b8:	00ffff3f 	.word	0x00ffff3f

080155bc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b086      	sub	sp, #24
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	60f8      	str	r0, [r7, #12]
 80155c4:	60b9      	str	r1, [r7, #8]
 80155c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80155c8:	2300      	movs	r3, #0
 80155ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	685b      	ldr	r3, [r3, #4]
 80155d2:	4a21      	ldr	r2, [pc, #132]	@ (8015658 <HAL_RTC_GetDate+0x9c>)
 80155d4:	4013      	ands	r3, r2
 80155d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	0c1b      	lsrs	r3, r3, #16
 80155dc:	b2da      	uxtb	r2, r3
 80155de:	68bb      	ldr	r3, [r7, #8]
 80155e0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	0a1b      	lsrs	r3, r3, #8
 80155e6:	b2db      	uxtb	r3, r3
 80155e8:	221f      	movs	r2, #31
 80155ea:	4013      	ands	r3, r2
 80155ec:	b2da      	uxtb	r2, r3
 80155ee:	68bb      	ldr	r3, [r7, #8]
 80155f0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80155f2:	697b      	ldr	r3, [r7, #20]
 80155f4:	b2db      	uxtb	r3, r3
 80155f6:	223f      	movs	r2, #63	@ 0x3f
 80155f8:	4013      	ands	r3, r2
 80155fa:	b2da      	uxtb	r2, r3
 80155fc:	68bb      	ldr	r3, [r7, #8]
 80155fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8015600:	697b      	ldr	r3, [r7, #20]
 8015602:	0b5b      	lsrs	r3, r3, #13
 8015604:	b2db      	uxtb	r3, r3
 8015606:	2207      	movs	r2, #7
 8015608:	4013      	ands	r3, r2
 801560a:	b2da      	uxtb	r2, r3
 801560c:	68bb      	ldr	r3, [r7, #8]
 801560e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d11a      	bne.n	801564c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8015616:	68bb      	ldr	r3, [r7, #8]
 8015618:	78db      	ldrb	r3, [r3, #3]
 801561a:	0018      	movs	r0, r3
 801561c:	f000 f8d5 	bl	80157ca <RTC_Bcd2ToByte>
 8015620:	0003      	movs	r3, r0
 8015622:	001a      	movs	r2, r3
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8015628:	68bb      	ldr	r3, [r7, #8]
 801562a:	785b      	ldrb	r3, [r3, #1]
 801562c:	0018      	movs	r0, r3
 801562e:	f000 f8cc 	bl	80157ca <RTC_Bcd2ToByte>
 8015632:	0003      	movs	r3, r0
 8015634:	001a      	movs	r2, r3
 8015636:	68bb      	ldr	r3, [r7, #8]
 8015638:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801563a:	68bb      	ldr	r3, [r7, #8]
 801563c:	789b      	ldrb	r3, [r3, #2]
 801563e:	0018      	movs	r0, r3
 8015640:	f000 f8c3 	bl	80157ca <RTC_Bcd2ToByte>
 8015644:	0003      	movs	r3, r0
 8015646:	001a      	movs	r2, r3
 8015648:	68bb      	ldr	r3, [r7, #8]
 801564a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801564c:	2300      	movs	r3, #0
}
 801564e:	0018      	movs	r0, r3
 8015650:	46bd      	mov	sp, r7
 8015652:	b006      	add	sp, #24
 8015654:	bd80      	pop	{r7, pc}
 8015656:	46c0      	nop			@ (mov r8, r8)
 8015658:	00ffff3f 	.word	0x00ffff3f

0801565c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b084      	sub	sp, #16
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015664:	2300      	movs	r3, #0
 8015666:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	4a0e      	ldr	r2, [pc, #56]	@ (80156a8 <HAL_RTC_WaitForSynchro+0x4c>)
 801566e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015670:	f7f8 fd0e 	bl	800e090 <HAL_GetTick>
 8015674:	0003      	movs	r3, r0
 8015676:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8015678:	e00a      	b.n	8015690 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801567a:	f7f8 fd09 	bl	800e090 <HAL_GetTick>
 801567e:	0002      	movs	r2, r0
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	1ad2      	subs	r2, r2, r3
 8015684:	23fa      	movs	r3, #250	@ 0xfa
 8015686:	009b      	lsls	r3, r3, #2
 8015688:	429a      	cmp	r2, r3
 801568a:	d901      	bls.n	8015690 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801568c:	2303      	movs	r3, #3
 801568e:	e006      	b.n	801569e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	68db      	ldr	r3, [r3, #12]
 8015696:	2220      	movs	r2, #32
 8015698:	4013      	ands	r3, r2
 801569a:	d0ee      	beq.n	801567a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801569c:	2300      	movs	r3, #0
}
 801569e:	0018      	movs	r0, r3
 80156a0:	46bd      	mov	sp, r7
 80156a2:	b004      	add	sp, #16
 80156a4:	bd80      	pop	{r7, pc}
 80156a6:	46c0      	nop			@ (mov r8, r8)
 80156a8:	0001ff5f 	.word	0x0001ff5f

080156ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b084      	sub	sp, #16
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80156b4:	2300      	movs	r3, #0
 80156b6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80156b8:	230f      	movs	r3, #15
 80156ba:	18fb      	adds	r3, r7, r3
 80156bc:	2200      	movs	r2, #0
 80156be:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	68db      	ldr	r3, [r3, #12]
 80156c6:	2240      	movs	r2, #64	@ 0x40
 80156c8:	4013      	ands	r3, r2
 80156ca:	d12c      	bne.n	8015726 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	68da      	ldr	r2, [r3, #12]
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	2180      	movs	r1, #128	@ 0x80
 80156d8:	430a      	orrs	r2, r1
 80156da:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80156dc:	f7f8 fcd8 	bl	800e090 <HAL_GetTick>
 80156e0:	0003      	movs	r3, r0
 80156e2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80156e4:	e014      	b.n	8015710 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80156e6:	f7f8 fcd3 	bl	800e090 <HAL_GetTick>
 80156ea:	0002      	movs	r2, r0
 80156ec:	68bb      	ldr	r3, [r7, #8]
 80156ee:	1ad2      	subs	r2, r2, r3
 80156f0:	200f      	movs	r0, #15
 80156f2:	183b      	adds	r3, r7, r0
 80156f4:	1839      	adds	r1, r7, r0
 80156f6:	7809      	ldrb	r1, [r1, #0]
 80156f8:	7019      	strb	r1, [r3, #0]
 80156fa:	23fa      	movs	r3, #250	@ 0xfa
 80156fc:	009b      	lsls	r3, r3, #2
 80156fe:	429a      	cmp	r2, r3
 8015700:	d906      	bls.n	8015710 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	2221      	movs	r2, #33	@ 0x21
 8015706:	2104      	movs	r1, #4
 8015708:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801570a:	183b      	adds	r3, r7, r0
 801570c:	2201      	movs	r2, #1
 801570e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	68db      	ldr	r3, [r3, #12]
 8015716:	2240      	movs	r2, #64	@ 0x40
 8015718:	4013      	ands	r3, r2
 801571a:	d104      	bne.n	8015726 <RTC_EnterInitMode+0x7a>
 801571c:	230f      	movs	r3, #15
 801571e:	18fb      	adds	r3, r7, r3
 8015720:	781b      	ldrb	r3, [r3, #0]
 8015722:	2b01      	cmp	r3, #1
 8015724:	d1df      	bne.n	80156e6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8015726:	230f      	movs	r3, #15
 8015728:	18fb      	adds	r3, r7, r3
 801572a:	781b      	ldrb	r3, [r3, #0]
}
 801572c:	0018      	movs	r0, r3
 801572e:	46bd      	mov	sp, r7
 8015730:	b004      	add	sp, #16
 8015732:	bd80      	pop	{r7, pc}

08015734 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8015734:	b590      	push	{r4, r7, lr}
 8015736:	b085      	sub	sp, #20
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801573c:	240f      	movs	r4, #15
 801573e:	193b      	adds	r3, r7, r4
 8015740:	2200      	movs	r2, #0
 8015742:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	68da      	ldr	r2, [r3, #12]
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	2180      	movs	r1, #128	@ 0x80
 8015750:	438a      	bics	r2, r1
 8015752:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	689b      	ldr	r3, [r3, #8]
 801575a:	2220      	movs	r2, #32
 801575c:	4013      	ands	r3, r2
 801575e:	d10c      	bne.n	801577a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	0018      	movs	r0, r3
 8015764:	f7ff ff7a 	bl	801565c <HAL_RTC_WaitForSynchro>
 8015768:	1e03      	subs	r3, r0, #0
 801576a:	d006      	beq.n	801577a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	2221      	movs	r2, #33	@ 0x21
 8015770:	2104      	movs	r1, #4
 8015772:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8015774:	193b      	adds	r3, r7, r4
 8015776:	2201      	movs	r2, #1
 8015778:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801577a:	230f      	movs	r3, #15
 801577c:	18fb      	adds	r3, r7, r3
 801577e:	781b      	ldrb	r3, [r3, #0]
}
 8015780:	0018      	movs	r0, r3
 8015782:	46bd      	mov	sp, r7
 8015784:	b005      	add	sp, #20
 8015786:	bd90      	pop	{r4, r7, pc}

08015788 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b084      	sub	sp, #16
 801578c:	af00      	add	r7, sp, #0
 801578e:	0002      	movs	r2, r0
 8015790:	1dfb      	adds	r3, r7, #7
 8015792:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8015794:	2300      	movs	r3, #0
 8015796:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8015798:	e007      	b.n	80157aa <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	3301      	adds	r3, #1
 801579e:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80157a0:	1dfb      	adds	r3, r7, #7
 80157a2:	1dfa      	adds	r2, r7, #7
 80157a4:	7812      	ldrb	r2, [r2, #0]
 80157a6:	3a0a      	subs	r2, #10
 80157a8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80157aa:	1dfb      	adds	r3, r7, #7
 80157ac:	781b      	ldrb	r3, [r3, #0]
 80157ae:	2b09      	cmp	r3, #9
 80157b0:	d8f3      	bhi.n	801579a <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	b2db      	uxtb	r3, r3
 80157b6:	011b      	lsls	r3, r3, #4
 80157b8:	b2da      	uxtb	r2, r3
 80157ba:	1dfb      	adds	r3, r7, #7
 80157bc:	781b      	ldrb	r3, [r3, #0]
 80157be:	4313      	orrs	r3, r2
 80157c0:	b2db      	uxtb	r3, r3
}
 80157c2:	0018      	movs	r0, r3
 80157c4:	46bd      	mov	sp, r7
 80157c6:	b004      	add	sp, #16
 80157c8:	bd80      	pop	{r7, pc}

080157ca <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80157ca:	b580      	push	{r7, lr}
 80157cc:	b084      	sub	sp, #16
 80157ce:	af00      	add	r7, sp, #0
 80157d0:	0002      	movs	r2, r0
 80157d2:	1dfb      	adds	r3, r7, #7
 80157d4:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80157d6:	2300      	movs	r3, #0
 80157d8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80157da:	1dfb      	adds	r3, r7, #7
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	091b      	lsrs	r3, r3, #4
 80157e0:	b2db      	uxtb	r3, r3
 80157e2:	001a      	movs	r2, r3
 80157e4:	0013      	movs	r3, r2
 80157e6:	009b      	lsls	r3, r3, #2
 80157e8:	189b      	adds	r3, r3, r2
 80157ea:	005b      	lsls	r3, r3, #1
 80157ec:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	b2da      	uxtb	r2, r3
 80157f2:	1dfb      	adds	r3, r7, #7
 80157f4:	781b      	ldrb	r3, [r3, #0]
 80157f6:	210f      	movs	r1, #15
 80157f8:	400b      	ands	r3, r1
 80157fa:	b2db      	uxtb	r3, r3
 80157fc:	18d3      	adds	r3, r2, r3
 80157fe:	b2db      	uxtb	r3, r3
}
 8015800:	0018      	movs	r0, r3
 8015802:	46bd      	mov	sp, r7
 8015804:	b004      	add	sp, #16
 8015806:	bd80      	pop	{r7, pc}

08015808 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b086      	sub	sp, #24
 801580c:	af00      	add	r7, sp, #0
 801580e:	60f8      	str	r0, [r7, #12]
 8015810:	60b9      	str	r1, [r7, #8]
 8015812:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8015814:	4b64      	ldr	r3, [pc, #400]	@ (80159a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	22fa      	movs	r2, #250	@ 0xfa
 801581a:	01d1      	lsls	r1, r2, #7
 801581c:	0018      	movs	r0, r3
 801581e:	f7ea fcc1 	bl	80001a4 <__udivsi3>
 8015822:	0003      	movs	r3, r0
 8015824:	001a      	movs	r2, r3
 8015826:	0013      	movs	r3, r2
 8015828:	015b      	lsls	r3, r3, #5
 801582a:	1a9b      	subs	r3, r3, r2
 801582c:	009b      	lsls	r3, r3, #2
 801582e:	189b      	adds	r3, r3, r2
 8015830:	00db      	lsls	r3, r3, #3
 8015832:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	2220      	movs	r2, #32
 8015838:	5c9b      	ldrb	r3, [r3, r2]
 801583a:	2b01      	cmp	r3, #1
 801583c:	d101      	bne.n	8015842 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801583e:	2302      	movs	r3, #2
 8015840:	e0ad      	b.n	801599e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	2220      	movs	r2, #32
 8015846:	2101      	movs	r1, #1
 8015848:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	2221      	movs	r2, #33	@ 0x21
 801584e:	2102      	movs	r1, #2
 8015850:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	22ca      	movs	r2, #202	@ 0xca
 8015858:	625a      	str	r2, [r3, #36]	@ 0x24
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	2253      	movs	r2, #83	@ 0x53
 8015860:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	689a      	ldr	r2, [r3, #8]
 8015868:	2380      	movs	r3, #128	@ 0x80
 801586a:	00db      	lsls	r3, r3, #3
 801586c:	4013      	ands	r3, r2
 801586e:	d019      	beq.n	80158a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	3b01      	subs	r3, #1
 8015874:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8015876:	697b      	ldr	r3, [r7, #20]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d10d      	bne.n	8015898 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	22ff      	movs	r2, #255	@ 0xff
 8015882:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	2221      	movs	r2, #33	@ 0x21
 8015888:	2103      	movs	r1, #3
 801588a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	2220      	movs	r2, #32
 8015890:	2100      	movs	r1, #0
 8015892:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8015894:	2303      	movs	r3, #3
 8015896:	e082      	b.n	801599e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8015898:	68fb      	ldr	r3, [r7, #12]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	68db      	ldr	r3, [r3, #12]
 801589e:	2204      	movs	r2, #4
 80158a0:	4013      	ands	r3, r2
 80158a2:	d1e5      	bne.n	8015870 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	689a      	ldr	r2, [r3, #8]
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	493f      	ldr	r1, [pc, #252]	@ (80159ac <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80158b0:	400a      	ands	r2, r1
 80158b2:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	68db      	ldr	r3, [r3, #12]
 80158ba:	22ff      	movs	r2, #255	@ 0xff
 80158bc:	401a      	ands	r2, r3
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	493b      	ldr	r1, [pc, #236]	@ (80159b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80158c4:	430a      	orrs	r2, r1
 80158c6:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80158c8:	4b37      	ldr	r3, [pc, #220]	@ (80159a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	22fa      	movs	r2, #250	@ 0xfa
 80158ce:	01d1      	lsls	r1, r2, #7
 80158d0:	0018      	movs	r0, r3
 80158d2:	f7ea fc67 	bl	80001a4 <__udivsi3>
 80158d6:	0003      	movs	r3, r0
 80158d8:	001a      	movs	r2, r3
 80158da:	0013      	movs	r3, r2
 80158dc:	015b      	lsls	r3, r3, #5
 80158de:	1a9b      	subs	r3, r3, r2
 80158e0:	009b      	lsls	r3, r3, #2
 80158e2:	189b      	adds	r3, r3, r2
 80158e4:	00db      	lsls	r3, r3, #3
 80158e6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80158e8:	697b      	ldr	r3, [r7, #20]
 80158ea:	3b01      	subs	r3, #1
 80158ec:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80158ee:	697b      	ldr	r3, [r7, #20]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d10d      	bne.n	8015910 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	22ff      	movs	r2, #255	@ 0xff
 80158fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	2221      	movs	r2, #33	@ 0x21
 8015900:	2103      	movs	r1, #3
 8015902:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	2220      	movs	r2, #32
 8015908:	2100      	movs	r1, #0
 801590a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801590c:	2303      	movs	r3, #3
 801590e:	e046      	b.n	801599e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	68db      	ldr	r3, [r3, #12]
 8015916:	2204      	movs	r2, #4
 8015918:	4013      	ands	r3, r2
 801591a:	d0e5      	beq.n	80158e8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	689a      	ldr	r2, [r3, #8]
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	2107      	movs	r1, #7
 8015928:	438a      	bics	r2, r1
 801592a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	6899      	ldr	r1, [r3, #8]
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	687a      	ldr	r2, [r7, #4]
 8015938:	430a      	orrs	r2, r1
 801593a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	68ba      	ldr	r2, [r7, #8]
 8015942:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8015944:	4b1b      	ldr	r3, [pc, #108]	@ (80159b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015946:	681a      	ldr	r2, [r3, #0]
 8015948:	4b1a      	ldr	r3, [pc, #104]	@ (80159b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801594a:	2180      	movs	r1, #128	@ 0x80
 801594c:	0349      	lsls	r1, r1, #13
 801594e:	430a      	orrs	r2, r1
 8015950:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8015952:	4b18      	ldr	r3, [pc, #96]	@ (80159b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015954:	689a      	ldr	r2, [r3, #8]
 8015956:	4b17      	ldr	r3, [pc, #92]	@ (80159b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015958:	2180      	movs	r1, #128	@ 0x80
 801595a:	0349      	lsls	r1, r1, #13
 801595c:	430a      	orrs	r2, r1
 801595e:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	689a      	ldr	r2, [r3, #8]
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	2180      	movs	r1, #128	@ 0x80
 801596c:	01c9      	lsls	r1, r1, #7
 801596e:	430a      	orrs	r2, r1
 8015970:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	689a      	ldr	r2, [r3, #8]
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	2180      	movs	r1, #128	@ 0x80
 801597e:	00c9      	lsls	r1, r1, #3
 8015980:	430a      	orrs	r2, r1
 8015982:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	22ff      	movs	r2, #255	@ 0xff
 801598a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	2221      	movs	r2, #33	@ 0x21
 8015990:	2101      	movs	r1, #1
 8015992:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	2220      	movs	r2, #32
 8015998:	2100      	movs	r1, #0
 801599a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801599c:	2300      	movs	r3, #0
}
 801599e:	0018      	movs	r0, r3
 80159a0:	46bd      	mov	sp, r7
 80159a2:	b006      	add	sp, #24
 80159a4:	bd80      	pop	{r7, pc}
 80159a6:	46c0      	nop			@ (mov r8, r8)
 80159a8:	200000c8 	.word	0x200000c8
 80159ac:	fffffbff 	.word	0xfffffbff
 80159b0:	fffffb7f 	.word	0xfffffb7f
 80159b4:	40010400 	.word	0x40010400

080159b8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	b084      	sub	sp, #16
 80159bc:	af00      	add	r7, sp, #0
 80159be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80159c0:	2300      	movs	r3, #0
 80159c2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	2220      	movs	r2, #32
 80159c8:	5c9b      	ldrb	r3, [r3, r2]
 80159ca:	2b01      	cmp	r3, #1
 80159cc:	d101      	bne.n	80159d2 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 80159ce:	2302      	movs	r3, #2
 80159d0:	e04e      	b.n	8015a70 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	2220      	movs	r2, #32
 80159d6:	2101      	movs	r1, #1
 80159d8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	2221      	movs	r2, #33	@ 0x21
 80159de:	2102      	movs	r1, #2
 80159e0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	22ca      	movs	r2, #202	@ 0xca
 80159e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	2253      	movs	r2, #83	@ 0x53
 80159f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	689a      	ldr	r2, [r3, #8]
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	491e      	ldr	r1, [pc, #120]	@ (8015a78 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 80159fe:	400a      	ands	r2, r1
 8015a00:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	689a      	ldr	r2, [r3, #8]
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	491b      	ldr	r1, [pc, #108]	@ (8015a7c <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8015a0e:	400a      	ands	r2, r1
 8015a10:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015a12:	f7f8 fb3d 	bl	800e090 <HAL_GetTick>
 8015a16:	0003      	movs	r3, r0
 8015a18:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015a1a:	e016      	b.n	8015a4a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015a1c:	f7f8 fb38 	bl	800e090 <HAL_GetTick>
 8015a20:	0002      	movs	r2, r0
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	1ad2      	subs	r2, r2, r3
 8015a26:	23fa      	movs	r3, #250	@ 0xfa
 8015a28:	009b      	lsls	r3, r3, #2
 8015a2a:	429a      	cmp	r2, r3
 8015a2c:	d90d      	bls.n	8015a4a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	22ff      	movs	r2, #255	@ 0xff
 8015a34:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	2221      	movs	r2, #33	@ 0x21
 8015a3a:	2103      	movs	r1, #3
 8015a3c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	2220      	movs	r2, #32
 8015a42:	2100      	movs	r1, #0
 8015a44:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8015a46:	2303      	movs	r3, #3
 8015a48:	e012      	b.n	8015a70 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	68db      	ldr	r3, [r3, #12]
 8015a50:	2204      	movs	r2, #4
 8015a52:	4013      	ands	r3, r2
 8015a54:	d0e2      	beq.n	8015a1c <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	22ff      	movs	r2, #255	@ 0xff
 8015a5c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	2221      	movs	r2, #33	@ 0x21
 8015a62:	2101      	movs	r1, #1
 8015a64:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	2220      	movs	r2, #32
 8015a6a:	2100      	movs	r1, #0
 8015a6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015a6e:	2300      	movs	r3, #0
}
 8015a70:	0018      	movs	r0, r3
 8015a72:	46bd      	mov	sp, r7
 8015a74:	b004      	add	sp, #16
 8015a76:	bd80      	pop	{r7, pc}
 8015a78:	fffffbff 	.word	0xfffffbff
 8015a7c:	ffffbfff 	.word	0xffffbfff

08015a80 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b082      	sub	sp, #8
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8015a88:	4b13      	ldr	r3, [pc, #76]	@ (8015ad8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8015a8a:	2280      	movs	r2, #128	@ 0x80
 8015a8c:	0352      	lsls	r2, r2, #13
 8015a8e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	689a      	ldr	r2, [r3, #8]
 8015a96:	2380      	movs	r3, #128	@ 0x80
 8015a98:	01db      	lsls	r3, r3, #7
 8015a9a:	4013      	ands	r3, r2
 8015a9c:	d014      	beq.n	8015ac8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	68da      	ldr	r2, [r3, #12]
 8015aa4:	2380      	movs	r3, #128	@ 0x80
 8015aa6:	00db      	lsls	r3, r3, #3
 8015aa8:	4013      	ands	r3, r2
 8015aaa:	d00d      	beq.n	8015ac8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	68db      	ldr	r3, [r3, #12]
 8015ab2:	22ff      	movs	r2, #255	@ 0xff
 8015ab4:	401a      	ands	r2, r3
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	4908      	ldr	r1, [pc, #32]	@ (8015adc <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8015abc:	430a      	orrs	r2, r1
 8015abe:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	0018      	movs	r0, r3
 8015ac4:	f000 f80c 	bl	8015ae0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	2221      	movs	r2, #33	@ 0x21
 8015acc:	2101      	movs	r1, #1
 8015ace:	5499      	strb	r1, [r3, r2]
}
 8015ad0:	46c0      	nop			@ (mov r8, r8)
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	b002      	add	sp, #8
 8015ad6:	bd80      	pop	{r7, pc}
 8015ad8:	40010400 	.word	0x40010400
 8015adc:	fffffb7f 	.word	0xfffffb7f

08015ae0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b082      	sub	sp, #8
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8015ae8:	46c0      	nop			@ (mov r8, r8)
 8015aea:	46bd      	mov	sp, r7
 8015aec:	b002      	add	sp, #8
 8015aee:	bd80      	pop	{r7, pc}

08015af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015af0:	b580      	push	{r7, lr}
 8015af2:	b082      	sub	sp, #8
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d101      	bne.n	8015b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015afe:	2301      	movs	r3, #1
 8015b00:	e032      	b.n	8015b68 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	2239      	movs	r2, #57	@ 0x39
 8015b06:	5c9b      	ldrb	r3, [r3, r2]
 8015b08:	b2db      	uxtb	r3, r3
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d107      	bne.n	8015b1e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	2238      	movs	r2, #56	@ 0x38
 8015b12:	2100      	movs	r1, #0
 8015b14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	0018      	movs	r0, r3
 8015b1a:	f7f7 fc73 	bl	800d404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	2239      	movs	r2, #57	@ 0x39
 8015b22:	2102      	movs	r1, #2
 8015b24:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	681a      	ldr	r2, [r3, #0]
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	3304      	adds	r3, #4
 8015b2e:	0019      	movs	r1, r3
 8015b30:	0010      	movs	r0, r2
 8015b32:	f000 fa1d 	bl	8015f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	223e      	movs	r2, #62	@ 0x3e
 8015b3a:	2101      	movs	r1, #1
 8015b3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	223a      	movs	r2, #58	@ 0x3a
 8015b42:	2101      	movs	r1, #1
 8015b44:	5499      	strb	r1, [r3, r2]
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	223b      	movs	r2, #59	@ 0x3b
 8015b4a:	2101      	movs	r1, #1
 8015b4c:	5499      	strb	r1, [r3, r2]
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	223c      	movs	r2, #60	@ 0x3c
 8015b52:	2101      	movs	r1, #1
 8015b54:	5499      	strb	r1, [r3, r2]
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	223d      	movs	r2, #61	@ 0x3d
 8015b5a:	2101      	movs	r1, #1
 8015b5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	2239      	movs	r2, #57	@ 0x39
 8015b62:	2101      	movs	r1, #1
 8015b64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015b66:	2300      	movs	r3, #0
}
 8015b68:	0018      	movs	r0, r3
 8015b6a:	46bd      	mov	sp, r7
 8015b6c:	b002      	add	sp, #8
 8015b6e:	bd80      	pop	{r7, pc}

08015b70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b084      	sub	sp, #16
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	2239      	movs	r2, #57	@ 0x39
 8015b7c:	5c9b      	ldrb	r3, [r3, r2]
 8015b7e:	b2db      	uxtb	r3, r3
 8015b80:	2b01      	cmp	r3, #1
 8015b82:	d001      	beq.n	8015b88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8015b84:	2301      	movs	r3, #1
 8015b86:	e033      	b.n	8015bf0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	2239      	movs	r2, #57	@ 0x39
 8015b8c:	2102      	movs	r1, #2
 8015b8e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	681a      	ldr	r2, [r3, #0]
 8015b94:	2380      	movs	r3, #128	@ 0x80
 8015b96:	05db      	lsls	r3, r3, #23
 8015b98:	429a      	cmp	r2, r3
 8015b9a:	d00e      	beq.n	8015bba <HAL_TIM_Base_Start+0x4a>
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	4a15      	ldr	r2, [pc, #84]	@ (8015bf8 <HAL_TIM_Base_Start+0x88>)
 8015ba2:	4293      	cmp	r3, r2
 8015ba4:	d009      	beq.n	8015bba <HAL_TIM_Base_Start+0x4a>
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	4a14      	ldr	r2, [pc, #80]	@ (8015bfc <HAL_TIM_Base_Start+0x8c>)
 8015bac:	4293      	cmp	r3, r2
 8015bae:	d004      	beq.n	8015bba <HAL_TIM_Base_Start+0x4a>
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	4a12      	ldr	r2, [pc, #72]	@ (8015c00 <HAL_TIM_Base_Start+0x90>)
 8015bb6:	4293      	cmp	r3, r2
 8015bb8:	d111      	bne.n	8015bde <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	689b      	ldr	r3, [r3, #8]
 8015bc0:	2207      	movs	r2, #7
 8015bc2:	4013      	ands	r3, r2
 8015bc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	2b06      	cmp	r3, #6
 8015bca:	d010      	beq.n	8015bee <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	681a      	ldr	r2, [r3, #0]
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	2101      	movs	r1, #1
 8015bd8:	430a      	orrs	r2, r1
 8015bda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015bdc:	e007      	b.n	8015bee <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	681a      	ldr	r2, [r3, #0]
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	2101      	movs	r1, #1
 8015bea:	430a      	orrs	r2, r1
 8015bec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015bee:	2300      	movs	r3, #0
}
 8015bf0:	0018      	movs	r0, r3
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	b004      	add	sp, #16
 8015bf6:	bd80      	pop	{r7, pc}
 8015bf8:	40000400 	.word	0x40000400
 8015bfc:	40010800 	.word	0x40010800
 8015c00:	40011400 	.word	0x40011400

08015c04 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b082      	sub	sp, #8
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	6a1b      	ldr	r3, [r3, #32]
 8015c12:	4a0a      	ldr	r2, [pc, #40]	@ (8015c3c <HAL_TIM_Base_Stop+0x38>)
 8015c14:	4013      	ands	r3, r2
 8015c16:	d107      	bne.n	8015c28 <HAL_TIM_Base_Stop+0x24>
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	681a      	ldr	r2, [r3, #0]
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	2101      	movs	r1, #1
 8015c24:	438a      	bics	r2, r1
 8015c26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	2239      	movs	r2, #57	@ 0x39
 8015c2c:	2101      	movs	r1, #1
 8015c2e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8015c30:	2300      	movs	r3, #0
}
 8015c32:	0018      	movs	r0, r3
 8015c34:	46bd      	mov	sp, r7
 8015c36:	b002      	add	sp, #8
 8015c38:	bd80      	pop	{r7, pc}
 8015c3a:	46c0      	nop			@ (mov r8, r8)
 8015c3c:	00001111 	.word	0x00001111

08015c40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b082      	sub	sp, #8
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d101      	bne.n	8015c52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015c4e:	2301      	movs	r3, #1
 8015c50:	e032      	b.n	8015cb8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	2239      	movs	r2, #57	@ 0x39
 8015c56:	5c9b      	ldrb	r3, [r3, r2]
 8015c58:	b2db      	uxtb	r3, r3
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d107      	bne.n	8015c6e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	2238      	movs	r2, #56	@ 0x38
 8015c62:	2100      	movs	r1, #0
 8015c64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	0018      	movs	r0, r3
 8015c6a:	f7f7 fba7 	bl	800d3bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	2239      	movs	r2, #57	@ 0x39
 8015c72:	2102      	movs	r1, #2
 8015c74:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	681a      	ldr	r2, [r3, #0]
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	3304      	adds	r3, #4
 8015c7e:	0019      	movs	r1, r3
 8015c80:	0010      	movs	r0, r2
 8015c82:	f000 f975 	bl	8015f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	223e      	movs	r2, #62	@ 0x3e
 8015c8a:	2101      	movs	r1, #1
 8015c8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	223a      	movs	r2, #58	@ 0x3a
 8015c92:	2101      	movs	r1, #1
 8015c94:	5499      	strb	r1, [r3, r2]
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	223b      	movs	r2, #59	@ 0x3b
 8015c9a:	2101      	movs	r1, #1
 8015c9c:	5499      	strb	r1, [r3, r2]
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	223c      	movs	r2, #60	@ 0x3c
 8015ca2:	2101      	movs	r1, #1
 8015ca4:	5499      	strb	r1, [r3, r2]
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	223d      	movs	r2, #61	@ 0x3d
 8015caa:	2101      	movs	r1, #1
 8015cac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	2239      	movs	r2, #57	@ 0x39
 8015cb2:	2101      	movs	r1, #1
 8015cb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015cb6:	2300      	movs	r3, #0
}
 8015cb8:	0018      	movs	r0, r3
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	b002      	add	sp, #8
 8015cbe:	bd80      	pop	{r7, pc}

08015cc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b084      	sub	sp, #16
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
 8015cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015cca:	683b      	ldr	r3, [r7, #0]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d108      	bne.n	8015ce2 <HAL_TIM_PWM_Start+0x22>
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	223a      	movs	r2, #58	@ 0x3a
 8015cd4:	5c9b      	ldrb	r3, [r3, r2]
 8015cd6:	b2db      	uxtb	r3, r3
 8015cd8:	3b01      	subs	r3, #1
 8015cda:	1e5a      	subs	r2, r3, #1
 8015cdc:	4193      	sbcs	r3, r2
 8015cde:	b2db      	uxtb	r3, r3
 8015ce0:	e01f      	b.n	8015d22 <HAL_TIM_PWM_Start+0x62>
 8015ce2:	683b      	ldr	r3, [r7, #0]
 8015ce4:	2b04      	cmp	r3, #4
 8015ce6:	d108      	bne.n	8015cfa <HAL_TIM_PWM_Start+0x3a>
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	223b      	movs	r2, #59	@ 0x3b
 8015cec:	5c9b      	ldrb	r3, [r3, r2]
 8015cee:	b2db      	uxtb	r3, r3
 8015cf0:	3b01      	subs	r3, #1
 8015cf2:	1e5a      	subs	r2, r3, #1
 8015cf4:	4193      	sbcs	r3, r2
 8015cf6:	b2db      	uxtb	r3, r3
 8015cf8:	e013      	b.n	8015d22 <HAL_TIM_PWM_Start+0x62>
 8015cfa:	683b      	ldr	r3, [r7, #0]
 8015cfc:	2b08      	cmp	r3, #8
 8015cfe:	d108      	bne.n	8015d12 <HAL_TIM_PWM_Start+0x52>
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	223c      	movs	r2, #60	@ 0x3c
 8015d04:	5c9b      	ldrb	r3, [r3, r2]
 8015d06:	b2db      	uxtb	r3, r3
 8015d08:	3b01      	subs	r3, #1
 8015d0a:	1e5a      	subs	r2, r3, #1
 8015d0c:	4193      	sbcs	r3, r2
 8015d0e:	b2db      	uxtb	r3, r3
 8015d10:	e007      	b.n	8015d22 <HAL_TIM_PWM_Start+0x62>
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	223d      	movs	r2, #61	@ 0x3d
 8015d16:	5c9b      	ldrb	r3, [r3, r2]
 8015d18:	b2db      	uxtb	r3, r3
 8015d1a:	3b01      	subs	r3, #1
 8015d1c:	1e5a      	subs	r2, r3, #1
 8015d1e:	4193      	sbcs	r3, r2
 8015d20:	b2db      	uxtb	r3, r3
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d001      	beq.n	8015d2a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8015d26:	2301      	movs	r3, #1
 8015d28:	e052      	b.n	8015dd0 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8015d2a:	683b      	ldr	r3, [r7, #0]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d104      	bne.n	8015d3a <HAL_TIM_PWM_Start+0x7a>
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	223a      	movs	r2, #58	@ 0x3a
 8015d34:	2102      	movs	r1, #2
 8015d36:	5499      	strb	r1, [r3, r2]
 8015d38:	e013      	b.n	8015d62 <HAL_TIM_PWM_Start+0xa2>
 8015d3a:	683b      	ldr	r3, [r7, #0]
 8015d3c:	2b04      	cmp	r3, #4
 8015d3e:	d104      	bne.n	8015d4a <HAL_TIM_PWM_Start+0x8a>
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	223b      	movs	r2, #59	@ 0x3b
 8015d44:	2102      	movs	r1, #2
 8015d46:	5499      	strb	r1, [r3, r2]
 8015d48:	e00b      	b.n	8015d62 <HAL_TIM_PWM_Start+0xa2>
 8015d4a:	683b      	ldr	r3, [r7, #0]
 8015d4c:	2b08      	cmp	r3, #8
 8015d4e:	d104      	bne.n	8015d5a <HAL_TIM_PWM_Start+0x9a>
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	223c      	movs	r2, #60	@ 0x3c
 8015d54:	2102      	movs	r1, #2
 8015d56:	5499      	strb	r1, [r3, r2]
 8015d58:	e003      	b.n	8015d62 <HAL_TIM_PWM_Start+0xa2>
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	223d      	movs	r2, #61	@ 0x3d
 8015d5e:	2102      	movs	r1, #2
 8015d60:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	6839      	ldr	r1, [r7, #0]
 8015d68:	2201      	movs	r2, #1
 8015d6a:	0018      	movs	r0, r3
 8015d6c:	f000 fa62 	bl	8016234 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	681a      	ldr	r2, [r3, #0]
 8015d74:	2380      	movs	r3, #128	@ 0x80
 8015d76:	05db      	lsls	r3, r3, #23
 8015d78:	429a      	cmp	r2, r3
 8015d7a:	d00e      	beq.n	8015d9a <HAL_TIM_PWM_Start+0xda>
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	4a15      	ldr	r2, [pc, #84]	@ (8015dd8 <HAL_TIM_PWM_Start+0x118>)
 8015d82:	4293      	cmp	r3, r2
 8015d84:	d009      	beq.n	8015d9a <HAL_TIM_PWM_Start+0xda>
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	4a14      	ldr	r2, [pc, #80]	@ (8015ddc <HAL_TIM_PWM_Start+0x11c>)
 8015d8c:	4293      	cmp	r3, r2
 8015d8e:	d004      	beq.n	8015d9a <HAL_TIM_PWM_Start+0xda>
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	4a12      	ldr	r2, [pc, #72]	@ (8015de0 <HAL_TIM_PWM_Start+0x120>)
 8015d96:	4293      	cmp	r3, r2
 8015d98:	d111      	bne.n	8015dbe <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	689b      	ldr	r3, [r3, #8]
 8015da0:	2207      	movs	r2, #7
 8015da2:	4013      	ands	r3, r2
 8015da4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	2b06      	cmp	r3, #6
 8015daa:	d010      	beq.n	8015dce <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	681a      	ldr	r2, [r3, #0]
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	2101      	movs	r1, #1
 8015db8:	430a      	orrs	r2, r1
 8015dba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015dbc:	e007      	b.n	8015dce <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	681a      	ldr	r2, [r3, #0]
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	2101      	movs	r1, #1
 8015dca:	430a      	orrs	r2, r1
 8015dcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015dce:	2300      	movs	r3, #0
}
 8015dd0:	0018      	movs	r0, r3
 8015dd2:	46bd      	mov	sp, r7
 8015dd4:	b004      	add	sp, #16
 8015dd6:	bd80      	pop	{r7, pc}
 8015dd8:	40000400 	.word	0x40000400
 8015ddc:	40010800 	.word	0x40010800
 8015de0:	40011400 	.word	0x40011400

08015de4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b086      	sub	sp, #24
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	60f8      	str	r0, [r7, #12]
 8015dec:	60b9      	str	r1, [r7, #8]
 8015dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015df0:	2317      	movs	r3, #23
 8015df2:	18fb      	adds	r3, r7, r3
 8015df4:	2200      	movs	r2, #0
 8015df6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	2238      	movs	r2, #56	@ 0x38
 8015dfc:	5c9b      	ldrb	r3, [r3, r2]
 8015dfe:	2b01      	cmp	r3, #1
 8015e00:	d101      	bne.n	8015e06 <HAL_TIM_PWM_ConfigChannel+0x22>
 8015e02:	2302      	movs	r3, #2
 8015e04:	e0ad      	b.n	8015f62 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	2238      	movs	r2, #56	@ 0x38
 8015e0a:	2101      	movs	r1, #1
 8015e0c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	2b0c      	cmp	r3, #12
 8015e12:	d100      	bne.n	8015e16 <HAL_TIM_PWM_ConfigChannel+0x32>
 8015e14:	e076      	b.n	8015f04 <HAL_TIM_PWM_ConfigChannel+0x120>
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	2b0c      	cmp	r3, #12
 8015e1a:	d900      	bls.n	8015e1e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8015e1c:	e095      	b.n	8015f4a <HAL_TIM_PWM_ConfigChannel+0x166>
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	2b08      	cmp	r3, #8
 8015e22:	d04e      	beq.n	8015ec2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	2b08      	cmp	r3, #8
 8015e28:	d900      	bls.n	8015e2c <HAL_TIM_PWM_ConfigChannel+0x48>
 8015e2a:	e08e      	b.n	8015f4a <HAL_TIM_PWM_ConfigChannel+0x166>
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d003      	beq.n	8015e3a <HAL_TIM_PWM_ConfigChannel+0x56>
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	2b04      	cmp	r3, #4
 8015e36:	d021      	beq.n	8015e7c <HAL_TIM_PWM_ConfigChannel+0x98>
 8015e38:	e087      	b.n	8015f4a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	68ba      	ldr	r2, [r7, #8]
 8015e40:	0011      	movs	r1, r2
 8015e42:	0018      	movs	r0, r3
 8015e44:	f000 f8f2 	bl	801602c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	699a      	ldr	r2, [r3, #24]
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	2108      	movs	r1, #8
 8015e54:	430a      	orrs	r2, r1
 8015e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	699a      	ldr	r2, [r3, #24]
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	2104      	movs	r1, #4
 8015e64:	438a      	bics	r2, r1
 8015e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	6999      	ldr	r1, [r3, #24]
 8015e6e:	68bb      	ldr	r3, [r7, #8]
 8015e70:	68da      	ldr	r2, [r3, #12]
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	430a      	orrs	r2, r1
 8015e78:	619a      	str	r2, [r3, #24]
      break;
 8015e7a:	e06b      	b.n	8015f54 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	68ba      	ldr	r2, [r7, #8]
 8015e82:	0011      	movs	r1, r2
 8015e84:	0018      	movs	r0, r3
 8015e86:	f000 f90d 	bl	80160a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	699a      	ldr	r2, [r3, #24]
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	2180      	movs	r1, #128	@ 0x80
 8015e96:	0109      	lsls	r1, r1, #4
 8015e98:	430a      	orrs	r2, r1
 8015e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	699a      	ldr	r2, [r3, #24]
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	4931      	ldr	r1, [pc, #196]	@ (8015f6c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8015ea8:	400a      	ands	r2, r1
 8015eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	6999      	ldr	r1, [r3, #24]
 8015eb2:	68bb      	ldr	r3, [r7, #8]
 8015eb4:	68db      	ldr	r3, [r3, #12]
 8015eb6:	021a      	lsls	r2, r3, #8
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	430a      	orrs	r2, r1
 8015ebe:	619a      	str	r2, [r3, #24]
      break;
 8015ec0:	e048      	b.n	8015f54 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	68ba      	ldr	r2, [r7, #8]
 8015ec8:	0011      	movs	r1, r2
 8015eca:	0018      	movs	r0, r3
 8015ecc:	f000 f92c 	bl	8016128 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	69da      	ldr	r2, [r3, #28]
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	2108      	movs	r1, #8
 8015edc:	430a      	orrs	r2, r1
 8015ede:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	69da      	ldr	r2, [r3, #28]
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	2104      	movs	r1, #4
 8015eec:	438a      	bics	r2, r1
 8015eee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	69d9      	ldr	r1, [r3, #28]
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	68da      	ldr	r2, [r3, #12]
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	430a      	orrs	r2, r1
 8015f00:	61da      	str	r2, [r3, #28]
      break;
 8015f02:	e027      	b.n	8015f54 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	68ba      	ldr	r2, [r7, #8]
 8015f0a:	0011      	movs	r1, r2
 8015f0c:	0018      	movs	r0, r3
 8015f0e:	f000 f94b 	bl	80161a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	69da      	ldr	r2, [r3, #28]
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	2180      	movs	r1, #128	@ 0x80
 8015f1e:	0109      	lsls	r1, r1, #4
 8015f20:	430a      	orrs	r2, r1
 8015f22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	69da      	ldr	r2, [r3, #28]
 8015f2a:	68fb      	ldr	r3, [r7, #12]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	490f      	ldr	r1, [pc, #60]	@ (8015f6c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8015f30:	400a      	ands	r2, r1
 8015f32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	69d9      	ldr	r1, [r3, #28]
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	68db      	ldr	r3, [r3, #12]
 8015f3e:	021a      	lsls	r2, r3, #8
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	430a      	orrs	r2, r1
 8015f46:	61da      	str	r2, [r3, #28]
      break;
 8015f48:	e004      	b.n	8015f54 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8015f4a:	2317      	movs	r3, #23
 8015f4c:	18fb      	adds	r3, r7, r3
 8015f4e:	2201      	movs	r2, #1
 8015f50:	701a      	strb	r2, [r3, #0]
      break;
 8015f52:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	2238      	movs	r2, #56	@ 0x38
 8015f58:	2100      	movs	r1, #0
 8015f5a:	5499      	strb	r1, [r3, r2]

  return status;
 8015f5c:	2317      	movs	r3, #23
 8015f5e:	18fb      	adds	r3, r7, r3
 8015f60:	781b      	ldrb	r3, [r3, #0]
}
 8015f62:	0018      	movs	r0, r3
 8015f64:	46bd      	mov	sp, r7
 8015f66:	b006      	add	sp, #24
 8015f68:	bd80      	pop	{r7, pc}
 8015f6a:	46c0      	nop			@ (mov r8, r8)
 8015f6c:	fffffbff 	.word	0xfffffbff

08015f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b084      	sub	sp, #16
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
 8015f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015f80:	687a      	ldr	r2, [r7, #4]
 8015f82:	2380      	movs	r3, #128	@ 0x80
 8015f84:	05db      	lsls	r3, r3, #23
 8015f86:	429a      	cmp	r2, r3
 8015f88:	d00b      	beq.n	8015fa2 <TIM_Base_SetConfig+0x32>
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	4a23      	ldr	r2, [pc, #140]	@ (801601c <TIM_Base_SetConfig+0xac>)
 8015f8e:	4293      	cmp	r3, r2
 8015f90:	d007      	beq.n	8015fa2 <TIM_Base_SetConfig+0x32>
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	4a22      	ldr	r2, [pc, #136]	@ (8016020 <TIM_Base_SetConfig+0xb0>)
 8015f96:	4293      	cmp	r3, r2
 8015f98:	d003      	beq.n	8015fa2 <TIM_Base_SetConfig+0x32>
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	4a21      	ldr	r2, [pc, #132]	@ (8016024 <TIM_Base_SetConfig+0xb4>)
 8015f9e:	4293      	cmp	r3, r2
 8015fa0:	d108      	bne.n	8015fb4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	2270      	movs	r2, #112	@ 0x70
 8015fa6:	4393      	bics	r3, r2
 8015fa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015faa:	683b      	ldr	r3, [r7, #0]
 8015fac:	685b      	ldr	r3, [r3, #4]
 8015fae:	68fa      	ldr	r2, [r7, #12]
 8015fb0:	4313      	orrs	r3, r2
 8015fb2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015fb4:	687a      	ldr	r2, [r7, #4]
 8015fb6:	2380      	movs	r3, #128	@ 0x80
 8015fb8:	05db      	lsls	r3, r3, #23
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	d00b      	beq.n	8015fd6 <TIM_Base_SetConfig+0x66>
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	4a16      	ldr	r2, [pc, #88]	@ (801601c <TIM_Base_SetConfig+0xac>)
 8015fc2:	4293      	cmp	r3, r2
 8015fc4:	d007      	beq.n	8015fd6 <TIM_Base_SetConfig+0x66>
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	4a15      	ldr	r2, [pc, #84]	@ (8016020 <TIM_Base_SetConfig+0xb0>)
 8015fca:	4293      	cmp	r3, r2
 8015fcc:	d003      	beq.n	8015fd6 <TIM_Base_SetConfig+0x66>
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	4a14      	ldr	r2, [pc, #80]	@ (8016024 <TIM_Base_SetConfig+0xb4>)
 8015fd2:	4293      	cmp	r3, r2
 8015fd4:	d108      	bne.n	8015fe8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	4a13      	ldr	r2, [pc, #76]	@ (8016028 <TIM_Base_SetConfig+0xb8>)
 8015fda:	4013      	ands	r3, r2
 8015fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015fde:	683b      	ldr	r3, [r7, #0]
 8015fe0:	68db      	ldr	r3, [r3, #12]
 8015fe2:	68fa      	ldr	r2, [r7, #12]
 8015fe4:	4313      	orrs	r3, r2
 8015fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	2280      	movs	r2, #128	@ 0x80
 8015fec:	4393      	bics	r3, r2
 8015fee:	001a      	movs	r2, r3
 8015ff0:	683b      	ldr	r3, [r7, #0]
 8015ff2:	691b      	ldr	r3, [r3, #16]
 8015ff4:	4313      	orrs	r3, r2
 8015ff6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	68fa      	ldr	r2, [r7, #12]
 8015ffc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015ffe:	683b      	ldr	r3, [r7, #0]
 8016000:	689a      	ldr	r2, [r3, #8]
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016006:	683b      	ldr	r3, [r7, #0]
 8016008:	681a      	ldr	r2, [r3, #0]
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	2201      	movs	r2, #1
 8016012:	615a      	str	r2, [r3, #20]
}
 8016014:	46c0      	nop			@ (mov r8, r8)
 8016016:	46bd      	mov	sp, r7
 8016018:	b004      	add	sp, #16
 801601a:	bd80      	pop	{r7, pc}
 801601c:	40000400 	.word	0x40000400
 8016020:	40010800 	.word	0x40010800
 8016024:	40011400 	.word	0x40011400
 8016028:	fffffcff 	.word	0xfffffcff

0801602c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b086      	sub	sp, #24
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
 8016034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	6a1b      	ldr	r3, [r3, #32]
 801603a:	2201      	movs	r2, #1
 801603c:	4393      	bics	r3, r2
 801603e:	001a      	movs	r2, r3
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	6a1b      	ldr	r3, [r3, #32]
 8016048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	685b      	ldr	r3, [r3, #4]
 801604e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	699b      	ldr	r3, [r3, #24]
 8016054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	2270      	movs	r2, #112	@ 0x70
 801605a:	4393      	bics	r3, r2
 801605c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	2203      	movs	r2, #3
 8016062:	4393      	bics	r3, r2
 8016064:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016066:	683b      	ldr	r3, [r7, #0]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	68fa      	ldr	r2, [r7, #12]
 801606c:	4313      	orrs	r3, r2
 801606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016070:	697b      	ldr	r3, [r7, #20]
 8016072:	2202      	movs	r2, #2
 8016074:	4393      	bics	r3, r2
 8016076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016078:	683b      	ldr	r3, [r7, #0]
 801607a:	689b      	ldr	r3, [r3, #8]
 801607c:	697a      	ldr	r2, [r7, #20]
 801607e:	4313      	orrs	r3, r2
 8016080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	693a      	ldr	r2, [r7, #16]
 8016086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	68fa      	ldr	r2, [r7, #12]
 801608c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	685a      	ldr	r2, [r3, #4]
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	697a      	ldr	r2, [r7, #20]
 801609a:	621a      	str	r2, [r3, #32]
}
 801609c:	46c0      	nop			@ (mov r8, r8)
 801609e:	46bd      	mov	sp, r7
 80160a0:	b006      	add	sp, #24
 80160a2:	bd80      	pop	{r7, pc}

080160a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b086      	sub	sp, #24
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
 80160ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	6a1b      	ldr	r3, [r3, #32]
 80160b2:	2210      	movs	r2, #16
 80160b4:	4393      	bics	r3, r2
 80160b6:	001a      	movs	r2, r3
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	6a1b      	ldr	r3, [r3, #32]
 80160c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	685b      	ldr	r3, [r3, #4]
 80160c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	699b      	ldr	r3, [r3, #24]
 80160cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	4a13      	ldr	r2, [pc, #76]	@ (8016120 <TIM_OC2_SetConfig+0x7c>)
 80160d2:	4013      	ands	r3, r2
 80160d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	4a12      	ldr	r2, [pc, #72]	@ (8016124 <TIM_OC2_SetConfig+0x80>)
 80160da:	4013      	ands	r3, r2
 80160dc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80160de:	683b      	ldr	r3, [r7, #0]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	021b      	lsls	r3, r3, #8
 80160e4:	68fa      	ldr	r2, [r7, #12]
 80160e6:	4313      	orrs	r3, r2
 80160e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80160ea:	697b      	ldr	r3, [r7, #20]
 80160ec:	2220      	movs	r2, #32
 80160ee:	4393      	bics	r3, r2
 80160f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80160f2:	683b      	ldr	r3, [r7, #0]
 80160f4:	689b      	ldr	r3, [r3, #8]
 80160f6:	011b      	lsls	r3, r3, #4
 80160f8:	697a      	ldr	r2, [r7, #20]
 80160fa:	4313      	orrs	r3, r2
 80160fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	693a      	ldr	r2, [r7, #16]
 8016102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	68fa      	ldr	r2, [r7, #12]
 8016108:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801610a:	683b      	ldr	r3, [r7, #0]
 801610c:	685a      	ldr	r2, [r3, #4]
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	697a      	ldr	r2, [r7, #20]
 8016116:	621a      	str	r2, [r3, #32]
}
 8016118:	46c0      	nop			@ (mov r8, r8)
 801611a:	46bd      	mov	sp, r7
 801611c:	b006      	add	sp, #24
 801611e:	bd80      	pop	{r7, pc}
 8016120:	ffff8fff 	.word	0xffff8fff
 8016124:	fffffcff 	.word	0xfffffcff

08016128 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b086      	sub	sp, #24
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
 8016130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	6a1b      	ldr	r3, [r3, #32]
 8016136:	4a1a      	ldr	r2, [pc, #104]	@ (80161a0 <TIM_OC3_SetConfig+0x78>)
 8016138:	401a      	ands	r2, r3
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	6a1b      	ldr	r3, [r3, #32]
 8016142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	685b      	ldr	r3, [r3, #4]
 8016148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	69db      	ldr	r3, [r3, #28]
 801614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	2270      	movs	r2, #112	@ 0x70
 8016154:	4393      	bics	r3, r2
 8016156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	2203      	movs	r2, #3
 801615c:	4393      	bics	r3, r2
 801615e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016160:	683b      	ldr	r3, [r7, #0]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	68fa      	ldr	r2, [r7, #12]
 8016166:	4313      	orrs	r3, r2
 8016168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801616a:	697b      	ldr	r3, [r7, #20]
 801616c:	4a0d      	ldr	r2, [pc, #52]	@ (80161a4 <TIM_OC3_SetConfig+0x7c>)
 801616e:	4013      	ands	r3, r2
 8016170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016172:	683b      	ldr	r3, [r7, #0]
 8016174:	689b      	ldr	r3, [r3, #8]
 8016176:	021b      	lsls	r3, r3, #8
 8016178:	697a      	ldr	r2, [r7, #20]
 801617a:	4313      	orrs	r3, r2
 801617c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	693a      	ldr	r2, [r7, #16]
 8016182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	68fa      	ldr	r2, [r7, #12]
 8016188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801618a:	683b      	ldr	r3, [r7, #0]
 801618c:	685a      	ldr	r2, [r3, #4]
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	697a      	ldr	r2, [r7, #20]
 8016196:	621a      	str	r2, [r3, #32]
}
 8016198:	46c0      	nop			@ (mov r8, r8)
 801619a:	46bd      	mov	sp, r7
 801619c:	b006      	add	sp, #24
 801619e:	bd80      	pop	{r7, pc}
 80161a0:	fffffeff 	.word	0xfffffeff
 80161a4:	fffffdff 	.word	0xfffffdff

080161a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b086      	sub	sp, #24
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	6078      	str	r0, [r7, #4]
 80161b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	6a1b      	ldr	r3, [r3, #32]
 80161b6:	4a1b      	ldr	r2, [pc, #108]	@ (8016224 <TIM_OC4_SetConfig+0x7c>)
 80161b8:	401a      	ands	r2, r3
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	6a1b      	ldr	r3, [r3, #32]
 80161c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	685b      	ldr	r3, [r3, #4]
 80161c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	69db      	ldr	r3, [r3, #28]
 80161ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	4a15      	ldr	r2, [pc, #84]	@ (8016228 <TIM_OC4_SetConfig+0x80>)
 80161d4:	4013      	ands	r3, r2
 80161d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	4a14      	ldr	r2, [pc, #80]	@ (801622c <TIM_OC4_SetConfig+0x84>)
 80161dc:	4013      	ands	r3, r2
 80161de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80161e0:	683b      	ldr	r3, [r7, #0]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	021b      	lsls	r3, r3, #8
 80161e6:	68fa      	ldr	r2, [r7, #12]
 80161e8:	4313      	orrs	r3, r2
 80161ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80161ec:	697b      	ldr	r3, [r7, #20]
 80161ee:	4a10      	ldr	r2, [pc, #64]	@ (8016230 <TIM_OC4_SetConfig+0x88>)
 80161f0:	4013      	ands	r3, r2
 80161f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80161f4:	683b      	ldr	r3, [r7, #0]
 80161f6:	689b      	ldr	r3, [r3, #8]
 80161f8:	031b      	lsls	r3, r3, #12
 80161fa:	697a      	ldr	r2, [r7, #20]
 80161fc:	4313      	orrs	r3, r2
 80161fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	693a      	ldr	r2, [r7, #16]
 8016204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	68fa      	ldr	r2, [r7, #12]
 801620a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801620c:	683b      	ldr	r3, [r7, #0]
 801620e:	685a      	ldr	r2, [r3, #4]
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	697a      	ldr	r2, [r7, #20]
 8016218:	621a      	str	r2, [r3, #32]
}
 801621a:	46c0      	nop			@ (mov r8, r8)
 801621c:	46bd      	mov	sp, r7
 801621e:	b006      	add	sp, #24
 8016220:	bd80      	pop	{r7, pc}
 8016222:	46c0      	nop			@ (mov r8, r8)
 8016224:	ffffefff 	.word	0xffffefff
 8016228:	ffff8fff 	.word	0xffff8fff
 801622c:	fffffcff 	.word	0xfffffcff
 8016230:	ffffdfff 	.word	0xffffdfff

08016234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b086      	sub	sp, #24
 8016238:	af00      	add	r7, sp, #0
 801623a:	60f8      	str	r0, [r7, #12]
 801623c:	60b9      	str	r1, [r7, #8]
 801623e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016240:	68bb      	ldr	r3, [r7, #8]
 8016242:	221f      	movs	r2, #31
 8016244:	4013      	ands	r3, r2
 8016246:	2201      	movs	r2, #1
 8016248:	409a      	lsls	r2, r3
 801624a:	0013      	movs	r3, r2
 801624c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	6a1b      	ldr	r3, [r3, #32]
 8016252:	697a      	ldr	r2, [r7, #20]
 8016254:	43d2      	mvns	r2, r2
 8016256:	401a      	ands	r2, r3
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	6a1a      	ldr	r2, [r3, #32]
 8016260:	68bb      	ldr	r3, [r7, #8]
 8016262:	211f      	movs	r1, #31
 8016264:	400b      	ands	r3, r1
 8016266:	6879      	ldr	r1, [r7, #4]
 8016268:	4099      	lsls	r1, r3
 801626a:	000b      	movs	r3, r1
 801626c:	431a      	orrs	r2, r3
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	621a      	str	r2, [r3, #32]
}
 8016272:	46c0      	nop			@ (mov r8, r8)
 8016274:	46bd      	mov	sp, r7
 8016276:	b006      	add	sp, #24
 8016278:	bd80      	pop	{r7, pc}
	...

0801627c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801627c:	b580      	push	{r7, lr}
 801627e:	b084      	sub	sp, #16
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
 8016284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2238      	movs	r2, #56	@ 0x38
 801628a:	5c9b      	ldrb	r3, [r3, r2]
 801628c:	2b01      	cmp	r3, #1
 801628e:	d101      	bne.n	8016294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016290:	2302      	movs	r3, #2
 8016292:	e047      	b.n	8016324 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	2238      	movs	r2, #56	@ 0x38
 8016298:	2101      	movs	r1, #1
 801629a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	2239      	movs	r2, #57	@ 0x39
 80162a0:	2102      	movs	r1, #2
 80162a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	685b      	ldr	r3, [r3, #4]
 80162aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	689b      	ldr	r3, [r3, #8]
 80162b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	2270      	movs	r2, #112	@ 0x70
 80162b8:	4393      	bics	r3, r2
 80162ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	68fa      	ldr	r2, [r7, #12]
 80162c2:	4313      	orrs	r3, r2
 80162c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	68fa      	ldr	r2, [r7, #12]
 80162cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	681a      	ldr	r2, [r3, #0]
 80162d2:	2380      	movs	r3, #128	@ 0x80
 80162d4:	05db      	lsls	r3, r3, #23
 80162d6:	429a      	cmp	r2, r3
 80162d8:	d00e      	beq.n	80162f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	4a13      	ldr	r2, [pc, #76]	@ (801632c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80162e0:	4293      	cmp	r3, r2
 80162e2:	d009      	beq.n	80162f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	4a11      	ldr	r2, [pc, #68]	@ (8016330 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80162ea:	4293      	cmp	r3, r2
 80162ec:	d004      	beq.n	80162f8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	4a10      	ldr	r2, [pc, #64]	@ (8016334 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80162f4:	4293      	cmp	r3, r2
 80162f6:	d10c      	bne.n	8016312 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80162f8:	68bb      	ldr	r3, [r7, #8]
 80162fa:	2280      	movs	r2, #128	@ 0x80
 80162fc:	4393      	bics	r3, r2
 80162fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016300:	683b      	ldr	r3, [r7, #0]
 8016302:	685b      	ldr	r3, [r3, #4]
 8016304:	68ba      	ldr	r2, [r7, #8]
 8016306:	4313      	orrs	r3, r2
 8016308:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	68ba      	ldr	r2, [r7, #8]
 8016310:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	2239      	movs	r2, #57	@ 0x39
 8016316:	2101      	movs	r1, #1
 8016318:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	2238      	movs	r2, #56	@ 0x38
 801631e:	2100      	movs	r1, #0
 8016320:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016322:	2300      	movs	r3, #0
}
 8016324:	0018      	movs	r0, r3
 8016326:	46bd      	mov	sp, r7
 8016328:	b004      	add	sp, #16
 801632a:	bd80      	pop	{r7, pc}
 801632c:	40000400 	.word	0x40000400
 8016330:	40010800 	.word	0x40010800
 8016334:	40011400 	.word	0x40011400

08016338 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8016338:	b580      	push	{r7, lr}
 801633a:	b082      	sub	sp, #8
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
 8016340:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	2238      	movs	r2, #56	@ 0x38
 8016346:	5c9b      	ldrb	r3, [r3, r2]
 8016348:	2b01      	cmp	r3, #1
 801634a:	d101      	bne.n	8016350 <HAL_TIMEx_RemapConfig+0x18>
 801634c:	2302      	movs	r3, #2
 801634e:	e00c      	b.n	801636a <HAL_TIMEx_RemapConfig+0x32>
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	2238      	movs	r2, #56	@ 0x38
 8016354:	2101      	movs	r1, #1
 8016356:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	683a      	ldr	r2, [r7, #0]
 801635e:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2238      	movs	r2, #56	@ 0x38
 8016364:	2100      	movs	r1, #0
 8016366:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016368:	2300      	movs	r3, #0
}
 801636a:	0018      	movs	r0, r3
 801636c:	46bd      	mov	sp, r7
 801636e:	b002      	add	sp, #8
 8016370:	bd80      	pop	{r7, pc}
	...

08016374 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016374:	b580      	push	{r7, lr}
 8016376:	b082      	sub	sp, #8
 8016378:	af00      	add	r7, sp, #0
 801637a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d101      	bne.n	8016386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8016382:	2301      	movs	r3, #1
 8016384:	e053      	b.n	801642e <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801638a:	2b00      	cmp	r3, #0
 801638c:	d116      	bne.n	80163bc <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	2278      	movs	r2, #120	@ 0x78
 8016392:	2100      	movs	r1, #0
 8016394:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	0018      	movs	r0, r3
 801639a:	f000 fd65 	bl	8016e68 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	22b0      	movs	r2, #176	@ 0xb0
 80163a2:	589b      	ldr	r3, [r3, r2]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d103      	bne.n	80163b0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	21b0      	movs	r1, #176	@ 0xb0
 80163ac:	4a22      	ldr	r2, [pc, #136]	@ (8016438 <HAL_UART_Init+0xc4>)
 80163ae:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	22b0      	movs	r2, #176	@ 0xb0
 80163b4:	589b      	ldr	r3, [r3, r2]
 80163b6:	687a      	ldr	r2, [r7, #4]
 80163b8:	0010      	movs	r0, r2
 80163ba:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	2224      	movs	r2, #36	@ 0x24
 80163c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	681a      	ldr	r2, [r3, #0]
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	2101      	movs	r1, #1
 80163ce:	438a      	bics	r2, r1
 80163d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	0018      	movs	r0, r3
 80163d6:	f000 fd8b 	bl	8016ef0 <UART_SetConfig>
 80163da:	0003      	movs	r3, r0
 80163dc:	2b01      	cmp	r3, #1
 80163de:	d101      	bne.n	80163e4 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 80163e0:	2301      	movs	r3, #1
 80163e2:	e024      	b.n	801642e <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d003      	beq.n	80163f4 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	0018      	movs	r0, r3
 80163f0:	f001 f81c 	bl	801742c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	685a      	ldr	r2, [r3, #4]
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	490f      	ldr	r1, [pc, #60]	@ (801643c <HAL_UART_Init+0xc8>)
 8016400:	400a      	ands	r2, r1
 8016402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	689a      	ldr	r2, [r3, #8]
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	212a      	movs	r1, #42	@ 0x2a
 8016410:	438a      	bics	r2, r1
 8016412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	681a      	ldr	r2, [r3, #0]
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	2101      	movs	r1, #1
 8016420:	430a      	orrs	r2, r1
 8016422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	0018      	movs	r0, r3
 8016428:	f001 f8b4 	bl	8017594 <UART_CheckIdleState>
 801642c:	0003      	movs	r3, r0
}
 801642e:	0018      	movs	r0, r3
 8016430:	46bd      	mov	sp, r7
 8016432:	b002      	add	sp, #8
 8016434:	bd80      	pop	{r7, pc}
 8016436:	46c0      	nop			@ (mov r8, r8)
 8016438:	0800d639 	.word	0x0800d639
 801643c:	ffffb7ff 	.word	0xffffb7ff

08016440 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b08a      	sub	sp, #40	@ 0x28
 8016444:	af02      	add	r7, sp, #8
 8016446:	60f8      	str	r0, [r7, #12]
 8016448:	60b9      	str	r1, [r7, #8]
 801644a:	603b      	str	r3, [r7, #0]
 801644c:	1dbb      	adds	r3, r7, #6
 801644e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016454:	2b20      	cmp	r3, #32
 8016456:	d000      	beq.n	801645a <HAL_UART_Transmit+0x1a>
 8016458:	e08c      	b.n	8016574 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801645a:	68bb      	ldr	r3, [r7, #8]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d003      	beq.n	8016468 <HAL_UART_Transmit+0x28>
 8016460:	1dbb      	adds	r3, r7, #6
 8016462:	881b      	ldrh	r3, [r3, #0]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d101      	bne.n	801646c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8016468:	2301      	movs	r3, #1
 801646a:	e084      	b.n	8016576 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	689a      	ldr	r2, [r3, #8]
 8016470:	2380      	movs	r3, #128	@ 0x80
 8016472:	015b      	lsls	r3, r3, #5
 8016474:	429a      	cmp	r2, r3
 8016476:	d109      	bne.n	801648c <HAL_UART_Transmit+0x4c>
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	691b      	ldr	r3, [r3, #16]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d105      	bne.n	801648c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	2201      	movs	r2, #1
 8016484:	4013      	ands	r3, r2
 8016486:	d001      	beq.n	801648c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8016488:	2301      	movs	r3, #1
 801648a:	e074      	b.n	8016576 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	2284      	movs	r2, #132	@ 0x84
 8016490:	2100      	movs	r1, #0
 8016492:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	2221      	movs	r2, #33	@ 0x21
 8016498:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801649a:	f7f7 fdf9 	bl	800e090 <HAL_GetTick>
 801649e:	0003      	movs	r3, r0
 80164a0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	1dba      	adds	r2, r7, #6
 80164a6:	2150      	movs	r1, #80	@ 0x50
 80164a8:	8812      	ldrh	r2, [r2, #0]
 80164aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	1dba      	adds	r2, r7, #6
 80164b0:	2152      	movs	r1, #82	@ 0x52
 80164b2:	8812      	ldrh	r2, [r2, #0]
 80164b4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	689a      	ldr	r2, [r3, #8]
 80164ba:	2380      	movs	r3, #128	@ 0x80
 80164bc:	015b      	lsls	r3, r3, #5
 80164be:	429a      	cmp	r2, r3
 80164c0:	d108      	bne.n	80164d4 <HAL_UART_Transmit+0x94>
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	691b      	ldr	r3, [r3, #16]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d104      	bne.n	80164d4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80164ca:	2300      	movs	r3, #0
 80164cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80164ce:	68bb      	ldr	r3, [r7, #8]
 80164d0:	61bb      	str	r3, [r7, #24]
 80164d2:	e003      	b.n	80164dc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80164d8:	2300      	movs	r3, #0
 80164da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80164dc:	e02f      	b.n	801653e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80164de:	697a      	ldr	r2, [r7, #20]
 80164e0:	68f8      	ldr	r0, [r7, #12]
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	9300      	str	r3, [sp, #0]
 80164e6:	0013      	movs	r3, r2
 80164e8:	2200      	movs	r2, #0
 80164ea:	2180      	movs	r1, #128	@ 0x80
 80164ec:	f001 f8fa 	bl	80176e4 <UART_WaitOnFlagUntilTimeout>
 80164f0:	1e03      	subs	r3, r0, #0
 80164f2:	d004      	beq.n	80164fe <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	2220      	movs	r2, #32
 80164f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80164fa:	2303      	movs	r3, #3
 80164fc:	e03b      	b.n	8016576 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80164fe:	69fb      	ldr	r3, [r7, #28]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d10b      	bne.n	801651c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8016504:	69bb      	ldr	r3, [r7, #24]
 8016506:	881b      	ldrh	r3, [r3, #0]
 8016508:	001a      	movs	r2, r3
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	05d2      	lsls	r2, r2, #23
 8016510:	0dd2      	lsrs	r2, r2, #23
 8016512:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8016514:	69bb      	ldr	r3, [r7, #24]
 8016516:	3302      	adds	r3, #2
 8016518:	61bb      	str	r3, [r7, #24]
 801651a:	e007      	b.n	801652c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801651c:	69fb      	ldr	r3, [r7, #28]
 801651e:	781a      	ldrb	r2, [r3, #0]
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8016526:	69fb      	ldr	r3, [r7, #28]
 8016528:	3301      	adds	r3, #1
 801652a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	2252      	movs	r2, #82	@ 0x52
 8016530:	5a9b      	ldrh	r3, [r3, r2]
 8016532:	b29b      	uxth	r3, r3
 8016534:	3b01      	subs	r3, #1
 8016536:	b299      	uxth	r1, r3
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	2252      	movs	r2, #82	@ 0x52
 801653c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	2252      	movs	r2, #82	@ 0x52
 8016542:	5a9b      	ldrh	r3, [r3, r2]
 8016544:	b29b      	uxth	r3, r3
 8016546:	2b00      	cmp	r3, #0
 8016548:	d1c9      	bne.n	80164de <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801654a:	697a      	ldr	r2, [r7, #20]
 801654c:	68f8      	ldr	r0, [r7, #12]
 801654e:	683b      	ldr	r3, [r7, #0]
 8016550:	9300      	str	r3, [sp, #0]
 8016552:	0013      	movs	r3, r2
 8016554:	2200      	movs	r2, #0
 8016556:	2140      	movs	r1, #64	@ 0x40
 8016558:	f001 f8c4 	bl	80176e4 <UART_WaitOnFlagUntilTimeout>
 801655c:	1e03      	subs	r3, r0, #0
 801655e:	d004      	beq.n	801656a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	2220      	movs	r2, #32
 8016564:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8016566:	2303      	movs	r3, #3
 8016568:	e005      	b.n	8016576 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	2220      	movs	r2, #32
 801656e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8016570:	2300      	movs	r3, #0
 8016572:	e000      	b.n	8016576 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8016574:	2302      	movs	r3, #2
  }
}
 8016576:	0018      	movs	r0, r3
 8016578:	46bd      	mov	sp, r7
 801657a:	b008      	add	sp, #32
 801657c:	bd80      	pop	{r7, pc}
	...

08016580 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b088      	sub	sp, #32
 8016584:	af00      	add	r7, sp, #0
 8016586:	60f8      	str	r0, [r7, #12]
 8016588:	60b9      	str	r1, [r7, #8]
 801658a:	1dbb      	adds	r3, r7, #6
 801658c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801658e:	68fb      	ldr	r3, [r7, #12]
 8016590:	2280      	movs	r2, #128	@ 0x80
 8016592:	589b      	ldr	r3, [r3, r2]
 8016594:	2b20      	cmp	r3, #32
 8016596:	d14a      	bne.n	801662e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8016598:	68bb      	ldr	r3, [r7, #8]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d003      	beq.n	80165a6 <HAL_UART_Receive_IT+0x26>
 801659e:	1dbb      	adds	r3, r7, #6
 80165a0:	881b      	ldrh	r3, [r3, #0]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d101      	bne.n	80165aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80165a6:	2301      	movs	r3, #1
 80165a8:	e042      	b.n	8016630 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	689a      	ldr	r2, [r3, #8]
 80165ae:	2380      	movs	r3, #128	@ 0x80
 80165b0:	015b      	lsls	r3, r3, #5
 80165b2:	429a      	cmp	r2, r3
 80165b4:	d109      	bne.n	80165ca <HAL_UART_Receive_IT+0x4a>
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	691b      	ldr	r3, [r3, #16]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d105      	bne.n	80165ca <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80165be:	68bb      	ldr	r3, [r7, #8]
 80165c0:	2201      	movs	r2, #1
 80165c2:	4013      	ands	r3, r2
 80165c4:	d001      	beq.n	80165ca <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80165c6:	2301      	movs	r3, #1
 80165c8:	e032      	b.n	8016630 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	2200      	movs	r2, #0
 80165ce:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	4a18      	ldr	r2, [pc, #96]	@ (8016638 <HAL_UART_Receive_IT+0xb8>)
 80165d6:	4293      	cmp	r3, r2
 80165d8:	d020      	beq.n	801661c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	685a      	ldr	r2, [r3, #4]
 80165e0:	2380      	movs	r3, #128	@ 0x80
 80165e2:	041b      	lsls	r3, r3, #16
 80165e4:	4013      	ands	r3, r2
 80165e6:	d019      	beq.n	801661c <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80165e8:	f3ef 8310 	mrs	r3, PRIMASK
 80165ec:	613b      	str	r3, [r7, #16]
  return(result);
 80165ee:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80165f0:	61fb      	str	r3, [r7, #28]
 80165f2:	2301      	movs	r3, #1
 80165f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80165f6:	697b      	ldr	r3, [r7, #20]
 80165f8:	f383 8810 	msr	PRIMASK, r3
}
 80165fc:	46c0      	nop			@ (mov r8, r8)
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	681a      	ldr	r2, [r3, #0]
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	2180      	movs	r1, #128	@ 0x80
 801660a:	04c9      	lsls	r1, r1, #19
 801660c:	430a      	orrs	r2, r1
 801660e:	601a      	str	r2, [r3, #0]
 8016610:	69fb      	ldr	r3, [r7, #28]
 8016612:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016614:	69bb      	ldr	r3, [r7, #24]
 8016616:	f383 8810 	msr	PRIMASK, r3
}
 801661a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801661c:	1dbb      	adds	r3, r7, #6
 801661e:	881a      	ldrh	r2, [r3, #0]
 8016620:	68b9      	ldr	r1, [r7, #8]
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	0018      	movs	r0, r3
 8016626:	f001 f8c7 	bl	80177b8 <UART_Start_Receive_IT>
 801662a:	0003      	movs	r3, r0
 801662c:	e000      	b.n	8016630 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801662e:	2302      	movs	r3, #2
  }
}
 8016630:	0018      	movs	r0, r3
 8016632:	46bd      	mov	sp, r7
 8016634:	b008      	add	sp, #32
 8016636:	bd80      	pop	{r7, pc}
 8016638:	40004800 	.word	0x40004800

0801663c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b088      	sub	sp, #32
 8016640:	af00      	add	r7, sp, #0
 8016642:	60f8      	str	r0, [r7, #12]
 8016644:	60b9      	str	r1, [r7, #8]
 8016646:	1dbb      	adds	r3, r7, #6
 8016648:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801664e:	2b20      	cmp	r3, #32
 8016650:	d000      	beq.n	8016654 <HAL_UART_Transmit_DMA+0x18>
 8016652:	e077      	b.n	8016744 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d003      	beq.n	8016662 <HAL_UART_Transmit_DMA+0x26>
 801665a:	1dbb      	adds	r3, r7, #6
 801665c:	881b      	ldrh	r3, [r3, #0]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d101      	bne.n	8016666 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8016662:	2301      	movs	r3, #1
 8016664:	e06f      	b.n	8016746 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	689a      	ldr	r2, [r3, #8]
 801666a:	2380      	movs	r3, #128	@ 0x80
 801666c:	015b      	lsls	r3, r3, #5
 801666e:	429a      	cmp	r2, r3
 8016670:	d109      	bne.n	8016686 <HAL_UART_Transmit_DMA+0x4a>
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	691b      	ldr	r3, [r3, #16]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d105      	bne.n	8016686 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801667a:	68bb      	ldr	r3, [r7, #8]
 801667c:	2201      	movs	r2, #1
 801667e:	4013      	ands	r3, r2
 8016680:	d001      	beq.n	8016686 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8016682:	2301      	movs	r3, #1
 8016684:	e05f      	b.n	8016746 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	68ba      	ldr	r2, [r7, #8]
 801668a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	1dba      	adds	r2, r7, #6
 8016690:	2150      	movs	r1, #80	@ 0x50
 8016692:	8812      	ldrh	r2, [r2, #0]
 8016694:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	1dba      	adds	r2, r7, #6
 801669a:	2152      	movs	r1, #82	@ 0x52
 801669c:	8812      	ldrh	r2, [r2, #0]
 801669e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	2284      	movs	r2, #132	@ 0x84
 80166a4:	2100      	movs	r1, #0
 80166a6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	2221      	movs	r2, #33	@ 0x21
 80166ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d027      	beq.n	8016706 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80166ba:	4a25      	ldr	r2, [pc, #148]	@ (8016750 <HAL_UART_Transmit_DMA+0x114>)
 80166bc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80166c2:	4a24      	ldr	r2, [pc, #144]	@ (8016754 <HAL_UART_Transmit_DMA+0x118>)
 80166c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80166ca:	4a23      	ldr	r2, [pc, #140]	@ (8016758 <HAL_UART_Transmit_DMA+0x11c>)
 80166cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80166d2:	2200      	movs	r2, #0
 80166d4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80166de:	0019      	movs	r1, r3
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	3328      	adds	r3, #40	@ 0x28
 80166e6:	001a      	movs	r2, r3
 80166e8:	1dbb      	adds	r3, r7, #6
 80166ea:	881b      	ldrh	r3, [r3, #0]
 80166ec:	f7f8 fa0c 	bl	800eb08 <HAL_DMA_Start_IT>
 80166f0:	1e03      	subs	r3, r0, #0
 80166f2:	d008      	beq.n	8016706 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	2284      	movs	r2, #132	@ 0x84
 80166f8:	2110      	movs	r1, #16
 80166fa:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	2220      	movs	r2, #32
 8016700:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8016702:	2301      	movs	r3, #1
 8016704:	e01f      	b.n	8016746 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	2240      	movs	r2, #64	@ 0x40
 801670c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801670e:	f3ef 8310 	mrs	r3, PRIMASK
 8016712:	613b      	str	r3, [r7, #16]
  return(result);
 8016714:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016716:	61fb      	str	r3, [r7, #28]
 8016718:	2301      	movs	r3, #1
 801671a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801671c:	697b      	ldr	r3, [r7, #20]
 801671e:	f383 8810 	msr	PRIMASK, r3
}
 8016722:	46c0      	nop			@ (mov r8, r8)
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	689a      	ldr	r2, [r3, #8]
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	2180      	movs	r1, #128	@ 0x80
 8016730:	430a      	orrs	r2, r1
 8016732:	609a      	str	r2, [r3, #8]
 8016734:	69fb      	ldr	r3, [r7, #28]
 8016736:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016738:	69bb      	ldr	r3, [r7, #24]
 801673a:	f383 8810 	msr	PRIMASK, r3
}
 801673e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8016740:	2300      	movs	r3, #0
 8016742:	e000      	b.n	8016746 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8016744:	2302      	movs	r3, #2
  }
}
 8016746:	0018      	movs	r0, r3
 8016748:	46bd      	mov	sp, r7
 801674a:	b008      	add	sp, #32
 801674c:	bd80      	pop	{r7, pc}
 801674e:	46c0      	nop			@ (mov r8, r8)
 8016750:	08017b9d 	.word	0x08017b9d
 8016754:	08017c39 	.word	0x08017c39
 8016758:	08017dd9 	.word	0x08017dd9

0801675c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b088      	sub	sp, #32
 8016760:	af00      	add	r7, sp, #0
 8016762:	60f8      	str	r0, [r7, #12]
 8016764:	60b9      	str	r1, [r7, #8]
 8016766:	1dbb      	adds	r3, r7, #6
 8016768:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	2280      	movs	r2, #128	@ 0x80
 801676e:	589b      	ldr	r3, [r3, r2]
 8016770:	2b20      	cmp	r3, #32
 8016772:	d14a      	bne.n	801680a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8016774:	68bb      	ldr	r3, [r7, #8]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d003      	beq.n	8016782 <HAL_UART_Receive_DMA+0x26>
 801677a:	1dbb      	adds	r3, r7, #6
 801677c:	881b      	ldrh	r3, [r3, #0]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d101      	bne.n	8016786 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8016782:	2301      	movs	r3, #1
 8016784:	e042      	b.n	801680c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	689a      	ldr	r2, [r3, #8]
 801678a:	2380      	movs	r3, #128	@ 0x80
 801678c:	015b      	lsls	r3, r3, #5
 801678e:	429a      	cmp	r2, r3
 8016790:	d109      	bne.n	80167a6 <HAL_UART_Receive_DMA+0x4a>
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	691b      	ldr	r3, [r3, #16]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d105      	bne.n	80167a6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801679a:	68bb      	ldr	r3, [r7, #8]
 801679c:	2201      	movs	r2, #1
 801679e:	4013      	ands	r3, r2
 80167a0:	d001      	beq.n	80167a6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80167a2:	2301      	movs	r3, #1
 80167a4:	e032      	b.n	801680c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	2200      	movs	r2, #0
 80167aa:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	4a18      	ldr	r2, [pc, #96]	@ (8016814 <HAL_UART_Receive_DMA+0xb8>)
 80167b2:	4293      	cmp	r3, r2
 80167b4:	d020      	beq.n	80167f8 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	685a      	ldr	r2, [r3, #4]
 80167bc:	2380      	movs	r3, #128	@ 0x80
 80167be:	041b      	lsls	r3, r3, #16
 80167c0:	4013      	ands	r3, r2
 80167c2:	d019      	beq.n	80167f8 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167c4:	f3ef 8310 	mrs	r3, PRIMASK
 80167c8:	613b      	str	r3, [r7, #16]
  return(result);
 80167ca:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80167cc:	61fb      	str	r3, [r7, #28]
 80167ce:	2301      	movs	r3, #1
 80167d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167d2:	697b      	ldr	r3, [r7, #20]
 80167d4:	f383 8810 	msr	PRIMASK, r3
}
 80167d8:	46c0      	nop			@ (mov r8, r8)
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	681a      	ldr	r2, [r3, #0]
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	2180      	movs	r1, #128	@ 0x80
 80167e6:	04c9      	lsls	r1, r1, #19
 80167e8:	430a      	orrs	r2, r1
 80167ea:	601a      	str	r2, [r3, #0]
 80167ec:	69fb      	ldr	r3, [r7, #28]
 80167ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167f0:	69bb      	ldr	r3, [r7, #24]
 80167f2:	f383 8810 	msr	PRIMASK, r3
}
 80167f6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80167f8:	1dbb      	adds	r3, r7, #6
 80167fa:	881a      	ldrh	r2, [r3, #0]
 80167fc:	68b9      	ldr	r1, [r7, #8]
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	0018      	movs	r0, r3
 8016802:	f001 f8a3 	bl	801794c <UART_Start_Receive_DMA>
 8016806:	0003      	movs	r3, r0
 8016808:	e000      	b.n	801680c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801680a:	2302      	movs	r3, #2
  }
}
 801680c:	0018      	movs	r0, r3
 801680e:	46bd      	mov	sp, r7
 8016810:	b008      	add	sp, #32
 8016812:	bd80      	pop	{r7, pc}
 8016814:	40004800 	.word	0x40004800

08016818 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016818:	b590      	push	{r4, r7, lr}
 801681a:	b0ab      	sub	sp, #172	@ 0xac
 801681c:	af00      	add	r7, sp, #0
 801681e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	69db      	ldr	r3, [r3, #28]
 8016826:	22a4      	movs	r2, #164	@ 0xa4
 8016828:	18b9      	adds	r1, r7, r2
 801682a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	20a0      	movs	r0, #160	@ 0xa0
 8016834:	1839      	adds	r1, r7, r0
 8016836:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	689b      	ldr	r3, [r3, #8]
 801683e:	219c      	movs	r1, #156	@ 0x9c
 8016840:	1879      	adds	r1, r7, r1
 8016842:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8016844:	0011      	movs	r1, r2
 8016846:	18bb      	adds	r3, r7, r2
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	4a9c      	ldr	r2, [pc, #624]	@ (8016abc <HAL_UART_IRQHandler+0x2a4>)
 801684c:	4013      	ands	r3, r2
 801684e:	2298      	movs	r2, #152	@ 0x98
 8016850:	18bc      	adds	r4, r7, r2
 8016852:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8016854:	18bb      	adds	r3, r7, r2
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d114      	bne.n	8016886 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801685c:	187b      	adds	r3, r7, r1
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	2220      	movs	r2, #32
 8016862:	4013      	ands	r3, r2
 8016864:	d00f      	beq.n	8016886 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8016866:	183b      	adds	r3, r7, r0
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	2220      	movs	r2, #32
 801686c:	4013      	ands	r3, r2
 801686e:	d00a      	beq.n	8016886 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016874:	2b00      	cmp	r3, #0
 8016876:	d100      	bne.n	801687a <HAL_UART_IRQHandler+0x62>
 8016878:	e2aa      	b.n	8016dd0 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801687e:	687a      	ldr	r2, [r7, #4]
 8016880:	0010      	movs	r0, r2
 8016882:	4798      	blx	r3
      }
      return;
 8016884:	e2a4      	b.n	8016dd0 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8016886:	2398      	movs	r3, #152	@ 0x98
 8016888:	18fb      	adds	r3, r7, r3
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d100      	bne.n	8016892 <HAL_UART_IRQHandler+0x7a>
 8016890:	e11a      	b.n	8016ac8 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8016892:	239c      	movs	r3, #156	@ 0x9c
 8016894:	18fb      	adds	r3, r7, r3
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	2201      	movs	r2, #1
 801689a:	4013      	ands	r3, r2
 801689c:	d106      	bne.n	80168ac <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801689e:	23a0      	movs	r3, #160	@ 0xa0
 80168a0:	18fb      	adds	r3, r7, r3
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	4a86      	ldr	r2, [pc, #536]	@ (8016ac0 <HAL_UART_IRQHandler+0x2a8>)
 80168a6:	4013      	ands	r3, r2
 80168a8:	d100      	bne.n	80168ac <HAL_UART_IRQHandler+0x94>
 80168aa:	e10d      	b.n	8016ac8 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80168ac:	23a4      	movs	r3, #164	@ 0xa4
 80168ae:	18fb      	adds	r3, r7, r3
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	2201      	movs	r2, #1
 80168b4:	4013      	ands	r3, r2
 80168b6:	d012      	beq.n	80168de <HAL_UART_IRQHandler+0xc6>
 80168b8:	23a0      	movs	r3, #160	@ 0xa0
 80168ba:	18fb      	adds	r3, r7, r3
 80168bc:	681a      	ldr	r2, [r3, #0]
 80168be:	2380      	movs	r3, #128	@ 0x80
 80168c0:	005b      	lsls	r3, r3, #1
 80168c2:	4013      	ands	r3, r2
 80168c4:	d00b      	beq.n	80168de <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	2201      	movs	r2, #1
 80168cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	2284      	movs	r2, #132	@ 0x84
 80168d2:	589b      	ldr	r3, [r3, r2]
 80168d4:	2201      	movs	r2, #1
 80168d6:	431a      	orrs	r2, r3
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	2184      	movs	r1, #132	@ 0x84
 80168dc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80168de:	23a4      	movs	r3, #164	@ 0xa4
 80168e0:	18fb      	adds	r3, r7, r3
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	2202      	movs	r2, #2
 80168e6:	4013      	ands	r3, r2
 80168e8:	d011      	beq.n	801690e <HAL_UART_IRQHandler+0xf6>
 80168ea:	239c      	movs	r3, #156	@ 0x9c
 80168ec:	18fb      	adds	r3, r7, r3
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	2201      	movs	r2, #1
 80168f2:	4013      	ands	r3, r2
 80168f4:	d00b      	beq.n	801690e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	2202      	movs	r2, #2
 80168fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	2284      	movs	r2, #132	@ 0x84
 8016902:	589b      	ldr	r3, [r3, r2]
 8016904:	2204      	movs	r2, #4
 8016906:	431a      	orrs	r2, r3
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	2184      	movs	r1, #132	@ 0x84
 801690c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801690e:	23a4      	movs	r3, #164	@ 0xa4
 8016910:	18fb      	adds	r3, r7, r3
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	2204      	movs	r2, #4
 8016916:	4013      	ands	r3, r2
 8016918:	d011      	beq.n	801693e <HAL_UART_IRQHandler+0x126>
 801691a:	239c      	movs	r3, #156	@ 0x9c
 801691c:	18fb      	adds	r3, r7, r3
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	2201      	movs	r2, #1
 8016922:	4013      	ands	r3, r2
 8016924:	d00b      	beq.n	801693e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	2204      	movs	r2, #4
 801692c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	2284      	movs	r2, #132	@ 0x84
 8016932:	589b      	ldr	r3, [r3, r2]
 8016934:	2202      	movs	r2, #2
 8016936:	431a      	orrs	r2, r3
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	2184      	movs	r1, #132	@ 0x84
 801693c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801693e:	23a4      	movs	r3, #164	@ 0xa4
 8016940:	18fb      	adds	r3, r7, r3
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	2208      	movs	r2, #8
 8016946:	4013      	ands	r3, r2
 8016948:	d017      	beq.n	801697a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801694a:	23a0      	movs	r3, #160	@ 0xa0
 801694c:	18fb      	adds	r3, r7, r3
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	2220      	movs	r2, #32
 8016952:	4013      	ands	r3, r2
 8016954:	d105      	bne.n	8016962 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8016956:	239c      	movs	r3, #156	@ 0x9c
 8016958:	18fb      	adds	r3, r7, r3
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	2201      	movs	r2, #1
 801695e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016960:	d00b      	beq.n	801697a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	2208      	movs	r2, #8
 8016968:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	2284      	movs	r2, #132	@ 0x84
 801696e:	589b      	ldr	r3, [r3, r2]
 8016970:	2208      	movs	r2, #8
 8016972:	431a      	orrs	r2, r3
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	2184      	movs	r1, #132	@ 0x84
 8016978:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801697a:	23a4      	movs	r3, #164	@ 0xa4
 801697c:	18fb      	adds	r3, r7, r3
 801697e:	681a      	ldr	r2, [r3, #0]
 8016980:	2380      	movs	r3, #128	@ 0x80
 8016982:	011b      	lsls	r3, r3, #4
 8016984:	4013      	ands	r3, r2
 8016986:	d013      	beq.n	80169b0 <HAL_UART_IRQHandler+0x198>
 8016988:	23a0      	movs	r3, #160	@ 0xa0
 801698a:	18fb      	adds	r3, r7, r3
 801698c:	681a      	ldr	r2, [r3, #0]
 801698e:	2380      	movs	r3, #128	@ 0x80
 8016990:	04db      	lsls	r3, r3, #19
 8016992:	4013      	ands	r3, r2
 8016994:	d00c      	beq.n	80169b0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	2280      	movs	r2, #128	@ 0x80
 801699c:	0112      	lsls	r2, r2, #4
 801699e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	2284      	movs	r2, #132	@ 0x84
 80169a4:	589b      	ldr	r3, [r3, r2]
 80169a6:	2220      	movs	r2, #32
 80169a8:	431a      	orrs	r2, r3
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	2184      	movs	r1, #132	@ 0x84
 80169ae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	2284      	movs	r2, #132	@ 0x84
 80169b4:	589b      	ldr	r3, [r3, r2]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d100      	bne.n	80169bc <HAL_UART_IRQHandler+0x1a4>
 80169ba:	e20b      	b.n	8016dd4 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80169bc:	23a4      	movs	r3, #164	@ 0xa4
 80169be:	18fb      	adds	r3, r7, r3
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	2220      	movs	r2, #32
 80169c4:	4013      	ands	r3, r2
 80169c6:	d00e      	beq.n	80169e6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80169c8:	23a0      	movs	r3, #160	@ 0xa0
 80169ca:	18fb      	adds	r3, r7, r3
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	2220      	movs	r2, #32
 80169d0:	4013      	ands	r3, r2
 80169d2:	d008      	beq.n	80169e6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d004      	beq.n	80169e6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80169e0:	687a      	ldr	r2, [r7, #4]
 80169e2:	0010      	movs	r0, r2
 80169e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	2284      	movs	r2, #132	@ 0x84
 80169ea:	589b      	ldr	r3, [r3, r2]
 80169ec:	2194      	movs	r1, #148	@ 0x94
 80169ee:	187a      	adds	r2, r7, r1
 80169f0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	689b      	ldr	r3, [r3, #8]
 80169f8:	2240      	movs	r2, #64	@ 0x40
 80169fa:	4013      	ands	r3, r2
 80169fc:	2b40      	cmp	r3, #64	@ 0x40
 80169fe:	d004      	beq.n	8016a0a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016a00:	187b      	adds	r3, r7, r1
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	2228      	movs	r2, #40	@ 0x28
 8016a06:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016a08:	d04b      	beq.n	8016aa2 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	0018      	movs	r0, r3
 8016a0e:	f001 f861 	bl	8017ad4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	689b      	ldr	r3, [r3, #8]
 8016a18:	2240      	movs	r2, #64	@ 0x40
 8016a1a:	4013      	ands	r3, r2
 8016a1c:	2b40      	cmp	r3, #64	@ 0x40
 8016a1e:	d139      	bne.n	8016a94 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016a20:	f3ef 8310 	mrs	r3, PRIMASK
 8016a24:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8016a26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016a28:	2090      	movs	r0, #144	@ 0x90
 8016a2a:	183a      	adds	r2, r7, r0
 8016a2c:	6013      	str	r3, [r2, #0]
 8016a2e:	2301      	movs	r3, #1
 8016a30:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016a34:	f383 8810 	msr	PRIMASK, r3
}
 8016a38:	46c0      	nop			@ (mov r8, r8)
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	689a      	ldr	r2, [r3, #8]
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	2140      	movs	r1, #64	@ 0x40
 8016a46:	438a      	bics	r2, r1
 8016a48:	609a      	str	r2, [r3, #8]
 8016a4a:	183b      	adds	r3, r7, r0
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8016a52:	f383 8810 	msr	PRIMASK, r3
}
 8016a56:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d012      	beq.n	8016a86 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016a64:	4a17      	ldr	r2, [pc, #92]	@ (8016ac4 <HAL_UART_IRQHandler+0x2ac>)
 8016a66:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016a6c:	0018      	movs	r0, r3
 8016a6e:	f7f8 f8f1 	bl	800ec54 <HAL_DMA_Abort_IT>
 8016a72:	1e03      	subs	r3, r0, #0
 8016a74:	d020      	beq.n	8016ab8 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016a7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016a80:	0018      	movs	r0, r3
 8016a82:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016a84:	e018      	b.n	8016ab8 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	2298      	movs	r2, #152	@ 0x98
 8016a8a:	589b      	ldr	r3, [r3, r2]
 8016a8c:	687a      	ldr	r2, [r7, #4]
 8016a8e:	0010      	movs	r0, r2
 8016a90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016a92:	e011      	b.n	8016ab8 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	2298      	movs	r2, #152	@ 0x98
 8016a98:	589b      	ldr	r3, [r3, r2]
 8016a9a:	687a      	ldr	r2, [r7, #4]
 8016a9c:	0010      	movs	r0, r2
 8016a9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016aa0:	e00a      	b.n	8016ab8 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	2298      	movs	r2, #152	@ 0x98
 8016aa6:	589b      	ldr	r3, [r3, r2]
 8016aa8:	687a      	ldr	r2, [r7, #4]
 8016aaa:	0010      	movs	r0, r2
 8016aac:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	2284      	movs	r2, #132	@ 0x84
 8016ab2:	2100      	movs	r1, #0
 8016ab4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8016ab6:	e18d      	b.n	8016dd4 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016ab8:	46c0      	nop			@ (mov r8, r8)
    return;
 8016aba:	e18b      	b.n	8016dd4 <HAL_UART_IRQHandler+0x5bc>
 8016abc:	0000080f 	.word	0x0000080f
 8016ac0:	04000120 	.word	0x04000120
 8016ac4:	08017e61 	.word	0x08017e61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016acc:	2b01      	cmp	r3, #1
 8016ace:	d000      	beq.n	8016ad2 <HAL_UART_IRQHandler+0x2ba>
 8016ad0:	e13d      	b.n	8016d4e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8016ad2:	23a4      	movs	r3, #164	@ 0xa4
 8016ad4:	18fb      	adds	r3, r7, r3
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	2210      	movs	r2, #16
 8016ada:	4013      	ands	r3, r2
 8016adc:	d100      	bne.n	8016ae0 <HAL_UART_IRQHandler+0x2c8>
 8016ade:	e136      	b.n	8016d4e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016ae0:	23a0      	movs	r3, #160	@ 0xa0
 8016ae2:	18fb      	adds	r3, r7, r3
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	2210      	movs	r2, #16
 8016ae8:	4013      	ands	r3, r2
 8016aea:	d100      	bne.n	8016aee <HAL_UART_IRQHandler+0x2d6>
 8016aec:	e12f      	b.n	8016d4e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	2210      	movs	r2, #16
 8016af4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	689b      	ldr	r3, [r3, #8]
 8016afc:	2240      	movs	r2, #64	@ 0x40
 8016afe:	4013      	ands	r3, r2
 8016b00:	2b40      	cmp	r3, #64	@ 0x40
 8016b02:	d000      	beq.n	8016b06 <HAL_UART_IRQHandler+0x2ee>
 8016b04:	e0a2      	b.n	8016c4c <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	685a      	ldr	r2, [r3, #4]
 8016b0e:	217e      	movs	r1, #126	@ 0x7e
 8016b10:	187b      	adds	r3, r7, r1
 8016b12:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8016b14:	187b      	adds	r3, r7, r1
 8016b16:	881b      	ldrh	r3, [r3, #0]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d100      	bne.n	8016b1e <HAL_UART_IRQHandler+0x306>
 8016b1c:	e15c      	b.n	8016dd8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	2258      	movs	r2, #88	@ 0x58
 8016b22:	5a9b      	ldrh	r3, [r3, r2]
 8016b24:	187a      	adds	r2, r7, r1
 8016b26:	8812      	ldrh	r2, [r2, #0]
 8016b28:	429a      	cmp	r2, r3
 8016b2a:	d300      	bcc.n	8016b2e <HAL_UART_IRQHandler+0x316>
 8016b2c:	e154      	b.n	8016dd8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	187a      	adds	r2, r7, r1
 8016b32:	215a      	movs	r1, #90	@ 0x5a
 8016b34:	8812      	ldrh	r2, [r2, #0]
 8016b36:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	2220      	movs	r2, #32
 8016b42:	4013      	ands	r3, r2
 8016b44:	d16f      	bne.n	8016c26 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b46:	f3ef 8310 	mrs	r3, PRIMASK
 8016b4a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8016b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016b4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016b50:	2301      	movs	r3, #1
 8016b52:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016b56:	f383 8810 	msr	PRIMASK, r3
}
 8016b5a:	46c0      	nop			@ (mov r8, r8)
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	681a      	ldr	r2, [r3, #0]
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	49a0      	ldr	r1, [pc, #640]	@ (8016de8 <HAL_UART_IRQHandler+0x5d0>)
 8016b68:	400a      	ands	r2, r1
 8016b6a:	601a      	str	r2, [r3, #0]
 8016b6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016b72:	f383 8810 	msr	PRIMASK, r3
}
 8016b76:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b78:	f3ef 8310 	mrs	r3, PRIMASK
 8016b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8016b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016b80:	677b      	str	r3, [r7, #116]	@ 0x74
 8016b82:	2301      	movs	r3, #1
 8016b84:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016b88:	f383 8810 	msr	PRIMASK, r3
}
 8016b8c:	46c0      	nop			@ (mov r8, r8)
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	689a      	ldr	r2, [r3, #8]
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	2101      	movs	r1, #1
 8016b9a:	438a      	bics	r2, r1
 8016b9c:	609a      	str	r2, [r3, #8]
 8016b9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016ba0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016ba4:	f383 8810 	msr	PRIMASK, r3
}
 8016ba8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016baa:	f3ef 8310 	mrs	r3, PRIMASK
 8016bae:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8016bb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016bb2:	673b      	str	r3, [r7, #112]	@ 0x70
 8016bb4:	2301      	movs	r3, #1
 8016bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016bba:	f383 8810 	msr	PRIMASK, r3
}
 8016bbe:	46c0      	nop			@ (mov r8, r8)
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	689a      	ldr	r2, [r3, #8]
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	2140      	movs	r1, #64	@ 0x40
 8016bcc:	438a      	bics	r2, r1
 8016bce:	609a      	str	r2, [r3, #8]
 8016bd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016bd2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016bd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016bd6:	f383 8810 	msr	PRIMASK, r3
}
 8016bda:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	2280      	movs	r2, #128	@ 0x80
 8016be0:	2120      	movs	r1, #32
 8016be2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	2200      	movs	r2, #0
 8016be8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016bea:	f3ef 8310 	mrs	r3, PRIMASK
 8016bee:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8016bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016bf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8016bf4:	2301      	movs	r3, #1
 8016bf6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016bf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016bfa:	f383 8810 	msr	PRIMASK, r3
}
 8016bfe:	46c0      	nop			@ (mov r8, r8)
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	681a      	ldr	r2, [r3, #0]
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	2110      	movs	r1, #16
 8016c0c:	438a      	bics	r2, r1
 8016c0e:	601a      	str	r2, [r3, #0]
 8016c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016c12:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016c16:	f383 8810 	msr	PRIMASK, r3
}
 8016c1a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c20:	0018      	movs	r0, r3
 8016c22:	f7f7 ffd7 	bl	800ebd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	2202      	movs	r2, #2
 8016c2a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	22ac      	movs	r2, #172	@ 0xac
 8016c30:	589b      	ldr	r3, [r3, r2]
 8016c32:	687a      	ldr	r2, [r7, #4]
 8016c34:	2158      	movs	r1, #88	@ 0x58
 8016c36:	5a51      	ldrh	r1, [r2, r1]
 8016c38:	687a      	ldr	r2, [r7, #4]
 8016c3a:	205a      	movs	r0, #90	@ 0x5a
 8016c3c:	5a12      	ldrh	r2, [r2, r0]
 8016c3e:	b292      	uxth	r2, r2
 8016c40:	1a8a      	subs	r2, r1, r2
 8016c42:	b291      	uxth	r1, r2
 8016c44:	687a      	ldr	r2, [r7, #4]
 8016c46:	0010      	movs	r0, r2
 8016c48:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016c4a:	e0c5      	b.n	8016dd8 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	2258      	movs	r2, #88	@ 0x58
 8016c50:	5a99      	ldrh	r1, [r3, r2]
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	225a      	movs	r2, #90	@ 0x5a
 8016c56:	5a9b      	ldrh	r3, [r3, r2]
 8016c58:	b29a      	uxth	r2, r3
 8016c5a:	208e      	movs	r0, #142	@ 0x8e
 8016c5c:	183b      	adds	r3, r7, r0
 8016c5e:	1a8a      	subs	r2, r1, r2
 8016c60:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	225a      	movs	r2, #90	@ 0x5a
 8016c66:	5a9b      	ldrh	r3, [r3, r2]
 8016c68:	b29b      	uxth	r3, r3
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d100      	bne.n	8016c70 <HAL_UART_IRQHandler+0x458>
 8016c6e:	e0b5      	b.n	8016ddc <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8016c70:	183b      	adds	r3, r7, r0
 8016c72:	881b      	ldrh	r3, [r3, #0]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d100      	bne.n	8016c7a <HAL_UART_IRQHandler+0x462>
 8016c78:	e0b0      	b.n	8016ddc <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8016c7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8016c80:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016c82:	2488      	movs	r4, #136	@ 0x88
 8016c84:	193a      	adds	r2, r7, r4
 8016c86:	6013      	str	r3, [r2, #0]
 8016c88:	2301      	movs	r3, #1
 8016c8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c8c:	693b      	ldr	r3, [r7, #16]
 8016c8e:	f383 8810 	msr	PRIMASK, r3
}
 8016c92:	46c0      	nop			@ (mov r8, r8)
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	681a      	ldr	r2, [r3, #0]
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	4953      	ldr	r1, [pc, #332]	@ (8016dec <HAL_UART_IRQHandler+0x5d4>)
 8016ca0:	400a      	ands	r2, r1
 8016ca2:	601a      	str	r2, [r3, #0]
 8016ca4:	193b      	adds	r3, r7, r4
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016caa:	697b      	ldr	r3, [r7, #20]
 8016cac:	f383 8810 	msr	PRIMASK, r3
}
 8016cb0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8016cb6:	61bb      	str	r3, [r7, #24]
  return(result);
 8016cb8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016cba:	2484      	movs	r4, #132	@ 0x84
 8016cbc:	193a      	adds	r2, r7, r4
 8016cbe:	6013      	str	r3, [r2, #0]
 8016cc0:	2301      	movs	r3, #1
 8016cc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cc4:	69fb      	ldr	r3, [r7, #28]
 8016cc6:	f383 8810 	msr	PRIMASK, r3
}
 8016cca:	46c0      	nop			@ (mov r8, r8)
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	689a      	ldr	r2, [r3, #8]
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	2101      	movs	r1, #1
 8016cd8:	438a      	bics	r2, r1
 8016cda:	609a      	str	r2, [r3, #8]
 8016cdc:	193b      	adds	r3, r7, r4
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ce2:	6a3b      	ldr	r3, [r7, #32]
 8016ce4:	f383 8810 	msr	PRIMASK, r3
}
 8016ce8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	2280      	movs	r2, #128	@ 0x80
 8016cee:	2120      	movs	r1, #32
 8016cf0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8016d02:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8016d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016d06:	2480      	movs	r4, #128	@ 0x80
 8016d08:	193a      	adds	r2, r7, r4
 8016d0a:	6013      	str	r3, [r2, #0]
 8016d0c:	2301      	movs	r3, #1
 8016d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d12:	f383 8810 	msr	PRIMASK, r3
}
 8016d16:	46c0      	nop			@ (mov r8, r8)
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	681a      	ldr	r2, [r3, #0]
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	2110      	movs	r1, #16
 8016d24:	438a      	bics	r2, r1
 8016d26:	601a      	str	r2, [r3, #0]
 8016d28:	193b      	adds	r3, r7, r4
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d30:	f383 8810 	msr	PRIMASK, r3
}
 8016d34:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	2202      	movs	r2, #2
 8016d3a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	22ac      	movs	r2, #172	@ 0xac
 8016d40:	589b      	ldr	r3, [r3, r2]
 8016d42:	183a      	adds	r2, r7, r0
 8016d44:	8811      	ldrh	r1, [r2, #0]
 8016d46:	687a      	ldr	r2, [r7, #4]
 8016d48:	0010      	movs	r0, r2
 8016d4a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016d4c:	e046      	b.n	8016ddc <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8016d4e:	23a4      	movs	r3, #164	@ 0xa4
 8016d50:	18fb      	adds	r3, r7, r3
 8016d52:	681a      	ldr	r2, [r3, #0]
 8016d54:	2380      	movs	r3, #128	@ 0x80
 8016d56:	035b      	lsls	r3, r3, #13
 8016d58:	4013      	ands	r3, r2
 8016d5a:	d012      	beq.n	8016d82 <HAL_UART_IRQHandler+0x56a>
 8016d5c:	239c      	movs	r3, #156	@ 0x9c
 8016d5e:	18fb      	adds	r3, r7, r3
 8016d60:	681a      	ldr	r2, [r3, #0]
 8016d62:	2380      	movs	r3, #128	@ 0x80
 8016d64:	03db      	lsls	r3, r3, #15
 8016d66:	4013      	ands	r3, r2
 8016d68:	d00b      	beq.n	8016d82 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	2280      	movs	r2, #128	@ 0x80
 8016d70:	0352      	lsls	r2, r2, #13
 8016d72:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	22a8      	movs	r2, #168	@ 0xa8
 8016d78:	589b      	ldr	r3, [r3, r2]
 8016d7a:	687a      	ldr	r2, [r7, #4]
 8016d7c:	0010      	movs	r0, r2
 8016d7e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016d80:	e02f      	b.n	8016de2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8016d82:	23a4      	movs	r3, #164	@ 0xa4
 8016d84:	18fb      	adds	r3, r7, r3
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	2280      	movs	r2, #128	@ 0x80
 8016d8a:	4013      	ands	r3, r2
 8016d8c:	d00f      	beq.n	8016dae <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8016d8e:	23a0      	movs	r3, #160	@ 0xa0
 8016d90:	18fb      	adds	r3, r7, r3
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	2280      	movs	r2, #128	@ 0x80
 8016d96:	4013      	ands	r3, r2
 8016d98:	d009      	beq.n	8016dae <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d01e      	beq.n	8016de0 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016da6:	687a      	ldr	r2, [r7, #4]
 8016da8:	0010      	movs	r0, r2
 8016daa:	4798      	blx	r3
    }
    return;
 8016dac:	e018      	b.n	8016de0 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016dae:	23a4      	movs	r3, #164	@ 0xa4
 8016db0:	18fb      	adds	r3, r7, r3
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	2240      	movs	r2, #64	@ 0x40
 8016db6:	4013      	ands	r3, r2
 8016db8:	d013      	beq.n	8016de2 <HAL_UART_IRQHandler+0x5ca>
 8016dba:	23a0      	movs	r3, #160	@ 0xa0
 8016dbc:	18fb      	adds	r3, r7, r3
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	2240      	movs	r2, #64	@ 0x40
 8016dc2:	4013      	ands	r3, r2
 8016dc4:	d00d      	beq.n	8016de2 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	0018      	movs	r0, r3
 8016dca:	f001 f862 	bl	8017e92 <UART_EndTransmit_IT>
    return;
 8016dce:	e008      	b.n	8016de2 <HAL_UART_IRQHandler+0x5ca>
      return;
 8016dd0:	46c0      	nop			@ (mov r8, r8)
 8016dd2:	e006      	b.n	8016de2 <HAL_UART_IRQHandler+0x5ca>
    return;
 8016dd4:	46c0      	nop			@ (mov r8, r8)
 8016dd6:	e004      	b.n	8016de2 <HAL_UART_IRQHandler+0x5ca>
      return;
 8016dd8:	46c0      	nop			@ (mov r8, r8)
 8016dda:	e002      	b.n	8016de2 <HAL_UART_IRQHandler+0x5ca>
      return;
 8016ddc:	46c0      	nop			@ (mov r8, r8)
 8016dde:	e000      	b.n	8016de2 <HAL_UART_IRQHandler+0x5ca>
    return;
 8016de0:	46c0      	nop			@ (mov r8, r8)
  }

}
 8016de2:	46bd      	mov	sp, r7
 8016de4:	b02b      	add	sp, #172	@ 0xac
 8016de6:	bd90      	pop	{r4, r7, pc}
 8016de8:	fffffeff 	.word	0xfffffeff
 8016dec:	fffffedf 	.word	0xfffffedf

08016df0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b082      	sub	sp, #8
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8016df8:	46c0      	nop			@ (mov r8, r8)
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	b002      	add	sp, #8
 8016dfe:	bd80      	pop	{r7, pc}

08016e00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b082      	sub	sp, #8
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8016e08:	46c0      	nop			@ (mov r8, r8)
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	b002      	add	sp, #8
 8016e0e:	bd80      	pop	{r7, pc}

08016e10 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b082      	sub	sp, #8
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8016e18:	46c0      	nop			@ (mov r8, r8)
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	b002      	add	sp, #8
 8016e1e:	bd80      	pop	{r7, pc}

08016e20 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	b082      	sub	sp, #8
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8016e28:	46c0      	nop			@ (mov r8, r8)
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	b002      	add	sp, #8
 8016e2e:	bd80      	pop	{r7, pc}

08016e30 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b082      	sub	sp, #8
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8016e38:	46c0      	nop			@ (mov r8, r8)
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	b002      	add	sp, #8
 8016e3e:	bd80      	pop	{r7, pc}

08016e40 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8016e40:	b580      	push	{r7, lr}
 8016e42:	b082      	sub	sp, #8
 8016e44:	af00      	add	r7, sp, #0
 8016e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8016e48:	46c0      	nop			@ (mov r8, r8)
 8016e4a:	46bd      	mov	sp, r7
 8016e4c:	b002      	add	sp, #8
 8016e4e:	bd80      	pop	{r7, pc}

08016e50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b082      	sub	sp, #8
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
 8016e58:	000a      	movs	r2, r1
 8016e5a:	1cbb      	adds	r3, r7, #2
 8016e5c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016e5e:	46c0      	nop			@ (mov r8, r8)
 8016e60:	46bd      	mov	sp, r7
 8016e62:	b002      	add	sp, #8
 8016e64:	bd80      	pop	{r7, pc}
	...

08016e68 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b082      	sub	sp, #8
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	2188      	movs	r1, #136	@ 0x88
 8016e74:	4a14      	ldr	r2, [pc, #80]	@ (8016ec8 <UART_InitCallbacksToDefault+0x60>)
 8016e76:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	218c      	movs	r1, #140	@ 0x8c
 8016e7c:	4a13      	ldr	r2, [pc, #76]	@ (8016ecc <UART_InitCallbacksToDefault+0x64>)
 8016e7e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	2190      	movs	r1, #144	@ 0x90
 8016e84:	4a12      	ldr	r2, [pc, #72]	@ (8016ed0 <UART_InitCallbacksToDefault+0x68>)
 8016e86:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	2194      	movs	r1, #148	@ 0x94
 8016e8c:	4a11      	ldr	r2, [pc, #68]	@ (8016ed4 <UART_InitCallbacksToDefault+0x6c>)
 8016e8e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	2198      	movs	r1, #152	@ 0x98
 8016e94:	4a10      	ldr	r2, [pc, #64]	@ (8016ed8 <UART_InitCallbacksToDefault+0x70>)
 8016e96:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	219c      	movs	r1, #156	@ 0x9c
 8016e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8016edc <UART_InitCallbacksToDefault+0x74>)
 8016e9e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	21a0      	movs	r1, #160	@ 0xa0
 8016ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8016ee0 <UART_InitCallbacksToDefault+0x78>)
 8016ea6:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	21a4      	movs	r1, #164	@ 0xa4
 8016eac:	4a0d      	ldr	r2, [pc, #52]	@ (8016ee4 <UART_InitCallbacksToDefault+0x7c>)
 8016eae:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	21a8      	movs	r1, #168	@ 0xa8
 8016eb4:	4a0c      	ldr	r2, [pc, #48]	@ (8016ee8 <UART_InitCallbacksToDefault+0x80>)
 8016eb6:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	21ac      	movs	r1, #172	@ 0xac
 8016ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8016eec <UART_InitCallbacksToDefault+0x84>)
 8016ebe:	505a      	str	r2, [r3, r1]

}
 8016ec0:	46c0      	nop			@ (mov r8, r8)
 8016ec2:	46bd      	mov	sp, r7
 8016ec4:	b002      	add	sp, #8
 8016ec6:	bd80      	pop	{r7, pc}
 8016ec8:	08016e01 	.word	0x08016e01
 8016ecc:	08016df1 	.word	0x08016df1
 8016ed0:	08016e11 	.word	0x08016e11
 8016ed4:	08007e51 	.word	0x08007e51
 8016ed8:	08003bc1 	.word	0x08003bc1
 8016edc:	08016e21 	.word	0x08016e21
 8016ee0:	08016e31 	.word	0x08016e31
 8016ee4:	08016e41 	.word	0x08016e41
 8016ee8:	08018285 	.word	0x08018285
 8016eec:	08016e51 	.word	0x08016e51

08016ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016ef0:	b5b0      	push	{r4, r5, r7, lr}
 8016ef2:	b08e      	sub	sp, #56	@ 0x38
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8016ef8:	231a      	movs	r3, #26
 8016efa:	2218      	movs	r2, #24
 8016efc:	189b      	adds	r3, r3, r2
 8016efe:	19db      	adds	r3, r3, r7
 8016f00:	2200      	movs	r2, #0
 8016f02:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016f04:	69fb      	ldr	r3, [r7, #28]
 8016f06:	689a      	ldr	r2, [r3, #8]
 8016f08:	69fb      	ldr	r3, [r7, #28]
 8016f0a:	691b      	ldr	r3, [r3, #16]
 8016f0c:	431a      	orrs	r2, r3
 8016f0e:	69fb      	ldr	r3, [r7, #28]
 8016f10:	695b      	ldr	r3, [r3, #20]
 8016f12:	431a      	orrs	r2, r3
 8016f14:	69fb      	ldr	r3, [r7, #28]
 8016f16:	69db      	ldr	r3, [r3, #28]
 8016f18:	4313      	orrs	r3, r2
 8016f1a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016f1c:	69fb      	ldr	r3, [r7, #28]
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	4ac3      	ldr	r2, [pc, #780]	@ (8017230 <UART_SetConfig+0x340>)
 8016f24:	4013      	ands	r3, r2
 8016f26:	0019      	movs	r1, r3
 8016f28:	69fb      	ldr	r3, [r7, #28]
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016f2e:	430a      	orrs	r2, r1
 8016f30:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016f32:	69fb      	ldr	r3, [r7, #28]
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	685b      	ldr	r3, [r3, #4]
 8016f38:	4abe      	ldr	r2, [pc, #760]	@ (8017234 <UART_SetConfig+0x344>)
 8016f3a:	4013      	ands	r3, r2
 8016f3c:	0019      	movs	r1, r3
 8016f3e:	69fb      	ldr	r3, [r7, #28]
 8016f40:	68da      	ldr	r2, [r3, #12]
 8016f42:	69fb      	ldr	r3, [r7, #28]
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	430a      	orrs	r2, r1
 8016f48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8016f4a:	69fb      	ldr	r3, [r7, #28]
 8016f4c:	699b      	ldr	r3, [r3, #24]
 8016f4e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016f50:	69fb      	ldr	r3, [r7, #28]
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	4ab8      	ldr	r2, [pc, #736]	@ (8017238 <UART_SetConfig+0x348>)
 8016f56:	4293      	cmp	r3, r2
 8016f58:	d004      	beq.n	8016f64 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8016f5a:	69fb      	ldr	r3, [r7, #28]
 8016f5c:	6a1b      	ldr	r3, [r3, #32]
 8016f5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016f60:	4313      	orrs	r3, r2
 8016f62:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016f64:	69fb      	ldr	r3, [r7, #28]
 8016f66:	681b      	ldr	r3, [r3, #0]
 8016f68:	689b      	ldr	r3, [r3, #8]
 8016f6a:	4ab4      	ldr	r2, [pc, #720]	@ (801723c <UART_SetConfig+0x34c>)
 8016f6c:	4013      	ands	r3, r2
 8016f6e:	0019      	movs	r1, r3
 8016f70:	69fb      	ldr	r3, [r7, #28]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016f76:	430a      	orrs	r2, r1
 8016f78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016f7a:	69fb      	ldr	r3, [r7, #28]
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	4ab0      	ldr	r2, [pc, #704]	@ (8017240 <UART_SetConfig+0x350>)
 8016f80:	4293      	cmp	r3, r2
 8016f82:	d131      	bne.n	8016fe8 <UART_SetConfig+0xf8>
 8016f84:	4baf      	ldr	r3, [pc, #700]	@ (8017244 <UART_SetConfig+0x354>)
 8016f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016f88:	2203      	movs	r2, #3
 8016f8a:	4013      	ands	r3, r2
 8016f8c:	2b03      	cmp	r3, #3
 8016f8e:	d01d      	beq.n	8016fcc <UART_SetConfig+0xdc>
 8016f90:	d823      	bhi.n	8016fda <UART_SetConfig+0xea>
 8016f92:	2b02      	cmp	r3, #2
 8016f94:	d00c      	beq.n	8016fb0 <UART_SetConfig+0xc0>
 8016f96:	d820      	bhi.n	8016fda <UART_SetConfig+0xea>
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d002      	beq.n	8016fa2 <UART_SetConfig+0xb2>
 8016f9c:	2b01      	cmp	r3, #1
 8016f9e:	d00e      	beq.n	8016fbe <UART_SetConfig+0xce>
 8016fa0:	e01b      	b.n	8016fda <UART_SetConfig+0xea>
 8016fa2:	231b      	movs	r3, #27
 8016fa4:	2218      	movs	r2, #24
 8016fa6:	189b      	adds	r3, r3, r2
 8016fa8:	19db      	adds	r3, r3, r7
 8016faa:	2201      	movs	r2, #1
 8016fac:	701a      	strb	r2, [r3, #0]
 8016fae:	e0b4      	b.n	801711a <UART_SetConfig+0x22a>
 8016fb0:	231b      	movs	r3, #27
 8016fb2:	2218      	movs	r2, #24
 8016fb4:	189b      	adds	r3, r3, r2
 8016fb6:	19db      	adds	r3, r3, r7
 8016fb8:	2202      	movs	r2, #2
 8016fba:	701a      	strb	r2, [r3, #0]
 8016fbc:	e0ad      	b.n	801711a <UART_SetConfig+0x22a>
 8016fbe:	231b      	movs	r3, #27
 8016fc0:	2218      	movs	r2, #24
 8016fc2:	189b      	adds	r3, r3, r2
 8016fc4:	19db      	adds	r3, r3, r7
 8016fc6:	2204      	movs	r2, #4
 8016fc8:	701a      	strb	r2, [r3, #0]
 8016fca:	e0a6      	b.n	801711a <UART_SetConfig+0x22a>
 8016fcc:	231b      	movs	r3, #27
 8016fce:	2218      	movs	r2, #24
 8016fd0:	189b      	adds	r3, r3, r2
 8016fd2:	19db      	adds	r3, r3, r7
 8016fd4:	2208      	movs	r2, #8
 8016fd6:	701a      	strb	r2, [r3, #0]
 8016fd8:	e09f      	b.n	801711a <UART_SetConfig+0x22a>
 8016fda:	231b      	movs	r3, #27
 8016fdc:	2218      	movs	r2, #24
 8016fde:	189b      	adds	r3, r3, r2
 8016fe0:	19db      	adds	r3, r3, r7
 8016fe2:	2210      	movs	r2, #16
 8016fe4:	701a      	strb	r2, [r3, #0]
 8016fe6:	e098      	b.n	801711a <UART_SetConfig+0x22a>
 8016fe8:	69fb      	ldr	r3, [r7, #28]
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	4a96      	ldr	r2, [pc, #600]	@ (8017248 <UART_SetConfig+0x358>)
 8016fee:	4293      	cmp	r3, r2
 8016ff0:	d131      	bne.n	8017056 <UART_SetConfig+0x166>
 8016ff2:	4b94      	ldr	r3, [pc, #592]	@ (8017244 <UART_SetConfig+0x354>)
 8016ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016ff6:	220c      	movs	r2, #12
 8016ff8:	4013      	ands	r3, r2
 8016ffa:	2b0c      	cmp	r3, #12
 8016ffc:	d01d      	beq.n	801703a <UART_SetConfig+0x14a>
 8016ffe:	d823      	bhi.n	8017048 <UART_SetConfig+0x158>
 8017000:	2b08      	cmp	r3, #8
 8017002:	d00c      	beq.n	801701e <UART_SetConfig+0x12e>
 8017004:	d820      	bhi.n	8017048 <UART_SetConfig+0x158>
 8017006:	2b00      	cmp	r3, #0
 8017008:	d002      	beq.n	8017010 <UART_SetConfig+0x120>
 801700a:	2b04      	cmp	r3, #4
 801700c:	d00e      	beq.n	801702c <UART_SetConfig+0x13c>
 801700e:	e01b      	b.n	8017048 <UART_SetConfig+0x158>
 8017010:	231b      	movs	r3, #27
 8017012:	2218      	movs	r2, #24
 8017014:	189b      	adds	r3, r3, r2
 8017016:	19db      	adds	r3, r3, r7
 8017018:	2200      	movs	r2, #0
 801701a:	701a      	strb	r2, [r3, #0]
 801701c:	e07d      	b.n	801711a <UART_SetConfig+0x22a>
 801701e:	231b      	movs	r3, #27
 8017020:	2218      	movs	r2, #24
 8017022:	189b      	adds	r3, r3, r2
 8017024:	19db      	adds	r3, r3, r7
 8017026:	2202      	movs	r2, #2
 8017028:	701a      	strb	r2, [r3, #0]
 801702a:	e076      	b.n	801711a <UART_SetConfig+0x22a>
 801702c:	231b      	movs	r3, #27
 801702e:	2218      	movs	r2, #24
 8017030:	189b      	adds	r3, r3, r2
 8017032:	19db      	adds	r3, r3, r7
 8017034:	2204      	movs	r2, #4
 8017036:	701a      	strb	r2, [r3, #0]
 8017038:	e06f      	b.n	801711a <UART_SetConfig+0x22a>
 801703a:	231b      	movs	r3, #27
 801703c:	2218      	movs	r2, #24
 801703e:	189b      	adds	r3, r3, r2
 8017040:	19db      	adds	r3, r3, r7
 8017042:	2208      	movs	r2, #8
 8017044:	701a      	strb	r2, [r3, #0]
 8017046:	e068      	b.n	801711a <UART_SetConfig+0x22a>
 8017048:	231b      	movs	r3, #27
 801704a:	2218      	movs	r2, #24
 801704c:	189b      	adds	r3, r3, r2
 801704e:	19db      	adds	r3, r3, r7
 8017050:	2210      	movs	r2, #16
 8017052:	701a      	strb	r2, [r3, #0]
 8017054:	e061      	b.n	801711a <UART_SetConfig+0x22a>
 8017056:	69fb      	ldr	r3, [r7, #28]
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	4a7c      	ldr	r2, [pc, #496]	@ (801724c <UART_SetConfig+0x35c>)
 801705c:	4293      	cmp	r3, r2
 801705e:	d106      	bne.n	801706e <UART_SetConfig+0x17e>
 8017060:	231b      	movs	r3, #27
 8017062:	2218      	movs	r2, #24
 8017064:	189b      	adds	r3, r3, r2
 8017066:	19db      	adds	r3, r3, r7
 8017068:	2200      	movs	r2, #0
 801706a:	701a      	strb	r2, [r3, #0]
 801706c:	e055      	b.n	801711a <UART_SetConfig+0x22a>
 801706e:	69fb      	ldr	r3, [r7, #28]
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	4a77      	ldr	r2, [pc, #476]	@ (8017250 <UART_SetConfig+0x360>)
 8017074:	4293      	cmp	r3, r2
 8017076:	d106      	bne.n	8017086 <UART_SetConfig+0x196>
 8017078:	231b      	movs	r3, #27
 801707a:	2218      	movs	r2, #24
 801707c:	189b      	adds	r3, r3, r2
 801707e:	19db      	adds	r3, r3, r7
 8017080:	2200      	movs	r2, #0
 8017082:	701a      	strb	r2, [r3, #0]
 8017084:	e049      	b.n	801711a <UART_SetConfig+0x22a>
 8017086:	69fb      	ldr	r3, [r7, #28]
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	4a6b      	ldr	r2, [pc, #428]	@ (8017238 <UART_SetConfig+0x348>)
 801708c:	4293      	cmp	r3, r2
 801708e:	d13e      	bne.n	801710e <UART_SetConfig+0x21e>
 8017090:	4b6c      	ldr	r3, [pc, #432]	@ (8017244 <UART_SetConfig+0x354>)
 8017092:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017094:	23c0      	movs	r3, #192	@ 0xc0
 8017096:	011b      	lsls	r3, r3, #4
 8017098:	4013      	ands	r3, r2
 801709a:	22c0      	movs	r2, #192	@ 0xc0
 801709c:	0112      	lsls	r2, r2, #4
 801709e:	4293      	cmp	r3, r2
 80170a0:	d027      	beq.n	80170f2 <UART_SetConfig+0x202>
 80170a2:	22c0      	movs	r2, #192	@ 0xc0
 80170a4:	0112      	lsls	r2, r2, #4
 80170a6:	4293      	cmp	r3, r2
 80170a8:	d82a      	bhi.n	8017100 <UART_SetConfig+0x210>
 80170aa:	2280      	movs	r2, #128	@ 0x80
 80170ac:	0112      	lsls	r2, r2, #4
 80170ae:	4293      	cmp	r3, r2
 80170b0:	d011      	beq.n	80170d6 <UART_SetConfig+0x1e6>
 80170b2:	2280      	movs	r2, #128	@ 0x80
 80170b4:	0112      	lsls	r2, r2, #4
 80170b6:	4293      	cmp	r3, r2
 80170b8:	d822      	bhi.n	8017100 <UART_SetConfig+0x210>
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d004      	beq.n	80170c8 <UART_SetConfig+0x1d8>
 80170be:	2280      	movs	r2, #128	@ 0x80
 80170c0:	00d2      	lsls	r2, r2, #3
 80170c2:	4293      	cmp	r3, r2
 80170c4:	d00e      	beq.n	80170e4 <UART_SetConfig+0x1f4>
 80170c6:	e01b      	b.n	8017100 <UART_SetConfig+0x210>
 80170c8:	231b      	movs	r3, #27
 80170ca:	2218      	movs	r2, #24
 80170cc:	189b      	adds	r3, r3, r2
 80170ce:	19db      	adds	r3, r3, r7
 80170d0:	2200      	movs	r2, #0
 80170d2:	701a      	strb	r2, [r3, #0]
 80170d4:	e021      	b.n	801711a <UART_SetConfig+0x22a>
 80170d6:	231b      	movs	r3, #27
 80170d8:	2218      	movs	r2, #24
 80170da:	189b      	adds	r3, r3, r2
 80170dc:	19db      	adds	r3, r3, r7
 80170de:	2202      	movs	r2, #2
 80170e0:	701a      	strb	r2, [r3, #0]
 80170e2:	e01a      	b.n	801711a <UART_SetConfig+0x22a>
 80170e4:	231b      	movs	r3, #27
 80170e6:	2218      	movs	r2, #24
 80170e8:	189b      	adds	r3, r3, r2
 80170ea:	19db      	adds	r3, r3, r7
 80170ec:	2204      	movs	r2, #4
 80170ee:	701a      	strb	r2, [r3, #0]
 80170f0:	e013      	b.n	801711a <UART_SetConfig+0x22a>
 80170f2:	231b      	movs	r3, #27
 80170f4:	2218      	movs	r2, #24
 80170f6:	189b      	adds	r3, r3, r2
 80170f8:	19db      	adds	r3, r3, r7
 80170fa:	2208      	movs	r2, #8
 80170fc:	701a      	strb	r2, [r3, #0]
 80170fe:	e00c      	b.n	801711a <UART_SetConfig+0x22a>
 8017100:	231b      	movs	r3, #27
 8017102:	2218      	movs	r2, #24
 8017104:	189b      	adds	r3, r3, r2
 8017106:	19db      	adds	r3, r3, r7
 8017108:	2210      	movs	r2, #16
 801710a:	701a      	strb	r2, [r3, #0]
 801710c:	e005      	b.n	801711a <UART_SetConfig+0x22a>
 801710e:	231b      	movs	r3, #27
 8017110:	2218      	movs	r2, #24
 8017112:	189b      	adds	r3, r3, r2
 8017114:	19db      	adds	r3, r3, r7
 8017116:	2210      	movs	r2, #16
 8017118:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801711a:	69fb      	ldr	r3, [r7, #28]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	4a46      	ldr	r2, [pc, #280]	@ (8017238 <UART_SetConfig+0x348>)
 8017120:	4293      	cmp	r3, r2
 8017122:	d000      	beq.n	8017126 <UART_SetConfig+0x236>
 8017124:	e09a      	b.n	801725c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8017126:	231b      	movs	r3, #27
 8017128:	2218      	movs	r2, #24
 801712a:	189b      	adds	r3, r3, r2
 801712c:	19db      	adds	r3, r3, r7
 801712e:	781b      	ldrb	r3, [r3, #0]
 8017130:	2b08      	cmp	r3, #8
 8017132:	d01d      	beq.n	8017170 <UART_SetConfig+0x280>
 8017134:	dc20      	bgt.n	8017178 <UART_SetConfig+0x288>
 8017136:	2b04      	cmp	r3, #4
 8017138:	d015      	beq.n	8017166 <UART_SetConfig+0x276>
 801713a:	dc1d      	bgt.n	8017178 <UART_SetConfig+0x288>
 801713c:	2b00      	cmp	r3, #0
 801713e:	d002      	beq.n	8017146 <UART_SetConfig+0x256>
 8017140:	2b02      	cmp	r3, #2
 8017142:	d005      	beq.n	8017150 <UART_SetConfig+0x260>
 8017144:	e018      	b.n	8017178 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017146:	f7fd fe79 	bl	8014e3c <HAL_RCC_GetPCLK1Freq>
 801714a:	0003      	movs	r3, r0
 801714c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801714e:	e01c      	b.n	801718a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017150:	4b3c      	ldr	r3, [pc, #240]	@ (8017244 <UART_SetConfig+0x354>)
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	2210      	movs	r2, #16
 8017156:	4013      	ands	r3, r2
 8017158:	d002      	beq.n	8017160 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801715a:	4b3e      	ldr	r3, [pc, #248]	@ (8017254 <UART_SetConfig+0x364>)
 801715c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801715e:	e014      	b.n	801718a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8017160:	4b3d      	ldr	r3, [pc, #244]	@ (8017258 <UART_SetConfig+0x368>)
 8017162:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017164:	e011      	b.n	801718a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017166:	f7fd fdb9 	bl	8014cdc <HAL_RCC_GetSysClockFreq>
 801716a:	0003      	movs	r3, r0
 801716c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801716e:	e00c      	b.n	801718a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017170:	2380      	movs	r3, #128	@ 0x80
 8017172:	021b      	lsls	r3, r3, #8
 8017174:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017176:	e008      	b.n	801718a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8017178:	2300      	movs	r3, #0
 801717a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801717c:	231a      	movs	r3, #26
 801717e:	2218      	movs	r2, #24
 8017180:	189b      	adds	r3, r3, r2
 8017182:	19db      	adds	r3, r3, r7
 8017184:	2201      	movs	r2, #1
 8017186:	701a      	strb	r2, [r3, #0]
        break;
 8017188:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801718a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801718c:	2b00      	cmp	r3, #0
 801718e:	d100      	bne.n	8017192 <UART_SetConfig+0x2a2>
 8017190:	e133      	b.n	80173fa <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017192:	69fb      	ldr	r3, [r7, #28]
 8017194:	685a      	ldr	r2, [r3, #4]
 8017196:	0013      	movs	r3, r2
 8017198:	005b      	lsls	r3, r3, #1
 801719a:	189b      	adds	r3, r3, r2
 801719c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801719e:	429a      	cmp	r2, r3
 80171a0:	d305      	bcc.n	80171ae <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80171a2:	69fb      	ldr	r3, [r7, #28]
 80171a4:	685b      	ldr	r3, [r3, #4]
 80171a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80171a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80171aa:	429a      	cmp	r2, r3
 80171ac:	d906      	bls.n	80171bc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80171ae:	231a      	movs	r3, #26
 80171b0:	2218      	movs	r2, #24
 80171b2:	189b      	adds	r3, r3, r2
 80171b4:	19db      	adds	r3, r3, r7
 80171b6:	2201      	movs	r2, #1
 80171b8:	701a      	strb	r2, [r3, #0]
 80171ba:	e11e      	b.n	80173fa <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80171bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80171be:	613b      	str	r3, [r7, #16]
 80171c0:	2300      	movs	r3, #0
 80171c2:	617b      	str	r3, [r7, #20]
 80171c4:	6939      	ldr	r1, [r7, #16]
 80171c6:	697a      	ldr	r2, [r7, #20]
 80171c8:	000b      	movs	r3, r1
 80171ca:	0e1b      	lsrs	r3, r3, #24
 80171cc:	0010      	movs	r0, r2
 80171ce:	0205      	lsls	r5, r0, #8
 80171d0:	431d      	orrs	r5, r3
 80171d2:	000b      	movs	r3, r1
 80171d4:	021c      	lsls	r4, r3, #8
 80171d6:	69fb      	ldr	r3, [r7, #28]
 80171d8:	685b      	ldr	r3, [r3, #4]
 80171da:	085b      	lsrs	r3, r3, #1
 80171dc:	60bb      	str	r3, [r7, #8]
 80171de:	2300      	movs	r3, #0
 80171e0:	60fb      	str	r3, [r7, #12]
 80171e2:	68b8      	ldr	r0, [r7, #8]
 80171e4:	68f9      	ldr	r1, [r7, #12]
 80171e6:	1900      	adds	r0, r0, r4
 80171e8:	4169      	adcs	r1, r5
 80171ea:	69fb      	ldr	r3, [r7, #28]
 80171ec:	685b      	ldr	r3, [r3, #4]
 80171ee:	603b      	str	r3, [r7, #0]
 80171f0:	2300      	movs	r3, #0
 80171f2:	607b      	str	r3, [r7, #4]
 80171f4:	683a      	ldr	r2, [r7, #0]
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	f7e9 f9c2 	bl	8000580 <__aeabi_uldivmod>
 80171fc:	0002      	movs	r2, r0
 80171fe:	000b      	movs	r3, r1
 8017200:	0013      	movs	r3, r2
 8017202:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017204:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017206:	23c0      	movs	r3, #192	@ 0xc0
 8017208:	009b      	lsls	r3, r3, #2
 801720a:	429a      	cmp	r2, r3
 801720c:	d309      	bcc.n	8017222 <UART_SetConfig+0x332>
 801720e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017210:	2380      	movs	r3, #128	@ 0x80
 8017212:	035b      	lsls	r3, r3, #13
 8017214:	429a      	cmp	r2, r3
 8017216:	d204      	bcs.n	8017222 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8017218:	69fb      	ldr	r3, [r7, #28]
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801721e:	60da      	str	r2, [r3, #12]
 8017220:	e0eb      	b.n	80173fa <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8017222:	231a      	movs	r3, #26
 8017224:	2218      	movs	r2, #24
 8017226:	189b      	adds	r3, r3, r2
 8017228:	19db      	adds	r3, r3, r7
 801722a:	2201      	movs	r2, #1
 801722c:	701a      	strb	r2, [r3, #0]
 801722e:	e0e4      	b.n	80173fa <UART_SetConfig+0x50a>
 8017230:	efff69f3 	.word	0xefff69f3
 8017234:	ffffcfff 	.word	0xffffcfff
 8017238:	40004800 	.word	0x40004800
 801723c:	fffff4ff 	.word	0xfffff4ff
 8017240:	40013800 	.word	0x40013800
 8017244:	40021000 	.word	0x40021000
 8017248:	40004400 	.word	0x40004400
 801724c:	40004c00 	.word	0x40004c00
 8017250:	40005000 	.word	0x40005000
 8017254:	003d0900 	.word	0x003d0900
 8017258:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801725c:	69fb      	ldr	r3, [r7, #28]
 801725e:	69da      	ldr	r2, [r3, #28]
 8017260:	2380      	movs	r3, #128	@ 0x80
 8017262:	021b      	lsls	r3, r3, #8
 8017264:	429a      	cmp	r2, r3
 8017266:	d000      	beq.n	801726a <UART_SetConfig+0x37a>
 8017268:	e070      	b.n	801734c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801726a:	231b      	movs	r3, #27
 801726c:	2218      	movs	r2, #24
 801726e:	189b      	adds	r3, r3, r2
 8017270:	19db      	adds	r3, r3, r7
 8017272:	781b      	ldrb	r3, [r3, #0]
 8017274:	2b08      	cmp	r3, #8
 8017276:	d822      	bhi.n	80172be <UART_SetConfig+0x3ce>
 8017278:	009a      	lsls	r2, r3, #2
 801727a:	4b67      	ldr	r3, [pc, #412]	@ (8017418 <UART_SetConfig+0x528>)
 801727c:	18d3      	adds	r3, r2, r3
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017282:	f7fd fddb 	bl	8014e3c <HAL_RCC_GetPCLK1Freq>
 8017286:	0003      	movs	r3, r0
 8017288:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801728a:	e021      	b.n	80172d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801728c:	f7fd fdec 	bl	8014e68 <HAL_RCC_GetPCLK2Freq>
 8017290:	0003      	movs	r3, r0
 8017292:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017294:	e01c      	b.n	80172d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017296:	4b61      	ldr	r3, [pc, #388]	@ (801741c <UART_SetConfig+0x52c>)
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	2210      	movs	r2, #16
 801729c:	4013      	ands	r3, r2
 801729e:	d002      	beq.n	80172a6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80172a0:	4b5f      	ldr	r3, [pc, #380]	@ (8017420 <UART_SetConfig+0x530>)
 80172a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80172a4:	e014      	b.n	80172d0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80172a6:	4b5f      	ldr	r3, [pc, #380]	@ (8017424 <UART_SetConfig+0x534>)
 80172a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80172aa:	e011      	b.n	80172d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80172ac:	f7fd fd16 	bl	8014cdc <HAL_RCC_GetSysClockFreq>
 80172b0:	0003      	movs	r3, r0
 80172b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80172b4:	e00c      	b.n	80172d0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80172b6:	2380      	movs	r3, #128	@ 0x80
 80172b8:	021b      	lsls	r3, r3, #8
 80172ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80172bc:	e008      	b.n	80172d0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80172be:	2300      	movs	r3, #0
 80172c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80172c2:	231a      	movs	r3, #26
 80172c4:	2218      	movs	r2, #24
 80172c6:	189b      	adds	r3, r3, r2
 80172c8:	19db      	adds	r3, r3, r7
 80172ca:	2201      	movs	r2, #1
 80172cc:	701a      	strb	r2, [r3, #0]
        break;
 80172ce:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80172d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d100      	bne.n	80172d8 <UART_SetConfig+0x3e8>
 80172d6:	e090      	b.n	80173fa <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80172d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172da:	005a      	lsls	r2, r3, #1
 80172dc:	69fb      	ldr	r3, [r7, #28]
 80172de:	685b      	ldr	r3, [r3, #4]
 80172e0:	085b      	lsrs	r3, r3, #1
 80172e2:	18d2      	adds	r2, r2, r3
 80172e4:	69fb      	ldr	r3, [r7, #28]
 80172e6:	685b      	ldr	r3, [r3, #4]
 80172e8:	0019      	movs	r1, r3
 80172ea:	0010      	movs	r0, r2
 80172ec:	f7e8 ff5a 	bl	80001a4 <__udivsi3>
 80172f0:	0003      	movs	r3, r0
 80172f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80172f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172f6:	2b0f      	cmp	r3, #15
 80172f8:	d921      	bls.n	801733e <UART_SetConfig+0x44e>
 80172fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80172fc:	2380      	movs	r3, #128	@ 0x80
 80172fe:	025b      	lsls	r3, r3, #9
 8017300:	429a      	cmp	r2, r3
 8017302:	d21c      	bcs.n	801733e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8017304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017306:	b29a      	uxth	r2, r3
 8017308:	200e      	movs	r0, #14
 801730a:	2418      	movs	r4, #24
 801730c:	1903      	adds	r3, r0, r4
 801730e:	19db      	adds	r3, r3, r7
 8017310:	210f      	movs	r1, #15
 8017312:	438a      	bics	r2, r1
 8017314:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8017316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017318:	085b      	lsrs	r3, r3, #1
 801731a:	b29b      	uxth	r3, r3
 801731c:	2207      	movs	r2, #7
 801731e:	4013      	ands	r3, r2
 8017320:	b299      	uxth	r1, r3
 8017322:	1903      	adds	r3, r0, r4
 8017324:	19db      	adds	r3, r3, r7
 8017326:	1902      	adds	r2, r0, r4
 8017328:	19d2      	adds	r2, r2, r7
 801732a:	8812      	ldrh	r2, [r2, #0]
 801732c:	430a      	orrs	r2, r1
 801732e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8017330:	69fb      	ldr	r3, [r7, #28]
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	1902      	adds	r2, r0, r4
 8017336:	19d2      	adds	r2, r2, r7
 8017338:	8812      	ldrh	r2, [r2, #0]
 801733a:	60da      	str	r2, [r3, #12]
 801733c:	e05d      	b.n	80173fa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801733e:	231a      	movs	r3, #26
 8017340:	2218      	movs	r2, #24
 8017342:	189b      	adds	r3, r3, r2
 8017344:	19db      	adds	r3, r3, r7
 8017346:	2201      	movs	r2, #1
 8017348:	701a      	strb	r2, [r3, #0]
 801734a:	e056      	b.n	80173fa <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801734c:	231b      	movs	r3, #27
 801734e:	2218      	movs	r2, #24
 8017350:	189b      	adds	r3, r3, r2
 8017352:	19db      	adds	r3, r3, r7
 8017354:	781b      	ldrb	r3, [r3, #0]
 8017356:	2b08      	cmp	r3, #8
 8017358:	d822      	bhi.n	80173a0 <UART_SetConfig+0x4b0>
 801735a:	009a      	lsls	r2, r3, #2
 801735c:	4b32      	ldr	r3, [pc, #200]	@ (8017428 <UART_SetConfig+0x538>)
 801735e:	18d3      	adds	r3, r2, r3
 8017360:	681b      	ldr	r3, [r3, #0]
 8017362:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017364:	f7fd fd6a 	bl	8014e3c <HAL_RCC_GetPCLK1Freq>
 8017368:	0003      	movs	r3, r0
 801736a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801736c:	e021      	b.n	80173b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801736e:	f7fd fd7b 	bl	8014e68 <HAL_RCC_GetPCLK2Freq>
 8017372:	0003      	movs	r3, r0
 8017374:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017376:	e01c      	b.n	80173b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017378:	4b28      	ldr	r3, [pc, #160]	@ (801741c <UART_SetConfig+0x52c>)
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	2210      	movs	r2, #16
 801737e:	4013      	ands	r3, r2
 8017380:	d002      	beq.n	8017388 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017382:	4b27      	ldr	r3, [pc, #156]	@ (8017420 <UART_SetConfig+0x530>)
 8017384:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017386:	e014      	b.n	80173b2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8017388:	4b26      	ldr	r3, [pc, #152]	@ (8017424 <UART_SetConfig+0x534>)
 801738a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801738c:	e011      	b.n	80173b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801738e:	f7fd fca5 	bl	8014cdc <HAL_RCC_GetSysClockFreq>
 8017392:	0003      	movs	r3, r0
 8017394:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017396:	e00c      	b.n	80173b2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017398:	2380      	movs	r3, #128	@ 0x80
 801739a:	021b      	lsls	r3, r3, #8
 801739c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801739e:	e008      	b.n	80173b2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80173a0:	2300      	movs	r3, #0
 80173a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80173a4:	231a      	movs	r3, #26
 80173a6:	2218      	movs	r2, #24
 80173a8:	189b      	adds	r3, r3, r2
 80173aa:	19db      	adds	r3, r3, r7
 80173ac:	2201      	movs	r2, #1
 80173ae:	701a      	strb	r2, [r3, #0]
        break;
 80173b0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80173b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d020      	beq.n	80173fa <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80173b8:	69fb      	ldr	r3, [r7, #28]
 80173ba:	685b      	ldr	r3, [r3, #4]
 80173bc:	085a      	lsrs	r2, r3, #1
 80173be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173c0:	18d2      	adds	r2, r2, r3
 80173c2:	69fb      	ldr	r3, [r7, #28]
 80173c4:	685b      	ldr	r3, [r3, #4]
 80173c6:	0019      	movs	r1, r3
 80173c8:	0010      	movs	r0, r2
 80173ca:	f7e8 feeb 	bl	80001a4 <__udivsi3>
 80173ce:	0003      	movs	r3, r0
 80173d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80173d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173d4:	2b0f      	cmp	r3, #15
 80173d6:	d90a      	bls.n	80173ee <UART_SetConfig+0x4fe>
 80173d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80173da:	2380      	movs	r3, #128	@ 0x80
 80173dc:	025b      	lsls	r3, r3, #9
 80173de:	429a      	cmp	r2, r3
 80173e0:	d205      	bcs.n	80173ee <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80173e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173e4:	b29a      	uxth	r2, r3
 80173e6:	69fb      	ldr	r3, [r7, #28]
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	60da      	str	r2, [r3, #12]
 80173ec:	e005      	b.n	80173fa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80173ee:	231a      	movs	r3, #26
 80173f0:	2218      	movs	r2, #24
 80173f2:	189b      	adds	r3, r3, r2
 80173f4:	19db      	adds	r3, r3, r7
 80173f6:	2201      	movs	r2, #1
 80173f8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80173fa:	69fb      	ldr	r3, [r7, #28]
 80173fc:	2200      	movs	r2, #0
 80173fe:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8017400:	69fb      	ldr	r3, [r7, #28]
 8017402:	2200      	movs	r2, #0
 8017404:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8017406:	231a      	movs	r3, #26
 8017408:	2218      	movs	r2, #24
 801740a:	189b      	adds	r3, r3, r2
 801740c:	19db      	adds	r3, r3, r7
 801740e:	781b      	ldrb	r3, [r3, #0]
}
 8017410:	0018      	movs	r0, r3
 8017412:	46bd      	mov	sp, r7
 8017414:	b00e      	add	sp, #56	@ 0x38
 8017416:	bdb0      	pop	{r4, r5, r7, pc}
 8017418:	08024350 	.word	0x08024350
 801741c:	40021000 	.word	0x40021000
 8017420:	003d0900 	.word	0x003d0900
 8017424:	00f42400 	.word	0x00f42400
 8017428:	08024374 	.word	0x08024374

0801742c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b082      	sub	sp, #8
 8017430:	af00      	add	r7, sp, #0
 8017432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017438:	2201      	movs	r2, #1
 801743a:	4013      	ands	r3, r2
 801743c:	d00b      	beq.n	8017456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	685b      	ldr	r3, [r3, #4]
 8017444:	4a4a      	ldr	r2, [pc, #296]	@ (8017570 <UART_AdvFeatureConfig+0x144>)
 8017446:	4013      	ands	r3, r2
 8017448:	0019      	movs	r1, r3
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	430a      	orrs	r2, r1
 8017454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801745a:	2202      	movs	r2, #2
 801745c:	4013      	ands	r3, r2
 801745e:	d00b      	beq.n	8017478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	685b      	ldr	r3, [r3, #4]
 8017466:	4a43      	ldr	r2, [pc, #268]	@ (8017574 <UART_AdvFeatureConfig+0x148>)
 8017468:	4013      	ands	r3, r2
 801746a:	0019      	movs	r1, r3
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	430a      	orrs	r2, r1
 8017476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801747c:	2204      	movs	r2, #4
 801747e:	4013      	ands	r3, r2
 8017480:	d00b      	beq.n	801749a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	685b      	ldr	r3, [r3, #4]
 8017488:	4a3b      	ldr	r2, [pc, #236]	@ (8017578 <UART_AdvFeatureConfig+0x14c>)
 801748a:	4013      	ands	r3, r2
 801748c:	0019      	movs	r1, r3
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	430a      	orrs	r2, r1
 8017498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801749e:	2208      	movs	r2, #8
 80174a0:	4013      	ands	r3, r2
 80174a2:	d00b      	beq.n	80174bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	685b      	ldr	r3, [r3, #4]
 80174aa:	4a34      	ldr	r2, [pc, #208]	@ (801757c <UART_AdvFeatureConfig+0x150>)
 80174ac:	4013      	ands	r3, r2
 80174ae:	0019      	movs	r1, r3
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	430a      	orrs	r2, r1
 80174ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174c0:	2210      	movs	r2, #16
 80174c2:	4013      	ands	r3, r2
 80174c4:	d00b      	beq.n	80174de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	689b      	ldr	r3, [r3, #8]
 80174cc:	4a2c      	ldr	r2, [pc, #176]	@ (8017580 <UART_AdvFeatureConfig+0x154>)
 80174ce:	4013      	ands	r3, r2
 80174d0:	0019      	movs	r1, r3
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	430a      	orrs	r2, r1
 80174dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174e2:	2220      	movs	r2, #32
 80174e4:	4013      	ands	r3, r2
 80174e6:	d00b      	beq.n	8017500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	689b      	ldr	r3, [r3, #8]
 80174ee:	4a25      	ldr	r2, [pc, #148]	@ (8017584 <UART_AdvFeatureConfig+0x158>)
 80174f0:	4013      	ands	r3, r2
 80174f2:	0019      	movs	r1, r3
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	430a      	orrs	r2, r1
 80174fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017504:	2240      	movs	r2, #64	@ 0x40
 8017506:	4013      	ands	r3, r2
 8017508:	d01d      	beq.n	8017546 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	685b      	ldr	r3, [r3, #4]
 8017510:	4a1d      	ldr	r2, [pc, #116]	@ (8017588 <UART_AdvFeatureConfig+0x15c>)
 8017512:	4013      	ands	r3, r2
 8017514:	0019      	movs	r1, r3
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	430a      	orrs	r2, r1
 8017520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017526:	2380      	movs	r3, #128	@ 0x80
 8017528:	035b      	lsls	r3, r3, #13
 801752a:	429a      	cmp	r2, r3
 801752c:	d10b      	bne.n	8017546 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	685b      	ldr	r3, [r3, #4]
 8017534:	4a15      	ldr	r2, [pc, #84]	@ (801758c <UART_AdvFeatureConfig+0x160>)
 8017536:	4013      	ands	r3, r2
 8017538:	0019      	movs	r1, r3
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	430a      	orrs	r2, r1
 8017544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801754a:	2280      	movs	r2, #128	@ 0x80
 801754c:	4013      	ands	r3, r2
 801754e:	d00b      	beq.n	8017568 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	685b      	ldr	r3, [r3, #4]
 8017556:	4a0e      	ldr	r2, [pc, #56]	@ (8017590 <UART_AdvFeatureConfig+0x164>)
 8017558:	4013      	ands	r3, r2
 801755a:	0019      	movs	r1, r3
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	430a      	orrs	r2, r1
 8017566:	605a      	str	r2, [r3, #4]
  }
}
 8017568:	46c0      	nop			@ (mov r8, r8)
 801756a:	46bd      	mov	sp, r7
 801756c:	b002      	add	sp, #8
 801756e:	bd80      	pop	{r7, pc}
 8017570:	fffdffff 	.word	0xfffdffff
 8017574:	fffeffff 	.word	0xfffeffff
 8017578:	fffbffff 	.word	0xfffbffff
 801757c:	ffff7fff 	.word	0xffff7fff
 8017580:	ffffefff 	.word	0xffffefff
 8017584:	ffffdfff 	.word	0xffffdfff
 8017588:	ffefffff 	.word	0xffefffff
 801758c:	ff9fffff 	.word	0xff9fffff
 8017590:	fff7ffff 	.word	0xfff7ffff

08017594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8017594:	b580      	push	{r7, lr}
 8017596:	b092      	sub	sp, #72	@ 0x48
 8017598:	af02      	add	r7, sp, #8
 801759a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	2284      	movs	r2, #132	@ 0x84
 80175a0:	2100      	movs	r1, #0
 80175a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80175a4:	f7f6 fd74 	bl	800e090 <HAL_GetTick>
 80175a8:	0003      	movs	r3, r0
 80175aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	681b      	ldr	r3, [r3, #0]
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	2208      	movs	r2, #8
 80175b4:	4013      	ands	r3, r2
 80175b6:	2b08      	cmp	r3, #8
 80175b8:	d12c      	bne.n	8017614 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80175ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80175bc:	2280      	movs	r2, #128	@ 0x80
 80175be:	0391      	lsls	r1, r2, #14
 80175c0:	6878      	ldr	r0, [r7, #4]
 80175c2:	4a46      	ldr	r2, [pc, #280]	@ (80176dc <UART_CheckIdleState+0x148>)
 80175c4:	9200      	str	r2, [sp, #0]
 80175c6:	2200      	movs	r2, #0
 80175c8:	f000 f88c 	bl	80176e4 <UART_WaitOnFlagUntilTimeout>
 80175cc:	1e03      	subs	r3, r0, #0
 80175ce:	d021      	beq.n	8017614 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80175d0:	f3ef 8310 	mrs	r3, PRIMASK
 80175d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80175d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80175d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80175da:	2301      	movs	r3, #1
 80175dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80175de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175e0:	f383 8810 	msr	PRIMASK, r3
}
 80175e4:	46c0      	nop			@ (mov r8, r8)
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	681a      	ldr	r2, [r3, #0]
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	2180      	movs	r1, #128	@ 0x80
 80175f2:	438a      	bics	r2, r1
 80175f4:	601a      	str	r2, [r3, #0]
 80175f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80175f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80175fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175fc:	f383 8810 	msr	PRIMASK, r3
}
 8017600:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	2220      	movs	r2, #32
 8017606:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	2278      	movs	r2, #120	@ 0x78
 801760c:	2100      	movs	r1, #0
 801760e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017610:	2303      	movs	r3, #3
 8017612:	e05f      	b.n	80176d4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	2204      	movs	r2, #4
 801761c:	4013      	ands	r3, r2
 801761e:	2b04      	cmp	r3, #4
 8017620:	d146      	bne.n	80176b0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017624:	2280      	movs	r2, #128	@ 0x80
 8017626:	03d1      	lsls	r1, r2, #15
 8017628:	6878      	ldr	r0, [r7, #4]
 801762a:	4a2c      	ldr	r2, [pc, #176]	@ (80176dc <UART_CheckIdleState+0x148>)
 801762c:	9200      	str	r2, [sp, #0]
 801762e:	2200      	movs	r2, #0
 8017630:	f000 f858 	bl	80176e4 <UART_WaitOnFlagUntilTimeout>
 8017634:	1e03      	subs	r3, r0, #0
 8017636:	d03b      	beq.n	80176b0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017638:	f3ef 8310 	mrs	r3, PRIMASK
 801763c:	60fb      	str	r3, [r7, #12]
  return(result);
 801763e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017640:	637b      	str	r3, [r7, #52]	@ 0x34
 8017642:	2301      	movs	r3, #1
 8017644:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017646:	693b      	ldr	r3, [r7, #16]
 8017648:	f383 8810 	msr	PRIMASK, r3
}
 801764c:	46c0      	nop			@ (mov r8, r8)
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	681b      	ldr	r3, [r3, #0]
 8017652:	681a      	ldr	r2, [r3, #0]
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	4921      	ldr	r1, [pc, #132]	@ (80176e0 <UART_CheckIdleState+0x14c>)
 801765a:	400a      	ands	r2, r1
 801765c:	601a      	str	r2, [r3, #0]
 801765e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017660:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017662:	697b      	ldr	r3, [r7, #20]
 8017664:	f383 8810 	msr	PRIMASK, r3
}
 8017668:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801766a:	f3ef 8310 	mrs	r3, PRIMASK
 801766e:	61bb      	str	r3, [r7, #24]
  return(result);
 8017670:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017672:	633b      	str	r3, [r7, #48]	@ 0x30
 8017674:	2301      	movs	r3, #1
 8017676:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017678:	69fb      	ldr	r3, [r7, #28]
 801767a:	f383 8810 	msr	PRIMASK, r3
}
 801767e:	46c0      	nop			@ (mov r8, r8)
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	681b      	ldr	r3, [r3, #0]
 8017684:	689a      	ldr	r2, [r3, #8]
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	2101      	movs	r1, #1
 801768c:	438a      	bics	r2, r1
 801768e:	609a      	str	r2, [r3, #8]
 8017690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017692:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017694:	6a3b      	ldr	r3, [r7, #32]
 8017696:	f383 8810 	msr	PRIMASK, r3
}
 801769a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	2280      	movs	r2, #128	@ 0x80
 80176a0:	2120      	movs	r1, #32
 80176a2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	2278      	movs	r2, #120	@ 0x78
 80176a8:	2100      	movs	r1, #0
 80176aa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80176ac:	2303      	movs	r3, #3
 80176ae:	e011      	b.n	80176d4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	2220      	movs	r2, #32
 80176b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	2280      	movs	r2, #128	@ 0x80
 80176ba:	2120      	movs	r1, #32
 80176bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	2200      	movs	r2, #0
 80176c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	2200      	movs	r2, #0
 80176c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	2278      	movs	r2, #120	@ 0x78
 80176ce:	2100      	movs	r1, #0
 80176d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80176d2:	2300      	movs	r3, #0
}
 80176d4:	0018      	movs	r0, r3
 80176d6:	46bd      	mov	sp, r7
 80176d8:	b010      	add	sp, #64	@ 0x40
 80176da:	bd80      	pop	{r7, pc}
 80176dc:	01ffffff 	.word	0x01ffffff
 80176e0:	fffffedf 	.word	0xfffffedf

080176e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b084      	sub	sp, #16
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	60f8      	str	r0, [r7, #12]
 80176ec:	60b9      	str	r1, [r7, #8]
 80176ee:	603b      	str	r3, [r7, #0]
 80176f0:	1dfb      	adds	r3, r7, #7
 80176f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80176f4:	e04b      	b.n	801778e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80176f6:	69bb      	ldr	r3, [r7, #24]
 80176f8:	3301      	adds	r3, #1
 80176fa:	d048      	beq.n	801778e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80176fc:	f7f6 fcc8 	bl	800e090 <HAL_GetTick>
 8017700:	0002      	movs	r2, r0
 8017702:	683b      	ldr	r3, [r7, #0]
 8017704:	1ad3      	subs	r3, r2, r3
 8017706:	69ba      	ldr	r2, [r7, #24]
 8017708:	429a      	cmp	r2, r3
 801770a:	d302      	bcc.n	8017712 <UART_WaitOnFlagUntilTimeout+0x2e>
 801770c:	69bb      	ldr	r3, [r7, #24]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d101      	bne.n	8017716 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8017712:	2303      	movs	r3, #3
 8017714:	e04b      	b.n	80177ae <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	2204      	movs	r2, #4
 801771e:	4013      	ands	r3, r2
 8017720:	d035      	beq.n	801778e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	69db      	ldr	r3, [r3, #28]
 8017728:	2208      	movs	r2, #8
 801772a:	4013      	ands	r3, r2
 801772c:	2b08      	cmp	r3, #8
 801772e:	d111      	bne.n	8017754 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	2208      	movs	r2, #8
 8017736:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	0018      	movs	r0, r3
 801773c:	f000 f9ca 	bl	8017ad4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	2284      	movs	r2, #132	@ 0x84
 8017744:	2108      	movs	r1, #8
 8017746:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	2278      	movs	r2, #120	@ 0x78
 801774c:	2100      	movs	r1, #0
 801774e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8017750:	2301      	movs	r3, #1
 8017752:	e02c      	b.n	80177ae <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	69da      	ldr	r2, [r3, #28]
 801775a:	2380      	movs	r3, #128	@ 0x80
 801775c:	011b      	lsls	r3, r3, #4
 801775e:	401a      	ands	r2, r3
 8017760:	2380      	movs	r3, #128	@ 0x80
 8017762:	011b      	lsls	r3, r3, #4
 8017764:	429a      	cmp	r2, r3
 8017766:	d112      	bne.n	801778e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	2280      	movs	r2, #128	@ 0x80
 801776e:	0112      	lsls	r2, r2, #4
 8017770:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	0018      	movs	r0, r3
 8017776:	f000 f9ad 	bl	8017ad4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	2284      	movs	r2, #132	@ 0x84
 801777e:	2120      	movs	r1, #32
 8017780:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	2278      	movs	r2, #120	@ 0x78
 8017786:	2100      	movs	r1, #0
 8017788:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801778a:	2303      	movs	r3, #3
 801778c:	e00f      	b.n	80177ae <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	69db      	ldr	r3, [r3, #28]
 8017794:	68ba      	ldr	r2, [r7, #8]
 8017796:	4013      	ands	r3, r2
 8017798:	68ba      	ldr	r2, [r7, #8]
 801779a:	1ad3      	subs	r3, r2, r3
 801779c:	425a      	negs	r2, r3
 801779e:	4153      	adcs	r3, r2
 80177a0:	b2db      	uxtb	r3, r3
 80177a2:	001a      	movs	r2, r3
 80177a4:	1dfb      	adds	r3, r7, #7
 80177a6:	781b      	ldrb	r3, [r3, #0]
 80177a8:	429a      	cmp	r2, r3
 80177aa:	d0a4      	beq.n	80176f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80177ac:	2300      	movs	r3, #0
}
 80177ae:	0018      	movs	r0, r3
 80177b0:	46bd      	mov	sp, r7
 80177b2:	b004      	add	sp, #16
 80177b4:	bd80      	pop	{r7, pc}
	...

080177b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b090      	sub	sp, #64	@ 0x40
 80177bc:	af00      	add	r7, sp, #0
 80177be:	60f8      	str	r0, [r7, #12]
 80177c0:	60b9      	str	r1, [r7, #8]
 80177c2:	1dbb      	adds	r3, r7, #6
 80177c4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	68ba      	ldr	r2, [r7, #8]
 80177ca:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	1dba      	adds	r2, r7, #6
 80177d0:	2158      	movs	r1, #88	@ 0x58
 80177d2:	8812      	ldrh	r2, [r2, #0]
 80177d4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	1dba      	adds	r2, r7, #6
 80177da:	215a      	movs	r1, #90	@ 0x5a
 80177dc:	8812      	ldrh	r2, [r2, #0]
 80177de:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	2200      	movs	r2, #0
 80177e4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	689a      	ldr	r2, [r3, #8]
 80177ea:	2380      	movs	r3, #128	@ 0x80
 80177ec:	015b      	lsls	r3, r3, #5
 80177ee:	429a      	cmp	r2, r3
 80177f0:	d10d      	bne.n	801780e <UART_Start_Receive_IT+0x56>
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	691b      	ldr	r3, [r3, #16]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d104      	bne.n	8017804 <UART_Start_Receive_IT+0x4c>
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	225c      	movs	r2, #92	@ 0x5c
 80177fe:	4950      	ldr	r1, [pc, #320]	@ (8017940 <UART_Start_Receive_IT+0x188>)
 8017800:	5299      	strh	r1, [r3, r2]
 8017802:	e02e      	b.n	8017862 <UART_Start_Receive_IT+0xaa>
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	225c      	movs	r2, #92	@ 0x5c
 8017808:	21ff      	movs	r1, #255	@ 0xff
 801780a:	5299      	strh	r1, [r3, r2]
 801780c:	e029      	b.n	8017862 <UART_Start_Receive_IT+0xaa>
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	689b      	ldr	r3, [r3, #8]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d10d      	bne.n	8017832 <UART_Start_Receive_IT+0x7a>
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	691b      	ldr	r3, [r3, #16]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d104      	bne.n	8017828 <UART_Start_Receive_IT+0x70>
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	225c      	movs	r2, #92	@ 0x5c
 8017822:	21ff      	movs	r1, #255	@ 0xff
 8017824:	5299      	strh	r1, [r3, r2]
 8017826:	e01c      	b.n	8017862 <UART_Start_Receive_IT+0xaa>
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	225c      	movs	r2, #92	@ 0x5c
 801782c:	217f      	movs	r1, #127	@ 0x7f
 801782e:	5299      	strh	r1, [r3, r2]
 8017830:	e017      	b.n	8017862 <UART_Start_Receive_IT+0xaa>
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	689a      	ldr	r2, [r3, #8]
 8017836:	2380      	movs	r3, #128	@ 0x80
 8017838:	055b      	lsls	r3, r3, #21
 801783a:	429a      	cmp	r2, r3
 801783c:	d10d      	bne.n	801785a <UART_Start_Receive_IT+0xa2>
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	691b      	ldr	r3, [r3, #16]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d104      	bne.n	8017850 <UART_Start_Receive_IT+0x98>
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	225c      	movs	r2, #92	@ 0x5c
 801784a:	217f      	movs	r1, #127	@ 0x7f
 801784c:	5299      	strh	r1, [r3, r2]
 801784e:	e008      	b.n	8017862 <UART_Start_Receive_IT+0xaa>
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	225c      	movs	r2, #92	@ 0x5c
 8017854:	213f      	movs	r1, #63	@ 0x3f
 8017856:	5299      	strh	r1, [r3, r2]
 8017858:	e003      	b.n	8017862 <UART_Start_Receive_IT+0xaa>
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	225c      	movs	r2, #92	@ 0x5c
 801785e:	2100      	movs	r1, #0
 8017860:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	2284      	movs	r2, #132	@ 0x84
 8017866:	2100      	movs	r1, #0
 8017868:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	2280      	movs	r2, #128	@ 0x80
 801786e:	2122      	movs	r1, #34	@ 0x22
 8017870:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017872:	f3ef 8310 	mrs	r3, PRIMASK
 8017876:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8017878:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801787a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801787c:	2301      	movs	r3, #1
 801787e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017882:	f383 8810 	msr	PRIMASK, r3
}
 8017886:	46c0      	nop			@ (mov r8, r8)
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	689a      	ldr	r2, [r3, #8]
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	681b      	ldr	r3, [r3, #0]
 8017892:	2101      	movs	r1, #1
 8017894:	430a      	orrs	r2, r1
 8017896:	609a      	str	r2, [r3, #8]
 8017898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801789a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801789c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801789e:	f383 8810 	msr	PRIMASK, r3
}
 80178a2:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	689a      	ldr	r2, [r3, #8]
 80178a8:	2380      	movs	r3, #128	@ 0x80
 80178aa:	015b      	lsls	r3, r3, #5
 80178ac:	429a      	cmp	r2, r3
 80178ae:	d107      	bne.n	80178c0 <UART_Start_Receive_IT+0x108>
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	691b      	ldr	r3, [r3, #16]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d103      	bne.n	80178c0 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	4a22      	ldr	r2, [pc, #136]	@ (8017944 <UART_Start_Receive_IT+0x18c>)
 80178bc:	669a      	str	r2, [r3, #104]	@ 0x68
 80178be:	e002      	b.n	80178c6 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	4a21      	ldr	r2, [pc, #132]	@ (8017948 <UART_Start_Receive_IT+0x190>)
 80178c4:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	691b      	ldr	r3, [r3, #16]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d019      	beq.n	8017902 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178ce:	f3ef 8310 	mrs	r3, PRIMASK
 80178d2:	61fb      	str	r3, [r7, #28]
  return(result);
 80178d4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80178d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80178d8:	2301      	movs	r3, #1
 80178da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178dc:	6a3b      	ldr	r3, [r7, #32]
 80178de:	f383 8810 	msr	PRIMASK, r3
}
 80178e2:	46c0      	nop			@ (mov r8, r8)
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	681a      	ldr	r2, [r3, #0]
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	2190      	movs	r1, #144	@ 0x90
 80178f0:	0049      	lsls	r1, r1, #1
 80178f2:	430a      	orrs	r2, r1
 80178f4:	601a      	str	r2, [r3, #0]
 80178f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80178f8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178fc:	f383 8810 	msr	PRIMASK, r3
}
 8017900:	e018      	b.n	8017934 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017902:	f3ef 8310 	mrs	r3, PRIMASK
 8017906:	613b      	str	r3, [r7, #16]
  return(result);
 8017908:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801790a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801790c:	2301      	movs	r3, #1
 801790e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017910:	697b      	ldr	r3, [r7, #20]
 8017912:	f383 8810 	msr	PRIMASK, r3
}
 8017916:	46c0      	nop			@ (mov r8, r8)
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	681a      	ldr	r2, [r3, #0]
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	2120      	movs	r1, #32
 8017924:	430a      	orrs	r2, r1
 8017926:	601a      	str	r2, [r3, #0]
 8017928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801792a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801792c:	69bb      	ldr	r3, [r7, #24]
 801792e:	f383 8810 	msr	PRIMASK, r3
}
 8017932:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8017934:	2300      	movs	r3, #0
}
 8017936:	0018      	movs	r0, r3
 8017938:	46bd      	mov	sp, r7
 801793a:	b010      	add	sp, #64	@ 0x40
 801793c:	bd80      	pop	{r7, pc}
 801793e:	46c0      	nop			@ (mov r8, r8)
 8017940:	000001ff 	.word	0x000001ff
 8017944:	080180b9 	.word	0x080180b9
 8017948:	08017eed 	.word	0x08017eed

0801794c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b090      	sub	sp, #64	@ 0x40
 8017950:	af00      	add	r7, sp, #0
 8017952:	60f8      	str	r0, [r7, #12]
 8017954:	60b9      	str	r1, [r7, #8]
 8017956:	1dbb      	adds	r3, r7, #6
 8017958:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	68ba      	ldr	r2, [r7, #8]
 801795e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	1dba      	adds	r2, r7, #6
 8017964:	2158      	movs	r1, #88	@ 0x58
 8017966:	8812      	ldrh	r2, [r2, #0]
 8017968:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	2284      	movs	r2, #132	@ 0x84
 801796e:	2100      	movs	r1, #0
 8017970:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	2280      	movs	r2, #128	@ 0x80
 8017976:	2122      	movs	r1, #34	@ 0x22
 8017978:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801797e:	2b00      	cmp	r3, #0
 8017980:	d028      	beq.n	80179d4 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017986:	4a3e      	ldr	r2, [pc, #248]	@ (8017a80 <UART_Start_Receive_DMA+0x134>)
 8017988:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801798e:	4a3d      	ldr	r2, [pc, #244]	@ (8017a84 <UART_Start_Receive_DMA+0x138>)
 8017990:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017996:	4a3c      	ldr	r2, [pc, #240]	@ (8017a88 <UART_Start_Receive_DMA+0x13c>)
 8017998:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801799e:	2200      	movs	r2, #0
 80179a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	3324      	adds	r3, #36	@ 0x24
 80179ac:	0019      	movs	r1, r3
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80179b2:	001a      	movs	r2, r3
 80179b4:	1dbb      	adds	r3, r7, #6
 80179b6:	881b      	ldrh	r3, [r3, #0]
 80179b8:	f7f7 f8a6 	bl	800eb08 <HAL_DMA_Start_IT>
 80179bc:	1e03      	subs	r3, r0, #0
 80179be:	d009      	beq.n	80179d4 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	2284      	movs	r2, #132	@ 0x84
 80179c4:	2110      	movs	r1, #16
 80179c6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	2280      	movs	r2, #128	@ 0x80
 80179cc:	2120      	movs	r1, #32
 80179ce:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80179d0:	2301      	movs	r3, #1
 80179d2:	e050      	b.n	8017a76 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	691b      	ldr	r3, [r3, #16]
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d019      	beq.n	8017a10 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80179dc:	f3ef 8310 	mrs	r3, PRIMASK
 80179e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80179e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80179e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80179e6:	2301      	movs	r3, #1
 80179e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179ec:	f383 8810 	msr	PRIMASK, r3
}
 80179f0:	46c0      	nop			@ (mov r8, r8)
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	681a      	ldr	r2, [r3, #0]
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	2180      	movs	r1, #128	@ 0x80
 80179fe:	0049      	lsls	r1, r1, #1
 8017a00:	430a      	orrs	r2, r1
 8017a02:	601a      	str	r2, [r3, #0]
 8017a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a06:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a0a:	f383 8810 	msr	PRIMASK, r3
}
 8017a0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a10:	f3ef 8310 	mrs	r3, PRIMASK
 8017a14:	613b      	str	r3, [r7, #16]
  return(result);
 8017a16:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017a1a:	2301      	movs	r3, #1
 8017a1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a1e:	697b      	ldr	r3, [r7, #20]
 8017a20:	f383 8810 	msr	PRIMASK, r3
}
 8017a24:	46c0      	nop			@ (mov r8, r8)
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	689a      	ldr	r2, [r3, #8]
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	2101      	movs	r1, #1
 8017a32:	430a      	orrs	r2, r1
 8017a34:	609a      	str	r2, [r3, #8]
 8017a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017a38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a3a:	69bb      	ldr	r3, [r7, #24]
 8017a3c:	f383 8810 	msr	PRIMASK, r3
}
 8017a40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a42:	f3ef 8310 	mrs	r3, PRIMASK
 8017a46:	61fb      	str	r3, [r7, #28]
  return(result);
 8017a48:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8017a4c:	2301      	movs	r3, #1
 8017a4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a50:	6a3b      	ldr	r3, [r7, #32]
 8017a52:	f383 8810 	msr	PRIMASK, r3
}
 8017a56:	46c0      	nop			@ (mov r8, r8)
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	689a      	ldr	r2, [r3, #8]
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	2140      	movs	r1, #64	@ 0x40
 8017a64:	430a      	orrs	r2, r1
 8017a66:	609a      	str	r2, [r3, #8]
 8017a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a6e:	f383 8810 	msr	PRIMASK, r3
}
 8017a72:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8017a74:	2300      	movs	r3, #0
}
 8017a76:	0018      	movs	r0, r3
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	b010      	add	sp, #64	@ 0x40
 8017a7c:	bd80      	pop	{r7, pc}
 8017a7e:	46c0      	nop			@ (mov r8, r8)
 8017a80:	08017c5d 	.word	0x08017c5d
 8017a84:	08017d91 	.word	0x08017d91
 8017a88:	08017dd9 	.word	0x08017dd9

08017a8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8017a8c:	b580      	push	{r7, lr}
 8017a8e:	b086      	sub	sp, #24
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a94:	f3ef 8310 	mrs	r3, PRIMASK
 8017a98:	60bb      	str	r3, [r7, #8]
  return(result);
 8017a9a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8017a9c:	617b      	str	r3, [r7, #20]
 8017a9e:	2301      	movs	r3, #1
 8017aa0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	f383 8810 	msr	PRIMASK, r3
}
 8017aa8:	46c0      	nop			@ (mov r8, r8)
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	681a      	ldr	r2, [r3, #0]
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	21c0      	movs	r1, #192	@ 0xc0
 8017ab6:	438a      	bics	r2, r1
 8017ab8:	601a      	str	r2, [r3, #0]
 8017aba:	697b      	ldr	r3, [r7, #20]
 8017abc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017abe:	693b      	ldr	r3, [r7, #16]
 8017ac0:	f383 8810 	msr	PRIMASK, r3
}
 8017ac4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	2220      	movs	r2, #32
 8017aca:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8017acc:	46c0      	nop			@ (mov r8, r8)
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	b006      	add	sp, #24
 8017ad2:	bd80      	pop	{r7, pc}

08017ad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017ad4:	b580      	push	{r7, lr}
 8017ad6:	b08e      	sub	sp, #56	@ 0x38
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017adc:	f3ef 8310 	mrs	r3, PRIMASK
 8017ae0:	617b      	str	r3, [r7, #20]
  return(result);
 8017ae2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8017ae6:	2301      	movs	r3, #1
 8017ae8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017aea:	69bb      	ldr	r3, [r7, #24]
 8017aec:	f383 8810 	msr	PRIMASK, r3
}
 8017af0:	46c0      	nop			@ (mov r8, r8)
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	681a      	ldr	r2, [r3, #0]
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	681b      	ldr	r3, [r3, #0]
 8017afc:	4926      	ldr	r1, [pc, #152]	@ (8017b98 <UART_EndRxTransfer+0xc4>)
 8017afe:	400a      	ands	r2, r1
 8017b00:	601a      	str	r2, [r3, #0]
 8017b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b06:	69fb      	ldr	r3, [r7, #28]
 8017b08:	f383 8810 	msr	PRIMASK, r3
}
 8017b0c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8017b12:	623b      	str	r3, [r7, #32]
  return(result);
 8017b14:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017b16:	633b      	str	r3, [r7, #48]	@ 0x30
 8017b18:	2301      	movs	r3, #1
 8017b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b1e:	f383 8810 	msr	PRIMASK, r3
}
 8017b22:	46c0      	nop			@ (mov r8, r8)
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	689a      	ldr	r2, [r3, #8]
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	2101      	movs	r1, #1
 8017b30:	438a      	bics	r2, r1
 8017b32:	609a      	str	r2, [r3, #8]
 8017b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b3a:	f383 8810 	msr	PRIMASK, r3
}
 8017b3e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017b44:	2b01      	cmp	r3, #1
 8017b46:	d118      	bne.n	8017b7a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b48:	f3ef 8310 	mrs	r3, PRIMASK
 8017b4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8017b4e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017b52:	2301      	movs	r3, #1
 8017b54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	f383 8810 	msr	PRIMASK, r3
}
 8017b5c:	46c0      	nop			@ (mov r8, r8)
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	681a      	ldr	r2, [r3, #0]
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	2110      	movs	r1, #16
 8017b6a:	438a      	bics	r2, r1
 8017b6c:	601a      	str	r2, [r3, #0]
 8017b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b72:	693b      	ldr	r3, [r7, #16]
 8017b74:	f383 8810 	msr	PRIMASK, r3
}
 8017b78:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	2280      	movs	r2, #128	@ 0x80
 8017b7e:	2120      	movs	r1, #32
 8017b80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	2200      	movs	r2, #0
 8017b86:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8017b8e:	46c0      	nop			@ (mov r8, r8)
 8017b90:	46bd      	mov	sp, r7
 8017b92:	b00e      	add	sp, #56	@ 0x38
 8017b94:	bd80      	pop	{r7, pc}
 8017b96:	46c0      	nop			@ (mov r8, r8)
 8017b98:	fffffedf 	.word	0xfffffedf

08017b9c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b08c      	sub	sp, #48	@ 0x30
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	2220      	movs	r2, #32
 8017bb2:	4013      	ands	r3, r2
 8017bb4:	d135      	bne.n	8017c22 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8017bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bb8:	2252      	movs	r2, #82	@ 0x52
 8017bba:	2100      	movs	r1, #0
 8017bbc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8017bc2:	60fb      	str	r3, [r7, #12]
  return(result);
 8017bc4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017bc8:	2301      	movs	r3, #1
 8017bca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bcc:	693b      	ldr	r3, [r7, #16]
 8017bce:	f383 8810 	msr	PRIMASK, r3
}
 8017bd2:	46c0      	nop			@ (mov r8, r8)
 8017bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	689a      	ldr	r2, [r3, #8]
 8017bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	2180      	movs	r1, #128	@ 0x80
 8017be0:	438a      	bics	r2, r1
 8017be2:	609a      	str	r2, [r3, #8]
 8017be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017be6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017be8:	697b      	ldr	r3, [r7, #20]
 8017bea:	f383 8810 	msr	PRIMASK, r3
}
 8017bee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8017bf4:	61bb      	str	r3, [r7, #24]
  return(result);
 8017bf6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8017bfa:	2301      	movs	r3, #1
 8017bfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017bfe:	69fb      	ldr	r3, [r7, #28]
 8017c00:	f383 8810 	msr	PRIMASK, r3
}
 8017c04:	46c0      	nop			@ (mov r8, r8)
 8017c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	681a      	ldr	r2, [r3, #0]
 8017c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	2140      	movs	r1, #64	@ 0x40
 8017c12:	430a      	orrs	r2, r1
 8017c14:	601a      	str	r2, [r3, #0]
 8017c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c1a:	6a3b      	ldr	r3, [r7, #32]
 8017c1c:	f383 8810 	msr	PRIMASK, r3
}
 8017c20:	e006      	b.n	8017c30 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8017c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c24:	228c      	movs	r2, #140	@ 0x8c
 8017c26:	589b      	ldr	r3, [r3, r2]
 8017c28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017c2a:	0010      	movs	r0, r2
 8017c2c:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017c2e:	46c0      	nop			@ (mov r8, r8)
 8017c30:	46c0      	nop			@ (mov r8, r8)
 8017c32:	46bd      	mov	sp, r7
 8017c34:	b00c      	add	sp, #48	@ 0x30
 8017c36:	bd80      	pop	{r7, pc}

08017c38 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b084      	sub	sp, #16
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c44:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	2288      	movs	r2, #136	@ 0x88
 8017c4a:	589b      	ldr	r3, [r3, r2]
 8017c4c:	68fa      	ldr	r2, [r7, #12]
 8017c4e:	0010      	movs	r0, r2
 8017c50:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017c52:	46c0      	nop			@ (mov r8, r8)
 8017c54:	46bd      	mov	sp, r7
 8017c56:	b004      	add	sp, #16
 8017c58:	bd80      	pop	{r7, pc}
	...

08017c5c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b094      	sub	sp, #80	@ 0x50
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c68:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	2220      	movs	r2, #32
 8017c72:	4013      	ands	r3, r2
 8017c74:	d16f      	bne.n	8017d56 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8017c76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017c78:	225a      	movs	r2, #90	@ 0x5a
 8017c7a:	2100      	movs	r1, #0
 8017c7c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8017c82:	61bb      	str	r3, [r7, #24]
  return(result);
 8017c84:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017c86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017c88:	2301      	movs	r3, #1
 8017c8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c8c:	69fb      	ldr	r3, [r7, #28]
 8017c8e:	f383 8810 	msr	PRIMASK, r3
}
 8017c92:	46c0      	nop			@ (mov r8, r8)
 8017c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	681a      	ldr	r2, [r3, #0]
 8017c9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	493b      	ldr	r1, [pc, #236]	@ (8017d8c <UART_DMAReceiveCplt+0x130>)
 8017ca0:	400a      	ands	r2, r1
 8017ca2:	601a      	str	r2, [r3, #0]
 8017ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017ca6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ca8:	6a3b      	ldr	r3, [r7, #32]
 8017caa:	f383 8810 	msr	PRIMASK, r3
}
 8017cae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8017cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8017cba:	2301      	movs	r3, #1
 8017cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cc0:	f383 8810 	msr	PRIMASK, r3
}
 8017cc4:	46c0      	nop			@ (mov r8, r8)
 8017cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	689a      	ldr	r2, [r3, #8]
 8017ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017cce:	681b      	ldr	r3, [r3, #0]
 8017cd0:	2101      	movs	r1, #1
 8017cd2:	438a      	bics	r2, r1
 8017cd4:	609a      	str	r2, [r3, #8]
 8017cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cdc:	f383 8810 	msr	PRIMASK, r3
}
 8017ce0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8017ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017cea:	643b      	str	r3, [r7, #64]	@ 0x40
 8017cec:	2301      	movs	r3, #1
 8017cee:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017cf2:	f383 8810 	msr	PRIMASK, r3
}
 8017cf6:	46c0      	nop			@ (mov r8, r8)
 8017cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	689a      	ldr	r2, [r3, #8]
 8017cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	2140      	movs	r1, #64	@ 0x40
 8017d04:	438a      	bics	r2, r1
 8017d06:	609a      	str	r2, [r3, #8]
 8017d08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d0e:	f383 8810 	msr	PRIMASK, r3
}
 8017d12:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8017d14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d16:	2280      	movs	r2, #128	@ 0x80
 8017d18:	2120      	movs	r1, #32
 8017d1a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017d20:	2b01      	cmp	r3, #1
 8017d22:	d118      	bne.n	8017d56 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017d24:	f3ef 8310 	mrs	r3, PRIMASK
 8017d28:	60fb      	str	r3, [r7, #12]
  return(result);
 8017d2a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017d2e:	2301      	movs	r3, #1
 8017d30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d32:	693b      	ldr	r3, [r7, #16]
 8017d34:	f383 8810 	msr	PRIMASK, r3
}
 8017d38:	46c0      	nop			@ (mov r8, r8)
 8017d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	681a      	ldr	r2, [r3, #0]
 8017d40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	2110      	movs	r1, #16
 8017d46:	438a      	bics	r2, r1
 8017d48:	601a      	str	r2, [r3, #0]
 8017d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017d4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d4e:	697b      	ldr	r3, [r7, #20]
 8017d50:	f383 8810 	msr	PRIMASK, r3
}
 8017d54:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017d56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d58:	2200      	movs	r2, #0
 8017d5a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017d5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017d60:	2b01      	cmp	r3, #1
 8017d62:	d109      	bne.n	8017d78 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8017d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d66:	22ac      	movs	r2, #172	@ 0xac
 8017d68:	589b      	ldr	r3, [r3, r2]
 8017d6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017d6c:	2158      	movs	r1, #88	@ 0x58
 8017d6e:	5a51      	ldrh	r1, [r2, r1]
 8017d70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017d72:	0010      	movs	r0, r2
 8017d74:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017d76:	e005      	b.n	8017d84 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8017d78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017d7a:	2294      	movs	r2, #148	@ 0x94
 8017d7c:	589b      	ldr	r3, [r3, r2]
 8017d7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017d80:	0010      	movs	r0, r2
 8017d82:	4798      	blx	r3
}
 8017d84:	46c0      	nop			@ (mov r8, r8)
 8017d86:	46bd      	mov	sp, r7
 8017d88:	b014      	add	sp, #80	@ 0x50
 8017d8a:	bd80      	pop	{r7, pc}
 8017d8c:	fffffeff 	.word	0xfffffeff

08017d90 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017d90:	b580      	push	{r7, lr}
 8017d92:	b084      	sub	sp, #16
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d9c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	2201      	movs	r2, #1
 8017da2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017da8:	2b01      	cmp	r3, #1
 8017daa:	d10b      	bne.n	8017dc4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8017dac:	68fb      	ldr	r3, [r7, #12]
 8017dae:	22ac      	movs	r2, #172	@ 0xac
 8017db0:	589b      	ldr	r3, [r3, r2]
 8017db2:	68fa      	ldr	r2, [r7, #12]
 8017db4:	2158      	movs	r1, #88	@ 0x58
 8017db6:	5a52      	ldrh	r2, [r2, r1]
 8017db8:	0852      	lsrs	r2, r2, #1
 8017dba:	b291      	uxth	r1, r2
 8017dbc:	68fa      	ldr	r2, [r7, #12]
 8017dbe:	0010      	movs	r0, r2
 8017dc0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017dc2:	e005      	b.n	8017dd0 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	2290      	movs	r2, #144	@ 0x90
 8017dc8:	589b      	ldr	r3, [r3, r2]
 8017dca:	68fa      	ldr	r2, [r7, #12]
 8017dcc:	0010      	movs	r0, r2
 8017dce:	4798      	blx	r3
}
 8017dd0:	46c0      	nop			@ (mov r8, r8)
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	b004      	add	sp, #16
 8017dd6:	bd80      	pop	{r7, pc}

08017dd8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b086      	sub	sp, #24
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017de4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8017de6:	697b      	ldr	r3, [r7, #20]
 8017de8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017dea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8017dec:	697b      	ldr	r3, [r7, #20]
 8017dee:	2280      	movs	r2, #128	@ 0x80
 8017df0:	589b      	ldr	r3, [r3, r2]
 8017df2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8017df4:	697b      	ldr	r3, [r7, #20]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	689b      	ldr	r3, [r3, #8]
 8017dfa:	2280      	movs	r2, #128	@ 0x80
 8017dfc:	4013      	ands	r3, r2
 8017dfe:	2b80      	cmp	r3, #128	@ 0x80
 8017e00:	d10a      	bne.n	8017e18 <UART_DMAError+0x40>
 8017e02:	693b      	ldr	r3, [r7, #16]
 8017e04:	2b21      	cmp	r3, #33	@ 0x21
 8017e06:	d107      	bne.n	8017e18 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8017e08:	697b      	ldr	r3, [r7, #20]
 8017e0a:	2252      	movs	r2, #82	@ 0x52
 8017e0c:	2100      	movs	r1, #0
 8017e0e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8017e10:	697b      	ldr	r3, [r7, #20]
 8017e12:	0018      	movs	r0, r3
 8017e14:	f7ff fe3a 	bl	8017a8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8017e18:	697b      	ldr	r3, [r7, #20]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	689b      	ldr	r3, [r3, #8]
 8017e1e:	2240      	movs	r2, #64	@ 0x40
 8017e20:	4013      	ands	r3, r2
 8017e22:	2b40      	cmp	r3, #64	@ 0x40
 8017e24:	d10a      	bne.n	8017e3c <UART_DMAError+0x64>
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	2b22      	cmp	r3, #34	@ 0x22
 8017e2a:	d107      	bne.n	8017e3c <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8017e2c:	697b      	ldr	r3, [r7, #20]
 8017e2e:	225a      	movs	r2, #90	@ 0x5a
 8017e30:	2100      	movs	r1, #0
 8017e32:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8017e34:	697b      	ldr	r3, [r7, #20]
 8017e36:	0018      	movs	r0, r3
 8017e38:	f7ff fe4c 	bl	8017ad4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8017e3c:	697b      	ldr	r3, [r7, #20]
 8017e3e:	2284      	movs	r2, #132	@ 0x84
 8017e40:	589b      	ldr	r3, [r3, r2]
 8017e42:	2210      	movs	r2, #16
 8017e44:	431a      	orrs	r2, r3
 8017e46:	697b      	ldr	r3, [r7, #20]
 8017e48:	2184      	movs	r1, #132	@ 0x84
 8017e4a:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8017e4c:	697b      	ldr	r3, [r7, #20]
 8017e4e:	2298      	movs	r2, #152	@ 0x98
 8017e50:	589b      	ldr	r3, [r3, r2]
 8017e52:	697a      	ldr	r2, [r7, #20]
 8017e54:	0010      	movs	r0, r2
 8017e56:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017e58:	46c0      	nop			@ (mov r8, r8)
 8017e5a:	46bd      	mov	sp, r7
 8017e5c:	b006      	add	sp, #24
 8017e5e:	bd80      	pop	{r7, pc}

08017e60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b084      	sub	sp, #16
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	225a      	movs	r2, #90	@ 0x5a
 8017e72:	2100      	movs	r1, #0
 8017e74:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	2252      	movs	r2, #82	@ 0x52
 8017e7a:	2100      	movs	r1, #0
 8017e7c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	2298      	movs	r2, #152	@ 0x98
 8017e82:	589b      	ldr	r3, [r3, r2]
 8017e84:	68fa      	ldr	r2, [r7, #12]
 8017e86:	0010      	movs	r0, r2
 8017e88:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017e8a:	46c0      	nop			@ (mov r8, r8)
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	b004      	add	sp, #16
 8017e90:	bd80      	pop	{r7, pc}

08017e92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017e92:	b580      	push	{r7, lr}
 8017e94:	b086      	sub	sp, #24
 8017e96:	af00      	add	r7, sp, #0
 8017e98:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8017e9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8017ea0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017ea2:	617b      	str	r3, [r7, #20]
 8017ea4:	2301      	movs	r3, #1
 8017ea6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	f383 8810 	msr	PRIMASK, r3
}
 8017eae:	46c0      	nop			@ (mov r8, r8)
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	681a      	ldr	r2, [r3, #0]
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	2140      	movs	r1, #64	@ 0x40
 8017ebc:	438a      	bics	r2, r1
 8017ebe:	601a      	str	r2, [r3, #0]
 8017ec0:	697b      	ldr	r3, [r7, #20]
 8017ec2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ec4:	693b      	ldr	r3, [r7, #16]
 8017ec6:	f383 8810 	msr	PRIMASK, r3
}
 8017eca:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	2220      	movs	r2, #32
 8017ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	2200      	movs	r2, #0
 8017ed6:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	228c      	movs	r2, #140	@ 0x8c
 8017edc:	589b      	ldr	r3, [r3, r2]
 8017ede:	687a      	ldr	r2, [r7, #4]
 8017ee0:	0010      	movs	r0, r2
 8017ee2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017ee4:	46c0      	nop			@ (mov r8, r8)
 8017ee6:	46bd      	mov	sp, r7
 8017ee8:	b006      	add	sp, #24
 8017eea:	bd80      	pop	{r7, pc}

08017eec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b094      	sub	sp, #80	@ 0x50
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8017ef4:	204e      	movs	r0, #78	@ 0x4e
 8017ef6:	183b      	adds	r3, r7, r0
 8017ef8:	687a      	ldr	r2, [r7, #4]
 8017efa:	215c      	movs	r1, #92	@ 0x5c
 8017efc:	5a52      	ldrh	r2, [r2, r1]
 8017efe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	2280      	movs	r2, #128	@ 0x80
 8017f04:	589b      	ldr	r3, [r3, r2]
 8017f06:	2b22      	cmp	r3, #34	@ 0x22
 8017f08:	d000      	beq.n	8017f0c <UART_RxISR_8BIT+0x20>
 8017f0a:	e0c2      	b.n	8018092 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017f12:	214c      	movs	r1, #76	@ 0x4c
 8017f14:	187b      	adds	r3, r7, r1
 8017f16:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017f18:	187b      	adds	r3, r7, r1
 8017f1a:	881b      	ldrh	r3, [r3, #0]
 8017f1c:	b2da      	uxtb	r2, r3
 8017f1e:	183b      	adds	r3, r7, r0
 8017f20:	881b      	ldrh	r3, [r3, #0]
 8017f22:	b2d9      	uxtb	r1, r3
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017f28:	400a      	ands	r2, r1
 8017f2a:	b2d2      	uxtb	r2, r2
 8017f2c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017f32:	1c5a      	adds	r2, r3, #1
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	225a      	movs	r2, #90	@ 0x5a
 8017f3c:	5a9b      	ldrh	r3, [r3, r2]
 8017f3e:	b29b      	uxth	r3, r3
 8017f40:	3b01      	subs	r3, #1
 8017f42:	b299      	uxth	r1, r3
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	225a      	movs	r2, #90	@ 0x5a
 8017f48:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	225a      	movs	r2, #90	@ 0x5a
 8017f4e:	5a9b      	ldrh	r3, [r3, r2]
 8017f50:	b29b      	uxth	r3, r3
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d000      	beq.n	8017f58 <UART_RxISR_8BIT+0x6c>
 8017f56:	e0a4      	b.n	80180a2 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017f58:	f3ef 8310 	mrs	r3, PRIMASK
 8017f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017f60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017f62:	2301      	movs	r3, #1
 8017f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f68:	f383 8810 	msr	PRIMASK, r3
}
 8017f6c:	46c0      	nop			@ (mov r8, r8)
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	681a      	ldr	r2, [r3, #0]
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	494c      	ldr	r1, [pc, #304]	@ (80180ac <UART_RxISR_8BIT+0x1c0>)
 8017f7a:	400a      	ands	r2, r1
 8017f7c:	601a      	str	r2, [r3, #0]
 8017f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f84:	f383 8810 	msr	PRIMASK, r3
}
 8017f88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8017f8e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017f92:	647b      	str	r3, [r7, #68]	@ 0x44
 8017f94:	2301      	movs	r3, #1
 8017f96:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f9a:	f383 8810 	msr	PRIMASK, r3
}
 8017f9e:	46c0      	nop			@ (mov r8, r8)
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	681b      	ldr	r3, [r3, #0]
 8017fa4:	689a      	ldr	r2, [r3, #8]
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	2101      	movs	r1, #1
 8017fac:	438a      	bics	r2, r1
 8017fae:	609a      	str	r2, [r3, #8]
 8017fb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fb6:	f383 8810 	msr	PRIMASK, r3
}
 8017fba:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	2280      	movs	r2, #128	@ 0x80
 8017fc0:	2120      	movs	r1, #32
 8017fc2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	2200      	movs	r2, #0
 8017fce:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	4a36      	ldr	r2, [pc, #216]	@ (80180b0 <UART_RxISR_8BIT+0x1c4>)
 8017fd6:	4293      	cmp	r3, r2
 8017fd8:	d01f      	beq.n	801801a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	685a      	ldr	r2, [r3, #4]
 8017fe0:	2380      	movs	r3, #128	@ 0x80
 8017fe2:	041b      	lsls	r3, r3, #16
 8017fe4:	4013      	ands	r3, r2
 8017fe6:	d018      	beq.n	801801a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8017fec:	61bb      	str	r3, [r7, #24]
  return(result);
 8017fee:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017ff0:	643b      	str	r3, [r7, #64]	@ 0x40
 8017ff2:	2301      	movs	r3, #1
 8017ff4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ff6:	69fb      	ldr	r3, [r7, #28]
 8017ff8:	f383 8810 	msr	PRIMASK, r3
}
 8017ffc:	46c0      	nop			@ (mov r8, r8)
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	681a      	ldr	r2, [r3, #0]
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	492a      	ldr	r1, [pc, #168]	@ (80180b4 <UART_RxISR_8BIT+0x1c8>)
 801800a:	400a      	ands	r2, r1
 801800c:	601a      	str	r2, [r3, #0]
 801800e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018010:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018012:	6a3b      	ldr	r3, [r7, #32]
 8018014:	f383 8810 	msr	PRIMASK, r3
}
 8018018:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801801e:	2b01      	cmp	r3, #1
 8018020:	d130      	bne.n	8018084 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	2200      	movs	r2, #0
 8018026:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018028:	f3ef 8310 	mrs	r3, PRIMASK
 801802c:	60fb      	str	r3, [r7, #12]
  return(result);
 801802e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018030:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018032:	2301      	movs	r3, #1
 8018034:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018036:	693b      	ldr	r3, [r7, #16]
 8018038:	f383 8810 	msr	PRIMASK, r3
}
 801803c:	46c0      	nop			@ (mov r8, r8)
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	681a      	ldr	r2, [r3, #0]
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	2110      	movs	r1, #16
 801804a:	438a      	bics	r2, r1
 801804c:	601a      	str	r2, [r3, #0]
 801804e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018050:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018052:	697b      	ldr	r3, [r7, #20]
 8018054:	f383 8810 	msr	PRIMASK, r3
}
 8018058:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	69db      	ldr	r3, [r3, #28]
 8018060:	2210      	movs	r2, #16
 8018062:	4013      	ands	r3, r2
 8018064:	2b10      	cmp	r3, #16
 8018066:	d103      	bne.n	8018070 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	2210      	movs	r2, #16
 801806e:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	22ac      	movs	r2, #172	@ 0xac
 8018074:	589b      	ldr	r3, [r3, r2]
 8018076:	687a      	ldr	r2, [r7, #4]
 8018078:	2158      	movs	r1, #88	@ 0x58
 801807a:	5a51      	ldrh	r1, [r2, r1]
 801807c:	687a      	ldr	r2, [r7, #4]
 801807e:	0010      	movs	r0, r2
 8018080:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018082:	e00e      	b.n	80180a2 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	2294      	movs	r2, #148	@ 0x94
 8018088:	589b      	ldr	r3, [r3, r2]
 801808a:	687a      	ldr	r2, [r7, #4]
 801808c:	0010      	movs	r0, r2
 801808e:	4798      	blx	r3
}
 8018090:	e007      	b.n	80180a2 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	699a      	ldr	r2, [r3, #24]
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	2108      	movs	r1, #8
 801809e:	430a      	orrs	r2, r1
 80180a0:	619a      	str	r2, [r3, #24]
}
 80180a2:	46c0      	nop			@ (mov r8, r8)
 80180a4:	46bd      	mov	sp, r7
 80180a6:	b014      	add	sp, #80	@ 0x50
 80180a8:	bd80      	pop	{r7, pc}
 80180aa:	46c0      	nop			@ (mov r8, r8)
 80180ac:	fffffedf 	.word	0xfffffedf
 80180b0:	40004800 	.word	0x40004800
 80180b4:	fbffffff 	.word	0xfbffffff

080180b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b094      	sub	sp, #80	@ 0x50
 80180bc:	af00      	add	r7, sp, #0
 80180be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80180c0:	204e      	movs	r0, #78	@ 0x4e
 80180c2:	183b      	adds	r3, r7, r0
 80180c4:	687a      	ldr	r2, [r7, #4]
 80180c6:	215c      	movs	r1, #92	@ 0x5c
 80180c8:	5a52      	ldrh	r2, [r2, r1]
 80180ca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	2280      	movs	r2, #128	@ 0x80
 80180d0:	589b      	ldr	r3, [r3, r2]
 80180d2:	2b22      	cmp	r3, #34	@ 0x22
 80180d4:	d000      	beq.n	80180d8 <UART_RxISR_16BIT+0x20>
 80180d6:	e0c2      	b.n	801825e <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80180de:	214c      	movs	r1, #76	@ 0x4c
 80180e0:	187b      	adds	r3, r7, r1
 80180e2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80180e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80180ea:	187b      	adds	r3, r7, r1
 80180ec:	183a      	adds	r2, r7, r0
 80180ee:	881b      	ldrh	r3, [r3, #0]
 80180f0:	8812      	ldrh	r2, [r2, #0]
 80180f2:	4013      	ands	r3, r2
 80180f4:	b29a      	uxth	r2, r3
 80180f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80180f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80180fe:	1c9a      	adds	r2, r3, #2
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	225a      	movs	r2, #90	@ 0x5a
 8018108:	5a9b      	ldrh	r3, [r3, r2]
 801810a:	b29b      	uxth	r3, r3
 801810c:	3b01      	subs	r3, #1
 801810e:	b299      	uxth	r1, r3
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	225a      	movs	r2, #90	@ 0x5a
 8018114:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	225a      	movs	r2, #90	@ 0x5a
 801811a:	5a9b      	ldrh	r3, [r3, r2]
 801811c:	b29b      	uxth	r3, r3
 801811e:	2b00      	cmp	r3, #0
 8018120:	d000      	beq.n	8018124 <UART_RxISR_16BIT+0x6c>
 8018122:	e0a4      	b.n	801826e <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018124:	f3ef 8310 	mrs	r3, PRIMASK
 8018128:	623b      	str	r3, [r7, #32]
  return(result);
 801812a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801812c:	647b      	str	r3, [r7, #68]	@ 0x44
 801812e:	2301      	movs	r3, #1
 8018130:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018134:	f383 8810 	msr	PRIMASK, r3
}
 8018138:	46c0      	nop			@ (mov r8, r8)
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	681a      	ldr	r2, [r3, #0]
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	494c      	ldr	r1, [pc, #304]	@ (8018278 <UART_RxISR_16BIT+0x1c0>)
 8018146:	400a      	ands	r2, r1
 8018148:	601a      	str	r2, [r3, #0]
 801814a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801814c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801814e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018150:	f383 8810 	msr	PRIMASK, r3
}
 8018154:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018156:	f3ef 8310 	mrs	r3, PRIMASK
 801815a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801815c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801815e:	643b      	str	r3, [r7, #64]	@ 0x40
 8018160:	2301      	movs	r3, #1
 8018162:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018166:	f383 8810 	msr	PRIMASK, r3
}
 801816a:	46c0      	nop			@ (mov r8, r8)
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	689a      	ldr	r2, [r3, #8]
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	2101      	movs	r1, #1
 8018178:	438a      	bics	r2, r1
 801817a:	609a      	str	r2, [r3, #8]
 801817c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801817e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018182:	f383 8810 	msr	PRIMASK, r3
}
 8018186:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	2280      	movs	r2, #128	@ 0x80
 801818c:	2120      	movs	r1, #32
 801818e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	2200      	movs	r2, #0
 8018194:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	2200      	movs	r2, #0
 801819a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	4a36      	ldr	r2, [pc, #216]	@ (801827c <UART_RxISR_16BIT+0x1c4>)
 80181a2:	4293      	cmp	r3, r2
 80181a4:	d01f      	beq.n	80181e6 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	685a      	ldr	r2, [r3, #4]
 80181ac:	2380      	movs	r3, #128	@ 0x80
 80181ae:	041b      	lsls	r3, r3, #16
 80181b0:	4013      	ands	r3, r2
 80181b2:	d018      	beq.n	80181e6 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80181b4:	f3ef 8310 	mrs	r3, PRIMASK
 80181b8:	617b      	str	r3, [r7, #20]
  return(result);
 80181ba:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80181bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80181be:	2301      	movs	r3, #1
 80181c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181c2:	69bb      	ldr	r3, [r7, #24]
 80181c4:	f383 8810 	msr	PRIMASK, r3
}
 80181c8:	46c0      	nop			@ (mov r8, r8)
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	681a      	ldr	r2, [r3, #0]
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	492a      	ldr	r1, [pc, #168]	@ (8018280 <UART_RxISR_16BIT+0x1c8>)
 80181d6:	400a      	ands	r2, r1
 80181d8:	601a      	str	r2, [r3, #0]
 80181da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80181dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80181de:	69fb      	ldr	r3, [r7, #28]
 80181e0:	f383 8810 	msr	PRIMASK, r3
}
 80181e4:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80181ea:	2b01      	cmp	r3, #1
 80181ec:	d130      	bne.n	8018250 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	2200      	movs	r2, #0
 80181f2:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80181f4:	f3ef 8310 	mrs	r3, PRIMASK
 80181f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80181fa:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80181fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80181fe:	2301      	movs	r3, #1
 8018200:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	f383 8810 	msr	PRIMASK, r3
}
 8018208:	46c0      	nop			@ (mov r8, r8)
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	681a      	ldr	r2, [r3, #0]
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	2110      	movs	r1, #16
 8018216:	438a      	bics	r2, r1
 8018218:	601a      	str	r2, [r3, #0]
 801821a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801821c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801821e:	693b      	ldr	r3, [r7, #16]
 8018220:	f383 8810 	msr	PRIMASK, r3
}
 8018224:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	69db      	ldr	r3, [r3, #28]
 801822c:	2210      	movs	r2, #16
 801822e:	4013      	ands	r3, r2
 8018230:	2b10      	cmp	r3, #16
 8018232:	d103      	bne.n	801823c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	2210      	movs	r2, #16
 801823a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	22ac      	movs	r2, #172	@ 0xac
 8018240:	589b      	ldr	r3, [r3, r2]
 8018242:	687a      	ldr	r2, [r7, #4]
 8018244:	2158      	movs	r1, #88	@ 0x58
 8018246:	5a51      	ldrh	r1, [r2, r1]
 8018248:	687a      	ldr	r2, [r7, #4]
 801824a:	0010      	movs	r0, r2
 801824c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801824e:	e00e      	b.n	801826e <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	2294      	movs	r2, #148	@ 0x94
 8018254:	589b      	ldr	r3, [r3, r2]
 8018256:	687a      	ldr	r2, [r7, #4]
 8018258:	0010      	movs	r0, r2
 801825a:	4798      	blx	r3
}
 801825c:	e007      	b.n	801826e <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	699a      	ldr	r2, [r3, #24]
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	2108      	movs	r1, #8
 801826a:	430a      	orrs	r2, r1
 801826c:	619a      	str	r2, [r3, #24]
}
 801826e:	46c0      	nop			@ (mov r8, r8)
 8018270:	46bd      	mov	sp, r7
 8018272:	b014      	add	sp, #80	@ 0x50
 8018274:	bd80      	pop	{r7, pc}
 8018276:	46c0      	nop			@ (mov r8, r8)
 8018278:	fffffedf 	.word	0xfffffedf
 801827c:	40004800 	.word	0x40004800
 8018280:	fbffffff 	.word	0xfbffffff

08018284 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018284:	b580      	push	{r7, lr}
 8018286:	b082      	sub	sp, #8
 8018288:	af00      	add	r7, sp, #0
 801828a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801828c:	46c0      	nop			@ (mov r8, r8)
 801828e:	46bd      	mov	sp, r7
 8018290:	b002      	add	sp, #8
 8018292:	bd80      	pop	{r7, pc}

08018294 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8018294:	b580      	push	{r7, lr}
 8018296:	b084      	sub	sp, #16
 8018298:	af00      	add	r7, sp, #0
 801829a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	2244      	movs	r2, #68	@ 0x44
 80182a0:	2100      	movs	r1, #0
 80182a2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80182a4:	4b05      	ldr	r3, [pc, #20]	@ (80182bc <USB_EnableGlobalInt+0x28>)
 80182a6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	b299      	uxth	r1, r3
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	2240      	movs	r2, #64	@ 0x40
 80182b0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80182b2:	2300      	movs	r3, #0
}
 80182b4:	0018      	movs	r0, r3
 80182b6:	46bd      	mov	sp, r7
 80182b8:	b004      	add	sp, #16
 80182ba:	bd80      	pop	{r7, pc}
 80182bc:	0000bf80 	.word	0x0000bf80

080182c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80182c0:	b580      	push	{r7, lr}
 80182c2:	b084      	sub	sp, #16
 80182c4:	af00      	add	r7, sp, #0
 80182c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80182c8:	4b09      	ldr	r3, [pc, #36]	@ (80182f0 <USB_DisableGlobalInt+0x30>)
 80182ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	2240      	movs	r2, #64	@ 0x40
 80182d0:	5a9b      	ldrh	r3, [r3, r2]
 80182d2:	b29b      	uxth	r3, r3
 80182d4:	68fa      	ldr	r2, [r7, #12]
 80182d6:	b292      	uxth	r2, r2
 80182d8:	43d2      	mvns	r2, r2
 80182da:	b292      	uxth	r2, r2
 80182dc:	4013      	ands	r3, r2
 80182de:	b299      	uxth	r1, r3
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	2240      	movs	r2, #64	@ 0x40
 80182e4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80182e6:	2300      	movs	r3, #0
}
 80182e8:	0018      	movs	r0, r3
 80182ea:	46bd      	mov	sp, r7
 80182ec:	b004      	add	sp, #16
 80182ee:	bd80      	pop	{r7, pc}
 80182f0:	0000bf80 	.word	0x0000bf80

080182f4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80182f4:	b084      	sub	sp, #16
 80182f6:	b590      	push	{r4, r7, lr}
 80182f8:	b083      	sub	sp, #12
 80182fa:	af00      	add	r7, sp, #0
 80182fc:	6078      	str	r0, [r7, #4]
 80182fe:	2004      	movs	r0, #4
 8018300:	2410      	movs	r4, #16
 8018302:	1900      	adds	r0, r0, r4
 8018304:	2408      	movs	r4, #8
 8018306:	46a4      	mov	ip, r4
 8018308:	44bc      	add	ip, r7
 801830a:	4460      	add	r0, ip
 801830c:	6001      	str	r1, [r0, #0]
 801830e:	6042      	str	r2, [r0, #4]
 8018310:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	2240      	movs	r2, #64	@ 0x40
 8018316:	2101      	movs	r1, #1
 8018318:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	2240      	movs	r2, #64	@ 0x40
 801831e:	2100      	movs	r1, #0
 8018320:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	2244      	movs	r2, #68	@ 0x44
 8018326:	2100      	movs	r1, #0
 8018328:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	2250      	movs	r2, #80	@ 0x50
 801832e:	2100      	movs	r1, #0
 8018330:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018332:	2300      	movs	r3, #0
}
 8018334:	0018      	movs	r0, r3
 8018336:	46bd      	mov	sp, r7
 8018338:	b003      	add	sp, #12
 801833a:	bc90      	pop	{r4, r7}
 801833c:	bc08      	pop	{r3}
 801833e:	b004      	add	sp, #16
 8018340:	4718      	bx	r3
	...

08018344 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018344:	b580      	push	{r7, lr}
 8018346:	b09c      	sub	sp, #112	@ 0x70
 8018348:	af00      	add	r7, sp, #0
 801834a:	6078      	str	r0, [r7, #4]
 801834c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801834e:	236f      	movs	r3, #111	@ 0x6f
 8018350:	18fb      	adds	r3, r7, r3
 8018352:	2200      	movs	r2, #0
 8018354:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8018356:	687a      	ldr	r2, [r7, #4]
 8018358:	683b      	ldr	r3, [r7, #0]
 801835a:	781b      	ldrb	r3, [r3, #0]
 801835c:	009b      	lsls	r3, r3, #2
 801835e:	18d3      	adds	r3, r2, r3
 8018360:	881b      	ldrh	r3, [r3, #0]
 8018362:	b29a      	uxth	r2, r3
 8018364:	236c      	movs	r3, #108	@ 0x6c
 8018366:	18fb      	adds	r3, r7, r3
 8018368:	49a3      	ldr	r1, [pc, #652]	@ (80185f8 <USB_ActivateEndpoint+0x2b4>)
 801836a:	400a      	ands	r2, r1
 801836c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801836e:	683b      	ldr	r3, [r7, #0]
 8018370:	78db      	ldrb	r3, [r3, #3]
 8018372:	2b03      	cmp	r3, #3
 8018374:	d017      	beq.n	80183a6 <USB_ActivateEndpoint+0x62>
 8018376:	dc28      	bgt.n	80183ca <USB_ActivateEndpoint+0x86>
 8018378:	2b02      	cmp	r3, #2
 801837a:	d00e      	beq.n	801839a <USB_ActivateEndpoint+0x56>
 801837c:	dc25      	bgt.n	80183ca <USB_ActivateEndpoint+0x86>
 801837e:	2b00      	cmp	r3, #0
 8018380:	d002      	beq.n	8018388 <USB_ActivateEndpoint+0x44>
 8018382:	2b01      	cmp	r3, #1
 8018384:	d018      	beq.n	80183b8 <USB_ActivateEndpoint+0x74>
 8018386:	e020      	b.n	80183ca <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8018388:	226c      	movs	r2, #108	@ 0x6c
 801838a:	18bb      	adds	r3, r7, r2
 801838c:	18ba      	adds	r2, r7, r2
 801838e:	8812      	ldrh	r2, [r2, #0]
 8018390:	2180      	movs	r1, #128	@ 0x80
 8018392:	0089      	lsls	r1, r1, #2
 8018394:	430a      	orrs	r2, r1
 8018396:	801a      	strh	r2, [r3, #0]
      break;
 8018398:	e01c      	b.n	80183d4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801839a:	226c      	movs	r2, #108	@ 0x6c
 801839c:	18bb      	adds	r3, r7, r2
 801839e:	18ba      	adds	r2, r7, r2
 80183a0:	8812      	ldrh	r2, [r2, #0]
 80183a2:	801a      	strh	r2, [r3, #0]
      break;
 80183a4:	e016      	b.n	80183d4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80183a6:	226c      	movs	r2, #108	@ 0x6c
 80183a8:	18bb      	adds	r3, r7, r2
 80183aa:	18ba      	adds	r2, r7, r2
 80183ac:	8812      	ldrh	r2, [r2, #0]
 80183ae:	21c0      	movs	r1, #192	@ 0xc0
 80183b0:	00c9      	lsls	r1, r1, #3
 80183b2:	430a      	orrs	r2, r1
 80183b4:	801a      	strh	r2, [r3, #0]
      break;
 80183b6:	e00d      	b.n	80183d4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80183b8:	226c      	movs	r2, #108	@ 0x6c
 80183ba:	18bb      	adds	r3, r7, r2
 80183bc:	18ba      	adds	r2, r7, r2
 80183be:	8812      	ldrh	r2, [r2, #0]
 80183c0:	2180      	movs	r1, #128	@ 0x80
 80183c2:	00c9      	lsls	r1, r1, #3
 80183c4:	430a      	orrs	r2, r1
 80183c6:	801a      	strh	r2, [r3, #0]
      break;
 80183c8:	e004      	b.n	80183d4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80183ca:	236f      	movs	r3, #111	@ 0x6f
 80183cc:	18fb      	adds	r3, r7, r3
 80183ce:	2201      	movs	r2, #1
 80183d0:	701a      	strb	r2, [r3, #0]
      break;
 80183d2:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80183d4:	687a      	ldr	r2, [r7, #4]
 80183d6:	683b      	ldr	r3, [r7, #0]
 80183d8:	781b      	ldrb	r3, [r3, #0]
 80183da:	009b      	lsls	r3, r3, #2
 80183dc:	18d3      	adds	r3, r2, r3
 80183de:	226c      	movs	r2, #108	@ 0x6c
 80183e0:	18ba      	adds	r2, r7, r2
 80183e2:	8812      	ldrh	r2, [r2, #0]
 80183e4:	4985      	ldr	r1, [pc, #532]	@ (80185fc <USB_ActivateEndpoint+0x2b8>)
 80183e6:	430a      	orrs	r2, r1
 80183e8:	b292      	uxth	r2, r2
 80183ea:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80183ec:	687a      	ldr	r2, [r7, #4]
 80183ee:	683b      	ldr	r3, [r7, #0]
 80183f0:	781b      	ldrb	r3, [r3, #0]
 80183f2:	009b      	lsls	r3, r3, #2
 80183f4:	18d3      	adds	r3, r2, r3
 80183f6:	881b      	ldrh	r3, [r3, #0]
 80183f8:	b29b      	uxth	r3, r3
 80183fa:	b21b      	sxth	r3, r3
 80183fc:	4a80      	ldr	r2, [pc, #512]	@ (8018600 <USB_ActivateEndpoint+0x2bc>)
 80183fe:	4013      	ands	r3, r2
 8018400:	b21a      	sxth	r2, r3
 8018402:	683b      	ldr	r3, [r7, #0]
 8018404:	781b      	ldrb	r3, [r3, #0]
 8018406:	b21b      	sxth	r3, r3
 8018408:	4313      	orrs	r3, r2
 801840a:	b21a      	sxth	r2, r3
 801840c:	2166      	movs	r1, #102	@ 0x66
 801840e:	187b      	adds	r3, r7, r1
 8018410:	801a      	strh	r2, [r3, #0]
 8018412:	687a      	ldr	r2, [r7, #4]
 8018414:	683b      	ldr	r3, [r7, #0]
 8018416:	781b      	ldrb	r3, [r3, #0]
 8018418:	009b      	lsls	r3, r3, #2
 801841a:	18d3      	adds	r3, r2, r3
 801841c:	187a      	adds	r2, r7, r1
 801841e:	8812      	ldrh	r2, [r2, #0]
 8018420:	4976      	ldr	r1, [pc, #472]	@ (80185fc <USB_ActivateEndpoint+0x2b8>)
 8018422:	430a      	orrs	r2, r1
 8018424:	b292      	uxth	r2, r2
 8018426:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8018428:	683b      	ldr	r3, [r7, #0]
 801842a:	7b1b      	ldrb	r3, [r3, #12]
 801842c:	2b00      	cmp	r3, #0
 801842e:	d000      	beq.n	8018432 <USB_ActivateEndpoint+0xee>
 8018430:	e178      	b.n	8018724 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8018432:	683b      	ldr	r3, [r7, #0]
 8018434:	785b      	ldrb	r3, [r3, #1]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d100      	bne.n	801843c <USB_ActivateEndpoint+0xf8>
 801843a:	e07a      	b.n	8018532 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	61bb      	str	r3, [r7, #24]
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	2250      	movs	r2, #80	@ 0x50
 8018444:	5a9b      	ldrh	r3, [r3, r2]
 8018446:	b29b      	uxth	r3, r3
 8018448:	001a      	movs	r2, r3
 801844a:	69bb      	ldr	r3, [r7, #24]
 801844c:	189b      	adds	r3, r3, r2
 801844e:	61bb      	str	r3, [r7, #24]
 8018450:	683b      	ldr	r3, [r7, #0]
 8018452:	781b      	ldrb	r3, [r3, #0]
 8018454:	00da      	lsls	r2, r3, #3
 8018456:	69bb      	ldr	r3, [r7, #24]
 8018458:	18d3      	adds	r3, r2, r3
 801845a:	2280      	movs	r2, #128	@ 0x80
 801845c:	00d2      	lsls	r2, r2, #3
 801845e:	4694      	mov	ip, r2
 8018460:	4463      	add	r3, ip
 8018462:	617b      	str	r3, [r7, #20]
 8018464:	683b      	ldr	r3, [r7, #0]
 8018466:	88db      	ldrh	r3, [r3, #6]
 8018468:	085b      	lsrs	r3, r3, #1
 801846a:	b29b      	uxth	r3, r3
 801846c:	18db      	adds	r3, r3, r3
 801846e:	b29a      	uxth	r2, r3
 8018470:	697b      	ldr	r3, [r7, #20]
 8018472:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018474:	687a      	ldr	r2, [r7, #4]
 8018476:	683b      	ldr	r3, [r7, #0]
 8018478:	781b      	ldrb	r3, [r3, #0]
 801847a:	009b      	lsls	r3, r3, #2
 801847c:	18d2      	adds	r2, r2, r3
 801847e:	2112      	movs	r1, #18
 8018480:	187b      	adds	r3, r7, r1
 8018482:	8812      	ldrh	r2, [r2, #0]
 8018484:	801a      	strh	r2, [r3, #0]
 8018486:	187b      	adds	r3, r7, r1
 8018488:	881b      	ldrh	r3, [r3, #0]
 801848a:	2240      	movs	r2, #64	@ 0x40
 801848c:	4013      	ands	r3, r2
 801848e:	d016      	beq.n	80184be <USB_ActivateEndpoint+0x17a>
 8018490:	687a      	ldr	r2, [r7, #4]
 8018492:	683b      	ldr	r3, [r7, #0]
 8018494:	781b      	ldrb	r3, [r3, #0]
 8018496:	009b      	lsls	r3, r3, #2
 8018498:	18d3      	adds	r3, r2, r3
 801849a:	881b      	ldrh	r3, [r3, #0]
 801849c:	b29a      	uxth	r2, r3
 801849e:	2010      	movs	r0, #16
 80184a0:	183b      	adds	r3, r7, r0
 80184a2:	4957      	ldr	r1, [pc, #348]	@ (8018600 <USB_ActivateEndpoint+0x2bc>)
 80184a4:	400a      	ands	r2, r1
 80184a6:	801a      	strh	r2, [r3, #0]
 80184a8:	687a      	ldr	r2, [r7, #4]
 80184aa:	683b      	ldr	r3, [r7, #0]
 80184ac:	781b      	ldrb	r3, [r3, #0]
 80184ae:	009b      	lsls	r3, r3, #2
 80184b0:	18d3      	adds	r3, r2, r3
 80184b2:	183a      	adds	r2, r7, r0
 80184b4:	8812      	ldrh	r2, [r2, #0]
 80184b6:	4953      	ldr	r1, [pc, #332]	@ (8018604 <USB_ActivateEndpoint+0x2c0>)
 80184b8:	430a      	orrs	r2, r1
 80184ba:	b292      	uxth	r2, r2
 80184bc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80184be:	683b      	ldr	r3, [r7, #0]
 80184c0:	78db      	ldrb	r3, [r3, #3]
 80184c2:	2b01      	cmp	r3, #1
 80184c4:	d01d      	beq.n	8018502 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80184c6:	687a      	ldr	r2, [r7, #4]
 80184c8:	683b      	ldr	r3, [r7, #0]
 80184ca:	781b      	ldrb	r3, [r3, #0]
 80184cc:	009b      	lsls	r3, r3, #2
 80184ce:	18d3      	adds	r3, r2, r3
 80184d0:	881b      	ldrh	r3, [r3, #0]
 80184d2:	b29a      	uxth	r2, r3
 80184d4:	200c      	movs	r0, #12
 80184d6:	183b      	adds	r3, r7, r0
 80184d8:	494b      	ldr	r1, [pc, #300]	@ (8018608 <USB_ActivateEndpoint+0x2c4>)
 80184da:	400a      	ands	r2, r1
 80184dc:	801a      	strh	r2, [r3, #0]
 80184de:	183b      	adds	r3, r7, r0
 80184e0:	183a      	adds	r2, r7, r0
 80184e2:	8812      	ldrh	r2, [r2, #0]
 80184e4:	2120      	movs	r1, #32
 80184e6:	404a      	eors	r2, r1
 80184e8:	801a      	strh	r2, [r3, #0]
 80184ea:	687a      	ldr	r2, [r7, #4]
 80184ec:	683b      	ldr	r3, [r7, #0]
 80184ee:	781b      	ldrb	r3, [r3, #0]
 80184f0:	009b      	lsls	r3, r3, #2
 80184f2:	18d3      	adds	r3, r2, r3
 80184f4:	183a      	adds	r2, r7, r0
 80184f6:	8812      	ldrh	r2, [r2, #0]
 80184f8:	4940      	ldr	r1, [pc, #256]	@ (80185fc <USB_ActivateEndpoint+0x2b8>)
 80184fa:	430a      	orrs	r2, r1
 80184fc:	b292      	uxth	r2, r2
 80184fe:	801a      	strh	r2, [r3, #0]
 8018500:	e2b4      	b.n	8018a6c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018502:	687a      	ldr	r2, [r7, #4]
 8018504:	683b      	ldr	r3, [r7, #0]
 8018506:	781b      	ldrb	r3, [r3, #0]
 8018508:	009b      	lsls	r3, r3, #2
 801850a:	18d3      	adds	r3, r2, r3
 801850c:	881b      	ldrh	r3, [r3, #0]
 801850e:	b29a      	uxth	r2, r3
 8018510:	200e      	movs	r0, #14
 8018512:	183b      	adds	r3, r7, r0
 8018514:	493c      	ldr	r1, [pc, #240]	@ (8018608 <USB_ActivateEndpoint+0x2c4>)
 8018516:	400a      	ands	r2, r1
 8018518:	801a      	strh	r2, [r3, #0]
 801851a:	687a      	ldr	r2, [r7, #4]
 801851c:	683b      	ldr	r3, [r7, #0]
 801851e:	781b      	ldrb	r3, [r3, #0]
 8018520:	009b      	lsls	r3, r3, #2
 8018522:	18d3      	adds	r3, r2, r3
 8018524:	183a      	adds	r2, r7, r0
 8018526:	8812      	ldrh	r2, [r2, #0]
 8018528:	4934      	ldr	r1, [pc, #208]	@ (80185fc <USB_ActivateEndpoint+0x2b8>)
 801852a:	430a      	orrs	r2, r1
 801852c:	b292      	uxth	r2, r2
 801852e:	801a      	strh	r2, [r3, #0]
 8018530:	e29c      	b.n	8018a6c <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	633b      	str	r3, [r7, #48]	@ 0x30
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	2250      	movs	r2, #80	@ 0x50
 801853a:	5a9b      	ldrh	r3, [r3, r2]
 801853c:	b29b      	uxth	r3, r3
 801853e:	001a      	movs	r2, r3
 8018540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018542:	189b      	adds	r3, r3, r2
 8018544:	633b      	str	r3, [r7, #48]	@ 0x30
 8018546:	683b      	ldr	r3, [r7, #0]
 8018548:	781b      	ldrb	r3, [r3, #0]
 801854a:	00da      	lsls	r2, r3, #3
 801854c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801854e:	18d3      	adds	r3, r2, r3
 8018550:	4a2e      	ldr	r2, [pc, #184]	@ (801860c <USB_ActivateEndpoint+0x2c8>)
 8018552:	4694      	mov	ip, r2
 8018554:	4463      	add	r3, ip
 8018556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018558:	683b      	ldr	r3, [r7, #0]
 801855a:	88db      	ldrh	r3, [r3, #6]
 801855c:	085b      	lsrs	r3, r3, #1
 801855e:	b29b      	uxth	r3, r3
 8018560:	18db      	adds	r3, r3, r3
 8018562:	b29a      	uxth	r2, r3
 8018564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018566:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	2250      	movs	r2, #80	@ 0x50
 8018570:	5a9b      	ldrh	r3, [r3, r2]
 8018572:	b29b      	uxth	r3, r3
 8018574:	001a      	movs	r2, r3
 8018576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018578:	189b      	adds	r3, r3, r2
 801857a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801857c:	683b      	ldr	r3, [r7, #0]
 801857e:	781b      	ldrb	r3, [r3, #0]
 8018580:	00da      	lsls	r2, r3, #3
 8018582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018584:	18d3      	adds	r3, r2, r3
 8018586:	4a22      	ldr	r2, [pc, #136]	@ (8018610 <USB_ActivateEndpoint+0x2cc>)
 8018588:	4694      	mov	ip, r2
 801858a:	4463      	add	r3, ip
 801858c:	627b      	str	r3, [r7, #36]	@ 0x24
 801858e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018590:	881b      	ldrh	r3, [r3, #0]
 8018592:	b29b      	uxth	r3, r3
 8018594:	059b      	lsls	r3, r3, #22
 8018596:	0d9b      	lsrs	r3, r3, #22
 8018598:	b29a      	uxth	r2, r3
 801859a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801859c:	801a      	strh	r2, [r3, #0]
 801859e:	683b      	ldr	r3, [r7, #0]
 80185a0:	691b      	ldr	r3, [r3, #16]
 80185a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80185a4:	d91a      	bls.n	80185dc <USB_ActivateEndpoint+0x298>
 80185a6:	683b      	ldr	r3, [r7, #0]
 80185a8:	691b      	ldr	r3, [r3, #16]
 80185aa:	095b      	lsrs	r3, r3, #5
 80185ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80185ae:	683b      	ldr	r3, [r7, #0]
 80185b0:	691b      	ldr	r3, [r3, #16]
 80185b2:	221f      	movs	r2, #31
 80185b4:	4013      	ands	r3, r2
 80185b6:	d102      	bne.n	80185be <USB_ActivateEndpoint+0x27a>
 80185b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80185ba:	3b01      	subs	r3, #1
 80185bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80185be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185c0:	881b      	ldrh	r3, [r3, #0]
 80185c2:	b29a      	uxth	r2, r3
 80185c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80185c6:	b29b      	uxth	r3, r3
 80185c8:	029b      	lsls	r3, r3, #10
 80185ca:	b29b      	uxth	r3, r3
 80185cc:	4313      	orrs	r3, r2
 80185ce:	b29b      	uxth	r3, r3
 80185d0:	4a10      	ldr	r2, [pc, #64]	@ (8018614 <USB_ActivateEndpoint+0x2d0>)
 80185d2:	4313      	orrs	r3, r2
 80185d4:	b29a      	uxth	r2, r3
 80185d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185d8:	801a      	strh	r2, [r3, #0]
 80185da:	e034      	b.n	8018646 <USB_ActivateEndpoint+0x302>
 80185dc:	683b      	ldr	r3, [r7, #0]
 80185de:	691b      	ldr	r3, [r3, #16]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d119      	bne.n	8018618 <USB_ActivateEndpoint+0x2d4>
 80185e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185e6:	881b      	ldrh	r3, [r3, #0]
 80185e8:	b29b      	uxth	r3, r3
 80185ea:	4a0a      	ldr	r2, [pc, #40]	@ (8018614 <USB_ActivateEndpoint+0x2d0>)
 80185ec:	4313      	orrs	r3, r2
 80185ee:	b29a      	uxth	r2, r3
 80185f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185f2:	801a      	strh	r2, [r3, #0]
 80185f4:	e027      	b.n	8018646 <USB_ActivateEndpoint+0x302>
 80185f6:	46c0      	nop			@ (mov r8, r8)
 80185f8:	ffff898f 	.word	0xffff898f
 80185fc:	ffff8080 	.word	0xffff8080
 8018600:	ffff8f8f 	.word	0xffff8f8f
 8018604:	ffff80c0 	.word	0xffff80c0
 8018608:	ffff8fbf 	.word	0xffff8fbf
 801860c:	00000404 	.word	0x00000404
 8018610:	00000406 	.word	0x00000406
 8018614:	ffff8000 	.word	0xffff8000
 8018618:	683b      	ldr	r3, [r7, #0]
 801861a:	691b      	ldr	r3, [r3, #16]
 801861c:	085b      	lsrs	r3, r3, #1
 801861e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018620:	683b      	ldr	r3, [r7, #0]
 8018622:	691b      	ldr	r3, [r3, #16]
 8018624:	2201      	movs	r2, #1
 8018626:	4013      	ands	r3, r2
 8018628:	d002      	beq.n	8018630 <USB_ActivateEndpoint+0x2ec>
 801862a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801862c:	3301      	adds	r3, #1
 801862e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018632:	881b      	ldrh	r3, [r3, #0]
 8018634:	b29a      	uxth	r2, r3
 8018636:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018638:	b29b      	uxth	r3, r3
 801863a:	029b      	lsls	r3, r3, #10
 801863c:	b29b      	uxth	r3, r3
 801863e:	4313      	orrs	r3, r2
 8018640:	b29a      	uxth	r2, r3
 8018642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018644:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018646:	687a      	ldr	r2, [r7, #4]
 8018648:	683b      	ldr	r3, [r7, #0]
 801864a:	781b      	ldrb	r3, [r3, #0]
 801864c:	009b      	lsls	r3, r3, #2
 801864e:	18d2      	adds	r2, r2, r3
 8018650:	2122      	movs	r1, #34	@ 0x22
 8018652:	187b      	adds	r3, r7, r1
 8018654:	8812      	ldrh	r2, [r2, #0]
 8018656:	801a      	strh	r2, [r3, #0]
 8018658:	187b      	adds	r3, r7, r1
 801865a:	881a      	ldrh	r2, [r3, #0]
 801865c:	2380      	movs	r3, #128	@ 0x80
 801865e:	01db      	lsls	r3, r3, #7
 8018660:	4013      	ands	r3, r2
 8018662:	d016      	beq.n	8018692 <USB_ActivateEndpoint+0x34e>
 8018664:	687a      	ldr	r2, [r7, #4]
 8018666:	683b      	ldr	r3, [r7, #0]
 8018668:	781b      	ldrb	r3, [r3, #0]
 801866a:	009b      	lsls	r3, r3, #2
 801866c:	18d3      	adds	r3, r2, r3
 801866e:	881b      	ldrh	r3, [r3, #0]
 8018670:	b29a      	uxth	r2, r3
 8018672:	2020      	movs	r0, #32
 8018674:	183b      	adds	r3, r7, r0
 8018676:	49dd      	ldr	r1, [pc, #884]	@ (80189ec <USB_ActivateEndpoint+0x6a8>)
 8018678:	400a      	ands	r2, r1
 801867a:	801a      	strh	r2, [r3, #0]
 801867c:	687a      	ldr	r2, [r7, #4]
 801867e:	683b      	ldr	r3, [r7, #0]
 8018680:	781b      	ldrb	r3, [r3, #0]
 8018682:	009b      	lsls	r3, r3, #2
 8018684:	18d3      	adds	r3, r2, r3
 8018686:	183a      	adds	r2, r7, r0
 8018688:	8812      	ldrh	r2, [r2, #0]
 801868a:	49d9      	ldr	r1, [pc, #868]	@ (80189f0 <USB_ActivateEndpoint+0x6ac>)
 801868c:	430a      	orrs	r2, r1
 801868e:	b292      	uxth	r2, r2
 8018690:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8018692:	683b      	ldr	r3, [r7, #0]
 8018694:	781b      	ldrb	r3, [r3, #0]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d125      	bne.n	80186e6 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801869a:	687a      	ldr	r2, [r7, #4]
 801869c:	683b      	ldr	r3, [r7, #0]
 801869e:	781b      	ldrb	r3, [r3, #0]
 80186a0:	009b      	lsls	r3, r3, #2
 80186a2:	18d3      	adds	r3, r2, r3
 80186a4:	881b      	ldrh	r3, [r3, #0]
 80186a6:	b29a      	uxth	r2, r3
 80186a8:	201c      	movs	r0, #28
 80186aa:	183b      	adds	r3, r7, r0
 80186ac:	49d1      	ldr	r1, [pc, #836]	@ (80189f4 <USB_ActivateEndpoint+0x6b0>)
 80186ae:	400a      	ands	r2, r1
 80186b0:	801a      	strh	r2, [r3, #0]
 80186b2:	183b      	adds	r3, r7, r0
 80186b4:	183a      	adds	r2, r7, r0
 80186b6:	8812      	ldrh	r2, [r2, #0]
 80186b8:	2180      	movs	r1, #128	@ 0x80
 80186ba:	0149      	lsls	r1, r1, #5
 80186bc:	404a      	eors	r2, r1
 80186be:	801a      	strh	r2, [r3, #0]
 80186c0:	183b      	adds	r3, r7, r0
 80186c2:	183a      	adds	r2, r7, r0
 80186c4:	8812      	ldrh	r2, [r2, #0]
 80186c6:	2180      	movs	r1, #128	@ 0x80
 80186c8:	0189      	lsls	r1, r1, #6
 80186ca:	404a      	eors	r2, r1
 80186cc:	801a      	strh	r2, [r3, #0]
 80186ce:	687a      	ldr	r2, [r7, #4]
 80186d0:	683b      	ldr	r3, [r7, #0]
 80186d2:	781b      	ldrb	r3, [r3, #0]
 80186d4:	009b      	lsls	r3, r3, #2
 80186d6:	18d3      	adds	r3, r2, r3
 80186d8:	183a      	adds	r2, r7, r0
 80186da:	8812      	ldrh	r2, [r2, #0]
 80186dc:	49c6      	ldr	r1, [pc, #792]	@ (80189f8 <USB_ActivateEndpoint+0x6b4>)
 80186de:	430a      	orrs	r2, r1
 80186e0:	b292      	uxth	r2, r2
 80186e2:	801a      	strh	r2, [r3, #0]
 80186e4:	e1c2      	b.n	8018a6c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80186e6:	687a      	ldr	r2, [r7, #4]
 80186e8:	683b      	ldr	r3, [r7, #0]
 80186ea:	781b      	ldrb	r3, [r3, #0]
 80186ec:	009b      	lsls	r3, r3, #2
 80186ee:	18d3      	adds	r3, r2, r3
 80186f0:	881b      	ldrh	r3, [r3, #0]
 80186f2:	b29a      	uxth	r2, r3
 80186f4:	201e      	movs	r0, #30
 80186f6:	183b      	adds	r3, r7, r0
 80186f8:	49be      	ldr	r1, [pc, #760]	@ (80189f4 <USB_ActivateEndpoint+0x6b0>)
 80186fa:	400a      	ands	r2, r1
 80186fc:	801a      	strh	r2, [r3, #0]
 80186fe:	183b      	adds	r3, r7, r0
 8018700:	183a      	adds	r2, r7, r0
 8018702:	8812      	ldrh	r2, [r2, #0]
 8018704:	2180      	movs	r1, #128	@ 0x80
 8018706:	0189      	lsls	r1, r1, #6
 8018708:	404a      	eors	r2, r1
 801870a:	801a      	strh	r2, [r3, #0]
 801870c:	687a      	ldr	r2, [r7, #4]
 801870e:	683b      	ldr	r3, [r7, #0]
 8018710:	781b      	ldrb	r3, [r3, #0]
 8018712:	009b      	lsls	r3, r3, #2
 8018714:	18d3      	adds	r3, r2, r3
 8018716:	183a      	adds	r2, r7, r0
 8018718:	8812      	ldrh	r2, [r2, #0]
 801871a:	49b7      	ldr	r1, [pc, #732]	@ (80189f8 <USB_ActivateEndpoint+0x6b4>)
 801871c:	430a      	orrs	r2, r1
 801871e:	b292      	uxth	r2, r2
 8018720:	801a      	strh	r2, [r3, #0]
 8018722:	e1a3      	b.n	8018a6c <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8018724:	683b      	ldr	r3, [r7, #0]
 8018726:	78db      	ldrb	r3, [r3, #3]
 8018728:	2b02      	cmp	r3, #2
 801872a:	d117      	bne.n	801875c <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801872c:	687a      	ldr	r2, [r7, #4]
 801872e:	683b      	ldr	r3, [r7, #0]
 8018730:	781b      	ldrb	r3, [r3, #0]
 8018732:	009b      	lsls	r3, r3, #2
 8018734:	18d3      	adds	r3, r2, r3
 8018736:	881b      	ldrh	r3, [r3, #0]
 8018738:	b29a      	uxth	r2, r3
 801873a:	2062      	movs	r0, #98	@ 0x62
 801873c:	183b      	adds	r3, r7, r0
 801873e:	49ab      	ldr	r1, [pc, #684]	@ (80189ec <USB_ActivateEndpoint+0x6a8>)
 8018740:	400a      	ands	r2, r1
 8018742:	801a      	strh	r2, [r3, #0]
 8018744:	687a      	ldr	r2, [r7, #4]
 8018746:	683b      	ldr	r3, [r7, #0]
 8018748:	781b      	ldrb	r3, [r3, #0]
 801874a:	009b      	lsls	r3, r3, #2
 801874c:	18d3      	adds	r3, r2, r3
 801874e:	183a      	adds	r2, r7, r0
 8018750:	8812      	ldrh	r2, [r2, #0]
 8018752:	49aa      	ldr	r1, [pc, #680]	@ (80189fc <USB_ActivateEndpoint+0x6b8>)
 8018754:	430a      	orrs	r2, r1
 8018756:	b292      	uxth	r2, r2
 8018758:	801a      	strh	r2, [r3, #0]
 801875a:	e016      	b.n	801878a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801875c:	687a      	ldr	r2, [r7, #4]
 801875e:	683b      	ldr	r3, [r7, #0]
 8018760:	781b      	ldrb	r3, [r3, #0]
 8018762:	009b      	lsls	r3, r3, #2
 8018764:	18d3      	adds	r3, r2, r3
 8018766:	881b      	ldrh	r3, [r3, #0]
 8018768:	b29a      	uxth	r2, r3
 801876a:	2064      	movs	r0, #100	@ 0x64
 801876c:	183b      	adds	r3, r7, r0
 801876e:	49a4      	ldr	r1, [pc, #656]	@ (8018a00 <USB_ActivateEndpoint+0x6bc>)
 8018770:	400a      	ands	r2, r1
 8018772:	801a      	strh	r2, [r3, #0]
 8018774:	687a      	ldr	r2, [r7, #4]
 8018776:	683b      	ldr	r3, [r7, #0]
 8018778:	781b      	ldrb	r3, [r3, #0]
 801877a:	009b      	lsls	r3, r3, #2
 801877c:	18d3      	adds	r3, r2, r3
 801877e:	183a      	adds	r2, r7, r0
 8018780:	8812      	ldrh	r2, [r2, #0]
 8018782:	499d      	ldr	r1, [pc, #628]	@ (80189f8 <USB_ActivateEndpoint+0x6b4>)
 8018784:	430a      	orrs	r2, r1
 8018786:	b292      	uxth	r2, r2
 8018788:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	2250      	movs	r2, #80	@ 0x50
 8018792:	5a9b      	ldrh	r3, [r3, r2]
 8018794:	b29b      	uxth	r3, r3
 8018796:	001a      	movs	r2, r3
 8018798:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801879a:	189b      	adds	r3, r3, r2
 801879c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801879e:	683b      	ldr	r3, [r7, #0]
 80187a0:	781b      	ldrb	r3, [r3, #0]
 80187a2:	00da      	lsls	r2, r3, #3
 80187a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80187a6:	18d3      	adds	r3, r2, r3
 80187a8:	2280      	movs	r2, #128	@ 0x80
 80187aa:	00d2      	lsls	r2, r2, #3
 80187ac:	4694      	mov	ip, r2
 80187ae:	4463      	add	r3, ip
 80187b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80187b2:	683b      	ldr	r3, [r7, #0]
 80187b4:	891b      	ldrh	r3, [r3, #8]
 80187b6:	085b      	lsrs	r3, r3, #1
 80187b8:	b29b      	uxth	r3, r3
 80187ba:	18db      	adds	r3, r3, r3
 80187bc:	b29a      	uxth	r2, r3
 80187be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80187c0:	801a      	strh	r2, [r3, #0]
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	2250      	movs	r2, #80	@ 0x50
 80187ca:	5a9b      	ldrh	r3, [r3, r2]
 80187cc:	b29b      	uxth	r3, r3
 80187ce:	001a      	movs	r2, r3
 80187d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80187d2:	189b      	adds	r3, r3, r2
 80187d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80187d6:	683b      	ldr	r3, [r7, #0]
 80187d8:	781b      	ldrb	r3, [r3, #0]
 80187da:	00da      	lsls	r2, r3, #3
 80187dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80187de:	18d3      	adds	r3, r2, r3
 80187e0:	4a88      	ldr	r2, [pc, #544]	@ (8018a04 <USB_ActivateEndpoint+0x6c0>)
 80187e2:	4694      	mov	ip, r2
 80187e4:	4463      	add	r3, ip
 80187e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80187e8:	683b      	ldr	r3, [r7, #0]
 80187ea:	895b      	ldrh	r3, [r3, #10]
 80187ec:	085b      	lsrs	r3, r3, #1
 80187ee:	b29b      	uxth	r3, r3
 80187f0:	18db      	adds	r3, r3, r3
 80187f2:	b29a      	uxth	r2, r3
 80187f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80187f6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80187f8:	683b      	ldr	r3, [r7, #0]
 80187fa:	785b      	ldrb	r3, [r3, #1]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d000      	beq.n	8018802 <USB_ActivateEndpoint+0x4be>
 8018800:	e087      	b.n	8018912 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018802:	687a      	ldr	r2, [r7, #4]
 8018804:	683b      	ldr	r3, [r7, #0]
 8018806:	781b      	ldrb	r3, [r3, #0]
 8018808:	009b      	lsls	r3, r3, #2
 801880a:	18d2      	adds	r2, r2, r3
 801880c:	2140      	movs	r1, #64	@ 0x40
 801880e:	187b      	adds	r3, r7, r1
 8018810:	8812      	ldrh	r2, [r2, #0]
 8018812:	801a      	strh	r2, [r3, #0]
 8018814:	187b      	adds	r3, r7, r1
 8018816:	881a      	ldrh	r2, [r3, #0]
 8018818:	2380      	movs	r3, #128	@ 0x80
 801881a:	01db      	lsls	r3, r3, #7
 801881c:	4013      	ands	r3, r2
 801881e:	d016      	beq.n	801884e <USB_ActivateEndpoint+0x50a>
 8018820:	687a      	ldr	r2, [r7, #4]
 8018822:	683b      	ldr	r3, [r7, #0]
 8018824:	781b      	ldrb	r3, [r3, #0]
 8018826:	009b      	lsls	r3, r3, #2
 8018828:	18d3      	adds	r3, r2, r3
 801882a:	881b      	ldrh	r3, [r3, #0]
 801882c:	b29a      	uxth	r2, r3
 801882e:	203e      	movs	r0, #62	@ 0x3e
 8018830:	183b      	adds	r3, r7, r0
 8018832:	496e      	ldr	r1, [pc, #440]	@ (80189ec <USB_ActivateEndpoint+0x6a8>)
 8018834:	400a      	ands	r2, r1
 8018836:	801a      	strh	r2, [r3, #0]
 8018838:	687a      	ldr	r2, [r7, #4]
 801883a:	683b      	ldr	r3, [r7, #0]
 801883c:	781b      	ldrb	r3, [r3, #0]
 801883e:	009b      	lsls	r3, r3, #2
 8018840:	18d3      	adds	r3, r2, r3
 8018842:	183a      	adds	r2, r7, r0
 8018844:	8812      	ldrh	r2, [r2, #0]
 8018846:	496a      	ldr	r1, [pc, #424]	@ (80189f0 <USB_ActivateEndpoint+0x6ac>)
 8018848:	430a      	orrs	r2, r1
 801884a:	b292      	uxth	r2, r2
 801884c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801884e:	687a      	ldr	r2, [r7, #4]
 8018850:	683b      	ldr	r3, [r7, #0]
 8018852:	781b      	ldrb	r3, [r3, #0]
 8018854:	009b      	lsls	r3, r3, #2
 8018856:	18d2      	adds	r2, r2, r3
 8018858:	213c      	movs	r1, #60	@ 0x3c
 801885a:	187b      	adds	r3, r7, r1
 801885c:	8812      	ldrh	r2, [r2, #0]
 801885e:	801a      	strh	r2, [r3, #0]
 8018860:	187b      	adds	r3, r7, r1
 8018862:	881b      	ldrh	r3, [r3, #0]
 8018864:	2240      	movs	r2, #64	@ 0x40
 8018866:	4013      	ands	r3, r2
 8018868:	d016      	beq.n	8018898 <USB_ActivateEndpoint+0x554>
 801886a:	687a      	ldr	r2, [r7, #4]
 801886c:	683b      	ldr	r3, [r7, #0]
 801886e:	781b      	ldrb	r3, [r3, #0]
 8018870:	009b      	lsls	r3, r3, #2
 8018872:	18d3      	adds	r3, r2, r3
 8018874:	881b      	ldrh	r3, [r3, #0]
 8018876:	b29a      	uxth	r2, r3
 8018878:	203a      	movs	r0, #58	@ 0x3a
 801887a:	183b      	adds	r3, r7, r0
 801887c:	495b      	ldr	r1, [pc, #364]	@ (80189ec <USB_ActivateEndpoint+0x6a8>)
 801887e:	400a      	ands	r2, r1
 8018880:	801a      	strh	r2, [r3, #0]
 8018882:	687a      	ldr	r2, [r7, #4]
 8018884:	683b      	ldr	r3, [r7, #0]
 8018886:	781b      	ldrb	r3, [r3, #0]
 8018888:	009b      	lsls	r3, r3, #2
 801888a:	18d3      	adds	r3, r2, r3
 801888c:	183a      	adds	r2, r7, r0
 801888e:	8812      	ldrh	r2, [r2, #0]
 8018890:	495d      	ldr	r1, [pc, #372]	@ (8018a08 <USB_ActivateEndpoint+0x6c4>)
 8018892:	430a      	orrs	r2, r1
 8018894:	b292      	uxth	r2, r2
 8018896:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8018898:	687a      	ldr	r2, [r7, #4]
 801889a:	683b      	ldr	r3, [r7, #0]
 801889c:	781b      	ldrb	r3, [r3, #0]
 801889e:	009b      	lsls	r3, r3, #2
 80188a0:	18d3      	adds	r3, r2, r3
 80188a2:	881b      	ldrh	r3, [r3, #0]
 80188a4:	b29a      	uxth	r2, r3
 80188a6:	2038      	movs	r0, #56	@ 0x38
 80188a8:	183b      	adds	r3, r7, r0
 80188aa:	4952      	ldr	r1, [pc, #328]	@ (80189f4 <USB_ActivateEndpoint+0x6b0>)
 80188ac:	400a      	ands	r2, r1
 80188ae:	801a      	strh	r2, [r3, #0]
 80188b0:	183b      	adds	r3, r7, r0
 80188b2:	183a      	adds	r2, r7, r0
 80188b4:	8812      	ldrh	r2, [r2, #0]
 80188b6:	2180      	movs	r1, #128	@ 0x80
 80188b8:	0149      	lsls	r1, r1, #5
 80188ba:	404a      	eors	r2, r1
 80188bc:	801a      	strh	r2, [r3, #0]
 80188be:	183b      	adds	r3, r7, r0
 80188c0:	183a      	adds	r2, r7, r0
 80188c2:	8812      	ldrh	r2, [r2, #0]
 80188c4:	2180      	movs	r1, #128	@ 0x80
 80188c6:	0189      	lsls	r1, r1, #6
 80188c8:	404a      	eors	r2, r1
 80188ca:	801a      	strh	r2, [r3, #0]
 80188cc:	687a      	ldr	r2, [r7, #4]
 80188ce:	683b      	ldr	r3, [r7, #0]
 80188d0:	781b      	ldrb	r3, [r3, #0]
 80188d2:	009b      	lsls	r3, r3, #2
 80188d4:	18d3      	adds	r3, r2, r3
 80188d6:	183a      	adds	r2, r7, r0
 80188d8:	8812      	ldrh	r2, [r2, #0]
 80188da:	4947      	ldr	r1, [pc, #284]	@ (80189f8 <USB_ActivateEndpoint+0x6b4>)
 80188dc:	430a      	orrs	r2, r1
 80188de:	b292      	uxth	r2, r2
 80188e0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80188e2:	687a      	ldr	r2, [r7, #4]
 80188e4:	683b      	ldr	r3, [r7, #0]
 80188e6:	781b      	ldrb	r3, [r3, #0]
 80188e8:	009b      	lsls	r3, r3, #2
 80188ea:	18d3      	adds	r3, r2, r3
 80188ec:	881b      	ldrh	r3, [r3, #0]
 80188ee:	b29a      	uxth	r2, r3
 80188f0:	2036      	movs	r0, #54	@ 0x36
 80188f2:	183b      	adds	r3, r7, r0
 80188f4:	4945      	ldr	r1, [pc, #276]	@ (8018a0c <USB_ActivateEndpoint+0x6c8>)
 80188f6:	400a      	ands	r2, r1
 80188f8:	801a      	strh	r2, [r3, #0]
 80188fa:	687a      	ldr	r2, [r7, #4]
 80188fc:	683b      	ldr	r3, [r7, #0]
 80188fe:	781b      	ldrb	r3, [r3, #0]
 8018900:	009b      	lsls	r3, r3, #2
 8018902:	18d3      	adds	r3, r2, r3
 8018904:	183a      	adds	r2, r7, r0
 8018906:	8812      	ldrh	r2, [r2, #0]
 8018908:	493b      	ldr	r1, [pc, #236]	@ (80189f8 <USB_ActivateEndpoint+0x6b4>)
 801890a:	430a      	orrs	r2, r1
 801890c:	b292      	uxth	r2, r2
 801890e:	801a      	strh	r2, [r3, #0]
 8018910:	e0ac      	b.n	8018a6c <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018912:	687a      	ldr	r2, [r7, #4]
 8018914:	683b      	ldr	r3, [r7, #0]
 8018916:	781b      	ldrb	r3, [r3, #0]
 8018918:	009b      	lsls	r3, r3, #2
 801891a:	18d2      	adds	r2, r2, r3
 801891c:	214e      	movs	r1, #78	@ 0x4e
 801891e:	187b      	adds	r3, r7, r1
 8018920:	8812      	ldrh	r2, [r2, #0]
 8018922:	801a      	strh	r2, [r3, #0]
 8018924:	187b      	adds	r3, r7, r1
 8018926:	881a      	ldrh	r2, [r3, #0]
 8018928:	2380      	movs	r3, #128	@ 0x80
 801892a:	01db      	lsls	r3, r3, #7
 801892c:	4013      	ands	r3, r2
 801892e:	d016      	beq.n	801895e <USB_ActivateEndpoint+0x61a>
 8018930:	687a      	ldr	r2, [r7, #4]
 8018932:	683b      	ldr	r3, [r7, #0]
 8018934:	781b      	ldrb	r3, [r3, #0]
 8018936:	009b      	lsls	r3, r3, #2
 8018938:	18d3      	adds	r3, r2, r3
 801893a:	881b      	ldrh	r3, [r3, #0]
 801893c:	b29a      	uxth	r2, r3
 801893e:	204c      	movs	r0, #76	@ 0x4c
 8018940:	183b      	adds	r3, r7, r0
 8018942:	492a      	ldr	r1, [pc, #168]	@ (80189ec <USB_ActivateEndpoint+0x6a8>)
 8018944:	400a      	ands	r2, r1
 8018946:	801a      	strh	r2, [r3, #0]
 8018948:	687a      	ldr	r2, [r7, #4]
 801894a:	683b      	ldr	r3, [r7, #0]
 801894c:	781b      	ldrb	r3, [r3, #0]
 801894e:	009b      	lsls	r3, r3, #2
 8018950:	18d3      	adds	r3, r2, r3
 8018952:	183a      	adds	r2, r7, r0
 8018954:	8812      	ldrh	r2, [r2, #0]
 8018956:	4926      	ldr	r1, [pc, #152]	@ (80189f0 <USB_ActivateEndpoint+0x6ac>)
 8018958:	430a      	orrs	r2, r1
 801895a:	b292      	uxth	r2, r2
 801895c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801895e:	687a      	ldr	r2, [r7, #4]
 8018960:	683b      	ldr	r3, [r7, #0]
 8018962:	781b      	ldrb	r3, [r3, #0]
 8018964:	009b      	lsls	r3, r3, #2
 8018966:	18d2      	adds	r2, r2, r3
 8018968:	214a      	movs	r1, #74	@ 0x4a
 801896a:	187b      	adds	r3, r7, r1
 801896c:	8812      	ldrh	r2, [r2, #0]
 801896e:	801a      	strh	r2, [r3, #0]
 8018970:	187b      	adds	r3, r7, r1
 8018972:	881b      	ldrh	r3, [r3, #0]
 8018974:	2240      	movs	r2, #64	@ 0x40
 8018976:	4013      	ands	r3, r2
 8018978:	d016      	beq.n	80189a8 <USB_ActivateEndpoint+0x664>
 801897a:	687a      	ldr	r2, [r7, #4]
 801897c:	683b      	ldr	r3, [r7, #0]
 801897e:	781b      	ldrb	r3, [r3, #0]
 8018980:	009b      	lsls	r3, r3, #2
 8018982:	18d3      	adds	r3, r2, r3
 8018984:	881b      	ldrh	r3, [r3, #0]
 8018986:	b29a      	uxth	r2, r3
 8018988:	2048      	movs	r0, #72	@ 0x48
 801898a:	183b      	adds	r3, r7, r0
 801898c:	4917      	ldr	r1, [pc, #92]	@ (80189ec <USB_ActivateEndpoint+0x6a8>)
 801898e:	400a      	ands	r2, r1
 8018990:	801a      	strh	r2, [r3, #0]
 8018992:	687a      	ldr	r2, [r7, #4]
 8018994:	683b      	ldr	r3, [r7, #0]
 8018996:	781b      	ldrb	r3, [r3, #0]
 8018998:	009b      	lsls	r3, r3, #2
 801899a:	18d3      	adds	r3, r2, r3
 801899c:	183a      	adds	r2, r7, r0
 801899e:	8812      	ldrh	r2, [r2, #0]
 80189a0:	4919      	ldr	r1, [pc, #100]	@ (8018a08 <USB_ActivateEndpoint+0x6c4>)
 80189a2:	430a      	orrs	r2, r1
 80189a4:	b292      	uxth	r2, r2
 80189a6:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80189a8:	683b      	ldr	r3, [r7, #0]
 80189aa:	78db      	ldrb	r3, [r3, #3]
 80189ac:	2b01      	cmp	r3, #1
 80189ae:	d02f      	beq.n	8018a10 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80189b0:	687a      	ldr	r2, [r7, #4]
 80189b2:	683b      	ldr	r3, [r7, #0]
 80189b4:	781b      	ldrb	r3, [r3, #0]
 80189b6:	009b      	lsls	r3, r3, #2
 80189b8:	18d3      	adds	r3, r2, r3
 80189ba:	881b      	ldrh	r3, [r3, #0]
 80189bc:	b29a      	uxth	r2, r3
 80189be:	2044      	movs	r0, #68	@ 0x44
 80189c0:	183b      	adds	r3, r7, r0
 80189c2:	4912      	ldr	r1, [pc, #72]	@ (8018a0c <USB_ActivateEndpoint+0x6c8>)
 80189c4:	400a      	ands	r2, r1
 80189c6:	801a      	strh	r2, [r3, #0]
 80189c8:	183b      	adds	r3, r7, r0
 80189ca:	183a      	adds	r2, r7, r0
 80189cc:	8812      	ldrh	r2, [r2, #0]
 80189ce:	2120      	movs	r1, #32
 80189d0:	404a      	eors	r2, r1
 80189d2:	801a      	strh	r2, [r3, #0]
 80189d4:	687a      	ldr	r2, [r7, #4]
 80189d6:	683b      	ldr	r3, [r7, #0]
 80189d8:	781b      	ldrb	r3, [r3, #0]
 80189da:	009b      	lsls	r3, r3, #2
 80189dc:	18d3      	adds	r3, r2, r3
 80189de:	183a      	adds	r2, r7, r0
 80189e0:	8812      	ldrh	r2, [r2, #0]
 80189e2:	4905      	ldr	r1, [pc, #20]	@ (80189f8 <USB_ActivateEndpoint+0x6b4>)
 80189e4:	430a      	orrs	r2, r1
 80189e6:	b292      	uxth	r2, r2
 80189e8:	801a      	strh	r2, [r3, #0]
 80189ea:	e028      	b.n	8018a3e <USB_ActivateEndpoint+0x6fa>
 80189ec:	ffff8f8f 	.word	0xffff8f8f
 80189f0:	ffffc080 	.word	0xffffc080
 80189f4:	ffffbf8f 	.word	0xffffbf8f
 80189f8:	ffff8080 	.word	0xffff8080
 80189fc:	ffff8180 	.word	0xffff8180
 8018a00:	ffff8e8f 	.word	0xffff8e8f
 8018a04:	00000404 	.word	0x00000404
 8018a08:	ffff80c0 	.word	0xffff80c0
 8018a0c:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018a10:	687a      	ldr	r2, [r7, #4]
 8018a12:	683b      	ldr	r3, [r7, #0]
 8018a14:	781b      	ldrb	r3, [r3, #0]
 8018a16:	009b      	lsls	r3, r3, #2
 8018a18:	18d3      	adds	r3, r2, r3
 8018a1a:	881b      	ldrh	r3, [r3, #0]
 8018a1c:	b29a      	uxth	r2, r3
 8018a1e:	2046      	movs	r0, #70	@ 0x46
 8018a20:	183b      	adds	r3, r7, r0
 8018a22:	4916      	ldr	r1, [pc, #88]	@ (8018a7c <USB_ActivateEndpoint+0x738>)
 8018a24:	400a      	ands	r2, r1
 8018a26:	801a      	strh	r2, [r3, #0]
 8018a28:	687a      	ldr	r2, [r7, #4]
 8018a2a:	683b      	ldr	r3, [r7, #0]
 8018a2c:	781b      	ldrb	r3, [r3, #0]
 8018a2e:	009b      	lsls	r3, r3, #2
 8018a30:	18d3      	adds	r3, r2, r3
 8018a32:	183a      	adds	r2, r7, r0
 8018a34:	8812      	ldrh	r2, [r2, #0]
 8018a36:	4912      	ldr	r1, [pc, #72]	@ (8018a80 <USB_ActivateEndpoint+0x73c>)
 8018a38:	430a      	orrs	r2, r1
 8018a3a:	b292      	uxth	r2, r2
 8018a3c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018a3e:	687a      	ldr	r2, [r7, #4]
 8018a40:	683b      	ldr	r3, [r7, #0]
 8018a42:	781b      	ldrb	r3, [r3, #0]
 8018a44:	009b      	lsls	r3, r3, #2
 8018a46:	18d3      	adds	r3, r2, r3
 8018a48:	881b      	ldrh	r3, [r3, #0]
 8018a4a:	b29a      	uxth	r2, r3
 8018a4c:	2042      	movs	r0, #66	@ 0x42
 8018a4e:	183b      	adds	r3, r7, r0
 8018a50:	490c      	ldr	r1, [pc, #48]	@ (8018a84 <USB_ActivateEndpoint+0x740>)
 8018a52:	400a      	ands	r2, r1
 8018a54:	801a      	strh	r2, [r3, #0]
 8018a56:	687a      	ldr	r2, [r7, #4]
 8018a58:	683b      	ldr	r3, [r7, #0]
 8018a5a:	781b      	ldrb	r3, [r3, #0]
 8018a5c:	009b      	lsls	r3, r3, #2
 8018a5e:	18d3      	adds	r3, r2, r3
 8018a60:	183a      	adds	r2, r7, r0
 8018a62:	8812      	ldrh	r2, [r2, #0]
 8018a64:	4906      	ldr	r1, [pc, #24]	@ (8018a80 <USB_ActivateEndpoint+0x73c>)
 8018a66:	430a      	orrs	r2, r1
 8018a68:	b292      	uxth	r2, r2
 8018a6a:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8018a6c:	236f      	movs	r3, #111	@ 0x6f
 8018a6e:	18fb      	adds	r3, r7, r3
 8018a70:	781b      	ldrb	r3, [r3, #0]
}
 8018a72:	0018      	movs	r0, r3
 8018a74:	46bd      	mov	sp, r7
 8018a76:	b01c      	add	sp, #112	@ 0x70
 8018a78:	bd80      	pop	{r7, pc}
 8018a7a:	46c0      	nop			@ (mov r8, r8)
 8018a7c:	ffff8fbf 	.word	0xffff8fbf
 8018a80:	ffff8080 	.word	0xffff8080
 8018a84:	ffffbf8f 	.word	0xffffbf8f

08018a88 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b08c      	sub	sp, #48	@ 0x30
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
 8018a90:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8018a92:	683b      	ldr	r3, [r7, #0]
 8018a94:	7b1b      	ldrb	r3, [r3, #12]
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d000      	beq.n	8018a9c <USB_DeactivateEndpoint+0x14>
 8018a9a:	e07e      	b.n	8018b9a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8018a9c:	683b      	ldr	r3, [r7, #0]
 8018a9e:	785b      	ldrb	r3, [r3, #1]
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d03c      	beq.n	8018b1e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018aa4:	687a      	ldr	r2, [r7, #4]
 8018aa6:	683b      	ldr	r3, [r7, #0]
 8018aa8:	781b      	ldrb	r3, [r3, #0]
 8018aaa:	009b      	lsls	r3, r3, #2
 8018aac:	18d2      	adds	r2, r2, r3
 8018aae:	210c      	movs	r1, #12
 8018ab0:	187b      	adds	r3, r7, r1
 8018ab2:	8812      	ldrh	r2, [r2, #0]
 8018ab4:	801a      	strh	r2, [r3, #0]
 8018ab6:	187b      	adds	r3, r7, r1
 8018ab8:	881b      	ldrh	r3, [r3, #0]
 8018aba:	2240      	movs	r2, #64	@ 0x40
 8018abc:	4013      	ands	r3, r2
 8018abe:	d016      	beq.n	8018aee <USB_DeactivateEndpoint+0x66>
 8018ac0:	687a      	ldr	r2, [r7, #4]
 8018ac2:	683b      	ldr	r3, [r7, #0]
 8018ac4:	781b      	ldrb	r3, [r3, #0]
 8018ac6:	009b      	lsls	r3, r3, #2
 8018ac8:	18d3      	adds	r3, r2, r3
 8018aca:	881b      	ldrh	r3, [r3, #0]
 8018acc:	b29a      	uxth	r2, r3
 8018ace:	200a      	movs	r0, #10
 8018ad0:	183b      	adds	r3, r7, r0
 8018ad2:	49c7      	ldr	r1, [pc, #796]	@ (8018df0 <USB_DeactivateEndpoint+0x368>)
 8018ad4:	400a      	ands	r2, r1
 8018ad6:	801a      	strh	r2, [r3, #0]
 8018ad8:	687a      	ldr	r2, [r7, #4]
 8018ada:	683b      	ldr	r3, [r7, #0]
 8018adc:	781b      	ldrb	r3, [r3, #0]
 8018ade:	009b      	lsls	r3, r3, #2
 8018ae0:	18d3      	adds	r3, r2, r3
 8018ae2:	183a      	adds	r2, r7, r0
 8018ae4:	8812      	ldrh	r2, [r2, #0]
 8018ae6:	49c3      	ldr	r1, [pc, #780]	@ (8018df4 <USB_DeactivateEndpoint+0x36c>)
 8018ae8:	430a      	orrs	r2, r1
 8018aea:	b292      	uxth	r2, r2
 8018aec:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018aee:	687a      	ldr	r2, [r7, #4]
 8018af0:	683b      	ldr	r3, [r7, #0]
 8018af2:	781b      	ldrb	r3, [r3, #0]
 8018af4:	009b      	lsls	r3, r3, #2
 8018af6:	18d3      	adds	r3, r2, r3
 8018af8:	881b      	ldrh	r3, [r3, #0]
 8018afa:	b29a      	uxth	r2, r3
 8018afc:	2008      	movs	r0, #8
 8018afe:	183b      	adds	r3, r7, r0
 8018b00:	49bd      	ldr	r1, [pc, #756]	@ (8018df8 <USB_DeactivateEndpoint+0x370>)
 8018b02:	400a      	ands	r2, r1
 8018b04:	801a      	strh	r2, [r3, #0]
 8018b06:	687a      	ldr	r2, [r7, #4]
 8018b08:	683b      	ldr	r3, [r7, #0]
 8018b0a:	781b      	ldrb	r3, [r3, #0]
 8018b0c:	009b      	lsls	r3, r3, #2
 8018b0e:	18d3      	adds	r3, r2, r3
 8018b10:	183a      	adds	r2, r7, r0
 8018b12:	8812      	ldrh	r2, [r2, #0]
 8018b14:	49b9      	ldr	r1, [pc, #740]	@ (8018dfc <USB_DeactivateEndpoint+0x374>)
 8018b16:	430a      	orrs	r2, r1
 8018b18:	b292      	uxth	r2, r2
 8018b1a:	801a      	strh	r2, [r3, #0]
 8018b1c:	e163      	b.n	8018de6 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018b1e:	687a      	ldr	r2, [r7, #4]
 8018b20:	683b      	ldr	r3, [r7, #0]
 8018b22:	781b      	ldrb	r3, [r3, #0]
 8018b24:	009b      	lsls	r3, r3, #2
 8018b26:	18d2      	adds	r2, r2, r3
 8018b28:	2112      	movs	r1, #18
 8018b2a:	187b      	adds	r3, r7, r1
 8018b2c:	8812      	ldrh	r2, [r2, #0]
 8018b2e:	801a      	strh	r2, [r3, #0]
 8018b30:	187b      	adds	r3, r7, r1
 8018b32:	881a      	ldrh	r2, [r3, #0]
 8018b34:	2380      	movs	r3, #128	@ 0x80
 8018b36:	01db      	lsls	r3, r3, #7
 8018b38:	4013      	ands	r3, r2
 8018b3a:	d016      	beq.n	8018b6a <USB_DeactivateEndpoint+0xe2>
 8018b3c:	687a      	ldr	r2, [r7, #4]
 8018b3e:	683b      	ldr	r3, [r7, #0]
 8018b40:	781b      	ldrb	r3, [r3, #0]
 8018b42:	009b      	lsls	r3, r3, #2
 8018b44:	18d3      	adds	r3, r2, r3
 8018b46:	881b      	ldrh	r3, [r3, #0]
 8018b48:	b29a      	uxth	r2, r3
 8018b4a:	2010      	movs	r0, #16
 8018b4c:	183b      	adds	r3, r7, r0
 8018b4e:	49a8      	ldr	r1, [pc, #672]	@ (8018df0 <USB_DeactivateEndpoint+0x368>)
 8018b50:	400a      	ands	r2, r1
 8018b52:	801a      	strh	r2, [r3, #0]
 8018b54:	687a      	ldr	r2, [r7, #4]
 8018b56:	683b      	ldr	r3, [r7, #0]
 8018b58:	781b      	ldrb	r3, [r3, #0]
 8018b5a:	009b      	lsls	r3, r3, #2
 8018b5c:	18d3      	adds	r3, r2, r3
 8018b5e:	183a      	adds	r2, r7, r0
 8018b60:	8812      	ldrh	r2, [r2, #0]
 8018b62:	49a7      	ldr	r1, [pc, #668]	@ (8018e00 <USB_DeactivateEndpoint+0x378>)
 8018b64:	430a      	orrs	r2, r1
 8018b66:	b292      	uxth	r2, r2
 8018b68:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018b6a:	687a      	ldr	r2, [r7, #4]
 8018b6c:	683b      	ldr	r3, [r7, #0]
 8018b6e:	781b      	ldrb	r3, [r3, #0]
 8018b70:	009b      	lsls	r3, r3, #2
 8018b72:	18d3      	adds	r3, r2, r3
 8018b74:	881b      	ldrh	r3, [r3, #0]
 8018b76:	b29a      	uxth	r2, r3
 8018b78:	200e      	movs	r0, #14
 8018b7a:	183b      	adds	r3, r7, r0
 8018b7c:	49a1      	ldr	r1, [pc, #644]	@ (8018e04 <USB_DeactivateEndpoint+0x37c>)
 8018b7e:	400a      	ands	r2, r1
 8018b80:	801a      	strh	r2, [r3, #0]
 8018b82:	687a      	ldr	r2, [r7, #4]
 8018b84:	683b      	ldr	r3, [r7, #0]
 8018b86:	781b      	ldrb	r3, [r3, #0]
 8018b88:	009b      	lsls	r3, r3, #2
 8018b8a:	18d3      	adds	r3, r2, r3
 8018b8c:	183a      	adds	r2, r7, r0
 8018b8e:	8812      	ldrh	r2, [r2, #0]
 8018b90:	499a      	ldr	r1, [pc, #616]	@ (8018dfc <USB_DeactivateEndpoint+0x374>)
 8018b92:	430a      	orrs	r2, r1
 8018b94:	b292      	uxth	r2, r2
 8018b96:	801a      	strh	r2, [r3, #0]
 8018b98:	e125      	b.n	8018de6 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8018b9a:	683b      	ldr	r3, [r7, #0]
 8018b9c:	785b      	ldrb	r3, [r3, #1]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d000      	beq.n	8018ba4 <USB_DeactivateEndpoint+0x11c>
 8018ba2:	e090      	b.n	8018cc6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018ba4:	687a      	ldr	r2, [r7, #4]
 8018ba6:	683b      	ldr	r3, [r7, #0]
 8018ba8:	781b      	ldrb	r3, [r3, #0]
 8018baa:	009b      	lsls	r3, r3, #2
 8018bac:	18d2      	adds	r2, r2, r3
 8018bae:	2120      	movs	r1, #32
 8018bb0:	187b      	adds	r3, r7, r1
 8018bb2:	8812      	ldrh	r2, [r2, #0]
 8018bb4:	801a      	strh	r2, [r3, #0]
 8018bb6:	187b      	adds	r3, r7, r1
 8018bb8:	881a      	ldrh	r2, [r3, #0]
 8018bba:	2380      	movs	r3, #128	@ 0x80
 8018bbc:	01db      	lsls	r3, r3, #7
 8018bbe:	4013      	ands	r3, r2
 8018bc0:	d016      	beq.n	8018bf0 <USB_DeactivateEndpoint+0x168>
 8018bc2:	687a      	ldr	r2, [r7, #4]
 8018bc4:	683b      	ldr	r3, [r7, #0]
 8018bc6:	781b      	ldrb	r3, [r3, #0]
 8018bc8:	009b      	lsls	r3, r3, #2
 8018bca:	18d3      	adds	r3, r2, r3
 8018bcc:	881b      	ldrh	r3, [r3, #0]
 8018bce:	b29a      	uxth	r2, r3
 8018bd0:	201e      	movs	r0, #30
 8018bd2:	183b      	adds	r3, r7, r0
 8018bd4:	4986      	ldr	r1, [pc, #536]	@ (8018df0 <USB_DeactivateEndpoint+0x368>)
 8018bd6:	400a      	ands	r2, r1
 8018bd8:	801a      	strh	r2, [r3, #0]
 8018bda:	687a      	ldr	r2, [r7, #4]
 8018bdc:	683b      	ldr	r3, [r7, #0]
 8018bde:	781b      	ldrb	r3, [r3, #0]
 8018be0:	009b      	lsls	r3, r3, #2
 8018be2:	18d3      	adds	r3, r2, r3
 8018be4:	183a      	adds	r2, r7, r0
 8018be6:	8812      	ldrh	r2, [r2, #0]
 8018be8:	4985      	ldr	r1, [pc, #532]	@ (8018e00 <USB_DeactivateEndpoint+0x378>)
 8018bea:	430a      	orrs	r2, r1
 8018bec:	b292      	uxth	r2, r2
 8018bee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018bf0:	687a      	ldr	r2, [r7, #4]
 8018bf2:	683b      	ldr	r3, [r7, #0]
 8018bf4:	781b      	ldrb	r3, [r3, #0]
 8018bf6:	009b      	lsls	r3, r3, #2
 8018bf8:	18d2      	adds	r2, r2, r3
 8018bfa:	211c      	movs	r1, #28
 8018bfc:	187b      	adds	r3, r7, r1
 8018bfe:	8812      	ldrh	r2, [r2, #0]
 8018c00:	801a      	strh	r2, [r3, #0]
 8018c02:	187b      	adds	r3, r7, r1
 8018c04:	881b      	ldrh	r3, [r3, #0]
 8018c06:	2240      	movs	r2, #64	@ 0x40
 8018c08:	4013      	ands	r3, r2
 8018c0a:	d016      	beq.n	8018c3a <USB_DeactivateEndpoint+0x1b2>
 8018c0c:	687a      	ldr	r2, [r7, #4]
 8018c0e:	683b      	ldr	r3, [r7, #0]
 8018c10:	781b      	ldrb	r3, [r3, #0]
 8018c12:	009b      	lsls	r3, r3, #2
 8018c14:	18d3      	adds	r3, r2, r3
 8018c16:	881b      	ldrh	r3, [r3, #0]
 8018c18:	b29a      	uxth	r2, r3
 8018c1a:	201a      	movs	r0, #26
 8018c1c:	183b      	adds	r3, r7, r0
 8018c1e:	4974      	ldr	r1, [pc, #464]	@ (8018df0 <USB_DeactivateEndpoint+0x368>)
 8018c20:	400a      	ands	r2, r1
 8018c22:	801a      	strh	r2, [r3, #0]
 8018c24:	687a      	ldr	r2, [r7, #4]
 8018c26:	683b      	ldr	r3, [r7, #0]
 8018c28:	781b      	ldrb	r3, [r3, #0]
 8018c2a:	009b      	lsls	r3, r3, #2
 8018c2c:	18d3      	adds	r3, r2, r3
 8018c2e:	183a      	adds	r2, r7, r0
 8018c30:	8812      	ldrh	r2, [r2, #0]
 8018c32:	4970      	ldr	r1, [pc, #448]	@ (8018df4 <USB_DeactivateEndpoint+0x36c>)
 8018c34:	430a      	orrs	r2, r1
 8018c36:	b292      	uxth	r2, r2
 8018c38:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8018c3a:	687a      	ldr	r2, [r7, #4]
 8018c3c:	683b      	ldr	r3, [r7, #0]
 8018c3e:	781b      	ldrb	r3, [r3, #0]
 8018c40:	009b      	lsls	r3, r3, #2
 8018c42:	18d3      	adds	r3, r2, r3
 8018c44:	881b      	ldrh	r3, [r3, #0]
 8018c46:	b29a      	uxth	r2, r3
 8018c48:	2018      	movs	r0, #24
 8018c4a:	183b      	adds	r3, r7, r0
 8018c4c:	4968      	ldr	r1, [pc, #416]	@ (8018df0 <USB_DeactivateEndpoint+0x368>)
 8018c4e:	400a      	ands	r2, r1
 8018c50:	801a      	strh	r2, [r3, #0]
 8018c52:	687a      	ldr	r2, [r7, #4]
 8018c54:	683b      	ldr	r3, [r7, #0]
 8018c56:	781b      	ldrb	r3, [r3, #0]
 8018c58:	009b      	lsls	r3, r3, #2
 8018c5a:	18d3      	adds	r3, r2, r3
 8018c5c:	183a      	adds	r2, r7, r0
 8018c5e:	8812      	ldrh	r2, [r2, #0]
 8018c60:	4964      	ldr	r1, [pc, #400]	@ (8018df4 <USB_DeactivateEndpoint+0x36c>)
 8018c62:	430a      	orrs	r2, r1
 8018c64:	b292      	uxth	r2, r2
 8018c66:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018c68:	687a      	ldr	r2, [r7, #4]
 8018c6a:	683b      	ldr	r3, [r7, #0]
 8018c6c:	781b      	ldrb	r3, [r3, #0]
 8018c6e:	009b      	lsls	r3, r3, #2
 8018c70:	18d3      	adds	r3, r2, r3
 8018c72:	881b      	ldrh	r3, [r3, #0]
 8018c74:	b29a      	uxth	r2, r3
 8018c76:	2016      	movs	r0, #22
 8018c78:	183b      	adds	r3, r7, r0
 8018c7a:	4962      	ldr	r1, [pc, #392]	@ (8018e04 <USB_DeactivateEndpoint+0x37c>)
 8018c7c:	400a      	ands	r2, r1
 8018c7e:	801a      	strh	r2, [r3, #0]
 8018c80:	687a      	ldr	r2, [r7, #4]
 8018c82:	683b      	ldr	r3, [r7, #0]
 8018c84:	781b      	ldrb	r3, [r3, #0]
 8018c86:	009b      	lsls	r3, r3, #2
 8018c88:	18d3      	adds	r3, r2, r3
 8018c8a:	183a      	adds	r2, r7, r0
 8018c8c:	8812      	ldrh	r2, [r2, #0]
 8018c8e:	495b      	ldr	r1, [pc, #364]	@ (8018dfc <USB_DeactivateEndpoint+0x374>)
 8018c90:	430a      	orrs	r2, r1
 8018c92:	b292      	uxth	r2, r2
 8018c94:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018c96:	687a      	ldr	r2, [r7, #4]
 8018c98:	683b      	ldr	r3, [r7, #0]
 8018c9a:	781b      	ldrb	r3, [r3, #0]
 8018c9c:	009b      	lsls	r3, r3, #2
 8018c9e:	18d3      	adds	r3, r2, r3
 8018ca0:	881b      	ldrh	r3, [r3, #0]
 8018ca2:	b29a      	uxth	r2, r3
 8018ca4:	2014      	movs	r0, #20
 8018ca6:	183b      	adds	r3, r7, r0
 8018ca8:	4953      	ldr	r1, [pc, #332]	@ (8018df8 <USB_DeactivateEndpoint+0x370>)
 8018caa:	400a      	ands	r2, r1
 8018cac:	801a      	strh	r2, [r3, #0]
 8018cae:	687a      	ldr	r2, [r7, #4]
 8018cb0:	683b      	ldr	r3, [r7, #0]
 8018cb2:	781b      	ldrb	r3, [r3, #0]
 8018cb4:	009b      	lsls	r3, r3, #2
 8018cb6:	18d3      	adds	r3, r2, r3
 8018cb8:	183a      	adds	r2, r7, r0
 8018cba:	8812      	ldrh	r2, [r2, #0]
 8018cbc:	494f      	ldr	r1, [pc, #316]	@ (8018dfc <USB_DeactivateEndpoint+0x374>)
 8018cbe:	430a      	orrs	r2, r1
 8018cc0:	b292      	uxth	r2, r2
 8018cc2:	801a      	strh	r2, [r3, #0]
 8018cc4:	e08f      	b.n	8018de6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018cc6:	687a      	ldr	r2, [r7, #4]
 8018cc8:	683b      	ldr	r3, [r7, #0]
 8018cca:	781b      	ldrb	r3, [r3, #0]
 8018ccc:	009b      	lsls	r3, r3, #2
 8018cce:	18d2      	adds	r2, r2, r3
 8018cd0:	212e      	movs	r1, #46	@ 0x2e
 8018cd2:	187b      	adds	r3, r7, r1
 8018cd4:	8812      	ldrh	r2, [r2, #0]
 8018cd6:	801a      	strh	r2, [r3, #0]
 8018cd8:	187b      	adds	r3, r7, r1
 8018cda:	881a      	ldrh	r2, [r3, #0]
 8018cdc:	2380      	movs	r3, #128	@ 0x80
 8018cde:	01db      	lsls	r3, r3, #7
 8018ce0:	4013      	ands	r3, r2
 8018ce2:	d016      	beq.n	8018d12 <USB_DeactivateEndpoint+0x28a>
 8018ce4:	687a      	ldr	r2, [r7, #4]
 8018ce6:	683b      	ldr	r3, [r7, #0]
 8018ce8:	781b      	ldrb	r3, [r3, #0]
 8018cea:	009b      	lsls	r3, r3, #2
 8018cec:	18d3      	adds	r3, r2, r3
 8018cee:	881b      	ldrh	r3, [r3, #0]
 8018cf0:	b29a      	uxth	r2, r3
 8018cf2:	202c      	movs	r0, #44	@ 0x2c
 8018cf4:	183b      	adds	r3, r7, r0
 8018cf6:	493e      	ldr	r1, [pc, #248]	@ (8018df0 <USB_DeactivateEndpoint+0x368>)
 8018cf8:	400a      	ands	r2, r1
 8018cfa:	801a      	strh	r2, [r3, #0]
 8018cfc:	687a      	ldr	r2, [r7, #4]
 8018cfe:	683b      	ldr	r3, [r7, #0]
 8018d00:	781b      	ldrb	r3, [r3, #0]
 8018d02:	009b      	lsls	r3, r3, #2
 8018d04:	18d3      	adds	r3, r2, r3
 8018d06:	183a      	adds	r2, r7, r0
 8018d08:	8812      	ldrh	r2, [r2, #0]
 8018d0a:	493d      	ldr	r1, [pc, #244]	@ (8018e00 <USB_DeactivateEndpoint+0x378>)
 8018d0c:	430a      	orrs	r2, r1
 8018d0e:	b292      	uxth	r2, r2
 8018d10:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018d12:	687a      	ldr	r2, [r7, #4]
 8018d14:	683b      	ldr	r3, [r7, #0]
 8018d16:	781b      	ldrb	r3, [r3, #0]
 8018d18:	009b      	lsls	r3, r3, #2
 8018d1a:	18d2      	adds	r2, r2, r3
 8018d1c:	212a      	movs	r1, #42	@ 0x2a
 8018d1e:	187b      	adds	r3, r7, r1
 8018d20:	8812      	ldrh	r2, [r2, #0]
 8018d22:	801a      	strh	r2, [r3, #0]
 8018d24:	187b      	adds	r3, r7, r1
 8018d26:	881b      	ldrh	r3, [r3, #0]
 8018d28:	2240      	movs	r2, #64	@ 0x40
 8018d2a:	4013      	ands	r3, r2
 8018d2c:	d016      	beq.n	8018d5c <USB_DeactivateEndpoint+0x2d4>
 8018d2e:	687a      	ldr	r2, [r7, #4]
 8018d30:	683b      	ldr	r3, [r7, #0]
 8018d32:	781b      	ldrb	r3, [r3, #0]
 8018d34:	009b      	lsls	r3, r3, #2
 8018d36:	18d3      	adds	r3, r2, r3
 8018d38:	881b      	ldrh	r3, [r3, #0]
 8018d3a:	b29a      	uxth	r2, r3
 8018d3c:	2028      	movs	r0, #40	@ 0x28
 8018d3e:	183b      	adds	r3, r7, r0
 8018d40:	492b      	ldr	r1, [pc, #172]	@ (8018df0 <USB_DeactivateEndpoint+0x368>)
 8018d42:	400a      	ands	r2, r1
 8018d44:	801a      	strh	r2, [r3, #0]
 8018d46:	687a      	ldr	r2, [r7, #4]
 8018d48:	683b      	ldr	r3, [r7, #0]
 8018d4a:	781b      	ldrb	r3, [r3, #0]
 8018d4c:	009b      	lsls	r3, r3, #2
 8018d4e:	18d3      	adds	r3, r2, r3
 8018d50:	183a      	adds	r2, r7, r0
 8018d52:	8812      	ldrh	r2, [r2, #0]
 8018d54:	4927      	ldr	r1, [pc, #156]	@ (8018df4 <USB_DeactivateEndpoint+0x36c>)
 8018d56:	430a      	orrs	r2, r1
 8018d58:	b292      	uxth	r2, r2
 8018d5a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8018d5c:	687a      	ldr	r2, [r7, #4]
 8018d5e:	683b      	ldr	r3, [r7, #0]
 8018d60:	781b      	ldrb	r3, [r3, #0]
 8018d62:	009b      	lsls	r3, r3, #2
 8018d64:	18d3      	adds	r3, r2, r3
 8018d66:	881b      	ldrh	r3, [r3, #0]
 8018d68:	b29a      	uxth	r2, r3
 8018d6a:	2026      	movs	r0, #38	@ 0x26
 8018d6c:	183b      	adds	r3, r7, r0
 8018d6e:	4920      	ldr	r1, [pc, #128]	@ (8018df0 <USB_DeactivateEndpoint+0x368>)
 8018d70:	400a      	ands	r2, r1
 8018d72:	801a      	strh	r2, [r3, #0]
 8018d74:	687a      	ldr	r2, [r7, #4]
 8018d76:	683b      	ldr	r3, [r7, #0]
 8018d78:	781b      	ldrb	r3, [r3, #0]
 8018d7a:	009b      	lsls	r3, r3, #2
 8018d7c:	18d3      	adds	r3, r2, r3
 8018d7e:	183a      	adds	r2, r7, r0
 8018d80:	8812      	ldrh	r2, [r2, #0]
 8018d82:	491f      	ldr	r1, [pc, #124]	@ (8018e00 <USB_DeactivateEndpoint+0x378>)
 8018d84:	430a      	orrs	r2, r1
 8018d86:	b292      	uxth	r2, r2
 8018d88:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018d8a:	687a      	ldr	r2, [r7, #4]
 8018d8c:	683b      	ldr	r3, [r7, #0]
 8018d8e:	781b      	ldrb	r3, [r3, #0]
 8018d90:	009b      	lsls	r3, r3, #2
 8018d92:	18d3      	adds	r3, r2, r3
 8018d94:	881b      	ldrh	r3, [r3, #0]
 8018d96:	b29a      	uxth	r2, r3
 8018d98:	2024      	movs	r0, #36	@ 0x24
 8018d9a:	183b      	adds	r3, r7, r0
 8018d9c:	4916      	ldr	r1, [pc, #88]	@ (8018df8 <USB_DeactivateEndpoint+0x370>)
 8018d9e:	400a      	ands	r2, r1
 8018da0:	801a      	strh	r2, [r3, #0]
 8018da2:	687a      	ldr	r2, [r7, #4]
 8018da4:	683b      	ldr	r3, [r7, #0]
 8018da6:	781b      	ldrb	r3, [r3, #0]
 8018da8:	009b      	lsls	r3, r3, #2
 8018daa:	18d3      	adds	r3, r2, r3
 8018dac:	183a      	adds	r2, r7, r0
 8018dae:	8812      	ldrh	r2, [r2, #0]
 8018db0:	4912      	ldr	r1, [pc, #72]	@ (8018dfc <USB_DeactivateEndpoint+0x374>)
 8018db2:	430a      	orrs	r2, r1
 8018db4:	b292      	uxth	r2, r2
 8018db6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018db8:	687a      	ldr	r2, [r7, #4]
 8018dba:	683b      	ldr	r3, [r7, #0]
 8018dbc:	781b      	ldrb	r3, [r3, #0]
 8018dbe:	009b      	lsls	r3, r3, #2
 8018dc0:	18d3      	adds	r3, r2, r3
 8018dc2:	881b      	ldrh	r3, [r3, #0]
 8018dc4:	b29a      	uxth	r2, r3
 8018dc6:	2022      	movs	r0, #34	@ 0x22
 8018dc8:	183b      	adds	r3, r7, r0
 8018dca:	490e      	ldr	r1, [pc, #56]	@ (8018e04 <USB_DeactivateEndpoint+0x37c>)
 8018dcc:	400a      	ands	r2, r1
 8018dce:	801a      	strh	r2, [r3, #0]
 8018dd0:	687a      	ldr	r2, [r7, #4]
 8018dd2:	683b      	ldr	r3, [r7, #0]
 8018dd4:	781b      	ldrb	r3, [r3, #0]
 8018dd6:	009b      	lsls	r3, r3, #2
 8018dd8:	18d3      	adds	r3, r2, r3
 8018dda:	183a      	adds	r2, r7, r0
 8018ddc:	8812      	ldrh	r2, [r2, #0]
 8018dde:	4907      	ldr	r1, [pc, #28]	@ (8018dfc <USB_DeactivateEndpoint+0x374>)
 8018de0:	430a      	orrs	r2, r1
 8018de2:	b292      	uxth	r2, r2
 8018de4:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8018de6:	2300      	movs	r3, #0
}
 8018de8:	0018      	movs	r0, r3
 8018dea:	46bd      	mov	sp, r7
 8018dec:	b00c      	add	sp, #48	@ 0x30
 8018dee:	bd80      	pop	{r7, pc}
 8018df0:	ffff8f8f 	.word	0xffff8f8f
 8018df4:	ffff80c0 	.word	0xffff80c0
 8018df8:	ffff8fbf 	.word	0xffff8fbf
 8018dfc:	ffff8080 	.word	0xffff8080
 8018e00:	ffffc080 	.word	0xffffc080
 8018e04:	ffffbf8f 	.word	0xffffbf8f

08018e08 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018e08:	b590      	push	{r4, r7, lr}
 8018e0a:	b0c3      	sub	sp, #268	@ 0x10c
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	6078      	str	r0, [r7, #4]
 8018e10:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8018e12:	683b      	ldr	r3, [r7, #0]
 8018e14:	785b      	ldrb	r3, [r3, #1]
 8018e16:	2b01      	cmp	r3, #1
 8018e18:	d001      	beq.n	8018e1e <USB_EPStartXfer+0x16>
 8018e1a:	f000 fd2d 	bl	8019878 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8018e1e:	683b      	ldr	r3, [r7, #0]
 8018e20:	699a      	ldr	r2, [r3, #24]
 8018e22:	683b      	ldr	r3, [r7, #0]
 8018e24:	691b      	ldr	r3, [r3, #16]
 8018e26:	429a      	cmp	r2, r3
 8018e28:	d905      	bls.n	8018e36 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8018e2a:	683b      	ldr	r3, [r7, #0]
 8018e2c:	691b      	ldr	r3, [r3, #16]
 8018e2e:	1d7a      	adds	r2, r7, #5
 8018e30:	32ff      	adds	r2, #255	@ 0xff
 8018e32:	6013      	str	r3, [r2, #0]
 8018e34:	e004      	b.n	8018e40 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8018e36:	683b      	ldr	r3, [r7, #0]
 8018e38:	699b      	ldr	r3, [r3, #24]
 8018e3a:	1d7a      	adds	r2, r7, #5
 8018e3c:	32ff      	adds	r2, #255	@ 0xff
 8018e3e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8018e40:	683b      	ldr	r3, [r7, #0]
 8018e42:	7b1b      	ldrb	r3, [r3, #12]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d125      	bne.n	8018e94 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8018e48:	683b      	ldr	r3, [r7, #0]
 8018e4a:	6959      	ldr	r1, [r3, #20]
 8018e4c:	683b      	ldr	r3, [r7, #0]
 8018e4e:	88da      	ldrh	r2, [r3, #6]
 8018e50:	1d7b      	adds	r3, r7, #5
 8018e52:	33ff      	adds	r3, #255	@ 0xff
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	b29b      	uxth	r3, r3
 8018e58:	6878      	ldr	r0, [r7, #4]
 8018e5a:	f001 fa47 	bl	801a2ec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	613b      	str	r3, [r7, #16]
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	2250      	movs	r2, #80	@ 0x50
 8018e66:	5a9b      	ldrh	r3, [r3, r2]
 8018e68:	b29b      	uxth	r3, r3
 8018e6a:	001a      	movs	r2, r3
 8018e6c:	693b      	ldr	r3, [r7, #16]
 8018e6e:	189b      	adds	r3, r3, r2
 8018e70:	613b      	str	r3, [r7, #16]
 8018e72:	683b      	ldr	r3, [r7, #0]
 8018e74:	781b      	ldrb	r3, [r3, #0]
 8018e76:	00da      	lsls	r2, r3, #3
 8018e78:	693b      	ldr	r3, [r7, #16]
 8018e7a:	18d3      	adds	r3, r2, r3
 8018e7c:	4ad7      	ldr	r2, [pc, #860]	@ (80191dc <USB_EPStartXfer+0x3d4>)
 8018e7e:	4694      	mov	ip, r2
 8018e80:	4463      	add	r3, ip
 8018e82:	60fb      	str	r3, [r7, #12]
 8018e84:	1d7b      	adds	r3, r7, #5
 8018e86:	33ff      	adds	r3, #255	@ 0xff
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	b29a      	uxth	r2, r3
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	801a      	strh	r2, [r3, #0]
 8018e90:	f000 fccd 	bl	801982e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8018e94:	683b      	ldr	r3, [r7, #0]
 8018e96:	78db      	ldrb	r3, [r3, #3]
 8018e98:	2b02      	cmp	r3, #2
 8018e9a:	d000      	beq.n	8018e9e <USB_EPStartXfer+0x96>
 8018e9c:	e362      	b.n	8019564 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8018e9e:	683b      	ldr	r3, [r7, #0]
 8018ea0:	6a1a      	ldr	r2, [r3, #32]
 8018ea2:	683b      	ldr	r3, [r7, #0]
 8018ea4:	691b      	ldr	r3, [r3, #16]
 8018ea6:	429a      	cmp	r2, r3
 8018ea8:	d800      	bhi.n	8018eac <USB_EPStartXfer+0xa4>
 8018eaa:	e309      	b.n	80194c0 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8018eac:	687a      	ldr	r2, [r7, #4]
 8018eae:	683b      	ldr	r3, [r7, #0]
 8018eb0:	781b      	ldrb	r3, [r3, #0]
 8018eb2:	009b      	lsls	r3, r3, #2
 8018eb4:	18d3      	adds	r3, r2, r3
 8018eb6:	881b      	ldrh	r3, [r3, #0]
 8018eb8:	b29a      	uxth	r2, r3
 8018eba:	2056      	movs	r0, #86	@ 0x56
 8018ebc:	183b      	adds	r3, r7, r0
 8018ebe:	49c8      	ldr	r1, [pc, #800]	@ (80191e0 <USB_EPStartXfer+0x3d8>)
 8018ec0:	400a      	ands	r2, r1
 8018ec2:	801a      	strh	r2, [r3, #0]
 8018ec4:	687a      	ldr	r2, [r7, #4]
 8018ec6:	683b      	ldr	r3, [r7, #0]
 8018ec8:	781b      	ldrb	r3, [r3, #0]
 8018eca:	009b      	lsls	r3, r3, #2
 8018ecc:	18d3      	adds	r3, r2, r3
 8018ece:	183a      	adds	r2, r7, r0
 8018ed0:	8812      	ldrh	r2, [r2, #0]
 8018ed2:	49c4      	ldr	r1, [pc, #784]	@ (80191e4 <USB_EPStartXfer+0x3dc>)
 8018ed4:	430a      	orrs	r2, r1
 8018ed6:	b292      	uxth	r2, r2
 8018ed8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8018eda:	683b      	ldr	r3, [r7, #0]
 8018edc:	6a1a      	ldr	r2, [r3, #32]
 8018ede:	1d7b      	adds	r3, r7, #5
 8018ee0:	33ff      	adds	r3, #255	@ 0xff
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	1ad2      	subs	r2, r2, r3
 8018ee6:	683b      	ldr	r3, [r7, #0]
 8018ee8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8018eea:	687a      	ldr	r2, [r7, #4]
 8018eec:	683b      	ldr	r3, [r7, #0]
 8018eee:	781b      	ldrb	r3, [r3, #0]
 8018ef0:	009b      	lsls	r3, r3, #2
 8018ef2:	18d3      	adds	r3, r2, r3
 8018ef4:	881b      	ldrh	r3, [r3, #0]
 8018ef6:	b29b      	uxth	r3, r3
 8018ef8:	001a      	movs	r2, r3
 8018efa:	2340      	movs	r3, #64	@ 0x40
 8018efc:	4013      	ands	r3, r2
 8018efe:	d100      	bne.n	8018f02 <USB_EPStartXfer+0xfa>
 8018f00:	e176      	b.n	80191f0 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	633b      	str	r3, [r7, #48]	@ 0x30
 8018f06:	683b      	ldr	r3, [r7, #0]
 8018f08:	785b      	ldrb	r3, [r3, #1]
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d000      	beq.n	8018f10 <USB_EPStartXfer+0x108>
 8018f0e:	e074      	b.n	8018ffa <USB_EPStartXfer+0x1f2>
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	2250      	movs	r2, #80	@ 0x50
 8018f18:	5a9b      	ldrh	r3, [r3, r2]
 8018f1a:	b29b      	uxth	r3, r3
 8018f1c:	001a      	movs	r2, r3
 8018f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f20:	189b      	adds	r3, r3, r2
 8018f22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018f24:	683b      	ldr	r3, [r7, #0]
 8018f26:	781b      	ldrb	r3, [r3, #0]
 8018f28:	00da      	lsls	r2, r3, #3
 8018f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f2c:	18d3      	adds	r3, r2, r3
 8018f2e:	4aae      	ldr	r2, [pc, #696]	@ (80191e8 <USB_EPStartXfer+0x3e0>)
 8018f30:	4694      	mov	ip, r2
 8018f32:	4463      	add	r3, ip
 8018f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8018f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f38:	881b      	ldrh	r3, [r3, #0]
 8018f3a:	b29b      	uxth	r3, r3
 8018f3c:	059b      	lsls	r3, r3, #22
 8018f3e:	0d9b      	lsrs	r3, r3, #22
 8018f40:	b29a      	uxth	r2, r3
 8018f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f44:	801a      	strh	r2, [r3, #0]
 8018f46:	1d7b      	adds	r3, r7, #5
 8018f48:	33ff      	adds	r3, #255	@ 0xff
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8018f4e:	d924      	bls.n	8018f9a <USB_EPStartXfer+0x192>
 8018f50:	1d7b      	adds	r3, r7, #5
 8018f52:	33ff      	adds	r3, #255	@ 0xff
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	095b      	lsrs	r3, r3, #5
 8018f58:	1c7a      	adds	r2, r7, #1
 8018f5a:	32ff      	adds	r2, #255	@ 0xff
 8018f5c:	6013      	str	r3, [r2, #0]
 8018f5e:	1d7b      	adds	r3, r7, #5
 8018f60:	33ff      	adds	r3, #255	@ 0xff
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	221f      	movs	r2, #31
 8018f66:	4013      	ands	r3, r2
 8018f68:	d106      	bne.n	8018f78 <USB_EPStartXfer+0x170>
 8018f6a:	1c7b      	adds	r3, r7, #1
 8018f6c:	33ff      	adds	r3, #255	@ 0xff
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	3b01      	subs	r3, #1
 8018f72:	1c7a      	adds	r2, r7, #1
 8018f74:	32ff      	adds	r2, #255	@ 0xff
 8018f76:	6013      	str	r3, [r2, #0]
 8018f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f7a:	881b      	ldrh	r3, [r3, #0]
 8018f7c:	b29a      	uxth	r2, r3
 8018f7e:	1c7b      	adds	r3, r7, #1
 8018f80:	33ff      	adds	r3, #255	@ 0xff
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	b29b      	uxth	r3, r3
 8018f86:	029b      	lsls	r3, r3, #10
 8018f88:	b29b      	uxth	r3, r3
 8018f8a:	4313      	orrs	r3, r2
 8018f8c:	b29b      	uxth	r3, r3
 8018f8e:	4a97      	ldr	r2, [pc, #604]	@ (80191ec <USB_EPStartXfer+0x3e4>)
 8018f90:	4313      	orrs	r3, r2
 8018f92:	b29a      	uxth	r2, r3
 8018f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f96:	801a      	strh	r2, [r3, #0]
 8018f98:	e04a      	b.n	8019030 <USB_EPStartXfer+0x228>
 8018f9a:	1d7b      	adds	r3, r7, #5
 8018f9c:	33ff      	adds	r3, #255	@ 0xff
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d108      	bne.n	8018fb6 <USB_EPStartXfer+0x1ae>
 8018fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fa6:	881b      	ldrh	r3, [r3, #0]
 8018fa8:	b29b      	uxth	r3, r3
 8018faa:	4a90      	ldr	r2, [pc, #576]	@ (80191ec <USB_EPStartXfer+0x3e4>)
 8018fac:	4313      	orrs	r3, r2
 8018fae:	b29a      	uxth	r2, r3
 8018fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fb2:	801a      	strh	r2, [r3, #0]
 8018fb4:	e03c      	b.n	8019030 <USB_EPStartXfer+0x228>
 8018fb6:	1d7b      	adds	r3, r7, #5
 8018fb8:	33ff      	adds	r3, #255	@ 0xff
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	085b      	lsrs	r3, r3, #1
 8018fbe:	1c7a      	adds	r2, r7, #1
 8018fc0:	32ff      	adds	r2, #255	@ 0xff
 8018fc2:	6013      	str	r3, [r2, #0]
 8018fc4:	1d7b      	adds	r3, r7, #5
 8018fc6:	33ff      	adds	r3, #255	@ 0xff
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	2201      	movs	r2, #1
 8018fcc:	4013      	ands	r3, r2
 8018fce:	d006      	beq.n	8018fde <USB_EPStartXfer+0x1d6>
 8018fd0:	1c7b      	adds	r3, r7, #1
 8018fd2:	33ff      	adds	r3, #255	@ 0xff
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	3301      	adds	r3, #1
 8018fd8:	1c7a      	adds	r2, r7, #1
 8018fda:	32ff      	adds	r2, #255	@ 0xff
 8018fdc:	6013      	str	r3, [r2, #0]
 8018fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fe0:	881b      	ldrh	r3, [r3, #0]
 8018fe2:	b29a      	uxth	r2, r3
 8018fe4:	1c7b      	adds	r3, r7, #1
 8018fe6:	33ff      	adds	r3, #255	@ 0xff
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	b29b      	uxth	r3, r3
 8018fec:	029b      	lsls	r3, r3, #10
 8018fee:	b29b      	uxth	r3, r3
 8018ff0:	4313      	orrs	r3, r2
 8018ff2:	b29a      	uxth	r2, r3
 8018ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ff6:	801a      	strh	r2, [r3, #0]
 8018ff8:	e01a      	b.n	8019030 <USB_EPStartXfer+0x228>
 8018ffa:	683b      	ldr	r3, [r7, #0]
 8018ffc:	785b      	ldrb	r3, [r3, #1]
 8018ffe:	2b01      	cmp	r3, #1
 8019000:	d116      	bne.n	8019030 <USB_EPStartXfer+0x228>
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	2250      	movs	r2, #80	@ 0x50
 8019006:	5a9b      	ldrh	r3, [r3, r2]
 8019008:	b29b      	uxth	r3, r3
 801900a:	001a      	movs	r2, r3
 801900c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801900e:	189b      	adds	r3, r3, r2
 8019010:	633b      	str	r3, [r7, #48]	@ 0x30
 8019012:	683b      	ldr	r3, [r7, #0]
 8019014:	781b      	ldrb	r3, [r3, #0]
 8019016:	00da      	lsls	r2, r3, #3
 8019018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801901a:	18d3      	adds	r3, r2, r3
 801901c:	4a72      	ldr	r2, [pc, #456]	@ (80191e8 <USB_EPStartXfer+0x3e0>)
 801901e:	4694      	mov	ip, r2
 8019020:	4463      	add	r3, ip
 8019022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019024:	1d7b      	adds	r3, r7, #5
 8019026:	33ff      	adds	r3, #255	@ 0xff
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	b29a      	uxth	r2, r3
 801902c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801902e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8019030:	2076      	movs	r0, #118	@ 0x76
 8019032:	183b      	adds	r3, r7, r0
 8019034:	683a      	ldr	r2, [r7, #0]
 8019036:	8952      	ldrh	r2, [r2, #10]
 8019038:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801903a:	683b      	ldr	r3, [r7, #0]
 801903c:	6959      	ldr	r1, [r3, #20]
 801903e:	1d7b      	adds	r3, r7, #5
 8019040:	33ff      	adds	r3, #255	@ 0xff
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	b29c      	uxth	r4, r3
 8019046:	183b      	adds	r3, r7, r0
 8019048:	881a      	ldrh	r2, [r3, #0]
 801904a:	6878      	ldr	r0, [r7, #4]
 801904c:	0023      	movs	r3, r4
 801904e:	f001 f94d 	bl	801a2ec <USB_WritePMA>
            ep->xfer_buff += len;
 8019052:	683b      	ldr	r3, [r7, #0]
 8019054:	695a      	ldr	r2, [r3, #20]
 8019056:	1d7b      	adds	r3, r7, #5
 8019058:	33ff      	adds	r3, #255	@ 0xff
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	18d2      	adds	r2, r2, r3
 801905e:	683b      	ldr	r3, [r7, #0]
 8019060:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019062:	683b      	ldr	r3, [r7, #0]
 8019064:	6a1a      	ldr	r2, [r3, #32]
 8019066:	683b      	ldr	r3, [r7, #0]
 8019068:	691b      	ldr	r3, [r3, #16]
 801906a:	429a      	cmp	r2, r3
 801906c:	d908      	bls.n	8019080 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801906e:	683b      	ldr	r3, [r7, #0]
 8019070:	6a1a      	ldr	r2, [r3, #32]
 8019072:	1d7b      	adds	r3, r7, #5
 8019074:	33ff      	adds	r3, #255	@ 0xff
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	1ad2      	subs	r2, r2, r3
 801907a:	683b      	ldr	r3, [r7, #0]
 801907c:	621a      	str	r2, [r3, #32]
 801907e:	e007      	b.n	8019090 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8019080:	683b      	ldr	r3, [r7, #0]
 8019082:	6a1b      	ldr	r3, [r3, #32]
 8019084:	1d7a      	adds	r2, r7, #5
 8019086:	32ff      	adds	r2, #255	@ 0xff
 8019088:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801908a:	683b      	ldr	r3, [r7, #0]
 801908c:	2200      	movs	r2, #0
 801908e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019090:	683b      	ldr	r3, [r7, #0]
 8019092:	785b      	ldrb	r3, [r3, #1]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d000      	beq.n	801909a <USB_EPStartXfer+0x292>
 8019098:	e070      	b.n	801917c <USB_EPStartXfer+0x374>
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	61bb      	str	r3, [r7, #24]
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	2250      	movs	r2, #80	@ 0x50
 80190a2:	5a9b      	ldrh	r3, [r3, r2]
 80190a4:	b29b      	uxth	r3, r3
 80190a6:	001a      	movs	r2, r3
 80190a8:	69bb      	ldr	r3, [r7, #24]
 80190aa:	189b      	adds	r3, r3, r2
 80190ac:	61bb      	str	r3, [r7, #24]
 80190ae:	683b      	ldr	r3, [r7, #0]
 80190b0:	781b      	ldrb	r3, [r3, #0]
 80190b2:	00da      	lsls	r2, r3, #3
 80190b4:	69bb      	ldr	r3, [r7, #24]
 80190b6:	18d3      	adds	r3, r2, r3
 80190b8:	4a48      	ldr	r2, [pc, #288]	@ (80191dc <USB_EPStartXfer+0x3d4>)
 80190ba:	4694      	mov	ip, r2
 80190bc:	4463      	add	r3, ip
 80190be:	617b      	str	r3, [r7, #20]
 80190c0:	697b      	ldr	r3, [r7, #20]
 80190c2:	881b      	ldrh	r3, [r3, #0]
 80190c4:	b29b      	uxth	r3, r3
 80190c6:	059b      	lsls	r3, r3, #22
 80190c8:	0d9b      	lsrs	r3, r3, #22
 80190ca:	b29a      	uxth	r2, r3
 80190cc:	697b      	ldr	r3, [r7, #20]
 80190ce:	801a      	strh	r2, [r3, #0]
 80190d0:	1d7b      	adds	r3, r7, #5
 80190d2:	33ff      	adds	r3, #255	@ 0xff
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80190d8:	d922      	bls.n	8019120 <USB_EPStartXfer+0x318>
 80190da:	1d7b      	adds	r3, r7, #5
 80190dc:	33ff      	adds	r3, #255	@ 0xff
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	095b      	lsrs	r3, r3, #5
 80190e2:	21fc      	movs	r1, #252	@ 0xfc
 80190e4:	187a      	adds	r2, r7, r1
 80190e6:	6013      	str	r3, [r2, #0]
 80190e8:	1d7b      	adds	r3, r7, #5
 80190ea:	33ff      	adds	r3, #255	@ 0xff
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	221f      	movs	r2, #31
 80190f0:	4013      	ands	r3, r2
 80190f2:	d104      	bne.n	80190fe <USB_EPStartXfer+0x2f6>
 80190f4:	187b      	adds	r3, r7, r1
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	3b01      	subs	r3, #1
 80190fa:	187a      	adds	r2, r7, r1
 80190fc:	6013      	str	r3, [r2, #0]
 80190fe:	697b      	ldr	r3, [r7, #20]
 8019100:	881b      	ldrh	r3, [r3, #0]
 8019102:	b29a      	uxth	r2, r3
 8019104:	23fc      	movs	r3, #252	@ 0xfc
 8019106:	18fb      	adds	r3, r7, r3
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	b29b      	uxth	r3, r3
 801910c:	029b      	lsls	r3, r3, #10
 801910e:	b29b      	uxth	r3, r3
 8019110:	4313      	orrs	r3, r2
 8019112:	b29b      	uxth	r3, r3
 8019114:	4a35      	ldr	r2, [pc, #212]	@ (80191ec <USB_EPStartXfer+0x3e4>)
 8019116:	4313      	orrs	r3, r2
 8019118:	b29a      	uxth	r2, r3
 801911a:	697b      	ldr	r3, [r7, #20]
 801911c:	801a      	strh	r2, [r3, #0]
 801911e:	e04a      	b.n	80191b6 <USB_EPStartXfer+0x3ae>
 8019120:	1d7b      	adds	r3, r7, #5
 8019122:	33ff      	adds	r3, #255	@ 0xff
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	2b00      	cmp	r3, #0
 8019128:	d108      	bne.n	801913c <USB_EPStartXfer+0x334>
 801912a:	697b      	ldr	r3, [r7, #20]
 801912c:	881b      	ldrh	r3, [r3, #0]
 801912e:	b29b      	uxth	r3, r3
 8019130:	4a2e      	ldr	r2, [pc, #184]	@ (80191ec <USB_EPStartXfer+0x3e4>)
 8019132:	4313      	orrs	r3, r2
 8019134:	b29a      	uxth	r2, r3
 8019136:	697b      	ldr	r3, [r7, #20]
 8019138:	801a      	strh	r2, [r3, #0]
 801913a:	e03c      	b.n	80191b6 <USB_EPStartXfer+0x3ae>
 801913c:	1d7b      	adds	r3, r7, #5
 801913e:	33ff      	adds	r3, #255	@ 0xff
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	085b      	lsrs	r3, r3, #1
 8019144:	21fc      	movs	r1, #252	@ 0xfc
 8019146:	187a      	adds	r2, r7, r1
 8019148:	6013      	str	r3, [r2, #0]
 801914a:	1d7b      	adds	r3, r7, #5
 801914c:	33ff      	adds	r3, #255	@ 0xff
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	2201      	movs	r2, #1
 8019152:	4013      	ands	r3, r2
 8019154:	d004      	beq.n	8019160 <USB_EPStartXfer+0x358>
 8019156:	187b      	adds	r3, r7, r1
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	3301      	adds	r3, #1
 801915c:	187a      	adds	r2, r7, r1
 801915e:	6013      	str	r3, [r2, #0]
 8019160:	697b      	ldr	r3, [r7, #20]
 8019162:	881b      	ldrh	r3, [r3, #0]
 8019164:	b29a      	uxth	r2, r3
 8019166:	23fc      	movs	r3, #252	@ 0xfc
 8019168:	18fb      	adds	r3, r7, r3
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	b29b      	uxth	r3, r3
 801916e:	029b      	lsls	r3, r3, #10
 8019170:	b29b      	uxth	r3, r3
 8019172:	4313      	orrs	r3, r2
 8019174:	b29a      	uxth	r2, r3
 8019176:	697b      	ldr	r3, [r7, #20]
 8019178:	801a      	strh	r2, [r3, #0]
 801917a:	e01c      	b.n	80191b6 <USB_EPStartXfer+0x3ae>
 801917c:	683b      	ldr	r3, [r7, #0]
 801917e:	785b      	ldrb	r3, [r3, #1]
 8019180:	2b01      	cmp	r3, #1
 8019182:	d118      	bne.n	80191b6 <USB_EPStartXfer+0x3ae>
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	623b      	str	r3, [r7, #32]
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	2250      	movs	r2, #80	@ 0x50
 801918c:	5a9b      	ldrh	r3, [r3, r2]
 801918e:	b29b      	uxth	r3, r3
 8019190:	001a      	movs	r2, r3
 8019192:	6a3b      	ldr	r3, [r7, #32]
 8019194:	189b      	adds	r3, r3, r2
 8019196:	623b      	str	r3, [r7, #32]
 8019198:	683b      	ldr	r3, [r7, #0]
 801919a:	781b      	ldrb	r3, [r3, #0]
 801919c:	00da      	lsls	r2, r3, #3
 801919e:	6a3b      	ldr	r3, [r7, #32]
 80191a0:	18d3      	adds	r3, r2, r3
 80191a2:	4a0e      	ldr	r2, [pc, #56]	@ (80191dc <USB_EPStartXfer+0x3d4>)
 80191a4:	4694      	mov	ip, r2
 80191a6:	4463      	add	r3, ip
 80191a8:	61fb      	str	r3, [r7, #28]
 80191aa:	1d7b      	adds	r3, r7, #5
 80191ac:	33ff      	adds	r3, #255	@ 0xff
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	b29a      	uxth	r2, r3
 80191b2:	69fb      	ldr	r3, [r7, #28]
 80191b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80191b6:	2076      	movs	r0, #118	@ 0x76
 80191b8:	183b      	adds	r3, r7, r0
 80191ba:	683a      	ldr	r2, [r7, #0]
 80191bc:	8912      	ldrh	r2, [r2, #8]
 80191be:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80191c0:	683b      	ldr	r3, [r7, #0]
 80191c2:	6959      	ldr	r1, [r3, #20]
 80191c4:	1d7b      	adds	r3, r7, #5
 80191c6:	33ff      	adds	r3, #255	@ 0xff
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	b29c      	uxth	r4, r3
 80191cc:	183b      	adds	r3, r7, r0
 80191ce:	881a      	ldrh	r2, [r3, #0]
 80191d0:	6878      	ldr	r0, [r7, #4]
 80191d2:	0023      	movs	r3, r4
 80191d4:	f001 f88a 	bl	801a2ec <USB_WritePMA>
 80191d8:	e329      	b.n	801982e <USB_EPStartXfer+0xa26>
 80191da:	46c0      	nop			@ (mov r8, r8)
 80191dc:	00000402 	.word	0x00000402
 80191e0:	ffff8f8f 	.word	0xffff8f8f
 80191e4:	ffff8180 	.word	0xffff8180
 80191e8:	00000406 	.word	0x00000406
 80191ec:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80191f0:	683b      	ldr	r3, [r7, #0]
 80191f2:	785b      	ldrb	r3, [r3, #1]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d000      	beq.n	80191fa <USB_EPStartXfer+0x3f2>
 80191f8:	e070      	b.n	80192dc <USB_EPStartXfer+0x4d4>
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	2250      	movs	r2, #80	@ 0x50
 8019202:	5a9b      	ldrh	r3, [r3, r2]
 8019204:	b29b      	uxth	r3, r3
 8019206:	001a      	movs	r2, r3
 8019208:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801920a:	189b      	adds	r3, r3, r2
 801920c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801920e:	683b      	ldr	r3, [r7, #0]
 8019210:	781b      	ldrb	r3, [r3, #0]
 8019212:	00da      	lsls	r2, r3, #3
 8019214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019216:	18d3      	adds	r3, r2, r3
 8019218:	4acd      	ldr	r2, [pc, #820]	@ (8019550 <USB_EPStartXfer+0x748>)
 801921a:	4694      	mov	ip, r2
 801921c:	4463      	add	r3, ip
 801921e:	647b      	str	r3, [r7, #68]	@ 0x44
 8019220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019222:	881b      	ldrh	r3, [r3, #0]
 8019224:	b29b      	uxth	r3, r3
 8019226:	059b      	lsls	r3, r3, #22
 8019228:	0d9b      	lsrs	r3, r3, #22
 801922a:	b29a      	uxth	r2, r3
 801922c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801922e:	801a      	strh	r2, [r3, #0]
 8019230:	1d7b      	adds	r3, r7, #5
 8019232:	33ff      	adds	r3, #255	@ 0xff
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	2b3e      	cmp	r3, #62	@ 0x3e
 8019238:	d922      	bls.n	8019280 <USB_EPStartXfer+0x478>
 801923a:	1d7b      	adds	r3, r7, #5
 801923c:	33ff      	adds	r3, #255	@ 0xff
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	095b      	lsrs	r3, r3, #5
 8019242:	21f8      	movs	r1, #248	@ 0xf8
 8019244:	187a      	adds	r2, r7, r1
 8019246:	6013      	str	r3, [r2, #0]
 8019248:	1d7b      	adds	r3, r7, #5
 801924a:	33ff      	adds	r3, #255	@ 0xff
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	221f      	movs	r2, #31
 8019250:	4013      	ands	r3, r2
 8019252:	d104      	bne.n	801925e <USB_EPStartXfer+0x456>
 8019254:	187b      	adds	r3, r7, r1
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	3b01      	subs	r3, #1
 801925a:	187a      	adds	r2, r7, r1
 801925c:	6013      	str	r3, [r2, #0]
 801925e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019260:	881b      	ldrh	r3, [r3, #0]
 8019262:	b29a      	uxth	r2, r3
 8019264:	23f8      	movs	r3, #248	@ 0xf8
 8019266:	18fb      	adds	r3, r7, r3
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	b29b      	uxth	r3, r3
 801926c:	029b      	lsls	r3, r3, #10
 801926e:	b29b      	uxth	r3, r3
 8019270:	4313      	orrs	r3, r2
 8019272:	b29b      	uxth	r3, r3
 8019274:	4ab7      	ldr	r2, [pc, #732]	@ (8019554 <USB_EPStartXfer+0x74c>)
 8019276:	4313      	orrs	r3, r2
 8019278:	b29a      	uxth	r2, r3
 801927a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801927c:	801a      	strh	r2, [r3, #0]
 801927e:	e04a      	b.n	8019316 <USB_EPStartXfer+0x50e>
 8019280:	1d7b      	adds	r3, r7, #5
 8019282:	33ff      	adds	r3, #255	@ 0xff
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	2b00      	cmp	r3, #0
 8019288:	d108      	bne.n	801929c <USB_EPStartXfer+0x494>
 801928a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801928c:	881b      	ldrh	r3, [r3, #0]
 801928e:	b29b      	uxth	r3, r3
 8019290:	4ab0      	ldr	r2, [pc, #704]	@ (8019554 <USB_EPStartXfer+0x74c>)
 8019292:	4313      	orrs	r3, r2
 8019294:	b29a      	uxth	r2, r3
 8019296:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019298:	801a      	strh	r2, [r3, #0]
 801929a:	e03c      	b.n	8019316 <USB_EPStartXfer+0x50e>
 801929c:	1d7b      	adds	r3, r7, #5
 801929e:	33ff      	adds	r3, #255	@ 0xff
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	085b      	lsrs	r3, r3, #1
 80192a4:	21f8      	movs	r1, #248	@ 0xf8
 80192a6:	187a      	adds	r2, r7, r1
 80192a8:	6013      	str	r3, [r2, #0]
 80192aa:	1d7b      	adds	r3, r7, #5
 80192ac:	33ff      	adds	r3, #255	@ 0xff
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	2201      	movs	r2, #1
 80192b2:	4013      	ands	r3, r2
 80192b4:	d004      	beq.n	80192c0 <USB_EPStartXfer+0x4b8>
 80192b6:	187b      	adds	r3, r7, r1
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	3301      	adds	r3, #1
 80192bc:	187a      	adds	r2, r7, r1
 80192be:	6013      	str	r3, [r2, #0]
 80192c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80192c2:	881b      	ldrh	r3, [r3, #0]
 80192c4:	b29a      	uxth	r2, r3
 80192c6:	23f8      	movs	r3, #248	@ 0xf8
 80192c8:	18fb      	adds	r3, r7, r3
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	b29b      	uxth	r3, r3
 80192ce:	029b      	lsls	r3, r3, #10
 80192d0:	b29b      	uxth	r3, r3
 80192d2:	4313      	orrs	r3, r2
 80192d4:	b29a      	uxth	r2, r3
 80192d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80192d8:	801a      	strh	r2, [r3, #0]
 80192da:	e01c      	b.n	8019316 <USB_EPStartXfer+0x50e>
 80192dc:	683b      	ldr	r3, [r7, #0]
 80192de:	785b      	ldrb	r3, [r3, #1]
 80192e0:	2b01      	cmp	r3, #1
 80192e2:	d118      	bne.n	8019316 <USB_EPStartXfer+0x50e>
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	2250      	movs	r2, #80	@ 0x50
 80192ec:	5a9b      	ldrh	r3, [r3, r2]
 80192ee:	b29b      	uxth	r3, r3
 80192f0:	001a      	movs	r2, r3
 80192f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80192f4:	189b      	adds	r3, r3, r2
 80192f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80192f8:	683b      	ldr	r3, [r7, #0]
 80192fa:	781b      	ldrb	r3, [r3, #0]
 80192fc:	00da      	lsls	r2, r3, #3
 80192fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019300:	18d3      	adds	r3, r2, r3
 8019302:	4a93      	ldr	r2, [pc, #588]	@ (8019550 <USB_EPStartXfer+0x748>)
 8019304:	4694      	mov	ip, r2
 8019306:	4463      	add	r3, ip
 8019308:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801930a:	1d7b      	adds	r3, r7, #5
 801930c:	33ff      	adds	r3, #255	@ 0xff
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	b29a      	uxth	r2, r3
 8019312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019314:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8019316:	2076      	movs	r0, #118	@ 0x76
 8019318:	183b      	adds	r3, r7, r0
 801931a:	683a      	ldr	r2, [r7, #0]
 801931c:	8912      	ldrh	r2, [r2, #8]
 801931e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019320:	683b      	ldr	r3, [r7, #0]
 8019322:	6959      	ldr	r1, [r3, #20]
 8019324:	1d7b      	adds	r3, r7, #5
 8019326:	33ff      	adds	r3, #255	@ 0xff
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	b29c      	uxth	r4, r3
 801932c:	183b      	adds	r3, r7, r0
 801932e:	881a      	ldrh	r2, [r3, #0]
 8019330:	6878      	ldr	r0, [r7, #4]
 8019332:	0023      	movs	r3, r4
 8019334:	f000 ffda 	bl	801a2ec <USB_WritePMA>
            ep->xfer_buff += len;
 8019338:	683b      	ldr	r3, [r7, #0]
 801933a:	695a      	ldr	r2, [r3, #20]
 801933c:	1d7b      	adds	r3, r7, #5
 801933e:	33ff      	adds	r3, #255	@ 0xff
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	18d2      	adds	r2, r2, r3
 8019344:	683b      	ldr	r3, [r7, #0]
 8019346:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019348:	683b      	ldr	r3, [r7, #0]
 801934a:	6a1a      	ldr	r2, [r3, #32]
 801934c:	683b      	ldr	r3, [r7, #0]
 801934e:	691b      	ldr	r3, [r3, #16]
 8019350:	429a      	cmp	r2, r3
 8019352:	d908      	bls.n	8019366 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8019354:	683b      	ldr	r3, [r7, #0]
 8019356:	6a1a      	ldr	r2, [r3, #32]
 8019358:	1d7b      	adds	r3, r7, #5
 801935a:	33ff      	adds	r3, #255	@ 0xff
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	1ad2      	subs	r2, r2, r3
 8019360:	683b      	ldr	r3, [r7, #0]
 8019362:	621a      	str	r2, [r3, #32]
 8019364:	e007      	b.n	8019376 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8019366:	683b      	ldr	r3, [r7, #0]
 8019368:	6a1b      	ldr	r3, [r3, #32]
 801936a:	1d7a      	adds	r2, r7, #5
 801936c:	32ff      	adds	r2, #255	@ 0xff
 801936e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019370:	683b      	ldr	r3, [r7, #0]
 8019372:	2200      	movs	r2, #0
 8019374:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	643b      	str	r3, [r7, #64]	@ 0x40
 801937a:	683b      	ldr	r3, [r7, #0]
 801937c:	785b      	ldrb	r3, [r3, #1]
 801937e:	2b00      	cmp	r3, #0
 8019380:	d000      	beq.n	8019384 <USB_EPStartXfer+0x57c>
 8019382:	e070      	b.n	8019466 <USB_EPStartXfer+0x65e>
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	2250      	movs	r2, #80	@ 0x50
 801938c:	5a9b      	ldrh	r3, [r3, r2]
 801938e:	b29b      	uxth	r3, r3
 8019390:	001a      	movs	r2, r3
 8019392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019394:	189b      	adds	r3, r3, r2
 8019396:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019398:	683b      	ldr	r3, [r7, #0]
 801939a:	781b      	ldrb	r3, [r3, #0]
 801939c:	00da      	lsls	r2, r3, #3
 801939e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80193a0:	18d3      	adds	r3, r2, r3
 80193a2:	4a6d      	ldr	r2, [pc, #436]	@ (8019558 <USB_EPStartXfer+0x750>)
 80193a4:	4694      	mov	ip, r2
 80193a6:	4463      	add	r3, ip
 80193a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80193aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80193ac:	881b      	ldrh	r3, [r3, #0]
 80193ae:	b29b      	uxth	r3, r3
 80193b0:	059b      	lsls	r3, r3, #22
 80193b2:	0d9b      	lsrs	r3, r3, #22
 80193b4:	b29a      	uxth	r2, r3
 80193b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80193b8:	801a      	strh	r2, [r3, #0]
 80193ba:	1d7b      	adds	r3, r7, #5
 80193bc:	33ff      	adds	r3, #255	@ 0xff
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80193c2:	d922      	bls.n	801940a <USB_EPStartXfer+0x602>
 80193c4:	1d7b      	adds	r3, r7, #5
 80193c6:	33ff      	adds	r3, #255	@ 0xff
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	095b      	lsrs	r3, r3, #5
 80193cc:	21f4      	movs	r1, #244	@ 0xf4
 80193ce:	187a      	adds	r2, r7, r1
 80193d0:	6013      	str	r3, [r2, #0]
 80193d2:	1d7b      	adds	r3, r7, #5
 80193d4:	33ff      	adds	r3, #255	@ 0xff
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	221f      	movs	r2, #31
 80193da:	4013      	ands	r3, r2
 80193dc:	d104      	bne.n	80193e8 <USB_EPStartXfer+0x5e0>
 80193de:	187b      	adds	r3, r7, r1
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	3b01      	subs	r3, #1
 80193e4:	187a      	adds	r2, r7, r1
 80193e6:	6013      	str	r3, [r2, #0]
 80193e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80193ea:	881b      	ldrh	r3, [r3, #0]
 80193ec:	b29a      	uxth	r2, r3
 80193ee:	23f4      	movs	r3, #244	@ 0xf4
 80193f0:	18fb      	adds	r3, r7, r3
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	b29b      	uxth	r3, r3
 80193f6:	029b      	lsls	r3, r3, #10
 80193f8:	b29b      	uxth	r3, r3
 80193fa:	4313      	orrs	r3, r2
 80193fc:	b29b      	uxth	r3, r3
 80193fe:	4a55      	ldr	r2, [pc, #340]	@ (8019554 <USB_EPStartXfer+0x74c>)
 8019400:	4313      	orrs	r3, r2
 8019402:	b29a      	uxth	r2, r3
 8019404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019406:	801a      	strh	r2, [r3, #0]
 8019408:	e048      	b.n	801949c <USB_EPStartXfer+0x694>
 801940a:	1d7b      	adds	r3, r7, #5
 801940c:	33ff      	adds	r3, #255	@ 0xff
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	2b00      	cmp	r3, #0
 8019412:	d108      	bne.n	8019426 <USB_EPStartXfer+0x61e>
 8019414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019416:	881b      	ldrh	r3, [r3, #0]
 8019418:	b29b      	uxth	r3, r3
 801941a:	4a4e      	ldr	r2, [pc, #312]	@ (8019554 <USB_EPStartXfer+0x74c>)
 801941c:	4313      	orrs	r3, r2
 801941e:	b29a      	uxth	r2, r3
 8019420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019422:	801a      	strh	r2, [r3, #0]
 8019424:	e03a      	b.n	801949c <USB_EPStartXfer+0x694>
 8019426:	1d7b      	adds	r3, r7, #5
 8019428:	33ff      	adds	r3, #255	@ 0xff
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	085b      	lsrs	r3, r3, #1
 801942e:	21f4      	movs	r1, #244	@ 0xf4
 8019430:	187a      	adds	r2, r7, r1
 8019432:	6013      	str	r3, [r2, #0]
 8019434:	1d7b      	adds	r3, r7, #5
 8019436:	33ff      	adds	r3, #255	@ 0xff
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	2201      	movs	r2, #1
 801943c:	4013      	ands	r3, r2
 801943e:	d004      	beq.n	801944a <USB_EPStartXfer+0x642>
 8019440:	187b      	adds	r3, r7, r1
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	3301      	adds	r3, #1
 8019446:	187a      	adds	r2, r7, r1
 8019448:	6013      	str	r3, [r2, #0]
 801944a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801944c:	881b      	ldrh	r3, [r3, #0]
 801944e:	b29a      	uxth	r2, r3
 8019450:	23f4      	movs	r3, #244	@ 0xf4
 8019452:	18fb      	adds	r3, r7, r3
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	b29b      	uxth	r3, r3
 8019458:	029b      	lsls	r3, r3, #10
 801945a:	b29b      	uxth	r3, r3
 801945c:	4313      	orrs	r3, r2
 801945e:	b29a      	uxth	r2, r3
 8019460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019462:	801a      	strh	r2, [r3, #0]
 8019464:	e01a      	b.n	801949c <USB_EPStartXfer+0x694>
 8019466:	683b      	ldr	r3, [r7, #0]
 8019468:	785b      	ldrb	r3, [r3, #1]
 801946a:	2b01      	cmp	r3, #1
 801946c:	d116      	bne.n	801949c <USB_EPStartXfer+0x694>
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	2250      	movs	r2, #80	@ 0x50
 8019472:	5a9b      	ldrh	r3, [r3, r2]
 8019474:	b29b      	uxth	r3, r3
 8019476:	001a      	movs	r2, r3
 8019478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801947a:	189b      	adds	r3, r3, r2
 801947c:	643b      	str	r3, [r7, #64]	@ 0x40
 801947e:	683b      	ldr	r3, [r7, #0]
 8019480:	781b      	ldrb	r3, [r3, #0]
 8019482:	00da      	lsls	r2, r3, #3
 8019484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019486:	18d3      	adds	r3, r2, r3
 8019488:	4a33      	ldr	r2, [pc, #204]	@ (8019558 <USB_EPStartXfer+0x750>)
 801948a:	4694      	mov	ip, r2
 801948c:	4463      	add	r3, ip
 801948e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019490:	1d7b      	adds	r3, r7, #5
 8019492:	33ff      	adds	r3, #255	@ 0xff
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	b29a      	uxth	r2, r3
 8019498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801949a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801949c:	2076      	movs	r0, #118	@ 0x76
 801949e:	183b      	adds	r3, r7, r0
 80194a0:	683a      	ldr	r2, [r7, #0]
 80194a2:	8952      	ldrh	r2, [r2, #10]
 80194a4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80194a6:	683b      	ldr	r3, [r7, #0]
 80194a8:	6959      	ldr	r1, [r3, #20]
 80194aa:	1d7b      	adds	r3, r7, #5
 80194ac:	33ff      	adds	r3, #255	@ 0xff
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	b29c      	uxth	r4, r3
 80194b2:	183b      	adds	r3, r7, r0
 80194b4:	881a      	ldrh	r2, [r3, #0]
 80194b6:	6878      	ldr	r0, [r7, #4]
 80194b8:	0023      	movs	r3, r4
 80194ba:	f000 ff17 	bl	801a2ec <USB_WritePMA>
 80194be:	e1b6      	b.n	801982e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80194c0:	683b      	ldr	r3, [r7, #0]
 80194c2:	6a1b      	ldr	r3, [r3, #32]
 80194c4:	1d7a      	adds	r2, r7, #5
 80194c6:	32ff      	adds	r2, #255	@ 0xff
 80194c8:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80194ca:	687a      	ldr	r2, [r7, #4]
 80194cc:	683b      	ldr	r3, [r7, #0]
 80194ce:	781b      	ldrb	r3, [r3, #0]
 80194d0:	009b      	lsls	r3, r3, #2
 80194d2:	18d3      	adds	r3, r2, r3
 80194d4:	881b      	ldrh	r3, [r3, #0]
 80194d6:	b29a      	uxth	r2, r3
 80194d8:	2062      	movs	r0, #98	@ 0x62
 80194da:	183b      	adds	r3, r7, r0
 80194dc:	491f      	ldr	r1, [pc, #124]	@ (801955c <USB_EPStartXfer+0x754>)
 80194de:	400a      	ands	r2, r1
 80194e0:	801a      	strh	r2, [r3, #0]
 80194e2:	687a      	ldr	r2, [r7, #4]
 80194e4:	683b      	ldr	r3, [r7, #0]
 80194e6:	781b      	ldrb	r3, [r3, #0]
 80194e8:	009b      	lsls	r3, r3, #2
 80194ea:	18d3      	adds	r3, r2, r3
 80194ec:	183a      	adds	r2, r7, r0
 80194ee:	8812      	ldrh	r2, [r2, #0]
 80194f0:	491b      	ldr	r1, [pc, #108]	@ (8019560 <USB_EPStartXfer+0x758>)
 80194f2:	430a      	orrs	r2, r1
 80194f4:	b292      	uxth	r2, r2
 80194f6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	2250      	movs	r2, #80	@ 0x50
 8019500:	5a9b      	ldrh	r3, [r3, r2]
 8019502:	b29b      	uxth	r3, r3
 8019504:	001a      	movs	r2, r3
 8019506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019508:	189b      	adds	r3, r3, r2
 801950a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801950c:	683b      	ldr	r3, [r7, #0]
 801950e:	781b      	ldrb	r3, [r3, #0]
 8019510:	00da      	lsls	r2, r3, #3
 8019512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019514:	18d3      	adds	r3, r2, r3
 8019516:	4a0e      	ldr	r2, [pc, #56]	@ (8019550 <USB_EPStartXfer+0x748>)
 8019518:	4694      	mov	ip, r2
 801951a:	4463      	add	r3, ip
 801951c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801951e:	1d7b      	adds	r3, r7, #5
 8019520:	33ff      	adds	r3, #255	@ 0xff
 8019522:	681b      	ldr	r3, [r3, #0]
 8019524:	b29a      	uxth	r2, r3
 8019526:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019528:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801952a:	2076      	movs	r0, #118	@ 0x76
 801952c:	183b      	adds	r3, r7, r0
 801952e:	683a      	ldr	r2, [r7, #0]
 8019530:	8912      	ldrh	r2, [r2, #8]
 8019532:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019534:	683b      	ldr	r3, [r7, #0]
 8019536:	6959      	ldr	r1, [r3, #20]
 8019538:	1d7b      	adds	r3, r7, #5
 801953a:	33ff      	adds	r3, #255	@ 0xff
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	b29c      	uxth	r4, r3
 8019540:	183b      	adds	r3, r7, r0
 8019542:	881a      	ldrh	r2, [r3, #0]
 8019544:	6878      	ldr	r0, [r7, #4]
 8019546:	0023      	movs	r3, r4
 8019548:	f000 fed0 	bl	801a2ec <USB_WritePMA>
 801954c:	e16f      	b.n	801982e <USB_EPStartXfer+0xa26>
 801954e:	46c0      	nop			@ (mov r8, r8)
 8019550:	00000402 	.word	0x00000402
 8019554:	ffff8000 	.word	0xffff8000
 8019558:	00000406 	.word	0x00000406
 801955c:	ffff8e8f 	.word	0xffff8e8f
 8019560:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8019564:	683b      	ldr	r3, [r7, #0]
 8019566:	6a1a      	ldr	r2, [r3, #32]
 8019568:	1d7b      	adds	r3, r7, #5
 801956a:	33ff      	adds	r3, #255	@ 0xff
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	1ad2      	subs	r2, r2, r3
 8019570:	683b      	ldr	r3, [r7, #0]
 8019572:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8019574:	687a      	ldr	r2, [r7, #4]
 8019576:	683b      	ldr	r3, [r7, #0]
 8019578:	781b      	ldrb	r3, [r3, #0]
 801957a:	009b      	lsls	r3, r3, #2
 801957c:	18d3      	adds	r3, r2, r3
 801957e:	881b      	ldrh	r3, [r3, #0]
 8019580:	b29b      	uxth	r3, r3
 8019582:	001a      	movs	r2, r3
 8019584:	2340      	movs	r3, #64	@ 0x40
 8019586:	4013      	ands	r3, r2
 8019588:	d100      	bne.n	801958c <USB_EPStartXfer+0x784>
 801958a:	e0a4      	b.n	80196d6 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	673b      	str	r3, [r7, #112]	@ 0x70
 8019590:	683b      	ldr	r3, [r7, #0]
 8019592:	785b      	ldrb	r3, [r3, #1]
 8019594:	2b00      	cmp	r3, #0
 8019596:	d000      	beq.n	801959a <USB_EPStartXfer+0x792>
 8019598:	e070      	b.n	801967c <USB_EPStartXfer+0x874>
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	2250      	movs	r2, #80	@ 0x50
 80195a2:	5a9b      	ldrh	r3, [r3, r2]
 80195a4:	b29b      	uxth	r3, r3
 80195a6:	001a      	movs	r2, r3
 80195a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80195aa:	189b      	adds	r3, r3, r2
 80195ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80195ae:	683b      	ldr	r3, [r7, #0]
 80195b0:	781b      	ldrb	r3, [r3, #0]
 80195b2:	00da      	lsls	r2, r3, #3
 80195b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80195b6:	18d3      	adds	r3, r2, r3
 80195b8:	4abc      	ldr	r2, [pc, #752]	@ (80198ac <USB_EPStartXfer+0xaa4>)
 80195ba:	4694      	mov	ip, r2
 80195bc:	4463      	add	r3, ip
 80195be:	667b      	str	r3, [r7, #100]	@ 0x64
 80195c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80195c2:	881b      	ldrh	r3, [r3, #0]
 80195c4:	b29b      	uxth	r3, r3
 80195c6:	059b      	lsls	r3, r3, #22
 80195c8:	0d9b      	lsrs	r3, r3, #22
 80195ca:	b29a      	uxth	r2, r3
 80195cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80195ce:	801a      	strh	r2, [r3, #0]
 80195d0:	1d7b      	adds	r3, r7, #5
 80195d2:	33ff      	adds	r3, #255	@ 0xff
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80195d8:	d922      	bls.n	8019620 <USB_EPStartXfer+0x818>
 80195da:	1d7b      	adds	r3, r7, #5
 80195dc:	33ff      	adds	r3, #255	@ 0xff
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	095b      	lsrs	r3, r3, #5
 80195e2:	21f0      	movs	r1, #240	@ 0xf0
 80195e4:	187a      	adds	r2, r7, r1
 80195e6:	6013      	str	r3, [r2, #0]
 80195e8:	1d7b      	adds	r3, r7, #5
 80195ea:	33ff      	adds	r3, #255	@ 0xff
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	221f      	movs	r2, #31
 80195f0:	4013      	ands	r3, r2
 80195f2:	d104      	bne.n	80195fe <USB_EPStartXfer+0x7f6>
 80195f4:	187b      	adds	r3, r7, r1
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	3b01      	subs	r3, #1
 80195fa:	187a      	adds	r2, r7, r1
 80195fc:	6013      	str	r3, [r2, #0]
 80195fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019600:	881b      	ldrh	r3, [r3, #0]
 8019602:	b29a      	uxth	r2, r3
 8019604:	23f0      	movs	r3, #240	@ 0xf0
 8019606:	18fb      	adds	r3, r7, r3
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	b29b      	uxth	r3, r3
 801960c:	029b      	lsls	r3, r3, #10
 801960e:	b29b      	uxth	r3, r3
 8019610:	4313      	orrs	r3, r2
 8019612:	b29b      	uxth	r3, r3
 8019614:	4aa6      	ldr	r2, [pc, #664]	@ (80198b0 <USB_EPStartXfer+0xaa8>)
 8019616:	4313      	orrs	r3, r2
 8019618:	b29a      	uxth	r2, r3
 801961a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801961c:	801a      	strh	r2, [r3, #0]
 801961e:	e048      	b.n	80196b2 <USB_EPStartXfer+0x8aa>
 8019620:	1d7b      	adds	r3, r7, #5
 8019622:	33ff      	adds	r3, #255	@ 0xff
 8019624:	681b      	ldr	r3, [r3, #0]
 8019626:	2b00      	cmp	r3, #0
 8019628:	d108      	bne.n	801963c <USB_EPStartXfer+0x834>
 801962a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801962c:	881b      	ldrh	r3, [r3, #0]
 801962e:	b29b      	uxth	r3, r3
 8019630:	4a9f      	ldr	r2, [pc, #636]	@ (80198b0 <USB_EPStartXfer+0xaa8>)
 8019632:	4313      	orrs	r3, r2
 8019634:	b29a      	uxth	r2, r3
 8019636:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019638:	801a      	strh	r2, [r3, #0]
 801963a:	e03a      	b.n	80196b2 <USB_EPStartXfer+0x8aa>
 801963c:	1d7b      	adds	r3, r7, #5
 801963e:	33ff      	adds	r3, #255	@ 0xff
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	085b      	lsrs	r3, r3, #1
 8019644:	21f0      	movs	r1, #240	@ 0xf0
 8019646:	187a      	adds	r2, r7, r1
 8019648:	6013      	str	r3, [r2, #0]
 801964a:	1d7b      	adds	r3, r7, #5
 801964c:	33ff      	adds	r3, #255	@ 0xff
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	2201      	movs	r2, #1
 8019652:	4013      	ands	r3, r2
 8019654:	d004      	beq.n	8019660 <USB_EPStartXfer+0x858>
 8019656:	187b      	adds	r3, r7, r1
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	3301      	adds	r3, #1
 801965c:	187a      	adds	r2, r7, r1
 801965e:	6013      	str	r3, [r2, #0]
 8019660:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019662:	881b      	ldrh	r3, [r3, #0]
 8019664:	b29a      	uxth	r2, r3
 8019666:	23f0      	movs	r3, #240	@ 0xf0
 8019668:	18fb      	adds	r3, r7, r3
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	b29b      	uxth	r3, r3
 801966e:	029b      	lsls	r3, r3, #10
 8019670:	b29b      	uxth	r3, r3
 8019672:	4313      	orrs	r3, r2
 8019674:	b29a      	uxth	r2, r3
 8019676:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019678:	801a      	strh	r2, [r3, #0]
 801967a:	e01a      	b.n	80196b2 <USB_EPStartXfer+0x8aa>
 801967c:	683b      	ldr	r3, [r7, #0]
 801967e:	785b      	ldrb	r3, [r3, #1]
 8019680:	2b01      	cmp	r3, #1
 8019682:	d116      	bne.n	80196b2 <USB_EPStartXfer+0x8aa>
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	2250      	movs	r2, #80	@ 0x50
 8019688:	5a9b      	ldrh	r3, [r3, r2]
 801968a:	b29b      	uxth	r3, r3
 801968c:	001a      	movs	r2, r3
 801968e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019690:	189b      	adds	r3, r3, r2
 8019692:	673b      	str	r3, [r7, #112]	@ 0x70
 8019694:	683b      	ldr	r3, [r7, #0]
 8019696:	781b      	ldrb	r3, [r3, #0]
 8019698:	00da      	lsls	r2, r3, #3
 801969a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801969c:	18d3      	adds	r3, r2, r3
 801969e:	4a83      	ldr	r2, [pc, #524]	@ (80198ac <USB_EPStartXfer+0xaa4>)
 80196a0:	4694      	mov	ip, r2
 80196a2:	4463      	add	r3, ip
 80196a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80196a6:	1d7b      	adds	r3, r7, #5
 80196a8:	33ff      	adds	r3, #255	@ 0xff
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	b29a      	uxth	r2, r3
 80196ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80196b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80196b2:	2076      	movs	r0, #118	@ 0x76
 80196b4:	183b      	adds	r3, r7, r0
 80196b6:	683a      	ldr	r2, [r7, #0]
 80196b8:	8952      	ldrh	r2, [r2, #10]
 80196ba:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80196bc:	683b      	ldr	r3, [r7, #0]
 80196be:	6959      	ldr	r1, [r3, #20]
 80196c0:	1d7b      	adds	r3, r7, #5
 80196c2:	33ff      	adds	r3, #255	@ 0xff
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	b29c      	uxth	r4, r3
 80196c8:	183b      	adds	r3, r7, r0
 80196ca:	881a      	ldrh	r2, [r3, #0]
 80196cc:	6878      	ldr	r0, [r7, #4]
 80196ce:	0023      	movs	r3, r4
 80196d0:	f000 fe0c 	bl	801a2ec <USB_WritePMA>
 80196d4:	e0ab      	b.n	801982e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80196d6:	683b      	ldr	r3, [r7, #0]
 80196d8:	785b      	ldrb	r3, [r3, #1]
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d000      	beq.n	80196e0 <USB_EPStartXfer+0x8d8>
 80196de:	e070      	b.n	80197c2 <USB_EPStartXfer+0x9ba>
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	2250      	movs	r2, #80	@ 0x50
 80196e8:	5a9b      	ldrh	r3, [r3, r2]
 80196ea:	b29b      	uxth	r3, r3
 80196ec:	001a      	movs	r2, r3
 80196ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80196f0:	189b      	adds	r3, r3, r2
 80196f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80196f4:	683b      	ldr	r3, [r7, #0]
 80196f6:	781b      	ldrb	r3, [r3, #0]
 80196f8:	00da      	lsls	r2, r3, #3
 80196fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80196fc:	18d3      	adds	r3, r2, r3
 80196fe:	4a6d      	ldr	r2, [pc, #436]	@ (80198b4 <USB_EPStartXfer+0xaac>)
 8019700:	4694      	mov	ip, r2
 8019702:	4463      	add	r3, ip
 8019704:	67bb      	str	r3, [r7, #120]	@ 0x78
 8019706:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019708:	881b      	ldrh	r3, [r3, #0]
 801970a:	b29b      	uxth	r3, r3
 801970c:	059b      	lsls	r3, r3, #22
 801970e:	0d9b      	lsrs	r3, r3, #22
 8019710:	b29a      	uxth	r2, r3
 8019712:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019714:	801a      	strh	r2, [r3, #0]
 8019716:	1d7b      	adds	r3, r7, #5
 8019718:	33ff      	adds	r3, #255	@ 0xff
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	2b3e      	cmp	r3, #62	@ 0x3e
 801971e:	d922      	bls.n	8019766 <USB_EPStartXfer+0x95e>
 8019720:	1d7b      	adds	r3, r7, #5
 8019722:	33ff      	adds	r3, #255	@ 0xff
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	095b      	lsrs	r3, r3, #5
 8019728:	21ec      	movs	r1, #236	@ 0xec
 801972a:	187a      	adds	r2, r7, r1
 801972c:	6013      	str	r3, [r2, #0]
 801972e:	1d7b      	adds	r3, r7, #5
 8019730:	33ff      	adds	r3, #255	@ 0xff
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	221f      	movs	r2, #31
 8019736:	4013      	ands	r3, r2
 8019738:	d104      	bne.n	8019744 <USB_EPStartXfer+0x93c>
 801973a:	187b      	adds	r3, r7, r1
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	3b01      	subs	r3, #1
 8019740:	187a      	adds	r2, r7, r1
 8019742:	6013      	str	r3, [r2, #0]
 8019744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019746:	881b      	ldrh	r3, [r3, #0]
 8019748:	b29a      	uxth	r2, r3
 801974a:	23ec      	movs	r3, #236	@ 0xec
 801974c:	18fb      	adds	r3, r7, r3
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	b29b      	uxth	r3, r3
 8019752:	029b      	lsls	r3, r3, #10
 8019754:	b29b      	uxth	r3, r3
 8019756:	4313      	orrs	r3, r2
 8019758:	b29b      	uxth	r3, r3
 801975a:	4a55      	ldr	r2, [pc, #340]	@ (80198b0 <USB_EPStartXfer+0xaa8>)
 801975c:	4313      	orrs	r3, r2
 801975e:	b29a      	uxth	r2, r3
 8019760:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019762:	801a      	strh	r2, [r3, #0]
 8019764:	e052      	b.n	801980c <USB_EPStartXfer+0xa04>
 8019766:	1d7b      	adds	r3, r7, #5
 8019768:	33ff      	adds	r3, #255	@ 0xff
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	2b00      	cmp	r3, #0
 801976e:	d108      	bne.n	8019782 <USB_EPStartXfer+0x97a>
 8019770:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019772:	881b      	ldrh	r3, [r3, #0]
 8019774:	b29b      	uxth	r3, r3
 8019776:	4a4e      	ldr	r2, [pc, #312]	@ (80198b0 <USB_EPStartXfer+0xaa8>)
 8019778:	4313      	orrs	r3, r2
 801977a:	b29a      	uxth	r2, r3
 801977c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801977e:	801a      	strh	r2, [r3, #0]
 8019780:	e044      	b.n	801980c <USB_EPStartXfer+0xa04>
 8019782:	1d7b      	adds	r3, r7, #5
 8019784:	33ff      	adds	r3, #255	@ 0xff
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	085b      	lsrs	r3, r3, #1
 801978a:	21ec      	movs	r1, #236	@ 0xec
 801978c:	187a      	adds	r2, r7, r1
 801978e:	6013      	str	r3, [r2, #0]
 8019790:	1d7b      	adds	r3, r7, #5
 8019792:	33ff      	adds	r3, #255	@ 0xff
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	2201      	movs	r2, #1
 8019798:	4013      	ands	r3, r2
 801979a:	d004      	beq.n	80197a6 <USB_EPStartXfer+0x99e>
 801979c:	187b      	adds	r3, r7, r1
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	3301      	adds	r3, #1
 80197a2:	187a      	adds	r2, r7, r1
 80197a4:	6013      	str	r3, [r2, #0]
 80197a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80197a8:	881b      	ldrh	r3, [r3, #0]
 80197aa:	b29a      	uxth	r2, r3
 80197ac:	23ec      	movs	r3, #236	@ 0xec
 80197ae:	18fb      	adds	r3, r7, r3
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	b29b      	uxth	r3, r3
 80197b4:	029b      	lsls	r3, r3, #10
 80197b6:	b29b      	uxth	r3, r3
 80197b8:	4313      	orrs	r3, r2
 80197ba:	b29a      	uxth	r2, r3
 80197bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80197be:	801a      	strh	r2, [r3, #0]
 80197c0:	e024      	b.n	801980c <USB_EPStartXfer+0xa04>
 80197c2:	683b      	ldr	r3, [r7, #0]
 80197c4:	785b      	ldrb	r3, [r3, #1]
 80197c6:	2b01      	cmp	r3, #1
 80197c8:	d120      	bne.n	801980c <USB_EPStartXfer+0xa04>
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	2184      	movs	r1, #132	@ 0x84
 80197ce:	187a      	adds	r2, r7, r1
 80197d0:	6013      	str	r3, [r2, #0]
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	2250      	movs	r2, #80	@ 0x50
 80197d6:	5a9b      	ldrh	r3, [r3, r2]
 80197d8:	b29b      	uxth	r3, r3
 80197da:	001a      	movs	r2, r3
 80197dc:	187b      	adds	r3, r7, r1
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	189b      	adds	r3, r3, r2
 80197e2:	187a      	adds	r2, r7, r1
 80197e4:	6013      	str	r3, [r2, #0]
 80197e6:	683b      	ldr	r3, [r7, #0]
 80197e8:	781b      	ldrb	r3, [r3, #0]
 80197ea:	00da      	lsls	r2, r3, #3
 80197ec:	187b      	adds	r3, r7, r1
 80197ee:	681b      	ldr	r3, [r3, #0]
 80197f0:	18d3      	adds	r3, r2, r3
 80197f2:	4a30      	ldr	r2, [pc, #192]	@ (80198b4 <USB_EPStartXfer+0xaac>)
 80197f4:	4694      	mov	ip, r2
 80197f6:	4463      	add	r3, ip
 80197f8:	2180      	movs	r1, #128	@ 0x80
 80197fa:	187a      	adds	r2, r7, r1
 80197fc:	6013      	str	r3, [r2, #0]
 80197fe:	1d7b      	adds	r3, r7, #5
 8019800:	33ff      	adds	r3, #255	@ 0xff
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	b29a      	uxth	r2, r3
 8019806:	187b      	adds	r3, r7, r1
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801980c:	2076      	movs	r0, #118	@ 0x76
 801980e:	183b      	adds	r3, r7, r0
 8019810:	683a      	ldr	r2, [r7, #0]
 8019812:	8912      	ldrh	r2, [r2, #8]
 8019814:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019816:	683b      	ldr	r3, [r7, #0]
 8019818:	6959      	ldr	r1, [r3, #20]
 801981a:	1d7b      	adds	r3, r7, #5
 801981c:	33ff      	adds	r3, #255	@ 0xff
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	b29c      	uxth	r4, r3
 8019822:	183b      	adds	r3, r7, r0
 8019824:	881a      	ldrh	r2, [r3, #0]
 8019826:	6878      	ldr	r0, [r7, #4]
 8019828:	0023      	movs	r3, r4
 801982a:	f000 fd5f 	bl	801a2ec <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801982e:	687a      	ldr	r2, [r7, #4]
 8019830:	683b      	ldr	r3, [r7, #0]
 8019832:	781b      	ldrb	r3, [r3, #0]
 8019834:	009b      	lsls	r3, r3, #2
 8019836:	18d3      	adds	r3, r2, r3
 8019838:	881b      	ldrh	r3, [r3, #0]
 801983a:	b29a      	uxth	r2, r3
 801983c:	200a      	movs	r0, #10
 801983e:	183b      	adds	r3, r7, r0
 8019840:	491d      	ldr	r1, [pc, #116]	@ (80198b8 <USB_EPStartXfer+0xab0>)
 8019842:	400a      	ands	r2, r1
 8019844:	801a      	strh	r2, [r3, #0]
 8019846:	183b      	adds	r3, r7, r0
 8019848:	183a      	adds	r2, r7, r0
 801984a:	8812      	ldrh	r2, [r2, #0]
 801984c:	2110      	movs	r1, #16
 801984e:	404a      	eors	r2, r1
 8019850:	801a      	strh	r2, [r3, #0]
 8019852:	183b      	adds	r3, r7, r0
 8019854:	183a      	adds	r2, r7, r0
 8019856:	8812      	ldrh	r2, [r2, #0]
 8019858:	2120      	movs	r1, #32
 801985a:	404a      	eors	r2, r1
 801985c:	801a      	strh	r2, [r3, #0]
 801985e:	687a      	ldr	r2, [r7, #4]
 8019860:	683b      	ldr	r3, [r7, #0]
 8019862:	781b      	ldrb	r3, [r3, #0]
 8019864:	009b      	lsls	r3, r3, #2
 8019866:	18d3      	adds	r3, r2, r3
 8019868:	183a      	adds	r2, r7, r0
 801986a:	8812      	ldrh	r2, [r2, #0]
 801986c:	4913      	ldr	r1, [pc, #76]	@ (80198bc <USB_EPStartXfer+0xab4>)
 801986e:	430a      	orrs	r2, r1
 8019870:	b292      	uxth	r2, r2
 8019872:	801a      	strh	r2, [r3, #0]
 8019874:	f000 fbf4 	bl	801a060 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8019878:	683b      	ldr	r3, [r7, #0]
 801987a:	7b1b      	ldrb	r3, [r3, #12]
 801987c:	2b00      	cmp	r3, #0
 801987e:	d000      	beq.n	8019882 <USB_EPStartXfer+0xa7a>
 8019880:	e0a9      	b.n	80199d6 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8019882:	683b      	ldr	r3, [r7, #0]
 8019884:	699a      	ldr	r2, [r3, #24]
 8019886:	683b      	ldr	r3, [r7, #0]
 8019888:	691b      	ldr	r3, [r3, #16]
 801988a:	429a      	cmp	r2, r3
 801988c:	d918      	bls.n	80198c0 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801988e:	683b      	ldr	r3, [r7, #0]
 8019890:	691b      	ldr	r3, [r3, #16]
 8019892:	1d7a      	adds	r2, r7, #5
 8019894:	32ff      	adds	r2, #255	@ 0xff
 8019896:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8019898:	683b      	ldr	r3, [r7, #0]
 801989a:	699a      	ldr	r2, [r3, #24]
 801989c:	1d7b      	adds	r3, r7, #5
 801989e:	33ff      	adds	r3, #255	@ 0xff
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	1ad2      	subs	r2, r2, r3
 80198a4:	683b      	ldr	r3, [r7, #0]
 80198a6:	619a      	str	r2, [r3, #24]
 80198a8:	e012      	b.n	80198d0 <USB_EPStartXfer+0xac8>
 80198aa:	46c0      	nop			@ (mov r8, r8)
 80198ac:	00000406 	.word	0x00000406
 80198b0:	ffff8000 	.word	0xffff8000
 80198b4:	00000402 	.word	0x00000402
 80198b8:	ffff8fbf 	.word	0xffff8fbf
 80198bc:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 80198c0:	683b      	ldr	r3, [r7, #0]
 80198c2:	699b      	ldr	r3, [r3, #24]
 80198c4:	1d7a      	adds	r2, r7, #5
 80198c6:	32ff      	adds	r2, #255	@ 0xff
 80198c8:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80198ca:	683b      	ldr	r3, [r7, #0]
 80198cc:	2200      	movs	r2, #0
 80198ce:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	2190      	movs	r1, #144	@ 0x90
 80198d4:	187a      	adds	r2, r7, r1
 80198d6:	6013      	str	r3, [r2, #0]
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	2250      	movs	r2, #80	@ 0x50
 80198dc:	5a9b      	ldrh	r3, [r3, r2]
 80198de:	b29b      	uxth	r3, r3
 80198e0:	001a      	movs	r2, r3
 80198e2:	187b      	adds	r3, r7, r1
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	189b      	adds	r3, r3, r2
 80198e8:	187a      	adds	r2, r7, r1
 80198ea:	6013      	str	r3, [r2, #0]
 80198ec:	683b      	ldr	r3, [r7, #0]
 80198ee:	781b      	ldrb	r3, [r3, #0]
 80198f0:	00da      	lsls	r2, r3, #3
 80198f2:	187b      	adds	r3, r7, r1
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	18d3      	adds	r3, r2, r3
 80198f8:	4acf      	ldr	r2, [pc, #828]	@ (8019c38 <USB_EPStartXfer+0xe30>)
 80198fa:	4694      	mov	ip, r2
 80198fc:	4463      	add	r3, ip
 80198fe:	218c      	movs	r1, #140	@ 0x8c
 8019900:	187a      	adds	r2, r7, r1
 8019902:	6013      	str	r3, [r2, #0]
 8019904:	187b      	adds	r3, r7, r1
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	881b      	ldrh	r3, [r3, #0]
 801990a:	b29b      	uxth	r3, r3
 801990c:	059b      	lsls	r3, r3, #22
 801990e:	0d9b      	lsrs	r3, r3, #22
 8019910:	b29a      	uxth	r2, r3
 8019912:	187b      	adds	r3, r7, r1
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	801a      	strh	r2, [r3, #0]
 8019918:	1d7b      	adds	r3, r7, #5
 801991a:	33ff      	adds	r3, #255	@ 0xff
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019920:	d925      	bls.n	801996e <USB_EPStartXfer+0xb66>
 8019922:	1d7b      	adds	r3, r7, #5
 8019924:	33ff      	adds	r3, #255	@ 0xff
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	095b      	lsrs	r3, r3, #5
 801992a:	21e8      	movs	r1, #232	@ 0xe8
 801992c:	187a      	adds	r2, r7, r1
 801992e:	6013      	str	r3, [r2, #0]
 8019930:	1d7b      	adds	r3, r7, #5
 8019932:	33ff      	adds	r3, #255	@ 0xff
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	221f      	movs	r2, #31
 8019938:	4013      	ands	r3, r2
 801993a:	d104      	bne.n	8019946 <USB_EPStartXfer+0xb3e>
 801993c:	187b      	adds	r3, r7, r1
 801993e:	681b      	ldr	r3, [r3, #0]
 8019940:	3b01      	subs	r3, #1
 8019942:	187a      	adds	r2, r7, r1
 8019944:	6013      	str	r3, [r2, #0]
 8019946:	218c      	movs	r1, #140	@ 0x8c
 8019948:	187b      	adds	r3, r7, r1
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	881b      	ldrh	r3, [r3, #0]
 801994e:	b29a      	uxth	r2, r3
 8019950:	23e8      	movs	r3, #232	@ 0xe8
 8019952:	18fb      	adds	r3, r7, r3
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	b29b      	uxth	r3, r3
 8019958:	029b      	lsls	r3, r3, #10
 801995a:	b29b      	uxth	r3, r3
 801995c:	4313      	orrs	r3, r2
 801995e:	b29b      	uxth	r3, r3
 8019960:	4ab6      	ldr	r2, [pc, #728]	@ (8019c3c <USB_EPStartXfer+0xe34>)
 8019962:	4313      	orrs	r3, r2
 8019964:	b29a      	uxth	r2, r3
 8019966:	187b      	adds	r3, r7, r1
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	801a      	strh	r2, [r3, #0]
 801996c:	e353      	b.n	801a016 <USB_EPStartXfer+0x120e>
 801996e:	1d7b      	adds	r3, r7, #5
 8019970:	33ff      	adds	r3, #255	@ 0xff
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	2b00      	cmp	r3, #0
 8019976:	d10b      	bne.n	8019990 <USB_EPStartXfer+0xb88>
 8019978:	218c      	movs	r1, #140	@ 0x8c
 801997a:	187b      	adds	r3, r7, r1
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	881b      	ldrh	r3, [r3, #0]
 8019980:	b29b      	uxth	r3, r3
 8019982:	4aae      	ldr	r2, [pc, #696]	@ (8019c3c <USB_EPStartXfer+0xe34>)
 8019984:	4313      	orrs	r3, r2
 8019986:	b29a      	uxth	r2, r3
 8019988:	187b      	adds	r3, r7, r1
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	801a      	strh	r2, [r3, #0]
 801998e:	e342      	b.n	801a016 <USB_EPStartXfer+0x120e>
 8019990:	1d7b      	adds	r3, r7, #5
 8019992:	33ff      	adds	r3, #255	@ 0xff
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	085b      	lsrs	r3, r3, #1
 8019998:	21e8      	movs	r1, #232	@ 0xe8
 801999a:	187a      	adds	r2, r7, r1
 801999c:	6013      	str	r3, [r2, #0]
 801999e:	1d7b      	adds	r3, r7, #5
 80199a0:	33ff      	adds	r3, #255	@ 0xff
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	2201      	movs	r2, #1
 80199a6:	4013      	ands	r3, r2
 80199a8:	d004      	beq.n	80199b4 <USB_EPStartXfer+0xbac>
 80199aa:	187b      	adds	r3, r7, r1
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	3301      	adds	r3, #1
 80199b0:	187a      	adds	r2, r7, r1
 80199b2:	6013      	str	r3, [r2, #0]
 80199b4:	218c      	movs	r1, #140	@ 0x8c
 80199b6:	187b      	adds	r3, r7, r1
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	881b      	ldrh	r3, [r3, #0]
 80199bc:	b29a      	uxth	r2, r3
 80199be:	23e8      	movs	r3, #232	@ 0xe8
 80199c0:	18fb      	adds	r3, r7, r3
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	b29b      	uxth	r3, r3
 80199c6:	029b      	lsls	r3, r3, #10
 80199c8:	b29b      	uxth	r3, r3
 80199ca:	4313      	orrs	r3, r2
 80199cc:	b29a      	uxth	r2, r3
 80199ce:	187b      	adds	r3, r7, r1
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	801a      	strh	r2, [r3, #0]
 80199d4:	e31f      	b.n	801a016 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80199d6:	683b      	ldr	r3, [r7, #0]
 80199d8:	78db      	ldrb	r3, [r3, #3]
 80199da:	2b02      	cmp	r3, #2
 80199dc:	d000      	beq.n	80199e0 <USB_EPStartXfer+0xbd8>
 80199de:	e191      	b.n	8019d04 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80199e0:	683b      	ldr	r3, [r7, #0]
 80199e2:	785b      	ldrb	r3, [r3, #1]
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d000      	beq.n	80199ea <USB_EPStartXfer+0xbe2>
 80199e8:	e07c      	b.n	8019ae4 <USB_EPStartXfer+0xcdc>
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	21ac      	movs	r1, #172	@ 0xac
 80199ee:	187a      	adds	r2, r7, r1
 80199f0:	6013      	str	r3, [r2, #0]
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	2250      	movs	r2, #80	@ 0x50
 80199f6:	5a9b      	ldrh	r3, [r3, r2]
 80199f8:	b29b      	uxth	r3, r3
 80199fa:	001a      	movs	r2, r3
 80199fc:	187b      	adds	r3, r7, r1
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	189b      	adds	r3, r3, r2
 8019a02:	187a      	adds	r2, r7, r1
 8019a04:	6013      	str	r3, [r2, #0]
 8019a06:	683b      	ldr	r3, [r7, #0]
 8019a08:	781b      	ldrb	r3, [r3, #0]
 8019a0a:	00da      	lsls	r2, r3, #3
 8019a0c:	187b      	adds	r3, r7, r1
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	18d3      	adds	r3, r2, r3
 8019a12:	4a8b      	ldr	r2, [pc, #556]	@ (8019c40 <USB_EPStartXfer+0xe38>)
 8019a14:	4694      	mov	ip, r2
 8019a16:	4463      	add	r3, ip
 8019a18:	21a8      	movs	r1, #168	@ 0xa8
 8019a1a:	187a      	adds	r2, r7, r1
 8019a1c:	6013      	str	r3, [r2, #0]
 8019a1e:	187b      	adds	r3, r7, r1
 8019a20:	681b      	ldr	r3, [r3, #0]
 8019a22:	881b      	ldrh	r3, [r3, #0]
 8019a24:	b29b      	uxth	r3, r3
 8019a26:	059b      	lsls	r3, r3, #22
 8019a28:	0d9b      	lsrs	r3, r3, #22
 8019a2a:	b29a      	uxth	r2, r3
 8019a2c:	187b      	adds	r3, r7, r1
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	801a      	strh	r2, [r3, #0]
 8019a32:	683b      	ldr	r3, [r7, #0]
 8019a34:	691b      	ldr	r3, [r3, #16]
 8019a36:	2b3e      	cmp	r3, #62	@ 0x3e
 8019a38:	d923      	bls.n	8019a82 <USB_EPStartXfer+0xc7a>
 8019a3a:	683b      	ldr	r3, [r7, #0]
 8019a3c:	691b      	ldr	r3, [r3, #16]
 8019a3e:	095b      	lsrs	r3, r3, #5
 8019a40:	21e4      	movs	r1, #228	@ 0xe4
 8019a42:	187a      	adds	r2, r7, r1
 8019a44:	6013      	str	r3, [r2, #0]
 8019a46:	683b      	ldr	r3, [r7, #0]
 8019a48:	691b      	ldr	r3, [r3, #16]
 8019a4a:	221f      	movs	r2, #31
 8019a4c:	4013      	ands	r3, r2
 8019a4e:	d104      	bne.n	8019a5a <USB_EPStartXfer+0xc52>
 8019a50:	187b      	adds	r3, r7, r1
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	3b01      	subs	r3, #1
 8019a56:	187a      	adds	r2, r7, r1
 8019a58:	6013      	str	r3, [r2, #0]
 8019a5a:	21a8      	movs	r1, #168	@ 0xa8
 8019a5c:	187b      	adds	r3, r7, r1
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	881b      	ldrh	r3, [r3, #0]
 8019a62:	b29a      	uxth	r2, r3
 8019a64:	23e4      	movs	r3, #228	@ 0xe4
 8019a66:	18fb      	adds	r3, r7, r3
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	b29b      	uxth	r3, r3
 8019a6c:	029b      	lsls	r3, r3, #10
 8019a6e:	b29b      	uxth	r3, r3
 8019a70:	4313      	orrs	r3, r2
 8019a72:	b29b      	uxth	r3, r3
 8019a74:	4a71      	ldr	r2, [pc, #452]	@ (8019c3c <USB_EPStartXfer+0xe34>)
 8019a76:	4313      	orrs	r3, r2
 8019a78:	b29a      	uxth	r2, r3
 8019a7a:	187b      	adds	r3, r7, r1
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	801a      	strh	r2, [r3, #0]
 8019a80:	e054      	b.n	8019b2c <USB_EPStartXfer+0xd24>
 8019a82:	683b      	ldr	r3, [r7, #0]
 8019a84:	691b      	ldr	r3, [r3, #16]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d10b      	bne.n	8019aa2 <USB_EPStartXfer+0xc9a>
 8019a8a:	21a8      	movs	r1, #168	@ 0xa8
 8019a8c:	187b      	adds	r3, r7, r1
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	881b      	ldrh	r3, [r3, #0]
 8019a92:	b29b      	uxth	r3, r3
 8019a94:	4a69      	ldr	r2, [pc, #420]	@ (8019c3c <USB_EPStartXfer+0xe34>)
 8019a96:	4313      	orrs	r3, r2
 8019a98:	b29a      	uxth	r2, r3
 8019a9a:	187b      	adds	r3, r7, r1
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	801a      	strh	r2, [r3, #0]
 8019aa0:	e044      	b.n	8019b2c <USB_EPStartXfer+0xd24>
 8019aa2:	683b      	ldr	r3, [r7, #0]
 8019aa4:	691b      	ldr	r3, [r3, #16]
 8019aa6:	085b      	lsrs	r3, r3, #1
 8019aa8:	21e4      	movs	r1, #228	@ 0xe4
 8019aaa:	187a      	adds	r2, r7, r1
 8019aac:	6013      	str	r3, [r2, #0]
 8019aae:	683b      	ldr	r3, [r7, #0]
 8019ab0:	691b      	ldr	r3, [r3, #16]
 8019ab2:	2201      	movs	r2, #1
 8019ab4:	4013      	ands	r3, r2
 8019ab6:	d004      	beq.n	8019ac2 <USB_EPStartXfer+0xcba>
 8019ab8:	187b      	adds	r3, r7, r1
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	3301      	adds	r3, #1
 8019abe:	187a      	adds	r2, r7, r1
 8019ac0:	6013      	str	r3, [r2, #0]
 8019ac2:	21a8      	movs	r1, #168	@ 0xa8
 8019ac4:	187b      	adds	r3, r7, r1
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	881b      	ldrh	r3, [r3, #0]
 8019aca:	b29a      	uxth	r2, r3
 8019acc:	23e4      	movs	r3, #228	@ 0xe4
 8019ace:	18fb      	adds	r3, r7, r3
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	b29b      	uxth	r3, r3
 8019ad4:	029b      	lsls	r3, r3, #10
 8019ad6:	b29b      	uxth	r3, r3
 8019ad8:	4313      	orrs	r3, r2
 8019ada:	b29a      	uxth	r2, r3
 8019adc:	187b      	adds	r3, r7, r1
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	801a      	strh	r2, [r3, #0]
 8019ae2:	e023      	b.n	8019b2c <USB_EPStartXfer+0xd24>
 8019ae4:	683b      	ldr	r3, [r7, #0]
 8019ae6:	785b      	ldrb	r3, [r3, #1]
 8019ae8:	2b01      	cmp	r3, #1
 8019aea:	d11f      	bne.n	8019b2c <USB_EPStartXfer+0xd24>
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	21b4      	movs	r1, #180	@ 0xb4
 8019af0:	187a      	adds	r2, r7, r1
 8019af2:	6013      	str	r3, [r2, #0]
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	2250      	movs	r2, #80	@ 0x50
 8019af8:	5a9b      	ldrh	r3, [r3, r2]
 8019afa:	b29b      	uxth	r3, r3
 8019afc:	001a      	movs	r2, r3
 8019afe:	187b      	adds	r3, r7, r1
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	189b      	adds	r3, r3, r2
 8019b04:	187a      	adds	r2, r7, r1
 8019b06:	6013      	str	r3, [r2, #0]
 8019b08:	683b      	ldr	r3, [r7, #0]
 8019b0a:	781b      	ldrb	r3, [r3, #0]
 8019b0c:	00da      	lsls	r2, r3, #3
 8019b0e:	187b      	adds	r3, r7, r1
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	18d3      	adds	r3, r2, r3
 8019b14:	4a4a      	ldr	r2, [pc, #296]	@ (8019c40 <USB_EPStartXfer+0xe38>)
 8019b16:	4694      	mov	ip, r2
 8019b18:	4463      	add	r3, ip
 8019b1a:	21b0      	movs	r1, #176	@ 0xb0
 8019b1c:	187a      	adds	r2, r7, r1
 8019b1e:	6013      	str	r3, [r2, #0]
 8019b20:	683b      	ldr	r3, [r7, #0]
 8019b22:	691b      	ldr	r3, [r3, #16]
 8019b24:	b29a      	uxth	r2, r3
 8019b26:	187b      	adds	r3, r7, r1
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	801a      	strh	r2, [r3, #0]
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	22a4      	movs	r2, #164	@ 0xa4
 8019b30:	18ba      	adds	r2, r7, r2
 8019b32:	6013      	str	r3, [r2, #0]
 8019b34:	683b      	ldr	r3, [r7, #0]
 8019b36:	785b      	ldrb	r3, [r3, #1]
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d000      	beq.n	8019b3e <USB_EPStartXfer+0xd36>
 8019b3c:	e082      	b.n	8019c44 <USB_EPStartXfer+0xe3c>
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	219c      	movs	r1, #156	@ 0x9c
 8019b42:	187a      	adds	r2, r7, r1
 8019b44:	6013      	str	r3, [r2, #0]
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	2250      	movs	r2, #80	@ 0x50
 8019b4a:	5a9b      	ldrh	r3, [r3, r2]
 8019b4c:	b29b      	uxth	r3, r3
 8019b4e:	001a      	movs	r2, r3
 8019b50:	187b      	adds	r3, r7, r1
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	189b      	adds	r3, r3, r2
 8019b56:	187a      	adds	r2, r7, r1
 8019b58:	6013      	str	r3, [r2, #0]
 8019b5a:	683b      	ldr	r3, [r7, #0]
 8019b5c:	781b      	ldrb	r3, [r3, #0]
 8019b5e:	00da      	lsls	r2, r3, #3
 8019b60:	187b      	adds	r3, r7, r1
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	18d3      	adds	r3, r2, r3
 8019b66:	4a34      	ldr	r2, [pc, #208]	@ (8019c38 <USB_EPStartXfer+0xe30>)
 8019b68:	4694      	mov	ip, r2
 8019b6a:	4463      	add	r3, ip
 8019b6c:	2198      	movs	r1, #152	@ 0x98
 8019b6e:	187a      	adds	r2, r7, r1
 8019b70:	6013      	str	r3, [r2, #0]
 8019b72:	187b      	adds	r3, r7, r1
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	881b      	ldrh	r3, [r3, #0]
 8019b78:	b29b      	uxth	r3, r3
 8019b7a:	059b      	lsls	r3, r3, #22
 8019b7c:	0d9b      	lsrs	r3, r3, #22
 8019b7e:	b29a      	uxth	r2, r3
 8019b80:	187b      	adds	r3, r7, r1
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	801a      	strh	r2, [r3, #0]
 8019b86:	683b      	ldr	r3, [r7, #0]
 8019b88:	691b      	ldr	r3, [r3, #16]
 8019b8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8019b8c:	d923      	bls.n	8019bd6 <USB_EPStartXfer+0xdce>
 8019b8e:	683b      	ldr	r3, [r7, #0]
 8019b90:	691b      	ldr	r3, [r3, #16]
 8019b92:	095b      	lsrs	r3, r3, #5
 8019b94:	21e0      	movs	r1, #224	@ 0xe0
 8019b96:	187a      	adds	r2, r7, r1
 8019b98:	6013      	str	r3, [r2, #0]
 8019b9a:	683b      	ldr	r3, [r7, #0]
 8019b9c:	691b      	ldr	r3, [r3, #16]
 8019b9e:	221f      	movs	r2, #31
 8019ba0:	4013      	ands	r3, r2
 8019ba2:	d104      	bne.n	8019bae <USB_EPStartXfer+0xda6>
 8019ba4:	187b      	adds	r3, r7, r1
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	3b01      	subs	r3, #1
 8019baa:	187a      	adds	r2, r7, r1
 8019bac:	6013      	str	r3, [r2, #0]
 8019bae:	2198      	movs	r1, #152	@ 0x98
 8019bb0:	187b      	adds	r3, r7, r1
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	881b      	ldrh	r3, [r3, #0]
 8019bb6:	b29a      	uxth	r2, r3
 8019bb8:	23e0      	movs	r3, #224	@ 0xe0
 8019bba:	18fb      	adds	r3, r7, r3
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	b29b      	uxth	r3, r3
 8019bc0:	029b      	lsls	r3, r3, #10
 8019bc2:	b29b      	uxth	r3, r3
 8019bc4:	4313      	orrs	r3, r2
 8019bc6:	b29b      	uxth	r3, r3
 8019bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8019c3c <USB_EPStartXfer+0xe34>)
 8019bca:	4313      	orrs	r3, r2
 8019bcc:	b29a      	uxth	r2, r3
 8019bce:	187b      	adds	r3, r7, r1
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	801a      	strh	r2, [r3, #0]
 8019bd4:	e057      	b.n	8019c86 <USB_EPStartXfer+0xe7e>
 8019bd6:	683b      	ldr	r3, [r7, #0]
 8019bd8:	691b      	ldr	r3, [r3, #16]
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d10b      	bne.n	8019bf6 <USB_EPStartXfer+0xdee>
 8019bde:	2198      	movs	r1, #152	@ 0x98
 8019be0:	187b      	adds	r3, r7, r1
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	881b      	ldrh	r3, [r3, #0]
 8019be6:	b29b      	uxth	r3, r3
 8019be8:	4a14      	ldr	r2, [pc, #80]	@ (8019c3c <USB_EPStartXfer+0xe34>)
 8019bea:	4313      	orrs	r3, r2
 8019bec:	b29a      	uxth	r2, r3
 8019bee:	187b      	adds	r3, r7, r1
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	801a      	strh	r2, [r3, #0]
 8019bf4:	e047      	b.n	8019c86 <USB_EPStartXfer+0xe7e>
 8019bf6:	683b      	ldr	r3, [r7, #0]
 8019bf8:	691b      	ldr	r3, [r3, #16]
 8019bfa:	085b      	lsrs	r3, r3, #1
 8019bfc:	21e0      	movs	r1, #224	@ 0xe0
 8019bfe:	187a      	adds	r2, r7, r1
 8019c00:	6013      	str	r3, [r2, #0]
 8019c02:	683b      	ldr	r3, [r7, #0]
 8019c04:	691b      	ldr	r3, [r3, #16]
 8019c06:	2201      	movs	r2, #1
 8019c08:	4013      	ands	r3, r2
 8019c0a:	d004      	beq.n	8019c16 <USB_EPStartXfer+0xe0e>
 8019c0c:	187b      	adds	r3, r7, r1
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	3301      	adds	r3, #1
 8019c12:	187a      	adds	r2, r7, r1
 8019c14:	6013      	str	r3, [r2, #0]
 8019c16:	2198      	movs	r1, #152	@ 0x98
 8019c18:	187b      	adds	r3, r7, r1
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	881b      	ldrh	r3, [r3, #0]
 8019c1e:	b29a      	uxth	r2, r3
 8019c20:	23e0      	movs	r3, #224	@ 0xe0
 8019c22:	18fb      	adds	r3, r7, r3
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	b29b      	uxth	r3, r3
 8019c28:	029b      	lsls	r3, r3, #10
 8019c2a:	b29b      	uxth	r3, r3
 8019c2c:	4313      	orrs	r3, r2
 8019c2e:	b29a      	uxth	r2, r3
 8019c30:	187b      	adds	r3, r7, r1
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	801a      	strh	r2, [r3, #0]
 8019c36:	e026      	b.n	8019c86 <USB_EPStartXfer+0xe7e>
 8019c38:	00000406 	.word	0x00000406
 8019c3c:	ffff8000 	.word	0xffff8000
 8019c40:	00000402 	.word	0x00000402
 8019c44:	683b      	ldr	r3, [r7, #0]
 8019c46:	785b      	ldrb	r3, [r3, #1]
 8019c48:	2b01      	cmp	r3, #1
 8019c4a:	d11c      	bne.n	8019c86 <USB_EPStartXfer+0xe7e>
 8019c4c:	687b      	ldr	r3, [r7, #4]
 8019c4e:	2250      	movs	r2, #80	@ 0x50
 8019c50:	5a9b      	ldrh	r3, [r3, r2]
 8019c52:	b29b      	uxth	r3, r3
 8019c54:	001a      	movs	r2, r3
 8019c56:	21a4      	movs	r1, #164	@ 0xa4
 8019c58:	187b      	adds	r3, r7, r1
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	189b      	adds	r3, r3, r2
 8019c5e:	187a      	adds	r2, r7, r1
 8019c60:	6013      	str	r3, [r2, #0]
 8019c62:	683b      	ldr	r3, [r7, #0]
 8019c64:	781b      	ldrb	r3, [r3, #0]
 8019c66:	00da      	lsls	r2, r3, #3
 8019c68:	187b      	adds	r3, r7, r1
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	18d3      	adds	r3, r2, r3
 8019c6e:	4ad2      	ldr	r2, [pc, #840]	@ (8019fb8 <USB_EPStartXfer+0x11b0>)
 8019c70:	4694      	mov	ip, r2
 8019c72:	4463      	add	r3, ip
 8019c74:	21a0      	movs	r1, #160	@ 0xa0
 8019c76:	187a      	adds	r2, r7, r1
 8019c78:	6013      	str	r3, [r2, #0]
 8019c7a:	683b      	ldr	r3, [r7, #0]
 8019c7c:	691b      	ldr	r3, [r3, #16]
 8019c7e:	b29a      	uxth	r2, r3
 8019c80:	187b      	adds	r3, r7, r1
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8019c86:	683b      	ldr	r3, [r7, #0]
 8019c88:	69db      	ldr	r3, [r3, #28]
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d100      	bne.n	8019c90 <USB_EPStartXfer+0xe88>
 8019c8e:	e1c2      	b.n	801a016 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8019c90:	687a      	ldr	r2, [r7, #4]
 8019c92:	683b      	ldr	r3, [r7, #0]
 8019c94:	781b      	ldrb	r3, [r3, #0]
 8019c96:	009b      	lsls	r3, r3, #2
 8019c98:	18d2      	adds	r2, r2, r3
 8019c9a:	2196      	movs	r1, #150	@ 0x96
 8019c9c:	187b      	adds	r3, r7, r1
 8019c9e:	8812      	ldrh	r2, [r2, #0]
 8019ca0:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8019ca2:	187b      	adds	r3, r7, r1
 8019ca4:	881a      	ldrh	r2, [r3, #0]
 8019ca6:	2380      	movs	r3, #128	@ 0x80
 8019ca8:	01db      	lsls	r3, r3, #7
 8019caa:	4013      	ands	r3, r2
 8019cac:	d004      	beq.n	8019cb8 <USB_EPStartXfer+0xeb0>
 8019cae:	187b      	adds	r3, r7, r1
 8019cb0:	881b      	ldrh	r3, [r3, #0]
 8019cb2:	2240      	movs	r2, #64	@ 0x40
 8019cb4:	4013      	ands	r3, r2
 8019cb6:	d10d      	bne.n	8019cd4 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8019cb8:	2196      	movs	r1, #150	@ 0x96
 8019cba:	187b      	adds	r3, r7, r1
 8019cbc:	881a      	ldrh	r2, [r3, #0]
 8019cbe:	2380      	movs	r3, #128	@ 0x80
 8019cc0:	01db      	lsls	r3, r3, #7
 8019cc2:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8019cc4:	d000      	beq.n	8019cc8 <USB_EPStartXfer+0xec0>
 8019cc6:	e1a6      	b.n	801a016 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8019cc8:	187b      	adds	r3, r7, r1
 8019cca:	881b      	ldrh	r3, [r3, #0]
 8019ccc:	2240      	movs	r2, #64	@ 0x40
 8019cce:	4013      	ands	r3, r2
 8019cd0:	d000      	beq.n	8019cd4 <USB_EPStartXfer+0xecc>
 8019cd2:	e1a0      	b.n	801a016 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8019cd4:	687a      	ldr	r2, [r7, #4]
 8019cd6:	683b      	ldr	r3, [r7, #0]
 8019cd8:	781b      	ldrb	r3, [r3, #0]
 8019cda:	009b      	lsls	r3, r3, #2
 8019cdc:	18d3      	adds	r3, r2, r3
 8019cde:	881b      	ldrh	r3, [r3, #0]
 8019ce0:	b29a      	uxth	r2, r3
 8019ce2:	2094      	movs	r0, #148	@ 0x94
 8019ce4:	183b      	adds	r3, r7, r0
 8019ce6:	49b5      	ldr	r1, [pc, #724]	@ (8019fbc <USB_EPStartXfer+0x11b4>)
 8019ce8:	400a      	ands	r2, r1
 8019cea:	801a      	strh	r2, [r3, #0]
 8019cec:	687a      	ldr	r2, [r7, #4]
 8019cee:	683b      	ldr	r3, [r7, #0]
 8019cf0:	781b      	ldrb	r3, [r3, #0]
 8019cf2:	009b      	lsls	r3, r3, #2
 8019cf4:	18d3      	adds	r3, r2, r3
 8019cf6:	183a      	adds	r2, r7, r0
 8019cf8:	8812      	ldrh	r2, [r2, #0]
 8019cfa:	49b1      	ldr	r1, [pc, #708]	@ (8019fc0 <USB_EPStartXfer+0x11b8>)
 8019cfc:	430a      	orrs	r2, r1
 8019cfe:	b292      	uxth	r2, r2
 8019d00:	801a      	strh	r2, [r3, #0]
 8019d02:	e188      	b.n	801a016 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8019d04:	683b      	ldr	r3, [r7, #0]
 8019d06:	78db      	ldrb	r3, [r3, #3]
 8019d08:	2b01      	cmp	r3, #1
 8019d0a:	d000      	beq.n	8019d0e <USB_EPStartXfer+0xf06>
 8019d0c:	e181      	b.n	801a012 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8019d0e:	683b      	ldr	r3, [r7, #0]
 8019d10:	699a      	ldr	r2, [r3, #24]
 8019d12:	683b      	ldr	r3, [r7, #0]
 8019d14:	691b      	ldr	r3, [r3, #16]
 8019d16:	429a      	cmp	r2, r3
 8019d18:	d90d      	bls.n	8019d36 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8019d1a:	683b      	ldr	r3, [r7, #0]
 8019d1c:	691b      	ldr	r3, [r3, #16]
 8019d1e:	1d7a      	adds	r2, r7, #5
 8019d20:	32ff      	adds	r2, #255	@ 0xff
 8019d22:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8019d24:	683b      	ldr	r3, [r7, #0]
 8019d26:	699a      	ldr	r2, [r3, #24]
 8019d28:	1d7b      	adds	r3, r7, #5
 8019d2a:	33ff      	adds	r3, #255	@ 0xff
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	1ad2      	subs	r2, r2, r3
 8019d30:	683b      	ldr	r3, [r7, #0]
 8019d32:	619a      	str	r2, [r3, #24]
 8019d34:	e007      	b.n	8019d46 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8019d36:	683b      	ldr	r3, [r7, #0]
 8019d38:	699b      	ldr	r3, [r3, #24]
 8019d3a:	1d7a      	adds	r2, r7, #5
 8019d3c:	32ff      	adds	r2, #255	@ 0xff
 8019d3e:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8019d40:	683b      	ldr	r3, [r7, #0]
 8019d42:	2200      	movs	r2, #0
 8019d44:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8019d46:	683b      	ldr	r3, [r7, #0]
 8019d48:	785b      	ldrb	r3, [r3, #1]
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d000      	beq.n	8019d50 <USB_EPStartXfer+0xf48>
 8019d4e:	e082      	b.n	8019e56 <USB_EPStartXfer+0x104e>
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	21cc      	movs	r1, #204	@ 0xcc
 8019d54:	187a      	adds	r2, r7, r1
 8019d56:	6013      	str	r3, [r2, #0]
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	2250      	movs	r2, #80	@ 0x50
 8019d5c:	5a9b      	ldrh	r3, [r3, r2]
 8019d5e:	b29b      	uxth	r3, r3
 8019d60:	001a      	movs	r2, r3
 8019d62:	187b      	adds	r3, r7, r1
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	189b      	adds	r3, r3, r2
 8019d68:	187a      	adds	r2, r7, r1
 8019d6a:	6013      	str	r3, [r2, #0]
 8019d6c:	683b      	ldr	r3, [r7, #0]
 8019d6e:	781b      	ldrb	r3, [r3, #0]
 8019d70:	00da      	lsls	r2, r3, #3
 8019d72:	187b      	adds	r3, r7, r1
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	18d3      	adds	r3, r2, r3
 8019d78:	4a92      	ldr	r2, [pc, #584]	@ (8019fc4 <USB_EPStartXfer+0x11bc>)
 8019d7a:	4694      	mov	ip, r2
 8019d7c:	4463      	add	r3, ip
 8019d7e:	21c8      	movs	r1, #200	@ 0xc8
 8019d80:	187a      	adds	r2, r7, r1
 8019d82:	6013      	str	r3, [r2, #0]
 8019d84:	187b      	adds	r3, r7, r1
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	881b      	ldrh	r3, [r3, #0]
 8019d8a:	b29b      	uxth	r3, r3
 8019d8c:	059b      	lsls	r3, r3, #22
 8019d8e:	0d9b      	lsrs	r3, r3, #22
 8019d90:	b29a      	uxth	r2, r3
 8019d92:	187b      	adds	r3, r7, r1
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	801a      	strh	r2, [r3, #0]
 8019d98:	1d7b      	adds	r3, r7, #5
 8019d9a:	33ff      	adds	r3, #255	@ 0xff
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019da0:	d925      	bls.n	8019dee <USB_EPStartXfer+0xfe6>
 8019da2:	1d7b      	adds	r3, r7, #5
 8019da4:	33ff      	adds	r3, #255	@ 0xff
 8019da6:	681b      	ldr	r3, [r3, #0]
 8019da8:	095b      	lsrs	r3, r3, #5
 8019daa:	21dc      	movs	r1, #220	@ 0xdc
 8019dac:	187a      	adds	r2, r7, r1
 8019dae:	6013      	str	r3, [r2, #0]
 8019db0:	1d7b      	adds	r3, r7, #5
 8019db2:	33ff      	adds	r3, #255	@ 0xff
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	221f      	movs	r2, #31
 8019db8:	4013      	ands	r3, r2
 8019dba:	d104      	bne.n	8019dc6 <USB_EPStartXfer+0xfbe>
 8019dbc:	187b      	adds	r3, r7, r1
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	3b01      	subs	r3, #1
 8019dc2:	187a      	adds	r2, r7, r1
 8019dc4:	6013      	str	r3, [r2, #0]
 8019dc6:	21c8      	movs	r1, #200	@ 0xc8
 8019dc8:	187b      	adds	r3, r7, r1
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	881b      	ldrh	r3, [r3, #0]
 8019dce:	b29a      	uxth	r2, r3
 8019dd0:	23dc      	movs	r3, #220	@ 0xdc
 8019dd2:	18fb      	adds	r3, r7, r3
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	b29b      	uxth	r3, r3
 8019dd8:	029b      	lsls	r3, r3, #10
 8019dda:	b29b      	uxth	r3, r3
 8019ddc:	4313      	orrs	r3, r2
 8019dde:	b29b      	uxth	r3, r3
 8019de0:	4a79      	ldr	r2, [pc, #484]	@ (8019fc8 <USB_EPStartXfer+0x11c0>)
 8019de2:	4313      	orrs	r3, r2
 8019de4:	b29a      	uxth	r2, r3
 8019de6:	187b      	adds	r3, r7, r1
 8019de8:	681b      	ldr	r3, [r3, #0]
 8019dea:	801a      	strh	r2, [r3, #0]
 8019dec:	e058      	b.n	8019ea0 <USB_EPStartXfer+0x1098>
 8019dee:	1d7b      	adds	r3, r7, #5
 8019df0:	33ff      	adds	r3, #255	@ 0xff
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d10b      	bne.n	8019e10 <USB_EPStartXfer+0x1008>
 8019df8:	21c8      	movs	r1, #200	@ 0xc8
 8019dfa:	187b      	adds	r3, r7, r1
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	881b      	ldrh	r3, [r3, #0]
 8019e00:	b29b      	uxth	r3, r3
 8019e02:	4a71      	ldr	r2, [pc, #452]	@ (8019fc8 <USB_EPStartXfer+0x11c0>)
 8019e04:	4313      	orrs	r3, r2
 8019e06:	b29a      	uxth	r2, r3
 8019e08:	187b      	adds	r3, r7, r1
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	801a      	strh	r2, [r3, #0]
 8019e0e:	e047      	b.n	8019ea0 <USB_EPStartXfer+0x1098>
 8019e10:	1d7b      	adds	r3, r7, #5
 8019e12:	33ff      	adds	r3, #255	@ 0xff
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	085b      	lsrs	r3, r3, #1
 8019e18:	21dc      	movs	r1, #220	@ 0xdc
 8019e1a:	187a      	adds	r2, r7, r1
 8019e1c:	6013      	str	r3, [r2, #0]
 8019e1e:	1d7b      	adds	r3, r7, #5
 8019e20:	33ff      	adds	r3, #255	@ 0xff
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	2201      	movs	r2, #1
 8019e26:	4013      	ands	r3, r2
 8019e28:	d004      	beq.n	8019e34 <USB_EPStartXfer+0x102c>
 8019e2a:	187b      	adds	r3, r7, r1
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	3301      	adds	r3, #1
 8019e30:	187a      	adds	r2, r7, r1
 8019e32:	6013      	str	r3, [r2, #0]
 8019e34:	21c8      	movs	r1, #200	@ 0xc8
 8019e36:	187b      	adds	r3, r7, r1
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	881b      	ldrh	r3, [r3, #0]
 8019e3c:	b29a      	uxth	r2, r3
 8019e3e:	23dc      	movs	r3, #220	@ 0xdc
 8019e40:	18fb      	adds	r3, r7, r3
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	b29b      	uxth	r3, r3
 8019e46:	029b      	lsls	r3, r3, #10
 8019e48:	b29b      	uxth	r3, r3
 8019e4a:	4313      	orrs	r3, r2
 8019e4c:	b29a      	uxth	r2, r3
 8019e4e:	187b      	adds	r3, r7, r1
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	801a      	strh	r2, [r3, #0]
 8019e54:	e024      	b.n	8019ea0 <USB_EPStartXfer+0x1098>
 8019e56:	683b      	ldr	r3, [r7, #0]
 8019e58:	785b      	ldrb	r3, [r3, #1]
 8019e5a:	2b01      	cmp	r3, #1
 8019e5c:	d120      	bne.n	8019ea0 <USB_EPStartXfer+0x1098>
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	21d4      	movs	r1, #212	@ 0xd4
 8019e62:	187a      	adds	r2, r7, r1
 8019e64:	6013      	str	r3, [r2, #0]
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	2250      	movs	r2, #80	@ 0x50
 8019e6a:	5a9b      	ldrh	r3, [r3, r2]
 8019e6c:	b29b      	uxth	r3, r3
 8019e6e:	001a      	movs	r2, r3
 8019e70:	187b      	adds	r3, r7, r1
 8019e72:	681b      	ldr	r3, [r3, #0]
 8019e74:	189b      	adds	r3, r3, r2
 8019e76:	187a      	adds	r2, r7, r1
 8019e78:	6013      	str	r3, [r2, #0]
 8019e7a:	683b      	ldr	r3, [r7, #0]
 8019e7c:	781b      	ldrb	r3, [r3, #0]
 8019e7e:	00da      	lsls	r2, r3, #3
 8019e80:	187b      	adds	r3, r7, r1
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	18d3      	adds	r3, r2, r3
 8019e86:	4a4f      	ldr	r2, [pc, #316]	@ (8019fc4 <USB_EPStartXfer+0x11bc>)
 8019e88:	4694      	mov	ip, r2
 8019e8a:	4463      	add	r3, ip
 8019e8c:	21d0      	movs	r1, #208	@ 0xd0
 8019e8e:	187a      	adds	r2, r7, r1
 8019e90:	6013      	str	r3, [r2, #0]
 8019e92:	1d7b      	adds	r3, r7, #5
 8019e94:	33ff      	adds	r3, #255	@ 0xff
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	b29a      	uxth	r2, r3
 8019e9a:	187b      	adds	r3, r7, r1
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	801a      	strh	r2, [r3, #0]
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	22c4      	movs	r2, #196	@ 0xc4
 8019ea4:	18ba      	adds	r2, r7, r2
 8019ea6:	6013      	str	r3, [r2, #0]
 8019ea8:	683b      	ldr	r3, [r7, #0]
 8019eaa:	785b      	ldrb	r3, [r3, #1]
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d000      	beq.n	8019eb2 <USB_EPStartXfer+0x10aa>
 8019eb0:	e08c      	b.n	8019fcc <USB_EPStartXfer+0x11c4>
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	21bc      	movs	r1, #188	@ 0xbc
 8019eb6:	187a      	adds	r2, r7, r1
 8019eb8:	6013      	str	r3, [r2, #0]
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	2250      	movs	r2, #80	@ 0x50
 8019ebe:	5a9b      	ldrh	r3, [r3, r2]
 8019ec0:	b29b      	uxth	r3, r3
 8019ec2:	001a      	movs	r2, r3
 8019ec4:	187b      	adds	r3, r7, r1
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	189b      	adds	r3, r3, r2
 8019eca:	187a      	adds	r2, r7, r1
 8019ecc:	6013      	str	r3, [r2, #0]
 8019ece:	683b      	ldr	r3, [r7, #0]
 8019ed0:	781b      	ldrb	r3, [r3, #0]
 8019ed2:	00da      	lsls	r2, r3, #3
 8019ed4:	187b      	adds	r3, r7, r1
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	18d3      	adds	r3, r2, r3
 8019eda:	4a37      	ldr	r2, [pc, #220]	@ (8019fb8 <USB_EPStartXfer+0x11b0>)
 8019edc:	4694      	mov	ip, r2
 8019ede:	4463      	add	r3, ip
 8019ee0:	21b8      	movs	r1, #184	@ 0xb8
 8019ee2:	187a      	adds	r2, r7, r1
 8019ee4:	6013      	str	r3, [r2, #0]
 8019ee6:	187b      	adds	r3, r7, r1
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	881b      	ldrh	r3, [r3, #0]
 8019eec:	b29b      	uxth	r3, r3
 8019eee:	059b      	lsls	r3, r3, #22
 8019ef0:	0d9b      	lsrs	r3, r3, #22
 8019ef2:	b29a      	uxth	r2, r3
 8019ef4:	187b      	adds	r3, r7, r1
 8019ef6:	681b      	ldr	r3, [r3, #0]
 8019ef8:	801a      	strh	r2, [r3, #0]
 8019efa:	1d7b      	adds	r3, r7, #5
 8019efc:	33ff      	adds	r3, #255	@ 0xff
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	2b3e      	cmp	r3, #62	@ 0x3e
 8019f02:	d925      	bls.n	8019f50 <USB_EPStartXfer+0x1148>
 8019f04:	1d7b      	adds	r3, r7, #5
 8019f06:	33ff      	adds	r3, #255	@ 0xff
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	095b      	lsrs	r3, r3, #5
 8019f0c:	21d8      	movs	r1, #216	@ 0xd8
 8019f0e:	187a      	adds	r2, r7, r1
 8019f10:	6013      	str	r3, [r2, #0]
 8019f12:	1d7b      	adds	r3, r7, #5
 8019f14:	33ff      	adds	r3, #255	@ 0xff
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	221f      	movs	r2, #31
 8019f1a:	4013      	ands	r3, r2
 8019f1c:	d104      	bne.n	8019f28 <USB_EPStartXfer+0x1120>
 8019f1e:	187b      	adds	r3, r7, r1
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	3b01      	subs	r3, #1
 8019f24:	187a      	adds	r2, r7, r1
 8019f26:	6013      	str	r3, [r2, #0]
 8019f28:	21b8      	movs	r1, #184	@ 0xb8
 8019f2a:	187b      	adds	r3, r7, r1
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	881b      	ldrh	r3, [r3, #0]
 8019f30:	b29a      	uxth	r2, r3
 8019f32:	23d8      	movs	r3, #216	@ 0xd8
 8019f34:	18fb      	adds	r3, r7, r3
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	b29b      	uxth	r3, r3
 8019f3a:	029b      	lsls	r3, r3, #10
 8019f3c:	b29b      	uxth	r3, r3
 8019f3e:	4313      	orrs	r3, r2
 8019f40:	b29b      	uxth	r3, r3
 8019f42:	4a21      	ldr	r2, [pc, #132]	@ (8019fc8 <USB_EPStartXfer+0x11c0>)
 8019f44:	4313      	orrs	r3, r2
 8019f46:	b29a      	uxth	r2, r3
 8019f48:	187b      	adds	r3, r7, r1
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	801a      	strh	r2, [r3, #0]
 8019f4e:	e062      	b.n	801a016 <USB_EPStartXfer+0x120e>
 8019f50:	1d7b      	adds	r3, r7, #5
 8019f52:	33ff      	adds	r3, #255	@ 0xff
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d10b      	bne.n	8019f72 <USB_EPStartXfer+0x116a>
 8019f5a:	21b8      	movs	r1, #184	@ 0xb8
 8019f5c:	187b      	adds	r3, r7, r1
 8019f5e:	681b      	ldr	r3, [r3, #0]
 8019f60:	881b      	ldrh	r3, [r3, #0]
 8019f62:	b29b      	uxth	r3, r3
 8019f64:	4a18      	ldr	r2, [pc, #96]	@ (8019fc8 <USB_EPStartXfer+0x11c0>)
 8019f66:	4313      	orrs	r3, r2
 8019f68:	b29a      	uxth	r2, r3
 8019f6a:	187b      	adds	r3, r7, r1
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	801a      	strh	r2, [r3, #0]
 8019f70:	e051      	b.n	801a016 <USB_EPStartXfer+0x120e>
 8019f72:	1d7b      	adds	r3, r7, #5
 8019f74:	33ff      	adds	r3, #255	@ 0xff
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	085b      	lsrs	r3, r3, #1
 8019f7a:	21d8      	movs	r1, #216	@ 0xd8
 8019f7c:	187a      	adds	r2, r7, r1
 8019f7e:	6013      	str	r3, [r2, #0]
 8019f80:	1d7b      	adds	r3, r7, #5
 8019f82:	33ff      	adds	r3, #255	@ 0xff
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	2201      	movs	r2, #1
 8019f88:	4013      	ands	r3, r2
 8019f8a:	d004      	beq.n	8019f96 <USB_EPStartXfer+0x118e>
 8019f8c:	187b      	adds	r3, r7, r1
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	3301      	adds	r3, #1
 8019f92:	187a      	adds	r2, r7, r1
 8019f94:	6013      	str	r3, [r2, #0]
 8019f96:	21b8      	movs	r1, #184	@ 0xb8
 8019f98:	187b      	adds	r3, r7, r1
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	881b      	ldrh	r3, [r3, #0]
 8019f9e:	b29a      	uxth	r2, r3
 8019fa0:	23d8      	movs	r3, #216	@ 0xd8
 8019fa2:	18fb      	adds	r3, r7, r3
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	b29b      	uxth	r3, r3
 8019fa8:	029b      	lsls	r3, r3, #10
 8019faa:	b29b      	uxth	r3, r3
 8019fac:	4313      	orrs	r3, r2
 8019fae:	b29a      	uxth	r2, r3
 8019fb0:	187b      	adds	r3, r7, r1
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	801a      	strh	r2, [r3, #0]
 8019fb6:	e02e      	b.n	801a016 <USB_EPStartXfer+0x120e>
 8019fb8:	00000406 	.word	0x00000406
 8019fbc:	ffff8f8f 	.word	0xffff8f8f
 8019fc0:	ffff80c0 	.word	0xffff80c0
 8019fc4:	00000402 	.word	0x00000402
 8019fc8:	ffff8000 	.word	0xffff8000
 8019fcc:	683b      	ldr	r3, [r7, #0]
 8019fce:	785b      	ldrb	r3, [r3, #1]
 8019fd0:	2b01      	cmp	r3, #1
 8019fd2:	d120      	bne.n	801a016 <USB_EPStartXfer+0x120e>
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	2250      	movs	r2, #80	@ 0x50
 8019fd8:	5a9b      	ldrh	r3, [r3, r2]
 8019fda:	b29b      	uxth	r3, r3
 8019fdc:	001a      	movs	r2, r3
 8019fde:	21c4      	movs	r1, #196	@ 0xc4
 8019fe0:	187b      	adds	r3, r7, r1
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	189b      	adds	r3, r3, r2
 8019fe6:	187a      	adds	r2, r7, r1
 8019fe8:	6013      	str	r3, [r2, #0]
 8019fea:	683b      	ldr	r3, [r7, #0]
 8019fec:	781b      	ldrb	r3, [r3, #0]
 8019fee:	00da      	lsls	r2, r3, #3
 8019ff0:	187b      	adds	r3, r7, r1
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	18d3      	adds	r3, r2, r3
 8019ff6:	4a1d      	ldr	r2, [pc, #116]	@ (801a06c <USB_EPStartXfer+0x1264>)
 8019ff8:	4694      	mov	ip, r2
 8019ffa:	4463      	add	r3, ip
 8019ffc:	21c0      	movs	r1, #192	@ 0xc0
 8019ffe:	187a      	adds	r2, r7, r1
 801a000:	6013      	str	r3, [r2, #0]
 801a002:	1d7b      	adds	r3, r7, #5
 801a004:	33ff      	adds	r3, #255	@ 0xff
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	b29a      	uxth	r2, r3
 801a00a:	187b      	adds	r3, r7, r1
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	801a      	strh	r2, [r3, #0]
 801a010:	e001      	b.n	801a016 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801a012:	2301      	movs	r3, #1
 801a014:	e025      	b.n	801a062 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a016:	687a      	ldr	r2, [r7, #4]
 801a018:	683b      	ldr	r3, [r7, #0]
 801a01a:	781b      	ldrb	r3, [r3, #0]
 801a01c:	009b      	lsls	r3, r3, #2
 801a01e:	18d3      	adds	r3, r2, r3
 801a020:	881b      	ldrh	r3, [r3, #0]
 801a022:	b29a      	uxth	r2, r3
 801a024:	208a      	movs	r0, #138	@ 0x8a
 801a026:	183b      	adds	r3, r7, r0
 801a028:	4911      	ldr	r1, [pc, #68]	@ (801a070 <USB_EPStartXfer+0x1268>)
 801a02a:	400a      	ands	r2, r1
 801a02c:	801a      	strh	r2, [r3, #0]
 801a02e:	183b      	adds	r3, r7, r0
 801a030:	183a      	adds	r2, r7, r0
 801a032:	8812      	ldrh	r2, [r2, #0]
 801a034:	2180      	movs	r1, #128	@ 0x80
 801a036:	0149      	lsls	r1, r1, #5
 801a038:	404a      	eors	r2, r1
 801a03a:	801a      	strh	r2, [r3, #0]
 801a03c:	183b      	adds	r3, r7, r0
 801a03e:	183a      	adds	r2, r7, r0
 801a040:	8812      	ldrh	r2, [r2, #0]
 801a042:	2180      	movs	r1, #128	@ 0x80
 801a044:	0189      	lsls	r1, r1, #6
 801a046:	404a      	eors	r2, r1
 801a048:	801a      	strh	r2, [r3, #0]
 801a04a:	687a      	ldr	r2, [r7, #4]
 801a04c:	683b      	ldr	r3, [r7, #0]
 801a04e:	781b      	ldrb	r3, [r3, #0]
 801a050:	009b      	lsls	r3, r3, #2
 801a052:	18d3      	adds	r3, r2, r3
 801a054:	183a      	adds	r2, r7, r0
 801a056:	8812      	ldrh	r2, [r2, #0]
 801a058:	4906      	ldr	r1, [pc, #24]	@ (801a074 <USB_EPStartXfer+0x126c>)
 801a05a:	430a      	orrs	r2, r1
 801a05c:	b292      	uxth	r2, r2
 801a05e:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801a060:	2300      	movs	r3, #0
}
 801a062:	0018      	movs	r0, r3
 801a064:	46bd      	mov	sp, r7
 801a066:	b043      	add	sp, #268	@ 0x10c
 801a068:	bd90      	pop	{r4, r7, pc}
 801a06a:	46c0      	nop			@ (mov r8, r8)
 801a06c:	00000406 	.word	0x00000406
 801a070:	ffffbf8f 	.word	0xffffbf8f
 801a074:	ffff8080 	.word	0xffff8080

0801a078 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a078:	b580      	push	{r7, lr}
 801a07a:	b084      	sub	sp, #16
 801a07c:	af00      	add	r7, sp, #0
 801a07e:	6078      	str	r0, [r7, #4]
 801a080:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801a082:	683b      	ldr	r3, [r7, #0]
 801a084:	785b      	ldrb	r3, [r3, #1]
 801a086:	2b00      	cmp	r3, #0
 801a088:	d01d      	beq.n	801a0c6 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801a08a:	687a      	ldr	r2, [r7, #4]
 801a08c:	683b      	ldr	r3, [r7, #0]
 801a08e:	781b      	ldrb	r3, [r3, #0]
 801a090:	009b      	lsls	r3, r3, #2
 801a092:	18d3      	adds	r3, r2, r3
 801a094:	881b      	ldrh	r3, [r3, #0]
 801a096:	b29a      	uxth	r2, r3
 801a098:	200c      	movs	r0, #12
 801a09a:	183b      	adds	r3, r7, r0
 801a09c:	491b      	ldr	r1, [pc, #108]	@ (801a10c <USB_EPSetStall+0x94>)
 801a09e:	400a      	ands	r2, r1
 801a0a0:	801a      	strh	r2, [r3, #0]
 801a0a2:	183b      	adds	r3, r7, r0
 801a0a4:	183a      	adds	r2, r7, r0
 801a0a6:	8812      	ldrh	r2, [r2, #0]
 801a0a8:	2110      	movs	r1, #16
 801a0aa:	404a      	eors	r2, r1
 801a0ac:	801a      	strh	r2, [r3, #0]
 801a0ae:	687a      	ldr	r2, [r7, #4]
 801a0b0:	683b      	ldr	r3, [r7, #0]
 801a0b2:	781b      	ldrb	r3, [r3, #0]
 801a0b4:	009b      	lsls	r3, r3, #2
 801a0b6:	18d3      	adds	r3, r2, r3
 801a0b8:	183a      	adds	r2, r7, r0
 801a0ba:	8812      	ldrh	r2, [r2, #0]
 801a0bc:	4914      	ldr	r1, [pc, #80]	@ (801a110 <USB_EPSetStall+0x98>)
 801a0be:	430a      	orrs	r2, r1
 801a0c0:	b292      	uxth	r2, r2
 801a0c2:	801a      	strh	r2, [r3, #0]
 801a0c4:	e01d      	b.n	801a102 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801a0c6:	687a      	ldr	r2, [r7, #4]
 801a0c8:	683b      	ldr	r3, [r7, #0]
 801a0ca:	781b      	ldrb	r3, [r3, #0]
 801a0cc:	009b      	lsls	r3, r3, #2
 801a0ce:	18d3      	adds	r3, r2, r3
 801a0d0:	881b      	ldrh	r3, [r3, #0]
 801a0d2:	b29a      	uxth	r2, r3
 801a0d4:	200e      	movs	r0, #14
 801a0d6:	183b      	adds	r3, r7, r0
 801a0d8:	490e      	ldr	r1, [pc, #56]	@ (801a114 <USB_EPSetStall+0x9c>)
 801a0da:	400a      	ands	r2, r1
 801a0dc:	801a      	strh	r2, [r3, #0]
 801a0de:	183b      	adds	r3, r7, r0
 801a0e0:	183a      	adds	r2, r7, r0
 801a0e2:	8812      	ldrh	r2, [r2, #0]
 801a0e4:	2180      	movs	r1, #128	@ 0x80
 801a0e6:	0149      	lsls	r1, r1, #5
 801a0e8:	404a      	eors	r2, r1
 801a0ea:	801a      	strh	r2, [r3, #0]
 801a0ec:	687a      	ldr	r2, [r7, #4]
 801a0ee:	683b      	ldr	r3, [r7, #0]
 801a0f0:	781b      	ldrb	r3, [r3, #0]
 801a0f2:	009b      	lsls	r3, r3, #2
 801a0f4:	18d3      	adds	r3, r2, r3
 801a0f6:	183a      	adds	r2, r7, r0
 801a0f8:	8812      	ldrh	r2, [r2, #0]
 801a0fa:	4905      	ldr	r1, [pc, #20]	@ (801a110 <USB_EPSetStall+0x98>)
 801a0fc:	430a      	orrs	r2, r1
 801a0fe:	b292      	uxth	r2, r2
 801a100:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801a102:	2300      	movs	r3, #0
}
 801a104:	0018      	movs	r0, r3
 801a106:	46bd      	mov	sp, r7
 801a108:	b004      	add	sp, #16
 801a10a:	bd80      	pop	{r7, pc}
 801a10c:	ffff8fbf 	.word	0xffff8fbf
 801a110:	ffff8080 	.word	0xffff8080
 801a114:	ffffbf8f 	.word	0xffffbf8f

0801a118 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801a118:	b580      	push	{r7, lr}
 801a11a:	b086      	sub	sp, #24
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	6078      	str	r0, [r7, #4]
 801a120:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801a122:	683b      	ldr	r3, [r7, #0]
 801a124:	7b1b      	ldrb	r3, [r3, #12]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d000      	beq.n	801a12c <USB_EPClearStall+0x14>
 801a12a:	e095      	b.n	801a258 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801a12c:	683b      	ldr	r3, [r7, #0]
 801a12e:	785b      	ldrb	r3, [r3, #1]
 801a130:	2b00      	cmp	r3, #0
 801a132:	d046      	beq.n	801a1c2 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801a134:	687a      	ldr	r2, [r7, #4]
 801a136:	683b      	ldr	r3, [r7, #0]
 801a138:	781b      	ldrb	r3, [r3, #0]
 801a13a:	009b      	lsls	r3, r3, #2
 801a13c:	18d2      	adds	r2, r2, r3
 801a13e:	2110      	movs	r1, #16
 801a140:	187b      	adds	r3, r7, r1
 801a142:	8812      	ldrh	r2, [r2, #0]
 801a144:	801a      	strh	r2, [r3, #0]
 801a146:	187b      	adds	r3, r7, r1
 801a148:	881b      	ldrh	r3, [r3, #0]
 801a14a:	2240      	movs	r2, #64	@ 0x40
 801a14c:	4013      	ands	r3, r2
 801a14e:	d016      	beq.n	801a17e <USB_EPClearStall+0x66>
 801a150:	687a      	ldr	r2, [r7, #4]
 801a152:	683b      	ldr	r3, [r7, #0]
 801a154:	781b      	ldrb	r3, [r3, #0]
 801a156:	009b      	lsls	r3, r3, #2
 801a158:	18d3      	adds	r3, r2, r3
 801a15a:	881b      	ldrh	r3, [r3, #0]
 801a15c:	b29a      	uxth	r2, r3
 801a15e:	200e      	movs	r0, #14
 801a160:	183b      	adds	r3, r7, r0
 801a162:	4940      	ldr	r1, [pc, #256]	@ (801a264 <USB_EPClearStall+0x14c>)
 801a164:	400a      	ands	r2, r1
 801a166:	801a      	strh	r2, [r3, #0]
 801a168:	687a      	ldr	r2, [r7, #4]
 801a16a:	683b      	ldr	r3, [r7, #0]
 801a16c:	781b      	ldrb	r3, [r3, #0]
 801a16e:	009b      	lsls	r3, r3, #2
 801a170:	18d3      	adds	r3, r2, r3
 801a172:	183a      	adds	r2, r7, r0
 801a174:	8812      	ldrh	r2, [r2, #0]
 801a176:	493c      	ldr	r1, [pc, #240]	@ (801a268 <USB_EPClearStall+0x150>)
 801a178:	430a      	orrs	r2, r1
 801a17a:	b292      	uxth	r2, r2
 801a17c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801a17e:	683b      	ldr	r3, [r7, #0]
 801a180:	78db      	ldrb	r3, [r3, #3]
 801a182:	2b01      	cmp	r3, #1
 801a184:	d068      	beq.n	801a258 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801a186:	687a      	ldr	r2, [r7, #4]
 801a188:	683b      	ldr	r3, [r7, #0]
 801a18a:	781b      	ldrb	r3, [r3, #0]
 801a18c:	009b      	lsls	r3, r3, #2
 801a18e:	18d3      	adds	r3, r2, r3
 801a190:	881b      	ldrh	r3, [r3, #0]
 801a192:	b29a      	uxth	r2, r3
 801a194:	200c      	movs	r0, #12
 801a196:	183b      	adds	r3, r7, r0
 801a198:	4934      	ldr	r1, [pc, #208]	@ (801a26c <USB_EPClearStall+0x154>)
 801a19a:	400a      	ands	r2, r1
 801a19c:	801a      	strh	r2, [r3, #0]
 801a19e:	183b      	adds	r3, r7, r0
 801a1a0:	183a      	adds	r2, r7, r0
 801a1a2:	8812      	ldrh	r2, [r2, #0]
 801a1a4:	2120      	movs	r1, #32
 801a1a6:	404a      	eors	r2, r1
 801a1a8:	801a      	strh	r2, [r3, #0]
 801a1aa:	687a      	ldr	r2, [r7, #4]
 801a1ac:	683b      	ldr	r3, [r7, #0]
 801a1ae:	781b      	ldrb	r3, [r3, #0]
 801a1b0:	009b      	lsls	r3, r3, #2
 801a1b2:	18d3      	adds	r3, r2, r3
 801a1b4:	183a      	adds	r2, r7, r0
 801a1b6:	8812      	ldrh	r2, [r2, #0]
 801a1b8:	492d      	ldr	r1, [pc, #180]	@ (801a270 <USB_EPClearStall+0x158>)
 801a1ba:	430a      	orrs	r2, r1
 801a1bc:	b292      	uxth	r2, r2
 801a1be:	801a      	strh	r2, [r3, #0]
 801a1c0:	e04a      	b.n	801a258 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801a1c2:	687a      	ldr	r2, [r7, #4]
 801a1c4:	683b      	ldr	r3, [r7, #0]
 801a1c6:	781b      	ldrb	r3, [r3, #0]
 801a1c8:	009b      	lsls	r3, r3, #2
 801a1ca:	18d2      	adds	r2, r2, r3
 801a1cc:	2116      	movs	r1, #22
 801a1ce:	187b      	adds	r3, r7, r1
 801a1d0:	8812      	ldrh	r2, [r2, #0]
 801a1d2:	801a      	strh	r2, [r3, #0]
 801a1d4:	187b      	adds	r3, r7, r1
 801a1d6:	881a      	ldrh	r2, [r3, #0]
 801a1d8:	2380      	movs	r3, #128	@ 0x80
 801a1da:	01db      	lsls	r3, r3, #7
 801a1dc:	4013      	ands	r3, r2
 801a1de:	d016      	beq.n	801a20e <USB_EPClearStall+0xf6>
 801a1e0:	687a      	ldr	r2, [r7, #4]
 801a1e2:	683b      	ldr	r3, [r7, #0]
 801a1e4:	781b      	ldrb	r3, [r3, #0]
 801a1e6:	009b      	lsls	r3, r3, #2
 801a1e8:	18d3      	adds	r3, r2, r3
 801a1ea:	881b      	ldrh	r3, [r3, #0]
 801a1ec:	b29a      	uxth	r2, r3
 801a1ee:	2014      	movs	r0, #20
 801a1f0:	183b      	adds	r3, r7, r0
 801a1f2:	491c      	ldr	r1, [pc, #112]	@ (801a264 <USB_EPClearStall+0x14c>)
 801a1f4:	400a      	ands	r2, r1
 801a1f6:	801a      	strh	r2, [r3, #0]
 801a1f8:	687a      	ldr	r2, [r7, #4]
 801a1fa:	683b      	ldr	r3, [r7, #0]
 801a1fc:	781b      	ldrb	r3, [r3, #0]
 801a1fe:	009b      	lsls	r3, r3, #2
 801a200:	18d3      	adds	r3, r2, r3
 801a202:	183a      	adds	r2, r7, r0
 801a204:	8812      	ldrh	r2, [r2, #0]
 801a206:	491b      	ldr	r1, [pc, #108]	@ (801a274 <USB_EPClearStall+0x15c>)
 801a208:	430a      	orrs	r2, r1
 801a20a:	b292      	uxth	r2, r2
 801a20c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801a20e:	687a      	ldr	r2, [r7, #4]
 801a210:	683b      	ldr	r3, [r7, #0]
 801a212:	781b      	ldrb	r3, [r3, #0]
 801a214:	009b      	lsls	r3, r3, #2
 801a216:	18d3      	adds	r3, r2, r3
 801a218:	881b      	ldrh	r3, [r3, #0]
 801a21a:	b29a      	uxth	r2, r3
 801a21c:	2012      	movs	r0, #18
 801a21e:	183b      	adds	r3, r7, r0
 801a220:	4915      	ldr	r1, [pc, #84]	@ (801a278 <USB_EPClearStall+0x160>)
 801a222:	400a      	ands	r2, r1
 801a224:	801a      	strh	r2, [r3, #0]
 801a226:	183b      	adds	r3, r7, r0
 801a228:	183a      	adds	r2, r7, r0
 801a22a:	8812      	ldrh	r2, [r2, #0]
 801a22c:	2180      	movs	r1, #128	@ 0x80
 801a22e:	0149      	lsls	r1, r1, #5
 801a230:	404a      	eors	r2, r1
 801a232:	801a      	strh	r2, [r3, #0]
 801a234:	183b      	adds	r3, r7, r0
 801a236:	183a      	adds	r2, r7, r0
 801a238:	8812      	ldrh	r2, [r2, #0]
 801a23a:	2180      	movs	r1, #128	@ 0x80
 801a23c:	0189      	lsls	r1, r1, #6
 801a23e:	404a      	eors	r2, r1
 801a240:	801a      	strh	r2, [r3, #0]
 801a242:	687a      	ldr	r2, [r7, #4]
 801a244:	683b      	ldr	r3, [r7, #0]
 801a246:	781b      	ldrb	r3, [r3, #0]
 801a248:	009b      	lsls	r3, r3, #2
 801a24a:	18d3      	adds	r3, r2, r3
 801a24c:	183a      	adds	r2, r7, r0
 801a24e:	8812      	ldrh	r2, [r2, #0]
 801a250:	4907      	ldr	r1, [pc, #28]	@ (801a270 <USB_EPClearStall+0x158>)
 801a252:	430a      	orrs	r2, r1
 801a254:	b292      	uxth	r2, r2
 801a256:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801a258:	2300      	movs	r3, #0
}
 801a25a:	0018      	movs	r0, r3
 801a25c:	46bd      	mov	sp, r7
 801a25e:	b006      	add	sp, #24
 801a260:	bd80      	pop	{r7, pc}
 801a262:	46c0      	nop			@ (mov r8, r8)
 801a264:	ffff8f8f 	.word	0xffff8f8f
 801a268:	ffff80c0 	.word	0xffff80c0
 801a26c:	ffff8fbf 	.word	0xffff8fbf
 801a270:	ffff8080 	.word	0xffff8080
 801a274:	ffffc080 	.word	0xffffc080
 801a278:	ffffbf8f 	.word	0xffffbf8f

0801a27c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801a27c:	b580      	push	{r7, lr}
 801a27e:	b082      	sub	sp, #8
 801a280:	af00      	add	r7, sp, #0
 801a282:	6078      	str	r0, [r7, #4]
 801a284:	000a      	movs	r2, r1
 801a286:	1cfb      	adds	r3, r7, #3
 801a288:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801a28a:	1cfb      	adds	r3, r7, #3
 801a28c:	781b      	ldrb	r3, [r3, #0]
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d103      	bne.n	801a29a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	224c      	movs	r2, #76	@ 0x4c
 801a296:	2180      	movs	r1, #128	@ 0x80
 801a298:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801a29a:	2300      	movs	r3, #0
}
 801a29c:	0018      	movs	r0, r3
 801a29e:	46bd      	mov	sp, r7
 801a2a0:	b002      	add	sp, #8
 801a2a2:	bd80      	pop	{r7, pc}

0801a2a4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801a2a4:	b580      	push	{r7, lr}
 801a2a6:	b082      	sub	sp, #8
 801a2a8:	af00      	add	r7, sp, #0
 801a2aa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	2258      	movs	r2, #88	@ 0x58
 801a2b0:	5a9b      	ldrh	r3, [r3, r2]
 801a2b2:	b29b      	uxth	r3, r3
 801a2b4:	4a05      	ldr	r2, [pc, #20]	@ (801a2cc <USB_DevConnect+0x28>)
 801a2b6:	4313      	orrs	r3, r2
 801a2b8:	b299      	uxth	r1, r3
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	2258      	movs	r2, #88	@ 0x58
 801a2be:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801a2c0:	2300      	movs	r3, #0
}
 801a2c2:	0018      	movs	r0, r3
 801a2c4:	46bd      	mov	sp, r7
 801a2c6:	b002      	add	sp, #8
 801a2c8:	bd80      	pop	{r7, pc}
 801a2ca:	46c0      	nop			@ (mov r8, r8)
 801a2cc:	ffff8000 	.word	0xffff8000

0801a2d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	b084      	sub	sp, #16
 801a2d4:	af00      	add	r7, sp, #0
 801a2d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	2244      	movs	r2, #68	@ 0x44
 801a2dc:	5a9b      	ldrh	r3, [r3, r2]
 801a2de:	b29b      	uxth	r3, r3
 801a2e0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801a2e2:	68fb      	ldr	r3, [r7, #12]
}
 801a2e4:	0018      	movs	r0, r3
 801a2e6:	46bd      	mov	sp, r7
 801a2e8:	b004      	add	sp, #16
 801a2ea:	bd80      	pop	{r7, pc}

0801a2ec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801a2ec:	b580      	push	{r7, lr}
 801a2ee:	b08a      	sub	sp, #40	@ 0x28
 801a2f0:	af00      	add	r7, sp, #0
 801a2f2:	60f8      	str	r0, [r7, #12]
 801a2f4:	60b9      	str	r1, [r7, #8]
 801a2f6:	0019      	movs	r1, r3
 801a2f8:	1dbb      	adds	r3, r7, #6
 801a2fa:	801a      	strh	r2, [r3, #0]
 801a2fc:	1d3b      	adds	r3, r7, #4
 801a2fe:	1c0a      	adds	r2, r1, #0
 801a300:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801a302:	1d3b      	adds	r3, r7, #4
 801a304:	881b      	ldrh	r3, [r3, #0]
 801a306:	3301      	adds	r3, #1
 801a308:	085b      	lsrs	r3, r3, #1
 801a30a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801a310:	68bb      	ldr	r3, [r7, #8]
 801a312:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801a314:	1dbb      	adds	r3, r7, #6
 801a316:	881a      	ldrh	r2, [r3, #0]
 801a318:	697b      	ldr	r3, [r7, #20]
 801a31a:	18d3      	adds	r3, r2, r3
 801a31c:	2280      	movs	r2, #128	@ 0x80
 801a31e:	00d2      	lsls	r2, r2, #3
 801a320:	4694      	mov	ip, r2
 801a322:	4463      	add	r3, ip
 801a324:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801a326:	69bb      	ldr	r3, [r7, #24]
 801a328:	627b      	str	r3, [r7, #36]	@ 0x24
 801a32a:	e020      	b.n	801a36e <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801a32c:	69fb      	ldr	r3, [r7, #28]
 801a32e:	781a      	ldrb	r2, [r3, #0]
 801a330:	2112      	movs	r1, #18
 801a332:	187b      	adds	r3, r7, r1
 801a334:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801a336:	69fb      	ldr	r3, [r7, #28]
 801a338:	3301      	adds	r3, #1
 801a33a:	781b      	ldrb	r3, [r3, #0]
 801a33c:	021b      	lsls	r3, r3, #8
 801a33e:	b21a      	sxth	r2, r3
 801a340:	187b      	adds	r3, r7, r1
 801a342:	2000      	movs	r0, #0
 801a344:	5e1b      	ldrsh	r3, [r3, r0]
 801a346:	4313      	orrs	r3, r2
 801a348:	b21a      	sxth	r2, r3
 801a34a:	187b      	adds	r3, r7, r1
 801a34c:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801a34e:	6a3b      	ldr	r3, [r7, #32]
 801a350:	187a      	adds	r2, r7, r1
 801a352:	8812      	ldrh	r2, [r2, #0]
 801a354:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801a356:	6a3b      	ldr	r3, [r7, #32]
 801a358:	3302      	adds	r3, #2
 801a35a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801a35c:	69fb      	ldr	r3, [r7, #28]
 801a35e:	3301      	adds	r3, #1
 801a360:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801a362:	69fb      	ldr	r3, [r7, #28]
 801a364:	3301      	adds	r3, #1
 801a366:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801a368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a36a:	3b01      	subs	r3, #1
 801a36c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a370:	2b00      	cmp	r3, #0
 801a372:	d1db      	bne.n	801a32c <USB_WritePMA+0x40>
  }
}
 801a374:	46c0      	nop			@ (mov r8, r8)
 801a376:	46c0      	nop			@ (mov r8, r8)
 801a378:	46bd      	mov	sp, r7
 801a37a:	b00a      	add	sp, #40	@ 0x28
 801a37c:	bd80      	pop	{r7, pc}

0801a37e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801a37e:	b580      	push	{r7, lr}
 801a380:	b08a      	sub	sp, #40	@ 0x28
 801a382:	af00      	add	r7, sp, #0
 801a384:	60f8      	str	r0, [r7, #12]
 801a386:	60b9      	str	r1, [r7, #8]
 801a388:	0019      	movs	r1, r3
 801a38a:	1dbb      	adds	r3, r7, #6
 801a38c:	801a      	strh	r2, [r3, #0]
 801a38e:	1d3b      	adds	r3, r7, #4
 801a390:	1c0a      	adds	r2, r1, #0
 801a392:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801a394:	1d3b      	adds	r3, r7, #4
 801a396:	881b      	ldrh	r3, [r3, #0]
 801a398:	085b      	lsrs	r3, r3, #1
 801a39a:	b29b      	uxth	r3, r3
 801a39c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801a3a2:	68bb      	ldr	r3, [r7, #8]
 801a3a4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801a3a6:	1dbb      	adds	r3, r7, #6
 801a3a8:	881a      	ldrh	r2, [r3, #0]
 801a3aa:	697b      	ldr	r3, [r7, #20]
 801a3ac:	18d3      	adds	r3, r2, r3
 801a3ae:	2280      	movs	r2, #128	@ 0x80
 801a3b0:	00d2      	lsls	r2, r2, #3
 801a3b2:	4694      	mov	ip, r2
 801a3b4:	4463      	add	r3, ip
 801a3b6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801a3b8:	69bb      	ldr	r3, [r7, #24]
 801a3ba:	627b      	str	r3, [r7, #36]	@ 0x24
 801a3bc:	e018      	b.n	801a3f0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801a3be:	6a3b      	ldr	r3, [r7, #32]
 801a3c0:	881b      	ldrh	r3, [r3, #0]
 801a3c2:	b29b      	uxth	r3, r3
 801a3c4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801a3c6:	6a3b      	ldr	r3, [r7, #32]
 801a3c8:	3302      	adds	r3, #2
 801a3ca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801a3cc:	693b      	ldr	r3, [r7, #16]
 801a3ce:	b2da      	uxtb	r2, r3
 801a3d0:	69fb      	ldr	r3, [r7, #28]
 801a3d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801a3d4:	69fb      	ldr	r3, [r7, #28]
 801a3d6:	3301      	adds	r3, #1
 801a3d8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801a3da:	693b      	ldr	r3, [r7, #16]
 801a3dc:	0a1b      	lsrs	r3, r3, #8
 801a3de:	b2da      	uxtb	r2, r3
 801a3e0:	69fb      	ldr	r3, [r7, #28]
 801a3e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801a3e4:	69fb      	ldr	r3, [r7, #28]
 801a3e6:	3301      	adds	r3, #1
 801a3e8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801a3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3ec:	3b01      	subs	r3, #1
 801a3ee:	627b      	str	r3, [r7, #36]	@ 0x24
 801a3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3f2:	2b00      	cmp	r3, #0
 801a3f4:	d1e3      	bne.n	801a3be <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801a3f6:	1d3b      	adds	r3, r7, #4
 801a3f8:	881b      	ldrh	r3, [r3, #0]
 801a3fa:	2201      	movs	r2, #1
 801a3fc:	4013      	ands	r3, r2
 801a3fe:	b29b      	uxth	r3, r3
 801a400:	2b00      	cmp	r3, #0
 801a402:	d007      	beq.n	801a414 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801a404:	6a3b      	ldr	r3, [r7, #32]
 801a406:	881b      	ldrh	r3, [r3, #0]
 801a408:	b29b      	uxth	r3, r3
 801a40a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801a40c:	693b      	ldr	r3, [r7, #16]
 801a40e:	b2da      	uxtb	r2, r3
 801a410:	69fb      	ldr	r3, [r7, #28]
 801a412:	701a      	strb	r2, [r3, #0]
  }
}
 801a414:	46c0      	nop			@ (mov r8, r8)
 801a416:	46bd      	mov	sp, r7
 801a418:	b00a      	add	sp, #40	@ 0x28
 801a41a:	bd80      	pop	{r7, pc}

0801a41c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a41c:	b580      	push	{r7, lr}
 801a41e:	b084      	sub	sp, #16
 801a420:	af00      	add	r7, sp, #0
 801a422:	6078      	str	r0, [r7, #4]
 801a424:	000a      	movs	r2, r1
 801a426:	1cfb      	adds	r3, r7, #3
 801a428:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801a42a:	230f      	movs	r3, #15
 801a42c:	18fb      	adds	r3, r7, r3
 801a42e:	2200      	movs	r2, #0
 801a430:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	7c1b      	ldrb	r3, [r3, #16]
 801a436:	2b00      	cmp	r3, #0
 801a438:	d116      	bne.n	801a468 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801a43a:	2380      	movs	r3, #128	@ 0x80
 801a43c:	009b      	lsls	r3, r3, #2
 801a43e:	6878      	ldr	r0, [r7, #4]
 801a440:	2202      	movs	r2, #2
 801a442:	2181      	movs	r1, #129	@ 0x81
 801a444:	f002 f8eb 	bl	801c61e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	2201      	movs	r2, #1
 801a44c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801a44e:	2380      	movs	r3, #128	@ 0x80
 801a450:	009b      	lsls	r3, r3, #2
 801a452:	6878      	ldr	r0, [r7, #4]
 801a454:	2202      	movs	r2, #2
 801a456:	2101      	movs	r1, #1
 801a458:	f002 f8e1 	bl	801c61e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801a45c:	687a      	ldr	r2, [r7, #4]
 801a45e:	23b6      	movs	r3, #182	@ 0xb6
 801a460:	005b      	lsls	r3, r3, #1
 801a462:	2101      	movs	r1, #1
 801a464:	50d1      	str	r1, [r2, r3]
 801a466:	e013      	b.n	801a490 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801a468:	6878      	ldr	r0, [r7, #4]
 801a46a:	2340      	movs	r3, #64	@ 0x40
 801a46c:	2202      	movs	r2, #2
 801a46e:	2181      	movs	r1, #129	@ 0x81
 801a470:	f002 f8d5 	bl	801c61e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	2201      	movs	r2, #1
 801a478:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801a47a:	6878      	ldr	r0, [r7, #4]
 801a47c:	2340      	movs	r3, #64	@ 0x40
 801a47e:	2202      	movs	r2, #2
 801a480:	2101      	movs	r1, #1
 801a482:	f002 f8cc 	bl	801c61e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801a486:	687a      	ldr	r2, [r7, #4]
 801a488:	23b6      	movs	r3, #182	@ 0xb6
 801a48a:	005b      	lsls	r3, r3, #1
 801a48c:	2101      	movs	r1, #1
 801a48e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801a490:	6878      	ldr	r0, [r7, #4]
 801a492:	2308      	movs	r3, #8
 801a494:	2203      	movs	r2, #3
 801a496:	2182      	movs	r1, #130	@ 0x82
 801a498:	f002 f8c1 	bl	801c61e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	2201      	movs	r2, #1
 801a4a0:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801a4a2:	2387      	movs	r3, #135	@ 0x87
 801a4a4:	009b      	lsls	r3, r3, #2
 801a4a6:	0018      	movs	r0, r3
 801a4a8:	f002 fa52 	bl	801c950 <USBD_static_malloc>
 801a4ac:	0001      	movs	r1, r0
 801a4ae:	687a      	ldr	r2, [r7, #4]
 801a4b0:	23ae      	movs	r3, #174	@ 0xae
 801a4b2:	009b      	lsls	r3, r3, #2
 801a4b4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801a4b6:	687a      	ldr	r2, [r7, #4]
 801a4b8:	23ae      	movs	r3, #174	@ 0xae
 801a4ba:	009b      	lsls	r3, r3, #2
 801a4bc:	58d3      	ldr	r3, [r2, r3]
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d104      	bne.n	801a4cc <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801a4c2:	230f      	movs	r3, #15
 801a4c4:	18fb      	adds	r3, r7, r3
 801a4c6:	2201      	movs	r2, #1
 801a4c8:	701a      	strb	r2, [r3, #0]
 801a4ca:	e02c      	b.n	801a526 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a4cc:	687a      	ldr	r2, [r7, #4]
 801a4ce:	23ae      	movs	r3, #174	@ 0xae
 801a4d0:	009b      	lsls	r3, r3, #2
 801a4d2:	58d3      	ldr	r3, [r2, r3]
 801a4d4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801a4d6:	687a      	ldr	r2, [r7, #4]
 801a4d8:	23af      	movs	r3, #175	@ 0xaf
 801a4da:	009b      	lsls	r3, r3, #2
 801a4dc:	58d3      	ldr	r3, [r2, r3]
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801a4e2:	68ba      	ldr	r2, [r7, #8]
 801a4e4:	2385      	movs	r3, #133	@ 0x85
 801a4e6:	009b      	lsls	r3, r3, #2
 801a4e8:	2100      	movs	r1, #0
 801a4ea:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801a4ec:	68ba      	ldr	r2, [r7, #8]
 801a4ee:	2386      	movs	r3, #134	@ 0x86
 801a4f0:	009b      	lsls	r3, r3, #2
 801a4f2:	2100      	movs	r1, #0
 801a4f4:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	7c1b      	ldrb	r3, [r3, #16]
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d10a      	bne.n	801a514 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a4fe:	68ba      	ldr	r2, [r7, #8]
 801a500:	2381      	movs	r3, #129	@ 0x81
 801a502:	009b      	lsls	r3, r3, #2
 801a504:	58d2      	ldr	r2, [r2, r3]
 801a506:	2380      	movs	r3, #128	@ 0x80
 801a508:	009b      	lsls	r3, r3, #2
 801a50a:	6878      	ldr	r0, [r7, #4]
 801a50c:	2101      	movs	r1, #1
 801a50e:	f002 f9d1 	bl	801c8b4 <USBD_LL_PrepareReceive>
 801a512:	e008      	b.n	801a526 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a514:	68ba      	ldr	r2, [r7, #8]
 801a516:	2381      	movs	r3, #129	@ 0x81
 801a518:	009b      	lsls	r3, r3, #2
 801a51a:	58d2      	ldr	r2, [r2, r3]
 801a51c:	6878      	ldr	r0, [r7, #4]
 801a51e:	2340      	movs	r3, #64	@ 0x40
 801a520:	2101      	movs	r1, #1
 801a522:	f002 f9c7 	bl	801c8b4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801a526:	230f      	movs	r3, #15
 801a528:	18fb      	adds	r3, r7, r3
 801a52a:	781b      	ldrb	r3, [r3, #0]
}
 801a52c:	0018      	movs	r0, r3
 801a52e:	46bd      	mov	sp, r7
 801a530:	b004      	add	sp, #16
 801a532:	bd80      	pop	{r7, pc}

0801a534 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a534:	b580      	push	{r7, lr}
 801a536:	b084      	sub	sp, #16
 801a538:	af00      	add	r7, sp, #0
 801a53a:	6078      	str	r0, [r7, #4]
 801a53c:	000a      	movs	r2, r1
 801a53e:	1cfb      	adds	r3, r7, #3
 801a540:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801a542:	230f      	movs	r3, #15
 801a544:	18fb      	adds	r3, r7, r3
 801a546:	2200      	movs	r2, #0
 801a548:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	2181      	movs	r1, #129	@ 0x81
 801a54e:	0018      	movs	r0, r3
 801a550:	f002 f89c 	bl	801c68c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	2200      	movs	r2, #0
 801a558:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	2101      	movs	r1, #1
 801a55e:	0018      	movs	r0, r3
 801a560:	f002 f894 	bl	801c68c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801a564:	687a      	ldr	r2, [r7, #4]
 801a566:	23b6      	movs	r3, #182	@ 0xb6
 801a568:	005b      	lsls	r3, r3, #1
 801a56a:	2100      	movs	r1, #0
 801a56c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	2182      	movs	r1, #130	@ 0x82
 801a572:	0018      	movs	r0, r3
 801a574:	f002 f88a 	bl	801c68c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	2200      	movs	r2, #0
 801a57c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801a57e:	687a      	ldr	r2, [r7, #4]
 801a580:	23ae      	movs	r3, #174	@ 0xae
 801a582:	009b      	lsls	r3, r3, #2
 801a584:	58d3      	ldr	r3, [r2, r3]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d011      	beq.n	801a5ae <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801a58a:	687a      	ldr	r2, [r7, #4]
 801a58c:	23af      	movs	r3, #175	@ 0xaf
 801a58e:	009b      	lsls	r3, r3, #2
 801a590:	58d3      	ldr	r3, [r2, r3]
 801a592:	685b      	ldr	r3, [r3, #4]
 801a594:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801a596:	687a      	ldr	r2, [r7, #4]
 801a598:	23ae      	movs	r3, #174	@ 0xae
 801a59a:	009b      	lsls	r3, r3, #2
 801a59c:	58d3      	ldr	r3, [r2, r3]
 801a59e:	0018      	movs	r0, r3
 801a5a0:	f002 f9e2 	bl	801c968 <USBD_static_free>
    pdev->pClassData = NULL;
 801a5a4:	687a      	ldr	r2, [r7, #4]
 801a5a6:	23ae      	movs	r3, #174	@ 0xae
 801a5a8:	009b      	lsls	r3, r3, #2
 801a5aa:	2100      	movs	r1, #0
 801a5ac:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801a5ae:	230f      	movs	r3, #15
 801a5b0:	18fb      	adds	r3, r7, r3
 801a5b2:	781b      	ldrb	r3, [r3, #0]
}
 801a5b4:	0018      	movs	r0, r3
 801a5b6:	46bd      	mov	sp, r7
 801a5b8:	b004      	add	sp, #16
 801a5ba:	bd80      	pop	{r7, pc}

0801a5bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801a5bc:	b580      	push	{r7, lr}
 801a5be:	b086      	sub	sp, #24
 801a5c0:	af00      	add	r7, sp, #0
 801a5c2:	6078      	str	r0, [r7, #4]
 801a5c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a5c6:	687a      	ldr	r2, [r7, #4]
 801a5c8:	23ae      	movs	r3, #174	@ 0xae
 801a5ca:	009b      	lsls	r3, r3, #2
 801a5cc:	58d3      	ldr	r3, [r2, r3]
 801a5ce:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801a5d0:	230f      	movs	r3, #15
 801a5d2:	18fb      	adds	r3, r7, r3
 801a5d4:	2200      	movs	r2, #0
 801a5d6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801a5d8:	230c      	movs	r3, #12
 801a5da:	18fb      	adds	r3, r7, r3
 801a5dc:	2200      	movs	r2, #0
 801a5de:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801a5e0:	2317      	movs	r3, #23
 801a5e2:	18fb      	adds	r3, r7, r3
 801a5e4:	2200      	movs	r2, #0
 801a5e6:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a5e8:	683b      	ldr	r3, [r7, #0]
 801a5ea:	781b      	ldrb	r3, [r3, #0]
 801a5ec:	001a      	movs	r2, r3
 801a5ee:	2360      	movs	r3, #96	@ 0x60
 801a5f0:	4013      	ands	r3, r2
 801a5f2:	d03d      	beq.n	801a670 <USBD_CDC_Setup+0xb4>
 801a5f4:	2b20      	cmp	r3, #32
 801a5f6:	d000      	beq.n	801a5fa <USBD_CDC_Setup+0x3e>
 801a5f8:	e094      	b.n	801a724 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801a5fa:	683b      	ldr	r3, [r7, #0]
 801a5fc:	88db      	ldrh	r3, [r3, #6]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d02b      	beq.n	801a65a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801a602:	683b      	ldr	r3, [r7, #0]
 801a604:	781b      	ldrb	r3, [r3, #0]
 801a606:	b25b      	sxtb	r3, r3
 801a608:	2b00      	cmp	r3, #0
 801a60a:	da12      	bge.n	801a632 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a60c:	687a      	ldr	r2, [r7, #4]
 801a60e:	23af      	movs	r3, #175	@ 0xaf
 801a610:	009b      	lsls	r3, r3, #2
 801a612:	58d3      	ldr	r3, [r2, r3]
 801a614:	689b      	ldr	r3, [r3, #8]
 801a616:	683a      	ldr	r2, [r7, #0]
 801a618:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801a61a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a61c:	683a      	ldr	r2, [r7, #0]
 801a61e:	88d2      	ldrh	r2, [r2, #6]
 801a620:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801a622:	6939      	ldr	r1, [r7, #16]
 801a624:	683b      	ldr	r3, [r7, #0]
 801a626:	88da      	ldrh	r2, [r3, #6]
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	0018      	movs	r0, r3
 801a62c:	f001 fbaf 	bl	801bd8e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801a630:	e083      	b.n	801a73a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801a632:	683b      	ldr	r3, [r7, #0]
 801a634:	7859      	ldrb	r1, [r3, #1]
 801a636:	693a      	ldr	r2, [r7, #16]
 801a638:	2380      	movs	r3, #128	@ 0x80
 801a63a:	009b      	lsls	r3, r3, #2
 801a63c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801a63e:	683b      	ldr	r3, [r7, #0]
 801a640:	88db      	ldrh	r3, [r3, #6]
 801a642:	b2d9      	uxtb	r1, r3
 801a644:	693b      	ldr	r3, [r7, #16]
 801a646:	4a40      	ldr	r2, [pc, #256]	@ (801a748 <USBD_CDC_Setup+0x18c>)
 801a648:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801a64a:	6939      	ldr	r1, [r7, #16]
 801a64c:	683b      	ldr	r3, [r7, #0]
 801a64e:	88da      	ldrh	r2, [r3, #6]
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	0018      	movs	r0, r3
 801a654:	f001 fbce 	bl	801bdf4 <USBD_CtlPrepareRx>
      break;
 801a658:	e06f      	b.n	801a73a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a65a:	687a      	ldr	r2, [r7, #4]
 801a65c:	23af      	movs	r3, #175	@ 0xaf
 801a65e:	009b      	lsls	r3, r3, #2
 801a660:	58d3      	ldr	r3, [r2, r3]
 801a662:	689b      	ldr	r3, [r3, #8]
 801a664:	683a      	ldr	r2, [r7, #0]
 801a666:	7850      	ldrb	r0, [r2, #1]
 801a668:	6839      	ldr	r1, [r7, #0]
 801a66a:	2200      	movs	r2, #0
 801a66c:	4798      	blx	r3
      break;
 801a66e:	e064      	b.n	801a73a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a670:	683b      	ldr	r3, [r7, #0]
 801a672:	785b      	ldrb	r3, [r3, #1]
 801a674:	2b0b      	cmp	r3, #11
 801a676:	d037      	beq.n	801a6e8 <USBD_CDC_Setup+0x12c>
 801a678:	dc47      	bgt.n	801a70a <USBD_CDC_Setup+0x14e>
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d002      	beq.n	801a684 <USBD_CDC_Setup+0xc8>
 801a67e:	2b0a      	cmp	r3, #10
 801a680:	d019      	beq.n	801a6b6 <USBD_CDC_Setup+0xfa>
 801a682:	e042      	b.n	801a70a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a684:	687a      	ldr	r2, [r7, #4]
 801a686:	23a7      	movs	r3, #167	@ 0xa7
 801a688:	009b      	lsls	r3, r3, #2
 801a68a:	5cd3      	ldrb	r3, [r2, r3]
 801a68c:	2b03      	cmp	r3, #3
 801a68e:	d107      	bne.n	801a6a0 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801a690:	230c      	movs	r3, #12
 801a692:	18f9      	adds	r1, r7, r3
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	2202      	movs	r2, #2
 801a698:	0018      	movs	r0, r3
 801a69a:	f001 fb78 	bl	801bd8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a69e:	e040      	b.n	801a722 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801a6a0:	683a      	ldr	r2, [r7, #0]
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	0011      	movs	r1, r2
 801a6a6:	0018      	movs	r0, r3
 801a6a8:	f001 faf3 	bl	801bc92 <USBD_CtlError>
            ret = USBD_FAIL;
 801a6ac:	2317      	movs	r3, #23
 801a6ae:	18fb      	adds	r3, r7, r3
 801a6b0:	2202      	movs	r2, #2
 801a6b2:	701a      	strb	r2, [r3, #0]
          break;
 801a6b4:	e035      	b.n	801a722 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a6b6:	687a      	ldr	r2, [r7, #4]
 801a6b8:	23a7      	movs	r3, #167	@ 0xa7
 801a6ba:	009b      	lsls	r3, r3, #2
 801a6bc:	5cd3      	ldrb	r3, [r2, r3]
 801a6be:	2b03      	cmp	r3, #3
 801a6c0:	d107      	bne.n	801a6d2 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801a6c2:	230f      	movs	r3, #15
 801a6c4:	18f9      	adds	r1, r7, r3
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	2201      	movs	r2, #1
 801a6ca:	0018      	movs	r0, r3
 801a6cc:	f001 fb5f 	bl	801bd8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a6d0:	e027      	b.n	801a722 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801a6d2:	683a      	ldr	r2, [r7, #0]
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	0011      	movs	r1, r2
 801a6d8:	0018      	movs	r0, r3
 801a6da:	f001 fada 	bl	801bc92 <USBD_CtlError>
            ret = USBD_FAIL;
 801a6de:	2317      	movs	r3, #23
 801a6e0:	18fb      	adds	r3, r7, r3
 801a6e2:	2202      	movs	r2, #2
 801a6e4:	701a      	strb	r2, [r3, #0]
          break;
 801a6e6:	e01c      	b.n	801a722 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801a6e8:	687a      	ldr	r2, [r7, #4]
 801a6ea:	23a7      	movs	r3, #167	@ 0xa7
 801a6ec:	009b      	lsls	r3, r3, #2
 801a6ee:	5cd3      	ldrb	r3, [r2, r3]
 801a6f0:	2b03      	cmp	r3, #3
 801a6f2:	d015      	beq.n	801a720 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801a6f4:	683a      	ldr	r2, [r7, #0]
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	0011      	movs	r1, r2
 801a6fa:	0018      	movs	r0, r3
 801a6fc:	f001 fac9 	bl	801bc92 <USBD_CtlError>
            ret = USBD_FAIL;
 801a700:	2317      	movs	r3, #23
 801a702:	18fb      	adds	r3, r7, r3
 801a704:	2202      	movs	r2, #2
 801a706:	701a      	strb	r2, [r3, #0]
          }
          break;
 801a708:	e00a      	b.n	801a720 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801a70a:	683a      	ldr	r2, [r7, #0]
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	0011      	movs	r1, r2
 801a710:	0018      	movs	r0, r3
 801a712:	f001 fabe 	bl	801bc92 <USBD_CtlError>
          ret = USBD_FAIL;
 801a716:	2317      	movs	r3, #23
 801a718:	18fb      	adds	r3, r7, r3
 801a71a:	2202      	movs	r2, #2
 801a71c:	701a      	strb	r2, [r3, #0]
          break;
 801a71e:	e000      	b.n	801a722 <USBD_CDC_Setup+0x166>
          break;
 801a720:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801a722:	e00a      	b.n	801a73a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801a724:	683a      	ldr	r2, [r7, #0]
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	0011      	movs	r1, r2
 801a72a:	0018      	movs	r0, r3
 801a72c:	f001 fab1 	bl	801bc92 <USBD_CtlError>
      ret = USBD_FAIL;
 801a730:	2317      	movs	r3, #23
 801a732:	18fb      	adds	r3, r7, r3
 801a734:	2202      	movs	r2, #2
 801a736:	701a      	strb	r2, [r3, #0]
      break;
 801a738:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801a73a:	2317      	movs	r3, #23
 801a73c:	18fb      	adds	r3, r7, r3
 801a73e:	781b      	ldrb	r3, [r3, #0]
}
 801a740:	0018      	movs	r0, r3
 801a742:	46bd      	mov	sp, r7
 801a744:	b006      	add	sp, #24
 801a746:	bd80      	pop	{r7, pc}
 801a748:	00000201 	.word	0x00000201

0801a74c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b084      	sub	sp, #16
 801a750:	af00      	add	r7, sp, #0
 801a752:	6078      	str	r0, [r7, #4]
 801a754:	000a      	movs	r2, r1
 801a756:	1cfb      	adds	r3, r7, #3
 801a758:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801a75a:	687a      	ldr	r2, [r7, #4]
 801a75c:	23ae      	movs	r3, #174	@ 0xae
 801a75e:	009b      	lsls	r3, r3, #2
 801a760:	58d3      	ldr	r3, [r2, r3]
 801a762:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801a764:	687a      	ldr	r2, [r7, #4]
 801a766:	23b0      	movs	r3, #176	@ 0xb0
 801a768:	009b      	lsls	r3, r3, #2
 801a76a:	58d3      	ldr	r3, [r2, r3]
 801a76c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801a76e:	687a      	ldr	r2, [r7, #4]
 801a770:	23ae      	movs	r3, #174	@ 0xae
 801a772:	009b      	lsls	r3, r3, #2
 801a774:	58d3      	ldr	r3, [r2, r3]
 801a776:	2b00      	cmp	r3, #0
 801a778:	d03e      	beq.n	801a7f8 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801a77a:	1cfb      	adds	r3, r7, #3
 801a77c:	781a      	ldrb	r2, [r3, #0]
 801a77e:	6879      	ldr	r1, [r7, #4]
 801a780:	0013      	movs	r3, r2
 801a782:	009b      	lsls	r3, r3, #2
 801a784:	189b      	adds	r3, r3, r2
 801a786:	009b      	lsls	r3, r3, #2
 801a788:	18cb      	adds	r3, r1, r3
 801a78a:	331c      	adds	r3, #28
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d02b      	beq.n	801a7ea <USBD_CDC_DataIn+0x9e>
 801a792:	1cfb      	adds	r3, r7, #3
 801a794:	781a      	ldrb	r2, [r3, #0]
 801a796:	6879      	ldr	r1, [r7, #4]
 801a798:	0013      	movs	r3, r2
 801a79a:	009b      	lsls	r3, r3, #2
 801a79c:	189b      	adds	r3, r3, r2
 801a79e:	009b      	lsls	r3, r3, #2
 801a7a0:	18cb      	adds	r3, r1, r3
 801a7a2:	331c      	adds	r3, #28
 801a7a4:	6818      	ldr	r0, [r3, #0]
 801a7a6:	1cfb      	adds	r3, r7, #3
 801a7a8:	781a      	ldrb	r2, [r3, #0]
 801a7aa:	68b9      	ldr	r1, [r7, #8]
 801a7ac:	0013      	movs	r3, r2
 801a7ae:	009b      	lsls	r3, r3, #2
 801a7b0:	189b      	adds	r3, r3, r2
 801a7b2:	00db      	lsls	r3, r3, #3
 801a7b4:	18cb      	adds	r3, r1, r3
 801a7b6:	3338      	adds	r3, #56	@ 0x38
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	0019      	movs	r1, r3
 801a7bc:	f7e5 fd78 	bl	80002b0 <__aeabi_uidivmod>
 801a7c0:	1e0b      	subs	r3, r1, #0
 801a7c2:	d112      	bne.n	801a7ea <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801a7c4:	1cfb      	adds	r3, r7, #3
 801a7c6:	781a      	ldrb	r2, [r3, #0]
 801a7c8:	6879      	ldr	r1, [r7, #4]
 801a7ca:	0013      	movs	r3, r2
 801a7cc:	009b      	lsls	r3, r3, #2
 801a7ce:	189b      	adds	r3, r3, r2
 801a7d0:	009b      	lsls	r3, r3, #2
 801a7d2:	18cb      	adds	r3, r1, r3
 801a7d4:	331c      	adds	r3, #28
 801a7d6:	2200      	movs	r2, #0
 801a7d8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801a7da:	1cfb      	adds	r3, r7, #3
 801a7dc:	7819      	ldrb	r1, [r3, #0]
 801a7de:	6878      	ldr	r0, [r7, #4]
 801a7e0:	2300      	movs	r3, #0
 801a7e2:	2200      	movs	r2, #0
 801a7e4:	f002 f82f 	bl	801c846 <USBD_LL_Transmit>
 801a7e8:	e004      	b.n	801a7f4 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801a7ea:	68fa      	ldr	r2, [r7, #12]
 801a7ec:	2385      	movs	r3, #133	@ 0x85
 801a7ee:	009b      	lsls	r3, r3, #2
 801a7f0:	2100      	movs	r1, #0
 801a7f2:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801a7f4:	2300      	movs	r3, #0
 801a7f6:	e000      	b.n	801a7fa <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801a7f8:	2302      	movs	r3, #2
  }
}
 801a7fa:	0018      	movs	r0, r3
 801a7fc:	46bd      	mov	sp, r7
 801a7fe:	b004      	add	sp, #16
 801a800:	bd80      	pop	{r7, pc}

0801a802 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a802:	b580      	push	{r7, lr}
 801a804:	b084      	sub	sp, #16
 801a806:	af00      	add	r7, sp, #0
 801a808:	6078      	str	r0, [r7, #4]
 801a80a:	000a      	movs	r2, r1
 801a80c:	1cfb      	adds	r3, r7, #3
 801a80e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a810:	687a      	ldr	r2, [r7, #4]
 801a812:	23ae      	movs	r3, #174	@ 0xae
 801a814:	009b      	lsls	r3, r3, #2
 801a816:	58d3      	ldr	r3, [r2, r3]
 801a818:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801a81a:	1cfb      	adds	r3, r7, #3
 801a81c:	781a      	ldrb	r2, [r3, #0]
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	0011      	movs	r1, r2
 801a822:	0018      	movs	r0, r3
 801a824:	f002 f87d 	bl	801c922 <USBD_LL_GetRxDataSize>
 801a828:	0001      	movs	r1, r0
 801a82a:	68fa      	ldr	r2, [r7, #12]
 801a82c:	2383      	movs	r3, #131	@ 0x83
 801a82e:	009b      	lsls	r3, r3, #2
 801a830:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801a832:	687a      	ldr	r2, [r7, #4]
 801a834:	23ae      	movs	r3, #174	@ 0xae
 801a836:	009b      	lsls	r3, r3, #2
 801a838:	58d3      	ldr	r3, [r2, r3]
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d011      	beq.n	801a862 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801a83e:	687a      	ldr	r2, [r7, #4]
 801a840:	23af      	movs	r3, #175	@ 0xaf
 801a842:	009b      	lsls	r3, r3, #2
 801a844:	58d3      	ldr	r3, [r2, r3]
 801a846:	68da      	ldr	r2, [r3, #12]
 801a848:	68f9      	ldr	r1, [r7, #12]
 801a84a:	2381      	movs	r3, #129	@ 0x81
 801a84c:	009b      	lsls	r3, r3, #2
 801a84e:	58c8      	ldr	r0, [r1, r3]
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	2183      	movs	r1, #131	@ 0x83
 801a854:	0089      	lsls	r1, r1, #2
 801a856:	468c      	mov	ip, r1
 801a858:	4463      	add	r3, ip
 801a85a:	0019      	movs	r1, r3
 801a85c:	4790      	blx	r2

    return USBD_OK;
 801a85e:	2300      	movs	r3, #0
 801a860:	e000      	b.n	801a864 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801a862:	2302      	movs	r3, #2
  }
}
 801a864:	0018      	movs	r0, r3
 801a866:	46bd      	mov	sp, r7
 801a868:	b004      	add	sp, #16
 801a86a:	bd80      	pop	{r7, pc}

0801a86c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801a86c:	b590      	push	{r4, r7, lr}
 801a86e:	b085      	sub	sp, #20
 801a870:	af00      	add	r7, sp, #0
 801a872:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a874:	687a      	ldr	r2, [r7, #4]
 801a876:	23ae      	movs	r3, #174	@ 0xae
 801a878:	009b      	lsls	r3, r3, #2
 801a87a:	58d3      	ldr	r3, [r2, r3]
 801a87c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801a87e:	687a      	ldr	r2, [r7, #4]
 801a880:	23af      	movs	r3, #175	@ 0xaf
 801a882:	009b      	lsls	r3, r3, #2
 801a884:	58d3      	ldr	r3, [r2, r3]
 801a886:	2b00      	cmp	r3, #0
 801a888:	d018      	beq.n	801a8bc <USBD_CDC_EP0_RxReady+0x50>
 801a88a:	68fa      	ldr	r2, [r7, #12]
 801a88c:	2380      	movs	r3, #128	@ 0x80
 801a88e:	009b      	lsls	r3, r3, #2
 801a890:	5cd3      	ldrb	r3, [r2, r3]
 801a892:	2bff      	cmp	r3, #255	@ 0xff
 801a894:	d012      	beq.n	801a8bc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801a896:	687a      	ldr	r2, [r7, #4]
 801a898:	23af      	movs	r3, #175	@ 0xaf
 801a89a:	009b      	lsls	r3, r3, #2
 801a89c:	58d3      	ldr	r3, [r2, r3]
 801a89e:	689b      	ldr	r3, [r3, #8]
 801a8a0:	68f9      	ldr	r1, [r7, #12]
 801a8a2:	2280      	movs	r2, #128	@ 0x80
 801a8a4:	0092      	lsls	r2, r2, #2
 801a8a6:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801a8a8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801a8aa:	68fa      	ldr	r2, [r7, #12]
 801a8ac:	4c06      	ldr	r4, [pc, #24]	@ (801a8c8 <USBD_CDC_EP0_RxReady+0x5c>)
 801a8ae:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801a8b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801a8b2:	68fa      	ldr	r2, [r7, #12]
 801a8b4:	2380      	movs	r3, #128	@ 0x80
 801a8b6:	009b      	lsls	r3, r3, #2
 801a8b8:	21ff      	movs	r1, #255	@ 0xff
 801a8ba:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801a8bc:	2300      	movs	r3, #0
}
 801a8be:	0018      	movs	r0, r3
 801a8c0:	46bd      	mov	sp, r7
 801a8c2:	b005      	add	sp, #20
 801a8c4:	bd90      	pop	{r4, r7, pc}
 801a8c6:	46c0      	nop			@ (mov r8, r8)
 801a8c8:	00000201 	.word	0x00000201

0801a8cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801a8cc:	b580      	push	{r7, lr}
 801a8ce:	b082      	sub	sp, #8
 801a8d0:	af00      	add	r7, sp, #0
 801a8d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	2243      	movs	r2, #67	@ 0x43
 801a8d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801a8da:	4b02      	ldr	r3, [pc, #8]	@ (801a8e4 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801a8dc:	0018      	movs	r0, r3
 801a8de:	46bd      	mov	sp, r7
 801a8e0:	b002      	add	sp, #8
 801a8e2:	bd80      	pop	{r7, pc}
 801a8e4:	20000168 	.word	0x20000168

0801a8e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801a8e8:	b580      	push	{r7, lr}
 801a8ea:	b082      	sub	sp, #8
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	2243      	movs	r2, #67	@ 0x43
 801a8f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801a8f6:	4b02      	ldr	r3, [pc, #8]	@ (801a900 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801a8f8:	0018      	movs	r0, r3
 801a8fa:	46bd      	mov	sp, r7
 801a8fc:	b002      	add	sp, #8
 801a8fe:	bd80      	pop	{r7, pc}
 801a900:	20000124 	.word	0x20000124

0801a904 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801a904:	b580      	push	{r7, lr}
 801a906:	b082      	sub	sp, #8
 801a908:	af00      	add	r7, sp, #0
 801a90a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	2243      	movs	r2, #67	@ 0x43
 801a910:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801a912:	4b02      	ldr	r3, [pc, #8]	@ (801a91c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801a914:	0018      	movs	r0, r3
 801a916:	46bd      	mov	sp, r7
 801a918:	b002      	add	sp, #8
 801a91a:	bd80      	pop	{r7, pc}
 801a91c:	200001ac 	.word	0x200001ac

0801a920 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801a920:	b580      	push	{r7, lr}
 801a922:	b082      	sub	sp, #8
 801a924:	af00      	add	r7, sp, #0
 801a926:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	220a      	movs	r2, #10
 801a92c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801a92e:	4b02      	ldr	r3, [pc, #8]	@ (801a938 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801a930:	0018      	movs	r0, r3
 801a932:	46bd      	mov	sp, r7
 801a934:	b002      	add	sp, #8
 801a936:	bd80      	pop	{r7, pc}
 801a938:	200000e0 	.word	0x200000e0

0801a93c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801a93c:	b580      	push	{r7, lr}
 801a93e:	b084      	sub	sp, #16
 801a940:	af00      	add	r7, sp, #0
 801a942:	6078      	str	r0, [r7, #4]
 801a944:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801a946:	200f      	movs	r0, #15
 801a948:	183b      	adds	r3, r7, r0
 801a94a:	2202      	movs	r2, #2
 801a94c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801a94e:	683b      	ldr	r3, [r7, #0]
 801a950:	2b00      	cmp	r3, #0
 801a952:	d007      	beq.n	801a964 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801a954:	687a      	ldr	r2, [r7, #4]
 801a956:	23af      	movs	r3, #175	@ 0xaf
 801a958:	009b      	lsls	r3, r3, #2
 801a95a:	6839      	ldr	r1, [r7, #0]
 801a95c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801a95e:	183b      	adds	r3, r7, r0
 801a960:	2200      	movs	r2, #0
 801a962:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801a964:	230f      	movs	r3, #15
 801a966:	18fb      	adds	r3, r7, r3
 801a968:	781b      	ldrb	r3, [r3, #0]
}
 801a96a:	0018      	movs	r0, r3
 801a96c:	46bd      	mov	sp, r7
 801a96e:	b004      	add	sp, #16
 801a970:	bd80      	pop	{r7, pc}

0801a972 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801a972:	b580      	push	{r7, lr}
 801a974:	b086      	sub	sp, #24
 801a976:	af00      	add	r7, sp, #0
 801a978:	60f8      	str	r0, [r7, #12]
 801a97a:	60b9      	str	r1, [r7, #8]
 801a97c:	1dbb      	adds	r3, r7, #6
 801a97e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a980:	68fa      	ldr	r2, [r7, #12]
 801a982:	23ae      	movs	r3, #174	@ 0xae
 801a984:	009b      	lsls	r3, r3, #2
 801a986:	58d3      	ldr	r3, [r2, r3]
 801a988:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801a98a:	697a      	ldr	r2, [r7, #20]
 801a98c:	2382      	movs	r3, #130	@ 0x82
 801a98e:	009b      	lsls	r3, r3, #2
 801a990:	68b9      	ldr	r1, [r7, #8]
 801a992:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801a994:	1dbb      	adds	r3, r7, #6
 801a996:	8819      	ldrh	r1, [r3, #0]
 801a998:	697a      	ldr	r2, [r7, #20]
 801a99a:	2384      	movs	r3, #132	@ 0x84
 801a99c:	009b      	lsls	r3, r3, #2
 801a99e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801a9a0:	2300      	movs	r3, #0
}
 801a9a2:	0018      	movs	r0, r3
 801a9a4:	46bd      	mov	sp, r7
 801a9a6:	b006      	add	sp, #24
 801a9a8:	bd80      	pop	{r7, pc}

0801a9aa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801a9aa:	b580      	push	{r7, lr}
 801a9ac:	b084      	sub	sp, #16
 801a9ae:	af00      	add	r7, sp, #0
 801a9b0:	6078      	str	r0, [r7, #4]
 801a9b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a9b4:	687a      	ldr	r2, [r7, #4]
 801a9b6:	23ae      	movs	r3, #174	@ 0xae
 801a9b8:	009b      	lsls	r3, r3, #2
 801a9ba:	58d3      	ldr	r3, [r2, r3]
 801a9bc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801a9be:	68fa      	ldr	r2, [r7, #12]
 801a9c0:	2381      	movs	r3, #129	@ 0x81
 801a9c2:	009b      	lsls	r3, r3, #2
 801a9c4:	6839      	ldr	r1, [r7, #0]
 801a9c6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801a9c8:	2300      	movs	r3, #0
}
 801a9ca:	0018      	movs	r0, r3
 801a9cc:	46bd      	mov	sp, r7
 801a9ce:	b004      	add	sp, #16
 801a9d0:	bd80      	pop	{r7, pc}

0801a9d2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801a9d2:	b580      	push	{r7, lr}
 801a9d4:	b084      	sub	sp, #16
 801a9d6:	af00      	add	r7, sp, #0
 801a9d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a9da:	687a      	ldr	r2, [r7, #4]
 801a9dc:	23ae      	movs	r3, #174	@ 0xae
 801a9de:	009b      	lsls	r3, r3, #2
 801a9e0:	58d3      	ldr	r3, [r2, r3]
 801a9e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801a9e4:	687a      	ldr	r2, [r7, #4]
 801a9e6:	23ae      	movs	r3, #174	@ 0xae
 801a9e8:	009b      	lsls	r3, r3, #2
 801a9ea:	58d3      	ldr	r3, [r2, r3]
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	d022      	beq.n	801aa36 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801a9f0:	68fa      	ldr	r2, [r7, #12]
 801a9f2:	2385      	movs	r3, #133	@ 0x85
 801a9f4:	009b      	lsls	r3, r3, #2
 801a9f6:	58d3      	ldr	r3, [r2, r3]
 801a9f8:	2b00      	cmp	r3, #0
 801a9fa:	d11a      	bne.n	801aa32 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801a9fc:	68fa      	ldr	r2, [r7, #12]
 801a9fe:	2385      	movs	r3, #133	@ 0x85
 801aa00:	009b      	lsls	r3, r3, #2
 801aa02:	2101      	movs	r1, #1
 801aa04:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801aa06:	68fa      	ldr	r2, [r7, #12]
 801aa08:	2384      	movs	r3, #132	@ 0x84
 801aa0a:	009b      	lsls	r3, r3, #2
 801aa0c:	58d2      	ldr	r2, [r2, r3]
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801aa12:	68fa      	ldr	r2, [r7, #12]
 801aa14:	2382      	movs	r3, #130	@ 0x82
 801aa16:	009b      	lsls	r3, r3, #2
 801aa18:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801aa1a:	68fa      	ldr	r2, [r7, #12]
 801aa1c:	2384      	movs	r3, #132	@ 0x84
 801aa1e:	009b      	lsls	r3, r3, #2
 801aa20:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801aa22:	b29b      	uxth	r3, r3
 801aa24:	6878      	ldr	r0, [r7, #4]
 801aa26:	000a      	movs	r2, r1
 801aa28:	2181      	movs	r1, #129	@ 0x81
 801aa2a:	f001 ff0c 	bl	801c846 <USBD_LL_Transmit>

      return USBD_OK;
 801aa2e:	2300      	movs	r3, #0
 801aa30:	e002      	b.n	801aa38 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801aa32:	2301      	movs	r3, #1
 801aa34:	e000      	b.n	801aa38 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801aa36:	2302      	movs	r3, #2
  }
}
 801aa38:	0018      	movs	r0, r3
 801aa3a:	46bd      	mov	sp, r7
 801aa3c:	b004      	add	sp, #16
 801aa3e:	bd80      	pop	{r7, pc}

0801aa40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801aa40:	b580      	push	{r7, lr}
 801aa42:	b084      	sub	sp, #16
 801aa44:	af00      	add	r7, sp, #0
 801aa46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801aa48:	687a      	ldr	r2, [r7, #4]
 801aa4a:	23ae      	movs	r3, #174	@ 0xae
 801aa4c:	009b      	lsls	r3, r3, #2
 801aa4e:	58d3      	ldr	r3, [r2, r3]
 801aa50:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801aa52:	687a      	ldr	r2, [r7, #4]
 801aa54:	23ae      	movs	r3, #174	@ 0xae
 801aa56:	009b      	lsls	r3, r3, #2
 801aa58:	58d3      	ldr	r3, [r2, r3]
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d019      	beq.n	801aa92 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	7c1b      	ldrb	r3, [r3, #16]
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d10a      	bne.n	801aa7c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801aa66:	68fa      	ldr	r2, [r7, #12]
 801aa68:	2381      	movs	r3, #129	@ 0x81
 801aa6a:	009b      	lsls	r3, r3, #2
 801aa6c:	58d2      	ldr	r2, [r2, r3]
 801aa6e:	2380      	movs	r3, #128	@ 0x80
 801aa70:	009b      	lsls	r3, r3, #2
 801aa72:	6878      	ldr	r0, [r7, #4]
 801aa74:	2101      	movs	r1, #1
 801aa76:	f001 ff1d 	bl	801c8b4 <USBD_LL_PrepareReceive>
 801aa7a:	e008      	b.n	801aa8e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801aa7c:	68fa      	ldr	r2, [r7, #12]
 801aa7e:	2381      	movs	r3, #129	@ 0x81
 801aa80:	009b      	lsls	r3, r3, #2
 801aa82:	58d2      	ldr	r2, [r2, r3]
 801aa84:	6878      	ldr	r0, [r7, #4]
 801aa86:	2340      	movs	r3, #64	@ 0x40
 801aa88:	2101      	movs	r1, #1
 801aa8a:	f001 ff13 	bl	801c8b4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801aa8e:	2300      	movs	r3, #0
 801aa90:	e000      	b.n	801aa94 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801aa92:	2302      	movs	r3, #2
  }
}
 801aa94:	0018      	movs	r0, r3
 801aa96:	46bd      	mov	sp, r7
 801aa98:	b004      	add	sp, #16
 801aa9a:	bd80      	pop	{r7, pc}

0801aa9c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801aa9c:	b580      	push	{r7, lr}
 801aa9e:	b084      	sub	sp, #16
 801aaa0:	af00      	add	r7, sp, #0
 801aaa2:	60f8      	str	r0, [r7, #12]
 801aaa4:	60b9      	str	r1, [r7, #8]
 801aaa6:	1dfb      	adds	r3, r7, #7
 801aaa8:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d101      	bne.n	801aab4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801aab0:	2302      	movs	r3, #2
 801aab2:	e020      	b.n	801aaf6 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801aab4:	68fa      	ldr	r2, [r7, #12]
 801aab6:	23ad      	movs	r3, #173	@ 0xad
 801aab8:	009b      	lsls	r3, r3, #2
 801aaba:	58d3      	ldr	r3, [r2, r3]
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	d004      	beq.n	801aaca <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801aac0:	68fa      	ldr	r2, [r7, #12]
 801aac2:	23ad      	movs	r3, #173	@ 0xad
 801aac4:	009b      	lsls	r3, r3, #2
 801aac6:	2100      	movs	r1, #0
 801aac8:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801aaca:	68bb      	ldr	r3, [r7, #8]
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d004      	beq.n	801aada <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801aad0:	68fa      	ldr	r2, [r7, #12]
 801aad2:	23ac      	movs	r3, #172	@ 0xac
 801aad4:	009b      	lsls	r3, r3, #2
 801aad6:	68b9      	ldr	r1, [r7, #8]
 801aad8:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801aada:	68fa      	ldr	r2, [r7, #12]
 801aadc:	23a7      	movs	r3, #167	@ 0xa7
 801aade:	009b      	lsls	r3, r3, #2
 801aae0:	2101      	movs	r1, #1
 801aae2:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	1dfa      	adds	r2, r7, #7
 801aae8:	7812      	ldrb	r2, [r2, #0]
 801aaea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	0018      	movs	r0, r3
 801aaf0:	f001 fd0c 	bl	801c50c <USBD_LL_Init>

  return USBD_OK;
 801aaf4:	2300      	movs	r3, #0
}
 801aaf6:	0018      	movs	r0, r3
 801aaf8:	46bd      	mov	sp, r7
 801aafa:	b004      	add	sp, #16
 801aafc:	bd80      	pop	{r7, pc}

0801aafe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801aafe:	b580      	push	{r7, lr}
 801ab00:	b084      	sub	sp, #16
 801ab02:	af00      	add	r7, sp, #0
 801ab04:	6078      	str	r0, [r7, #4]
 801ab06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801ab08:	200f      	movs	r0, #15
 801ab0a:	183b      	adds	r3, r7, r0
 801ab0c:	2200      	movs	r2, #0
 801ab0e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801ab10:	683b      	ldr	r3, [r7, #0]
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d008      	beq.n	801ab28 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801ab16:	687a      	ldr	r2, [r7, #4]
 801ab18:	23ad      	movs	r3, #173	@ 0xad
 801ab1a:	009b      	lsls	r3, r3, #2
 801ab1c:	6839      	ldr	r1, [r7, #0]
 801ab1e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801ab20:	183b      	adds	r3, r7, r0
 801ab22:	2200      	movs	r2, #0
 801ab24:	701a      	strb	r2, [r3, #0]
 801ab26:	e003      	b.n	801ab30 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801ab28:	230f      	movs	r3, #15
 801ab2a:	18fb      	adds	r3, r7, r3
 801ab2c:	2202      	movs	r2, #2
 801ab2e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801ab30:	230f      	movs	r3, #15
 801ab32:	18fb      	adds	r3, r7, r3
 801ab34:	781b      	ldrb	r3, [r3, #0]
}
 801ab36:	0018      	movs	r0, r3
 801ab38:	46bd      	mov	sp, r7
 801ab3a:	b004      	add	sp, #16
 801ab3c:	bd80      	pop	{r7, pc}

0801ab3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801ab3e:	b580      	push	{r7, lr}
 801ab40:	b082      	sub	sp, #8
 801ab42:	af00      	add	r7, sp, #0
 801ab44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	0018      	movs	r0, r3
 801ab4a:	f001 fd43 	bl	801c5d4 <USBD_LL_Start>

  return USBD_OK;
 801ab4e:	2300      	movs	r3, #0
}
 801ab50:	0018      	movs	r0, r3
 801ab52:	46bd      	mov	sp, r7
 801ab54:	b002      	add	sp, #8
 801ab56:	bd80      	pop	{r7, pc}

0801ab58 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801ab58:	b580      	push	{r7, lr}
 801ab5a:	b082      	sub	sp, #8
 801ab5c:	af00      	add	r7, sp, #0
 801ab5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801ab60:	2300      	movs	r3, #0
}
 801ab62:	0018      	movs	r0, r3
 801ab64:	46bd      	mov	sp, r7
 801ab66:	b002      	add	sp, #8
 801ab68:	bd80      	pop	{r7, pc}

0801ab6a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801ab6a:	b590      	push	{r4, r7, lr}
 801ab6c:	b085      	sub	sp, #20
 801ab6e:	af00      	add	r7, sp, #0
 801ab70:	6078      	str	r0, [r7, #4]
 801ab72:	000a      	movs	r2, r1
 801ab74:	1cfb      	adds	r3, r7, #3
 801ab76:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801ab78:	240f      	movs	r4, #15
 801ab7a:	193b      	adds	r3, r7, r4
 801ab7c:	2202      	movs	r2, #2
 801ab7e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801ab80:	687a      	ldr	r2, [r7, #4]
 801ab82:	23ad      	movs	r3, #173	@ 0xad
 801ab84:	009b      	lsls	r3, r3, #2
 801ab86:	58d3      	ldr	r3, [r2, r3]
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	d00e      	beq.n	801abaa <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801ab8c:	687a      	ldr	r2, [r7, #4]
 801ab8e:	23ad      	movs	r3, #173	@ 0xad
 801ab90:	009b      	lsls	r3, r3, #2
 801ab92:	58d3      	ldr	r3, [r2, r3]
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	1cfa      	adds	r2, r7, #3
 801ab98:	7811      	ldrb	r1, [r2, #0]
 801ab9a:	687a      	ldr	r2, [r7, #4]
 801ab9c:	0010      	movs	r0, r2
 801ab9e:	4798      	blx	r3
 801aba0:	1e03      	subs	r3, r0, #0
 801aba2:	d102      	bne.n	801abaa <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801aba4:	193b      	adds	r3, r7, r4
 801aba6:	2200      	movs	r2, #0
 801aba8:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801abaa:	230f      	movs	r3, #15
 801abac:	18fb      	adds	r3, r7, r3
 801abae:	781b      	ldrb	r3, [r3, #0]
}
 801abb0:	0018      	movs	r0, r3
 801abb2:	46bd      	mov	sp, r7
 801abb4:	b005      	add	sp, #20
 801abb6:	bd90      	pop	{r4, r7, pc}

0801abb8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801abb8:	b580      	push	{r7, lr}
 801abba:	b082      	sub	sp, #8
 801abbc:	af00      	add	r7, sp, #0
 801abbe:	6078      	str	r0, [r7, #4]
 801abc0:	000a      	movs	r2, r1
 801abc2:	1cfb      	adds	r3, r7, #3
 801abc4:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801abc6:	687a      	ldr	r2, [r7, #4]
 801abc8:	23ad      	movs	r3, #173	@ 0xad
 801abca:	009b      	lsls	r3, r3, #2
 801abcc:	58d3      	ldr	r3, [r2, r3]
 801abce:	685b      	ldr	r3, [r3, #4]
 801abd0:	1cfa      	adds	r2, r7, #3
 801abd2:	7811      	ldrb	r1, [r2, #0]
 801abd4:	687a      	ldr	r2, [r7, #4]
 801abd6:	0010      	movs	r0, r2
 801abd8:	4798      	blx	r3

  return USBD_OK;
 801abda:	2300      	movs	r3, #0
}
 801abdc:	0018      	movs	r0, r3
 801abde:	46bd      	mov	sp, r7
 801abe0:	b002      	add	sp, #8
 801abe2:	bd80      	pop	{r7, pc}

0801abe4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801abe4:	b580      	push	{r7, lr}
 801abe6:	b082      	sub	sp, #8
 801abe8:	af00      	add	r7, sp, #0
 801abea:	6078      	str	r0, [r7, #4]
 801abec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	22aa      	movs	r2, #170	@ 0xaa
 801abf2:	0092      	lsls	r2, r2, #2
 801abf4:	4694      	mov	ip, r2
 801abf6:	4463      	add	r3, ip
 801abf8:	683a      	ldr	r2, [r7, #0]
 801abfa:	0011      	movs	r1, r2
 801abfc:	0018      	movs	r0, r3
 801abfe:	f001 f810 	bl	801bc22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801ac02:	687a      	ldr	r2, [r7, #4]
 801ac04:	23a5      	movs	r3, #165	@ 0xa5
 801ac06:	009b      	lsls	r3, r3, #2
 801ac08:	2101      	movs	r1, #1
 801ac0a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	4a23      	ldr	r2, [pc, #140]	@ (801ac9c <USBD_LL_SetupStage+0xb8>)
 801ac10:	5a9b      	ldrh	r3, [r3, r2]
 801ac12:	0019      	movs	r1, r3
 801ac14:	687a      	ldr	r2, [r7, #4]
 801ac16:	23a6      	movs	r3, #166	@ 0xa6
 801ac18:	009b      	lsls	r3, r3, #2
 801ac1a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801ac1c:	687a      	ldr	r2, [r7, #4]
 801ac1e:	23aa      	movs	r3, #170	@ 0xaa
 801ac20:	009b      	lsls	r3, r3, #2
 801ac22:	5cd3      	ldrb	r3, [r2, r3]
 801ac24:	001a      	movs	r2, r3
 801ac26:	231f      	movs	r3, #31
 801ac28:	4013      	ands	r3, r2
 801ac2a:	2b02      	cmp	r3, #2
 801ac2c:	d019      	beq.n	801ac62 <USBD_LL_SetupStage+0x7e>
 801ac2e:	d822      	bhi.n	801ac76 <USBD_LL_SetupStage+0x92>
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	d002      	beq.n	801ac3a <USBD_LL_SetupStage+0x56>
 801ac34:	2b01      	cmp	r3, #1
 801ac36:	d00a      	beq.n	801ac4e <USBD_LL_SetupStage+0x6a>
 801ac38:	e01d      	b.n	801ac76 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	22aa      	movs	r2, #170	@ 0xaa
 801ac3e:	0092      	lsls	r2, r2, #2
 801ac40:	189a      	adds	r2, r3, r2
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	0011      	movs	r1, r2
 801ac46:	0018      	movs	r0, r3
 801ac48:	f000 fa10 	bl	801b06c <USBD_StdDevReq>
      break;
 801ac4c:	e020      	b.n	801ac90 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	22aa      	movs	r2, #170	@ 0xaa
 801ac52:	0092      	lsls	r2, r2, #2
 801ac54:	189a      	adds	r2, r3, r2
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	0011      	movs	r1, r2
 801ac5a:	0018      	movs	r0, r3
 801ac5c:	f000 fa78 	bl	801b150 <USBD_StdItfReq>
      break;
 801ac60:	e016      	b.n	801ac90 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	22aa      	movs	r2, #170	@ 0xaa
 801ac66:	0092      	lsls	r2, r2, #2
 801ac68:	189a      	adds	r2, r3, r2
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	0011      	movs	r1, r2
 801ac6e:	0018      	movs	r0, r3
 801ac70:	f000 fac5 	bl	801b1fe <USBD_StdEPReq>
      break;
 801ac74:	e00c      	b.n	801ac90 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801ac76:	687a      	ldr	r2, [r7, #4]
 801ac78:	23aa      	movs	r3, #170	@ 0xaa
 801ac7a:	009b      	lsls	r3, r3, #2
 801ac7c:	5cd3      	ldrb	r3, [r2, r3]
 801ac7e:	227f      	movs	r2, #127	@ 0x7f
 801ac80:	4393      	bics	r3, r2
 801ac82:	b2da      	uxtb	r2, r3
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	0011      	movs	r1, r2
 801ac88:	0018      	movs	r0, r3
 801ac8a:	f001 fd2a 	bl	801c6e2 <USBD_LL_StallEP>
      break;
 801ac8e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801ac90:	2300      	movs	r3, #0
}
 801ac92:	0018      	movs	r0, r3
 801ac94:	46bd      	mov	sp, r7
 801ac96:	b002      	add	sp, #8
 801ac98:	bd80      	pop	{r7, pc}
 801ac9a:	46c0      	nop			@ (mov r8, r8)
 801ac9c:	000002ae 	.word	0x000002ae

0801aca0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801aca0:	b580      	push	{r7, lr}
 801aca2:	b086      	sub	sp, #24
 801aca4:	af00      	add	r7, sp, #0
 801aca6:	60f8      	str	r0, [r7, #12]
 801aca8:	607a      	str	r2, [r7, #4]
 801acaa:	200b      	movs	r0, #11
 801acac:	183b      	adds	r3, r7, r0
 801acae:	1c0a      	adds	r2, r1, #0
 801acb0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801acb2:	183b      	adds	r3, r7, r0
 801acb4:	781b      	ldrb	r3, [r3, #0]
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d154      	bne.n	801ad64 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801acba:	68fb      	ldr	r3, [r7, #12]
 801acbc:	3355      	adds	r3, #85	@ 0x55
 801acbe:	33ff      	adds	r3, #255	@ 0xff
 801acc0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801acc2:	68fa      	ldr	r2, [r7, #12]
 801acc4:	23a5      	movs	r3, #165	@ 0xa5
 801acc6:	009b      	lsls	r3, r3, #2
 801acc8:	58d3      	ldr	r3, [r2, r3]
 801acca:	2b03      	cmp	r3, #3
 801accc:	d139      	bne.n	801ad42 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801acce:	697b      	ldr	r3, [r7, #20]
 801acd0:	68da      	ldr	r2, [r3, #12]
 801acd2:	697b      	ldr	r3, [r7, #20]
 801acd4:	691b      	ldr	r3, [r3, #16]
 801acd6:	429a      	cmp	r2, r3
 801acd8:	d919      	bls.n	801ad0e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801acda:	697b      	ldr	r3, [r7, #20]
 801acdc:	68da      	ldr	r2, [r3, #12]
 801acde:	697b      	ldr	r3, [r7, #20]
 801ace0:	691b      	ldr	r3, [r3, #16]
 801ace2:	1ad2      	subs	r2, r2, r3
 801ace4:	697b      	ldr	r3, [r7, #20]
 801ace6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801ace8:	697b      	ldr	r3, [r7, #20]
 801acea:	68da      	ldr	r2, [r3, #12]
 801acec:	697b      	ldr	r3, [r7, #20]
 801acee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801acf0:	429a      	cmp	r2, r3
 801acf2:	d203      	bcs.n	801acfc <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801acf4:	697b      	ldr	r3, [r7, #20]
 801acf6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801acf8:	b29b      	uxth	r3, r3
 801acfa:	e002      	b.n	801ad02 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801acfc:	697b      	ldr	r3, [r7, #20]
 801acfe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801ad00:	b29b      	uxth	r3, r3
 801ad02:	6879      	ldr	r1, [r7, #4]
 801ad04:	68f8      	ldr	r0, [r7, #12]
 801ad06:	001a      	movs	r2, r3
 801ad08:	f001 f898 	bl	801be3c <USBD_CtlContinueRx>
 801ad0c:	e045      	b.n	801ad9a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801ad0e:	68fa      	ldr	r2, [r7, #12]
 801ad10:	23ad      	movs	r3, #173	@ 0xad
 801ad12:	009b      	lsls	r3, r3, #2
 801ad14:	58d3      	ldr	r3, [r2, r3]
 801ad16:	691b      	ldr	r3, [r3, #16]
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d00d      	beq.n	801ad38 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ad1c:	68fa      	ldr	r2, [r7, #12]
 801ad1e:	23a7      	movs	r3, #167	@ 0xa7
 801ad20:	009b      	lsls	r3, r3, #2
 801ad22:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801ad24:	2b03      	cmp	r3, #3
 801ad26:	d107      	bne.n	801ad38 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801ad28:	68fa      	ldr	r2, [r7, #12]
 801ad2a:	23ad      	movs	r3, #173	@ 0xad
 801ad2c:	009b      	lsls	r3, r3, #2
 801ad2e:	58d3      	ldr	r3, [r2, r3]
 801ad30:	691b      	ldr	r3, [r3, #16]
 801ad32:	68fa      	ldr	r2, [r7, #12]
 801ad34:	0010      	movs	r0, r2
 801ad36:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	0018      	movs	r0, r3
 801ad3c:	f001 f891 	bl	801be62 <USBD_CtlSendStatus>
 801ad40:	e02b      	b.n	801ad9a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801ad42:	68fa      	ldr	r2, [r7, #12]
 801ad44:	23a5      	movs	r3, #165	@ 0xa5
 801ad46:	009b      	lsls	r3, r3, #2
 801ad48:	58d3      	ldr	r3, [r2, r3]
 801ad4a:	2b05      	cmp	r3, #5
 801ad4c:	d125      	bne.n	801ad9a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801ad4e:	68fa      	ldr	r2, [r7, #12]
 801ad50:	23a5      	movs	r3, #165	@ 0xa5
 801ad52:	009b      	lsls	r3, r3, #2
 801ad54:	2100      	movs	r1, #0
 801ad56:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	2100      	movs	r1, #0
 801ad5c:	0018      	movs	r0, r3
 801ad5e:	f001 fcc0 	bl	801c6e2 <USBD_LL_StallEP>
 801ad62:	e01a      	b.n	801ad9a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801ad64:	68fa      	ldr	r2, [r7, #12]
 801ad66:	23ad      	movs	r3, #173	@ 0xad
 801ad68:	009b      	lsls	r3, r3, #2
 801ad6a:	58d3      	ldr	r3, [r2, r3]
 801ad6c:	699b      	ldr	r3, [r3, #24]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d011      	beq.n	801ad96 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ad72:	68fa      	ldr	r2, [r7, #12]
 801ad74:	23a7      	movs	r3, #167	@ 0xa7
 801ad76:	009b      	lsls	r3, r3, #2
 801ad78:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801ad7a:	2b03      	cmp	r3, #3
 801ad7c:	d10b      	bne.n	801ad96 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801ad7e:	68fa      	ldr	r2, [r7, #12]
 801ad80:	23ad      	movs	r3, #173	@ 0xad
 801ad82:	009b      	lsls	r3, r3, #2
 801ad84:	58d3      	ldr	r3, [r2, r3]
 801ad86:	699b      	ldr	r3, [r3, #24]
 801ad88:	220b      	movs	r2, #11
 801ad8a:	18ba      	adds	r2, r7, r2
 801ad8c:	7811      	ldrb	r1, [r2, #0]
 801ad8e:	68fa      	ldr	r2, [r7, #12]
 801ad90:	0010      	movs	r0, r2
 801ad92:	4798      	blx	r3
 801ad94:	e001      	b.n	801ad9a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801ad96:	2302      	movs	r3, #2
 801ad98:	e000      	b.n	801ad9c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801ad9a:	2300      	movs	r3, #0
}
 801ad9c:	0018      	movs	r0, r3
 801ad9e:	46bd      	mov	sp, r7
 801ada0:	b006      	add	sp, #24
 801ada2:	bd80      	pop	{r7, pc}

0801ada4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801ada4:	b580      	push	{r7, lr}
 801ada6:	b086      	sub	sp, #24
 801ada8:	af00      	add	r7, sp, #0
 801adaa:	60f8      	str	r0, [r7, #12]
 801adac:	607a      	str	r2, [r7, #4]
 801adae:	200b      	movs	r0, #11
 801adb0:	183b      	adds	r3, r7, r0
 801adb2:	1c0a      	adds	r2, r1, #0
 801adb4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801adb6:	183b      	adds	r3, r7, r0
 801adb8:	781b      	ldrb	r3, [r3, #0]
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d000      	beq.n	801adc0 <USBD_LL_DataInStage+0x1c>
 801adbe:	e08e      	b.n	801aede <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801adc0:	68fb      	ldr	r3, [r7, #12]
 801adc2:	3314      	adds	r3, #20
 801adc4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801adc6:	68fa      	ldr	r2, [r7, #12]
 801adc8:	23a5      	movs	r3, #165	@ 0xa5
 801adca:	009b      	lsls	r3, r3, #2
 801adcc:	58d3      	ldr	r3, [r2, r3]
 801adce:	2b02      	cmp	r3, #2
 801add0:	d164      	bne.n	801ae9c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801add2:	697b      	ldr	r3, [r7, #20]
 801add4:	68da      	ldr	r2, [r3, #12]
 801add6:	697b      	ldr	r3, [r7, #20]
 801add8:	691b      	ldr	r3, [r3, #16]
 801adda:	429a      	cmp	r2, r3
 801addc:	d915      	bls.n	801ae0a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801adde:	697b      	ldr	r3, [r7, #20]
 801ade0:	68da      	ldr	r2, [r3, #12]
 801ade2:	697b      	ldr	r3, [r7, #20]
 801ade4:	691b      	ldr	r3, [r3, #16]
 801ade6:	1ad2      	subs	r2, r2, r3
 801ade8:	697b      	ldr	r3, [r7, #20]
 801adea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801adec:	697b      	ldr	r3, [r7, #20]
 801adee:	68db      	ldr	r3, [r3, #12]
 801adf0:	b29a      	uxth	r2, r3
 801adf2:	6879      	ldr	r1, [r7, #4]
 801adf4:	68fb      	ldr	r3, [r7, #12]
 801adf6:	0018      	movs	r0, r3
 801adf8:	f000 ffe9 	bl	801bdce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801adfc:	68f8      	ldr	r0, [r7, #12]
 801adfe:	2300      	movs	r3, #0
 801ae00:	2200      	movs	r2, #0
 801ae02:	2100      	movs	r1, #0
 801ae04:	f001 fd56 	bl	801c8b4 <USBD_LL_PrepareReceive>
 801ae08:	e059      	b.n	801aebe <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801ae0a:	697b      	ldr	r3, [r7, #20]
 801ae0c:	689a      	ldr	r2, [r3, #8]
 801ae0e:	697b      	ldr	r3, [r7, #20]
 801ae10:	691b      	ldr	r3, [r3, #16]
 801ae12:	0019      	movs	r1, r3
 801ae14:	0010      	movs	r0, r2
 801ae16:	f7e5 fa4b 	bl	80002b0 <__aeabi_uidivmod>
 801ae1a:	1e0b      	subs	r3, r1, #0
 801ae1c:	d11f      	bne.n	801ae5e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801ae1e:	697b      	ldr	r3, [r7, #20]
 801ae20:	689a      	ldr	r2, [r3, #8]
 801ae22:	697b      	ldr	r3, [r7, #20]
 801ae24:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801ae26:	429a      	cmp	r2, r3
 801ae28:	d319      	bcc.n	801ae5e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801ae2a:	697b      	ldr	r3, [r7, #20]
 801ae2c:	689a      	ldr	r2, [r3, #8]
 801ae2e:	68f9      	ldr	r1, [r7, #12]
 801ae30:	23a6      	movs	r3, #166	@ 0xa6
 801ae32:	009b      	lsls	r3, r3, #2
 801ae34:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801ae36:	429a      	cmp	r2, r3
 801ae38:	d211      	bcs.n	801ae5e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801ae3a:	68fb      	ldr	r3, [r7, #12]
 801ae3c:	2200      	movs	r2, #0
 801ae3e:	2100      	movs	r1, #0
 801ae40:	0018      	movs	r0, r3
 801ae42:	f000 ffc4 	bl	801bdce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801ae46:	68fa      	ldr	r2, [r7, #12]
 801ae48:	23a6      	movs	r3, #166	@ 0xa6
 801ae4a:	009b      	lsls	r3, r3, #2
 801ae4c:	2100      	movs	r1, #0
 801ae4e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801ae50:	68f8      	ldr	r0, [r7, #12]
 801ae52:	2300      	movs	r3, #0
 801ae54:	2200      	movs	r2, #0
 801ae56:	2100      	movs	r1, #0
 801ae58:	f001 fd2c 	bl	801c8b4 <USBD_LL_PrepareReceive>
 801ae5c:	e02f      	b.n	801aebe <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801ae5e:	68fa      	ldr	r2, [r7, #12]
 801ae60:	23ad      	movs	r3, #173	@ 0xad
 801ae62:	009b      	lsls	r3, r3, #2
 801ae64:	58d3      	ldr	r3, [r2, r3]
 801ae66:	68db      	ldr	r3, [r3, #12]
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d00d      	beq.n	801ae88 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ae6c:	68fa      	ldr	r2, [r7, #12]
 801ae6e:	23a7      	movs	r3, #167	@ 0xa7
 801ae70:	009b      	lsls	r3, r3, #2
 801ae72:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801ae74:	2b03      	cmp	r3, #3
 801ae76:	d107      	bne.n	801ae88 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801ae78:	68fa      	ldr	r2, [r7, #12]
 801ae7a:	23ad      	movs	r3, #173	@ 0xad
 801ae7c:	009b      	lsls	r3, r3, #2
 801ae7e:	58d3      	ldr	r3, [r2, r3]
 801ae80:	68db      	ldr	r3, [r3, #12]
 801ae82:	68fa      	ldr	r2, [r7, #12]
 801ae84:	0010      	movs	r0, r2
 801ae86:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801ae88:	68fb      	ldr	r3, [r7, #12]
 801ae8a:	2180      	movs	r1, #128	@ 0x80
 801ae8c:	0018      	movs	r0, r3
 801ae8e:	f001 fc28 	bl	801c6e2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	0018      	movs	r0, r3
 801ae96:	f000 fff8 	bl	801be8a <USBD_CtlReceiveStatus>
 801ae9a:	e010      	b.n	801aebe <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801ae9c:	68fa      	ldr	r2, [r7, #12]
 801ae9e:	23a5      	movs	r3, #165	@ 0xa5
 801aea0:	009b      	lsls	r3, r3, #2
 801aea2:	58d3      	ldr	r3, [r2, r3]
 801aea4:	2b04      	cmp	r3, #4
 801aea6:	d005      	beq.n	801aeb4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801aea8:	68fa      	ldr	r2, [r7, #12]
 801aeaa:	23a5      	movs	r3, #165	@ 0xa5
 801aeac:	009b      	lsls	r3, r3, #2
 801aeae:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d104      	bne.n	801aebe <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	2180      	movs	r1, #128	@ 0x80
 801aeb8:	0018      	movs	r0, r3
 801aeba:	f001 fc12 	bl	801c6e2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801aebe:	68fa      	ldr	r2, [r7, #12]
 801aec0:	23a8      	movs	r3, #168	@ 0xa8
 801aec2:	009b      	lsls	r3, r3, #2
 801aec4:	5cd3      	ldrb	r3, [r2, r3]
 801aec6:	2b01      	cmp	r3, #1
 801aec8:	d124      	bne.n	801af14 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	0018      	movs	r0, r3
 801aece:	f7ff fe43 	bl	801ab58 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801aed2:	68fa      	ldr	r2, [r7, #12]
 801aed4:	23a8      	movs	r3, #168	@ 0xa8
 801aed6:	009b      	lsls	r3, r3, #2
 801aed8:	2100      	movs	r1, #0
 801aeda:	54d1      	strb	r1, [r2, r3]
 801aedc:	e01a      	b.n	801af14 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801aede:	68fa      	ldr	r2, [r7, #12]
 801aee0:	23ad      	movs	r3, #173	@ 0xad
 801aee2:	009b      	lsls	r3, r3, #2
 801aee4:	58d3      	ldr	r3, [r2, r3]
 801aee6:	695b      	ldr	r3, [r3, #20]
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d011      	beq.n	801af10 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801aeec:	68fa      	ldr	r2, [r7, #12]
 801aeee:	23a7      	movs	r3, #167	@ 0xa7
 801aef0:	009b      	lsls	r3, r3, #2
 801aef2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801aef4:	2b03      	cmp	r3, #3
 801aef6:	d10b      	bne.n	801af10 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801aef8:	68fa      	ldr	r2, [r7, #12]
 801aefa:	23ad      	movs	r3, #173	@ 0xad
 801aefc:	009b      	lsls	r3, r3, #2
 801aefe:	58d3      	ldr	r3, [r2, r3]
 801af00:	695b      	ldr	r3, [r3, #20]
 801af02:	220b      	movs	r2, #11
 801af04:	18ba      	adds	r2, r7, r2
 801af06:	7811      	ldrb	r1, [r2, #0]
 801af08:	68fa      	ldr	r2, [r7, #12]
 801af0a:	0010      	movs	r0, r2
 801af0c:	4798      	blx	r3
 801af0e:	e001      	b.n	801af14 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801af10:	2302      	movs	r3, #2
 801af12:	e000      	b.n	801af16 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801af14:	2300      	movs	r3, #0
}
 801af16:	0018      	movs	r0, r3
 801af18:	46bd      	mov	sp, r7
 801af1a:	b006      	add	sp, #24
 801af1c:	bd80      	pop	{r7, pc}

0801af1e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801af1e:	b580      	push	{r7, lr}
 801af20:	b082      	sub	sp, #8
 801af22:	af00      	add	r7, sp, #0
 801af24:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801af26:	6878      	ldr	r0, [r7, #4]
 801af28:	2340      	movs	r3, #64	@ 0x40
 801af2a:	2200      	movs	r2, #0
 801af2c:	2100      	movs	r1, #0
 801af2e:	f001 fb76 	bl	801c61e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801af32:	687a      	ldr	r2, [r7, #4]
 801af34:	23ac      	movs	r3, #172	@ 0xac
 801af36:	005b      	lsls	r3, r3, #1
 801af38:	2101      	movs	r1, #1
 801af3a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801af3c:	687a      	ldr	r2, [r7, #4]
 801af3e:	23b2      	movs	r3, #178	@ 0xb2
 801af40:	005b      	lsls	r3, r3, #1
 801af42:	2140      	movs	r1, #64	@ 0x40
 801af44:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801af46:	6878      	ldr	r0, [r7, #4]
 801af48:	2340      	movs	r3, #64	@ 0x40
 801af4a:	2200      	movs	r2, #0
 801af4c:	2180      	movs	r1, #128	@ 0x80
 801af4e:	f001 fb66 	bl	801c61e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	2201      	movs	r2, #1
 801af56:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	2240      	movs	r2, #64	@ 0x40
 801af5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801af5e:	687a      	ldr	r2, [r7, #4]
 801af60:	23a7      	movs	r3, #167	@ 0xa7
 801af62:	009b      	lsls	r3, r3, #2
 801af64:	2101      	movs	r1, #1
 801af66:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801af68:	687a      	ldr	r2, [r7, #4]
 801af6a:	23a5      	movs	r3, #165	@ 0xa5
 801af6c:	009b      	lsls	r3, r3, #2
 801af6e:	2100      	movs	r1, #0
 801af70:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	2200      	movs	r2, #0
 801af76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801af78:	687a      	ldr	r2, [r7, #4]
 801af7a:	23a9      	movs	r3, #169	@ 0xa9
 801af7c:	009b      	lsls	r3, r3, #2
 801af7e:	2100      	movs	r1, #0
 801af80:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801af82:	687a      	ldr	r2, [r7, #4]
 801af84:	23ae      	movs	r3, #174	@ 0xae
 801af86:	009b      	lsls	r3, r3, #2
 801af88:	58d3      	ldr	r3, [r2, r3]
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	d00a      	beq.n	801afa4 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801af8e:	687a      	ldr	r2, [r7, #4]
 801af90:	23ad      	movs	r3, #173	@ 0xad
 801af92:	009b      	lsls	r3, r3, #2
 801af94:	58d3      	ldr	r3, [r2, r3]
 801af96:	685a      	ldr	r2, [r3, #4]
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	685b      	ldr	r3, [r3, #4]
 801af9c:	b2d9      	uxtb	r1, r3
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	0018      	movs	r0, r3
 801afa2:	4790      	blx	r2
  }

  return USBD_OK;
 801afa4:	2300      	movs	r3, #0
}
 801afa6:	0018      	movs	r0, r3
 801afa8:	46bd      	mov	sp, r7
 801afaa:	b002      	add	sp, #8
 801afac:	bd80      	pop	{r7, pc}

0801afae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801afae:	b580      	push	{r7, lr}
 801afb0:	b082      	sub	sp, #8
 801afb2:	af00      	add	r7, sp, #0
 801afb4:	6078      	str	r0, [r7, #4]
 801afb6:	000a      	movs	r2, r1
 801afb8:	1cfb      	adds	r3, r7, #3
 801afba:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	1cfa      	adds	r2, r7, #3
 801afc0:	7812      	ldrb	r2, [r2, #0]
 801afc2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801afc4:	2300      	movs	r3, #0
}
 801afc6:	0018      	movs	r0, r3
 801afc8:	46bd      	mov	sp, r7
 801afca:	b002      	add	sp, #8
 801afcc:	bd80      	pop	{r7, pc}
	...

0801afd0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	b082      	sub	sp, #8
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801afd8:	687a      	ldr	r2, [r7, #4]
 801afda:	23a7      	movs	r3, #167	@ 0xa7
 801afdc:	009b      	lsls	r3, r3, #2
 801afde:	5cd1      	ldrb	r1, [r2, r3]
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	4a06      	ldr	r2, [pc, #24]	@ (801affc <USBD_LL_Suspend+0x2c>)
 801afe4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801afe6:	687a      	ldr	r2, [r7, #4]
 801afe8:	23a7      	movs	r3, #167	@ 0xa7
 801afea:	009b      	lsls	r3, r3, #2
 801afec:	2104      	movs	r1, #4
 801afee:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801aff0:	2300      	movs	r3, #0
}
 801aff2:	0018      	movs	r0, r3
 801aff4:	46bd      	mov	sp, r7
 801aff6:	b002      	add	sp, #8
 801aff8:	bd80      	pop	{r7, pc}
 801affa:	46c0      	nop			@ (mov r8, r8)
 801affc:	0000029d 	.word	0x0000029d

0801b000 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801b000:	b580      	push	{r7, lr}
 801b002:	b082      	sub	sp, #8
 801b004:	af00      	add	r7, sp, #0
 801b006:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801b008:	687a      	ldr	r2, [r7, #4]
 801b00a:	23a7      	movs	r3, #167	@ 0xa7
 801b00c:	009b      	lsls	r3, r3, #2
 801b00e:	5cd3      	ldrb	r3, [r2, r3]
 801b010:	2b04      	cmp	r3, #4
 801b012:	d106      	bne.n	801b022 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	4a05      	ldr	r2, [pc, #20]	@ (801b02c <USBD_LL_Resume+0x2c>)
 801b018:	5c99      	ldrb	r1, [r3, r2]
 801b01a:	687a      	ldr	r2, [r7, #4]
 801b01c:	23a7      	movs	r3, #167	@ 0xa7
 801b01e:	009b      	lsls	r3, r3, #2
 801b020:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801b022:	2300      	movs	r3, #0
}
 801b024:	0018      	movs	r0, r3
 801b026:	46bd      	mov	sp, r7
 801b028:	b002      	add	sp, #8
 801b02a:	bd80      	pop	{r7, pc}
 801b02c:	0000029d 	.word	0x0000029d

0801b030 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801b030:	b580      	push	{r7, lr}
 801b032:	b082      	sub	sp, #8
 801b034:	af00      	add	r7, sp, #0
 801b036:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b038:	687a      	ldr	r2, [r7, #4]
 801b03a:	23a7      	movs	r3, #167	@ 0xa7
 801b03c:	009b      	lsls	r3, r3, #2
 801b03e:	5cd3      	ldrb	r3, [r2, r3]
 801b040:	2b03      	cmp	r3, #3
 801b042:	d10e      	bne.n	801b062 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801b044:	687a      	ldr	r2, [r7, #4]
 801b046:	23ad      	movs	r3, #173	@ 0xad
 801b048:	009b      	lsls	r3, r3, #2
 801b04a:	58d3      	ldr	r3, [r2, r3]
 801b04c:	69db      	ldr	r3, [r3, #28]
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d007      	beq.n	801b062 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801b052:	687a      	ldr	r2, [r7, #4]
 801b054:	23ad      	movs	r3, #173	@ 0xad
 801b056:	009b      	lsls	r3, r3, #2
 801b058:	58d3      	ldr	r3, [r2, r3]
 801b05a:	69db      	ldr	r3, [r3, #28]
 801b05c:	687a      	ldr	r2, [r7, #4]
 801b05e:	0010      	movs	r0, r2
 801b060:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801b062:	2300      	movs	r3, #0
}
 801b064:	0018      	movs	r0, r3
 801b066:	46bd      	mov	sp, r7
 801b068:	b002      	add	sp, #8
 801b06a:	bd80      	pop	{r7, pc}

0801b06c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801b06c:	b580      	push	{r7, lr}
 801b06e:	b084      	sub	sp, #16
 801b070:	af00      	add	r7, sp, #0
 801b072:	6078      	str	r0, [r7, #4]
 801b074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b076:	230f      	movs	r3, #15
 801b078:	18fb      	adds	r3, r7, r3
 801b07a:	2200      	movs	r2, #0
 801b07c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b07e:	683b      	ldr	r3, [r7, #0]
 801b080:	781b      	ldrb	r3, [r3, #0]
 801b082:	001a      	movs	r2, r3
 801b084:	2360      	movs	r3, #96	@ 0x60
 801b086:	4013      	ands	r3, r2
 801b088:	2b40      	cmp	r3, #64	@ 0x40
 801b08a:	d004      	beq.n	801b096 <USBD_StdDevReq+0x2a>
 801b08c:	d84f      	bhi.n	801b12e <USBD_StdDevReq+0xc2>
 801b08e:	2b00      	cmp	r3, #0
 801b090:	d00b      	beq.n	801b0aa <USBD_StdDevReq+0x3e>
 801b092:	2b20      	cmp	r3, #32
 801b094:	d14b      	bne.n	801b12e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801b096:	687a      	ldr	r2, [r7, #4]
 801b098:	23ad      	movs	r3, #173	@ 0xad
 801b09a:	009b      	lsls	r3, r3, #2
 801b09c:	58d3      	ldr	r3, [r2, r3]
 801b09e:	689b      	ldr	r3, [r3, #8]
 801b0a0:	6839      	ldr	r1, [r7, #0]
 801b0a2:	687a      	ldr	r2, [r7, #4]
 801b0a4:	0010      	movs	r0, r2
 801b0a6:	4798      	blx	r3
      break;
 801b0a8:	e048      	b.n	801b13c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b0aa:	683b      	ldr	r3, [r7, #0]
 801b0ac:	785b      	ldrb	r3, [r3, #1]
 801b0ae:	2b09      	cmp	r3, #9
 801b0b0:	d835      	bhi.n	801b11e <USBD_StdDevReq+0xb2>
 801b0b2:	009a      	lsls	r2, r3, #2
 801b0b4:	4b25      	ldr	r3, [pc, #148]	@ (801b14c <USBD_StdDevReq+0xe0>)
 801b0b6:	18d3      	adds	r3, r2, r3
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801b0bc:	683a      	ldr	r2, [r7, #0]
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	0011      	movs	r1, r2
 801b0c2:	0018      	movs	r0, r3
 801b0c4:	f000 fa52 	bl	801b56c <USBD_GetDescriptor>
          break;
 801b0c8:	e030      	b.n	801b12c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801b0ca:	683a      	ldr	r2, [r7, #0]
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	0011      	movs	r1, r2
 801b0d0:	0018      	movs	r0, r3
 801b0d2:	f000 fbfd 	bl	801b8d0 <USBD_SetAddress>
          break;
 801b0d6:	e029      	b.n	801b12c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801b0d8:	683a      	ldr	r2, [r7, #0]
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	0011      	movs	r1, r2
 801b0de:	0018      	movs	r0, r3
 801b0e0:	f000 fc4a 	bl	801b978 <USBD_SetConfig>
          break;
 801b0e4:	e022      	b.n	801b12c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801b0e6:	683a      	ldr	r2, [r7, #0]
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	0011      	movs	r1, r2
 801b0ec:	0018      	movs	r0, r3
 801b0ee:	f000 fce7 	bl	801bac0 <USBD_GetConfig>
          break;
 801b0f2:	e01b      	b.n	801b12c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801b0f4:	683a      	ldr	r2, [r7, #0]
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	0011      	movs	r1, r2
 801b0fa:	0018      	movs	r0, r3
 801b0fc:	f000 fd1b 	bl	801bb36 <USBD_GetStatus>
          break;
 801b100:	e014      	b.n	801b12c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801b102:	683a      	ldr	r2, [r7, #0]
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	0011      	movs	r1, r2
 801b108:	0018      	movs	r0, r3
 801b10a:	f000 fd4e 	bl	801bbaa <USBD_SetFeature>
          break;
 801b10e:	e00d      	b.n	801b12c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801b110:	683a      	ldr	r2, [r7, #0]
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	0011      	movs	r1, r2
 801b116:	0018      	movs	r0, r3
 801b118:	f000 fd5d 	bl	801bbd6 <USBD_ClrFeature>
          break;
 801b11c:	e006      	b.n	801b12c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801b11e:	683a      	ldr	r2, [r7, #0]
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	0011      	movs	r1, r2
 801b124:	0018      	movs	r0, r3
 801b126:	f000 fdb4 	bl	801bc92 <USBD_CtlError>
          break;
 801b12a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b12c:	e006      	b.n	801b13c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801b12e:	683a      	ldr	r2, [r7, #0]
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	0011      	movs	r1, r2
 801b134:	0018      	movs	r0, r3
 801b136:	f000 fdac 	bl	801bc92 <USBD_CtlError>
      break;
 801b13a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b13c:	230f      	movs	r3, #15
 801b13e:	18fb      	adds	r3, r7, r3
 801b140:	781b      	ldrb	r3, [r3, #0]
}
 801b142:	0018      	movs	r0, r3
 801b144:	46bd      	mov	sp, r7
 801b146:	b004      	add	sp, #16
 801b148:	bd80      	pop	{r7, pc}
 801b14a:	46c0      	nop			@ (mov r8, r8)
 801b14c:	08024398 	.word	0x08024398

0801b150 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801b150:	b5b0      	push	{r4, r5, r7, lr}
 801b152:	b084      	sub	sp, #16
 801b154:	af00      	add	r7, sp, #0
 801b156:	6078      	str	r0, [r7, #4]
 801b158:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801b15a:	230f      	movs	r3, #15
 801b15c:	18fb      	adds	r3, r7, r3
 801b15e:	2200      	movs	r2, #0
 801b160:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b162:	683b      	ldr	r3, [r7, #0]
 801b164:	781b      	ldrb	r3, [r3, #0]
 801b166:	001a      	movs	r2, r3
 801b168:	2360      	movs	r3, #96	@ 0x60
 801b16a:	4013      	ands	r3, r2
 801b16c:	2b40      	cmp	r3, #64	@ 0x40
 801b16e:	d004      	beq.n	801b17a <USBD_StdItfReq+0x2a>
 801b170:	d839      	bhi.n	801b1e6 <USBD_StdItfReq+0x96>
 801b172:	2b00      	cmp	r3, #0
 801b174:	d001      	beq.n	801b17a <USBD_StdItfReq+0x2a>
 801b176:	2b20      	cmp	r3, #32
 801b178:	d135      	bne.n	801b1e6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801b17a:	687a      	ldr	r2, [r7, #4]
 801b17c:	23a7      	movs	r3, #167	@ 0xa7
 801b17e:	009b      	lsls	r3, r3, #2
 801b180:	5cd3      	ldrb	r3, [r2, r3]
 801b182:	3b01      	subs	r3, #1
 801b184:	2b02      	cmp	r3, #2
 801b186:	d825      	bhi.n	801b1d4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801b188:	683b      	ldr	r3, [r7, #0]
 801b18a:	889b      	ldrh	r3, [r3, #4]
 801b18c:	b2db      	uxtb	r3, r3
 801b18e:	2b01      	cmp	r3, #1
 801b190:	d819      	bhi.n	801b1c6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801b192:	687a      	ldr	r2, [r7, #4]
 801b194:	23ad      	movs	r3, #173	@ 0xad
 801b196:	009b      	lsls	r3, r3, #2
 801b198:	58d3      	ldr	r3, [r2, r3]
 801b19a:	689b      	ldr	r3, [r3, #8]
 801b19c:	250f      	movs	r5, #15
 801b19e:	197c      	adds	r4, r7, r5
 801b1a0:	6839      	ldr	r1, [r7, #0]
 801b1a2:	687a      	ldr	r2, [r7, #4]
 801b1a4:	0010      	movs	r0, r2
 801b1a6:	4798      	blx	r3
 801b1a8:	0003      	movs	r3, r0
 801b1aa:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801b1ac:	683b      	ldr	r3, [r7, #0]
 801b1ae:	88db      	ldrh	r3, [r3, #6]
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	d116      	bne.n	801b1e2 <USBD_StdItfReq+0x92>
 801b1b4:	197b      	adds	r3, r7, r5
 801b1b6:	781b      	ldrb	r3, [r3, #0]
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d112      	bne.n	801b1e2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	0018      	movs	r0, r3
 801b1c0:	f000 fe4f 	bl	801be62 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801b1c4:	e00d      	b.n	801b1e2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801b1c6:	683a      	ldr	r2, [r7, #0]
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	0011      	movs	r1, r2
 801b1cc:	0018      	movs	r0, r3
 801b1ce:	f000 fd60 	bl	801bc92 <USBD_CtlError>
          break;
 801b1d2:	e006      	b.n	801b1e2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801b1d4:	683a      	ldr	r2, [r7, #0]
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	0011      	movs	r1, r2
 801b1da:	0018      	movs	r0, r3
 801b1dc:	f000 fd59 	bl	801bc92 <USBD_CtlError>
          break;
 801b1e0:	e000      	b.n	801b1e4 <USBD_StdItfReq+0x94>
          break;
 801b1e2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b1e4:	e006      	b.n	801b1f4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801b1e6:	683a      	ldr	r2, [r7, #0]
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	0011      	movs	r1, r2
 801b1ec:	0018      	movs	r0, r3
 801b1ee:	f000 fd50 	bl	801bc92 <USBD_CtlError>
      break;
 801b1f2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b1f4:	2300      	movs	r3, #0
}
 801b1f6:	0018      	movs	r0, r3
 801b1f8:	46bd      	mov	sp, r7
 801b1fa:	b004      	add	sp, #16
 801b1fc:	bdb0      	pop	{r4, r5, r7, pc}

0801b1fe <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801b1fe:	b5b0      	push	{r4, r5, r7, lr}
 801b200:	b084      	sub	sp, #16
 801b202:	af00      	add	r7, sp, #0
 801b204:	6078      	str	r0, [r7, #4]
 801b206:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801b208:	230f      	movs	r3, #15
 801b20a:	18fb      	adds	r3, r7, r3
 801b20c:	2200      	movs	r2, #0
 801b20e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801b210:	683b      	ldr	r3, [r7, #0]
 801b212:	889a      	ldrh	r2, [r3, #4]
 801b214:	230e      	movs	r3, #14
 801b216:	18fb      	adds	r3, r7, r3
 801b218:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b21a:	683b      	ldr	r3, [r7, #0]
 801b21c:	781b      	ldrb	r3, [r3, #0]
 801b21e:	001a      	movs	r2, r3
 801b220:	2360      	movs	r3, #96	@ 0x60
 801b222:	4013      	ands	r3, r2
 801b224:	2b40      	cmp	r3, #64	@ 0x40
 801b226:	d006      	beq.n	801b236 <USBD_StdEPReq+0x38>
 801b228:	d900      	bls.n	801b22c <USBD_StdEPReq+0x2e>
 801b22a:	e190      	b.n	801b54e <USBD_StdEPReq+0x350>
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d00c      	beq.n	801b24a <USBD_StdEPReq+0x4c>
 801b230:	2b20      	cmp	r3, #32
 801b232:	d000      	beq.n	801b236 <USBD_StdEPReq+0x38>
 801b234:	e18b      	b.n	801b54e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801b236:	687a      	ldr	r2, [r7, #4]
 801b238:	23ad      	movs	r3, #173	@ 0xad
 801b23a:	009b      	lsls	r3, r3, #2
 801b23c:	58d3      	ldr	r3, [r2, r3]
 801b23e:	689b      	ldr	r3, [r3, #8]
 801b240:	6839      	ldr	r1, [r7, #0]
 801b242:	687a      	ldr	r2, [r7, #4]
 801b244:	0010      	movs	r0, r2
 801b246:	4798      	blx	r3
      break;
 801b248:	e188      	b.n	801b55c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801b24a:	683b      	ldr	r3, [r7, #0]
 801b24c:	781b      	ldrb	r3, [r3, #0]
 801b24e:	001a      	movs	r2, r3
 801b250:	2360      	movs	r3, #96	@ 0x60
 801b252:	4013      	ands	r3, r2
 801b254:	2b20      	cmp	r3, #32
 801b256:	d10f      	bne.n	801b278 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801b258:	687a      	ldr	r2, [r7, #4]
 801b25a:	23ad      	movs	r3, #173	@ 0xad
 801b25c:	009b      	lsls	r3, r3, #2
 801b25e:	58d3      	ldr	r3, [r2, r3]
 801b260:	689b      	ldr	r3, [r3, #8]
 801b262:	250f      	movs	r5, #15
 801b264:	197c      	adds	r4, r7, r5
 801b266:	6839      	ldr	r1, [r7, #0]
 801b268:	687a      	ldr	r2, [r7, #4]
 801b26a:	0010      	movs	r0, r2
 801b26c:	4798      	blx	r3
 801b26e:	0003      	movs	r3, r0
 801b270:	7023      	strb	r3, [r4, #0]

        return ret;
 801b272:	197b      	adds	r3, r7, r5
 801b274:	781b      	ldrb	r3, [r3, #0]
 801b276:	e174      	b.n	801b562 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801b278:	683b      	ldr	r3, [r7, #0]
 801b27a:	785b      	ldrb	r3, [r3, #1]
 801b27c:	2b03      	cmp	r3, #3
 801b27e:	d007      	beq.n	801b290 <USBD_StdEPReq+0x92>
 801b280:	dd00      	ble.n	801b284 <USBD_StdEPReq+0x86>
 801b282:	e15c      	b.n	801b53e <USBD_StdEPReq+0x340>
 801b284:	2b00      	cmp	r3, #0
 801b286:	d100      	bne.n	801b28a <USBD_StdEPReq+0x8c>
 801b288:	e092      	b.n	801b3b0 <USBD_StdEPReq+0x1b2>
 801b28a:	2b01      	cmp	r3, #1
 801b28c:	d04b      	beq.n	801b326 <USBD_StdEPReq+0x128>
 801b28e:	e156      	b.n	801b53e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801b290:	687a      	ldr	r2, [r7, #4]
 801b292:	23a7      	movs	r3, #167	@ 0xa7
 801b294:	009b      	lsls	r3, r3, #2
 801b296:	5cd3      	ldrb	r3, [r2, r3]
 801b298:	2b02      	cmp	r3, #2
 801b29a:	d002      	beq.n	801b2a2 <USBD_StdEPReq+0xa4>
 801b29c:	2b03      	cmp	r3, #3
 801b29e:	d01d      	beq.n	801b2dc <USBD_StdEPReq+0xde>
 801b2a0:	e039      	b.n	801b316 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b2a2:	220e      	movs	r2, #14
 801b2a4:	18bb      	adds	r3, r7, r2
 801b2a6:	781b      	ldrb	r3, [r3, #0]
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d010      	beq.n	801b2ce <USBD_StdEPReq+0xd0>
 801b2ac:	18bb      	adds	r3, r7, r2
 801b2ae:	781b      	ldrb	r3, [r3, #0]
 801b2b0:	2b80      	cmp	r3, #128	@ 0x80
 801b2b2:	d00c      	beq.n	801b2ce <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801b2b4:	18bb      	adds	r3, r7, r2
 801b2b6:	781a      	ldrb	r2, [r3, #0]
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	0011      	movs	r1, r2
 801b2bc:	0018      	movs	r0, r3
 801b2be:	f001 fa10 	bl	801c6e2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	2180      	movs	r1, #128	@ 0x80
 801b2c6:	0018      	movs	r0, r3
 801b2c8:	f001 fa0b 	bl	801c6e2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b2cc:	e02a      	b.n	801b324 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801b2ce:	683a      	ldr	r2, [r7, #0]
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	0011      	movs	r1, r2
 801b2d4:	0018      	movs	r0, r3
 801b2d6:	f000 fcdc 	bl	801bc92 <USBD_CtlError>
              break;
 801b2da:	e023      	b.n	801b324 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b2dc:	683b      	ldr	r3, [r7, #0]
 801b2de:	885b      	ldrh	r3, [r3, #2]
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d113      	bne.n	801b30c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801b2e4:	220e      	movs	r2, #14
 801b2e6:	18bb      	adds	r3, r7, r2
 801b2e8:	781b      	ldrb	r3, [r3, #0]
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	d00e      	beq.n	801b30c <USBD_StdEPReq+0x10e>
 801b2ee:	18bb      	adds	r3, r7, r2
 801b2f0:	781b      	ldrb	r3, [r3, #0]
 801b2f2:	2b80      	cmp	r3, #128	@ 0x80
 801b2f4:	d00a      	beq.n	801b30c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801b2f6:	683b      	ldr	r3, [r7, #0]
 801b2f8:	88db      	ldrh	r3, [r3, #6]
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d106      	bne.n	801b30c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801b2fe:	18bb      	adds	r3, r7, r2
 801b300:	781a      	ldrb	r2, [r3, #0]
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	0011      	movs	r1, r2
 801b306:	0018      	movs	r0, r3
 801b308:	f001 f9eb 	bl	801c6e2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	0018      	movs	r0, r3
 801b310:	f000 fda7 	bl	801be62 <USBD_CtlSendStatus>

              break;
 801b314:	e006      	b.n	801b324 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801b316:	683a      	ldr	r2, [r7, #0]
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	0011      	movs	r1, r2
 801b31c:	0018      	movs	r0, r3
 801b31e:	f000 fcb8 	bl	801bc92 <USBD_CtlError>
              break;
 801b322:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b324:	e112      	b.n	801b54c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801b326:	687a      	ldr	r2, [r7, #4]
 801b328:	23a7      	movs	r3, #167	@ 0xa7
 801b32a:	009b      	lsls	r3, r3, #2
 801b32c:	5cd3      	ldrb	r3, [r2, r3]
 801b32e:	2b02      	cmp	r3, #2
 801b330:	d002      	beq.n	801b338 <USBD_StdEPReq+0x13a>
 801b332:	2b03      	cmp	r3, #3
 801b334:	d01d      	beq.n	801b372 <USBD_StdEPReq+0x174>
 801b336:	e032      	b.n	801b39e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b338:	220e      	movs	r2, #14
 801b33a:	18bb      	adds	r3, r7, r2
 801b33c:	781b      	ldrb	r3, [r3, #0]
 801b33e:	2b00      	cmp	r3, #0
 801b340:	d010      	beq.n	801b364 <USBD_StdEPReq+0x166>
 801b342:	18bb      	adds	r3, r7, r2
 801b344:	781b      	ldrb	r3, [r3, #0]
 801b346:	2b80      	cmp	r3, #128	@ 0x80
 801b348:	d00c      	beq.n	801b364 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801b34a:	18bb      	adds	r3, r7, r2
 801b34c:	781a      	ldrb	r2, [r3, #0]
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	0011      	movs	r1, r2
 801b352:	0018      	movs	r0, r3
 801b354:	f001 f9c5 	bl	801c6e2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	2180      	movs	r1, #128	@ 0x80
 801b35c:	0018      	movs	r0, r3
 801b35e:	f001 f9c0 	bl	801c6e2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801b362:	e024      	b.n	801b3ae <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801b364:	683a      	ldr	r2, [r7, #0]
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	0011      	movs	r1, r2
 801b36a:	0018      	movs	r0, r3
 801b36c:	f000 fc91 	bl	801bc92 <USBD_CtlError>
              break;
 801b370:	e01d      	b.n	801b3ae <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801b372:	683b      	ldr	r3, [r7, #0]
 801b374:	885b      	ldrh	r3, [r3, #2]
 801b376:	2b00      	cmp	r3, #0
 801b378:	d118      	bne.n	801b3ac <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801b37a:	210e      	movs	r1, #14
 801b37c:	187b      	adds	r3, r7, r1
 801b37e:	781b      	ldrb	r3, [r3, #0]
 801b380:	227f      	movs	r2, #127	@ 0x7f
 801b382:	4013      	ands	r3, r2
 801b384:	d006      	beq.n	801b394 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801b386:	187b      	adds	r3, r7, r1
 801b388:	781a      	ldrb	r2, [r3, #0]
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	0011      	movs	r1, r2
 801b38e:	0018      	movs	r0, r3
 801b390:	f001 f9d2 	bl	801c738 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	0018      	movs	r0, r3
 801b398:	f000 fd63 	bl	801be62 <USBD_CtlSendStatus>
              }
              break;
 801b39c:	e006      	b.n	801b3ac <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801b39e:	683a      	ldr	r2, [r7, #0]
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	0011      	movs	r1, r2
 801b3a4:	0018      	movs	r0, r3
 801b3a6:	f000 fc74 	bl	801bc92 <USBD_CtlError>
              break;
 801b3aa:	e000      	b.n	801b3ae <USBD_StdEPReq+0x1b0>
              break;
 801b3ac:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b3ae:	e0cd      	b.n	801b54c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801b3b0:	687a      	ldr	r2, [r7, #4]
 801b3b2:	23a7      	movs	r3, #167	@ 0xa7
 801b3b4:	009b      	lsls	r3, r3, #2
 801b3b6:	5cd3      	ldrb	r3, [r2, r3]
 801b3b8:	2b02      	cmp	r3, #2
 801b3ba:	d002      	beq.n	801b3c2 <USBD_StdEPReq+0x1c4>
 801b3bc:	2b03      	cmp	r3, #3
 801b3be:	d03c      	beq.n	801b43a <USBD_StdEPReq+0x23c>
 801b3c0:	e0b5      	b.n	801b52e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801b3c2:	220e      	movs	r2, #14
 801b3c4:	18bb      	adds	r3, r7, r2
 801b3c6:	781b      	ldrb	r3, [r3, #0]
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d00a      	beq.n	801b3e2 <USBD_StdEPReq+0x1e4>
 801b3cc:	18bb      	adds	r3, r7, r2
 801b3ce:	781b      	ldrb	r3, [r3, #0]
 801b3d0:	2b80      	cmp	r3, #128	@ 0x80
 801b3d2:	d006      	beq.n	801b3e2 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801b3d4:	683a      	ldr	r2, [r7, #0]
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	0011      	movs	r1, r2
 801b3da:	0018      	movs	r0, r3
 801b3dc:	f000 fc59 	bl	801bc92 <USBD_CtlError>
                break;
 801b3e0:	e0ac      	b.n	801b53c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b3e2:	220e      	movs	r2, #14
 801b3e4:	18bb      	adds	r3, r7, r2
 801b3e6:	781b      	ldrb	r3, [r3, #0]
 801b3e8:	b25b      	sxtb	r3, r3
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	da0c      	bge.n	801b408 <USBD_StdEPReq+0x20a>
 801b3ee:	18bb      	adds	r3, r7, r2
 801b3f0:	781b      	ldrb	r3, [r3, #0]
 801b3f2:	227f      	movs	r2, #127	@ 0x7f
 801b3f4:	401a      	ands	r2, r3
 801b3f6:	0013      	movs	r3, r2
 801b3f8:	009b      	lsls	r3, r3, #2
 801b3fa:	189b      	adds	r3, r3, r2
 801b3fc:	009b      	lsls	r3, r3, #2
 801b3fe:	3310      	adds	r3, #16
 801b400:	687a      	ldr	r2, [r7, #4]
 801b402:	18d3      	adds	r3, r2, r3
 801b404:	3304      	adds	r3, #4
 801b406:	e00d      	b.n	801b424 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b408:	230e      	movs	r3, #14
 801b40a:	18fb      	adds	r3, r7, r3
 801b40c:	781b      	ldrb	r3, [r3, #0]
 801b40e:	227f      	movs	r2, #127	@ 0x7f
 801b410:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b412:	0013      	movs	r3, r2
 801b414:	009b      	lsls	r3, r3, #2
 801b416:	189b      	adds	r3, r3, r2
 801b418:	009b      	lsls	r3, r3, #2
 801b41a:	3351      	adds	r3, #81	@ 0x51
 801b41c:	33ff      	adds	r3, #255	@ 0xff
 801b41e:	687a      	ldr	r2, [r7, #4]
 801b420:	18d3      	adds	r3, r2, r3
 801b422:	3304      	adds	r3, #4
 801b424:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801b426:	68bb      	ldr	r3, [r7, #8]
 801b428:	2200      	movs	r2, #0
 801b42a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801b42c:	68b9      	ldr	r1, [r7, #8]
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	2202      	movs	r2, #2
 801b432:	0018      	movs	r0, r3
 801b434:	f000 fcab 	bl	801bd8e <USBD_CtlSendData>
              break;
 801b438:	e080      	b.n	801b53c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801b43a:	220e      	movs	r2, #14
 801b43c:	18bb      	adds	r3, r7, r2
 801b43e:	781b      	ldrb	r3, [r3, #0]
 801b440:	b25b      	sxtb	r3, r3
 801b442:	2b00      	cmp	r3, #0
 801b444:	da14      	bge.n	801b470 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801b446:	18bb      	adds	r3, r7, r2
 801b448:	781b      	ldrb	r3, [r3, #0]
 801b44a:	220f      	movs	r2, #15
 801b44c:	401a      	ands	r2, r3
 801b44e:	6879      	ldr	r1, [r7, #4]
 801b450:	0013      	movs	r3, r2
 801b452:	009b      	lsls	r3, r3, #2
 801b454:	189b      	adds	r3, r3, r2
 801b456:	009b      	lsls	r3, r3, #2
 801b458:	18cb      	adds	r3, r1, r3
 801b45a:	3318      	adds	r3, #24
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d11e      	bne.n	801b4a0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801b462:	683a      	ldr	r2, [r7, #0]
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	0011      	movs	r1, r2
 801b468:	0018      	movs	r0, r3
 801b46a:	f000 fc12 	bl	801bc92 <USBD_CtlError>
                  break;
 801b46e:	e065      	b.n	801b53c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801b470:	230e      	movs	r3, #14
 801b472:	18fb      	adds	r3, r7, r3
 801b474:	781b      	ldrb	r3, [r3, #0]
 801b476:	220f      	movs	r2, #15
 801b478:	401a      	ands	r2, r3
 801b47a:	6878      	ldr	r0, [r7, #4]
 801b47c:	23ac      	movs	r3, #172	@ 0xac
 801b47e:	0059      	lsls	r1, r3, #1
 801b480:	0013      	movs	r3, r2
 801b482:	009b      	lsls	r3, r3, #2
 801b484:	189b      	adds	r3, r3, r2
 801b486:	009b      	lsls	r3, r3, #2
 801b488:	18c3      	adds	r3, r0, r3
 801b48a:	185b      	adds	r3, r3, r1
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d106      	bne.n	801b4a0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801b492:	683a      	ldr	r2, [r7, #0]
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	0011      	movs	r1, r2
 801b498:	0018      	movs	r0, r3
 801b49a:	f000 fbfa 	bl	801bc92 <USBD_CtlError>
                  break;
 801b49e:	e04d      	b.n	801b53c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b4a0:	220e      	movs	r2, #14
 801b4a2:	18bb      	adds	r3, r7, r2
 801b4a4:	781b      	ldrb	r3, [r3, #0]
 801b4a6:	b25b      	sxtb	r3, r3
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	da0c      	bge.n	801b4c6 <USBD_StdEPReq+0x2c8>
 801b4ac:	18bb      	adds	r3, r7, r2
 801b4ae:	781b      	ldrb	r3, [r3, #0]
 801b4b0:	227f      	movs	r2, #127	@ 0x7f
 801b4b2:	401a      	ands	r2, r3
 801b4b4:	0013      	movs	r3, r2
 801b4b6:	009b      	lsls	r3, r3, #2
 801b4b8:	189b      	adds	r3, r3, r2
 801b4ba:	009b      	lsls	r3, r3, #2
 801b4bc:	3310      	adds	r3, #16
 801b4be:	687a      	ldr	r2, [r7, #4]
 801b4c0:	18d3      	adds	r3, r2, r3
 801b4c2:	3304      	adds	r3, #4
 801b4c4:	e00d      	b.n	801b4e2 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801b4c6:	230e      	movs	r3, #14
 801b4c8:	18fb      	adds	r3, r7, r3
 801b4ca:	781b      	ldrb	r3, [r3, #0]
 801b4cc:	227f      	movs	r2, #127	@ 0x7f
 801b4ce:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801b4d0:	0013      	movs	r3, r2
 801b4d2:	009b      	lsls	r3, r3, #2
 801b4d4:	189b      	adds	r3, r3, r2
 801b4d6:	009b      	lsls	r3, r3, #2
 801b4d8:	3351      	adds	r3, #81	@ 0x51
 801b4da:	33ff      	adds	r3, #255	@ 0xff
 801b4dc:	687a      	ldr	r2, [r7, #4]
 801b4de:	18d3      	adds	r3, r2, r3
 801b4e0:	3304      	adds	r3, #4
 801b4e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801b4e4:	220e      	movs	r2, #14
 801b4e6:	18bb      	adds	r3, r7, r2
 801b4e8:	781b      	ldrb	r3, [r3, #0]
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d003      	beq.n	801b4f6 <USBD_StdEPReq+0x2f8>
 801b4ee:	18bb      	adds	r3, r7, r2
 801b4f0:	781b      	ldrb	r3, [r3, #0]
 801b4f2:	2b80      	cmp	r3, #128	@ 0x80
 801b4f4:	d103      	bne.n	801b4fe <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801b4f6:	68bb      	ldr	r3, [r7, #8]
 801b4f8:	2200      	movs	r2, #0
 801b4fa:	601a      	str	r2, [r3, #0]
 801b4fc:	e010      	b.n	801b520 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801b4fe:	230e      	movs	r3, #14
 801b500:	18fb      	adds	r3, r7, r3
 801b502:	781a      	ldrb	r2, [r3, #0]
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	0011      	movs	r1, r2
 801b508:	0018      	movs	r0, r3
 801b50a:	f001 f940 	bl	801c78e <USBD_LL_IsStallEP>
 801b50e:	1e03      	subs	r3, r0, #0
 801b510:	d003      	beq.n	801b51a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801b512:	68bb      	ldr	r3, [r7, #8]
 801b514:	2201      	movs	r2, #1
 801b516:	601a      	str	r2, [r3, #0]
 801b518:	e002      	b.n	801b520 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801b51a:	68bb      	ldr	r3, [r7, #8]
 801b51c:	2200      	movs	r2, #0
 801b51e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801b520:	68b9      	ldr	r1, [r7, #8]
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	2202      	movs	r2, #2
 801b526:	0018      	movs	r0, r3
 801b528:	f000 fc31 	bl	801bd8e <USBD_CtlSendData>
              break;
 801b52c:	e006      	b.n	801b53c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801b52e:	683a      	ldr	r2, [r7, #0]
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	0011      	movs	r1, r2
 801b534:	0018      	movs	r0, r3
 801b536:	f000 fbac 	bl	801bc92 <USBD_CtlError>
              break;
 801b53a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b53c:	e006      	b.n	801b54c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801b53e:	683a      	ldr	r2, [r7, #0]
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	0011      	movs	r1, r2
 801b544:	0018      	movs	r0, r3
 801b546:	f000 fba4 	bl	801bc92 <USBD_CtlError>
          break;
 801b54a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b54c:	e006      	b.n	801b55c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801b54e:	683a      	ldr	r2, [r7, #0]
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	0011      	movs	r1, r2
 801b554:	0018      	movs	r0, r3
 801b556:	f000 fb9c 	bl	801bc92 <USBD_CtlError>
      break;
 801b55a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b55c:	230f      	movs	r3, #15
 801b55e:	18fb      	adds	r3, r7, r3
 801b560:	781b      	ldrb	r3, [r3, #0]
}
 801b562:	0018      	movs	r0, r3
 801b564:	46bd      	mov	sp, r7
 801b566:	b004      	add	sp, #16
 801b568:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801b56c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b56c:	b580      	push	{r7, lr}
 801b56e:	b084      	sub	sp, #16
 801b570:	af00      	add	r7, sp, #0
 801b572:	6078      	str	r0, [r7, #4]
 801b574:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801b576:	2308      	movs	r3, #8
 801b578:	18fb      	adds	r3, r7, r3
 801b57a:	2200      	movs	r2, #0
 801b57c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801b57e:	2300      	movs	r3, #0
 801b580:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801b582:	230b      	movs	r3, #11
 801b584:	18fb      	adds	r3, r7, r3
 801b586:	2200      	movs	r2, #0
 801b588:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801b58a:	683b      	ldr	r3, [r7, #0]
 801b58c:	885b      	ldrh	r3, [r3, #2]
 801b58e:	0a1b      	lsrs	r3, r3, #8
 801b590:	b29b      	uxth	r3, r3
 801b592:	2b07      	cmp	r3, #7
 801b594:	d900      	bls.n	801b598 <USBD_GetDescriptor+0x2c>
 801b596:	e159      	b.n	801b84c <USBD_GetDescriptor+0x2e0>
 801b598:	009a      	lsls	r2, r3, #2
 801b59a:	4bcb      	ldr	r3, [pc, #812]	@ (801b8c8 <USBD_GetDescriptor+0x35c>)
 801b59c:	18d3      	adds	r3, r2, r3
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801b5a2:	687a      	ldr	r2, [r7, #4]
 801b5a4:	23ac      	movs	r3, #172	@ 0xac
 801b5a6:	009b      	lsls	r3, r3, #2
 801b5a8:	58d3      	ldr	r3, [r2, r3]
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	687a      	ldr	r2, [r7, #4]
 801b5ae:	7c12      	ldrb	r2, [r2, #16]
 801b5b0:	2108      	movs	r1, #8
 801b5b2:	1879      	adds	r1, r7, r1
 801b5b4:	0010      	movs	r0, r2
 801b5b6:	4798      	blx	r3
 801b5b8:	0003      	movs	r3, r0
 801b5ba:	60fb      	str	r3, [r7, #12]
      break;
 801b5bc:	e153      	b.n	801b866 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	7c1b      	ldrb	r3, [r3, #16]
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	d10f      	bne.n	801b5e6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801b5c6:	687a      	ldr	r2, [r7, #4]
 801b5c8:	23ad      	movs	r3, #173	@ 0xad
 801b5ca:	009b      	lsls	r3, r3, #2
 801b5cc:	58d3      	ldr	r3, [r2, r3]
 801b5ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b5d0:	2208      	movs	r2, #8
 801b5d2:	18ba      	adds	r2, r7, r2
 801b5d4:	0010      	movs	r0, r2
 801b5d6:	4798      	blx	r3
 801b5d8:	0003      	movs	r3, r0
 801b5da:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b5dc:	68fb      	ldr	r3, [r7, #12]
 801b5de:	3301      	adds	r3, #1
 801b5e0:	2202      	movs	r2, #2
 801b5e2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801b5e4:	e13f      	b.n	801b866 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801b5e6:	687a      	ldr	r2, [r7, #4]
 801b5e8:	23ad      	movs	r3, #173	@ 0xad
 801b5ea:	009b      	lsls	r3, r3, #2
 801b5ec:	58d3      	ldr	r3, [r2, r3]
 801b5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b5f0:	2208      	movs	r2, #8
 801b5f2:	18ba      	adds	r2, r7, r2
 801b5f4:	0010      	movs	r0, r2
 801b5f6:	4798      	blx	r3
 801b5f8:	0003      	movs	r3, r0
 801b5fa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b5fc:	68fb      	ldr	r3, [r7, #12]
 801b5fe:	3301      	adds	r3, #1
 801b600:	2202      	movs	r2, #2
 801b602:	701a      	strb	r2, [r3, #0]
      break;
 801b604:	e12f      	b.n	801b866 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801b606:	683b      	ldr	r3, [r7, #0]
 801b608:	885b      	ldrh	r3, [r3, #2]
 801b60a:	b2db      	uxtb	r3, r3
 801b60c:	2b05      	cmp	r3, #5
 801b60e:	d900      	bls.n	801b612 <USBD_GetDescriptor+0xa6>
 801b610:	e0d0      	b.n	801b7b4 <USBD_GetDescriptor+0x248>
 801b612:	009a      	lsls	r2, r3, #2
 801b614:	4bad      	ldr	r3, [pc, #692]	@ (801b8cc <USBD_GetDescriptor+0x360>)
 801b616:	18d3      	adds	r3, r2, r3
 801b618:	681b      	ldr	r3, [r3, #0]
 801b61a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801b61c:	687a      	ldr	r2, [r7, #4]
 801b61e:	23ac      	movs	r3, #172	@ 0xac
 801b620:	009b      	lsls	r3, r3, #2
 801b622:	58d3      	ldr	r3, [r2, r3]
 801b624:	685b      	ldr	r3, [r3, #4]
 801b626:	2b00      	cmp	r3, #0
 801b628:	d00d      	beq.n	801b646 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801b62a:	687a      	ldr	r2, [r7, #4]
 801b62c:	23ac      	movs	r3, #172	@ 0xac
 801b62e:	009b      	lsls	r3, r3, #2
 801b630:	58d3      	ldr	r3, [r2, r3]
 801b632:	685b      	ldr	r3, [r3, #4]
 801b634:	687a      	ldr	r2, [r7, #4]
 801b636:	7c12      	ldrb	r2, [r2, #16]
 801b638:	2108      	movs	r1, #8
 801b63a:	1879      	adds	r1, r7, r1
 801b63c:	0010      	movs	r0, r2
 801b63e:	4798      	blx	r3
 801b640:	0003      	movs	r3, r0
 801b642:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b644:	e0c3      	b.n	801b7ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b646:	683a      	ldr	r2, [r7, #0]
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	0011      	movs	r1, r2
 801b64c:	0018      	movs	r0, r3
 801b64e:	f000 fb20 	bl	801bc92 <USBD_CtlError>
            err++;
 801b652:	210b      	movs	r1, #11
 801b654:	187b      	adds	r3, r7, r1
 801b656:	781a      	ldrb	r2, [r3, #0]
 801b658:	187b      	adds	r3, r7, r1
 801b65a:	3201      	adds	r2, #1
 801b65c:	701a      	strb	r2, [r3, #0]
          break;
 801b65e:	e0b6      	b.n	801b7ce <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801b660:	687a      	ldr	r2, [r7, #4]
 801b662:	23ac      	movs	r3, #172	@ 0xac
 801b664:	009b      	lsls	r3, r3, #2
 801b666:	58d3      	ldr	r3, [r2, r3]
 801b668:	689b      	ldr	r3, [r3, #8]
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d00d      	beq.n	801b68a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801b66e:	687a      	ldr	r2, [r7, #4]
 801b670:	23ac      	movs	r3, #172	@ 0xac
 801b672:	009b      	lsls	r3, r3, #2
 801b674:	58d3      	ldr	r3, [r2, r3]
 801b676:	689b      	ldr	r3, [r3, #8]
 801b678:	687a      	ldr	r2, [r7, #4]
 801b67a:	7c12      	ldrb	r2, [r2, #16]
 801b67c:	2108      	movs	r1, #8
 801b67e:	1879      	adds	r1, r7, r1
 801b680:	0010      	movs	r0, r2
 801b682:	4798      	blx	r3
 801b684:	0003      	movs	r3, r0
 801b686:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b688:	e0a1      	b.n	801b7ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b68a:	683a      	ldr	r2, [r7, #0]
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	0011      	movs	r1, r2
 801b690:	0018      	movs	r0, r3
 801b692:	f000 fafe 	bl	801bc92 <USBD_CtlError>
            err++;
 801b696:	210b      	movs	r1, #11
 801b698:	187b      	adds	r3, r7, r1
 801b69a:	781a      	ldrb	r2, [r3, #0]
 801b69c:	187b      	adds	r3, r7, r1
 801b69e:	3201      	adds	r2, #1
 801b6a0:	701a      	strb	r2, [r3, #0]
          break;
 801b6a2:	e094      	b.n	801b7ce <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801b6a4:	687a      	ldr	r2, [r7, #4]
 801b6a6:	23ac      	movs	r3, #172	@ 0xac
 801b6a8:	009b      	lsls	r3, r3, #2
 801b6aa:	58d3      	ldr	r3, [r2, r3]
 801b6ac:	68db      	ldr	r3, [r3, #12]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d00d      	beq.n	801b6ce <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801b6b2:	687a      	ldr	r2, [r7, #4]
 801b6b4:	23ac      	movs	r3, #172	@ 0xac
 801b6b6:	009b      	lsls	r3, r3, #2
 801b6b8:	58d3      	ldr	r3, [r2, r3]
 801b6ba:	68db      	ldr	r3, [r3, #12]
 801b6bc:	687a      	ldr	r2, [r7, #4]
 801b6be:	7c12      	ldrb	r2, [r2, #16]
 801b6c0:	2108      	movs	r1, #8
 801b6c2:	1879      	adds	r1, r7, r1
 801b6c4:	0010      	movs	r0, r2
 801b6c6:	4798      	blx	r3
 801b6c8:	0003      	movs	r3, r0
 801b6ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b6cc:	e07f      	b.n	801b7ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b6ce:	683a      	ldr	r2, [r7, #0]
 801b6d0:	687b      	ldr	r3, [r7, #4]
 801b6d2:	0011      	movs	r1, r2
 801b6d4:	0018      	movs	r0, r3
 801b6d6:	f000 fadc 	bl	801bc92 <USBD_CtlError>
            err++;
 801b6da:	210b      	movs	r1, #11
 801b6dc:	187b      	adds	r3, r7, r1
 801b6de:	781a      	ldrb	r2, [r3, #0]
 801b6e0:	187b      	adds	r3, r7, r1
 801b6e2:	3201      	adds	r2, #1
 801b6e4:	701a      	strb	r2, [r3, #0]
          break;
 801b6e6:	e072      	b.n	801b7ce <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801b6e8:	687a      	ldr	r2, [r7, #4]
 801b6ea:	23ac      	movs	r3, #172	@ 0xac
 801b6ec:	009b      	lsls	r3, r3, #2
 801b6ee:	58d3      	ldr	r3, [r2, r3]
 801b6f0:	691b      	ldr	r3, [r3, #16]
 801b6f2:	2b00      	cmp	r3, #0
 801b6f4:	d00d      	beq.n	801b712 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801b6f6:	687a      	ldr	r2, [r7, #4]
 801b6f8:	23ac      	movs	r3, #172	@ 0xac
 801b6fa:	009b      	lsls	r3, r3, #2
 801b6fc:	58d3      	ldr	r3, [r2, r3]
 801b6fe:	691b      	ldr	r3, [r3, #16]
 801b700:	687a      	ldr	r2, [r7, #4]
 801b702:	7c12      	ldrb	r2, [r2, #16]
 801b704:	2108      	movs	r1, #8
 801b706:	1879      	adds	r1, r7, r1
 801b708:	0010      	movs	r0, r2
 801b70a:	4798      	blx	r3
 801b70c:	0003      	movs	r3, r0
 801b70e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b710:	e05d      	b.n	801b7ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b712:	683a      	ldr	r2, [r7, #0]
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	0011      	movs	r1, r2
 801b718:	0018      	movs	r0, r3
 801b71a:	f000 faba 	bl	801bc92 <USBD_CtlError>
            err++;
 801b71e:	210b      	movs	r1, #11
 801b720:	187b      	adds	r3, r7, r1
 801b722:	781a      	ldrb	r2, [r3, #0]
 801b724:	187b      	adds	r3, r7, r1
 801b726:	3201      	adds	r2, #1
 801b728:	701a      	strb	r2, [r3, #0]
          break;
 801b72a:	e050      	b.n	801b7ce <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801b72c:	687a      	ldr	r2, [r7, #4]
 801b72e:	23ac      	movs	r3, #172	@ 0xac
 801b730:	009b      	lsls	r3, r3, #2
 801b732:	58d3      	ldr	r3, [r2, r3]
 801b734:	695b      	ldr	r3, [r3, #20]
 801b736:	2b00      	cmp	r3, #0
 801b738:	d00d      	beq.n	801b756 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801b73a:	687a      	ldr	r2, [r7, #4]
 801b73c:	23ac      	movs	r3, #172	@ 0xac
 801b73e:	009b      	lsls	r3, r3, #2
 801b740:	58d3      	ldr	r3, [r2, r3]
 801b742:	695b      	ldr	r3, [r3, #20]
 801b744:	687a      	ldr	r2, [r7, #4]
 801b746:	7c12      	ldrb	r2, [r2, #16]
 801b748:	2108      	movs	r1, #8
 801b74a:	1879      	adds	r1, r7, r1
 801b74c:	0010      	movs	r0, r2
 801b74e:	4798      	blx	r3
 801b750:	0003      	movs	r3, r0
 801b752:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b754:	e03b      	b.n	801b7ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b756:	683a      	ldr	r2, [r7, #0]
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	0011      	movs	r1, r2
 801b75c:	0018      	movs	r0, r3
 801b75e:	f000 fa98 	bl	801bc92 <USBD_CtlError>
            err++;
 801b762:	210b      	movs	r1, #11
 801b764:	187b      	adds	r3, r7, r1
 801b766:	781a      	ldrb	r2, [r3, #0]
 801b768:	187b      	adds	r3, r7, r1
 801b76a:	3201      	adds	r2, #1
 801b76c:	701a      	strb	r2, [r3, #0]
          break;
 801b76e:	e02e      	b.n	801b7ce <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801b770:	687a      	ldr	r2, [r7, #4]
 801b772:	23ac      	movs	r3, #172	@ 0xac
 801b774:	009b      	lsls	r3, r3, #2
 801b776:	58d3      	ldr	r3, [r2, r3]
 801b778:	699b      	ldr	r3, [r3, #24]
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	d00d      	beq.n	801b79a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801b77e:	687a      	ldr	r2, [r7, #4]
 801b780:	23ac      	movs	r3, #172	@ 0xac
 801b782:	009b      	lsls	r3, r3, #2
 801b784:	58d3      	ldr	r3, [r2, r3]
 801b786:	699b      	ldr	r3, [r3, #24]
 801b788:	687a      	ldr	r2, [r7, #4]
 801b78a:	7c12      	ldrb	r2, [r2, #16]
 801b78c:	2108      	movs	r1, #8
 801b78e:	1879      	adds	r1, r7, r1
 801b790:	0010      	movs	r0, r2
 801b792:	4798      	blx	r3
 801b794:	0003      	movs	r3, r0
 801b796:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b798:	e019      	b.n	801b7ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b79a:	683a      	ldr	r2, [r7, #0]
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	0011      	movs	r1, r2
 801b7a0:	0018      	movs	r0, r3
 801b7a2:	f000 fa76 	bl	801bc92 <USBD_CtlError>
            err++;
 801b7a6:	210b      	movs	r1, #11
 801b7a8:	187b      	adds	r3, r7, r1
 801b7aa:	781a      	ldrb	r2, [r3, #0]
 801b7ac:	187b      	adds	r3, r7, r1
 801b7ae:	3201      	adds	r2, #1
 801b7b0:	701a      	strb	r2, [r3, #0]
          break;
 801b7b2:	e00c      	b.n	801b7ce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801b7b4:	683a      	ldr	r2, [r7, #0]
 801b7b6:	687b      	ldr	r3, [r7, #4]
 801b7b8:	0011      	movs	r1, r2
 801b7ba:	0018      	movs	r0, r3
 801b7bc:	f000 fa69 	bl	801bc92 <USBD_CtlError>
          err++;
 801b7c0:	210b      	movs	r1, #11
 801b7c2:	187b      	adds	r3, r7, r1
 801b7c4:	781a      	ldrb	r2, [r3, #0]
 801b7c6:	187b      	adds	r3, r7, r1
 801b7c8:	3201      	adds	r2, #1
 801b7ca:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801b7cc:	e04b      	b.n	801b866 <USBD_GetDescriptor+0x2fa>
 801b7ce:	e04a      	b.n	801b866 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	7c1b      	ldrb	r3, [r3, #16]
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d10b      	bne.n	801b7f0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801b7d8:	687a      	ldr	r2, [r7, #4]
 801b7da:	23ad      	movs	r3, #173	@ 0xad
 801b7dc:	009b      	lsls	r3, r3, #2
 801b7de:	58d3      	ldr	r3, [r2, r3]
 801b7e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b7e2:	2208      	movs	r2, #8
 801b7e4:	18ba      	adds	r2, r7, r2
 801b7e6:	0010      	movs	r0, r2
 801b7e8:	4798      	blx	r3
 801b7ea:	0003      	movs	r3, r0
 801b7ec:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801b7ee:	e03a      	b.n	801b866 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801b7f0:	683a      	ldr	r2, [r7, #0]
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	0011      	movs	r1, r2
 801b7f6:	0018      	movs	r0, r3
 801b7f8:	f000 fa4b 	bl	801bc92 <USBD_CtlError>
        err++;
 801b7fc:	210b      	movs	r1, #11
 801b7fe:	187b      	adds	r3, r7, r1
 801b800:	781a      	ldrb	r2, [r3, #0]
 801b802:	187b      	adds	r3, r7, r1
 801b804:	3201      	adds	r2, #1
 801b806:	701a      	strb	r2, [r3, #0]
      break;
 801b808:	e02d      	b.n	801b866 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b80a:	687b      	ldr	r3, [r7, #4]
 801b80c:	7c1b      	ldrb	r3, [r3, #16]
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d10f      	bne.n	801b832 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801b812:	687a      	ldr	r2, [r7, #4]
 801b814:	23ad      	movs	r3, #173	@ 0xad
 801b816:	009b      	lsls	r3, r3, #2
 801b818:	58d3      	ldr	r3, [r2, r3]
 801b81a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b81c:	2208      	movs	r2, #8
 801b81e:	18ba      	adds	r2, r7, r2
 801b820:	0010      	movs	r0, r2
 801b822:	4798      	blx	r3
 801b824:	0003      	movs	r3, r0
 801b826:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801b828:	68fb      	ldr	r3, [r7, #12]
 801b82a:	3301      	adds	r3, #1
 801b82c:	2207      	movs	r2, #7
 801b82e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801b830:	e019      	b.n	801b866 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801b832:	683a      	ldr	r2, [r7, #0]
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	0011      	movs	r1, r2
 801b838:	0018      	movs	r0, r3
 801b83a:	f000 fa2a 	bl	801bc92 <USBD_CtlError>
        err++;
 801b83e:	210b      	movs	r1, #11
 801b840:	187b      	adds	r3, r7, r1
 801b842:	781a      	ldrb	r2, [r3, #0]
 801b844:	187b      	adds	r3, r7, r1
 801b846:	3201      	adds	r2, #1
 801b848:	701a      	strb	r2, [r3, #0]
      break;
 801b84a:	e00c      	b.n	801b866 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801b84c:	683a      	ldr	r2, [r7, #0]
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	0011      	movs	r1, r2
 801b852:	0018      	movs	r0, r3
 801b854:	f000 fa1d 	bl	801bc92 <USBD_CtlError>
      err++;
 801b858:	210b      	movs	r1, #11
 801b85a:	187b      	adds	r3, r7, r1
 801b85c:	781a      	ldrb	r2, [r3, #0]
 801b85e:	187b      	adds	r3, r7, r1
 801b860:	3201      	adds	r2, #1
 801b862:	701a      	strb	r2, [r3, #0]
      break;
 801b864:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801b866:	230b      	movs	r3, #11
 801b868:	18fb      	adds	r3, r7, r3
 801b86a:	781b      	ldrb	r3, [r3, #0]
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d127      	bne.n	801b8c0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801b870:	2108      	movs	r1, #8
 801b872:	187b      	adds	r3, r7, r1
 801b874:	881b      	ldrh	r3, [r3, #0]
 801b876:	2b00      	cmp	r3, #0
 801b878:	d019      	beq.n	801b8ae <USBD_GetDescriptor+0x342>
 801b87a:	683b      	ldr	r3, [r7, #0]
 801b87c:	88db      	ldrh	r3, [r3, #6]
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d015      	beq.n	801b8ae <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801b882:	683b      	ldr	r3, [r7, #0]
 801b884:	88da      	ldrh	r2, [r3, #6]
 801b886:	187b      	adds	r3, r7, r1
 801b888:	881b      	ldrh	r3, [r3, #0]
 801b88a:	1c18      	adds	r0, r3, #0
 801b88c:	1c11      	adds	r1, r2, #0
 801b88e:	b28a      	uxth	r2, r1
 801b890:	b283      	uxth	r3, r0
 801b892:	429a      	cmp	r2, r3
 801b894:	d900      	bls.n	801b898 <USBD_GetDescriptor+0x32c>
 801b896:	1c01      	adds	r1, r0, #0
 801b898:	b28a      	uxth	r2, r1
 801b89a:	2108      	movs	r1, #8
 801b89c:	187b      	adds	r3, r7, r1
 801b89e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801b8a0:	187b      	adds	r3, r7, r1
 801b8a2:	881a      	ldrh	r2, [r3, #0]
 801b8a4:	68f9      	ldr	r1, [r7, #12]
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	0018      	movs	r0, r3
 801b8aa:	f000 fa70 	bl	801bd8e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801b8ae:	683b      	ldr	r3, [r7, #0]
 801b8b0:	88db      	ldrh	r3, [r3, #6]
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d105      	bne.n	801b8c2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	0018      	movs	r0, r3
 801b8ba:	f000 fad2 	bl	801be62 <USBD_CtlSendStatus>
 801b8be:	e000      	b.n	801b8c2 <USBD_GetDescriptor+0x356>
    return;
 801b8c0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801b8c2:	46bd      	mov	sp, r7
 801b8c4:	b004      	add	sp, #16
 801b8c6:	bd80      	pop	{r7, pc}
 801b8c8:	080243c0 	.word	0x080243c0
 801b8cc:	080243e0 	.word	0x080243e0

0801b8d0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801b8d0:	b590      	push	{r4, r7, lr}
 801b8d2:	b085      	sub	sp, #20
 801b8d4:	af00      	add	r7, sp, #0
 801b8d6:	6078      	str	r0, [r7, #4]
 801b8d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801b8da:	683b      	ldr	r3, [r7, #0]
 801b8dc:	889b      	ldrh	r3, [r3, #4]
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d13d      	bne.n	801b95e <USBD_SetAddress+0x8e>
 801b8e2:	683b      	ldr	r3, [r7, #0]
 801b8e4:	88db      	ldrh	r3, [r3, #6]
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d139      	bne.n	801b95e <USBD_SetAddress+0x8e>
 801b8ea:	683b      	ldr	r3, [r7, #0]
 801b8ec:	885b      	ldrh	r3, [r3, #2]
 801b8ee:	2b7f      	cmp	r3, #127	@ 0x7f
 801b8f0:	d835      	bhi.n	801b95e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801b8f2:	683b      	ldr	r3, [r7, #0]
 801b8f4:	885b      	ldrh	r3, [r3, #2]
 801b8f6:	b2da      	uxtb	r2, r3
 801b8f8:	230f      	movs	r3, #15
 801b8fa:	18fb      	adds	r3, r7, r3
 801b8fc:	217f      	movs	r1, #127	@ 0x7f
 801b8fe:	400a      	ands	r2, r1
 801b900:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b902:	687a      	ldr	r2, [r7, #4]
 801b904:	23a7      	movs	r3, #167	@ 0xa7
 801b906:	009b      	lsls	r3, r3, #2
 801b908:	5cd3      	ldrb	r3, [r2, r3]
 801b90a:	2b03      	cmp	r3, #3
 801b90c:	d106      	bne.n	801b91c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801b90e:	683a      	ldr	r2, [r7, #0]
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	0011      	movs	r1, r2
 801b914:	0018      	movs	r0, r3
 801b916:	f000 f9bc 	bl	801bc92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b91a:	e027      	b.n	801b96c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	240f      	movs	r4, #15
 801b920:	193a      	adds	r2, r7, r4
 801b922:	4914      	ldr	r1, [pc, #80]	@ (801b974 <USBD_SetAddress+0xa4>)
 801b924:	7812      	ldrb	r2, [r2, #0]
 801b926:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801b928:	193b      	adds	r3, r7, r4
 801b92a:	781a      	ldrb	r2, [r3, #0]
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	0011      	movs	r1, r2
 801b930:	0018      	movs	r0, r3
 801b932:	f000 ff5d 	bl	801c7f0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	0018      	movs	r0, r3
 801b93a:	f000 fa92 	bl	801be62 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801b93e:	193b      	adds	r3, r7, r4
 801b940:	781b      	ldrb	r3, [r3, #0]
 801b942:	2b00      	cmp	r3, #0
 801b944:	d005      	beq.n	801b952 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801b946:	687a      	ldr	r2, [r7, #4]
 801b948:	23a7      	movs	r3, #167	@ 0xa7
 801b94a:	009b      	lsls	r3, r3, #2
 801b94c:	2102      	movs	r1, #2
 801b94e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b950:	e00c      	b.n	801b96c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801b952:	687a      	ldr	r2, [r7, #4]
 801b954:	23a7      	movs	r3, #167	@ 0xa7
 801b956:	009b      	lsls	r3, r3, #2
 801b958:	2101      	movs	r1, #1
 801b95a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b95c:	e006      	b.n	801b96c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801b95e:	683a      	ldr	r2, [r7, #0]
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	0011      	movs	r1, r2
 801b964:	0018      	movs	r0, r3
 801b966:	f000 f994 	bl	801bc92 <USBD_CtlError>
  }
}
 801b96a:	46c0      	nop			@ (mov r8, r8)
 801b96c:	46c0      	nop			@ (mov r8, r8)
 801b96e:	46bd      	mov	sp, r7
 801b970:	b005      	add	sp, #20
 801b972:	bd90      	pop	{r4, r7, pc}
 801b974:	0000029e 	.word	0x0000029e

0801b978 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b978:	b580      	push	{r7, lr}
 801b97a:	b082      	sub	sp, #8
 801b97c:	af00      	add	r7, sp, #0
 801b97e:	6078      	str	r0, [r7, #4]
 801b980:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801b982:	683b      	ldr	r3, [r7, #0]
 801b984:	885b      	ldrh	r3, [r3, #2]
 801b986:	b2da      	uxtb	r2, r3
 801b988:	4b4c      	ldr	r3, [pc, #304]	@ (801babc <USBD_SetConfig+0x144>)
 801b98a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801b98c:	4b4b      	ldr	r3, [pc, #300]	@ (801babc <USBD_SetConfig+0x144>)
 801b98e:	781b      	ldrb	r3, [r3, #0]
 801b990:	2b01      	cmp	r3, #1
 801b992:	d906      	bls.n	801b9a2 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801b994:	683a      	ldr	r2, [r7, #0]
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	0011      	movs	r1, r2
 801b99a:	0018      	movs	r0, r3
 801b99c:	f000 f979 	bl	801bc92 <USBD_CtlError>
 801b9a0:	e088      	b.n	801bab4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801b9a2:	687a      	ldr	r2, [r7, #4]
 801b9a4:	23a7      	movs	r3, #167	@ 0xa7
 801b9a6:	009b      	lsls	r3, r3, #2
 801b9a8:	5cd3      	ldrb	r3, [r2, r3]
 801b9aa:	2b02      	cmp	r3, #2
 801b9ac:	d002      	beq.n	801b9b4 <USBD_SetConfig+0x3c>
 801b9ae:	2b03      	cmp	r3, #3
 801b9b0:	d029      	beq.n	801ba06 <USBD_SetConfig+0x8e>
 801b9b2:	e071      	b.n	801ba98 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801b9b4:	4b41      	ldr	r3, [pc, #260]	@ (801babc <USBD_SetConfig+0x144>)
 801b9b6:	781b      	ldrb	r3, [r3, #0]
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d01f      	beq.n	801b9fc <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801b9bc:	4b3f      	ldr	r3, [pc, #252]	@ (801babc <USBD_SetConfig+0x144>)
 801b9be:	781b      	ldrb	r3, [r3, #0]
 801b9c0:	001a      	movs	r2, r3
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801b9c6:	687a      	ldr	r2, [r7, #4]
 801b9c8:	23a7      	movs	r3, #167	@ 0xa7
 801b9ca:	009b      	lsls	r3, r3, #2
 801b9cc:	2103      	movs	r1, #3
 801b9ce:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801b9d0:	4b3a      	ldr	r3, [pc, #232]	@ (801babc <USBD_SetConfig+0x144>)
 801b9d2:	781a      	ldrb	r2, [r3, #0]
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	0011      	movs	r1, r2
 801b9d8:	0018      	movs	r0, r3
 801b9da:	f7ff f8c6 	bl	801ab6a <USBD_SetClassConfig>
 801b9de:	0003      	movs	r3, r0
 801b9e0:	2b02      	cmp	r3, #2
 801b9e2:	d106      	bne.n	801b9f2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801b9e4:	683a      	ldr	r2, [r7, #0]
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	0011      	movs	r1, r2
 801b9ea:	0018      	movs	r0, r3
 801b9ec:	f000 f951 	bl	801bc92 <USBD_CtlError>
            return;
 801b9f0:	e060      	b.n	801bab4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	0018      	movs	r0, r3
 801b9f6:	f000 fa34 	bl	801be62 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801b9fa:	e05b      	b.n	801bab4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	0018      	movs	r0, r3
 801ba00:	f000 fa2f 	bl	801be62 <USBD_CtlSendStatus>
        break;
 801ba04:	e056      	b.n	801bab4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801ba06:	4b2d      	ldr	r3, [pc, #180]	@ (801babc <USBD_SetConfig+0x144>)
 801ba08:	781b      	ldrb	r3, [r3, #0]
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	d115      	bne.n	801ba3a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801ba0e:	687a      	ldr	r2, [r7, #4]
 801ba10:	23a7      	movs	r3, #167	@ 0xa7
 801ba12:	009b      	lsls	r3, r3, #2
 801ba14:	2102      	movs	r1, #2
 801ba16:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801ba18:	4b28      	ldr	r3, [pc, #160]	@ (801babc <USBD_SetConfig+0x144>)
 801ba1a:	781b      	ldrb	r3, [r3, #0]
 801ba1c:	001a      	movs	r2, r3
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801ba22:	4b26      	ldr	r3, [pc, #152]	@ (801babc <USBD_SetConfig+0x144>)
 801ba24:	781a      	ldrb	r2, [r3, #0]
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	0011      	movs	r1, r2
 801ba2a:	0018      	movs	r0, r3
 801ba2c:	f7ff f8c4 	bl	801abb8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	0018      	movs	r0, r3
 801ba34:	f000 fa15 	bl	801be62 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801ba38:	e03c      	b.n	801bab4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801ba3a:	4b20      	ldr	r3, [pc, #128]	@ (801babc <USBD_SetConfig+0x144>)
 801ba3c:	781b      	ldrb	r3, [r3, #0]
 801ba3e:	001a      	movs	r2, r3
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	685b      	ldr	r3, [r3, #4]
 801ba44:	429a      	cmp	r2, r3
 801ba46:	d022      	beq.n	801ba8e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	685b      	ldr	r3, [r3, #4]
 801ba4c:	b2da      	uxtb	r2, r3
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	0011      	movs	r1, r2
 801ba52:	0018      	movs	r0, r3
 801ba54:	f7ff f8b0 	bl	801abb8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801ba58:	4b18      	ldr	r3, [pc, #96]	@ (801babc <USBD_SetConfig+0x144>)
 801ba5a:	781b      	ldrb	r3, [r3, #0]
 801ba5c:	001a      	movs	r2, r3
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801ba62:	4b16      	ldr	r3, [pc, #88]	@ (801babc <USBD_SetConfig+0x144>)
 801ba64:	781a      	ldrb	r2, [r3, #0]
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	0011      	movs	r1, r2
 801ba6a:	0018      	movs	r0, r3
 801ba6c:	f7ff f87d 	bl	801ab6a <USBD_SetClassConfig>
 801ba70:	0003      	movs	r3, r0
 801ba72:	2b02      	cmp	r3, #2
 801ba74:	d106      	bne.n	801ba84 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801ba76:	683a      	ldr	r2, [r7, #0]
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	0011      	movs	r1, r2
 801ba7c:	0018      	movs	r0, r3
 801ba7e:	f000 f908 	bl	801bc92 <USBD_CtlError>
            return;
 801ba82:	e017      	b.n	801bab4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	0018      	movs	r0, r3
 801ba88:	f000 f9eb 	bl	801be62 <USBD_CtlSendStatus>
        break;
 801ba8c:	e012      	b.n	801bab4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801ba8e:	687b      	ldr	r3, [r7, #4]
 801ba90:	0018      	movs	r0, r3
 801ba92:	f000 f9e6 	bl	801be62 <USBD_CtlSendStatus>
        break;
 801ba96:	e00d      	b.n	801bab4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801ba98:	683a      	ldr	r2, [r7, #0]
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	0011      	movs	r1, r2
 801ba9e:	0018      	movs	r0, r3
 801baa0:	f000 f8f7 	bl	801bc92 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801baa4:	4b05      	ldr	r3, [pc, #20]	@ (801babc <USBD_SetConfig+0x144>)
 801baa6:	781a      	ldrb	r2, [r3, #0]
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	0011      	movs	r1, r2
 801baac:	0018      	movs	r0, r3
 801baae:	f7ff f883 	bl	801abb8 <USBD_ClrClassConfig>
        break;
 801bab2:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801bab4:	46bd      	mov	sp, r7
 801bab6:	b002      	add	sp, #8
 801bab8:	bd80      	pop	{r7, pc}
 801baba:	46c0      	nop			@ (mov r8, r8)
 801babc:	20002548 	.word	0x20002548

0801bac0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bac0:	b580      	push	{r7, lr}
 801bac2:	b082      	sub	sp, #8
 801bac4:	af00      	add	r7, sp, #0
 801bac6:	6078      	str	r0, [r7, #4]
 801bac8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801baca:	683b      	ldr	r3, [r7, #0]
 801bacc:	88db      	ldrh	r3, [r3, #6]
 801bace:	2b01      	cmp	r3, #1
 801bad0:	d006      	beq.n	801bae0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801bad2:	683a      	ldr	r2, [r7, #0]
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	0011      	movs	r1, r2
 801bad8:	0018      	movs	r0, r3
 801bada:	f000 f8da 	bl	801bc92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801bade:	e026      	b.n	801bb2e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801bae0:	687a      	ldr	r2, [r7, #4]
 801bae2:	23a7      	movs	r3, #167	@ 0xa7
 801bae4:	009b      	lsls	r3, r3, #2
 801bae6:	5cd3      	ldrb	r3, [r2, r3]
 801bae8:	2b02      	cmp	r3, #2
 801baea:	dc02      	bgt.n	801baf2 <USBD_GetConfig+0x32>
 801baec:	2b00      	cmp	r3, #0
 801baee:	dc03      	bgt.n	801baf8 <USBD_GetConfig+0x38>
 801baf0:	e016      	b.n	801bb20 <USBD_GetConfig+0x60>
 801baf2:	2b03      	cmp	r3, #3
 801baf4:	d00c      	beq.n	801bb10 <USBD_GetConfig+0x50>
 801baf6:	e013      	b.n	801bb20 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	2200      	movs	r2, #0
 801bafc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	3308      	adds	r3, #8
 801bb02:	0019      	movs	r1, r3
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	2201      	movs	r2, #1
 801bb08:	0018      	movs	r0, r3
 801bb0a:	f000 f940 	bl	801bd8e <USBD_CtlSendData>
        break;
 801bb0e:	e00e      	b.n	801bb2e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	1d19      	adds	r1, r3, #4
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	2201      	movs	r2, #1
 801bb18:	0018      	movs	r0, r3
 801bb1a:	f000 f938 	bl	801bd8e <USBD_CtlSendData>
        break;
 801bb1e:	e006      	b.n	801bb2e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801bb20:	683a      	ldr	r2, [r7, #0]
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	0011      	movs	r1, r2
 801bb26:	0018      	movs	r0, r3
 801bb28:	f000 f8b3 	bl	801bc92 <USBD_CtlError>
        break;
 801bb2c:	46c0      	nop			@ (mov r8, r8)
}
 801bb2e:	46c0      	nop			@ (mov r8, r8)
 801bb30:	46bd      	mov	sp, r7
 801bb32:	b002      	add	sp, #8
 801bb34:	bd80      	pop	{r7, pc}

0801bb36 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801bb36:	b580      	push	{r7, lr}
 801bb38:	b082      	sub	sp, #8
 801bb3a:	af00      	add	r7, sp, #0
 801bb3c:	6078      	str	r0, [r7, #4]
 801bb3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801bb40:	687a      	ldr	r2, [r7, #4]
 801bb42:	23a7      	movs	r3, #167	@ 0xa7
 801bb44:	009b      	lsls	r3, r3, #2
 801bb46:	5cd3      	ldrb	r3, [r2, r3]
 801bb48:	3b01      	subs	r3, #1
 801bb4a:	2b02      	cmp	r3, #2
 801bb4c:	d822      	bhi.n	801bb94 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801bb4e:	683b      	ldr	r3, [r7, #0]
 801bb50:	88db      	ldrh	r3, [r3, #6]
 801bb52:	2b02      	cmp	r3, #2
 801bb54:	d006      	beq.n	801bb64 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801bb56:	683a      	ldr	r2, [r7, #0]
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	0011      	movs	r1, r2
 801bb5c:	0018      	movs	r0, r3
 801bb5e:	f000 f898 	bl	801bc92 <USBD_CtlError>
        break;
 801bb62:	e01e      	b.n	801bba2 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	2201      	movs	r2, #1
 801bb68:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801bb6a:	687a      	ldr	r2, [r7, #4]
 801bb6c:	23a9      	movs	r3, #169	@ 0xa9
 801bb6e:	009b      	lsls	r3, r3, #2
 801bb70:	58d3      	ldr	r3, [r2, r3]
 801bb72:	2b00      	cmp	r3, #0
 801bb74:	d005      	beq.n	801bb82 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	68db      	ldr	r3, [r3, #12]
 801bb7a:	2202      	movs	r2, #2
 801bb7c:	431a      	orrs	r2, r3
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	330c      	adds	r3, #12
 801bb86:	0019      	movs	r1, r3
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	2202      	movs	r2, #2
 801bb8c:	0018      	movs	r0, r3
 801bb8e:	f000 f8fe 	bl	801bd8e <USBD_CtlSendData>
      break;
 801bb92:	e006      	b.n	801bba2 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801bb94:	683a      	ldr	r2, [r7, #0]
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	0011      	movs	r1, r2
 801bb9a:	0018      	movs	r0, r3
 801bb9c:	f000 f879 	bl	801bc92 <USBD_CtlError>
      break;
 801bba0:	46c0      	nop			@ (mov r8, r8)
  }
}
 801bba2:	46c0      	nop			@ (mov r8, r8)
 801bba4:	46bd      	mov	sp, r7
 801bba6:	b002      	add	sp, #8
 801bba8:	bd80      	pop	{r7, pc}

0801bbaa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801bbaa:	b580      	push	{r7, lr}
 801bbac:	b082      	sub	sp, #8
 801bbae:	af00      	add	r7, sp, #0
 801bbb0:	6078      	str	r0, [r7, #4]
 801bbb2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801bbb4:	683b      	ldr	r3, [r7, #0]
 801bbb6:	885b      	ldrh	r3, [r3, #2]
 801bbb8:	2b01      	cmp	r3, #1
 801bbba:	d108      	bne.n	801bbce <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801bbbc:	687a      	ldr	r2, [r7, #4]
 801bbbe:	23a9      	movs	r3, #169	@ 0xa9
 801bbc0:	009b      	lsls	r3, r3, #2
 801bbc2:	2101      	movs	r1, #1
 801bbc4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	0018      	movs	r0, r3
 801bbca:	f000 f94a 	bl	801be62 <USBD_CtlSendStatus>
  }
}
 801bbce:	46c0      	nop			@ (mov r8, r8)
 801bbd0:	46bd      	mov	sp, r7
 801bbd2:	b002      	add	sp, #8
 801bbd4:	bd80      	pop	{r7, pc}

0801bbd6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801bbd6:	b580      	push	{r7, lr}
 801bbd8:	b082      	sub	sp, #8
 801bbda:	af00      	add	r7, sp, #0
 801bbdc:	6078      	str	r0, [r7, #4]
 801bbde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801bbe0:	687a      	ldr	r2, [r7, #4]
 801bbe2:	23a7      	movs	r3, #167	@ 0xa7
 801bbe4:	009b      	lsls	r3, r3, #2
 801bbe6:	5cd3      	ldrb	r3, [r2, r3]
 801bbe8:	3b01      	subs	r3, #1
 801bbea:	2b02      	cmp	r3, #2
 801bbec:	d80d      	bhi.n	801bc0a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801bbee:	683b      	ldr	r3, [r7, #0]
 801bbf0:	885b      	ldrh	r3, [r3, #2]
 801bbf2:	2b01      	cmp	r3, #1
 801bbf4:	d110      	bne.n	801bc18 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801bbf6:	687a      	ldr	r2, [r7, #4]
 801bbf8:	23a9      	movs	r3, #169	@ 0xa9
 801bbfa:	009b      	lsls	r3, r3, #2
 801bbfc:	2100      	movs	r1, #0
 801bbfe:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	0018      	movs	r0, r3
 801bc04:	f000 f92d 	bl	801be62 <USBD_CtlSendStatus>
      }
      break;
 801bc08:	e006      	b.n	801bc18 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801bc0a:	683a      	ldr	r2, [r7, #0]
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	0011      	movs	r1, r2
 801bc10:	0018      	movs	r0, r3
 801bc12:	f000 f83e 	bl	801bc92 <USBD_CtlError>
      break;
 801bc16:	e000      	b.n	801bc1a <USBD_ClrFeature+0x44>
      break;
 801bc18:	46c0      	nop			@ (mov r8, r8)
  }
}
 801bc1a:	46c0      	nop			@ (mov r8, r8)
 801bc1c:	46bd      	mov	sp, r7
 801bc1e:	b002      	add	sp, #8
 801bc20:	bd80      	pop	{r7, pc}

0801bc22 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801bc22:	b580      	push	{r7, lr}
 801bc24:	b082      	sub	sp, #8
 801bc26:	af00      	add	r7, sp, #0
 801bc28:	6078      	str	r0, [r7, #4]
 801bc2a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801bc2c:	683b      	ldr	r3, [r7, #0]
 801bc2e:	781a      	ldrb	r2, [r3, #0]
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801bc34:	683b      	ldr	r3, [r7, #0]
 801bc36:	785a      	ldrb	r2, [r3, #1]
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801bc3c:	683b      	ldr	r3, [r7, #0]
 801bc3e:	3302      	adds	r3, #2
 801bc40:	781b      	ldrb	r3, [r3, #0]
 801bc42:	001a      	movs	r2, r3
 801bc44:	683b      	ldr	r3, [r7, #0]
 801bc46:	3303      	adds	r3, #3
 801bc48:	781b      	ldrb	r3, [r3, #0]
 801bc4a:	021b      	lsls	r3, r3, #8
 801bc4c:	b29b      	uxth	r3, r3
 801bc4e:	18d3      	adds	r3, r2, r3
 801bc50:	b29a      	uxth	r2, r3
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801bc56:	683b      	ldr	r3, [r7, #0]
 801bc58:	3304      	adds	r3, #4
 801bc5a:	781b      	ldrb	r3, [r3, #0]
 801bc5c:	001a      	movs	r2, r3
 801bc5e:	683b      	ldr	r3, [r7, #0]
 801bc60:	3305      	adds	r3, #5
 801bc62:	781b      	ldrb	r3, [r3, #0]
 801bc64:	021b      	lsls	r3, r3, #8
 801bc66:	b29b      	uxth	r3, r3
 801bc68:	18d3      	adds	r3, r2, r3
 801bc6a:	b29a      	uxth	r2, r3
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801bc70:	683b      	ldr	r3, [r7, #0]
 801bc72:	3306      	adds	r3, #6
 801bc74:	781b      	ldrb	r3, [r3, #0]
 801bc76:	001a      	movs	r2, r3
 801bc78:	683b      	ldr	r3, [r7, #0]
 801bc7a:	3307      	adds	r3, #7
 801bc7c:	781b      	ldrb	r3, [r3, #0]
 801bc7e:	021b      	lsls	r3, r3, #8
 801bc80:	b29b      	uxth	r3, r3
 801bc82:	18d3      	adds	r3, r2, r3
 801bc84:	b29a      	uxth	r2, r3
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	80da      	strh	r2, [r3, #6]

}
 801bc8a:	46c0      	nop			@ (mov r8, r8)
 801bc8c:	46bd      	mov	sp, r7
 801bc8e:	b002      	add	sp, #8
 801bc90:	bd80      	pop	{r7, pc}

0801bc92 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801bc92:	b580      	push	{r7, lr}
 801bc94:	b082      	sub	sp, #8
 801bc96:	af00      	add	r7, sp, #0
 801bc98:	6078      	str	r0, [r7, #4]
 801bc9a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	2180      	movs	r1, #128	@ 0x80
 801bca0:	0018      	movs	r0, r3
 801bca2:	f000 fd1e 	bl	801c6e2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	2100      	movs	r1, #0
 801bcaa:	0018      	movs	r0, r3
 801bcac:	f000 fd19 	bl	801c6e2 <USBD_LL_StallEP>
}
 801bcb0:	46c0      	nop			@ (mov r8, r8)
 801bcb2:	46bd      	mov	sp, r7
 801bcb4:	b002      	add	sp, #8
 801bcb6:	bd80      	pop	{r7, pc}

0801bcb8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801bcb8:	b590      	push	{r4, r7, lr}
 801bcba:	b087      	sub	sp, #28
 801bcbc:	af00      	add	r7, sp, #0
 801bcbe:	60f8      	str	r0, [r7, #12]
 801bcc0:	60b9      	str	r1, [r7, #8]
 801bcc2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801bcc4:	2417      	movs	r4, #23
 801bcc6:	193b      	adds	r3, r7, r4
 801bcc8:	2200      	movs	r2, #0
 801bcca:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801bccc:	68fb      	ldr	r3, [r7, #12]
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d03c      	beq.n	801bd4c <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801bcd2:	68fb      	ldr	r3, [r7, #12]
 801bcd4:	0018      	movs	r0, r3
 801bcd6:	f000 f83d 	bl	801bd54 <USBD_GetLen>
 801bcda:	0003      	movs	r3, r0
 801bcdc:	3301      	adds	r3, #1
 801bcde:	b29b      	uxth	r3, r3
 801bce0:	18db      	adds	r3, r3, r3
 801bce2:	b29a      	uxth	r2, r3
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801bce8:	193b      	adds	r3, r7, r4
 801bcea:	781b      	ldrb	r3, [r3, #0]
 801bcec:	193a      	adds	r2, r7, r4
 801bcee:	1c59      	adds	r1, r3, #1
 801bcf0:	7011      	strb	r1, [r2, #0]
 801bcf2:	001a      	movs	r2, r3
 801bcf4:	68bb      	ldr	r3, [r7, #8]
 801bcf6:	189b      	adds	r3, r3, r2
 801bcf8:	687a      	ldr	r2, [r7, #4]
 801bcfa:	7812      	ldrb	r2, [r2, #0]
 801bcfc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801bcfe:	193b      	adds	r3, r7, r4
 801bd00:	781b      	ldrb	r3, [r3, #0]
 801bd02:	193a      	adds	r2, r7, r4
 801bd04:	1c59      	adds	r1, r3, #1
 801bd06:	7011      	strb	r1, [r2, #0]
 801bd08:	001a      	movs	r2, r3
 801bd0a:	68bb      	ldr	r3, [r7, #8]
 801bd0c:	189b      	adds	r3, r3, r2
 801bd0e:	2203      	movs	r2, #3
 801bd10:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801bd12:	e017      	b.n	801bd44 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801bd14:	68fb      	ldr	r3, [r7, #12]
 801bd16:	1c5a      	adds	r2, r3, #1
 801bd18:	60fa      	str	r2, [r7, #12]
 801bd1a:	2417      	movs	r4, #23
 801bd1c:	193a      	adds	r2, r7, r4
 801bd1e:	7812      	ldrb	r2, [r2, #0]
 801bd20:	1939      	adds	r1, r7, r4
 801bd22:	1c50      	adds	r0, r2, #1
 801bd24:	7008      	strb	r0, [r1, #0]
 801bd26:	0011      	movs	r1, r2
 801bd28:	68ba      	ldr	r2, [r7, #8]
 801bd2a:	1852      	adds	r2, r2, r1
 801bd2c:	781b      	ldrb	r3, [r3, #0]
 801bd2e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801bd30:	193b      	adds	r3, r7, r4
 801bd32:	781b      	ldrb	r3, [r3, #0]
 801bd34:	193a      	adds	r2, r7, r4
 801bd36:	1c59      	adds	r1, r3, #1
 801bd38:	7011      	strb	r1, [r2, #0]
 801bd3a:	001a      	movs	r2, r3
 801bd3c:	68bb      	ldr	r3, [r7, #8]
 801bd3e:	189b      	adds	r3, r3, r2
 801bd40:	2200      	movs	r2, #0
 801bd42:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801bd44:	68fb      	ldr	r3, [r7, #12]
 801bd46:	781b      	ldrb	r3, [r3, #0]
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	d1e3      	bne.n	801bd14 <USBD_GetString+0x5c>
    }
  }
}
 801bd4c:	46c0      	nop			@ (mov r8, r8)
 801bd4e:	46bd      	mov	sp, r7
 801bd50:	b007      	add	sp, #28
 801bd52:	bd90      	pop	{r4, r7, pc}

0801bd54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801bd54:	b580      	push	{r7, lr}
 801bd56:	b084      	sub	sp, #16
 801bd58:	af00      	add	r7, sp, #0
 801bd5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801bd5c:	230f      	movs	r3, #15
 801bd5e:	18fb      	adds	r3, r7, r3
 801bd60:	2200      	movs	r2, #0
 801bd62:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801bd64:	e008      	b.n	801bd78 <USBD_GetLen+0x24>
  {
    len++;
 801bd66:	210f      	movs	r1, #15
 801bd68:	187b      	adds	r3, r7, r1
 801bd6a:	781a      	ldrb	r2, [r3, #0]
 801bd6c:	187b      	adds	r3, r7, r1
 801bd6e:	3201      	adds	r2, #1
 801bd70:	701a      	strb	r2, [r3, #0]
    buf++;
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	3301      	adds	r3, #1
 801bd76:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	781b      	ldrb	r3, [r3, #0]
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	d1f2      	bne.n	801bd66 <USBD_GetLen+0x12>
  }

  return len;
 801bd80:	230f      	movs	r3, #15
 801bd82:	18fb      	adds	r3, r7, r3
 801bd84:	781b      	ldrb	r3, [r3, #0]
}
 801bd86:	0018      	movs	r0, r3
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	b004      	add	sp, #16
 801bd8c:	bd80      	pop	{r7, pc}

0801bd8e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801bd8e:	b580      	push	{r7, lr}
 801bd90:	b084      	sub	sp, #16
 801bd92:	af00      	add	r7, sp, #0
 801bd94:	60f8      	str	r0, [r7, #12]
 801bd96:	60b9      	str	r1, [r7, #8]
 801bd98:	1dbb      	adds	r3, r7, #6
 801bd9a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801bd9c:	68fa      	ldr	r2, [r7, #12]
 801bd9e:	23a5      	movs	r3, #165	@ 0xa5
 801bda0:	009b      	lsls	r3, r3, #2
 801bda2:	2102      	movs	r1, #2
 801bda4:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801bda6:	1dbb      	adds	r3, r7, #6
 801bda8:	881a      	ldrh	r2, [r3, #0]
 801bdaa:	68fb      	ldr	r3, [r7, #12]
 801bdac:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801bdae:	1dbb      	adds	r3, r7, #6
 801bdb0:	881a      	ldrh	r2, [r3, #0]
 801bdb2:	68fb      	ldr	r3, [r7, #12]
 801bdb4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801bdb6:	1dbb      	adds	r3, r7, #6
 801bdb8:	881b      	ldrh	r3, [r3, #0]
 801bdba:	68ba      	ldr	r2, [r7, #8]
 801bdbc:	68f8      	ldr	r0, [r7, #12]
 801bdbe:	2100      	movs	r1, #0
 801bdc0:	f000 fd41 	bl	801c846 <USBD_LL_Transmit>

  return USBD_OK;
 801bdc4:	2300      	movs	r3, #0
}
 801bdc6:	0018      	movs	r0, r3
 801bdc8:	46bd      	mov	sp, r7
 801bdca:	b004      	add	sp, #16
 801bdcc:	bd80      	pop	{r7, pc}

0801bdce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801bdce:	b580      	push	{r7, lr}
 801bdd0:	b084      	sub	sp, #16
 801bdd2:	af00      	add	r7, sp, #0
 801bdd4:	60f8      	str	r0, [r7, #12]
 801bdd6:	60b9      	str	r1, [r7, #8]
 801bdd8:	1dbb      	adds	r3, r7, #6
 801bdda:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801bddc:	1dbb      	adds	r3, r7, #6
 801bdde:	881b      	ldrh	r3, [r3, #0]
 801bde0:	68ba      	ldr	r2, [r7, #8]
 801bde2:	68f8      	ldr	r0, [r7, #12]
 801bde4:	2100      	movs	r1, #0
 801bde6:	f000 fd2e 	bl	801c846 <USBD_LL_Transmit>

  return USBD_OK;
 801bdea:	2300      	movs	r3, #0
}
 801bdec:	0018      	movs	r0, r3
 801bdee:	46bd      	mov	sp, r7
 801bdf0:	b004      	add	sp, #16
 801bdf2:	bd80      	pop	{r7, pc}

0801bdf4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801bdf4:	b580      	push	{r7, lr}
 801bdf6:	b084      	sub	sp, #16
 801bdf8:	af00      	add	r7, sp, #0
 801bdfa:	60f8      	str	r0, [r7, #12]
 801bdfc:	60b9      	str	r1, [r7, #8]
 801bdfe:	1dbb      	adds	r3, r7, #6
 801be00:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801be02:	68fa      	ldr	r2, [r7, #12]
 801be04:	23a5      	movs	r3, #165	@ 0xa5
 801be06:	009b      	lsls	r3, r3, #2
 801be08:	2103      	movs	r1, #3
 801be0a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801be0c:	1dbb      	adds	r3, r7, #6
 801be0e:	8819      	ldrh	r1, [r3, #0]
 801be10:	68fa      	ldr	r2, [r7, #12]
 801be12:	23ae      	movs	r3, #174	@ 0xae
 801be14:	005b      	lsls	r3, r3, #1
 801be16:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801be18:	1dbb      	adds	r3, r7, #6
 801be1a:	8819      	ldrh	r1, [r3, #0]
 801be1c:	68fa      	ldr	r2, [r7, #12]
 801be1e:	23b0      	movs	r3, #176	@ 0xb0
 801be20:	005b      	lsls	r3, r3, #1
 801be22:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801be24:	1dbb      	adds	r3, r7, #6
 801be26:	881b      	ldrh	r3, [r3, #0]
 801be28:	68ba      	ldr	r2, [r7, #8]
 801be2a:	68f8      	ldr	r0, [r7, #12]
 801be2c:	2100      	movs	r1, #0
 801be2e:	f000 fd41 	bl	801c8b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801be32:	2300      	movs	r3, #0
}
 801be34:	0018      	movs	r0, r3
 801be36:	46bd      	mov	sp, r7
 801be38:	b004      	add	sp, #16
 801be3a:	bd80      	pop	{r7, pc}

0801be3c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801be3c:	b580      	push	{r7, lr}
 801be3e:	b084      	sub	sp, #16
 801be40:	af00      	add	r7, sp, #0
 801be42:	60f8      	str	r0, [r7, #12]
 801be44:	60b9      	str	r1, [r7, #8]
 801be46:	1dbb      	adds	r3, r7, #6
 801be48:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801be4a:	1dbb      	adds	r3, r7, #6
 801be4c:	881b      	ldrh	r3, [r3, #0]
 801be4e:	68ba      	ldr	r2, [r7, #8]
 801be50:	68f8      	ldr	r0, [r7, #12]
 801be52:	2100      	movs	r1, #0
 801be54:	f000 fd2e 	bl	801c8b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801be58:	2300      	movs	r3, #0
}
 801be5a:	0018      	movs	r0, r3
 801be5c:	46bd      	mov	sp, r7
 801be5e:	b004      	add	sp, #16
 801be60:	bd80      	pop	{r7, pc}

0801be62 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801be62:	b580      	push	{r7, lr}
 801be64:	b082      	sub	sp, #8
 801be66:	af00      	add	r7, sp, #0
 801be68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801be6a:	687a      	ldr	r2, [r7, #4]
 801be6c:	23a5      	movs	r3, #165	@ 0xa5
 801be6e:	009b      	lsls	r3, r3, #2
 801be70:	2104      	movs	r1, #4
 801be72:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801be74:	6878      	ldr	r0, [r7, #4]
 801be76:	2300      	movs	r3, #0
 801be78:	2200      	movs	r2, #0
 801be7a:	2100      	movs	r1, #0
 801be7c:	f000 fce3 	bl	801c846 <USBD_LL_Transmit>

  return USBD_OK;
 801be80:	2300      	movs	r3, #0
}
 801be82:	0018      	movs	r0, r3
 801be84:	46bd      	mov	sp, r7
 801be86:	b002      	add	sp, #8
 801be88:	bd80      	pop	{r7, pc}

0801be8a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801be8a:	b580      	push	{r7, lr}
 801be8c:	b082      	sub	sp, #8
 801be8e:	af00      	add	r7, sp, #0
 801be90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801be92:	687a      	ldr	r2, [r7, #4]
 801be94:	23a5      	movs	r3, #165	@ 0xa5
 801be96:	009b      	lsls	r3, r3, #2
 801be98:	2105      	movs	r1, #5
 801be9a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801be9c:	6878      	ldr	r0, [r7, #4]
 801be9e:	2300      	movs	r3, #0
 801bea0:	2200      	movs	r2, #0
 801bea2:	2100      	movs	r1, #0
 801bea4:	f000 fd06 	bl	801c8b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801bea8:	2300      	movs	r3, #0
}
 801beaa:	0018      	movs	r0, r3
 801beac:	46bd      	mov	sp, r7
 801beae:	b002      	add	sp, #8
 801beb0:	bd80      	pop	{r7, pc}
	...

0801beb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801beb4:	b580      	push	{r7, lr}
 801beb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801beb8:	4914      	ldr	r1, [pc, #80]	@ (801bf0c <MX_USB_DEVICE_Init+0x58>)
 801beba:	4b15      	ldr	r3, [pc, #84]	@ (801bf10 <MX_USB_DEVICE_Init+0x5c>)
 801bebc:	2200      	movs	r2, #0
 801bebe:	0018      	movs	r0, r3
 801bec0:	f7fe fdec 	bl	801aa9c <USBD_Init>
 801bec4:	1e03      	subs	r3, r0, #0
 801bec6:	d001      	beq.n	801becc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801bec8:	f7ec f86a 	bl	8007fa0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801becc:	4a11      	ldr	r2, [pc, #68]	@ (801bf14 <MX_USB_DEVICE_Init+0x60>)
 801bece:	4b10      	ldr	r3, [pc, #64]	@ (801bf10 <MX_USB_DEVICE_Init+0x5c>)
 801bed0:	0011      	movs	r1, r2
 801bed2:	0018      	movs	r0, r3
 801bed4:	f7fe fe13 	bl	801aafe <USBD_RegisterClass>
 801bed8:	1e03      	subs	r3, r0, #0
 801beda:	d001      	beq.n	801bee0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801bedc:	f7ec f860 	bl	8007fa0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801bee0:	4a0d      	ldr	r2, [pc, #52]	@ (801bf18 <MX_USB_DEVICE_Init+0x64>)
 801bee2:	4b0b      	ldr	r3, [pc, #44]	@ (801bf10 <MX_USB_DEVICE_Init+0x5c>)
 801bee4:	0011      	movs	r1, r2
 801bee6:	0018      	movs	r0, r3
 801bee8:	f7fe fd28 	bl	801a93c <USBD_CDC_RegisterInterface>
 801beec:	1e03      	subs	r3, r0, #0
 801beee:	d001      	beq.n	801bef4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801bef0:	f7ec f856 	bl	8007fa0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801bef4:	4b06      	ldr	r3, [pc, #24]	@ (801bf10 <MX_USB_DEVICE_Init+0x5c>)
 801bef6:	0018      	movs	r0, r3
 801bef8:	f7fe fe21 	bl	801ab3e <USBD_Start>
 801befc:	1e03      	subs	r3, r0, #0
 801befe:	d001      	beq.n	801bf04 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801bf00:	f7ec f84e 	bl	8007fa0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801bf04:	46c0      	nop			@ (mov r8, r8)
 801bf06:	46bd      	mov	sp, r7
 801bf08:	bd80      	pop	{r7, pc}
 801bf0a:	46c0      	nop			@ (mov r8, r8)
 801bf0c:	20000200 	.word	0x20000200
 801bf10:	2000254c 	.word	0x2000254c
 801bf14:	200000ec 	.word	0x200000ec
 801bf18:	200001f0 	.word	0x200001f0

0801bf1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801bf1c:	b580      	push	{r7, lr}
 801bf1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801bf20:	4907      	ldr	r1, [pc, #28]	@ (801bf40 <CDC_Init_FS+0x24>)
 801bf22:	4b08      	ldr	r3, [pc, #32]	@ (801bf44 <CDC_Init_FS+0x28>)
 801bf24:	2200      	movs	r2, #0
 801bf26:	0018      	movs	r0, r3
 801bf28:	f7fe fd23 	bl	801a972 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801bf2c:	4a06      	ldr	r2, [pc, #24]	@ (801bf48 <CDC_Init_FS+0x2c>)
 801bf2e:	4b05      	ldr	r3, [pc, #20]	@ (801bf44 <CDC_Init_FS+0x28>)
 801bf30:	0011      	movs	r1, r2
 801bf32:	0018      	movs	r0, r3
 801bf34:	f7fe fd39 	bl	801a9aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801bf38:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801bf3a:	0018      	movs	r0, r3
 801bf3c:	46bd      	mov	sp, r7
 801bf3e:	bd80      	pop	{r7, pc}
 801bf40:	20002cd0 	.word	0x20002cd0
 801bf44:	2000254c 	.word	0x2000254c
 801bf48:	200028d0 	.word	0x200028d0

0801bf4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801bf4c:	b580      	push	{r7, lr}
 801bf4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801bf50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801bf52:	0018      	movs	r0, r3
 801bf54:	46bd      	mov	sp, r7
 801bf56:	bd80      	pop	{r7, pc}

0801bf58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801bf58:	b580      	push	{r7, lr}
 801bf5a:	b082      	sub	sp, #8
 801bf5c:	af00      	add	r7, sp, #0
 801bf5e:	6039      	str	r1, [r7, #0]
 801bf60:	0011      	movs	r1, r2
 801bf62:	1dfb      	adds	r3, r7, #7
 801bf64:	1c02      	adds	r2, r0, #0
 801bf66:	701a      	strb	r2, [r3, #0]
 801bf68:	1d3b      	adds	r3, r7, #4
 801bf6a:	1c0a      	adds	r2, r1, #0
 801bf6c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801bf6e:	1dfb      	adds	r3, r7, #7
 801bf70:	781b      	ldrb	r3, [r3, #0]
 801bf72:	2b23      	cmp	r3, #35	@ 0x23
 801bf74:	d804      	bhi.n	801bf80 <CDC_Control_FS+0x28>
 801bf76:	009a      	lsls	r2, r3, #2
 801bf78:	4b04      	ldr	r3, [pc, #16]	@ (801bf8c <CDC_Control_FS+0x34>)
 801bf7a:	18d3      	adds	r3, r2, r3
 801bf7c:	681b      	ldr	r3, [r3, #0]
 801bf7e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801bf80:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801bf82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801bf84:	0018      	movs	r0, r3
 801bf86:	46bd      	mov	sp, r7
 801bf88:	b002      	add	sp, #8
 801bf8a:	bd80      	pop	{r7, pc}
 801bf8c:	080243f8 	.word	0x080243f8

0801bf90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801bf90:	b580      	push	{r7, lr}
 801bf92:	b082      	sub	sp, #8
 801bf94:	af00      	add	r7, sp, #0
 801bf96:	6078      	str	r0, [r7, #4]
 801bf98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801bf9a:	4b12      	ldr	r3, [pc, #72]	@ (801bfe4 <CDC_Receive_FS+0x54>)
 801bf9c:	781b      	ldrb	r3, [r3, #0]
 801bf9e:	2b00      	cmp	r3, #0
 801bfa0:	d013      	beq.n	801bfca <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801bfa2:	683b      	ldr	r3, [r7, #0]
 801bfa4:	681b      	ldr	r3, [r3, #0]
 801bfa6:	b29a      	uxth	r2, r3
 801bfa8:	2301      	movs	r3, #1
 801bfaa:	425b      	negs	r3, r3
 801bfac:	6879      	ldr	r1, [r7, #4]
 801bfae:	480e      	ldr	r0, [pc, #56]	@ (801bfe8 <CDC_Receive_FS+0x58>)
 801bfb0:	f7fa fa46 	bl	8016440 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801bfb4:	687a      	ldr	r2, [r7, #4]
 801bfb6:	4b0d      	ldr	r3, [pc, #52]	@ (801bfec <CDC_Receive_FS+0x5c>)
 801bfb8:	0011      	movs	r1, r2
 801bfba:	0018      	movs	r0, r3
 801bfbc:	f7fe fcf5 	bl	801a9aa <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801bfc0:	4b0a      	ldr	r3, [pc, #40]	@ (801bfec <CDC_Receive_FS+0x5c>)
 801bfc2:	0018      	movs	r0, r3
 801bfc4:	f7fe fd3c 	bl	801aa40 <USBD_CDC_ReceivePacket>
 801bfc8:	e006      	b.n	801bfd8 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801bfca:	683b      	ldr	r3, [r7, #0]
 801bfcc:	681a      	ldr	r2, [r3, #0]
 801bfce:	4b08      	ldr	r3, [pc, #32]	@ (801bff0 <CDC_Receive_FS+0x60>)
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	18d2      	adds	r2, r2, r3
 801bfd4:	4b06      	ldr	r3, [pc, #24]	@ (801bff0 <CDC_Receive_FS+0x60>)
 801bfd6:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801bfd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801bfda:	0018      	movs	r0, r3
 801bfdc:	46bd      	mov	sp, r7
 801bfde:	b002      	add	sp, #8
 801bfe0:	bd80      	pop	{r7, pc}
 801bfe2:	46c0      	nop			@ (mov r8, r8)
 801bfe4:	20002810 	.word	0x20002810
 801bfe8:	20002814 	.word	0x20002814
 801bfec:	2000254c 	.word	0x2000254c
 801bff0:	200028cc 	.word	0x200028cc

0801bff4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801bff4:	b5b0      	push	{r4, r5, r7, lr}
 801bff6:	b084      	sub	sp, #16
 801bff8:	af00      	add	r7, sp, #0
 801bffa:	6078      	str	r0, [r7, #4]
 801bffc:	000a      	movs	r2, r1
 801bffe:	1cbb      	adds	r3, r7, #2
 801c000:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801c002:	230f      	movs	r3, #15
 801c004:	18fb      	adds	r3, r7, r3
 801c006:	2200      	movs	r2, #0
 801c008:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801c00a:	4a11      	ldr	r2, [pc, #68]	@ (801c050 <CDC_Transmit_FS+0x5c>)
 801c00c:	23ae      	movs	r3, #174	@ 0xae
 801c00e:	009b      	lsls	r3, r3, #2
 801c010:	58d3      	ldr	r3, [r2, r3]
 801c012:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801c014:	68ba      	ldr	r2, [r7, #8]
 801c016:	2385      	movs	r3, #133	@ 0x85
 801c018:	009b      	lsls	r3, r3, #2
 801c01a:	58d3      	ldr	r3, [r2, r3]
 801c01c:	2b00      	cmp	r3, #0
 801c01e:	d001      	beq.n	801c024 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801c020:	2301      	movs	r3, #1
 801c022:	e010      	b.n	801c046 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801c024:	1cbb      	adds	r3, r7, #2
 801c026:	881a      	ldrh	r2, [r3, #0]
 801c028:	6879      	ldr	r1, [r7, #4]
 801c02a:	4b09      	ldr	r3, [pc, #36]	@ (801c050 <CDC_Transmit_FS+0x5c>)
 801c02c:	0018      	movs	r0, r3
 801c02e:	f7fe fca0 	bl	801a972 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801c032:	250f      	movs	r5, #15
 801c034:	197c      	adds	r4, r7, r5
 801c036:	4b06      	ldr	r3, [pc, #24]	@ (801c050 <CDC_Transmit_FS+0x5c>)
 801c038:	0018      	movs	r0, r3
 801c03a:	f7fe fcca 	bl	801a9d2 <USBD_CDC_TransmitPacket>
 801c03e:	0003      	movs	r3, r0
 801c040:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801c042:	197b      	adds	r3, r7, r5
 801c044:	781b      	ldrb	r3, [r3, #0]
}
 801c046:	0018      	movs	r0, r3
 801c048:	46bd      	mov	sp, r7
 801c04a:	b004      	add	sp, #16
 801c04c:	bdb0      	pop	{r4, r5, r7, pc}
 801c04e:	46c0      	nop			@ (mov r8, r8)
 801c050:	2000254c 	.word	0x2000254c

0801c054 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801c054:	b580      	push	{r7, lr}
 801c056:	af00      	add	r7, sp, #0
  ESPProg = true;
 801c058:	4b02      	ldr	r3, [pc, #8]	@ (801c064 <EnableESPProg+0x10>)
 801c05a:	2201      	movs	r2, #1
 801c05c:	701a      	strb	r2, [r3, #0]
}
 801c05e:	46c0      	nop			@ (mov r8, r8)
 801c060:	46bd      	mov	sp, r7
 801c062:	bd80      	pop	{r7, pc}
 801c064:	20002810 	.word	0x20002810

0801c068 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801c068:	b580      	push	{r7, lr}
 801c06a:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801c06c:	4b01      	ldr	r3, [pc, #4]	@ (801c074 <GetUsbRxPointer+0xc>)
}
 801c06e:	0018      	movs	r0, r3
 801c070:	46bd      	mov	sp, r7
 801c072:	bd80      	pop	{r7, pc}
 801c074:	200028d0 	.word	0x200028d0

0801c078 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801c078:	b580      	push	{r7, lr}
 801c07a:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801c07c:	4b07      	ldr	r3, [pc, #28]	@ (801c09c <ResetUsbRxDataSize+0x24>)
 801c07e:	2200      	movs	r2, #0
 801c080:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801c082:	4a07      	ldr	r2, [pc, #28]	@ (801c0a0 <ResetUsbRxDataSize+0x28>)
 801c084:	4b07      	ldr	r3, [pc, #28]	@ (801c0a4 <ResetUsbRxDataSize+0x2c>)
 801c086:	0011      	movs	r1, r2
 801c088:	0018      	movs	r0, r3
 801c08a:	f7fe fc8e 	bl	801a9aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c08e:	4b05      	ldr	r3, [pc, #20]	@ (801c0a4 <ResetUsbRxDataSize+0x2c>)
 801c090:	0018      	movs	r0, r3
 801c092:	f7fe fcd5 	bl	801aa40 <USBD_CDC_ReceivePacket>
}
 801c096:	46c0      	nop			@ (mov r8, r8)
 801c098:	46bd      	mov	sp, r7
 801c09a:	bd80      	pop	{r7, pc}
 801c09c:	200028cc 	.word	0x200028cc
 801c0a0:	200028d0 	.word	0x200028d0
 801c0a4:	2000254c 	.word	0x2000254c

0801c0a8 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801c0a8:	b580      	push	{r7, lr}
 801c0aa:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801c0ac:	4b02      	ldr	r3, [pc, #8]	@ (801c0b8 <GetUsbRxDataSize+0x10>)
 801c0ae:	681b      	ldr	r3, [r3, #0]
}
 801c0b0:	0018      	movs	r0, r3
 801c0b2:	46bd      	mov	sp, r7
 801c0b4:	bd80      	pop	{r7, pc}
 801c0b6:	46c0      	nop			@ (mov r8, r8)
 801c0b8:	200028cc 	.word	0x200028cc

0801c0bc <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801c0bc:	b580      	push	{r7, lr}
 801c0be:	b082      	sub	sp, #8
 801c0c0:	af00      	add	r7, sp, #0
 801c0c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801c0c4:	687a      	ldr	r2, [r7, #4]
 801c0c6:	4b07      	ldr	r3, [pc, #28]	@ (801c0e4 <GetUsbRxNextChunk+0x28>)
 801c0c8:	18d2      	adds	r2, r2, r3
 801c0ca:	4b07      	ldr	r3, [pc, #28]	@ (801c0e8 <GetUsbRxNextChunk+0x2c>)
 801c0cc:	0011      	movs	r1, r2
 801c0ce:	0018      	movs	r0, r3
 801c0d0:	f7fe fc6b 	bl	801a9aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801c0d4:	4b04      	ldr	r3, [pc, #16]	@ (801c0e8 <GetUsbRxNextChunk+0x2c>)
 801c0d6:	0018      	movs	r0, r3
 801c0d8:	f7fe fcb2 	bl	801aa40 <USBD_CDC_ReceivePacket>
}
 801c0dc:	46c0      	nop			@ (mov r8, r8)
 801c0de:	46bd      	mov	sp, r7
 801c0e0:	b002      	add	sp, #8
 801c0e2:	bd80      	pop	{r7, pc}
 801c0e4:	200028d0 	.word	0x200028d0
 801c0e8:	2000254c 	.word	0x2000254c

0801c0ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c0ec:	b580      	push	{r7, lr}
 801c0ee:	b082      	sub	sp, #8
 801c0f0:	af00      	add	r7, sp, #0
 801c0f2:	0002      	movs	r2, r0
 801c0f4:	6039      	str	r1, [r7, #0]
 801c0f6:	1dfb      	adds	r3, r7, #7
 801c0f8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801c0fa:	683b      	ldr	r3, [r7, #0]
 801c0fc:	2212      	movs	r2, #18
 801c0fe:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801c100:	4b02      	ldr	r3, [pc, #8]	@ (801c10c <USBD_FS_DeviceDescriptor+0x20>)
}
 801c102:	0018      	movs	r0, r3
 801c104:	46bd      	mov	sp, r7
 801c106:	b002      	add	sp, #8
 801c108:	bd80      	pop	{r7, pc}
 801c10a:	46c0      	nop			@ (mov r8, r8)
 801c10c:	2000021c 	.word	0x2000021c

0801c110 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c110:	b580      	push	{r7, lr}
 801c112:	b082      	sub	sp, #8
 801c114:	af00      	add	r7, sp, #0
 801c116:	0002      	movs	r2, r0
 801c118:	6039      	str	r1, [r7, #0]
 801c11a:	1dfb      	adds	r3, r7, #7
 801c11c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801c11e:	683b      	ldr	r3, [r7, #0]
 801c120:	2204      	movs	r2, #4
 801c122:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801c124:	4b02      	ldr	r3, [pc, #8]	@ (801c130 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801c126:	0018      	movs	r0, r3
 801c128:	46bd      	mov	sp, r7
 801c12a:	b002      	add	sp, #8
 801c12c:	bd80      	pop	{r7, pc}
 801c12e:	46c0      	nop			@ (mov r8, r8)
 801c130:	20000230 	.word	0x20000230

0801c134 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c134:	b580      	push	{r7, lr}
 801c136:	b082      	sub	sp, #8
 801c138:	af00      	add	r7, sp, #0
 801c13a:	0002      	movs	r2, r0
 801c13c:	6039      	str	r1, [r7, #0]
 801c13e:	1dfb      	adds	r3, r7, #7
 801c140:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801c142:	1dfb      	adds	r3, r7, #7
 801c144:	781b      	ldrb	r3, [r3, #0]
 801c146:	2b00      	cmp	r3, #0
 801c148:	d106      	bne.n	801c158 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c14a:	683a      	ldr	r2, [r7, #0]
 801c14c:	4908      	ldr	r1, [pc, #32]	@ (801c170 <USBD_FS_ProductStrDescriptor+0x3c>)
 801c14e:	4b09      	ldr	r3, [pc, #36]	@ (801c174 <USBD_FS_ProductStrDescriptor+0x40>)
 801c150:	0018      	movs	r0, r3
 801c152:	f7ff fdb1 	bl	801bcb8 <USBD_GetString>
 801c156:	e005      	b.n	801c164 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801c158:	683a      	ldr	r2, [r7, #0]
 801c15a:	4905      	ldr	r1, [pc, #20]	@ (801c170 <USBD_FS_ProductStrDescriptor+0x3c>)
 801c15c:	4b05      	ldr	r3, [pc, #20]	@ (801c174 <USBD_FS_ProductStrDescriptor+0x40>)
 801c15e:	0018      	movs	r0, r3
 801c160:	f7ff fdaa 	bl	801bcb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c164:	4b02      	ldr	r3, [pc, #8]	@ (801c170 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801c166:	0018      	movs	r0, r3
 801c168:	46bd      	mov	sp, r7
 801c16a:	b002      	add	sp, #8
 801c16c:	bd80      	pop	{r7, pc}
 801c16e:	46c0      	nop			@ (mov r8, r8)
 801c170:	200030d0 	.word	0x200030d0
 801c174:	08023ea4 	.word	0x08023ea4

0801c178 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c178:	b580      	push	{r7, lr}
 801c17a:	b082      	sub	sp, #8
 801c17c:	af00      	add	r7, sp, #0
 801c17e:	0002      	movs	r2, r0
 801c180:	6039      	str	r1, [r7, #0]
 801c182:	1dfb      	adds	r3, r7, #7
 801c184:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801c186:	683a      	ldr	r2, [r7, #0]
 801c188:	4904      	ldr	r1, [pc, #16]	@ (801c19c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801c18a:	4b05      	ldr	r3, [pc, #20]	@ (801c1a0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801c18c:	0018      	movs	r0, r3
 801c18e:	f7ff fd93 	bl	801bcb8 <USBD_GetString>
  return USBD_StrDesc;
 801c192:	4b02      	ldr	r3, [pc, #8]	@ (801c19c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801c194:	0018      	movs	r0, r3
 801c196:	46bd      	mov	sp, r7
 801c198:	b002      	add	sp, #8
 801c19a:	bd80      	pop	{r7, pc}
 801c19c:	200030d0 	.word	0x200030d0
 801c1a0:	08023ebc 	.word	0x08023ebc

0801c1a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c1a4:	b580      	push	{r7, lr}
 801c1a6:	b082      	sub	sp, #8
 801c1a8:	af00      	add	r7, sp, #0
 801c1aa:	0002      	movs	r2, r0
 801c1ac:	6039      	str	r1, [r7, #0]
 801c1ae:	1dfb      	adds	r3, r7, #7
 801c1b0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801c1b2:	683b      	ldr	r3, [r7, #0]
 801c1b4:	221a      	movs	r2, #26
 801c1b6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801c1b8:	f000 f84c 	bl	801c254 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801c1bc:	4b02      	ldr	r3, [pc, #8]	@ (801c1c8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801c1be:	0018      	movs	r0, r3
 801c1c0:	46bd      	mov	sp, r7
 801c1c2:	b002      	add	sp, #8
 801c1c4:	bd80      	pop	{r7, pc}
 801c1c6:	46c0      	nop			@ (mov r8, r8)
 801c1c8:	20000234 	.word	0x20000234

0801c1cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c1cc:	b580      	push	{r7, lr}
 801c1ce:	b082      	sub	sp, #8
 801c1d0:	af00      	add	r7, sp, #0
 801c1d2:	0002      	movs	r2, r0
 801c1d4:	6039      	str	r1, [r7, #0]
 801c1d6:	1dfb      	adds	r3, r7, #7
 801c1d8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801c1da:	1dfb      	adds	r3, r7, #7
 801c1dc:	781b      	ldrb	r3, [r3, #0]
 801c1de:	2b00      	cmp	r3, #0
 801c1e0:	d106      	bne.n	801c1f0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c1e2:	683a      	ldr	r2, [r7, #0]
 801c1e4:	4908      	ldr	r1, [pc, #32]	@ (801c208 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801c1e6:	4b09      	ldr	r3, [pc, #36]	@ (801c20c <USBD_FS_ConfigStrDescriptor+0x40>)
 801c1e8:	0018      	movs	r0, r3
 801c1ea:	f7ff fd65 	bl	801bcb8 <USBD_GetString>
 801c1ee:	e005      	b.n	801c1fc <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801c1f0:	683a      	ldr	r2, [r7, #0]
 801c1f2:	4905      	ldr	r1, [pc, #20]	@ (801c208 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801c1f4:	4b05      	ldr	r3, [pc, #20]	@ (801c20c <USBD_FS_ConfigStrDescriptor+0x40>)
 801c1f6:	0018      	movs	r0, r3
 801c1f8:	f7ff fd5e 	bl	801bcb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c1fc:	4b02      	ldr	r3, [pc, #8]	@ (801c208 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801c1fe:	0018      	movs	r0, r3
 801c200:	46bd      	mov	sp, r7
 801c202:	b002      	add	sp, #8
 801c204:	bd80      	pop	{r7, pc}
 801c206:	46c0      	nop			@ (mov r8, r8)
 801c208:	200030d0 	.word	0x200030d0
 801c20c:	08023ed0 	.word	0x08023ed0

0801c210 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801c210:	b580      	push	{r7, lr}
 801c212:	b082      	sub	sp, #8
 801c214:	af00      	add	r7, sp, #0
 801c216:	0002      	movs	r2, r0
 801c218:	6039      	str	r1, [r7, #0]
 801c21a:	1dfb      	adds	r3, r7, #7
 801c21c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801c21e:	1dfb      	adds	r3, r7, #7
 801c220:	781b      	ldrb	r3, [r3, #0]
 801c222:	2b00      	cmp	r3, #0
 801c224:	d106      	bne.n	801c234 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c226:	683a      	ldr	r2, [r7, #0]
 801c228:	4908      	ldr	r1, [pc, #32]	@ (801c24c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801c22a:	4b09      	ldr	r3, [pc, #36]	@ (801c250 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801c22c:	0018      	movs	r0, r3
 801c22e:	f7ff fd43 	bl	801bcb8 <USBD_GetString>
 801c232:	e005      	b.n	801c240 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801c234:	683a      	ldr	r2, [r7, #0]
 801c236:	4905      	ldr	r1, [pc, #20]	@ (801c24c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801c238:	4b05      	ldr	r3, [pc, #20]	@ (801c250 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801c23a:	0018      	movs	r0, r3
 801c23c:	f7ff fd3c 	bl	801bcb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801c240:	4b02      	ldr	r3, [pc, #8]	@ (801c24c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801c242:	0018      	movs	r0, r3
 801c244:	46bd      	mov	sp, r7
 801c246:	b002      	add	sp, #8
 801c248:	bd80      	pop	{r7, pc}
 801c24a:	46c0      	nop			@ (mov r8, r8)
 801c24c:	200030d0 	.word	0x200030d0
 801c250:	08023edc 	.word	0x08023edc

0801c254 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801c254:	b580      	push	{r7, lr}
 801c256:	b084      	sub	sp, #16
 801c258:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801c25a:	4b10      	ldr	r3, [pc, #64]	@ (801c29c <Get_SerialNum+0x48>)
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801c260:	4b0f      	ldr	r3, [pc, #60]	@ (801c2a0 <Get_SerialNum+0x4c>)
 801c262:	681b      	ldr	r3, [r3, #0]
 801c264:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801c266:	4b0f      	ldr	r3, [pc, #60]	@ (801c2a4 <Get_SerialNum+0x50>)
 801c268:	681b      	ldr	r3, [r3, #0]
 801c26a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801c26c:	68fa      	ldr	r2, [r7, #12]
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	18d3      	adds	r3, r2, r3
 801c272:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801c274:	68fb      	ldr	r3, [r7, #12]
 801c276:	2b00      	cmp	r3, #0
 801c278:	d00b      	beq.n	801c292 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801c27a:	490b      	ldr	r1, [pc, #44]	@ (801c2a8 <Get_SerialNum+0x54>)
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	2208      	movs	r2, #8
 801c280:	0018      	movs	r0, r3
 801c282:	f000 f815 	bl	801c2b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801c286:	4909      	ldr	r1, [pc, #36]	@ (801c2ac <Get_SerialNum+0x58>)
 801c288:	68bb      	ldr	r3, [r7, #8]
 801c28a:	2204      	movs	r2, #4
 801c28c:	0018      	movs	r0, r3
 801c28e:	f000 f80f 	bl	801c2b0 <IntToUnicode>
  }
}
 801c292:	46c0      	nop			@ (mov r8, r8)
 801c294:	46bd      	mov	sp, r7
 801c296:	b004      	add	sp, #16
 801c298:	bd80      	pop	{r7, pc}
 801c29a:	46c0      	nop			@ (mov r8, r8)
 801c29c:	1ff80050 	.word	0x1ff80050
 801c2a0:	1ff80054 	.word	0x1ff80054
 801c2a4:	1ff80058 	.word	0x1ff80058
 801c2a8:	20000236 	.word	0x20000236
 801c2ac:	20000246 	.word	0x20000246

0801c2b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801c2b0:	b580      	push	{r7, lr}
 801c2b2:	b086      	sub	sp, #24
 801c2b4:	af00      	add	r7, sp, #0
 801c2b6:	60f8      	str	r0, [r7, #12]
 801c2b8:	60b9      	str	r1, [r7, #8]
 801c2ba:	1dfb      	adds	r3, r7, #7
 801c2bc:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801c2be:	2117      	movs	r1, #23
 801c2c0:	187b      	adds	r3, r7, r1
 801c2c2:	2200      	movs	r2, #0
 801c2c4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801c2c6:	187b      	adds	r3, r7, r1
 801c2c8:	2200      	movs	r2, #0
 801c2ca:	701a      	strb	r2, [r3, #0]
 801c2cc:	e02f      	b.n	801c32e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801c2ce:	68fb      	ldr	r3, [r7, #12]
 801c2d0:	0f1b      	lsrs	r3, r3, #28
 801c2d2:	2b09      	cmp	r3, #9
 801c2d4:	d80d      	bhi.n	801c2f2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801c2d6:	68fb      	ldr	r3, [r7, #12]
 801c2d8:	0f1b      	lsrs	r3, r3, #28
 801c2da:	b2da      	uxtb	r2, r3
 801c2dc:	2317      	movs	r3, #23
 801c2de:	18fb      	adds	r3, r7, r3
 801c2e0:	781b      	ldrb	r3, [r3, #0]
 801c2e2:	005b      	lsls	r3, r3, #1
 801c2e4:	0019      	movs	r1, r3
 801c2e6:	68bb      	ldr	r3, [r7, #8]
 801c2e8:	185b      	adds	r3, r3, r1
 801c2ea:	3230      	adds	r2, #48	@ 0x30
 801c2ec:	b2d2      	uxtb	r2, r2
 801c2ee:	701a      	strb	r2, [r3, #0]
 801c2f0:	e00c      	b.n	801c30c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801c2f2:	68fb      	ldr	r3, [r7, #12]
 801c2f4:	0f1b      	lsrs	r3, r3, #28
 801c2f6:	b2da      	uxtb	r2, r3
 801c2f8:	2317      	movs	r3, #23
 801c2fa:	18fb      	adds	r3, r7, r3
 801c2fc:	781b      	ldrb	r3, [r3, #0]
 801c2fe:	005b      	lsls	r3, r3, #1
 801c300:	0019      	movs	r1, r3
 801c302:	68bb      	ldr	r3, [r7, #8]
 801c304:	185b      	adds	r3, r3, r1
 801c306:	3237      	adds	r2, #55	@ 0x37
 801c308:	b2d2      	uxtb	r2, r2
 801c30a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801c30c:	68fb      	ldr	r3, [r7, #12]
 801c30e:	011b      	lsls	r3, r3, #4
 801c310:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801c312:	2117      	movs	r1, #23
 801c314:	187b      	adds	r3, r7, r1
 801c316:	781b      	ldrb	r3, [r3, #0]
 801c318:	005b      	lsls	r3, r3, #1
 801c31a:	3301      	adds	r3, #1
 801c31c:	68ba      	ldr	r2, [r7, #8]
 801c31e:	18d3      	adds	r3, r2, r3
 801c320:	2200      	movs	r2, #0
 801c322:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801c324:	187b      	adds	r3, r7, r1
 801c326:	781a      	ldrb	r2, [r3, #0]
 801c328:	187b      	adds	r3, r7, r1
 801c32a:	3201      	adds	r2, #1
 801c32c:	701a      	strb	r2, [r3, #0]
 801c32e:	2317      	movs	r3, #23
 801c330:	18fa      	adds	r2, r7, r3
 801c332:	1dfb      	adds	r3, r7, #7
 801c334:	7812      	ldrb	r2, [r2, #0]
 801c336:	781b      	ldrb	r3, [r3, #0]
 801c338:	429a      	cmp	r2, r3
 801c33a:	d3c8      	bcc.n	801c2ce <IntToUnicode+0x1e>
  }
}
 801c33c:	46c0      	nop			@ (mov r8, r8)
 801c33e:	46c0      	nop			@ (mov r8, r8)
 801c340:	46bd      	mov	sp, r7
 801c342:	b006      	add	sp, #24
 801c344:	bd80      	pop	{r7, pc}
	...

0801c348 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801c348:	b580      	push	{r7, lr}
 801c34a:	b082      	sub	sp, #8
 801c34c:	af00      	add	r7, sp, #0
 801c34e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	4a0a      	ldr	r2, [pc, #40]	@ (801c380 <HAL_PCD_MspInit+0x38>)
 801c356:	4293      	cmp	r3, r2
 801c358:	d10e      	bne.n	801c378 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801c35a:	4b0a      	ldr	r3, [pc, #40]	@ (801c384 <HAL_PCD_MspInit+0x3c>)
 801c35c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c35e:	4b09      	ldr	r3, [pc, #36]	@ (801c384 <HAL_PCD_MspInit+0x3c>)
 801c360:	2180      	movs	r1, #128	@ 0x80
 801c362:	0409      	lsls	r1, r1, #16
 801c364:	430a      	orrs	r2, r1
 801c366:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801c368:	2200      	movs	r2, #0
 801c36a:	2100      	movs	r1, #0
 801c36c:	201f      	movs	r0, #31
 801c36e:	f7f2 fb21 	bl	800e9b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801c372:	201f      	movs	r0, #31
 801c374:	f7f2 fb33 	bl	800e9de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801c378:	46c0      	nop			@ (mov r8, r8)
 801c37a:	46bd      	mov	sp, r7
 801c37c:	b002      	add	sp, #8
 801c37e:	bd80      	pop	{r7, pc}
 801c380:	40005c00 	.word	0x40005c00
 801c384:	40021000 	.word	0x40021000

0801c388 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c388:	b580      	push	{r7, lr}
 801c38a:	b082      	sub	sp, #8
 801c38c:	af00      	add	r7, sp, #0
 801c38e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801c390:	687a      	ldr	r2, [r7, #4]
 801c392:	23bc      	movs	r3, #188	@ 0xbc
 801c394:	009b      	lsls	r3, r3, #2
 801c396:	58d2      	ldr	r2, [r2, r3]
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	21ac      	movs	r1, #172	@ 0xac
 801c39c:	0089      	lsls	r1, r1, #2
 801c39e:	468c      	mov	ip, r1
 801c3a0:	4463      	add	r3, ip
 801c3a2:	0019      	movs	r1, r3
 801c3a4:	0010      	movs	r0, r2
 801c3a6:	f7fe fc1d 	bl	801abe4 <USBD_LL_SetupStage>
}
 801c3aa:	46c0      	nop			@ (mov r8, r8)
 801c3ac:	46bd      	mov	sp, r7
 801c3ae:	b002      	add	sp, #8
 801c3b0:	bd80      	pop	{r7, pc}

0801c3b2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c3b2:	b590      	push	{r4, r7, lr}
 801c3b4:	b083      	sub	sp, #12
 801c3b6:	af00      	add	r7, sp, #0
 801c3b8:	6078      	str	r0, [r7, #4]
 801c3ba:	000a      	movs	r2, r1
 801c3bc:	1cfb      	adds	r3, r7, #3
 801c3be:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801c3c0:	687a      	ldr	r2, [r7, #4]
 801c3c2:	23bc      	movs	r3, #188	@ 0xbc
 801c3c4:	009b      	lsls	r3, r3, #2
 801c3c6:	58d4      	ldr	r4, [r2, r3]
 801c3c8:	1cfb      	adds	r3, r7, #3
 801c3ca:	781a      	ldrb	r2, [r3, #0]
 801c3cc:	6878      	ldr	r0, [r7, #4]
 801c3ce:	23be      	movs	r3, #190	@ 0xbe
 801c3d0:	0059      	lsls	r1, r3, #1
 801c3d2:	0013      	movs	r3, r2
 801c3d4:	009b      	lsls	r3, r3, #2
 801c3d6:	189b      	adds	r3, r3, r2
 801c3d8:	00db      	lsls	r3, r3, #3
 801c3da:	18c3      	adds	r3, r0, r3
 801c3dc:	185b      	adds	r3, r3, r1
 801c3de:	681a      	ldr	r2, [r3, #0]
 801c3e0:	1cfb      	adds	r3, r7, #3
 801c3e2:	781b      	ldrb	r3, [r3, #0]
 801c3e4:	0019      	movs	r1, r3
 801c3e6:	0020      	movs	r0, r4
 801c3e8:	f7fe fc5a 	bl	801aca0 <USBD_LL_DataOutStage>
}
 801c3ec:	46c0      	nop			@ (mov r8, r8)
 801c3ee:	46bd      	mov	sp, r7
 801c3f0:	b003      	add	sp, #12
 801c3f2:	bd90      	pop	{r4, r7, pc}

0801c3f4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c3f4:	b580      	push	{r7, lr}
 801c3f6:	b082      	sub	sp, #8
 801c3f8:	af00      	add	r7, sp, #0
 801c3fa:	6078      	str	r0, [r7, #4]
 801c3fc:	000a      	movs	r2, r1
 801c3fe:	1cfb      	adds	r3, r7, #3
 801c400:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801c402:	687a      	ldr	r2, [r7, #4]
 801c404:	23bc      	movs	r3, #188	@ 0xbc
 801c406:	009b      	lsls	r3, r3, #2
 801c408:	58d0      	ldr	r0, [r2, r3]
 801c40a:	1cfb      	adds	r3, r7, #3
 801c40c:	781a      	ldrb	r2, [r3, #0]
 801c40e:	6879      	ldr	r1, [r7, #4]
 801c410:	0013      	movs	r3, r2
 801c412:	009b      	lsls	r3, r3, #2
 801c414:	189b      	adds	r3, r3, r2
 801c416:	00db      	lsls	r3, r3, #3
 801c418:	18cb      	adds	r3, r1, r3
 801c41a:	333c      	adds	r3, #60	@ 0x3c
 801c41c:	681a      	ldr	r2, [r3, #0]
 801c41e:	1cfb      	adds	r3, r7, #3
 801c420:	781b      	ldrb	r3, [r3, #0]
 801c422:	0019      	movs	r1, r3
 801c424:	f7fe fcbe 	bl	801ada4 <USBD_LL_DataInStage>
}
 801c428:	46c0      	nop			@ (mov r8, r8)
 801c42a:	46bd      	mov	sp, r7
 801c42c:	b002      	add	sp, #8
 801c42e:	bd80      	pop	{r7, pc}

0801c430 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c430:	b580      	push	{r7, lr}
 801c432:	b082      	sub	sp, #8
 801c434:	af00      	add	r7, sp, #0
 801c436:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801c438:	687a      	ldr	r2, [r7, #4]
 801c43a:	23bc      	movs	r3, #188	@ 0xbc
 801c43c:	009b      	lsls	r3, r3, #2
 801c43e:	58d3      	ldr	r3, [r2, r3]
 801c440:	0018      	movs	r0, r3
 801c442:	f7fe fdf5 	bl	801b030 <USBD_LL_SOF>
}
 801c446:	46c0      	nop			@ (mov r8, r8)
 801c448:	46bd      	mov	sp, r7
 801c44a:	b002      	add	sp, #8
 801c44c:	bd80      	pop	{r7, pc}

0801c44e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c44e:	b580      	push	{r7, lr}
 801c450:	b084      	sub	sp, #16
 801c452:	af00      	add	r7, sp, #0
 801c454:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801c456:	230f      	movs	r3, #15
 801c458:	18fb      	adds	r3, r7, r3
 801c45a:	2201      	movs	r2, #1
 801c45c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801c45e:	687b      	ldr	r3, [r7, #4]
 801c460:	689b      	ldr	r3, [r3, #8]
 801c462:	2b02      	cmp	r3, #2
 801c464:	d001      	beq.n	801c46a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801c466:	f7eb fd9b 	bl	8007fa0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801c46a:	687a      	ldr	r2, [r7, #4]
 801c46c:	23bc      	movs	r3, #188	@ 0xbc
 801c46e:	009b      	lsls	r3, r3, #2
 801c470:	58d2      	ldr	r2, [r2, r3]
 801c472:	230f      	movs	r3, #15
 801c474:	18fb      	adds	r3, r7, r3
 801c476:	781b      	ldrb	r3, [r3, #0]
 801c478:	0019      	movs	r1, r3
 801c47a:	0010      	movs	r0, r2
 801c47c:	f7fe fd97 	bl	801afae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801c480:	687a      	ldr	r2, [r7, #4]
 801c482:	23bc      	movs	r3, #188	@ 0xbc
 801c484:	009b      	lsls	r3, r3, #2
 801c486:	58d3      	ldr	r3, [r2, r3]
 801c488:	0018      	movs	r0, r3
 801c48a:	f7fe fd48 	bl	801af1e <USBD_LL_Reset>
}
 801c48e:	46c0      	nop			@ (mov r8, r8)
 801c490:	46bd      	mov	sp, r7
 801c492:	b004      	add	sp, #16
 801c494:	bd80      	pop	{r7, pc}
	...

0801c498 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c498:	b580      	push	{r7, lr}
 801c49a:	b082      	sub	sp, #8
 801c49c:	af00      	add	r7, sp, #0
 801c49e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801c4a0:	687a      	ldr	r2, [r7, #4]
 801c4a2:	23bc      	movs	r3, #188	@ 0xbc
 801c4a4:	009b      	lsls	r3, r3, #2
 801c4a6:	58d3      	ldr	r3, [r2, r3]
 801c4a8:	0018      	movs	r0, r3
 801c4aa:	f7fe fd91 	bl	801afd0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	699b      	ldr	r3, [r3, #24]
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d005      	beq.n	801c4c2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c4b6:	4b05      	ldr	r3, [pc, #20]	@ (801c4cc <HAL_PCD_SuspendCallback+0x34>)
 801c4b8:	691a      	ldr	r2, [r3, #16]
 801c4ba:	4b04      	ldr	r3, [pc, #16]	@ (801c4cc <HAL_PCD_SuspendCallback+0x34>)
 801c4bc:	2106      	movs	r1, #6
 801c4be:	430a      	orrs	r2, r1
 801c4c0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801c4c2:	46c0      	nop			@ (mov r8, r8)
 801c4c4:	46bd      	mov	sp, r7
 801c4c6:	b002      	add	sp, #8
 801c4c8:	bd80      	pop	{r7, pc}
 801c4ca:	46c0      	nop			@ (mov r8, r8)
 801c4cc:	e000ed00 	.word	0xe000ed00

0801c4d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801c4d0:	b580      	push	{r7, lr}
 801c4d2:	b082      	sub	sp, #8
 801c4d4:	af00      	add	r7, sp, #0
 801c4d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	699b      	ldr	r3, [r3, #24]
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	d007      	beq.n	801c4f0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801c4e0:	4b09      	ldr	r3, [pc, #36]	@ (801c508 <HAL_PCD_ResumeCallback+0x38>)
 801c4e2:	691a      	ldr	r2, [r3, #16]
 801c4e4:	4b08      	ldr	r3, [pc, #32]	@ (801c508 <HAL_PCD_ResumeCallback+0x38>)
 801c4e6:	2106      	movs	r1, #6
 801c4e8:	438a      	bics	r2, r1
 801c4ea:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801c4ec:	f000 fa44 	bl	801c978 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801c4f0:	687a      	ldr	r2, [r7, #4]
 801c4f2:	23bc      	movs	r3, #188	@ 0xbc
 801c4f4:	009b      	lsls	r3, r3, #2
 801c4f6:	58d3      	ldr	r3, [r2, r3]
 801c4f8:	0018      	movs	r0, r3
 801c4fa:	f7fe fd81 	bl	801b000 <USBD_LL_Resume>
}
 801c4fe:	46c0      	nop			@ (mov r8, r8)
 801c500:	46bd      	mov	sp, r7
 801c502:	b002      	add	sp, #8
 801c504:	bd80      	pop	{r7, pc}
 801c506:	46c0      	nop			@ (mov r8, r8)
 801c508:	e000ed00 	.word	0xe000ed00

0801c50c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801c50c:	b580      	push	{r7, lr}
 801c50e:	b082      	sub	sp, #8
 801c510:	af00      	add	r7, sp, #0
 801c512:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801c514:	4a2d      	ldr	r2, [pc, #180]	@ (801c5cc <USBD_LL_Init+0xc0>)
 801c516:	23bc      	movs	r3, #188	@ 0xbc
 801c518:	009b      	lsls	r3, r3, #2
 801c51a:	6879      	ldr	r1, [r7, #4]
 801c51c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801c51e:	687a      	ldr	r2, [r7, #4]
 801c520:	23b0      	movs	r3, #176	@ 0xb0
 801c522:	009b      	lsls	r3, r3, #2
 801c524:	4929      	ldr	r1, [pc, #164]	@ (801c5cc <USBD_LL_Init+0xc0>)
 801c526:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801c528:	4b28      	ldr	r3, [pc, #160]	@ (801c5cc <USBD_LL_Init+0xc0>)
 801c52a:	4a29      	ldr	r2, [pc, #164]	@ (801c5d0 <USBD_LL_Init+0xc4>)
 801c52c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801c52e:	4b27      	ldr	r3, [pc, #156]	@ (801c5cc <USBD_LL_Init+0xc0>)
 801c530:	2208      	movs	r2, #8
 801c532:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801c534:	4b25      	ldr	r3, [pc, #148]	@ (801c5cc <USBD_LL_Init+0xc0>)
 801c536:	2202      	movs	r2, #2
 801c538:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801c53a:	4b24      	ldr	r3, [pc, #144]	@ (801c5cc <USBD_LL_Init+0xc0>)
 801c53c:	2202      	movs	r2, #2
 801c53e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801c540:	4b22      	ldr	r3, [pc, #136]	@ (801c5cc <USBD_LL_Init+0xc0>)
 801c542:	2200      	movs	r2, #0
 801c544:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801c546:	4b21      	ldr	r3, [pc, #132]	@ (801c5cc <USBD_LL_Init+0xc0>)
 801c548:	2200      	movs	r2, #0
 801c54a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801c54c:	4b1f      	ldr	r3, [pc, #124]	@ (801c5cc <USBD_LL_Init+0xc0>)
 801c54e:	2200      	movs	r2, #0
 801c550:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801c552:	4b1e      	ldr	r3, [pc, #120]	@ (801c5cc <USBD_LL_Init+0xc0>)
 801c554:	0018      	movs	r0, r3
 801c556:	f7f5 ffd3 	bl	8012500 <HAL_PCD_Init>
 801c55a:	1e03      	subs	r3, r0, #0
 801c55c:	d001      	beq.n	801c562 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801c55e:	f7eb fd1f 	bl	8007fa0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801c562:	687a      	ldr	r2, [r7, #4]
 801c564:	23b0      	movs	r3, #176	@ 0xb0
 801c566:	009b      	lsls	r3, r3, #2
 801c568:	58d0      	ldr	r0, [r2, r3]
 801c56a:	2318      	movs	r3, #24
 801c56c:	2200      	movs	r2, #0
 801c56e:	2100      	movs	r1, #0
 801c570:	f7f7 fd94 	bl	801409c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801c574:	687a      	ldr	r2, [r7, #4]
 801c576:	23b0      	movs	r3, #176	@ 0xb0
 801c578:	009b      	lsls	r3, r3, #2
 801c57a:	58d0      	ldr	r0, [r2, r3]
 801c57c:	2358      	movs	r3, #88	@ 0x58
 801c57e:	2200      	movs	r2, #0
 801c580:	2180      	movs	r1, #128	@ 0x80
 801c582:	f7f7 fd8b 	bl	801409c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801c586:	687a      	ldr	r2, [r7, #4]
 801c588:	23b0      	movs	r3, #176	@ 0xb0
 801c58a:	009b      	lsls	r3, r3, #2
 801c58c:	58d0      	ldr	r0, [r2, r3]
 801c58e:	23c0      	movs	r3, #192	@ 0xc0
 801c590:	2200      	movs	r2, #0
 801c592:	2181      	movs	r1, #129	@ 0x81
 801c594:	f7f7 fd82 	bl	801409c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801c598:	687a      	ldr	r2, [r7, #4]
 801c59a:	23b0      	movs	r3, #176	@ 0xb0
 801c59c:	009b      	lsls	r3, r3, #2
 801c59e:	58d0      	ldr	r0, [r2, r3]
 801c5a0:	2388      	movs	r3, #136	@ 0x88
 801c5a2:	005b      	lsls	r3, r3, #1
 801c5a4:	2200      	movs	r2, #0
 801c5a6:	2101      	movs	r1, #1
 801c5a8:	f7f7 fd78 	bl	801409c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801c5ac:	687a      	ldr	r2, [r7, #4]
 801c5ae:	23b0      	movs	r3, #176	@ 0xb0
 801c5b0:	009b      	lsls	r3, r3, #2
 801c5b2:	58d0      	ldr	r0, [r2, r3]
 801c5b4:	2380      	movs	r3, #128	@ 0x80
 801c5b6:	005b      	lsls	r3, r3, #1
 801c5b8:	2200      	movs	r2, #0
 801c5ba:	2182      	movs	r1, #130	@ 0x82
 801c5bc:	f7f7 fd6e 	bl	801409c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801c5c0:	2300      	movs	r3, #0
}
 801c5c2:	0018      	movs	r0, r3
 801c5c4:	46bd      	mov	sp, r7
 801c5c6:	b002      	add	sp, #8
 801c5c8:	bd80      	pop	{r7, pc}
 801c5ca:	46c0      	nop			@ (mov r8, r8)
 801c5cc:	200032d0 	.word	0x200032d0
 801c5d0:	40005c00 	.word	0x40005c00

0801c5d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801c5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c5d6:	b085      	sub	sp, #20
 801c5d8:	af00      	add	r7, sp, #0
 801c5da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c5dc:	210f      	movs	r1, #15
 801c5de:	187b      	adds	r3, r7, r1
 801c5e0:	2200      	movs	r2, #0
 801c5e2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c5e4:	260e      	movs	r6, #14
 801c5e6:	19bb      	adds	r3, r7, r6
 801c5e8:	2200      	movs	r2, #0
 801c5ea:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801c5ec:	687a      	ldr	r2, [r7, #4]
 801c5ee:	23b0      	movs	r3, #176	@ 0xb0
 801c5f0:	009b      	lsls	r3, r3, #2
 801c5f2:	58d3      	ldr	r3, [r2, r3]
 801c5f4:	000d      	movs	r5, r1
 801c5f6:	187c      	adds	r4, r7, r1
 801c5f8:	0018      	movs	r0, r3
 801c5fa:	f7f6 f881 	bl	8012700 <HAL_PCD_Start>
 801c5fe:	0003      	movs	r3, r0
 801c600:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c602:	19bc      	adds	r4, r7, r6
 801c604:	197b      	adds	r3, r7, r5
 801c606:	781b      	ldrb	r3, [r3, #0]
 801c608:	0018      	movs	r0, r3
 801c60a:	f000 f9bc 	bl	801c986 <USBD_Get_USB_Status>
 801c60e:	0003      	movs	r3, r0
 801c610:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c612:	19bb      	adds	r3, r7, r6
 801c614:	781b      	ldrb	r3, [r3, #0]
}
 801c616:	0018      	movs	r0, r3
 801c618:	46bd      	mov	sp, r7
 801c61a:	b005      	add	sp, #20
 801c61c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c61e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801c61e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c620:	b085      	sub	sp, #20
 801c622:	af00      	add	r7, sp, #0
 801c624:	6078      	str	r0, [r7, #4]
 801c626:	000c      	movs	r4, r1
 801c628:	0010      	movs	r0, r2
 801c62a:	0019      	movs	r1, r3
 801c62c:	1cfb      	adds	r3, r7, #3
 801c62e:	1c22      	adds	r2, r4, #0
 801c630:	701a      	strb	r2, [r3, #0]
 801c632:	1cbb      	adds	r3, r7, #2
 801c634:	1c02      	adds	r2, r0, #0
 801c636:	701a      	strb	r2, [r3, #0]
 801c638:	003b      	movs	r3, r7
 801c63a:	1c0a      	adds	r2, r1, #0
 801c63c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c63e:	260f      	movs	r6, #15
 801c640:	19bb      	adds	r3, r7, r6
 801c642:	2200      	movs	r2, #0
 801c644:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c646:	250e      	movs	r5, #14
 801c648:	197b      	adds	r3, r7, r5
 801c64a:	2200      	movs	r2, #0
 801c64c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801c64e:	687a      	ldr	r2, [r7, #4]
 801c650:	23b0      	movs	r3, #176	@ 0xb0
 801c652:	009b      	lsls	r3, r3, #2
 801c654:	58d0      	ldr	r0, [r2, r3]
 801c656:	19bc      	adds	r4, r7, r6
 801c658:	1cbb      	adds	r3, r7, #2
 801c65a:	781d      	ldrb	r5, [r3, #0]
 801c65c:	003b      	movs	r3, r7
 801c65e:	881a      	ldrh	r2, [r3, #0]
 801c660:	1cfb      	adds	r3, r7, #3
 801c662:	7819      	ldrb	r1, [r3, #0]
 801c664:	002b      	movs	r3, r5
 801c666:	f7f6 f9e0 	bl	8012a2a <HAL_PCD_EP_Open>
 801c66a:	0003      	movs	r3, r0
 801c66c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c66e:	250e      	movs	r5, #14
 801c670:	197c      	adds	r4, r7, r5
 801c672:	19bb      	adds	r3, r7, r6
 801c674:	781b      	ldrb	r3, [r3, #0]
 801c676:	0018      	movs	r0, r3
 801c678:	f000 f985 	bl	801c986 <USBD_Get_USB_Status>
 801c67c:	0003      	movs	r3, r0
 801c67e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c680:	197b      	adds	r3, r7, r5
 801c682:	781b      	ldrb	r3, [r3, #0]
}
 801c684:	0018      	movs	r0, r3
 801c686:	46bd      	mov	sp, r7
 801c688:	b005      	add	sp, #20
 801c68a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c68c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c68c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c68e:	b085      	sub	sp, #20
 801c690:	af00      	add	r7, sp, #0
 801c692:	6078      	str	r0, [r7, #4]
 801c694:	000a      	movs	r2, r1
 801c696:	1cfb      	adds	r3, r7, #3
 801c698:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c69a:	210f      	movs	r1, #15
 801c69c:	187b      	adds	r3, r7, r1
 801c69e:	2200      	movs	r2, #0
 801c6a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c6a2:	260e      	movs	r6, #14
 801c6a4:	19bb      	adds	r3, r7, r6
 801c6a6:	2200      	movs	r2, #0
 801c6a8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801c6aa:	687a      	ldr	r2, [r7, #4]
 801c6ac:	23b0      	movs	r3, #176	@ 0xb0
 801c6ae:	009b      	lsls	r3, r3, #2
 801c6b0:	58d2      	ldr	r2, [r2, r3]
 801c6b2:	000d      	movs	r5, r1
 801c6b4:	187c      	adds	r4, r7, r1
 801c6b6:	1cfb      	adds	r3, r7, #3
 801c6b8:	781b      	ldrb	r3, [r3, #0]
 801c6ba:	0019      	movs	r1, r3
 801c6bc:	0010      	movs	r0, r2
 801c6be:	f7f6 fa23 	bl	8012b08 <HAL_PCD_EP_Close>
 801c6c2:	0003      	movs	r3, r0
 801c6c4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c6c6:	19bc      	adds	r4, r7, r6
 801c6c8:	197b      	adds	r3, r7, r5
 801c6ca:	781b      	ldrb	r3, [r3, #0]
 801c6cc:	0018      	movs	r0, r3
 801c6ce:	f000 f95a 	bl	801c986 <USBD_Get_USB_Status>
 801c6d2:	0003      	movs	r3, r0
 801c6d4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c6d6:	19bb      	adds	r3, r7, r6
 801c6d8:	781b      	ldrb	r3, [r3, #0]
}
 801c6da:	0018      	movs	r0, r3
 801c6dc:	46bd      	mov	sp, r7
 801c6de:	b005      	add	sp, #20
 801c6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c6e2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c6e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c6e4:	b085      	sub	sp, #20
 801c6e6:	af00      	add	r7, sp, #0
 801c6e8:	6078      	str	r0, [r7, #4]
 801c6ea:	000a      	movs	r2, r1
 801c6ec:	1cfb      	adds	r3, r7, #3
 801c6ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c6f0:	210f      	movs	r1, #15
 801c6f2:	187b      	adds	r3, r7, r1
 801c6f4:	2200      	movs	r2, #0
 801c6f6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c6f8:	260e      	movs	r6, #14
 801c6fa:	19bb      	adds	r3, r7, r6
 801c6fc:	2200      	movs	r2, #0
 801c6fe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801c700:	687a      	ldr	r2, [r7, #4]
 801c702:	23b0      	movs	r3, #176	@ 0xb0
 801c704:	009b      	lsls	r3, r3, #2
 801c706:	58d2      	ldr	r2, [r2, r3]
 801c708:	000d      	movs	r5, r1
 801c70a:	187c      	adds	r4, r7, r1
 801c70c:	1cfb      	adds	r3, r7, #3
 801c70e:	781b      	ldrb	r3, [r3, #0]
 801c710:	0019      	movs	r1, r3
 801c712:	0010      	movs	r0, r2
 801c714:	f7f6 fad5 	bl	8012cc2 <HAL_PCD_EP_SetStall>
 801c718:	0003      	movs	r3, r0
 801c71a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c71c:	19bc      	adds	r4, r7, r6
 801c71e:	197b      	adds	r3, r7, r5
 801c720:	781b      	ldrb	r3, [r3, #0]
 801c722:	0018      	movs	r0, r3
 801c724:	f000 f92f 	bl	801c986 <USBD_Get_USB_Status>
 801c728:	0003      	movs	r3, r0
 801c72a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c72c:	19bb      	adds	r3, r7, r6
 801c72e:	781b      	ldrb	r3, [r3, #0]
}
 801c730:	0018      	movs	r0, r3
 801c732:	46bd      	mov	sp, r7
 801c734:	b005      	add	sp, #20
 801c736:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c738 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c73a:	b085      	sub	sp, #20
 801c73c:	af00      	add	r7, sp, #0
 801c73e:	6078      	str	r0, [r7, #4]
 801c740:	000a      	movs	r2, r1
 801c742:	1cfb      	adds	r3, r7, #3
 801c744:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c746:	210f      	movs	r1, #15
 801c748:	187b      	adds	r3, r7, r1
 801c74a:	2200      	movs	r2, #0
 801c74c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c74e:	260e      	movs	r6, #14
 801c750:	19bb      	adds	r3, r7, r6
 801c752:	2200      	movs	r2, #0
 801c754:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801c756:	687a      	ldr	r2, [r7, #4]
 801c758:	23b0      	movs	r3, #176	@ 0xb0
 801c75a:	009b      	lsls	r3, r3, #2
 801c75c:	58d2      	ldr	r2, [r2, r3]
 801c75e:	000d      	movs	r5, r1
 801c760:	187c      	adds	r4, r7, r1
 801c762:	1cfb      	adds	r3, r7, #3
 801c764:	781b      	ldrb	r3, [r3, #0]
 801c766:	0019      	movs	r1, r3
 801c768:	0010      	movs	r0, r2
 801c76a:	f7f6 fb06 	bl	8012d7a <HAL_PCD_EP_ClrStall>
 801c76e:	0003      	movs	r3, r0
 801c770:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c772:	19bc      	adds	r4, r7, r6
 801c774:	197b      	adds	r3, r7, r5
 801c776:	781b      	ldrb	r3, [r3, #0]
 801c778:	0018      	movs	r0, r3
 801c77a:	f000 f904 	bl	801c986 <USBD_Get_USB_Status>
 801c77e:	0003      	movs	r3, r0
 801c780:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c782:	19bb      	adds	r3, r7, r6
 801c784:	781b      	ldrb	r3, [r3, #0]
}
 801c786:	0018      	movs	r0, r3
 801c788:	46bd      	mov	sp, r7
 801c78a:	b005      	add	sp, #20
 801c78c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c78e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c78e:	b580      	push	{r7, lr}
 801c790:	b084      	sub	sp, #16
 801c792:	af00      	add	r7, sp, #0
 801c794:	6078      	str	r0, [r7, #4]
 801c796:	000a      	movs	r2, r1
 801c798:	1cfb      	adds	r3, r7, #3
 801c79a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801c79c:	687a      	ldr	r2, [r7, #4]
 801c79e:	23b0      	movs	r3, #176	@ 0xb0
 801c7a0:	009b      	lsls	r3, r3, #2
 801c7a2:	58d3      	ldr	r3, [r2, r3]
 801c7a4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801c7a6:	1cfb      	adds	r3, r7, #3
 801c7a8:	781b      	ldrb	r3, [r3, #0]
 801c7aa:	b25b      	sxtb	r3, r3
 801c7ac:	2b00      	cmp	r3, #0
 801c7ae:	da0d      	bge.n	801c7cc <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801c7b0:	1cfb      	adds	r3, r7, #3
 801c7b2:	781b      	ldrb	r3, [r3, #0]
 801c7b4:	227f      	movs	r2, #127	@ 0x7f
 801c7b6:	4013      	ands	r3, r2
 801c7b8:	68f9      	ldr	r1, [r7, #12]
 801c7ba:	1c5a      	adds	r2, r3, #1
 801c7bc:	0013      	movs	r3, r2
 801c7be:	009b      	lsls	r3, r3, #2
 801c7c0:	189b      	adds	r3, r3, r2
 801c7c2:	00db      	lsls	r3, r3, #3
 801c7c4:	18cb      	adds	r3, r1, r3
 801c7c6:	3302      	adds	r3, #2
 801c7c8:	781b      	ldrb	r3, [r3, #0]
 801c7ca:	e00d      	b.n	801c7e8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801c7cc:	1cfb      	adds	r3, r7, #3
 801c7ce:	781b      	ldrb	r3, [r3, #0]
 801c7d0:	227f      	movs	r2, #127	@ 0x7f
 801c7d2:	401a      	ands	r2, r3
 801c7d4:	68f8      	ldr	r0, [r7, #12]
 801c7d6:	23b5      	movs	r3, #181	@ 0xb5
 801c7d8:	0059      	lsls	r1, r3, #1
 801c7da:	0013      	movs	r3, r2
 801c7dc:	009b      	lsls	r3, r3, #2
 801c7de:	189b      	adds	r3, r3, r2
 801c7e0:	00db      	lsls	r3, r3, #3
 801c7e2:	18c3      	adds	r3, r0, r3
 801c7e4:	185b      	adds	r3, r3, r1
 801c7e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c7e8:	0018      	movs	r0, r3
 801c7ea:	46bd      	mov	sp, r7
 801c7ec:	b004      	add	sp, #16
 801c7ee:	bd80      	pop	{r7, pc}

0801c7f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801c7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7f2:	b085      	sub	sp, #20
 801c7f4:	af00      	add	r7, sp, #0
 801c7f6:	6078      	str	r0, [r7, #4]
 801c7f8:	000a      	movs	r2, r1
 801c7fa:	1cfb      	adds	r3, r7, #3
 801c7fc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c7fe:	210f      	movs	r1, #15
 801c800:	187b      	adds	r3, r7, r1
 801c802:	2200      	movs	r2, #0
 801c804:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c806:	260e      	movs	r6, #14
 801c808:	19bb      	adds	r3, r7, r6
 801c80a:	2200      	movs	r2, #0
 801c80c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801c80e:	687a      	ldr	r2, [r7, #4]
 801c810:	23b0      	movs	r3, #176	@ 0xb0
 801c812:	009b      	lsls	r3, r3, #2
 801c814:	58d2      	ldr	r2, [r2, r3]
 801c816:	000d      	movs	r5, r1
 801c818:	187c      	adds	r4, r7, r1
 801c81a:	1cfb      	adds	r3, r7, #3
 801c81c:	781b      	ldrb	r3, [r3, #0]
 801c81e:	0019      	movs	r1, r3
 801c820:	0010      	movs	r0, r2
 801c822:	f7f6 f8d7 	bl	80129d4 <HAL_PCD_SetAddress>
 801c826:	0003      	movs	r3, r0
 801c828:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c82a:	19bc      	adds	r4, r7, r6
 801c82c:	197b      	adds	r3, r7, r5
 801c82e:	781b      	ldrb	r3, [r3, #0]
 801c830:	0018      	movs	r0, r3
 801c832:	f000 f8a8 	bl	801c986 <USBD_Get_USB_Status>
 801c836:	0003      	movs	r3, r0
 801c838:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c83a:	19bb      	adds	r3, r7, r6
 801c83c:	781b      	ldrb	r3, [r3, #0]
}
 801c83e:	0018      	movs	r0, r3
 801c840:	46bd      	mov	sp, r7
 801c842:	b005      	add	sp, #20
 801c844:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c846 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801c846:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c848:	b087      	sub	sp, #28
 801c84a:	af00      	add	r7, sp, #0
 801c84c:	60f8      	str	r0, [r7, #12]
 801c84e:	0008      	movs	r0, r1
 801c850:	607a      	str	r2, [r7, #4]
 801c852:	0019      	movs	r1, r3
 801c854:	230b      	movs	r3, #11
 801c856:	18fb      	adds	r3, r7, r3
 801c858:	1c02      	adds	r2, r0, #0
 801c85a:	701a      	strb	r2, [r3, #0]
 801c85c:	2408      	movs	r4, #8
 801c85e:	193b      	adds	r3, r7, r4
 801c860:	1c0a      	adds	r2, r1, #0
 801c862:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c864:	2117      	movs	r1, #23
 801c866:	187b      	adds	r3, r7, r1
 801c868:	2200      	movs	r2, #0
 801c86a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c86c:	2516      	movs	r5, #22
 801c86e:	197b      	adds	r3, r7, r5
 801c870:	2200      	movs	r2, #0
 801c872:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801c874:	68fa      	ldr	r2, [r7, #12]
 801c876:	23b0      	movs	r3, #176	@ 0xb0
 801c878:	009b      	lsls	r3, r3, #2
 801c87a:	58d0      	ldr	r0, [r2, r3]
 801c87c:	193b      	adds	r3, r7, r4
 801c87e:	881d      	ldrh	r5, [r3, #0]
 801c880:	000e      	movs	r6, r1
 801c882:	187c      	adds	r4, r7, r1
 801c884:	687a      	ldr	r2, [r7, #4]
 801c886:	230b      	movs	r3, #11
 801c888:	18fb      	adds	r3, r7, r3
 801c88a:	7819      	ldrb	r1, [r3, #0]
 801c88c:	002b      	movs	r3, r5
 801c88e:	f7f6 f9dc 	bl	8012c4a <HAL_PCD_EP_Transmit>
 801c892:	0003      	movs	r3, r0
 801c894:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c896:	2516      	movs	r5, #22
 801c898:	197c      	adds	r4, r7, r5
 801c89a:	19bb      	adds	r3, r7, r6
 801c89c:	781b      	ldrb	r3, [r3, #0]
 801c89e:	0018      	movs	r0, r3
 801c8a0:	f000 f871 	bl	801c986 <USBD_Get_USB_Status>
 801c8a4:	0003      	movs	r3, r0
 801c8a6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c8a8:	197b      	adds	r3, r7, r5
 801c8aa:	781b      	ldrb	r3, [r3, #0]
}
 801c8ac:	0018      	movs	r0, r3
 801c8ae:	46bd      	mov	sp, r7
 801c8b0:	b007      	add	sp, #28
 801c8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c8b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801c8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8b6:	b087      	sub	sp, #28
 801c8b8:	af00      	add	r7, sp, #0
 801c8ba:	60f8      	str	r0, [r7, #12]
 801c8bc:	0008      	movs	r0, r1
 801c8be:	607a      	str	r2, [r7, #4]
 801c8c0:	0019      	movs	r1, r3
 801c8c2:	230b      	movs	r3, #11
 801c8c4:	18fb      	adds	r3, r7, r3
 801c8c6:	1c02      	adds	r2, r0, #0
 801c8c8:	701a      	strb	r2, [r3, #0]
 801c8ca:	2408      	movs	r4, #8
 801c8cc:	193b      	adds	r3, r7, r4
 801c8ce:	1c0a      	adds	r2, r1, #0
 801c8d0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c8d2:	2117      	movs	r1, #23
 801c8d4:	187b      	adds	r3, r7, r1
 801c8d6:	2200      	movs	r2, #0
 801c8d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c8da:	2516      	movs	r5, #22
 801c8dc:	197b      	adds	r3, r7, r5
 801c8de:	2200      	movs	r2, #0
 801c8e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801c8e2:	68fa      	ldr	r2, [r7, #12]
 801c8e4:	23b0      	movs	r3, #176	@ 0xb0
 801c8e6:	009b      	lsls	r3, r3, #2
 801c8e8:	58d0      	ldr	r0, [r2, r3]
 801c8ea:	193b      	adds	r3, r7, r4
 801c8ec:	881d      	ldrh	r5, [r3, #0]
 801c8ee:	000e      	movs	r6, r1
 801c8f0:	187c      	adds	r4, r7, r1
 801c8f2:	687a      	ldr	r2, [r7, #4]
 801c8f4:	230b      	movs	r3, #11
 801c8f6:	18fb      	adds	r3, r7, r3
 801c8f8:	7819      	ldrb	r1, [r3, #0]
 801c8fa:	002b      	movs	r3, r5
 801c8fc:	f7f6 f955 	bl	8012baa <HAL_PCD_EP_Receive>
 801c900:	0003      	movs	r3, r0
 801c902:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c904:	2516      	movs	r5, #22
 801c906:	197c      	adds	r4, r7, r5
 801c908:	19bb      	adds	r3, r7, r6
 801c90a:	781b      	ldrb	r3, [r3, #0]
 801c90c:	0018      	movs	r0, r3
 801c90e:	f000 f83a 	bl	801c986 <USBD_Get_USB_Status>
 801c912:	0003      	movs	r3, r0
 801c914:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c916:	197b      	adds	r3, r7, r5
 801c918:	781b      	ldrb	r3, [r3, #0]
}
 801c91a:	0018      	movs	r0, r3
 801c91c:	46bd      	mov	sp, r7
 801c91e:	b007      	add	sp, #28
 801c920:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c922 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c922:	b580      	push	{r7, lr}
 801c924:	b082      	sub	sp, #8
 801c926:	af00      	add	r7, sp, #0
 801c928:	6078      	str	r0, [r7, #4]
 801c92a:	000a      	movs	r2, r1
 801c92c:	1cfb      	adds	r3, r7, #3
 801c92e:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801c930:	687a      	ldr	r2, [r7, #4]
 801c932:	23b0      	movs	r3, #176	@ 0xb0
 801c934:	009b      	lsls	r3, r3, #2
 801c936:	58d2      	ldr	r2, [r2, r3]
 801c938:	1cfb      	adds	r3, r7, #3
 801c93a:	781b      	ldrb	r3, [r3, #0]
 801c93c:	0019      	movs	r1, r3
 801c93e:	0010      	movs	r0, r2
 801c940:	f7f6 f96a 	bl	8012c18 <HAL_PCD_EP_GetRxCount>
 801c944:	0003      	movs	r3, r0
}
 801c946:	0018      	movs	r0, r3
 801c948:	46bd      	mov	sp, r7
 801c94a:	b002      	add	sp, #8
 801c94c:	bd80      	pop	{r7, pc}
	...

0801c950 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801c950:	b580      	push	{r7, lr}
 801c952:	b082      	sub	sp, #8
 801c954:	af00      	add	r7, sp, #0
 801c956:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801c958:	4b02      	ldr	r3, [pc, #8]	@ (801c964 <USBD_static_malloc+0x14>)
}
 801c95a:	0018      	movs	r0, r3
 801c95c:	46bd      	mov	sp, r7
 801c95e:	b002      	add	sp, #8
 801c960:	bd80      	pop	{r7, pc}
 801c962:	46c0      	nop			@ (mov r8, r8)
 801c964:	200035c4 	.word	0x200035c4

0801c968 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801c968:	b580      	push	{r7, lr}
 801c96a:	b082      	sub	sp, #8
 801c96c:	af00      	add	r7, sp, #0
 801c96e:	6078      	str	r0, [r7, #4]

}
 801c970:	46c0      	nop			@ (mov r8, r8)
 801c972:	46bd      	mov	sp, r7
 801c974:	b002      	add	sp, #8
 801c976:	bd80      	pop	{r7, pc}

0801c978 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801c978:	b580      	push	{r7, lr}
 801c97a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801c97c:	f7eb f9c6 	bl	8007d0c <SystemClock_Config>
}
 801c980:	46c0      	nop			@ (mov r8, r8)
 801c982:	46bd      	mov	sp, r7
 801c984:	bd80      	pop	{r7, pc}

0801c986 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801c986:	b580      	push	{r7, lr}
 801c988:	b084      	sub	sp, #16
 801c98a:	af00      	add	r7, sp, #0
 801c98c:	0002      	movs	r2, r0
 801c98e:	1dfb      	adds	r3, r7, #7
 801c990:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c992:	230f      	movs	r3, #15
 801c994:	18fb      	adds	r3, r7, r3
 801c996:	2200      	movs	r2, #0
 801c998:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801c99a:	1dfb      	adds	r3, r7, #7
 801c99c:	781b      	ldrb	r3, [r3, #0]
 801c99e:	2b03      	cmp	r3, #3
 801c9a0:	d017      	beq.n	801c9d2 <USBD_Get_USB_Status+0x4c>
 801c9a2:	dc1b      	bgt.n	801c9dc <USBD_Get_USB_Status+0x56>
 801c9a4:	2b02      	cmp	r3, #2
 801c9a6:	d00f      	beq.n	801c9c8 <USBD_Get_USB_Status+0x42>
 801c9a8:	dc18      	bgt.n	801c9dc <USBD_Get_USB_Status+0x56>
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d002      	beq.n	801c9b4 <USBD_Get_USB_Status+0x2e>
 801c9ae:	2b01      	cmp	r3, #1
 801c9b0:	d005      	beq.n	801c9be <USBD_Get_USB_Status+0x38>
 801c9b2:	e013      	b.n	801c9dc <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801c9b4:	230f      	movs	r3, #15
 801c9b6:	18fb      	adds	r3, r7, r3
 801c9b8:	2200      	movs	r2, #0
 801c9ba:	701a      	strb	r2, [r3, #0]
    break;
 801c9bc:	e013      	b.n	801c9e6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801c9be:	230f      	movs	r3, #15
 801c9c0:	18fb      	adds	r3, r7, r3
 801c9c2:	2202      	movs	r2, #2
 801c9c4:	701a      	strb	r2, [r3, #0]
    break;
 801c9c6:	e00e      	b.n	801c9e6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801c9c8:	230f      	movs	r3, #15
 801c9ca:	18fb      	adds	r3, r7, r3
 801c9cc:	2201      	movs	r2, #1
 801c9ce:	701a      	strb	r2, [r3, #0]
    break;
 801c9d0:	e009      	b.n	801c9e6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801c9d2:	230f      	movs	r3, #15
 801c9d4:	18fb      	adds	r3, r7, r3
 801c9d6:	2202      	movs	r2, #2
 801c9d8:	701a      	strb	r2, [r3, #0]
    break;
 801c9da:	e004      	b.n	801c9e6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801c9dc:	230f      	movs	r3, #15
 801c9de:	18fb      	adds	r3, r7, r3
 801c9e0:	2202      	movs	r2, #2
 801c9e2:	701a      	strb	r2, [r3, #0]
    break;
 801c9e4:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801c9e6:	230f      	movs	r3, #15
 801c9e8:	18fb      	adds	r3, r7, r3
 801c9ea:	781b      	ldrb	r3, [r3, #0]
}
 801c9ec:	0018      	movs	r0, r3
 801c9ee:	46bd      	mov	sp, r7
 801c9f0:	b004      	add	sp, #16
 801c9f2:	bd80      	pop	{r7, pc}

0801c9f4 <arm_cfft_radix4by2_q31>:
 801c9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9f6:	465f      	mov	r7, fp
 801c9f8:	4656      	mov	r6, sl
 801c9fa:	464d      	mov	r5, r9
 801c9fc:	4644      	mov	r4, r8
 801c9fe:	000b      	movs	r3, r1
 801ca00:	b4f0      	push	{r4, r5, r6, r7}
 801ca02:	085b      	lsrs	r3, r3, #1
 801ca04:	b08f      	sub	sp, #60	@ 0x3c
 801ca06:	910a      	str	r1, [sp, #40]	@ 0x28
 801ca08:	0007      	movs	r7, r0
 801ca0a:	9009      	str	r0, [sp, #36]	@ 0x24
 801ca0c:	0011      	movs	r1, r2
 801ca0e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801ca10:	930c      	str	r3, [sp, #48]	@ 0x30
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d100      	bne.n	801ca18 <arm_cfft_radix4by2_q31+0x24>
 801ca16:	e0a0      	b.n	801cb5a <arm_cfft_radix4by2_q31+0x166>
 801ca18:	0002      	movs	r2, r0
 801ca1a:	00db      	lsls	r3, r3, #3
 801ca1c:	3204      	adds	r2, #4
 801ca1e:	4691      	mov	r9, r2
 801ca20:	4698      	mov	r8, r3
 801ca22:	000a      	movs	r2, r1
 801ca24:	464e      	mov	r6, r9
 801ca26:	4442      	add	r2, r8
 801ca28:	4699      	mov	r9, r3
 801ca2a:	4688      	mov	r8, r1
 801ca2c:	9208      	str	r2, [sp, #32]
 801ca2e:	900d      	str	r0, [sp, #52]	@ 0x34
 801ca30:	4643      	mov	r3, r8
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	469b      	mov	fp, r3
 801ca36:	4643      	mov	r3, r8
 801ca38:	685b      	ldr	r3, [r3, #4]
 801ca3a:	469a      	mov	sl, r3
 801ca3c:	683b      	ldr	r3, [r7, #0]
 801ca3e:	109c      	asrs	r4, r3, #2
 801ca40:	464b      	mov	r3, r9
 801ca42:	58fb      	ldr	r3, [r7, r3]
 801ca44:	109a      	asrs	r2, r3, #2
 801ca46:	18a3      	adds	r3, r4, r2
 801ca48:	603b      	str	r3, [r7, #0]
 801ca4a:	6833      	ldr	r3, [r6, #0]
 801ca4c:	1aa4      	subs	r4, r4, r2
 801ca4e:	109d      	asrs	r5, r3, #2
 801ca50:	464b      	mov	r3, r9
 801ca52:	58f3      	ldr	r3, [r6, r3]
 801ca54:	17e2      	asrs	r2, r4, #31
 801ca56:	109b      	asrs	r3, r3, #2
 801ca58:	18e9      	adds	r1, r5, r3
 801ca5a:	6031      	str	r1, [r6, #0]
 801ca5c:	0011      	movs	r1, r2
 801ca5e:	465a      	mov	r2, fp
 801ca60:	17d2      	asrs	r2, r2, #31
 801ca62:	0010      	movs	r0, r2
 801ca64:	4652      	mov	r2, sl
 801ca66:	1aed      	subs	r5, r5, r3
 801ca68:	17eb      	asrs	r3, r5, #31
 801ca6a:	17d2      	asrs	r2, r2, #31
 801ca6c:	9307      	str	r3, [sp, #28]
 801ca6e:	9204      	str	r2, [sp, #16]
 801ca70:	0003      	movs	r3, r0
 801ca72:	465a      	mov	r2, fp
 801ca74:	9006      	str	r0, [sp, #24]
 801ca76:	0020      	movs	r0, r4
 801ca78:	9105      	str	r1, [sp, #20]
 801ca7a:	f7e3 fda1 	bl	80005c0 <__aeabi_lmul>
 801ca7e:	2280      	movs	r2, #128	@ 0x80
 801ca80:	2300      	movs	r3, #0
 801ca82:	0612      	lsls	r2, r2, #24
 801ca84:	1880      	adds	r0, r0, r2
 801ca86:	4159      	adcs	r1, r3
 801ca88:	2300      	movs	r3, #0
 801ca8a:	9101      	str	r1, [sp, #4]
 801ca8c:	9300      	str	r3, [sp, #0]
 801ca8e:	4652      	mov	r2, sl
 801ca90:	9b04      	ldr	r3, [sp, #16]
 801ca92:	0028      	movs	r0, r5
 801ca94:	17e9      	asrs	r1, r5, #31
 801ca96:	f7e3 fd93 	bl	80005c0 <__aeabi_lmul>
 801ca9a:	9a00      	ldr	r2, [sp, #0]
 801ca9c:	9b01      	ldr	r3, [sp, #4]
 801ca9e:	1880      	adds	r0, r0, r2
 801caa0:	4159      	adcs	r1, r3
 801caa2:	2280      	movs	r2, #128	@ 0x80
 801caa4:	2300      	movs	r3, #0
 801caa6:	0612      	lsls	r2, r2, #24
 801caa8:	1880      	adds	r0, r0, r2
 801caaa:	4159      	adcs	r1, r3
 801caac:	464a      	mov	r2, r9
 801caae:	004b      	lsls	r3, r1, #1
 801cab0:	50bb      	str	r3, [r7, r2]
 801cab2:	4658      	mov	r0, fp
 801cab4:	002a      	movs	r2, r5
 801cab6:	9b07      	ldr	r3, [sp, #28]
 801cab8:	9906      	ldr	r1, [sp, #24]
 801caba:	f7e3 fd81 	bl	80005c0 <__aeabi_lmul>
 801cabe:	2280      	movs	r2, #128	@ 0x80
 801cac0:	2300      	movs	r3, #0
 801cac2:	0612      	lsls	r2, r2, #24
 801cac4:	1880      	adds	r0, r0, r2
 801cac6:	4159      	adcs	r1, r3
 801cac8:	2000      	movs	r0, #0
 801caca:	9103      	str	r1, [sp, #12]
 801cacc:	9002      	str	r0, [sp, #8]
 801cace:	4652      	mov	r2, sl
 801cad0:	9b04      	ldr	r3, [sp, #16]
 801cad2:	0020      	movs	r0, r4
 801cad4:	9905      	ldr	r1, [sp, #20]
 801cad6:	f7e3 fd73 	bl	80005c0 <__aeabi_lmul>
 801cada:	9a02      	ldr	r2, [sp, #8]
 801cadc:	9b03      	ldr	r3, [sp, #12]
 801cade:	1a12      	subs	r2, r2, r0
 801cae0:	418b      	sbcs	r3, r1
 801cae2:	2080      	movs	r0, #128	@ 0x80
 801cae4:	2100      	movs	r1, #0
 801cae6:	0600      	lsls	r0, r0, #24
 801cae8:	1812      	adds	r2, r2, r0
 801caea:	414b      	adcs	r3, r1
 801caec:	464a      	mov	r2, r9
 801caee:	005b      	lsls	r3, r3, #1
 801caf0:	50b3      	str	r3, [r6, r2]
 801caf2:	2308      	movs	r3, #8
 801caf4:	469c      	mov	ip, r3
 801caf6:	9b08      	ldr	r3, [sp, #32]
 801caf8:	44e0      	add	r8, ip
 801cafa:	3708      	adds	r7, #8
 801cafc:	3608      	adds	r6, #8
 801cafe:	4598      	cmp	r8, r3
 801cb00:	d196      	bne.n	801ca30 <arm_cfft_radix4by2_q31+0x3c>
 801cb02:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801cb04:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801cb06:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cb08:	2302      	movs	r3, #2
 801cb0a:	003a      	movs	r2, r7
 801cb0c:	0029      	movs	r1, r5
 801cb0e:	0020      	movs	r0, r4
 801cb10:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801cb12:	f000 f957 	bl	801cdc4 <arm_radix4_butterfly_q31>
 801cb16:	46a4      	mov	ip, r4
 801cb18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801cb1a:	2302      	movs	r3, #2
 801cb1c:	0088      	lsls	r0, r1, #2
 801cb1e:	4460      	add	r0, ip
 801cb20:	003a      	movs	r2, r7
 801cb22:	0029      	movs	r1, r5
 801cb24:	f000 f94e 	bl	801cdc4 <arm_radix4_butterfly_q31>
 801cb28:	46a4      	mov	ip, r4
 801cb2a:	0128      	lsls	r0, r5, #4
 801cb2c:	4460      	add	r0, ip
 801cb2e:	6833      	ldr	r3, [r6, #0]
 801cb30:	005b      	lsls	r3, r3, #1
 801cb32:	6033      	str	r3, [r6, #0]
 801cb34:	6873      	ldr	r3, [r6, #4]
 801cb36:	005b      	lsls	r3, r3, #1
 801cb38:	6073      	str	r3, [r6, #4]
 801cb3a:	68b3      	ldr	r3, [r6, #8]
 801cb3c:	005b      	lsls	r3, r3, #1
 801cb3e:	60b3      	str	r3, [r6, #8]
 801cb40:	68f3      	ldr	r3, [r6, #12]
 801cb42:	005b      	lsls	r3, r3, #1
 801cb44:	60f3      	str	r3, [r6, #12]
 801cb46:	3610      	adds	r6, #16
 801cb48:	42b0      	cmp	r0, r6
 801cb4a:	d1f0      	bne.n	801cb2e <arm_cfft_radix4by2_q31+0x13a>
 801cb4c:	b00f      	add	sp, #60	@ 0x3c
 801cb4e:	bc3c      	pop	{r2, r3, r4, r5}
 801cb50:	4690      	mov	r8, r2
 801cb52:	4699      	mov	r9, r3
 801cb54:	46a2      	mov	sl, r4
 801cb56:	46ab      	mov	fp, r5
 801cb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb5a:	2302      	movs	r3, #2
 801cb5c:	2100      	movs	r1, #0
 801cb5e:	0015      	movs	r5, r2
 801cb60:	f000 f930 	bl	801cdc4 <arm_radix4_butterfly_q31>
 801cb64:	46bc      	mov	ip, r7
 801cb66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cb68:	002a      	movs	r2, r5
 801cb6a:	0098      	lsls	r0, r3, #2
 801cb6c:	4460      	add	r0, ip
 801cb6e:	2302      	movs	r3, #2
 801cb70:	2100      	movs	r1, #0
 801cb72:	f000 f927 	bl	801cdc4 <arm_radix4_butterfly_q31>
 801cb76:	e7e9      	b.n	801cb4c <arm_cfft_radix4by2_q31+0x158>

0801cb78 <arm_cfft_radix4by2_inverse_q31>:
 801cb78:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb7a:	465f      	mov	r7, fp
 801cb7c:	4656      	mov	r6, sl
 801cb7e:	464d      	mov	r5, r9
 801cb80:	4644      	mov	r4, r8
 801cb82:	000b      	movs	r3, r1
 801cb84:	b4f0      	push	{r4, r5, r6, r7}
 801cb86:	085b      	lsrs	r3, r3, #1
 801cb88:	b08f      	sub	sp, #60	@ 0x3c
 801cb8a:	910a      	str	r1, [sp, #40]	@ 0x28
 801cb8c:	0007      	movs	r7, r0
 801cb8e:	9009      	str	r0, [sp, #36]	@ 0x24
 801cb90:	0011      	movs	r1, r2
 801cb92:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cb94:	930c      	str	r3, [sp, #48]	@ 0x30
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	d100      	bne.n	801cb9c <arm_cfft_radix4by2_inverse_q31+0x24>
 801cb9a:	e0a0      	b.n	801ccde <arm_cfft_radix4by2_inverse_q31+0x166>
 801cb9c:	0002      	movs	r2, r0
 801cb9e:	00db      	lsls	r3, r3, #3
 801cba0:	3204      	adds	r2, #4
 801cba2:	4691      	mov	r9, r2
 801cba4:	4698      	mov	r8, r3
 801cba6:	000a      	movs	r2, r1
 801cba8:	464e      	mov	r6, r9
 801cbaa:	4442      	add	r2, r8
 801cbac:	4699      	mov	r9, r3
 801cbae:	4688      	mov	r8, r1
 801cbb0:	9208      	str	r2, [sp, #32]
 801cbb2:	900d      	str	r0, [sp, #52]	@ 0x34
 801cbb4:	4643      	mov	r3, r8
 801cbb6:	681b      	ldr	r3, [r3, #0]
 801cbb8:	469b      	mov	fp, r3
 801cbba:	4643      	mov	r3, r8
 801cbbc:	685b      	ldr	r3, [r3, #4]
 801cbbe:	469a      	mov	sl, r3
 801cbc0:	683b      	ldr	r3, [r7, #0]
 801cbc2:	109c      	asrs	r4, r3, #2
 801cbc4:	464b      	mov	r3, r9
 801cbc6:	58fb      	ldr	r3, [r7, r3]
 801cbc8:	109a      	asrs	r2, r3, #2
 801cbca:	18a3      	adds	r3, r4, r2
 801cbcc:	603b      	str	r3, [r7, #0]
 801cbce:	6833      	ldr	r3, [r6, #0]
 801cbd0:	1aa4      	subs	r4, r4, r2
 801cbd2:	109d      	asrs	r5, r3, #2
 801cbd4:	464b      	mov	r3, r9
 801cbd6:	58f3      	ldr	r3, [r6, r3]
 801cbd8:	17e2      	asrs	r2, r4, #31
 801cbda:	109b      	asrs	r3, r3, #2
 801cbdc:	18e9      	adds	r1, r5, r3
 801cbde:	6031      	str	r1, [r6, #0]
 801cbe0:	0011      	movs	r1, r2
 801cbe2:	465a      	mov	r2, fp
 801cbe4:	17d2      	asrs	r2, r2, #31
 801cbe6:	0010      	movs	r0, r2
 801cbe8:	4652      	mov	r2, sl
 801cbea:	1aed      	subs	r5, r5, r3
 801cbec:	17eb      	asrs	r3, r5, #31
 801cbee:	17d2      	asrs	r2, r2, #31
 801cbf0:	9307      	str	r3, [sp, #28]
 801cbf2:	9204      	str	r2, [sp, #16]
 801cbf4:	0003      	movs	r3, r0
 801cbf6:	465a      	mov	r2, fp
 801cbf8:	9006      	str	r0, [sp, #24]
 801cbfa:	0020      	movs	r0, r4
 801cbfc:	9105      	str	r1, [sp, #20]
 801cbfe:	f7e3 fcdf 	bl	80005c0 <__aeabi_lmul>
 801cc02:	2280      	movs	r2, #128	@ 0x80
 801cc04:	2300      	movs	r3, #0
 801cc06:	0612      	lsls	r2, r2, #24
 801cc08:	1880      	adds	r0, r0, r2
 801cc0a:	4159      	adcs	r1, r3
 801cc0c:	2300      	movs	r3, #0
 801cc0e:	9101      	str	r1, [sp, #4]
 801cc10:	9300      	str	r3, [sp, #0]
 801cc12:	4652      	mov	r2, sl
 801cc14:	9b04      	ldr	r3, [sp, #16]
 801cc16:	0028      	movs	r0, r5
 801cc18:	17e9      	asrs	r1, r5, #31
 801cc1a:	f7e3 fcd1 	bl	80005c0 <__aeabi_lmul>
 801cc1e:	9a00      	ldr	r2, [sp, #0]
 801cc20:	9b01      	ldr	r3, [sp, #4]
 801cc22:	1a12      	subs	r2, r2, r0
 801cc24:	418b      	sbcs	r3, r1
 801cc26:	2080      	movs	r0, #128	@ 0x80
 801cc28:	2100      	movs	r1, #0
 801cc2a:	0600      	lsls	r0, r0, #24
 801cc2c:	1812      	adds	r2, r2, r0
 801cc2e:	414b      	adcs	r3, r1
 801cc30:	464a      	mov	r2, r9
 801cc32:	005b      	lsls	r3, r3, #1
 801cc34:	50bb      	str	r3, [r7, r2]
 801cc36:	4658      	mov	r0, fp
 801cc38:	002a      	movs	r2, r5
 801cc3a:	9b07      	ldr	r3, [sp, #28]
 801cc3c:	9906      	ldr	r1, [sp, #24]
 801cc3e:	f7e3 fcbf 	bl	80005c0 <__aeabi_lmul>
 801cc42:	2280      	movs	r2, #128	@ 0x80
 801cc44:	2300      	movs	r3, #0
 801cc46:	0612      	lsls	r2, r2, #24
 801cc48:	1880      	adds	r0, r0, r2
 801cc4a:	4159      	adcs	r1, r3
 801cc4c:	2000      	movs	r0, #0
 801cc4e:	9103      	str	r1, [sp, #12]
 801cc50:	9002      	str	r0, [sp, #8]
 801cc52:	4652      	mov	r2, sl
 801cc54:	9b04      	ldr	r3, [sp, #16]
 801cc56:	0020      	movs	r0, r4
 801cc58:	9905      	ldr	r1, [sp, #20]
 801cc5a:	f7e3 fcb1 	bl	80005c0 <__aeabi_lmul>
 801cc5e:	9b02      	ldr	r3, [sp, #8]
 801cc60:	9c03      	ldr	r4, [sp, #12]
 801cc62:	18c0      	adds	r0, r0, r3
 801cc64:	4161      	adcs	r1, r4
 801cc66:	2380      	movs	r3, #128	@ 0x80
 801cc68:	2400      	movs	r4, #0
 801cc6a:	061b      	lsls	r3, r3, #24
 801cc6c:	18c0      	adds	r0, r0, r3
 801cc6e:	4161      	adcs	r1, r4
 801cc70:	464a      	mov	r2, r9
 801cc72:	004b      	lsls	r3, r1, #1
 801cc74:	50b3      	str	r3, [r6, r2]
 801cc76:	2308      	movs	r3, #8
 801cc78:	469c      	mov	ip, r3
 801cc7a:	9b08      	ldr	r3, [sp, #32]
 801cc7c:	44e0      	add	r8, ip
 801cc7e:	3708      	adds	r7, #8
 801cc80:	3608      	adds	r6, #8
 801cc82:	4598      	cmp	r8, r3
 801cc84:	d196      	bne.n	801cbb4 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801cc86:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801cc88:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801cc8a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cc8c:	2302      	movs	r3, #2
 801cc8e:	003a      	movs	r2, r7
 801cc90:	0029      	movs	r1, r5
 801cc92:	0020      	movs	r0, r4
 801cc94:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801cc96:	f000 fb3b 	bl	801d310 <arm_radix4_butterfly_inverse_q31>
 801cc9a:	46a4      	mov	ip, r4
 801cc9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801cc9e:	2302      	movs	r3, #2
 801cca0:	0088      	lsls	r0, r1, #2
 801cca2:	4460      	add	r0, ip
 801cca4:	003a      	movs	r2, r7
 801cca6:	0029      	movs	r1, r5
 801cca8:	f000 fb32 	bl	801d310 <arm_radix4_butterfly_inverse_q31>
 801ccac:	46a4      	mov	ip, r4
 801ccae:	0128      	lsls	r0, r5, #4
 801ccb0:	4460      	add	r0, ip
 801ccb2:	6833      	ldr	r3, [r6, #0]
 801ccb4:	005b      	lsls	r3, r3, #1
 801ccb6:	6033      	str	r3, [r6, #0]
 801ccb8:	6873      	ldr	r3, [r6, #4]
 801ccba:	005b      	lsls	r3, r3, #1
 801ccbc:	6073      	str	r3, [r6, #4]
 801ccbe:	68b3      	ldr	r3, [r6, #8]
 801ccc0:	005b      	lsls	r3, r3, #1
 801ccc2:	60b3      	str	r3, [r6, #8]
 801ccc4:	68f3      	ldr	r3, [r6, #12]
 801ccc6:	005b      	lsls	r3, r3, #1
 801ccc8:	60f3      	str	r3, [r6, #12]
 801ccca:	3610      	adds	r6, #16
 801cccc:	42b0      	cmp	r0, r6
 801ccce:	d1f0      	bne.n	801ccb2 <arm_cfft_radix4by2_inverse_q31+0x13a>
 801ccd0:	b00f      	add	sp, #60	@ 0x3c
 801ccd2:	bc3c      	pop	{r2, r3, r4, r5}
 801ccd4:	4690      	mov	r8, r2
 801ccd6:	4699      	mov	r9, r3
 801ccd8:	46a2      	mov	sl, r4
 801ccda:	46ab      	mov	fp, r5
 801ccdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ccde:	2302      	movs	r3, #2
 801cce0:	2100      	movs	r1, #0
 801cce2:	0015      	movs	r5, r2
 801cce4:	f000 fb14 	bl	801d310 <arm_radix4_butterfly_inverse_q31>
 801cce8:	46bc      	mov	ip, r7
 801ccea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ccec:	002a      	movs	r2, r5
 801ccee:	0098      	lsls	r0, r3, #2
 801ccf0:	4460      	add	r0, ip
 801ccf2:	2302      	movs	r3, #2
 801ccf4:	2100      	movs	r1, #0
 801ccf6:	f000 fb0b 	bl	801d310 <arm_radix4_butterfly_inverse_q31>
 801ccfa:	e7e9      	b.n	801ccd0 <arm_cfft_radix4by2_inverse_q31+0x158>

0801ccfc <arm_cfft_q31>:
 801ccfc:	b570      	push	{r4, r5, r6, lr}
 801ccfe:	001e      	movs	r6, r3
 801cd00:	2380      	movs	r3, #128	@ 0x80
 801cd02:	000d      	movs	r5, r1
 801cd04:	0004      	movs	r4, r0
 801cd06:	8801      	ldrh	r1, [r0, #0]
 801cd08:	005b      	lsls	r3, r3, #1
 801cd0a:	2a01      	cmp	r2, #1
 801cd0c:	d028      	beq.n	801cd60 <arm_cfft_q31+0x64>
 801cd0e:	4299      	cmp	r1, r3
 801cd10:	d020      	beq.n	801cd54 <arm_cfft_q31+0x58>
 801cd12:	d812      	bhi.n	801cd3a <arm_cfft_q31+0x3e>
 801cd14:	2920      	cmp	r1, #32
 801cd16:	d004      	beq.n	801cd22 <arm_cfft_q31+0x26>
 801cd18:	d949      	bls.n	801cdae <arm_cfft_q31+0xb2>
 801cd1a:	2940      	cmp	r1, #64	@ 0x40
 801cd1c:	d01a      	beq.n	801cd54 <arm_cfft_q31+0x58>
 801cd1e:	2980      	cmp	r1, #128	@ 0x80
 801cd20:	d103      	bne.n	801cd2a <arm_cfft_q31+0x2e>
 801cd22:	6862      	ldr	r2, [r4, #4]
 801cd24:	0028      	movs	r0, r5
 801cd26:	f7ff fe65 	bl	801c9f4 <arm_cfft_radix4by2_q31>
 801cd2a:	2e00      	cmp	r6, #0
 801cd2c:	d004      	beq.n	801cd38 <arm_cfft_q31+0x3c>
 801cd2e:	68a2      	ldr	r2, [r4, #8]
 801cd30:	89a1      	ldrh	r1, [r4, #12]
 801cd32:	0028      	movs	r0, r5
 801cd34:	f7e3 f9e8 	bl	8000108 <arm_bitreversal_32>
 801cd38:	bd70      	pop	{r4, r5, r6, pc}
 801cd3a:	2380      	movs	r3, #128	@ 0x80
 801cd3c:	00db      	lsls	r3, r3, #3
 801cd3e:	4299      	cmp	r1, r3
 801cd40:	d008      	beq.n	801cd54 <arm_cfft_q31+0x58>
 801cd42:	d92f      	bls.n	801cda4 <arm_cfft_q31+0xa8>
 801cd44:	2380      	movs	r3, #128	@ 0x80
 801cd46:	011b      	lsls	r3, r3, #4
 801cd48:	4299      	cmp	r1, r3
 801cd4a:	d0ea      	beq.n	801cd22 <arm_cfft_q31+0x26>
 801cd4c:	2380      	movs	r3, #128	@ 0x80
 801cd4e:	015b      	lsls	r3, r3, #5
 801cd50:	4299      	cmp	r1, r3
 801cd52:	d1ea      	bne.n	801cd2a <arm_cfft_q31+0x2e>
 801cd54:	2301      	movs	r3, #1
 801cd56:	6862      	ldr	r2, [r4, #4]
 801cd58:	0028      	movs	r0, r5
 801cd5a:	f000 f833 	bl	801cdc4 <arm_radix4_butterfly_q31>
 801cd5e:	e7e4      	b.n	801cd2a <arm_cfft_q31+0x2e>
 801cd60:	4299      	cmp	r1, r3
 801cd62:	d019      	beq.n	801cd98 <arm_cfft_q31+0x9c>
 801cd64:	d80b      	bhi.n	801cd7e <arm_cfft_q31+0x82>
 801cd66:	2920      	cmp	r1, #32
 801cd68:	d004      	beq.n	801cd74 <arm_cfft_q31+0x78>
 801cd6a:	d928      	bls.n	801cdbe <arm_cfft_q31+0xc2>
 801cd6c:	2940      	cmp	r1, #64	@ 0x40
 801cd6e:	d013      	beq.n	801cd98 <arm_cfft_q31+0x9c>
 801cd70:	2980      	cmp	r1, #128	@ 0x80
 801cd72:	d1da      	bne.n	801cd2a <arm_cfft_q31+0x2e>
 801cd74:	6862      	ldr	r2, [r4, #4]
 801cd76:	0028      	movs	r0, r5
 801cd78:	f7ff fefe 	bl	801cb78 <arm_cfft_radix4by2_inverse_q31>
 801cd7c:	e7d5      	b.n	801cd2a <arm_cfft_q31+0x2e>
 801cd7e:	2380      	movs	r3, #128	@ 0x80
 801cd80:	00db      	lsls	r3, r3, #3
 801cd82:	4299      	cmp	r1, r3
 801cd84:	d008      	beq.n	801cd98 <arm_cfft_q31+0x9c>
 801cd86:	d915      	bls.n	801cdb4 <arm_cfft_q31+0xb8>
 801cd88:	2380      	movs	r3, #128	@ 0x80
 801cd8a:	011b      	lsls	r3, r3, #4
 801cd8c:	4299      	cmp	r1, r3
 801cd8e:	d0f1      	beq.n	801cd74 <arm_cfft_q31+0x78>
 801cd90:	2380      	movs	r3, #128	@ 0x80
 801cd92:	015b      	lsls	r3, r3, #5
 801cd94:	4299      	cmp	r1, r3
 801cd96:	d1c8      	bne.n	801cd2a <arm_cfft_q31+0x2e>
 801cd98:	2301      	movs	r3, #1
 801cd9a:	6862      	ldr	r2, [r4, #4]
 801cd9c:	0028      	movs	r0, r5
 801cd9e:	f000 fab7 	bl	801d310 <arm_radix4_butterfly_inverse_q31>
 801cda2:	e7c2      	b.n	801cd2a <arm_cfft_q31+0x2e>
 801cda4:	2380      	movs	r3, #128	@ 0x80
 801cda6:	009b      	lsls	r3, r3, #2
 801cda8:	4299      	cmp	r1, r3
 801cdaa:	d0ba      	beq.n	801cd22 <arm_cfft_q31+0x26>
 801cdac:	e7bd      	b.n	801cd2a <arm_cfft_q31+0x2e>
 801cdae:	2910      	cmp	r1, #16
 801cdb0:	d1bb      	bne.n	801cd2a <arm_cfft_q31+0x2e>
 801cdb2:	e7cf      	b.n	801cd54 <arm_cfft_q31+0x58>
 801cdb4:	2380      	movs	r3, #128	@ 0x80
 801cdb6:	009b      	lsls	r3, r3, #2
 801cdb8:	4299      	cmp	r1, r3
 801cdba:	d0db      	beq.n	801cd74 <arm_cfft_q31+0x78>
 801cdbc:	e7b5      	b.n	801cd2a <arm_cfft_q31+0x2e>
 801cdbe:	2910      	cmp	r1, #16
 801cdc0:	d1b3      	bne.n	801cd2a <arm_cfft_q31+0x2e>
 801cdc2:	e7e9      	b.n	801cd98 <arm_cfft_q31+0x9c>

0801cdc4 <arm_radix4_butterfly_q31>:
 801cdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cdc6:	464d      	mov	r5, r9
 801cdc8:	4644      	mov	r4, r8
 801cdca:	465f      	mov	r7, fp
 801cdcc:	4656      	mov	r6, sl
 801cdce:	469c      	mov	ip, r3
 801cdd0:	b4f0      	push	{r4, r5, r6, r7}
 801cdd2:	b0a7      	sub	sp, #156	@ 0x9c
 801cdd4:	9114      	str	r1, [sp, #80]	@ 0x50
 801cdd6:	0889      	lsrs	r1, r1, #2
 801cdd8:	9310      	str	r3, [sp, #64]	@ 0x40
 801cdda:	00cb      	lsls	r3, r1, #3
 801cddc:	0015      	movs	r5, r2
 801cdde:	9223      	str	r2, [sp, #140]	@ 0x8c
 801cde0:	18c2      	adds	r2, r0, r3
 801cde2:	000c      	movs	r4, r1
 801cde4:	469a      	mov	sl, r3
 801cde6:	9124      	str	r1, [sp, #144]	@ 0x90
 801cde8:	18d1      	adds	r1, r2, r3
 801cdea:	4663      	mov	r3, ip
 801cdec:	468b      	mov	fp, r1
 801cdee:	0119      	lsls	r1, r3, #4
 801cdf0:	910d      	str	r1, [sp, #52]	@ 0x34
 801cdf2:	00d9      	lsls	r1, r3, #3
 801cdf4:	005b      	lsls	r3, r3, #1
 801cdf6:	4463      	add	r3, ip
 801cdf8:	910e      	str	r1, [sp, #56]	@ 0x38
 801cdfa:	00d9      	lsls	r1, r3, #3
 801cdfc:	465b      	mov	r3, fp
 801cdfe:	44da      	add	sl, fp
 801ce00:	4690      	mov	r8, r2
 801ce02:	4683      	mov	fp, r0
 801ce04:	4699      	mov	r9, r3
 801ce06:	9022      	str	r0, [sp, #136]	@ 0x88
 801ce08:	9025      	str	r0, [sp, #148]	@ 0x94
 801ce0a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801ce0c:	9502      	str	r5, [sp, #8]
 801ce0e:	9500      	str	r5, [sp, #0]
 801ce10:	9501      	str	r5, [sp, #4]
 801ce12:	9407      	str	r4, [sp, #28]
 801ce14:	465b      	mov	r3, fp
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	4642      	mov	r2, r8
 801ce1a:	111c      	asrs	r4, r3, #4
 801ce1c:	464b      	mov	r3, r9
 801ce1e:	4658      	mov	r0, fp
 801ce20:	681b      	ldr	r3, [r3, #0]
 801ce22:	6812      	ldr	r2, [r2, #0]
 801ce24:	111b      	asrs	r3, r3, #4
 801ce26:	18e7      	adds	r7, r4, r3
 801ce28:	1ae3      	subs	r3, r4, r3
 801ce2a:	1114      	asrs	r4, r2, #4
 801ce2c:	4652      	mov	r2, sl
 801ce2e:	6840      	ldr	r0, [r0, #4]
 801ce30:	6812      	ldr	r2, [r2, #0]
 801ce32:	1105      	asrs	r5, r0, #4
 801ce34:	4648      	mov	r0, r9
 801ce36:	9303      	str	r3, [sp, #12]
 801ce38:	1113      	asrs	r3, r2, #4
 801ce3a:	18e2      	adds	r2, r4, r3
 801ce3c:	465c      	mov	r4, fp
 801ce3e:	6840      	ldr	r0, [r0, #4]
 801ce40:	1103      	asrs	r3, r0, #4
 801ce42:	18ee      	adds	r6, r5, r3
 801ce44:	1ae8      	subs	r0, r5, r3
 801ce46:	18bb      	adds	r3, r7, r2
 801ce48:	6023      	str	r3, [r4, #0]
 801ce4a:	4644      	mov	r4, r8
 801ce4c:	6864      	ldr	r4, [r4, #4]
 801ce4e:	9004      	str	r0, [sp, #16]
 801ce50:	1125      	asrs	r5, r4, #4
 801ce52:	4654      	mov	r4, sl
 801ce54:	6864      	ldr	r4, [r4, #4]
 801ce56:	1123      	asrs	r3, r4, #4
 801ce58:	465c      	mov	r4, fp
 801ce5a:	18eb      	adds	r3, r5, r3
 801ce5c:	18f1      	adds	r1, r6, r3
 801ce5e:	6061      	str	r1, [r4, #4]
 801ce60:	4655      	mov	r5, sl
 801ce62:	4644      	mov	r4, r8
 801ce64:	686d      	ldr	r5, [r5, #4]
 801ce66:	6864      	ldr	r4, [r4, #4]
 801ce68:	1129      	asrs	r1, r5, #4
 801ce6a:	1124      	asrs	r4, r4, #4
 801ce6c:	1a64      	subs	r4, r4, r1
 801ce6e:	4641      	mov	r1, r8
 801ce70:	6809      	ldr	r1, [r1, #0]
 801ce72:	9405      	str	r4, [sp, #20]
 801ce74:	1108      	asrs	r0, r1, #4
 801ce76:	4651      	mov	r1, sl
 801ce78:	6809      	ldr	r1, [r1, #0]
 801ce7a:	1abc      	subs	r4, r7, r2
 801ce7c:	1109      	asrs	r1, r1, #4
 801ce7e:	1a41      	subs	r1, r0, r1
 801ce80:	17e2      	asrs	r2, r4, #31
 801ce82:	9106      	str	r1, [sp, #24]
 801ce84:	0011      	movs	r1, r2
 801ce86:	9a01      	ldr	r2, [sp, #4]
 801ce88:	9108      	str	r1, [sp, #32]
 801ce8a:	6817      	ldr	r7, [r2, #0]
 801ce8c:	17fd      	asrs	r5, r7, #31
 801ce8e:	0028      	movs	r0, r5
 801ce90:	1af5      	subs	r5, r6, r3
 801ce92:	17ee      	asrs	r6, r5, #31
 801ce94:	960a      	str	r6, [sp, #40]	@ 0x28
 801ce96:	6856      	ldr	r6, [r2, #4]
 801ce98:	9009      	str	r0, [sp, #36]	@ 0x24
 801ce9a:	17f3      	asrs	r3, r6, #31
 801ce9c:	003a      	movs	r2, r7
 801ce9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cea0:	0003      	movs	r3, r0
 801cea2:	0020      	movs	r0, r4
 801cea4:	f7e3 fb8c 	bl	80005c0 <__aeabi_lmul>
 801cea8:	0032      	movs	r2, r6
 801ceaa:	17f3      	asrs	r3, r6, #31
 801ceac:	910c      	str	r1, [sp, #48]	@ 0x30
 801ceae:	0028      	movs	r0, r5
 801ceb0:	17e9      	asrs	r1, r5, #31
 801ceb2:	f7e3 fb85 	bl	80005c0 <__aeabi_lmul>
 801ceb6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801ceb8:	002a      	movs	r2, r5
 801ceba:	4684      	mov	ip, r0
 801cebc:	4640      	mov	r0, r8
 801cebe:	4461      	add	r1, ip
 801cec0:	0049      	lsls	r1, r1, #1
 801cec2:	6001      	str	r1, [r0, #0]
 801cec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cec6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801cec8:	0038      	movs	r0, r7
 801ceca:	f7e3 fb79 	bl	80005c0 <__aeabi_lmul>
 801cece:	0032      	movs	r2, r6
 801ced0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ced2:	000d      	movs	r5, r1
 801ced4:	0020      	movs	r0, r4
 801ced6:	9908      	ldr	r1, [sp, #32]
 801ced8:	f7e3 fb72 	bl	80005c0 <__aeabi_lmul>
 801cedc:	4646      	mov	r6, r8
 801cede:	1a6d      	subs	r5, r5, r1
 801cee0:	006d      	lsls	r5, r5, #1
 801cee2:	6075      	str	r5, [r6, #4]
 801cee4:	9903      	ldr	r1, [sp, #12]
 801cee6:	9d05      	ldr	r5, [sp, #20]
 801cee8:	000c      	movs	r4, r1
 801ceea:	46ac      	mov	ip, r5
 801ceec:	4464      	add	r4, ip
 801ceee:	17e6      	asrs	r6, r4, #31
 801cef0:	0031      	movs	r1, r6
 801cef2:	9b00      	ldr	r3, [sp, #0]
 801cef4:	9804      	ldr	r0, [sp, #16]
 801cef6:	681e      	ldr	r6, [r3, #0]
 801cef8:	17f7      	asrs	r7, r6, #31
 801cefa:	9709      	str	r7, [sp, #36]	@ 0x24
 801cefc:	9f06      	ldr	r7, [sp, #24]
 801cefe:	0032      	movs	r2, r6
 801cf00:	1bc7      	subs	r7, r0, r7
 801cf02:	17fd      	asrs	r5, r7, #31
 801cf04:	950a      	str	r5, [sp, #40]	@ 0x28
 801cf06:	685d      	ldr	r5, [r3, #4]
 801cf08:	17f3      	asrs	r3, r6, #31
 801cf0a:	17e8      	asrs	r0, r5, #31
 801cf0c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801cf0e:	0020      	movs	r0, r4
 801cf10:	9108      	str	r1, [sp, #32]
 801cf12:	f7e3 fb55 	bl	80005c0 <__aeabi_lmul>
 801cf16:	002a      	movs	r2, r5
 801cf18:	17eb      	asrs	r3, r5, #31
 801cf1a:	910c      	str	r1, [sp, #48]	@ 0x30
 801cf1c:	0038      	movs	r0, r7
 801cf1e:	17f9      	asrs	r1, r7, #31
 801cf20:	f7e3 fb4e 	bl	80005c0 <__aeabi_lmul>
 801cf24:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801cf26:	003a      	movs	r2, r7
 801cf28:	4684      	mov	ip, r0
 801cf2a:	4648      	mov	r0, r9
 801cf2c:	4461      	add	r1, ip
 801cf2e:	0049      	lsls	r1, r1, #1
 801cf30:	6001      	str	r1, [r0, #0]
 801cf32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cf34:	0030      	movs	r0, r6
 801cf36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801cf38:	f7e3 fb42 	bl	80005c0 <__aeabi_lmul>
 801cf3c:	002a      	movs	r2, r5
 801cf3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cf40:	000e      	movs	r6, r1
 801cf42:	0020      	movs	r0, r4
 801cf44:	9908      	ldr	r1, [sp, #32]
 801cf46:	f7e3 fb3b 	bl	80005c0 <__aeabi_lmul>
 801cf4a:	464c      	mov	r4, r9
 801cf4c:	9d05      	ldr	r5, [sp, #20]
 801cf4e:	1a76      	subs	r6, r6, r1
 801cf50:	9903      	ldr	r1, [sp, #12]
 801cf52:	0076      	lsls	r6, r6, #1
 801cf54:	6066      	str	r6, [r4, #4]
 801cf56:	1b4c      	subs	r4, r1, r5
 801cf58:	9e06      	ldr	r6, [sp, #24]
 801cf5a:	17e1      	asrs	r1, r4, #31
 801cf5c:	9103      	str	r1, [sp, #12]
 801cf5e:	9902      	ldr	r1, [sp, #8]
 801cf60:	46b4      	mov	ip, r6
 801cf62:	680f      	ldr	r7, [r1, #0]
 801cf64:	9804      	ldr	r0, [sp, #16]
 801cf66:	17fd      	asrs	r5, r7, #31
 801cf68:	002b      	movs	r3, r5
 801cf6a:	684e      	ldr	r6, [r1, #4]
 801cf6c:	4460      	add	r0, ip
 801cf6e:	0005      	movs	r5, r0
 801cf70:	17c0      	asrs	r0, r0, #31
 801cf72:	9005      	str	r0, [sp, #20]
 801cf74:	17f0      	asrs	r0, r6, #31
 801cf76:	9006      	str	r0, [sp, #24]
 801cf78:	003a      	movs	r2, r7
 801cf7a:	0020      	movs	r0, r4
 801cf7c:	17e1      	asrs	r1, r4, #31
 801cf7e:	9304      	str	r3, [sp, #16]
 801cf80:	f7e3 fb1e 	bl	80005c0 <__aeabi_lmul>
 801cf84:	0032      	movs	r2, r6
 801cf86:	9108      	str	r1, [sp, #32]
 801cf88:	17f3      	asrs	r3, r6, #31
 801cf8a:	0028      	movs	r0, r5
 801cf8c:	17e9      	asrs	r1, r5, #31
 801cf8e:	f7e3 fb17 	bl	80005c0 <__aeabi_lmul>
 801cf92:	9808      	ldr	r0, [sp, #32]
 801cf94:	002a      	movs	r2, r5
 801cf96:	4684      	mov	ip, r0
 801cf98:	4650      	mov	r0, sl
 801cf9a:	4461      	add	r1, ip
 801cf9c:	0049      	lsls	r1, r1, #1
 801cf9e:	6001      	str	r1, [r0, #0]
 801cfa0:	9b05      	ldr	r3, [sp, #20]
 801cfa2:	9904      	ldr	r1, [sp, #16]
 801cfa4:	0038      	movs	r0, r7
 801cfa6:	f7e3 fb0b 	bl	80005c0 <__aeabi_lmul>
 801cfaa:	0020      	movs	r0, r4
 801cfac:	2408      	movs	r4, #8
 801cfae:	000d      	movs	r5, r1
 801cfb0:	0032      	movs	r2, r6
 801cfb2:	9b06      	ldr	r3, [sp, #24]
 801cfb4:	9903      	ldr	r1, [sp, #12]
 801cfb6:	f7e3 fb03 	bl	80005c0 <__aeabi_lmul>
 801cfba:	46a4      	mov	ip, r4
 801cfbc:	4650      	mov	r0, sl
 801cfbe:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801cfc0:	44e3      	add	fp, ip
 801cfc2:	44e0      	add	r8, ip
 801cfc4:	44e1      	add	r9, ip
 801cfc6:	44e2      	add	sl, ip
 801cfc8:	46a4      	mov	ip, r4
 801cfca:	1a6d      	subs	r5, r5, r1
 801cfcc:	006d      	lsls	r5, r5, #1
 801cfce:	9a01      	ldr	r2, [sp, #4]
 801cfd0:	6045      	str	r5, [r0, #4]
 801cfd2:	9807      	ldr	r0, [sp, #28]
 801cfd4:	4462      	add	r2, ip
 801cfd6:	3801      	subs	r0, #1
 801cfd8:	9201      	str	r2, [sp, #4]
 801cfda:	9007      	str	r0, [sp, #28]
 801cfdc:	9b00      	ldr	r3, [sp, #0]
 801cfde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cfe0:	9902      	ldr	r1, [sp, #8]
 801cfe2:	4694      	mov	ip, r2
 801cfe4:	4463      	add	r3, ip
 801cfe6:	9300      	str	r3, [sp, #0]
 801cfe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cfea:	469c      	mov	ip, r3
 801cfec:	4461      	add	r1, ip
 801cfee:	9102      	str	r1, [sp, #8]
 801cff0:	2800      	cmp	r0, #0
 801cff2:	d000      	beq.n	801cff6 <arm_radix4_butterfly_q31+0x232>
 801cff4:	e70e      	b.n	801ce14 <arm_radix4_butterfly_q31+0x50>
 801cff6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cff8:	009b      	lsls	r3, r3, #2
 801cffa:	931f      	str	r3, [sp, #124]	@ 0x7c
 801cffc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801cffe:	9320      	str	r3, [sp, #128]	@ 0x80
 801d000:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d002:	2b04      	cmp	r3, #4
 801d004:	d800      	bhi.n	801d008 <arm_radix4_butterfly_q31+0x244>
 801d006:	e180      	b.n	801d30a <arm_radix4_butterfly_q31+0x546>
 801d008:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d00a:	0893      	lsrs	r3, r2, #2
 801d00c:	1e59      	subs	r1, r3, #1
 801d00e:	9321      	str	r3, [sp, #132]	@ 0x84
 801d010:	00db      	lsls	r3, r3, #3
 801d012:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d014:	00d3      	lsls	r3, r2, #3
 801d016:	9300      	str	r3, [sp, #0]
 801d018:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d01a:	911a      	str	r1, [sp, #104]	@ 0x68
 801d01c:	00da      	lsls	r2, r3, #3
 801d01e:	921e      	str	r2, [sp, #120]	@ 0x78
 801d020:	011a      	lsls	r2, r3, #4
 801d022:	921d      	str	r2, [sp, #116]	@ 0x74
 801d024:	001a      	movs	r2, r3
 801d026:	4694      	mov	ip, r2
 801d028:	005b      	lsls	r3, r3, #1
 801d02a:	4463      	add	r3, ip
 801d02c:	00db      	lsls	r3, r3, #3
 801d02e:	931c      	str	r3, [sp, #112]	@ 0x70
 801d030:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d032:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d034:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d036:	9318      	str	r3, [sp, #96]	@ 0x60
 801d038:	9319      	str	r3, [sp, #100]	@ 0x64
 801d03a:	9316      	str	r3, [sp, #88]	@ 0x58
 801d03c:	2300      	movs	r3, #0
 801d03e:	9315      	str	r3, [sp, #84]	@ 0x54
 801d040:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d042:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d044:	681a      	ldr	r2, [r3, #0]
 801d046:	685b      	ldr	r3, [r3, #4]
 801d048:	9205      	str	r2, [sp, #20]
 801d04a:	9306      	str	r3, [sp, #24]
 801d04c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d04e:	468c      	mov	ip, r1
 801d050:	681a      	ldr	r2, [r3, #0]
 801d052:	685b      	ldr	r3, [r3, #4]
 801d054:	9207      	str	r2, [sp, #28]
 801d056:	9308      	str	r3, [sp, #32]
 801d058:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d05a:	681a      	ldr	r2, [r3, #0]
 801d05c:	685b      	ldr	r3, [r3, #4]
 801d05e:	9209      	str	r2, [sp, #36]	@ 0x24
 801d060:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d062:	930a      	str	r3, [sp, #40]	@ 0x28
 801d064:	0013      	movs	r3, r2
 801d066:	4463      	add	r3, ip
 801d068:	4698      	mov	r8, r3
 801d06a:	0013      	movs	r3, r2
 801d06c:	4442      	add	r2, r8
 801d06e:	4691      	mov	r9, r2
 801d070:	001a      	movs	r2, r3
 801d072:	444a      	add	r2, r9
 801d074:	4692      	mov	sl, r2
 801d076:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d078:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d07a:	4293      	cmp	r3, r2
 801d07c:	d800      	bhi.n	801d080 <arm_radix4_butterfly_q31+0x2bc>
 801d07e:	e0dd      	b.n	801d23c <arm_radix4_butterfly_q31+0x478>
 801d080:	4694      	mov	ip, r2
 801d082:	468b      	mov	fp, r1
 801d084:	4644      	mov	r4, r8
 801d086:	4655      	mov	r5, sl
 801d088:	9b07      	ldr	r3, [sp, #28]
 801d08a:	17db      	asrs	r3, r3, #31
 801d08c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d08e:	9b08      	ldr	r3, [sp, #32]
 801d090:	17db      	asrs	r3, r3, #31
 801d092:	930d      	str	r3, [sp, #52]	@ 0x34
 801d094:	9b05      	ldr	r3, [sp, #20]
 801d096:	17db      	asrs	r3, r3, #31
 801d098:	930e      	str	r3, [sp, #56]	@ 0x38
 801d09a:	9b06      	ldr	r3, [sp, #24]
 801d09c:	17db      	asrs	r3, r3, #31
 801d09e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d0a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0a2:	17db      	asrs	r3, r3, #31
 801d0a4:	9310      	str	r3, [sp, #64]	@ 0x40
 801d0a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d0a8:	17db      	asrs	r3, r3, #31
 801d0aa:	9311      	str	r3, [sp, #68]	@ 0x44
 801d0ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d0ae:	4463      	add	r3, ip
 801d0b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d0b2:	465b      	mov	r3, fp
 801d0b4:	4659      	mov	r1, fp
 801d0b6:	681a      	ldr	r2, [r3, #0]
 801d0b8:	464b      	mov	r3, r9
 801d0ba:	684f      	ldr	r7, [r1, #4]
 801d0bc:	4649      	mov	r1, r9
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	18d6      	adds	r6, r2, r3
 801d0c2:	1ad3      	subs	r3, r2, r3
 801d0c4:	9301      	str	r3, [sp, #4]
 801d0c6:	684b      	ldr	r3, [r1, #4]
 801d0c8:	18f8      	adds	r0, r7, r3
 801d0ca:	1af9      	subs	r1, r7, r3
 801d0cc:	6827      	ldr	r7, [r4, #0]
 801d0ce:	9102      	str	r1, [sp, #8]
 801d0d0:	003a      	movs	r2, r7
 801d0d2:	682f      	ldr	r7, [r5, #0]
 801d0d4:	46bc      	mov	ip, r7
 801d0d6:	465f      	mov	r7, fp
 801d0d8:	4462      	add	r2, ip
 801d0da:	18b3      	adds	r3, r6, r2
 801d0dc:	109b      	asrs	r3, r3, #2
 801d0de:	603b      	str	r3, [r7, #0]
 801d0e0:	6867      	ldr	r7, [r4, #4]
 801d0e2:	1ab6      	subs	r6, r6, r2
 801d0e4:	46b8      	mov	r8, r7
 801d0e6:	686f      	ldr	r7, [r5, #4]
 801d0e8:	17f2      	asrs	r2, r6, #31
 801d0ea:	46bc      	mov	ip, r7
 801d0ec:	44e0      	add	r8, ip
 801d0ee:	4643      	mov	r3, r8
 801d0f0:	465f      	mov	r7, fp
 801d0f2:	18c1      	adds	r1, r0, r3
 801d0f4:	1089      	asrs	r1, r1, #2
 801d0f6:	6079      	str	r1, [r7, #4]
 801d0f8:	9900      	ldr	r1, [sp, #0]
 801d0fa:	4690      	mov	r8, r2
 801d0fc:	468c      	mov	ip, r1
 801d0fe:	6867      	ldr	r7, [r4, #4]
 801d100:	6869      	ldr	r1, [r5, #4]
 801d102:	44e3      	add	fp, ip
 801d104:	1a7f      	subs	r7, r7, r1
 801d106:	9703      	str	r7, [sp, #12]
 801d108:	6829      	ldr	r1, [r5, #0]
 801d10a:	6827      	ldr	r7, [r4, #0]
 801d10c:	1a7f      	subs	r7, r7, r1
 801d10e:	9704      	str	r7, [sp, #16]
 801d110:	1ac7      	subs	r7, r0, r3
 801d112:	17fa      	asrs	r2, r7, #31
 801d114:	4692      	mov	sl, r2
 801d116:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d118:	9a07      	ldr	r2, [sp, #28]
 801d11a:	0030      	movs	r0, r6
 801d11c:	4641      	mov	r1, r8
 801d11e:	f7e3 fa4f 	bl	80005c0 <__aeabi_lmul>
 801d122:	9a08      	ldr	r2, [sp, #32]
 801d124:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d126:	9112      	str	r1, [sp, #72]	@ 0x48
 801d128:	0038      	movs	r0, r7
 801d12a:	4651      	mov	r1, sl
 801d12c:	f7e3 fa48 	bl	80005c0 <__aeabi_lmul>
 801d130:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d132:	9a07      	ldr	r2, [sp, #28]
 801d134:	4684      	mov	ip, r0
 801d136:	4461      	add	r1, ip
 801d138:	1049      	asrs	r1, r1, #1
 801d13a:	6021      	str	r1, [r4, #0]
 801d13c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d13e:	0038      	movs	r0, r7
 801d140:	4651      	mov	r1, sl
 801d142:	f7e3 fa3d 	bl	80005c0 <__aeabi_lmul>
 801d146:	9a08      	ldr	r2, [sp, #32]
 801d148:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d14a:	000f      	movs	r7, r1
 801d14c:	0030      	movs	r0, r6
 801d14e:	4641      	mov	r1, r8
 801d150:	f7e3 fa36 	bl	80005c0 <__aeabi_lmul>
 801d154:	9b00      	ldr	r3, [sp, #0]
 801d156:	9a01      	ldr	r2, [sp, #4]
 801d158:	469c      	mov	ip, r3
 801d15a:	9803      	ldr	r0, [sp, #12]
 801d15c:	1a7f      	subs	r7, r7, r1
 801d15e:	107f      	asrs	r7, r7, #1
 801d160:	6067      	str	r7, [r4, #4]
 801d162:	0016      	movs	r6, r2
 801d164:	4464      	add	r4, ip
 801d166:	4684      	mov	ip, r0
 801d168:	4466      	add	r6, ip
 801d16a:	17f2      	asrs	r2, r6, #31
 801d16c:	4690      	mov	r8, r2
 801d16e:	9902      	ldr	r1, [sp, #8]
 801d170:	9f04      	ldr	r7, [sp, #16]
 801d172:	0030      	movs	r0, r6
 801d174:	1bcf      	subs	r7, r1, r7
 801d176:	17fa      	asrs	r2, r7, #31
 801d178:	4692      	mov	sl, r2
 801d17a:	4641      	mov	r1, r8
 801d17c:	9a05      	ldr	r2, [sp, #20]
 801d17e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d180:	f7e3 fa1e 	bl	80005c0 <__aeabi_lmul>
 801d184:	9a06      	ldr	r2, [sp, #24]
 801d186:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d188:	9112      	str	r1, [sp, #72]	@ 0x48
 801d18a:	0038      	movs	r0, r7
 801d18c:	4651      	mov	r1, sl
 801d18e:	f7e3 fa17 	bl	80005c0 <__aeabi_lmul>
 801d192:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d194:	9a05      	ldr	r2, [sp, #20]
 801d196:	4684      	mov	ip, r0
 801d198:	4648      	mov	r0, r9
 801d19a:	4461      	add	r1, ip
 801d19c:	1049      	asrs	r1, r1, #1
 801d19e:	6001      	str	r1, [r0, #0]
 801d1a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d1a2:	0038      	movs	r0, r7
 801d1a4:	4651      	mov	r1, sl
 801d1a6:	f7e3 fa0b 	bl	80005c0 <__aeabi_lmul>
 801d1aa:	9a06      	ldr	r2, [sp, #24]
 801d1ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d1ae:	000f      	movs	r7, r1
 801d1b0:	0030      	movs	r0, r6
 801d1b2:	4641      	mov	r1, r8
 801d1b4:	f7e3 fa04 	bl	80005c0 <__aeabi_lmul>
 801d1b8:	464e      	mov	r6, r9
 801d1ba:	9a00      	ldr	r2, [sp, #0]
 801d1bc:	9b01      	ldr	r3, [sp, #4]
 801d1be:	4694      	mov	ip, r2
 801d1c0:	9803      	ldr	r0, [sp, #12]
 801d1c2:	1a7f      	subs	r7, r7, r1
 801d1c4:	107f      	asrs	r7, r7, #1
 801d1c6:	6077      	str	r7, [r6, #4]
 801d1c8:	1a1e      	subs	r6, r3, r0
 801d1ca:	9b04      	ldr	r3, [sp, #16]
 801d1cc:	44e1      	add	r9, ip
 801d1ce:	469c      	mov	ip, r3
 801d1d0:	17f0      	asrs	r0, r6, #31
 801d1d2:	4680      	mov	r8, r0
 801d1d4:	9902      	ldr	r1, [sp, #8]
 801d1d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d1d8:	4461      	add	r1, ip
 801d1da:	17cb      	asrs	r3, r1, #31
 801d1dc:	000f      	movs	r7, r1
 801d1de:	469a      	mov	sl, r3
 801d1e0:	0030      	movs	r0, r6
 801d1e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d1e4:	4641      	mov	r1, r8
 801d1e6:	f7e3 f9eb 	bl	80005c0 <__aeabi_lmul>
 801d1ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d1ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d1ee:	9101      	str	r1, [sp, #4]
 801d1f0:	0038      	movs	r0, r7
 801d1f2:	4651      	mov	r1, sl
 801d1f4:	f7e3 f9e4 	bl	80005c0 <__aeabi_lmul>
 801d1f8:	9801      	ldr	r0, [sp, #4]
 801d1fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d1fc:	4684      	mov	ip, r0
 801d1fe:	4461      	add	r1, ip
 801d200:	1049      	asrs	r1, r1, #1
 801d202:	6029      	str	r1, [r5, #0]
 801d204:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d206:	0038      	movs	r0, r7
 801d208:	4651      	mov	r1, sl
 801d20a:	f7e3 f9d9 	bl	80005c0 <__aeabi_lmul>
 801d20e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d210:	000f      	movs	r7, r1
 801d212:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d214:	0030      	movs	r0, r6
 801d216:	4641      	mov	r1, r8
 801d218:	f7e3 f9d2 	bl	80005c0 <__aeabi_lmul>
 801d21c:	1a7f      	subs	r7, r7, r1
 801d21e:	107f      	asrs	r7, r7, #1
 801d220:	606f      	str	r7, [r5, #4]
 801d222:	9a00      	ldr	r2, [sp, #0]
 801d224:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d226:	4694      	mov	ip, r2
 801d228:	4465      	add	r5, ip
 801d22a:	468c      	mov	ip, r1
 801d22c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d22e:	0013      	movs	r3, r2
 801d230:	4462      	add	r2, ip
 801d232:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d234:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d236:	429a      	cmp	r2, r3
 801d238:	d900      	bls.n	801d23c <arm_radix4_butterfly_q31+0x478>
 801d23a:	e73a      	b.n	801d0b2 <arm_radix4_butterfly_q31+0x2ee>
 801d23c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d23e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d240:	468c      	mov	ip, r1
 801d242:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801d244:	4462      	add	r2, ip
 801d246:	468c      	mov	ip, r1
 801d248:	9216      	str	r2, [sp, #88]	@ 0x58
 801d24a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801d24c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d24e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d250:	4462      	add	r2, ip
 801d252:	468c      	mov	ip, r1
 801d254:	9219      	str	r2, [sp, #100]	@ 0x64
 801d256:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d258:	3301      	adds	r3, #1
 801d25a:	4462      	add	r2, ip
 801d25c:	9218      	str	r2, [sp, #96]	@ 0x60
 801d25e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801d260:	9315      	str	r3, [sp, #84]	@ 0x54
 801d262:	3208      	adds	r2, #8
 801d264:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d266:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d268:	4293      	cmp	r3, r2
 801d26a:	d800      	bhi.n	801d26e <arm_radix4_butterfly_q31+0x4aa>
 801d26c:	e6e8      	b.n	801d040 <arm_radix4_butterfly_q31+0x27c>
 801d26e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d270:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d272:	009b      	lsls	r3, r3, #2
 801d274:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d276:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d278:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d27a:	089b      	lsrs	r3, r3, #2
 801d27c:	9320      	str	r3, [sp, #128]	@ 0x80
 801d27e:	2b04      	cmp	r3, #4
 801d280:	d900      	bls.n	801d284 <arm_radix4_butterfly_q31+0x4c0>
 801d282:	e6c1      	b.n	801d008 <arm_radix4_butterfly_q31+0x244>
 801d284:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d286:	469a      	mov	sl, r3
 801d288:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d28a:	691c      	ldr	r4, [r3, #16]
 801d28c:	685a      	ldr	r2, [r3, #4]
 801d28e:	46a1      	mov	r9, r4
 801d290:	4690      	mov	r8, r2
 801d292:	6819      	ldr	r1, [r3, #0]
 801d294:	689a      	ldr	r2, [r3, #8]
 801d296:	699f      	ldr	r7, [r3, #24]
 801d298:	188d      	adds	r5, r1, r2
 801d29a:	444d      	add	r5, r9
 801d29c:	19ed      	adds	r5, r5, r7
 801d29e:	69de      	ldr	r6, [r3, #28]
 801d2a0:	601d      	str	r5, [r3, #0]
 801d2a2:	4645      	mov	r5, r8
 801d2a4:	46b4      	mov	ip, r6
 801d2a6:	68d8      	ldr	r0, [r3, #12]
 801d2a8:	695c      	ldr	r4, [r3, #20]
 801d2aa:	182d      	adds	r5, r5, r0
 801d2ac:	192d      	adds	r5, r5, r4
 801d2ae:	4465      	add	r5, ip
 801d2b0:	605d      	str	r5, [r3, #4]
 801d2b2:	1a8d      	subs	r5, r1, r2
 801d2b4:	444d      	add	r5, r9
 801d2b6:	1bed      	subs	r5, r5, r7
 801d2b8:	609d      	str	r5, [r3, #8]
 801d2ba:	4645      	mov	r5, r8
 801d2bc:	1a2d      	subs	r5, r5, r0
 801d2be:	192d      	adds	r5, r5, r4
 801d2c0:	1bad      	subs	r5, r5, r6
 801d2c2:	464e      	mov	r6, r9
 801d2c4:	60dd      	str	r5, [r3, #12]
 801d2c6:	180d      	adds	r5, r1, r0
 801d2c8:	1bad      	subs	r5, r5, r6
 801d2ca:	4666      	mov	r6, ip
 801d2cc:	1bad      	subs	r5, r5, r6
 801d2ce:	611d      	str	r5, [r3, #16]
 801d2d0:	4645      	mov	r5, r8
 801d2d2:	1aad      	subs	r5, r5, r2
 801d2d4:	4442      	add	r2, r8
 801d2d6:	1b12      	subs	r2, r2, r4
 801d2d8:	1bd2      	subs	r2, r2, r7
 801d2da:	1a08      	subs	r0, r1, r0
 801d2dc:	61da      	str	r2, [r3, #28]
 801d2de:	4649      	mov	r1, r9
 801d2e0:	2201      	movs	r2, #1
 801d2e2:	1a41      	subs	r1, r0, r1
 801d2e4:	4252      	negs	r2, r2
 801d2e6:	4461      	add	r1, ip
 801d2e8:	4694      	mov	ip, r2
 801d2ea:	44e2      	add	sl, ip
 801d2ec:	4652      	mov	r2, sl
 801d2ee:	1b2d      	subs	r5, r5, r4
 801d2f0:	19ed      	adds	r5, r5, r7
 801d2f2:	615d      	str	r5, [r3, #20]
 801d2f4:	6199      	str	r1, [r3, #24]
 801d2f6:	3320      	adds	r3, #32
 801d2f8:	2a00      	cmp	r2, #0
 801d2fa:	d1c6      	bne.n	801d28a <arm_radix4_butterfly_q31+0x4c6>
 801d2fc:	b027      	add	sp, #156	@ 0x9c
 801d2fe:	bc3c      	pop	{r2, r3, r4, r5}
 801d300:	4690      	mov	r8, r2
 801d302:	4699      	mov	r9, r3
 801d304:	46a2      	mov	sl, r4
 801d306:	46ab      	mov	fp, r5
 801d308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d30a:	469a      	mov	sl, r3
 801d30c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d30e:	e7bc      	b.n	801d28a <arm_radix4_butterfly_q31+0x4c6>

0801d310 <arm_radix4_butterfly_inverse_q31>:
 801d310:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d312:	464d      	mov	r5, r9
 801d314:	4644      	mov	r4, r8
 801d316:	465f      	mov	r7, fp
 801d318:	4656      	mov	r6, sl
 801d31a:	b4f0      	push	{r4, r5, r6, r7}
 801d31c:	b0a7      	sub	sp, #156	@ 0x9c
 801d31e:	469c      	mov	ip, r3
 801d320:	9114      	str	r1, [sp, #80]	@ 0x50
 801d322:	0889      	lsrs	r1, r1, #2
 801d324:	9310      	str	r3, [sp, #64]	@ 0x40
 801d326:	00cb      	lsls	r3, r1, #3
 801d328:	0015      	movs	r5, r2
 801d32a:	9223      	str	r2, [sp, #140]	@ 0x8c
 801d32c:	18c2      	adds	r2, r0, r3
 801d32e:	000c      	movs	r4, r1
 801d330:	9124      	str	r1, [sp, #144]	@ 0x90
 801d332:	18d1      	adds	r1, r2, r3
 801d334:	468b      	mov	fp, r1
 801d336:	469a      	mov	sl, r3
 801d338:	4663      	mov	r3, ip
 801d33a:	44da      	add	sl, fp
 801d33c:	46d0      	mov	r8, sl
 801d33e:	4681      	mov	r9, r0
 801d340:	4692      	mov	sl, r2
 801d342:	0119      	lsls	r1, r3, #4
 801d344:	910d      	str	r1, [sp, #52]	@ 0x34
 801d346:	00d9      	lsls	r1, r3, #3
 801d348:	005b      	lsls	r3, r3, #1
 801d34a:	4463      	add	r3, ip
 801d34c:	910e      	str	r1, [sp, #56]	@ 0x38
 801d34e:	00d9      	lsls	r1, r3, #3
 801d350:	9022      	str	r0, [sp, #136]	@ 0x88
 801d352:	9025      	str	r0, [sp, #148]	@ 0x94
 801d354:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d356:	9502      	str	r5, [sp, #8]
 801d358:	9500      	str	r5, [sp, #0]
 801d35a:	9501      	str	r5, [sp, #4]
 801d35c:	9409      	str	r4, [sp, #36]	@ 0x24
 801d35e:	464b      	mov	r3, r9
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	4652      	mov	r2, sl
 801d364:	111c      	asrs	r4, r3, #4
 801d366:	465b      	mov	r3, fp
 801d368:	4648      	mov	r0, r9
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	6812      	ldr	r2, [r2, #0]
 801d36e:	6840      	ldr	r0, [r0, #4]
 801d370:	111b      	asrs	r3, r3, #4
 801d372:	18e7      	adds	r7, r4, r3
 801d374:	1ae3      	subs	r3, r4, r3
 801d376:	1114      	asrs	r4, r2, #4
 801d378:	4642      	mov	r2, r8
 801d37a:	1105      	asrs	r5, r0, #4
 801d37c:	4658      	mov	r0, fp
 801d37e:	6812      	ldr	r2, [r2, #0]
 801d380:	6840      	ldr	r0, [r0, #4]
 801d382:	9303      	str	r3, [sp, #12]
 801d384:	1113      	asrs	r3, r2, #4
 801d386:	18e2      	adds	r2, r4, r3
 801d388:	1103      	asrs	r3, r0, #4
 801d38a:	18ee      	adds	r6, r5, r3
 801d38c:	1ae8      	subs	r0, r5, r3
 801d38e:	464d      	mov	r5, r9
 801d390:	18bb      	adds	r3, r7, r2
 801d392:	602b      	str	r3, [r5, #0]
 801d394:	4641      	mov	r1, r8
 801d396:	4655      	mov	r5, sl
 801d398:	6849      	ldr	r1, [r1, #4]
 801d39a:	686d      	ldr	r5, [r5, #4]
 801d39c:	110b      	asrs	r3, r1, #4
 801d39e:	112d      	asrs	r5, r5, #4
 801d3a0:	18eb      	adds	r3, r5, r3
 801d3a2:	464d      	mov	r5, r9
 801d3a4:	18f1      	adds	r1, r6, r3
 801d3a6:	6069      	str	r1, [r5, #4]
 801d3a8:	4655      	mov	r5, sl
 801d3aa:	686d      	ldr	r5, [r5, #4]
 801d3ac:	9004      	str	r0, [sp, #16]
 801d3ae:	112c      	asrs	r4, r5, #4
 801d3b0:	4645      	mov	r5, r8
 801d3b2:	686d      	ldr	r5, [r5, #4]
 801d3b4:	1129      	asrs	r1, r5, #4
 801d3b6:	1a65      	subs	r5, r4, r1
 801d3b8:	4651      	mov	r1, sl
 801d3ba:	6809      	ldr	r1, [r1, #0]
 801d3bc:	1abc      	subs	r4, r7, r2
 801d3be:	1108      	asrs	r0, r1, #4
 801d3c0:	4641      	mov	r1, r8
 801d3c2:	17e2      	asrs	r2, r4, #31
 801d3c4:	6809      	ldr	r1, [r1, #0]
 801d3c6:	9207      	str	r2, [sp, #28]
 801d3c8:	9a01      	ldr	r2, [sp, #4]
 801d3ca:	1109      	asrs	r1, r1, #4
 801d3cc:	6817      	ldr	r7, [r2, #0]
 801d3ce:	1a41      	subs	r1, r0, r1
 801d3d0:	9106      	str	r1, [sp, #24]
 801d3d2:	0039      	movs	r1, r7
 801d3d4:	17ff      	asrs	r7, r7, #31
 801d3d6:	0038      	movs	r0, r7
 801d3d8:	9505      	str	r5, [sp, #20]
 801d3da:	1af5      	subs	r5, r6, r3
 801d3dc:	17ef      	asrs	r7, r5, #31
 801d3de:	970b      	str	r7, [sp, #44]	@ 0x2c
 801d3e0:	6857      	ldr	r7, [r2, #4]
 801d3e2:	0003      	movs	r3, r0
 801d3e4:	17fe      	asrs	r6, r7, #31
 801d3e6:	000a      	movs	r2, r1
 801d3e8:	9108      	str	r1, [sp, #32]
 801d3ea:	900a      	str	r0, [sp, #40]	@ 0x28
 801d3ec:	17e1      	asrs	r1, r4, #31
 801d3ee:	0020      	movs	r0, r4
 801d3f0:	960c      	str	r6, [sp, #48]	@ 0x30
 801d3f2:	f7e3 f8e5 	bl	80005c0 <__aeabi_lmul>
 801d3f6:	003a      	movs	r2, r7
 801d3f8:	17fb      	asrs	r3, r7, #31
 801d3fa:	000e      	movs	r6, r1
 801d3fc:	0028      	movs	r0, r5
 801d3fe:	17e9      	asrs	r1, r5, #31
 801d400:	f7e3 f8de 	bl	80005c0 <__aeabi_lmul>
 801d404:	4653      	mov	r3, sl
 801d406:	1a76      	subs	r6, r6, r1
 801d408:	0076      	lsls	r6, r6, #1
 801d40a:	601e      	str	r6, [r3, #0]
 801d40c:	002a      	movs	r2, r5
 801d40e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d410:	9808      	ldr	r0, [sp, #32]
 801d412:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d414:	f7e3 f8d4 	bl	80005c0 <__aeabi_lmul>
 801d418:	003a      	movs	r2, r7
 801d41a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d41c:	000d      	movs	r5, r1
 801d41e:	0020      	movs	r0, r4
 801d420:	9907      	ldr	r1, [sp, #28]
 801d422:	f7e3 f8cd 	bl	80005c0 <__aeabi_lmul>
 801d426:	4657      	mov	r7, sl
 801d428:	186d      	adds	r5, r5, r1
 801d42a:	006d      	lsls	r5, r5, #1
 801d42c:	607d      	str	r5, [r7, #4]
 801d42e:	9b03      	ldr	r3, [sp, #12]
 801d430:	9e06      	ldr	r6, [sp, #24]
 801d432:	9d05      	ldr	r5, [sp, #20]
 801d434:	46b4      	mov	ip, r6
 801d436:	1b5d      	subs	r5, r3, r5
 801d438:	9b00      	ldr	r3, [sp, #0]
 801d43a:	17ef      	asrs	r7, r5, #31
 801d43c:	0039      	movs	r1, r7
 801d43e:	681f      	ldr	r7, [r3, #0]
 801d440:	17fc      	asrs	r4, r7, #31
 801d442:	0020      	movs	r0, r4
 801d444:	9c04      	ldr	r4, [sp, #16]
 801d446:	4464      	add	r4, ip
 801d448:	17e6      	asrs	r6, r4, #31
 801d44a:	9407      	str	r4, [sp, #28]
 801d44c:	9608      	str	r6, [sp, #32]
 801d44e:	685e      	ldr	r6, [r3, #4]
 801d450:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d452:	17f2      	asrs	r2, r6, #31
 801d454:	0003      	movs	r3, r0
 801d456:	920c      	str	r2, [sp, #48]	@ 0x30
 801d458:	0028      	movs	r0, r5
 801d45a:	003a      	movs	r2, r7
 801d45c:	910a      	str	r1, [sp, #40]	@ 0x28
 801d45e:	f7e3 f8af 	bl	80005c0 <__aeabi_lmul>
 801d462:	0032      	movs	r2, r6
 801d464:	17f3      	asrs	r3, r6, #31
 801d466:	9807      	ldr	r0, [sp, #28]
 801d468:	000c      	movs	r4, r1
 801d46a:	9908      	ldr	r1, [sp, #32]
 801d46c:	f7e3 f8a8 	bl	80005c0 <__aeabi_lmul>
 801d470:	4658      	mov	r0, fp
 801d472:	1a64      	subs	r4, r4, r1
 801d474:	0064      	lsls	r4, r4, #1
 801d476:	9a07      	ldr	r2, [sp, #28]
 801d478:	6004      	str	r4, [r0, #0]
 801d47a:	9b08      	ldr	r3, [sp, #32]
 801d47c:	0038      	movs	r0, r7
 801d47e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d480:	f7e3 f89e 	bl	80005c0 <__aeabi_lmul>
 801d484:	0032      	movs	r2, r6
 801d486:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d488:	000c      	movs	r4, r1
 801d48a:	0028      	movs	r0, r5
 801d48c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d48e:	f7e3 f897 	bl	80005c0 <__aeabi_lmul>
 801d492:	9d05      	ldr	r5, [sp, #20]
 801d494:	465f      	mov	r7, fp
 801d496:	46ac      	mov	ip, r5
 801d498:	1864      	adds	r4, r4, r1
 801d49a:	9903      	ldr	r1, [sp, #12]
 801d49c:	0064      	lsls	r4, r4, #1
 801d49e:	4461      	add	r1, ip
 801d4a0:	607c      	str	r4, [r7, #4]
 801d4a2:	000c      	movs	r4, r1
 801d4a4:	17c9      	asrs	r1, r1, #31
 801d4a6:	9105      	str	r1, [sp, #20]
 801d4a8:	9902      	ldr	r1, [sp, #8]
 801d4aa:	9804      	ldr	r0, [sp, #16]
 801d4ac:	680d      	ldr	r5, [r1, #0]
 801d4ae:	9e06      	ldr	r6, [sp, #24]
 801d4b0:	002b      	movs	r3, r5
 801d4b2:	17ed      	asrs	r5, r5, #31
 801d4b4:	684f      	ldr	r7, [r1, #4]
 801d4b6:	9503      	str	r5, [sp, #12]
 801d4b8:	1b85      	subs	r5, r0, r6
 801d4ba:	17e8      	asrs	r0, r5, #31
 801d4bc:	001a      	movs	r2, r3
 801d4be:	9006      	str	r0, [sp, #24]
 801d4c0:	17fe      	asrs	r6, r7, #31
 801d4c2:	9304      	str	r3, [sp, #16]
 801d4c4:	0020      	movs	r0, r4
 801d4c6:	9b03      	ldr	r3, [sp, #12]
 801d4c8:	17e1      	asrs	r1, r4, #31
 801d4ca:	9607      	str	r6, [sp, #28]
 801d4cc:	f7e3 f878 	bl	80005c0 <__aeabi_lmul>
 801d4d0:	003a      	movs	r2, r7
 801d4d2:	000e      	movs	r6, r1
 801d4d4:	17fb      	asrs	r3, r7, #31
 801d4d6:	0028      	movs	r0, r5
 801d4d8:	17e9      	asrs	r1, r5, #31
 801d4da:	f7e3 f871 	bl	80005c0 <__aeabi_lmul>
 801d4de:	4640      	mov	r0, r8
 801d4e0:	1a76      	subs	r6, r6, r1
 801d4e2:	0076      	lsls	r6, r6, #1
 801d4e4:	002a      	movs	r2, r5
 801d4e6:	9b06      	ldr	r3, [sp, #24]
 801d4e8:	6006      	str	r6, [r0, #0]
 801d4ea:	9903      	ldr	r1, [sp, #12]
 801d4ec:	9804      	ldr	r0, [sp, #16]
 801d4ee:	f7e3 f867 	bl	80005c0 <__aeabi_lmul>
 801d4f2:	0020      	movs	r0, r4
 801d4f4:	2408      	movs	r4, #8
 801d4f6:	9b07      	ldr	r3, [sp, #28]
 801d4f8:	000d      	movs	r5, r1
 801d4fa:	003a      	movs	r2, r7
 801d4fc:	9905      	ldr	r1, [sp, #20]
 801d4fe:	f7e3 f85f 	bl	80005c0 <__aeabi_lmul>
 801d502:	4640      	mov	r0, r8
 801d504:	46a4      	mov	ip, r4
 801d506:	186d      	adds	r5, r5, r1
 801d508:	006d      	lsls	r5, r5, #1
 801d50a:	6045      	str	r5, [r0, #4]
 801d50c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d50e:	44e1      	add	r9, ip
 801d510:	3801      	subs	r0, #1
 801d512:	9009      	str	r0, [sp, #36]	@ 0x24
 801d514:	9a01      	ldr	r2, [sp, #4]
 801d516:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d518:	44e2      	add	sl, ip
 801d51a:	44e3      	add	fp, ip
 801d51c:	44e0      	add	r8, ip
 801d51e:	46a4      	mov	ip, r4
 801d520:	4462      	add	r2, ip
 801d522:	9201      	str	r2, [sp, #4]
 801d524:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d526:	9b00      	ldr	r3, [sp, #0]
 801d528:	4694      	mov	ip, r2
 801d52a:	4463      	add	r3, ip
 801d52c:	9300      	str	r3, [sp, #0]
 801d52e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d530:	9902      	ldr	r1, [sp, #8]
 801d532:	469c      	mov	ip, r3
 801d534:	4461      	add	r1, ip
 801d536:	9102      	str	r1, [sp, #8]
 801d538:	2800      	cmp	r0, #0
 801d53a:	d000      	beq.n	801d53e <arm_radix4_butterfly_inverse_q31+0x22e>
 801d53c:	e70f      	b.n	801d35e <arm_radix4_butterfly_inverse_q31+0x4e>
 801d53e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d540:	009b      	lsls	r3, r3, #2
 801d542:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d544:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d546:	9320      	str	r3, [sp, #128]	@ 0x80
 801d548:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d54a:	2b04      	cmp	r3, #4
 801d54c:	d800      	bhi.n	801d550 <arm_radix4_butterfly_inverse_q31+0x240>
 801d54e:	e17c      	b.n	801d84a <arm_radix4_butterfly_inverse_q31+0x53a>
 801d550:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d552:	0893      	lsrs	r3, r2, #2
 801d554:	1e59      	subs	r1, r3, #1
 801d556:	9321      	str	r3, [sp, #132]	@ 0x84
 801d558:	00db      	lsls	r3, r3, #3
 801d55a:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d55c:	00d3      	lsls	r3, r2, #3
 801d55e:	9300      	str	r3, [sp, #0]
 801d560:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d562:	911a      	str	r1, [sp, #104]	@ 0x68
 801d564:	00da      	lsls	r2, r3, #3
 801d566:	921e      	str	r2, [sp, #120]	@ 0x78
 801d568:	011a      	lsls	r2, r3, #4
 801d56a:	921d      	str	r2, [sp, #116]	@ 0x74
 801d56c:	001a      	movs	r2, r3
 801d56e:	4694      	mov	ip, r2
 801d570:	005b      	lsls	r3, r3, #1
 801d572:	4463      	add	r3, ip
 801d574:	00db      	lsls	r3, r3, #3
 801d576:	931c      	str	r3, [sp, #112]	@ 0x70
 801d578:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d57a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d57c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d57e:	9318      	str	r3, [sp, #96]	@ 0x60
 801d580:	9319      	str	r3, [sp, #100]	@ 0x64
 801d582:	9316      	str	r3, [sp, #88]	@ 0x58
 801d584:	2300      	movs	r3, #0
 801d586:	9315      	str	r3, [sp, #84]	@ 0x54
 801d588:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d58a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d58c:	681a      	ldr	r2, [r3, #0]
 801d58e:	685b      	ldr	r3, [r3, #4]
 801d590:	9205      	str	r2, [sp, #20]
 801d592:	9306      	str	r3, [sp, #24]
 801d594:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d596:	468c      	mov	ip, r1
 801d598:	681a      	ldr	r2, [r3, #0]
 801d59a:	685b      	ldr	r3, [r3, #4]
 801d59c:	9207      	str	r2, [sp, #28]
 801d59e:	9308      	str	r3, [sp, #32]
 801d5a0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d5a2:	681a      	ldr	r2, [r3, #0]
 801d5a4:	685b      	ldr	r3, [r3, #4]
 801d5a6:	9209      	str	r2, [sp, #36]	@ 0x24
 801d5a8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d5aa:	930a      	str	r3, [sp, #40]	@ 0x28
 801d5ac:	0013      	movs	r3, r2
 801d5ae:	4463      	add	r3, ip
 801d5b0:	4698      	mov	r8, r3
 801d5b2:	0013      	movs	r3, r2
 801d5b4:	4442      	add	r2, r8
 801d5b6:	4691      	mov	r9, r2
 801d5b8:	001a      	movs	r2, r3
 801d5ba:	444a      	add	r2, r9
 801d5bc:	4692      	mov	sl, r2
 801d5be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d5c0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d5c2:	4293      	cmp	r3, r2
 801d5c4:	d800      	bhi.n	801d5c8 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801d5c6:	e0d9      	b.n	801d77c <arm_radix4_butterfly_inverse_q31+0x46c>
 801d5c8:	4694      	mov	ip, r2
 801d5ca:	4644      	mov	r4, r8
 801d5cc:	4655      	mov	r5, sl
 801d5ce:	4688      	mov	r8, r1
 801d5d0:	9b07      	ldr	r3, [sp, #28]
 801d5d2:	17db      	asrs	r3, r3, #31
 801d5d4:	930c      	str	r3, [sp, #48]	@ 0x30
 801d5d6:	9b08      	ldr	r3, [sp, #32]
 801d5d8:	17db      	asrs	r3, r3, #31
 801d5da:	930d      	str	r3, [sp, #52]	@ 0x34
 801d5dc:	9b05      	ldr	r3, [sp, #20]
 801d5de:	17db      	asrs	r3, r3, #31
 801d5e0:	930e      	str	r3, [sp, #56]	@ 0x38
 801d5e2:	9b06      	ldr	r3, [sp, #24]
 801d5e4:	17db      	asrs	r3, r3, #31
 801d5e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d5ea:	17db      	asrs	r3, r3, #31
 801d5ec:	9310      	str	r3, [sp, #64]	@ 0x40
 801d5ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d5f0:	17db      	asrs	r3, r3, #31
 801d5f2:	9311      	str	r3, [sp, #68]	@ 0x44
 801d5f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d5f6:	4463      	add	r3, ip
 801d5f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d5fa:	4643      	mov	r3, r8
 801d5fc:	4641      	mov	r1, r8
 801d5fe:	681a      	ldr	r2, [r3, #0]
 801d600:	464b      	mov	r3, r9
 801d602:	684f      	ldr	r7, [r1, #4]
 801d604:	4649      	mov	r1, r9
 801d606:	681b      	ldr	r3, [r3, #0]
 801d608:	18d6      	adds	r6, r2, r3
 801d60a:	1ad3      	subs	r3, r2, r3
 801d60c:	9301      	str	r3, [sp, #4]
 801d60e:	684b      	ldr	r3, [r1, #4]
 801d610:	1af9      	subs	r1, r7, r3
 801d612:	9102      	str	r1, [sp, #8]
 801d614:	6829      	ldr	r1, [r5, #0]
 801d616:	18f8      	adds	r0, r7, r3
 801d618:	468c      	mov	ip, r1
 801d61a:	6827      	ldr	r7, [r4, #0]
 801d61c:	4467      	add	r7, ip
 801d61e:	003a      	movs	r2, r7
 801d620:	19f3      	adds	r3, r6, r7
 801d622:	4647      	mov	r7, r8
 801d624:	109b      	asrs	r3, r3, #2
 801d626:	603b      	str	r3, [r7, #0]
 801d628:	6869      	ldr	r1, [r5, #4]
 801d62a:	6867      	ldr	r7, [r4, #4]
 801d62c:	468c      	mov	ip, r1
 801d62e:	4467      	add	r7, ip
 801d630:	003b      	movs	r3, r7
 801d632:	19c1      	adds	r1, r0, r7
 801d634:	4647      	mov	r7, r8
 801d636:	1ab6      	subs	r6, r6, r2
 801d638:	1089      	asrs	r1, r1, #2
 801d63a:	6079      	str	r1, [r7, #4]
 801d63c:	17f2      	asrs	r2, r6, #31
 801d63e:	9900      	ldr	r1, [sp, #0]
 801d640:	4692      	mov	sl, r2
 801d642:	468c      	mov	ip, r1
 801d644:	6867      	ldr	r7, [r4, #4]
 801d646:	6869      	ldr	r1, [r5, #4]
 801d648:	44e0      	add	r8, ip
 801d64a:	1a7f      	subs	r7, r7, r1
 801d64c:	9703      	str	r7, [sp, #12]
 801d64e:	6821      	ldr	r1, [r4, #0]
 801d650:	682f      	ldr	r7, [r5, #0]
 801d652:	1bc9      	subs	r1, r1, r7
 801d654:	1ac7      	subs	r7, r0, r3
 801d656:	17fa      	asrs	r2, r7, #31
 801d658:	4693      	mov	fp, r2
 801d65a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d65c:	9a07      	ldr	r2, [sp, #28]
 801d65e:	9104      	str	r1, [sp, #16]
 801d660:	0030      	movs	r0, r6
 801d662:	4651      	mov	r1, sl
 801d664:	f7e2 ffac 	bl	80005c0 <__aeabi_lmul>
 801d668:	9a08      	ldr	r2, [sp, #32]
 801d66a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d66c:	9112      	str	r1, [sp, #72]	@ 0x48
 801d66e:	0038      	movs	r0, r7
 801d670:	4659      	mov	r1, fp
 801d672:	f7e2 ffa5 	bl	80005c0 <__aeabi_lmul>
 801d676:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d678:	9a07      	ldr	r2, [sp, #28]
 801d67a:	1a41      	subs	r1, r0, r1
 801d67c:	1049      	asrs	r1, r1, #1
 801d67e:	6021      	str	r1, [r4, #0]
 801d680:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d682:	0038      	movs	r0, r7
 801d684:	4659      	mov	r1, fp
 801d686:	f7e2 ff9b 	bl	80005c0 <__aeabi_lmul>
 801d68a:	9a08      	ldr	r2, [sp, #32]
 801d68c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d68e:	000f      	movs	r7, r1
 801d690:	0030      	movs	r0, r6
 801d692:	4651      	mov	r1, sl
 801d694:	f7e2 ff94 	bl	80005c0 <__aeabi_lmul>
 801d698:	9b00      	ldr	r3, [sp, #0]
 801d69a:	187f      	adds	r7, r7, r1
 801d69c:	469c      	mov	ip, r3
 801d69e:	107f      	asrs	r7, r7, #1
 801d6a0:	6067      	str	r7, [r4, #4]
 801d6a2:	9a01      	ldr	r2, [sp, #4]
 801d6a4:	9f03      	ldr	r7, [sp, #12]
 801d6a6:	9802      	ldr	r0, [sp, #8]
 801d6a8:	1bd7      	subs	r7, r2, r7
 801d6aa:	17fe      	asrs	r6, r7, #31
 801d6ac:	0031      	movs	r1, r6
 801d6ae:	9e04      	ldr	r6, [sp, #16]
 801d6b0:	4682      	mov	sl, r0
 801d6b2:	4464      	add	r4, ip
 801d6b4:	46b4      	mov	ip, r6
 801d6b6:	44e2      	add	sl, ip
 801d6b8:	4652      	mov	r2, sl
 801d6ba:	17d2      	asrs	r2, r2, #31
 801d6bc:	4693      	mov	fp, r2
 801d6be:	0038      	movs	r0, r7
 801d6c0:	9a05      	ldr	r2, [sp, #20]
 801d6c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d6c4:	9112      	str	r1, [sp, #72]	@ 0x48
 801d6c6:	f7e2 ff7b 	bl	80005c0 <__aeabi_lmul>
 801d6ca:	9a06      	ldr	r2, [sp, #24]
 801d6cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d6ce:	000e      	movs	r6, r1
 801d6d0:	4650      	mov	r0, sl
 801d6d2:	4659      	mov	r1, fp
 801d6d4:	f7e2 ff74 	bl	80005c0 <__aeabi_lmul>
 801d6d8:	4648      	mov	r0, r9
 801d6da:	1a76      	subs	r6, r6, r1
 801d6dc:	1076      	asrs	r6, r6, #1
 801d6de:	6006      	str	r6, [r0, #0]
 801d6e0:	9a05      	ldr	r2, [sp, #20]
 801d6e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d6e4:	4650      	mov	r0, sl
 801d6e6:	4659      	mov	r1, fp
 801d6e8:	f7e2 ff6a 	bl	80005c0 <__aeabi_lmul>
 801d6ec:	9a06      	ldr	r2, [sp, #24]
 801d6ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d6f0:	000e      	movs	r6, r1
 801d6f2:	0038      	movs	r0, r7
 801d6f4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d6f6:	f7e2 ff63 	bl	80005c0 <__aeabi_lmul>
 801d6fa:	9a00      	ldr	r2, [sp, #0]
 801d6fc:	9f03      	ldr	r7, [sp, #12]
 801d6fe:	4694      	mov	ip, r2
 801d700:	1876      	adds	r6, r6, r1
 801d702:	4649      	mov	r1, r9
 801d704:	44e1      	add	r9, ip
 801d706:	46bc      	mov	ip, r7
 801d708:	9b01      	ldr	r3, [sp, #4]
 801d70a:	1076      	asrs	r6, r6, #1
 801d70c:	4463      	add	r3, ip
 801d70e:	17df      	asrs	r7, r3, #31
 801d710:	604e      	str	r6, [r1, #4]
 801d712:	46ba      	mov	sl, r7
 801d714:	001e      	movs	r6, r3
 801d716:	9802      	ldr	r0, [sp, #8]
 801d718:	9b04      	ldr	r3, [sp, #16]
 801d71a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d71c:	1ac7      	subs	r7, r0, r3
 801d71e:	17fb      	asrs	r3, r7, #31
 801d720:	469b      	mov	fp, r3
 801d722:	0030      	movs	r0, r6
 801d724:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d726:	4651      	mov	r1, sl
 801d728:	f7e2 ff4a 	bl	80005c0 <__aeabi_lmul>
 801d72c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d72e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d730:	9101      	str	r1, [sp, #4]
 801d732:	0038      	movs	r0, r7
 801d734:	4659      	mov	r1, fp
 801d736:	f7e2 ff43 	bl	80005c0 <__aeabi_lmul>
 801d73a:	9801      	ldr	r0, [sp, #4]
 801d73c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d73e:	1a41      	subs	r1, r0, r1
 801d740:	1049      	asrs	r1, r1, #1
 801d742:	6029      	str	r1, [r5, #0]
 801d744:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d746:	0038      	movs	r0, r7
 801d748:	4659      	mov	r1, fp
 801d74a:	f7e2 ff39 	bl	80005c0 <__aeabi_lmul>
 801d74e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d750:	000f      	movs	r7, r1
 801d752:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d754:	0030      	movs	r0, r6
 801d756:	4651      	mov	r1, sl
 801d758:	f7e2 ff32 	bl	80005c0 <__aeabi_lmul>
 801d75c:	187f      	adds	r7, r7, r1
 801d75e:	107f      	asrs	r7, r7, #1
 801d760:	606f      	str	r7, [r5, #4]
 801d762:	9a00      	ldr	r2, [sp, #0]
 801d764:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d766:	4694      	mov	ip, r2
 801d768:	4465      	add	r5, ip
 801d76a:	468c      	mov	ip, r1
 801d76c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d76e:	0013      	movs	r3, r2
 801d770:	4462      	add	r2, ip
 801d772:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d774:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d776:	429a      	cmp	r2, r3
 801d778:	d900      	bls.n	801d77c <arm_radix4_butterfly_inverse_q31+0x46c>
 801d77a:	e73e      	b.n	801d5fa <arm_radix4_butterfly_inverse_q31+0x2ea>
 801d77c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d77e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d780:	468c      	mov	ip, r1
 801d782:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801d784:	4462      	add	r2, ip
 801d786:	468c      	mov	ip, r1
 801d788:	9216      	str	r2, [sp, #88]	@ 0x58
 801d78a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801d78c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d78e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d790:	4462      	add	r2, ip
 801d792:	468c      	mov	ip, r1
 801d794:	9219      	str	r2, [sp, #100]	@ 0x64
 801d796:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d798:	3301      	adds	r3, #1
 801d79a:	4462      	add	r2, ip
 801d79c:	9218      	str	r2, [sp, #96]	@ 0x60
 801d79e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801d7a0:	9315      	str	r3, [sp, #84]	@ 0x54
 801d7a2:	3208      	adds	r2, #8
 801d7a4:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d7a6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d7a8:	4293      	cmp	r3, r2
 801d7aa:	d800      	bhi.n	801d7ae <arm_radix4_butterfly_inverse_q31+0x49e>
 801d7ac:	e6ec      	b.n	801d588 <arm_radix4_butterfly_inverse_q31+0x278>
 801d7ae:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d7b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d7b2:	009b      	lsls	r3, r3, #2
 801d7b4:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d7b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d7b8:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d7ba:	089b      	lsrs	r3, r3, #2
 801d7bc:	9320      	str	r3, [sp, #128]	@ 0x80
 801d7be:	2b04      	cmp	r3, #4
 801d7c0:	d900      	bls.n	801d7c4 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801d7c2:	e6c5      	b.n	801d550 <arm_radix4_butterfly_inverse_q31+0x240>
 801d7c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d7c6:	469a      	mov	sl, r3
 801d7c8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d7ca:	681a      	ldr	r2, [r3, #0]
 801d7cc:	6918      	ldr	r0, [r3, #16]
 801d7ce:	4691      	mov	r9, r2
 801d7d0:	464c      	mov	r4, r9
 801d7d2:	4680      	mov	r8, r0
 801d7d4:	69de      	ldr	r6, [r3, #28]
 801d7d6:	689d      	ldr	r5, [r3, #8]
 801d7d8:	46b4      	mov	ip, r6
 801d7da:	6998      	ldr	r0, [r3, #24]
 801d7dc:	1964      	adds	r4, r4, r5
 801d7de:	6859      	ldr	r1, [r3, #4]
 801d7e0:	68da      	ldr	r2, [r3, #12]
 801d7e2:	4444      	add	r4, r8
 801d7e4:	695f      	ldr	r7, [r3, #20]
 801d7e6:	1824      	adds	r4, r4, r0
 801d7e8:	601c      	str	r4, [r3, #0]
 801d7ea:	188c      	adds	r4, r1, r2
 801d7ec:	19e4      	adds	r4, r4, r7
 801d7ee:	4464      	add	r4, ip
 801d7f0:	605c      	str	r4, [r3, #4]
 801d7f2:	464c      	mov	r4, r9
 801d7f4:	1b64      	subs	r4, r4, r5
 801d7f6:	4444      	add	r4, r8
 801d7f8:	1a24      	subs	r4, r4, r0
 801d7fa:	609c      	str	r4, [r3, #8]
 801d7fc:	1a8c      	subs	r4, r1, r2
 801d7fe:	19e4      	adds	r4, r4, r7
 801d800:	1ba4      	subs	r4, r4, r6
 801d802:	60dc      	str	r4, [r3, #12]
 801d804:	464c      	mov	r4, r9
 801d806:	4646      	mov	r6, r8
 801d808:	1aa4      	subs	r4, r4, r2
 801d80a:	1ba4      	subs	r4, r4, r6
 801d80c:	4464      	add	r4, ip
 801d80e:	611c      	str	r4, [r3, #16]
 801d810:	194c      	adds	r4, r1, r5
 801d812:	1be4      	subs	r4, r4, r7
 801d814:	1a24      	subs	r4, r4, r0
 801d816:	615c      	str	r4, [r3, #20]
 801d818:	4644      	mov	r4, r8
 801d81a:	4666      	mov	r6, ip
 801d81c:	444a      	add	r2, r9
 801d81e:	1b12      	subs	r2, r2, r4
 801d820:	1b92      	subs	r2, r2, r6
 801d822:	619a      	str	r2, [r3, #24]
 801d824:	1b4a      	subs	r2, r1, r5
 801d826:	1bd1      	subs	r1, r2, r7
 801d828:	2201      	movs	r2, #1
 801d82a:	4252      	negs	r2, r2
 801d82c:	4694      	mov	ip, r2
 801d82e:	44e2      	add	sl, ip
 801d830:	4652      	mov	r2, sl
 801d832:	1809      	adds	r1, r1, r0
 801d834:	61d9      	str	r1, [r3, #28]
 801d836:	3320      	adds	r3, #32
 801d838:	2a00      	cmp	r2, #0
 801d83a:	d1c6      	bne.n	801d7ca <arm_radix4_butterfly_inverse_q31+0x4ba>
 801d83c:	b027      	add	sp, #156	@ 0x9c
 801d83e:	bc3c      	pop	{r2, r3, r4, r5}
 801d840:	4690      	mov	r8, r2
 801d842:	4699      	mov	r9, r3
 801d844:	46a2      	mov	sl, r4
 801d846:	46ab      	mov	fp, r5
 801d848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d84a:	469a      	mov	sl, r3
 801d84c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d84e:	e7bc      	b.n	801d7ca <arm_radix4_butterfly_inverse_q31+0x4ba>

0801d850 <arm_cmplx_mag_squared_q31>:
 801d850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d852:	464f      	mov	r7, r9
 801d854:	4646      	mov	r6, r8
 801d856:	0004      	movs	r4, r0
 801d858:	b4c0      	push	{r6, r7}
 801d85a:	0016      	movs	r6, r2
 801d85c:	000f      	movs	r7, r1
 801d85e:	2a00      	cmp	r2, #0
 801d860:	d018      	beq.n	801d894 <arm_cmplx_mag_squared_q31+0x44>
 801d862:	6823      	ldr	r3, [r4, #0]
 801d864:	6822      	ldr	r2, [r4, #0]
 801d866:	17d9      	asrs	r1, r3, #31
 801d868:	6863      	ldr	r3, [r4, #4]
 801d86a:	0010      	movs	r0, r2
 801d86c:	4698      	mov	r8, r3
 801d86e:	17db      	asrs	r3, r3, #31
 801d870:	4699      	mov	r9, r3
 801d872:	000b      	movs	r3, r1
 801d874:	f7e2 fea4 	bl	80005c0 <__aeabi_lmul>
 801d878:	4642      	mov	r2, r8
 801d87a:	104d      	asrs	r5, r1, #1
 801d87c:	464b      	mov	r3, r9
 801d87e:	4640      	mov	r0, r8
 801d880:	4649      	mov	r1, r9
 801d882:	f7e2 fe9d 	bl	80005c0 <__aeabi_lmul>
 801d886:	1049      	asrs	r1, r1, #1
 801d888:	1869      	adds	r1, r5, r1
 801d88a:	3e01      	subs	r6, #1
 801d88c:	c702      	stmia	r7!, {r1}
 801d88e:	3408      	adds	r4, #8
 801d890:	2e00      	cmp	r6, #0
 801d892:	d1e6      	bne.n	801d862 <arm_cmplx_mag_squared_q31+0x12>
 801d894:	bc0c      	pop	{r2, r3}
 801d896:	4690      	mov	r8, r2
 801d898:	4699      	mov	r9, r3
 801d89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d89c <arm_mult_q31>:
 801d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d89e:	4646      	mov	r6, r8
 801d8a0:	464f      	mov	r7, r9
 801d8a2:	4690      	mov	r8, r2
 801d8a4:	b4c0      	push	{r6, r7}
 801d8a6:	001d      	movs	r5, r3
 801d8a8:	0006      	movs	r6, r0
 801d8aa:	000f      	movs	r7, r1
 801d8ac:	2400      	movs	r4, #0
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	d020      	beq.n	801d8f4 <arm_mult_q31+0x58>
 801d8b2:	4b12      	ldr	r3, [pc, #72]	@ (801d8fc <arm_mult_q31+0x60>)
 801d8b4:	4699      	mov	r9, r3
 801d8b6:	e007      	b.n	801d8c8 <arm_mult_q31+0x2c>
 801d8b8:	464b      	mov	r3, r9
 801d8ba:	4059      	eors	r1, r3
 801d8bc:	4643      	mov	r3, r8
 801d8be:	3d01      	subs	r5, #1
 801d8c0:	5119      	str	r1, [r3, r4]
 801d8c2:	3404      	adds	r4, #4
 801d8c4:	2d00      	cmp	r5, #0
 801d8c6:	d015      	beq.n	801d8f4 <arm_mult_q31+0x58>
 801d8c8:	5933      	ldr	r3, [r6, r4]
 801d8ca:	593a      	ldr	r2, [r7, r4]
 801d8cc:	17d9      	asrs	r1, r3, #31
 801d8ce:	593b      	ldr	r3, [r7, r4]
 801d8d0:	5930      	ldr	r0, [r6, r4]
 801d8d2:	17db      	asrs	r3, r3, #31
 801d8d4:	f7e2 fe74 	bl	80005c0 <__aeabi_lmul>
 801d8d8:	004b      	lsls	r3, r1, #1
 801d8da:	0fc0      	lsrs	r0, r0, #31
 801d8dc:	4318      	orrs	r0, r3
 801d8de:	17c9      	asrs	r1, r1, #31
 801d8e0:	17c3      	asrs	r3, r0, #31
 801d8e2:	428b      	cmp	r3, r1
 801d8e4:	d1e8      	bne.n	801d8b8 <arm_mult_q31+0x1c>
 801d8e6:	0001      	movs	r1, r0
 801d8e8:	4643      	mov	r3, r8
 801d8ea:	3d01      	subs	r5, #1
 801d8ec:	5119      	str	r1, [r3, r4]
 801d8ee:	3404      	adds	r4, #4
 801d8f0:	2d00      	cmp	r5, #0
 801d8f2:	d1e9      	bne.n	801d8c8 <arm_mult_q31+0x2c>
 801d8f4:	bc0c      	pop	{r2, r3}
 801d8f6:	4690      	mov	r8, r2
 801d8f8:	4699      	mov	r9, r3
 801d8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8fc:	7fffffff 	.word	0x7fffffff

0801d900 <arm_add_q31>:
 801d900:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d902:	465f      	mov	r7, fp
 801d904:	4656      	mov	r6, sl
 801d906:	464d      	mov	r5, r9
 801d908:	4644      	mov	r4, r8
 801d90a:	b4f0      	push	{r4, r5, r6, r7}
 801d90c:	4693      	mov	fp, r2
 801d90e:	b083      	sub	sp, #12
 801d910:	4681      	mov	r9, r0
 801d912:	468a      	mov	sl, r1
 801d914:	4698      	mov	r8, r3
 801d916:	2200      	movs	r2, #0
 801d918:	2b00      	cmp	r3, #0
 801d91a:	d020      	beq.n	801d95e <arm_add_q31+0x5e>
 801d91c:	4649      	mov	r1, r9
 801d91e:	4653      	mov	r3, sl
 801d920:	588e      	ldr	r6, [r1, r2]
 801d922:	589b      	ldr	r3, [r3, r2]
 801d924:	17f7      	asrs	r7, r6, #31
 801d926:	001c      	movs	r4, r3
 801d928:	0030      	movs	r0, r6
 801d92a:	0039      	movs	r1, r7
 801d92c:	17dd      	asrs	r5, r3, #31
 801d92e:	46b4      	mov	ip, r6
 801d930:	1900      	adds	r0, r0, r4
 801d932:	4169      	adcs	r1, r5
 801d934:	4463      	add	r3, ip
 801d936:	9000      	str	r0, [sp, #0]
 801d938:	9101      	str	r1, [sp, #4]
 801d93a:	17d9      	asrs	r1, r3, #31
 801d93c:	468c      	mov	ip, r1
 801d93e:	9901      	ldr	r1, [sp, #4]
 801d940:	458c      	cmp	ip, r1
 801d942:	d002      	beq.n	801d94a <arm_add_q31+0x4a>
 801d944:	17cb      	asrs	r3, r1, #31
 801d946:	4909      	ldr	r1, [pc, #36]	@ (801d96c <arm_add_q31+0x6c>)
 801d948:	404b      	eors	r3, r1
 801d94a:	4659      	mov	r1, fp
 801d94c:	508b      	str	r3, [r1, r2]
 801d94e:	2301      	movs	r3, #1
 801d950:	425b      	negs	r3, r3
 801d952:	469c      	mov	ip, r3
 801d954:	44e0      	add	r8, ip
 801d956:	4643      	mov	r3, r8
 801d958:	3204      	adds	r2, #4
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	d1de      	bne.n	801d91c <arm_add_q31+0x1c>
 801d95e:	b003      	add	sp, #12
 801d960:	bc3c      	pop	{r2, r3, r4, r5}
 801d962:	4690      	mov	r8, r2
 801d964:	4699      	mov	r9, r3
 801d966:	46a2      	mov	sl, r4
 801d968:	46ab      	mov	fp, r5
 801d96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d96c:	7fffffff 	.word	0x7fffffff

0801d970 <atof>:
 801d970:	b510      	push	{r4, lr}
 801d972:	2100      	movs	r1, #0
 801d974:	f000 fe12 	bl	801e59c <strtod>
 801d978:	bd10      	pop	{r4, pc}

0801d97a <atoi>:
 801d97a:	b510      	push	{r4, lr}
 801d97c:	220a      	movs	r2, #10
 801d97e:	2100      	movs	r1, #0
 801d980:	f000 fea4 	bl	801e6cc <strtol>
 801d984:	bd10      	pop	{r4, pc}
	...

0801d988 <sulp>:
 801d988:	b570      	push	{r4, r5, r6, lr}
 801d98a:	0016      	movs	r6, r2
 801d98c:	000d      	movs	r5, r1
 801d98e:	f003 fcf3 	bl	8021378 <__ulp>
 801d992:	2e00      	cmp	r6, #0
 801d994:	d00d      	beq.n	801d9b2 <sulp+0x2a>
 801d996:	236b      	movs	r3, #107	@ 0x6b
 801d998:	006a      	lsls	r2, r5, #1
 801d99a:	0d52      	lsrs	r2, r2, #21
 801d99c:	1a9b      	subs	r3, r3, r2
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	dd07      	ble.n	801d9b2 <sulp+0x2a>
 801d9a2:	2400      	movs	r4, #0
 801d9a4:	4a03      	ldr	r2, [pc, #12]	@ (801d9b4 <sulp+0x2c>)
 801d9a6:	051b      	lsls	r3, r3, #20
 801d9a8:	189d      	adds	r5, r3, r2
 801d9aa:	002b      	movs	r3, r5
 801d9ac:	0022      	movs	r2, r4
 801d9ae:	f7e4 fe45 	bl	800263c <__aeabi_dmul>
 801d9b2:	bd70      	pop	{r4, r5, r6, pc}
 801d9b4:	3ff00000 	.word	0x3ff00000

0801d9b8 <_strtod_l>:
 801d9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9ba:	b0a3      	sub	sp, #140	@ 0x8c
 801d9bc:	921b      	str	r2, [sp, #108]	@ 0x6c
 801d9be:	2200      	movs	r2, #0
 801d9c0:	2600      	movs	r6, #0
 801d9c2:	2700      	movs	r7, #0
 801d9c4:	9005      	str	r0, [sp, #20]
 801d9c6:	9109      	str	r1, [sp, #36]	@ 0x24
 801d9c8:	921e      	str	r2, [sp, #120]	@ 0x78
 801d9ca:	911d      	str	r1, [sp, #116]	@ 0x74
 801d9cc:	780a      	ldrb	r2, [r1, #0]
 801d9ce:	2a2b      	cmp	r2, #43	@ 0x2b
 801d9d0:	d053      	beq.n	801da7a <_strtod_l+0xc2>
 801d9d2:	d83f      	bhi.n	801da54 <_strtod_l+0x9c>
 801d9d4:	2a0d      	cmp	r2, #13
 801d9d6:	d839      	bhi.n	801da4c <_strtod_l+0x94>
 801d9d8:	2a08      	cmp	r2, #8
 801d9da:	d839      	bhi.n	801da50 <_strtod_l+0x98>
 801d9dc:	2a00      	cmp	r2, #0
 801d9de:	d042      	beq.n	801da66 <_strtod_l+0xae>
 801d9e0:	2200      	movs	r2, #0
 801d9e2:	9212      	str	r2, [sp, #72]	@ 0x48
 801d9e4:	2100      	movs	r1, #0
 801d9e6:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801d9e8:	910c      	str	r1, [sp, #48]	@ 0x30
 801d9ea:	782a      	ldrb	r2, [r5, #0]
 801d9ec:	2a30      	cmp	r2, #48	@ 0x30
 801d9ee:	d000      	beq.n	801d9f2 <_strtod_l+0x3a>
 801d9f0:	e083      	b.n	801dafa <_strtod_l+0x142>
 801d9f2:	786a      	ldrb	r2, [r5, #1]
 801d9f4:	3120      	adds	r1, #32
 801d9f6:	438a      	bics	r2, r1
 801d9f8:	2a58      	cmp	r2, #88	@ 0x58
 801d9fa:	d000      	beq.n	801d9fe <_strtod_l+0x46>
 801d9fc:	e073      	b.n	801dae6 <_strtod_l+0x12e>
 801d9fe:	9302      	str	r3, [sp, #8]
 801da00:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801da02:	4a95      	ldr	r2, [pc, #596]	@ (801dc58 <_strtod_l+0x2a0>)
 801da04:	9301      	str	r3, [sp, #4]
 801da06:	ab1e      	add	r3, sp, #120	@ 0x78
 801da08:	9300      	str	r3, [sp, #0]
 801da0a:	9805      	ldr	r0, [sp, #20]
 801da0c:	ab1f      	add	r3, sp, #124	@ 0x7c
 801da0e:	a91d      	add	r1, sp, #116	@ 0x74
 801da10:	f002 fd62 	bl	80204d8 <__gethex>
 801da14:	230f      	movs	r3, #15
 801da16:	0002      	movs	r2, r0
 801da18:	401a      	ands	r2, r3
 801da1a:	0004      	movs	r4, r0
 801da1c:	9206      	str	r2, [sp, #24]
 801da1e:	4218      	tst	r0, r3
 801da20:	d005      	beq.n	801da2e <_strtod_l+0x76>
 801da22:	2a06      	cmp	r2, #6
 801da24:	d12b      	bne.n	801da7e <_strtod_l+0xc6>
 801da26:	2300      	movs	r3, #0
 801da28:	3501      	adds	r5, #1
 801da2a:	951d      	str	r5, [sp, #116]	@ 0x74
 801da2c:	9312      	str	r3, [sp, #72]	@ 0x48
 801da2e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801da30:	2b00      	cmp	r3, #0
 801da32:	d002      	beq.n	801da3a <_strtod_l+0x82>
 801da34:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801da36:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801da38:	6013      	str	r3, [r2, #0]
 801da3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801da3c:	2b00      	cmp	r3, #0
 801da3e:	d019      	beq.n	801da74 <_strtod_l+0xbc>
 801da40:	2380      	movs	r3, #128	@ 0x80
 801da42:	0030      	movs	r0, r6
 801da44:	061b      	lsls	r3, r3, #24
 801da46:	18f9      	adds	r1, r7, r3
 801da48:	b023      	add	sp, #140	@ 0x8c
 801da4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da4c:	2a20      	cmp	r2, #32
 801da4e:	d1c7      	bne.n	801d9e0 <_strtod_l+0x28>
 801da50:	3101      	adds	r1, #1
 801da52:	e7ba      	b.n	801d9ca <_strtod_l+0x12>
 801da54:	2a2d      	cmp	r2, #45	@ 0x2d
 801da56:	d1c3      	bne.n	801d9e0 <_strtod_l+0x28>
 801da58:	3a2c      	subs	r2, #44	@ 0x2c
 801da5a:	9212      	str	r2, [sp, #72]	@ 0x48
 801da5c:	1c4a      	adds	r2, r1, #1
 801da5e:	921d      	str	r2, [sp, #116]	@ 0x74
 801da60:	784a      	ldrb	r2, [r1, #1]
 801da62:	2a00      	cmp	r2, #0
 801da64:	d1be      	bne.n	801d9e4 <_strtod_l+0x2c>
 801da66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da68:	931d      	str	r3, [sp, #116]	@ 0x74
 801da6a:	2300      	movs	r3, #0
 801da6c:	9312      	str	r3, [sp, #72]	@ 0x48
 801da6e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801da70:	2b00      	cmp	r3, #0
 801da72:	d1df      	bne.n	801da34 <_strtod_l+0x7c>
 801da74:	0030      	movs	r0, r6
 801da76:	0039      	movs	r1, r7
 801da78:	e7e6      	b.n	801da48 <_strtod_l+0x90>
 801da7a:	2200      	movs	r2, #0
 801da7c:	e7ed      	b.n	801da5a <_strtod_l+0xa2>
 801da7e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801da80:	2a00      	cmp	r2, #0
 801da82:	d007      	beq.n	801da94 <_strtod_l+0xdc>
 801da84:	2135      	movs	r1, #53	@ 0x35
 801da86:	a820      	add	r0, sp, #128	@ 0x80
 801da88:	f003 fd6c 	bl	8021564 <__copybits>
 801da8c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801da8e:	9805      	ldr	r0, [sp, #20]
 801da90:	f003 f926 	bl	8020ce0 <_Bfree>
 801da94:	9806      	ldr	r0, [sp, #24]
 801da96:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801da98:	3801      	subs	r0, #1
 801da9a:	2804      	cmp	r0, #4
 801da9c:	d806      	bhi.n	801daac <_strtod_l+0xf4>
 801da9e:	f7e2 fb6d 	bl	800017c <__gnu_thumb1_case_uqi>
 801daa2:	0312      	.short	0x0312
 801daa4:	1e1c      	.short	0x1e1c
 801daa6:	12          	.byte	0x12
 801daa7:	00          	.byte	0x00
 801daa8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801daaa:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801daac:	05e4      	lsls	r4, r4, #23
 801daae:	d502      	bpl.n	801dab6 <_strtod_l+0xfe>
 801dab0:	2380      	movs	r3, #128	@ 0x80
 801dab2:	061b      	lsls	r3, r3, #24
 801dab4:	431f      	orrs	r7, r3
 801dab6:	4b69      	ldr	r3, [pc, #420]	@ (801dc5c <_strtod_l+0x2a4>)
 801dab8:	423b      	tst	r3, r7
 801daba:	d1b8      	bne.n	801da2e <_strtod_l+0x76>
 801dabc:	f001 fd90 	bl	801f5e0 <__errno>
 801dac0:	2322      	movs	r3, #34	@ 0x22
 801dac2:	6003      	str	r3, [r0, #0]
 801dac4:	e7b3      	b.n	801da2e <_strtod_l+0x76>
 801dac6:	4966      	ldr	r1, [pc, #408]	@ (801dc60 <_strtod_l+0x2a8>)
 801dac8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801daca:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801dacc:	400a      	ands	r2, r1
 801dace:	4965      	ldr	r1, [pc, #404]	@ (801dc64 <_strtod_l+0x2ac>)
 801dad0:	185b      	adds	r3, r3, r1
 801dad2:	051b      	lsls	r3, r3, #20
 801dad4:	431a      	orrs	r2, r3
 801dad6:	0017      	movs	r7, r2
 801dad8:	e7e8      	b.n	801daac <_strtod_l+0xf4>
 801dada:	4f60      	ldr	r7, [pc, #384]	@ (801dc5c <_strtod_l+0x2a4>)
 801dadc:	e7e6      	b.n	801daac <_strtod_l+0xf4>
 801dade:	2601      	movs	r6, #1
 801dae0:	4f61      	ldr	r7, [pc, #388]	@ (801dc68 <_strtod_l+0x2b0>)
 801dae2:	4276      	negs	r6, r6
 801dae4:	e7e2      	b.n	801daac <_strtod_l+0xf4>
 801dae6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dae8:	1c5a      	adds	r2, r3, #1
 801daea:	921d      	str	r2, [sp, #116]	@ 0x74
 801daec:	785b      	ldrb	r3, [r3, #1]
 801daee:	2b30      	cmp	r3, #48	@ 0x30
 801daf0:	d0f9      	beq.n	801dae6 <_strtod_l+0x12e>
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	d09b      	beq.n	801da2e <_strtod_l+0x76>
 801daf6:	2301      	movs	r3, #1
 801daf8:	930c      	str	r3, [sp, #48]	@ 0x30
 801dafa:	2500      	movs	r5, #0
 801dafc:	220a      	movs	r2, #10
 801dafe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801db00:	950d      	str	r5, [sp, #52]	@ 0x34
 801db02:	9313      	str	r3, [sp, #76]	@ 0x4c
 801db04:	9508      	str	r5, [sp, #32]
 801db06:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801db08:	7804      	ldrb	r4, [r0, #0]
 801db0a:	0023      	movs	r3, r4
 801db0c:	3b30      	subs	r3, #48	@ 0x30
 801db0e:	b2d9      	uxtb	r1, r3
 801db10:	2909      	cmp	r1, #9
 801db12:	d927      	bls.n	801db64 <_strtod_l+0x1ac>
 801db14:	2201      	movs	r2, #1
 801db16:	4955      	ldr	r1, [pc, #340]	@ (801dc6c <_strtod_l+0x2b4>)
 801db18:	f001 fcd4 	bl	801f4c4 <strncmp>
 801db1c:	2800      	cmp	r0, #0
 801db1e:	d031      	beq.n	801db84 <_strtod_l+0x1cc>
 801db20:	2000      	movs	r0, #0
 801db22:	0023      	movs	r3, r4
 801db24:	4684      	mov	ip, r0
 801db26:	9a08      	ldr	r2, [sp, #32]
 801db28:	900e      	str	r0, [sp, #56]	@ 0x38
 801db2a:	9206      	str	r2, [sp, #24]
 801db2c:	2220      	movs	r2, #32
 801db2e:	0019      	movs	r1, r3
 801db30:	4391      	bics	r1, r2
 801db32:	000a      	movs	r2, r1
 801db34:	2100      	movs	r1, #0
 801db36:	9107      	str	r1, [sp, #28]
 801db38:	2a45      	cmp	r2, #69	@ 0x45
 801db3a:	d000      	beq.n	801db3e <_strtod_l+0x186>
 801db3c:	e0c0      	b.n	801dcc0 <_strtod_l+0x308>
 801db3e:	9b06      	ldr	r3, [sp, #24]
 801db40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801db42:	4303      	orrs	r3, r0
 801db44:	4313      	orrs	r3, r2
 801db46:	428b      	cmp	r3, r1
 801db48:	d08d      	beq.n	801da66 <_strtod_l+0xae>
 801db4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801db4c:	9309      	str	r3, [sp, #36]	@ 0x24
 801db4e:	3301      	adds	r3, #1
 801db50:	931d      	str	r3, [sp, #116]	@ 0x74
 801db52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db54:	785b      	ldrb	r3, [r3, #1]
 801db56:	2b2b      	cmp	r3, #43	@ 0x2b
 801db58:	d070      	beq.n	801dc3c <_strtod_l+0x284>
 801db5a:	000c      	movs	r4, r1
 801db5c:	2b2d      	cmp	r3, #45	@ 0x2d
 801db5e:	d173      	bne.n	801dc48 <_strtod_l+0x290>
 801db60:	2401      	movs	r4, #1
 801db62:	e06c      	b.n	801dc3e <_strtod_l+0x286>
 801db64:	9908      	ldr	r1, [sp, #32]
 801db66:	2908      	cmp	r1, #8
 801db68:	dc09      	bgt.n	801db7e <_strtod_l+0x1c6>
 801db6a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801db6c:	4351      	muls	r1, r2
 801db6e:	185b      	adds	r3, r3, r1
 801db70:	930d      	str	r3, [sp, #52]	@ 0x34
 801db72:	9b08      	ldr	r3, [sp, #32]
 801db74:	3001      	adds	r0, #1
 801db76:	3301      	adds	r3, #1
 801db78:	9308      	str	r3, [sp, #32]
 801db7a:	901d      	str	r0, [sp, #116]	@ 0x74
 801db7c:	e7c3      	b.n	801db06 <_strtod_l+0x14e>
 801db7e:	4355      	muls	r5, r2
 801db80:	195d      	adds	r5, r3, r5
 801db82:	e7f6      	b.n	801db72 <_strtod_l+0x1ba>
 801db84:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801db86:	1c5a      	adds	r2, r3, #1
 801db88:	921d      	str	r2, [sp, #116]	@ 0x74
 801db8a:	9a08      	ldr	r2, [sp, #32]
 801db8c:	785b      	ldrb	r3, [r3, #1]
 801db8e:	2a00      	cmp	r2, #0
 801db90:	d03a      	beq.n	801dc08 <_strtod_l+0x250>
 801db92:	900e      	str	r0, [sp, #56]	@ 0x38
 801db94:	9206      	str	r2, [sp, #24]
 801db96:	001a      	movs	r2, r3
 801db98:	3a30      	subs	r2, #48	@ 0x30
 801db9a:	2a09      	cmp	r2, #9
 801db9c:	d912      	bls.n	801dbc4 <_strtod_l+0x20c>
 801db9e:	2201      	movs	r2, #1
 801dba0:	4694      	mov	ip, r2
 801dba2:	e7c3      	b.n	801db2c <_strtod_l+0x174>
 801dba4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dba6:	3001      	adds	r0, #1
 801dba8:	1c5a      	adds	r2, r3, #1
 801dbaa:	921d      	str	r2, [sp, #116]	@ 0x74
 801dbac:	785b      	ldrb	r3, [r3, #1]
 801dbae:	2b30      	cmp	r3, #48	@ 0x30
 801dbb0:	d0f8      	beq.n	801dba4 <_strtod_l+0x1ec>
 801dbb2:	001a      	movs	r2, r3
 801dbb4:	3a31      	subs	r2, #49	@ 0x31
 801dbb6:	2a08      	cmp	r2, #8
 801dbb8:	d83b      	bhi.n	801dc32 <_strtod_l+0x27a>
 801dbba:	900e      	str	r0, [sp, #56]	@ 0x38
 801dbbc:	2000      	movs	r0, #0
 801dbbe:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801dbc0:	9006      	str	r0, [sp, #24]
 801dbc2:	9213      	str	r2, [sp, #76]	@ 0x4c
 801dbc4:	001a      	movs	r2, r3
 801dbc6:	1c41      	adds	r1, r0, #1
 801dbc8:	3a30      	subs	r2, #48	@ 0x30
 801dbca:	2b30      	cmp	r3, #48	@ 0x30
 801dbcc:	d016      	beq.n	801dbfc <_strtod_l+0x244>
 801dbce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dbd0:	185b      	adds	r3, r3, r1
 801dbd2:	930e      	str	r3, [sp, #56]	@ 0x38
 801dbd4:	9b06      	ldr	r3, [sp, #24]
 801dbd6:	210a      	movs	r1, #10
 801dbd8:	469c      	mov	ip, r3
 801dbda:	4484      	add	ip, r0
 801dbdc:	459c      	cmp	ip, r3
 801dbde:	d115      	bne.n	801dc0c <_strtod_l+0x254>
 801dbe0:	9906      	ldr	r1, [sp, #24]
 801dbe2:	9b06      	ldr	r3, [sp, #24]
 801dbe4:	3101      	adds	r1, #1
 801dbe6:	1809      	adds	r1, r1, r0
 801dbe8:	181b      	adds	r3, r3, r0
 801dbea:	9106      	str	r1, [sp, #24]
 801dbec:	2b08      	cmp	r3, #8
 801dbee:	dc19      	bgt.n	801dc24 <_strtod_l+0x26c>
 801dbf0:	230a      	movs	r3, #10
 801dbf2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801dbf4:	434b      	muls	r3, r1
 801dbf6:	2100      	movs	r1, #0
 801dbf8:	18d3      	adds	r3, r2, r3
 801dbfa:	930d      	str	r3, [sp, #52]	@ 0x34
 801dbfc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dbfe:	0008      	movs	r0, r1
 801dc00:	1c5a      	adds	r2, r3, #1
 801dc02:	921d      	str	r2, [sp, #116]	@ 0x74
 801dc04:	785b      	ldrb	r3, [r3, #1]
 801dc06:	e7c6      	b.n	801db96 <_strtod_l+0x1de>
 801dc08:	9808      	ldr	r0, [sp, #32]
 801dc0a:	e7d0      	b.n	801dbae <_strtod_l+0x1f6>
 801dc0c:	1c5c      	adds	r4, r3, #1
 801dc0e:	2b08      	cmp	r3, #8
 801dc10:	dc04      	bgt.n	801dc1c <_strtod_l+0x264>
 801dc12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dc14:	434b      	muls	r3, r1
 801dc16:	930d      	str	r3, [sp, #52]	@ 0x34
 801dc18:	0023      	movs	r3, r4
 801dc1a:	e7df      	b.n	801dbdc <_strtod_l+0x224>
 801dc1c:	2c10      	cmp	r4, #16
 801dc1e:	dcfb      	bgt.n	801dc18 <_strtod_l+0x260>
 801dc20:	434d      	muls	r5, r1
 801dc22:	e7f9      	b.n	801dc18 <_strtod_l+0x260>
 801dc24:	2100      	movs	r1, #0
 801dc26:	2b0f      	cmp	r3, #15
 801dc28:	dce8      	bgt.n	801dbfc <_strtod_l+0x244>
 801dc2a:	230a      	movs	r3, #10
 801dc2c:	435d      	muls	r5, r3
 801dc2e:	1955      	adds	r5, r2, r5
 801dc30:	e7e4      	b.n	801dbfc <_strtod_l+0x244>
 801dc32:	2200      	movs	r2, #0
 801dc34:	920e      	str	r2, [sp, #56]	@ 0x38
 801dc36:	9206      	str	r2, [sp, #24]
 801dc38:	3201      	adds	r2, #1
 801dc3a:	e7b1      	b.n	801dba0 <_strtod_l+0x1e8>
 801dc3c:	2400      	movs	r4, #0
 801dc3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc40:	3302      	adds	r3, #2
 801dc42:	931d      	str	r3, [sp, #116]	@ 0x74
 801dc44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc46:	789b      	ldrb	r3, [r3, #2]
 801dc48:	001a      	movs	r2, r3
 801dc4a:	3a30      	subs	r2, #48	@ 0x30
 801dc4c:	2a09      	cmp	r2, #9
 801dc4e:	d913      	bls.n	801dc78 <_strtod_l+0x2c0>
 801dc50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dc52:	921d      	str	r2, [sp, #116]	@ 0x74
 801dc54:	2200      	movs	r2, #0
 801dc56:	e032      	b.n	801dcbe <_strtod_l+0x306>
 801dc58:	08024890 	.word	0x08024890
 801dc5c:	7ff00000 	.word	0x7ff00000
 801dc60:	ffefffff 	.word	0xffefffff
 801dc64:	00000433 	.word	0x00000433
 801dc68:	7fffffff 	.word	0x7fffffff
 801dc6c:	08024878 	.word	0x08024878
 801dc70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dc72:	1c5a      	adds	r2, r3, #1
 801dc74:	921d      	str	r2, [sp, #116]	@ 0x74
 801dc76:	785b      	ldrb	r3, [r3, #1]
 801dc78:	2b30      	cmp	r3, #48	@ 0x30
 801dc7a:	d0f9      	beq.n	801dc70 <_strtod_l+0x2b8>
 801dc7c:	2200      	movs	r2, #0
 801dc7e:	9207      	str	r2, [sp, #28]
 801dc80:	001a      	movs	r2, r3
 801dc82:	3a31      	subs	r2, #49	@ 0x31
 801dc84:	2a08      	cmp	r2, #8
 801dc86:	d81b      	bhi.n	801dcc0 <_strtod_l+0x308>
 801dc88:	3b30      	subs	r3, #48	@ 0x30
 801dc8a:	9310      	str	r3, [sp, #64]	@ 0x40
 801dc8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dc8e:	9307      	str	r3, [sp, #28]
 801dc90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dc92:	1c59      	adds	r1, r3, #1
 801dc94:	911d      	str	r1, [sp, #116]	@ 0x74
 801dc96:	785b      	ldrb	r3, [r3, #1]
 801dc98:	001a      	movs	r2, r3
 801dc9a:	3a30      	subs	r2, #48	@ 0x30
 801dc9c:	2a09      	cmp	r2, #9
 801dc9e:	d93a      	bls.n	801dd16 <_strtod_l+0x35e>
 801dca0:	9a07      	ldr	r2, [sp, #28]
 801dca2:	1a8a      	subs	r2, r1, r2
 801dca4:	49b4      	ldr	r1, [pc, #720]	@ (801df78 <_strtod_l+0x5c0>)
 801dca6:	9107      	str	r1, [sp, #28]
 801dca8:	2a08      	cmp	r2, #8
 801dcaa:	dc04      	bgt.n	801dcb6 <_strtod_l+0x2fe>
 801dcac:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801dcae:	9207      	str	r2, [sp, #28]
 801dcb0:	428a      	cmp	r2, r1
 801dcb2:	dd00      	ble.n	801dcb6 <_strtod_l+0x2fe>
 801dcb4:	9107      	str	r1, [sp, #28]
 801dcb6:	2c00      	cmp	r4, #0
 801dcb8:	d002      	beq.n	801dcc0 <_strtod_l+0x308>
 801dcba:	9a07      	ldr	r2, [sp, #28]
 801dcbc:	4252      	negs	r2, r2
 801dcbe:	9207      	str	r2, [sp, #28]
 801dcc0:	9a06      	ldr	r2, [sp, #24]
 801dcc2:	2a00      	cmp	r2, #0
 801dcc4:	d14d      	bne.n	801dd62 <_strtod_l+0x3aa>
 801dcc6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dcc8:	4310      	orrs	r0, r2
 801dcca:	d000      	beq.n	801dcce <_strtod_l+0x316>
 801dccc:	e6af      	b.n	801da2e <_strtod_l+0x76>
 801dcce:	4662      	mov	r2, ip
 801dcd0:	2a00      	cmp	r2, #0
 801dcd2:	d000      	beq.n	801dcd6 <_strtod_l+0x31e>
 801dcd4:	e6c7      	b.n	801da66 <_strtod_l+0xae>
 801dcd6:	2b69      	cmp	r3, #105	@ 0x69
 801dcd8:	d027      	beq.n	801dd2a <_strtod_l+0x372>
 801dcda:	dc23      	bgt.n	801dd24 <_strtod_l+0x36c>
 801dcdc:	2b49      	cmp	r3, #73	@ 0x49
 801dcde:	d024      	beq.n	801dd2a <_strtod_l+0x372>
 801dce0:	2b4e      	cmp	r3, #78	@ 0x4e
 801dce2:	d000      	beq.n	801dce6 <_strtod_l+0x32e>
 801dce4:	e6bf      	b.n	801da66 <_strtod_l+0xae>
 801dce6:	49a5      	ldr	r1, [pc, #660]	@ (801df7c <_strtod_l+0x5c4>)
 801dce8:	a81d      	add	r0, sp, #116	@ 0x74
 801dcea:	f002 fe2b 	bl	8020944 <__match>
 801dcee:	2800      	cmp	r0, #0
 801dcf0:	d100      	bne.n	801dcf4 <_strtod_l+0x33c>
 801dcf2:	e6b8      	b.n	801da66 <_strtod_l+0xae>
 801dcf4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dcf6:	781b      	ldrb	r3, [r3, #0]
 801dcf8:	2b28      	cmp	r3, #40	@ 0x28
 801dcfa:	d12c      	bne.n	801dd56 <_strtod_l+0x39e>
 801dcfc:	49a0      	ldr	r1, [pc, #640]	@ (801df80 <_strtod_l+0x5c8>)
 801dcfe:	aa20      	add	r2, sp, #128	@ 0x80
 801dd00:	a81d      	add	r0, sp, #116	@ 0x74
 801dd02:	f002 fe33 	bl	802096c <__hexnan>
 801dd06:	2805      	cmp	r0, #5
 801dd08:	d125      	bne.n	801dd56 <_strtod_l+0x39e>
 801dd0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801dd0c:	4a9d      	ldr	r2, [pc, #628]	@ (801df84 <_strtod_l+0x5cc>)
 801dd0e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801dd10:	431a      	orrs	r2, r3
 801dd12:	0017      	movs	r7, r2
 801dd14:	e68b      	b.n	801da2e <_strtod_l+0x76>
 801dd16:	220a      	movs	r2, #10
 801dd18:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801dd1a:	434a      	muls	r2, r1
 801dd1c:	18d2      	adds	r2, r2, r3
 801dd1e:	3a30      	subs	r2, #48	@ 0x30
 801dd20:	9210      	str	r2, [sp, #64]	@ 0x40
 801dd22:	e7b5      	b.n	801dc90 <_strtod_l+0x2d8>
 801dd24:	2b6e      	cmp	r3, #110	@ 0x6e
 801dd26:	d0de      	beq.n	801dce6 <_strtod_l+0x32e>
 801dd28:	e69d      	b.n	801da66 <_strtod_l+0xae>
 801dd2a:	4997      	ldr	r1, [pc, #604]	@ (801df88 <_strtod_l+0x5d0>)
 801dd2c:	a81d      	add	r0, sp, #116	@ 0x74
 801dd2e:	f002 fe09 	bl	8020944 <__match>
 801dd32:	2800      	cmp	r0, #0
 801dd34:	d100      	bne.n	801dd38 <_strtod_l+0x380>
 801dd36:	e696      	b.n	801da66 <_strtod_l+0xae>
 801dd38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dd3a:	4994      	ldr	r1, [pc, #592]	@ (801df8c <_strtod_l+0x5d4>)
 801dd3c:	3b01      	subs	r3, #1
 801dd3e:	a81d      	add	r0, sp, #116	@ 0x74
 801dd40:	931d      	str	r3, [sp, #116]	@ 0x74
 801dd42:	f002 fdff 	bl	8020944 <__match>
 801dd46:	2800      	cmp	r0, #0
 801dd48:	d102      	bne.n	801dd50 <_strtod_l+0x398>
 801dd4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801dd4c:	3301      	adds	r3, #1
 801dd4e:	931d      	str	r3, [sp, #116]	@ 0x74
 801dd50:	2600      	movs	r6, #0
 801dd52:	4f8c      	ldr	r7, [pc, #560]	@ (801df84 <_strtod_l+0x5cc>)
 801dd54:	e66b      	b.n	801da2e <_strtod_l+0x76>
 801dd56:	488e      	ldr	r0, [pc, #568]	@ (801df90 <_strtod_l+0x5d8>)
 801dd58:	f001 fc84 	bl	801f664 <nan>
 801dd5c:	0006      	movs	r6, r0
 801dd5e:	000f      	movs	r7, r1
 801dd60:	e665      	b.n	801da2e <_strtod_l+0x76>
 801dd62:	9b07      	ldr	r3, [sp, #28]
 801dd64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dd66:	1a9b      	subs	r3, r3, r2
 801dd68:	930c      	str	r3, [sp, #48]	@ 0x30
 801dd6a:	9b08      	ldr	r3, [sp, #32]
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	d101      	bne.n	801dd74 <_strtod_l+0x3bc>
 801dd70:	9b06      	ldr	r3, [sp, #24]
 801dd72:	9308      	str	r3, [sp, #32]
 801dd74:	9c06      	ldr	r4, [sp, #24]
 801dd76:	2c10      	cmp	r4, #16
 801dd78:	dd00      	ble.n	801dd7c <_strtod_l+0x3c4>
 801dd7a:	2410      	movs	r4, #16
 801dd7c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801dd7e:	f7e5 fb4d 	bl	800341c <__aeabi_ui2d>
 801dd82:	9b06      	ldr	r3, [sp, #24]
 801dd84:	0006      	movs	r6, r0
 801dd86:	000f      	movs	r7, r1
 801dd88:	2b09      	cmp	r3, #9
 801dd8a:	dc13      	bgt.n	801ddb4 <_strtod_l+0x3fc>
 801dd8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	d100      	bne.n	801dd94 <_strtod_l+0x3dc>
 801dd92:	e64c      	b.n	801da2e <_strtod_l+0x76>
 801dd94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dd96:	2b00      	cmp	r3, #0
 801dd98:	dc00      	bgt.n	801dd9c <_strtod_l+0x3e4>
 801dd9a:	e07e      	b.n	801de9a <_strtod_l+0x4e2>
 801dd9c:	2b16      	cmp	r3, #22
 801dd9e:	dc63      	bgt.n	801de68 <_strtod_l+0x4b0>
 801dda0:	497c      	ldr	r1, [pc, #496]	@ (801df94 <_strtod_l+0x5dc>)
 801dda2:	00db      	lsls	r3, r3, #3
 801dda4:	18c9      	adds	r1, r1, r3
 801dda6:	0032      	movs	r2, r6
 801dda8:	6808      	ldr	r0, [r1, #0]
 801ddaa:	6849      	ldr	r1, [r1, #4]
 801ddac:	003b      	movs	r3, r7
 801ddae:	f7e4 fc45 	bl	800263c <__aeabi_dmul>
 801ddb2:	e7d3      	b.n	801dd5c <_strtod_l+0x3a4>
 801ddb4:	0022      	movs	r2, r4
 801ddb6:	4b77      	ldr	r3, [pc, #476]	@ (801df94 <_strtod_l+0x5dc>)
 801ddb8:	3a09      	subs	r2, #9
 801ddba:	00d2      	lsls	r2, r2, #3
 801ddbc:	189b      	adds	r3, r3, r2
 801ddbe:	681a      	ldr	r2, [r3, #0]
 801ddc0:	685b      	ldr	r3, [r3, #4]
 801ddc2:	f7e4 fc3b 	bl	800263c <__aeabi_dmul>
 801ddc6:	0006      	movs	r6, r0
 801ddc8:	0028      	movs	r0, r5
 801ddca:	000f      	movs	r7, r1
 801ddcc:	f7e5 fb26 	bl	800341c <__aeabi_ui2d>
 801ddd0:	000b      	movs	r3, r1
 801ddd2:	0002      	movs	r2, r0
 801ddd4:	0039      	movs	r1, r7
 801ddd6:	0030      	movs	r0, r6
 801ddd8:	f7e3 fc88 	bl	80016ec <__aeabi_dadd>
 801dddc:	9b06      	ldr	r3, [sp, #24]
 801ddde:	0006      	movs	r6, r0
 801dde0:	000f      	movs	r7, r1
 801dde2:	2b0f      	cmp	r3, #15
 801dde4:	ddd2      	ble.n	801dd8c <_strtod_l+0x3d4>
 801dde6:	9b06      	ldr	r3, [sp, #24]
 801dde8:	1b1c      	subs	r4, r3, r4
 801ddea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ddec:	18e4      	adds	r4, r4, r3
 801ddee:	2c00      	cmp	r4, #0
 801ddf0:	dc00      	bgt.n	801ddf4 <_strtod_l+0x43c>
 801ddf2:	e09b      	b.n	801df2c <_strtod_l+0x574>
 801ddf4:	220f      	movs	r2, #15
 801ddf6:	0023      	movs	r3, r4
 801ddf8:	4013      	ands	r3, r2
 801ddfa:	4214      	tst	r4, r2
 801ddfc:	d00a      	beq.n	801de14 <_strtod_l+0x45c>
 801ddfe:	4965      	ldr	r1, [pc, #404]	@ (801df94 <_strtod_l+0x5dc>)
 801de00:	00db      	lsls	r3, r3, #3
 801de02:	18c9      	adds	r1, r1, r3
 801de04:	0032      	movs	r2, r6
 801de06:	6808      	ldr	r0, [r1, #0]
 801de08:	6849      	ldr	r1, [r1, #4]
 801de0a:	003b      	movs	r3, r7
 801de0c:	f7e4 fc16 	bl	800263c <__aeabi_dmul>
 801de10:	0006      	movs	r6, r0
 801de12:	000f      	movs	r7, r1
 801de14:	230f      	movs	r3, #15
 801de16:	439c      	bics	r4, r3
 801de18:	d073      	beq.n	801df02 <_strtod_l+0x54a>
 801de1a:	3326      	adds	r3, #38	@ 0x26
 801de1c:	33ff      	adds	r3, #255	@ 0xff
 801de1e:	429c      	cmp	r4, r3
 801de20:	dd4b      	ble.n	801deba <_strtod_l+0x502>
 801de22:	2300      	movs	r3, #0
 801de24:	9306      	str	r3, [sp, #24]
 801de26:	9307      	str	r3, [sp, #28]
 801de28:	930d      	str	r3, [sp, #52]	@ 0x34
 801de2a:	9308      	str	r3, [sp, #32]
 801de2c:	2322      	movs	r3, #34	@ 0x22
 801de2e:	2600      	movs	r6, #0
 801de30:	9a05      	ldr	r2, [sp, #20]
 801de32:	4f54      	ldr	r7, [pc, #336]	@ (801df84 <_strtod_l+0x5cc>)
 801de34:	6013      	str	r3, [r2, #0]
 801de36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801de38:	42b3      	cmp	r3, r6
 801de3a:	d100      	bne.n	801de3e <_strtod_l+0x486>
 801de3c:	e5f7      	b.n	801da2e <_strtod_l+0x76>
 801de3e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801de40:	9805      	ldr	r0, [sp, #20]
 801de42:	f002 ff4d 	bl	8020ce0 <_Bfree>
 801de46:	9908      	ldr	r1, [sp, #32]
 801de48:	9805      	ldr	r0, [sp, #20]
 801de4a:	f002 ff49 	bl	8020ce0 <_Bfree>
 801de4e:	9907      	ldr	r1, [sp, #28]
 801de50:	9805      	ldr	r0, [sp, #20]
 801de52:	f002 ff45 	bl	8020ce0 <_Bfree>
 801de56:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801de58:	9805      	ldr	r0, [sp, #20]
 801de5a:	f002 ff41 	bl	8020ce0 <_Bfree>
 801de5e:	9906      	ldr	r1, [sp, #24]
 801de60:	9805      	ldr	r0, [sp, #20]
 801de62:	f002 ff3d 	bl	8020ce0 <_Bfree>
 801de66:	e5e2      	b.n	801da2e <_strtod_l+0x76>
 801de68:	2325      	movs	r3, #37	@ 0x25
 801de6a:	9a06      	ldr	r2, [sp, #24]
 801de6c:	1a9b      	subs	r3, r3, r2
 801de6e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801de70:	4293      	cmp	r3, r2
 801de72:	dbb8      	blt.n	801dde6 <_strtod_l+0x42e>
 801de74:	240f      	movs	r4, #15
 801de76:	9b06      	ldr	r3, [sp, #24]
 801de78:	4d46      	ldr	r5, [pc, #280]	@ (801df94 <_strtod_l+0x5dc>)
 801de7a:	1ae4      	subs	r4, r4, r3
 801de7c:	00e1      	lsls	r1, r4, #3
 801de7e:	1869      	adds	r1, r5, r1
 801de80:	0032      	movs	r2, r6
 801de82:	6808      	ldr	r0, [r1, #0]
 801de84:	6849      	ldr	r1, [r1, #4]
 801de86:	003b      	movs	r3, r7
 801de88:	f7e4 fbd8 	bl	800263c <__aeabi_dmul>
 801de8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de8e:	1b1c      	subs	r4, r3, r4
 801de90:	00e4      	lsls	r4, r4, #3
 801de92:	192d      	adds	r5, r5, r4
 801de94:	682a      	ldr	r2, [r5, #0]
 801de96:	686b      	ldr	r3, [r5, #4]
 801de98:	e789      	b.n	801ddae <_strtod_l+0x3f6>
 801de9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de9c:	3316      	adds	r3, #22
 801de9e:	dba2      	blt.n	801dde6 <_strtod_l+0x42e>
 801dea0:	9907      	ldr	r1, [sp, #28]
 801dea2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dea4:	4b3b      	ldr	r3, [pc, #236]	@ (801df94 <_strtod_l+0x5dc>)
 801dea6:	1a52      	subs	r2, r2, r1
 801dea8:	00d2      	lsls	r2, r2, #3
 801deaa:	189b      	adds	r3, r3, r2
 801deac:	0030      	movs	r0, r6
 801deae:	681a      	ldr	r2, [r3, #0]
 801deb0:	685b      	ldr	r3, [r3, #4]
 801deb2:	0039      	movs	r1, r7
 801deb4:	f7e3 ff7e 	bl	8001db4 <__aeabi_ddiv>
 801deb8:	e750      	b.n	801dd5c <_strtod_l+0x3a4>
 801deba:	2300      	movs	r3, #0
 801debc:	0030      	movs	r0, r6
 801debe:	0039      	movs	r1, r7
 801dec0:	4d35      	ldr	r5, [pc, #212]	@ (801df98 <_strtod_l+0x5e0>)
 801dec2:	1124      	asrs	r4, r4, #4
 801dec4:	9309      	str	r3, [sp, #36]	@ 0x24
 801dec6:	2c01      	cmp	r4, #1
 801dec8:	dc1e      	bgt.n	801df08 <_strtod_l+0x550>
 801deca:	2b00      	cmp	r3, #0
 801decc:	d001      	beq.n	801ded2 <_strtod_l+0x51a>
 801dece:	0006      	movs	r6, r0
 801ded0:	000f      	movs	r7, r1
 801ded2:	4b32      	ldr	r3, [pc, #200]	@ (801df9c <_strtod_l+0x5e4>)
 801ded4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ded6:	18ff      	adds	r7, r7, r3
 801ded8:	4b2f      	ldr	r3, [pc, #188]	@ (801df98 <_strtod_l+0x5e0>)
 801deda:	00d5      	lsls	r5, r2, #3
 801dedc:	195d      	adds	r5, r3, r5
 801dede:	0032      	movs	r2, r6
 801dee0:	6828      	ldr	r0, [r5, #0]
 801dee2:	6869      	ldr	r1, [r5, #4]
 801dee4:	003b      	movs	r3, r7
 801dee6:	f7e4 fba9 	bl	800263c <__aeabi_dmul>
 801deea:	4b26      	ldr	r3, [pc, #152]	@ (801df84 <_strtod_l+0x5cc>)
 801deec:	4a2c      	ldr	r2, [pc, #176]	@ (801dfa0 <_strtod_l+0x5e8>)
 801deee:	0006      	movs	r6, r0
 801def0:	400b      	ands	r3, r1
 801def2:	4293      	cmp	r3, r2
 801def4:	d895      	bhi.n	801de22 <_strtod_l+0x46a>
 801def6:	4a2b      	ldr	r2, [pc, #172]	@ (801dfa4 <_strtod_l+0x5ec>)
 801def8:	4293      	cmp	r3, r2
 801defa:	d913      	bls.n	801df24 <_strtod_l+0x56c>
 801defc:	2601      	movs	r6, #1
 801defe:	4f2a      	ldr	r7, [pc, #168]	@ (801dfa8 <_strtod_l+0x5f0>)
 801df00:	4276      	negs	r6, r6
 801df02:	2300      	movs	r3, #0
 801df04:	9309      	str	r3, [sp, #36]	@ 0x24
 801df06:	e086      	b.n	801e016 <_strtod_l+0x65e>
 801df08:	2201      	movs	r2, #1
 801df0a:	4214      	tst	r4, r2
 801df0c:	d004      	beq.n	801df18 <_strtod_l+0x560>
 801df0e:	682a      	ldr	r2, [r5, #0]
 801df10:	686b      	ldr	r3, [r5, #4]
 801df12:	f7e4 fb93 	bl	800263c <__aeabi_dmul>
 801df16:	2301      	movs	r3, #1
 801df18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801df1a:	1064      	asrs	r4, r4, #1
 801df1c:	3201      	adds	r2, #1
 801df1e:	9209      	str	r2, [sp, #36]	@ 0x24
 801df20:	3508      	adds	r5, #8
 801df22:	e7d0      	b.n	801dec6 <_strtod_l+0x50e>
 801df24:	23d4      	movs	r3, #212	@ 0xd4
 801df26:	049b      	lsls	r3, r3, #18
 801df28:	18cf      	adds	r7, r1, r3
 801df2a:	e7ea      	b.n	801df02 <_strtod_l+0x54a>
 801df2c:	2c00      	cmp	r4, #0
 801df2e:	d0e8      	beq.n	801df02 <_strtod_l+0x54a>
 801df30:	4264      	negs	r4, r4
 801df32:	230f      	movs	r3, #15
 801df34:	0022      	movs	r2, r4
 801df36:	401a      	ands	r2, r3
 801df38:	421c      	tst	r4, r3
 801df3a:	d00a      	beq.n	801df52 <_strtod_l+0x59a>
 801df3c:	4b15      	ldr	r3, [pc, #84]	@ (801df94 <_strtod_l+0x5dc>)
 801df3e:	00d2      	lsls	r2, r2, #3
 801df40:	189b      	adds	r3, r3, r2
 801df42:	0030      	movs	r0, r6
 801df44:	681a      	ldr	r2, [r3, #0]
 801df46:	685b      	ldr	r3, [r3, #4]
 801df48:	0039      	movs	r1, r7
 801df4a:	f7e3 ff33 	bl	8001db4 <__aeabi_ddiv>
 801df4e:	0006      	movs	r6, r0
 801df50:	000f      	movs	r7, r1
 801df52:	1124      	asrs	r4, r4, #4
 801df54:	d0d5      	beq.n	801df02 <_strtod_l+0x54a>
 801df56:	2c1f      	cmp	r4, #31
 801df58:	dd28      	ble.n	801dfac <_strtod_l+0x5f4>
 801df5a:	2300      	movs	r3, #0
 801df5c:	9306      	str	r3, [sp, #24]
 801df5e:	9307      	str	r3, [sp, #28]
 801df60:	930d      	str	r3, [sp, #52]	@ 0x34
 801df62:	9308      	str	r3, [sp, #32]
 801df64:	2322      	movs	r3, #34	@ 0x22
 801df66:	9a05      	ldr	r2, [sp, #20]
 801df68:	2600      	movs	r6, #0
 801df6a:	6013      	str	r3, [r2, #0]
 801df6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801df6e:	2700      	movs	r7, #0
 801df70:	2b00      	cmp	r3, #0
 801df72:	d000      	beq.n	801df76 <_strtod_l+0x5be>
 801df74:	e763      	b.n	801de3e <_strtod_l+0x486>
 801df76:	e55a      	b.n	801da2e <_strtod_l+0x76>
 801df78:	00004e1f 	.word	0x00004e1f
 801df7c:	080249de 	.word	0x080249de
 801df80:	0802487c 	.word	0x0802487c
 801df84:	7ff00000 	.word	0x7ff00000
 801df88:	080249d6 	.word	0x080249d6
 801df8c:	08024a10 	.word	0x08024a10
 801df90:	08024c9c 	.word	0x08024c9c
 801df94:	08024b88 	.word	0x08024b88
 801df98:	08024b60 	.word	0x08024b60
 801df9c:	fcb00000 	.word	0xfcb00000
 801dfa0:	7ca00000 	.word	0x7ca00000
 801dfa4:	7c900000 	.word	0x7c900000
 801dfa8:	7fefffff 	.word	0x7fefffff
 801dfac:	2310      	movs	r3, #16
 801dfae:	0022      	movs	r2, r4
 801dfb0:	401a      	ands	r2, r3
 801dfb2:	9209      	str	r2, [sp, #36]	@ 0x24
 801dfb4:	421c      	tst	r4, r3
 801dfb6:	d001      	beq.n	801dfbc <_strtod_l+0x604>
 801dfb8:	335a      	adds	r3, #90	@ 0x5a
 801dfba:	9309      	str	r3, [sp, #36]	@ 0x24
 801dfbc:	0030      	movs	r0, r6
 801dfbe:	0039      	movs	r1, r7
 801dfc0:	2300      	movs	r3, #0
 801dfc2:	4dbf      	ldr	r5, [pc, #764]	@ (801e2c0 <_strtod_l+0x908>)
 801dfc4:	2201      	movs	r2, #1
 801dfc6:	4214      	tst	r4, r2
 801dfc8:	d004      	beq.n	801dfd4 <_strtod_l+0x61c>
 801dfca:	682a      	ldr	r2, [r5, #0]
 801dfcc:	686b      	ldr	r3, [r5, #4]
 801dfce:	f7e4 fb35 	bl	800263c <__aeabi_dmul>
 801dfd2:	2301      	movs	r3, #1
 801dfd4:	1064      	asrs	r4, r4, #1
 801dfd6:	3508      	adds	r5, #8
 801dfd8:	2c00      	cmp	r4, #0
 801dfda:	d1f3      	bne.n	801dfc4 <_strtod_l+0x60c>
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	d001      	beq.n	801dfe4 <_strtod_l+0x62c>
 801dfe0:	0006      	movs	r6, r0
 801dfe2:	000f      	movs	r7, r1
 801dfe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfe6:	2b00      	cmp	r3, #0
 801dfe8:	d00d      	beq.n	801e006 <_strtod_l+0x64e>
 801dfea:	236b      	movs	r3, #107	@ 0x6b
 801dfec:	007a      	lsls	r2, r7, #1
 801dfee:	0d52      	lsrs	r2, r2, #21
 801dff0:	0039      	movs	r1, r7
 801dff2:	1a9b      	subs	r3, r3, r2
 801dff4:	2b00      	cmp	r3, #0
 801dff6:	dd06      	ble.n	801e006 <_strtod_l+0x64e>
 801dff8:	2b1f      	cmp	r3, #31
 801dffa:	dd5a      	ble.n	801e0b2 <_strtod_l+0x6fa>
 801dffc:	2600      	movs	r6, #0
 801dffe:	2b34      	cmp	r3, #52	@ 0x34
 801e000:	dd50      	ble.n	801e0a4 <_strtod_l+0x6ec>
 801e002:	27dc      	movs	r7, #220	@ 0xdc
 801e004:	04bf      	lsls	r7, r7, #18
 801e006:	2200      	movs	r2, #0
 801e008:	2300      	movs	r3, #0
 801e00a:	0030      	movs	r0, r6
 801e00c:	0039      	movs	r1, r7
 801e00e:	f7e2 fa4f 	bl	80004b0 <__aeabi_dcmpeq>
 801e012:	2800      	cmp	r0, #0
 801e014:	d1a1      	bne.n	801df5a <_strtod_l+0x5a2>
 801e016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e018:	9a08      	ldr	r2, [sp, #32]
 801e01a:	9300      	str	r3, [sp, #0]
 801e01c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e01e:	9b06      	ldr	r3, [sp, #24]
 801e020:	9805      	ldr	r0, [sp, #20]
 801e022:	f002 fec5 	bl	8020db0 <__s2b>
 801e026:	900d      	str	r0, [sp, #52]	@ 0x34
 801e028:	2800      	cmp	r0, #0
 801e02a:	d100      	bne.n	801e02e <_strtod_l+0x676>
 801e02c:	e6f9      	b.n	801de22 <_strtod_l+0x46a>
 801e02e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e030:	9907      	ldr	r1, [sp, #28]
 801e032:	17da      	asrs	r2, r3, #31
 801e034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e036:	1a5b      	subs	r3, r3, r1
 801e038:	401a      	ands	r2, r3
 801e03a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e03c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e03e:	43db      	mvns	r3, r3
 801e040:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e042:	17db      	asrs	r3, r3, #31
 801e044:	401a      	ands	r2, r3
 801e046:	2300      	movs	r3, #0
 801e048:	921a      	str	r2, [sp, #104]	@ 0x68
 801e04a:	9306      	str	r3, [sp, #24]
 801e04c:	9307      	str	r3, [sp, #28]
 801e04e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e050:	9805      	ldr	r0, [sp, #20]
 801e052:	6859      	ldr	r1, [r3, #4]
 801e054:	f002 fe00 	bl	8020c58 <_Balloc>
 801e058:	9008      	str	r0, [sp, #32]
 801e05a:	2800      	cmp	r0, #0
 801e05c:	d100      	bne.n	801e060 <_strtod_l+0x6a8>
 801e05e:	e6e5      	b.n	801de2c <_strtod_l+0x474>
 801e060:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e062:	300c      	adds	r0, #12
 801e064:	0019      	movs	r1, r3
 801e066:	691a      	ldr	r2, [r3, #16]
 801e068:	310c      	adds	r1, #12
 801e06a:	3202      	adds	r2, #2
 801e06c:	0092      	lsls	r2, r2, #2
 801e06e:	f001 faef 	bl	801f650 <memcpy>
 801e072:	ab20      	add	r3, sp, #128	@ 0x80
 801e074:	9301      	str	r3, [sp, #4]
 801e076:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e078:	9300      	str	r3, [sp, #0]
 801e07a:	0032      	movs	r2, r6
 801e07c:	003b      	movs	r3, r7
 801e07e:	9805      	ldr	r0, [sp, #20]
 801e080:	9610      	str	r6, [sp, #64]	@ 0x40
 801e082:	9711      	str	r7, [sp, #68]	@ 0x44
 801e084:	f003 f9e4 	bl	8021450 <__d2b>
 801e088:	901e      	str	r0, [sp, #120]	@ 0x78
 801e08a:	2800      	cmp	r0, #0
 801e08c:	d100      	bne.n	801e090 <_strtod_l+0x6d8>
 801e08e:	e6cd      	b.n	801de2c <_strtod_l+0x474>
 801e090:	2101      	movs	r1, #1
 801e092:	9805      	ldr	r0, [sp, #20]
 801e094:	f002 ff28 	bl	8020ee8 <__i2b>
 801e098:	9007      	str	r0, [sp, #28]
 801e09a:	2800      	cmp	r0, #0
 801e09c:	d10e      	bne.n	801e0bc <_strtod_l+0x704>
 801e09e:	2300      	movs	r3, #0
 801e0a0:	9307      	str	r3, [sp, #28]
 801e0a2:	e6c3      	b.n	801de2c <_strtod_l+0x474>
 801e0a4:	234b      	movs	r3, #75	@ 0x4b
 801e0a6:	1a9a      	subs	r2, r3, r2
 801e0a8:	3b4c      	subs	r3, #76	@ 0x4c
 801e0aa:	4093      	lsls	r3, r2
 801e0ac:	4019      	ands	r1, r3
 801e0ae:	000f      	movs	r7, r1
 801e0b0:	e7a9      	b.n	801e006 <_strtod_l+0x64e>
 801e0b2:	2201      	movs	r2, #1
 801e0b4:	4252      	negs	r2, r2
 801e0b6:	409a      	lsls	r2, r3
 801e0b8:	4016      	ands	r6, r2
 801e0ba:	e7a4      	b.n	801e006 <_strtod_l+0x64e>
 801e0bc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e0be:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e0c0:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801e0c2:	1ad4      	subs	r4, r2, r3
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	db01      	blt.n	801e0cc <_strtod_l+0x714>
 801e0c8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801e0ca:	195d      	adds	r5, r3, r5
 801e0cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801e0ce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801e0d0:	1a5b      	subs	r3, r3, r1
 801e0d2:	2136      	movs	r1, #54	@ 0x36
 801e0d4:	189b      	adds	r3, r3, r2
 801e0d6:	1a8a      	subs	r2, r1, r2
 801e0d8:	497a      	ldr	r1, [pc, #488]	@ (801e2c4 <_strtod_l+0x90c>)
 801e0da:	2001      	movs	r0, #1
 801e0dc:	468c      	mov	ip, r1
 801e0de:	2100      	movs	r1, #0
 801e0e0:	3b01      	subs	r3, #1
 801e0e2:	9116      	str	r1, [sp, #88]	@ 0x58
 801e0e4:	9014      	str	r0, [sp, #80]	@ 0x50
 801e0e6:	4563      	cmp	r3, ip
 801e0e8:	da06      	bge.n	801e0f8 <_strtod_l+0x740>
 801e0ea:	4661      	mov	r1, ip
 801e0ec:	1ac9      	subs	r1, r1, r3
 801e0ee:	1a52      	subs	r2, r2, r1
 801e0f0:	291f      	cmp	r1, #31
 801e0f2:	dc3f      	bgt.n	801e174 <_strtod_l+0x7bc>
 801e0f4:	4088      	lsls	r0, r1
 801e0f6:	9014      	str	r0, [sp, #80]	@ 0x50
 801e0f8:	18ab      	adds	r3, r5, r2
 801e0fa:	930e      	str	r3, [sp, #56]	@ 0x38
 801e0fc:	18a4      	adds	r4, r4, r2
 801e0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e100:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e102:	191c      	adds	r4, r3, r4
 801e104:	002b      	movs	r3, r5
 801e106:	4295      	cmp	r5, r2
 801e108:	dd00      	ble.n	801e10c <_strtod_l+0x754>
 801e10a:	0013      	movs	r3, r2
 801e10c:	42a3      	cmp	r3, r4
 801e10e:	dd00      	ble.n	801e112 <_strtod_l+0x75a>
 801e110:	0023      	movs	r3, r4
 801e112:	2b00      	cmp	r3, #0
 801e114:	dd04      	ble.n	801e120 <_strtod_l+0x768>
 801e116:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e118:	1ae4      	subs	r4, r4, r3
 801e11a:	1ad2      	subs	r2, r2, r3
 801e11c:	920e      	str	r2, [sp, #56]	@ 0x38
 801e11e:	1aed      	subs	r5, r5, r3
 801e120:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e122:	2b00      	cmp	r3, #0
 801e124:	dd16      	ble.n	801e154 <_strtod_l+0x79c>
 801e126:	001a      	movs	r2, r3
 801e128:	9907      	ldr	r1, [sp, #28]
 801e12a:	9805      	ldr	r0, [sp, #20]
 801e12c:	f002 ffa6 	bl	802107c <__pow5mult>
 801e130:	9007      	str	r0, [sp, #28]
 801e132:	2800      	cmp	r0, #0
 801e134:	d0b3      	beq.n	801e09e <_strtod_l+0x6e6>
 801e136:	0001      	movs	r1, r0
 801e138:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e13a:	9805      	ldr	r0, [sp, #20]
 801e13c:	f002 feec 	bl	8020f18 <__multiply>
 801e140:	9013      	str	r0, [sp, #76]	@ 0x4c
 801e142:	2800      	cmp	r0, #0
 801e144:	d100      	bne.n	801e148 <_strtod_l+0x790>
 801e146:	e671      	b.n	801de2c <_strtod_l+0x474>
 801e148:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e14a:	9805      	ldr	r0, [sp, #20]
 801e14c:	f002 fdc8 	bl	8020ce0 <_Bfree>
 801e150:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e152:	931e      	str	r3, [sp, #120]	@ 0x78
 801e154:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e156:	2b00      	cmp	r3, #0
 801e158:	dc12      	bgt.n	801e180 <_strtod_l+0x7c8>
 801e15a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e15c:	2b00      	cmp	r3, #0
 801e15e:	dd18      	ble.n	801e192 <_strtod_l+0x7da>
 801e160:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e162:	9908      	ldr	r1, [sp, #32]
 801e164:	9805      	ldr	r0, [sp, #20]
 801e166:	f002 ff89 	bl	802107c <__pow5mult>
 801e16a:	9008      	str	r0, [sp, #32]
 801e16c:	2800      	cmp	r0, #0
 801e16e:	d110      	bne.n	801e192 <_strtod_l+0x7da>
 801e170:	2300      	movs	r3, #0
 801e172:	e65a      	b.n	801de2a <_strtod_l+0x472>
 801e174:	4954      	ldr	r1, [pc, #336]	@ (801e2c8 <_strtod_l+0x910>)
 801e176:	1acb      	subs	r3, r1, r3
 801e178:	0001      	movs	r1, r0
 801e17a:	4099      	lsls	r1, r3
 801e17c:	9116      	str	r1, [sp, #88]	@ 0x58
 801e17e:	e7ba      	b.n	801e0f6 <_strtod_l+0x73e>
 801e180:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e182:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e184:	9805      	ldr	r0, [sp, #20]
 801e186:	f002 ffd5 	bl	8021134 <__lshift>
 801e18a:	901e      	str	r0, [sp, #120]	@ 0x78
 801e18c:	2800      	cmp	r0, #0
 801e18e:	d1e4      	bne.n	801e15a <_strtod_l+0x7a2>
 801e190:	e64c      	b.n	801de2c <_strtod_l+0x474>
 801e192:	2c00      	cmp	r4, #0
 801e194:	dd07      	ble.n	801e1a6 <_strtod_l+0x7ee>
 801e196:	0022      	movs	r2, r4
 801e198:	9908      	ldr	r1, [sp, #32]
 801e19a:	9805      	ldr	r0, [sp, #20]
 801e19c:	f002 ffca 	bl	8021134 <__lshift>
 801e1a0:	9008      	str	r0, [sp, #32]
 801e1a2:	2800      	cmp	r0, #0
 801e1a4:	d0e4      	beq.n	801e170 <_strtod_l+0x7b8>
 801e1a6:	2d00      	cmp	r5, #0
 801e1a8:	dd08      	ble.n	801e1bc <_strtod_l+0x804>
 801e1aa:	002a      	movs	r2, r5
 801e1ac:	9907      	ldr	r1, [sp, #28]
 801e1ae:	9805      	ldr	r0, [sp, #20]
 801e1b0:	f002 ffc0 	bl	8021134 <__lshift>
 801e1b4:	9007      	str	r0, [sp, #28]
 801e1b6:	2800      	cmp	r0, #0
 801e1b8:	d100      	bne.n	801e1bc <_strtod_l+0x804>
 801e1ba:	e637      	b.n	801de2c <_strtod_l+0x474>
 801e1bc:	9a08      	ldr	r2, [sp, #32]
 801e1be:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e1c0:	9805      	ldr	r0, [sp, #20]
 801e1c2:	f003 f83f 	bl	8021244 <__mdiff>
 801e1c6:	9006      	str	r0, [sp, #24]
 801e1c8:	2800      	cmp	r0, #0
 801e1ca:	d100      	bne.n	801e1ce <_strtod_l+0x816>
 801e1cc:	e62e      	b.n	801de2c <_strtod_l+0x474>
 801e1ce:	68c3      	ldr	r3, [r0, #12]
 801e1d0:	9907      	ldr	r1, [sp, #28]
 801e1d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e1d4:	2300      	movs	r3, #0
 801e1d6:	60c3      	str	r3, [r0, #12]
 801e1d8:	f003 f818 	bl	802120c <__mcmp>
 801e1dc:	2800      	cmp	r0, #0
 801e1de:	da3b      	bge.n	801e258 <_strtod_l+0x8a0>
 801e1e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e1e2:	4333      	orrs	r3, r6
 801e1e4:	d167      	bne.n	801e2b6 <_strtod_l+0x8fe>
 801e1e6:	033b      	lsls	r3, r7, #12
 801e1e8:	d165      	bne.n	801e2b6 <_strtod_l+0x8fe>
 801e1ea:	22d6      	movs	r2, #214	@ 0xd6
 801e1ec:	4b37      	ldr	r3, [pc, #220]	@ (801e2cc <_strtod_l+0x914>)
 801e1ee:	04d2      	lsls	r2, r2, #19
 801e1f0:	403b      	ands	r3, r7
 801e1f2:	4293      	cmp	r3, r2
 801e1f4:	d95f      	bls.n	801e2b6 <_strtod_l+0x8fe>
 801e1f6:	9b06      	ldr	r3, [sp, #24]
 801e1f8:	695b      	ldr	r3, [r3, #20]
 801e1fa:	2b00      	cmp	r3, #0
 801e1fc:	d103      	bne.n	801e206 <_strtod_l+0x84e>
 801e1fe:	9b06      	ldr	r3, [sp, #24]
 801e200:	691b      	ldr	r3, [r3, #16]
 801e202:	2b01      	cmp	r3, #1
 801e204:	dd57      	ble.n	801e2b6 <_strtod_l+0x8fe>
 801e206:	9906      	ldr	r1, [sp, #24]
 801e208:	2201      	movs	r2, #1
 801e20a:	9805      	ldr	r0, [sp, #20]
 801e20c:	f002 ff92 	bl	8021134 <__lshift>
 801e210:	9907      	ldr	r1, [sp, #28]
 801e212:	9006      	str	r0, [sp, #24]
 801e214:	f002 fffa 	bl	802120c <__mcmp>
 801e218:	2800      	cmp	r0, #0
 801e21a:	dd4c      	ble.n	801e2b6 <_strtod_l+0x8fe>
 801e21c:	4b2b      	ldr	r3, [pc, #172]	@ (801e2cc <_strtod_l+0x914>)
 801e21e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e220:	403b      	ands	r3, r7
 801e222:	2a00      	cmp	r2, #0
 801e224:	d074      	beq.n	801e310 <_strtod_l+0x958>
 801e226:	22d6      	movs	r2, #214	@ 0xd6
 801e228:	04d2      	lsls	r2, r2, #19
 801e22a:	4293      	cmp	r3, r2
 801e22c:	d870      	bhi.n	801e310 <_strtod_l+0x958>
 801e22e:	22dc      	movs	r2, #220	@ 0xdc
 801e230:	0492      	lsls	r2, r2, #18
 801e232:	4293      	cmp	r3, r2
 801e234:	d800      	bhi.n	801e238 <_strtod_l+0x880>
 801e236:	e695      	b.n	801df64 <_strtod_l+0x5ac>
 801e238:	0030      	movs	r0, r6
 801e23a:	0039      	movs	r1, r7
 801e23c:	4b24      	ldr	r3, [pc, #144]	@ (801e2d0 <_strtod_l+0x918>)
 801e23e:	2200      	movs	r2, #0
 801e240:	f7e4 f9fc 	bl	800263c <__aeabi_dmul>
 801e244:	4b21      	ldr	r3, [pc, #132]	@ (801e2cc <_strtod_l+0x914>)
 801e246:	0006      	movs	r6, r0
 801e248:	000f      	movs	r7, r1
 801e24a:	420b      	tst	r3, r1
 801e24c:	d000      	beq.n	801e250 <_strtod_l+0x898>
 801e24e:	e5f6      	b.n	801de3e <_strtod_l+0x486>
 801e250:	2322      	movs	r3, #34	@ 0x22
 801e252:	9a05      	ldr	r2, [sp, #20]
 801e254:	6013      	str	r3, [r2, #0]
 801e256:	e5f2      	b.n	801de3e <_strtod_l+0x486>
 801e258:	970e      	str	r7, [sp, #56]	@ 0x38
 801e25a:	2800      	cmp	r0, #0
 801e25c:	d175      	bne.n	801e34a <_strtod_l+0x992>
 801e25e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e260:	033b      	lsls	r3, r7, #12
 801e262:	0b1b      	lsrs	r3, r3, #12
 801e264:	2a00      	cmp	r2, #0
 801e266:	d039      	beq.n	801e2dc <_strtod_l+0x924>
 801e268:	4a1a      	ldr	r2, [pc, #104]	@ (801e2d4 <_strtod_l+0x91c>)
 801e26a:	4293      	cmp	r3, r2
 801e26c:	d138      	bne.n	801e2e0 <_strtod_l+0x928>
 801e26e:	2101      	movs	r1, #1
 801e270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e272:	4249      	negs	r1, r1
 801e274:	0032      	movs	r2, r6
 801e276:	0008      	movs	r0, r1
 801e278:	2b00      	cmp	r3, #0
 801e27a:	d00b      	beq.n	801e294 <_strtod_l+0x8dc>
 801e27c:	24d4      	movs	r4, #212	@ 0xd4
 801e27e:	4b13      	ldr	r3, [pc, #76]	@ (801e2cc <_strtod_l+0x914>)
 801e280:	0008      	movs	r0, r1
 801e282:	403b      	ands	r3, r7
 801e284:	04e4      	lsls	r4, r4, #19
 801e286:	42a3      	cmp	r3, r4
 801e288:	d804      	bhi.n	801e294 <_strtod_l+0x8dc>
 801e28a:	306c      	adds	r0, #108	@ 0x6c
 801e28c:	0d1b      	lsrs	r3, r3, #20
 801e28e:	1ac3      	subs	r3, r0, r3
 801e290:	4099      	lsls	r1, r3
 801e292:	0008      	movs	r0, r1
 801e294:	4282      	cmp	r2, r0
 801e296:	d123      	bne.n	801e2e0 <_strtod_l+0x928>
 801e298:	4b0f      	ldr	r3, [pc, #60]	@ (801e2d8 <_strtod_l+0x920>)
 801e29a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e29c:	4299      	cmp	r1, r3
 801e29e:	d102      	bne.n	801e2a6 <_strtod_l+0x8ee>
 801e2a0:	3201      	adds	r2, #1
 801e2a2:	d100      	bne.n	801e2a6 <_strtod_l+0x8ee>
 801e2a4:	e5c2      	b.n	801de2c <_strtod_l+0x474>
 801e2a6:	4b09      	ldr	r3, [pc, #36]	@ (801e2cc <_strtod_l+0x914>)
 801e2a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e2aa:	2600      	movs	r6, #0
 801e2ac:	401a      	ands	r2, r3
 801e2ae:	0013      	movs	r3, r2
 801e2b0:	2280      	movs	r2, #128	@ 0x80
 801e2b2:	0352      	lsls	r2, r2, #13
 801e2b4:	189f      	adds	r7, r3, r2
 801e2b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d1bd      	bne.n	801e238 <_strtod_l+0x880>
 801e2bc:	e5bf      	b.n	801de3e <_strtod_l+0x486>
 801e2be:	46c0      	nop			@ (mov r8, r8)
 801e2c0:	080248a8 	.word	0x080248a8
 801e2c4:	fffffc02 	.word	0xfffffc02
 801e2c8:	fffffbe2 	.word	0xfffffbe2
 801e2cc:	7ff00000 	.word	0x7ff00000
 801e2d0:	39500000 	.word	0x39500000
 801e2d4:	000fffff 	.word	0x000fffff
 801e2d8:	7fefffff 	.word	0x7fefffff
 801e2dc:	4333      	orrs	r3, r6
 801e2de:	d09d      	beq.n	801e21c <_strtod_l+0x864>
 801e2e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e2e2:	2b00      	cmp	r3, #0
 801e2e4:	d01c      	beq.n	801e320 <_strtod_l+0x968>
 801e2e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e2e8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e2ea:	4213      	tst	r3, r2
 801e2ec:	d0e3      	beq.n	801e2b6 <_strtod_l+0x8fe>
 801e2ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e2f0:	0030      	movs	r0, r6
 801e2f2:	0039      	movs	r1, r7
 801e2f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e2f6:	2b00      	cmp	r3, #0
 801e2f8:	d016      	beq.n	801e328 <_strtod_l+0x970>
 801e2fa:	f7ff fb45 	bl	801d988 <sulp>
 801e2fe:	0002      	movs	r2, r0
 801e300:	000b      	movs	r3, r1
 801e302:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e304:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e306:	f7e3 f9f1 	bl	80016ec <__aeabi_dadd>
 801e30a:	0006      	movs	r6, r0
 801e30c:	000f      	movs	r7, r1
 801e30e:	e7d2      	b.n	801e2b6 <_strtod_l+0x8fe>
 801e310:	2601      	movs	r6, #1
 801e312:	4a92      	ldr	r2, [pc, #584]	@ (801e55c <_strtod_l+0xba4>)
 801e314:	4276      	negs	r6, r6
 801e316:	189b      	adds	r3, r3, r2
 801e318:	4a91      	ldr	r2, [pc, #580]	@ (801e560 <_strtod_l+0xba8>)
 801e31a:	431a      	orrs	r2, r3
 801e31c:	0017      	movs	r7, r2
 801e31e:	e7ca      	b.n	801e2b6 <_strtod_l+0x8fe>
 801e320:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e322:	4233      	tst	r3, r6
 801e324:	d0c7      	beq.n	801e2b6 <_strtod_l+0x8fe>
 801e326:	e7e2      	b.n	801e2ee <_strtod_l+0x936>
 801e328:	f7ff fb2e 	bl	801d988 <sulp>
 801e32c:	0002      	movs	r2, r0
 801e32e:	000b      	movs	r3, r1
 801e330:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e332:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e334:	f7e4 fc4a 	bl	8002bcc <__aeabi_dsub>
 801e338:	2200      	movs	r2, #0
 801e33a:	2300      	movs	r3, #0
 801e33c:	0006      	movs	r6, r0
 801e33e:	000f      	movs	r7, r1
 801e340:	f7e2 f8b6 	bl	80004b0 <__aeabi_dcmpeq>
 801e344:	2800      	cmp	r0, #0
 801e346:	d0b6      	beq.n	801e2b6 <_strtod_l+0x8fe>
 801e348:	e60c      	b.n	801df64 <_strtod_l+0x5ac>
 801e34a:	9907      	ldr	r1, [sp, #28]
 801e34c:	9806      	ldr	r0, [sp, #24]
 801e34e:	f003 f8df 	bl	8021510 <__ratio>
 801e352:	2380      	movs	r3, #128	@ 0x80
 801e354:	2200      	movs	r2, #0
 801e356:	05db      	lsls	r3, r3, #23
 801e358:	0004      	movs	r4, r0
 801e35a:	000d      	movs	r5, r1
 801e35c:	f7e2 f8b8 	bl	80004d0 <__aeabi_dcmple>
 801e360:	2800      	cmp	r0, #0
 801e362:	d06c      	beq.n	801e43e <_strtod_l+0xa86>
 801e364:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e366:	2b00      	cmp	r3, #0
 801e368:	d177      	bne.n	801e45a <_strtod_l+0xaa2>
 801e36a:	2e00      	cmp	r6, #0
 801e36c:	d157      	bne.n	801e41e <_strtod_l+0xa66>
 801e36e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e370:	031b      	lsls	r3, r3, #12
 801e372:	d15a      	bne.n	801e42a <_strtod_l+0xa72>
 801e374:	2200      	movs	r2, #0
 801e376:	0020      	movs	r0, r4
 801e378:	0029      	movs	r1, r5
 801e37a:	4b7a      	ldr	r3, [pc, #488]	@ (801e564 <_strtod_l+0xbac>)
 801e37c:	f7e2 f89e 	bl	80004bc <__aeabi_dcmplt>
 801e380:	2800      	cmp	r0, #0
 801e382:	d159      	bne.n	801e438 <_strtod_l+0xa80>
 801e384:	0020      	movs	r0, r4
 801e386:	0029      	movs	r1, r5
 801e388:	2200      	movs	r2, #0
 801e38a:	4b77      	ldr	r3, [pc, #476]	@ (801e568 <_strtod_l+0xbb0>)
 801e38c:	f7e4 f956 	bl	800263c <__aeabi_dmul>
 801e390:	0004      	movs	r4, r0
 801e392:	000d      	movs	r5, r1
 801e394:	2380      	movs	r3, #128	@ 0x80
 801e396:	061b      	lsls	r3, r3, #24
 801e398:	18eb      	adds	r3, r5, r3
 801e39a:	940a      	str	r4, [sp, #40]	@ 0x28
 801e39c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e39e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e3a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e3a2:	9214      	str	r2, [sp, #80]	@ 0x50
 801e3a4:	9315      	str	r3, [sp, #84]	@ 0x54
 801e3a6:	4a71      	ldr	r2, [pc, #452]	@ (801e56c <_strtod_l+0xbb4>)
 801e3a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e3aa:	4013      	ands	r3, r2
 801e3ac:	9316      	str	r3, [sp, #88]	@ 0x58
 801e3ae:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e3b0:	4b6f      	ldr	r3, [pc, #444]	@ (801e570 <_strtod_l+0xbb8>)
 801e3b2:	429a      	cmp	r2, r3
 801e3b4:	d000      	beq.n	801e3b8 <_strtod_l+0xa00>
 801e3b6:	e087      	b.n	801e4c8 <_strtod_l+0xb10>
 801e3b8:	4a6e      	ldr	r2, [pc, #440]	@ (801e574 <_strtod_l+0xbbc>)
 801e3ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e3bc:	4694      	mov	ip, r2
 801e3be:	4463      	add	r3, ip
 801e3c0:	001f      	movs	r7, r3
 801e3c2:	0030      	movs	r0, r6
 801e3c4:	0019      	movs	r1, r3
 801e3c6:	f002 ffd7 	bl	8021378 <__ulp>
 801e3ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e3cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e3ce:	f7e4 f935 	bl	800263c <__aeabi_dmul>
 801e3d2:	0032      	movs	r2, r6
 801e3d4:	003b      	movs	r3, r7
 801e3d6:	f7e3 f989 	bl	80016ec <__aeabi_dadd>
 801e3da:	4a64      	ldr	r2, [pc, #400]	@ (801e56c <_strtod_l+0xbb4>)
 801e3dc:	4b66      	ldr	r3, [pc, #408]	@ (801e578 <_strtod_l+0xbc0>)
 801e3de:	0006      	movs	r6, r0
 801e3e0:	400a      	ands	r2, r1
 801e3e2:	429a      	cmp	r2, r3
 801e3e4:	d940      	bls.n	801e468 <_strtod_l+0xab0>
 801e3e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e3e8:	4a64      	ldr	r2, [pc, #400]	@ (801e57c <_strtod_l+0xbc4>)
 801e3ea:	4293      	cmp	r3, r2
 801e3ec:	d103      	bne.n	801e3f6 <_strtod_l+0xa3e>
 801e3ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e3f0:	3301      	adds	r3, #1
 801e3f2:	d100      	bne.n	801e3f6 <_strtod_l+0xa3e>
 801e3f4:	e51a      	b.n	801de2c <_strtod_l+0x474>
 801e3f6:	2601      	movs	r6, #1
 801e3f8:	4f60      	ldr	r7, [pc, #384]	@ (801e57c <_strtod_l+0xbc4>)
 801e3fa:	4276      	negs	r6, r6
 801e3fc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e3fe:	9805      	ldr	r0, [sp, #20]
 801e400:	f002 fc6e 	bl	8020ce0 <_Bfree>
 801e404:	9908      	ldr	r1, [sp, #32]
 801e406:	9805      	ldr	r0, [sp, #20]
 801e408:	f002 fc6a 	bl	8020ce0 <_Bfree>
 801e40c:	9907      	ldr	r1, [sp, #28]
 801e40e:	9805      	ldr	r0, [sp, #20]
 801e410:	f002 fc66 	bl	8020ce0 <_Bfree>
 801e414:	9906      	ldr	r1, [sp, #24]
 801e416:	9805      	ldr	r0, [sp, #20]
 801e418:	f002 fc62 	bl	8020ce0 <_Bfree>
 801e41c:	e617      	b.n	801e04e <_strtod_l+0x696>
 801e41e:	2e01      	cmp	r6, #1
 801e420:	d103      	bne.n	801e42a <_strtod_l+0xa72>
 801e422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e424:	2b00      	cmp	r3, #0
 801e426:	d100      	bne.n	801e42a <_strtod_l+0xa72>
 801e428:	e59c      	b.n	801df64 <_strtod_l+0x5ac>
 801e42a:	2300      	movs	r3, #0
 801e42c:	4c54      	ldr	r4, [pc, #336]	@ (801e580 <_strtod_l+0xbc8>)
 801e42e:	4d4d      	ldr	r5, [pc, #308]	@ (801e564 <_strtod_l+0xbac>)
 801e430:	930a      	str	r3, [sp, #40]	@ 0x28
 801e432:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e434:	2400      	movs	r4, #0
 801e436:	e7b2      	b.n	801e39e <_strtod_l+0x9e6>
 801e438:	2400      	movs	r4, #0
 801e43a:	4d4b      	ldr	r5, [pc, #300]	@ (801e568 <_strtod_l+0xbb0>)
 801e43c:	e7aa      	b.n	801e394 <_strtod_l+0x9dc>
 801e43e:	0020      	movs	r0, r4
 801e440:	0029      	movs	r1, r5
 801e442:	4b49      	ldr	r3, [pc, #292]	@ (801e568 <_strtod_l+0xbb0>)
 801e444:	2200      	movs	r2, #0
 801e446:	f7e4 f8f9 	bl	800263c <__aeabi_dmul>
 801e44a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e44c:	0004      	movs	r4, r0
 801e44e:	000d      	movs	r5, r1
 801e450:	2b00      	cmp	r3, #0
 801e452:	d09f      	beq.n	801e394 <_strtod_l+0x9dc>
 801e454:	940a      	str	r4, [sp, #40]	@ 0x28
 801e456:	950b      	str	r5, [sp, #44]	@ 0x2c
 801e458:	e7a1      	b.n	801e39e <_strtod_l+0x9e6>
 801e45a:	2300      	movs	r3, #0
 801e45c:	4c41      	ldr	r4, [pc, #260]	@ (801e564 <_strtod_l+0xbac>)
 801e45e:	0025      	movs	r5, r4
 801e460:	930a      	str	r3, [sp, #40]	@ 0x28
 801e462:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e464:	001c      	movs	r4, r3
 801e466:	e79a      	b.n	801e39e <_strtod_l+0x9e6>
 801e468:	23d4      	movs	r3, #212	@ 0xd4
 801e46a:	049b      	lsls	r3, r3, #18
 801e46c:	18cf      	adds	r7, r1, r3
 801e46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e470:	9710      	str	r7, [sp, #64]	@ 0x40
 801e472:	2b00      	cmp	r3, #0
 801e474:	d1c2      	bne.n	801e3fc <_strtod_l+0xa44>
 801e476:	4b3d      	ldr	r3, [pc, #244]	@ (801e56c <_strtod_l+0xbb4>)
 801e478:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e47a:	403b      	ands	r3, r7
 801e47c:	429a      	cmp	r2, r3
 801e47e:	d1bd      	bne.n	801e3fc <_strtod_l+0xa44>
 801e480:	0020      	movs	r0, r4
 801e482:	0029      	movs	r1, r5
 801e484:	f7e2 f900 	bl	8000688 <__aeabi_d2lz>
 801e488:	f7e2 f938 	bl	80006fc <__aeabi_l2d>
 801e48c:	0002      	movs	r2, r0
 801e48e:	000b      	movs	r3, r1
 801e490:	0020      	movs	r0, r4
 801e492:	0029      	movs	r1, r5
 801e494:	f7e4 fb9a 	bl	8002bcc <__aeabi_dsub>
 801e498:	033c      	lsls	r4, r7, #12
 801e49a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e49c:	0b24      	lsrs	r4, r4, #12
 801e49e:	4334      	orrs	r4, r6
 801e4a0:	900e      	str	r0, [sp, #56]	@ 0x38
 801e4a2:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e4a4:	4a37      	ldr	r2, [pc, #220]	@ (801e584 <_strtod_l+0xbcc>)
 801e4a6:	431c      	orrs	r4, r3
 801e4a8:	d052      	beq.n	801e550 <_strtod_l+0xb98>
 801e4aa:	4b37      	ldr	r3, [pc, #220]	@ (801e588 <_strtod_l+0xbd0>)
 801e4ac:	f7e2 f806 	bl	80004bc <__aeabi_dcmplt>
 801e4b0:	2800      	cmp	r0, #0
 801e4b2:	d000      	beq.n	801e4b6 <_strtod_l+0xafe>
 801e4b4:	e4c3      	b.n	801de3e <_strtod_l+0x486>
 801e4b6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e4b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e4ba:	4a34      	ldr	r2, [pc, #208]	@ (801e58c <_strtod_l+0xbd4>)
 801e4bc:	4b2a      	ldr	r3, [pc, #168]	@ (801e568 <_strtod_l+0xbb0>)
 801e4be:	f7e2 f811 	bl	80004e4 <__aeabi_dcmpgt>
 801e4c2:	2800      	cmp	r0, #0
 801e4c4:	d09a      	beq.n	801e3fc <_strtod_l+0xa44>
 801e4c6:	e4ba      	b.n	801de3e <_strtod_l+0x486>
 801e4c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	d02a      	beq.n	801e524 <_strtod_l+0xb6c>
 801e4ce:	23d4      	movs	r3, #212	@ 0xd4
 801e4d0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e4d2:	04db      	lsls	r3, r3, #19
 801e4d4:	429a      	cmp	r2, r3
 801e4d6:	d825      	bhi.n	801e524 <_strtod_l+0xb6c>
 801e4d8:	0020      	movs	r0, r4
 801e4da:	0029      	movs	r1, r5
 801e4dc:	4a2c      	ldr	r2, [pc, #176]	@ (801e590 <_strtod_l+0xbd8>)
 801e4de:	4b2d      	ldr	r3, [pc, #180]	@ (801e594 <_strtod_l+0xbdc>)
 801e4e0:	f7e1 fff6 	bl	80004d0 <__aeabi_dcmple>
 801e4e4:	2800      	cmp	r0, #0
 801e4e6:	d016      	beq.n	801e516 <_strtod_l+0xb5e>
 801e4e8:	0020      	movs	r0, r4
 801e4ea:	0029      	movs	r1, r5
 801e4ec:	f7e2 f8ae 	bl	800064c <__aeabi_d2uiz>
 801e4f0:	2800      	cmp	r0, #0
 801e4f2:	d100      	bne.n	801e4f6 <_strtod_l+0xb3e>
 801e4f4:	3001      	adds	r0, #1
 801e4f6:	f7e4 ff91 	bl	800341c <__aeabi_ui2d>
 801e4fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e4fc:	0004      	movs	r4, r0
 801e4fe:	000d      	movs	r5, r1
 801e500:	2b00      	cmp	r3, #0
 801e502:	d122      	bne.n	801e54a <_strtod_l+0xb92>
 801e504:	2380      	movs	r3, #128	@ 0x80
 801e506:	061b      	lsls	r3, r3, #24
 801e508:	18cb      	adds	r3, r1, r3
 801e50a:	9018      	str	r0, [sp, #96]	@ 0x60
 801e50c:	9319      	str	r3, [sp, #100]	@ 0x64
 801e50e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e510:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e512:	9214      	str	r2, [sp, #80]	@ 0x50
 801e514:	9315      	str	r3, [sp, #84]	@ 0x54
 801e516:	22d6      	movs	r2, #214	@ 0xd6
 801e518:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e51a:	04d2      	lsls	r2, r2, #19
 801e51c:	189b      	adds	r3, r3, r2
 801e51e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e520:	1a9b      	subs	r3, r3, r2
 801e522:	9315      	str	r3, [sp, #84]	@ 0x54
 801e524:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e526:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e528:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801e52a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801e52c:	f002 ff24 	bl	8021378 <__ulp>
 801e530:	0002      	movs	r2, r0
 801e532:	000b      	movs	r3, r1
 801e534:	0030      	movs	r0, r6
 801e536:	0039      	movs	r1, r7
 801e538:	f7e4 f880 	bl	800263c <__aeabi_dmul>
 801e53c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e53e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e540:	f7e3 f8d4 	bl	80016ec <__aeabi_dadd>
 801e544:	0006      	movs	r6, r0
 801e546:	000f      	movs	r7, r1
 801e548:	e791      	b.n	801e46e <_strtod_l+0xab6>
 801e54a:	9418      	str	r4, [sp, #96]	@ 0x60
 801e54c:	9519      	str	r5, [sp, #100]	@ 0x64
 801e54e:	e7de      	b.n	801e50e <_strtod_l+0xb56>
 801e550:	4b11      	ldr	r3, [pc, #68]	@ (801e598 <_strtod_l+0xbe0>)
 801e552:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e554:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e556:	f7e1 ffb1 	bl	80004bc <__aeabi_dcmplt>
 801e55a:	e7b2      	b.n	801e4c2 <_strtod_l+0xb0a>
 801e55c:	fff00000 	.word	0xfff00000
 801e560:	000fffff 	.word	0x000fffff
 801e564:	3ff00000 	.word	0x3ff00000
 801e568:	3fe00000 	.word	0x3fe00000
 801e56c:	7ff00000 	.word	0x7ff00000
 801e570:	7fe00000 	.word	0x7fe00000
 801e574:	fcb00000 	.word	0xfcb00000
 801e578:	7c9fffff 	.word	0x7c9fffff
 801e57c:	7fefffff 	.word	0x7fefffff
 801e580:	bff00000 	.word	0xbff00000
 801e584:	94a03595 	.word	0x94a03595
 801e588:	3fdfffff 	.word	0x3fdfffff
 801e58c:	35afe535 	.word	0x35afe535
 801e590:	ffc00000 	.word	0xffc00000
 801e594:	41dfffff 	.word	0x41dfffff
 801e598:	3fcfffff 	.word	0x3fcfffff

0801e59c <strtod>:
 801e59c:	b510      	push	{r4, lr}
 801e59e:	4c04      	ldr	r4, [pc, #16]	@ (801e5b0 <strtod+0x14>)
 801e5a0:	000a      	movs	r2, r1
 801e5a2:	0001      	movs	r1, r0
 801e5a4:	4b03      	ldr	r3, [pc, #12]	@ (801e5b4 <strtod+0x18>)
 801e5a6:	6820      	ldr	r0, [r4, #0]
 801e5a8:	f7ff fa06 	bl	801d9b8 <_strtod_l>
 801e5ac:	bd10      	pop	{r4, pc}
 801e5ae:	46c0      	nop			@ (mov r8, r8)
 801e5b0:	200003c8 	.word	0x200003c8
 801e5b4:	2000025c 	.word	0x2000025c

0801e5b8 <_strtol_l.constprop.0>:
 801e5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5ba:	b085      	sub	sp, #20
 801e5bc:	0017      	movs	r7, r2
 801e5be:	001e      	movs	r6, r3
 801e5c0:	9003      	str	r0, [sp, #12]
 801e5c2:	9101      	str	r1, [sp, #4]
 801e5c4:	2b24      	cmp	r3, #36	@ 0x24
 801e5c6:	d844      	bhi.n	801e652 <_strtol_l.constprop.0+0x9a>
 801e5c8:	000c      	movs	r4, r1
 801e5ca:	2b01      	cmp	r3, #1
 801e5cc:	d041      	beq.n	801e652 <_strtol_l.constprop.0+0x9a>
 801e5ce:	4b3d      	ldr	r3, [pc, #244]	@ (801e6c4 <_strtol_l.constprop.0+0x10c>)
 801e5d0:	2208      	movs	r2, #8
 801e5d2:	469c      	mov	ip, r3
 801e5d4:	0023      	movs	r3, r4
 801e5d6:	4661      	mov	r1, ip
 801e5d8:	781d      	ldrb	r5, [r3, #0]
 801e5da:	3401      	adds	r4, #1
 801e5dc:	5d48      	ldrb	r0, [r1, r5]
 801e5de:	0001      	movs	r1, r0
 801e5e0:	4011      	ands	r1, r2
 801e5e2:	4210      	tst	r0, r2
 801e5e4:	d1f6      	bne.n	801e5d4 <_strtol_l.constprop.0+0x1c>
 801e5e6:	2d2d      	cmp	r5, #45	@ 0x2d
 801e5e8:	d13a      	bne.n	801e660 <_strtol_l.constprop.0+0xa8>
 801e5ea:	7825      	ldrb	r5, [r4, #0]
 801e5ec:	1c9c      	adds	r4, r3, #2
 801e5ee:	2301      	movs	r3, #1
 801e5f0:	9300      	str	r3, [sp, #0]
 801e5f2:	2210      	movs	r2, #16
 801e5f4:	0033      	movs	r3, r6
 801e5f6:	4393      	bics	r3, r2
 801e5f8:	d109      	bne.n	801e60e <_strtol_l.constprop.0+0x56>
 801e5fa:	2d30      	cmp	r5, #48	@ 0x30
 801e5fc:	d136      	bne.n	801e66c <_strtol_l.constprop.0+0xb4>
 801e5fe:	2120      	movs	r1, #32
 801e600:	7823      	ldrb	r3, [r4, #0]
 801e602:	438b      	bics	r3, r1
 801e604:	2b58      	cmp	r3, #88	@ 0x58
 801e606:	d131      	bne.n	801e66c <_strtol_l.constprop.0+0xb4>
 801e608:	0016      	movs	r6, r2
 801e60a:	7865      	ldrb	r5, [r4, #1]
 801e60c:	3402      	adds	r4, #2
 801e60e:	4a2e      	ldr	r2, [pc, #184]	@ (801e6c8 <_strtol_l.constprop.0+0x110>)
 801e610:	9b00      	ldr	r3, [sp, #0]
 801e612:	4694      	mov	ip, r2
 801e614:	4463      	add	r3, ip
 801e616:	0031      	movs	r1, r6
 801e618:	0018      	movs	r0, r3
 801e61a:	9302      	str	r3, [sp, #8]
 801e61c:	f7e1 fe48 	bl	80002b0 <__aeabi_uidivmod>
 801e620:	2200      	movs	r2, #0
 801e622:	4684      	mov	ip, r0
 801e624:	0010      	movs	r0, r2
 801e626:	002b      	movs	r3, r5
 801e628:	3b30      	subs	r3, #48	@ 0x30
 801e62a:	2b09      	cmp	r3, #9
 801e62c:	d825      	bhi.n	801e67a <_strtol_l.constprop.0+0xc2>
 801e62e:	001d      	movs	r5, r3
 801e630:	42ae      	cmp	r6, r5
 801e632:	dd31      	ble.n	801e698 <_strtol_l.constprop.0+0xe0>
 801e634:	1c53      	adds	r3, r2, #1
 801e636:	d009      	beq.n	801e64c <_strtol_l.constprop.0+0x94>
 801e638:	2201      	movs	r2, #1
 801e63a:	4252      	negs	r2, r2
 801e63c:	4584      	cmp	ip, r0
 801e63e:	d305      	bcc.n	801e64c <_strtol_l.constprop.0+0x94>
 801e640:	d101      	bne.n	801e646 <_strtol_l.constprop.0+0x8e>
 801e642:	42a9      	cmp	r1, r5
 801e644:	db25      	blt.n	801e692 <_strtol_l.constprop.0+0xda>
 801e646:	2201      	movs	r2, #1
 801e648:	4370      	muls	r0, r6
 801e64a:	1828      	adds	r0, r5, r0
 801e64c:	7825      	ldrb	r5, [r4, #0]
 801e64e:	3401      	adds	r4, #1
 801e650:	e7e9      	b.n	801e626 <_strtol_l.constprop.0+0x6e>
 801e652:	f000 ffc5 	bl	801f5e0 <__errno>
 801e656:	2316      	movs	r3, #22
 801e658:	6003      	str	r3, [r0, #0]
 801e65a:	2000      	movs	r0, #0
 801e65c:	b005      	add	sp, #20
 801e65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e660:	9100      	str	r1, [sp, #0]
 801e662:	2d2b      	cmp	r5, #43	@ 0x2b
 801e664:	d1c5      	bne.n	801e5f2 <_strtol_l.constprop.0+0x3a>
 801e666:	7825      	ldrb	r5, [r4, #0]
 801e668:	1c9c      	adds	r4, r3, #2
 801e66a:	e7c2      	b.n	801e5f2 <_strtol_l.constprop.0+0x3a>
 801e66c:	2e00      	cmp	r6, #0
 801e66e:	d1ce      	bne.n	801e60e <_strtol_l.constprop.0+0x56>
 801e670:	3608      	adds	r6, #8
 801e672:	2d30      	cmp	r5, #48	@ 0x30
 801e674:	d0cb      	beq.n	801e60e <_strtol_l.constprop.0+0x56>
 801e676:	3602      	adds	r6, #2
 801e678:	e7c9      	b.n	801e60e <_strtol_l.constprop.0+0x56>
 801e67a:	002b      	movs	r3, r5
 801e67c:	3b41      	subs	r3, #65	@ 0x41
 801e67e:	2b19      	cmp	r3, #25
 801e680:	d801      	bhi.n	801e686 <_strtol_l.constprop.0+0xce>
 801e682:	3d37      	subs	r5, #55	@ 0x37
 801e684:	e7d4      	b.n	801e630 <_strtol_l.constprop.0+0x78>
 801e686:	002b      	movs	r3, r5
 801e688:	3b61      	subs	r3, #97	@ 0x61
 801e68a:	2b19      	cmp	r3, #25
 801e68c:	d804      	bhi.n	801e698 <_strtol_l.constprop.0+0xe0>
 801e68e:	3d57      	subs	r5, #87	@ 0x57
 801e690:	e7ce      	b.n	801e630 <_strtol_l.constprop.0+0x78>
 801e692:	2201      	movs	r2, #1
 801e694:	4252      	negs	r2, r2
 801e696:	e7d9      	b.n	801e64c <_strtol_l.constprop.0+0x94>
 801e698:	1c53      	adds	r3, r2, #1
 801e69a:	d108      	bne.n	801e6ae <_strtol_l.constprop.0+0xf6>
 801e69c:	2322      	movs	r3, #34	@ 0x22
 801e69e:	9a03      	ldr	r2, [sp, #12]
 801e6a0:	9802      	ldr	r0, [sp, #8]
 801e6a2:	6013      	str	r3, [r2, #0]
 801e6a4:	2f00      	cmp	r7, #0
 801e6a6:	d0d9      	beq.n	801e65c <_strtol_l.constprop.0+0xa4>
 801e6a8:	1e63      	subs	r3, r4, #1
 801e6aa:	9301      	str	r3, [sp, #4]
 801e6ac:	e007      	b.n	801e6be <_strtol_l.constprop.0+0x106>
 801e6ae:	9b00      	ldr	r3, [sp, #0]
 801e6b0:	2b00      	cmp	r3, #0
 801e6b2:	d000      	beq.n	801e6b6 <_strtol_l.constprop.0+0xfe>
 801e6b4:	4240      	negs	r0, r0
 801e6b6:	2f00      	cmp	r7, #0
 801e6b8:	d0d0      	beq.n	801e65c <_strtol_l.constprop.0+0xa4>
 801e6ba:	2a00      	cmp	r2, #0
 801e6bc:	d1f4      	bne.n	801e6a8 <_strtol_l.constprop.0+0xf0>
 801e6be:	9b01      	ldr	r3, [sp, #4]
 801e6c0:	603b      	str	r3, [r7, #0]
 801e6c2:	e7cb      	b.n	801e65c <_strtol_l.constprop.0+0xa4>
 801e6c4:	080248d1 	.word	0x080248d1
 801e6c8:	7fffffff 	.word	0x7fffffff

0801e6cc <strtol>:
 801e6cc:	b510      	push	{r4, lr}
 801e6ce:	4c04      	ldr	r4, [pc, #16]	@ (801e6e0 <strtol+0x14>)
 801e6d0:	0013      	movs	r3, r2
 801e6d2:	000a      	movs	r2, r1
 801e6d4:	0001      	movs	r1, r0
 801e6d6:	6820      	ldr	r0, [r4, #0]
 801e6d8:	f7ff ff6e 	bl	801e5b8 <_strtol_l.constprop.0>
 801e6dc:	bd10      	pop	{r4, pc}
 801e6de:	46c0      	nop			@ (mov r8, r8)
 801e6e0:	200003c8 	.word	0x200003c8

0801e6e4 <__cvt>:
 801e6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e6e6:	001f      	movs	r7, r3
 801e6e8:	2300      	movs	r3, #0
 801e6ea:	0016      	movs	r6, r2
 801e6ec:	b08b      	sub	sp, #44	@ 0x2c
 801e6ee:	429f      	cmp	r7, r3
 801e6f0:	da04      	bge.n	801e6fc <__cvt+0x18>
 801e6f2:	2180      	movs	r1, #128	@ 0x80
 801e6f4:	0609      	lsls	r1, r1, #24
 801e6f6:	187b      	adds	r3, r7, r1
 801e6f8:	001f      	movs	r7, r3
 801e6fa:	232d      	movs	r3, #45	@ 0x2d
 801e6fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e6fe:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e700:	7013      	strb	r3, [r2, #0]
 801e702:	2320      	movs	r3, #32
 801e704:	2203      	movs	r2, #3
 801e706:	439d      	bics	r5, r3
 801e708:	2d46      	cmp	r5, #70	@ 0x46
 801e70a:	d007      	beq.n	801e71c <__cvt+0x38>
 801e70c:	002b      	movs	r3, r5
 801e70e:	3b45      	subs	r3, #69	@ 0x45
 801e710:	4259      	negs	r1, r3
 801e712:	414b      	adcs	r3, r1
 801e714:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e716:	3a01      	subs	r2, #1
 801e718:	18cb      	adds	r3, r1, r3
 801e71a:	9310      	str	r3, [sp, #64]	@ 0x40
 801e71c:	ab09      	add	r3, sp, #36	@ 0x24
 801e71e:	9304      	str	r3, [sp, #16]
 801e720:	ab08      	add	r3, sp, #32
 801e722:	9303      	str	r3, [sp, #12]
 801e724:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e726:	9200      	str	r2, [sp, #0]
 801e728:	9302      	str	r3, [sp, #8]
 801e72a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e72c:	0032      	movs	r2, r6
 801e72e:	9301      	str	r3, [sp, #4]
 801e730:	003b      	movs	r3, r7
 801e732:	f001 f82b 	bl	801f78c <_dtoa_r>
 801e736:	0004      	movs	r4, r0
 801e738:	2d47      	cmp	r5, #71	@ 0x47
 801e73a:	d11b      	bne.n	801e774 <__cvt+0x90>
 801e73c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e73e:	07db      	lsls	r3, r3, #31
 801e740:	d511      	bpl.n	801e766 <__cvt+0x82>
 801e742:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e744:	18c3      	adds	r3, r0, r3
 801e746:	9307      	str	r3, [sp, #28]
 801e748:	2200      	movs	r2, #0
 801e74a:	2300      	movs	r3, #0
 801e74c:	0030      	movs	r0, r6
 801e74e:	0039      	movs	r1, r7
 801e750:	f7e1 feae 	bl	80004b0 <__aeabi_dcmpeq>
 801e754:	2800      	cmp	r0, #0
 801e756:	d001      	beq.n	801e75c <__cvt+0x78>
 801e758:	9b07      	ldr	r3, [sp, #28]
 801e75a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e75c:	2230      	movs	r2, #48	@ 0x30
 801e75e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e760:	9907      	ldr	r1, [sp, #28]
 801e762:	428b      	cmp	r3, r1
 801e764:	d320      	bcc.n	801e7a8 <__cvt+0xc4>
 801e766:	0020      	movs	r0, r4
 801e768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e76a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e76c:	1b1b      	subs	r3, r3, r4
 801e76e:	6013      	str	r3, [r2, #0]
 801e770:	b00b      	add	sp, #44	@ 0x2c
 801e772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e774:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e776:	18c3      	adds	r3, r0, r3
 801e778:	9307      	str	r3, [sp, #28]
 801e77a:	2d46      	cmp	r5, #70	@ 0x46
 801e77c:	d1e4      	bne.n	801e748 <__cvt+0x64>
 801e77e:	7803      	ldrb	r3, [r0, #0]
 801e780:	2b30      	cmp	r3, #48	@ 0x30
 801e782:	d10c      	bne.n	801e79e <__cvt+0xba>
 801e784:	2200      	movs	r2, #0
 801e786:	2300      	movs	r3, #0
 801e788:	0030      	movs	r0, r6
 801e78a:	0039      	movs	r1, r7
 801e78c:	f7e1 fe90 	bl	80004b0 <__aeabi_dcmpeq>
 801e790:	2800      	cmp	r0, #0
 801e792:	d104      	bne.n	801e79e <__cvt+0xba>
 801e794:	2301      	movs	r3, #1
 801e796:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e798:	1a9b      	subs	r3, r3, r2
 801e79a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e79c:	6013      	str	r3, [r2, #0]
 801e79e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e7a0:	9a07      	ldr	r2, [sp, #28]
 801e7a2:	681b      	ldr	r3, [r3, #0]
 801e7a4:	18d3      	adds	r3, r2, r3
 801e7a6:	e7ce      	b.n	801e746 <__cvt+0x62>
 801e7a8:	1c59      	adds	r1, r3, #1
 801e7aa:	9109      	str	r1, [sp, #36]	@ 0x24
 801e7ac:	701a      	strb	r2, [r3, #0]
 801e7ae:	e7d6      	b.n	801e75e <__cvt+0x7a>

0801e7b0 <__exponent>:
 801e7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7b2:	232b      	movs	r3, #43	@ 0x2b
 801e7b4:	0005      	movs	r5, r0
 801e7b6:	000c      	movs	r4, r1
 801e7b8:	b085      	sub	sp, #20
 801e7ba:	7002      	strb	r2, [r0, #0]
 801e7bc:	2900      	cmp	r1, #0
 801e7be:	da01      	bge.n	801e7c4 <__exponent+0x14>
 801e7c0:	424c      	negs	r4, r1
 801e7c2:	3302      	adds	r3, #2
 801e7c4:	706b      	strb	r3, [r5, #1]
 801e7c6:	2c09      	cmp	r4, #9
 801e7c8:	dd2c      	ble.n	801e824 <__exponent+0x74>
 801e7ca:	ab02      	add	r3, sp, #8
 801e7cc:	1dde      	adds	r6, r3, #7
 801e7ce:	0020      	movs	r0, r4
 801e7d0:	210a      	movs	r1, #10
 801e7d2:	f7e1 fe57 	bl	8000484 <__aeabi_idivmod>
 801e7d6:	0037      	movs	r7, r6
 801e7d8:	3130      	adds	r1, #48	@ 0x30
 801e7da:	3e01      	subs	r6, #1
 801e7dc:	0020      	movs	r0, r4
 801e7de:	7031      	strb	r1, [r6, #0]
 801e7e0:	210a      	movs	r1, #10
 801e7e2:	9401      	str	r4, [sp, #4]
 801e7e4:	f7e1 fd68 	bl	80002b8 <__divsi3>
 801e7e8:	9b01      	ldr	r3, [sp, #4]
 801e7ea:	0004      	movs	r4, r0
 801e7ec:	2b63      	cmp	r3, #99	@ 0x63
 801e7ee:	dcee      	bgt.n	801e7ce <__exponent+0x1e>
 801e7f0:	1eba      	subs	r2, r7, #2
 801e7f2:	1ca8      	adds	r0, r5, #2
 801e7f4:	0001      	movs	r1, r0
 801e7f6:	0013      	movs	r3, r2
 801e7f8:	3430      	adds	r4, #48	@ 0x30
 801e7fa:	7014      	strb	r4, [r2, #0]
 801e7fc:	ac02      	add	r4, sp, #8
 801e7fe:	3407      	adds	r4, #7
 801e800:	429c      	cmp	r4, r3
 801e802:	d80a      	bhi.n	801e81a <__exponent+0x6a>
 801e804:	2300      	movs	r3, #0
 801e806:	42a2      	cmp	r2, r4
 801e808:	d803      	bhi.n	801e812 <__exponent+0x62>
 801e80a:	3309      	adds	r3, #9
 801e80c:	aa02      	add	r2, sp, #8
 801e80e:	189b      	adds	r3, r3, r2
 801e810:	1bdb      	subs	r3, r3, r7
 801e812:	18c0      	adds	r0, r0, r3
 801e814:	1b40      	subs	r0, r0, r5
 801e816:	b005      	add	sp, #20
 801e818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e81a:	781c      	ldrb	r4, [r3, #0]
 801e81c:	3301      	adds	r3, #1
 801e81e:	700c      	strb	r4, [r1, #0]
 801e820:	3101      	adds	r1, #1
 801e822:	e7eb      	b.n	801e7fc <__exponent+0x4c>
 801e824:	2330      	movs	r3, #48	@ 0x30
 801e826:	18e4      	adds	r4, r4, r3
 801e828:	70ab      	strb	r3, [r5, #2]
 801e82a:	1d28      	adds	r0, r5, #4
 801e82c:	70ec      	strb	r4, [r5, #3]
 801e82e:	e7f1      	b.n	801e814 <__exponent+0x64>

0801e830 <_printf_float>:
 801e830:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e832:	b097      	sub	sp, #92	@ 0x5c
 801e834:	000d      	movs	r5, r1
 801e836:	920a      	str	r2, [sp, #40]	@ 0x28
 801e838:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801e83a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e83c:	9009      	str	r0, [sp, #36]	@ 0x24
 801e83e:	f000 fe7d 	bl	801f53c <_localeconv_r>
 801e842:	6803      	ldr	r3, [r0, #0]
 801e844:	0018      	movs	r0, r3
 801e846:	930d      	str	r3, [sp, #52]	@ 0x34
 801e848:	f7e1 fc90 	bl	800016c <strlen>
 801e84c:	2300      	movs	r3, #0
 801e84e:	900f      	str	r0, [sp, #60]	@ 0x3c
 801e850:	9314      	str	r3, [sp, #80]	@ 0x50
 801e852:	7e2b      	ldrb	r3, [r5, #24]
 801e854:	2207      	movs	r2, #7
 801e856:	930c      	str	r3, [sp, #48]	@ 0x30
 801e858:	682b      	ldr	r3, [r5, #0]
 801e85a:	930e      	str	r3, [sp, #56]	@ 0x38
 801e85c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e85e:	6823      	ldr	r3, [r4, #0]
 801e860:	05c9      	lsls	r1, r1, #23
 801e862:	d545      	bpl.n	801e8f0 <_printf_float+0xc0>
 801e864:	189b      	adds	r3, r3, r2
 801e866:	4393      	bics	r3, r2
 801e868:	001a      	movs	r2, r3
 801e86a:	3208      	adds	r2, #8
 801e86c:	6022      	str	r2, [r4, #0]
 801e86e:	2201      	movs	r2, #1
 801e870:	681e      	ldr	r6, [r3, #0]
 801e872:	685f      	ldr	r7, [r3, #4]
 801e874:	007b      	lsls	r3, r7, #1
 801e876:	085b      	lsrs	r3, r3, #1
 801e878:	9311      	str	r3, [sp, #68]	@ 0x44
 801e87a:	9610      	str	r6, [sp, #64]	@ 0x40
 801e87c:	64ae      	str	r6, [r5, #72]	@ 0x48
 801e87e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801e880:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e882:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e884:	4ba7      	ldr	r3, [pc, #668]	@ (801eb24 <_printf_float+0x2f4>)
 801e886:	4252      	negs	r2, r2
 801e888:	f7e4 fd3c 	bl	8003304 <__aeabi_dcmpun>
 801e88c:	2800      	cmp	r0, #0
 801e88e:	d131      	bne.n	801e8f4 <_printf_float+0xc4>
 801e890:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e892:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e894:	2201      	movs	r2, #1
 801e896:	4ba3      	ldr	r3, [pc, #652]	@ (801eb24 <_printf_float+0x2f4>)
 801e898:	4252      	negs	r2, r2
 801e89a:	f7e1 fe19 	bl	80004d0 <__aeabi_dcmple>
 801e89e:	2800      	cmp	r0, #0
 801e8a0:	d128      	bne.n	801e8f4 <_printf_float+0xc4>
 801e8a2:	2200      	movs	r2, #0
 801e8a4:	2300      	movs	r3, #0
 801e8a6:	0030      	movs	r0, r6
 801e8a8:	0039      	movs	r1, r7
 801e8aa:	f7e1 fe07 	bl	80004bc <__aeabi_dcmplt>
 801e8ae:	2800      	cmp	r0, #0
 801e8b0:	d003      	beq.n	801e8ba <_printf_float+0x8a>
 801e8b2:	002b      	movs	r3, r5
 801e8b4:	222d      	movs	r2, #45	@ 0x2d
 801e8b6:	3343      	adds	r3, #67	@ 0x43
 801e8b8:	701a      	strb	r2, [r3, #0]
 801e8ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e8bc:	4f9a      	ldr	r7, [pc, #616]	@ (801eb28 <_printf_float+0x2f8>)
 801e8be:	2b47      	cmp	r3, #71	@ 0x47
 801e8c0:	d900      	bls.n	801e8c4 <_printf_float+0x94>
 801e8c2:	4f9a      	ldr	r7, [pc, #616]	@ (801eb2c <_printf_float+0x2fc>)
 801e8c4:	2303      	movs	r3, #3
 801e8c6:	2400      	movs	r4, #0
 801e8c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e8ca:	612b      	str	r3, [r5, #16]
 801e8cc:	3301      	adds	r3, #1
 801e8ce:	439a      	bics	r2, r3
 801e8d0:	602a      	str	r2, [r5, #0]
 801e8d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e8d4:	0029      	movs	r1, r5
 801e8d6:	9300      	str	r3, [sp, #0]
 801e8d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e8da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e8dc:	aa15      	add	r2, sp, #84	@ 0x54
 801e8de:	f000 f9e5 	bl	801ecac <_printf_common>
 801e8e2:	3001      	adds	r0, #1
 801e8e4:	d000      	beq.n	801e8e8 <_printf_float+0xb8>
 801e8e6:	e09f      	b.n	801ea28 <_printf_float+0x1f8>
 801e8e8:	2001      	movs	r0, #1
 801e8ea:	4240      	negs	r0, r0
 801e8ec:	b017      	add	sp, #92	@ 0x5c
 801e8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e8f0:	3307      	adds	r3, #7
 801e8f2:	e7b8      	b.n	801e866 <_printf_float+0x36>
 801e8f4:	0032      	movs	r2, r6
 801e8f6:	003b      	movs	r3, r7
 801e8f8:	0030      	movs	r0, r6
 801e8fa:	0039      	movs	r1, r7
 801e8fc:	f7e4 fd02 	bl	8003304 <__aeabi_dcmpun>
 801e900:	2800      	cmp	r0, #0
 801e902:	d00b      	beq.n	801e91c <_printf_float+0xec>
 801e904:	2f00      	cmp	r7, #0
 801e906:	da03      	bge.n	801e910 <_printf_float+0xe0>
 801e908:	002b      	movs	r3, r5
 801e90a:	222d      	movs	r2, #45	@ 0x2d
 801e90c:	3343      	adds	r3, #67	@ 0x43
 801e90e:	701a      	strb	r2, [r3, #0]
 801e910:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e912:	4f87      	ldr	r7, [pc, #540]	@ (801eb30 <_printf_float+0x300>)
 801e914:	2b47      	cmp	r3, #71	@ 0x47
 801e916:	d9d5      	bls.n	801e8c4 <_printf_float+0x94>
 801e918:	4f86      	ldr	r7, [pc, #536]	@ (801eb34 <_printf_float+0x304>)
 801e91a:	e7d3      	b.n	801e8c4 <_printf_float+0x94>
 801e91c:	2220      	movs	r2, #32
 801e91e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e920:	686b      	ldr	r3, [r5, #4]
 801e922:	4394      	bics	r4, r2
 801e924:	1c5a      	adds	r2, r3, #1
 801e926:	d146      	bne.n	801e9b6 <_printf_float+0x186>
 801e928:	3307      	adds	r3, #7
 801e92a:	606b      	str	r3, [r5, #4]
 801e92c:	2380      	movs	r3, #128	@ 0x80
 801e92e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e930:	00db      	lsls	r3, r3, #3
 801e932:	4313      	orrs	r3, r2
 801e934:	2200      	movs	r2, #0
 801e936:	602b      	str	r3, [r5, #0]
 801e938:	9206      	str	r2, [sp, #24]
 801e93a:	aa14      	add	r2, sp, #80	@ 0x50
 801e93c:	9205      	str	r2, [sp, #20]
 801e93e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e940:	a90a      	add	r1, sp, #40	@ 0x28
 801e942:	9204      	str	r2, [sp, #16]
 801e944:	aa13      	add	r2, sp, #76	@ 0x4c
 801e946:	9203      	str	r2, [sp, #12]
 801e948:	2223      	movs	r2, #35	@ 0x23
 801e94a:	1852      	adds	r2, r2, r1
 801e94c:	9202      	str	r2, [sp, #8]
 801e94e:	9301      	str	r3, [sp, #4]
 801e950:	686b      	ldr	r3, [r5, #4]
 801e952:	0032      	movs	r2, r6
 801e954:	9300      	str	r3, [sp, #0]
 801e956:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e958:	003b      	movs	r3, r7
 801e95a:	f7ff fec3 	bl	801e6e4 <__cvt>
 801e95e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e960:	0007      	movs	r7, r0
 801e962:	2c47      	cmp	r4, #71	@ 0x47
 801e964:	d12d      	bne.n	801e9c2 <_printf_float+0x192>
 801e966:	1cd3      	adds	r3, r2, #3
 801e968:	db02      	blt.n	801e970 <_printf_float+0x140>
 801e96a:	686b      	ldr	r3, [r5, #4]
 801e96c:	429a      	cmp	r2, r3
 801e96e:	dd48      	ble.n	801ea02 <_printf_float+0x1d2>
 801e970:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e972:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e974:	3b02      	subs	r3, #2
 801e976:	b2db      	uxtb	r3, r3
 801e978:	930c      	str	r3, [sp, #48]	@ 0x30
 801e97a:	0028      	movs	r0, r5
 801e97c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e97e:	3901      	subs	r1, #1
 801e980:	3050      	adds	r0, #80	@ 0x50
 801e982:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e984:	f7ff ff14 	bl	801e7b0 <__exponent>
 801e988:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e98a:	0004      	movs	r4, r0
 801e98c:	1813      	adds	r3, r2, r0
 801e98e:	612b      	str	r3, [r5, #16]
 801e990:	2a01      	cmp	r2, #1
 801e992:	dc02      	bgt.n	801e99a <_printf_float+0x16a>
 801e994:	682a      	ldr	r2, [r5, #0]
 801e996:	07d2      	lsls	r2, r2, #31
 801e998:	d501      	bpl.n	801e99e <_printf_float+0x16e>
 801e99a:	3301      	adds	r3, #1
 801e99c:	612b      	str	r3, [r5, #16]
 801e99e:	2323      	movs	r3, #35	@ 0x23
 801e9a0:	aa0a      	add	r2, sp, #40	@ 0x28
 801e9a2:	189b      	adds	r3, r3, r2
 801e9a4:	781b      	ldrb	r3, [r3, #0]
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	d100      	bne.n	801e9ac <_printf_float+0x17c>
 801e9aa:	e792      	b.n	801e8d2 <_printf_float+0xa2>
 801e9ac:	002b      	movs	r3, r5
 801e9ae:	222d      	movs	r2, #45	@ 0x2d
 801e9b0:	3343      	adds	r3, #67	@ 0x43
 801e9b2:	701a      	strb	r2, [r3, #0]
 801e9b4:	e78d      	b.n	801e8d2 <_printf_float+0xa2>
 801e9b6:	2c47      	cmp	r4, #71	@ 0x47
 801e9b8:	d1b8      	bne.n	801e92c <_printf_float+0xfc>
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	d1b6      	bne.n	801e92c <_printf_float+0xfc>
 801e9be:	3301      	adds	r3, #1
 801e9c0:	e7b3      	b.n	801e92a <_printf_float+0xfa>
 801e9c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e9c4:	0011      	movs	r1, r2
 801e9c6:	2b65      	cmp	r3, #101	@ 0x65
 801e9c8:	d9d7      	bls.n	801e97a <_printf_float+0x14a>
 801e9ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e9cc:	2b66      	cmp	r3, #102	@ 0x66
 801e9ce:	d11a      	bne.n	801ea06 <_printf_float+0x1d6>
 801e9d0:	686b      	ldr	r3, [r5, #4]
 801e9d2:	2a00      	cmp	r2, #0
 801e9d4:	dd09      	ble.n	801e9ea <_printf_float+0x1ba>
 801e9d6:	612a      	str	r2, [r5, #16]
 801e9d8:	2b00      	cmp	r3, #0
 801e9da:	d102      	bne.n	801e9e2 <_printf_float+0x1b2>
 801e9dc:	6829      	ldr	r1, [r5, #0]
 801e9de:	07c9      	lsls	r1, r1, #31
 801e9e0:	d50b      	bpl.n	801e9fa <_printf_float+0x1ca>
 801e9e2:	3301      	adds	r3, #1
 801e9e4:	189b      	adds	r3, r3, r2
 801e9e6:	612b      	str	r3, [r5, #16]
 801e9e8:	e007      	b.n	801e9fa <_printf_float+0x1ca>
 801e9ea:	2b00      	cmp	r3, #0
 801e9ec:	d103      	bne.n	801e9f6 <_printf_float+0x1c6>
 801e9ee:	2201      	movs	r2, #1
 801e9f0:	6829      	ldr	r1, [r5, #0]
 801e9f2:	4211      	tst	r1, r2
 801e9f4:	d000      	beq.n	801e9f8 <_printf_float+0x1c8>
 801e9f6:	1c9a      	adds	r2, r3, #2
 801e9f8:	612a      	str	r2, [r5, #16]
 801e9fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e9fc:	2400      	movs	r4, #0
 801e9fe:	65ab      	str	r3, [r5, #88]	@ 0x58
 801ea00:	e7cd      	b.n	801e99e <_printf_float+0x16e>
 801ea02:	2367      	movs	r3, #103	@ 0x67
 801ea04:	930c      	str	r3, [sp, #48]	@ 0x30
 801ea06:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ea08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ea0a:	4299      	cmp	r1, r3
 801ea0c:	db06      	blt.n	801ea1c <_printf_float+0x1ec>
 801ea0e:	682b      	ldr	r3, [r5, #0]
 801ea10:	6129      	str	r1, [r5, #16]
 801ea12:	07db      	lsls	r3, r3, #31
 801ea14:	d5f1      	bpl.n	801e9fa <_printf_float+0x1ca>
 801ea16:	3101      	adds	r1, #1
 801ea18:	6129      	str	r1, [r5, #16]
 801ea1a:	e7ee      	b.n	801e9fa <_printf_float+0x1ca>
 801ea1c:	2201      	movs	r2, #1
 801ea1e:	2900      	cmp	r1, #0
 801ea20:	dce0      	bgt.n	801e9e4 <_printf_float+0x1b4>
 801ea22:	1892      	adds	r2, r2, r2
 801ea24:	1a52      	subs	r2, r2, r1
 801ea26:	e7dd      	b.n	801e9e4 <_printf_float+0x1b4>
 801ea28:	682a      	ldr	r2, [r5, #0]
 801ea2a:	0553      	lsls	r3, r2, #21
 801ea2c:	d408      	bmi.n	801ea40 <_printf_float+0x210>
 801ea2e:	692b      	ldr	r3, [r5, #16]
 801ea30:	003a      	movs	r2, r7
 801ea32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ea34:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ea36:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ea38:	47a0      	blx	r4
 801ea3a:	3001      	adds	r0, #1
 801ea3c:	d129      	bne.n	801ea92 <_printf_float+0x262>
 801ea3e:	e753      	b.n	801e8e8 <_printf_float+0xb8>
 801ea40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea42:	2b65      	cmp	r3, #101	@ 0x65
 801ea44:	d800      	bhi.n	801ea48 <_printf_float+0x218>
 801ea46:	e0da      	b.n	801ebfe <_printf_float+0x3ce>
 801ea48:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801ea4a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801ea4c:	2200      	movs	r2, #0
 801ea4e:	2300      	movs	r3, #0
 801ea50:	f7e1 fd2e 	bl	80004b0 <__aeabi_dcmpeq>
 801ea54:	2800      	cmp	r0, #0
 801ea56:	d033      	beq.n	801eac0 <_printf_float+0x290>
 801ea58:	2301      	movs	r3, #1
 801ea5a:	4a37      	ldr	r2, [pc, #220]	@ (801eb38 <_printf_float+0x308>)
 801ea5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ea5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ea60:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ea62:	47a0      	blx	r4
 801ea64:	3001      	adds	r0, #1
 801ea66:	d100      	bne.n	801ea6a <_printf_float+0x23a>
 801ea68:	e73e      	b.n	801e8e8 <_printf_float+0xb8>
 801ea6a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801ea6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ea6e:	42b3      	cmp	r3, r6
 801ea70:	db02      	blt.n	801ea78 <_printf_float+0x248>
 801ea72:	682b      	ldr	r3, [r5, #0]
 801ea74:	07db      	lsls	r3, r3, #31
 801ea76:	d50c      	bpl.n	801ea92 <_printf_float+0x262>
 801ea78:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ea7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ea7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ea7e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ea80:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ea82:	47a0      	blx	r4
 801ea84:	2400      	movs	r4, #0
 801ea86:	3001      	adds	r0, #1
 801ea88:	d100      	bne.n	801ea8c <_printf_float+0x25c>
 801ea8a:	e72d      	b.n	801e8e8 <_printf_float+0xb8>
 801ea8c:	1e73      	subs	r3, r6, #1
 801ea8e:	42a3      	cmp	r3, r4
 801ea90:	dc0a      	bgt.n	801eaa8 <_printf_float+0x278>
 801ea92:	682b      	ldr	r3, [r5, #0]
 801ea94:	079b      	lsls	r3, r3, #30
 801ea96:	d500      	bpl.n	801ea9a <_printf_float+0x26a>
 801ea98:	e105      	b.n	801eca6 <_printf_float+0x476>
 801ea9a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ea9c:	68e8      	ldr	r0, [r5, #12]
 801ea9e:	4298      	cmp	r0, r3
 801eaa0:	db00      	blt.n	801eaa4 <_printf_float+0x274>
 801eaa2:	e723      	b.n	801e8ec <_printf_float+0xbc>
 801eaa4:	0018      	movs	r0, r3
 801eaa6:	e721      	b.n	801e8ec <_printf_float+0xbc>
 801eaa8:	002a      	movs	r2, r5
 801eaaa:	2301      	movs	r3, #1
 801eaac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eaae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eab0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801eab2:	321a      	adds	r2, #26
 801eab4:	47b8      	blx	r7
 801eab6:	3001      	adds	r0, #1
 801eab8:	d100      	bne.n	801eabc <_printf_float+0x28c>
 801eaba:	e715      	b.n	801e8e8 <_printf_float+0xb8>
 801eabc:	3401      	adds	r4, #1
 801eabe:	e7e5      	b.n	801ea8c <_printf_float+0x25c>
 801eac0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eac2:	2b00      	cmp	r3, #0
 801eac4:	dc3a      	bgt.n	801eb3c <_printf_float+0x30c>
 801eac6:	2301      	movs	r3, #1
 801eac8:	4a1b      	ldr	r2, [pc, #108]	@ (801eb38 <_printf_float+0x308>)
 801eaca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eacc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eace:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ead0:	47a0      	blx	r4
 801ead2:	3001      	adds	r0, #1
 801ead4:	d100      	bne.n	801ead8 <_printf_float+0x2a8>
 801ead6:	e707      	b.n	801e8e8 <_printf_float+0xb8>
 801ead8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801eada:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eadc:	4333      	orrs	r3, r6
 801eade:	d102      	bne.n	801eae6 <_printf_float+0x2b6>
 801eae0:	682b      	ldr	r3, [r5, #0]
 801eae2:	07db      	lsls	r3, r3, #31
 801eae4:	d5d5      	bpl.n	801ea92 <_printf_float+0x262>
 801eae6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eae8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801eaea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eaec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eaee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eaf0:	47a0      	blx	r4
 801eaf2:	2300      	movs	r3, #0
 801eaf4:	3001      	adds	r0, #1
 801eaf6:	d100      	bne.n	801eafa <_printf_float+0x2ca>
 801eaf8:	e6f6      	b.n	801e8e8 <_printf_float+0xb8>
 801eafa:	930c      	str	r3, [sp, #48]	@ 0x30
 801eafc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eafe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eb00:	425b      	negs	r3, r3
 801eb02:	4293      	cmp	r3, r2
 801eb04:	dc01      	bgt.n	801eb0a <_printf_float+0x2da>
 801eb06:	0033      	movs	r3, r6
 801eb08:	e792      	b.n	801ea30 <_printf_float+0x200>
 801eb0a:	002a      	movs	r2, r5
 801eb0c:	2301      	movs	r3, #1
 801eb0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eb10:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eb12:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801eb14:	321a      	adds	r2, #26
 801eb16:	47a0      	blx	r4
 801eb18:	3001      	adds	r0, #1
 801eb1a:	d100      	bne.n	801eb1e <_printf_float+0x2ee>
 801eb1c:	e6e4      	b.n	801e8e8 <_printf_float+0xb8>
 801eb1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb20:	3301      	adds	r3, #1
 801eb22:	e7ea      	b.n	801eafa <_printf_float+0x2ca>
 801eb24:	7fefffff 	.word	0x7fefffff
 801eb28:	080249d1 	.word	0x080249d1
 801eb2c:	080249d5 	.word	0x080249d5
 801eb30:	080249d9 	.word	0x080249d9
 801eb34:	080249dd 	.word	0x080249dd
 801eb38:	080249e1 	.word	0x080249e1
 801eb3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801eb3e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801eb40:	930c      	str	r3, [sp, #48]	@ 0x30
 801eb42:	429e      	cmp	r6, r3
 801eb44:	dd00      	ble.n	801eb48 <_printf_float+0x318>
 801eb46:	001e      	movs	r6, r3
 801eb48:	2e00      	cmp	r6, #0
 801eb4a:	dc31      	bgt.n	801ebb0 <_printf_float+0x380>
 801eb4c:	43f3      	mvns	r3, r6
 801eb4e:	2400      	movs	r4, #0
 801eb50:	17db      	asrs	r3, r3, #31
 801eb52:	4033      	ands	r3, r6
 801eb54:	930e      	str	r3, [sp, #56]	@ 0x38
 801eb56:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801eb58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eb5a:	1af3      	subs	r3, r6, r3
 801eb5c:	42a3      	cmp	r3, r4
 801eb5e:	dc30      	bgt.n	801ebc2 <_printf_float+0x392>
 801eb60:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eb62:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eb64:	429a      	cmp	r2, r3
 801eb66:	dc38      	bgt.n	801ebda <_printf_float+0x3aa>
 801eb68:	682b      	ldr	r3, [r5, #0]
 801eb6a:	07db      	lsls	r3, r3, #31
 801eb6c:	d435      	bmi.n	801ebda <_printf_float+0x3aa>
 801eb6e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801eb70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb72:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eb74:	1b9b      	subs	r3, r3, r6
 801eb76:	1b14      	subs	r4, r2, r4
 801eb78:	429c      	cmp	r4, r3
 801eb7a:	dd00      	ble.n	801eb7e <_printf_float+0x34e>
 801eb7c:	001c      	movs	r4, r3
 801eb7e:	2c00      	cmp	r4, #0
 801eb80:	dc34      	bgt.n	801ebec <_printf_float+0x3bc>
 801eb82:	43e3      	mvns	r3, r4
 801eb84:	2600      	movs	r6, #0
 801eb86:	17db      	asrs	r3, r3, #31
 801eb88:	401c      	ands	r4, r3
 801eb8a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eb8c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eb8e:	1ad3      	subs	r3, r2, r3
 801eb90:	1b1b      	subs	r3, r3, r4
 801eb92:	42b3      	cmp	r3, r6
 801eb94:	dc00      	bgt.n	801eb98 <_printf_float+0x368>
 801eb96:	e77c      	b.n	801ea92 <_printf_float+0x262>
 801eb98:	002a      	movs	r2, r5
 801eb9a:	2301      	movs	r3, #1
 801eb9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801eb9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801eba0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801eba2:	321a      	adds	r2, #26
 801eba4:	47b8      	blx	r7
 801eba6:	3001      	adds	r0, #1
 801eba8:	d100      	bne.n	801ebac <_printf_float+0x37c>
 801ebaa:	e69d      	b.n	801e8e8 <_printf_float+0xb8>
 801ebac:	3601      	adds	r6, #1
 801ebae:	e7ec      	b.n	801eb8a <_printf_float+0x35a>
 801ebb0:	0033      	movs	r3, r6
 801ebb2:	003a      	movs	r2, r7
 801ebb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ebb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ebb8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ebba:	47a0      	blx	r4
 801ebbc:	3001      	adds	r0, #1
 801ebbe:	d1c5      	bne.n	801eb4c <_printf_float+0x31c>
 801ebc0:	e692      	b.n	801e8e8 <_printf_float+0xb8>
 801ebc2:	002a      	movs	r2, r5
 801ebc4:	2301      	movs	r3, #1
 801ebc6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ebc8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ebca:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ebcc:	321a      	adds	r2, #26
 801ebce:	47b0      	blx	r6
 801ebd0:	3001      	adds	r0, #1
 801ebd2:	d100      	bne.n	801ebd6 <_printf_float+0x3a6>
 801ebd4:	e688      	b.n	801e8e8 <_printf_float+0xb8>
 801ebd6:	3401      	adds	r4, #1
 801ebd8:	e7bd      	b.n	801eb56 <_printf_float+0x326>
 801ebda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ebdc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ebde:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ebe0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ebe2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ebe4:	47a0      	blx	r4
 801ebe6:	3001      	adds	r0, #1
 801ebe8:	d1c1      	bne.n	801eb6e <_printf_float+0x33e>
 801ebea:	e67d      	b.n	801e8e8 <_printf_float+0xb8>
 801ebec:	19ba      	adds	r2, r7, r6
 801ebee:	0023      	movs	r3, r4
 801ebf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ebf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ebf4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ebf6:	47b0      	blx	r6
 801ebf8:	3001      	adds	r0, #1
 801ebfa:	d1c2      	bne.n	801eb82 <_printf_float+0x352>
 801ebfc:	e674      	b.n	801e8e8 <_printf_float+0xb8>
 801ebfe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ec00:	930c      	str	r3, [sp, #48]	@ 0x30
 801ec02:	2b01      	cmp	r3, #1
 801ec04:	dc02      	bgt.n	801ec0c <_printf_float+0x3dc>
 801ec06:	2301      	movs	r3, #1
 801ec08:	421a      	tst	r2, r3
 801ec0a:	d039      	beq.n	801ec80 <_printf_float+0x450>
 801ec0c:	2301      	movs	r3, #1
 801ec0e:	003a      	movs	r2, r7
 801ec10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ec12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ec14:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ec16:	47b0      	blx	r6
 801ec18:	3001      	adds	r0, #1
 801ec1a:	d100      	bne.n	801ec1e <_printf_float+0x3ee>
 801ec1c:	e664      	b.n	801e8e8 <_printf_float+0xb8>
 801ec1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ec20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ec22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ec24:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ec26:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ec28:	47b0      	blx	r6
 801ec2a:	3001      	adds	r0, #1
 801ec2c:	d100      	bne.n	801ec30 <_printf_float+0x400>
 801ec2e:	e65b      	b.n	801e8e8 <_printf_float+0xb8>
 801ec30:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801ec32:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801ec34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec36:	2200      	movs	r2, #0
 801ec38:	3b01      	subs	r3, #1
 801ec3a:	930c      	str	r3, [sp, #48]	@ 0x30
 801ec3c:	2300      	movs	r3, #0
 801ec3e:	f7e1 fc37 	bl	80004b0 <__aeabi_dcmpeq>
 801ec42:	2800      	cmp	r0, #0
 801ec44:	d11a      	bne.n	801ec7c <_printf_float+0x44c>
 801ec46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec48:	1c7a      	adds	r2, r7, #1
 801ec4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ec4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ec4e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ec50:	47b0      	blx	r6
 801ec52:	3001      	adds	r0, #1
 801ec54:	d10e      	bne.n	801ec74 <_printf_float+0x444>
 801ec56:	e647      	b.n	801e8e8 <_printf_float+0xb8>
 801ec58:	002a      	movs	r2, r5
 801ec5a:	2301      	movs	r3, #1
 801ec5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ec5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ec60:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ec62:	321a      	adds	r2, #26
 801ec64:	47b8      	blx	r7
 801ec66:	3001      	adds	r0, #1
 801ec68:	d100      	bne.n	801ec6c <_printf_float+0x43c>
 801ec6a:	e63d      	b.n	801e8e8 <_printf_float+0xb8>
 801ec6c:	3601      	adds	r6, #1
 801ec6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec70:	429e      	cmp	r6, r3
 801ec72:	dbf1      	blt.n	801ec58 <_printf_float+0x428>
 801ec74:	002a      	movs	r2, r5
 801ec76:	0023      	movs	r3, r4
 801ec78:	3250      	adds	r2, #80	@ 0x50
 801ec7a:	e6da      	b.n	801ea32 <_printf_float+0x202>
 801ec7c:	2600      	movs	r6, #0
 801ec7e:	e7f6      	b.n	801ec6e <_printf_float+0x43e>
 801ec80:	003a      	movs	r2, r7
 801ec82:	e7e2      	b.n	801ec4a <_printf_float+0x41a>
 801ec84:	002a      	movs	r2, r5
 801ec86:	2301      	movs	r3, #1
 801ec88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ec8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ec8c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ec8e:	3219      	adds	r2, #25
 801ec90:	47b0      	blx	r6
 801ec92:	3001      	adds	r0, #1
 801ec94:	d100      	bne.n	801ec98 <_printf_float+0x468>
 801ec96:	e627      	b.n	801e8e8 <_printf_float+0xb8>
 801ec98:	3401      	adds	r4, #1
 801ec9a:	68eb      	ldr	r3, [r5, #12]
 801ec9c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ec9e:	1a9b      	subs	r3, r3, r2
 801eca0:	42a3      	cmp	r3, r4
 801eca2:	dcef      	bgt.n	801ec84 <_printf_float+0x454>
 801eca4:	e6f9      	b.n	801ea9a <_printf_float+0x26a>
 801eca6:	2400      	movs	r4, #0
 801eca8:	e7f7      	b.n	801ec9a <_printf_float+0x46a>
 801ecaa:	46c0      	nop			@ (mov r8, r8)

0801ecac <_printf_common>:
 801ecac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ecae:	0016      	movs	r6, r2
 801ecb0:	9301      	str	r3, [sp, #4]
 801ecb2:	688a      	ldr	r2, [r1, #8]
 801ecb4:	690b      	ldr	r3, [r1, #16]
 801ecb6:	000c      	movs	r4, r1
 801ecb8:	9000      	str	r0, [sp, #0]
 801ecba:	4293      	cmp	r3, r2
 801ecbc:	da00      	bge.n	801ecc0 <_printf_common+0x14>
 801ecbe:	0013      	movs	r3, r2
 801ecc0:	0022      	movs	r2, r4
 801ecc2:	6033      	str	r3, [r6, #0]
 801ecc4:	3243      	adds	r2, #67	@ 0x43
 801ecc6:	7812      	ldrb	r2, [r2, #0]
 801ecc8:	2a00      	cmp	r2, #0
 801ecca:	d001      	beq.n	801ecd0 <_printf_common+0x24>
 801eccc:	3301      	adds	r3, #1
 801ecce:	6033      	str	r3, [r6, #0]
 801ecd0:	6823      	ldr	r3, [r4, #0]
 801ecd2:	069b      	lsls	r3, r3, #26
 801ecd4:	d502      	bpl.n	801ecdc <_printf_common+0x30>
 801ecd6:	6833      	ldr	r3, [r6, #0]
 801ecd8:	3302      	adds	r3, #2
 801ecda:	6033      	str	r3, [r6, #0]
 801ecdc:	6822      	ldr	r2, [r4, #0]
 801ecde:	2306      	movs	r3, #6
 801ece0:	0015      	movs	r5, r2
 801ece2:	401d      	ands	r5, r3
 801ece4:	421a      	tst	r2, r3
 801ece6:	d027      	beq.n	801ed38 <_printf_common+0x8c>
 801ece8:	0023      	movs	r3, r4
 801ecea:	3343      	adds	r3, #67	@ 0x43
 801ecec:	781b      	ldrb	r3, [r3, #0]
 801ecee:	1e5a      	subs	r2, r3, #1
 801ecf0:	4193      	sbcs	r3, r2
 801ecf2:	6822      	ldr	r2, [r4, #0]
 801ecf4:	0692      	lsls	r2, r2, #26
 801ecf6:	d430      	bmi.n	801ed5a <_printf_common+0xae>
 801ecf8:	0022      	movs	r2, r4
 801ecfa:	9901      	ldr	r1, [sp, #4]
 801ecfc:	9800      	ldr	r0, [sp, #0]
 801ecfe:	9d08      	ldr	r5, [sp, #32]
 801ed00:	3243      	adds	r2, #67	@ 0x43
 801ed02:	47a8      	blx	r5
 801ed04:	3001      	adds	r0, #1
 801ed06:	d025      	beq.n	801ed54 <_printf_common+0xa8>
 801ed08:	2206      	movs	r2, #6
 801ed0a:	6823      	ldr	r3, [r4, #0]
 801ed0c:	2500      	movs	r5, #0
 801ed0e:	4013      	ands	r3, r2
 801ed10:	2b04      	cmp	r3, #4
 801ed12:	d105      	bne.n	801ed20 <_printf_common+0x74>
 801ed14:	6833      	ldr	r3, [r6, #0]
 801ed16:	68e5      	ldr	r5, [r4, #12]
 801ed18:	1aed      	subs	r5, r5, r3
 801ed1a:	43eb      	mvns	r3, r5
 801ed1c:	17db      	asrs	r3, r3, #31
 801ed1e:	401d      	ands	r5, r3
 801ed20:	68a3      	ldr	r3, [r4, #8]
 801ed22:	6922      	ldr	r2, [r4, #16]
 801ed24:	4293      	cmp	r3, r2
 801ed26:	dd01      	ble.n	801ed2c <_printf_common+0x80>
 801ed28:	1a9b      	subs	r3, r3, r2
 801ed2a:	18ed      	adds	r5, r5, r3
 801ed2c:	2600      	movs	r6, #0
 801ed2e:	42b5      	cmp	r5, r6
 801ed30:	d120      	bne.n	801ed74 <_printf_common+0xc8>
 801ed32:	2000      	movs	r0, #0
 801ed34:	e010      	b.n	801ed58 <_printf_common+0xac>
 801ed36:	3501      	adds	r5, #1
 801ed38:	68e3      	ldr	r3, [r4, #12]
 801ed3a:	6832      	ldr	r2, [r6, #0]
 801ed3c:	1a9b      	subs	r3, r3, r2
 801ed3e:	42ab      	cmp	r3, r5
 801ed40:	ddd2      	ble.n	801ece8 <_printf_common+0x3c>
 801ed42:	0022      	movs	r2, r4
 801ed44:	2301      	movs	r3, #1
 801ed46:	9901      	ldr	r1, [sp, #4]
 801ed48:	9800      	ldr	r0, [sp, #0]
 801ed4a:	9f08      	ldr	r7, [sp, #32]
 801ed4c:	3219      	adds	r2, #25
 801ed4e:	47b8      	blx	r7
 801ed50:	3001      	adds	r0, #1
 801ed52:	d1f0      	bne.n	801ed36 <_printf_common+0x8a>
 801ed54:	2001      	movs	r0, #1
 801ed56:	4240      	negs	r0, r0
 801ed58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ed5a:	2030      	movs	r0, #48	@ 0x30
 801ed5c:	18e1      	adds	r1, r4, r3
 801ed5e:	3143      	adds	r1, #67	@ 0x43
 801ed60:	7008      	strb	r0, [r1, #0]
 801ed62:	0021      	movs	r1, r4
 801ed64:	1c5a      	adds	r2, r3, #1
 801ed66:	3145      	adds	r1, #69	@ 0x45
 801ed68:	7809      	ldrb	r1, [r1, #0]
 801ed6a:	18a2      	adds	r2, r4, r2
 801ed6c:	3243      	adds	r2, #67	@ 0x43
 801ed6e:	3302      	adds	r3, #2
 801ed70:	7011      	strb	r1, [r2, #0]
 801ed72:	e7c1      	b.n	801ecf8 <_printf_common+0x4c>
 801ed74:	0022      	movs	r2, r4
 801ed76:	2301      	movs	r3, #1
 801ed78:	9901      	ldr	r1, [sp, #4]
 801ed7a:	9800      	ldr	r0, [sp, #0]
 801ed7c:	9f08      	ldr	r7, [sp, #32]
 801ed7e:	321a      	adds	r2, #26
 801ed80:	47b8      	blx	r7
 801ed82:	3001      	adds	r0, #1
 801ed84:	d0e6      	beq.n	801ed54 <_printf_common+0xa8>
 801ed86:	3601      	adds	r6, #1
 801ed88:	e7d1      	b.n	801ed2e <_printf_common+0x82>
	...

0801ed8c <_printf_i>:
 801ed8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ed8e:	b08b      	sub	sp, #44	@ 0x2c
 801ed90:	9206      	str	r2, [sp, #24]
 801ed92:	000a      	movs	r2, r1
 801ed94:	3243      	adds	r2, #67	@ 0x43
 801ed96:	9307      	str	r3, [sp, #28]
 801ed98:	9005      	str	r0, [sp, #20]
 801ed9a:	9203      	str	r2, [sp, #12]
 801ed9c:	7e0a      	ldrb	r2, [r1, #24]
 801ed9e:	000c      	movs	r4, r1
 801eda0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801eda2:	2a78      	cmp	r2, #120	@ 0x78
 801eda4:	d809      	bhi.n	801edba <_printf_i+0x2e>
 801eda6:	2a62      	cmp	r2, #98	@ 0x62
 801eda8:	d80b      	bhi.n	801edc2 <_printf_i+0x36>
 801edaa:	2a00      	cmp	r2, #0
 801edac:	d100      	bne.n	801edb0 <_printf_i+0x24>
 801edae:	e0bc      	b.n	801ef2a <_printf_i+0x19e>
 801edb0:	497b      	ldr	r1, [pc, #492]	@ (801efa0 <_printf_i+0x214>)
 801edb2:	9104      	str	r1, [sp, #16]
 801edb4:	2a58      	cmp	r2, #88	@ 0x58
 801edb6:	d100      	bne.n	801edba <_printf_i+0x2e>
 801edb8:	e090      	b.n	801eedc <_printf_i+0x150>
 801edba:	0025      	movs	r5, r4
 801edbc:	3542      	adds	r5, #66	@ 0x42
 801edbe:	702a      	strb	r2, [r5, #0]
 801edc0:	e022      	b.n	801ee08 <_printf_i+0x7c>
 801edc2:	0010      	movs	r0, r2
 801edc4:	3863      	subs	r0, #99	@ 0x63
 801edc6:	2815      	cmp	r0, #21
 801edc8:	d8f7      	bhi.n	801edba <_printf_i+0x2e>
 801edca:	f7e1 f9e1 	bl	8000190 <__gnu_thumb1_case_shi>
 801edce:	0016      	.short	0x0016
 801edd0:	fff6001f 	.word	0xfff6001f
 801edd4:	fff6fff6 	.word	0xfff6fff6
 801edd8:	001ffff6 	.word	0x001ffff6
 801eddc:	fff6fff6 	.word	0xfff6fff6
 801ede0:	fff6fff6 	.word	0xfff6fff6
 801ede4:	003600a1 	.word	0x003600a1
 801ede8:	fff60080 	.word	0xfff60080
 801edec:	00b2fff6 	.word	0x00b2fff6
 801edf0:	0036fff6 	.word	0x0036fff6
 801edf4:	fff6fff6 	.word	0xfff6fff6
 801edf8:	0084      	.short	0x0084
 801edfa:	0025      	movs	r5, r4
 801edfc:	681a      	ldr	r2, [r3, #0]
 801edfe:	3542      	adds	r5, #66	@ 0x42
 801ee00:	1d11      	adds	r1, r2, #4
 801ee02:	6019      	str	r1, [r3, #0]
 801ee04:	6813      	ldr	r3, [r2, #0]
 801ee06:	702b      	strb	r3, [r5, #0]
 801ee08:	2301      	movs	r3, #1
 801ee0a:	e0a0      	b.n	801ef4e <_printf_i+0x1c2>
 801ee0c:	6818      	ldr	r0, [r3, #0]
 801ee0e:	6809      	ldr	r1, [r1, #0]
 801ee10:	1d02      	adds	r2, r0, #4
 801ee12:	060d      	lsls	r5, r1, #24
 801ee14:	d50b      	bpl.n	801ee2e <_printf_i+0xa2>
 801ee16:	6806      	ldr	r6, [r0, #0]
 801ee18:	601a      	str	r2, [r3, #0]
 801ee1a:	2e00      	cmp	r6, #0
 801ee1c:	da03      	bge.n	801ee26 <_printf_i+0x9a>
 801ee1e:	232d      	movs	r3, #45	@ 0x2d
 801ee20:	9a03      	ldr	r2, [sp, #12]
 801ee22:	4276      	negs	r6, r6
 801ee24:	7013      	strb	r3, [r2, #0]
 801ee26:	4b5e      	ldr	r3, [pc, #376]	@ (801efa0 <_printf_i+0x214>)
 801ee28:	270a      	movs	r7, #10
 801ee2a:	9304      	str	r3, [sp, #16]
 801ee2c:	e018      	b.n	801ee60 <_printf_i+0xd4>
 801ee2e:	6806      	ldr	r6, [r0, #0]
 801ee30:	601a      	str	r2, [r3, #0]
 801ee32:	0649      	lsls	r1, r1, #25
 801ee34:	d5f1      	bpl.n	801ee1a <_printf_i+0x8e>
 801ee36:	b236      	sxth	r6, r6
 801ee38:	e7ef      	b.n	801ee1a <_printf_i+0x8e>
 801ee3a:	6808      	ldr	r0, [r1, #0]
 801ee3c:	6819      	ldr	r1, [r3, #0]
 801ee3e:	c940      	ldmia	r1!, {r6}
 801ee40:	0605      	lsls	r5, r0, #24
 801ee42:	d402      	bmi.n	801ee4a <_printf_i+0xbe>
 801ee44:	0640      	lsls	r0, r0, #25
 801ee46:	d500      	bpl.n	801ee4a <_printf_i+0xbe>
 801ee48:	b2b6      	uxth	r6, r6
 801ee4a:	6019      	str	r1, [r3, #0]
 801ee4c:	4b54      	ldr	r3, [pc, #336]	@ (801efa0 <_printf_i+0x214>)
 801ee4e:	270a      	movs	r7, #10
 801ee50:	9304      	str	r3, [sp, #16]
 801ee52:	2a6f      	cmp	r2, #111	@ 0x6f
 801ee54:	d100      	bne.n	801ee58 <_printf_i+0xcc>
 801ee56:	3f02      	subs	r7, #2
 801ee58:	0023      	movs	r3, r4
 801ee5a:	2200      	movs	r2, #0
 801ee5c:	3343      	adds	r3, #67	@ 0x43
 801ee5e:	701a      	strb	r2, [r3, #0]
 801ee60:	6863      	ldr	r3, [r4, #4]
 801ee62:	60a3      	str	r3, [r4, #8]
 801ee64:	2b00      	cmp	r3, #0
 801ee66:	db03      	blt.n	801ee70 <_printf_i+0xe4>
 801ee68:	2104      	movs	r1, #4
 801ee6a:	6822      	ldr	r2, [r4, #0]
 801ee6c:	438a      	bics	r2, r1
 801ee6e:	6022      	str	r2, [r4, #0]
 801ee70:	2e00      	cmp	r6, #0
 801ee72:	d102      	bne.n	801ee7a <_printf_i+0xee>
 801ee74:	9d03      	ldr	r5, [sp, #12]
 801ee76:	2b00      	cmp	r3, #0
 801ee78:	d00c      	beq.n	801ee94 <_printf_i+0x108>
 801ee7a:	9d03      	ldr	r5, [sp, #12]
 801ee7c:	0030      	movs	r0, r6
 801ee7e:	0039      	movs	r1, r7
 801ee80:	f7e1 fa16 	bl	80002b0 <__aeabi_uidivmod>
 801ee84:	9b04      	ldr	r3, [sp, #16]
 801ee86:	3d01      	subs	r5, #1
 801ee88:	5c5b      	ldrb	r3, [r3, r1]
 801ee8a:	702b      	strb	r3, [r5, #0]
 801ee8c:	0033      	movs	r3, r6
 801ee8e:	0006      	movs	r6, r0
 801ee90:	429f      	cmp	r7, r3
 801ee92:	d9f3      	bls.n	801ee7c <_printf_i+0xf0>
 801ee94:	2f08      	cmp	r7, #8
 801ee96:	d109      	bne.n	801eeac <_printf_i+0x120>
 801ee98:	6823      	ldr	r3, [r4, #0]
 801ee9a:	07db      	lsls	r3, r3, #31
 801ee9c:	d506      	bpl.n	801eeac <_printf_i+0x120>
 801ee9e:	6862      	ldr	r2, [r4, #4]
 801eea0:	6923      	ldr	r3, [r4, #16]
 801eea2:	429a      	cmp	r2, r3
 801eea4:	dc02      	bgt.n	801eeac <_printf_i+0x120>
 801eea6:	2330      	movs	r3, #48	@ 0x30
 801eea8:	3d01      	subs	r5, #1
 801eeaa:	702b      	strb	r3, [r5, #0]
 801eeac:	9b03      	ldr	r3, [sp, #12]
 801eeae:	1b5b      	subs	r3, r3, r5
 801eeb0:	6123      	str	r3, [r4, #16]
 801eeb2:	9b07      	ldr	r3, [sp, #28]
 801eeb4:	0021      	movs	r1, r4
 801eeb6:	9300      	str	r3, [sp, #0]
 801eeb8:	9805      	ldr	r0, [sp, #20]
 801eeba:	9b06      	ldr	r3, [sp, #24]
 801eebc:	aa09      	add	r2, sp, #36	@ 0x24
 801eebe:	f7ff fef5 	bl	801ecac <_printf_common>
 801eec2:	3001      	adds	r0, #1
 801eec4:	d148      	bne.n	801ef58 <_printf_i+0x1cc>
 801eec6:	2001      	movs	r0, #1
 801eec8:	4240      	negs	r0, r0
 801eeca:	b00b      	add	sp, #44	@ 0x2c
 801eecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eece:	2220      	movs	r2, #32
 801eed0:	6809      	ldr	r1, [r1, #0]
 801eed2:	430a      	orrs	r2, r1
 801eed4:	6022      	str	r2, [r4, #0]
 801eed6:	2278      	movs	r2, #120	@ 0x78
 801eed8:	4932      	ldr	r1, [pc, #200]	@ (801efa4 <_printf_i+0x218>)
 801eeda:	9104      	str	r1, [sp, #16]
 801eedc:	0021      	movs	r1, r4
 801eede:	3145      	adds	r1, #69	@ 0x45
 801eee0:	700a      	strb	r2, [r1, #0]
 801eee2:	6819      	ldr	r1, [r3, #0]
 801eee4:	6822      	ldr	r2, [r4, #0]
 801eee6:	c940      	ldmia	r1!, {r6}
 801eee8:	0610      	lsls	r0, r2, #24
 801eeea:	d402      	bmi.n	801eef2 <_printf_i+0x166>
 801eeec:	0650      	lsls	r0, r2, #25
 801eeee:	d500      	bpl.n	801eef2 <_printf_i+0x166>
 801eef0:	b2b6      	uxth	r6, r6
 801eef2:	6019      	str	r1, [r3, #0]
 801eef4:	07d3      	lsls	r3, r2, #31
 801eef6:	d502      	bpl.n	801eefe <_printf_i+0x172>
 801eef8:	2320      	movs	r3, #32
 801eefa:	4313      	orrs	r3, r2
 801eefc:	6023      	str	r3, [r4, #0]
 801eefe:	2e00      	cmp	r6, #0
 801ef00:	d001      	beq.n	801ef06 <_printf_i+0x17a>
 801ef02:	2710      	movs	r7, #16
 801ef04:	e7a8      	b.n	801ee58 <_printf_i+0xcc>
 801ef06:	2220      	movs	r2, #32
 801ef08:	6823      	ldr	r3, [r4, #0]
 801ef0a:	4393      	bics	r3, r2
 801ef0c:	6023      	str	r3, [r4, #0]
 801ef0e:	e7f8      	b.n	801ef02 <_printf_i+0x176>
 801ef10:	681a      	ldr	r2, [r3, #0]
 801ef12:	680d      	ldr	r5, [r1, #0]
 801ef14:	1d10      	adds	r0, r2, #4
 801ef16:	6949      	ldr	r1, [r1, #20]
 801ef18:	6018      	str	r0, [r3, #0]
 801ef1a:	6813      	ldr	r3, [r2, #0]
 801ef1c:	062e      	lsls	r6, r5, #24
 801ef1e:	d501      	bpl.n	801ef24 <_printf_i+0x198>
 801ef20:	6019      	str	r1, [r3, #0]
 801ef22:	e002      	b.n	801ef2a <_printf_i+0x19e>
 801ef24:	066d      	lsls	r5, r5, #25
 801ef26:	d5fb      	bpl.n	801ef20 <_printf_i+0x194>
 801ef28:	8019      	strh	r1, [r3, #0]
 801ef2a:	2300      	movs	r3, #0
 801ef2c:	9d03      	ldr	r5, [sp, #12]
 801ef2e:	6123      	str	r3, [r4, #16]
 801ef30:	e7bf      	b.n	801eeb2 <_printf_i+0x126>
 801ef32:	681a      	ldr	r2, [r3, #0]
 801ef34:	1d11      	adds	r1, r2, #4
 801ef36:	6019      	str	r1, [r3, #0]
 801ef38:	6815      	ldr	r5, [r2, #0]
 801ef3a:	2100      	movs	r1, #0
 801ef3c:	0028      	movs	r0, r5
 801ef3e:	6862      	ldr	r2, [r4, #4]
 801ef40:	f000 fb7b 	bl	801f63a <memchr>
 801ef44:	2800      	cmp	r0, #0
 801ef46:	d001      	beq.n	801ef4c <_printf_i+0x1c0>
 801ef48:	1b40      	subs	r0, r0, r5
 801ef4a:	6060      	str	r0, [r4, #4]
 801ef4c:	6863      	ldr	r3, [r4, #4]
 801ef4e:	6123      	str	r3, [r4, #16]
 801ef50:	2300      	movs	r3, #0
 801ef52:	9a03      	ldr	r2, [sp, #12]
 801ef54:	7013      	strb	r3, [r2, #0]
 801ef56:	e7ac      	b.n	801eeb2 <_printf_i+0x126>
 801ef58:	002a      	movs	r2, r5
 801ef5a:	6923      	ldr	r3, [r4, #16]
 801ef5c:	9906      	ldr	r1, [sp, #24]
 801ef5e:	9805      	ldr	r0, [sp, #20]
 801ef60:	9d07      	ldr	r5, [sp, #28]
 801ef62:	47a8      	blx	r5
 801ef64:	3001      	adds	r0, #1
 801ef66:	d0ae      	beq.n	801eec6 <_printf_i+0x13a>
 801ef68:	6823      	ldr	r3, [r4, #0]
 801ef6a:	079b      	lsls	r3, r3, #30
 801ef6c:	d415      	bmi.n	801ef9a <_printf_i+0x20e>
 801ef6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef70:	68e0      	ldr	r0, [r4, #12]
 801ef72:	4298      	cmp	r0, r3
 801ef74:	daa9      	bge.n	801eeca <_printf_i+0x13e>
 801ef76:	0018      	movs	r0, r3
 801ef78:	e7a7      	b.n	801eeca <_printf_i+0x13e>
 801ef7a:	0022      	movs	r2, r4
 801ef7c:	2301      	movs	r3, #1
 801ef7e:	9906      	ldr	r1, [sp, #24]
 801ef80:	9805      	ldr	r0, [sp, #20]
 801ef82:	9e07      	ldr	r6, [sp, #28]
 801ef84:	3219      	adds	r2, #25
 801ef86:	47b0      	blx	r6
 801ef88:	3001      	adds	r0, #1
 801ef8a:	d09c      	beq.n	801eec6 <_printf_i+0x13a>
 801ef8c:	3501      	adds	r5, #1
 801ef8e:	68e3      	ldr	r3, [r4, #12]
 801ef90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ef92:	1a9b      	subs	r3, r3, r2
 801ef94:	42ab      	cmp	r3, r5
 801ef96:	dcf0      	bgt.n	801ef7a <_printf_i+0x1ee>
 801ef98:	e7e9      	b.n	801ef6e <_printf_i+0x1e2>
 801ef9a:	2500      	movs	r5, #0
 801ef9c:	e7f7      	b.n	801ef8e <_printf_i+0x202>
 801ef9e:	46c0      	nop			@ (mov r8, r8)
 801efa0:	080249e3 	.word	0x080249e3
 801efa4:	080249f4 	.word	0x080249f4

0801efa8 <std>:
 801efa8:	2300      	movs	r3, #0
 801efaa:	b510      	push	{r4, lr}
 801efac:	0004      	movs	r4, r0
 801efae:	6003      	str	r3, [r0, #0]
 801efb0:	6043      	str	r3, [r0, #4]
 801efb2:	6083      	str	r3, [r0, #8]
 801efb4:	8181      	strh	r1, [r0, #12]
 801efb6:	6643      	str	r3, [r0, #100]	@ 0x64
 801efb8:	81c2      	strh	r2, [r0, #14]
 801efba:	6103      	str	r3, [r0, #16]
 801efbc:	6143      	str	r3, [r0, #20]
 801efbe:	6183      	str	r3, [r0, #24]
 801efc0:	0019      	movs	r1, r3
 801efc2:	2208      	movs	r2, #8
 801efc4:	305c      	adds	r0, #92	@ 0x5c
 801efc6:	f000 fa67 	bl	801f498 <memset>
 801efca:	4b0b      	ldr	r3, [pc, #44]	@ (801eff8 <std+0x50>)
 801efcc:	6224      	str	r4, [r4, #32]
 801efce:	6263      	str	r3, [r4, #36]	@ 0x24
 801efd0:	4b0a      	ldr	r3, [pc, #40]	@ (801effc <std+0x54>)
 801efd2:	62a3      	str	r3, [r4, #40]	@ 0x28
 801efd4:	4b0a      	ldr	r3, [pc, #40]	@ (801f000 <std+0x58>)
 801efd6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801efd8:	4b0a      	ldr	r3, [pc, #40]	@ (801f004 <std+0x5c>)
 801efda:	6323      	str	r3, [r4, #48]	@ 0x30
 801efdc:	4b0a      	ldr	r3, [pc, #40]	@ (801f008 <std+0x60>)
 801efde:	429c      	cmp	r4, r3
 801efe0:	d005      	beq.n	801efee <std+0x46>
 801efe2:	4b0a      	ldr	r3, [pc, #40]	@ (801f00c <std+0x64>)
 801efe4:	429c      	cmp	r4, r3
 801efe6:	d002      	beq.n	801efee <std+0x46>
 801efe8:	4b09      	ldr	r3, [pc, #36]	@ (801f010 <std+0x68>)
 801efea:	429c      	cmp	r4, r3
 801efec:	d103      	bne.n	801eff6 <std+0x4e>
 801efee:	0020      	movs	r0, r4
 801eff0:	3058      	adds	r0, #88	@ 0x58
 801eff2:	f000 fb1f 	bl	801f634 <__retarget_lock_init_recursive>
 801eff6:	bd10      	pop	{r4, pc}
 801eff8:	0801f251 	.word	0x0801f251
 801effc:	0801f279 	.word	0x0801f279
 801f000:	0801f2b1 	.word	0x0801f2b1
 801f004:	0801f2dd 	.word	0x0801f2dd
 801f008:	200037e4 	.word	0x200037e4
 801f00c:	2000384c 	.word	0x2000384c
 801f010:	200038b4 	.word	0x200038b4

0801f014 <stdio_exit_handler>:
 801f014:	b510      	push	{r4, lr}
 801f016:	4a03      	ldr	r2, [pc, #12]	@ (801f024 <stdio_exit_handler+0x10>)
 801f018:	4903      	ldr	r1, [pc, #12]	@ (801f028 <stdio_exit_handler+0x14>)
 801f01a:	4804      	ldr	r0, [pc, #16]	@ (801f02c <stdio_exit_handler+0x18>)
 801f01c:	f000 f86c 	bl	801f0f8 <_fwalk_sglue>
 801f020:	bd10      	pop	{r4, pc}
 801f022:	46c0      	nop			@ (mov r8, r8)
 801f024:	20000250 	.word	0x20000250
 801f028:	08021c59 	.word	0x08021c59
 801f02c:	200003cc 	.word	0x200003cc

0801f030 <cleanup_stdio>:
 801f030:	6841      	ldr	r1, [r0, #4]
 801f032:	4b0b      	ldr	r3, [pc, #44]	@ (801f060 <cleanup_stdio+0x30>)
 801f034:	b510      	push	{r4, lr}
 801f036:	0004      	movs	r4, r0
 801f038:	4299      	cmp	r1, r3
 801f03a:	d001      	beq.n	801f040 <cleanup_stdio+0x10>
 801f03c:	f002 fe0c 	bl	8021c58 <_fflush_r>
 801f040:	68a1      	ldr	r1, [r4, #8]
 801f042:	4b08      	ldr	r3, [pc, #32]	@ (801f064 <cleanup_stdio+0x34>)
 801f044:	4299      	cmp	r1, r3
 801f046:	d002      	beq.n	801f04e <cleanup_stdio+0x1e>
 801f048:	0020      	movs	r0, r4
 801f04a:	f002 fe05 	bl	8021c58 <_fflush_r>
 801f04e:	68e1      	ldr	r1, [r4, #12]
 801f050:	4b05      	ldr	r3, [pc, #20]	@ (801f068 <cleanup_stdio+0x38>)
 801f052:	4299      	cmp	r1, r3
 801f054:	d002      	beq.n	801f05c <cleanup_stdio+0x2c>
 801f056:	0020      	movs	r0, r4
 801f058:	f002 fdfe 	bl	8021c58 <_fflush_r>
 801f05c:	bd10      	pop	{r4, pc}
 801f05e:	46c0      	nop			@ (mov r8, r8)
 801f060:	200037e4 	.word	0x200037e4
 801f064:	2000384c 	.word	0x2000384c
 801f068:	200038b4 	.word	0x200038b4

0801f06c <global_stdio_init.part.0>:
 801f06c:	b510      	push	{r4, lr}
 801f06e:	4b09      	ldr	r3, [pc, #36]	@ (801f094 <global_stdio_init.part.0+0x28>)
 801f070:	4a09      	ldr	r2, [pc, #36]	@ (801f098 <global_stdio_init.part.0+0x2c>)
 801f072:	2104      	movs	r1, #4
 801f074:	601a      	str	r2, [r3, #0]
 801f076:	4809      	ldr	r0, [pc, #36]	@ (801f09c <global_stdio_init.part.0+0x30>)
 801f078:	2200      	movs	r2, #0
 801f07a:	f7ff ff95 	bl	801efa8 <std>
 801f07e:	2201      	movs	r2, #1
 801f080:	2109      	movs	r1, #9
 801f082:	4807      	ldr	r0, [pc, #28]	@ (801f0a0 <global_stdio_init.part.0+0x34>)
 801f084:	f7ff ff90 	bl	801efa8 <std>
 801f088:	2202      	movs	r2, #2
 801f08a:	2112      	movs	r1, #18
 801f08c:	4805      	ldr	r0, [pc, #20]	@ (801f0a4 <global_stdio_init.part.0+0x38>)
 801f08e:	f7ff ff8b 	bl	801efa8 <std>
 801f092:	bd10      	pop	{r4, pc}
 801f094:	2000391c 	.word	0x2000391c
 801f098:	0801f015 	.word	0x0801f015
 801f09c:	200037e4 	.word	0x200037e4
 801f0a0:	2000384c 	.word	0x2000384c
 801f0a4:	200038b4 	.word	0x200038b4

0801f0a8 <__sfp_lock_acquire>:
 801f0a8:	b510      	push	{r4, lr}
 801f0aa:	4802      	ldr	r0, [pc, #8]	@ (801f0b4 <__sfp_lock_acquire+0xc>)
 801f0ac:	f000 fac3 	bl	801f636 <__retarget_lock_acquire_recursive>
 801f0b0:	bd10      	pop	{r4, pc}
 801f0b2:	46c0      	nop			@ (mov r8, r8)
 801f0b4:	20003925 	.word	0x20003925

0801f0b8 <__sfp_lock_release>:
 801f0b8:	b510      	push	{r4, lr}
 801f0ba:	4802      	ldr	r0, [pc, #8]	@ (801f0c4 <__sfp_lock_release+0xc>)
 801f0bc:	f000 fabc 	bl	801f638 <__retarget_lock_release_recursive>
 801f0c0:	bd10      	pop	{r4, pc}
 801f0c2:	46c0      	nop			@ (mov r8, r8)
 801f0c4:	20003925 	.word	0x20003925

0801f0c8 <__sinit>:
 801f0c8:	b510      	push	{r4, lr}
 801f0ca:	0004      	movs	r4, r0
 801f0cc:	f7ff ffec 	bl	801f0a8 <__sfp_lock_acquire>
 801f0d0:	6a23      	ldr	r3, [r4, #32]
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	d002      	beq.n	801f0dc <__sinit+0x14>
 801f0d6:	f7ff ffef 	bl	801f0b8 <__sfp_lock_release>
 801f0da:	bd10      	pop	{r4, pc}
 801f0dc:	4b04      	ldr	r3, [pc, #16]	@ (801f0f0 <__sinit+0x28>)
 801f0de:	6223      	str	r3, [r4, #32]
 801f0e0:	4b04      	ldr	r3, [pc, #16]	@ (801f0f4 <__sinit+0x2c>)
 801f0e2:	681b      	ldr	r3, [r3, #0]
 801f0e4:	2b00      	cmp	r3, #0
 801f0e6:	d1f6      	bne.n	801f0d6 <__sinit+0xe>
 801f0e8:	f7ff ffc0 	bl	801f06c <global_stdio_init.part.0>
 801f0ec:	e7f3      	b.n	801f0d6 <__sinit+0xe>
 801f0ee:	46c0      	nop			@ (mov r8, r8)
 801f0f0:	0801f031 	.word	0x0801f031
 801f0f4:	2000391c 	.word	0x2000391c

0801f0f8 <_fwalk_sglue>:
 801f0f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f0fa:	0014      	movs	r4, r2
 801f0fc:	2600      	movs	r6, #0
 801f0fe:	9000      	str	r0, [sp, #0]
 801f100:	9101      	str	r1, [sp, #4]
 801f102:	68a5      	ldr	r5, [r4, #8]
 801f104:	6867      	ldr	r7, [r4, #4]
 801f106:	3f01      	subs	r7, #1
 801f108:	d504      	bpl.n	801f114 <_fwalk_sglue+0x1c>
 801f10a:	6824      	ldr	r4, [r4, #0]
 801f10c:	2c00      	cmp	r4, #0
 801f10e:	d1f8      	bne.n	801f102 <_fwalk_sglue+0xa>
 801f110:	0030      	movs	r0, r6
 801f112:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f114:	89ab      	ldrh	r3, [r5, #12]
 801f116:	2b01      	cmp	r3, #1
 801f118:	d908      	bls.n	801f12c <_fwalk_sglue+0x34>
 801f11a:	220e      	movs	r2, #14
 801f11c:	5eab      	ldrsh	r3, [r5, r2]
 801f11e:	3301      	adds	r3, #1
 801f120:	d004      	beq.n	801f12c <_fwalk_sglue+0x34>
 801f122:	0029      	movs	r1, r5
 801f124:	9800      	ldr	r0, [sp, #0]
 801f126:	9b01      	ldr	r3, [sp, #4]
 801f128:	4798      	blx	r3
 801f12a:	4306      	orrs	r6, r0
 801f12c:	3568      	adds	r5, #104	@ 0x68
 801f12e:	e7ea      	b.n	801f106 <_fwalk_sglue+0xe>

0801f130 <iprintf>:
 801f130:	b40f      	push	{r0, r1, r2, r3}
 801f132:	b507      	push	{r0, r1, r2, lr}
 801f134:	4905      	ldr	r1, [pc, #20]	@ (801f14c <iprintf+0x1c>)
 801f136:	ab04      	add	r3, sp, #16
 801f138:	6808      	ldr	r0, [r1, #0]
 801f13a:	cb04      	ldmia	r3!, {r2}
 801f13c:	6881      	ldr	r1, [r0, #8]
 801f13e:	9301      	str	r3, [sp, #4]
 801f140:	f002 fbe8 	bl	8021914 <_vfiprintf_r>
 801f144:	b003      	add	sp, #12
 801f146:	bc08      	pop	{r3}
 801f148:	b004      	add	sp, #16
 801f14a:	4718      	bx	r3
 801f14c:	200003c8 	.word	0x200003c8

0801f150 <_puts_r>:
 801f150:	6a03      	ldr	r3, [r0, #32]
 801f152:	b570      	push	{r4, r5, r6, lr}
 801f154:	0005      	movs	r5, r0
 801f156:	000e      	movs	r6, r1
 801f158:	6884      	ldr	r4, [r0, #8]
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	d101      	bne.n	801f162 <_puts_r+0x12>
 801f15e:	f7ff ffb3 	bl	801f0c8 <__sinit>
 801f162:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f164:	07db      	lsls	r3, r3, #31
 801f166:	d405      	bmi.n	801f174 <_puts_r+0x24>
 801f168:	89a3      	ldrh	r3, [r4, #12]
 801f16a:	059b      	lsls	r3, r3, #22
 801f16c:	d402      	bmi.n	801f174 <_puts_r+0x24>
 801f16e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f170:	f000 fa61 	bl	801f636 <__retarget_lock_acquire_recursive>
 801f174:	89a3      	ldrh	r3, [r4, #12]
 801f176:	071b      	lsls	r3, r3, #28
 801f178:	d502      	bpl.n	801f180 <_puts_r+0x30>
 801f17a:	6923      	ldr	r3, [r4, #16]
 801f17c:	2b00      	cmp	r3, #0
 801f17e:	d11f      	bne.n	801f1c0 <_puts_r+0x70>
 801f180:	0021      	movs	r1, r4
 801f182:	0028      	movs	r0, r5
 801f184:	f000 f92a 	bl	801f3dc <__swsetup_r>
 801f188:	2800      	cmp	r0, #0
 801f18a:	d019      	beq.n	801f1c0 <_puts_r+0x70>
 801f18c:	2501      	movs	r5, #1
 801f18e:	426d      	negs	r5, r5
 801f190:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f192:	07db      	lsls	r3, r3, #31
 801f194:	d405      	bmi.n	801f1a2 <_puts_r+0x52>
 801f196:	89a3      	ldrh	r3, [r4, #12]
 801f198:	059b      	lsls	r3, r3, #22
 801f19a:	d402      	bmi.n	801f1a2 <_puts_r+0x52>
 801f19c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f19e:	f000 fa4b 	bl	801f638 <__retarget_lock_release_recursive>
 801f1a2:	0028      	movs	r0, r5
 801f1a4:	bd70      	pop	{r4, r5, r6, pc}
 801f1a6:	3601      	adds	r6, #1
 801f1a8:	60a3      	str	r3, [r4, #8]
 801f1aa:	2b00      	cmp	r3, #0
 801f1ac:	da04      	bge.n	801f1b8 <_puts_r+0x68>
 801f1ae:	69a2      	ldr	r2, [r4, #24]
 801f1b0:	429a      	cmp	r2, r3
 801f1b2:	dc16      	bgt.n	801f1e2 <_puts_r+0x92>
 801f1b4:	290a      	cmp	r1, #10
 801f1b6:	d014      	beq.n	801f1e2 <_puts_r+0x92>
 801f1b8:	6823      	ldr	r3, [r4, #0]
 801f1ba:	1c5a      	adds	r2, r3, #1
 801f1bc:	6022      	str	r2, [r4, #0]
 801f1be:	7019      	strb	r1, [r3, #0]
 801f1c0:	68a3      	ldr	r3, [r4, #8]
 801f1c2:	7831      	ldrb	r1, [r6, #0]
 801f1c4:	3b01      	subs	r3, #1
 801f1c6:	2900      	cmp	r1, #0
 801f1c8:	d1ed      	bne.n	801f1a6 <_puts_r+0x56>
 801f1ca:	60a3      	str	r3, [r4, #8]
 801f1cc:	2b00      	cmp	r3, #0
 801f1ce:	da0f      	bge.n	801f1f0 <_puts_r+0xa0>
 801f1d0:	0022      	movs	r2, r4
 801f1d2:	0028      	movs	r0, r5
 801f1d4:	310a      	adds	r1, #10
 801f1d6:	f000 f8bf 	bl	801f358 <__swbuf_r>
 801f1da:	3001      	adds	r0, #1
 801f1dc:	d0d6      	beq.n	801f18c <_puts_r+0x3c>
 801f1de:	250a      	movs	r5, #10
 801f1e0:	e7d6      	b.n	801f190 <_puts_r+0x40>
 801f1e2:	0022      	movs	r2, r4
 801f1e4:	0028      	movs	r0, r5
 801f1e6:	f000 f8b7 	bl	801f358 <__swbuf_r>
 801f1ea:	3001      	adds	r0, #1
 801f1ec:	d1e8      	bne.n	801f1c0 <_puts_r+0x70>
 801f1ee:	e7cd      	b.n	801f18c <_puts_r+0x3c>
 801f1f0:	6823      	ldr	r3, [r4, #0]
 801f1f2:	1c5a      	adds	r2, r3, #1
 801f1f4:	6022      	str	r2, [r4, #0]
 801f1f6:	220a      	movs	r2, #10
 801f1f8:	701a      	strb	r2, [r3, #0]
 801f1fa:	e7f0      	b.n	801f1de <_puts_r+0x8e>

0801f1fc <puts>:
 801f1fc:	b510      	push	{r4, lr}
 801f1fe:	4b03      	ldr	r3, [pc, #12]	@ (801f20c <puts+0x10>)
 801f200:	0001      	movs	r1, r0
 801f202:	6818      	ldr	r0, [r3, #0]
 801f204:	f7ff ffa4 	bl	801f150 <_puts_r>
 801f208:	bd10      	pop	{r4, pc}
 801f20a:	46c0      	nop			@ (mov r8, r8)
 801f20c:	200003c8 	.word	0x200003c8

0801f210 <siprintf>:
 801f210:	b40e      	push	{r1, r2, r3}
 801f212:	b500      	push	{lr}
 801f214:	490b      	ldr	r1, [pc, #44]	@ (801f244 <siprintf+0x34>)
 801f216:	b09c      	sub	sp, #112	@ 0x70
 801f218:	ab1d      	add	r3, sp, #116	@ 0x74
 801f21a:	9002      	str	r0, [sp, #8]
 801f21c:	9006      	str	r0, [sp, #24]
 801f21e:	9107      	str	r1, [sp, #28]
 801f220:	9104      	str	r1, [sp, #16]
 801f222:	4809      	ldr	r0, [pc, #36]	@ (801f248 <siprintf+0x38>)
 801f224:	4909      	ldr	r1, [pc, #36]	@ (801f24c <siprintf+0x3c>)
 801f226:	cb04      	ldmia	r3!, {r2}
 801f228:	9105      	str	r1, [sp, #20]
 801f22a:	6800      	ldr	r0, [r0, #0]
 801f22c:	a902      	add	r1, sp, #8
 801f22e:	9301      	str	r3, [sp, #4]
 801f230:	f002 fa4a 	bl	80216c8 <_svfiprintf_r>
 801f234:	2200      	movs	r2, #0
 801f236:	9b02      	ldr	r3, [sp, #8]
 801f238:	701a      	strb	r2, [r3, #0]
 801f23a:	b01c      	add	sp, #112	@ 0x70
 801f23c:	bc08      	pop	{r3}
 801f23e:	b003      	add	sp, #12
 801f240:	4718      	bx	r3
 801f242:	46c0      	nop			@ (mov r8, r8)
 801f244:	7fffffff 	.word	0x7fffffff
 801f248:	200003c8 	.word	0x200003c8
 801f24c:	ffff0208 	.word	0xffff0208

0801f250 <__sread>:
 801f250:	b570      	push	{r4, r5, r6, lr}
 801f252:	000c      	movs	r4, r1
 801f254:	250e      	movs	r5, #14
 801f256:	5f49      	ldrsh	r1, [r1, r5]
 801f258:	f000 f99a 	bl	801f590 <_read_r>
 801f25c:	2800      	cmp	r0, #0
 801f25e:	db03      	blt.n	801f268 <__sread+0x18>
 801f260:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801f262:	181b      	adds	r3, r3, r0
 801f264:	6563      	str	r3, [r4, #84]	@ 0x54
 801f266:	bd70      	pop	{r4, r5, r6, pc}
 801f268:	89a3      	ldrh	r3, [r4, #12]
 801f26a:	4a02      	ldr	r2, [pc, #8]	@ (801f274 <__sread+0x24>)
 801f26c:	4013      	ands	r3, r2
 801f26e:	81a3      	strh	r3, [r4, #12]
 801f270:	e7f9      	b.n	801f266 <__sread+0x16>
 801f272:	46c0      	nop			@ (mov r8, r8)
 801f274:	ffffefff 	.word	0xffffefff

0801f278 <__swrite>:
 801f278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f27a:	001f      	movs	r7, r3
 801f27c:	898b      	ldrh	r3, [r1, #12]
 801f27e:	0005      	movs	r5, r0
 801f280:	000c      	movs	r4, r1
 801f282:	0016      	movs	r6, r2
 801f284:	05db      	lsls	r3, r3, #23
 801f286:	d505      	bpl.n	801f294 <__swrite+0x1c>
 801f288:	230e      	movs	r3, #14
 801f28a:	5ec9      	ldrsh	r1, [r1, r3]
 801f28c:	2200      	movs	r2, #0
 801f28e:	2302      	movs	r3, #2
 801f290:	f000 f96a 	bl	801f568 <_lseek_r>
 801f294:	89a3      	ldrh	r3, [r4, #12]
 801f296:	4a05      	ldr	r2, [pc, #20]	@ (801f2ac <__swrite+0x34>)
 801f298:	0028      	movs	r0, r5
 801f29a:	4013      	ands	r3, r2
 801f29c:	81a3      	strh	r3, [r4, #12]
 801f29e:	0032      	movs	r2, r6
 801f2a0:	230e      	movs	r3, #14
 801f2a2:	5ee1      	ldrsh	r1, [r4, r3]
 801f2a4:	003b      	movs	r3, r7
 801f2a6:	f000 f987 	bl	801f5b8 <_write_r>
 801f2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f2ac:	ffffefff 	.word	0xffffefff

0801f2b0 <__sseek>:
 801f2b0:	b570      	push	{r4, r5, r6, lr}
 801f2b2:	000c      	movs	r4, r1
 801f2b4:	250e      	movs	r5, #14
 801f2b6:	5f49      	ldrsh	r1, [r1, r5]
 801f2b8:	f000 f956 	bl	801f568 <_lseek_r>
 801f2bc:	89a3      	ldrh	r3, [r4, #12]
 801f2be:	1c42      	adds	r2, r0, #1
 801f2c0:	d103      	bne.n	801f2ca <__sseek+0x1a>
 801f2c2:	4a05      	ldr	r2, [pc, #20]	@ (801f2d8 <__sseek+0x28>)
 801f2c4:	4013      	ands	r3, r2
 801f2c6:	81a3      	strh	r3, [r4, #12]
 801f2c8:	bd70      	pop	{r4, r5, r6, pc}
 801f2ca:	2280      	movs	r2, #128	@ 0x80
 801f2cc:	0152      	lsls	r2, r2, #5
 801f2ce:	4313      	orrs	r3, r2
 801f2d0:	81a3      	strh	r3, [r4, #12]
 801f2d2:	6560      	str	r0, [r4, #84]	@ 0x54
 801f2d4:	e7f8      	b.n	801f2c8 <__sseek+0x18>
 801f2d6:	46c0      	nop			@ (mov r8, r8)
 801f2d8:	ffffefff 	.word	0xffffefff

0801f2dc <__sclose>:
 801f2dc:	b510      	push	{r4, lr}
 801f2de:	230e      	movs	r3, #14
 801f2e0:	5ec9      	ldrsh	r1, [r1, r3]
 801f2e2:	f000 f92f 	bl	801f544 <_close_r>
 801f2e6:	bd10      	pop	{r4, pc}

0801f2e8 <_vsniprintf_r>:
 801f2e8:	b530      	push	{r4, r5, lr}
 801f2ea:	0014      	movs	r4, r2
 801f2ec:	0005      	movs	r5, r0
 801f2ee:	001a      	movs	r2, r3
 801f2f0:	b09b      	sub	sp, #108	@ 0x6c
 801f2f2:	2c00      	cmp	r4, #0
 801f2f4:	da05      	bge.n	801f302 <_vsniprintf_r+0x1a>
 801f2f6:	238b      	movs	r3, #139	@ 0x8b
 801f2f8:	6003      	str	r3, [r0, #0]
 801f2fa:	2001      	movs	r0, #1
 801f2fc:	4240      	negs	r0, r0
 801f2fe:	b01b      	add	sp, #108	@ 0x6c
 801f300:	bd30      	pop	{r4, r5, pc}
 801f302:	2382      	movs	r3, #130	@ 0x82
 801f304:	4668      	mov	r0, sp
 801f306:	009b      	lsls	r3, r3, #2
 801f308:	8183      	strh	r3, [r0, #12]
 801f30a:	2300      	movs	r3, #0
 801f30c:	9100      	str	r1, [sp, #0]
 801f30e:	9104      	str	r1, [sp, #16]
 801f310:	429c      	cmp	r4, r3
 801f312:	d000      	beq.n	801f316 <_vsniprintf_r+0x2e>
 801f314:	1e63      	subs	r3, r4, #1
 801f316:	9302      	str	r3, [sp, #8]
 801f318:	9305      	str	r3, [sp, #20]
 801f31a:	2301      	movs	r3, #1
 801f31c:	4669      	mov	r1, sp
 801f31e:	425b      	negs	r3, r3
 801f320:	81cb      	strh	r3, [r1, #14]
 801f322:	0028      	movs	r0, r5
 801f324:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f326:	f002 f9cf 	bl	80216c8 <_svfiprintf_r>
 801f32a:	1c43      	adds	r3, r0, #1
 801f32c:	da01      	bge.n	801f332 <_vsniprintf_r+0x4a>
 801f32e:	238b      	movs	r3, #139	@ 0x8b
 801f330:	602b      	str	r3, [r5, #0]
 801f332:	2c00      	cmp	r4, #0
 801f334:	d0e3      	beq.n	801f2fe <_vsniprintf_r+0x16>
 801f336:	2200      	movs	r2, #0
 801f338:	9b00      	ldr	r3, [sp, #0]
 801f33a:	701a      	strb	r2, [r3, #0]
 801f33c:	e7df      	b.n	801f2fe <_vsniprintf_r+0x16>
	...

0801f340 <vsniprintf>:
 801f340:	b513      	push	{r0, r1, r4, lr}
 801f342:	4c04      	ldr	r4, [pc, #16]	@ (801f354 <vsniprintf+0x14>)
 801f344:	9300      	str	r3, [sp, #0]
 801f346:	0013      	movs	r3, r2
 801f348:	000a      	movs	r2, r1
 801f34a:	0001      	movs	r1, r0
 801f34c:	6820      	ldr	r0, [r4, #0]
 801f34e:	f7ff ffcb 	bl	801f2e8 <_vsniprintf_r>
 801f352:	bd16      	pop	{r1, r2, r4, pc}
 801f354:	200003c8 	.word	0x200003c8

0801f358 <__swbuf_r>:
 801f358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f35a:	0006      	movs	r6, r0
 801f35c:	000d      	movs	r5, r1
 801f35e:	0014      	movs	r4, r2
 801f360:	2800      	cmp	r0, #0
 801f362:	d004      	beq.n	801f36e <__swbuf_r+0x16>
 801f364:	6a03      	ldr	r3, [r0, #32]
 801f366:	2b00      	cmp	r3, #0
 801f368:	d101      	bne.n	801f36e <__swbuf_r+0x16>
 801f36a:	f7ff fead 	bl	801f0c8 <__sinit>
 801f36e:	69a3      	ldr	r3, [r4, #24]
 801f370:	60a3      	str	r3, [r4, #8]
 801f372:	89a3      	ldrh	r3, [r4, #12]
 801f374:	071b      	lsls	r3, r3, #28
 801f376:	d502      	bpl.n	801f37e <__swbuf_r+0x26>
 801f378:	6923      	ldr	r3, [r4, #16]
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	d109      	bne.n	801f392 <__swbuf_r+0x3a>
 801f37e:	0021      	movs	r1, r4
 801f380:	0030      	movs	r0, r6
 801f382:	f000 f82b 	bl	801f3dc <__swsetup_r>
 801f386:	2800      	cmp	r0, #0
 801f388:	d003      	beq.n	801f392 <__swbuf_r+0x3a>
 801f38a:	2501      	movs	r5, #1
 801f38c:	426d      	negs	r5, r5
 801f38e:	0028      	movs	r0, r5
 801f390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f392:	6923      	ldr	r3, [r4, #16]
 801f394:	6820      	ldr	r0, [r4, #0]
 801f396:	b2ef      	uxtb	r7, r5
 801f398:	1ac0      	subs	r0, r0, r3
 801f39a:	6963      	ldr	r3, [r4, #20]
 801f39c:	b2ed      	uxtb	r5, r5
 801f39e:	4283      	cmp	r3, r0
 801f3a0:	dc05      	bgt.n	801f3ae <__swbuf_r+0x56>
 801f3a2:	0021      	movs	r1, r4
 801f3a4:	0030      	movs	r0, r6
 801f3a6:	f002 fc57 	bl	8021c58 <_fflush_r>
 801f3aa:	2800      	cmp	r0, #0
 801f3ac:	d1ed      	bne.n	801f38a <__swbuf_r+0x32>
 801f3ae:	68a3      	ldr	r3, [r4, #8]
 801f3b0:	3001      	adds	r0, #1
 801f3b2:	3b01      	subs	r3, #1
 801f3b4:	60a3      	str	r3, [r4, #8]
 801f3b6:	6823      	ldr	r3, [r4, #0]
 801f3b8:	1c5a      	adds	r2, r3, #1
 801f3ba:	6022      	str	r2, [r4, #0]
 801f3bc:	701f      	strb	r7, [r3, #0]
 801f3be:	6963      	ldr	r3, [r4, #20]
 801f3c0:	4283      	cmp	r3, r0
 801f3c2:	d004      	beq.n	801f3ce <__swbuf_r+0x76>
 801f3c4:	89a3      	ldrh	r3, [r4, #12]
 801f3c6:	07db      	lsls	r3, r3, #31
 801f3c8:	d5e1      	bpl.n	801f38e <__swbuf_r+0x36>
 801f3ca:	2d0a      	cmp	r5, #10
 801f3cc:	d1df      	bne.n	801f38e <__swbuf_r+0x36>
 801f3ce:	0021      	movs	r1, r4
 801f3d0:	0030      	movs	r0, r6
 801f3d2:	f002 fc41 	bl	8021c58 <_fflush_r>
 801f3d6:	2800      	cmp	r0, #0
 801f3d8:	d0d9      	beq.n	801f38e <__swbuf_r+0x36>
 801f3da:	e7d6      	b.n	801f38a <__swbuf_r+0x32>

0801f3dc <__swsetup_r>:
 801f3dc:	4b2d      	ldr	r3, [pc, #180]	@ (801f494 <__swsetup_r+0xb8>)
 801f3de:	b570      	push	{r4, r5, r6, lr}
 801f3e0:	0005      	movs	r5, r0
 801f3e2:	6818      	ldr	r0, [r3, #0]
 801f3e4:	000c      	movs	r4, r1
 801f3e6:	2800      	cmp	r0, #0
 801f3e8:	d004      	beq.n	801f3f4 <__swsetup_r+0x18>
 801f3ea:	6a03      	ldr	r3, [r0, #32]
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	d101      	bne.n	801f3f4 <__swsetup_r+0x18>
 801f3f0:	f7ff fe6a 	bl	801f0c8 <__sinit>
 801f3f4:	230c      	movs	r3, #12
 801f3f6:	5ee2      	ldrsh	r2, [r4, r3]
 801f3f8:	0713      	lsls	r3, r2, #28
 801f3fa:	d423      	bmi.n	801f444 <__swsetup_r+0x68>
 801f3fc:	06d3      	lsls	r3, r2, #27
 801f3fe:	d407      	bmi.n	801f410 <__swsetup_r+0x34>
 801f400:	2309      	movs	r3, #9
 801f402:	602b      	str	r3, [r5, #0]
 801f404:	2340      	movs	r3, #64	@ 0x40
 801f406:	2001      	movs	r0, #1
 801f408:	4313      	orrs	r3, r2
 801f40a:	81a3      	strh	r3, [r4, #12]
 801f40c:	4240      	negs	r0, r0
 801f40e:	e03a      	b.n	801f486 <__swsetup_r+0xaa>
 801f410:	0752      	lsls	r2, r2, #29
 801f412:	d513      	bpl.n	801f43c <__swsetup_r+0x60>
 801f414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f416:	2900      	cmp	r1, #0
 801f418:	d008      	beq.n	801f42c <__swsetup_r+0x50>
 801f41a:	0023      	movs	r3, r4
 801f41c:	3344      	adds	r3, #68	@ 0x44
 801f41e:	4299      	cmp	r1, r3
 801f420:	d002      	beq.n	801f428 <__swsetup_r+0x4c>
 801f422:	0028      	movs	r0, r5
 801f424:	f000 ffa6 	bl	8020374 <_free_r>
 801f428:	2300      	movs	r3, #0
 801f42a:	6363      	str	r3, [r4, #52]	@ 0x34
 801f42c:	2224      	movs	r2, #36	@ 0x24
 801f42e:	89a3      	ldrh	r3, [r4, #12]
 801f430:	4393      	bics	r3, r2
 801f432:	81a3      	strh	r3, [r4, #12]
 801f434:	2300      	movs	r3, #0
 801f436:	6063      	str	r3, [r4, #4]
 801f438:	6923      	ldr	r3, [r4, #16]
 801f43a:	6023      	str	r3, [r4, #0]
 801f43c:	2308      	movs	r3, #8
 801f43e:	89a2      	ldrh	r2, [r4, #12]
 801f440:	4313      	orrs	r3, r2
 801f442:	81a3      	strh	r3, [r4, #12]
 801f444:	6923      	ldr	r3, [r4, #16]
 801f446:	2b00      	cmp	r3, #0
 801f448:	d10b      	bne.n	801f462 <__swsetup_r+0x86>
 801f44a:	21a0      	movs	r1, #160	@ 0xa0
 801f44c:	2280      	movs	r2, #128	@ 0x80
 801f44e:	89a3      	ldrh	r3, [r4, #12]
 801f450:	0089      	lsls	r1, r1, #2
 801f452:	0092      	lsls	r2, r2, #2
 801f454:	400b      	ands	r3, r1
 801f456:	4293      	cmp	r3, r2
 801f458:	d003      	beq.n	801f462 <__swsetup_r+0x86>
 801f45a:	0021      	movs	r1, r4
 801f45c:	0028      	movs	r0, r5
 801f45e:	f002 fc51 	bl	8021d04 <__smakebuf_r>
 801f462:	230c      	movs	r3, #12
 801f464:	5ee2      	ldrsh	r2, [r4, r3]
 801f466:	2101      	movs	r1, #1
 801f468:	0013      	movs	r3, r2
 801f46a:	400b      	ands	r3, r1
 801f46c:	420a      	tst	r2, r1
 801f46e:	d00b      	beq.n	801f488 <__swsetup_r+0xac>
 801f470:	2300      	movs	r3, #0
 801f472:	60a3      	str	r3, [r4, #8]
 801f474:	6963      	ldr	r3, [r4, #20]
 801f476:	425b      	negs	r3, r3
 801f478:	61a3      	str	r3, [r4, #24]
 801f47a:	2000      	movs	r0, #0
 801f47c:	6923      	ldr	r3, [r4, #16]
 801f47e:	4283      	cmp	r3, r0
 801f480:	d101      	bne.n	801f486 <__swsetup_r+0xaa>
 801f482:	0613      	lsls	r3, r2, #24
 801f484:	d4be      	bmi.n	801f404 <__swsetup_r+0x28>
 801f486:	bd70      	pop	{r4, r5, r6, pc}
 801f488:	0791      	lsls	r1, r2, #30
 801f48a:	d400      	bmi.n	801f48e <__swsetup_r+0xb2>
 801f48c:	6963      	ldr	r3, [r4, #20]
 801f48e:	60a3      	str	r3, [r4, #8]
 801f490:	e7f3      	b.n	801f47a <__swsetup_r+0x9e>
 801f492:	46c0      	nop			@ (mov r8, r8)
 801f494:	200003c8 	.word	0x200003c8

0801f498 <memset>:
 801f498:	0003      	movs	r3, r0
 801f49a:	1882      	adds	r2, r0, r2
 801f49c:	4293      	cmp	r3, r2
 801f49e:	d100      	bne.n	801f4a2 <memset+0xa>
 801f4a0:	4770      	bx	lr
 801f4a2:	7019      	strb	r1, [r3, #0]
 801f4a4:	3301      	adds	r3, #1
 801f4a6:	e7f9      	b.n	801f49c <memset+0x4>

0801f4a8 <strchr>:
 801f4a8:	b2c9      	uxtb	r1, r1
 801f4aa:	7803      	ldrb	r3, [r0, #0]
 801f4ac:	2b00      	cmp	r3, #0
 801f4ae:	d004      	beq.n	801f4ba <strchr+0x12>
 801f4b0:	428b      	cmp	r3, r1
 801f4b2:	d100      	bne.n	801f4b6 <strchr+0xe>
 801f4b4:	4770      	bx	lr
 801f4b6:	3001      	adds	r0, #1
 801f4b8:	e7f7      	b.n	801f4aa <strchr+0x2>
 801f4ba:	424b      	negs	r3, r1
 801f4bc:	4159      	adcs	r1, r3
 801f4be:	4249      	negs	r1, r1
 801f4c0:	4008      	ands	r0, r1
 801f4c2:	e7f7      	b.n	801f4b4 <strchr+0xc>

0801f4c4 <strncmp>:
 801f4c4:	b530      	push	{r4, r5, lr}
 801f4c6:	0005      	movs	r5, r0
 801f4c8:	1e10      	subs	r0, r2, #0
 801f4ca:	d00b      	beq.n	801f4e4 <strncmp+0x20>
 801f4cc:	2400      	movs	r4, #0
 801f4ce:	3a01      	subs	r2, #1
 801f4d0:	5d2b      	ldrb	r3, [r5, r4]
 801f4d2:	5d08      	ldrb	r0, [r1, r4]
 801f4d4:	4283      	cmp	r3, r0
 801f4d6:	d104      	bne.n	801f4e2 <strncmp+0x1e>
 801f4d8:	42a2      	cmp	r2, r4
 801f4da:	d002      	beq.n	801f4e2 <strncmp+0x1e>
 801f4dc:	3401      	adds	r4, #1
 801f4de:	2b00      	cmp	r3, #0
 801f4e0:	d1f6      	bne.n	801f4d0 <strncmp+0xc>
 801f4e2:	1a18      	subs	r0, r3, r0
 801f4e4:	bd30      	pop	{r4, r5, pc}

0801f4e6 <strncpy>:
 801f4e6:	0003      	movs	r3, r0
 801f4e8:	b530      	push	{r4, r5, lr}
 801f4ea:	001d      	movs	r5, r3
 801f4ec:	2a00      	cmp	r2, #0
 801f4ee:	d006      	beq.n	801f4fe <strncpy+0x18>
 801f4f0:	780c      	ldrb	r4, [r1, #0]
 801f4f2:	3a01      	subs	r2, #1
 801f4f4:	3301      	adds	r3, #1
 801f4f6:	702c      	strb	r4, [r5, #0]
 801f4f8:	3101      	adds	r1, #1
 801f4fa:	2c00      	cmp	r4, #0
 801f4fc:	d1f5      	bne.n	801f4ea <strncpy+0x4>
 801f4fe:	2100      	movs	r1, #0
 801f500:	189a      	adds	r2, r3, r2
 801f502:	4293      	cmp	r3, r2
 801f504:	d100      	bne.n	801f508 <strncpy+0x22>
 801f506:	bd30      	pop	{r4, r5, pc}
 801f508:	7019      	strb	r1, [r3, #0]
 801f50a:	3301      	adds	r3, #1
 801f50c:	e7f9      	b.n	801f502 <strncpy+0x1c>

0801f50e <strstr>:
 801f50e:	780a      	ldrb	r2, [r1, #0]
 801f510:	b530      	push	{r4, r5, lr}
 801f512:	2a00      	cmp	r2, #0
 801f514:	d10c      	bne.n	801f530 <strstr+0x22>
 801f516:	bd30      	pop	{r4, r5, pc}
 801f518:	429a      	cmp	r2, r3
 801f51a:	d108      	bne.n	801f52e <strstr+0x20>
 801f51c:	2301      	movs	r3, #1
 801f51e:	5ccc      	ldrb	r4, [r1, r3]
 801f520:	2c00      	cmp	r4, #0
 801f522:	d0f8      	beq.n	801f516 <strstr+0x8>
 801f524:	5cc5      	ldrb	r5, [r0, r3]
 801f526:	42a5      	cmp	r5, r4
 801f528:	d101      	bne.n	801f52e <strstr+0x20>
 801f52a:	3301      	adds	r3, #1
 801f52c:	e7f7      	b.n	801f51e <strstr+0x10>
 801f52e:	3001      	adds	r0, #1
 801f530:	7803      	ldrb	r3, [r0, #0]
 801f532:	2b00      	cmp	r3, #0
 801f534:	d1f0      	bne.n	801f518 <strstr+0xa>
 801f536:	0018      	movs	r0, r3
 801f538:	e7ed      	b.n	801f516 <strstr+0x8>
	...

0801f53c <_localeconv_r>:
 801f53c:	4800      	ldr	r0, [pc, #0]	@ (801f540 <_localeconv_r+0x4>)
 801f53e:	4770      	bx	lr
 801f540:	2000034c 	.word	0x2000034c

0801f544 <_close_r>:
 801f544:	2300      	movs	r3, #0
 801f546:	b570      	push	{r4, r5, r6, lr}
 801f548:	4d06      	ldr	r5, [pc, #24]	@ (801f564 <_close_r+0x20>)
 801f54a:	0004      	movs	r4, r0
 801f54c:	0008      	movs	r0, r1
 801f54e:	602b      	str	r3, [r5, #0]
 801f550:	f7ed fd9e 	bl	800d090 <_close>
 801f554:	1c43      	adds	r3, r0, #1
 801f556:	d103      	bne.n	801f560 <_close_r+0x1c>
 801f558:	682b      	ldr	r3, [r5, #0]
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	d000      	beq.n	801f560 <_close_r+0x1c>
 801f55e:	6023      	str	r3, [r4, #0]
 801f560:	bd70      	pop	{r4, r5, r6, pc}
 801f562:	46c0      	nop			@ (mov r8, r8)
 801f564:	20003920 	.word	0x20003920

0801f568 <_lseek_r>:
 801f568:	b570      	push	{r4, r5, r6, lr}
 801f56a:	0004      	movs	r4, r0
 801f56c:	0008      	movs	r0, r1
 801f56e:	0011      	movs	r1, r2
 801f570:	001a      	movs	r2, r3
 801f572:	2300      	movs	r3, #0
 801f574:	4d05      	ldr	r5, [pc, #20]	@ (801f58c <_lseek_r+0x24>)
 801f576:	602b      	str	r3, [r5, #0]
 801f578:	f7ed fdab 	bl	800d0d2 <_lseek>
 801f57c:	1c43      	adds	r3, r0, #1
 801f57e:	d103      	bne.n	801f588 <_lseek_r+0x20>
 801f580:	682b      	ldr	r3, [r5, #0]
 801f582:	2b00      	cmp	r3, #0
 801f584:	d000      	beq.n	801f588 <_lseek_r+0x20>
 801f586:	6023      	str	r3, [r4, #0]
 801f588:	bd70      	pop	{r4, r5, r6, pc}
 801f58a:	46c0      	nop			@ (mov r8, r8)
 801f58c:	20003920 	.word	0x20003920

0801f590 <_read_r>:
 801f590:	b570      	push	{r4, r5, r6, lr}
 801f592:	0004      	movs	r4, r0
 801f594:	0008      	movs	r0, r1
 801f596:	0011      	movs	r1, r2
 801f598:	001a      	movs	r2, r3
 801f59a:	2300      	movs	r3, #0
 801f59c:	4d05      	ldr	r5, [pc, #20]	@ (801f5b4 <_read_r+0x24>)
 801f59e:	602b      	str	r3, [r5, #0]
 801f5a0:	f7ed fd59 	bl	800d056 <_read>
 801f5a4:	1c43      	adds	r3, r0, #1
 801f5a6:	d103      	bne.n	801f5b0 <_read_r+0x20>
 801f5a8:	682b      	ldr	r3, [r5, #0]
 801f5aa:	2b00      	cmp	r3, #0
 801f5ac:	d000      	beq.n	801f5b0 <_read_r+0x20>
 801f5ae:	6023      	str	r3, [r4, #0]
 801f5b0:	bd70      	pop	{r4, r5, r6, pc}
 801f5b2:	46c0      	nop			@ (mov r8, r8)
 801f5b4:	20003920 	.word	0x20003920

0801f5b8 <_write_r>:
 801f5b8:	b570      	push	{r4, r5, r6, lr}
 801f5ba:	0004      	movs	r4, r0
 801f5bc:	0008      	movs	r0, r1
 801f5be:	0011      	movs	r1, r2
 801f5c0:	001a      	movs	r2, r3
 801f5c2:	2300      	movs	r3, #0
 801f5c4:	4d05      	ldr	r5, [pc, #20]	@ (801f5dc <_write_r+0x24>)
 801f5c6:	602b      	str	r3, [r5, #0]
 801f5c8:	f7ee fa1a 	bl	800da00 <_write>
 801f5cc:	1c43      	adds	r3, r0, #1
 801f5ce:	d103      	bne.n	801f5d8 <_write_r+0x20>
 801f5d0:	682b      	ldr	r3, [r5, #0]
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	d000      	beq.n	801f5d8 <_write_r+0x20>
 801f5d6:	6023      	str	r3, [r4, #0]
 801f5d8:	bd70      	pop	{r4, r5, r6, pc}
 801f5da:	46c0      	nop			@ (mov r8, r8)
 801f5dc:	20003920 	.word	0x20003920

0801f5e0 <__errno>:
 801f5e0:	4b01      	ldr	r3, [pc, #4]	@ (801f5e8 <__errno+0x8>)
 801f5e2:	6818      	ldr	r0, [r3, #0]
 801f5e4:	4770      	bx	lr
 801f5e6:	46c0      	nop			@ (mov r8, r8)
 801f5e8:	200003c8 	.word	0x200003c8

0801f5ec <__libc_init_array>:
 801f5ec:	b570      	push	{r4, r5, r6, lr}
 801f5ee:	2600      	movs	r6, #0
 801f5f0:	4c0c      	ldr	r4, [pc, #48]	@ (801f624 <__libc_init_array+0x38>)
 801f5f2:	4d0d      	ldr	r5, [pc, #52]	@ (801f628 <__libc_init_array+0x3c>)
 801f5f4:	1b64      	subs	r4, r4, r5
 801f5f6:	10a4      	asrs	r4, r4, #2
 801f5f8:	42a6      	cmp	r6, r4
 801f5fa:	d109      	bne.n	801f610 <__libc_init_array+0x24>
 801f5fc:	2600      	movs	r6, #0
 801f5fe:	f002 fee9 	bl	80223d4 <_init>
 801f602:	4c0a      	ldr	r4, [pc, #40]	@ (801f62c <__libc_init_array+0x40>)
 801f604:	4d0a      	ldr	r5, [pc, #40]	@ (801f630 <__libc_init_array+0x44>)
 801f606:	1b64      	subs	r4, r4, r5
 801f608:	10a4      	asrs	r4, r4, #2
 801f60a:	42a6      	cmp	r6, r4
 801f60c:	d105      	bne.n	801f61a <__libc_init_array+0x2e>
 801f60e:	bd70      	pop	{r4, r5, r6, pc}
 801f610:	00b3      	lsls	r3, r6, #2
 801f612:	58eb      	ldr	r3, [r5, r3]
 801f614:	4798      	blx	r3
 801f616:	3601      	adds	r6, #1
 801f618:	e7ee      	b.n	801f5f8 <__libc_init_array+0xc>
 801f61a:	00b3      	lsls	r3, r6, #2
 801f61c:	58eb      	ldr	r3, [r5, r3]
 801f61e:	4798      	blx	r3
 801f620:	3601      	adds	r6, #1
 801f622:	e7f2      	b.n	801f60a <__libc_init_array+0x1e>
 801f624:	08024cc0 	.word	0x08024cc0
 801f628:	08024cc0 	.word	0x08024cc0
 801f62c:	08024cc4 	.word	0x08024cc4
 801f630:	08024cc0 	.word	0x08024cc0

0801f634 <__retarget_lock_init_recursive>:
 801f634:	4770      	bx	lr

0801f636 <__retarget_lock_acquire_recursive>:
 801f636:	4770      	bx	lr

0801f638 <__retarget_lock_release_recursive>:
 801f638:	4770      	bx	lr

0801f63a <memchr>:
 801f63a:	b2c9      	uxtb	r1, r1
 801f63c:	1882      	adds	r2, r0, r2
 801f63e:	4290      	cmp	r0, r2
 801f640:	d101      	bne.n	801f646 <memchr+0xc>
 801f642:	2000      	movs	r0, #0
 801f644:	4770      	bx	lr
 801f646:	7803      	ldrb	r3, [r0, #0]
 801f648:	428b      	cmp	r3, r1
 801f64a:	d0fb      	beq.n	801f644 <memchr+0xa>
 801f64c:	3001      	adds	r0, #1
 801f64e:	e7f6      	b.n	801f63e <memchr+0x4>

0801f650 <memcpy>:
 801f650:	2300      	movs	r3, #0
 801f652:	b510      	push	{r4, lr}
 801f654:	429a      	cmp	r2, r3
 801f656:	d100      	bne.n	801f65a <memcpy+0xa>
 801f658:	bd10      	pop	{r4, pc}
 801f65a:	5ccc      	ldrb	r4, [r1, r3]
 801f65c:	54c4      	strb	r4, [r0, r3]
 801f65e:	3301      	adds	r3, #1
 801f660:	e7f8      	b.n	801f654 <memcpy+0x4>
	...

0801f664 <nan>:
 801f664:	2000      	movs	r0, #0
 801f666:	4901      	ldr	r1, [pc, #4]	@ (801f66c <nan+0x8>)
 801f668:	4770      	bx	lr
 801f66a:	46c0      	nop			@ (mov r8, r8)
 801f66c:	7ff80000 	.word	0x7ff80000

0801f670 <quorem>:
 801f670:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f672:	6902      	ldr	r2, [r0, #16]
 801f674:	690f      	ldr	r7, [r1, #16]
 801f676:	b087      	sub	sp, #28
 801f678:	0006      	movs	r6, r0
 801f67a:	000b      	movs	r3, r1
 801f67c:	2000      	movs	r0, #0
 801f67e:	9102      	str	r1, [sp, #8]
 801f680:	42ba      	cmp	r2, r7
 801f682:	db6d      	blt.n	801f760 <quorem+0xf0>
 801f684:	3f01      	subs	r7, #1
 801f686:	00bc      	lsls	r4, r7, #2
 801f688:	3314      	adds	r3, #20
 801f68a:	9305      	str	r3, [sp, #20]
 801f68c:	191b      	adds	r3, r3, r4
 801f68e:	9303      	str	r3, [sp, #12]
 801f690:	0033      	movs	r3, r6
 801f692:	3314      	adds	r3, #20
 801f694:	191c      	adds	r4, r3, r4
 801f696:	9301      	str	r3, [sp, #4]
 801f698:	6823      	ldr	r3, [r4, #0]
 801f69a:	9304      	str	r3, [sp, #16]
 801f69c:	9b03      	ldr	r3, [sp, #12]
 801f69e:	9804      	ldr	r0, [sp, #16]
 801f6a0:	681d      	ldr	r5, [r3, #0]
 801f6a2:	3501      	adds	r5, #1
 801f6a4:	0029      	movs	r1, r5
 801f6a6:	f7e0 fd7d 	bl	80001a4 <__udivsi3>
 801f6aa:	9b04      	ldr	r3, [sp, #16]
 801f6ac:	9000      	str	r0, [sp, #0]
 801f6ae:	42ab      	cmp	r3, r5
 801f6b0:	d32b      	bcc.n	801f70a <quorem+0x9a>
 801f6b2:	9b05      	ldr	r3, [sp, #20]
 801f6b4:	9d01      	ldr	r5, [sp, #4]
 801f6b6:	469c      	mov	ip, r3
 801f6b8:	2300      	movs	r3, #0
 801f6ba:	9305      	str	r3, [sp, #20]
 801f6bc:	9304      	str	r3, [sp, #16]
 801f6be:	4662      	mov	r2, ip
 801f6c0:	ca08      	ldmia	r2!, {r3}
 801f6c2:	6828      	ldr	r0, [r5, #0]
 801f6c4:	4694      	mov	ip, r2
 801f6c6:	9a00      	ldr	r2, [sp, #0]
 801f6c8:	b299      	uxth	r1, r3
 801f6ca:	4351      	muls	r1, r2
 801f6cc:	9a05      	ldr	r2, [sp, #20]
 801f6ce:	0c1b      	lsrs	r3, r3, #16
 801f6d0:	1889      	adds	r1, r1, r2
 801f6d2:	9a00      	ldr	r2, [sp, #0]
 801f6d4:	4353      	muls	r3, r2
 801f6d6:	0c0a      	lsrs	r2, r1, #16
 801f6d8:	189b      	adds	r3, r3, r2
 801f6da:	0c1a      	lsrs	r2, r3, #16
 801f6dc:	b289      	uxth	r1, r1
 801f6de:	9205      	str	r2, [sp, #20]
 801f6e0:	b282      	uxth	r2, r0
 801f6e2:	1a52      	subs	r2, r2, r1
 801f6e4:	9904      	ldr	r1, [sp, #16]
 801f6e6:	0c00      	lsrs	r0, r0, #16
 801f6e8:	1852      	adds	r2, r2, r1
 801f6ea:	b29b      	uxth	r3, r3
 801f6ec:	1411      	asrs	r1, r2, #16
 801f6ee:	1ac3      	subs	r3, r0, r3
 801f6f0:	185b      	adds	r3, r3, r1
 801f6f2:	1419      	asrs	r1, r3, #16
 801f6f4:	b292      	uxth	r2, r2
 801f6f6:	041b      	lsls	r3, r3, #16
 801f6f8:	431a      	orrs	r2, r3
 801f6fa:	9b03      	ldr	r3, [sp, #12]
 801f6fc:	9104      	str	r1, [sp, #16]
 801f6fe:	c504      	stmia	r5!, {r2}
 801f700:	4563      	cmp	r3, ip
 801f702:	d2dc      	bcs.n	801f6be <quorem+0x4e>
 801f704:	6823      	ldr	r3, [r4, #0]
 801f706:	2b00      	cmp	r3, #0
 801f708:	d030      	beq.n	801f76c <quorem+0xfc>
 801f70a:	0030      	movs	r0, r6
 801f70c:	9902      	ldr	r1, [sp, #8]
 801f70e:	f001 fd7d 	bl	802120c <__mcmp>
 801f712:	2800      	cmp	r0, #0
 801f714:	db23      	blt.n	801f75e <quorem+0xee>
 801f716:	0034      	movs	r4, r6
 801f718:	2500      	movs	r5, #0
 801f71a:	9902      	ldr	r1, [sp, #8]
 801f71c:	3414      	adds	r4, #20
 801f71e:	3114      	adds	r1, #20
 801f720:	6823      	ldr	r3, [r4, #0]
 801f722:	c901      	ldmia	r1!, {r0}
 801f724:	9302      	str	r3, [sp, #8]
 801f726:	466b      	mov	r3, sp
 801f728:	891b      	ldrh	r3, [r3, #8]
 801f72a:	b282      	uxth	r2, r0
 801f72c:	1a9a      	subs	r2, r3, r2
 801f72e:	9b02      	ldr	r3, [sp, #8]
 801f730:	1952      	adds	r2, r2, r5
 801f732:	0c00      	lsrs	r0, r0, #16
 801f734:	0c1b      	lsrs	r3, r3, #16
 801f736:	1a1b      	subs	r3, r3, r0
 801f738:	1410      	asrs	r0, r2, #16
 801f73a:	181b      	adds	r3, r3, r0
 801f73c:	141d      	asrs	r5, r3, #16
 801f73e:	b292      	uxth	r2, r2
 801f740:	041b      	lsls	r3, r3, #16
 801f742:	431a      	orrs	r2, r3
 801f744:	9b03      	ldr	r3, [sp, #12]
 801f746:	c404      	stmia	r4!, {r2}
 801f748:	428b      	cmp	r3, r1
 801f74a:	d2e9      	bcs.n	801f720 <quorem+0xb0>
 801f74c:	9a01      	ldr	r2, [sp, #4]
 801f74e:	00bb      	lsls	r3, r7, #2
 801f750:	18d3      	adds	r3, r2, r3
 801f752:	681a      	ldr	r2, [r3, #0]
 801f754:	2a00      	cmp	r2, #0
 801f756:	d013      	beq.n	801f780 <quorem+0x110>
 801f758:	9b00      	ldr	r3, [sp, #0]
 801f75a:	3301      	adds	r3, #1
 801f75c:	9300      	str	r3, [sp, #0]
 801f75e:	9800      	ldr	r0, [sp, #0]
 801f760:	b007      	add	sp, #28
 801f762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f764:	6823      	ldr	r3, [r4, #0]
 801f766:	2b00      	cmp	r3, #0
 801f768:	d104      	bne.n	801f774 <quorem+0x104>
 801f76a:	3f01      	subs	r7, #1
 801f76c:	9b01      	ldr	r3, [sp, #4]
 801f76e:	3c04      	subs	r4, #4
 801f770:	42a3      	cmp	r3, r4
 801f772:	d3f7      	bcc.n	801f764 <quorem+0xf4>
 801f774:	6137      	str	r7, [r6, #16]
 801f776:	e7c8      	b.n	801f70a <quorem+0x9a>
 801f778:	681a      	ldr	r2, [r3, #0]
 801f77a:	2a00      	cmp	r2, #0
 801f77c:	d104      	bne.n	801f788 <quorem+0x118>
 801f77e:	3f01      	subs	r7, #1
 801f780:	9a01      	ldr	r2, [sp, #4]
 801f782:	3b04      	subs	r3, #4
 801f784:	429a      	cmp	r2, r3
 801f786:	d3f7      	bcc.n	801f778 <quorem+0x108>
 801f788:	6137      	str	r7, [r6, #16]
 801f78a:	e7e5      	b.n	801f758 <quorem+0xe8>

0801f78c <_dtoa_r>:
 801f78c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f78e:	0014      	movs	r4, r2
 801f790:	001d      	movs	r5, r3
 801f792:	69c6      	ldr	r6, [r0, #28]
 801f794:	b09d      	sub	sp, #116	@ 0x74
 801f796:	940a      	str	r4, [sp, #40]	@ 0x28
 801f798:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f79a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801f79c:	9003      	str	r0, [sp, #12]
 801f79e:	2e00      	cmp	r6, #0
 801f7a0:	d10f      	bne.n	801f7c2 <_dtoa_r+0x36>
 801f7a2:	2010      	movs	r0, #16
 801f7a4:	f001 f98a 	bl	8020abc <malloc>
 801f7a8:	9b03      	ldr	r3, [sp, #12]
 801f7aa:	1e02      	subs	r2, r0, #0
 801f7ac:	61d8      	str	r0, [r3, #28]
 801f7ae:	d104      	bne.n	801f7ba <_dtoa_r+0x2e>
 801f7b0:	21ef      	movs	r1, #239	@ 0xef
 801f7b2:	4bc7      	ldr	r3, [pc, #796]	@ (801fad0 <_dtoa_r+0x344>)
 801f7b4:	48c7      	ldr	r0, [pc, #796]	@ (801fad4 <_dtoa_r+0x348>)
 801f7b6:	f002 fb2f 	bl	8021e18 <__assert_func>
 801f7ba:	6046      	str	r6, [r0, #4]
 801f7bc:	6086      	str	r6, [r0, #8]
 801f7be:	6006      	str	r6, [r0, #0]
 801f7c0:	60c6      	str	r6, [r0, #12]
 801f7c2:	9b03      	ldr	r3, [sp, #12]
 801f7c4:	69db      	ldr	r3, [r3, #28]
 801f7c6:	6819      	ldr	r1, [r3, #0]
 801f7c8:	2900      	cmp	r1, #0
 801f7ca:	d00b      	beq.n	801f7e4 <_dtoa_r+0x58>
 801f7cc:	685a      	ldr	r2, [r3, #4]
 801f7ce:	2301      	movs	r3, #1
 801f7d0:	4093      	lsls	r3, r2
 801f7d2:	604a      	str	r2, [r1, #4]
 801f7d4:	608b      	str	r3, [r1, #8]
 801f7d6:	9803      	ldr	r0, [sp, #12]
 801f7d8:	f001 fa82 	bl	8020ce0 <_Bfree>
 801f7dc:	2200      	movs	r2, #0
 801f7de:	9b03      	ldr	r3, [sp, #12]
 801f7e0:	69db      	ldr	r3, [r3, #28]
 801f7e2:	601a      	str	r2, [r3, #0]
 801f7e4:	2d00      	cmp	r5, #0
 801f7e6:	da1e      	bge.n	801f826 <_dtoa_r+0x9a>
 801f7e8:	2301      	movs	r3, #1
 801f7ea:	603b      	str	r3, [r7, #0]
 801f7ec:	006b      	lsls	r3, r5, #1
 801f7ee:	085b      	lsrs	r3, r3, #1
 801f7f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f7f2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f7f4:	4bb8      	ldr	r3, [pc, #736]	@ (801fad8 <_dtoa_r+0x34c>)
 801f7f6:	4ab8      	ldr	r2, [pc, #736]	@ (801fad8 <_dtoa_r+0x34c>)
 801f7f8:	403b      	ands	r3, r7
 801f7fa:	4293      	cmp	r3, r2
 801f7fc:	d116      	bne.n	801f82c <_dtoa_r+0xa0>
 801f7fe:	4bb7      	ldr	r3, [pc, #732]	@ (801fadc <_dtoa_r+0x350>)
 801f800:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f802:	6013      	str	r3, [r2, #0]
 801f804:	033b      	lsls	r3, r7, #12
 801f806:	0b1b      	lsrs	r3, r3, #12
 801f808:	4323      	orrs	r3, r4
 801f80a:	d101      	bne.n	801f810 <_dtoa_r+0x84>
 801f80c:	f000 fd83 	bl	8020316 <_dtoa_r+0xb8a>
 801f810:	4bb3      	ldr	r3, [pc, #716]	@ (801fae0 <_dtoa_r+0x354>)
 801f812:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f814:	9308      	str	r3, [sp, #32]
 801f816:	2a00      	cmp	r2, #0
 801f818:	d002      	beq.n	801f820 <_dtoa_r+0x94>
 801f81a:	4bb2      	ldr	r3, [pc, #712]	@ (801fae4 <_dtoa_r+0x358>)
 801f81c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f81e:	6013      	str	r3, [r2, #0]
 801f820:	9808      	ldr	r0, [sp, #32]
 801f822:	b01d      	add	sp, #116	@ 0x74
 801f824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f826:	2300      	movs	r3, #0
 801f828:	603b      	str	r3, [r7, #0]
 801f82a:	e7e2      	b.n	801f7f2 <_dtoa_r+0x66>
 801f82c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f82e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f830:	9212      	str	r2, [sp, #72]	@ 0x48
 801f832:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f834:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f836:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f838:	2200      	movs	r2, #0
 801f83a:	2300      	movs	r3, #0
 801f83c:	f7e0 fe38 	bl	80004b0 <__aeabi_dcmpeq>
 801f840:	1e06      	subs	r6, r0, #0
 801f842:	d00b      	beq.n	801f85c <_dtoa_r+0xd0>
 801f844:	2301      	movs	r3, #1
 801f846:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f848:	6013      	str	r3, [r2, #0]
 801f84a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f84c:	2b00      	cmp	r3, #0
 801f84e:	d002      	beq.n	801f856 <_dtoa_r+0xca>
 801f850:	4ba5      	ldr	r3, [pc, #660]	@ (801fae8 <_dtoa_r+0x35c>)
 801f852:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f854:	6013      	str	r3, [r2, #0]
 801f856:	4ba5      	ldr	r3, [pc, #660]	@ (801faec <_dtoa_r+0x360>)
 801f858:	9308      	str	r3, [sp, #32]
 801f85a:	e7e1      	b.n	801f820 <_dtoa_r+0x94>
 801f85c:	ab1a      	add	r3, sp, #104	@ 0x68
 801f85e:	9301      	str	r3, [sp, #4]
 801f860:	ab1b      	add	r3, sp, #108	@ 0x6c
 801f862:	9300      	str	r3, [sp, #0]
 801f864:	9803      	ldr	r0, [sp, #12]
 801f866:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f868:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f86a:	f001 fdf1 	bl	8021450 <__d2b>
 801f86e:	007a      	lsls	r2, r7, #1
 801f870:	9005      	str	r0, [sp, #20]
 801f872:	0d52      	lsrs	r2, r2, #21
 801f874:	d100      	bne.n	801f878 <_dtoa_r+0xec>
 801f876:	e07b      	b.n	801f970 <_dtoa_r+0x1e4>
 801f878:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f87a:	9618      	str	r6, [sp, #96]	@ 0x60
 801f87c:	0319      	lsls	r1, r3, #12
 801f87e:	4b9c      	ldr	r3, [pc, #624]	@ (801faf0 <_dtoa_r+0x364>)
 801f880:	0b09      	lsrs	r1, r1, #12
 801f882:	430b      	orrs	r3, r1
 801f884:	499b      	ldr	r1, [pc, #620]	@ (801faf4 <_dtoa_r+0x368>)
 801f886:	1857      	adds	r7, r2, r1
 801f888:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f88a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f88c:	0019      	movs	r1, r3
 801f88e:	2200      	movs	r2, #0
 801f890:	4b99      	ldr	r3, [pc, #612]	@ (801faf8 <_dtoa_r+0x36c>)
 801f892:	f7e3 f99b 	bl	8002bcc <__aeabi_dsub>
 801f896:	4a99      	ldr	r2, [pc, #612]	@ (801fafc <_dtoa_r+0x370>)
 801f898:	4b99      	ldr	r3, [pc, #612]	@ (801fb00 <_dtoa_r+0x374>)
 801f89a:	f7e2 fecf 	bl	800263c <__aeabi_dmul>
 801f89e:	4a99      	ldr	r2, [pc, #612]	@ (801fb04 <_dtoa_r+0x378>)
 801f8a0:	4b99      	ldr	r3, [pc, #612]	@ (801fb08 <_dtoa_r+0x37c>)
 801f8a2:	f7e1 ff23 	bl	80016ec <__aeabi_dadd>
 801f8a6:	0004      	movs	r4, r0
 801f8a8:	0038      	movs	r0, r7
 801f8aa:	000d      	movs	r5, r1
 801f8ac:	f7e3 fd88 	bl	80033c0 <__aeabi_i2d>
 801f8b0:	4a96      	ldr	r2, [pc, #600]	@ (801fb0c <_dtoa_r+0x380>)
 801f8b2:	4b97      	ldr	r3, [pc, #604]	@ (801fb10 <_dtoa_r+0x384>)
 801f8b4:	f7e2 fec2 	bl	800263c <__aeabi_dmul>
 801f8b8:	0002      	movs	r2, r0
 801f8ba:	000b      	movs	r3, r1
 801f8bc:	0020      	movs	r0, r4
 801f8be:	0029      	movs	r1, r5
 801f8c0:	f7e1 ff14 	bl	80016ec <__aeabi_dadd>
 801f8c4:	0004      	movs	r4, r0
 801f8c6:	000d      	movs	r5, r1
 801f8c8:	f7e3 fd3e 	bl	8003348 <__aeabi_d2iz>
 801f8cc:	2200      	movs	r2, #0
 801f8ce:	9004      	str	r0, [sp, #16]
 801f8d0:	2300      	movs	r3, #0
 801f8d2:	0020      	movs	r0, r4
 801f8d4:	0029      	movs	r1, r5
 801f8d6:	f7e0 fdf1 	bl	80004bc <__aeabi_dcmplt>
 801f8da:	2800      	cmp	r0, #0
 801f8dc:	d00b      	beq.n	801f8f6 <_dtoa_r+0x16a>
 801f8de:	9804      	ldr	r0, [sp, #16]
 801f8e0:	f7e3 fd6e 	bl	80033c0 <__aeabi_i2d>
 801f8e4:	002b      	movs	r3, r5
 801f8e6:	0022      	movs	r2, r4
 801f8e8:	f7e0 fde2 	bl	80004b0 <__aeabi_dcmpeq>
 801f8ec:	4243      	negs	r3, r0
 801f8ee:	4158      	adcs	r0, r3
 801f8f0:	9b04      	ldr	r3, [sp, #16]
 801f8f2:	1a1b      	subs	r3, r3, r0
 801f8f4:	9304      	str	r3, [sp, #16]
 801f8f6:	2301      	movs	r3, #1
 801f8f8:	9315      	str	r3, [sp, #84]	@ 0x54
 801f8fa:	9b04      	ldr	r3, [sp, #16]
 801f8fc:	2b16      	cmp	r3, #22
 801f8fe:	d810      	bhi.n	801f922 <_dtoa_r+0x196>
 801f900:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f902:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f904:	9a04      	ldr	r2, [sp, #16]
 801f906:	4b83      	ldr	r3, [pc, #524]	@ (801fb14 <_dtoa_r+0x388>)
 801f908:	00d2      	lsls	r2, r2, #3
 801f90a:	189b      	adds	r3, r3, r2
 801f90c:	681a      	ldr	r2, [r3, #0]
 801f90e:	685b      	ldr	r3, [r3, #4]
 801f910:	f7e0 fdd4 	bl	80004bc <__aeabi_dcmplt>
 801f914:	2800      	cmp	r0, #0
 801f916:	d047      	beq.n	801f9a8 <_dtoa_r+0x21c>
 801f918:	9b04      	ldr	r3, [sp, #16]
 801f91a:	3b01      	subs	r3, #1
 801f91c:	9304      	str	r3, [sp, #16]
 801f91e:	2300      	movs	r3, #0
 801f920:	9315      	str	r3, [sp, #84]	@ 0x54
 801f922:	2200      	movs	r2, #0
 801f924:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801f926:	9206      	str	r2, [sp, #24]
 801f928:	1bdb      	subs	r3, r3, r7
 801f92a:	1e5a      	subs	r2, r3, #1
 801f92c:	d53e      	bpl.n	801f9ac <_dtoa_r+0x220>
 801f92e:	2201      	movs	r2, #1
 801f930:	1ad3      	subs	r3, r2, r3
 801f932:	9306      	str	r3, [sp, #24]
 801f934:	2300      	movs	r3, #0
 801f936:	930d      	str	r3, [sp, #52]	@ 0x34
 801f938:	9b04      	ldr	r3, [sp, #16]
 801f93a:	2b00      	cmp	r3, #0
 801f93c:	db38      	blt.n	801f9b0 <_dtoa_r+0x224>
 801f93e:	9a04      	ldr	r2, [sp, #16]
 801f940:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f942:	4694      	mov	ip, r2
 801f944:	4463      	add	r3, ip
 801f946:	930d      	str	r3, [sp, #52]	@ 0x34
 801f948:	2300      	movs	r3, #0
 801f94a:	9214      	str	r2, [sp, #80]	@ 0x50
 801f94c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f94e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f950:	2401      	movs	r4, #1
 801f952:	2b09      	cmp	r3, #9
 801f954:	d867      	bhi.n	801fa26 <_dtoa_r+0x29a>
 801f956:	2b05      	cmp	r3, #5
 801f958:	dd02      	ble.n	801f960 <_dtoa_r+0x1d4>
 801f95a:	2400      	movs	r4, #0
 801f95c:	3b04      	subs	r3, #4
 801f95e:	9322      	str	r3, [sp, #136]	@ 0x88
 801f960:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f962:	1e98      	subs	r0, r3, #2
 801f964:	2803      	cmp	r0, #3
 801f966:	d867      	bhi.n	801fa38 <_dtoa_r+0x2ac>
 801f968:	f7e0 fc08 	bl	800017c <__gnu_thumb1_case_uqi>
 801f96c:	5b383a2b 	.word	0x5b383a2b
 801f970:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f972:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801f974:	18f6      	adds	r6, r6, r3
 801f976:	4b68      	ldr	r3, [pc, #416]	@ (801fb18 <_dtoa_r+0x38c>)
 801f978:	18f2      	adds	r2, r6, r3
 801f97a:	2a20      	cmp	r2, #32
 801f97c:	dd0f      	ble.n	801f99e <_dtoa_r+0x212>
 801f97e:	2340      	movs	r3, #64	@ 0x40
 801f980:	1a9b      	subs	r3, r3, r2
 801f982:	409f      	lsls	r7, r3
 801f984:	4b65      	ldr	r3, [pc, #404]	@ (801fb1c <_dtoa_r+0x390>)
 801f986:	0038      	movs	r0, r7
 801f988:	18f3      	adds	r3, r6, r3
 801f98a:	40dc      	lsrs	r4, r3
 801f98c:	4320      	orrs	r0, r4
 801f98e:	f7e3 fd45 	bl	800341c <__aeabi_ui2d>
 801f992:	2201      	movs	r2, #1
 801f994:	4b62      	ldr	r3, [pc, #392]	@ (801fb20 <_dtoa_r+0x394>)
 801f996:	1e77      	subs	r7, r6, #1
 801f998:	18cb      	adds	r3, r1, r3
 801f99a:	9218      	str	r2, [sp, #96]	@ 0x60
 801f99c:	e776      	b.n	801f88c <_dtoa_r+0x100>
 801f99e:	2320      	movs	r3, #32
 801f9a0:	0020      	movs	r0, r4
 801f9a2:	1a9b      	subs	r3, r3, r2
 801f9a4:	4098      	lsls	r0, r3
 801f9a6:	e7f2      	b.n	801f98e <_dtoa_r+0x202>
 801f9a8:	9015      	str	r0, [sp, #84]	@ 0x54
 801f9aa:	e7ba      	b.n	801f922 <_dtoa_r+0x196>
 801f9ac:	920d      	str	r2, [sp, #52]	@ 0x34
 801f9ae:	e7c3      	b.n	801f938 <_dtoa_r+0x1ac>
 801f9b0:	9b06      	ldr	r3, [sp, #24]
 801f9b2:	9a04      	ldr	r2, [sp, #16]
 801f9b4:	1a9b      	subs	r3, r3, r2
 801f9b6:	9306      	str	r3, [sp, #24]
 801f9b8:	4253      	negs	r3, r2
 801f9ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f9bc:	2300      	movs	r3, #0
 801f9be:	9314      	str	r3, [sp, #80]	@ 0x50
 801f9c0:	e7c5      	b.n	801f94e <_dtoa_r+0x1c2>
 801f9c2:	2300      	movs	r3, #0
 801f9c4:	9310      	str	r3, [sp, #64]	@ 0x40
 801f9c6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f9c8:	930e      	str	r3, [sp, #56]	@ 0x38
 801f9ca:	9309      	str	r3, [sp, #36]	@ 0x24
 801f9cc:	2b00      	cmp	r3, #0
 801f9ce:	dc13      	bgt.n	801f9f8 <_dtoa_r+0x26c>
 801f9d0:	2301      	movs	r3, #1
 801f9d2:	001a      	movs	r2, r3
 801f9d4:	930e      	str	r3, [sp, #56]	@ 0x38
 801f9d6:	9309      	str	r3, [sp, #36]	@ 0x24
 801f9d8:	9223      	str	r2, [sp, #140]	@ 0x8c
 801f9da:	e00d      	b.n	801f9f8 <_dtoa_r+0x26c>
 801f9dc:	2301      	movs	r3, #1
 801f9de:	e7f1      	b.n	801f9c4 <_dtoa_r+0x238>
 801f9e0:	2300      	movs	r3, #0
 801f9e2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f9e4:	9310      	str	r3, [sp, #64]	@ 0x40
 801f9e6:	4694      	mov	ip, r2
 801f9e8:	9b04      	ldr	r3, [sp, #16]
 801f9ea:	4463      	add	r3, ip
 801f9ec:	930e      	str	r3, [sp, #56]	@ 0x38
 801f9ee:	3301      	adds	r3, #1
 801f9f0:	9309      	str	r3, [sp, #36]	@ 0x24
 801f9f2:	2b00      	cmp	r3, #0
 801f9f4:	dc00      	bgt.n	801f9f8 <_dtoa_r+0x26c>
 801f9f6:	2301      	movs	r3, #1
 801f9f8:	9a03      	ldr	r2, [sp, #12]
 801f9fa:	2100      	movs	r1, #0
 801f9fc:	69d0      	ldr	r0, [r2, #28]
 801f9fe:	2204      	movs	r2, #4
 801fa00:	0015      	movs	r5, r2
 801fa02:	3514      	adds	r5, #20
 801fa04:	429d      	cmp	r5, r3
 801fa06:	d91b      	bls.n	801fa40 <_dtoa_r+0x2b4>
 801fa08:	6041      	str	r1, [r0, #4]
 801fa0a:	9803      	ldr	r0, [sp, #12]
 801fa0c:	f001 f924 	bl	8020c58 <_Balloc>
 801fa10:	9008      	str	r0, [sp, #32]
 801fa12:	2800      	cmp	r0, #0
 801fa14:	d117      	bne.n	801fa46 <_dtoa_r+0x2ba>
 801fa16:	21b0      	movs	r1, #176	@ 0xb0
 801fa18:	4b42      	ldr	r3, [pc, #264]	@ (801fb24 <_dtoa_r+0x398>)
 801fa1a:	482e      	ldr	r0, [pc, #184]	@ (801fad4 <_dtoa_r+0x348>)
 801fa1c:	9a08      	ldr	r2, [sp, #32]
 801fa1e:	31ff      	adds	r1, #255	@ 0xff
 801fa20:	e6c9      	b.n	801f7b6 <_dtoa_r+0x2a>
 801fa22:	2301      	movs	r3, #1
 801fa24:	e7dd      	b.n	801f9e2 <_dtoa_r+0x256>
 801fa26:	2300      	movs	r3, #0
 801fa28:	9410      	str	r4, [sp, #64]	@ 0x40
 801fa2a:	9322      	str	r3, [sp, #136]	@ 0x88
 801fa2c:	3b01      	subs	r3, #1
 801fa2e:	930e      	str	r3, [sp, #56]	@ 0x38
 801fa30:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa32:	2200      	movs	r2, #0
 801fa34:	3313      	adds	r3, #19
 801fa36:	e7cf      	b.n	801f9d8 <_dtoa_r+0x24c>
 801fa38:	2301      	movs	r3, #1
 801fa3a:	9310      	str	r3, [sp, #64]	@ 0x40
 801fa3c:	3b02      	subs	r3, #2
 801fa3e:	e7f6      	b.n	801fa2e <_dtoa_r+0x2a2>
 801fa40:	3101      	adds	r1, #1
 801fa42:	0052      	lsls	r2, r2, #1
 801fa44:	e7dc      	b.n	801fa00 <_dtoa_r+0x274>
 801fa46:	9b03      	ldr	r3, [sp, #12]
 801fa48:	9a08      	ldr	r2, [sp, #32]
 801fa4a:	69db      	ldr	r3, [r3, #28]
 801fa4c:	601a      	str	r2, [r3, #0]
 801fa4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa50:	2b0e      	cmp	r3, #14
 801fa52:	d900      	bls.n	801fa56 <_dtoa_r+0x2ca>
 801fa54:	e0d9      	b.n	801fc0a <_dtoa_r+0x47e>
 801fa56:	2c00      	cmp	r4, #0
 801fa58:	d100      	bne.n	801fa5c <_dtoa_r+0x2d0>
 801fa5a:	e0d6      	b.n	801fc0a <_dtoa_r+0x47e>
 801fa5c:	9b04      	ldr	r3, [sp, #16]
 801fa5e:	2b00      	cmp	r3, #0
 801fa60:	dd64      	ble.n	801fb2c <_dtoa_r+0x3a0>
 801fa62:	210f      	movs	r1, #15
 801fa64:	9a04      	ldr	r2, [sp, #16]
 801fa66:	4b2b      	ldr	r3, [pc, #172]	@ (801fb14 <_dtoa_r+0x388>)
 801fa68:	400a      	ands	r2, r1
 801fa6a:	00d2      	lsls	r2, r2, #3
 801fa6c:	189b      	adds	r3, r3, r2
 801fa6e:	681e      	ldr	r6, [r3, #0]
 801fa70:	685f      	ldr	r7, [r3, #4]
 801fa72:	9b04      	ldr	r3, [sp, #16]
 801fa74:	2402      	movs	r4, #2
 801fa76:	111d      	asrs	r5, r3, #4
 801fa78:	05db      	lsls	r3, r3, #23
 801fa7a:	d50a      	bpl.n	801fa92 <_dtoa_r+0x306>
 801fa7c:	4b2a      	ldr	r3, [pc, #168]	@ (801fb28 <_dtoa_r+0x39c>)
 801fa7e:	400d      	ands	r5, r1
 801fa80:	6a1a      	ldr	r2, [r3, #32]
 801fa82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fa84:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fa86:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fa88:	f7e2 f994 	bl	8001db4 <__aeabi_ddiv>
 801fa8c:	900a      	str	r0, [sp, #40]	@ 0x28
 801fa8e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fa90:	3401      	adds	r4, #1
 801fa92:	4b25      	ldr	r3, [pc, #148]	@ (801fb28 <_dtoa_r+0x39c>)
 801fa94:	930c      	str	r3, [sp, #48]	@ 0x30
 801fa96:	2d00      	cmp	r5, #0
 801fa98:	d108      	bne.n	801faac <_dtoa_r+0x320>
 801fa9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fa9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fa9e:	0032      	movs	r2, r6
 801faa0:	003b      	movs	r3, r7
 801faa2:	f7e2 f987 	bl	8001db4 <__aeabi_ddiv>
 801faa6:	900a      	str	r0, [sp, #40]	@ 0x28
 801faa8:	910b      	str	r1, [sp, #44]	@ 0x2c
 801faaa:	e05a      	b.n	801fb62 <_dtoa_r+0x3d6>
 801faac:	2301      	movs	r3, #1
 801faae:	421d      	tst	r5, r3
 801fab0:	d009      	beq.n	801fac6 <_dtoa_r+0x33a>
 801fab2:	18e4      	adds	r4, r4, r3
 801fab4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fab6:	0030      	movs	r0, r6
 801fab8:	681a      	ldr	r2, [r3, #0]
 801faba:	685b      	ldr	r3, [r3, #4]
 801fabc:	0039      	movs	r1, r7
 801fabe:	f7e2 fdbd 	bl	800263c <__aeabi_dmul>
 801fac2:	0006      	movs	r6, r0
 801fac4:	000f      	movs	r7, r1
 801fac6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fac8:	106d      	asrs	r5, r5, #1
 801faca:	3308      	adds	r3, #8
 801facc:	e7e2      	b.n	801fa94 <_dtoa_r+0x308>
 801face:	46c0      	nop			@ (mov r8, r8)
 801fad0:	08024a1a 	.word	0x08024a1a
 801fad4:	08024a31 	.word	0x08024a31
 801fad8:	7ff00000 	.word	0x7ff00000
 801fadc:	0000270f 	.word	0x0000270f
 801fae0:	08024a16 	.word	0x08024a16
 801fae4:	08024a19 	.word	0x08024a19
 801fae8:	080249e2 	.word	0x080249e2
 801faec:	080249e1 	.word	0x080249e1
 801faf0:	3ff00000 	.word	0x3ff00000
 801faf4:	fffffc01 	.word	0xfffffc01
 801faf8:	3ff80000 	.word	0x3ff80000
 801fafc:	636f4361 	.word	0x636f4361
 801fb00:	3fd287a7 	.word	0x3fd287a7
 801fb04:	8b60c8b3 	.word	0x8b60c8b3
 801fb08:	3fc68a28 	.word	0x3fc68a28
 801fb0c:	509f79fb 	.word	0x509f79fb
 801fb10:	3fd34413 	.word	0x3fd34413
 801fb14:	08024b88 	.word	0x08024b88
 801fb18:	00000432 	.word	0x00000432
 801fb1c:	00000412 	.word	0x00000412
 801fb20:	fe100000 	.word	0xfe100000
 801fb24:	08024a89 	.word	0x08024a89
 801fb28:	08024b60 	.word	0x08024b60
 801fb2c:	9b04      	ldr	r3, [sp, #16]
 801fb2e:	2402      	movs	r4, #2
 801fb30:	2b00      	cmp	r3, #0
 801fb32:	d016      	beq.n	801fb62 <_dtoa_r+0x3d6>
 801fb34:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fb36:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801fb38:	220f      	movs	r2, #15
 801fb3a:	425d      	negs	r5, r3
 801fb3c:	402a      	ands	r2, r5
 801fb3e:	4bd7      	ldr	r3, [pc, #860]	@ (801fe9c <_dtoa_r+0x710>)
 801fb40:	00d2      	lsls	r2, r2, #3
 801fb42:	189b      	adds	r3, r3, r2
 801fb44:	681a      	ldr	r2, [r3, #0]
 801fb46:	685b      	ldr	r3, [r3, #4]
 801fb48:	f7e2 fd78 	bl	800263c <__aeabi_dmul>
 801fb4c:	2701      	movs	r7, #1
 801fb4e:	2300      	movs	r3, #0
 801fb50:	900a      	str	r0, [sp, #40]	@ 0x28
 801fb52:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fb54:	4ed2      	ldr	r6, [pc, #840]	@ (801fea0 <_dtoa_r+0x714>)
 801fb56:	112d      	asrs	r5, r5, #4
 801fb58:	2d00      	cmp	r5, #0
 801fb5a:	d000      	beq.n	801fb5e <_dtoa_r+0x3d2>
 801fb5c:	e0ba      	b.n	801fcd4 <_dtoa_r+0x548>
 801fb5e:	2b00      	cmp	r3, #0
 801fb60:	d1a1      	bne.n	801faa6 <_dtoa_r+0x31a>
 801fb62:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801fb64:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fb66:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fb68:	2b00      	cmp	r3, #0
 801fb6a:	d100      	bne.n	801fb6e <_dtoa_r+0x3e2>
 801fb6c:	e0bd      	b.n	801fcea <_dtoa_r+0x55e>
 801fb6e:	2200      	movs	r2, #0
 801fb70:	0030      	movs	r0, r6
 801fb72:	0039      	movs	r1, r7
 801fb74:	4bcb      	ldr	r3, [pc, #812]	@ (801fea4 <_dtoa_r+0x718>)
 801fb76:	f7e0 fca1 	bl	80004bc <__aeabi_dcmplt>
 801fb7a:	2800      	cmp	r0, #0
 801fb7c:	d100      	bne.n	801fb80 <_dtoa_r+0x3f4>
 801fb7e:	e0b4      	b.n	801fcea <_dtoa_r+0x55e>
 801fb80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fb82:	2b00      	cmp	r3, #0
 801fb84:	d100      	bne.n	801fb88 <_dtoa_r+0x3fc>
 801fb86:	e0b0      	b.n	801fcea <_dtoa_r+0x55e>
 801fb88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fb8a:	2b00      	cmp	r3, #0
 801fb8c:	dd39      	ble.n	801fc02 <_dtoa_r+0x476>
 801fb8e:	9b04      	ldr	r3, [sp, #16]
 801fb90:	2200      	movs	r2, #0
 801fb92:	3b01      	subs	r3, #1
 801fb94:	930c      	str	r3, [sp, #48]	@ 0x30
 801fb96:	0030      	movs	r0, r6
 801fb98:	4bc3      	ldr	r3, [pc, #780]	@ (801fea8 <_dtoa_r+0x71c>)
 801fb9a:	0039      	movs	r1, r7
 801fb9c:	f7e2 fd4e 	bl	800263c <__aeabi_dmul>
 801fba0:	900a      	str	r0, [sp, #40]	@ 0x28
 801fba2:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fba4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fba6:	3401      	adds	r4, #1
 801fba8:	0020      	movs	r0, r4
 801fbaa:	9311      	str	r3, [sp, #68]	@ 0x44
 801fbac:	f7e3 fc08 	bl	80033c0 <__aeabi_i2d>
 801fbb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fbb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fbb4:	f7e2 fd42 	bl	800263c <__aeabi_dmul>
 801fbb8:	4bbc      	ldr	r3, [pc, #752]	@ (801feac <_dtoa_r+0x720>)
 801fbba:	2200      	movs	r2, #0
 801fbbc:	f7e1 fd96 	bl	80016ec <__aeabi_dadd>
 801fbc0:	4bbb      	ldr	r3, [pc, #748]	@ (801feb0 <_dtoa_r+0x724>)
 801fbc2:	0006      	movs	r6, r0
 801fbc4:	18cf      	adds	r7, r1, r3
 801fbc6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fbc8:	2b00      	cmp	r3, #0
 801fbca:	d000      	beq.n	801fbce <_dtoa_r+0x442>
 801fbcc:	e091      	b.n	801fcf2 <_dtoa_r+0x566>
 801fbce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fbd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fbd2:	2200      	movs	r2, #0
 801fbd4:	4bb7      	ldr	r3, [pc, #732]	@ (801feb4 <_dtoa_r+0x728>)
 801fbd6:	f7e2 fff9 	bl	8002bcc <__aeabi_dsub>
 801fbda:	0032      	movs	r2, r6
 801fbdc:	003b      	movs	r3, r7
 801fbde:	0004      	movs	r4, r0
 801fbe0:	000d      	movs	r5, r1
 801fbe2:	f7e0 fc7f 	bl	80004e4 <__aeabi_dcmpgt>
 801fbe6:	2800      	cmp	r0, #0
 801fbe8:	d000      	beq.n	801fbec <_dtoa_r+0x460>
 801fbea:	e29d      	b.n	8020128 <_dtoa_r+0x99c>
 801fbec:	2180      	movs	r1, #128	@ 0x80
 801fbee:	0609      	lsls	r1, r1, #24
 801fbf0:	187b      	adds	r3, r7, r1
 801fbf2:	0032      	movs	r2, r6
 801fbf4:	0020      	movs	r0, r4
 801fbf6:	0029      	movs	r1, r5
 801fbf8:	f7e0 fc60 	bl	80004bc <__aeabi_dcmplt>
 801fbfc:	2800      	cmp	r0, #0
 801fbfe:	d000      	beq.n	801fc02 <_dtoa_r+0x476>
 801fc00:	e130      	b.n	801fe64 <_dtoa_r+0x6d8>
 801fc02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801fc04:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801fc06:	930a      	str	r3, [sp, #40]	@ 0x28
 801fc08:	940b      	str	r4, [sp, #44]	@ 0x2c
 801fc0a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801fc0c:	2b00      	cmp	r3, #0
 801fc0e:	da00      	bge.n	801fc12 <_dtoa_r+0x486>
 801fc10:	e177      	b.n	801ff02 <_dtoa_r+0x776>
 801fc12:	9a04      	ldr	r2, [sp, #16]
 801fc14:	2a0e      	cmp	r2, #14
 801fc16:	dd00      	ble.n	801fc1a <_dtoa_r+0x48e>
 801fc18:	e173      	b.n	801ff02 <_dtoa_r+0x776>
 801fc1a:	4ba0      	ldr	r3, [pc, #640]	@ (801fe9c <_dtoa_r+0x710>)
 801fc1c:	00d2      	lsls	r2, r2, #3
 801fc1e:	189b      	adds	r3, r3, r2
 801fc20:	685c      	ldr	r4, [r3, #4]
 801fc22:	681b      	ldr	r3, [r3, #0]
 801fc24:	9306      	str	r3, [sp, #24]
 801fc26:	9407      	str	r4, [sp, #28]
 801fc28:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fc2a:	2b00      	cmp	r3, #0
 801fc2c:	da03      	bge.n	801fc36 <_dtoa_r+0x4aa>
 801fc2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc30:	2b00      	cmp	r3, #0
 801fc32:	dc00      	bgt.n	801fc36 <_dtoa_r+0x4aa>
 801fc34:	e106      	b.n	801fe44 <_dtoa_r+0x6b8>
 801fc36:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801fc38:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801fc3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc3c:	9d08      	ldr	r5, [sp, #32]
 801fc3e:	3b01      	subs	r3, #1
 801fc40:	195b      	adds	r3, r3, r5
 801fc42:	930a      	str	r3, [sp, #40]	@ 0x28
 801fc44:	9a06      	ldr	r2, [sp, #24]
 801fc46:	9b07      	ldr	r3, [sp, #28]
 801fc48:	0030      	movs	r0, r6
 801fc4a:	0039      	movs	r1, r7
 801fc4c:	f7e2 f8b2 	bl	8001db4 <__aeabi_ddiv>
 801fc50:	f7e3 fb7a 	bl	8003348 <__aeabi_d2iz>
 801fc54:	9009      	str	r0, [sp, #36]	@ 0x24
 801fc56:	f7e3 fbb3 	bl	80033c0 <__aeabi_i2d>
 801fc5a:	9a06      	ldr	r2, [sp, #24]
 801fc5c:	9b07      	ldr	r3, [sp, #28]
 801fc5e:	f7e2 fced 	bl	800263c <__aeabi_dmul>
 801fc62:	0002      	movs	r2, r0
 801fc64:	000b      	movs	r3, r1
 801fc66:	0030      	movs	r0, r6
 801fc68:	0039      	movs	r1, r7
 801fc6a:	f7e2 ffaf 	bl	8002bcc <__aeabi_dsub>
 801fc6e:	002b      	movs	r3, r5
 801fc70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fc72:	3501      	adds	r5, #1
 801fc74:	3230      	adds	r2, #48	@ 0x30
 801fc76:	701a      	strb	r2, [r3, #0]
 801fc78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fc7a:	002c      	movs	r4, r5
 801fc7c:	429a      	cmp	r2, r3
 801fc7e:	d000      	beq.n	801fc82 <_dtoa_r+0x4f6>
 801fc80:	e131      	b.n	801fee6 <_dtoa_r+0x75a>
 801fc82:	0002      	movs	r2, r0
 801fc84:	000b      	movs	r3, r1
 801fc86:	f7e1 fd31 	bl	80016ec <__aeabi_dadd>
 801fc8a:	9a06      	ldr	r2, [sp, #24]
 801fc8c:	9b07      	ldr	r3, [sp, #28]
 801fc8e:	0006      	movs	r6, r0
 801fc90:	000f      	movs	r7, r1
 801fc92:	f7e0 fc27 	bl	80004e4 <__aeabi_dcmpgt>
 801fc96:	2800      	cmp	r0, #0
 801fc98:	d000      	beq.n	801fc9c <_dtoa_r+0x510>
 801fc9a:	e10f      	b.n	801febc <_dtoa_r+0x730>
 801fc9c:	9a06      	ldr	r2, [sp, #24]
 801fc9e:	9b07      	ldr	r3, [sp, #28]
 801fca0:	0030      	movs	r0, r6
 801fca2:	0039      	movs	r1, r7
 801fca4:	f7e0 fc04 	bl	80004b0 <__aeabi_dcmpeq>
 801fca8:	2800      	cmp	r0, #0
 801fcaa:	d003      	beq.n	801fcb4 <_dtoa_r+0x528>
 801fcac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fcae:	07dd      	lsls	r5, r3, #31
 801fcb0:	d500      	bpl.n	801fcb4 <_dtoa_r+0x528>
 801fcb2:	e103      	b.n	801febc <_dtoa_r+0x730>
 801fcb4:	9905      	ldr	r1, [sp, #20]
 801fcb6:	9803      	ldr	r0, [sp, #12]
 801fcb8:	f001 f812 	bl	8020ce0 <_Bfree>
 801fcbc:	2300      	movs	r3, #0
 801fcbe:	7023      	strb	r3, [r4, #0]
 801fcc0:	9b04      	ldr	r3, [sp, #16]
 801fcc2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801fcc4:	3301      	adds	r3, #1
 801fcc6:	6013      	str	r3, [r2, #0]
 801fcc8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801fcca:	2b00      	cmp	r3, #0
 801fccc:	d100      	bne.n	801fcd0 <_dtoa_r+0x544>
 801fcce:	e5a7      	b.n	801f820 <_dtoa_r+0x94>
 801fcd0:	601c      	str	r4, [r3, #0]
 801fcd2:	e5a5      	b.n	801f820 <_dtoa_r+0x94>
 801fcd4:	423d      	tst	r5, r7
 801fcd6:	d005      	beq.n	801fce4 <_dtoa_r+0x558>
 801fcd8:	6832      	ldr	r2, [r6, #0]
 801fcda:	6873      	ldr	r3, [r6, #4]
 801fcdc:	f7e2 fcae 	bl	800263c <__aeabi_dmul>
 801fce0:	003b      	movs	r3, r7
 801fce2:	3401      	adds	r4, #1
 801fce4:	106d      	asrs	r5, r5, #1
 801fce6:	3608      	adds	r6, #8
 801fce8:	e736      	b.n	801fb58 <_dtoa_r+0x3cc>
 801fcea:	9b04      	ldr	r3, [sp, #16]
 801fcec:	930c      	str	r3, [sp, #48]	@ 0x30
 801fcee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fcf0:	e75a      	b.n	801fba8 <_dtoa_r+0x41c>
 801fcf2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fcf4:	4b69      	ldr	r3, [pc, #420]	@ (801fe9c <_dtoa_r+0x710>)
 801fcf6:	3a01      	subs	r2, #1
 801fcf8:	00d2      	lsls	r2, r2, #3
 801fcfa:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801fcfc:	189b      	adds	r3, r3, r2
 801fcfe:	681a      	ldr	r2, [r3, #0]
 801fd00:	685b      	ldr	r3, [r3, #4]
 801fd02:	2900      	cmp	r1, #0
 801fd04:	d04c      	beq.n	801fda0 <_dtoa_r+0x614>
 801fd06:	2000      	movs	r0, #0
 801fd08:	496b      	ldr	r1, [pc, #428]	@ (801feb8 <_dtoa_r+0x72c>)
 801fd0a:	f7e2 f853 	bl	8001db4 <__aeabi_ddiv>
 801fd0e:	0032      	movs	r2, r6
 801fd10:	003b      	movs	r3, r7
 801fd12:	f7e2 ff5b 	bl	8002bcc <__aeabi_dsub>
 801fd16:	9a08      	ldr	r2, [sp, #32]
 801fd18:	0006      	movs	r6, r0
 801fd1a:	4694      	mov	ip, r2
 801fd1c:	000f      	movs	r7, r1
 801fd1e:	9b08      	ldr	r3, [sp, #32]
 801fd20:	9316      	str	r3, [sp, #88]	@ 0x58
 801fd22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fd24:	4463      	add	r3, ip
 801fd26:	9311      	str	r3, [sp, #68]	@ 0x44
 801fd28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fd2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fd2c:	f7e3 fb0c 	bl	8003348 <__aeabi_d2iz>
 801fd30:	0005      	movs	r5, r0
 801fd32:	f7e3 fb45 	bl	80033c0 <__aeabi_i2d>
 801fd36:	0002      	movs	r2, r0
 801fd38:	000b      	movs	r3, r1
 801fd3a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fd3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fd3e:	f7e2 ff45 	bl	8002bcc <__aeabi_dsub>
 801fd42:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801fd44:	3530      	adds	r5, #48	@ 0x30
 801fd46:	1c5c      	adds	r4, r3, #1
 801fd48:	701d      	strb	r5, [r3, #0]
 801fd4a:	0032      	movs	r2, r6
 801fd4c:	003b      	movs	r3, r7
 801fd4e:	900a      	str	r0, [sp, #40]	@ 0x28
 801fd50:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fd52:	f7e0 fbb3 	bl	80004bc <__aeabi_dcmplt>
 801fd56:	2800      	cmp	r0, #0
 801fd58:	d16a      	bne.n	801fe30 <_dtoa_r+0x6a4>
 801fd5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fd5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fd5e:	2000      	movs	r0, #0
 801fd60:	4950      	ldr	r1, [pc, #320]	@ (801fea4 <_dtoa_r+0x718>)
 801fd62:	f7e2 ff33 	bl	8002bcc <__aeabi_dsub>
 801fd66:	0032      	movs	r2, r6
 801fd68:	003b      	movs	r3, r7
 801fd6a:	f7e0 fba7 	bl	80004bc <__aeabi_dcmplt>
 801fd6e:	2800      	cmp	r0, #0
 801fd70:	d000      	beq.n	801fd74 <_dtoa_r+0x5e8>
 801fd72:	e0a5      	b.n	801fec0 <_dtoa_r+0x734>
 801fd74:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801fd76:	42a3      	cmp	r3, r4
 801fd78:	d100      	bne.n	801fd7c <_dtoa_r+0x5f0>
 801fd7a:	e742      	b.n	801fc02 <_dtoa_r+0x476>
 801fd7c:	2200      	movs	r2, #0
 801fd7e:	0030      	movs	r0, r6
 801fd80:	0039      	movs	r1, r7
 801fd82:	4b49      	ldr	r3, [pc, #292]	@ (801fea8 <_dtoa_r+0x71c>)
 801fd84:	f7e2 fc5a 	bl	800263c <__aeabi_dmul>
 801fd88:	2200      	movs	r2, #0
 801fd8a:	0006      	movs	r6, r0
 801fd8c:	000f      	movs	r7, r1
 801fd8e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fd90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fd92:	4b45      	ldr	r3, [pc, #276]	@ (801fea8 <_dtoa_r+0x71c>)
 801fd94:	f7e2 fc52 	bl	800263c <__aeabi_dmul>
 801fd98:	9416      	str	r4, [sp, #88]	@ 0x58
 801fd9a:	900a      	str	r0, [sp, #40]	@ 0x28
 801fd9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fd9e:	e7c3      	b.n	801fd28 <_dtoa_r+0x59c>
 801fda0:	0030      	movs	r0, r6
 801fda2:	0039      	movs	r1, r7
 801fda4:	f7e2 fc4a 	bl	800263c <__aeabi_dmul>
 801fda8:	9d08      	ldr	r5, [sp, #32]
 801fdaa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fdac:	002b      	movs	r3, r5
 801fdae:	4694      	mov	ip, r2
 801fdb0:	9016      	str	r0, [sp, #88]	@ 0x58
 801fdb2:	9117      	str	r1, [sp, #92]	@ 0x5c
 801fdb4:	4463      	add	r3, ip
 801fdb6:	9319      	str	r3, [sp, #100]	@ 0x64
 801fdb8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fdba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fdbc:	f7e3 fac4 	bl	8003348 <__aeabi_d2iz>
 801fdc0:	0004      	movs	r4, r0
 801fdc2:	f7e3 fafd 	bl	80033c0 <__aeabi_i2d>
 801fdc6:	000b      	movs	r3, r1
 801fdc8:	0002      	movs	r2, r0
 801fdca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fdcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fdce:	f7e2 fefd 	bl	8002bcc <__aeabi_dsub>
 801fdd2:	3430      	adds	r4, #48	@ 0x30
 801fdd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fdd6:	702c      	strb	r4, [r5, #0]
 801fdd8:	3501      	adds	r5, #1
 801fdda:	0006      	movs	r6, r0
 801fddc:	000f      	movs	r7, r1
 801fdde:	42ab      	cmp	r3, r5
 801fde0:	d129      	bne.n	801fe36 <_dtoa_r+0x6aa>
 801fde2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801fde4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801fde6:	9b08      	ldr	r3, [sp, #32]
 801fde8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801fdea:	469c      	mov	ip, r3
 801fdec:	2200      	movs	r2, #0
 801fdee:	4b32      	ldr	r3, [pc, #200]	@ (801feb8 <_dtoa_r+0x72c>)
 801fdf0:	4464      	add	r4, ip
 801fdf2:	f7e1 fc7b 	bl	80016ec <__aeabi_dadd>
 801fdf6:	0002      	movs	r2, r0
 801fdf8:	000b      	movs	r3, r1
 801fdfa:	0030      	movs	r0, r6
 801fdfc:	0039      	movs	r1, r7
 801fdfe:	f7e0 fb71 	bl	80004e4 <__aeabi_dcmpgt>
 801fe02:	2800      	cmp	r0, #0
 801fe04:	d15c      	bne.n	801fec0 <_dtoa_r+0x734>
 801fe06:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801fe08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801fe0a:	2000      	movs	r0, #0
 801fe0c:	492a      	ldr	r1, [pc, #168]	@ (801feb8 <_dtoa_r+0x72c>)
 801fe0e:	f7e2 fedd 	bl	8002bcc <__aeabi_dsub>
 801fe12:	0002      	movs	r2, r0
 801fe14:	000b      	movs	r3, r1
 801fe16:	0030      	movs	r0, r6
 801fe18:	0039      	movs	r1, r7
 801fe1a:	f7e0 fb4f 	bl	80004bc <__aeabi_dcmplt>
 801fe1e:	2800      	cmp	r0, #0
 801fe20:	d100      	bne.n	801fe24 <_dtoa_r+0x698>
 801fe22:	e6ee      	b.n	801fc02 <_dtoa_r+0x476>
 801fe24:	0023      	movs	r3, r4
 801fe26:	3c01      	subs	r4, #1
 801fe28:	7822      	ldrb	r2, [r4, #0]
 801fe2a:	2a30      	cmp	r2, #48	@ 0x30
 801fe2c:	d0fa      	beq.n	801fe24 <_dtoa_r+0x698>
 801fe2e:	001c      	movs	r4, r3
 801fe30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fe32:	9304      	str	r3, [sp, #16]
 801fe34:	e73e      	b.n	801fcb4 <_dtoa_r+0x528>
 801fe36:	2200      	movs	r2, #0
 801fe38:	4b1b      	ldr	r3, [pc, #108]	@ (801fea8 <_dtoa_r+0x71c>)
 801fe3a:	f7e2 fbff 	bl	800263c <__aeabi_dmul>
 801fe3e:	900a      	str	r0, [sp, #40]	@ 0x28
 801fe40:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fe42:	e7b9      	b.n	801fdb8 <_dtoa_r+0x62c>
 801fe44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fe46:	2b00      	cmp	r3, #0
 801fe48:	d10c      	bne.n	801fe64 <_dtoa_r+0x6d8>
 801fe4a:	9806      	ldr	r0, [sp, #24]
 801fe4c:	9907      	ldr	r1, [sp, #28]
 801fe4e:	2200      	movs	r2, #0
 801fe50:	4b18      	ldr	r3, [pc, #96]	@ (801feb4 <_dtoa_r+0x728>)
 801fe52:	f7e2 fbf3 	bl	800263c <__aeabi_dmul>
 801fe56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fe58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fe5a:	f7e0 fb4d 	bl	80004f8 <__aeabi_dcmpge>
 801fe5e:	2800      	cmp	r0, #0
 801fe60:	d100      	bne.n	801fe64 <_dtoa_r+0x6d8>
 801fe62:	e164      	b.n	802012e <_dtoa_r+0x9a2>
 801fe64:	2600      	movs	r6, #0
 801fe66:	0037      	movs	r7, r6
 801fe68:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801fe6a:	9c08      	ldr	r4, [sp, #32]
 801fe6c:	43db      	mvns	r3, r3
 801fe6e:	930c      	str	r3, [sp, #48]	@ 0x30
 801fe70:	2300      	movs	r3, #0
 801fe72:	9304      	str	r3, [sp, #16]
 801fe74:	0031      	movs	r1, r6
 801fe76:	9803      	ldr	r0, [sp, #12]
 801fe78:	f000 ff32 	bl	8020ce0 <_Bfree>
 801fe7c:	2f00      	cmp	r7, #0
 801fe7e:	d0d7      	beq.n	801fe30 <_dtoa_r+0x6a4>
 801fe80:	9b04      	ldr	r3, [sp, #16]
 801fe82:	2b00      	cmp	r3, #0
 801fe84:	d005      	beq.n	801fe92 <_dtoa_r+0x706>
 801fe86:	42bb      	cmp	r3, r7
 801fe88:	d003      	beq.n	801fe92 <_dtoa_r+0x706>
 801fe8a:	0019      	movs	r1, r3
 801fe8c:	9803      	ldr	r0, [sp, #12]
 801fe8e:	f000 ff27 	bl	8020ce0 <_Bfree>
 801fe92:	0039      	movs	r1, r7
 801fe94:	9803      	ldr	r0, [sp, #12]
 801fe96:	f000 ff23 	bl	8020ce0 <_Bfree>
 801fe9a:	e7c9      	b.n	801fe30 <_dtoa_r+0x6a4>
 801fe9c:	08024b88 	.word	0x08024b88
 801fea0:	08024b60 	.word	0x08024b60
 801fea4:	3ff00000 	.word	0x3ff00000
 801fea8:	40240000 	.word	0x40240000
 801feac:	401c0000 	.word	0x401c0000
 801feb0:	fcc00000 	.word	0xfcc00000
 801feb4:	40140000 	.word	0x40140000
 801feb8:	3fe00000 	.word	0x3fe00000
 801febc:	9b04      	ldr	r3, [sp, #16]
 801febe:	930c      	str	r3, [sp, #48]	@ 0x30
 801fec0:	0023      	movs	r3, r4
 801fec2:	001c      	movs	r4, r3
 801fec4:	3b01      	subs	r3, #1
 801fec6:	781a      	ldrb	r2, [r3, #0]
 801fec8:	2a39      	cmp	r2, #57	@ 0x39
 801feca:	d108      	bne.n	801fede <_dtoa_r+0x752>
 801fecc:	9a08      	ldr	r2, [sp, #32]
 801fece:	429a      	cmp	r2, r3
 801fed0:	d1f7      	bne.n	801fec2 <_dtoa_r+0x736>
 801fed2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fed4:	9908      	ldr	r1, [sp, #32]
 801fed6:	3201      	adds	r2, #1
 801fed8:	920c      	str	r2, [sp, #48]	@ 0x30
 801feda:	2230      	movs	r2, #48	@ 0x30
 801fedc:	700a      	strb	r2, [r1, #0]
 801fede:	781a      	ldrb	r2, [r3, #0]
 801fee0:	3201      	adds	r2, #1
 801fee2:	701a      	strb	r2, [r3, #0]
 801fee4:	e7a4      	b.n	801fe30 <_dtoa_r+0x6a4>
 801fee6:	2200      	movs	r2, #0
 801fee8:	4bc6      	ldr	r3, [pc, #792]	@ (8020204 <_dtoa_r+0xa78>)
 801feea:	f7e2 fba7 	bl	800263c <__aeabi_dmul>
 801feee:	2200      	movs	r2, #0
 801fef0:	2300      	movs	r3, #0
 801fef2:	0006      	movs	r6, r0
 801fef4:	000f      	movs	r7, r1
 801fef6:	f7e0 fadb 	bl	80004b0 <__aeabi_dcmpeq>
 801fefa:	2800      	cmp	r0, #0
 801fefc:	d100      	bne.n	801ff00 <_dtoa_r+0x774>
 801fefe:	e6a1      	b.n	801fc44 <_dtoa_r+0x4b8>
 801ff00:	e6d8      	b.n	801fcb4 <_dtoa_r+0x528>
 801ff02:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801ff04:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801ff06:	9c06      	ldr	r4, [sp, #24]
 801ff08:	2f00      	cmp	r7, #0
 801ff0a:	d014      	beq.n	801ff36 <_dtoa_r+0x7aa>
 801ff0c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801ff0e:	2a01      	cmp	r2, #1
 801ff10:	dd00      	ble.n	801ff14 <_dtoa_r+0x788>
 801ff12:	e0c8      	b.n	80200a6 <_dtoa_r+0x91a>
 801ff14:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ff16:	2a00      	cmp	r2, #0
 801ff18:	d100      	bne.n	801ff1c <_dtoa_r+0x790>
 801ff1a:	e0be      	b.n	802009a <_dtoa_r+0x90e>
 801ff1c:	4aba      	ldr	r2, [pc, #744]	@ (8020208 <_dtoa_r+0xa7c>)
 801ff1e:	189b      	adds	r3, r3, r2
 801ff20:	9a06      	ldr	r2, [sp, #24]
 801ff22:	2101      	movs	r1, #1
 801ff24:	18d2      	adds	r2, r2, r3
 801ff26:	9206      	str	r2, [sp, #24]
 801ff28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ff2a:	9803      	ldr	r0, [sp, #12]
 801ff2c:	18d3      	adds	r3, r2, r3
 801ff2e:	930d      	str	r3, [sp, #52]	@ 0x34
 801ff30:	f000 ffda 	bl	8020ee8 <__i2b>
 801ff34:	0007      	movs	r7, r0
 801ff36:	2c00      	cmp	r4, #0
 801ff38:	d00e      	beq.n	801ff58 <_dtoa_r+0x7cc>
 801ff3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ff3c:	2b00      	cmp	r3, #0
 801ff3e:	dd0b      	ble.n	801ff58 <_dtoa_r+0x7cc>
 801ff40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ff42:	0023      	movs	r3, r4
 801ff44:	4294      	cmp	r4, r2
 801ff46:	dd00      	ble.n	801ff4a <_dtoa_r+0x7be>
 801ff48:	0013      	movs	r3, r2
 801ff4a:	9a06      	ldr	r2, [sp, #24]
 801ff4c:	1ae4      	subs	r4, r4, r3
 801ff4e:	1ad2      	subs	r2, r2, r3
 801ff50:	9206      	str	r2, [sp, #24]
 801ff52:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ff54:	1ad3      	subs	r3, r2, r3
 801ff56:	930d      	str	r3, [sp, #52]	@ 0x34
 801ff58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ff5a:	2b00      	cmp	r3, #0
 801ff5c:	d01f      	beq.n	801ff9e <_dtoa_r+0x812>
 801ff5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	d100      	bne.n	801ff66 <_dtoa_r+0x7da>
 801ff64:	e0b5      	b.n	80200d2 <_dtoa_r+0x946>
 801ff66:	2d00      	cmp	r5, #0
 801ff68:	d010      	beq.n	801ff8c <_dtoa_r+0x800>
 801ff6a:	0039      	movs	r1, r7
 801ff6c:	002a      	movs	r2, r5
 801ff6e:	9803      	ldr	r0, [sp, #12]
 801ff70:	f001 f884 	bl	802107c <__pow5mult>
 801ff74:	9a05      	ldr	r2, [sp, #20]
 801ff76:	0001      	movs	r1, r0
 801ff78:	0007      	movs	r7, r0
 801ff7a:	9803      	ldr	r0, [sp, #12]
 801ff7c:	f000 ffcc 	bl	8020f18 <__multiply>
 801ff80:	0006      	movs	r6, r0
 801ff82:	9905      	ldr	r1, [sp, #20]
 801ff84:	9803      	ldr	r0, [sp, #12]
 801ff86:	f000 feab 	bl	8020ce0 <_Bfree>
 801ff8a:	9605      	str	r6, [sp, #20]
 801ff8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ff8e:	1b5a      	subs	r2, r3, r5
 801ff90:	42ab      	cmp	r3, r5
 801ff92:	d004      	beq.n	801ff9e <_dtoa_r+0x812>
 801ff94:	9905      	ldr	r1, [sp, #20]
 801ff96:	9803      	ldr	r0, [sp, #12]
 801ff98:	f001 f870 	bl	802107c <__pow5mult>
 801ff9c:	9005      	str	r0, [sp, #20]
 801ff9e:	2101      	movs	r1, #1
 801ffa0:	9803      	ldr	r0, [sp, #12]
 801ffa2:	f000 ffa1 	bl	8020ee8 <__i2b>
 801ffa6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ffa8:	0006      	movs	r6, r0
 801ffaa:	2b00      	cmp	r3, #0
 801ffac:	d100      	bne.n	801ffb0 <_dtoa_r+0x824>
 801ffae:	e1bc      	b.n	802032a <_dtoa_r+0xb9e>
 801ffb0:	001a      	movs	r2, r3
 801ffb2:	0001      	movs	r1, r0
 801ffb4:	9803      	ldr	r0, [sp, #12]
 801ffb6:	f001 f861 	bl	802107c <__pow5mult>
 801ffba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ffbc:	0006      	movs	r6, r0
 801ffbe:	2500      	movs	r5, #0
 801ffc0:	2b01      	cmp	r3, #1
 801ffc2:	dc16      	bgt.n	801fff2 <_dtoa_r+0x866>
 801ffc4:	2500      	movs	r5, #0
 801ffc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ffc8:	42ab      	cmp	r3, r5
 801ffca:	d10e      	bne.n	801ffea <_dtoa_r+0x85e>
 801ffcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ffce:	031b      	lsls	r3, r3, #12
 801ffd0:	42ab      	cmp	r3, r5
 801ffd2:	d10a      	bne.n	801ffea <_dtoa_r+0x85e>
 801ffd4:	4b8d      	ldr	r3, [pc, #564]	@ (802020c <_dtoa_r+0xa80>)
 801ffd6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ffd8:	4213      	tst	r3, r2
 801ffda:	d006      	beq.n	801ffea <_dtoa_r+0x85e>
 801ffdc:	9b06      	ldr	r3, [sp, #24]
 801ffde:	3501      	adds	r5, #1
 801ffe0:	3301      	adds	r3, #1
 801ffe2:	9306      	str	r3, [sp, #24]
 801ffe4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ffe6:	3301      	adds	r3, #1
 801ffe8:	930d      	str	r3, [sp, #52]	@ 0x34
 801ffea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ffec:	2001      	movs	r0, #1
 801ffee:	2b00      	cmp	r3, #0
 801fff0:	d008      	beq.n	8020004 <_dtoa_r+0x878>
 801fff2:	6933      	ldr	r3, [r6, #16]
 801fff4:	3303      	adds	r3, #3
 801fff6:	009b      	lsls	r3, r3, #2
 801fff8:	18f3      	adds	r3, r6, r3
 801fffa:	6858      	ldr	r0, [r3, #4]
 801fffc:	f000 ff24 	bl	8020e48 <__hi0bits>
 8020000:	2320      	movs	r3, #32
 8020002:	1a18      	subs	r0, r3, r0
 8020004:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020006:	1818      	adds	r0, r3, r0
 8020008:	0002      	movs	r2, r0
 802000a:	231f      	movs	r3, #31
 802000c:	401a      	ands	r2, r3
 802000e:	4218      	tst	r0, r3
 8020010:	d065      	beq.n	80200de <_dtoa_r+0x952>
 8020012:	3301      	adds	r3, #1
 8020014:	1a9b      	subs	r3, r3, r2
 8020016:	2b04      	cmp	r3, #4
 8020018:	dd5d      	ble.n	80200d6 <_dtoa_r+0x94a>
 802001a:	231c      	movs	r3, #28
 802001c:	1a9b      	subs	r3, r3, r2
 802001e:	9a06      	ldr	r2, [sp, #24]
 8020020:	18e4      	adds	r4, r4, r3
 8020022:	18d2      	adds	r2, r2, r3
 8020024:	9206      	str	r2, [sp, #24]
 8020026:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020028:	18d3      	adds	r3, r2, r3
 802002a:	930d      	str	r3, [sp, #52]	@ 0x34
 802002c:	9b06      	ldr	r3, [sp, #24]
 802002e:	2b00      	cmp	r3, #0
 8020030:	dd05      	ble.n	802003e <_dtoa_r+0x8b2>
 8020032:	001a      	movs	r2, r3
 8020034:	9905      	ldr	r1, [sp, #20]
 8020036:	9803      	ldr	r0, [sp, #12]
 8020038:	f001 f87c 	bl	8021134 <__lshift>
 802003c:	9005      	str	r0, [sp, #20]
 802003e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020040:	2b00      	cmp	r3, #0
 8020042:	dd05      	ble.n	8020050 <_dtoa_r+0x8c4>
 8020044:	0031      	movs	r1, r6
 8020046:	001a      	movs	r2, r3
 8020048:	9803      	ldr	r0, [sp, #12]
 802004a:	f001 f873 	bl	8021134 <__lshift>
 802004e:	0006      	movs	r6, r0
 8020050:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020052:	2b00      	cmp	r3, #0
 8020054:	d045      	beq.n	80200e2 <_dtoa_r+0x956>
 8020056:	0031      	movs	r1, r6
 8020058:	9805      	ldr	r0, [sp, #20]
 802005a:	f001 f8d7 	bl	802120c <__mcmp>
 802005e:	2800      	cmp	r0, #0
 8020060:	da3f      	bge.n	80200e2 <_dtoa_r+0x956>
 8020062:	9b04      	ldr	r3, [sp, #16]
 8020064:	220a      	movs	r2, #10
 8020066:	3b01      	subs	r3, #1
 8020068:	930c      	str	r3, [sp, #48]	@ 0x30
 802006a:	9905      	ldr	r1, [sp, #20]
 802006c:	2300      	movs	r3, #0
 802006e:	9803      	ldr	r0, [sp, #12]
 8020070:	f000 fe5a 	bl	8020d28 <__multadd>
 8020074:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020076:	9005      	str	r0, [sp, #20]
 8020078:	2b00      	cmp	r3, #0
 802007a:	d100      	bne.n	802007e <_dtoa_r+0x8f2>
 802007c:	e15c      	b.n	8020338 <_dtoa_r+0xbac>
 802007e:	2300      	movs	r3, #0
 8020080:	0039      	movs	r1, r7
 8020082:	220a      	movs	r2, #10
 8020084:	9803      	ldr	r0, [sp, #12]
 8020086:	f000 fe4f 	bl	8020d28 <__multadd>
 802008a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802008c:	0007      	movs	r7, r0
 802008e:	2b00      	cmp	r3, #0
 8020090:	dc55      	bgt.n	802013e <_dtoa_r+0x9b2>
 8020092:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020094:	2b02      	cmp	r3, #2
 8020096:	dc2d      	bgt.n	80200f4 <_dtoa_r+0x968>
 8020098:	e051      	b.n	802013e <_dtoa_r+0x9b2>
 802009a:	2336      	movs	r3, #54	@ 0x36
 802009c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 802009e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80200a0:	9c06      	ldr	r4, [sp, #24]
 80200a2:	1a9b      	subs	r3, r3, r2
 80200a4:	e73c      	b.n	801ff20 <_dtoa_r+0x794>
 80200a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80200a8:	1e5d      	subs	r5, r3, #1
 80200aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80200ac:	42ab      	cmp	r3, r5
 80200ae:	db08      	blt.n	80200c2 <_dtoa_r+0x936>
 80200b0:	1b5d      	subs	r5, r3, r5
 80200b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80200b4:	9c06      	ldr	r4, [sp, #24]
 80200b6:	2b00      	cmp	r3, #0
 80200b8:	db00      	blt.n	80200bc <_dtoa_r+0x930>
 80200ba:	e731      	b.n	801ff20 <_dtoa_r+0x794>
 80200bc:	1ae4      	subs	r4, r4, r3
 80200be:	2300      	movs	r3, #0
 80200c0:	e72e      	b.n	801ff20 <_dtoa_r+0x794>
 80200c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80200c4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80200c6:	1aeb      	subs	r3, r5, r3
 80200c8:	18d3      	adds	r3, r2, r3
 80200ca:	950f      	str	r5, [sp, #60]	@ 0x3c
 80200cc:	9314      	str	r3, [sp, #80]	@ 0x50
 80200ce:	2500      	movs	r5, #0
 80200d0:	e7ef      	b.n	80200b2 <_dtoa_r+0x926>
 80200d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80200d4:	e75e      	b.n	801ff94 <_dtoa_r+0x808>
 80200d6:	2b04      	cmp	r3, #4
 80200d8:	d0a8      	beq.n	802002c <_dtoa_r+0x8a0>
 80200da:	331c      	adds	r3, #28
 80200dc:	e79f      	b.n	802001e <_dtoa_r+0x892>
 80200de:	0013      	movs	r3, r2
 80200e0:	e7fb      	b.n	80200da <_dtoa_r+0x94e>
 80200e2:	9b04      	ldr	r3, [sp, #16]
 80200e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80200e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80200e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80200ea:	2b00      	cmp	r3, #0
 80200ec:	dc23      	bgt.n	8020136 <_dtoa_r+0x9aa>
 80200ee:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80200f0:	2b02      	cmp	r3, #2
 80200f2:	dd20      	ble.n	8020136 <_dtoa_r+0x9aa>
 80200f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80200f6:	2b00      	cmp	r3, #0
 80200f8:	d000      	beq.n	80200fc <_dtoa_r+0x970>
 80200fa:	e6b5      	b.n	801fe68 <_dtoa_r+0x6dc>
 80200fc:	0031      	movs	r1, r6
 80200fe:	2205      	movs	r2, #5
 8020100:	9803      	ldr	r0, [sp, #12]
 8020102:	f000 fe11 	bl	8020d28 <__multadd>
 8020106:	0006      	movs	r6, r0
 8020108:	0001      	movs	r1, r0
 802010a:	9805      	ldr	r0, [sp, #20]
 802010c:	f001 f87e 	bl	802120c <__mcmp>
 8020110:	2800      	cmp	r0, #0
 8020112:	dc00      	bgt.n	8020116 <_dtoa_r+0x98a>
 8020114:	e6a8      	b.n	801fe68 <_dtoa_r+0x6dc>
 8020116:	9b08      	ldr	r3, [sp, #32]
 8020118:	9a08      	ldr	r2, [sp, #32]
 802011a:	1c5c      	adds	r4, r3, #1
 802011c:	2331      	movs	r3, #49	@ 0x31
 802011e:	7013      	strb	r3, [r2, #0]
 8020120:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020122:	3301      	adds	r3, #1
 8020124:	930c      	str	r3, [sp, #48]	@ 0x30
 8020126:	e6a3      	b.n	801fe70 <_dtoa_r+0x6e4>
 8020128:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 802012a:	0037      	movs	r7, r6
 802012c:	e7f3      	b.n	8020116 <_dtoa_r+0x98a>
 802012e:	9b04      	ldr	r3, [sp, #16]
 8020130:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8020132:	930c      	str	r3, [sp, #48]	@ 0x30
 8020134:	e7f9      	b.n	802012a <_dtoa_r+0x99e>
 8020136:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020138:	2b00      	cmp	r3, #0
 802013a:	d100      	bne.n	802013e <_dtoa_r+0x9b2>
 802013c:	e100      	b.n	8020340 <_dtoa_r+0xbb4>
 802013e:	2c00      	cmp	r4, #0
 8020140:	dd05      	ble.n	802014e <_dtoa_r+0x9c2>
 8020142:	0039      	movs	r1, r7
 8020144:	0022      	movs	r2, r4
 8020146:	9803      	ldr	r0, [sp, #12]
 8020148:	f000 fff4 	bl	8021134 <__lshift>
 802014c:	0007      	movs	r7, r0
 802014e:	0038      	movs	r0, r7
 8020150:	2d00      	cmp	r5, #0
 8020152:	d018      	beq.n	8020186 <_dtoa_r+0x9fa>
 8020154:	6879      	ldr	r1, [r7, #4]
 8020156:	9803      	ldr	r0, [sp, #12]
 8020158:	f000 fd7e 	bl	8020c58 <_Balloc>
 802015c:	1e04      	subs	r4, r0, #0
 802015e:	d105      	bne.n	802016c <_dtoa_r+0x9e0>
 8020160:	0022      	movs	r2, r4
 8020162:	4b2b      	ldr	r3, [pc, #172]	@ (8020210 <_dtoa_r+0xa84>)
 8020164:	482b      	ldr	r0, [pc, #172]	@ (8020214 <_dtoa_r+0xa88>)
 8020166:	492c      	ldr	r1, [pc, #176]	@ (8020218 <_dtoa_r+0xa8c>)
 8020168:	f7ff fb25 	bl	801f7b6 <_dtoa_r+0x2a>
 802016c:	0039      	movs	r1, r7
 802016e:	693a      	ldr	r2, [r7, #16]
 8020170:	310c      	adds	r1, #12
 8020172:	3202      	adds	r2, #2
 8020174:	0092      	lsls	r2, r2, #2
 8020176:	300c      	adds	r0, #12
 8020178:	f7ff fa6a 	bl	801f650 <memcpy>
 802017c:	2201      	movs	r2, #1
 802017e:	0021      	movs	r1, r4
 8020180:	9803      	ldr	r0, [sp, #12]
 8020182:	f000 ffd7 	bl	8021134 <__lshift>
 8020186:	9b08      	ldr	r3, [sp, #32]
 8020188:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802018a:	9306      	str	r3, [sp, #24]
 802018c:	3b01      	subs	r3, #1
 802018e:	189b      	adds	r3, r3, r2
 8020190:	2201      	movs	r2, #1
 8020192:	9704      	str	r7, [sp, #16]
 8020194:	0007      	movs	r7, r0
 8020196:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802019a:	4013      	ands	r3, r2
 802019c:	930e      	str	r3, [sp, #56]	@ 0x38
 802019e:	0031      	movs	r1, r6
 80201a0:	9805      	ldr	r0, [sp, #20]
 80201a2:	f7ff fa65 	bl	801f670 <quorem>
 80201a6:	9904      	ldr	r1, [sp, #16]
 80201a8:	0005      	movs	r5, r0
 80201aa:	900a      	str	r0, [sp, #40]	@ 0x28
 80201ac:	9805      	ldr	r0, [sp, #20]
 80201ae:	f001 f82d 	bl	802120c <__mcmp>
 80201b2:	003a      	movs	r2, r7
 80201b4:	900d      	str	r0, [sp, #52]	@ 0x34
 80201b6:	0031      	movs	r1, r6
 80201b8:	9803      	ldr	r0, [sp, #12]
 80201ba:	f001 f843 	bl	8021244 <__mdiff>
 80201be:	2201      	movs	r2, #1
 80201c0:	68c3      	ldr	r3, [r0, #12]
 80201c2:	0004      	movs	r4, r0
 80201c4:	3530      	adds	r5, #48	@ 0x30
 80201c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80201c8:	2b00      	cmp	r3, #0
 80201ca:	d104      	bne.n	80201d6 <_dtoa_r+0xa4a>
 80201cc:	0001      	movs	r1, r0
 80201ce:	9805      	ldr	r0, [sp, #20]
 80201d0:	f001 f81c 	bl	802120c <__mcmp>
 80201d4:	9009      	str	r0, [sp, #36]	@ 0x24
 80201d6:	0021      	movs	r1, r4
 80201d8:	9803      	ldr	r0, [sp, #12]
 80201da:	f000 fd81 	bl	8020ce0 <_Bfree>
 80201de:	9b06      	ldr	r3, [sp, #24]
 80201e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80201e2:	1c5c      	adds	r4, r3, #1
 80201e4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80201e6:	4313      	orrs	r3, r2
 80201e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80201ea:	4313      	orrs	r3, r2
 80201ec:	d116      	bne.n	802021c <_dtoa_r+0xa90>
 80201ee:	2d39      	cmp	r5, #57	@ 0x39
 80201f0:	d02f      	beq.n	8020252 <_dtoa_r+0xac6>
 80201f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	dd01      	ble.n	80201fc <_dtoa_r+0xa70>
 80201f8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80201fa:	3531      	adds	r5, #49	@ 0x31
 80201fc:	9b06      	ldr	r3, [sp, #24]
 80201fe:	701d      	strb	r5, [r3, #0]
 8020200:	e638      	b.n	801fe74 <_dtoa_r+0x6e8>
 8020202:	46c0      	nop			@ (mov r8, r8)
 8020204:	40240000 	.word	0x40240000
 8020208:	00000433 	.word	0x00000433
 802020c:	7ff00000 	.word	0x7ff00000
 8020210:	08024a89 	.word	0x08024a89
 8020214:	08024a31 	.word	0x08024a31
 8020218:	000002ef 	.word	0x000002ef
 802021c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802021e:	2b00      	cmp	r3, #0
 8020220:	db04      	blt.n	802022c <_dtoa_r+0xaa0>
 8020222:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020224:	4313      	orrs	r3, r2
 8020226:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020228:	4313      	orrs	r3, r2
 802022a:	d11e      	bne.n	802026a <_dtoa_r+0xade>
 802022c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802022e:	2b00      	cmp	r3, #0
 8020230:	dde4      	ble.n	80201fc <_dtoa_r+0xa70>
 8020232:	9905      	ldr	r1, [sp, #20]
 8020234:	2201      	movs	r2, #1
 8020236:	9803      	ldr	r0, [sp, #12]
 8020238:	f000 ff7c 	bl	8021134 <__lshift>
 802023c:	0031      	movs	r1, r6
 802023e:	9005      	str	r0, [sp, #20]
 8020240:	f000 ffe4 	bl	802120c <__mcmp>
 8020244:	2800      	cmp	r0, #0
 8020246:	dc02      	bgt.n	802024e <_dtoa_r+0xac2>
 8020248:	d1d8      	bne.n	80201fc <_dtoa_r+0xa70>
 802024a:	07eb      	lsls	r3, r5, #31
 802024c:	d5d6      	bpl.n	80201fc <_dtoa_r+0xa70>
 802024e:	2d39      	cmp	r5, #57	@ 0x39
 8020250:	d1d2      	bne.n	80201f8 <_dtoa_r+0xa6c>
 8020252:	2339      	movs	r3, #57	@ 0x39
 8020254:	9a06      	ldr	r2, [sp, #24]
 8020256:	7013      	strb	r3, [r2, #0]
 8020258:	0023      	movs	r3, r4
 802025a:	001c      	movs	r4, r3
 802025c:	3b01      	subs	r3, #1
 802025e:	781a      	ldrb	r2, [r3, #0]
 8020260:	2a39      	cmp	r2, #57	@ 0x39
 8020262:	d04f      	beq.n	8020304 <_dtoa_r+0xb78>
 8020264:	3201      	adds	r2, #1
 8020266:	701a      	strb	r2, [r3, #0]
 8020268:	e604      	b.n	801fe74 <_dtoa_r+0x6e8>
 802026a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802026c:	2b00      	cmp	r3, #0
 802026e:	dd03      	ble.n	8020278 <_dtoa_r+0xaec>
 8020270:	2d39      	cmp	r5, #57	@ 0x39
 8020272:	d0ee      	beq.n	8020252 <_dtoa_r+0xac6>
 8020274:	3501      	adds	r5, #1
 8020276:	e7c1      	b.n	80201fc <_dtoa_r+0xa70>
 8020278:	9b06      	ldr	r3, [sp, #24]
 802027a:	9a06      	ldr	r2, [sp, #24]
 802027c:	701d      	strb	r5, [r3, #0]
 802027e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020280:	4293      	cmp	r3, r2
 8020282:	d02a      	beq.n	80202da <_dtoa_r+0xb4e>
 8020284:	2300      	movs	r3, #0
 8020286:	220a      	movs	r2, #10
 8020288:	9905      	ldr	r1, [sp, #20]
 802028a:	9803      	ldr	r0, [sp, #12]
 802028c:	f000 fd4c 	bl	8020d28 <__multadd>
 8020290:	9b04      	ldr	r3, [sp, #16]
 8020292:	9005      	str	r0, [sp, #20]
 8020294:	42bb      	cmp	r3, r7
 8020296:	d109      	bne.n	80202ac <_dtoa_r+0xb20>
 8020298:	2300      	movs	r3, #0
 802029a:	220a      	movs	r2, #10
 802029c:	9904      	ldr	r1, [sp, #16]
 802029e:	9803      	ldr	r0, [sp, #12]
 80202a0:	f000 fd42 	bl	8020d28 <__multadd>
 80202a4:	9004      	str	r0, [sp, #16]
 80202a6:	0007      	movs	r7, r0
 80202a8:	9406      	str	r4, [sp, #24]
 80202aa:	e778      	b.n	802019e <_dtoa_r+0xa12>
 80202ac:	9904      	ldr	r1, [sp, #16]
 80202ae:	2300      	movs	r3, #0
 80202b0:	220a      	movs	r2, #10
 80202b2:	9803      	ldr	r0, [sp, #12]
 80202b4:	f000 fd38 	bl	8020d28 <__multadd>
 80202b8:	2300      	movs	r3, #0
 80202ba:	9004      	str	r0, [sp, #16]
 80202bc:	220a      	movs	r2, #10
 80202be:	0039      	movs	r1, r7
 80202c0:	9803      	ldr	r0, [sp, #12]
 80202c2:	f000 fd31 	bl	8020d28 <__multadd>
 80202c6:	e7ee      	b.n	80202a6 <_dtoa_r+0xb1a>
 80202c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80202ca:	2401      	movs	r4, #1
 80202cc:	2b00      	cmp	r3, #0
 80202ce:	dd00      	ble.n	80202d2 <_dtoa_r+0xb46>
 80202d0:	001c      	movs	r4, r3
 80202d2:	9b08      	ldr	r3, [sp, #32]
 80202d4:	191c      	adds	r4, r3, r4
 80202d6:	2300      	movs	r3, #0
 80202d8:	9304      	str	r3, [sp, #16]
 80202da:	9905      	ldr	r1, [sp, #20]
 80202dc:	2201      	movs	r2, #1
 80202de:	9803      	ldr	r0, [sp, #12]
 80202e0:	f000 ff28 	bl	8021134 <__lshift>
 80202e4:	0031      	movs	r1, r6
 80202e6:	9005      	str	r0, [sp, #20]
 80202e8:	f000 ff90 	bl	802120c <__mcmp>
 80202ec:	2800      	cmp	r0, #0
 80202ee:	dcb3      	bgt.n	8020258 <_dtoa_r+0xacc>
 80202f0:	d101      	bne.n	80202f6 <_dtoa_r+0xb6a>
 80202f2:	07ed      	lsls	r5, r5, #31
 80202f4:	d4b0      	bmi.n	8020258 <_dtoa_r+0xacc>
 80202f6:	0023      	movs	r3, r4
 80202f8:	001c      	movs	r4, r3
 80202fa:	3b01      	subs	r3, #1
 80202fc:	781a      	ldrb	r2, [r3, #0]
 80202fe:	2a30      	cmp	r2, #48	@ 0x30
 8020300:	d0fa      	beq.n	80202f8 <_dtoa_r+0xb6c>
 8020302:	e5b7      	b.n	801fe74 <_dtoa_r+0x6e8>
 8020304:	9a08      	ldr	r2, [sp, #32]
 8020306:	429a      	cmp	r2, r3
 8020308:	d1a7      	bne.n	802025a <_dtoa_r+0xace>
 802030a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802030c:	3301      	adds	r3, #1
 802030e:	930c      	str	r3, [sp, #48]	@ 0x30
 8020310:	2331      	movs	r3, #49	@ 0x31
 8020312:	7013      	strb	r3, [r2, #0]
 8020314:	e5ae      	b.n	801fe74 <_dtoa_r+0x6e8>
 8020316:	4b15      	ldr	r3, [pc, #84]	@ (802036c <_dtoa_r+0xbe0>)
 8020318:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 802031a:	9308      	str	r3, [sp, #32]
 802031c:	4b14      	ldr	r3, [pc, #80]	@ (8020370 <_dtoa_r+0xbe4>)
 802031e:	2a00      	cmp	r2, #0
 8020320:	d001      	beq.n	8020326 <_dtoa_r+0xb9a>
 8020322:	f7ff fa7b 	bl	801f81c <_dtoa_r+0x90>
 8020326:	f7ff fa7b 	bl	801f820 <_dtoa_r+0x94>
 802032a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802032c:	2b01      	cmp	r3, #1
 802032e:	dc00      	bgt.n	8020332 <_dtoa_r+0xba6>
 8020330:	e648      	b.n	801ffc4 <_dtoa_r+0x838>
 8020332:	2001      	movs	r0, #1
 8020334:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8020336:	e665      	b.n	8020004 <_dtoa_r+0x878>
 8020338:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802033a:	2b00      	cmp	r3, #0
 802033c:	dc00      	bgt.n	8020340 <_dtoa_r+0xbb4>
 802033e:	e6d6      	b.n	80200ee <_dtoa_r+0x962>
 8020340:	2400      	movs	r4, #0
 8020342:	0031      	movs	r1, r6
 8020344:	9805      	ldr	r0, [sp, #20]
 8020346:	f7ff f993 	bl	801f670 <quorem>
 802034a:	9b08      	ldr	r3, [sp, #32]
 802034c:	3030      	adds	r0, #48	@ 0x30
 802034e:	5518      	strb	r0, [r3, r4]
 8020350:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020352:	3401      	adds	r4, #1
 8020354:	0005      	movs	r5, r0
 8020356:	429c      	cmp	r4, r3
 8020358:	dab6      	bge.n	80202c8 <_dtoa_r+0xb3c>
 802035a:	2300      	movs	r3, #0
 802035c:	220a      	movs	r2, #10
 802035e:	9905      	ldr	r1, [sp, #20]
 8020360:	9803      	ldr	r0, [sp, #12]
 8020362:	f000 fce1 	bl	8020d28 <__multadd>
 8020366:	9005      	str	r0, [sp, #20]
 8020368:	e7eb      	b.n	8020342 <_dtoa_r+0xbb6>
 802036a:	46c0      	nop			@ (mov r8, r8)
 802036c:	08024a0d 	.word	0x08024a0d
 8020370:	08024a15 	.word	0x08024a15

08020374 <_free_r>:
 8020374:	b570      	push	{r4, r5, r6, lr}
 8020376:	0005      	movs	r5, r0
 8020378:	1e0c      	subs	r4, r1, #0
 802037a:	d010      	beq.n	802039e <_free_r+0x2a>
 802037c:	3c04      	subs	r4, #4
 802037e:	6823      	ldr	r3, [r4, #0]
 8020380:	2b00      	cmp	r3, #0
 8020382:	da00      	bge.n	8020386 <_free_r+0x12>
 8020384:	18e4      	adds	r4, r4, r3
 8020386:	0028      	movs	r0, r5
 8020388:	f000 fc56 	bl	8020c38 <__malloc_lock>
 802038c:	4a1d      	ldr	r2, [pc, #116]	@ (8020404 <_free_r+0x90>)
 802038e:	6813      	ldr	r3, [r2, #0]
 8020390:	2b00      	cmp	r3, #0
 8020392:	d105      	bne.n	80203a0 <_free_r+0x2c>
 8020394:	6063      	str	r3, [r4, #4]
 8020396:	6014      	str	r4, [r2, #0]
 8020398:	0028      	movs	r0, r5
 802039a:	f000 fc55 	bl	8020c48 <__malloc_unlock>
 802039e:	bd70      	pop	{r4, r5, r6, pc}
 80203a0:	42a3      	cmp	r3, r4
 80203a2:	d908      	bls.n	80203b6 <_free_r+0x42>
 80203a4:	6820      	ldr	r0, [r4, #0]
 80203a6:	1821      	adds	r1, r4, r0
 80203a8:	428b      	cmp	r3, r1
 80203aa:	d1f3      	bne.n	8020394 <_free_r+0x20>
 80203ac:	6819      	ldr	r1, [r3, #0]
 80203ae:	685b      	ldr	r3, [r3, #4]
 80203b0:	1809      	adds	r1, r1, r0
 80203b2:	6021      	str	r1, [r4, #0]
 80203b4:	e7ee      	b.n	8020394 <_free_r+0x20>
 80203b6:	001a      	movs	r2, r3
 80203b8:	685b      	ldr	r3, [r3, #4]
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d001      	beq.n	80203c2 <_free_r+0x4e>
 80203be:	42a3      	cmp	r3, r4
 80203c0:	d9f9      	bls.n	80203b6 <_free_r+0x42>
 80203c2:	6811      	ldr	r1, [r2, #0]
 80203c4:	1850      	adds	r0, r2, r1
 80203c6:	42a0      	cmp	r0, r4
 80203c8:	d10b      	bne.n	80203e2 <_free_r+0x6e>
 80203ca:	6820      	ldr	r0, [r4, #0]
 80203cc:	1809      	adds	r1, r1, r0
 80203ce:	1850      	adds	r0, r2, r1
 80203d0:	6011      	str	r1, [r2, #0]
 80203d2:	4283      	cmp	r3, r0
 80203d4:	d1e0      	bne.n	8020398 <_free_r+0x24>
 80203d6:	6818      	ldr	r0, [r3, #0]
 80203d8:	685b      	ldr	r3, [r3, #4]
 80203da:	1841      	adds	r1, r0, r1
 80203dc:	6011      	str	r1, [r2, #0]
 80203de:	6053      	str	r3, [r2, #4]
 80203e0:	e7da      	b.n	8020398 <_free_r+0x24>
 80203e2:	42a0      	cmp	r0, r4
 80203e4:	d902      	bls.n	80203ec <_free_r+0x78>
 80203e6:	230c      	movs	r3, #12
 80203e8:	602b      	str	r3, [r5, #0]
 80203ea:	e7d5      	b.n	8020398 <_free_r+0x24>
 80203ec:	6820      	ldr	r0, [r4, #0]
 80203ee:	1821      	adds	r1, r4, r0
 80203f0:	428b      	cmp	r3, r1
 80203f2:	d103      	bne.n	80203fc <_free_r+0x88>
 80203f4:	6819      	ldr	r1, [r3, #0]
 80203f6:	685b      	ldr	r3, [r3, #4]
 80203f8:	1809      	adds	r1, r1, r0
 80203fa:	6021      	str	r1, [r4, #0]
 80203fc:	6063      	str	r3, [r4, #4]
 80203fe:	6054      	str	r4, [r2, #4]
 8020400:	e7ca      	b.n	8020398 <_free_r+0x24>
 8020402:	46c0      	nop			@ (mov r8, r8)
 8020404:	2000392c 	.word	0x2000392c

08020408 <rshift>:
 8020408:	0002      	movs	r2, r0
 802040a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802040c:	6904      	ldr	r4, [r0, #16]
 802040e:	b085      	sub	sp, #20
 8020410:	3214      	adds	r2, #20
 8020412:	114b      	asrs	r3, r1, #5
 8020414:	0016      	movs	r6, r2
 8020416:	9302      	str	r3, [sp, #8]
 8020418:	429c      	cmp	r4, r3
 802041a:	dd31      	ble.n	8020480 <rshift+0x78>
 802041c:	261f      	movs	r6, #31
 802041e:	000f      	movs	r7, r1
 8020420:	009b      	lsls	r3, r3, #2
 8020422:	00a5      	lsls	r5, r4, #2
 8020424:	18d3      	adds	r3, r2, r3
 8020426:	4037      	ands	r7, r6
 8020428:	1955      	adds	r5, r2, r5
 802042a:	9300      	str	r3, [sp, #0]
 802042c:	9701      	str	r7, [sp, #4]
 802042e:	4231      	tst	r1, r6
 8020430:	d10d      	bne.n	802044e <rshift+0x46>
 8020432:	0016      	movs	r6, r2
 8020434:	0019      	movs	r1, r3
 8020436:	428d      	cmp	r5, r1
 8020438:	d836      	bhi.n	80204a8 <rshift+0xa0>
 802043a:	9b00      	ldr	r3, [sp, #0]
 802043c:	2600      	movs	r6, #0
 802043e:	3b03      	subs	r3, #3
 8020440:	429d      	cmp	r5, r3
 8020442:	d302      	bcc.n	802044a <rshift+0x42>
 8020444:	9b02      	ldr	r3, [sp, #8]
 8020446:	1ae4      	subs	r4, r4, r3
 8020448:	00a6      	lsls	r6, r4, #2
 802044a:	1996      	adds	r6, r2, r6
 802044c:	e018      	b.n	8020480 <rshift+0x78>
 802044e:	2120      	movs	r1, #32
 8020450:	9e01      	ldr	r6, [sp, #4]
 8020452:	9f01      	ldr	r7, [sp, #4]
 8020454:	1b89      	subs	r1, r1, r6
 8020456:	9e00      	ldr	r6, [sp, #0]
 8020458:	9103      	str	r1, [sp, #12]
 802045a:	ce02      	ldmia	r6!, {r1}
 802045c:	4694      	mov	ip, r2
 802045e:	40f9      	lsrs	r1, r7
 8020460:	42b5      	cmp	r5, r6
 8020462:	d816      	bhi.n	8020492 <rshift+0x8a>
 8020464:	9b00      	ldr	r3, [sp, #0]
 8020466:	2600      	movs	r6, #0
 8020468:	3301      	adds	r3, #1
 802046a:	429d      	cmp	r5, r3
 802046c:	d303      	bcc.n	8020476 <rshift+0x6e>
 802046e:	9b02      	ldr	r3, [sp, #8]
 8020470:	1ae4      	subs	r4, r4, r3
 8020472:	00a6      	lsls	r6, r4, #2
 8020474:	3e04      	subs	r6, #4
 8020476:	1996      	adds	r6, r2, r6
 8020478:	6031      	str	r1, [r6, #0]
 802047a:	2900      	cmp	r1, #0
 802047c:	d000      	beq.n	8020480 <rshift+0x78>
 802047e:	3604      	adds	r6, #4
 8020480:	1ab1      	subs	r1, r6, r2
 8020482:	1089      	asrs	r1, r1, #2
 8020484:	6101      	str	r1, [r0, #16]
 8020486:	4296      	cmp	r6, r2
 8020488:	d101      	bne.n	802048e <rshift+0x86>
 802048a:	2300      	movs	r3, #0
 802048c:	6143      	str	r3, [r0, #20]
 802048e:	b005      	add	sp, #20
 8020490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020492:	6837      	ldr	r7, [r6, #0]
 8020494:	9b03      	ldr	r3, [sp, #12]
 8020496:	409f      	lsls	r7, r3
 8020498:	430f      	orrs	r7, r1
 802049a:	4661      	mov	r1, ip
 802049c:	c180      	stmia	r1!, {r7}
 802049e:	468c      	mov	ip, r1
 80204a0:	9b01      	ldr	r3, [sp, #4]
 80204a2:	ce02      	ldmia	r6!, {r1}
 80204a4:	40d9      	lsrs	r1, r3
 80204a6:	e7db      	b.n	8020460 <rshift+0x58>
 80204a8:	c980      	ldmia	r1!, {r7}
 80204aa:	c680      	stmia	r6!, {r7}
 80204ac:	e7c3      	b.n	8020436 <rshift+0x2e>

080204ae <__hexdig_fun>:
 80204ae:	0002      	movs	r2, r0
 80204b0:	3a30      	subs	r2, #48	@ 0x30
 80204b2:	0003      	movs	r3, r0
 80204b4:	2a09      	cmp	r2, #9
 80204b6:	d802      	bhi.n	80204be <__hexdig_fun+0x10>
 80204b8:	3b20      	subs	r3, #32
 80204ba:	b2d8      	uxtb	r0, r3
 80204bc:	4770      	bx	lr
 80204be:	0002      	movs	r2, r0
 80204c0:	3a61      	subs	r2, #97	@ 0x61
 80204c2:	2a05      	cmp	r2, #5
 80204c4:	d801      	bhi.n	80204ca <__hexdig_fun+0x1c>
 80204c6:	3b47      	subs	r3, #71	@ 0x47
 80204c8:	e7f7      	b.n	80204ba <__hexdig_fun+0xc>
 80204ca:	001a      	movs	r2, r3
 80204cc:	3a41      	subs	r2, #65	@ 0x41
 80204ce:	2000      	movs	r0, #0
 80204d0:	2a05      	cmp	r2, #5
 80204d2:	d8f3      	bhi.n	80204bc <__hexdig_fun+0xe>
 80204d4:	3b27      	subs	r3, #39	@ 0x27
 80204d6:	e7f0      	b.n	80204ba <__hexdig_fun+0xc>

080204d8 <__gethex>:
 80204d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80204da:	b089      	sub	sp, #36	@ 0x24
 80204dc:	9307      	str	r3, [sp, #28]
 80204de:	680b      	ldr	r3, [r1, #0]
 80204e0:	9201      	str	r2, [sp, #4]
 80204e2:	9003      	str	r0, [sp, #12]
 80204e4:	9106      	str	r1, [sp, #24]
 80204e6:	1c9a      	adds	r2, r3, #2
 80204e8:	0011      	movs	r1, r2
 80204ea:	3201      	adds	r2, #1
 80204ec:	1e50      	subs	r0, r2, #1
 80204ee:	7800      	ldrb	r0, [r0, #0]
 80204f0:	2830      	cmp	r0, #48	@ 0x30
 80204f2:	d0f9      	beq.n	80204e8 <__gethex+0x10>
 80204f4:	1acb      	subs	r3, r1, r3
 80204f6:	3b02      	subs	r3, #2
 80204f8:	9305      	str	r3, [sp, #20]
 80204fa:	9100      	str	r1, [sp, #0]
 80204fc:	f7ff ffd7 	bl	80204ae <__hexdig_fun>
 8020500:	2300      	movs	r3, #0
 8020502:	001d      	movs	r5, r3
 8020504:	9302      	str	r3, [sp, #8]
 8020506:	4298      	cmp	r0, r3
 8020508:	d11e      	bne.n	8020548 <__gethex+0x70>
 802050a:	2201      	movs	r2, #1
 802050c:	49a6      	ldr	r1, [pc, #664]	@ (80207a8 <__gethex+0x2d0>)
 802050e:	9800      	ldr	r0, [sp, #0]
 8020510:	f7fe ffd8 	bl	801f4c4 <strncmp>
 8020514:	0007      	movs	r7, r0
 8020516:	42a8      	cmp	r0, r5
 8020518:	d000      	beq.n	802051c <__gethex+0x44>
 802051a:	e06a      	b.n	80205f2 <__gethex+0x11a>
 802051c:	9b00      	ldr	r3, [sp, #0]
 802051e:	7858      	ldrb	r0, [r3, #1]
 8020520:	1c5c      	adds	r4, r3, #1
 8020522:	f7ff ffc4 	bl	80204ae <__hexdig_fun>
 8020526:	2301      	movs	r3, #1
 8020528:	9302      	str	r3, [sp, #8]
 802052a:	42a8      	cmp	r0, r5
 802052c:	d02f      	beq.n	802058e <__gethex+0xb6>
 802052e:	9400      	str	r4, [sp, #0]
 8020530:	9b00      	ldr	r3, [sp, #0]
 8020532:	7818      	ldrb	r0, [r3, #0]
 8020534:	2830      	cmp	r0, #48	@ 0x30
 8020536:	d009      	beq.n	802054c <__gethex+0x74>
 8020538:	f7ff ffb9 	bl	80204ae <__hexdig_fun>
 802053c:	4242      	negs	r2, r0
 802053e:	4142      	adcs	r2, r0
 8020540:	2301      	movs	r3, #1
 8020542:	0025      	movs	r5, r4
 8020544:	9202      	str	r2, [sp, #8]
 8020546:	9305      	str	r3, [sp, #20]
 8020548:	9c00      	ldr	r4, [sp, #0]
 802054a:	e004      	b.n	8020556 <__gethex+0x7e>
 802054c:	9b00      	ldr	r3, [sp, #0]
 802054e:	3301      	adds	r3, #1
 8020550:	9300      	str	r3, [sp, #0]
 8020552:	e7ed      	b.n	8020530 <__gethex+0x58>
 8020554:	3401      	adds	r4, #1
 8020556:	7820      	ldrb	r0, [r4, #0]
 8020558:	f7ff ffa9 	bl	80204ae <__hexdig_fun>
 802055c:	1e07      	subs	r7, r0, #0
 802055e:	d1f9      	bne.n	8020554 <__gethex+0x7c>
 8020560:	2201      	movs	r2, #1
 8020562:	0020      	movs	r0, r4
 8020564:	4990      	ldr	r1, [pc, #576]	@ (80207a8 <__gethex+0x2d0>)
 8020566:	f7fe ffad 	bl	801f4c4 <strncmp>
 802056a:	2800      	cmp	r0, #0
 802056c:	d10d      	bne.n	802058a <__gethex+0xb2>
 802056e:	2d00      	cmp	r5, #0
 8020570:	d106      	bne.n	8020580 <__gethex+0xa8>
 8020572:	3401      	adds	r4, #1
 8020574:	0025      	movs	r5, r4
 8020576:	7820      	ldrb	r0, [r4, #0]
 8020578:	f7ff ff99 	bl	80204ae <__hexdig_fun>
 802057c:	2800      	cmp	r0, #0
 802057e:	d102      	bne.n	8020586 <__gethex+0xae>
 8020580:	1b2d      	subs	r5, r5, r4
 8020582:	00af      	lsls	r7, r5, #2
 8020584:	e003      	b.n	802058e <__gethex+0xb6>
 8020586:	3401      	adds	r4, #1
 8020588:	e7f5      	b.n	8020576 <__gethex+0x9e>
 802058a:	2d00      	cmp	r5, #0
 802058c:	d1f8      	bne.n	8020580 <__gethex+0xa8>
 802058e:	2220      	movs	r2, #32
 8020590:	7823      	ldrb	r3, [r4, #0]
 8020592:	0026      	movs	r6, r4
 8020594:	4393      	bics	r3, r2
 8020596:	2b50      	cmp	r3, #80	@ 0x50
 8020598:	d11d      	bne.n	80205d6 <__gethex+0xfe>
 802059a:	7863      	ldrb	r3, [r4, #1]
 802059c:	2b2b      	cmp	r3, #43	@ 0x2b
 802059e:	d02d      	beq.n	80205fc <__gethex+0x124>
 80205a0:	2b2d      	cmp	r3, #45	@ 0x2d
 80205a2:	d02f      	beq.n	8020604 <__gethex+0x12c>
 80205a4:	2300      	movs	r3, #0
 80205a6:	1c66      	adds	r6, r4, #1
 80205a8:	9304      	str	r3, [sp, #16]
 80205aa:	7830      	ldrb	r0, [r6, #0]
 80205ac:	f7ff ff7f 	bl	80204ae <__hexdig_fun>
 80205b0:	1e43      	subs	r3, r0, #1
 80205b2:	b2db      	uxtb	r3, r3
 80205b4:	0005      	movs	r5, r0
 80205b6:	2b18      	cmp	r3, #24
 80205b8:	d82a      	bhi.n	8020610 <__gethex+0x138>
 80205ba:	7870      	ldrb	r0, [r6, #1]
 80205bc:	f7ff ff77 	bl	80204ae <__hexdig_fun>
 80205c0:	1e43      	subs	r3, r0, #1
 80205c2:	b2db      	uxtb	r3, r3
 80205c4:	3601      	adds	r6, #1
 80205c6:	3d10      	subs	r5, #16
 80205c8:	2b18      	cmp	r3, #24
 80205ca:	d91d      	bls.n	8020608 <__gethex+0x130>
 80205cc:	9b04      	ldr	r3, [sp, #16]
 80205ce:	2b00      	cmp	r3, #0
 80205d0:	d000      	beq.n	80205d4 <__gethex+0xfc>
 80205d2:	426d      	negs	r5, r5
 80205d4:	197f      	adds	r7, r7, r5
 80205d6:	9b06      	ldr	r3, [sp, #24]
 80205d8:	601e      	str	r6, [r3, #0]
 80205da:	9b02      	ldr	r3, [sp, #8]
 80205dc:	2b00      	cmp	r3, #0
 80205de:	d019      	beq.n	8020614 <__gethex+0x13c>
 80205e0:	9b05      	ldr	r3, [sp, #20]
 80205e2:	2606      	movs	r6, #6
 80205e4:	425a      	negs	r2, r3
 80205e6:	4153      	adcs	r3, r2
 80205e8:	425b      	negs	r3, r3
 80205ea:	401e      	ands	r6, r3
 80205ec:	0030      	movs	r0, r6
 80205ee:	b009      	add	sp, #36	@ 0x24
 80205f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80205f2:	2301      	movs	r3, #1
 80205f4:	2700      	movs	r7, #0
 80205f6:	9c00      	ldr	r4, [sp, #0]
 80205f8:	9302      	str	r3, [sp, #8]
 80205fa:	e7c8      	b.n	802058e <__gethex+0xb6>
 80205fc:	2300      	movs	r3, #0
 80205fe:	9304      	str	r3, [sp, #16]
 8020600:	1ca6      	adds	r6, r4, #2
 8020602:	e7d2      	b.n	80205aa <__gethex+0xd2>
 8020604:	2301      	movs	r3, #1
 8020606:	e7fa      	b.n	80205fe <__gethex+0x126>
 8020608:	230a      	movs	r3, #10
 802060a:	435d      	muls	r5, r3
 802060c:	182d      	adds	r5, r5, r0
 802060e:	e7d4      	b.n	80205ba <__gethex+0xe2>
 8020610:	0026      	movs	r6, r4
 8020612:	e7e0      	b.n	80205d6 <__gethex+0xfe>
 8020614:	9b00      	ldr	r3, [sp, #0]
 8020616:	9902      	ldr	r1, [sp, #8]
 8020618:	1ae3      	subs	r3, r4, r3
 802061a:	3b01      	subs	r3, #1
 802061c:	2b07      	cmp	r3, #7
 802061e:	dc0a      	bgt.n	8020636 <__gethex+0x15e>
 8020620:	9803      	ldr	r0, [sp, #12]
 8020622:	f000 fb19 	bl	8020c58 <_Balloc>
 8020626:	1e05      	subs	r5, r0, #0
 8020628:	d108      	bne.n	802063c <__gethex+0x164>
 802062a:	002a      	movs	r2, r5
 802062c:	21e4      	movs	r1, #228	@ 0xe4
 802062e:	4b5f      	ldr	r3, [pc, #380]	@ (80207ac <__gethex+0x2d4>)
 8020630:	485f      	ldr	r0, [pc, #380]	@ (80207b0 <__gethex+0x2d8>)
 8020632:	f001 fbf1 	bl	8021e18 <__assert_func>
 8020636:	3101      	adds	r1, #1
 8020638:	105b      	asrs	r3, r3, #1
 802063a:	e7ef      	b.n	802061c <__gethex+0x144>
 802063c:	0003      	movs	r3, r0
 802063e:	3314      	adds	r3, #20
 8020640:	9302      	str	r3, [sp, #8]
 8020642:	9305      	str	r3, [sp, #20]
 8020644:	2300      	movs	r3, #0
 8020646:	001e      	movs	r6, r3
 8020648:	9304      	str	r3, [sp, #16]
 802064a:	9b00      	ldr	r3, [sp, #0]
 802064c:	42a3      	cmp	r3, r4
 802064e:	d338      	bcc.n	80206c2 <__gethex+0x1ea>
 8020650:	9c05      	ldr	r4, [sp, #20]
 8020652:	9b02      	ldr	r3, [sp, #8]
 8020654:	c440      	stmia	r4!, {r6}
 8020656:	1ae4      	subs	r4, r4, r3
 8020658:	10a4      	asrs	r4, r4, #2
 802065a:	0030      	movs	r0, r6
 802065c:	612c      	str	r4, [r5, #16]
 802065e:	f000 fbf3 	bl	8020e48 <__hi0bits>
 8020662:	9b01      	ldr	r3, [sp, #4]
 8020664:	0164      	lsls	r4, r4, #5
 8020666:	681b      	ldr	r3, [r3, #0]
 8020668:	1a26      	subs	r6, r4, r0
 802066a:	9300      	str	r3, [sp, #0]
 802066c:	429e      	cmp	r6, r3
 802066e:	dd52      	ble.n	8020716 <__gethex+0x23e>
 8020670:	1af6      	subs	r6, r6, r3
 8020672:	0031      	movs	r1, r6
 8020674:	0028      	movs	r0, r5
 8020676:	f000 ff96 	bl	80215a6 <__any_on>
 802067a:	1e04      	subs	r4, r0, #0
 802067c:	d00f      	beq.n	802069e <__gethex+0x1c6>
 802067e:	2401      	movs	r4, #1
 8020680:	231f      	movs	r3, #31
 8020682:	0020      	movs	r0, r4
 8020684:	1e72      	subs	r2, r6, #1
 8020686:	4013      	ands	r3, r2
 8020688:	4098      	lsls	r0, r3
 802068a:	0003      	movs	r3, r0
 802068c:	1151      	asrs	r1, r2, #5
 802068e:	9802      	ldr	r0, [sp, #8]
 8020690:	0089      	lsls	r1, r1, #2
 8020692:	5809      	ldr	r1, [r1, r0]
 8020694:	4219      	tst	r1, r3
 8020696:	d002      	beq.n	802069e <__gethex+0x1c6>
 8020698:	42a2      	cmp	r2, r4
 802069a:	dc34      	bgt.n	8020706 <__gethex+0x22e>
 802069c:	2402      	movs	r4, #2
 802069e:	0031      	movs	r1, r6
 80206a0:	0028      	movs	r0, r5
 80206a2:	f7ff feb1 	bl	8020408 <rshift>
 80206a6:	19bf      	adds	r7, r7, r6
 80206a8:	9b01      	ldr	r3, [sp, #4]
 80206aa:	689b      	ldr	r3, [r3, #8]
 80206ac:	42bb      	cmp	r3, r7
 80206ae:	da42      	bge.n	8020736 <__gethex+0x25e>
 80206b0:	0029      	movs	r1, r5
 80206b2:	9803      	ldr	r0, [sp, #12]
 80206b4:	f000 fb14 	bl	8020ce0 <_Bfree>
 80206b8:	2300      	movs	r3, #0
 80206ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80206bc:	26a3      	movs	r6, #163	@ 0xa3
 80206be:	6013      	str	r3, [r2, #0]
 80206c0:	e794      	b.n	80205ec <__gethex+0x114>
 80206c2:	3c01      	subs	r4, #1
 80206c4:	7823      	ldrb	r3, [r4, #0]
 80206c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80206c8:	d012      	beq.n	80206f0 <__gethex+0x218>
 80206ca:	9b04      	ldr	r3, [sp, #16]
 80206cc:	2b20      	cmp	r3, #32
 80206ce:	d104      	bne.n	80206da <__gethex+0x202>
 80206d0:	9b05      	ldr	r3, [sp, #20]
 80206d2:	c340      	stmia	r3!, {r6}
 80206d4:	2600      	movs	r6, #0
 80206d6:	9305      	str	r3, [sp, #20]
 80206d8:	9604      	str	r6, [sp, #16]
 80206da:	7820      	ldrb	r0, [r4, #0]
 80206dc:	f7ff fee7 	bl	80204ae <__hexdig_fun>
 80206e0:	230f      	movs	r3, #15
 80206e2:	4018      	ands	r0, r3
 80206e4:	9b04      	ldr	r3, [sp, #16]
 80206e6:	4098      	lsls	r0, r3
 80206e8:	3304      	adds	r3, #4
 80206ea:	4306      	orrs	r6, r0
 80206ec:	9304      	str	r3, [sp, #16]
 80206ee:	e7ac      	b.n	802064a <__gethex+0x172>
 80206f0:	9b00      	ldr	r3, [sp, #0]
 80206f2:	42a3      	cmp	r3, r4
 80206f4:	d8e9      	bhi.n	80206ca <__gethex+0x1f2>
 80206f6:	2201      	movs	r2, #1
 80206f8:	0020      	movs	r0, r4
 80206fa:	492b      	ldr	r1, [pc, #172]	@ (80207a8 <__gethex+0x2d0>)
 80206fc:	f7fe fee2 	bl	801f4c4 <strncmp>
 8020700:	2800      	cmp	r0, #0
 8020702:	d1e2      	bne.n	80206ca <__gethex+0x1f2>
 8020704:	e7a1      	b.n	802064a <__gethex+0x172>
 8020706:	0028      	movs	r0, r5
 8020708:	1eb1      	subs	r1, r6, #2
 802070a:	f000 ff4c 	bl	80215a6 <__any_on>
 802070e:	2800      	cmp	r0, #0
 8020710:	d0c4      	beq.n	802069c <__gethex+0x1c4>
 8020712:	2403      	movs	r4, #3
 8020714:	e7c3      	b.n	802069e <__gethex+0x1c6>
 8020716:	9b00      	ldr	r3, [sp, #0]
 8020718:	2400      	movs	r4, #0
 802071a:	429e      	cmp	r6, r3
 802071c:	dac4      	bge.n	80206a8 <__gethex+0x1d0>
 802071e:	1b9e      	subs	r6, r3, r6
 8020720:	0029      	movs	r1, r5
 8020722:	0032      	movs	r2, r6
 8020724:	9803      	ldr	r0, [sp, #12]
 8020726:	f000 fd05 	bl	8021134 <__lshift>
 802072a:	0003      	movs	r3, r0
 802072c:	3314      	adds	r3, #20
 802072e:	0005      	movs	r5, r0
 8020730:	1bbf      	subs	r7, r7, r6
 8020732:	9302      	str	r3, [sp, #8]
 8020734:	e7b8      	b.n	80206a8 <__gethex+0x1d0>
 8020736:	9b01      	ldr	r3, [sp, #4]
 8020738:	685e      	ldr	r6, [r3, #4]
 802073a:	42be      	cmp	r6, r7
 802073c:	dd6f      	ble.n	802081e <__gethex+0x346>
 802073e:	9b00      	ldr	r3, [sp, #0]
 8020740:	1bf6      	subs	r6, r6, r7
 8020742:	42b3      	cmp	r3, r6
 8020744:	dc36      	bgt.n	80207b4 <__gethex+0x2dc>
 8020746:	9b01      	ldr	r3, [sp, #4]
 8020748:	68db      	ldr	r3, [r3, #12]
 802074a:	2b02      	cmp	r3, #2
 802074c:	d024      	beq.n	8020798 <__gethex+0x2c0>
 802074e:	2b03      	cmp	r3, #3
 8020750:	d026      	beq.n	80207a0 <__gethex+0x2c8>
 8020752:	2b01      	cmp	r3, #1
 8020754:	d117      	bne.n	8020786 <__gethex+0x2ae>
 8020756:	9b00      	ldr	r3, [sp, #0]
 8020758:	42b3      	cmp	r3, r6
 802075a:	d114      	bne.n	8020786 <__gethex+0x2ae>
 802075c:	2b01      	cmp	r3, #1
 802075e:	d10b      	bne.n	8020778 <__gethex+0x2a0>
 8020760:	9b01      	ldr	r3, [sp, #4]
 8020762:	9a07      	ldr	r2, [sp, #28]
 8020764:	685b      	ldr	r3, [r3, #4]
 8020766:	2662      	movs	r6, #98	@ 0x62
 8020768:	6013      	str	r3, [r2, #0]
 802076a:	2301      	movs	r3, #1
 802076c:	9a02      	ldr	r2, [sp, #8]
 802076e:	612b      	str	r3, [r5, #16]
 8020770:	6013      	str	r3, [r2, #0]
 8020772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020774:	601d      	str	r5, [r3, #0]
 8020776:	e739      	b.n	80205ec <__gethex+0x114>
 8020778:	9900      	ldr	r1, [sp, #0]
 802077a:	0028      	movs	r0, r5
 802077c:	3901      	subs	r1, #1
 802077e:	f000 ff12 	bl	80215a6 <__any_on>
 8020782:	2800      	cmp	r0, #0
 8020784:	d1ec      	bne.n	8020760 <__gethex+0x288>
 8020786:	0029      	movs	r1, r5
 8020788:	9803      	ldr	r0, [sp, #12]
 802078a:	f000 faa9 	bl	8020ce0 <_Bfree>
 802078e:	2300      	movs	r3, #0
 8020790:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020792:	2650      	movs	r6, #80	@ 0x50
 8020794:	6013      	str	r3, [r2, #0]
 8020796:	e729      	b.n	80205ec <__gethex+0x114>
 8020798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802079a:	2b00      	cmp	r3, #0
 802079c:	d1f3      	bne.n	8020786 <__gethex+0x2ae>
 802079e:	e7df      	b.n	8020760 <__gethex+0x288>
 80207a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80207a2:	2b00      	cmp	r3, #0
 80207a4:	d1dc      	bne.n	8020760 <__gethex+0x288>
 80207a6:	e7ee      	b.n	8020786 <__gethex+0x2ae>
 80207a8:	08024878 	.word	0x08024878
 80207ac:	08024a89 	.word	0x08024a89
 80207b0:	08024a9a 	.word	0x08024a9a
 80207b4:	1e77      	subs	r7, r6, #1
 80207b6:	2c00      	cmp	r4, #0
 80207b8:	d12f      	bne.n	802081a <__gethex+0x342>
 80207ba:	2f00      	cmp	r7, #0
 80207bc:	d004      	beq.n	80207c8 <__gethex+0x2f0>
 80207be:	0039      	movs	r1, r7
 80207c0:	0028      	movs	r0, r5
 80207c2:	f000 fef0 	bl	80215a6 <__any_on>
 80207c6:	0004      	movs	r4, r0
 80207c8:	231f      	movs	r3, #31
 80207ca:	117a      	asrs	r2, r7, #5
 80207cc:	401f      	ands	r7, r3
 80207ce:	3b1e      	subs	r3, #30
 80207d0:	40bb      	lsls	r3, r7
 80207d2:	9902      	ldr	r1, [sp, #8]
 80207d4:	0092      	lsls	r2, r2, #2
 80207d6:	5852      	ldr	r2, [r2, r1]
 80207d8:	421a      	tst	r2, r3
 80207da:	d001      	beq.n	80207e0 <__gethex+0x308>
 80207dc:	2302      	movs	r3, #2
 80207de:	431c      	orrs	r4, r3
 80207e0:	9b00      	ldr	r3, [sp, #0]
 80207e2:	0031      	movs	r1, r6
 80207e4:	1b9b      	subs	r3, r3, r6
 80207e6:	2602      	movs	r6, #2
 80207e8:	0028      	movs	r0, r5
 80207ea:	9300      	str	r3, [sp, #0]
 80207ec:	f7ff fe0c 	bl	8020408 <rshift>
 80207f0:	9b01      	ldr	r3, [sp, #4]
 80207f2:	685f      	ldr	r7, [r3, #4]
 80207f4:	2c00      	cmp	r4, #0
 80207f6:	d03f      	beq.n	8020878 <__gethex+0x3a0>
 80207f8:	9b01      	ldr	r3, [sp, #4]
 80207fa:	68db      	ldr	r3, [r3, #12]
 80207fc:	2b02      	cmp	r3, #2
 80207fe:	d010      	beq.n	8020822 <__gethex+0x34a>
 8020800:	2b03      	cmp	r3, #3
 8020802:	d012      	beq.n	802082a <__gethex+0x352>
 8020804:	2b01      	cmp	r3, #1
 8020806:	d106      	bne.n	8020816 <__gethex+0x33e>
 8020808:	07a2      	lsls	r2, r4, #30
 802080a:	d504      	bpl.n	8020816 <__gethex+0x33e>
 802080c:	9a02      	ldr	r2, [sp, #8]
 802080e:	6812      	ldr	r2, [r2, #0]
 8020810:	4314      	orrs	r4, r2
 8020812:	421c      	tst	r4, r3
 8020814:	d10c      	bne.n	8020830 <__gethex+0x358>
 8020816:	2310      	movs	r3, #16
 8020818:	e02d      	b.n	8020876 <__gethex+0x39e>
 802081a:	2401      	movs	r4, #1
 802081c:	e7d4      	b.n	80207c8 <__gethex+0x2f0>
 802081e:	2601      	movs	r6, #1
 8020820:	e7e8      	b.n	80207f4 <__gethex+0x31c>
 8020822:	2301      	movs	r3, #1
 8020824:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020826:	1a9b      	subs	r3, r3, r2
 8020828:	930f      	str	r3, [sp, #60]	@ 0x3c
 802082a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802082c:	2b00      	cmp	r3, #0
 802082e:	d0f2      	beq.n	8020816 <__gethex+0x33e>
 8020830:	692b      	ldr	r3, [r5, #16]
 8020832:	2000      	movs	r0, #0
 8020834:	9302      	str	r3, [sp, #8]
 8020836:	009b      	lsls	r3, r3, #2
 8020838:	9304      	str	r3, [sp, #16]
 802083a:	002b      	movs	r3, r5
 802083c:	9a04      	ldr	r2, [sp, #16]
 802083e:	3314      	adds	r3, #20
 8020840:	1899      	adds	r1, r3, r2
 8020842:	681a      	ldr	r2, [r3, #0]
 8020844:	1c54      	adds	r4, r2, #1
 8020846:	d01c      	beq.n	8020882 <__gethex+0x3aa>
 8020848:	3201      	adds	r2, #1
 802084a:	601a      	str	r2, [r3, #0]
 802084c:	002b      	movs	r3, r5
 802084e:	3314      	adds	r3, #20
 8020850:	2e02      	cmp	r6, #2
 8020852:	d13f      	bne.n	80208d4 <__gethex+0x3fc>
 8020854:	9a01      	ldr	r2, [sp, #4]
 8020856:	9900      	ldr	r1, [sp, #0]
 8020858:	6812      	ldr	r2, [r2, #0]
 802085a:	3a01      	subs	r2, #1
 802085c:	428a      	cmp	r2, r1
 802085e:	d109      	bne.n	8020874 <__gethex+0x39c>
 8020860:	000a      	movs	r2, r1
 8020862:	201f      	movs	r0, #31
 8020864:	4010      	ands	r0, r2
 8020866:	2201      	movs	r2, #1
 8020868:	4082      	lsls	r2, r0
 802086a:	1149      	asrs	r1, r1, #5
 802086c:	0089      	lsls	r1, r1, #2
 802086e:	58cb      	ldr	r3, [r1, r3]
 8020870:	4213      	tst	r3, r2
 8020872:	d13d      	bne.n	80208f0 <__gethex+0x418>
 8020874:	2320      	movs	r3, #32
 8020876:	431e      	orrs	r6, r3
 8020878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802087a:	601d      	str	r5, [r3, #0]
 802087c:	9b07      	ldr	r3, [sp, #28]
 802087e:	601f      	str	r7, [r3, #0]
 8020880:	e6b4      	b.n	80205ec <__gethex+0x114>
 8020882:	c301      	stmia	r3!, {r0}
 8020884:	4299      	cmp	r1, r3
 8020886:	d8dc      	bhi.n	8020842 <__gethex+0x36a>
 8020888:	68ab      	ldr	r3, [r5, #8]
 802088a:	9a02      	ldr	r2, [sp, #8]
 802088c:	429a      	cmp	r2, r3
 802088e:	db18      	blt.n	80208c2 <__gethex+0x3ea>
 8020890:	6869      	ldr	r1, [r5, #4]
 8020892:	9803      	ldr	r0, [sp, #12]
 8020894:	3101      	adds	r1, #1
 8020896:	f000 f9df 	bl	8020c58 <_Balloc>
 802089a:	1e04      	subs	r4, r0, #0
 802089c:	d104      	bne.n	80208a8 <__gethex+0x3d0>
 802089e:	0022      	movs	r2, r4
 80208a0:	2184      	movs	r1, #132	@ 0x84
 80208a2:	4b1d      	ldr	r3, [pc, #116]	@ (8020918 <__gethex+0x440>)
 80208a4:	481d      	ldr	r0, [pc, #116]	@ (802091c <__gethex+0x444>)
 80208a6:	e6c4      	b.n	8020632 <__gethex+0x15a>
 80208a8:	0029      	movs	r1, r5
 80208aa:	692a      	ldr	r2, [r5, #16]
 80208ac:	310c      	adds	r1, #12
 80208ae:	3202      	adds	r2, #2
 80208b0:	0092      	lsls	r2, r2, #2
 80208b2:	300c      	adds	r0, #12
 80208b4:	f7fe fecc 	bl	801f650 <memcpy>
 80208b8:	0029      	movs	r1, r5
 80208ba:	9803      	ldr	r0, [sp, #12]
 80208bc:	f000 fa10 	bl	8020ce0 <_Bfree>
 80208c0:	0025      	movs	r5, r4
 80208c2:	692b      	ldr	r3, [r5, #16]
 80208c4:	1c5a      	adds	r2, r3, #1
 80208c6:	612a      	str	r2, [r5, #16]
 80208c8:	2201      	movs	r2, #1
 80208ca:	3304      	adds	r3, #4
 80208cc:	009b      	lsls	r3, r3, #2
 80208ce:	18eb      	adds	r3, r5, r3
 80208d0:	605a      	str	r2, [r3, #4]
 80208d2:	e7bb      	b.n	802084c <__gethex+0x374>
 80208d4:	692a      	ldr	r2, [r5, #16]
 80208d6:	9902      	ldr	r1, [sp, #8]
 80208d8:	428a      	cmp	r2, r1
 80208da:	dd0b      	ble.n	80208f4 <__gethex+0x41c>
 80208dc:	2101      	movs	r1, #1
 80208de:	0028      	movs	r0, r5
 80208e0:	f7ff fd92 	bl	8020408 <rshift>
 80208e4:	9b01      	ldr	r3, [sp, #4]
 80208e6:	3701      	adds	r7, #1
 80208e8:	689b      	ldr	r3, [r3, #8]
 80208ea:	42bb      	cmp	r3, r7
 80208ec:	da00      	bge.n	80208f0 <__gethex+0x418>
 80208ee:	e6df      	b.n	80206b0 <__gethex+0x1d8>
 80208f0:	2601      	movs	r6, #1
 80208f2:	e7bf      	b.n	8020874 <__gethex+0x39c>
 80208f4:	221f      	movs	r2, #31
 80208f6:	9c00      	ldr	r4, [sp, #0]
 80208f8:	9900      	ldr	r1, [sp, #0]
 80208fa:	4014      	ands	r4, r2
 80208fc:	4211      	tst	r1, r2
 80208fe:	d0f7      	beq.n	80208f0 <__gethex+0x418>
 8020900:	9a04      	ldr	r2, [sp, #16]
 8020902:	189b      	adds	r3, r3, r2
 8020904:	3b04      	subs	r3, #4
 8020906:	6818      	ldr	r0, [r3, #0]
 8020908:	f000 fa9e 	bl	8020e48 <__hi0bits>
 802090c:	2320      	movs	r3, #32
 802090e:	1b1b      	subs	r3, r3, r4
 8020910:	4298      	cmp	r0, r3
 8020912:	dbe3      	blt.n	80208dc <__gethex+0x404>
 8020914:	e7ec      	b.n	80208f0 <__gethex+0x418>
 8020916:	46c0      	nop			@ (mov r8, r8)
 8020918:	08024a89 	.word	0x08024a89
 802091c:	08024a9a 	.word	0x08024a9a

08020920 <L_shift>:
 8020920:	2308      	movs	r3, #8
 8020922:	b570      	push	{r4, r5, r6, lr}
 8020924:	2520      	movs	r5, #32
 8020926:	1a9a      	subs	r2, r3, r2
 8020928:	0092      	lsls	r2, r2, #2
 802092a:	1aad      	subs	r5, r5, r2
 802092c:	6843      	ldr	r3, [r0, #4]
 802092e:	6804      	ldr	r4, [r0, #0]
 8020930:	001e      	movs	r6, r3
 8020932:	40ae      	lsls	r6, r5
 8020934:	40d3      	lsrs	r3, r2
 8020936:	4334      	orrs	r4, r6
 8020938:	6004      	str	r4, [r0, #0]
 802093a:	6043      	str	r3, [r0, #4]
 802093c:	3004      	adds	r0, #4
 802093e:	4288      	cmp	r0, r1
 8020940:	d3f4      	bcc.n	802092c <L_shift+0xc>
 8020942:	bd70      	pop	{r4, r5, r6, pc}

08020944 <__match>:
 8020944:	b530      	push	{r4, r5, lr}
 8020946:	6803      	ldr	r3, [r0, #0]
 8020948:	780c      	ldrb	r4, [r1, #0]
 802094a:	3301      	adds	r3, #1
 802094c:	2c00      	cmp	r4, #0
 802094e:	d102      	bne.n	8020956 <__match+0x12>
 8020950:	6003      	str	r3, [r0, #0]
 8020952:	2001      	movs	r0, #1
 8020954:	bd30      	pop	{r4, r5, pc}
 8020956:	781a      	ldrb	r2, [r3, #0]
 8020958:	0015      	movs	r5, r2
 802095a:	3d41      	subs	r5, #65	@ 0x41
 802095c:	2d19      	cmp	r5, #25
 802095e:	d800      	bhi.n	8020962 <__match+0x1e>
 8020960:	3220      	adds	r2, #32
 8020962:	3101      	adds	r1, #1
 8020964:	42a2      	cmp	r2, r4
 8020966:	d0ef      	beq.n	8020948 <__match+0x4>
 8020968:	2000      	movs	r0, #0
 802096a:	e7f3      	b.n	8020954 <__match+0x10>

0802096c <__hexnan>:
 802096c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802096e:	680b      	ldr	r3, [r1, #0]
 8020970:	b08b      	sub	sp, #44	@ 0x2c
 8020972:	9201      	str	r2, [sp, #4]
 8020974:	9901      	ldr	r1, [sp, #4]
 8020976:	115a      	asrs	r2, r3, #5
 8020978:	0092      	lsls	r2, r2, #2
 802097a:	188a      	adds	r2, r1, r2
 802097c:	9202      	str	r2, [sp, #8]
 802097e:	0019      	movs	r1, r3
 8020980:	221f      	movs	r2, #31
 8020982:	4011      	ands	r1, r2
 8020984:	9008      	str	r0, [sp, #32]
 8020986:	9106      	str	r1, [sp, #24]
 8020988:	4213      	tst	r3, r2
 802098a:	d002      	beq.n	8020992 <__hexnan+0x26>
 802098c:	9b02      	ldr	r3, [sp, #8]
 802098e:	3304      	adds	r3, #4
 8020990:	9302      	str	r3, [sp, #8]
 8020992:	9b02      	ldr	r3, [sp, #8]
 8020994:	2500      	movs	r5, #0
 8020996:	1f1f      	subs	r7, r3, #4
 8020998:	003e      	movs	r6, r7
 802099a:	003c      	movs	r4, r7
 802099c:	9b08      	ldr	r3, [sp, #32]
 802099e:	603d      	str	r5, [r7, #0]
 80209a0:	681b      	ldr	r3, [r3, #0]
 80209a2:	9507      	str	r5, [sp, #28]
 80209a4:	9305      	str	r3, [sp, #20]
 80209a6:	9503      	str	r5, [sp, #12]
 80209a8:	9b05      	ldr	r3, [sp, #20]
 80209aa:	3301      	adds	r3, #1
 80209ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80209ae:	9b05      	ldr	r3, [sp, #20]
 80209b0:	785b      	ldrb	r3, [r3, #1]
 80209b2:	9304      	str	r3, [sp, #16]
 80209b4:	2b00      	cmp	r3, #0
 80209b6:	d028      	beq.n	8020a0a <__hexnan+0x9e>
 80209b8:	9804      	ldr	r0, [sp, #16]
 80209ba:	f7ff fd78 	bl	80204ae <__hexdig_fun>
 80209be:	2800      	cmp	r0, #0
 80209c0:	d155      	bne.n	8020a6e <__hexnan+0x102>
 80209c2:	9b04      	ldr	r3, [sp, #16]
 80209c4:	2b20      	cmp	r3, #32
 80209c6:	d819      	bhi.n	80209fc <__hexnan+0x90>
 80209c8:	9b03      	ldr	r3, [sp, #12]
 80209ca:	9a07      	ldr	r2, [sp, #28]
 80209cc:	4293      	cmp	r3, r2
 80209ce:	dd12      	ble.n	80209f6 <__hexnan+0x8a>
 80209d0:	42b4      	cmp	r4, r6
 80209d2:	d206      	bcs.n	80209e2 <__hexnan+0x76>
 80209d4:	2d07      	cmp	r5, #7
 80209d6:	dc04      	bgt.n	80209e2 <__hexnan+0x76>
 80209d8:	002a      	movs	r2, r5
 80209da:	0031      	movs	r1, r6
 80209dc:	0020      	movs	r0, r4
 80209de:	f7ff ff9f 	bl	8020920 <L_shift>
 80209e2:	9b01      	ldr	r3, [sp, #4]
 80209e4:	2508      	movs	r5, #8
 80209e6:	429c      	cmp	r4, r3
 80209e8:	d905      	bls.n	80209f6 <__hexnan+0x8a>
 80209ea:	1f26      	subs	r6, r4, #4
 80209ec:	2500      	movs	r5, #0
 80209ee:	0034      	movs	r4, r6
 80209f0:	9b03      	ldr	r3, [sp, #12]
 80209f2:	6035      	str	r5, [r6, #0]
 80209f4:	9307      	str	r3, [sp, #28]
 80209f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80209f8:	9305      	str	r3, [sp, #20]
 80209fa:	e7d5      	b.n	80209a8 <__hexnan+0x3c>
 80209fc:	9b04      	ldr	r3, [sp, #16]
 80209fe:	2b29      	cmp	r3, #41	@ 0x29
 8020a00:	d15a      	bne.n	8020ab8 <__hexnan+0x14c>
 8020a02:	9b05      	ldr	r3, [sp, #20]
 8020a04:	9a08      	ldr	r2, [sp, #32]
 8020a06:	3302      	adds	r3, #2
 8020a08:	6013      	str	r3, [r2, #0]
 8020a0a:	9b03      	ldr	r3, [sp, #12]
 8020a0c:	2b00      	cmp	r3, #0
 8020a0e:	d053      	beq.n	8020ab8 <__hexnan+0x14c>
 8020a10:	42b4      	cmp	r4, r6
 8020a12:	d206      	bcs.n	8020a22 <__hexnan+0xb6>
 8020a14:	2d07      	cmp	r5, #7
 8020a16:	dc04      	bgt.n	8020a22 <__hexnan+0xb6>
 8020a18:	002a      	movs	r2, r5
 8020a1a:	0031      	movs	r1, r6
 8020a1c:	0020      	movs	r0, r4
 8020a1e:	f7ff ff7f 	bl	8020920 <L_shift>
 8020a22:	9b01      	ldr	r3, [sp, #4]
 8020a24:	429c      	cmp	r4, r3
 8020a26:	d936      	bls.n	8020a96 <__hexnan+0x12a>
 8020a28:	001a      	movs	r2, r3
 8020a2a:	0023      	movs	r3, r4
 8020a2c:	cb02      	ldmia	r3!, {r1}
 8020a2e:	c202      	stmia	r2!, {r1}
 8020a30:	429f      	cmp	r7, r3
 8020a32:	d2fb      	bcs.n	8020a2c <__hexnan+0xc0>
 8020a34:	9b02      	ldr	r3, [sp, #8]
 8020a36:	1c61      	adds	r1, r4, #1
 8020a38:	1eda      	subs	r2, r3, #3
 8020a3a:	2304      	movs	r3, #4
 8020a3c:	4291      	cmp	r1, r2
 8020a3e:	d805      	bhi.n	8020a4c <__hexnan+0xe0>
 8020a40:	9b02      	ldr	r3, [sp, #8]
 8020a42:	3b04      	subs	r3, #4
 8020a44:	1b1b      	subs	r3, r3, r4
 8020a46:	089b      	lsrs	r3, r3, #2
 8020a48:	3301      	adds	r3, #1
 8020a4a:	009b      	lsls	r3, r3, #2
 8020a4c:	9a01      	ldr	r2, [sp, #4]
 8020a4e:	18d3      	adds	r3, r2, r3
 8020a50:	2200      	movs	r2, #0
 8020a52:	c304      	stmia	r3!, {r2}
 8020a54:	429f      	cmp	r7, r3
 8020a56:	d2fc      	bcs.n	8020a52 <__hexnan+0xe6>
 8020a58:	683b      	ldr	r3, [r7, #0]
 8020a5a:	2b00      	cmp	r3, #0
 8020a5c:	d104      	bne.n	8020a68 <__hexnan+0xfc>
 8020a5e:	9b01      	ldr	r3, [sp, #4]
 8020a60:	429f      	cmp	r7, r3
 8020a62:	d127      	bne.n	8020ab4 <__hexnan+0x148>
 8020a64:	2301      	movs	r3, #1
 8020a66:	603b      	str	r3, [r7, #0]
 8020a68:	2005      	movs	r0, #5
 8020a6a:	b00b      	add	sp, #44	@ 0x2c
 8020a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020a6e:	9b03      	ldr	r3, [sp, #12]
 8020a70:	3501      	adds	r5, #1
 8020a72:	3301      	adds	r3, #1
 8020a74:	9303      	str	r3, [sp, #12]
 8020a76:	2d08      	cmp	r5, #8
 8020a78:	dd06      	ble.n	8020a88 <__hexnan+0x11c>
 8020a7a:	9b01      	ldr	r3, [sp, #4]
 8020a7c:	429c      	cmp	r4, r3
 8020a7e:	d9ba      	bls.n	80209f6 <__hexnan+0x8a>
 8020a80:	2300      	movs	r3, #0
 8020a82:	2501      	movs	r5, #1
 8020a84:	3c04      	subs	r4, #4
 8020a86:	6023      	str	r3, [r4, #0]
 8020a88:	220f      	movs	r2, #15
 8020a8a:	6823      	ldr	r3, [r4, #0]
 8020a8c:	4010      	ands	r0, r2
 8020a8e:	011b      	lsls	r3, r3, #4
 8020a90:	4303      	orrs	r3, r0
 8020a92:	6023      	str	r3, [r4, #0]
 8020a94:	e7af      	b.n	80209f6 <__hexnan+0x8a>
 8020a96:	9b06      	ldr	r3, [sp, #24]
 8020a98:	2b00      	cmp	r3, #0
 8020a9a:	d0dd      	beq.n	8020a58 <__hexnan+0xec>
 8020a9c:	2320      	movs	r3, #32
 8020a9e:	9a06      	ldr	r2, [sp, #24]
 8020aa0:	9902      	ldr	r1, [sp, #8]
 8020aa2:	1a9b      	subs	r3, r3, r2
 8020aa4:	2201      	movs	r2, #1
 8020aa6:	4252      	negs	r2, r2
 8020aa8:	40da      	lsrs	r2, r3
 8020aaa:	3904      	subs	r1, #4
 8020aac:	680b      	ldr	r3, [r1, #0]
 8020aae:	4013      	ands	r3, r2
 8020ab0:	600b      	str	r3, [r1, #0]
 8020ab2:	e7d1      	b.n	8020a58 <__hexnan+0xec>
 8020ab4:	3f04      	subs	r7, #4
 8020ab6:	e7cf      	b.n	8020a58 <__hexnan+0xec>
 8020ab8:	2004      	movs	r0, #4
 8020aba:	e7d6      	b.n	8020a6a <__hexnan+0xfe>

08020abc <malloc>:
 8020abc:	b510      	push	{r4, lr}
 8020abe:	4b03      	ldr	r3, [pc, #12]	@ (8020acc <malloc+0x10>)
 8020ac0:	0001      	movs	r1, r0
 8020ac2:	6818      	ldr	r0, [r3, #0]
 8020ac4:	f000 f826 	bl	8020b14 <_malloc_r>
 8020ac8:	bd10      	pop	{r4, pc}
 8020aca:	46c0      	nop			@ (mov r8, r8)
 8020acc:	200003c8 	.word	0x200003c8

08020ad0 <sbrk_aligned>:
 8020ad0:	b570      	push	{r4, r5, r6, lr}
 8020ad2:	4e0f      	ldr	r6, [pc, #60]	@ (8020b10 <sbrk_aligned+0x40>)
 8020ad4:	000d      	movs	r5, r1
 8020ad6:	6831      	ldr	r1, [r6, #0]
 8020ad8:	0004      	movs	r4, r0
 8020ada:	2900      	cmp	r1, #0
 8020adc:	d102      	bne.n	8020ae4 <sbrk_aligned+0x14>
 8020ade:	f001 f989 	bl	8021df4 <_sbrk_r>
 8020ae2:	6030      	str	r0, [r6, #0]
 8020ae4:	0029      	movs	r1, r5
 8020ae6:	0020      	movs	r0, r4
 8020ae8:	f001 f984 	bl	8021df4 <_sbrk_r>
 8020aec:	1c43      	adds	r3, r0, #1
 8020aee:	d103      	bne.n	8020af8 <sbrk_aligned+0x28>
 8020af0:	2501      	movs	r5, #1
 8020af2:	426d      	negs	r5, r5
 8020af4:	0028      	movs	r0, r5
 8020af6:	bd70      	pop	{r4, r5, r6, pc}
 8020af8:	2303      	movs	r3, #3
 8020afa:	1cc5      	adds	r5, r0, #3
 8020afc:	439d      	bics	r5, r3
 8020afe:	42a8      	cmp	r0, r5
 8020b00:	d0f8      	beq.n	8020af4 <sbrk_aligned+0x24>
 8020b02:	1a29      	subs	r1, r5, r0
 8020b04:	0020      	movs	r0, r4
 8020b06:	f001 f975 	bl	8021df4 <_sbrk_r>
 8020b0a:	3001      	adds	r0, #1
 8020b0c:	d1f2      	bne.n	8020af4 <sbrk_aligned+0x24>
 8020b0e:	e7ef      	b.n	8020af0 <sbrk_aligned+0x20>
 8020b10:	20003928 	.word	0x20003928

08020b14 <_malloc_r>:
 8020b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020b16:	2203      	movs	r2, #3
 8020b18:	1ccb      	adds	r3, r1, #3
 8020b1a:	4393      	bics	r3, r2
 8020b1c:	3308      	adds	r3, #8
 8020b1e:	0005      	movs	r5, r0
 8020b20:	001f      	movs	r7, r3
 8020b22:	2b0c      	cmp	r3, #12
 8020b24:	d234      	bcs.n	8020b90 <_malloc_r+0x7c>
 8020b26:	270c      	movs	r7, #12
 8020b28:	42b9      	cmp	r1, r7
 8020b2a:	d833      	bhi.n	8020b94 <_malloc_r+0x80>
 8020b2c:	0028      	movs	r0, r5
 8020b2e:	f000 f883 	bl	8020c38 <__malloc_lock>
 8020b32:	4e37      	ldr	r6, [pc, #220]	@ (8020c10 <_malloc_r+0xfc>)
 8020b34:	6833      	ldr	r3, [r6, #0]
 8020b36:	001c      	movs	r4, r3
 8020b38:	2c00      	cmp	r4, #0
 8020b3a:	d12f      	bne.n	8020b9c <_malloc_r+0x88>
 8020b3c:	0039      	movs	r1, r7
 8020b3e:	0028      	movs	r0, r5
 8020b40:	f7ff ffc6 	bl	8020ad0 <sbrk_aligned>
 8020b44:	0004      	movs	r4, r0
 8020b46:	1c43      	adds	r3, r0, #1
 8020b48:	d15f      	bne.n	8020c0a <_malloc_r+0xf6>
 8020b4a:	6834      	ldr	r4, [r6, #0]
 8020b4c:	9400      	str	r4, [sp, #0]
 8020b4e:	9b00      	ldr	r3, [sp, #0]
 8020b50:	2b00      	cmp	r3, #0
 8020b52:	d14a      	bne.n	8020bea <_malloc_r+0xd6>
 8020b54:	2c00      	cmp	r4, #0
 8020b56:	d052      	beq.n	8020bfe <_malloc_r+0xea>
 8020b58:	6823      	ldr	r3, [r4, #0]
 8020b5a:	0028      	movs	r0, r5
 8020b5c:	18e3      	adds	r3, r4, r3
 8020b5e:	9900      	ldr	r1, [sp, #0]
 8020b60:	9301      	str	r3, [sp, #4]
 8020b62:	f001 f947 	bl	8021df4 <_sbrk_r>
 8020b66:	9b01      	ldr	r3, [sp, #4]
 8020b68:	4283      	cmp	r3, r0
 8020b6a:	d148      	bne.n	8020bfe <_malloc_r+0xea>
 8020b6c:	6823      	ldr	r3, [r4, #0]
 8020b6e:	0028      	movs	r0, r5
 8020b70:	1aff      	subs	r7, r7, r3
 8020b72:	0039      	movs	r1, r7
 8020b74:	f7ff ffac 	bl	8020ad0 <sbrk_aligned>
 8020b78:	3001      	adds	r0, #1
 8020b7a:	d040      	beq.n	8020bfe <_malloc_r+0xea>
 8020b7c:	6823      	ldr	r3, [r4, #0]
 8020b7e:	19db      	adds	r3, r3, r7
 8020b80:	6023      	str	r3, [r4, #0]
 8020b82:	6833      	ldr	r3, [r6, #0]
 8020b84:	685a      	ldr	r2, [r3, #4]
 8020b86:	2a00      	cmp	r2, #0
 8020b88:	d133      	bne.n	8020bf2 <_malloc_r+0xde>
 8020b8a:	9b00      	ldr	r3, [sp, #0]
 8020b8c:	6033      	str	r3, [r6, #0]
 8020b8e:	e019      	b.n	8020bc4 <_malloc_r+0xb0>
 8020b90:	2b00      	cmp	r3, #0
 8020b92:	dac9      	bge.n	8020b28 <_malloc_r+0x14>
 8020b94:	230c      	movs	r3, #12
 8020b96:	602b      	str	r3, [r5, #0]
 8020b98:	2000      	movs	r0, #0
 8020b9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020b9c:	6821      	ldr	r1, [r4, #0]
 8020b9e:	1bc9      	subs	r1, r1, r7
 8020ba0:	d420      	bmi.n	8020be4 <_malloc_r+0xd0>
 8020ba2:	290b      	cmp	r1, #11
 8020ba4:	d90a      	bls.n	8020bbc <_malloc_r+0xa8>
 8020ba6:	19e2      	adds	r2, r4, r7
 8020ba8:	6027      	str	r7, [r4, #0]
 8020baa:	42a3      	cmp	r3, r4
 8020bac:	d104      	bne.n	8020bb8 <_malloc_r+0xa4>
 8020bae:	6032      	str	r2, [r6, #0]
 8020bb0:	6863      	ldr	r3, [r4, #4]
 8020bb2:	6011      	str	r1, [r2, #0]
 8020bb4:	6053      	str	r3, [r2, #4]
 8020bb6:	e005      	b.n	8020bc4 <_malloc_r+0xb0>
 8020bb8:	605a      	str	r2, [r3, #4]
 8020bba:	e7f9      	b.n	8020bb0 <_malloc_r+0x9c>
 8020bbc:	6862      	ldr	r2, [r4, #4]
 8020bbe:	42a3      	cmp	r3, r4
 8020bc0:	d10e      	bne.n	8020be0 <_malloc_r+0xcc>
 8020bc2:	6032      	str	r2, [r6, #0]
 8020bc4:	0028      	movs	r0, r5
 8020bc6:	f000 f83f 	bl	8020c48 <__malloc_unlock>
 8020bca:	0020      	movs	r0, r4
 8020bcc:	2207      	movs	r2, #7
 8020bce:	300b      	adds	r0, #11
 8020bd0:	1d23      	adds	r3, r4, #4
 8020bd2:	4390      	bics	r0, r2
 8020bd4:	1ac2      	subs	r2, r0, r3
 8020bd6:	4298      	cmp	r0, r3
 8020bd8:	d0df      	beq.n	8020b9a <_malloc_r+0x86>
 8020bda:	1a1b      	subs	r3, r3, r0
 8020bdc:	50a3      	str	r3, [r4, r2]
 8020bde:	e7dc      	b.n	8020b9a <_malloc_r+0x86>
 8020be0:	605a      	str	r2, [r3, #4]
 8020be2:	e7ef      	b.n	8020bc4 <_malloc_r+0xb0>
 8020be4:	0023      	movs	r3, r4
 8020be6:	6864      	ldr	r4, [r4, #4]
 8020be8:	e7a6      	b.n	8020b38 <_malloc_r+0x24>
 8020bea:	9c00      	ldr	r4, [sp, #0]
 8020bec:	6863      	ldr	r3, [r4, #4]
 8020bee:	9300      	str	r3, [sp, #0]
 8020bf0:	e7ad      	b.n	8020b4e <_malloc_r+0x3a>
 8020bf2:	001a      	movs	r2, r3
 8020bf4:	685b      	ldr	r3, [r3, #4]
 8020bf6:	42a3      	cmp	r3, r4
 8020bf8:	d1fb      	bne.n	8020bf2 <_malloc_r+0xde>
 8020bfa:	2300      	movs	r3, #0
 8020bfc:	e7da      	b.n	8020bb4 <_malloc_r+0xa0>
 8020bfe:	230c      	movs	r3, #12
 8020c00:	0028      	movs	r0, r5
 8020c02:	602b      	str	r3, [r5, #0]
 8020c04:	f000 f820 	bl	8020c48 <__malloc_unlock>
 8020c08:	e7c6      	b.n	8020b98 <_malloc_r+0x84>
 8020c0a:	6007      	str	r7, [r0, #0]
 8020c0c:	e7da      	b.n	8020bc4 <_malloc_r+0xb0>
 8020c0e:	46c0      	nop			@ (mov r8, r8)
 8020c10:	2000392c 	.word	0x2000392c

08020c14 <__ascii_mbtowc>:
 8020c14:	b082      	sub	sp, #8
 8020c16:	2900      	cmp	r1, #0
 8020c18:	d100      	bne.n	8020c1c <__ascii_mbtowc+0x8>
 8020c1a:	a901      	add	r1, sp, #4
 8020c1c:	1e10      	subs	r0, r2, #0
 8020c1e:	d006      	beq.n	8020c2e <__ascii_mbtowc+0x1a>
 8020c20:	2b00      	cmp	r3, #0
 8020c22:	d006      	beq.n	8020c32 <__ascii_mbtowc+0x1e>
 8020c24:	7813      	ldrb	r3, [r2, #0]
 8020c26:	600b      	str	r3, [r1, #0]
 8020c28:	7810      	ldrb	r0, [r2, #0]
 8020c2a:	1e43      	subs	r3, r0, #1
 8020c2c:	4198      	sbcs	r0, r3
 8020c2e:	b002      	add	sp, #8
 8020c30:	4770      	bx	lr
 8020c32:	2002      	movs	r0, #2
 8020c34:	4240      	negs	r0, r0
 8020c36:	e7fa      	b.n	8020c2e <__ascii_mbtowc+0x1a>

08020c38 <__malloc_lock>:
 8020c38:	b510      	push	{r4, lr}
 8020c3a:	4802      	ldr	r0, [pc, #8]	@ (8020c44 <__malloc_lock+0xc>)
 8020c3c:	f7fe fcfb 	bl	801f636 <__retarget_lock_acquire_recursive>
 8020c40:	bd10      	pop	{r4, pc}
 8020c42:	46c0      	nop			@ (mov r8, r8)
 8020c44:	20003924 	.word	0x20003924

08020c48 <__malloc_unlock>:
 8020c48:	b510      	push	{r4, lr}
 8020c4a:	4802      	ldr	r0, [pc, #8]	@ (8020c54 <__malloc_unlock+0xc>)
 8020c4c:	f7fe fcf4 	bl	801f638 <__retarget_lock_release_recursive>
 8020c50:	bd10      	pop	{r4, pc}
 8020c52:	46c0      	nop			@ (mov r8, r8)
 8020c54:	20003924 	.word	0x20003924

08020c58 <_Balloc>:
 8020c58:	b570      	push	{r4, r5, r6, lr}
 8020c5a:	69c5      	ldr	r5, [r0, #28]
 8020c5c:	0006      	movs	r6, r0
 8020c5e:	000c      	movs	r4, r1
 8020c60:	2d00      	cmp	r5, #0
 8020c62:	d10e      	bne.n	8020c82 <_Balloc+0x2a>
 8020c64:	2010      	movs	r0, #16
 8020c66:	f7ff ff29 	bl	8020abc <malloc>
 8020c6a:	1e02      	subs	r2, r0, #0
 8020c6c:	61f0      	str	r0, [r6, #28]
 8020c6e:	d104      	bne.n	8020c7a <_Balloc+0x22>
 8020c70:	216b      	movs	r1, #107	@ 0x6b
 8020c72:	4b19      	ldr	r3, [pc, #100]	@ (8020cd8 <_Balloc+0x80>)
 8020c74:	4819      	ldr	r0, [pc, #100]	@ (8020cdc <_Balloc+0x84>)
 8020c76:	f001 f8cf 	bl	8021e18 <__assert_func>
 8020c7a:	6045      	str	r5, [r0, #4]
 8020c7c:	6085      	str	r5, [r0, #8]
 8020c7e:	6005      	str	r5, [r0, #0]
 8020c80:	60c5      	str	r5, [r0, #12]
 8020c82:	69f5      	ldr	r5, [r6, #28]
 8020c84:	68eb      	ldr	r3, [r5, #12]
 8020c86:	2b00      	cmp	r3, #0
 8020c88:	d013      	beq.n	8020cb2 <_Balloc+0x5a>
 8020c8a:	69f3      	ldr	r3, [r6, #28]
 8020c8c:	00a2      	lsls	r2, r4, #2
 8020c8e:	68db      	ldr	r3, [r3, #12]
 8020c90:	189b      	adds	r3, r3, r2
 8020c92:	6818      	ldr	r0, [r3, #0]
 8020c94:	2800      	cmp	r0, #0
 8020c96:	d118      	bne.n	8020cca <_Balloc+0x72>
 8020c98:	2101      	movs	r1, #1
 8020c9a:	000d      	movs	r5, r1
 8020c9c:	40a5      	lsls	r5, r4
 8020c9e:	1d6a      	adds	r2, r5, #5
 8020ca0:	0030      	movs	r0, r6
 8020ca2:	0092      	lsls	r2, r2, #2
 8020ca4:	f001 f8d6 	bl	8021e54 <_calloc_r>
 8020ca8:	2800      	cmp	r0, #0
 8020caa:	d00c      	beq.n	8020cc6 <_Balloc+0x6e>
 8020cac:	6044      	str	r4, [r0, #4]
 8020cae:	6085      	str	r5, [r0, #8]
 8020cb0:	e00d      	b.n	8020cce <_Balloc+0x76>
 8020cb2:	2221      	movs	r2, #33	@ 0x21
 8020cb4:	2104      	movs	r1, #4
 8020cb6:	0030      	movs	r0, r6
 8020cb8:	f001 f8cc 	bl	8021e54 <_calloc_r>
 8020cbc:	69f3      	ldr	r3, [r6, #28]
 8020cbe:	60e8      	str	r0, [r5, #12]
 8020cc0:	68db      	ldr	r3, [r3, #12]
 8020cc2:	2b00      	cmp	r3, #0
 8020cc4:	d1e1      	bne.n	8020c8a <_Balloc+0x32>
 8020cc6:	2000      	movs	r0, #0
 8020cc8:	bd70      	pop	{r4, r5, r6, pc}
 8020cca:	6802      	ldr	r2, [r0, #0]
 8020ccc:	601a      	str	r2, [r3, #0]
 8020cce:	2300      	movs	r3, #0
 8020cd0:	6103      	str	r3, [r0, #16]
 8020cd2:	60c3      	str	r3, [r0, #12]
 8020cd4:	e7f8      	b.n	8020cc8 <_Balloc+0x70>
 8020cd6:	46c0      	nop			@ (mov r8, r8)
 8020cd8:	08024a1a 	.word	0x08024a1a
 8020cdc:	08024afa 	.word	0x08024afa

08020ce0 <_Bfree>:
 8020ce0:	b570      	push	{r4, r5, r6, lr}
 8020ce2:	69c6      	ldr	r6, [r0, #28]
 8020ce4:	0005      	movs	r5, r0
 8020ce6:	000c      	movs	r4, r1
 8020ce8:	2e00      	cmp	r6, #0
 8020cea:	d10e      	bne.n	8020d0a <_Bfree+0x2a>
 8020cec:	2010      	movs	r0, #16
 8020cee:	f7ff fee5 	bl	8020abc <malloc>
 8020cf2:	1e02      	subs	r2, r0, #0
 8020cf4:	61e8      	str	r0, [r5, #28]
 8020cf6:	d104      	bne.n	8020d02 <_Bfree+0x22>
 8020cf8:	218f      	movs	r1, #143	@ 0x8f
 8020cfa:	4b09      	ldr	r3, [pc, #36]	@ (8020d20 <_Bfree+0x40>)
 8020cfc:	4809      	ldr	r0, [pc, #36]	@ (8020d24 <_Bfree+0x44>)
 8020cfe:	f001 f88b 	bl	8021e18 <__assert_func>
 8020d02:	6046      	str	r6, [r0, #4]
 8020d04:	6086      	str	r6, [r0, #8]
 8020d06:	6006      	str	r6, [r0, #0]
 8020d08:	60c6      	str	r6, [r0, #12]
 8020d0a:	2c00      	cmp	r4, #0
 8020d0c:	d007      	beq.n	8020d1e <_Bfree+0x3e>
 8020d0e:	69eb      	ldr	r3, [r5, #28]
 8020d10:	6862      	ldr	r2, [r4, #4]
 8020d12:	68db      	ldr	r3, [r3, #12]
 8020d14:	0092      	lsls	r2, r2, #2
 8020d16:	189b      	adds	r3, r3, r2
 8020d18:	681a      	ldr	r2, [r3, #0]
 8020d1a:	6022      	str	r2, [r4, #0]
 8020d1c:	601c      	str	r4, [r3, #0]
 8020d1e:	bd70      	pop	{r4, r5, r6, pc}
 8020d20:	08024a1a 	.word	0x08024a1a
 8020d24:	08024afa 	.word	0x08024afa

08020d28 <__multadd>:
 8020d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020d2a:	000f      	movs	r7, r1
 8020d2c:	9001      	str	r0, [sp, #4]
 8020d2e:	000c      	movs	r4, r1
 8020d30:	001e      	movs	r6, r3
 8020d32:	2000      	movs	r0, #0
 8020d34:	690d      	ldr	r5, [r1, #16]
 8020d36:	3714      	adds	r7, #20
 8020d38:	683b      	ldr	r3, [r7, #0]
 8020d3a:	3001      	adds	r0, #1
 8020d3c:	b299      	uxth	r1, r3
 8020d3e:	4351      	muls	r1, r2
 8020d40:	0c1b      	lsrs	r3, r3, #16
 8020d42:	4353      	muls	r3, r2
 8020d44:	1989      	adds	r1, r1, r6
 8020d46:	0c0e      	lsrs	r6, r1, #16
 8020d48:	199b      	adds	r3, r3, r6
 8020d4a:	0c1e      	lsrs	r6, r3, #16
 8020d4c:	b289      	uxth	r1, r1
 8020d4e:	041b      	lsls	r3, r3, #16
 8020d50:	185b      	adds	r3, r3, r1
 8020d52:	c708      	stmia	r7!, {r3}
 8020d54:	4285      	cmp	r5, r0
 8020d56:	dcef      	bgt.n	8020d38 <__multadd+0x10>
 8020d58:	2e00      	cmp	r6, #0
 8020d5a:	d022      	beq.n	8020da2 <__multadd+0x7a>
 8020d5c:	68a3      	ldr	r3, [r4, #8]
 8020d5e:	42ab      	cmp	r3, r5
 8020d60:	dc19      	bgt.n	8020d96 <__multadd+0x6e>
 8020d62:	6861      	ldr	r1, [r4, #4]
 8020d64:	9801      	ldr	r0, [sp, #4]
 8020d66:	3101      	adds	r1, #1
 8020d68:	f7ff ff76 	bl	8020c58 <_Balloc>
 8020d6c:	1e07      	subs	r7, r0, #0
 8020d6e:	d105      	bne.n	8020d7c <__multadd+0x54>
 8020d70:	003a      	movs	r2, r7
 8020d72:	21ba      	movs	r1, #186	@ 0xba
 8020d74:	4b0c      	ldr	r3, [pc, #48]	@ (8020da8 <__multadd+0x80>)
 8020d76:	480d      	ldr	r0, [pc, #52]	@ (8020dac <__multadd+0x84>)
 8020d78:	f001 f84e 	bl	8021e18 <__assert_func>
 8020d7c:	0021      	movs	r1, r4
 8020d7e:	6922      	ldr	r2, [r4, #16]
 8020d80:	310c      	adds	r1, #12
 8020d82:	3202      	adds	r2, #2
 8020d84:	0092      	lsls	r2, r2, #2
 8020d86:	300c      	adds	r0, #12
 8020d88:	f7fe fc62 	bl	801f650 <memcpy>
 8020d8c:	0021      	movs	r1, r4
 8020d8e:	9801      	ldr	r0, [sp, #4]
 8020d90:	f7ff ffa6 	bl	8020ce0 <_Bfree>
 8020d94:	003c      	movs	r4, r7
 8020d96:	1d2b      	adds	r3, r5, #4
 8020d98:	009b      	lsls	r3, r3, #2
 8020d9a:	18e3      	adds	r3, r4, r3
 8020d9c:	3501      	adds	r5, #1
 8020d9e:	605e      	str	r6, [r3, #4]
 8020da0:	6125      	str	r5, [r4, #16]
 8020da2:	0020      	movs	r0, r4
 8020da4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020da6:	46c0      	nop			@ (mov r8, r8)
 8020da8:	08024a89 	.word	0x08024a89
 8020dac:	08024afa 	.word	0x08024afa

08020db0 <__s2b>:
 8020db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020db2:	0007      	movs	r7, r0
 8020db4:	0018      	movs	r0, r3
 8020db6:	000c      	movs	r4, r1
 8020db8:	3008      	adds	r0, #8
 8020dba:	2109      	movs	r1, #9
 8020dbc:	9301      	str	r3, [sp, #4]
 8020dbe:	0015      	movs	r5, r2
 8020dc0:	f7df fa7a 	bl	80002b8 <__divsi3>
 8020dc4:	2301      	movs	r3, #1
 8020dc6:	2100      	movs	r1, #0
 8020dc8:	4283      	cmp	r3, r0
 8020dca:	db0a      	blt.n	8020de2 <__s2b+0x32>
 8020dcc:	0038      	movs	r0, r7
 8020dce:	f7ff ff43 	bl	8020c58 <_Balloc>
 8020dd2:	1e01      	subs	r1, r0, #0
 8020dd4:	d108      	bne.n	8020de8 <__s2b+0x38>
 8020dd6:	000a      	movs	r2, r1
 8020dd8:	4b19      	ldr	r3, [pc, #100]	@ (8020e40 <__s2b+0x90>)
 8020dda:	481a      	ldr	r0, [pc, #104]	@ (8020e44 <__s2b+0x94>)
 8020ddc:	31d3      	adds	r1, #211	@ 0xd3
 8020dde:	f001 f81b 	bl	8021e18 <__assert_func>
 8020de2:	005b      	lsls	r3, r3, #1
 8020de4:	3101      	adds	r1, #1
 8020de6:	e7ef      	b.n	8020dc8 <__s2b+0x18>
 8020de8:	9b08      	ldr	r3, [sp, #32]
 8020dea:	6143      	str	r3, [r0, #20]
 8020dec:	2301      	movs	r3, #1
 8020dee:	6103      	str	r3, [r0, #16]
 8020df0:	2d09      	cmp	r5, #9
 8020df2:	dd18      	ble.n	8020e26 <__s2b+0x76>
 8020df4:	0023      	movs	r3, r4
 8020df6:	3309      	adds	r3, #9
 8020df8:	001e      	movs	r6, r3
 8020dfa:	9300      	str	r3, [sp, #0]
 8020dfc:	1964      	adds	r4, r4, r5
 8020dfe:	7833      	ldrb	r3, [r6, #0]
 8020e00:	220a      	movs	r2, #10
 8020e02:	0038      	movs	r0, r7
 8020e04:	3b30      	subs	r3, #48	@ 0x30
 8020e06:	f7ff ff8f 	bl	8020d28 <__multadd>
 8020e0a:	3601      	adds	r6, #1
 8020e0c:	0001      	movs	r1, r0
 8020e0e:	42a6      	cmp	r6, r4
 8020e10:	d1f5      	bne.n	8020dfe <__s2b+0x4e>
 8020e12:	002c      	movs	r4, r5
 8020e14:	9b00      	ldr	r3, [sp, #0]
 8020e16:	3c08      	subs	r4, #8
 8020e18:	191c      	adds	r4, r3, r4
 8020e1a:	002e      	movs	r6, r5
 8020e1c:	9b01      	ldr	r3, [sp, #4]
 8020e1e:	429e      	cmp	r6, r3
 8020e20:	db04      	blt.n	8020e2c <__s2b+0x7c>
 8020e22:	0008      	movs	r0, r1
 8020e24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020e26:	2509      	movs	r5, #9
 8020e28:	340a      	adds	r4, #10
 8020e2a:	e7f6      	b.n	8020e1a <__s2b+0x6a>
 8020e2c:	1b63      	subs	r3, r4, r5
 8020e2e:	5d9b      	ldrb	r3, [r3, r6]
 8020e30:	220a      	movs	r2, #10
 8020e32:	0038      	movs	r0, r7
 8020e34:	3b30      	subs	r3, #48	@ 0x30
 8020e36:	f7ff ff77 	bl	8020d28 <__multadd>
 8020e3a:	3601      	adds	r6, #1
 8020e3c:	0001      	movs	r1, r0
 8020e3e:	e7ed      	b.n	8020e1c <__s2b+0x6c>
 8020e40:	08024a89 	.word	0x08024a89
 8020e44:	08024afa 	.word	0x08024afa

08020e48 <__hi0bits>:
 8020e48:	2280      	movs	r2, #128	@ 0x80
 8020e4a:	0003      	movs	r3, r0
 8020e4c:	0252      	lsls	r2, r2, #9
 8020e4e:	2000      	movs	r0, #0
 8020e50:	4293      	cmp	r3, r2
 8020e52:	d201      	bcs.n	8020e58 <__hi0bits+0x10>
 8020e54:	041b      	lsls	r3, r3, #16
 8020e56:	3010      	adds	r0, #16
 8020e58:	2280      	movs	r2, #128	@ 0x80
 8020e5a:	0452      	lsls	r2, r2, #17
 8020e5c:	4293      	cmp	r3, r2
 8020e5e:	d201      	bcs.n	8020e64 <__hi0bits+0x1c>
 8020e60:	3008      	adds	r0, #8
 8020e62:	021b      	lsls	r3, r3, #8
 8020e64:	2280      	movs	r2, #128	@ 0x80
 8020e66:	0552      	lsls	r2, r2, #21
 8020e68:	4293      	cmp	r3, r2
 8020e6a:	d201      	bcs.n	8020e70 <__hi0bits+0x28>
 8020e6c:	3004      	adds	r0, #4
 8020e6e:	011b      	lsls	r3, r3, #4
 8020e70:	2280      	movs	r2, #128	@ 0x80
 8020e72:	05d2      	lsls	r2, r2, #23
 8020e74:	4293      	cmp	r3, r2
 8020e76:	d201      	bcs.n	8020e7c <__hi0bits+0x34>
 8020e78:	3002      	adds	r0, #2
 8020e7a:	009b      	lsls	r3, r3, #2
 8020e7c:	2b00      	cmp	r3, #0
 8020e7e:	db03      	blt.n	8020e88 <__hi0bits+0x40>
 8020e80:	3001      	adds	r0, #1
 8020e82:	4213      	tst	r3, r2
 8020e84:	d100      	bne.n	8020e88 <__hi0bits+0x40>
 8020e86:	2020      	movs	r0, #32
 8020e88:	4770      	bx	lr

08020e8a <__lo0bits>:
 8020e8a:	6803      	ldr	r3, [r0, #0]
 8020e8c:	0001      	movs	r1, r0
 8020e8e:	2207      	movs	r2, #7
 8020e90:	0018      	movs	r0, r3
 8020e92:	4010      	ands	r0, r2
 8020e94:	4213      	tst	r3, r2
 8020e96:	d00d      	beq.n	8020eb4 <__lo0bits+0x2a>
 8020e98:	3a06      	subs	r2, #6
 8020e9a:	2000      	movs	r0, #0
 8020e9c:	4213      	tst	r3, r2
 8020e9e:	d105      	bne.n	8020eac <__lo0bits+0x22>
 8020ea0:	3002      	adds	r0, #2
 8020ea2:	4203      	tst	r3, r0
 8020ea4:	d003      	beq.n	8020eae <__lo0bits+0x24>
 8020ea6:	40d3      	lsrs	r3, r2
 8020ea8:	0010      	movs	r0, r2
 8020eaa:	600b      	str	r3, [r1, #0]
 8020eac:	4770      	bx	lr
 8020eae:	089b      	lsrs	r3, r3, #2
 8020eb0:	600b      	str	r3, [r1, #0]
 8020eb2:	e7fb      	b.n	8020eac <__lo0bits+0x22>
 8020eb4:	b29a      	uxth	r2, r3
 8020eb6:	2a00      	cmp	r2, #0
 8020eb8:	d101      	bne.n	8020ebe <__lo0bits+0x34>
 8020eba:	2010      	movs	r0, #16
 8020ebc:	0c1b      	lsrs	r3, r3, #16
 8020ebe:	b2da      	uxtb	r2, r3
 8020ec0:	2a00      	cmp	r2, #0
 8020ec2:	d101      	bne.n	8020ec8 <__lo0bits+0x3e>
 8020ec4:	3008      	adds	r0, #8
 8020ec6:	0a1b      	lsrs	r3, r3, #8
 8020ec8:	071a      	lsls	r2, r3, #28
 8020eca:	d101      	bne.n	8020ed0 <__lo0bits+0x46>
 8020ecc:	3004      	adds	r0, #4
 8020ece:	091b      	lsrs	r3, r3, #4
 8020ed0:	079a      	lsls	r2, r3, #30
 8020ed2:	d101      	bne.n	8020ed8 <__lo0bits+0x4e>
 8020ed4:	3002      	adds	r0, #2
 8020ed6:	089b      	lsrs	r3, r3, #2
 8020ed8:	07da      	lsls	r2, r3, #31
 8020eda:	d4e9      	bmi.n	8020eb0 <__lo0bits+0x26>
 8020edc:	3001      	adds	r0, #1
 8020ede:	085b      	lsrs	r3, r3, #1
 8020ee0:	d1e6      	bne.n	8020eb0 <__lo0bits+0x26>
 8020ee2:	2020      	movs	r0, #32
 8020ee4:	e7e2      	b.n	8020eac <__lo0bits+0x22>
	...

08020ee8 <__i2b>:
 8020ee8:	b510      	push	{r4, lr}
 8020eea:	000c      	movs	r4, r1
 8020eec:	2101      	movs	r1, #1
 8020eee:	f7ff feb3 	bl	8020c58 <_Balloc>
 8020ef2:	2800      	cmp	r0, #0
 8020ef4:	d107      	bne.n	8020f06 <__i2b+0x1e>
 8020ef6:	2146      	movs	r1, #70	@ 0x46
 8020ef8:	4c05      	ldr	r4, [pc, #20]	@ (8020f10 <__i2b+0x28>)
 8020efa:	0002      	movs	r2, r0
 8020efc:	4b05      	ldr	r3, [pc, #20]	@ (8020f14 <__i2b+0x2c>)
 8020efe:	0020      	movs	r0, r4
 8020f00:	31ff      	adds	r1, #255	@ 0xff
 8020f02:	f000 ff89 	bl	8021e18 <__assert_func>
 8020f06:	2301      	movs	r3, #1
 8020f08:	6144      	str	r4, [r0, #20]
 8020f0a:	6103      	str	r3, [r0, #16]
 8020f0c:	bd10      	pop	{r4, pc}
 8020f0e:	46c0      	nop			@ (mov r8, r8)
 8020f10:	08024afa 	.word	0x08024afa
 8020f14:	08024a89 	.word	0x08024a89

08020f18 <__multiply>:
 8020f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f1a:	0014      	movs	r4, r2
 8020f1c:	690a      	ldr	r2, [r1, #16]
 8020f1e:	6923      	ldr	r3, [r4, #16]
 8020f20:	000d      	movs	r5, r1
 8020f22:	b08b      	sub	sp, #44	@ 0x2c
 8020f24:	429a      	cmp	r2, r3
 8020f26:	db02      	blt.n	8020f2e <__multiply+0x16>
 8020f28:	0023      	movs	r3, r4
 8020f2a:	000c      	movs	r4, r1
 8020f2c:	001d      	movs	r5, r3
 8020f2e:	6927      	ldr	r7, [r4, #16]
 8020f30:	692e      	ldr	r6, [r5, #16]
 8020f32:	6861      	ldr	r1, [r4, #4]
 8020f34:	19bb      	adds	r3, r7, r6
 8020f36:	9303      	str	r3, [sp, #12]
 8020f38:	68a3      	ldr	r3, [r4, #8]
 8020f3a:	19ba      	adds	r2, r7, r6
 8020f3c:	4293      	cmp	r3, r2
 8020f3e:	da00      	bge.n	8020f42 <__multiply+0x2a>
 8020f40:	3101      	adds	r1, #1
 8020f42:	f7ff fe89 	bl	8020c58 <_Balloc>
 8020f46:	9002      	str	r0, [sp, #8]
 8020f48:	2800      	cmp	r0, #0
 8020f4a:	d106      	bne.n	8020f5a <__multiply+0x42>
 8020f4c:	21b1      	movs	r1, #177	@ 0xb1
 8020f4e:	4b49      	ldr	r3, [pc, #292]	@ (8021074 <__multiply+0x15c>)
 8020f50:	4849      	ldr	r0, [pc, #292]	@ (8021078 <__multiply+0x160>)
 8020f52:	9a02      	ldr	r2, [sp, #8]
 8020f54:	0049      	lsls	r1, r1, #1
 8020f56:	f000 ff5f 	bl	8021e18 <__assert_func>
 8020f5a:	9b02      	ldr	r3, [sp, #8]
 8020f5c:	2200      	movs	r2, #0
 8020f5e:	3314      	adds	r3, #20
 8020f60:	469c      	mov	ip, r3
 8020f62:	19bb      	adds	r3, r7, r6
 8020f64:	009b      	lsls	r3, r3, #2
 8020f66:	4463      	add	r3, ip
 8020f68:	9304      	str	r3, [sp, #16]
 8020f6a:	4663      	mov	r3, ip
 8020f6c:	9904      	ldr	r1, [sp, #16]
 8020f6e:	428b      	cmp	r3, r1
 8020f70:	d32a      	bcc.n	8020fc8 <__multiply+0xb0>
 8020f72:	0023      	movs	r3, r4
 8020f74:	00bf      	lsls	r7, r7, #2
 8020f76:	3314      	adds	r3, #20
 8020f78:	3514      	adds	r5, #20
 8020f7a:	9308      	str	r3, [sp, #32]
 8020f7c:	00b6      	lsls	r6, r6, #2
 8020f7e:	19db      	adds	r3, r3, r7
 8020f80:	9305      	str	r3, [sp, #20]
 8020f82:	19ab      	adds	r3, r5, r6
 8020f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8020f86:	2304      	movs	r3, #4
 8020f88:	9306      	str	r3, [sp, #24]
 8020f8a:	0023      	movs	r3, r4
 8020f8c:	9a05      	ldr	r2, [sp, #20]
 8020f8e:	3315      	adds	r3, #21
 8020f90:	9501      	str	r5, [sp, #4]
 8020f92:	429a      	cmp	r2, r3
 8020f94:	d305      	bcc.n	8020fa2 <__multiply+0x8a>
 8020f96:	1b13      	subs	r3, r2, r4
 8020f98:	3b15      	subs	r3, #21
 8020f9a:	089b      	lsrs	r3, r3, #2
 8020f9c:	3301      	adds	r3, #1
 8020f9e:	009b      	lsls	r3, r3, #2
 8020fa0:	9306      	str	r3, [sp, #24]
 8020fa2:	9b01      	ldr	r3, [sp, #4]
 8020fa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020fa6:	4293      	cmp	r3, r2
 8020fa8:	d310      	bcc.n	8020fcc <__multiply+0xb4>
 8020faa:	9b03      	ldr	r3, [sp, #12]
 8020fac:	2b00      	cmp	r3, #0
 8020fae:	dd05      	ble.n	8020fbc <__multiply+0xa4>
 8020fb0:	9b04      	ldr	r3, [sp, #16]
 8020fb2:	3b04      	subs	r3, #4
 8020fb4:	9304      	str	r3, [sp, #16]
 8020fb6:	681b      	ldr	r3, [r3, #0]
 8020fb8:	2b00      	cmp	r3, #0
 8020fba:	d056      	beq.n	802106a <__multiply+0x152>
 8020fbc:	9b02      	ldr	r3, [sp, #8]
 8020fbe:	9a03      	ldr	r2, [sp, #12]
 8020fc0:	0018      	movs	r0, r3
 8020fc2:	611a      	str	r2, [r3, #16]
 8020fc4:	b00b      	add	sp, #44	@ 0x2c
 8020fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020fc8:	c304      	stmia	r3!, {r2}
 8020fca:	e7cf      	b.n	8020f6c <__multiply+0x54>
 8020fcc:	9b01      	ldr	r3, [sp, #4]
 8020fce:	6818      	ldr	r0, [r3, #0]
 8020fd0:	b280      	uxth	r0, r0
 8020fd2:	2800      	cmp	r0, #0
 8020fd4:	d01e      	beq.n	8021014 <__multiply+0xfc>
 8020fd6:	4667      	mov	r7, ip
 8020fd8:	2500      	movs	r5, #0
 8020fda:	9e08      	ldr	r6, [sp, #32]
 8020fdc:	ce02      	ldmia	r6!, {r1}
 8020fde:	683b      	ldr	r3, [r7, #0]
 8020fe0:	9307      	str	r3, [sp, #28]
 8020fe2:	b28b      	uxth	r3, r1
 8020fe4:	4343      	muls	r3, r0
 8020fe6:	001a      	movs	r2, r3
 8020fe8:	466b      	mov	r3, sp
 8020fea:	0c09      	lsrs	r1, r1, #16
 8020fec:	8b9b      	ldrh	r3, [r3, #28]
 8020fee:	4341      	muls	r1, r0
 8020ff0:	18d3      	adds	r3, r2, r3
 8020ff2:	9a07      	ldr	r2, [sp, #28]
 8020ff4:	195b      	adds	r3, r3, r5
 8020ff6:	0c12      	lsrs	r2, r2, #16
 8020ff8:	1889      	adds	r1, r1, r2
 8020ffa:	0c1a      	lsrs	r2, r3, #16
 8020ffc:	188a      	adds	r2, r1, r2
 8020ffe:	b29b      	uxth	r3, r3
 8021000:	0c15      	lsrs	r5, r2, #16
 8021002:	0412      	lsls	r2, r2, #16
 8021004:	431a      	orrs	r2, r3
 8021006:	9b05      	ldr	r3, [sp, #20]
 8021008:	c704      	stmia	r7!, {r2}
 802100a:	42b3      	cmp	r3, r6
 802100c:	d8e6      	bhi.n	8020fdc <__multiply+0xc4>
 802100e:	4663      	mov	r3, ip
 8021010:	9a06      	ldr	r2, [sp, #24]
 8021012:	509d      	str	r5, [r3, r2]
 8021014:	9b01      	ldr	r3, [sp, #4]
 8021016:	6818      	ldr	r0, [r3, #0]
 8021018:	0c00      	lsrs	r0, r0, #16
 802101a:	d020      	beq.n	802105e <__multiply+0x146>
 802101c:	4663      	mov	r3, ip
 802101e:	0025      	movs	r5, r4
 8021020:	4661      	mov	r1, ip
 8021022:	2700      	movs	r7, #0
 8021024:	681b      	ldr	r3, [r3, #0]
 8021026:	3514      	adds	r5, #20
 8021028:	682a      	ldr	r2, [r5, #0]
 802102a:	680e      	ldr	r6, [r1, #0]
 802102c:	b292      	uxth	r2, r2
 802102e:	4342      	muls	r2, r0
 8021030:	0c36      	lsrs	r6, r6, #16
 8021032:	1992      	adds	r2, r2, r6
 8021034:	19d2      	adds	r2, r2, r7
 8021036:	0416      	lsls	r6, r2, #16
 8021038:	b29b      	uxth	r3, r3
 802103a:	431e      	orrs	r6, r3
 802103c:	600e      	str	r6, [r1, #0]
 802103e:	cd40      	ldmia	r5!, {r6}
 8021040:	684b      	ldr	r3, [r1, #4]
 8021042:	0c36      	lsrs	r6, r6, #16
 8021044:	4346      	muls	r6, r0
 8021046:	b29b      	uxth	r3, r3
 8021048:	0c12      	lsrs	r2, r2, #16
 802104a:	18f3      	adds	r3, r6, r3
 802104c:	189b      	adds	r3, r3, r2
 802104e:	9a05      	ldr	r2, [sp, #20]
 8021050:	0c1f      	lsrs	r7, r3, #16
 8021052:	3104      	adds	r1, #4
 8021054:	42aa      	cmp	r2, r5
 8021056:	d8e7      	bhi.n	8021028 <__multiply+0x110>
 8021058:	4662      	mov	r2, ip
 802105a:	9906      	ldr	r1, [sp, #24]
 802105c:	5053      	str	r3, [r2, r1]
 802105e:	9b01      	ldr	r3, [sp, #4]
 8021060:	3304      	adds	r3, #4
 8021062:	9301      	str	r3, [sp, #4]
 8021064:	2304      	movs	r3, #4
 8021066:	449c      	add	ip, r3
 8021068:	e79b      	b.n	8020fa2 <__multiply+0x8a>
 802106a:	9b03      	ldr	r3, [sp, #12]
 802106c:	3b01      	subs	r3, #1
 802106e:	9303      	str	r3, [sp, #12]
 8021070:	e79b      	b.n	8020faa <__multiply+0x92>
 8021072:	46c0      	nop			@ (mov r8, r8)
 8021074:	08024a89 	.word	0x08024a89
 8021078:	08024afa 	.word	0x08024afa

0802107c <__pow5mult>:
 802107c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802107e:	2303      	movs	r3, #3
 8021080:	0015      	movs	r5, r2
 8021082:	0007      	movs	r7, r0
 8021084:	000e      	movs	r6, r1
 8021086:	401a      	ands	r2, r3
 8021088:	421d      	tst	r5, r3
 802108a:	d008      	beq.n	802109e <__pow5mult+0x22>
 802108c:	4925      	ldr	r1, [pc, #148]	@ (8021124 <__pow5mult+0xa8>)
 802108e:	3a01      	subs	r2, #1
 8021090:	0092      	lsls	r2, r2, #2
 8021092:	5852      	ldr	r2, [r2, r1]
 8021094:	2300      	movs	r3, #0
 8021096:	0031      	movs	r1, r6
 8021098:	f7ff fe46 	bl	8020d28 <__multadd>
 802109c:	0006      	movs	r6, r0
 802109e:	10ad      	asrs	r5, r5, #2
 80210a0:	d03d      	beq.n	802111e <__pow5mult+0xa2>
 80210a2:	69fc      	ldr	r4, [r7, #28]
 80210a4:	2c00      	cmp	r4, #0
 80210a6:	d10f      	bne.n	80210c8 <__pow5mult+0x4c>
 80210a8:	2010      	movs	r0, #16
 80210aa:	f7ff fd07 	bl	8020abc <malloc>
 80210ae:	1e02      	subs	r2, r0, #0
 80210b0:	61f8      	str	r0, [r7, #28]
 80210b2:	d105      	bne.n	80210c0 <__pow5mult+0x44>
 80210b4:	21b4      	movs	r1, #180	@ 0xb4
 80210b6:	4b1c      	ldr	r3, [pc, #112]	@ (8021128 <__pow5mult+0xac>)
 80210b8:	481c      	ldr	r0, [pc, #112]	@ (802112c <__pow5mult+0xb0>)
 80210ba:	31ff      	adds	r1, #255	@ 0xff
 80210bc:	f000 feac 	bl	8021e18 <__assert_func>
 80210c0:	6044      	str	r4, [r0, #4]
 80210c2:	6084      	str	r4, [r0, #8]
 80210c4:	6004      	str	r4, [r0, #0]
 80210c6:	60c4      	str	r4, [r0, #12]
 80210c8:	69fb      	ldr	r3, [r7, #28]
 80210ca:	689c      	ldr	r4, [r3, #8]
 80210cc:	9301      	str	r3, [sp, #4]
 80210ce:	2c00      	cmp	r4, #0
 80210d0:	d108      	bne.n	80210e4 <__pow5mult+0x68>
 80210d2:	0038      	movs	r0, r7
 80210d4:	4916      	ldr	r1, [pc, #88]	@ (8021130 <__pow5mult+0xb4>)
 80210d6:	f7ff ff07 	bl	8020ee8 <__i2b>
 80210da:	9b01      	ldr	r3, [sp, #4]
 80210dc:	0004      	movs	r4, r0
 80210de:	6098      	str	r0, [r3, #8]
 80210e0:	2300      	movs	r3, #0
 80210e2:	6003      	str	r3, [r0, #0]
 80210e4:	2301      	movs	r3, #1
 80210e6:	421d      	tst	r5, r3
 80210e8:	d00a      	beq.n	8021100 <__pow5mult+0x84>
 80210ea:	0031      	movs	r1, r6
 80210ec:	0022      	movs	r2, r4
 80210ee:	0038      	movs	r0, r7
 80210f0:	f7ff ff12 	bl	8020f18 <__multiply>
 80210f4:	0031      	movs	r1, r6
 80210f6:	9001      	str	r0, [sp, #4]
 80210f8:	0038      	movs	r0, r7
 80210fa:	f7ff fdf1 	bl	8020ce0 <_Bfree>
 80210fe:	9e01      	ldr	r6, [sp, #4]
 8021100:	106d      	asrs	r5, r5, #1
 8021102:	d00c      	beq.n	802111e <__pow5mult+0xa2>
 8021104:	6820      	ldr	r0, [r4, #0]
 8021106:	2800      	cmp	r0, #0
 8021108:	d107      	bne.n	802111a <__pow5mult+0x9e>
 802110a:	0022      	movs	r2, r4
 802110c:	0021      	movs	r1, r4
 802110e:	0038      	movs	r0, r7
 8021110:	f7ff ff02 	bl	8020f18 <__multiply>
 8021114:	2300      	movs	r3, #0
 8021116:	6020      	str	r0, [r4, #0]
 8021118:	6003      	str	r3, [r0, #0]
 802111a:	0004      	movs	r4, r0
 802111c:	e7e2      	b.n	80210e4 <__pow5mult+0x68>
 802111e:	0030      	movs	r0, r6
 8021120:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021122:	46c0      	nop			@ (mov r8, r8)
 8021124:	08024b54 	.word	0x08024b54
 8021128:	08024a1a 	.word	0x08024a1a
 802112c:	08024afa 	.word	0x08024afa
 8021130:	00000271 	.word	0x00000271

08021134 <__lshift>:
 8021134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021136:	000c      	movs	r4, r1
 8021138:	0016      	movs	r6, r2
 802113a:	6923      	ldr	r3, [r4, #16]
 802113c:	1157      	asrs	r7, r2, #5
 802113e:	b085      	sub	sp, #20
 8021140:	18fb      	adds	r3, r7, r3
 8021142:	9301      	str	r3, [sp, #4]
 8021144:	3301      	adds	r3, #1
 8021146:	9300      	str	r3, [sp, #0]
 8021148:	6849      	ldr	r1, [r1, #4]
 802114a:	68a3      	ldr	r3, [r4, #8]
 802114c:	9002      	str	r0, [sp, #8]
 802114e:	9a00      	ldr	r2, [sp, #0]
 8021150:	4293      	cmp	r3, r2
 8021152:	db10      	blt.n	8021176 <__lshift+0x42>
 8021154:	9802      	ldr	r0, [sp, #8]
 8021156:	f7ff fd7f 	bl	8020c58 <_Balloc>
 802115a:	2300      	movs	r3, #0
 802115c:	0001      	movs	r1, r0
 802115e:	0005      	movs	r5, r0
 8021160:	001a      	movs	r2, r3
 8021162:	3114      	adds	r1, #20
 8021164:	4298      	cmp	r0, r3
 8021166:	d10c      	bne.n	8021182 <__lshift+0x4e>
 8021168:	21ef      	movs	r1, #239	@ 0xef
 802116a:	002a      	movs	r2, r5
 802116c:	4b25      	ldr	r3, [pc, #148]	@ (8021204 <__lshift+0xd0>)
 802116e:	4826      	ldr	r0, [pc, #152]	@ (8021208 <__lshift+0xd4>)
 8021170:	0049      	lsls	r1, r1, #1
 8021172:	f000 fe51 	bl	8021e18 <__assert_func>
 8021176:	3101      	adds	r1, #1
 8021178:	005b      	lsls	r3, r3, #1
 802117a:	e7e8      	b.n	802114e <__lshift+0x1a>
 802117c:	0098      	lsls	r0, r3, #2
 802117e:	500a      	str	r2, [r1, r0]
 8021180:	3301      	adds	r3, #1
 8021182:	42bb      	cmp	r3, r7
 8021184:	dbfa      	blt.n	802117c <__lshift+0x48>
 8021186:	43fb      	mvns	r3, r7
 8021188:	17db      	asrs	r3, r3, #31
 802118a:	401f      	ands	r7, r3
 802118c:	00bf      	lsls	r7, r7, #2
 802118e:	0023      	movs	r3, r4
 8021190:	201f      	movs	r0, #31
 8021192:	19c9      	adds	r1, r1, r7
 8021194:	0037      	movs	r7, r6
 8021196:	6922      	ldr	r2, [r4, #16]
 8021198:	3314      	adds	r3, #20
 802119a:	0092      	lsls	r2, r2, #2
 802119c:	189a      	adds	r2, r3, r2
 802119e:	4007      	ands	r7, r0
 80211a0:	4206      	tst	r6, r0
 80211a2:	d029      	beq.n	80211f8 <__lshift+0xc4>
 80211a4:	3001      	adds	r0, #1
 80211a6:	1bc0      	subs	r0, r0, r7
 80211a8:	9003      	str	r0, [sp, #12]
 80211aa:	468c      	mov	ip, r1
 80211ac:	2000      	movs	r0, #0
 80211ae:	681e      	ldr	r6, [r3, #0]
 80211b0:	40be      	lsls	r6, r7
 80211b2:	4306      	orrs	r6, r0
 80211b4:	4660      	mov	r0, ip
 80211b6:	c040      	stmia	r0!, {r6}
 80211b8:	4684      	mov	ip, r0
 80211ba:	9e03      	ldr	r6, [sp, #12]
 80211bc:	cb01      	ldmia	r3!, {r0}
 80211be:	40f0      	lsrs	r0, r6
 80211c0:	429a      	cmp	r2, r3
 80211c2:	d8f4      	bhi.n	80211ae <__lshift+0x7a>
 80211c4:	0026      	movs	r6, r4
 80211c6:	3615      	adds	r6, #21
 80211c8:	2304      	movs	r3, #4
 80211ca:	42b2      	cmp	r2, r6
 80211cc:	d304      	bcc.n	80211d8 <__lshift+0xa4>
 80211ce:	1b13      	subs	r3, r2, r4
 80211d0:	3b15      	subs	r3, #21
 80211d2:	089b      	lsrs	r3, r3, #2
 80211d4:	3301      	adds	r3, #1
 80211d6:	009b      	lsls	r3, r3, #2
 80211d8:	50c8      	str	r0, [r1, r3]
 80211da:	2800      	cmp	r0, #0
 80211dc:	d002      	beq.n	80211e4 <__lshift+0xb0>
 80211de:	9b01      	ldr	r3, [sp, #4]
 80211e0:	3302      	adds	r3, #2
 80211e2:	9300      	str	r3, [sp, #0]
 80211e4:	9b00      	ldr	r3, [sp, #0]
 80211e6:	9802      	ldr	r0, [sp, #8]
 80211e8:	3b01      	subs	r3, #1
 80211ea:	0021      	movs	r1, r4
 80211ec:	612b      	str	r3, [r5, #16]
 80211ee:	f7ff fd77 	bl	8020ce0 <_Bfree>
 80211f2:	0028      	movs	r0, r5
 80211f4:	b005      	add	sp, #20
 80211f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80211f8:	cb01      	ldmia	r3!, {r0}
 80211fa:	c101      	stmia	r1!, {r0}
 80211fc:	429a      	cmp	r2, r3
 80211fe:	d8fb      	bhi.n	80211f8 <__lshift+0xc4>
 8021200:	e7f0      	b.n	80211e4 <__lshift+0xb0>
 8021202:	46c0      	nop			@ (mov r8, r8)
 8021204:	08024a89 	.word	0x08024a89
 8021208:	08024afa 	.word	0x08024afa

0802120c <__mcmp>:
 802120c:	b530      	push	{r4, r5, lr}
 802120e:	690b      	ldr	r3, [r1, #16]
 8021210:	6904      	ldr	r4, [r0, #16]
 8021212:	0002      	movs	r2, r0
 8021214:	1ae0      	subs	r0, r4, r3
 8021216:	429c      	cmp	r4, r3
 8021218:	d10f      	bne.n	802123a <__mcmp+0x2e>
 802121a:	3214      	adds	r2, #20
 802121c:	009b      	lsls	r3, r3, #2
 802121e:	3114      	adds	r1, #20
 8021220:	0014      	movs	r4, r2
 8021222:	18c9      	adds	r1, r1, r3
 8021224:	18d2      	adds	r2, r2, r3
 8021226:	3a04      	subs	r2, #4
 8021228:	3904      	subs	r1, #4
 802122a:	6815      	ldr	r5, [r2, #0]
 802122c:	680b      	ldr	r3, [r1, #0]
 802122e:	429d      	cmp	r5, r3
 8021230:	d004      	beq.n	802123c <__mcmp+0x30>
 8021232:	2001      	movs	r0, #1
 8021234:	429d      	cmp	r5, r3
 8021236:	d200      	bcs.n	802123a <__mcmp+0x2e>
 8021238:	3802      	subs	r0, #2
 802123a:	bd30      	pop	{r4, r5, pc}
 802123c:	4294      	cmp	r4, r2
 802123e:	d3f2      	bcc.n	8021226 <__mcmp+0x1a>
 8021240:	e7fb      	b.n	802123a <__mcmp+0x2e>
	...

08021244 <__mdiff>:
 8021244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021246:	000c      	movs	r4, r1
 8021248:	b087      	sub	sp, #28
 802124a:	9000      	str	r0, [sp, #0]
 802124c:	0011      	movs	r1, r2
 802124e:	0020      	movs	r0, r4
 8021250:	0017      	movs	r7, r2
 8021252:	f7ff ffdb 	bl	802120c <__mcmp>
 8021256:	1e05      	subs	r5, r0, #0
 8021258:	d110      	bne.n	802127c <__mdiff+0x38>
 802125a:	0001      	movs	r1, r0
 802125c:	9800      	ldr	r0, [sp, #0]
 802125e:	f7ff fcfb 	bl	8020c58 <_Balloc>
 8021262:	1e02      	subs	r2, r0, #0
 8021264:	d104      	bne.n	8021270 <__mdiff+0x2c>
 8021266:	4b40      	ldr	r3, [pc, #256]	@ (8021368 <__mdiff+0x124>)
 8021268:	4840      	ldr	r0, [pc, #256]	@ (802136c <__mdiff+0x128>)
 802126a:	4941      	ldr	r1, [pc, #260]	@ (8021370 <__mdiff+0x12c>)
 802126c:	f000 fdd4 	bl	8021e18 <__assert_func>
 8021270:	2301      	movs	r3, #1
 8021272:	6145      	str	r5, [r0, #20]
 8021274:	6103      	str	r3, [r0, #16]
 8021276:	0010      	movs	r0, r2
 8021278:	b007      	add	sp, #28
 802127a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802127c:	2600      	movs	r6, #0
 802127e:	42b0      	cmp	r0, r6
 8021280:	da03      	bge.n	802128a <__mdiff+0x46>
 8021282:	0023      	movs	r3, r4
 8021284:	003c      	movs	r4, r7
 8021286:	001f      	movs	r7, r3
 8021288:	3601      	adds	r6, #1
 802128a:	6861      	ldr	r1, [r4, #4]
 802128c:	9800      	ldr	r0, [sp, #0]
 802128e:	f7ff fce3 	bl	8020c58 <_Balloc>
 8021292:	1e02      	subs	r2, r0, #0
 8021294:	d103      	bne.n	802129e <__mdiff+0x5a>
 8021296:	4b34      	ldr	r3, [pc, #208]	@ (8021368 <__mdiff+0x124>)
 8021298:	4834      	ldr	r0, [pc, #208]	@ (802136c <__mdiff+0x128>)
 802129a:	4936      	ldr	r1, [pc, #216]	@ (8021374 <__mdiff+0x130>)
 802129c:	e7e6      	b.n	802126c <__mdiff+0x28>
 802129e:	6923      	ldr	r3, [r4, #16]
 80212a0:	3414      	adds	r4, #20
 80212a2:	9300      	str	r3, [sp, #0]
 80212a4:	009b      	lsls	r3, r3, #2
 80212a6:	18e3      	adds	r3, r4, r3
 80212a8:	0021      	movs	r1, r4
 80212aa:	9401      	str	r4, [sp, #4]
 80212ac:	003c      	movs	r4, r7
 80212ae:	9302      	str	r3, [sp, #8]
 80212b0:	693b      	ldr	r3, [r7, #16]
 80212b2:	3414      	adds	r4, #20
 80212b4:	009b      	lsls	r3, r3, #2
 80212b6:	18e3      	adds	r3, r4, r3
 80212b8:	9303      	str	r3, [sp, #12]
 80212ba:	0003      	movs	r3, r0
 80212bc:	60c6      	str	r6, [r0, #12]
 80212be:	468c      	mov	ip, r1
 80212c0:	2000      	movs	r0, #0
 80212c2:	3314      	adds	r3, #20
 80212c4:	9304      	str	r3, [sp, #16]
 80212c6:	9305      	str	r3, [sp, #20]
 80212c8:	4663      	mov	r3, ip
 80212ca:	cb20      	ldmia	r3!, {r5}
 80212cc:	b2a9      	uxth	r1, r5
 80212ce:	000e      	movs	r6, r1
 80212d0:	469c      	mov	ip, r3
 80212d2:	cc08      	ldmia	r4!, {r3}
 80212d4:	0c2d      	lsrs	r5, r5, #16
 80212d6:	b299      	uxth	r1, r3
 80212d8:	1a71      	subs	r1, r6, r1
 80212da:	1809      	adds	r1, r1, r0
 80212dc:	0c1b      	lsrs	r3, r3, #16
 80212de:	1408      	asrs	r0, r1, #16
 80212e0:	1aeb      	subs	r3, r5, r3
 80212e2:	181b      	adds	r3, r3, r0
 80212e4:	1418      	asrs	r0, r3, #16
 80212e6:	b289      	uxth	r1, r1
 80212e8:	041b      	lsls	r3, r3, #16
 80212ea:	4319      	orrs	r1, r3
 80212ec:	9b05      	ldr	r3, [sp, #20]
 80212ee:	c302      	stmia	r3!, {r1}
 80212f0:	9305      	str	r3, [sp, #20]
 80212f2:	9b03      	ldr	r3, [sp, #12]
 80212f4:	42a3      	cmp	r3, r4
 80212f6:	d8e7      	bhi.n	80212c8 <__mdiff+0x84>
 80212f8:	0039      	movs	r1, r7
 80212fa:	9c03      	ldr	r4, [sp, #12]
 80212fc:	3115      	adds	r1, #21
 80212fe:	2304      	movs	r3, #4
 8021300:	428c      	cmp	r4, r1
 8021302:	d304      	bcc.n	802130e <__mdiff+0xca>
 8021304:	1be3      	subs	r3, r4, r7
 8021306:	3b15      	subs	r3, #21
 8021308:	089b      	lsrs	r3, r3, #2
 802130a:	3301      	adds	r3, #1
 802130c:	009b      	lsls	r3, r3, #2
 802130e:	9901      	ldr	r1, [sp, #4]
 8021310:	18cd      	adds	r5, r1, r3
 8021312:	9904      	ldr	r1, [sp, #16]
 8021314:	002e      	movs	r6, r5
 8021316:	18cb      	adds	r3, r1, r3
 8021318:	001f      	movs	r7, r3
 802131a:	9902      	ldr	r1, [sp, #8]
 802131c:	428e      	cmp	r6, r1
 802131e:	d311      	bcc.n	8021344 <__mdiff+0x100>
 8021320:	9c02      	ldr	r4, [sp, #8]
 8021322:	1ee9      	subs	r1, r5, #3
 8021324:	2000      	movs	r0, #0
 8021326:	428c      	cmp	r4, r1
 8021328:	d304      	bcc.n	8021334 <__mdiff+0xf0>
 802132a:	0021      	movs	r1, r4
 802132c:	3103      	adds	r1, #3
 802132e:	1b49      	subs	r1, r1, r5
 8021330:	0889      	lsrs	r1, r1, #2
 8021332:	0088      	lsls	r0, r1, #2
 8021334:	181b      	adds	r3, r3, r0
 8021336:	3b04      	subs	r3, #4
 8021338:	6819      	ldr	r1, [r3, #0]
 802133a:	2900      	cmp	r1, #0
 802133c:	d010      	beq.n	8021360 <__mdiff+0x11c>
 802133e:	9b00      	ldr	r3, [sp, #0]
 8021340:	6113      	str	r3, [r2, #16]
 8021342:	e798      	b.n	8021276 <__mdiff+0x32>
 8021344:	4684      	mov	ip, r0
 8021346:	ce02      	ldmia	r6!, {r1}
 8021348:	b288      	uxth	r0, r1
 802134a:	4460      	add	r0, ip
 802134c:	1400      	asrs	r0, r0, #16
 802134e:	0c0c      	lsrs	r4, r1, #16
 8021350:	1904      	adds	r4, r0, r4
 8021352:	4461      	add	r1, ip
 8021354:	1420      	asrs	r0, r4, #16
 8021356:	b289      	uxth	r1, r1
 8021358:	0424      	lsls	r4, r4, #16
 802135a:	4321      	orrs	r1, r4
 802135c:	c702      	stmia	r7!, {r1}
 802135e:	e7dc      	b.n	802131a <__mdiff+0xd6>
 8021360:	9900      	ldr	r1, [sp, #0]
 8021362:	3901      	subs	r1, #1
 8021364:	9100      	str	r1, [sp, #0]
 8021366:	e7e6      	b.n	8021336 <__mdiff+0xf2>
 8021368:	08024a89 	.word	0x08024a89
 802136c:	08024afa 	.word	0x08024afa
 8021370:	00000237 	.word	0x00000237
 8021374:	00000245 	.word	0x00000245

08021378 <__ulp>:
 8021378:	b510      	push	{r4, lr}
 802137a:	2400      	movs	r4, #0
 802137c:	4b0c      	ldr	r3, [pc, #48]	@ (80213b0 <__ulp+0x38>)
 802137e:	4a0d      	ldr	r2, [pc, #52]	@ (80213b4 <__ulp+0x3c>)
 8021380:	400b      	ands	r3, r1
 8021382:	189b      	adds	r3, r3, r2
 8021384:	42a3      	cmp	r3, r4
 8021386:	dc06      	bgt.n	8021396 <__ulp+0x1e>
 8021388:	425b      	negs	r3, r3
 802138a:	151a      	asrs	r2, r3, #20
 802138c:	2a13      	cmp	r2, #19
 802138e:	dc05      	bgt.n	802139c <__ulp+0x24>
 8021390:	2380      	movs	r3, #128	@ 0x80
 8021392:	031b      	lsls	r3, r3, #12
 8021394:	4113      	asrs	r3, r2
 8021396:	0019      	movs	r1, r3
 8021398:	0020      	movs	r0, r4
 802139a:	bd10      	pop	{r4, pc}
 802139c:	3a14      	subs	r2, #20
 802139e:	2401      	movs	r4, #1
 80213a0:	2a1e      	cmp	r2, #30
 80213a2:	dc02      	bgt.n	80213aa <__ulp+0x32>
 80213a4:	2480      	movs	r4, #128	@ 0x80
 80213a6:	0624      	lsls	r4, r4, #24
 80213a8:	40d4      	lsrs	r4, r2
 80213aa:	2300      	movs	r3, #0
 80213ac:	e7f3      	b.n	8021396 <__ulp+0x1e>
 80213ae:	46c0      	nop			@ (mov r8, r8)
 80213b0:	7ff00000 	.word	0x7ff00000
 80213b4:	fcc00000 	.word	0xfcc00000

080213b8 <__b2d>:
 80213b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80213ba:	0006      	movs	r6, r0
 80213bc:	6903      	ldr	r3, [r0, #16]
 80213be:	3614      	adds	r6, #20
 80213c0:	009b      	lsls	r3, r3, #2
 80213c2:	18f3      	adds	r3, r6, r3
 80213c4:	1f1d      	subs	r5, r3, #4
 80213c6:	682c      	ldr	r4, [r5, #0]
 80213c8:	000f      	movs	r7, r1
 80213ca:	0020      	movs	r0, r4
 80213cc:	9301      	str	r3, [sp, #4]
 80213ce:	f7ff fd3b 	bl	8020e48 <__hi0bits>
 80213d2:	2220      	movs	r2, #32
 80213d4:	1a12      	subs	r2, r2, r0
 80213d6:	603a      	str	r2, [r7, #0]
 80213d8:	0003      	movs	r3, r0
 80213da:	4a1c      	ldr	r2, [pc, #112]	@ (802144c <__b2d+0x94>)
 80213dc:	280a      	cmp	r0, #10
 80213de:	dc15      	bgt.n	802140c <__b2d+0x54>
 80213e0:	210b      	movs	r1, #11
 80213e2:	0027      	movs	r7, r4
 80213e4:	1a09      	subs	r1, r1, r0
 80213e6:	40cf      	lsrs	r7, r1
 80213e8:	433a      	orrs	r2, r7
 80213ea:	468c      	mov	ip, r1
 80213ec:	0011      	movs	r1, r2
 80213ee:	2200      	movs	r2, #0
 80213f0:	42ae      	cmp	r6, r5
 80213f2:	d202      	bcs.n	80213fa <__b2d+0x42>
 80213f4:	9a01      	ldr	r2, [sp, #4]
 80213f6:	3a08      	subs	r2, #8
 80213f8:	6812      	ldr	r2, [r2, #0]
 80213fa:	3315      	adds	r3, #21
 80213fc:	409c      	lsls	r4, r3
 80213fe:	4663      	mov	r3, ip
 8021400:	0027      	movs	r7, r4
 8021402:	40da      	lsrs	r2, r3
 8021404:	4317      	orrs	r7, r2
 8021406:	0038      	movs	r0, r7
 8021408:	b003      	add	sp, #12
 802140a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802140c:	2700      	movs	r7, #0
 802140e:	42ae      	cmp	r6, r5
 8021410:	d202      	bcs.n	8021418 <__b2d+0x60>
 8021412:	9d01      	ldr	r5, [sp, #4]
 8021414:	3d08      	subs	r5, #8
 8021416:	682f      	ldr	r7, [r5, #0]
 8021418:	210b      	movs	r1, #11
 802141a:	4249      	negs	r1, r1
 802141c:	468c      	mov	ip, r1
 802141e:	449c      	add	ip, r3
 8021420:	2b0b      	cmp	r3, #11
 8021422:	d010      	beq.n	8021446 <__b2d+0x8e>
 8021424:	4661      	mov	r1, ip
 8021426:	2320      	movs	r3, #32
 8021428:	408c      	lsls	r4, r1
 802142a:	1a5b      	subs	r3, r3, r1
 802142c:	0039      	movs	r1, r7
 802142e:	40d9      	lsrs	r1, r3
 8021430:	430c      	orrs	r4, r1
 8021432:	4322      	orrs	r2, r4
 8021434:	0011      	movs	r1, r2
 8021436:	2200      	movs	r2, #0
 8021438:	42b5      	cmp	r5, r6
 802143a:	d901      	bls.n	8021440 <__b2d+0x88>
 802143c:	3d04      	subs	r5, #4
 802143e:	682a      	ldr	r2, [r5, #0]
 8021440:	4664      	mov	r4, ip
 8021442:	40a7      	lsls	r7, r4
 8021444:	e7dd      	b.n	8021402 <__b2d+0x4a>
 8021446:	4322      	orrs	r2, r4
 8021448:	0011      	movs	r1, r2
 802144a:	e7dc      	b.n	8021406 <__b2d+0x4e>
 802144c:	3ff00000 	.word	0x3ff00000

08021450 <__d2b>:
 8021450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021452:	2101      	movs	r1, #1
 8021454:	0016      	movs	r6, r2
 8021456:	001f      	movs	r7, r3
 8021458:	f7ff fbfe 	bl	8020c58 <_Balloc>
 802145c:	1e04      	subs	r4, r0, #0
 802145e:	d105      	bne.n	802146c <__d2b+0x1c>
 8021460:	0022      	movs	r2, r4
 8021462:	4b25      	ldr	r3, [pc, #148]	@ (80214f8 <__d2b+0xa8>)
 8021464:	4825      	ldr	r0, [pc, #148]	@ (80214fc <__d2b+0xac>)
 8021466:	4926      	ldr	r1, [pc, #152]	@ (8021500 <__d2b+0xb0>)
 8021468:	f000 fcd6 	bl	8021e18 <__assert_func>
 802146c:	033b      	lsls	r3, r7, #12
 802146e:	007d      	lsls	r5, r7, #1
 8021470:	0b1b      	lsrs	r3, r3, #12
 8021472:	0d6d      	lsrs	r5, r5, #21
 8021474:	d002      	beq.n	802147c <__d2b+0x2c>
 8021476:	2280      	movs	r2, #128	@ 0x80
 8021478:	0352      	lsls	r2, r2, #13
 802147a:	4313      	orrs	r3, r2
 802147c:	9301      	str	r3, [sp, #4]
 802147e:	2e00      	cmp	r6, #0
 8021480:	d025      	beq.n	80214ce <__d2b+0x7e>
 8021482:	4668      	mov	r0, sp
 8021484:	9600      	str	r6, [sp, #0]
 8021486:	f7ff fd00 	bl	8020e8a <__lo0bits>
 802148a:	9b01      	ldr	r3, [sp, #4]
 802148c:	9900      	ldr	r1, [sp, #0]
 802148e:	2800      	cmp	r0, #0
 8021490:	d01b      	beq.n	80214ca <__d2b+0x7a>
 8021492:	2220      	movs	r2, #32
 8021494:	001e      	movs	r6, r3
 8021496:	1a12      	subs	r2, r2, r0
 8021498:	4096      	lsls	r6, r2
 802149a:	0032      	movs	r2, r6
 802149c:	40c3      	lsrs	r3, r0
 802149e:	430a      	orrs	r2, r1
 80214a0:	6162      	str	r2, [r4, #20]
 80214a2:	9301      	str	r3, [sp, #4]
 80214a4:	9e01      	ldr	r6, [sp, #4]
 80214a6:	61a6      	str	r6, [r4, #24]
 80214a8:	1e73      	subs	r3, r6, #1
 80214aa:	419e      	sbcs	r6, r3
 80214ac:	3601      	adds	r6, #1
 80214ae:	6126      	str	r6, [r4, #16]
 80214b0:	2d00      	cmp	r5, #0
 80214b2:	d014      	beq.n	80214de <__d2b+0x8e>
 80214b4:	2635      	movs	r6, #53	@ 0x35
 80214b6:	4b13      	ldr	r3, [pc, #76]	@ (8021504 <__d2b+0xb4>)
 80214b8:	18ed      	adds	r5, r5, r3
 80214ba:	9b08      	ldr	r3, [sp, #32]
 80214bc:	182d      	adds	r5, r5, r0
 80214be:	601d      	str	r5, [r3, #0]
 80214c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80214c2:	1a36      	subs	r6, r6, r0
 80214c4:	601e      	str	r6, [r3, #0]
 80214c6:	0020      	movs	r0, r4
 80214c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80214ca:	6161      	str	r1, [r4, #20]
 80214cc:	e7ea      	b.n	80214a4 <__d2b+0x54>
 80214ce:	a801      	add	r0, sp, #4
 80214d0:	f7ff fcdb 	bl	8020e8a <__lo0bits>
 80214d4:	9b01      	ldr	r3, [sp, #4]
 80214d6:	2601      	movs	r6, #1
 80214d8:	6163      	str	r3, [r4, #20]
 80214da:	3020      	adds	r0, #32
 80214dc:	e7e7      	b.n	80214ae <__d2b+0x5e>
 80214de:	4b0a      	ldr	r3, [pc, #40]	@ (8021508 <__d2b+0xb8>)
 80214e0:	18c0      	adds	r0, r0, r3
 80214e2:	9b08      	ldr	r3, [sp, #32]
 80214e4:	6018      	str	r0, [r3, #0]
 80214e6:	4b09      	ldr	r3, [pc, #36]	@ (802150c <__d2b+0xbc>)
 80214e8:	18f3      	adds	r3, r6, r3
 80214ea:	009b      	lsls	r3, r3, #2
 80214ec:	18e3      	adds	r3, r4, r3
 80214ee:	6958      	ldr	r0, [r3, #20]
 80214f0:	f7ff fcaa 	bl	8020e48 <__hi0bits>
 80214f4:	0176      	lsls	r6, r6, #5
 80214f6:	e7e3      	b.n	80214c0 <__d2b+0x70>
 80214f8:	08024a89 	.word	0x08024a89
 80214fc:	08024afa 	.word	0x08024afa
 8021500:	0000030f 	.word	0x0000030f
 8021504:	fffffbcd 	.word	0xfffffbcd
 8021508:	fffffbce 	.word	0xfffffbce
 802150c:	3fffffff 	.word	0x3fffffff

08021510 <__ratio>:
 8021510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021512:	b087      	sub	sp, #28
 8021514:	000f      	movs	r7, r1
 8021516:	a904      	add	r1, sp, #16
 8021518:	0006      	movs	r6, r0
 802151a:	f7ff ff4d 	bl	80213b8 <__b2d>
 802151e:	9000      	str	r0, [sp, #0]
 8021520:	9101      	str	r1, [sp, #4]
 8021522:	9b00      	ldr	r3, [sp, #0]
 8021524:	9c01      	ldr	r4, [sp, #4]
 8021526:	0038      	movs	r0, r7
 8021528:	a905      	add	r1, sp, #20
 802152a:	9302      	str	r3, [sp, #8]
 802152c:	9403      	str	r4, [sp, #12]
 802152e:	f7ff ff43 	bl	80213b8 <__b2d>
 8021532:	000d      	movs	r5, r1
 8021534:	0002      	movs	r2, r0
 8021536:	000b      	movs	r3, r1
 8021538:	6930      	ldr	r0, [r6, #16]
 802153a:	6939      	ldr	r1, [r7, #16]
 802153c:	9e04      	ldr	r6, [sp, #16]
 802153e:	1a40      	subs	r0, r0, r1
 8021540:	9905      	ldr	r1, [sp, #20]
 8021542:	0140      	lsls	r0, r0, #5
 8021544:	1a71      	subs	r1, r6, r1
 8021546:	1841      	adds	r1, r0, r1
 8021548:	0508      	lsls	r0, r1, #20
 802154a:	2900      	cmp	r1, #0
 802154c:	dd08      	ble.n	8021560 <__ratio+0x50>
 802154e:	9901      	ldr	r1, [sp, #4]
 8021550:	1841      	adds	r1, r0, r1
 8021552:	9103      	str	r1, [sp, #12]
 8021554:	9802      	ldr	r0, [sp, #8]
 8021556:	9903      	ldr	r1, [sp, #12]
 8021558:	f7e0 fc2c 	bl	8001db4 <__aeabi_ddiv>
 802155c:	b007      	add	sp, #28
 802155e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021560:	1a2b      	subs	r3, r5, r0
 8021562:	e7f7      	b.n	8021554 <__ratio+0x44>

08021564 <__copybits>:
 8021564:	b570      	push	{r4, r5, r6, lr}
 8021566:	0014      	movs	r4, r2
 8021568:	0005      	movs	r5, r0
 802156a:	3901      	subs	r1, #1
 802156c:	6913      	ldr	r3, [r2, #16]
 802156e:	1149      	asrs	r1, r1, #5
 8021570:	3101      	adds	r1, #1
 8021572:	0089      	lsls	r1, r1, #2
 8021574:	3414      	adds	r4, #20
 8021576:	009b      	lsls	r3, r3, #2
 8021578:	1841      	adds	r1, r0, r1
 802157a:	18e3      	adds	r3, r4, r3
 802157c:	42a3      	cmp	r3, r4
 802157e:	d80d      	bhi.n	802159c <__copybits+0x38>
 8021580:	0014      	movs	r4, r2
 8021582:	3411      	adds	r4, #17
 8021584:	2500      	movs	r5, #0
 8021586:	429c      	cmp	r4, r3
 8021588:	d803      	bhi.n	8021592 <__copybits+0x2e>
 802158a:	1a9b      	subs	r3, r3, r2
 802158c:	3b11      	subs	r3, #17
 802158e:	089b      	lsrs	r3, r3, #2
 8021590:	009d      	lsls	r5, r3, #2
 8021592:	2300      	movs	r3, #0
 8021594:	1940      	adds	r0, r0, r5
 8021596:	4281      	cmp	r1, r0
 8021598:	d803      	bhi.n	80215a2 <__copybits+0x3e>
 802159a:	bd70      	pop	{r4, r5, r6, pc}
 802159c:	cc40      	ldmia	r4!, {r6}
 802159e:	c540      	stmia	r5!, {r6}
 80215a0:	e7ec      	b.n	802157c <__copybits+0x18>
 80215a2:	c008      	stmia	r0!, {r3}
 80215a4:	e7f7      	b.n	8021596 <__copybits+0x32>

080215a6 <__any_on>:
 80215a6:	0002      	movs	r2, r0
 80215a8:	6900      	ldr	r0, [r0, #16]
 80215aa:	b510      	push	{r4, lr}
 80215ac:	3214      	adds	r2, #20
 80215ae:	114b      	asrs	r3, r1, #5
 80215b0:	4298      	cmp	r0, r3
 80215b2:	db13      	blt.n	80215dc <__any_on+0x36>
 80215b4:	dd0c      	ble.n	80215d0 <__any_on+0x2a>
 80215b6:	241f      	movs	r4, #31
 80215b8:	0008      	movs	r0, r1
 80215ba:	4020      	ands	r0, r4
 80215bc:	4221      	tst	r1, r4
 80215be:	d007      	beq.n	80215d0 <__any_on+0x2a>
 80215c0:	0099      	lsls	r1, r3, #2
 80215c2:	588c      	ldr	r4, [r1, r2]
 80215c4:	0021      	movs	r1, r4
 80215c6:	40c1      	lsrs	r1, r0
 80215c8:	4081      	lsls	r1, r0
 80215ca:	2001      	movs	r0, #1
 80215cc:	428c      	cmp	r4, r1
 80215ce:	d104      	bne.n	80215da <__any_on+0x34>
 80215d0:	009b      	lsls	r3, r3, #2
 80215d2:	18d3      	adds	r3, r2, r3
 80215d4:	4293      	cmp	r3, r2
 80215d6:	d803      	bhi.n	80215e0 <__any_on+0x3a>
 80215d8:	2000      	movs	r0, #0
 80215da:	bd10      	pop	{r4, pc}
 80215dc:	0003      	movs	r3, r0
 80215de:	e7f7      	b.n	80215d0 <__any_on+0x2a>
 80215e0:	3b04      	subs	r3, #4
 80215e2:	6819      	ldr	r1, [r3, #0]
 80215e4:	2900      	cmp	r1, #0
 80215e6:	d0f5      	beq.n	80215d4 <__any_on+0x2e>
 80215e8:	2001      	movs	r0, #1
 80215ea:	e7f6      	b.n	80215da <__any_on+0x34>

080215ec <__ascii_wctomb>:
 80215ec:	0003      	movs	r3, r0
 80215ee:	1e08      	subs	r0, r1, #0
 80215f0:	d005      	beq.n	80215fe <__ascii_wctomb+0x12>
 80215f2:	2aff      	cmp	r2, #255	@ 0xff
 80215f4:	d904      	bls.n	8021600 <__ascii_wctomb+0x14>
 80215f6:	228a      	movs	r2, #138	@ 0x8a
 80215f8:	2001      	movs	r0, #1
 80215fa:	601a      	str	r2, [r3, #0]
 80215fc:	4240      	negs	r0, r0
 80215fe:	4770      	bx	lr
 8021600:	2001      	movs	r0, #1
 8021602:	700a      	strb	r2, [r1, #0]
 8021604:	e7fb      	b.n	80215fe <__ascii_wctomb+0x12>
	...

08021608 <__ssputs_r>:
 8021608:	b5f0      	push	{r4, r5, r6, r7, lr}
 802160a:	688e      	ldr	r6, [r1, #8]
 802160c:	b085      	sub	sp, #20
 802160e:	001f      	movs	r7, r3
 8021610:	000c      	movs	r4, r1
 8021612:	680b      	ldr	r3, [r1, #0]
 8021614:	9002      	str	r0, [sp, #8]
 8021616:	9203      	str	r2, [sp, #12]
 8021618:	42be      	cmp	r6, r7
 802161a:	d830      	bhi.n	802167e <__ssputs_r+0x76>
 802161c:	210c      	movs	r1, #12
 802161e:	5e62      	ldrsh	r2, [r4, r1]
 8021620:	2190      	movs	r1, #144	@ 0x90
 8021622:	00c9      	lsls	r1, r1, #3
 8021624:	420a      	tst	r2, r1
 8021626:	d028      	beq.n	802167a <__ssputs_r+0x72>
 8021628:	2003      	movs	r0, #3
 802162a:	6921      	ldr	r1, [r4, #16]
 802162c:	1a5b      	subs	r3, r3, r1
 802162e:	9301      	str	r3, [sp, #4]
 8021630:	6963      	ldr	r3, [r4, #20]
 8021632:	4343      	muls	r3, r0
 8021634:	9801      	ldr	r0, [sp, #4]
 8021636:	0fdd      	lsrs	r5, r3, #31
 8021638:	18ed      	adds	r5, r5, r3
 802163a:	1c7b      	adds	r3, r7, #1
 802163c:	181b      	adds	r3, r3, r0
 802163e:	106d      	asrs	r5, r5, #1
 8021640:	42ab      	cmp	r3, r5
 8021642:	d900      	bls.n	8021646 <__ssputs_r+0x3e>
 8021644:	001d      	movs	r5, r3
 8021646:	0552      	lsls	r2, r2, #21
 8021648:	d528      	bpl.n	802169c <__ssputs_r+0x94>
 802164a:	0029      	movs	r1, r5
 802164c:	9802      	ldr	r0, [sp, #8]
 802164e:	f7ff fa61 	bl	8020b14 <_malloc_r>
 8021652:	1e06      	subs	r6, r0, #0
 8021654:	d02c      	beq.n	80216b0 <__ssputs_r+0xa8>
 8021656:	9a01      	ldr	r2, [sp, #4]
 8021658:	6921      	ldr	r1, [r4, #16]
 802165a:	f7fd fff9 	bl	801f650 <memcpy>
 802165e:	89a2      	ldrh	r2, [r4, #12]
 8021660:	4b18      	ldr	r3, [pc, #96]	@ (80216c4 <__ssputs_r+0xbc>)
 8021662:	401a      	ands	r2, r3
 8021664:	2380      	movs	r3, #128	@ 0x80
 8021666:	4313      	orrs	r3, r2
 8021668:	81a3      	strh	r3, [r4, #12]
 802166a:	9b01      	ldr	r3, [sp, #4]
 802166c:	6126      	str	r6, [r4, #16]
 802166e:	18f6      	adds	r6, r6, r3
 8021670:	6026      	str	r6, [r4, #0]
 8021672:	003e      	movs	r6, r7
 8021674:	6165      	str	r5, [r4, #20]
 8021676:	1aed      	subs	r5, r5, r3
 8021678:	60a5      	str	r5, [r4, #8]
 802167a:	42be      	cmp	r6, r7
 802167c:	d900      	bls.n	8021680 <__ssputs_r+0x78>
 802167e:	003e      	movs	r6, r7
 8021680:	0032      	movs	r2, r6
 8021682:	9903      	ldr	r1, [sp, #12]
 8021684:	6820      	ldr	r0, [r4, #0]
 8021686:	f000 fb7e 	bl	8021d86 <memmove>
 802168a:	2000      	movs	r0, #0
 802168c:	68a3      	ldr	r3, [r4, #8]
 802168e:	1b9b      	subs	r3, r3, r6
 8021690:	60a3      	str	r3, [r4, #8]
 8021692:	6823      	ldr	r3, [r4, #0]
 8021694:	199b      	adds	r3, r3, r6
 8021696:	6023      	str	r3, [r4, #0]
 8021698:	b005      	add	sp, #20
 802169a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802169c:	002a      	movs	r2, r5
 802169e:	9802      	ldr	r0, [sp, #8]
 80216a0:	f000 fc05 	bl	8021eae <_realloc_r>
 80216a4:	1e06      	subs	r6, r0, #0
 80216a6:	d1e0      	bne.n	802166a <__ssputs_r+0x62>
 80216a8:	6921      	ldr	r1, [r4, #16]
 80216aa:	9802      	ldr	r0, [sp, #8]
 80216ac:	f7fe fe62 	bl	8020374 <_free_r>
 80216b0:	230c      	movs	r3, #12
 80216b2:	2001      	movs	r0, #1
 80216b4:	9a02      	ldr	r2, [sp, #8]
 80216b6:	4240      	negs	r0, r0
 80216b8:	6013      	str	r3, [r2, #0]
 80216ba:	89a2      	ldrh	r2, [r4, #12]
 80216bc:	3334      	adds	r3, #52	@ 0x34
 80216be:	4313      	orrs	r3, r2
 80216c0:	81a3      	strh	r3, [r4, #12]
 80216c2:	e7e9      	b.n	8021698 <__ssputs_r+0x90>
 80216c4:	fffffb7f 	.word	0xfffffb7f

080216c8 <_svfiprintf_r>:
 80216c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80216ca:	b0a1      	sub	sp, #132	@ 0x84
 80216cc:	9003      	str	r0, [sp, #12]
 80216ce:	001d      	movs	r5, r3
 80216d0:	898b      	ldrh	r3, [r1, #12]
 80216d2:	000f      	movs	r7, r1
 80216d4:	0016      	movs	r6, r2
 80216d6:	061b      	lsls	r3, r3, #24
 80216d8:	d511      	bpl.n	80216fe <_svfiprintf_r+0x36>
 80216da:	690b      	ldr	r3, [r1, #16]
 80216dc:	2b00      	cmp	r3, #0
 80216de:	d10e      	bne.n	80216fe <_svfiprintf_r+0x36>
 80216e0:	2140      	movs	r1, #64	@ 0x40
 80216e2:	f7ff fa17 	bl	8020b14 <_malloc_r>
 80216e6:	6038      	str	r0, [r7, #0]
 80216e8:	6138      	str	r0, [r7, #16]
 80216ea:	2800      	cmp	r0, #0
 80216ec:	d105      	bne.n	80216fa <_svfiprintf_r+0x32>
 80216ee:	230c      	movs	r3, #12
 80216f0:	9a03      	ldr	r2, [sp, #12]
 80216f2:	6013      	str	r3, [r2, #0]
 80216f4:	2001      	movs	r0, #1
 80216f6:	4240      	negs	r0, r0
 80216f8:	e0cf      	b.n	802189a <_svfiprintf_r+0x1d2>
 80216fa:	2340      	movs	r3, #64	@ 0x40
 80216fc:	617b      	str	r3, [r7, #20]
 80216fe:	2300      	movs	r3, #0
 8021700:	ac08      	add	r4, sp, #32
 8021702:	6163      	str	r3, [r4, #20]
 8021704:	3320      	adds	r3, #32
 8021706:	7663      	strb	r3, [r4, #25]
 8021708:	3310      	adds	r3, #16
 802170a:	76a3      	strb	r3, [r4, #26]
 802170c:	9507      	str	r5, [sp, #28]
 802170e:	0035      	movs	r5, r6
 8021710:	782b      	ldrb	r3, [r5, #0]
 8021712:	2b00      	cmp	r3, #0
 8021714:	d001      	beq.n	802171a <_svfiprintf_r+0x52>
 8021716:	2b25      	cmp	r3, #37	@ 0x25
 8021718:	d148      	bne.n	80217ac <_svfiprintf_r+0xe4>
 802171a:	1bab      	subs	r3, r5, r6
 802171c:	9305      	str	r3, [sp, #20]
 802171e:	42b5      	cmp	r5, r6
 8021720:	d00b      	beq.n	802173a <_svfiprintf_r+0x72>
 8021722:	0032      	movs	r2, r6
 8021724:	0039      	movs	r1, r7
 8021726:	9803      	ldr	r0, [sp, #12]
 8021728:	f7ff ff6e 	bl	8021608 <__ssputs_r>
 802172c:	3001      	adds	r0, #1
 802172e:	d100      	bne.n	8021732 <_svfiprintf_r+0x6a>
 8021730:	e0ae      	b.n	8021890 <_svfiprintf_r+0x1c8>
 8021732:	6963      	ldr	r3, [r4, #20]
 8021734:	9a05      	ldr	r2, [sp, #20]
 8021736:	189b      	adds	r3, r3, r2
 8021738:	6163      	str	r3, [r4, #20]
 802173a:	782b      	ldrb	r3, [r5, #0]
 802173c:	2b00      	cmp	r3, #0
 802173e:	d100      	bne.n	8021742 <_svfiprintf_r+0x7a>
 8021740:	e0a6      	b.n	8021890 <_svfiprintf_r+0x1c8>
 8021742:	2201      	movs	r2, #1
 8021744:	2300      	movs	r3, #0
 8021746:	4252      	negs	r2, r2
 8021748:	6062      	str	r2, [r4, #4]
 802174a:	a904      	add	r1, sp, #16
 802174c:	3254      	adds	r2, #84	@ 0x54
 802174e:	1852      	adds	r2, r2, r1
 8021750:	1c6e      	adds	r6, r5, #1
 8021752:	6023      	str	r3, [r4, #0]
 8021754:	60e3      	str	r3, [r4, #12]
 8021756:	60a3      	str	r3, [r4, #8]
 8021758:	7013      	strb	r3, [r2, #0]
 802175a:	65a3      	str	r3, [r4, #88]	@ 0x58
 802175c:	4b54      	ldr	r3, [pc, #336]	@ (80218b0 <_svfiprintf_r+0x1e8>)
 802175e:	2205      	movs	r2, #5
 8021760:	0018      	movs	r0, r3
 8021762:	7831      	ldrb	r1, [r6, #0]
 8021764:	9305      	str	r3, [sp, #20]
 8021766:	f7fd ff68 	bl	801f63a <memchr>
 802176a:	1c75      	adds	r5, r6, #1
 802176c:	2800      	cmp	r0, #0
 802176e:	d11f      	bne.n	80217b0 <_svfiprintf_r+0xe8>
 8021770:	6822      	ldr	r2, [r4, #0]
 8021772:	06d3      	lsls	r3, r2, #27
 8021774:	d504      	bpl.n	8021780 <_svfiprintf_r+0xb8>
 8021776:	2353      	movs	r3, #83	@ 0x53
 8021778:	a904      	add	r1, sp, #16
 802177a:	185b      	adds	r3, r3, r1
 802177c:	2120      	movs	r1, #32
 802177e:	7019      	strb	r1, [r3, #0]
 8021780:	0713      	lsls	r3, r2, #28
 8021782:	d504      	bpl.n	802178e <_svfiprintf_r+0xc6>
 8021784:	2353      	movs	r3, #83	@ 0x53
 8021786:	a904      	add	r1, sp, #16
 8021788:	185b      	adds	r3, r3, r1
 802178a:	212b      	movs	r1, #43	@ 0x2b
 802178c:	7019      	strb	r1, [r3, #0]
 802178e:	7833      	ldrb	r3, [r6, #0]
 8021790:	2b2a      	cmp	r3, #42	@ 0x2a
 8021792:	d016      	beq.n	80217c2 <_svfiprintf_r+0xfa>
 8021794:	0035      	movs	r5, r6
 8021796:	2100      	movs	r1, #0
 8021798:	200a      	movs	r0, #10
 802179a:	68e3      	ldr	r3, [r4, #12]
 802179c:	782a      	ldrb	r2, [r5, #0]
 802179e:	1c6e      	adds	r6, r5, #1
 80217a0:	3a30      	subs	r2, #48	@ 0x30
 80217a2:	2a09      	cmp	r2, #9
 80217a4:	d950      	bls.n	8021848 <_svfiprintf_r+0x180>
 80217a6:	2900      	cmp	r1, #0
 80217a8:	d111      	bne.n	80217ce <_svfiprintf_r+0x106>
 80217aa:	e017      	b.n	80217dc <_svfiprintf_r+0x114>
 80217ac:	3501      	adds	r5, #1
 80217ae:	e7af      	b.n	8021710 <_svfiprintf_r+0x48>
 80217b0:	9b05      	ldr	r3, [sp, #20]
 80217b2:	6822      	ldr	r2, [r4, #0]
 80217b4:	1ac0      	subs	r0, r0, r3
 80217b6:	2301      	movs	r3, #1
 80217b8:	4083      	lsls	r3, r0
 80217ba:	4313      	orrs	r3, r2
 80217bc:	002e      	movs	r6, r5
 80217be:	6023      	str	r3, [r4, #0]
 80217c0:	e7cc      	b.n	802175c <_svfiprintf_r+0x94>
 80217c2:	9b07      	ldr	r3, [sp, #28]
 80217c4:	1d19      	adds	r1, r3, #4
 80217c6:	681b      	ldr	r3, [r3, #0]
 80217c8:	9107      	str	r1, [sp, #28]
 80217ca:	2b00      	cmp	r3, #0
 80217cc:	db01      	blt.n	80217d2 <_svfiprintf_r+0x10a>
 80217ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80217d0:	e004      	b.n	80217dc <_svfiprintf_r+0x114>
 80217d2:	425b      	negs	r3, r3
 80217d4:	60e3      	str	r3, [r4, #12]
 80217d6:	2302      	movs	r3, #2
 80217d8:	4313      	orrs	r3, r2
 80217da:	6023      	str	r3, [r4, #0]
 80217dc:	782b      	ldrb	r3, [r5, #0]
 80217de:	2b2e      	cmp	r3, #46	@ 0x2e
 80217e0:	d10c      	bne.n	80217fc <_svfiprintf_r+0x134>
 80217e2:	786b      	ldrb	r3, [r5, #1]
 80217e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80217e6:	d134      	bne.n	8021852 <_svfiprintf_r+0x18a>
 80217e8:	9b07      	ldr	r3, [sp, #28]
 80217ea:	3502      	adds	r5, #2
 80217ec:	1d1a      	adds	r2, r3, #4
 80217ee:	681b      	ldr	r3, [r3, #0]
 80217f0:	9207      	str	r2, [sp, #28]
 80217f2:	2b00      	cmp	r3, #0
 80217f4:	da01      	bge.n	80217fa <_svfiprintf_r+0x132>
 80217f6:	2301      	movs	r3, #1
 80217f8:	425b      	negs	r3, r3
 80217fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80217fc:	4e2d      	ldr	r6, [pc, #180]	@ (80218b4 <_svfiprintf_r+0x1ec>)
 80217fe:	2203      	movs	r2, #3
 8021800:	0030      	movs	r0, r6
 8021802:	7829      	ldrb	r1, [r5, #0]
 8021804:	f7fd ff19 	bl	801f63a <memchr>
 8021808:	2800      	cmp	r0, #0
 802180a:	d006      	beq.n	802181a <_svfiprintf_r+0x152>
 802180c:	2340      	movs	r3, #64	@ 0x40
 802180e:	1b80      	subs	r0, r0, r6
 8021810:	4083      	lsls	r3, r0
 8021812:	6822      	ldr	r2, [r4, #0]
 8021814:	3501      	adds	r5, #1
 8021816:	4313      	orrs	r3, r2
 8021818:	6023      	str	r3, [r4, #0]
 802181a:	7829      	ldrb	r1, [r5, #0]
 802181c:	2206      	movs	r2, #6
 802181e:	4826      	ldr	r0, [pc, #152]	@ (80218b8 <_svfiprintf_r+0x1f0>)
 8021820:	1c6e      	adds	r6, r5, #1
 8021822:	7621      	strb	r1, [r4, #24]
 8021824:	f7fd ff09 	bl	801f63a <memchr>
 8021828:	2800      	cmp	r0, #0
 802182a:	d038      	beq.n	802189e <_svfiprintf_r+0x1d6>
 802182c:	4b23      	ldr	r3, [pc, #140]	@ (80218bc <_svfiprintf_r+0x1f4>)
 802182e:	2b00      	cmp	r3, #0
 8021830:	d122      	bne.n	8021878 <_svfiprintf_r+0x1b0>
 8021832:	2207      	movs	r2, #7
 8021834:	9b07      	ldr	r3, [sp, #28]
 8021836:	3307      	adds	r3, #7
 8021838:	4393      	bics	r3, r2
 802183a:	3308      	adds	r3, #8
 802183c:	9307      	str	r3, [sp, #28]
 802183e:	6963      	ldr	r3, [r4, #20]
 8021840:	9a04      	ldr	r2, [sp, #16]
 8021842:	189b      	adds	r3, r3, r2
 8021844:	6163      	str	r3, [r4, #20]
 8021846:	e762      	b.n	802170e <_svfiprintf_r+0x46>
 8021848:	4343      	muls	r3, r0
 802184a:	0035      	movs	r5, r6
 802184c:	2101      	movs	r1, #1
 802184e:	189b      	adds	r3, r3, r2
 8021850:	e7a4      	b.n	802179c <_svfiprintf_r+0xd4>
 8021852:	2300      	movs	r3, #0
 8021854:	200a      	movs	r0, #10
 8021856:	0019      	movs	r1, r3
 8021858:	3501      	adds	r5, #1
 802185a:	6063      	str	r3, [r4, #4]
 802185c:	782a      	ldrb	r2, [r5, #0]
 802185e:	1c6e      	adds	r6, r5, #1
 8021860:	3a30      	subs	r2, #48	@ 0x30
 8021862:	2a09      	cmp	r2, #9
 8021864:	d903      	bls.n	802186e <_svfiprintf_r+0x1a6>
 8021866:	2b00      	cmp	r3, #0
 8021868:	d0c8      	beq.n	80217fc <_svfiprintf_r+0x134>
 802186a:	9109      	str	r1, [sp, #36]	@ 0x24
 802186c:	e7c6      	b.n	80217fc <_svfiprintf_r+0x134>
 802186e:	4341      	muls	r1, r0
 8021870:	0035      	movs	r5, r6
 8021872:	2301      	movs	r3, #1
 8021874:	1889      	adds	r1, r1, r2
 8021876:	e7f1      	b.n	802185c <_svfiprintf_r+0x194>
 8021878:	aa07      	add	r2, sp, #28
 802187a:	9200      	str	r2, [sp, #0]
 802187c:	0021      	movs	r1, r4
 802187e:	003a      	movs	r2, r7
 8021880:	4b0f      	ldr	r3, [pc, #60]	@ (80218c0 <_svfiprintf_r+0x1f8>)
 8021882:	9803      	ldr	r0, [sp, #12]
 8021884:	f7fc ffd4 	bl	801e830 <_printf_float>
 8021888:	9004      	str	r0, [sp, #16]
 802188a:	9b04      	ldr	r3, [sp, #16]
 802188c:	3301      	adds	r3, #1
 802188e:	d1d6      	bne.n	802183e <_svfiprintf_r+0x176>
 8021890:	89bb      	ldrh	r3, [r7, #12]
 8021892:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021894:	065b      	lsls	r3, r3, #25
 8021896:	d500      	bpl.n	802189a <_svfiprintf_r+0x1d2>
 8021898:	e72c      	b.n	80216f4 <_svfiprintf_r+0x2c>
 802189a:	b021      	add	sp, #132	@ 0x84
 802189c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802189e:	aa07      	add	r2, sp, #28
 80218a0:	9200      	str	r2, [sp, #0]
 80218a2:	0021      	movs	r1, r4
 80218a4:	003a      	movs	r2, r7
 80218a6:	4b06      	ldr	r3, [pc, #24]	@ (80218c0 <_svfiprintf_r+0x1f8>)
 80218a8:	9803      	ldr	r0, [sp, #12]
 80218aa:	f7fd fa6f 	bl	801ed8c <_printf_i>
 80218ae:	e7eb      	b.n	8021888 <_svfiprintf_r+0x1c0>
 80218b0:	08024c50 	.word	0x08024c50
 80218b4:	08024c56 	.word	0x08024c56
 80218b8:	08024c5a 	.word	0x08024c5a
 80218bc:	0801e831 	.word	0x0801e831
 80218c0:	08021609 	.word	0x08021609

080218c4 <__sfputc_r>:
 80218c4:	6893      	ldr	r3, [r2, #8]
 80218c6:	b510      	push	{r4, lr}
 80218c8:	3b01      	subs	r3, #1
 80218ca:	6093      	str	r3, [r2, #8]
 80218cc:	2b00      	cmp	r3, #0
 80218ce:	da04      	bge.n	80218da <__sfputc_r+0x16>
 80218d0:	6994      	ldr	r4, [r2, #24]
 80218d2:	42a3      	cmp	r3, r4
 80218d4:	db07      	blt.n	80218e6 <__sfputc_r+0x22>
 80218d6:	290a      	cmp	r1, #10
 80218d8:	d005      	beq.n	80218e6 <__sfputc_r+0x22>
 80218da:	6813      	ldr	r3, [r2, #0]
 80218dc:	1c58      	adds	r0, r3, #1
 80218de:	6010      	str	r0, [r2, #0]
 80218e0:	7019      	strb	r1, [r3, #0]
 80218e2:	0008      	movs	r0, r1
 80218e4:	bd10      	pop	{r4, pc}
 80218e6:	f7fd fd37 	bl	801f358 <__swbuf_r>
 80218ea:	0001      	movs	r1, r0
 80218ec:	e7f9      	b.n	80218e2 <__sfputc_r+0x1e>

080218ee <__sfputs_r>:
 80218ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80218f0:	0006      	movs	r6, r0
 80218f2:	000f      	movs	r7, r1
 80218f4:	0014      	movs	r4, r2
 80218f6:	18d5      	adds	r5, r2, r3
 80218f8:	42ac      	cmp	r4, r5
 80218fa:	d101      	bne.n	8021900 <__sfputs_r+0x12>
 80218fc:	2000      	movs	r0, #0
 80218fe:	e007      	b.n	8021910 <__sfputs_r+0x22>
 8021900:	7821      	ldrb	r1, [r4, #0]
 8021902:	003a      	movs	r2, r7
 8021904:	0030      	movs	r0, r6
 8021906:	f7ff ffdd 	bl	80218c4 <__sfputc_r>
 802190a:	3401      	adds	r4, #1
 802190c:	1c43      	adds	r3, r0, #1
 802190e:	d1f3      	bne.n	80218f8 <__sfputs_r+0xa>
 8021910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021914 <_vfiprintf_r>:
 8021914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021916:	b0a1      	sub	sp, #132	@ 0x84
 8021918:	000f      	movs	r7, r1
 802191a:	0015      	movs	r5, r2
 802191c:	001e      	movs	r6, r3
 802191e:	9003      	str	r0, [sp, #12]
 8021920:	2800      	cmp	r0, #0
 8021922:	d004      	beq.n	802192e <_vfiprintf_r+0x1a>
 8021924:	6a03      	ldr	r3, [r0, #32]
 8021926:	2b00      	cmp	r3, #0
 8021928:	d101      	bne.n	802192e <_vfiprintf_r+0x1a>
 802192a:	f7fd fbcd 	bl	801f0c8 <__sinit>
 802192e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021930:	07db      	lsls	r3, r3, #31
 8021932:	d405      	bmi.n	8021940 <_vfiprintf_r+0x2c>
 8021934:	89bb      	ldrh	r3, [r7, #12]
 8021936:	059b      	lsls	r3, r3, #22
 8021938:	d402      	bmi.n	8021940 <_vfiprintf_r+0x2c>
 802193a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802193c:	f7fd fe7b 	bl	801f636 <__retarget_lock_acquire_recursive>
 8021940:	89bb      	ldrh	r3, [r7, #12]
 8021942:	071b      	lsls	r3, r3, #28
 8021944:	d502      	bpl.n	802194c <_vfiprintf_r+0x38>
 8021946:	693b      	ldr	r3, [r7, #16]
 8021948:	2b00      	cmp	r3, #0
 802194a:	d113      	bne.n	8021974 <_vfiprintf_r+0x60>
 802194c:	0039      	movs	r1, r7
 802194e:	9803      	ldr	r0, [sp, #12]
 8021950:	f7fd fd44 	bl	801f3dc <__swsetup_r>
 8021954:	2800      	cmp	r0, #0
 8021956:	d00d      	beq.n	8021974 <_vfiprintf_r+0x60>
 8021958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802195a:	07db      	lsls	r3, r3, #31
 802195c:	d503      	bpl.n	8021966 <_vfiprintf_r+0x52>
 802195e:	2001      	movs	r0, #1
 8021960:	4240      	negs	r0, r0
 8021962:	b021      	add	sp, #132	@ 0x84
 8021964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021966:	89bb      	ldrh	r3, [r7, #12]
 8021968:	059b      	lsls	r3, r3, #22
 802196a:	d4f8      	bmi.n	802195e <_vfiprintf_r+0x4a>
 802196c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802196e:	f7fd fe63 	bl	801f638 <__retarget_lock_release_recursive>
 8021972:	e7f4      	b.n	802195e <_vfiprintf_r+0x4a>
 8021974:	2300      	movs	r3, #0
 8021976:	ac08      	add	r4, sp, #32
 8021978:	6163      	str	r3, [r4, #20]
 802197a:	3320      	adds	r3, #32
 802197c:	7663      	strb	r3, [r4, #25]
 802197e:	3310      	adds	r3, #16
 8021980:	76a3      	strb	r3, [r4, #26]
 8021982:	9607      	str	r6, [sp, #28]
 8021984:	002e      	movs	r6, r5
 8021986:	7833      	ldrb	r3, [r6, #0]
 8021988:	2b00      	cmp	r3, #0
 802198a:	d001      	beq.n	8021990 <_vfiprintf_r+0x7c>
 802198c:	2b25      	cmp	r3, #37	@ 0x25
 802198e:	d148      	bne.n	8021a22 <_vfiprintf_r+0x10e>
 8021990:	1b73      	subs	r3, r6, r5
 8021992:	9305      	str	r3, [sp, #20]
 8021994:	42ae      	cmp	r6, r5
 8021996:	d00b      	beq.n	80219b0 <_vfiprintf_r+0x9c>
 8021998:	002a      	movs	r2, r5
 802199a:	0039      	movs	r1, r7
 802199c:	9803      	ldr	r0, [sp, #12]
 802199e:	f7ff ffa6 	bl	80218ee <__sfputs_r>
 80219a2:	3001      	adds	r0, #1
 80219a4:	d100      	bne.n	80219a8 <_vfiprintf_r+0x94>
 80219a6:	e0ae      	b.n	8021b06 <_vfiprintf_r+0x1f2>
 80219a8:	6963      	ldr	r3, [r4, #20]
 80219aa:	9a05      	ldr	r2, [sp, #20]
 80219ac:	189b      	adds	r3, r3, r2
 80219ae:	6163      	str	r3, [r4, #20]
 80219b0:	7833      	ldrb	r3, [r6, #0]
 80219b2:	2b00      	cmp	r3, #0
 80219b4:	d100      	bne.n	80219b8 <_vfiprintf_r+0xa4>
 80219b6:	e0a6      	b.n	8021b06 <_vfiprintf_r+0x1f2>
 80219b8:	2201      	movs	r2, #1
 80219ba:	2300      	movs	r3, #0
 80219bc:	4252      	negs	r2, r2
 80219be:	6062      	str	r2, [r4, #4]
 80219c0:	a904      	add	r1, sp, #16
 80219c2:	3254      	adds	r2, #84	@ 0x54
 80219c4:	1852      	adds	r2, r2, r1
 80219c6:	1c75      	adds	r5, r6, #1
 80219c8:	6023      	str	r3, [r4, #0]
 80219ca:	60e3      	str	r3, [r4, #12]
 80219cc:	60a3      	str	r3, [r4, #8]
 80219ce:	7013      	strb	r3, [r2, #0]
 80219d0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80219d2:	4b59      	ldr	r3, [pc, #356]	@ (8021b38 <_vfiprintf_r+0x224>)
 80219d4:	2205      	movs	r2, #5
 80219d6:	0018      	movs	r0, r3
 80219d8:	7829      	ldrb	r1, [r5, #0]
 80219da:	9305      	str	r3, [sp, #20]
 80219dc:	f7fd fe2d 	bl	801f63a <memchr>
 80219e0:	1c6e      	adds	r6, r5, #1
 80219e2:	2800      	cmp	r0, #0
 80219e4:	d11f      	bne.n	8021a26 <_vfiprintf_r+0x112>
 80219e6:	6822      	ldr	r2, [r4, #0]
 80219e8:	06d3      	lsls	r3, r2, #27
 80219ea:	d504      	bpl.n	80219f6 <_vfiprintf_r+0xe2>
 80219ec:	2353      	movs	r3, #83	@ 0x53
 80219ee:	a904      	add	r1, sp, #16
 80219f0:	185b      	adds	r3, r3, r1
 80219f2:	2120      	movs	r1, #32
 80219f4:	7019      	strb	r1, [r3, #0]
 80219f6:	0713      	lsls	r3, r2, #28
 80219f8:	d504      	bpl.n	8021a04 <_vfiprintf_r+0xf0>
 80219fa:	2353      	movs	r3, #83	@ 0x53
 80219fc:	a904      	add	r1, sp, #16
 80219fe:	185b      	adds	r3, r3, r1
 8021a00:	212b      	movs	r1, #43	@ 0x2b
 8021a02:	7019      	strb	r1, [r3, #0]
 8021a04:	782b      	ldrb	r3, [r5, #0]
 8021a06:	2b2a      	cmp	r3, #42	@ 0x2a
 8021a08:	d016      	beq.n	8021a38 <_vfiprintf_r+0x124>
 8021a0a:	002e      	movs	r6, r5
 8021a0c:	2100      	movs	r1, #0
 8021a0e:	200a      	movs	r0, #10
 8021a10:	68e3      	ldr	r3, [r4, #12]
 8021a12:	7832      	ldrb	r2, [r6, #0]
 8021a14:	1c75      	adds	r5, r6, #1
 8021a16:	3a30      	subs	r2, #48	@ 0x30
 8021a18:	2a09      	cmp	r2, #9
 8021a1a:	d950      	bls.n	8021abe <_vfiprintf_r+0x1aa>
 8021a1c:	2900      	cmp	r1, #0
 8021a1e:	d111      	bne.n	8021a44 <_vfiprintf_r+0x130>
 8021a20:	e017      	b.n	8021a52 <_vfiprintf_r+0x13e>
 8021a22:	3601      	adds	r6, #1
 8021a24:	e7af      	b.n	8021986 <_vfiprintf_r+0x72>
 8021a26:	9b05      	ldr	r3, [sp, #20]
 8021a28:	6822      	ldr	r2, [r4, #0]
 8021a2a:	1ac0      	subs	r0, r0, r3
 8021a2c:	2301      	movs	r3, #1
 8021a2e:	4083      	lsls	r3, r0
 8021a30:	4313      	orrs	r3, r2
 8021a32:	0035      	movs	r5, r6
 8021a34:	6023      	str	r3, [r4, #0]
 8021a36:	e7cc      	b.n	80219d2 <_vfiprintf_r+0xbe>
 8021a38:	9b07      	ldr	r3, [sp, #28]
 8021a3a:	1d19      	adds	r1, r3, #4
 8021a3c:	681b      	ldr	r3, [r3, #0]
 8021a3e:	9107      	str	r1, [sp, #28]
 8021a40:	2b00      	cmp	r3, #0
 8021a42:	db01      	blt.n	8021a48 <_vfiprintf_r+0x134>
 8021a44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021a46:	e004      	b.n	8021a52 <_vfiprintf_r+0x13e>
 8021a48:	425b      	negs	r3, r3
 8021a4a:	60e3      	str	r3, [r4, #12]
 8021a4c:	2302      	movs	r3, #2
 8021a4e:	4313      	orrs	r3, r2
 8021a50:	6023      	str	r3, [r4, #0]
 8021a52:	7833      	ldrb	r3, [r6, #0]
 8021a54:	2b2e      	cmp	r3, #46	@ 0x2e
 8021a56:	d10c      	bne.n	8021a72 <_vfiprintf_r+0x15e>
 8021a58:	7873      	ldrb	r3, [r6, #1]
 8021a5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8021a5c:	d134      	bne.n	8021ac8 <_vfiprintf_r+0x1b4>
 8021a5e:	9b07      	ldr	r3, [sp, #28]
 8021a60:	3602      	adds	r6, #2
 8021a62:	1d1a      	adds	r2, r3, #4
 8021a64:	681b      	ldr	r3, [r3, #0]
 8021a66:	9207      	str	r2, [sp, #28]
 8021a68:	2b00      	cmp	r3, #0
 8021a6a:	da01      	bge.n	8021a70 <_vfiprintf_r+0x15c>
 8021a6c:	2301      	movs	r3, #1
 8021a6e:	425b      	negs	r3, r3
 8021a70:	9309      	str	r3, [sp, #36]	@ 0x24
 8021a72:	4d32      	ldr	r5, [pc, #200]	@ (8021b3c <_vfiprintf_r+0x228>)
 8021a74:	2203      	movs	r2, #3
 8021a76:	0028      	movs	r0, r5
 8021a78:	7831      	ldrb	r1, [r6, #0]
 8021a7a:	f7fd fdde 	bl	801f63a <memchr>
 8021a7e:	2800      	cmp	r0, #0
 8021a80:	d006      	beq.n	8021a90 <_vfiprintf_r+0x17c>
 8021a82:	2340      	movs	r3, #64	@ 0x40
 8021a84:	1b40      	subs	r0, r0, r5
 8021a86:	4083      	lsls	r3, r0
 8021a88:	6822      	ldr	r2, [r4, #0]
 8021a8a:	3601      	adds	r6, #1
 8021a8c:	4313      	orrs	r3, r2
 8021a8e:	6023      	str	r3, [r4, #0]
 8021a90:	7831      	ldrb	r1, [r6, #0]
 8021a92:	2206      	movs	r2, #6
 8021a94:	482a      	ldr	r0, [pc, #168]	@ (8021b40 <_vfiprintf_r+0x22c>)
 8021a96:	1c75      	adds	r5, r6, #1
 8021a98:	7621      	strb	r1, [r4, #24]
 8021a9a:	f7fd fdce 	bl	801f63a <memchr>
 8021a9e:	2800      	cmp	r0, #0
 8021aa0:	d040      	beq.n	8021b24 <_vfiprintf_r+0x210>
 8021aa2:	4b28      	ldr	r3, [pc, #160]	@ (8021b44 <_vfiprintf_r+0x230>)
 8021aa4:	2b00      	cmp	r3, #0
 8021aa6:	d122      	bne.n	8021aee <_vfiprintf_r+0x1da>
 8021aa8:	2207      	movs	r2, #7
 8021aaa:	9b07      	ldr	r3, [sp, #28]
 8021aac:	3307      	adds	r3, #7
 8021aae:	4393      	bics	r3, r2
 8021ab0:	3308      	adds	r3, #8
 8021ab2:	9307      	str	r3, [sp, #28]
 8021ab4:	6963      	ldr	r3, [r4, #20]
 8021ab6:	9a04      	ldr	r2, [sp, #16]
 8021ab8:	189b      	adds	r3, r3, r2
 8021aba:	6163      	str	r3, [r4, #20]
 8021abc:	e762      	b.n	8021984 <_vfiprintf_r+0x70>
 8021abe:	4343      	muls	r3, r0
 8021ac0:	002e      	movs	r6, r5
 8021ac2:	2101      	movs	r1, #1
 8021ac4:	189b      	adds	r3, r3, r2
 8021ac6:	e7a4      	b.n	8021a12 <_vfiprintf_r+0xfe>
 8021ac8:	2300      	movs	r3, #0
 8021aca:	200a      	movs	r0, #10
 8021acc:	0019      	movs	r1, r3
 8021ace:	3601      	adds	r6, #1
 8021ad0:	6063      	str	r3, [r4, #4]
 8021ad2:	7832      	ldrb	r2, [r6, #0]
 8021ad4:	1c75      	adds	r5, r6, #1
 8021ad6:	3a30      	subs	r2, #48	@ 0x30
 8021ad8:	2a09      	cmp	r2, #9
 8021ada:	d903      	bls.n	8021ae4 <_vfiprintf_r+0x1d0>
 8021adc:	2b00      	cmp	r3, #0
 8021ade:	d0c8      	beq.n	8021a72 <_vfiprintf_r+0x15e>
 8021ae0:	9109      	str	r1, [sp, #36]	@ 0x24
 8021ae2:	e7c6      	b.n	8021a72 <_vfiprintf_r+0x15e>
 8021ae4:	4341      	muls	r1, r0
 8021ae6:	002e      	movs	r6, r5
 8021ae8:	2301      	movs	r3, #1
 8021aea:	1889      	adds	r1, r1, r2
 8021aec:	e7f1      	b.n	8021ad2 <_vfiprintf_r+0x1be>
 8021aee:	aa07      	add	r2, sp, #28
 8021af0:	9200      	str	r2, [sp, #0]
 8021af2:	0021      	movs	r1, r4
 8021af4:	003a      	movs	r2, r7
 8021af6:	4b14      	ldr	r3, [pc, #80]	@ (8021b48 <_vfiprintf_r+0x234>)
 8021af8:	9803      	ldr	r0, [sp, #12]
 8021afa:	f7fc fe99 	bl	801e830 <_printf_float>
 8021afe:	9004      	str	r0, [sp, #16]
 8021b00:	9b04      	ldr	r3, [sp, #16]
 8021b02:	3301      	adds	r3, #1
 8021b04:	d1d6      	bne.n	8021ab4 <_vfiprintf_r+0x1a0>
 8021b06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021b08:	07db      	lsls	r3, r3, #31
 8021b0a:	d405      	bmi.n	8021b18 <_vfiprintf_r+0x204>
 8021b0c:	89bb      	ldrh	r3, [r7, #12]
 8021b0e:	059b      	lsls	r3, r3, #22
 8021b10:	d402      	bmi.n	8021b18 <_vfiprintf_r+0x204>
 8021b12:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021b14:	f7fd fd90 	bl	801f638 <__retarget_lock_release_recursive>
 8021b18:	89bb      	ldrh	r3, [r7, #12]
 8021b1a:	065b      	lsls	r3, r3, #25
 8021b1c:	d500      	bpl.n	8021b20 <_vfiprintf_r+0x20c>
 8021b1e:	e71e      	b.n	802195e <_vfiprintf_r+0x4a>
 8021b20:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8021b22:	e71e      	b.n	8021962 <_vfiprintf_r+0x4e>
 8021b24:	aa07      	add	r2, sp, #28
 8021b26:	9200      	str	r2, [sp, #0]
 8021b28:	0021      	movs	r1, r4
 8021b2a:	003a      	movs	r2, r7
 8021b2c:	4b06      	ldr	r3, [pc, #24]	@ (8021b48 <_vfiprintf_r+0x234>)
 8021b2e:	9803      	ldr	r0, [sp, #12]
 8021b30:	f7fd f92c 	bl	801ed8c <_printf_i>
 8021b34:	e7e3      	b.n	8021afe <_vfiprintf_r+0x1ea>
 8021b36:	46c0      	nop			@ (mov r8, r8)
 8021b38:	08024c50 	.word	0x08024c50
 8021b3c:	08024c56 	.word	0x08024c56
 8021b40:	08024c5a 	.word	0x08024c5a
 8021b44:	0801e831 	.word	0x0801e831
 8021b48:	080218ef 	.word	0x080218ef

08021b4c <__sflush_r>:
 8021b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021b4e:	220c      	movs	r2, #12
 8021b50:	5e8b      	ldrsh	r3, [r1, r2]
 8021b52:	0005      	movs	r5, r0
 8021b54:	000c      	movs	r4, r1
 8021b56:	071a      	lsls	r2, r3, #28
 8021b58:	d456      	bmi.n	8021c08 <__sflush_r+0xbc>
 8021b5a:	684a      	ldr	r2, [r1, #4]
 8021b5c:	2a00      	cmp	r2, #0
 8021b5e:	dc02      	bgt.n	8021b66 <__sflush_r+0x1a>
 8021b60:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8021b62:	2a00      	cmp	r2, #0
 8021b64:	dd4e      	ble.n	8021c04 <__sflush_r+0xb8>
 8021b66:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8021b68:	2f00      	cmp	r7, #0
 8021b6a:	d04b      	beq.n	8021c04 <__sflush_r+0xb8>
 8021b6c:	2200      	movs	r2, #0
 8021b6e:	2080      	movs	r0, #128	@ 0x80
 8021b70:	682e      	ldr	r6, [r5, #0]
 8021b72:	602a      	str	r2, [r5, #0]
 8021b74:	001a      	movs	r2, r3
 8021b76:	0140      	lsls	r0, r0, #5
 8021b78:	6a21      	ldr	r1, [r4, #32]
 8021b7a:	4002      	ands	r2, r0
 8021b7c:	4203      	tst	r3, r0
 8021b7e:	d033      	beq.n	8021be8 <__sflush_r+0x9c>
 8021b80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021b82:	89a3      	ldrh	r3, [r4, #12]
 8021b84:	075b      	lsls	r3, r3, #29
 8021b86:	d506      	bpl.n	8021b96 <__sflush_r+0x4a>
 8021b88:	6863      	ldr	r3, [r4, #4]
 8021b8a:	1ad2      	subs	r2, r2, r3
 8021b8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021b8e:	2b00      	cmp	r3, #0
 8021b90:	d001      	beq.n	8021b96 <__sflush_r+0x4a>
 8021b92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021b94:	1ad2      	subs	r2, r2, r3
 8021b96:	2300      	movs	r3, #0
 8021b98:	0028      	movs	r0, r5
 8021b9a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8021b9c:	6a21      	ldr	r1, [r4, #32]
 8021b9e:	47b8      	blx	r7
 8021ba0:	89a2      	ldrh	r2, [r4, #12]
 8021ba2:	1c43      	adds	r3, r0, #1
 8021ba4:	d106      	bne.n	8021bb4 <__sflush_r+0x68>
 8021ba6:	6829      	ldr	r1, [r5, #0]
 8021ba8:	291d      	cmp	r1, #29
 8021baa:	d846      	bhi.n	8021c3a <__sflush_r+0xee>
 8021bac:	4b29      	ldr	r3, [pc, #164]	@ (8021c54 <__sflush_r+0x108>)
 8021bae:	410b      	asrs	r3, r1
 8021bb0:	07db      	lsls	r3, r3, #31
 8021bb2:	d442      	bmi.n	8021c3a <__sflush_r+0xee>
 8021bb4:	2300      	movs	r3, #0
 8021bb6:	6063      	str	r3, [r4, #4]
 8021bb8:	6923      	ldr	r3, [r4, #16]
 8021bba:	6023      	str	r3, [r4, #0]
 8021bbc:	04d2      	lsls	r2, r2, #19
 8021bbe:	d505      	bpl.n	8021bcc <__sflush_r+0x80>
 8021bc0:	1c43      	adds	r3, r0, #1
 8021bc2:	d102      	bne.n	8021bca <__sflush_r+0x7e>
 8021bc4:	682b      	ldr	r3, [r5, #0]
 8021bc6:	2b00      	cmp	r3, #0
 8021bc8:	d100      	bne.n	8021bcc <__sflush_r+0x80>
 8021bca:	6560      	str	r0, [r4, #84]	@ 0x54
 8021bcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021bce:	602e      	str	r6, [r5, #0]
 8021bd0:	2900      	cmp	r1, #0
 8021bd2:	d017      	beq.n	8021c04 <__sflush_r+0xb8>
 8021bd4:	0023      	movs	r3, r4
 8021bd6:	3344      	adds	r3, #68	@ 0x44
 8021bd8:	4299      	cmp	r1, r3
 8021bda:	d002      	beq.n	8021be2 <__sflush_r+0x96>
 8021bdc:	0028      	movs	r0, r5
 8021bde:	f7fe fbc9 	bl	8020374 <_free_r>
 8021be2:	2300      	movs	r3, #0
 8021be4:	6363      	str	r3, [r4, #52]	@ 0x34
 8021be6:	e00d      	b.n	8021c04 <__sflush_r+0xb8>
 8021be8:	2301      	movs	r3, #1
 8021bea:	0028      	movs	r0, r5
 8021bec:	47b8      	blx	r7
 8021bee:	0002      	movs	r2, r0
 8021bf0:	1c43      	adds	r3, r0, #1
 8021bf2:	d1c6      	bne.n	8021b82 <__sflush_r+0x36>
 8021bf4:	682b      	ldr	r3, [r5, #0]
 8021bf6:	2b00      	cmp	r3, #0
 8021bf8:	d0c3      	beq.n	8021b82 <__sflush_r+0x36>
 8021bfa:	2b1d      	cmp	r3, #29
 8021bfc:	d001      	beq.n	8021c02 <__sflush_r+0xb6>
 8021bfe:	2b16      	cmp	r3, #22
 8021c00:	d11a      	bne.n	8021c38 <__sflush_r+0xec>
 8021c02:	602e      	str	r6, [r5, #0]
 8021c04:	2000      	movs	r0, #0
 8021c06:	e01e      	b.n	8021c46 <__sflush_r+0xfa>
 8021c08:	690e      	ldr	r6, [r1, #16]
 8021c0a:	2e00      	cmp	r6, #0
 8021c0c:	d0fa      	beq.n	8021c04 <__sflush_r+0xb8>
 8021c0e:	680f      	ldr	r7, [r1, #0]
 8021c10:	600e      	str	r6, [r1, #0]
 8021c12:	1bba      	subs	r2, r7, r6
 8021c14:	9201      	str	r2, [sp, #4]
 8021c16:	2200      	movs	r2, #0
 8021c18:	079b      	lsls	r3, r3, #30
 8021c1a:	d100      	bne.n	8021c1e <__sflush_r+0xd2>
 8021c1c:	694a      	ldr	r2, [r1, #20]
 8021c1e:	60a2      	str	r2, [r4, #8]
 8021c20:	9b01      	ldr	r3, [sp, #4]
 8021c22:	2b00      	cmp	r3, #0
 8021c24:	ddee      	ble.n	8021c04 <__sflush_r+0xb8>
 8021c26:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8021c28:	0032      	movs	r2, r6
 8021c2a:	001f      	movs	r7, r3
 8021c2c:	0028      	movs	r0, r5
 8021c2e:	9b01      	ldr	r3, [sp, #4]
 8021c30:	6a21      	ldr	r1, [r4, #32]
 8021c32:	47b8      	blx	r7
 8021c34:	2800      	cmp	r0, #0
 8021c36:	dc07      	bgt.n	8021c48 <__sflush_r+0xfc>
 8021c38:	89a2      	ldrh	r2, [r4, #12]
 8021c3a:	2340      	movs	r3, #64	@ 0x40
 8021c3c:	2001      	movs	r0, #1
 8021c3e:	4313      	orrs	r3, r2
 8021c40:	b21b      	sxth	r3, r3
 8021c42:	81a3      	strh	r3, [r4, #12]
 8021c44:	4240      	negs	r0, r0
 8021c46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021c48:	9b01      	ldr	r3, [sp, #4]
 8021c4a:	1836      	adds	r6, r6, r0
 8021c4c:	1a1b      	subs	r3, r3, r0
 8021c4e:	9301      	str	r3, [sp, #4]
 8021c50:	e7e6      	b.n	8021c20 <__sflush_r+0xd4>
 8021c52:	46c0      	nop			@ (mov r8, r8)
 8021c54:	dfbffffe 	.word	0xdfbffffe

08021c58 <_fflush_r>:
 8021c58:	690b      	ldr	r3, [r1, #16]
 8021c5a:	b570      	push	{r4, r5, r6, lr}
 8021c5c:	0005      	movs	r5, r0
 8021c5e:	000c      	movs	r4, r1
 8021c60:	2b00      	cmp	r3, #0
 8021c62:	d102      	bne.n	8021c6a <_fflush_r+0x12>
 8021c64:	2500      	movs	r5, #0
 8021c66:	0028      	movs	r0, r5
 8021c68:	bd70      	pop	{r4, r5, r6, pc}
 8021c6a:	2800      	cmp	r0, #0
 8021c6c:	d004      	beq.n	8021c78 <_fflush_r+0x20>
 8021c6e:	6a03      	ldr	r3, [r0, #32]
 8021c70:	2b00      	cmp	r3, #0
 8021c72:	d101      	bne.n	8021c78 <_fflush_r+0x20>
 8021c74:	f7fd fa28 	bl	801f0c8 <__sinit>
 8021c78:	220c      	movs	r2, #12
 8021c7a:	5ea3      	ldrsh	r3, [r4, r2]
 8021c7c:	2b00      	cmp	r3, #0
 8021c7e:	d0f1      	beq.n	8021c64 <_fflush_r+0xc>
 8021c80:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021c82:	07d2      	lsls	r2, r2, #31
 8021c84:	d404      	bmi.n	8021c90 <_fflush_r+0x38>
 8021c86:	059b      	lsls	r3, r3, #22
 8021c88:	d402      	bmi.n	8021c90 <_fflush_r+0x38>
 8021c8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021c8c:	f7fd fcd3 	bl	801f636 <__retarget_lock_acquire_recursive>
 8021c90:	0028      	movs	r0, r5
 8021c92:	0021      	movs	r1, r4
 8021c94:	f7ff ff5a 	bl	8021b4c <__sflush_r>
 8021c98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021c9a:	0005      	movs	r5, r0
 8021c9c:	07db      	lsls	r3, r3, #31
 8021c9e:	d4e2      	bmi.n	8021c66 <_fflush_r+0xe>
 8021ca0:	89a3      	ldrh	r3, [r4, #12]
 8021ca2:	059b      	lsls	r3, r3, #22
 8021ca4:	d4df      	bmi.n	8021c66 <_fflush_r+0xe>
 8021ca6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021ca8:	f7fd fcc6 	bl	801f638 <__retarget_lock_release_recursive>
 8021cac:	e7db      	b.n	8021c66 <_fflush_r+0xe>
	...

08021cb0 <__swhatbuf_r>:
 8021cb0:	b570      	push	{r4, r5, r6, lr}
 8021cb2:	000e      	movs	r6, r1
 8021cb4:	001d      	movs	r5, r3
 8021cb6:	230e      	movs	r3, #14
 8021cb8:	5ec9      	ldrsh	r1, [r1, r3]
 8021cba:	0014      	movs	r4, r2
 8021cbc:	b096      	sub	sp, #88	@ 0x58
 8021cbe:	2900      	cmp	r1, #0
 8021cc0:	da0c      	bge.n	8021cdc <__swhatbuf_r+0x2c>
 8021cc2:	89b2      	ldrh	r2, [r6, #12]
 8021cc4:	2380      	movs	r3, #128	@ 0x80
 8021cc6:	0011      	movs	r1, r2
 8021cc8:	4019      	ands	r1, r3
 8021cca:	421a      	tst	r2, r3
 8021ccc:	d114      	bne.n	8021cf8 <__swhatbuf_r+0x48>
 8021cce:	2380      	movs	r3, #128	@ 0x80
 8021cd0:	00db      	lsls	r3, r3, #3
 8021cd2:	2000      	movs	r0, #0
 8021cd4:	6029      	str	r1, [r5, #0]
 8021cd6:	6023      	str	r3, [r4, #0]
 8021cd8:	b016      	add	sp, #88	@ 0x58
 8021cda:	bd70      	pop	{r4, r5, r6, pc}
 8021cdc:	466a      	mov	r2, sp
 8021cde:	f000 f865 	bl	8021dac <_fstat_r>
 8021ce2:	2800      	cmp	r0, #0
 8021ce4:	dbed      	blt.n	8021cc2 <__swhatbuf_r+0x12>
 8021ce6:	23f0      	movs	r3, #240	@ 0xf0
 8021ce8:	9901      	ldr	r1, [sp, #4]
 8021cea:	021b      	lsls	r3, r3, #8
 8021cec:	4019      	ands	r1, r3
 8021cee:	4b04      	ldr	r3, [pc, #16]	@ (8021d00 <__swhatbuf_r+0x50>)
 8021cf0:	18c9      	adds	r1, r1, r3
 8021cf2:	424b      	negs	r3, r1
 8021cf4:	4159      	adcs	r1, r3
 8021cf6:	e7ea      	b.n	8021cce <__swhatbuf_r+0x1e>
 8021cf8:	2100      	movs	r1, #0
 8021cfa:	2340      	movs	r3, #64	@ 0x40
 8021cfc:	e7e9      	b.n	8021cd2 <__swhatbuf_r+0x22>
 8021cfe:	46c0      	nop			@ (mov r8, r8)
 8021d00:	ffffe000 	.word	0xffffe000

08021d04 <__smakebuf_r>:
 8021d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021d06:	2602      	movs	r6, #2
 8021d08:	898b      	ldrh	r3, [r1, #12]
 8021d0a:	0005      	movs	r5, r0
 8021d0c:	000c      	movs	r4, r1
 8021d0e:	b085      	sub	sp, #20
 8021d10:	4233      	tst	r3, r6
 8021d12:	d007      	beq.n	8021d24 <__smakebuf_r+0x20>
 8021d14:	0023      	movs	r3, r4
 8021d16:	3347      	adds	r3, #71	@ 0x47
 8021d18:	6023      	str	r3, [r4, #0]
 8021d1a:	6123      	str	r3, [r4, #16]
 8021d1c:	2301      	movs	r3, #1
 8021d1e:	6163      	str	r3, [r4, #20]
 8021d20:	b005      	add	sp, #20
 8021d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021d24:	ab03      	add	r3, sp, #12
 8021d26:	aa02      	add	r2, sp, #8
 8021d28:	f7ff ffc2 	bl	8021cb0 <__swhatbuf_r>
 8021d2c:	9f02      	ldr	r7, [sp, #8]
 8021d2e:	9001      	str	r0, [sp, #4]
 8021d30:	0039      	movs	r1, r7
 8021d32:	0028      	movs	r0, r5
 8021d34:	f7fe feee 	bl	8020b14 <_malloc_r>
 8021d38:	2800      	cmp	r0, #0
 8021d3a:	d108      	bne.n	8021d4e <__smakebuf_r+0x4a>
 8021d3c:	220c      	movs	r2, #12
 8021d3e:	5ea3      	ldrsh	r3, [r4, r2]
 8021d40:	059a      	lsls	r2, r3, #22
 8021d42:	d4ed      	bmi.n	8021d20 <__smakebuf_r+0x1c>
 8021d44:	2203      	movs	r2, #3
 8021d46:	4393      	bics	r3, r2
 8021d48:	431e      	orrs	r6, r3
 8021d4a:	81a6      	strh	r6, [r4, #12]
 8021d4c:	e7e2      	b.n	8021d14 <__smakebuf_r+0x10>
 8021d4e:	2380      	movs	r3, #128	@ 0x80
 8021d50:	89a2      	ldrh	r2, [r4, #12]
 8021d52:	6020      	str	r0, [r4, #0]
 8021d54:	4313      	orrs	r3, r2
 8021d56:	81a3      	strh	r3, [r4, #12]
 8021d58:	9b03      	ldr	r3, [sp, #12]
 8021d5a:	6120      	str	r0, [r4, #16]
 8021d5c:	6167      	str	r7, [r4, #20]
 8021d5e:	2b00      	cmp	r3, #0
 8021d60:	d00c      	beq.n	8021d7c <__smakebuf_r+0x78>
 8021d62:	0028      	movs	r0, r5
 8021d64:	230e      	movs	r3, #14
 8021d66:	5ee1      	ldrsh	r1, [r4, r3]
 8021d68:	f000 f832 	bl	8021dd0 <_isatty_r>
 8021d6c:	2800      	cmp	r0, #0
 8021d6e:	d005      	beq.n	8021d7c <__smakebuf_r+0x78>
 8021d70:	2303      	movs	r3, #3
 8021d72:	89a2      	ldrh	r2, [r4, #12]
 8021d74:	439a      	bics	r2, r3
 8021d76:	3b02      	subs	r3, #2
 8021d78:	4313      	orrs	r3, r2
 8021d7a:	81a3      	strh	r3, [r4, #12]
 8021d7c:	89a3      	ldrh	r3, [r4, #12]
 8021d7e:	9a01      	ldr	r2, [sp, #4]
 8021d80:	4313      	orrs	r3, r2
 8021d82:	81a3      	strh	r3, [r4, #12]
 8021d84:	e7cc      	b.n	8021d20 <__smakebuf_r+0x1c>

08021d86 <memmove>:
 8021d86:	b510      	push	{r4, lr}
 8021d88:	4288      	cmp	r0, r1
 8021d8a:	d806      	bhi.n	8021d9a <memmove+0x14>
 8021d8c:	2300      	movs	r3, #0
 8021d8e:	429a      	cmp	r2, r3
 8021d90:	d008      	beq.n	8021da4 <memmove+0x1e>
 8021d92:	5ccc      	ldrb	r4, [r1, r3]
 8021d94:	54c4      	strb	r4, [r0, r3]
 8021d96:	3301      	adds	r3, #1
 8021d98:	e7f9      	b.n	8021d8e <memmove+0x8>
 8021d9a:	188b      	adds	r3, r1, r2
 8021d9c:	4298      	cmp	r0, r3
 8021d9e:	d2f5      	bcs.n	8021d8c <memmove+0x6>
 8021da0:	3a01      	subs	r2, #1
 8021da2:	d200      	bcs.n	8021da6 <memmove+0x20>
 8021da4:	bd10      	pop	{r4, pc}
 8021da6:	5c8b      	ldrb	r3, [r1, r2]
 8021da8:	5483      	strb	r3, [r0, r2]
 8021daa:	e7f9      	b.n	8021da0 <memmove+0x1a>

08021dac <_fstat_r>:
 8021dac:	2300      	movs	r3, #0
 8021dae:	b570      	push	{r4, r5, r6, lr}
 8021db0:	4d06      	ldr	r5, [pc, #24]	@ (8021dcc <_fstat_r+0x20>)
 8021db2:	0004      	movs	r4, r0
 8021db4:	0008      	movs	r0, r1
 8021db6:	0011      	movs	r1, r2
 8021db8:	602b      	str	r3, [r5, #0]
 8021dba:	f7eb f973 	bl	800d0a4 <_fstat>
 8021dbe:	1c43      	adds	r3, r0, #1
 8021dc0:	d103      	bne.n	8021dca <_fstat_r+0x1e>
 8021dc2:	682b      	ldr	r3, [r5, #0]
 8021dc4:	2b00      	cmp	r3, #0
 8021dc6:	d000      	beq.n	8021dca <_fstat_r+0x1e>
 8021dc8:	6023      	str	r3, [r4, #0]
 8021dca:	bd70      	pop	{r4, r5, r6, pc}
 8021dcc:	20003920 	.word	0x20003920

08021dd0 <_isatty_r>:
 8021dd0:	2300      	movs	r3, #0
 8021dd2:	b570      	push	{r4, r5, r6, lr}
 8021dd4:	4d06      	ldr	r5, [pc, #24]	@ (8021df0 <_isatty_r+0x20>)
 8021dd6:	0004      	movs	r4, r0
 8021dd8:	0008      	movs	r0, r1
 8021dda:	602b      	str	r3, [r5, #0]
 8021ddc:	f7eb f970 	bl	800d0c0 <_isatty>
 8021de0:	1c43      	adds	r3, r0, #1
 8021de2:	d103      	bne.n	8021dec <_isatty_r+0x1c>
 8021de4:	682b      	ldr	r3, [r5, #0]
 8021de6:	2b00      	cmp	r3, #0
 8021de8:	d000      	beq.n	8021dec <_isatty_r+0x1c>
 8021dea:	6023      	str	r3, [r4, #0]
 8021dec:	bd70      	pop	{r4, r5, r6, pc}
 8021dee:	46c0      	nop			@ (mov r8, r8)
 8021df0:	20003920 	.word	0x20003920

08021df4 <_sbrk_r>:
 8021df4:	2300      	movs	r3, #0
 8021df6:	b570      	push	{r4, r5, r6, lr}
 8021df8:	4d06      	ldr	r5, [pc, #24]	@ (8021e14 <_sbrk_r+0x20>)
 8021dfa:	0004      	movs	r4, r0
 8021dfc:	0008      	movs	r0, r1
 8021dfe:	602b      	str	r3, [r5, #0]
 8021e00:	f7eb f972 	bl	800d0e8 <_sbrk>
 8021e04:	1c43      	adds	r3, r0, #1
 8021e06:	d103      	bne.n	8021e10 <_sbrk_r+0x1c>
 8021e08:	682b      	ldr	r3, [r5, #0]
 8021e0a:	2b00      	cmp	r3, #0
 8021e0c:	d000      	beq.n	8021e10 <_sbrk_r+0x1c>
 8021e0e:	6023      	str	r3, [r4, #0]
 8021e10:	bd70      	pop	{r4, r5, r6, pc}
 8021e12:	46c0      	nop			@ (mov r8, r8)
 8021e14:	20003920 	.word	0x20003920

08021e18 <__assert_func>:
 8021e18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8021e1a:	0014      	movs	r4, r2
 8021e1c:	001a      	movs	r2, r3
 8021e1e:	4b09      	ldr	r3, [pc, #36]	@ (8021e44 <__assert_func+0x2c>)
 8021e20:	0005      	movs	r5, r0
 8021e22:	681b      	ldr	r3, [r3, #0]
 8021e24:	000e      	movs	r6, r1
 8021e26:	68d8      	ldr	r0, [r3, #12]
 8021e28:	4b07      	ldr	r3, [pc, #28]	@ (8021e48 <__assert_func+0x30>)
 8021e2a:	2c00      	cmp	r4, #0
 8021e2c:	d101      	bne.n	8021e32 <__assert_func+0x1a>
 8021e2e:	4b07      	ldr	r3, [pc, #28]	@ (8021e4c <__assert_func+0x34>)
 8021e30:	001c      	movs	r4, r3
 8021e32:	4907      	ldr	r1, [pc, #28]	@ (8021e50 <__assert_func+0x38>)
 8021e34:	9301      	str	r3, [sp, #4]
 8021e36:	9402      	str	r4, [sp, #8]
 8021e38:	002b      	movs	r3, r5
 8021e3a:	9600      	str	r6, [sp, #0]
 8021e3c:	f000 f866 	bl	8021f0c <fiprintf>
 8021e40:	f000 f874 	bl	8021f2c <abort>
 8021e44:	200003c8 	.word	0x200003c8
 8021e48:	08024c61 	.word	0x08024c61
 8021e4c:	08024c9c 	.word	0x08024c9c
 8021e50:	08024c6e 	.word	0x08024c6e

08021e54 <_calloc_r>:
 8021e54:	b570      	push	{r4, r5, r6, lr}
 8021e56:	0c0b      	lsrs	r3, r1, #16
 8021e58:	0c15      	lsrs	r5, r2, #16
 8021e5a:	2b00      	cmp	r3, #0
 8021e5c:	d11e      	bne.n	8021e9c <_calloc_r+0x48>
 8021e5e:	2d00      	cmp	r5, #0
 8021e60:	d10c      	bne.n	8021e7c <_calloc_r+0x28>
 8021e62:	b289      	uxth	r1, r1
 8021e64:	b294      	uxth	r4, r2
 8021e66:	434c      	muls	r4, r1
 8021e68:	0021      	movs	r1, r4
 8021e6a:	f7fe fe53 	bl	8020b14 <_malloc_r>
 8021e6e:	1e05      	subs	r5, r0, #0
 8021e70:	d01a      	beq.n	8021ea8 <_calloc_r+0x54>
 8021e72:	0022      	movs	r2, r4
 8021e74:	2100      	movs	r1, #0
 8021e76:	f7fd fb0f 	bl	801f498 <memset>
 8021e7a:	e016      	b.n	8021eaa <_calloc_r+0x56>
 8021e7c:	1c2b      	adds	r3, r5, #0
 8021e7e:	1c0c      	adds	r4, r1, #0
 8021e80:	b289      	uxth	r1, r1
 8021e82:	b292      	uxth	r2, r2
 8021e84:	434a      	muls	r2, r1
 8021e86:	b29b      	uxth	r3, r3
 8021e88:	b2a1      	uxth	r1, r4
 8021e8a:	4359      	muls	r1, r3
 8021e8c:	0c14      	lsrs	r4, r2, #16
 8021e8e:	190c      	adds	r4, r1, r4
 8021e90:	0c23      	lsrs	r3, r4, #16
 8021e92:	d107      	bne.n	8021ea4 <_calloc_r+0x50>
 8021e94:	0424      	lsls	r4, r4, #16
 8021e96:	b292      	uxth	r2, r2
 8021e98:	4314      	orrs	r4, r2
 8021e9a:	e7e5      	b.n	8021e68 <_calloc_r+0x14>
 8021e9c:	2d00      	cmp	r5, #0
 8021e9e:	d101      	bne.n	8021ea4 <_calloc_r+0x50>
 8021ea0:	1c14      	adds	r4, r2, #0
 8021ea2:	e7ed      	b.n	8021e80 <_calloc_r+0x2c>
 8021ea4:	230c      	movs	r3, #12
 8021ea6:	6003      	str	r3, [r0, #0]
 8021ea8:	2500      	movs	r5, #0
 8021eaa:	0028      	movs	r0, r5
 8021eac:	bd70      	pop	{r4, r5, r6, pc}

08021eae <_realloc_r>:
 8021eae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021eb0:	0006      	movs	r6, r0
 8021eb2:	000c      	movs	r4, r1
 8021eb4:	0015      	movs	r5, r2
 8021eb6:	2900      	cmp	r1, #0
 8021eb8:	d105      	bne.n	8021ec6 <_realloc_r+0x18>
 8021eba:	0011      	movs	r1, r2
 8021ebc:	f7fe fe2a 	bl	8020b14 <_malloc_r>
 8021ec0:	0004      	movs	r4, r0
 8021ec2:	0020      	movs	r0, r4
 8021ec4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021ec6:	2a00      	cmp	r2, #0
 8021ec8:	d103      	bne.n	8021ed2 <_realloc_r+0x24>
 8021eca:	f7fe fa53 	bl	8020374 <_free_r>
 8021ece:	2400      	movs	r4, #0
 8021ed0:	e7f7      	b.n	8021ec2 <_realloc_r+0x14>
 8021ed2:	f000 f832 	bl	8021f3a <_malloc_usable_size_r>
 8021ed6:	0007      	movs	r7, r0
 8021ed8:	4285      	cmp	r5, r0
 8021eda:	d802      	bhi.n	8021ee2 <_realloc_r+0x34>
 8021edc:	0843      	lsrs	r3, r0, #1
 8021ede:	42ab      	cmp	r3, r5
 8021ee0:	d3ef      	bcc.n	8021ec2 <_realloc_r+0x14>
 8021ee2:	0029      	movs	r1, r5
 8021ee4:	0030      	movs	r0, r6
 8021ee6:	f7fe fe15 	bl	8020b14 <_malloc_r>
 8021eea:	9001      	str	r0, [sp, #4]
 8021eec:	2800      	cmp	r0, #0
 8021eee:	d0ee      	beq.n	8021ece <_realloc_r+0x20>
 8021ef0:	002a      	movs	r2, r5
 8021ef2:	42bd      	cmp	r5, r7
 8021ef4:	d900      	bls.n	8021ef8 <_realloc_r+0x4a>
 8021ef6:	003a      	movs	r2, r7
 8021ef8:	0021      	movs	r1, r4
 8021efa:	9801      	ldr	r0, [sp, #4]
 8021efc:	f7fd fba8 	bl	801f650 <memcpy>
 8021f00:	0021      	movs	r1, r4
 8021f02:	0030      	movs	r0, r6
 8021f04:	f7fe fa36 	bl	8020374 <_free_r>
 8021f08:	9c01      	ldr	r4, [sp, #4]
 8021f0a:	e7da      	b.n	8021ec2 <_realloc_r+0x14>

08021f0c <fiprintf>:
 8021f0c:	b40e      	push	{r1, r2, r3}
 8021f0e:	b517      	push	{r0, r1, r2, r4, lr}
 8021f10:	4c05      	ldr	r4, [pc, #20]	@ (8021f28 <fiprintf+0x1c>)
 8021f12:	ab05      	add	r3, sp, #20
 8021f14:	cb04      	ldmia	r3!, {r2}
 8021f16:	0001      	movs	r1, r0
 8021f18:	6820      	ldr	r0, [r4, #0]
 8021f1a:	9301      	str	r3, [sp, #4]
 8021f1c:	f7ff fcfa 	bl	8021914 <_vfiprintf_r>
 8021f20:	bc1e      	pop	{r1, r2, r3, r4}
 8021f22:	bc08      	pop	{r3}
 8021f24:	b003      	add	sp, #12
 8021f26:	4718      	bx	r3
 8021f28:	200003c8 	.word	0x200003c8

08021f2c <abort>:
 8021f2c:	2006      	movs	r0, #6
 8021f2e:	b510      	push	{r4, lr}
 8021f30:	f000 f834 	bl	8021f9c <raise>
 8021f34:	2001      	movs	r0, #1
 8021f36:	f7eb f881 	bl	800d03c <_exit>

08021f3a <_malloc_usable_size_r>:
 8021f3a:	1f0b      	subs	r3, r1, #4
 8021f3c:	681b      	ldr	r3, [r3, #0]
 8021f3e:	1f18      	subs	r0, r3, #4
 8021f40:	2b00      	cmp	r3, #0
 8021f42:	da01      	bge.n	8021f48 <_malloc_usable_size_r+0xe>
 8021f44:	580b      	ldr	r3, [r1, r0]
 8021f46:	18c0      	adds	r0, r0, r3
 8021f48:	4770      	bx	lr

08021f4a <_raise_r>:
 8021f4a:	b570      	push	{r4, r5, r6, lr}
 8021f4c:	0004      	movs	r4, r0
 8021f4e:	000d      	movs	r5, r1
 8021f50:	291f      	cmp	r1, #31
 8021f52:	d904      	bls.n	8021f5e <_raise_r+0x14>
 8021f54:	2316      	movs	r3, #22
 8021f56:	6003      	str	r3, [r0, #0]
 8021f58:	2001      	movs	r0, #1
 8021f5a:	4240      	negs	r0, r0
 8021f5c:	bd70      	pop	{r4, r5, r6, pc}
 8021f5e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8021f60:	2b00      	cmp	r3, #0
 8021f62:	d004      	beq.n	8021f6e <_raise_r+0x24>
 8021f64:	008a      	lsls	r2, r1, #2
 8021f66:	189b      	adds	r3, r3, r2
 8021f68:	681a      	ldr	r2, [r3, #0]
 8021f6a:	2a00      	cmp	r2, #0
 8021f6c:	d108      	bne.n	8021f80 <_raise_r+0x36>
 8021f6e:	0020      	movs	r0, r4
 8021f70:	f000 f830 	bl	8021fd4 <_getpid_r>
 8021f74:	002a      	movs	r2, r5
 8021f76:	0001      	movs	r1, r0
 8021f78:	0020      	movs	r0, r4
 8021f7a:	f000 f819 	bl	8021fb0 <_kill_r>
 8021f7e:	e7ed      	b.n	8021f5c <_raise_r+0x12>
 8021f80:	2a01      	cmp	r2, #1
 8021f82:	d009      	beq.n	8021f98 <_raise_r+0x4e>
 8021f84:	1c51      	adds	r1, r2, #1
 8021f86:	d103      	bne.n	8021f90 <_raise_r+0x46>
 8021f88:	2316      	movs	r3, #22
 8021f8a:	6003      	str	r3, [r0, #0]
 8021f8c:	2001      	movs	r0, #1
 8021f8e:	e7e5      	b.n	8021f5c <_raise_r+0x12>
 8021f90:	2100      	movs	r1, #0
 8021f92:	0028      	movs	r0, r5
 8021f94:	6019      	str	r1, [r3, #0]
 8021f96:	4790      	blx	r2
 8021f98:	2000      	movs	r0, #0
 8021f9a:	e7df      	b.n	8021f5c <_raise_r+0x12>

08021f9c <raise>:
 8021f9c:	b510      	push	{r4, lr}
 8021f9e:	4b03      	ldr	r3, [pc, #12]	@ (8021fac <raise+0x10>)
 8021fa0:	0001      	movs	r1, r0
 8021fa2:	6818      	ldr	r0, [r3, #0]
 8021fa4:	f7ff ffd1 	bl	8021f4a <_raise_r>
 8021fa8:	bd10      	pop	{r4, pc}
 8021faa:	46c0      	nop			@ (mov r8, r8)
 8021fac:	200003c8 	.word	0x200003c8

08021fb0 <_kill_r>:
 8021fb0:	2300      	movs	r3, #0
 8021fb2:	b570      	push	{r4, r5, r6, lr}
 8021fb4:	4d06      	ldr	r5, [pc, #24]	@ (8021fd0 <_kill_r+0x20>)
 8021fb6:	0004      	movs	r4, r0
 8021fb8:	0008      	movs	r0, r1
 8021fba:	0011      	movs	r1, r2
 8021fbc:	602b      	str	r3, [r5, #0]
 8021fbe:	f7eb f82d 	bl	800d01c <_kill>
 8021fc2:	1c43      	adds	r3, r0, #1
 8021fc4:	d103      	bne.n	8021fce <_kill_r+0x1e>
 8021fc6:	682b      	ldr	r3, [r5, #0]
 8021fc8:	2b00      	cmp	r3, #0
 8021fca:	d000      	beq.n	8021fce <_kill_r+0x1e>
 8021fcc:	6023      	str	r3, [r4, #0]
 8021fce:	bd70      	pop	{r4, r5, r6, pc}
 8021fd0:	20003920 	.word	0x20003920

08021fd4 <_getpid_r>:
 8021fd4:	b510      	push	{r4, lr}
 8021fd6:	f7eb f81b 	bl	800d010 <_getpid>
 8021fda:	bd10      	pop	{r4, pc}

08021fdc <expf>:
 8021fdc:	b570      	push	{r4, r5, r6, lr}
 8021fde:	1c04      	adds	r4, r0, #0
 8021fe0:	f000 f8e6 	bl	80221b0 <__ieee754_expf>
 8021fe4:	1c05      	adds	r5, r0, #0
 8021fe6:	1c20      	adds	r0, r4, #0
 8021fe8:	f000 f83c 	bl	8022064 <finitef>
 8021fec:	2800      	cmp	r0, #0
 8021fee:	d00b      	beq.n	8022008 <expf+0x2c>
 8021ff0:	490c      	ldr	r1, [pc, #48]	@ (8022024 <expf+0x48>)
 8021ff2:	1c20      	adds	r0, r4, #0
 8021ff4:	f7de fab0 	bl	8000558 <__aeabi_fcmpgt>
 8021ff8:	2800      	cmp	r0, #0
 8021ffa:	d007      	beq.n	802200c <expf+0x30>
 8021ffc:	f7fd faf0 	bl	801f5e0 <__errno>
 8022000:	25ff      	movs	r5, #255	@ 0xff
 8022002:	2322      	movs	r3, #34	@ 0x22
 8022004:	05ed      	lsls	r5, r5, #23
 8022006:	6003      	str	r3, [r0, #0]
 8022008:	1c28      	adds	r0, r5, #0
 802200a:	bd70      	pop	{r4, r5, r6, pc}
 802200c:	4906      	ldr	r1, [pc, #24]	@ (8022028 <expf+0x4c>)
 802200e:	1c20      	adds	r0, r4, #0
 8022010:	f7de fa8e 	bl	8000530 <__aeabi_fcmplt>
 8022014:	2800      	cmp	r0, #0
 8022016:	d0f7      	beq.n	8022008 <expf+0x2c>
 8022018:	f7fd fae2 	bl	801f5e0 <__errno>
 802201c:	2322      	movs	r3, #34	@ 0x22
 802201e:	2500      	movs	r5, #0
 8022020:	6003      	str	r3, [r0, #0]
 8022022:	e7f1      	b.n	8022008 <expf+0x2c>
 8022024:	42b17217 	.word	0x42b17217
 8022028:	c2cff1b5 	.word	0xc2cff1b5

0802202c <sqrtf>:
 802202c:	b570      	push	{r4, r5, r6, lr}
 802202e:	1c05      	adds	r5, r0, #0
 8022030:	f000 f822 	bl	8022078 <__ieee754_sqrtf>
 8022034:	1c29      	adds	r1, r5, #0
 8022036:	1c04      	adds	r4, r0, #0
 8022038:	1c28      	adds	r0, r5, #0
 802203a:	f7df fa93 	bl	8001564 <__aeabi_fcmpun>
 802203e:	2800      	cmp	r0, #0
 8022040:	d10e      	bne.n	8022060 <sqrtf+0x34>
 8022042:	2100      	movs	r1, #0
 8022044:	1c28      	adds	r0, r5, #0
 8022046:	f7de fa73 	bl	8000530 <__aeabi_fcmplt>
 802204a:	2800      	cmp	r0, #0
 802204c:	d008      	beq.n	8022060 <sqrtf+0x34>
 802204e:	f7fd fac7 	bl	801f5e0 <__errno>
 8022052:	2321      	movs	r3, #33	@ 0x21
 8022054:	2100      	movs	r1, #0
 8022056:	6003      	str	r3, [r0, #0]
 8022058:	1c08      	adds	r0, r1, #0
 802205a:	f7de fdbb 	bl	8000bd4 <__aeabi_fdiv>
 802205e:	1c04      	adds	r4, r0, #0
 8022060:	1c20      	adds	r0, r4, #0
 8022062:	bd70      	pop	{r4, r5, r6, pc}

08022064 <finitef>:
 8022064:	22ff      	movs	r2, #255	@ 0xff
 8022066:	0043      	lsls	r3, r0, #1
 8022068:	085b      	lsrs	r3, r3, #1
 802206a:	2001      	movs	r0, #1
 802206c:	05d2      	lsls	r2, r2, #23
 802206e:	4293      	cmp	r3, r2
 8022070:	db00      	blt.n	8022074 <finitef+0x10>
 8022072:	2000      	movs	r0, #0
 8022074:	4770      	bx	lr
	...

08022078 <__ieee754_sqrtf>:
 8022078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802207a:	0003      	movs	r3, r0
 802207c:	0042      	lsls	r2, r0, #1
 802207e:	1c04      	adds	r4, r0, #0
 8022080:	20ff      	movs	r0, #255	@ 0xff
 8022082:	0852      	lsrs	r2, r2, #1
 8022084:	05c0      	lsls	r0, r0, #23
 8022086:	4282      	cmp	r2, r0
 8022088:	d30a      	bcc.n	80220a0 <__ieee754_sqrtf+0x28>
 802208a:	1c21      	adds	r1, r4, #0
 802208c:	1c20      	adds	r0, r4, #0
 802208e:	f7de ff87 	bl	8000fa0 <__aeabi_fmul>
 8022092:	1c01      	adds	r1, r0, #0
 8022094:	1c20      	adds	r0, r4, #0
 8022096:	f7de fc13 	bl	80008c0 <__aeabi_fadd>
 802209a:	1c04      	adds	r4, r0, #0
 802209c:	1c20      	adds	r0, r4, #0
 802209e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80220a0:	2a00      	cmp	r2, #0
 80220a2:	d0fb      	beq.n	802209c <__ieee754_sqrtf+0x24>
 80220a4:	2c00      	cmp	r4, #0
 80220a6:	da07      	bge.n	80220b8 <__ieee754_sqrtf+0x40>
 80220a8:	1c21      	adds	r1, r4, #0
 80220aa:	1c20      	adds	r0, r4, #0
 80220ac:	f7df f8b6 	bl	800121c <__aeabi_fsub>
 80220b0:	1c01      	adds	r1, r0, #0
 80220b2:	f7de fd8f 	bl	8000bd4 <__aeabi_fdiv>
 80220b6:	e7f0      	b.n	802209a <__ieee754_sqrtf+0x22>
 80220b8:	0022      	movs	r2, r4
 80220ba:	15e1      	asrs	r1, r4, #23
 80220bc:	4002      	ands	r2, r0
 80220be:	4204      	tst	r4, r0
 80220c0:	d046      	beq.n	8022150 <__ieee754_sqrtf+0xd8>
 80220c2:	2280      	movs	r2, #128	@ 0x80
 80220c4:	000f      	movs	r7, r1
 80220c6:	025b      	lsls	r3, r3, #9
 80220c8:	0a5b      	lsrs	r3, r3, #9
 80220ca:	0412      	lsls	r2, r2, #16
 80220cc:	3f7f      	subs	r7, #127	@ 0x7f
 80220ce:	4313      	orrs	r3, r2
 80220d0:	07c9      	lsls	r1, r1, #31
 80220d2:	d400      	bmi.n	80220d6 <__ieee754_sqrtf+0x5e>
 80220d4:	005b      	lsls	r3, r3, #1
 80220d6:	2400      	movs	r4, #0
 80220d8:	2180      	movs	r1, #128	@ 0x80
 80220da:	2019      	movs	r0, #25
 80220dc:	0026      	movs	r6, r4
 80220de:	107f      	asrs	r7, r7, #1
 80220e0:	005b      	lsls	r3, r3, #1
 80220e2:	0449      	lsls	r1, r1, #17
 80220e4:	1875      	adds	r5, r6, r1
 80220e6:	001a      	movs	r2, r3
 80220e8:	429d      	cmp	r5, r3
 80220ea:	dc02      	bgt.n	80220f2 <__ieee754_sqrtf+0x7a>
 80220ec:	186e      	adds	r6, r5, r1
 80220ee:	1b5a      	subs	r2, r3, r5
 80220f0:	1864      	adds	r4, r4, r1
 80220f2:	3801      	subs	r0, #1
 80220f4:	0053      	lsls	r3, r2, #1
 80220f6:	0849      	lsrs	r1, r1, #1
 80220f8:	2800      	cmp	r0, #0
 80220fa:	d1f3      	bne.n	80220e4 <__ieee754_sqrtf+0x6c>
 80220fc:	2a00      	cmp	r2, #0
 80220fe:	d019      	beq.n	8022134 <__ieee754_sqrtf+0xbc>
 8022100:	4d17      	ldr	r5, [pc, #92]	@ (8022160 <__ieee754_sqrtf+0xe8>)
 8022102:	4e18      	ldr	r6, [pc, #96]	@ (8022164 <__ieee754_sqrtf+0xec>)
 8022104:	6828      	ldr	r0, [r5, #0]
 8022106:	6831      	ldr	r1, [r6, #0]
 8022108:	682b      	ldr	r3, [r5, #0]
 802210a:	9301      	str	r3, [sp, #4]
 802210c:	f7df f886 	bl	800121c <__aeabi_fsub>
 8022110:	1c01      	adds	r1, r0, #0
 8022112:	9801      	ldr	r0, [sp, #4]
 8022114:	f7de fa16 	bl	8000544 <__aeabi_fcmple>
 8022118:	2800      	cmp	r0, #0
 802211a:	d00b      	beq.n	8022134 <__ieee754_sqrtf+0xbc>
 802211c:	6828      	ldr	r0, [r5, #0]
 802211e:	6831      	ldr	r1, [r6, #0]
 8022120:	f7de fbce 	bl	80008c0 <__aeabi_fadd>
 8022124:	682d      	ldr	r5, [r5, #0]
 8022126:	1c01      	adds	r1, r0, #0
 8022128:	1c28      	adds	r0, r5, #0
 802212a:	f7de fa01 	bl	8000530 <__aeabi_fcmplt>
 802212e:	2800      	cmp	r0, #0
 8022130:	d011      	beq.n	8022156 <__ieee754_sqrtf+0xde>
 8022132:	3402      	adds	r4, #2
 8022134:	23fc      	movs	r3, #252	@ 0xfc
 8022136:	1064      	asrs	r4, r4, #1
 8022138:	059b      	lsls	r3, r3, #22
 802213a:	18e3      	adds	r3, r4, r3
 802213c:	05fc      	lsls	r4, r7, #23
 802213e:	18e4      	adds	r4, r4, r3
 8022140:	e7ac      	b.n	802209c <__ieee754_sqrtf+0x24>
 8022142:	005b      	lsls	r3, r3, #1
 8022144:	3201      	adds	r2, #1
 8022146:	4203      	tst	r3, r0
 8022148:	d0fb      	beq.n	8022142 <__ieee754_sqrtf+0xca>
 802214a:	3a01      	subs	r2, #1
 802214c:	1a89      	subs	r1, r1, r2
 802214e:	e7b8      	b.n	80220c2 <__ieee754_sqrtf+0x4a>
 8022150:	2080      	movs	r0, #128	@ 0x80
 8022152:	0400      	lsls	r0, r0, #16
 8022154:	e7f7      	b.n	8022146 <__ieee754_sqrtf+0xce>
 8022156:	2301      	movs	r3, #1
 8022158:	3401      	adds	r4, #1
 802215a:	439c      	bics	r4, r3
 802215c:	e7ea      	b.n	8022134 <__ieee754_sqrtf+0xbc>
 802215e:	46c0      	nop			@ (mov r8, r8)
 8022160:	2000041c 	.word	0x2000041c
 8022164:	20000418 	.word	0x20000418

08022168 <roundf>:
 8022168:	0dc3      	lsrs	r3, r0, #23
 802216a:	b2db      	uxtb	r3, r3
 802216c:	3b7f      	subs	r3, #127	@ 0x7f
 802216e:	0002      	movs	r2, r0
 8022170:	b510      	push	{r4, lr}
 8022172:	2b16      	cmp	r3, #22
 8022174:	dc13      	bgt.n	802219e <roundf+0x36>
 8022176:	2b00      	cmp	r3, #0
 8022178:	da07      	bge.n	802218a <roundf+0x22>
 802217a:	0fc2      	lsrs	r2, r0, #31
 802217c:	07d0      	lsls	r0, r2, #31
 802217e:	3301      	adds	r3, #1
 8022180:	d102      	bne.n	8022188 <roundf+0x20>
 8022182:	23fe      	movs	r3, #254	@ 0xfe
 8022184:	059b      	lsls	r3, r3, #22
 8022186:	4318      	orrs	r0, r3
 8022188:	bd10      	pop	{r4, pc}
 802218a:	4908      	ldr	r1, [pc, #32]	@ (80221ac <roundf+0x44>)
 802218c:	4119      	asrs	r1, r3
 802218e:	4208      	tst	r0, r1
 8022190:	d0fa      	beq.n	8022188 <roundf+0x20>
 8022192:	2080      	movs	r0, #128	@ 0x80
 8022194:	03c0      	lsls	r0, r0, #15
 8022196:	4118      	asrs	r0, r3
 8022198:	1880      	adds	r0, r0, r2
 802219a:	4388      	bics	r0, r1
 802219c:	e7f4      	b.n	8022188 <roundf+0x20>
 802219e:	2b80      	cmp	r3, #128	@ 0x80
 80221a0:	d1f2      	bne.n	8022188 <roundf+0x20>
 80221a2:	1c01      	adds	r1, r0, #0
 80221a4:	f7de fb8c 	bl	80008c0 <__aeabi_fadd>
 80221a8:	e7ee      	b.n	8022188 <roundf+0x20>
 80221aa:	46c0      	nop			@ (mov r8, r8)
 80221ac:	007fffff 	.word	0x007fffff

080221b0 <__ieee754_expf>:
 80221b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80221b2:	21ff      	movs	r1, #255	@ 0xff
 80221b4:	0043      	lsls	r3, r0, #1
 80221b6:	1c04      	adds	r4, r0, #0
 80221b8:	085b      	lsrs	r3, r3, #1
 80221ba:	05c9      	lsls	r1, r1, #23
 80221bc:	428b      	cmp	r3, r1
 80221be:	d904      	bls.n	80221ca <__ieee754_expf+0x1a>
 80221c0:	1c01      	adds	r1, r0, #0
 80221c2:	1c20      	adds	r0, r4, #0
 80221c4:	f7de fb7c 	bl	80008c0 <__aeabi_fadd>
 80221c8:	e00d      	b.n	80221e6 <__ieee754_expf+0x36>
 80221ca:	0fc6      	lsrs	r6, r0, #31
 80221cc:	428b      	cmp	r3, r1
 80221ce:	d104      	bne.n	80221da <__ieee754_expf+0x2a>
 80221d0:	2e00      	cmp	r6, #0
 80221d2:	d000      	beq.n	80221d6 <__ieee754_expf+0x26>
 80221d4:	e0ba      	b.n	802234c <__ieee754_expf+0x19c>
 80221d6:	1c20      	adds	r0, r4, #0
 80221d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80221da:	495d      	ldr	r1, [pc, #372]	@ (8022350 <__ieee754_expf+0x1a0>)
 80221dc:	4288      	cmp	r0, r1
 80221de:	dd04      	ble.n	80221ea <__ieee754_expf+0x3a>
 80221e0:	2000      	movs	r0, #0
 80221e2:	f000 f8f1 	bl	80223c8 <__math_oflowf>
 80221e6:	1c04      	adds	r4, r0, #0
 80221e8:	e7f5      	b.n	80221d6 <__ieee754_expf+0x26>
 80221ea:	2800      	cmp	r0, #0
 80221ec:	da06      	bge.n	80221fc <__ieee754_expf+0x4c>
 80221ee:	4a59      	ldr	r2, [pc, #356]	@ (8022354 <__ieee754_expf+0x1a4>)
 80221f0:	4293      	cmp	r3, r2
 80221f2:	d903      	bls.n	80221fc <__ieee754_expf+0x4c>
 80221f4:	2000      	movs	r0, #0
 80221f6:	f000 f8e1 	bl	80223bc <__math_uflowf>
 80221fa:	e7f4      	b.n	80221e6 <__ieee754_expf+0x36>
 80221fc:	4a56      	ldr	r2, [pc, #344]	@ (8022358 <__ieee754_expf+0x1a8>)
 80221fe:	4293      	cmp	r3, r2
 8022200:	d96e      	bls.n	80222e0 <__ieee754_expf+0x130>
 8022202:	4a56      	ldr	r2, [pc, #344]	@ (802235c <__ieee754_expf+0x1ac>)
 8022204:	00b5      	lsls	r5, r6, #2
 8022206:	4293      	cmp	r3, r2
 8022208:	d84e      	bhi.n	80222a8 <__ieee754_expf+0xf8>
 802220a:	4b55      	ldr	r3, [pc, #340]	@ (8022360 <__ieee754_expf+0x1b0>)
 802220c:	1c20      	adds	r0, r4, #0
 802220e:	5959      	ldr	r1, [r3, r5]
 8022210:	f7df f804 	bl	800121c <__aeabi_fsub>
 8022214:	4b53      	ldr	r3, [pc, #332]	@ (8022364 <__ieee754_expf+0x1b4>)
 8022216:	1c07      	adds	r7, r0, #0
 8022218:	595b      	ldr	r3, [r3, r5]
 802221a:	2501      	movs	r5, #1
 802221c:	1bad      	subs	r5, r5, r6
 802221e:	9300      	str	r3, [sp, #0]
 8022220:	1bad      	subs	r5, r5, r6
 8022222:	9900      	ldr	r1, [sp, #0]
 8022224:	1c38      	adds	r0, r7, #0
 8022226:	f7de fff9 	bl	800121c <__aeabi_fsub>
 802222a:	1c04      	adds	r4, r0, #0
 802222c:	1c21      	adds	r1, r4, #0
 802222e:	1c20      	adds	r0, r4, #0
 8022230:	f7de feb6 	bl	8000fa0 <__aeabi_fmul>
 8022234:	494c      	ldr	r1, [pc, #304]	@ (8022368 <__ieee754_expf+0x1b8>)
 8022236:	1c06      	adds	r6, r0, #0
 8022238:	f7de feb2 	bl	8000fa0 <__aeabi_fmul>
 802223c:	494b      	ldr	r1, [pc, #300]	@ (802236c <__ieee754_expf+0x1bc>)
 802223e:	f7de ffed 	bl	800121c <__aeabi_fsub>
 8022242:	1c31      	adds	r1, r6, #0
 8022244:	f7de feac 	bl	8000fa0 <__aeabi_fmul>
 8022248:	4949      	ldr	r1, [pc, #292]	@ (8022370 <__ieee754_expf+0x1c0>)
 802224a:	f7de fb39 	bl	80008c0 <__aeabi_fadd>
 802224e:	1c31      	adds	r1, r6, #0
 8022250:	f7de fea6 	bl	8000fa0 <__aeabi_fmul>
 8022254:	4947      	ldr	r1, [pc, #284]	@ (8022374 <__ieee754_expf+0x1c4>)
 8022256:	f7de ffe1 	bl	800121c <__aeabi_fsub>
 802225a:	1c31      	adds	r1, r6, #0
 802225c:	f7de fea0 	bl	8000fa0 <__aeabi_fmul>
 8022260:	4945      	ldr	r1, [pc, #276]	@ (8022378 <__ieee754_expf+0x1c8>)
 8022262:	f7de fb2d 	bl	80008c0 <__aeabi_fadd>
 8022266:	1c31      	adds	r1, r6, #0
 8022268:	f7de fe9a 	bl	8000fa0 <__aeabi_fmul>
 802226c:	1c01      	adds	r1, r0, #0
 802226e:	1c20      	adds	r0, r4, #0
 8022270:	f7de ffd4 	bl	800121c <__aeabi_fsub>
 8022274:	1c01      	adds	r1, r0, #0
 8022276:	1c06      	adds	r6, r0, #0
 8022278:	1c20      	adds	r0, r4, #0
 802227a:	f7de fe91 	bl	8000fa0 <__aeabi_fmul>
 802227e:	9001      	str	r0, [sp, #4]
 8022280:	2d00      	cmp	r5, #0
 8022282:	d140      	bne.n	8022306 <__ieee754_expf+0x156>
 8022284:	2180      	movs	r1, #128	@ 0x80
 8022286:	1c30      	adds	r0, r6, #0
 8022288:	05c9      	lsls	r1, r1, #23
 802228a:	f7de ffc7 	bl	800121c <__aeabi_fsub>
 802228e:	1c01      	adds	r1, r0, #0
 8022290:	9801      	ldr	r0, [sp, #4]
 8022292:	f7de fc9f 	bl	8000bd4 <__aeabi_fdiv>
 8022296:	1c21      	adds	r1, r4, #0
 8022298:	f7de ffc0 	bl	800121c <__aeabi_fsub>
 802229c:	1c01      	adds	r1, r0, #0
 802229e:	20fe      	movs	r0, #254	@ 0xfe
 80222a0:	0580      	lsls	r0, r0, #22
 80222a2:	f7de ffbb 	bl	800121c <__aeabi_fsub>
 80222a6:	e79e      	b.n	80221e6 <__ieee754_expf+0x36>
 80222a8:	4934      	ldr	r1, [pc, #208]	@ (802237c <__ieee754_expf+0x1cc>)
 80222aa:	1c20      	adds	r0, r4, #0
 80222ac:	f7de fe78 	bl	8000fa0 <__aeabi_fmul>
 80222b0:	4b33      	ldr	r3, [pc, #204]	@ (8022380 <__ieee754_expf+0x1d0>)
 80222b2:	5959      	ldr	r1, [r3, r5]
 80222b4:	f7de fb04 	bl	80008c0 <__aeabi_fadd>
 80222b8:	f7df f96a 	bl	8001590 <__aeabi_f2iz>
 80222bc:	0005      	movs	r5, r0
 80222be:	f7df f987 	bl	80015d0 <__aeabi_i2f>
 80222c2:	4930      	ldr	r1, [pc, #192]	@ (8022384 <__ieee754_expf+0x1d4>)
 80222c4:	1c06      	adds	r6, r0, #0
 80222c6:	f7de fe6b 	bl	8000fa0 <__aeabi_fmul>
 80222ca:	1c01      	adds	r1, r0, #0
 80222cc:	1c20      	adds	r0, r4, #0
 80222ce:	f7de ffa5 	bl	800121c <__aeabi_fsub>
 80222d2:	492d      	ldr	r1, [pc, #180]	@ (8022388 <__ieee754_expf+0x1d8>)
 80222d4:	1c07      	adds	r7, r0, #0
 80222d6:	1c30      	adds	r0, r6, #0
 80222d8:	f7de fe62 	bl	8000fa0 <__aeabi_fmul>
 80222dc:	9000      	str	r0, [sp, #0]
 80222de:	e7a0      	b.n	8022222 <__ieee754_expf+0x72>
 80222e0:	22d0      	movs	r2, #208	@ 0xd0
 80222e2:	0592      	lsls	r2, r2, #22
 80222e4:	4293      	cmp	r3, r2
 80222e6:	d20c      	bcs.n	8022302 <__ieee754_expf+0x152>
 80222e8:	4928      	ldr	r1, [pc, #160]	@ (802238c <__ieee754_expf+0x1dc>)
 80222ea:	1c20      	adds	r0, r4, #0
 80222ec:	f7de fae8 	bl	80008c0 <__aeabi_fadd>
 80222f0:	21fe      	movs	r1, #254	@ 0xfe
 80222f2:	0589      	lsls	r1, r1, #22
 80222f4:	f7de f930 	bl	8000558 <__aeabi_fcmpgt>
 80222f8:	1e05      	subs	r5, r0, #0
 80222fa:	d097      	beq.n	802222c <__ieee754_expf+0x7c>
 80222fc:	21fe      	movs	r1, #254	@ 0xfe
 80222fe:	0589      	lsls	r1, r1, #22
 8022300:	e75f      	b.n	80221c2 <__ieee754_expf+0x12>
 8022302:	2500      	movs	r5, #0
 8022304:	e792      	b.n	802222c <__ieee754_expf+0x7c>
 8022306:	2080      	movs	r0, #128	@ 0x80
 8022308:	1c31      	adds	r1, r6, #0
 802230a:	05c0      	lsls	r0, r0, #23
 802230c:	f7de ff86 	bl	800121c <__aeabi_fsub>
 8022310:	1c01      	adds	r1, r0, #0
 8022312:	9801      	ldr	r0, [sp, #4]
 8022314:	f7de fc5e 	bl	8000bd4 <__aeabi_fdiv>
 8022318:	1c01      	adds	r1, r0, #0
 802231a:	9800      	ldr	r0, [sp, #0]
 802231c:	f7de ff7e 	bl	800121c <__aeabi_fsub>
 8022320:	1c39      	adds	r1, r7, #0
 8022322:	f7de ff7b 	bl	800121c <__aeabi_fsub>
 8022326:	1c01      	adds	r1, r0, #0
 8022328:	20fe      	movs	r0, #254	@ 0xfe
 802232a:	0580      	lsls	r0, r0, #22
 802232c:	f7de ff76 	bl	800121c <__aeabi_fsub>
 8022330:	002b      	movs	r3, r5
 8022332:	337d      	adds	r3, #125	@ 0x7d
 8022334:	db02      	blt.n	802233c <__ieee754_expf+0x18c>
 8022336:	05ec      	lsls	r4, r5, #23
 8022338:	1824      	adds	r4, r4, r0
 802233a:	e74c      	b.n	80221d6 <__ieee754_expf+0x26>
 802233c:	21d8      	movs	r1, #216	@ 0xd8
 802233e:	3564      	adds	r5, #100	@ 0x64
 8022340:	05ed      	lsls	r5, r5, #23
 8022342:	1828      	adds	r0, r5, r0
 8022344:	0509      	lsls	r1, r1, #20
 8022346:	f7de fe2b 	bl	8000fa0 <__aeabi_fmul>
 802234a:	e74c      	b.n	80221e6 <__ieee754_expf+0x36>
 802234c:	2400      	movs	r4, #0
 802234e:	e742      	b.n	80221d6 <__ieee754_expf+0x26>
 8022350:	42b17217 	.word	0x42b17217
 8022354:	42cff1b5 	.word	0x42cff1b5
 8022358:	3eb17218 	.word	0x3eb17218
 802235c:	3f851591 	.word	0x3f851591
 8022360:	08024ca8 	.word	0x08024ca8
 8022364:	08024ca0 	.word	0x08024ca0
 8022368:	3331bb4c 	.word	0x3331bb4c
 802236c:	35ddea0e 	.word	0x35ddea0e
 8022370:	388ab355 	.word	0x388ab355
 8022374:	3b360b61 	.word	0x3b360b61
 8022378:	3e2aaaab 	.word	0x3e2aaaab
 802237c:	3fb8aa3b 	.word	0x3fb8aa3b
 8022380:	08024cb0 	.word	0x08024cb0
 8022384:	3f317180 	.word	0x3f317180
 8022388:	3717f7d1 	.word	0x3717f7d1
 802238c:	7149f2ca 	.word	0x7149f2ca

08022390 <with_errnof>:
 8022390:	b570      	push	{r4, r5, r6, lr}
 8022392:	000d      	movs	r5, r1
 8022394:	1c04      	adds	r4, r0, #0
 8022396:	f7fd f923 	bl	801f5e0 <__errno>
 802239a:	6005      	str	r5, [r0, #0]
 802239c:	1c20      	adds	r0, r4, #0
 802239e:	bd70      	pop	{r4, r5, r6, pc}

080223a0 <xflowf>:
 80223a0:	b510      	push	{r4, lr}
 80223a2:	1c0b      	adds	r3, r1, #0
 80223a4:	2800      	cmp	r0, #0
 80223a6:	d002      	beq.n	80223ae <xflowf+0xe>
 80223a8:	2380      	movs	r3, #128	@ 0x80
 80223aa:	061b      	lsls	r3, r3, #24
 80223ac:	18cb      	adds	r3, r1, r3
 80223ae:	1c18      	adds	r0, r3, #0
 80223b0:	f7de fdf6 	bl	8000fa0 <__aeabi_fmul>
 80223b4:	2122      	movs	r1, #34	@ 0x22
 80223b6:	f7ff ffeb 	bl	8022390 <with_errnof>
 80223ba:	bd10      	pop	{r4, pc}

080223bc <__math_uflowf>:
 80223bc:	2180      	movs	r1, #128	@ 0x80
 80223be:	b510      	push	{r4, lr}
 80223c0:	0549      	lsls	r1, r1, #21
 80223c2:	f7ff ffed 	bl	80223a0 <xflowf>
 80223c6:	bd10      	pop	{r4, pc}

080223c8 <__math_oflowf>:
 80223c8:	21e0      	movs	r1, #224	@ 0xe0
 80223ca:	b510      	push	{r4, lr}
 80223cc:	05c9      	lsls	r1, r1, #23
 80223ce:	f7ff ffe7 	bl	80223a0 <xflowf>
 80223d2:	bd10      	pop	{r4, pc}

080223d4 <_init>:
 80223d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80223d6:	46c0      	nop			@ (mov r8, r8)
 80223d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80223da:	bc08      	pop	{r3}
 80223dc:	469e      	mov	lr, r3
 80223de:	4770      	bx	lr

080223e0 <_fini>:
 80223e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80223e2:	46c0      	nop			@ (mov r8, r8)
 80223e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80223e6:	bc08      	pop	{r3}
 80223e8:	469e      	mov	lr, r3
 80223ea:	4770      	bx	lr
