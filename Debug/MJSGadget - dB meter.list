
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a71c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004be8  0802a7e0  0802a7e0  0002b7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f3c8  0802f3c8  0003143c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802f3c8  0802f3c8  000303c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f3d0  0802f3d0  0003143c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f3d0  0802f3d0  000303d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802f3d4  0802f3d4  000303d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000043c  20000000  0802f3d8  00031000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003490  2000043c  0802f814  0003143c  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200038cc  0802f814  000318cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003143c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036f14  00000000  00000000  00031464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009dde  00000000  00000000  00068378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dd0  00000000  00000000  00072158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002226  00000000  00000000  00074f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245d1  00000000  00000000  0007714e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046a2c  00000000  00000000  0009b71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a355e  00000000  00000000  000e214b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  001856a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc60  00000000  00000000  0018575c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001913bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00191429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  001939a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000043c 	.word	0x2000043c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0802a7c4 	.word	0x0802a7c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000440 	.word	0x20000440
 8000104:	0802a7c4 	.word	0x0802a7c4

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f9e9 	bl	8002878 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f002 f92d 	bl	8002710 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f9db 	bl	8002878 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f9d1 	bl	8002878 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f002 f957 	bl	8002798 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f002 f94d 	bl	8002798 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fd4b 	bl	8000fb0 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fcd3 	bl	8000ed0 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fd3d 	bl	8000fb0 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fd33 	bl	8000fb0 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fce1 	bl	8000f20 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fcd7 	bl	8000f20 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f001 f8db 	bl	80017e8 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fe5b 	bl	80012f4 <__aeabi_fsub>
 800063e:	f001 f8d3 	bl	80017e8 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f003 f889 	bl	8003778 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 fc56 	bl	8002f20 <__aeabi_dsub>
 8000674:	f003 f880 	bl	8003778 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f002 f943 	bl	8002954 <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f003 f8ba 	bl	800384c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f002 f93a 	bl	8002954 <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fc1a 	bl	8002f20 <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f003 f875 	bl	80037f0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f002 f923 	bl	8002954 <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f003 f89a 	bl	800384c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f001 f91a 	bl	8001954 <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f003 f98c 	bl	8003a64 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f003 f987 	bl	8003a64 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	024b      	lsls	r3, r1, #9
 80008c4:	0a5a      	lsrs	r2, r3, #9
 80008c6:	4694      	mov	ip, r2
 80008c8:	004a      	lsls	r2, r1, #1
 80008ca:	0fc9      	lsrs	r1, r1, #31
 80008cc:	46ce      	mov	lr, r9
 80008ce:	4647      	mov	r7, r8
 80008d0:	4689      	mov	r9, r1
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	0246      	lsls	r6, r0, #9
 80008d6:	0e2d      	lsrs	r5, r5, #24
 80008d8:	0e12      	lsrs	r2, r2, #24
 80008da:	b580      	push	{r7, lr}
 80008dc:	0999      	lsrs	r1, r3, #6
 80008de:	0a77      	lsrs	r7, r6, #9
 80008e0:	0fc4      	lsrs	r4, r0, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1aab      	subs	r3, r5, r2
 80008e6:	454c      	cmp	r4, r9
 80008e8:	d020      	beq.n	800092c <__aeabi_fadd+0x6c>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd0c      	ble.n	8000908 <__aeabi_fadd+0x48>
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d134      	bne.n	800095c <__aeabi_fadd+0x9c>
 80008f2:	2900      	cmp	r1, #0
 80008f4:	d02a      	beq.n	800094c <__aeabi_fadd+0x8c>
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_fadd+0x3e>
 80008fc:	e08f      	b.n	8000a1e <__aeabi_fadd+0x15e>
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d100      	bne.n	8000904 <__aeabi_fadd+0x44>
 8000902:	e0cd      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000904:	0013      	movs	r3, r2
 8000906:	e02f      	b.n	8000968 <__aeabi_fadd+0xa8>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d060      	beq.n	80009ce <__aeabi_fadd+0x10e>
 800090c:	1b53      	subs	r3, r2, r5
 800090e:	2d00      	cmp	r5, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x54>
 8000912:	e0ee      	b.n	8000af2 <__aeabi_fadd+0x232>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x5a>
 8000918:	e13e      	b.n	8000b98 <__aeabi_fadd+0x2d8>
 800091a:	1e5c      	subs	r4, r3, #1
 800091c:	2b01      	cmp	r3, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_fadd+0x62>
 8000920:	e16b      	b.n	8000bfa <__aeabi_fadd+0x33a>
 8000922:	2bff      	cmp	r3, #255	@ 0xff
 8000924:	d100      	bne.n	8000928 <__aeabi_fadd+0x68>
 8000926:	e0b9      	b.n	8000a9c <__aeabi_fadd+0x1dc>
 8000928:	0023      	movs	r3, r4
 800092a:	e0e7      	b.n	8000afc <__aeabi_fadd+0x23c>
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc00      	bgt.n	8000932 <__aeabi_fadd+0x72>
 8000930:	e0a4      	b.n	8000a7c <__aeabi_fadd+0x1bc>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d069      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000936:	2dff      	cmp	r5, #255	@ 0xff
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x7c>
 800093a:	e0b1      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 800093c:	2280      	movs	r2, #128	@ 0x80
 800093e:	04d2      	lsls	r2, r2, #19
 8000940:	4311      	orrs	r1, r2
 8000942:	2b1b      	cmp	r3, #27
 8000944:	dc00      	bgt.n	8000948 <__aeabi_fadd+0x88>
 8000946:	e0e9      	b.n	8000b1c <__aeabi_fadd+0x25c>
 8000948:	002b      	movs	r3, r5
 800094a:	3605      	adds	r6, #5
 800094c:	08f7      	lsrs	r7, r6, #3
 800094e:	2bff      	cmp	r3, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e0a5      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000954:	027a      	lsls	r2, r7, #9
 8000956:	0a52      	lsrs	r2, r2, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e030      	b.n	80009be <__aeabi_fadd+0xfe>
 800095c:	2dff      	cmp	r5, #255	@ 0xff
 800095e:	d100      	bne.n	8000962 <__aeabi_fadd+0xa2>
 8000960:	e09e      	b.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	04d2      	lsls	r2, r2, #19
 8000966:	4311      	orrs	r1, r2
 8000968:	2001      	movs	r0, #1
 800096a:	2b1b      	cmp	r3, #27
 800096c:	dc08      	bgt.n	8000980 <__aeabi_fadd+0xc0>
 800096e:	0008      	movs	r0, r1
 8000970:	2220      	movs	r2, #32
 8000972:	40d8      	lsrs	r0, r3
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	4099      	lsls	r1, r3
 8000978:	000b      	movs	r3, r1
 800097a:	1e5a      	subs	r2, r3, #1
 800097c:	4193      	sbcs	r3, r2
 800097e:	4318      	orrs	r0, r3
 8000980:	1a36      	subs	r6, r6, r0
 8000982:	0173      	lsls	r3, r6, #5
 8000984:	d400      	bmi.n	8000988 <__aeabi_fadd+0xc8>
 8000986:	e071      	b.n	8000a6c <__aeabi_fadd+0x1ac>
 8000988:	01b6      	lsls	r6, r6, #6
 800098a:	09b7      	lsrs	r7, r6, #6
 800098c:	0038      	movs	r0, r7
 800098e:	f003 f84b 	bl	8003a28 <__clzsi2>
 8000992:	003b      	movs	r3, r7
 8000994:	3805      	subs	r0, #5
 8000996:	4083      	lsls	r3, r0
 8000998:	4285      	cmp	r5, r0
 800099a:	dd4d      	ble.n	8000a38 <__aeabi_fadd+0x178>
 800099c:	4eb4      	ldr	r6, [pc, #720]	@ (8000c70 <__aeabi_fadd+0x3b0>)
 800099e:	1a2d      	subs	r5, r5, r0
 80009a0:	401e      	ands	r6, r3
 80009a2:	075a      	lsls	r2, r3, #29
 80009a4:	d068      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009a6:	220f      	movs	r2, #15
 80009a8:	4013      	ands	r3, r2
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d064      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 80009ae:	3604      	adds	r6, #4
 80009b0:	0173      	lsls	r3, r6, #5
 80009b2:	d561      	bpl.n	8000a78 <__aeabi_fadd+0x1b8>
 80009b4:	1c68      	adds	r0, r5, #1
 80009b6:	2dfe      	cmp	r5, #254	@ 0xfe
 80009b8:	d154      	bne.n	8000a64 <__aeabi_fadd+0x1a4>
 80009ba:	20ff      	movs	r0, #255	@ 0xff
 80009bc:	2200      	movs	r2, #0
 80009be:	05c0      	lsls	r0, r0, #23
 80009c0:	4310      	orrs	r0, r2
 80009c2:	07e4      	lsls	r4, r4, #31
 80009c4:	4320      	orrs	r0, r4
 80009c6:	bcc0      	pop	{r6, r7}
 80009c8:	46b9      	mov	r9, r7
 80009ca:	46b0      	mov	r8, r6
 80009cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ce:	22fe      	movs	r2, #254	@ 0xfe
 80009d0:	4690      	mov	r8, r2
 80009d2:	1c68      	adds	r0, r5, #1
 80009d4:	0002      	movs	r2, r0
 80009d6:	4640      	mov	r0, r8
 80009d8:	4210      	tst	r0, r2
 80009da:	d16b      	bne.n	8000ab4 <__aeabi_fadd+0x1f4>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x122>
 80009e0:	e0dd      	b.n	8000b9e <__aeabi_fadd+0x2de>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_fadd+0x128>
 80009e6:	e102      	b.n	8000bee <__aeabi_fadd+0x32e>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	d0b3      	beq.n	8000954 <__aeabi_fadd+0x94>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	1a77      	subs	r7, r6, r1
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4217      	tst	r7, r2
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fadd+0x138>
 80009f6:	e136      	b.n	8000c66 <__aeabi_fadd+0x3a6>
 80009f8:	464c      	mov	r4, r9
 80009fa:	1b8e      	subs	r6, r1, r6
 80009fc:	d061      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 80009fe:	2001      	movs	r0, #1
 8000a00:	4216      	tst	r6, r2
 8000a02:	d130      	bne.n	8000a66 <__aeabi_fadd+0x1a6>
 8000a04:	2300      	movs	r3, #0
 8000a06:	08f7      	lsrs	r7, r6, #3
 8000a08:	e7a4      	b.n	8000954 <__aeabi_fadd+0x94>
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d09e      	beq.n	800094c <__aeabi_fadd+0x8c>
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fadd+0x156>
 8000a14:	e0ca      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a16:	2bff      	cmp	r3, #255	@ 0xff
 8000a18:	d042      	beq.n	8000aa0 <__aeabi_fadd+0x1e0>
 8000a1a:	0013      	movs	r3, r2
 8000a1c:	e791      	b.n	8000942 <__aeabi_fadd+0x82>
 8000a1e:	1a71      	subs	r1, r6, r1
 8000a20:	014b      	lsls	r3, r1, #5
 8000a22:	d400      	bmi.n	8000a26 <__aeabi_fadd+0x166>
 8000a24:	e0d1      	b.n	8000bca <__aeabi_fadd+0x30a>
 8000a26:	018f      	lsls	r7, r1, #6
 8000a28:	09bf      	lsrs	r7, r7, #6
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	f002 fffc 	bl	8003a28 <__clzsi2>
 8000a30:	003b      	movs	r3, r7
 8000a32:	3805      	subs	r0, #5
 8000a34:	4083      	lsls	r3, r0
 8000a36:	2501      	movs	r5, #1
 8000a38:	2220      	movs	r2, #32
 8000a3a:	1b40      	subs	r0, r0, r5
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	1a12      	subs	r2, r2, r0
 8000a40:	001e      	movs	r6, r3
 8000a42:	4093      	lsls	r3, r2
 8000a44:	40c6      	lsrs	r6, r0
 8000a46:	1e5a      	subs	r2, r3, #1
 8000a48:	4193      	sbcs	r3, r2
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	d039      	beq.n	8000ac2 <__aeabi_fadd+0x202>
 8000a4e:	0773      	lsls	r3, r6, #29
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x194>
 8000a52:	e11b      	b.n	8000c8c <__aeabi_fadd+0x3cc>
 8000a54:	230f      	movs	r3, #15
 8000a56:	2500      	movs	r5, #0
 8000a58:	4033      	ands	r3, r6
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d1a7      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	0172      	lsls	r2, r6, #5
 8000a62:	d57c      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000a64:	b2c0      	uxtb	r0, r0
 8000a66:	01b2      	lsls	r2, r6, #6
 8000a68:	0a52      	lsrs	r2, r2, #9
 8000a6a:	e7a8      	b.n	80009be <__aeabi_fadd+0xfe>
 8000a6c:	0773      	lsls	r3, r6, #29
 8000a6e:	d003      	beq.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a70:	230f      	movs	r3, #15
 8000a72:	4033      	ands	r3, r6
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d19a      	bne.n	80009ae <__aeabi_fadd+0xee>
 8000a78:	002b      	movs	r3, r5
 8000a7a:	e767      	b.n	800094c <__aeabi_fadd+0x8c>
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <__aeabi_fadd+0x208>
 8000a80:	1b53      	subs	r3, r2, r5
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d17b      	bne.n	8000b7e <__aeabi_fadd+0x2be>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d100      	bne.n	8000a8c <__aeabi_fadd+0x1cc>
 8000a8a:	e086      	b.n	8000b9a <__aeabi_fadd+0x2da>
 8000a8c:	1e5d      	subs	r5, r3, #1
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fadd+0x1d4>
 8000a92:	e08b      	b.n	8000bac <__aeabi_fadd+0x2ec>
 8000a94:	2bff      	cmp	r3, #255	@ 0xff
 8000a96:	d002      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000a98:	002b      	movs	r3, r5
 8000a9a:	e075      	b.n	8000b88 <__aeabi_fadd+0x2c8>
 8000a9c:	464c      	mov	r4, r9
 8000a9e:	4667      	mov	r7, ip
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000aa4:	e789      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	0252      	lsls	r2, r2, #9
 8000aae:	20ff      	movs	r0, #255	@ 0xff
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e784      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ab4:	1a77      	subs	r7, r6, r1
 8000ab6:	017b      	lsls	r3, r7, #5
 8000ab8:	d46b      	bmi.n	8000b92 <__aeabi_fadd+0x2d2>
 8000aba:	2f00      	cmp	r7, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fadd+0x200>
 8000abe:	e765      	b.n	800098c <__aeabi_fadd+0xcc>
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	e77a      	b.n	80009be <__aeabi_fadd+0xfe>
 8000ac8:	22fe      	movs	r2, #254	@ 0xfe
 8000aca:	1c6b      	adds	r3, r5, #1
 8000acc:	421a      	tst	r2, r3
 8000ace:	d149      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d000      	beq.n	8000ad6 <__aeabi_fadd+0x216>
 8000ad4:	e09f      	b.n	8000c16 <__aeabi_fadd+0x356>
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	d100      	bne.n	8000adc <__aeabi_fadd+0x21c>
 8000ada:	e0ba      	b.n	8000c52 <__aeabi_fadd+0x392>
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_fadd+0x222>
 8000ae0:	e0cf      	b.n	8000c82 <__aeabi_fadd+0x3c2>
 8000ae2:	1872      	adds	r2, r6, r1
 8000ae4:	0153      	lsls	r3, r2, #5
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_fadd+0x22a>
 8000ae8:	e0cd      	b.n	8000c86 <__aeabi_fadd+0x3c6>
 8000aea:	0192      	lsls	r2, r2, #6
 8000aec:	2001      	movs	r0, #1
 8000aee:	0a52      	lsrs	r2, r2, #9
 8000af0:	e765      	b.n	80009be <__aeabi_fadd+0xfe>
 8000af2:	2aff      	cmp	r2, #255	@ 0xff
 8000af4:	d0d2      	beq.n	8000a9c <__aeabi_fadd+0x1dc>
 8000af6:	2080      	movs	r0, #128	@ 0x80
 8000af8:	04c0      	lsls	r0, r0, #19
 8000afa:	4306      	orrs	r6, r0
 8000afc:	2001      	movs	r0, #1
 8000afe:	2b1b      	cmp	r3, #27
 8000b00:	dc08      	bgt.n	8000b14 <__aeabi_fadd+0x254>
 8000b02:	0030      	movs	r0, r6
 8000b04:	2420      	movs	r4, #32
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	1ae3      	subs	r3, r4, r3
 8000b0a:	409e      	lsls	r6, r3
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	1e5c      	subs	r4, r3, #1
 8000b10:	41a3      	sbcs	r3, r4
 8000b12:	4318      	orrs	r0, r3
 8000b14:	464c      	mov	r4, r9
 8000b16:	0015      	movs	r5, r2
 8000b18:	1a0e      	subs	r6, r1, r0
 8000b1a:	e732      	b.n	8000982 <__aeabi_fadd+0xc2>
 8000b1c:	0008      	movs	r0, r1
 8000b1e:	2220      	movs	r2, #32
 8000b20:	40d8      	lsrs	r0, r3
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4099      	lsls	r1, r3
 8000b26:	000b      	movs	r3, r1
 8000b28:	1e5a      	subs	r2, r3, #1
 8000b2a:	4193      	sbcs	r3, r2
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	18f6      	adds	r6, r6, r3
 8000b30:	0173      	lsls	r3, r6, #5
 8000b32:	d59b      	bpl.n	8000a6c <__aeabi_fadd+0x1ac>
 8000b34:	3501      	adds	r5, #1
 8000b36:	2dff      	cmp	r5, #255	@ 0xff
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fadd+0x27c>
 8000b3a:	e73e      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	494d      	ldr	r1, [pc, #308]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000b40:	0872      	lsrs	r2, r6, #1
 8000b42:	4033      	ands	r3, r6
 8000b44:	400a      	ands	r2, r1
 8000b46:	431a      	orrs	r2, r3
 8000b48:	0016      	movs	r6, r2
 8000b4a:	0753      	lsls	r3, r2, #29
 8000b4c:	d004      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b4e:	230f      	movs	r3, #15
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d000      	beq.n	8000b58 <__aeabi_fadd+0x298>
 8000b56:	e72a      	b.n	80009ae <__aeabi_fadd+0xee>
 8000b58:	0173      	lsls	r3, r6, #5
 8000b5a:	d500      	bpl.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e72a      	b.n	80009b4 <__aeabi_fadd+0xf4>
 8000b5e:	002b      	movs	r3, r5
 8000b60:	08f7      	lsrs	r7, r6, #3
 8000b62:	e6f7      	b.n	8000954 <__aeabi_fadd+0x94>
 8000b64:	2bff      	cmp	r3, #255	@ 0xff
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fadd+0x2aa>
 8000b68:	e727      	b.n	80009ba <__aeabi_fadd+0xfa>
 8000b6a:	1871      	adds	r1, r6, r1
 8000b6c:	0849      	lsrs	r1, r1, #1
 8000b6e:	074a      	lsls	r2, r1, #29
 8000b70:	d02f      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b72:	220f      	movs	r2, #15
 8000b74:	400a      	ands	r2, r1
 8000b76:	2a04      	cmp	r2, #4
 8000b78:	d02b      	beq.n	8000bd2 <__aeabi_fadd+0x312>
 8000b7a:	1d0e      	adds	r6, r1, #4
 8000b7c:	e6e6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b7e:	2aff      	cmp	r2, #255	@ 0xff
 8000b80:	d08d      	beq.n	8000a9e <__aeabi_fadd+0x1de>
 8000b82:	2080      	movs	r0, #128	@ 0x80
 8000b84:	04c0      	lsls	r0, r0, #19
 8000b86:	4306      	orrs	r6, r0
 8000b88:	2b1b      	cmp	r3, #27
 8000b8a:	dd24      	ble.n	8000bd6 <__aeabi_fadd+0x316>
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	1d4e      	adds	r6, r1, #5
 8000b90:	e6dc      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b92:	464c      	mov	r4, r9
 8000b94:	1b8f      	subs	r7, r1, r6
 8000b96:	e6f9      	b.n	800098c <__aeabi_fadd+0xcc>
 8000b98:	464c      	mov	r4, r9
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	e6d6      	b.n	800094c <__aeabi_fadd+0x8c>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d149      	bne.n	8000c36 <__aeabi_fadd+0x376>
 8000ba2:	2900      	cmp	r1, #0
 8000ba4:	d068      	beq.n	8000c78 <__aeabi_fadd+0x3b8>
 8000ba6:	4667      	mov	r7, ip
 8000ba8:	464c      	mov	r4, r9
 8000baa:	e77c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000bac:	1870      	adds	r0, r6, r1
 8000bae:	0143      	lsls	r3, r0, #5
 8000bb0:	d574      	bpl.n	8000c9c <__aeabi_fadd+0x3dc>
 8000bb2:	4930      	ldr	r1, [pc, #192]	@ (8000c74 <__aeabi_fadd+0x3b4>)
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	4001      	ands	r1, r0
 8000bb8:	0743      	lsls	r3, r0, #29
 8000bba:	d009      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_fadd+0x310>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	1d0e      	adds	r6, r1, #4
 8000bc8:	e6c0      	b.n	800094c <__aeabi_fadd+0x8c>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	08cf      	lsrs	r7, r1, #3
 8000bce:	e6c1      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	08cf      	lsrs	r7, r1, #3
 8000bd4:	e6be      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bd6:	2520      	movs	r5, #32
 8000bd8:	0030      	movs	r0, r6
 8000bda:	40d8      	lsrs	r0, r3
 8000bdc:	1aeb      	subs	r3, r5, r3
 8000bde:	409e      	lsls	r6, r3
 8000be0:	0033      	movs	r3, r6
 8000be2:	1e5d      	subs	r5, r3, #1
 8000be4:	41ab      	sbcs	r3, r5
 8000be6:	4303      	orrs	r3, r0
 8000be8:	0015      	movs	r5, r2
 8000bea:	185e      	adds	r6, r3, r1
 8000bec:	e7a0      	b.n	8000b30 <__aeabi_fadd+0x270>
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fadd+0x334>
 8000bf2:	e765      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000bf4:	464c      	mov	r4, r9
 8000bf6:	4667      	mov	r7, ip
 8000bf8:	e6ac      	b.n	8000954 <__aeabi_fadd+0x94>
 8000bfa:	1b8f      	subs	r7, r1, r6
 8000bfc:	017b      	lsls	r3, r7, #5
 8000bfe:	d52e      	bpl.n	8000c5e <__aeabi_fadd+0x39e>
 8000c00:	01bf      	lsls	r7, r7, #6
 8000c02:	09bf      	lsrs	r7, r7, #6
 8000c04:	0038      	movs	r0, r7
 8000c06:	f002 ff0f 	bl	8003a28 <__clzsi2>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	3805      	subs	r0, #5
 8000c0e:	4083      	lsls	r3, r0
 8000c10:	464c      	mov	r4, r9
 8000c12:	3501      	adds	r5, #1
 8000c14:	e710      	b.n	8000a38 <__aeabi_fadd+0x178>
 8000c16:	2e00      	cmp	r6, #0
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fadd+0x35c>
 8000c1a:	e740      	b.n	8000a9e <__aeabi_fadd+0x1de>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_fadd+0x362>
 8000c20:	e741      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	429f      	cmp	r7, r3
 8000c28:	d200      	bcs.n	8000c2c <__aeabi_fadd+0x36c>
 8000c2a:	e73c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c2c:	459c      	cmp	ip, r3
 8000c2e:	d300      	bcc.n	8000c32 <__aeabi_fadd+0x372>
 8000c30:	e739      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c32:	4667      	mov	r7, ip
 8000c34:	e737      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fadd+0x37c>
 8000c3a:	e734      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c3c:	2380      	movs	r3, #128	@ 0x80
 8000c3e:	03db      	lsls	r3, r3, #15
 8000c40:	429f      	cmp	r7, r3
 8000c42:	d200      	bcs.n	8000c46 <__aeabi_fadd+0x386>
 8000c44:	e72f      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d300      	bcc.n	8000c4c <__aeabi_fadd+0x38c>
 8000c4a:	e72c      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c4c:	464c      	mov	r4, r9
 8000c4e:	4667      	mov	r7, ip
 8000c50:	e729      	b.n	8000aa6 <__aeabi_fadd+0x1e6>
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fadd+0x398>
 8000c56:	e734      	b.n	8000ac2 <__aeabi_fadd+0x202>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	08cf      	lsrs	r7, r1, #3
 8000c5c:	e67a      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c5e:	464c      	mov	r4, r9
 8000c60:	2301      	movs	r3, #1
 8000c62:	08ff      	lsrs	r7, r7, #3
 8000c64:	e676      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fadd+0x3ac>
 8000c6a:	e729      	b.n	8000ac0 <__aeabi_fadd+0x200>
 8000c6c:	08ff      	lsrs	r7, r7, #3
 8000c6e:	e671      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c70:	fbffffff 	.word	0xfbffffff
 8000c74:	7dffffff 	.word	0x7dffffff
 8000c78:	2280      	movs	r2, #128	@ 0x80
 8000c7a:	2400      	movs	r4, #0
 8000c7c:	20ff      	movs	r0, #255	@ 0xff
 8000c7e:	03d2      	lsls	r2, r2, #15
 8000c80:	e69d      	b.n	80009be <__aeabi_fadd+0xfe>
 8000c82:	2300      	movs	r3, #0
 8000c84:	e666      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c86:	2300      	movs	r3, #0
 8000c88:	08d7      	lsrs	r7, r2, #3
 8000c8a:	e663      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	0172      	lsls	r2, r6, #5
 8000c90:	d500      	bpl.n	8000c94 <__aeabi_fadd+0x3d4>
 8000c92:	e6e7      	b.n	8000a64 <__aeabi_fadd+0x1a4>
 8000c94:	0031      	movs	r1, r6
 8000c96:	2300      	movs	r3, #0
 8000c98:	08cf      	lsrs	r7, r1, #3
 8000c9a:	e65b      	b.n	8000954 <__aeabi_fadd+0x94>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	08c7      	lsrs	r7, r0, #3
 8000ca0:	e658      	b.n	8000954 <__aeabi_fadd+0x94>
 8000ca2:	46c0      	nop			@ (mov r8, r8)

08000ca4 <__aeabi_fdiv>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4646      	mov	r6, r8
 8000ca8:	464f      	mov	r7, r9
 8000caa:	46d6      	mov	lr, sl
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	b5c0      	push	{r6, r7, lr}
 8000cb0:	0fc3      	lsrs	r3, r0, #31
 8000cb2:	0047      	lsls	r7, r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	1c0e      	adds	r6, r1, #0
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e3f      	lsrs	r7, r7, #24
 8000cbc:	d05b      	beq.n	8000d76 <__aeabi_fdiv+0xd2>
 8000cbe:	2fff      	cmp	r7, #255	@ 0xff
 8000cc0:	d021      	beq.n	8000d06 <__aeabi_fdiv+0x62>
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	00ed      	lsls	r5, r5, #3
 8000cc6:	04db      	lsls	r3, r3, #19
 8000cc8:	431d      	orrs	r5, r3
 8000cca:	2300      	movs	r3, #0
 8000ccc:	4699      	mov	r9, r3
 8000cce:	469a      	mov	sl, r3
 8000cd0:	3f7f      	subs	r7, #127	@ 0x7f
 8000cd2:	0274      	lsls	r4, r6, #9
 8000cd4:	0073      	lsls	r3, r6, #1
 8000cd6:	0a64      	lsrs	r4, r4, #9
 8000cd8:	0e1b      	lsrs	r3, r3, #24
 8000cda:	0ff6      	lsrs	r6, r6, #31
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <__aeabi_fdiv+0x7e>
 8000ce0:	2bff      	cmp	r3, #255	@ 0xff
 8000ce2:	d043      	beq.n	8000d6c <__aeabi_fdiv+0xc8>
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	00e4      	lsls	r4, r4, #3
 8000cea:	04d2      	lsls	r2, r2, #19
 8000cec:	4314      	orrs	r4, r2
 8000cee:	3b7f      	subs	r3, #127	@ 0x7f
 8000cf0:	4642      	mov	r2, r8
 8000cf2:	1aff      	subs	r7, r7, r3
 8000cf4:	464b      	mov	r3, r9
 8000cf6:	4072      	eors	r2, r6
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d900      	bls.n	8000cfe <__aeabi_fdiv+0x5a>
 8000cfc:	e09d      	b.n	8000e3a <__aeabi_fdiv+0x196>
 8000cfe:	4971      	ldr	r1, [pc, #452]	@ (8000ec4 <__aeabi_fdiv+0x220>)
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	58cb      	ldr	r3, [r1, r3]
 8000d04:	469f      	mov	pc, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d15a      	bne.n	8000dc0 <__aeabi_fdiv+0x11c>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	4699      	mov	r9, r3
 8000d0e:	3b06      	subs	r3, #6
 8000d10:	0274      	lsls	r4, r6, #9
 8000d12:	469a      	mov	sl, r3
 8000d14:	0073      	lsls	r3, r6, #1
 8000d16:	27ff      	movs	r7, #255	@ 0xff
 8000d18:	0a64      	lsrs	r4, r4, #9
 8000d1a:	0e1b      	lsrs	r3, r3, #24
 8000d1c:	0ff6      	lsrs	r6, r6, #31
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1de      	bne.n	8000ce0 <__aeabi_fdiv+0x3c>
 8000d22:	2c00      	cmp	r4, #0
 8000d24:	d13b      	bne.n	8000d9e <__aeabi_fdiv+0xfa>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4642      	mov	r2, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	4072      	eors	r2, r6
 8000d2e:	4319      	orrs	r1, r3
 8000d30:	290e      	cmp	r1, #14
 8000d32:	d818      	bhi.n	8000d66 <__aeabi_fdiv+0xc2>
 8000d34:	4864      	ldr	r0, [pc, #400]	@ (8000ec8 <__aeabi_fdiv+0x224>)
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	5841      	ldr	r1, [r0, r1]
 8000d3a:	468f      	mov	pc, r1
 8000d3c:	4653      	mov	r3, sl
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fdiv+0xa0>
 8000d42:	e0b8      	b.n	8000eb6 <__aeabi_fdiv+0x212>
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d06e      	beq.n	8000e26 <__aeabi_fdiv+0x182>
 8000d48:	4642      	mov	r2, r8
 8000d4a:	002c      	movs	r4, r5
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d140      	bne.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000d50:	2000      	movs	r0, #0
 8000d52:	2400      	movs	r4, #0
 8000d54:	05c0      	lsls	r0, r0, #23
 8000d56:	4320      	orrs	r0, r4
 8000d58:	07d2      	lsls	r2, r2, #31
 8000d5a:	4310      	orrs	r0, r2
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	20ff      	movs	r0, #255	@ 0xff
 8000d68:	2400      	movs	r4, #0
 8000d6a:	e7f3      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d120      	bne.n	8000db2 <__aeabi_fdiv+0x10e>
 8000d70:	2302      	movs	r3, #2
 8000d72:	3fff      	subs	r7, #255	@ 0xff
 8000d74:	e7d8      	b.n	8000d28 <__aeabi_fdiv+0x84>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d105      	bne.n	8000d86 <__aeabi_fdiv+0xe2>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	4699      	mov	r9, r3
 8000d7e:	3b03      	subs	r3, #3
 8000d80:	2700      	movs	r7, #0
 8000d82:	469a      	mov	sl, r3
 8000d84:	e7a5      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d86:	0028      	movs	r0, r5
 8000d88:	f002 fe4e 	bl	8003a28 <__clzsi2>
 8000d8c:	2776      	movs	r7, #118	@ 0x76
 8000d8e:	1f43      	subs	r3, r0, #5
 8000d90:	409d      	lsls	r5, r3
 8000d92:	2300      	movs	r3, #0
 8000d94:	427f      	negs	r7, r7
 8000d96:	4699      	mov	r9, r3
 8000d98:	469a      	mov	sl, r3
 8000d9a:	1a3f      	subs	r7, r7, r0
 8000d9c:	e799      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f002 fe42 	bl	8003a28 <__clzsi2>
 8000da4:	1f43      	subs	r3, r0, #5
 8000da6:	409c      	lsls	r4, r3
 8000da8:	2376      	movs	r3, #118	@ 0x76
 8000daa:	425b      	negs	r3, r3
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	2000      	movs	r0, #0
 8000db0:	e79e      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000db2:	2303      	movs	r3, #3
 8000db4:	464a      	mov	r2, r9
 8000db6:	431a      	orrs	r2, r3
 8000db8:	4691      	mov	r9, r2
 8000dba:	2003      	movs	r0, #3
 8000dbc:	33fc      	adds	r3, #252	@ 0xfc
 8000dbe:	e797      	b.n	8000cf0 <__aeabi_fdiv+0x4c>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	3b09      	subs	r3, #9
 8000dc6:	27ff      	movs	r7, #255	@ 0xff
 8000dc8:	469a      	mov	sl, r3
 8000dca:	e782      	b.n	8000cd2 <__aeabi_fdiv+0x2e>
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d02c      	beq.n	8000e2a <__aeabi_fdiv+0x186>
 8000dd0:	0032      	movs	r2, r6
 8000dd2:	0038      	movs	r0, r7
 8000dd4:	307f      	adds	r0, #127	@ 0x7f
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	dd47      	ble.n	8000e6a <__aeabi_fdiv+0x1c6>
 8000dda:	0763      	lsls	r3, r4, #29
 8000ddc:	d004      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000dde:	230f      	movs	r3, #15
 8000de0:	4023      	ands	r3, r4
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fdiv+0x144>
 8000de6:	3404      	adds	r4, #4
 8000de8:	0123      	lsls	r3, r4, #4
 8000dea:	d503      	bpl.n	8000df4 <__aeabi_fdiv+0x150>
 8000dec:	0038      	movs	r0, r7
 8000dee:	4b37      	ldr	r3, [pc, #220]	@ (8000ecc <__aeabi_fdiv+0x228>)
 8000df0:	3080      	adds	r0, #128	@ 0x80
 8000df2:	401c      	ands	r4, r3
 8000df4:	28fe      	cmp	r0, #254	@ 0xfe
 8000df6:	dcb6      	bgt.n	8000d66 <__aeabi_fdiv+0xc2>
 8000df8:	01a4      	lsls	r4, r4, #6
 8000dfa:	0a64      	lsrs	r4, r4, #9
 8000dfc:	b2c0      	uxtb	r0, r0
 8000dfe:	e7a9      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e00:	2480      	movs	r4, #128	@ 0x80
 8000e02:	2200      	movs	r2, #0
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	03e4      	lsls	r4, r4, #15
 8000e08:	e7a4      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	03db      	lsls	r3, r3, #15
 8000e0e:	421d      	tst	r5, r3
 8000e10:	d001      	beq.n	8000e16 <__aeabi_fdiv+0x172>
 8000e12:	421c      	tst	r4, r3
 8000e14:	d00b      	beq.n	8000e2e <__aeabi_fdiv+0x18a>
 8000e16:	2480      	movs	r4, #128	@ 0x80
 8000e18:	03e4      	lsls	r4, r4, #15
 8000e1a:	432c      	orrs	r4, r5
 8000e1c:	0264      	lsls	r4, r4, #9
 8000e1e:	4642      	mov	r2, r8
 8000e20:	20ff      	movs	r0, #255	@ 0xff
 8000e22:	0a64      	lsrs	r4, r4, #9
 8000e24:	e796      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e26:	4646      	mov	r6, r8
 8000e28:	002c      	movs	r4, r5
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	03db      	lsls	r3, r3, #15
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0264      	lsls	r4, r4, #9
 8000e32:	0032      	movs	r2, r6
 8000e34:	20ff      	movs	r0, #255	@ 0xff
 8000e36:	0a64      	lsrs	r4, r4, #9
 8000e38:	e78c      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e3a:	016d      	lsls	r5, r5, #5
 8000e3c:	0160      	lsls	r0, r4, #5
 8000e3e:	4285      	cmp	r5, r0
 8000e40:	d22d      	bcs.n	8000e9e <__aeabi_fdiv+0x1fa>
 8000e42:	231b      	movs	r3, #27
 8000e44:	2400      	movs	r4, #0
 8000e46:	3f01      	subs	r7, #1
 8000e48:	2601      	movs	r6, #1
 8000e4a:	0029      	movs	r1, r5
 8000e4c:	0064      	lsls	r4, r4, #1
 8000e4e:	006d      	lsls	r5, r5, #1
 8000e50:	2900      	cmp	r1, #0
 8000e52:	db01      	blt.n	8000e58 <__aeabi_fdiv+0x1b4>
 8000e54:	4285      	cmp	r5, r0
 8000e56:	d301      	bcc.n	8000e5c <__aeabi_fdiv+0x1b8>
 8000e58:	1a2d      	subs	r5, r5, r0
 8000e5a:	4334      	orrs	r4, r6
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f3      	bne.n	8000e4a <__aeabi_fdiv+0x1a6>
 8000e62:	1e6b      	subs	r3, r5, #1
 8000e64:	419d      	sbcs	r5, r3
 8000e66:	432c      	orrs	r4, r5
 8000e68:	e7b3      	b.n	8000dd2 <__aeabi_fdiv+0x12e>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	1a1b      	subs	r3, r3, r0
 8000e6e:	2b1b      	cmp	r3, #27
 8000e70:	dd00      	ble.n	8000e74 <__aeabi_fdiv+0x1d0>
 8000e72:	e76d      	b.n	8000d50 <__aeabi_fdiv+0xac>
 8000e74:	0021      	movs	r1, r4
 8000e76:	379e      	adds	r7, #158	@ 0x9e
 8000e78:	40d9      	lsrs	r1, r3
 8000e7a:	40bc      	lsls	r4, r7
 8000e7c:	000b      	movs	r3, r1
 8000e7e:	1e61      	subs	r1, r4, #1
 8000e80:	418c      	sbcs	r4, r1
 8000e82:	4323      	orrs	r3, r4
 8000e84:	0759      	lsls	r1, r3, #29
 8000e86:	d004      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e88:	210f      	movs	r1, #15
 8000e8a:	4019      	ands	r1, r3
 8000e8c:	2904      	cmp	r1, #4
 8000e8e:	d000      	beq.n	8000e92 <__aeabi_fdiv+0x1ee>
 8000e90:	3304      	adds	r3, #4
 8000e92:	0159      	lsls	r1, r3, #5
 8000e94:	d413      	bmi.n	8000ebe <__aeabi_fdiv+0x21a>
 8000e96:	019b      	lsls	r3, r3, #6
 8000e98:	2000      	movs	r0, #0
 8000e9a:	0a5c      	lsrs	r4, r3, #9
 8000e9c:	e75a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000e9e:	231a      	movs	r3, #26
 8000ea0:	2401      	movs	r4, #1
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	e7d0      	b.n	8000e48 <__aeabi_fdiv+0x1a4>
 8000ea6:	1e98      	subs	r0, r3, #2
 8000ea8:	4243      	negs	r3, r0
 8000eaa:	4158      	adcs	r0, r3
 8000eac:	4240      	negs	r0, r0
 8000eae:	0032      	movs	r2, r6
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	b2c0      	uxtb	r0, r0
 8000eb4:	e74e      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000eb6:	4642      	mov	r2, r8
 8000eb8:	20ff      	movs	r0, #255	@ 0xff
 8000eba:	2400      	movs	r4, #0
 8000ebc:	e74a      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	e747      	b.n	8000d54 <__aeabi_fdiv+0xb0>
 8000ec4:	0802e4b8 	.word	0x0802e4b8
 8000ec8:	0802e4f8 	.word	0x0802e4f8
 8000ecc:	f7ffffff 	.word	0xf7ffffff

08000ed0 <__eqsf2>:
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	0042      	lsls	r2, r0, #1
 8000ed4:	024e      	lsls	r6, r1, #9
 8000ed6:	004c      	lsls	r4, r1, #1
 8000ed8:	0245      	lsls	r5, r0, #9
 8000eda:	0a6d      	lsrs	r5, r5, #9
 8000edc:	0e12      	lsrs	r2, r2, #24
 8000ede:	0fc3      	lsrs	r3, r0, #31
 8000ee0:	0a76      	lsrs	r6, r6, #9
 8000ee2:	0e24      	lsrs	r4, r4, #24
 8000ee4:	0fc9      	lsrs	r1, r1, #31
 8000ee6:	2aff      	cmp	r2, #255	@ 0xff
 8000ee8:	d010      	beq.n	8000f0c <__eqsf2+0x3c>
 8000eea:	2cff      	cmp	r4, #255	@ 0xff
 8000eec:	d00c      	beq.n	8000f08 <__eqsf2+0x38>
 8000eee:	2001      	movs	r0, #1
 8000ef0:	42a2      	cmp	r2, r4
 8000ef2:	d10a      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef4:	42b5      	cmp	r5, r6
 8000ef6:	d108      	bne.n	8000f0a <__eqsf2+0x3a>
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d00f      	beq.n	8000f1c <__eqsf2+0x4c>
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	d104      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f00:	0028      	movs	r0, r5
 8000f02:	1e43      	subs	r3, r0, #1
 8000f04:	4198      	sbcs	r0, r3
 8000f06:	e000      	b.n	8000f0a <__eqsf2+0x3a>
 8000f08:	2001      	movs	r0, #1
 8000f0a:	bd70      	pop	{r4, r5, r6, pc}
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	2cff      	cmp	r4, #255	@ 0xff
 8000f10:	d1fb      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f12:	4335      	orrs	r5, r6
 8000f14:	d1f9      	bne.n	8000f0a <__eqsf2+0x3a>
 8000f16:	404b      	eors	r3, r1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	e7f6      	b.n	8000f0a <__eqsf2+0x3a>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e7f4      	b.n	8000f0a <__eqsf2+0x3a>

08000f20 <__gesf2>:
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	0042      	lsls	r2, r0, #1
 8000f24:	0244      	lsls	r4, r0, #9
 8000f26:	024d      	lsls	r5, r1, #9
 8000f28:	0fc3      	lsrs	r3, r0, #31
 8000f2a:	0048      	lsls	r0, r1, #1
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	0e12      	lsrs	r2, r2, #24
 8000f30:	0a6d      	lsrs	r5, r5, #9
 8000f32:	0e00      	lsrs	r0, r0, #24
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	2aff      	cmp	r2, #255	@ 0xff
 8000f38:	d018      	beq.n	8000f6c <__gesf2+0x4c>
 8000f3a:	28ff      	cmp	r0, #255	@ 0xff
 8000f3c:	d00a      	beq.n	8000f54 <__gesf2+0x34>
 8000f3e:	2a00      	cmp	r2, #0
 8000f40:	d11e      	bne.n	8000f80 <__gesf2+0x60>
 8000f42:	2800      	cmp	r0, #0
 8000f44:	d10a      	bne.n	8000f5c <__gesf2+0x3c>
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d029      	beq.n	8000f9e <__gesf2+0x7e>
 8000f4a:	2c00      	cmp	r4, #0
 8000f4c:	d12d      	bne.n	8000faa <__gesf2+0x8a>
 8000f4e:	0048      	lsls	r0, r1, #1
 8000f50:	3801      	subs	r0, #1
 8000f52:	bd30      	pop	{r4, r5, pc}
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d125      	bne.n	8000fa4 <__gesf2+0x84>
 8000f58:	2a00      	cmp	r2, #0
 8000f5a:	d101      	bne.n	8000f60 <__gesf2+0x40>
 8000f5c:	2c00      	cmp	r4, #0
 8000f5e:	d0f6      	beq.n	8000f4e <__gesf2+0x2e>
 8000f60:	428b      	cmp	r3, r1
 8000f62:	d019      	beq.n	8000f98 <__gesf2+0x78>
 8000f64:	2001      	movs	r0, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	4318      	orrs	r0, r3
 8000f6a:	e7f2      	b.n	8000f52 <__gesf2+0x32>
 8000f6c:	2c00      	cmp	r4, #0
 8000f6e:	d119      	bne.n	8000fa4 <__gesf2+0x84>
 8000f70:	28ff      	cmp	r0, #255	@ 0xff
 8000f72:	d1f7      	bne.n	8000f64 <__gesf2+0x44>
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d115      	bne.n	8000fa4 <__gesf2+0x84>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d1f2      	bne.n	8000f64 <__gesf2+0x44>
 8000f7e:	e7e8      	b.n	8000f52 <__gesf2+0x32>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0ef      	beq.n	8000f64 <__gesf2+0x44>
 8000f84:	428b      	cmp	r3, r1
 8000f86:	d1ed      	bne.n	8000f64 <__gesf2+0x44>
 8000f88:	4282      	cmp	r2, r0
 8000f8a:	dceb      	bgt.n	8000f64 <__gesf2+0x44>
 8000f8c:	db04      	blt.n	8000f98 <__gesf2+0x78>
 8000f8e:	42ac      	cmp	r4, r5
 8000f90:	d8e8      	bhi.n	8000f64 <__gesf2+0x44>
 8000f92:	2000      	movs	r0, #0
 8000f94:	42ac      	cmp	r4, r5
 8000f96:	d2dc      	bcs.n	8000f52 <__gesf2+0x32>
 8000f98:	0058      	lsls	r0, r3, #1
 8000f9a:	3801      	subs	r0, #1
 8000f9c:	e7d9      	b.n	8000f52 <__gesf2+0x32>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d0d7      	beq.n	8000f52 <__gesf2+0x32>
 8000fa2:	e7df      	b.n	8000f64 <__gesf2+0x44>
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	4240      	negs	r0, r0
 8000fa8:	e7d3      	b.n	8000f52 <__gesf2+0x32>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d1da      	bne.n	8000f64 <__gesf2+0x44>
 8000fae:	e7ee      	b.n	8000f8e <__gesf2+0x6e>

08000fb0 <__lesf2>:
 8000fb0:	b530      	push	{r4, r5, lr}
 8000fb2:	0042      	lsls	r2, r0, #1
 8000fb4:	0244      	lsls	r4, r0, #9
 8000fb6:	024d      	lsls	r5, r1, #9
 8000fb8:	0fc3      	lsrs	r3, r0, #31
 8000fba:	0048      	lsls	r0, r1, #1
 8000fbc:	0a64      	lsrs	r4, r4, #9
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	0a6d      	lsrs	r5, r5, #9
 8000fc2:	0e00      	lsrs	r0, r0, #24
 8000fc4:	0fc9      	lsrs	r1, r1, #31
 8000fc6:	2aff      	cmp	r2, #255	@ 0xff
 8000fc8:	d017      	beq.n	8000ffa <__lesf2+0x4a>
 8000fca:	28ff      	cmp	r0, #255	@ 0xff
 8000fcc:	d00a      	beq.n	8000fe4 <__lesf2+0x34>
 8000fce:	2a00      	cmp	r2, #0
 8000fd0:	d11b      	bne.n	800100a <__lesf2+0x5a>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d10a      	bne.n	8000fec <__lesf2+0x3c>
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d01d      	beq.n	8001016 <__lesf2+0x66>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d12d      	bne.n	800103a <__lesf2+0x8a>
 8000fde:	0048      	lsls	r0, r1, #1
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e011      	b.n	8001008 <__lesf2+0x58>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d10e      	bne.n	8001006 <__lesf2+0x56>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d101      	bne.n	8000ff0 <__lesf2+0x40>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d0f6      	beq.n	8000fde <__lesf2+0x2e>
 8000ff0:	428b      	cmp	r3, r1
 8000ff2:	d10c      	bne.n	800100e <__lesf2+0x5e>
 8000ff4:	0058      	lsls	r0, r3, #1
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e006      	b.n	8001008 <__lesf2+0x58>
 8000ffa:	2c00      	cmp	r4, #0
 8000ffc:	d103      	bne.n	8001006 <__lesf2+0x56>
 8000ffe:	28ff      	cmp	r0, #255	@ 0xff
 8001000:	d105      	bne.n	800100e <__lesf2+0x5e>
 8001002:	2d00      	cmp	r5, #0
 8001004:	d015      	beq.n	8001032 <__lesf2+0x82>
 8001006:	2002      	movs	r0, #2
 8001008:	bd30      	pop	{r4, r5, pc}
 800100a:	2800      	cmp	r0, #0
 800100c:	d106      	bne.n	800101c <__lesf2+0x6c>
 800100e:	2001      	movs	r0, #1
 8001010:	425b      	negs	r3, r3
 8001012:	4318      	orrs	r0, r3
 8001014:	e7f8      	b.n	8001008 <__lesf2+0x58>
 8001016:	2c00      	cmp	r4, #0
 8001018:	d0f6      	beq.n	8001008 <__lesf2+0x58>
 800101a:	e7f8      	b.n	800100e <__lesf2+0x5e>
 800101c:	428b      	cmp	r3, r1
 800101e:	d1f6      	bne.n	800100e <__lesf2+0x5e>
 8001020:	4282      	cmp	r2, r0
 8001022:	dcf4      	bgt.n	800100e <__lesf2+0x5e>
 8001024:	dbe6      	blt.n	8000ff4 <__lesf2+0x44>
 8001026:	42ac      	cmp	r4, r5
 8001028:	d8f1      	bhi.n	800100e <__lesf2+0x5e>
 800102a:	2000      	movs	r0, #0
 800102c:	42ac      	cmp	r4, r5
 800102e:	d2eb      	bcs.n	8001008 <__lesf2+0x58>
 8001030:	e7e0      	b.n	8000ff4 <__lesf2+0x44>
 8001032:	2000      	movs	r0, #0
 8001034:	428b      	cmp	r3, r1
 8001036:	d1ea      	bne.n	800100e <__lesf2+0x5e>
 8001038:	e7e6      	b.n	8001008 <__lesf2+0x58>
 800103a:	428b      	cmp	r3, r1
 800103c:	d1e7      	bne.n	800100e <__lesf2+0x5e>
 800103e:	e7f2      	b.n	8001026 <__lesf2+0x76>

08001040 <__aeabi_fmul>:
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	464f      	mov	r7, r9
 8001044:	4646      	mov	r6, r8
 8001046:	46d6      	mov	lr, sl
 8001048:	0044      	lsls	r4, r0, #1
 800104a:	b5c0      	push	{r6, r7, lr}
 800104c:	0246      	lsls	r6, r0, #9
 800104e:	1c0f      	adds	r7, r1, #0
 8001050:	0a76      	lsrs	r6, r6, #9
 8001052:	0e24      	lsrs	r4, r4, #24
 8001054:	0fc5      	lsrs	r5, r0, #31
 8001056:	2c00      	cmp	r4, #0
 8001058:	d100      	bne.n	800105c <__aeabi_fmul+0x1c>
 800105a:	e0da      	b.n	8001212 <__aeabi_fmul+0x1d2>
 800105c:	2cff      	cmp	r4, #255	@ 0xff
 800105e:	d074      	beq.n	800114a <__aeabi_fmul+0x10a>
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	00f6      	lsls	r6, r6, #3
 8001064:	04db      	lsls	r3, r3, #19
 8001066:	431e      	orrs	r6, r3
 8001068:	2300      	movs	r3, #0
 800106a:	4699      	mov	r9, r3
 800106c:	469a      	mov	sl, r3
 800106e:	3c7f      	subs	r4, #127	@ 0x7f
 8001070:	027b      	lsls	r3, r7, #9
 8001072:	0a5b      	lsrs	r3, r3, #9
 8001074:	4698      	mov	r8, r3
 8001076:	007b      	lsls	r3, r7, #1
 8001078:	0e1b      	lsrs	r3, r3, #24
 800107a:	0fff      	lsrs	r7, r7, #31
 800107c:	2b00      	cmp	r3, #0
 800107e:	d074      	beq.n	800116a <__aeabi_fmul+0x12a>
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d100      	bne.n	8001086 <__aeabi_fmul+0x46>
 8001084:	e08e      	b.n	80011a4 <__aeabi_fmul+0x164>
 8001086:	4642      	mov	r2, r8
 8001088:	2180      	movs	r1, #128	@ 0x80
 800108a:	00d2      	lsls	r2, r2, #3
 800108c:	04c9      	lsls	r1, r1, #19
 800108e:	4311      	orrs	r1, r2
 8001090:	3b7f      	subs	r3, #127	@ 0x7f
 8001092:	002a      	movs	r2, r5
 8001094:	18e4      	adds	r4, r4, r3
 8001096:	464b      	mov	r3, r9
 8001098:	407a      	eors	r2, r7
 800109a:	4688      	mov	r8, r1
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	2b0a      	cmp	r3, #10
 80010a0:	dc75      	bgt.n	800118e <__aeabi_fmul+0x14e>
 80010a2:	464b      	mov	r3, r9
 80010a4:	2000      	movs	r0, #0
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dd0f      	ble.n	80010ca <__aeabi_fmul+0x8a>
 80010aa:	4649      	mov	r1, r9
 80010ac:	2301      	movs	r3, #1
 80010ae:	408b      	lsls	r3, r1
 80010b0:	21a6      	movs	r1, #166	@ 0xa6
 80010b2:	00c9      	lsls	r1, r1, #3
 80010b4:	420b      	tst	r3, r1
 80010b6:	d169      	bne.n	800118c <__aeabi_fmul+0x14c>
 80010b8:	2190      	movs	r1, #144	@ 0x90
 80010ba:	0089      	lsls	r1, r1, #2
 80010bc:	420b      	tst	r3, r1
 80010be:	d000      	beq.n	80010c2 <__aeabi_fmul+0x82>
 80010c0:	e100      	b.n	80012c4 <__aeabi_fmul+0x284>
 80010c2:	2188      	movs	r1, #136	@ 0x88
 80010c4:	4219      	tst	r1, r3
 80010c6:	d000      	beq.n	80010ca <__aeabi_fmul+0x8a>
 80010c8:	e0f5      	b.n	80012b6 <__aeabi_fmul+0x276>
 80010ca:	4641      	mov	r1, r8
 80010cc:	0409      	lsls	r1, r1, #16
 80010ce:	0c09      	lsrs	r1, r1, #16
 80010d0:	4643      	mov	r3, r8
 80010d2:	0008      	movs	r0, r1
 80010d4:	0c35      	lsrs	r5, r6, #16
 80010d6:	0436      	lsls	r6, r6, #16
 80010d8:	0c1b      	lsrs	r3, r3, #16
 80010da:	0c36      	lsrs	r6, r6, #16
 80010dc:	4370      	muls	r0, r6
 80010de:	4369      	muls	r1, r5
 80010e0:	435e      	muls	r6, r3
 80010e2:	435d      	muls	r5, r3
 80010e4:	1876      	adds	r6, r6, r1
 80010e6:	0c03      	lsrs	r3, r0, #16
 80010e8:	199b      	adds	r3, r3, r6
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d903      	bls.n	80010f6 <__aeabi_fmul+0xb6>
 80010ee:	2180      	movs	r1, #128	@ 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	468c      	mov	ip, r1
 80010f4:	4465      	add	r5, ip
 80010f6:	0400      	lsls	r0, r0, #16
 80010f8:	0419      	lsls	r1, r3, #16
 80010fa:	0c00      	lsrs	r0, r0, #16
 80010fc:	1809      	adds	r1, r1, r0
 80010fe:	018e      	lsls	r6, r1, #6
 8001100:	1e70      	subs	r0, r6, #1
 8001102:	4186      	sbcs	r6, r0
 8001104:	0c1b      	lsrs	r3, r3, #16
 8001106:	0e89      	lsrs	r1, r1, #26
 8001108:	195b      	adds	r3, r3, r5
 800110a:	430e      	orrs	r6, r1
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	431e      	orrs	r6, r3
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	d46c      	bmi.n	80011ee <__aeabi_fmul+0x1ae>
 8001114:	0023      	movs	r3, r4
 8001116:	337f      	adds	r3, #127	@ 0x7f
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_fmul+0xde>
 800111c:	e0b1      	b.n	8001282 <__aeabi_fmul+0x242>
 800111e:	0015      	movs	r5, r2
 8001120:	0771      	lsls	r1, r6, #29
 8001122:	d00b      	beq.n	800113c <__aeabi_fmul+0xfc>
 8001124:	200f      	movs	r0, #15
 8001126:	0021      	movs	r1, r4
 8001128:	4030      	ands	r0, r6
 800112a:	2804      	cmp	r0, #4
 800112c:	d006      	beq.n	800113c <__aeabi_fmul+0xfc>
 800112e:	3604      	adds	r6, #4
 8001130:	0132      	lsls	r2, r6, #4
 8001132:	d503      	bpl.n	800113c <__aeabi_fmul+0xfc>
 8001134:	4b6e      	ldr	r3, [pc, #440]	@ (80012f0 <__aeabi_fmul+0x2b0>)
 8001136:	401e      	ands	r6, r3
 8001138:	000b      	movs	r3, r1
 800113a:	3380      	adds	r3, #128	@ 0x80
 800113c:	2bfe      	cmp	r3, #254	@ 0xfe
 800113e:	dd00      	ble.n	8001142 <__aeabi_fmul+0x102>
 8001140:	e0bd      	b.n	80012be <__aeabi_fmul+0x27e>
 8001142:	01b2      	lsls	r2, r6, #6
 8001144:	0a52      	lsrs	r2, r2, #9
 8001146:	b2db      	uxtb	r3, r3
 8001148:	e048      	b.n	80011dc <__aeabi_fmul+0x19c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d000      	beq.n	8001150 <__aeabi_fmul+0x110>
 800114e:	e092      	b.n	8001276 <__aeabi_fmul+0x236>
 8001150:	2308      	movs	r3, #8
 8001152:	4699      	mov	r9, r3
 8001154:	3b06      	subs	r3, #6
 8001156:	469a      	mov	sl, r3
 8001158:	027b      	lsls	r3, r7, #9
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	4698      	mov	r8, r3
 800115e:	007b      	lsls	r3, r7, #1
 8001160:	24ff      	movs	r4, #255	@ 0xff
 8001162:	0e1b      	lsrs	r3, r3, #24
 8001164:	0fff      	lsrs	r7, r7, #31
 8001166:	2b00      	cmp	r3, #0
 8001168:	d18a      	bne.n	8001080 <__aeabi_fmul+0x40>
 800116a:	4642      	mov	r2, r8
 800116c:	2a00      	cmp	r2, #0
 800116e:	d164      	bne.n	800123a <__aeabi_fmul+0x1fa>
 8001170:	4649      	mov	r1, r9
 8001172:	3201      	adds	r2, #1
 8001174:	4311      	orrs	r1, r2
 8001176:	4689      	mov	r9, r1
 8001178:	290a      	cmp	r1, #10
 800117a:	dc08      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800117c:	407d      	eors	r5, r7
 800117e:	2001      	movs	r0, #1
 8001180:	b2ea      	uxtb	r2, r5
 8001182:	2902      	cmp	r1, #2
 8001184:	dc91      	bgt.n	80010aa <__aeabi_fmul+0x6a>
 8001186:	0015      	movs	r5, r2
 8001188:	2200      	movs	r2, #0
 800118a:	e027      	b.n	80011dc <__aeabi_fmul+0x19c>
 800118c:	0015      	movs	r5, r2
 800118e:	4653      	mov	r3, sl
 8001190:	2b02      	cmp	r3, #2
 8001192:	d100      	bne.n	8001196 <__aeabi_fmul+0x156>
 8001194:	e093      	b.n	80012be <__aeabi_fmul+0x27e>
 8001196:	2b03      	cmp	r3, #3
 8001198:	d01a      	beq.n	80011d0 <__aeabi_fmul+0x190>
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12c      	bne.n	80011f8 <__aeabi_fmul+0x1b8>
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	e01b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80011a4:	4643      	mov	r3, r8
 80011a6:	34ff      	adds	r4, #255	@ 0xff
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d055      	beq.n	8001258 <__aeabi_fmul+0x218>
 80011ac:	2103      	movs	r1, #3
 80011ae:	464b      	mov	r3, r9
 80011b0:	430b      	orrs	r3, r1
 80011b2:	0019      	movs	r1, r3
 80011b4:	2b0a      	cmp	r3, #10
 80011b6:	dc00      	bgt.n	80011ba <__aeabi_fmul+0x17a>
 80011b8:	e092      	b.n	80012e0 <__aeabi_fmul+0x2a0>
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d000      	beq.n	80011c0 <__aeabi_fmul+0x180>
 80011be:	e08c      	b.n	80012da <__aeabi_fmul+0x29a>
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	03d2      	lsls	r2, r2, #15
 80011c4:	4216      	tst	r6, r2
 80011c6:	d003      	beq.n	80011d0 <__aeabi_fmul+0x190>
 80011c8:	4643      	mov	r3, r8
 80011ca:	4213      	tst	r3, r2
 80011cc:	d100      	bne.n	80011d0 <__aeabi_fmul+0x190>
 80011ce:	e07d      	b.n	80012cc <__aeabi_fmul+0x28c>
 80011d0:	2280      	movs	r2, #128	@ 0x80
 80011d2:	03d2      	lsls	r2, r2, #15
 80011d4:	4332      	orrs	r2, r6
 80011d6:	0252      	lsls	r2, r2, #9
 80011d8:	0a52      	lsrs	r2, r2, #9
 80011da:	23ff      	movs	r3, #255	@ 0xff
 80011dc:	05d8      	lsls	r0, r3, #23
 80011de:	07ed      	lsls	r5, r5, #31
 80011e0:	4310      	orrs	r0, r2
 80011e2:	4328      	orrs	r0, r5
 80011e4:	bce0      	pop	{r5, r6, r7}
 80011e6:	46ba      	mov	sl, r7
 80011e8:	46b1      	mov	r9, r6
 80011ea:	46a8      	mov	r8, r5
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ee:	2301      	movs	r3, #1
 80011f0:	0015      	movs	r5, r2
 80011f2:	0871      	lsrs	r1, r6, #1
 80011f4:	401e      	ands	r6, r3
 80011f6:	430e      	orrs	r6, r1
 80011f8:	0023      	movs	r3, r4
 80011fa:	3380      	adds	r3, #128	@ 0x80
 80011fc:	1c61      	adds	r1, r4, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	dd41      	ble.n	8001286 <__aeabi_fmul+0x246>
 8001202:	0772      	lsls	r2, r6, #29
 8001204:	d094      	beq.n	8001130 <__aeabi_fmul+0xf0>
 8001206:	220f      	movs	r2, #15
 8001208:	4032      	ands	r2, r6
 800120a:	2a04      	cmp	r2, #4
 800120c:	d000      	beq.n	8001210 <__aeabi_fmul+0x1d0>
 800120e:	e78e      	b.n	800112e <__aeabi_fmul+0xee>
 8001210:	e78e      	b.n	8001130 <__aeabi_fmul+0xf0>
 8001212:	2e00      	cmp	r6, #0
 8001214:	d105      	bne.n	8001222 <__aeabi_fmul+0x1e2>
 8001216:	2304      	movs	r3, #4
 8001218:	4699      	mov	r9, r3
 800121a:	3b03      	subs	r3, #3
 800121c:	2400      	movs	r4, #0
 800121e:	469a      	mov	sl, r3
 8001220:	e726      	b.n	8001070 <__aeabi_fmul+0x30>
 8001222:	0030      	movs	r0, r6
 8001224:	f002 fc00 	bl	8003a28 <__clzsi2>
 8001228:	2476      	movs	r4, #118	@ 0x76
 800122a:	1f43      	subs	r3, r0, #5
 800122c:	409e      	lsls	r6, r3
 800122e:	2300      	movs	r3, #0
 8001230:	4264      	negs	r4, r4
 8001232:	4699      	mov	r9, r3
 8001234:	469a      	mov	sl, r3
 8001236:	1a24      	subs	r4, r4, r0
 8001238:	e71a      	b.n	8001070 <__aeabi_fmul+0x30>
 800123a:	4640      	mov	r0, r8
 800123c:	f002 fbf4 	bl	8003a28 <__clzsi2>
 8001240:	464b      	mov	r3, r9
 8001242:	1a24      	subs	r4, r4, r0
 8001244:	3c76      	subs	r4, #118	@ 0x76
 8001246:	2b0a      	cmp	r3, #10
 8001248:	dca1      	bgt.n	800118e <__aeabi_fmul+0x14e>
 800124a:	4643      	mov	r3, r8
 800124c:	3805      	subs	r0, #5
 800124e:	4083      	lsls	r3, r0
 8001250:	407d      	eors	r5, r7
 8001252:	4698      	mov	r8, r3
 8001254:	b2ea      	uxtb	r2, r5
 8001256:	e724      	b.n	80010a2 <__aeabi_fmul+0x62>
 8001258:	464a      	mov	r2, r9
 800125a:	3302      	adds	r3, #2
 800125c:	4313      	orrs	r3, r2
 800125e:	002a      	movs	r2, r5
 8001260:	407a      	eors	r2, r7
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	2b0a      	cmp	r3, #10
 8001266:	dc92      	bgt.n	800118e <__aeabi_fmul+0x14e>
 8001268:	4649      	mov	r1, r9
 800126a:	0015      	movs	r5, r2
 800126c:	2900      	cmp	r1, #0
 800126e:	d026      	beq.n	80012be <__aeabi_fmul+0x27e>
 8001270:	4699      	mov	r9, r3
 8001272:	2002      	movs	r0, #2
 8001274:	e719      	b.n	80010aa <__aeabi_fmul+0x6a>
 8001276:	230c      	movs	r3, #12
 8001278:	4699      	mov	r9, r3
 800127a:	3b09      	subs	r3, #9
 800127c:	24ff      	movs	r4, #255	@ 0xff
 800127e:	469a      	mov	sl, r3
 8001280:	e6f6      	b.n	8001070 <__aeabi_fmul+0x30>
 8001282:	0015      	movs	r5, r2
 8001284:	0021      	movs	r1, r4
 8001286:	2201      	movs	r2, #1
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b1b      	cmp	r3, #27
 800128c:	dd00      	ble.n	8001290 <__aeabi_fmul+0x250>
 800128e:	e786      	b.n	800119e <__aeabi_fmul+0x15e>
 8001290:	319e      	adds	r1, #158	@ 0x9e
 8001292:	0032      	movs	r2, r6
 8001294:	408e      	lsls	r6, r1
 8001296:	40da      	lsrs	r2, r3
 8001298:	1e73      	subs	r3, r6, #1
 800129a:	419e      	sbcs	r6, r3
 800129c:	4332      	orrs	r2, r6
 800129e:	0753      	lsls	r3, r2, #29
 80012a0:	d004      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012a2:	230f      	movs	r3, #15
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d000      	beq.n	80012ac <__aeabi_fmul+0x26c>
 80012aa:	3204      	adds	r2, #4
 80012ac:	0153      	lsls	r3, r2, #5
 80012ae:	d510      	bpl.n	80012d2 <__aeabi_fmul+0x292>
 80012b0:	2301      	movs	r3, #1
 80012b2:	2200      	movs	r2, #0
 80012b4:	e792      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012b6:	003d      	movs	r5, r7
 80012b8:	4646      	mov	r6, r8
 80012ba:	4682      	mov	sl, r0
 80012bc:	e767      	b.n	800118e <__aeabi_fmul+0x14e>
 80012be:	23ff      	movs	r3, #255	@ 0xff
 80012c0:	2200      	movs	r2, #0
 80012c2:	e78b      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	2500      	movs	r5, #0
 80012c8:	03d2      	lsls	r2, r2, #15
 80012ca:	e786      	b.n	80011da <__aeabi_fmul+0x19a>
 80012cc:	003d      	movs	r5, r7
 80012ce:	431a      	orrs	r2, r3
 80012d0:	e783      	b.n	80011da <__aeabi_fmul+0x19a>
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	2300      	movs	r3, #0
 80012d6:	0a52      	lsrs	r2, r2, #9
 80012d8:	e780      	b.n	80011dc <__aeabi_fmul+0x19c>
 80012da:	003d      	movs	r5, r7
 80012dc:	4646      	mov	r6, r8
 80012de:	e777      	b.n	80011d0 <__aeabi_fmul+0x190>
 80012e0:	002a      	movs	r2, r5
 80012e2:	2301      	movs	r3, #1
 80012e4:	407a      	eors	r2, r7
 80012e6:	408b      	lsls	r3, r1
 80012e8:	2003      	movs	r0, #3
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	e6e9      	b.n	80010c2 <__aeabi_fmul+0x82>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	f7ffffff 	.word	0xf7ffffff

080012f4 <__aeabi_fsub>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	4647      	mov	r7, r8
 80012f8:	46ce      	mov	lr, r9
 80012fa:	0243      	lsls	r3, r0, #9
 80012fc:	b580      	push	{r7, lr}
 80012fe:	0a5f      	lsrs	r7, r3, #9
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	0045      	lsls	r5, r0, #1
 8001304:	004a      	lsls	r2, r1, #1
 8001306:	469c      	mov	ip, r3
 8001308:	024b      	lsls	r3, r1, #9
 800130a:	0fc4      	lsrs	r4, r0, #31
 800130c:	0fce      	lsrs	r6, r1, #31
 800130e:	0e2d      	lsrs	r5, r5, #24
 8001310:	0a58      	lsrs	r0, r3, #9
 8001312:	0e12      	lsrs	r2, r2, #24
 8001314:	0999      	lsrs	r1, r3, #6
 8001316:	2aff      	cmp	r2, #255	@ 0xff
 8001318:	d06b      	beq.n	80013f2 <__aeabi_fsub+0xfe>
 800131a:	2301      	movs	r3, #1
 800131c:	405e      	eors	r6, r3
 800131e:	1aab      	subs	r3, r5, r2
 8001320:	42b4      	cmp	r4, r6
 8001322:	d04b      	beq.n	80013bc <__aeabi_fsub+0xc8>
 8001324:	2b00      	cmp	r3, #0
 8001326:	dc00      	bgt.n	800132a <__aeabi_fsub+0x36>
 8001328:	e0ff      	b.n	800152a <__aeabi_fsub+0x236>
 800132a:	2a00      	cmp	r2, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x3c>
 800132e:	e088      	b.n	8001442 <__aeabi_fsub+0x14e>
 8001330:	2dff      	cmp	r5, #255	@ 0xff
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x42>
 8001334:	e0ef      	b.n	8001516 <__aeabi_fsub+0x222>
 8001336:	2280      	movs	r2, #128	@ 0x80
 8001338:	04d2      	lsls	r2, r2, #19
 800133a:	4311      	orrs	r1, r2
 800133c:	2001      	movs	r0, #1
 800133e:	2b1b      	cmp	r3, #27
 8001340:	dc08      	bgt.n	8001354 <__aeabi_fsub+0x60>
 8001342:	0008      	movs	r0, r1
 8001344:	2220      	movs	r2, #32
 8001346:	40d8      	lsrs	r0, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4099      	lsls	r1, r3
 800134c:	000b      	movs	r3, r1
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	4193      	sbcs	r3, r2
 8001352:	4318      	orrs	r0, r3
 8001354:	4663      	mov	r3, ip
 8001356:	1a1b      	subs	r3, r3, r0
 8001358:	469c      	mov	ip, r3
 800135a:	4663      	mov	r3, ip
 800135c:	015b      	lsls	r3, r3, #5
 800135e:	d400      	bmi.n	8001362 <__aeabi_fsub+0x6e>
 8001360:	e0cd      	b.n	80014fe <__aeabi_fsub+0x20a>
 8001362:	4663      	mov	r3, ip
 8001364:	019f      	lsls	r7, r3, #6
 8001366:	09bf      	lsrs	r7, r7, #6
 8001368:	0038      	movs	r0, r7
 800136a:	f002 fb5d 	bl	8003a28 <__clzsi2>
 800136e:	003b      	movs	r3, r7
 8001370:	3805      	subs	r0, #5
 8001372:	4083      	lsls	r3, r0
 8001374:	4285      	cmp	r5, r0
 8001376:	dc00      	bgt.n	800137a <__aeabi_fsub+0x86>
 8001378:	e0a2      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800137a:	4ab7      	ldr	r2, [pc, #732]	@ (8001658 <__aeabi_fsub+0x364>)
 800137c:	1a2d      	subs	r5, r5, r0
 800137e:	401a      	ands	r2, r3
 8001380:	4694      	mov	ip, r2
 8001382:	075a      	lsls	r2, r3, #29
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x94>
 8001386:	e0c3      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	2b04      	cmp	r3, #4
 800138e:	d100      	bne.n	8001392 <__aeabi_fsub+0x9e>
 8001390:	e0be      	b.n	8001510 <__aeabi_fsub+0x21c>
 8001392:	2304      	movs	r3, #4
 8001394:	4698      	mov	r8, r3
 8001396:	44c4      	add	ip, r8
 8001398:	4663      	mov	r3, ip
 800139a:	015b      	lsls	r3, r3, #5
 800139c:	d400      	bmi.n	80013a0 <__aeabi_fsub+0xac>
 800139e:	e0b7      	b.n	8001510 <__aeabi_fsub+0x21c>
 80013a0:	1c68      	adds	r0, r5, #1
 80013a2:	2dfe      	cmp	r5, #254	@ 0xfe
 80013a4:	d000      	beq.n	80013a8 <__aeabi_fsub+0xb4>
 80013a6:	e0a5      	b.n	80014f4 <__aeabi_fsub+0x200>
 80013a8:	20ff      	movs	r0, #255	@ 0xff
 80013aa:	2200      	movs	r2, #0
 80013ac:	05c0      	lsls	r0, r0, #23
 80013ae:	4310      	orrs	r0, r2
 80013b0:	07e4      	lsls	r4, r4, #31
 80013b2:	4320      	orrs	r0, r4
 80013b4:	bcc0      	pop	{r6, r7}
 80013b6:	46b9      	mov	r9, r7
 80013b8:	46b0      	mov	r8, r6
 80013ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dc00      	bgt.n	80013c2 <__aeabi_fsub+0xce>
 80013c0:	e1eb      	b.n	800179a <__aeabi_fsub+0x4a6>
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	d046      	beq.n	8001454 <__aeabi_fsub+0x160>
 80013c6:	2dff      	cmp	r5, #255	@ 0xff
 80013c8:	d100      	bne.n	80013cc <__aeabi_fsub+0xd8>
 80013ca:	e0a4      	b.n	8001516 <__aeabi_fsub+0x222>
 80013cc:	2280      	movs	r2, #128	@ 0x80
 80013ce:	04d2      	lsls	r2, r2, #19
 80013d0:	4311      	orrs	r1, r2
 80013d2:	2b1b      	cmp	r3, #27
 80013d4:	dc00      	bgt.n	80013d8 <__aeabi_fsub+0xe4>
 80013d6:	e0fb      	b.n	80015d0 <__aeabi_fsub+0x2dc>
 80013d8:	2305      	movs	r3, #5
 80013da:	4698      	mov	r8, r3
 80013dc:	002b      	movs	r3, r5
 80013de:	44c4      	add	ip, r8
 80013e0:	4662      	mov	r2, ip
 80013e2:	08d7      	lsrs	r7, r2, #3
 80013e4:	2bff      	cmp	r3, #255	@ 0xff
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0xf6>
 80013e8:	e095      	b.n	8001516 <__aeabi_fsub+0x222>
 80013ea:	027a      	lsls	r2, r7, #9
 80013ec:	0a52      	lsrs	r2, r2, #9
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	e7dc      	b.n	80013ac <__aeabi_fsub+0xb8>
 80013f2:	002b      	movs	r3, r5
 80013f4:	3bff      	subs	r3, #255	@ 0xff
 80013f6:	4699      	mov	r9, r3
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d118      	bne.n	800142e <__aeabi_fsub+0x13a>
 80013fc:	2301      	movs	r3, #1
 80013fe:	405e      	eors	r6, r3
 8001400:	42b4      	cmp	r4, r6
 8001402:	d100      	bne.n	8001406 <__aeabi_fsub+0x112>
 8001404:	e0ca      	b.n	800159c <__aeabi_fsub+0x2a8>
 8001406:	464b      	mov	r3, r9
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02d      	beq.n	8001468 <__aeabi_fsub+0x174>
 800140c:	2d00      	cmp	r5, #0
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x11e>
 8001410:	e13c      	b.n	800168c <__aeabi_fsub+0x398>
 8001412:	23ff      	movs	r3, #255	@ 0xff
 8001414:	4664      	mov	r4, ip
 8001416:	2c00      	cmp	r4, #0
 8001418:	d100      	bne.n	800141c <__aeabi_fsub+0x128>
 800141a:	e15f      	b.n	80016dc <__aeabi_fsub+0x3e8>
 800141c:	1e5d      	subs	r5, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d100      	bne.n	8001424 <__aeabi_fsub+0x130>
 8001422:	e174      	b.n	800170e <__aeabi_fsub+0x41a>
 8001424:	0034      	movs	r4, r6
 8001426:	2bff      	cmp	r3, #255	@ 0xff
 8001428:	d074      	beq.n	8001514 <__aeabi_fsub+0x220>
 800142a:	002b      	movs	r3, r5
 800142c:	e103      	b.n	8001636 <__aeabi_fsub+0x342>
 800142e:	42b4      	cmp	r4, r6
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x140>
 8001432:	e09c      	b.n	800156e <__aeabi_fsub+0x27a>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <__aeabi_fsub+0x174>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d0ea      	beq.n	8001412 <__aeabi_fsub+0x11e>
 800143c:	0007      	movs	r7, r0
 800143e:	0034      	movs	r4, r6
 8001440:	e06c      	b.n	800151c <__aeabi_fsub+0x228>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0cc      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d02b      	beq.n	80014a4 <__aeabi_fsub+0x1b0>
 800144c:	2bff      	cmp	r3, #255	@ 0xff
 800144e:	d062      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001450:	0013      	movs	r3, r2
 8001452:	e773      	b.n	800133c <__aeabi_fsub+0x48>
 8001454:	2900      	cmp	r1, #0
 8001456:	d0c3      	beq.n	80013e0 <__aeabi_fsub+0xec>
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	d100      	bne.n	8001460 <__aeabi_fsub+0x16c>
 800145e:	e11e      	b.n	800169e <__aeabi_fsub+0x3aa>
 8001460:	2bff      	cmp	r3, #255	@ 0xff
 8001462:	d058      	beq.n	8001516 <__aeabi_fsub+0x222>
 8001464:	0013      	movs	r3, r2
 8001466:	e7b4      	b.n	80013d2 <__aeabi_fsub+0xde>
 8001468:	22fe      	movs	r2, #254	@ 0xfe
 800146a:	1c6b      	adds	r3, r5, #1
 800146c:	421a      	tst	r2, r3
 800146e:	d10d      	bne.n	800148c <__aeabi_fsub+0x198>
 8001470:	2d00      	cmp	r5, #0
 8001472:	d060      	beq.n	8001536 <__aeabi_fsub+0x242>
 8001474:	4663      	mov	r3, ip
 8001476:	2b00      	cmp	r3, #0
 8001478:	d000      	beq.n	800147c <__aeabi_fsub+0x188>
 800147a:	e120      	b.n	80016be <__aeabi_fsub+0x3ca>
 800147c:	2900      	cmp	r1, #0
 800147e:	d000      	beq.n	8001482 <__aeabi_fsub+0x18e>
 8001480:	e128      	b.n	80016d4 <__aeabi_fsub+0x3e0>
 8001482:	2280      	movs	r2, #128	@ 0x80
 8001484:	2400      	movs	r4, #0
 8001486:	20ff      	movs	r0, #255	@ 0xff
 8001488:	03d2      	lsls	r2, r2, #15
 800148a:	e78f      	b.n	80013ac <__aeabi_fsub+0xb8>
 800148c:	4663      	mov	r3, ip
 800148e:	1a5f      	subs	r7, r3, r1
 8001490:	017b      	lsls	r3, r7, #5
 8001492:	d500      	bpl.n	8001496 <__aeabi_fsub+0x1a2>
 8001494:	e0fe      	b.n	8001694 <__aeabi_fsub+0x3a0>
 8001496:	2f00      	cmp	r7, #0
 8001498:	d000      	beq.n	800149c <__aeabi_fsub+0x1a8>
 800149a:	e765      	b.n	8001368 <__aeabi_fsub+0x74>
 800149c:	2400      	movs	r4, #0
 800149e:	2000      	movs	r0, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	e783      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014a4:	4663      	mov	r3, ip
 80014a6:	1a59      	subs	r1, r3, r1
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	d400      	bmi.n	80014ae <__aeabi_fsub+0x1ba>
 80014ac:	e119      	b.n	80016e2 <__aeabi_fsub+0x3ee>
 80014ae:	018f      	lsls	r7, r1, #6
 80014b0:	09bf      	lsrs	r7, r7, #6
 80014b2:	0038      	movs	r0, r7
 80014b4:	f002 fab8 	bl	8003a28 <__clzsi2>
 80014b8:	003b      	movs	r3, r7
 80014ba:	3805      	subs	r0, #5
 80014bc:	4083      	lsls	r3, r0
 80014be:	2501      	movs	r5, #1
 80014c0:	2220      	movs	r2, #32
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	3001      	adds	r0, #1
 80014c6:	1a12      	subs	r2, r2, r0
 80014c8:	0019      	movs	r1, r3
 80014ca:	4093      	lsls	r3, r2
 80014cc:	40c1      	lsrs	r1, r0
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	4193      	sbcs	r3, r2
 80014d2:	4319      	orrs	r1, r3
 80014d4:	468c      	mov	ip, r1
 80014d6:	1e0b      	subs	r3, r1, #0
 80014d8:	d0e1      	beq.n	800149e <__aeabi_fsub+0x1aa>
 80014da:	075b      	lsls	r3, r3, #29
 80014dc:	d100      	bne.n	80014e0 <__aeabi_fsub+0x1ec>
 80014de:	e152      	b.n	8001786 <__aeabi_fsub+0x492>
 80014e0:	230f      	movs	r3, #15
 80014e2:	2500      	movs	r5, #0
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d000      	beq.n	80014ec <__aeabi_fsub+0x1f8>
 80014ea:	e752      	b.n	8001392 <__aeabi_fsub+0x9e>
 80014ec:	2001      	movs	r0, #1
 80014ee:	014a      	lsls	r2, r1, #5
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_fsub+0x200>
 80014f2:	e092      	b.n	800161a <__aeabi_fsub+0x326>
 80014f4:	b2c0      	uxtb	r0, r0
 80014f6:	4663      	mov	r3, ip
 80014f8:	019a      	lsls	r2, r3, #6
 80014fa:	0a52      	lsrs	r2, r2, #9
 80014fc:	e756      	b.n	80013ac <__aeabi_fsub+0xb8>
 80014fe:	4663      	mov	r3, ip
 8001500:	075b      	lsls	r3, r3, #29
 8001502:	d005      	beq.n	8001510 <__aeabi_fsub+0x21c>
 8001504:	230f      	movs	r3, #15
 8001506:	4662      	mov	r2, ip
 8001508:	4013      	ands	r3, r2
 800150a:	2b04      	cmp	r3, #4
 800150c:	d000      	beq.n	8001510 <__aeabi_fsub+0x21c>
 800150e:	e740      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001510:	002b      	movs	r3, r5
 8001512:	e765      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001514:	0007      	movs	r7, r0
 8001516:	2f00      	cmp	r7, #0
 8001518:	d100      	bne.n	800151c <__aeabi_fsub+0x228>
 800151a:	e745      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	03d2      	lsls	r2, r2, #15
 8001520:	433a      	orrs	r2, r7
 8001522:	0252      	lsls	r2, r2, #9
 8001524:	20ff      	movs	r0, #255	@ 0xff
 8001526:	0a52      	lsrs	r2, r2, #9
 8001528:	e740      	b.n	80013ac <__aeabi_fsub+0xb8>
 800152a:	2b00      	cmp	r3, #0
 800152c:	d179      	bne.n	8001622 <__aeabi_fsub+0x32e>
 800152e:	22fe      	movs	r2, #254	@ 0xfe
 8001530:	1c6b      	adds	r3, r5, #1
 8001532:	421a      	tst	r2, r3
 8001534:	d1aa      	bne.n	800148c <__aeabi_fsub+0x198>
 8001536:	4663      	mov	r3, ip
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <__aeabi_fsub+0x24a>
 800153c:	e0f5      	b.n	800172a <__aeabi_fsub+0x436>
 800153e:	2900      	cmp	r1, #0
 8001540:	d100      	bne.n	8001544 <__aeabi_fsub+0x250>
 8001542:	e0d1      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 8001544:	1a5f      	subs	r7, r3, r1
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	04db      	lsls	r3, r3, #19
 800154a:	421f      	tst	r7, r3
 800154c:	d100      	bne.n	8001550 <__aeabi_fsub+0x25c>
 800154e:	e10e      	b.n	800176e <__aeabi_fsub+0x47a>
 8001550:	4662      	mov	r2, ip
 8001552:	2401      	movs	r4, #1
 8001554:	1a8a      	subs	r2, r1, r2
 8001556:	4694      	mov	ip, r2
 8001558:	2000      	movs	r0, #0
 800155a:	4034      	ands	r4, r6
 800155c:	2a00      	cmp	r2, #0
 800155e:	d100      	bne.n	8001562 <__aeabi_fsub+0x26e>
 8001560:	e724      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001562:	2001      	movs	r0, #1
 8001564:	421a      	tst	r2, r3
 8001566:	d1c6      	bne.n	80014f6 <__aeabi_fsub+0x202>
 8001568:	2300      	movs	r3, #0
 800156a:	08d7      	lsrs	r7, r2, #3
 800156c:	e73d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d017      	beq.n	80015a2 <__aeabi_fsub+0x2ae>
 8001572:	2d00      	cmp	r5, #0
 8001574:	d000      	beq.n	8001578 <__aeabi_fsub+0x284>
 8001576:	e0af      	b.n	80016d8 <__aeabi_fsub+0x3e4>
 8001578:	23ff      	movs	r3, #255	@ 0xff
 800157a:	4665      	mov	r5, ip
 800157c:	2d00      	cmp	r5, #0
 800157e:	d100      	bne.n	8001582 <__aeabi_fsub+0x28e>
 8001580:	e0ad      	b.n	80016de <__aeabi_fsub+0x3ea>
 8001582:	1e5e      	subs	r6, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d100      	bne.n	800158a <__aeabi_fsub+0x296>
 8001588:	e089      	b.n	800169e <__aeabi_fsub+0x3aa>
 800158a:	2bff      	cmp	r3, #255	@ 0xff
 800158c:	d0c2      	beq.n	8001514 <__aeabi_fsub+0x220>
 800158e:	2e1b      	cmp	r6, #27
 8001590:	dc00      	bgt.n	8001594 <__aeabi_fsub+0x2a0>
 8001592:	e0ab      	b.n	80016ec <__aeabi_fsub+0x3f8>
 8001594:	1d4b      	adds	r3, r1, #5
 8001596:	469c      	mov	ip, r3
 8001598:	0013      	movs	r3, r2
 800159a:	e721      	b.n	80013e0 <__aeabi_fsub+0xec>
 800159c:	464b      	mov	r3, r9
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d170      	bne.n	8001684 <__aeabi_fsub+0x390>
 80015a2:	22fe      	movs	r2, #254	@ 0xfe
 80015a4:	1c6b      	adds	r3, r5, #1
 80015a6:	421a      	tst	r2, r3
 80015a8:	d15e      	bne.n	8001668 <__aeabi_fsub+0x374>
 80015aa:	2d00      	cmp	r5, #0
 80015ac:	d000      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 80015ae:	e0c3      	b.n	8001738 <__aeabi_fsub+0x444>
 80015b0:	4663      	mov	r3, ip
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_fsub+0x2c4>
 80015b6:	e0d0      	b.n	800175a <__aeabi_fsub+0x466>
 80015b8:	2900      	cmp	r1, #0
 80015ba:	d100      	bne.n	80015be <__aeabi_fsub+0x2ca>
 80015bc:	e094      	b.n	80016e8 <__aeabi_fsub+0x3f4>
 80015be:	000a      	movs	r2, r1
 80015c0:	4462      	add	r2, ip
 80015c2:	0153      	lsls	r3, r2, #5
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_fsub+0x2d4>
 80015c6:	e0d8      	b.n	800177a <__aeabi_fsub+0x486>
 80015c8:	0192      	lsls	r2, r2, #6
 80015ca:	2001      	movs	r0, #1
 80015cc:	0a52      	lsrs	r2, r2, #9
 80015ce:	e6ed      	b.n	80013ac <__aeabi_fsub+0xb8>
 80015d0:	0008      	movs	r0, r1
 80015d2:	2220      	movs	r2, #32
 80015d4:	40d8      	lsrs	r0, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4099      	lsls	r1, r3
 80015da:	000b      	movs	r3, r1
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4193      	sbcs	r3, r2
 80015e0:	4303      	orrs	r3, r0
 80015e2:	449c      	add	ip, r3
 80015e4:	4663      	mov	r3, ip
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	d589      	bpl.n	80014fe <__aeabi_fsub+0x20a>
 80015ea:	3501      	adds	r5, #1
 80015ec:	2dff      	cmp	r5, #255	@ 0xff
 80015ee:	d100      	bne.n	80015f2 <__aeabi_fsub+0x2fe>
 80015f0:	e6da      	b.n	80013a8 <__aeabi_fsub+0xb4>
 80015f2:	4662      	mov	r2, ip
 80015f4:	2301      	movs	r3, #1
 80015f6:	4919      	ldr	r1, [pc, #100]	@ (800165c <__aeabi_fsub+0x368>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	0852      	lsrs	r2, r2, #1
 80015fc:	400a      	ands	r2, r1
 80015fe:	431a      	orrs	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	4694      	mov	ip, r2
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	d004      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001608:	230f      	movs	r3, #15
 800160a:	4013      	ands	r3, r2
 800160c:	2b04      	cmp	r3, #4
 800160e:	d000      	beq.n	8001612 <__aeabi_fsub+0x31e>
 8001610:	e6bf      	b.n	8001392 <__aeabi_fsub+0x9e>
 8001612:	4663      	mov	r3, ip
 8001614:	015b      	lsls	r3, r3, #5
 8001616:	d500      	bpl.n	800161a <__aeabi_fsub+0x326>
 8001618:	e6c2      	b.n	80013a0 <__aeabi_fsub+0xac>
 800161a:	4663      	mov	r3, ip
 800161c:	08df      	lsrs	r7, r3, #3
 800161e:	002b      	movs	r3, r5
 8001620:	e6e3      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001622:	1b53      	subs	r3, r2, r5
 8001624:	2d00      	cmp	r5, #0
 8001626:	d100      	bne.n	800162a <__aeabi_fsub+0x336>
 8001628:	e6f4      	b.n	8001414 <__aeabi_fsub+0x120>
 800162a:	2080      	movs	r0, #128	@ 0x80
 800162c:	4664      	mov	r4, ip
 800162e:	04c0      	lsls	r0, r0, #19
 8001630:	4304      	orrs	r4, r0
 8001632:	46a4      	mov	ip, r4
 8001634:	0034      	movs	r4, r6
 8001636:	2001      	movs	r0, #1
 8001638:	2b1b      	cmp	r3, #27
 800163a:	dc09      	bgt.n	8001650 <__aeabi_fsub+0x35c>
 800163c:	2520      	movs	r5, #32
 800163e:	4660      	mov	r0, ip
 8001640:	40d8      	lsrs	r0, r3
 8001642:	1aeb      	subs	r3, r5, r3
 8001644:	4665      	mov	r5, ip
 8001646:	409d      	lsls	r5, r3
 8001648:	002b      	movs	r3, r5
 800164a:	1e5d      	subs	r5, r3, #1
 800164c:	41ab      	sbcs	r3, r5
 800164e:	4318      	orrs	r0, r3
 8001650:	1a0b      	subs	r3, r1, r0
 8001652:	469c      	mov	ip, r3
 8001654:	0015      	movs	r5, r2
 8001656:	e680      	b.n	800135a <__aeabi_fsub+0x66>
 8001658:	fbffffff 	.word	0xfbffffff
 800165c:	7dffffff 	.word	0x7dffffff
 8001660:	22fe      	movs	r2, #254	@ 0xfe
 8001662:	1c6b      	adds	r3, r5, #1
 8001664:	4213      	tst	r3, r2
 8001666:	d0a3      	beq.n	80015b0 <__aeabi_fsub+0x2bc>
 8001668:	2bff      	cmp	r3, #255	@ 0xff
 800166a:	d100      	bne.n	800166e <__aeabi_fsub+0x37a>
 800166c:	e69c      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800166e:	4461      	add	r1, ip
 8001670:	0849      	lsrs	r1, r1, #1
 8001672:	074a      	lsls	r2, r1, #29
 8001674:	d049      	beq.n	800170a <__aeabi_fsub+0x416>
 8001676:	220f      	movs	r2, #15
 8001678:	400a      	ands	r2, r1
 800167a:	2a04      	cmp	r2, #4
 800167c:	d045      	beq.n	800170a <__aeabi_fsub+0x416>
 800167e:	1d0a      	adds	r2, r1, #4
 8001680:	4694      	mov	ip, r2
 8001682:	e6ad      	b.n	80013e0 <__aeabi_fsub+0xec>
 8001684:	2d00      	cmp	r5, #0
 8001686:	d100      	bne.n	800168a <__aeabi_fsub+0x396>
 8001688:	e776      	b.n	8001578 <__aeabi_fsub+0x284>
 800168a:	e68d      	b.n	80013a8 <__aeabi_fsub+0xb4>
 800168c:	0034      	movs	r4, r6
 800168e:	20ff      	movs	r0, #255	@ 0xff
 8001690:	2200      	movs	r2, #0
 8001692:	e68b      	b.n	80013ac <__aeabi_fsub+0xb8>
 8001694:	4663      	mov	r3, ip
 8001696:	2401      	movs	r4, #1
 8001698:	1acf      	subs	r7, r1, r3
 800169a:	4034      	ands	r4, r6
 800169c:	e664      	b.n	8001368 <__aeabi_fsub+0x74>
 800169e:	4461      	add	r1, ip
 80016a0:	014b      	lsls	r3, r1, #5
 80016a2:	d56d      	bpl.n	8001780 <__aeabi_fsub+0x48c>
 80016a4:	0848      	lsrs	r0, r1, #1
 80016a6:	4944      	ldr	r1, [pc, #272]	@ (80017b8 <__aeabi_fsub+0x4c4>)
 80016a8:	4001      	ands	r1, r0
 80016aa:	0743      	lsls	r3, r0, #29
 80016ac:	d02c      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016ae:	230f      	movs	r3, #15
 80016b0:	4003      	ands	r3, r0
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d028      	beq.n	8001708 <__aeabi_fsub+0x414>
 80016b6:	1d0b      	adds	r3, r1, #4
 80016b8:	469c      	mov	ip, r3
 80016ba:	2302      	movs	r3, #2
 80016bc:	e690      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016be:	2900      	cmp	r1, #0
 80016c0:	d100      	bne.n	80016c4 <__aeabi_fsub+0x3d0>
 80016c2:	e72b      	b.n	800151c <__aeabi_fsub+0x228>
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	03db      	lsls	r3, r3, #15
 80016c8:	429f      	cmp	r7, r3
 80016ca:	d200      	bcs.n	80016ce <__aeabi_fsub+0x3da>
 80016cc:	e726      	b.n	800151c <__aeabi_fsub+0x228>
 80016ce:	4298      	cmp	r0, r3
 80016d0:	d300      	bcc.n	80016d4 <__aeabi_fsub+0x3e0>
 80016d2:	e723      	b.n	800151c <__aeabi_fsub+0x228>
 80016d4:	2401      	movs	r4, #1
 80016d6:	4034      	ands	r4, r6
 80016d8:	0007      	movs	r7, r0
 80016da:	e71f      	b.n	800151c <__aeabi_fsub+0x228>
 80016dc:	0034      	movs	r4, r6
 80016de:	468c      	mov	ip, r1
 80016e0:	e67e      	b.n	80013e0 <__aeabi_fsub+0xec>
 80016e2:	2301      	movs	r3, #1
 80016e4:	08cf      	lsrs	r7, r1, #3
 80016e6:	e680      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e67e      	b.n	80013ea <__aeabi_fsub+0xf6>
 80016ec:	2020      	movs	r0, #32
 80016ee:	4665      	mov	r5, ip
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4085      	lsls	r5, r0
 80016f4:	4663      	mov	r3, ip
 80016f6:	0028      	movs	r0, r5
 80016f8:	40f3      	lsrs	r3, r6
 80016fa:	1e45      	subs	r5, r0, #1
 80016fc:	41a8      	sbcs	r0, r5
 80016fe:	4303      	orrs	r3, r0
 8001700:	469c      	mov	ip, r3
 8001702:	0015      	movs	r5, r2
 8001704:	448c      	add	ip, r1
 8001706:	e76d      	b.n	80015e4 <__aeabi_fsub+0x2f0>
 8001708:	2302      	movs	r3, #2
 800170a:	08cf      	lsrs	r7, r1, #3
 800170c:	e66d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800170e:	1b0f      	subs	r7, r1, r4
 8001710:	017b      	lsls	r3, r7, #5
 8001712:	d528      	bpl.n	8001766 <__aeabi_fsub+0x472>
 8001714:	01bf      	lsls	r7, r7, #6
 8001716:	09bf      	lsrs	r7, r7, #6
 8001718:	0038      	movs	r0, r7
 800171a:	f002 f985 	bl	8003a28 <__clzsi2>
 800171e:	003b      	movs	r3, r7
 8001720:	3805      	subs	r0, #5
 8001722:	4083      	lsls	r3, r0
 8001724:	0034      	movs	r4, r6
 8001726:	2501      	movs	r5, #1
 8001728:	e6ca      	b.n	80014c0 <__aeabi_fsub+0x1cc>
 800172a:	2900      	cmp	r1, #0
 800172c:	d100      	bne.n	8001730 <__aeabi_fsub+0x43c>
 800172e:	e6b5      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001730:	2401      	movs	r4, #1
 8001732:	0007      	movs	r7, r0
 8001734:	4034      	ands	r4, r6
 8001736:	e658      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001738:	4663      	mov	r3, ip
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_fsub+0x44c>
 800173e:	e6e9      	b.n	8001514 <__aeabi_fsub+0x220>
 8001740:	2900      	cmp	r1, #0
 8001742:	d100      	bne.n	8001746 <__aeabi_fsub+0x452>
 8001744:	e6ea      	b.n	800151c <__aeabi_fsub+0x228>
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	03db      	lsls	r3, r3, #15
 800174a:	429f      	cmp	r7, r3
 800174c:	d200      	bcs.n	8001750 <__aeabi_fsub+0x45c>
 800174e:	e6e5      	b.n	800151c <__aeabi_fsub+0x228>
 8001750:	4298      	cmp	r0, r3
 8001752:	d300      	bcc.n	8001756 <__aeabi_fsub+0x462>
 8001754:	e6e2      	b.n	800151c <__aeabi_fsub+0x228>
 8001756:	0007      	movs	r7, r0
 8001758:	e6e0      	b.n	800151c <__aeabi_fsub+0x228>
 800175a:	2900      	cmp	r1, #0
 800175c:	d100      	bne.n	8001760 <__aeabi_fsub+0x46c>
 800175e:	e69e      	b.n	800149e <__aeabi_fsub+0x1aa>
 8001760:	2300      	movs	r3, #0
 8001762:	08cf      	lsrs	r7, r1, #3
 8001764:	e641      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001766:	0034      	movs	r4, r6
 8001768:	2301      	movs	r3, #1
 800176a:	08ff      	lsrs	r7, r7, #3
 800176c:	e63d      	b.n	80013ea <__aeabi_fsub+0xf6>
 800176e:	2f00      	cmp	r7, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_fsub+0x480>
 8001772:	e693      	b.n	800149c <__aeabi_fsub+0x1a8>
 8001774:	2300      	movs	r3, #0
 8001776:	08ff      	lsrs	r7, r7, #3
 8001778:	e637      	b.n	80013ea <__aeabi_fsub+0xf6>
 800177a:	2300      	movs	r3, #0
 800177c:	08d7      	lsrs	r7, r2, #3
 800177e:	e634      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001780:	2301      	movs	r3, #1
 8001782:	08cf      	lsrs	r7, r1, #3
 8001784:	e631      	b.n	80013ea <__aeabi_fsub+0xf6>
 8001786:	2280      	movs	r2, #128	@ 0x80
 8001788:	000b      	movs	r3, r1
 800178a:	04d2      	lsls	r2, r2, #19
 800178c:	2001      	movs	r0, #1
 800178e:	4013      	ands	r3, r2
 8001790:	4211      	tst	r1, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_fsub+0x4a2>
 8001794:	e6ae      	b.n	80014f4 <__aeabi_fsub+0x200>
 8001796:	08cf      	lsrs	r7, r1, #3
 8001798:	e627      	b.n	80013ea <__aeabi_fsub+0xf6>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <__aeabi_fsub+0x4ac>
 800179e:	e75f      	b.n	8001660 <__aeabi_fsub+0x36c>
 80017a0:	1b56      	subs	r6, r2, r5
 80017a2:	2d00      	cmp	r5, #0
 80017a4:	d101      	bne.n	80017aa <__aeabi_fsub+0x4b6>
 80017a6:	0033      	movs	r3, r6
 80017a8:	e6e7      	b.n	800157a <__aeabi_fsub+0x286>
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	4660      	mov	r0, ip
 80017ae:	04db      	lsls	r3, r3, #19
 80017b0:	4318      	orrs	r0, r3
 80017b2:	4684      	mov	ip, r0
 80017b4:	e6eb      	b.n	800158e <__aeabi_fsub+0x29a>
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	7dffffff 	.word	0x7dffffff

080017bc <__aeabi_fcmpun>:
 80017bc:	0243      	lsls	r3, r0, #9
 80017be:	024a      	lsls	r2, r1, #9
 80017c0:	0040      	lsls	r0, r0, #1
 80017c2:	0049      	lsls	r1, r1, #1
 80017c4:	0a5b      	lsrs	r3, r3, #9
 80017c6:	0a52      	lsrs	r2, r2, #9
 80017c8:	0e09      	lsrs	r1, r1, #24
 80017ca:	0e00      	lsrs	r0, r0, #24
 80017cc:	28ff      	cmp	r0, #255	@ 0xff
 80017ce:	d006      	beq.n	80017de <__aeabi_fcmpun+0x22>
 80017d0:	2000      	movs	r0, #0
 80017d2:	29ff      	cmp	r1, #255	@ 0xff
 80017d4:	d102      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017d6:	1e53      	subs	r3, r2, #1
 80017d8:	419a      	sbcs	r2, r3
 80017da:	0010      	movs	r0, r2
 80017dc:	4770      	bx	lr
 80017de:	38fe      	subs	r0, #254	@ 0xfe
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1fb      	bne.n	80017dc <__aeabi_fcmpun+0x20>
 80017e4:	e7f4      	b.n	80017d0 <__aeabi_fcmpun+0x14>
 80017e6:	46c0      	nop			@ (mov r8, r8)

080017e8 <__aeabi_f2iz>:
 80017e8:	0241      	lsls	r1, r0, #9
 80017ea:	0042      	lsls	r2, r0, #1
 80017ec:	0fc3      	lsrs	r3, r0, #31
 80017ee:	0a49      	lsrs	r1, r1, #9
 80017f0:	2000      	movs	r0, #0
 80017f2:	0e12      	lsrs	r2, r2, #24
 80017f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80017f6:	dd03      	ble.n	8001800 <__aeabi_f2iz+0x18>
 80017f8:	2a9d      	cmp	r2, #157	@ 0x9d
 80017fa:	dd02      	ble.n	8001802 <__aeabi_f2iz+0x1a>
 80017fc:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <__aeabi_f2iz+0x3c>)
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	4770      	bx	lr
 8001802:	2080      	movs	r0, #128	@ 0x80
 8001804:	0400      	lsls	r0, r0, #16
 8001806:	4301      	orrs	r1, r0
 8001808:	2a95      	cmp	r2, #149	@ 0x95
 800180a:	dc07      	bgt.n	800181c <__aeabi_f2iz+0x34>
 800180c:	2096      	movs	r0, #150	@ 0x96
 800180e:	1a82      	subs	r2, r0, r2
 8001810:	40d1      	lsrs	r1, r2
 8001812:	4248      	negs	r0, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f3      	bne.n	8001800 <__aeabi_f2iz+0x18>
 8001818:	0008      	movs	r0, r1
 800181a:	e7f1      	b.n	8001800 <__aeabi_f2iz+0x18>
 800181c:	3a96      	subs	r2, #150	@ 0x96
 800181e:	4091      	lsls	r1, r2
 8001820:	e7f7      	b.n	8001812 <__aeabi_f2iz+0x2a>
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	7fffffff 	.word	0x7fffffff

08001828 <__aeabi_i2f>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	2800      	cmp	r0, #0
 800182c:	d012      	beq.n	8001854 <__aeabi_i2f+0x2c>
 800182e:	17c3      	asrs	r3, r0, #31
 8001830:	18c5      	adds	r5, r0, r3
 8001832:	405d      	eors	r5, r3
 8001834:	0fc4      	lsrs	r4, r0, #31
 8001836:	0028      	movs	r0, r5
 8001838:	f002 f8f6 	bl	8003a28 <__clzsi2>
 800183c:	239e      	movs	r3, #158	@ 0x9e
 800183e:	1a1b      	subs	r3, r3, r0
 8001840:	2b96      	cmp	r3, #150	@ 0x96
 8001842:	dc0f      	bgt.n	8001864 <__aeabi_i2f+0x3c>
 8001844:	2808      	cmp	r0, #8
 8001846:	d038      	beq.n	80018ba <__aeabi_i2f+0x92>
 8001848:	3808      	subs	r0, #8
 800184a:	4085      	lsls	r5, r0
 800184c:	026d      	lsls	r5, r5, #9
 800184e:	0a6d      	lsrs	r5, r5, #9
 8001850:	b2d8      	uxtb	r0, r3
 8001852:	e002      	b.n	800185a <__aeabi_i2f+0x32>
 8001854:	2400      	movs	r4, #0
 8001856:	2000      	movs	r0, #0
 8001858:	2500      	movs	r5, #0
 800185a:	05c0      	lsls	r0, r0, #23
 800185c:	4328      	orrs	r0, r5
 800185e:	07e4      	lsls	r4, r4, #31
 8001860:	4320      	orrs	r0, r4
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	2b99      	cmp	r3, #153	@ 0x99
 8001866:	dc14      	bgt.n	8001892 <__aeabi_i2f+0x6a>
 8001868:	1f42      	subs	r2, r0, #5
 800186a:	4095      	lsls	r5, r2
 800186c:	002a      	movs	r2, r5
 800186e:	4915      	ldr	r1, [pc, #84]	@ (80018c4 <__aeabi_i2f+0x9c>)
 8001870:	4011      	ands	r1, r2
 8001872:	0755      	lsls	r5, r2, #29
 8001874:	d01c      	beq.n	80018b0 <__aeabi_i2f+0x88>
 8001876:	250f      	movs	r5, #15
 8001878:	402a      	ands	r2, r5
 800187a:	2a04      	cmp	r2, #4
 800187c:	d018      	beq.n	80018b0 <__aeabi_i2f+0x88>
 800187e:	3104      	adds	r1, #4
 8001880:	08ca      	lsrs	r2, r1, #3
 8001882:	0149      	lsls	r1, r1, #5
 8001884:	d515      	bpl.n	80018b2 <__aeabi_i2f+0x8a>
 8001886:	239f      	movs	r3, #159	@ 0x9f
 8001888:	0252      	lsls	r2, r2, #9
 800188a:	1a18      	subs	r0, r3, r0
 800188c:	0a55      	lsrs	r5, r2, #9
 800188e:	b2c0      	uxtb	r0, r0
 8001890:	e7e3      	b.n	800185a <__aeabi_i2f+0x32>
 8001892:	2205      	movs	r2, #5
 8001894:	0029      	movs	r1, r5
 8001896:	1a12      	subs	r2, r2, r0
 8001898:	40d1      	lsrs	r1, r2
 800189a:	0002      	movs	r2, r0
 800189c:	321b      	adds	r2, #27
 800189e:	4095      	lsls	r5, r2
 80018a0:	002a      	movs	r2, r5
 80018a2:	1e55      	subs	r5, r2, #1
 80018a4:	41aa      	sbcs	r2, r5
 80018a6:	430a      	orrs	r2, r1
 80018a8:	4906      	ldr	r1, [pc, #24]	@ (80018c4 <__aeabi_i2f+0x9c>)
 80018aa:	4011      	ands	r1, r2
 80018ac:	0755      	lsls	r5, r2, #29
 80018ae:	d1e2      	bne.n	8001876 <__aeabi_i2f+0x4e>
 80018b0:	08ca      	lsrs	r2, r1, #3
 80018b2:	0252      	lsls	r2, r2, #9
 80018b4:	0a55      	lsrs	r5, r2, #9
 80018b6:	b2d8      	uxtb	r0, r3
 80018b8:	e7cf      	b.n	800185a <__aeabi_i2f+0x32>
 80018ba:	026d      	lsls	r5, r5, #9
 80018bc:	0a6d      	lsrs	r5, r5, #9
 80018be:	308e      	adds	r0, #142	@ 0x8e
 80018c0:	e7cb      	b.n	800185a <__aeabi_i2f+0x32>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	fbffffff 	.word	0xfbffffff

080018c8 <__aeabi_ui2f>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	1e04      	subs	r4, r0, #0
 80018cc:	d00d      	beq.n	80018ea <__aeabi_ui2f+0x22>
 80018ce:	f002 f8ab 	bl	8003a28 <__clzsi2>
 80018d2:	239e      	movs	r3, #158	@ 0x9e
 80018d4:	1a1b      	subs	r3, r3, r0
 80018d6:	2b96      	cmp	r3, #150	@ 0x96
 80018d8:	dc0c      	bgt.n	80018f4 <__aeabi_ui2f+0x2c>
 80018da:	2808      	cmp	r0, #8
 80018dc:	d034      	beq.n	8001948 <__aeabi_ui2f+0x80>
 80018de:	3808      	subs	r0, #8
 80018e0:	4084      	lsls	r4, r0
 80018e2:	0264      	lsls	r4, r4, #9
 80018e4:	0a64      	lsrs	r4, r4, #9
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	e001      	b.n	80018ee <__aeabi_ui2f+0x26>
 80018ea:	2000      	movs	r0, #0
 80018ec:	2400      	movs	r4, #0
 80018ee:	05c0      	lsls	r0, r0, #23
 80018f0:	4320      	orrs	r0, r4
 80018f2:	bd10      	pop	{r4, pc}
 80018f4:	2b99      	cmp	r3, #153	@ 0x99
 80018f6:	dc13      	bgt.n	8001920 <__aeabi_ui2f+0x58>
 80018f8:	1f42      	subs	r2, r0, #5
 80018fa:	4094      	lsls	r4, r2
 80018fc:	4a14      	ldr	r2, [pc, #80]	@ (8001950 <__aeabi_ui2f+0x88>)
 80018fe:	4022      	ands	r2, r4
 8001900:	0761      	lsls	r1, r4, #29
 8001902:	d01c      	beq.n	800193e <__aeabi_ui2f+0x76>
 8001904:	210f      	movs	r1, #15
 8001906:	4021      	ands	r1, r4
 8001908:	2904      	cmp	r1, #4
 800190a:	d018      	beq.n	800193e <__aeabi_ui2f+0x76>
 800190c:	3204      	adds	r2, #4
 800190e:	08d4      	lsrs	r4, r2, #3
 8001910:	0152      	lsls	r2, r2, #5
 8001912:	d515      	bpl.n	8001940 <__aeabi_ui2f+0x78>
 8001914:	239f      	movs	r3, #159	@ 0x9f
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	1a18      	subs	r0, r3, r0
 800191a:	0a64      	lsrs	r4, r4, #9
 800191c:	b2c0      	uxtb	r0, r0
 800191e:	e7e6      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001920:	0002      	movs	r2, r0
 8001922:	0021      	movs	r1, r4
 8001924:	321b      	adds	r2, #27
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	418a      	sbcs	r2, r1
 800192e:	2105      	movs	r1, #5
 8001930:	1a09      	subs	r1, r1, r0
 8001932:	40cc      	lsrs	r4, r1
 8001934:	4314      	orrs	r4, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <__aeabi_ui2f+0x88>)
 8001938:	4022      	ands	r2, r4
 800193a:	0761      	lsls	r1, r4, #29
 800193c:	d1e2      	bne.n	8001904 <__aeabi_ui2f+0x3c>
 800193e:	08d4      	lsrs	r4, r2, #3
 8001940:	0264      	lsls	r4, r4, #9
 8001942:	0a64      	lsrs	r4, r4, #9
 8001944:	b2d8      	uxtb	r0, r3
 8001946:	e7d2      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001948:	0264      	lsls	r4, r4, #9
 800194a:	0a64      	lsrs	r4, r4, #9
 800194c:	308e      	adds	r0, #142	@ 0x8e
 800194e:	e7ce      	b.n	80018ee <__aeabi_ui2f+0x26>
 8001950:	fbffffff 	.word	0xfbffffff

08001954 <__aeabi_dadd>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	464f      	mov	r7, r9
 8001958:	4646      	mov	r6, r8
 800195a:	46d6      	mov	lr, sl
 800195c:	b5c0      	push	{r6, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	9000      	str	r0, [sp, #0]
 8001962:	9101      	str	r1, [sp, #4]
 8001964:	030e      	lsls	r6, r1, #12
 8001966:	004c      	lsls	r4, r1, #1
 8001968:	0fcd      	lsrs	r5, r1, #31
 800196a:	0a71      	lsrs	r1, r6, #9
 800196c:	9e00      	ldr	r6, [sp, #0]
 800196e:	005f      	lsls	r7, r3, #1
 8001970:	0f76      	lsrs	r6, r6, #29
 8001972:	430e      	orrs	r6, r1
 8001974:	9900      	ldr	r1, [sp, #0]
 8001976:	9200      	str	r2, [sp, #0]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	00c9      	lsls	r1, r1, #3
 800197c:	4689      	mov	r9, r1
 800197e:	0319      	lsls	r1, r3, #12
 8001980:	0d7b      	lsrs	r3, r7, #21
 8001982:	4698      	mov	r8, r3
 8001984:	9b01      	ldr	r3, [sp, #4]
 8001986:	0a49      	lsrs	r1, r1, #9
 8001988:	0fdb      	lsrs	r3, r3, #31
 800198a:	469c      	mov	ip, r3
 800198c:	9b00      	ldr	r3, [sp, #0]
 800198e:	9a00      	ldr	r2, [sp, #0]
 8001990:	0f5b      	lsrs	r3, r3, #29
 8001992:	430b      	orrs	r3, r1
 8001994:	4641      	mov	r1, r8
 8001996:	0d64      	lsrs	r4, r4, #21
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	1a61      	subs	r1, r4, r1
 800199c:	4565      	cmp	r5, ip
 800199e:	d100      	bne.n	80019a2 <__aeabi_dadd+0x4e>
 80019a0:	e0a6      	b.n	8001af0 <__aeabi_dadd+0x19c>
 80019a2:	2900      	cmp	r1, #0
 80019a4:	dd72      	ble.n	8001a8c <__aeabi_dadd+0x138>
 80019a6:	4647      	mov	r7, r8
 80019a8:	2f00      	cmp	r7, #0
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x5a>
 80019ac:	e0dd      	b.n	8001b6a <__aeabi_dadd+0x216>
 80019ae:	4fcc      	ldr	r7, [pc, #816]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 80019b0:	42bc      	cmp	r4, r7
 80019b2:	d100      	bne.n	80019b6 <__aeabi_dadd+0x62>
 80019b4:	e19a      	b.n	8001cec <__aeabi_dadd+0x398>
 80019b6:	2701      	movs	r7, #1
 80019b8:	2938      	cmp	r1, #56	@ 0x38
 80019ba:	dc17      	bgt.n	80019ec <__aeabi_dadd+0x98>
 80019bc:	2780      	movs	r7, #128	@ 0x80
 80019be:	043f      	lsls	r7, r7, #16
 80019c0:	433b      	orrs	r3, r7
 80019c2:	291f      	cmp	r1, #31
 80019c4:	dd00      	ble.n	80019c8 <__aeabi_dadd+0x74>
 80019c6:	e1dd      	b.n	8001d84 <__aeabi_dadd+0x430>
 80019c8:	2720      	movs	r7, #32
 80019ca:	1a78      	subs	r0, r7, r1
 80019cc:	001f      	movs	r7, r3
 80019ce:	4087      	lsls	r7, r0
 80019d0:	46ba      	mov	sl, r7
 80019d2:	0017      	movs	r7, r2
 80019d4:	40cf      	lsrs	r7, r1
 80019d6:	4684      	mov	ip, r0
 80019d8:	0038      	movs	r0, r7
 80019da:	4657      	mov	r7, sl
 80019dc:	4307      	orrs	r7, r0
 80019de:	4660      	mov	r0, ip
 80019e0:	4082      	lsls	r2, r0
 80019e2:	40cb      	lsrs	r3, r1
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	4182      	sbcs	r2, r0
 80019e8:	1af6      	subs	r6, r6, r3
 80019ea:	4317      	orrs	r7, r2
 80019ec:	464b      	mov	r3, r9
 80019ee:	1bdf      	subs	r7, r3, r7
 80019f0:	45b9      	cmp	r9, r7
 80019f2:	4180      	sbcs	r0, r0
 80019f4:	4240      	negs	r0, r0
 80019f6:	1a36      	subs	r6, r6, r0
 80019f8:	0233      	lsls	r3, r6, #8
 80019fa:	d400      	bmi.n	80019fe <__aeabi_dadd+0xaa>
 80019fc:	e0ff      	b.n	8001bfe <__aeabi_dadd+0x2aa>
 80019fe:	0276      	lsls	r6, r6, #9
 8001a00:	0a76      	lsrs	r6, r6, #9
 8001a02:	2e00      	cmp	r6, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0xb4>
 8001a06:	e13c      	b.n	8001c82 <__aeabi_dadd+0x32e>
 8001a08:	0030      	movs	r0, r6
 8001a0a:	f002 f80d 	bl	8003a28 <__clzsi2>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	3b08      	subs	r3, #8
 8001a12:	2120      	movs	r1, #32
 8001a14:	0038      	movs	r0, r7
 8001a16:	1aca      	subs	r2, r1, r3
 8001a18:	40d0      	lsrs	r0, r2
 8001a1a:	409e      	lsls	r6, r3
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	409f      	lsls	r7, r3
 8001a20:	4332      	orrs	r2, r6
 8001a22:	429c      	cmp	r4, r3
 8001a24:	dd00      	ble.n	8001a28 <__aeabi_dadd+0xd4>
 8001a26:	e1a6      	b.n	8001d76 <__aeabi_dadd+0x422>
 8001a28:	1b18      	subs	r0, r3, r4
 8001a2a:	3001      	adds	r0, #1
 8001a2c:	1a09      	subs	r1, r1, r0
 8001a2e:	003e      	movs	r6, r7
 8001a30:	408f      	lsls	r7, r1
 8001a32:	40c6      	lsrs	r6, r0
 8001a34:	1e7b      	subs	r3, r7, #1
 8001a36:	419f      	sbcs	r7, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	408b      	lsls	r3, r1
 8001a3c:	4337      	orrs	r7, r6
 8001a3e:	431f      	orrs	r7, r3
 8001a40:	40c2      	lsrs	r2, r0
 8001a42:	003b      	movs	r3, r7
 8001a44:	0016      	movs	r6, r2
 8001a46:	2400      	movs	r4, #0
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dadd+0xfa>
 8001a4c:	e1df      	b.n	8001e0e <__aeabi_dadd+0x4ba>
 8001a4e:	077b      	lsls	r3, r7, #29
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dadd+0x100>
 8001a52:	e332      	b.n	80020ba <__aeabi_dadd+0x766>
 8001a54:	230f      	movs	r3, #15
 8001a56:	003a      	movs	r2, r7
 8001a58:	403b      	ands	r3, r7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d004      	beq.n	8001a68 <__aeabi_dadd+0x114>
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	42ba      	cmp	r2, r7
 8001a62:	41bf      	sbcs	r7, r7
 8001a64:	427f      	negs	r7, r7
 8001a66:	19f6      	adds	r6, r6, r7
 8001a68:	0233      	lsls	r3, r6, #8
 8001a6a:	d400      	bmi.n	8001a6e <__aeabi_dadd+0x11a>
 8001a6c:	e323      	b.n	80020b6 <__aeabi_dadd+0x762>
 8001a6e:	4b9c      	ldr	r3, [pc, #624]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001a70:	3401      	adds	r4, #1
 8001a72:	429c      	cmp	r4, r3
 8001a74:	d100      	bne.n	8001a78 <__aeabi_dadd+0x124>
 8001a76:	e0b4      	b.n	8001be2 <__aeabi_dadd+0x28e>
 8001a78:	4b9a      	ldr	r3, [pc, #616]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001a7a:	0564      	lsls	r4, r4, #21
 8001a7c:	401e      	ands	r6, r3
 8001a7e:	0d64      	lsrs	r4, r4, #21
 8001a80:	0777      	lsls	r7, r6, #29
 8001a82:	08d2      	lsrs	r2, r2, #3
 8001a84:	0276      	lsls	r6, r6, #9
 8001a86:	4317      	orrs	r7, r2
 8001a88:	0b36      	lsrs	r6, r6, #12
 8001a8a:	e0ac      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dadd+0x13e>
 8001a90:	e07e      	b.n	8001b90 <__aeabi_dadd+0x23c>
 8001a92:	4641      	mov	r1, r8
 8001a94:	1b09      	subs	r1, r1, r4
 8001a96:	2c00      	cmp	r4, #0
 8001a98:	d000      	beq.n	8001a9c <__aeabi_dadd+0x148>
 8001a9a:	e160      	b.n	8001d5e <__aeabi_dadd+0x40a>
 8001a9c:	0034      	movs	r4, r6
 8001a9e:	4648      	mov	r0, r9
 8001aa0:	4304      	orrs	r4, r0
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_dadd+0x152>
 8001aa4:	e1c9      	b.n	8001e3a <__aeabi_dadd+0x4e6>
 8001aa6:	1e4c      	subs	r4, r1, #1
 8001aa8:	2901      	cmp	r1, #1
 8001aaa:	d100      	bne.n	8001aae <__aeabi_dadd+0x15a>
 8001aac:	e22e      	b.n	8001f0c <__aeabi_dadd+0x5b8>
 8001aae:	4d8c      	ldr	r5, [pc, #560]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001ab0:	42a9      	cmp	r1, r5
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dadd+0x162>
 8001ab4:	e224      	b.n	8001f00 <__aeabi_dadd+0x5ac>
 8001ab6:	2701      	movs	r7, #1
 8001ab8:	2c38      	cmp	r4, #56	@ 0x38
 8001aba:	dc11      	bgt.n	8001ae0 <__aeabi_dadd+0x18c>
 8001abc:	0021      	movs	r1, r4
 8001abe:	291f      	cmp	r1, #31
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dadd+0x170>
 8001ac2:	e20b      	b.n	8001edc <__aeabi_dadd+0x588>
 8001ac4:	2420      	movs	r4, #32
 8001ac6:	0037      	movs	r7, r6
 8001ac8:	4648      	mov	r0, r9
 8001aca:	1a64      	subs	r4, r4, r1
 8001acc:	40a7      	lsls	r7, r4
 8001ace:	40c8      	lsrs	r0, r1
 8001ad0:	4307      	orrs	r7, r0
 8001ad2:	4648      	mov	r0, r9
 8001ad4:	40a0      	lsls	r0, r4
 8001ad6:	40ce      	lsrs	r6, r1
 8001ad8:	1e44      	subs	r4, r0, #1
 8001ada:	41a0      	sbcs	r0, r4
 8001adc:	1b9b      	subs	r3, r3, r6
 8001ade:	4307      	orrs	r7, r0
 8001ae0:	1bd7      	subs	r7, r2, r7
 8001ae2:	42ba      	cmp	r2, r7
 8001ae4:	4192      	sbcs	r2, r2
 8001ae6:	4252      	negs	r2, r2
 8001ae8:	4665      	mov	r5, ip
 8001aea:	4644      	mov	r4, r8
 8001aec:	1a9e      	subs	r6, r3, r2
 8001aee:	e783      	b.n	80019f8 <__aeabi_dadd+0xa4>
 8001af0:	2900      	cmp	r1, #0
 8001af2:	dc00      	bgt.n	8001af6 <__aeabi_dadd+0x1a2>
 8001af4:	e09c      	b.n	8001c30 <__aeabi_dadd+0x2dc>
 8001af6:	4647      	mov	r7, r8
 8001af8:	2f00      	cmp	r7, #0
 8001afa:	d167      	bne.n	8001bcc <__aeabi_dadd+0x278>
 8001afc:	001f      	movs	r7, r3
 8001afe:	4317      	orrs	r7, r2
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dadd+0x1b0>
 8001b02:	e0e4      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b04:	1e48      	subs	r0, r1, #1
 8001b06:	2901      	cmp	r1, #1
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dadd+0x1b8>
 8001b0a:	e19b      	b.n	8001e44 <__aeabi_dadd+0x4f0>
 8001b0c:	4f74      	ldr	r7, [pc, #464]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b0e:	42b9      	cmp	r1, r7
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dadd+0x1c0>
 8001b12:	e0eb      	b.n	8001cec <__aeabi_dadd+0x398>
 8001b14:	2701      	movs	r7, #1
 8001b16:	0001      	movs	r1, r0
 8001b18:	2838      	cmp	r0, #56	@ 0x38
 8001b1a:	dc11      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001b1c:	291f      	cmp	r1, #31
 8001b1e:	dd00      	ble.n	8001b22 <__aeabi_dadd+0x1ce>
 8001b20:	e1c7      	b.n	8001eb2 <__aeabi_dadd+0x55e>
 8001b22:	2720      	movs	r7, #32
 8001b24:	1a78      	subs	r0, r7, r1
 8001b26:	001f      	movs	r7, r3
 8001b28:	4684      	mov	ip, r0
 8001b2a:	4087      	lsls	r7, r0
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	40c8      	lsrs	r0, r1
 8001b30:	4307      	orrs	r7, r0
 8001b32:	4660      	mov	r0, ip
 8001b34:	4082      	lsls	r2, r0
 8001b36:	40cb      	lsrs	r3, r1
 8001b38:	1e50      	subs	r0, r2, #1
 8001b3a:	4182      	sbcs	r2, r0
 8001b3c:	18f6      	adds	r6, r6, r3
 8001b3e:	4317      	orrs	r7, r2
 8001b40:	444f      	add	r7, r9
 8001b42:	454f      	cmp	r7, r9
 8001b44:	4180      	sbcs	r0, r0
 8001b46:	4240      	negs	r0, r0
 8001b48:	1836      	adds	r6, r6, r0
 8001b4a:	0233      	lsls	r3, r6, #8
 8001b4c:	d557      	bpl.n	8001bfe <__aeabi_dadd+0x2aa>
 8001b4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b50:	3401      	adds	r4, #1
 8001b52:	429c      	cmp	r4, r3
 8001b54:	d045      	beq.n	8001be2 <__aeabi_dadd+0x28e>
 8001b56:	2101      	movs	r1, #1
 8001b58:	4b62      	ldr	r3, [pc, #392]	@ (8001ce4 <__aeabi_dadd+0x390>)
 8001b5a:	087a      	lsrs	r2, r7, #1
 8001b5c:	401e      	ands	r6, r3
 8001b5e:	4039      	ands	r1, r7
 8001b60:	430a      	orrs	r2, r1
 8001b62:	07f7      	lsls	r7, r6, #31
 8001b64:	4317      	orrs	r7, r2
 8001b66:	0876      	lsrs	r6, r6, #1
 8001b68:	e771      	b.n	8001a4e <__aeabi_dadd+0xfa>
 8001b6a:	001f      	movs	r7, r3
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x21e>
 8001b70:	e0ad      	b.n	8001cce <__aeabi_dadd+0x37a>
 8001b72:	1e4f      	subs	r7, r1, #1
 8001b74:	46bc      	mov	ip, r7
 8001b76:	2901      	cmp	r1, #1
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dadd+0x228>
 8001b7a:	e182      	b.n	8001e82 <__aeabi_dadd+0x52e>
 8001b7c:	4f58      	ldr	r7, [pc, #352]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001b7e:	42b9      	cmp	r1, r7
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dadd+0x230>
 8001b82:	e190      	b.n	8001ea6 <__aeabi_dadd+0x552>
 8001b84:	4661      	mov	r1, ip
 8001b86:	2701      	movs	r7, #1
 8001b88:	2938      	cmp	r1, #56	@ 0x38
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dadd+0x23a>
 8001b8c:	e72e      	b.n	80019ec <__aeabi_dadd+0x98>
 8001b8e:	e718      	b.n	80019c2 <__aeabi_dadd+0x6e>
 8001b90:	4f55      	ldr	r7, [pc, #340]	@ (8001ce8 <__aeabi_dadd+0x394>)
 8001b92:	1c61      	adds	r1, r4, #1
 8001b94:	4239      	tst	r1, r7
 8001b96:	d000      	beq.n	8001b9a <__aeabi_dadd+0x246>
 8001b98:	e0d0      	b.n	8001d3c <__aeabi_dadd+0x3e8>
 8001b9a:	0031      	movs	r1, r6
 8001b9c:	4648      	mov	r0, r9
 8001b9e:	001f      	movs	r7, r3
 8001ba0:	4301      	orrs	r1, r0
 8001ba2:	4317      	orrs	r7, r2
 8001ba4:	2c00      	cmp	r4, #0
 8001ba6:	d000      	beq.n	8001baa <__aeabi_dadd+0x256>
 8001ba8:	e13d      	b.n	8001e26 <__aeabi_dadd+0x4d2>
 8001baa:	2900      	cmp	r1, #0
 8001bac:	d100      	bne.n	8001bb0 <__aeabi_dadd+0x25c>
 8001bae:	e1bc      	b.n	8001f2a <__aeabi_dadd+0x5d6>
 8001bb0:	2f00      	cmp	r7, #0
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x262>
 8001bb4:	e1bf      	b.n	8001f36 <__aeabi_dadd+0x5e2>
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	2100      	movs	r1, #0
 8001bba:	08d8      	lsrs	r0, r3, #3
 8001bbc:	0777      	lsls	r7, r6, #29
 8001bbe:	4307      	orrs	r7, r0
 8001bc0:	08f0      	lsrs	r0, r6, #3
 8001bc2:	0306      	lsls	r6, r0, #12
 8001bc4:	054c      	lsls	r4, r1, #21
 8001bc6:	0b36      	lsrs	r6, r6, #12
 8001bc8:	0d64      	lsrs	r4, r4, #21
 8001bca:	e00c      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001bcc:	4f44      	ldr	r7, [pc, #272]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001bce:	42bc      	cmp	r4, r7
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dadd+0x280>
 8001bd2:	e08b      	b.n	8001cec <__aeabi_dadd+0x398>
 8001bd4:	2701      	movs	r7, #1
 8001bd6:	2938      	cmp	r1, #56	@ 0x38
 8001bd8:	dcb2      	bgt.n	8001b40 <__aeabi_dadd+0x1ec>
 8001bda:	2780      	movs	r7, #128	@ 0x80
 8001bdc:	043f      	lsls	r7, r7, #16
 8001bde:	433b      	orrs	r3, r7
 8001be0:	e79c      	b.n	8001b1c <__aeabi_dadd+0x1c8>
 8001be2:	2600      	movs	r6, #0
 8001be4:	2700      	movs	r7, #0
 8001be6:	0524      	lsls	r4, r4, #20
 8001be8:	4334      	orrs	r4, r6
 8001bea:	07ed      	lsls	r5, r5, #31
 8001bec:	432c      	orrs	r4, r5
 8001bee:	0038      	movs	r0, r7
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	b002      	add	sp, #8
 8001bf4:	bce0      	pop	{r5, r6, r7}
 8001bf6:	46ba      	mov	sl, r7
 8001bf8:	46b1      	mov	r9, r6
 8001bfa:	46a8      	mov	r8, r5
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfe:	077b      	lsls	r3, r7, #29
 8001c00:	d004      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c02:	230f      	movs	r3, #15
 8001c04:	403b      	ands	r3, r7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dadd+0x2b8>
 8001c0a:	e728      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001c0c:	08f8      	lsrs	r0, r7, #3
 8001c0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c10:	0777      	lsls	r7, r6, #29
 8001c12:	4307      	orrs	r7, r0
 8001c14:	08f0      	lsrs	r0, r6, #3
 8001c16:	429c      	cmp	r4, r3
 8001c18:	d000      	beq.n	8001c1c <__aeabi_dadd+0x2c8>
 8001c1a:	e24a      	b.n	80020b2 <__aeabi_dadd+0x75e>
 8001c1c:	003b      	movs	r3, r7
 8001c1e:	4303      	orrs	r3, r0
 8001c20:	d059      	beq.n	8001cd6 <__aeabi_dadd+0x382>
 8001c22:	2680      	movs	r6, #128	@ 0x80
 8001c24:	0336      	lsls	r6, r6, #12
 8001c26:	4306      	orrs	r6, r0
 8001c28:	0336      	lsls	r6, r6, #12
 8001c2a:	4c2d      	ldr	r4, [pc, #180]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c2c:	0b36      	lsrs	r6, r6, #12
 8001c2e:	e7da      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001c30:	2900      	cmp	r1, #0
 8001c32:	d061      	beq.n	8001cf8 <__aeabi_dadd+0x3a4>
 8001c34:	4641      	mov	r1, r8
 8001c36:	1b09      	subs	r1, r1, r4
 8001c38:	2c00      	cmp	r4, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dadd+0x2ea>
 8001c3c:	e0b9      	b.n	8001db2 <__aeabi_dadd+0x45e>
 8001c3e:	4c28      	ldr	r4, [pc, #160]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001c40:	45a0      	cmp	r8, r4
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x2f2>
 8001c44:	e1a5      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001c46:	2701      	movs	r7, #1
 8001c48:	2938      	cmp	r1, #56	@ 0x38
 8001c4a:	dc13      	bgt.n	8001c74 <__aeabi_dadd+0x320>
 8001c4c:	2480      	movs	r4, #128	@ 0x80
 8001c4e:	0424      	lsls	r4, r4, #16
 8001c50:	4326      	orrs	r6, r4
 8001c52:	291f      	cmp	r1, #31
 8001c54:	dd00      	ble.n	8001c58 <__aeabi_dadd+0x304>
 8001c56:	e1c8      	b.n	8001fea <__aeabi_dadd+0x696>
 8001c58:	2420      	movs	r4, #32
 8001c5a:	0037      	movs	r7, r6
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	1a64      	subs	r4, r4, r1
 8001c60:	40a7      	lsls	r7, r4
 8001c62:	40c8      	lsrs	r0, r1
 8001c64:	4307      	orrs	r7, r0
 8001c66:	4648      	mov	r0, r9
 8001c68:	40a0      	lsls	r0, r4
 8001c6a:	40ce      	lsrs	r6, r1
 8001c6c:	1e44      	subs	r4, r0, #1
 8001c6e:	41a0      	sbcs	r0, r4
 8001c70:	199b      	adds	r3, r3, r6
 8001c72:	4307      	orrs	r7, r0
 8001c74:	18bf      	adds	r7, r7, r2
 8001c76:	4297      	cmp	r7, r2
 8001c78:	4192      	sbcs	r2, r2
 8001c7a:	4252      	negs	r2, r2
 8001c7c:	4644      	mov	r4, r8
 8001c7e:	18d6      	adds	r6, r2, r3
 8001c80:	e763      	b.n	8001b4a <__aeabi_dadd+0x1f6>
 8001c82:	0038      	movs	r0, r7
 8001c84:	f001 fed0 	bl	8003a28 <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	2b1f      	cmp	r3, #31
 8001c8e:	dc00      	bgt.n	8001c92 <__aeabi_dadd+0x33e>
 8001c90:	e6bf      	b.n	8001a12 <__aeabi_dadd+0xbe>
 8001c92:	003a      	movs	r2, r7
 8001c94:	3808      	subs	r0, #8
 8001c96:	4082      	lsls	r2, r0
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	dd00      	ble.n	8001c9e <__aeabi_dadd+0x34a>
 8001c9c:	e083      	b.n	8001da6 <__aeabi_dadd+0x452>
 8001c9e:	1b1b      	subs	r3, r3, r4
 8001ca0:	1c58      	adds	r0, r3, #1
 8001ca2:	281f      	cmp	r0, #31
 8001ca4:	dc00      	bgt.n	8001ca8 <__aeabi_dadd+0x354>
 8001ca6:	e1b4      	b.n	8002012 <__aeabi_dadd+0x6be>
 8001ca8:	0017      	movs	r7, r2
 8001caa:	3b1f      	subs	r3, #31
 8001cac:	40df      	lsrs	r7, r3
 8001cae:	2820      	cmp	r0, #32
 8001cb0:	d005      	beq.n	8001cbe <__aeabi_dadd+0x36a>
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	1a1b      	subs	r3, r3, r0
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	1e53      	subs	r3, r2, #1
 8001cba:	419a      	sbcs	r2, r3
 8001cbc:	4317      	orrs	r7, r2
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2f00      	cmp	r7, #0
 8001cc2:	d00a      	beq.n	8001cda <__aeabi_dadd+0x386>
 8001cc4:	077b      	lsls	r3, r7, #29
 8001cc6:	d000      	beq.n	8001cca <__aeabi_dadd+0x376>
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x100>
 8001cca:	0026      	movs	r6, r4
 8001ccc:	e79e      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001cce:	464b      	mov	r3, r9
 8001cd0:	000c      	movs	r4, r1
 8001cd2:	08d8      	lsrs	r0, r3, #3
 8001cd4:	e79b      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001cd6:	2700      	movs	r7, #0
 8001cd8:	4c01      	ldr	r4, [pc, #4]	@ (8001ce0 <__aeabi_dadd+0x38c>)
 8001cda:	2600      	movs	r6, #0
 8001cdc:	e783      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	000007ff 	.word	0x000007ff
 8001ce4:	ff7fffff 	.word	0xff7fffff
 8001ce8:	000007fe 	.word	0x000007fe
 8001cec:	464b      	mov	r3, r9
 8001cee:	0777      	lsls	r7, r6, #29
 8001cf0:	08d8      	lsrs	r0, r3, #3
 8001cf2:	4307      	orrs	r7, r0
 8001cf4:	08f0      	lsrs	r0, r6, #3
 8001cf6:	e791      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001cf8:	4fcd      	ldr	r7, [pc, #820]	@ (8002030 <__aeabi_dadd+0x6dc>)
 8001cfa:	1c61      	adds	r1, r4, #1
 8001cfc:	4239      	tst	r1, r7
 8001cfe:	d16b      	bne.n	8001dd8 <__aeabi_dadd+0x484>
 8001d00:	0031      	movs	r1, r6
 8001d02:	4648      	mov	r0, r9
 8001d04:	4301      	orrs	r1, r0
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d000      	beq.n	8001d0c <__aeabi_dadd+0x3b8>
 8001d0a:	e14b      	b.n	8001fa4 <__aeabi_dadd+0x650>
 8001d0c:	001f      	movs	r7, r3
 8001d0e:	4317      	orrs	r7, r2
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dadd+0x3c2>
 8001d14:	e181      	b.n	800201a <__aeabi_dadd+0x6c6>
 8001d16:	2f00      	cmp	r7, #0
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dadd+0x3c8>
 8001d1a:	e74c      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d1c:	444a      	add	r2, r9
 8001d1e:	454a      	cmp	r2, r9
 8001d20:	4180      	sbcs	r0, r0
 8001d22:	18f6      	adds	r6, r6, r3
 8001d24:	4240      	negs	r0, r0
 8001d26:	1836      	adds	r6, r6, r0
 8001d28:	0233      	lsls	r3, r6, #8
 8001d2a:	d500      	bpl.n	8001d2e <__aeabi_dadd+0x3da>
 8001d2c:	e1b0      	b.n	8002090 <__aeabi_dadd+0x73c>
 8001d2e:	0017      	movs	r7, r2
 8001d30:	4691      	mov	r9, r2
 8001d32:	4337      	orrs	r7, r6
 8001d34:	d000      	beq.n	8001d38 <__aeabi_dadd+0x3e4>
 8001d36:	e73e      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001d38:	2600      	movs	r6, #0
 8001d3a:	e754      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001d3c:	4649      	mov	r1, r9
 8001d3e:	1a89      	subs	r1, r1, r2
 8001d40:	4688      	mov	r8, r1
 8001d42:	45c1      	cmp	r9, r8
 8001d44:	41bf      	sbcs	r7, r7
 8001d46:	1af1      	subs	r1, r6, r3
 8001d48:	427f      	negs	r7, r7
 8001d4a:	1bc9      	subs	r1, r1, r7
 8001d4c:	020f      	lsls	r7, r1, #8
 8001d4e:	d461      	bmi.n	8001e14 <__aeabi_dadd+0x4c0>
 8001d50:	4647      	mov	r7, r8
 8001d52:	430f      	orrs	r7, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dadd+0x404>
 8001d56:	e0bd      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8001d58:	000e      	movs	r6, r1
 8001d5a:	4647      	mov	r7, r8
 8001d5c:	e651      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001d5e:	4cb5      	ldr	r4, [pc, #724]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001d60:	45a0      	cmp	r8, r4
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dadd+0x412>
 8001d64:	e100      	b.n	8001f68 <__aeabi_dadd+0x614>
 8001d66:	2701      	movs	r7, #1
 8001d68:	2938      	cmp	r1, #56	@ 0x38
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dadd+0x41a>
 8001d6c:	e6b8      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001d6e:	2480      	movs	r4, #128	@ 0x80
 8001d70:	0424      	lsls	r4, r4, #16
 8001d72:	4326      	orrs	r6, r4
 8001d74:	e6a3      	b.n	8001abe <__aeabi_dadd+0x16a>
 8001d76:	4eb0      	ldr	r6, [pc, #704]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001d78:	1ae4      	subs	r4, r4, r3
 8001d7a:	4016      	ands	r6, r2
 8001d7c:	077b      	lsls	r3, r7, #29
 8001d7e:	d000      	beq.n	8001d82 <__aeabi_dadd+0x42e>
 8001d80:	e73f      	b.n	8001c02 <__aeabi_dadd+0x2ae>
 8001d82:	e743      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001d84:	000f      	movs	r7, r1
 8001d86:	0018      	movs	r0, r3
 8001d88:	3f20      	subs	r7, #32
 8001d8a:	40f8      	lsrs	r0, r7
 8001d8c:	4684      	mov	ip, r0
 8001d8e:	2920      	cmp	r1, #32
 8001d90:	d003      	beq.n	8001d9a <__aeabi_dadd+0x446>
 8001d92:	2740      	movs	r7, #64	@ 0x40
 8001d94:	1a79      	subs	r1, r7, r1
 8001d96:	408b      	lsls	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	1e53      	subs	r3, r2, #1
 8001d9c:	419a      	sbcs	r2, r3
 8001d9e:	4663      	mov	r3, ip
 8001da0:	0017      	movs	r7, r2
 8001da2:	431f      	orrs	r7, r3
 8001da4:	e622      	b.n	80019ec <__aeabi_dadd+0x98>
 8001da6:	48a4      	ldr	r0, [pc, #656]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001da8:	1ae1      	subs	r1, r4, r3
 8001daa:	4010      	ands	r0, r2
 8001dac:	0747      	lsls	r7, r0, #29
 8001dae:	08c0      	lsrs	r0, r0, #3
 8001db0:	e707      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001db2:	0034      	movs	r4, r6
 8001db4:	4648      	mov	r0, r9
 8001db6:	4304      	orrs	r4, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dadd+0x468>
 8001dba:	e0fa      	b.n	8001fb2 <__aeabi_dadd+0x65e>
 8001dbc:	1e4c      	subs	r4, r1, #1
 8001dbe:	2901      	cmp	r1, #1
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dadd+0x470>
 8001dc2:	e0d7      	b.n	8001f74 <__aeabi_dadd+0x620>
 8001dc4:	4f9b      	ldr	r7, [pc, #620]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dc6:	42b9      	cmp	r1, r7
 8001dc8:	d100      	bne.n	8001dcc <__aeabi_dadd+0x478>
 8001dca:	e0e2      	b.n	8001f92 <__aeabi_dadd+0x63e>
 8001dcc:	2701      	movs	r7, #1
 8001dce:	2c38      	cmp	r4, #56	@ 0x38
 8001dd0:	dd00      	ble.n	8001dd4 <__aeabi_dadd+0x480>
 8001dd2:	e74f      	b.n	8001c74 <__aeabi_dadd+0x320>
 8001dd4:	0021      	movs	r1, r4
 8001dd6:	e73c      	b.n	8001c52 <__aeabi_dadd+0x2fe>
 8001dd8:	4c96      	ldr	r4, [pc, #600]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001dda:	42a1      	cmp	r1, r4
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dadd+0x48c>
 8001dde:	e0dd      	b.n	8001f9c <__aeabi_dadd+0x648>
 8001de0:	444a      	add	r2, r9
 8001de2:	454a      	cmp	r2, r9
 8001de4:	4180      	sbcs	r0, r0
 8001de6:	18f3      	adds	r3, r6, r3
 8001de8:	4240      	negs	r0, r0
 8001dea:	1818      	adds	r0, r3, r0
 8001dec:	07c7      	lsls	r7, r0, #31
 8001dee:	0852      	lsrs	r2, r2, #1
 8001df0:	4317      	orrs	r7, r2
 8001df2:	0846      	lsrs	r6, r0, #1
 8001df4:	0752      	lsls	r2, r2, #29
 8001df6:	d005      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001df8:	220f      	movs	r2, #15
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	403a      	ands	r2, r7
 8001dfe:	2a04      	cmp	r2, #4
 8001e00:	d000      	beq.n	8001e04 <__aeabi_dadd+0x4b0>
 8001e02:	e62c      	b.n	8001a5e <__aeabi_dadd+0x10a>
 8001e04:	0776      	lsls	r6, r6, #29
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	4337      	orrs	r7, r6
 8001e0a:	0900      	lsrs	r0, r0, #4
 8001e0c:	e6d9      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001e0e:	2700      	movs	r7, #0
 8001e10:	2600      	movs	r6, #0
 8001e12:	e6e8      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e14:	4649      	mov	r1, r9
 8001e16:	1a57      	subs	r7, r2, r1
 8001e18:	42ba      	cmp	r2, r7
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	1b9e      	subs	r6, r3, r6
 8001e1e:	4252      	negs	r2, r2
 8001e20:	4665      	mov	r5, ip
 8001e22:	1ab6      	subs	r6, r6, r2
 8001e24:	e5ed      	b.n	8001a02 <__aeabi_dadd+0xae>
 8001e26:	2900      	cmp	r1, #0
 8001e28:	d000      	beq.n	8001e2c <__aeabi_dadd+0x4d8>
 8001e2a:	e0c6      	b.n	8001fba <__aeabi_dadd+0x666>
 8001e2c:	2f00      	cmp	r7, #0
 8001e2e:	d167      	bne.n	8001f00 <__aeabi_dadd+0x5ac>
 8001e30:	2680      	movs	r6, #128	@ 0x80
 8001e32:	2500      	movs	r5, #0
 8001e34:	4c7f      	ldr	r4, [pc, #508]	@ (8002034 <__aeabi_dadd+0x6e0>)
 8001e36:	0336      	lsls	r6, r6, #12
 8001e38:	e6d5      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001e3a:	4665      	mov	r5, ip
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	001e      	movs	r6, r3
 8001e40:	08d0      	lsrs	r0, r2, #3
 8001e42:	e6e4      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001e44:	444a      	add	r2, r9
 8001e46:	454a      	cmp	r2, r9
 8001e48:	4180      	sbcs	r0, r0
 8001e4a:	18f3      	adds	r3, r6, r3
 8001e4c:	4240      	negs	r0, r0
 8001e4e:	1818      	adds	r0, r3, r0
 8001e50:	0011      	movs	r1, r2
 8001e52:	0203      	lsls	r3, r0, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dadd+0x504>
 8001e56:	e096      	b.n	8001f86 <__aeabi_dadd+0x632>
 8001e58:	4b77      	ldr	r3, [pc, #476]	@ (8002038 <__aeabi_dadd+0x6e4>)
 8001e5a:	0849      	lsrs	r1, r1, #1
 8001e5c:	4018      	ands	r0, r3
 8001e5e:	07c3      	lsls	r3, r0, #31
 8001e60:	430b      	orrs	r3, r1
 8001e62:	0844      	lsrs	r4, r0, #1
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	d100      	bne.n	8001e6a <__aeabi_dadd+0x516>
 8001e68:	e129      	b.n	80020be <__aeabi_dadd+0x76a>
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2a04      	cmp	r2, #4
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dadd+0x520>
 8001e72:	e0ea      	b.n	800204a <__aeabi_dadd+0x6f6>
 8001e74:	1d1f      	adds	r7, r3, #4
 8001e76:	429f      	cmp	r7, r3
 8001e78:	41b6      	sbcs	r6, r6
 8001e7a:	4276      	negs	r6, r6
 8001e7c:	1936      	adds	r6, r6, r4
 8001e7e:	2402      	movs	r4, #2
 8001e80:	e6c4      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 8001e82:	4649      	mov	r1, r9
 8001e84:	1a8f      	subs	r7, r1, r2
 8001e86:	45b9      	cmp	r9, r7
 8001e88:	4180      	sbcs	r0, r0
 8001e8a:	1af6      	subs	r6, r6, r3
 8001e8c:	4240      	negs	r0, r0
 8001e8e:	1a36      	subs	r6, r6, r0
 8001e90:	0233      	lsls	r3, r6, #8
 8001e92:	d406      	bmi.n	8001ea2 <__aeabi_dadd+0x54e>
 8001e94:	0773      	lsls	r3, r6, #29
 8001e96:	08ff      	lsrs	r7, r7, #3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	431f      	orrs	r7, r3
 8001e9c:	08f0      	lsrs	r0, r6, #3
 8001e9e:	e690      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001ea0:	4665      	mov	r5, ip
 8001ea2:	2401      	movs	r4, #1
 8001ea4:	e5ab      	b.n	80019fe <__aeabi_dadd+0xaa>
 8001ea6:	464b      	mov	r3, r9
 8001ea8:	0777      	lsls	r7, r6, #29
 8001eaa:	08d8      	lsrs	r0, r3, #3
 8001eac:	4307      	orrs	r7, r0
 8001eae:	08f0      	lsrs	r0, r6, #3
 8001eb0:	e6b4      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001eb2:	000f      	movs	r7, r1
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	3f20      	subs	r7, #32
 8001eb8:	40f8      	lsrs	r0, r7
 8001eba:	4684      	mov	ip, r0
 8001ebc:	2920      	cmp	r1, #32
 8001ebe:	d003      	beq.n	8001ec8 <__aeabi_dadd+0x574>
 8001ec0:	2740      	movs	r7, #64	@ 0x40
 8001ec2:	1a79      	subs	r1, r7, r1
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	1e53      	subs	r3, r2, #1
 8001eca:	419a      	sbcs	r2, r3
 8001ecc:	4663      	mov	r3, ip
 8001ece:	0017      	movs	r7, r2
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e635      	b.n	8001b40 <__aeabi_dadd+0x1ec>
 8001ed4:	2500      	movs	r5, #0
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2600      	movs	r6, #0
 8001eda:	e684      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001edc:	000c      	movs	r4, r1
 8001ede:	0035      	movs	r5, r6
 8001ee0:	3c20      	subs	r4, #32
 8001ee2:	40e5      	lsrs	r5, r4
 8001ee4:	2920      	cmp	r1, #32
 8001ee6:	d005      	beq.n	8001ef4 <__aeabi_dadd+0x5a0>
 8001ee8:	2440      	movs	r4, #64	@ 0x40
 8001eea:	1a61      	subs	r1, r4, r1
 8001eec:	408e      	lsls	r6, r1
 8001eee:	4649      	mov	r1, r9
 8001ef0:	4331      	orrs	r1, r6
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	1e41      	subs	r1, r0, #1
 8001ef8:	4188      	sbcs	r0, r1
 8001efa:	0007      	movs	r7, r0
 8001efc:	432f      	orrs	r7, r5
 8001efe:	e5ef      	b.n	8001ae0 <__aeabi_dadd+0x18c>
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	075f      	lsls	r7, r3, #29
 8001f04:	4665      	mov	r5, ip
 8001f06:	4317      	orrs	r7, r2
 8001f08:	08d8      	lsrs	r0, r3, #3
 8001f0a:	e687      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f0c:	1a17      	subs	r7, r2, r0
 8001f0e:	42ba      	cmp	r2, r7
 8001f10:	4192      	sbcs	r2, r2
 8001f12:	1b9e      	subs	r6, r3, r6
 8001f14:	4252      	negs	r2, r2
 8001f16:	1ab6      	subs	r6, r6, r2
 8001f18:	0233      	lsls	r3, r6, #8
 8001f1a:	d4c1      	bmi.n	8001ea0 <__aeabi_dadd+0x54c>
 8001f1c:	0773      	lsls	r3, r6, #29
 8001f1e:	08ff      	lsrs	r7, r7, #3
 8001f20:	4665      	mov	r5, ip
 8001f22:	2101      	movs	r1, #1
 8001f24:	431f      	orrs	r7, r3
 8001f26:	08f0      	lsrs	r0, r6, #3
 8001f28:	e64b      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f2a:	2f00      	cmp	r7, #0
 8001f2c:	d07b      	beq.n	8002026 <__aeabi_dadd+0x6d2>
 8001f2e:	4665      	mov	r5, ip
 8001f30:	001e      	movs	r6, r3
 8001f32:	4691      	mov	r9, r2
 8001f34:	e63f      	b.n	8001bb6 <__aeabi_dadd+0x262>
 8001f36:	1a81      	subs	r1, r0, r2
 8001f38:	4688      	mov	r8, r1
 8001f3a:	45c1      	cmp	r9, r8
 8001f3c:	41a4      	sbcs	r4, r4
 8001f3e:	1af1      	subs	r1, r6, r3
 8001f40:	4264      	negs	r4, r4
 8001f42:	1b09      	subs	r1, r1, r4
 8001f44:	2480      	movs	r4, #128	@ 0x80
 8001f46:	0424      	lsls	r4, r4, #16
 8001f48:	4221      	tst	r1, r4
 8001f4a:	d077      	beq.n	800203c <__aeabi_dadd+0x6e8>
 8001f4c:	1a10      	subs	r0, r2, r0
 8001f4e:	4282      	cmp	r2, r0
 8001f50:	4192      	sbcs	r2, r2
 8001f52:	0007      	movs	r7, r0
 8001f54:	1b9e      	subs	r6, r3, r6
 8001f56:	4252      	negs	r2, r2
 8001f58:	1ab6      	subs	r6, r6, r2
 8001f5a:	4337      	orrs	r7, r6
 8001f5c:	d000      	beq.n	8001f60 <__aeabi_dadd+0x60c>
 8001f5e:	e0a0      	b.n	80020a2 <__aeabi_dadd+0x74e>
 8001f60:	4665      	mov	r5, ip
 8001f62:	2400      	movs	r4, #0
 8001f64:	2600      	movs	r6, #0
 8001f66:	e63e      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001f68:	075f      	lsls	r7, r3, #29
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	4665      	mov	r5, ip
 8001f6e:	4317      	orrs	r7, r2
 8001f70:	08d8      	lsrs	r0, r3, #3
 8001f72:	e653      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f74:	1881      	adds	r1, r0, r2
 8001f76:	4291      	cmp	r1, r2
 8001f78:	4192      	sbcs	r2, r2
 8001f7a:	18f0      	adds	r0, r6, r3
 8001f7c:	4252      	negs	r2, r2
 8001f7e:	1880      	adds	r0, r0, r2
 8001f80:	0203      	lsls	r3, r0, #8
 8001f82:	d500      	bpl.n	8001f86 <__aeabi_dadd+0x632>
 8001f84:	e768      	b.n	8001e58 <__aeabi_dadd+0x504>
 8001f86:	0747      	lsls	r7, r0, #29
 8001f88:	08c9      	lsrs	r1, r1, #3
 8001f8a:	430f      	orrs	r7, r1
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	e617      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8001f92:	08d2      	lsrs	r2, r2, #3
 8001f94:	075f      	lsls	r7, r3, #29
 8001f96:	4317      	orrs	r7, r2
 8001f98:	08d8      	lsrs	r0, r3, #3
 8001f9a:	e63f      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001f9c:	000c      	movs	r4, r1
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	2700      	movs	r7, #0
 8001fa2:	e620      	b.n	8001be6 <__aeabi_dadd+0x292>
 8001fa4:	2900      	cmp	r1, #0
 8001fa6:	d156      	bne.n	8002056 <__aeabi_dadd+0x702>
 8001fa8:	075f      	lsls	r7, r3, #29
 8001faa:	08d2      	lsrs	r2, r2, #3
 8001fac:	4317      	orrs	r7, r2
 8001fae:	08d8      	lsrs	r0, r3, #3
 8001fb0:	e634      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fb2:	000c      	movs	r4, r1
 8001fb4:	001e      	movs	r6, r3
 8001fb6:	08d0      	lsrs	r0, r2, #3
 8001fb8:	e629      	b.n	8001c0e <__aeabi_dadd+0x2ba>
 8001fba:	08c1      	lsrs	r1, r0, #3
 8001fbc:	0770      	lsls	r0, r6, #29
 8001fbe:	4301      	orrs	r1, r0
 8001fc0:	08f0      	lsrs	r0, r6, #3
 8001fc2:	2f00      	cmp	r7, #0
 8001fc4:	d062      	beq.n	800208c <__aeabi_dadd+0x738>
 8001fc6:	2480      	movs	r4, #128	@ 0x80
 8001fc8:	0324      	lsls	r4, r4, #12
 8001fca:	4220      	tst	r0, r4
 8001fcc:	d007      	beq.n	8001fde <__aeabi_dadd+0x68a>
 8001fce:	08de      	lsrs	r6, r3, #3
 8001fd0:	4226      	tst	r6, r4
 8001fd2:	d104      	bne.n	8001fde <__aeabi_dadd+0x68a>
 8001fd4:	4665      	mov	r5, ip
 8001fd6:	0030      	movs	r0, r6
 8001fd8:	08d1      	lsrs	r1, r2, #3
 8001fda:	075b      	lsls	r3, r3, #29
 8001fdc:	4319      	orrs	r1, r3
 8001fde:	0f4f      	lsrs	r7, r1, #29
 8001fe0:	00c9      	lsls	r1, r1, #3
 8001fe2:	08c9      	lsrs	r1, r1, #3
 8001fe4:	077f      	lsls	r7, r7, #29
 8001fe6:	430f      	orrs	r7, r1
 8001fe8:	e618      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8001fea:	000c      	movs	r4, r1
 8001fec:	0030      	movs	r0, r6
 8001fee:	3c20      	subs	r4, #32
 8001ff0:	40e0      	lsrs	r0, r4
 8001ff2:	4684      	mov	ip, r0
 8001ff4:	2920      	cmp	r1, #32
 8001ff6:	d005      	beq.n	8002004 <__aeabi_dadd+0x6b0>
 8001ff8:	2440      	movs	r4, #64	@ 0x40
 8001ffa:	1a61      	subs	r1, r4, r1
 8001ffc:	408e      	lsls	r6, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	4331      	orrs	r1, r6
 8002002:	4689      	mov	r9, r1
 8002004:	4648      	mov	r0, r9
 8002006:	1e41      	subs	r1, r0, #1
 8002008:	4188      	sbcs	r0, r1
 800200a:	4661      	mov	r1, ip
 800200c:	0007      	movs	r7, r0
 800200e:	430f      	orrs	r7, r1
 8002010:	e630      	b.n	8001c74 <__aeabi_dadd+0x320>
 8002012:	2120      	movs	r1, #32
 8002014:	2700      	movs	r7, #0
 8002016:	1a09      	subs	r1, r1, r0
 8002018:	e50e      	b.n	8001a38 <__aeabi_dadd+0xe4>
 800201a:	001e      	movs	r6, r3
 800201c:	2f00      	cmp	r7, #0
 800201e:	d000      	beq.n	8002022 <__aeabi_dadd+0x6ce>
 8002020:	e522      	b.n	8001a68 <__aeabi_dadd+0x114>
 8002022:	2400      	movs	r4, #0
 8002024:	e758      	b.n	8001ed8 <__aeabi_dadd+0x584>
 8002026:	2500      	movs	r5, #0
 8002028:	2400      	movs	r4, #0
 800202a:	2600      	movs	r6, #0
 800202c:	e5db      	b.n	8001be6 <__aeabi_dadd+0x292>
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	000007fe 	.word	0x000007fe
 8002034:	000007ff 	.word	0x000007ff
 8002038:	ff7fffff 	.word	0xff7fffff
 800203c:	4647      	mov	r7, r8
 800203e:	430f      	orrs	r7, r1
 8002040:	d100      	bne.n	8002044 <__aeabi_dadd+0x6f0>
 8002042:	e747      	b.n	8001ed4 <__aeabi_dadd+0x580>
 8002044:	000e      	movs	r6, r1
 8002046:	46c1      	mov	r9, r8
 8002048:	e5b5      	b.n	8001bb6 <__aeabi_dadd+0x262>
 800204a:	08df      	lsrs	r7, r3, #3
 800204c:	0764      	lsls	r4, r4, #29
 800204e:	2102      	movs	r1, #2
 8002050:	4327      	orrs	r7, r4
 8002052:	0900      	lsrs	r0, r0, #4
 8002054:	e5b5      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 8002056:	0019      	movs	r1, r3
 8002058:	08c0      	lsrs	r0, r0, #3
 800205a:	0777      	lsls	r7, r6, #29
 800205c:	4307      	orrs	r7, r0
 800205e:	4311      	orrs	r1, r2
 8002060:	08f0      	lsrs	r0, r6, #3
 8002062:	2900      	cmp	r1, #0
 8002064:	d100      	bne.n	8002068 <__aeabi_dadd+0x714>
 8002066:	e5d9      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0309      	lsls	r1, r1, #12
 800206c:	4208      	tst	r0, r1
 800206e:	d007      	beq.n	8002080 <__aeabi_dadd+0x72c>
 8002070:	08dc      	lsrs	r4, r3, #3
 8002072:	420c      	tst	r4, r1
 8002074:	d104      	bne.n	8002080 <__aeabi_dadd+0x72c>
 8002076:	08d2      	lsrs	r2, r2, #3
 8002078:	075b      	lsls	r3, r3, #29
 800207a:	431a      	orrs	r2, r3
 800207c:	0017      	movs	r7, r2
 800207e:	0020      	movs	r0, r4
 8002080:	0f7b      	lsrs	r3, r7, #29
 8002082:	00ff      	lsls	r7, r7, #3
 8002084:	08ff      	lsrs	r7, r7, #3
 8002086:	075b      	lsls	r3, r3, #29
 8002088:	431f      	orrs	r7, r3
 800208a:	e5c7      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 800208c:	000f      	movs	r7, r1
 800208e:	e5c5      	b.n	8001c1c <__aeabi_dadd+0x2c8>
 8002090:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <__aeabi_dadd+0x788>)
 8002092:	08d2      	lsrs	r2, r2, #3
 8002094:	4033      	ands	r3, r6
 8002096:	075f      	lsls	r7, r3, #29
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	2401      	movs	r4, #1
 800209c:	4317      	orrs	r7, r2
 800209e:	0b1e      	lsrs	r6, r3, #12
 80020a0:	e5a1      	b.n	8001be6 <__aeabi_dadd+0x292>
 80020a2:	4226      	tst	r6, r4
 80020a4:	d012      	beq.n	80020cc <__aeabi_dadd+0x778>
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <__aeabi_dadd+0x788>)
 80020a8:	4665      	mov	r5, ip
 80020aa:	0002      	movs	r2, r0
 80020ac:	2401      	movs	r4, #1
 80020ae:	401e      	ands	r6, r3
 80020b0:	e4e6      	b.n	8001a80 <__aeabi_dadd+0x12c>
 80020b2:	0021      	movs	r1, r4
 80020b4:	e585      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020b6:	0017      	movs	r7, r2
 80020b8:	e5a8      	b.n	8001c0c <__aeabi_dadd+0x2b8>
 80020ba:	003a      	movs	r2, r7
 80020bc:	e4d4      	b.n	8001a68 <__aeabi_dadd+0x114>
 80020be:	08db      	lsrs	r3, r3, #3
 80020c0:	0764      	lsls	r4, r4, #29
 80020c2:	431c      	orrs	r4, r3
 80020c4:	0027      	movs	r7, r4
 80020c6:	2102      	movs	r1, #2
 80020c8:	0900      	lsrs	r0, r0, #4
 80020ca:	e57a      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020cc:	08c0      	lsrs	r0, r0, #3
 80020ce:	0777      	lsls	r7, r6, #29
 80020d0:	4307      	orrs	r7, r0
 80020d2:	4665      	mov	r5, ip
 80020d4:	2100      	movs	r1, #0
 80020d6:	08f0      	lsrs	r0, r6, #3
 80020d8:	e573      	b.n	8001bc2 <__aeabi_dadd+0x26e>
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	ff7fffff 	.word	0xff7fffff

080020e0 <__aeabi_ddiv>:
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	46de      	mov	lr, fp
 80020e4:	4645      	mov	r5, r8
 80020e6:	4657      	mov	r7, sl
 80020e8:	464e      	mov	r6, r9
 80020ea:	b5e0      	push	{r5, r6, r7, lr}
 80020ec:	b087      	sub	sp, #28
 80020ee:	9200      	str	r2, [sp, #0]
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	030b      	lsls	r3, r1, #12
 80020f4:	0b1b      	lsrs	r3, r3, #12
 80020f6:	469b      	mov	fp, r3
 80020f8:	0fca      	lsrs	r2, r1, #31
 80020fa:	004b      	lsls	r3, r1, #1
 80020fc:	0004      	movs	r4, r0
 80020fe:	4680      	mov	r8, r0
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	9202      	str	r2, [sp, #8]
 8002104:	d100      	bne.n	8002108 <__aeabi_ddiv+0x28>
 8002106:	e098      	b.n	800223a <__aeabi_ddiv+0x15a>
 8002108:	4a7c      	ldr	r2, [pc, #496]	@ (80022fc <__aeabi_ddiv+0x21c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d037      	beq.n	800217e <__aeabi_ddiv+0x9e>
 800210e:	4659      	mov	r1, fp
 8002110:	0f42      	lsrs	r2, r0, #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	430a      	orrs	r2, r1
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0409      	lsls	r1, r1, #16
 800211a:	4311      	orrs	r1, r2
 800211c:	00c2      	lsls	r2, r0, #3
 800211e:	4690      	mov	r8, r2
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <__aeabi_ddiv+0x220>)
 8002122:	4689      	mov	r9, r1
 8002124:	4692      	mov	sl, r2
 8002126:	449a      	add	sl, r3
 8002128:	2300      	movs	r3, #0
 800212a:	2400      	movs	r4, #0
 800212c:	9303      	str	r3, [sp, #12]
 800212e:	9e00      	ldr	r6, [sp, #0]
 8002130:	9f01      	ldr	r7, [sp, #4]
 8002132:	033b      	lsls	r3, r7, #12
 8002134:	0b1b      	lsrs	r3, r3, #12
 8002136:	469b      	mov	fp, r3
 8002138:	007b      	lsls	r3, r7, #1
 800213a:	0030      	movs	r0, r6
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	0ffd      	lsrs	r5, r7, #31
 8002140:	2b00      	cmp	r3, #0
 8002142:	d059      	beq.n	80021f8 <__aeabi_ddiv+0x118>
 8002144:	4a6d      	ldr	r2, [pc, #436]	@ (80022fc <__aeabi_ddiv+0x21c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d048      	beq.n	80021dc <__aeabi_ddiv+0xfc>
 800214a:	4659      	mov	r1, fp
 800214c:	0f72      	lsrs	r2, r6, #29
 800214e:	00c9      	lsls	r1, r1, #3
 8002150:	430a      	orrs	r2, r1
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0409      	lsls	r1, r1, #16
 8002156:	4311      	orrs	r1, r2
 8002158:	468b      	mov	fp, r1
 800215a:	4969      	ldr	r1, [pc, #420]	@ (8002300 <__aeabi_ddiv+0x220>)
 800215c:	00f2      	lsls	r2, r6, #3
 800215e:	468c      	mov	ip, r1
 8002160:	4651      	mov	r1, sl
 8002162:	4463      	add	r3, ip
 8002164:	1acb      	subs	r3, r1, r3
 8002166:	469a      	mov	sl, r3
 8002168:	2100      	movs	r1, #0
 800216a:	9e02      	ldr	r6, [sp, #8]
 800216c:	406e      	eors	r6, r5
 800216e:	b2f6      	uxtb	r6, r6
 8002170:	2c0f      	cmp	r4, #15
 8002172:	d900      	bls.n	8002176 <__aeabi_ddiv+0x96>
 8002174:	e0ce      	b.n	8002314 <__aeabi_ddiv+0x234>
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <__aeabi_ddiv+0x224>)
 8002178:	00a4      	lsls	r4, r4, #2
 800217a:	591b      	ldr	r3, [r3, r4]
 800217c:	469f      	mov	pc, r3
 800217e:	465a      	mov	r2, fp
 8002180:	4302      	orrs	r2, r0
 8002182:	4691      	mov	r9, r2
 8002184:	d000      	beq.n	8002188 <__aeabi_ddiv+0xa8>
 8002186:	e090      	b.n	80022aa <__aeabi_ddiv+0x1ca>
 8002188:	469a      	mov	sl, r3
 800218a:	2302      	movs	r3, #2
 800218c:	4690      	mov	r8, r2
 800218e:	2408      	movs	r4, #8
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	e7cc      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002194:	46cb      	mov	fp, r9
 8002196:	4642      	mov	r2, r8
 8002198:	9d02      	ldr	r5, [sp, #8]
 800219a:	9903      	ldr	r1, [sp, #12]
 800219c:	2902      	cmp	r1, #2
 800219e:	d100      	bne.n	80021a2 <__aeabi_ddiv+0xc2>
 80021a0:	e1de      	b.n	8002560 <__aeabi_ddiv+0x480>
 80021a2:	2903      	cmp	r1, #3
 80021a4:	d100      	bne.n	80021a8 <__aeabi_ddiv+0xc8>
 80021a6:	e08d      	b.n	80022c4 <__aeabi_ddiv+0x1e4>
 80021a8:	2901      	cmp	r1, #1
 80021aa:	d000      	beq.n	80021ae <__aeabi_ddiv+0xce>
 80021ac:	e179      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 80021ae:	002e      	movs	r6, r5
 80021b0:	2200      	movs	r2, #0
 80021b2:	2300      	movs	r3, #0
 80021b4:	2400      	movs	r4, #0
 80021b6:	4690      	mov	r8, r2
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	4323      	orrs	r3, r4
 80021bc:	07f6      	lsls	r6, r6, #31
 80021be:	4333      	orrs	r3, r6
 80021c0:	4640      	mov	r0, r8
 80021c2:	0019      	movs	r1, r3
 80021c4:	b007      	add	sp, #28
 80021c6:	bcf0      	pop	{r4, r5, r6, r7}
 80021c8:	46bb      	mov	fp, r7
 80021ca:	46b2      	mov	sl, r6
 80021cc:	46a9      	mov	r9, r5
 80021ce:	46a0      	mov	r8, r4
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	2200      	movs	r2, #0
 80021d4:	2400      	movs	r4, #0
 80021d6:	4690      	mov	r8, r2
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80021da:	e7ed      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80021dc:	465a      	mov	r2, fp
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	431a      	orrs	r2, r3
 80021e2:	4b49      	ldr	r3, [pc, #292]	@ (8002308 <__aeabi_ddiv+0x228>)
 80021e4:	469c      	mov	ip, r3
 80021e6:	44e2      	add	sl, ip
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d159      	bne.n	80022a0 <__aeabi_ddiv+0x1c0>
 80021ec:	2302      	movs	r3, #2
 80021ee:	431c      	orrs	r4, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	2102      	movs	r1, #2
 80021f4:	469b      	mov	fp, r3
 80021f6:	e7b8      	b.n	800216a <__aeabi_ddiv+0x8a>
 80021f8:	465a      	mov	r2, fp
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	431a      	orrs	r2, r3
 80021fe:	d049      	beq.n	8002294 <__aeabi_ddiv+0x1b4>
 8002200:	465b      	mov	r3, fp
 8002202:	2b00      	cmp	r3, #0
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x128>
 8002206:	e19c      	b.n	8002542 <__aeabi_ddiv+0x462>
 8002208:	4658      	mov	r0, fp
 800220a:	f001 fc0d 	bl	8003a28 <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3a0b      	subs	r2, #11
 8002214:	271d      	movs	r7, #29
 8002216:	9e00      	ldr	r6, [sp, #0]
 8002218:	1aba      	subs	r2, r7, r2
 800221a:	0019      	movs	r1, r3
 800221c:	4658      	mov	r0, fp
 800221e:	40d6      	lsrs	r6, r2
 8002220:	3908      	subs	r1, #8
 8002222:	4088      	lsls	r0, r1
 8002224:	0032      	movs	r2, r6
 8002226:	4302      	orrs	r2, r0
 8002228:	4693      	mov	fp, r2
 800222a:	9a00      	ldr	r2, [sp, #0]
 800222c:	408a      	lsls	r2, r1
 800222e:	4937      	ldr	r1, [pc, #220]	@ (800230c <__aeabi_ddiv+0x22c>)
 8002230:	4453      	add	r3, sl
 8002232:	468a      	mov	sl, r1
 8002234:	2100      	movs	r1, #0
 8002236:	449a      	add	sl, r3
 8002238:	e797      	b.n	800216a <__aeabi_ddiv+0x8a>
 800223a:	465b      	mov	r3, fp
 800223c:	4303      	orrs	r3, r0
 800223e:	4699      	mov	r9, r3
 8002240:	d021      	beq.n	8002286 <__aeabi_ddiv+0x1a6>
 8002242:	465b      	mov	r3, fp
 8002244:	2b00      	cmp	r3, #0
 8002246:	d100      	bne.n	800224a <__aeabi_ddiv+0x16a>
 8002248:	e169      	b.n	800251e <__aeabi_ddiv+0x43e>
 800224a:	4658      	mov	r0, fp
 800224c:	f001 fbec 	bl	8003a28 <__clzsi2>
 8002250:	230b      	movs	r3, #11
 8002252:	425b      	negs	r3, r3
 8002254:	469c      	mov	ip, r3
 8002256:	0002      	movs	r2, r0
 8002258:	4484      	add	ip, r0
 800225a:	4666      	mov	r6, ip
 800225c:	231d      	movs	r3, #29
 800225e:	1b9b      	subs	r3, r3, r6
 8002260:	0026      	movs	r6, r4
 8002262:	0011      	movs	r1, r2
 8002264:	4658      	mov	r0, fp
 8002266:	40de      	lsrs	r6, r3
 8002268:	3908      	subs	r1, #8
 800226a:	4088      	lsls	r0, r1
 800226c:	0033      	movs	r3, r6
 800226e:	4303      	orrs	r3, r0
 8002270:	4699      	mov	r9, r3
 8002272:	0023      	movs	r3, r4
 8002274:	408b      	lsls	r3, r1
 8002276:	4698      	mov	r8, r3
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <__aeabi_ddiv+0x230>)
 800227a:	2400      	movs	r4, #0
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	469a      	mov	sl, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9303      	str	r3, [sp, #12]
 8002284:	e753      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002286:	2300      	movs	r3, #0
 8002288:	4698      	mov	r8, r3
 800228a:	469a      	mov	sl, r3
 800228c:	3301      	adds	r3, #1
 800228e:	2404      	movs	r4, #4
 8002290:	9303      	str	r3, [sp, #12]
 8002292:	e74c      	b.n	800212e <__aeabi_ddiv+0x4e>
 8002294:	2301      	movs	r3, #1
 8002296:	431c      	orrs	r4, r3
 8002298:	2300      	movs	r3, #0
 800229a:	2101      	movs	r1, #1
 800229c:	469b      	mov	fp, r3
 800229e:	e764      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022a0:	2303      	movs	r3, #3
 80022a2:	0032      	movs	r2, r6
 80022a4:	2103      	movs	r1, #3
 80022a6:	431c      	orrs	r4, r3
 80022a8:	e75f      	b.n	800216a <__aeabi_ddiv+0x8a>
 80022aa:	469a      	mov	sl, r3
 80022ac:	2303      	movs	r3, #3
 80022ae:	46d9      	mov	r9, fp
 80022b0:	240c      	movs	r4, #12
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	e73b      	b.n	800212e <__aeabi_ddiv+0x4e>
 80022b6:	2300      	movs	r3, #0
 80022b8:	2480      	movs	r4, #128	@ 0x80
 80022ba:	4698      	mov	r8, r3
 80022bc:	2600      	movs	r6, #0
 80022be:	4b0f      	ldr	r3, [pc, #60]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022c0:	0324      	lsls	r4, r4, #12
 80022c2:	e779      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022c4:	2480      	movs	r4, #128	@ 0x80
 80022c6:	465b      	mov	r3, fp
 80022c8:	0324      	lsls	r4, r4, #12
 80022ca:	431c      	orrs	r4, r3
 80022cc:	0324      	lsls	r4, r4, #12
 80022ce:	002e      	movs	r6, r5
 80022d0:	4690      	mov	r8, r2
 80022d2:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022d4:	0b24      	lsrs	r4, r4, #12
 80022d6:	e76f      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022d8:	2480      	movs	r4, #128	@ 0x80
 80022da:	464b      	mov	r3, r9
 80022dc:	0324      	lsls	r4, r4, #12
 80022de:	4223      	tst	r3, r4
 80022e0:	d002      	beq.n	80022e8 <__aeabi_ddiv+0x208>
 80022e2:	465b      	mov	r3, fp
 80022e4:	4223      	tst	r3, r4
 80022e6:	d0f0      	beq.n	80022ca <__aeabi_ddiv+0x1ea>
 80022e8:	2480      	movs	r4, #128	@ 0x80
 80022ea:	464b      	mov	r3, r9
 80022ec:	0324      	lsls	r4, r4, #12
 80022ee:	431c      	orrs	r4, r3
 80022f0:	0324      	lsls	r4, r4, #12
 80022f2:	9e02      	ldr	r6, [sp, #8]
 80022f4:	4b01      	ldr	r3, [pc, #4]	@ (80022fc <__aeabi_ddiv+0x21c>)
 80022f6:	0b24      	lsrs	r4, r4, #12
 80022f8:	e75e      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	000007ff 	.word	0x000007ff
 8002300:	fffffc01 	.word	0xfffffc01
 8002304:	0802e534 	.word	0x0802e534
 8002308:	fffff801 	.word	0xfffff801
 800230c:	000003f3 	.word	0x000003f3
 8002310:	fffffc0d 	.word	0xfffffc0d
 8002314:	45cb      	cmp	fp, r9
 8002316:	d200      	bcs.n	800231a <__aeabi_ddiv+0x23a>
 8002318:	e0f8      	b.n	800250c <__aeabi_ddiv+0x42c>
 800231a:	d100      	bne.n	800231e <__aeabi_ddiv+0x23e>
 800231c:	e0f3      	b.n	8002506 <__aeabi_ddiv+0x426>
 800231e:	2301      	movs	r3, #1
 8002320:	425b      	negs	r3, r3
 8002322:	469c      	mov	ip, r3
 8002324:	4644      	mov	r4, r8
 8002326:	4648      	mov	r0, r9
 8002328:	2500      	movs	r5, #0
 800232a:	44e2      	add	sl, ip
 800232c:	465b      	mov	r3, fp
 800232e:	0e17      	lsrs	r7, r2, #24
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	431f      	orrs	r7, r3
 8002334:	0c19      	lsrs	r1, r3, #16
 8002336:	043b      	lsls	r3, r7, #16
 8002338:	0212      	lsls	r2, r2, #8
 800233a:	9700      	str	r7, [sp, #0]
 800233c:	0c1f      	lsrs	r7, r3, #16
 800233e:	4691      	mov	r9, r2
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9703      	str	r7, [sp, #12]
 8002344:	f7fd ffb4 	bl	80002b0 <__aeabi_uidivmod>
 8002348:	0002      	movs	r2, r0
 800234a:	437a      	muls	r2, r7
 800234c:	040b      	lsls	r3, r1, #16
 800234e:	0c21      	lsrs	r1, r4, #16
 8002350:	4680      	mov	r8, r0
 8002352:	4319      	orrs	r1, r3
 8002354:	428a      	cmp	r2, r1
 8002356:	d909      	bls.n	800236c <__aeabi_ddiv+0x28c>
 8002358:	9f00      	ldr	r7, [sp, #0]
 800235a:	2301      	movs	r3, #1
 800235c:	46bc      	mov	ip, r7
 800235e:	425b      	negs	r3, r3
 8002360:	4461      	add	r1, ip
 8002362:	469c      	mov	ip, r3
 8002364:	44e0      	add	r8, ip
 8002366:	428f      	cmp	r7, r1
 8002368:	d800      	bhi.n	800236c <__aeabi_ddiv+0x28c>
 800236a:	e15c      	b.n	8002626 <__aeabi_ddiv+0x546>
 800236c:	1a88      	subs	r0, r1, r2
 800236e:	9902      	ldr	r1, [sp, #8]
 8002370:	f7fd ff9e 	bl	80002b0 <__aeabi_uidivmod>
 8002374:	9a03      	ldr	r2, [sp, #12]
 8002376:	0424      	lsls	r4, r4, #16
 8002378:	4342      	muls	r2, r0
 800237a:	0409      	lsls	r1, r1, #16
 800237c:	0c24      	lsrs	r4, r4, #16
 800237e:	0003      	movs	r3, r0
 8002380:	430c      	orrs	r4, r1
 8002382:	42a2      	cmp	r2, r4
 8002384:	d906      	bls.n	8002394 <__aeabi_ddiv+0x2b4>
 8002386:	9900      	ldr	r1, [sp, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	468c      	mov	ip, r1
 800238c:	4464      	add	r4, ip
 800238e:	42a1      	cmp	r1, r4
 8002390:	d800      	bhi.n	8002394 <__aeabi_ddiv+0x2b4>
 8002392:	e142      	b.n	800261a <__aeabi_ddiv+0x53a>
 8002394:	1aa0      	subs	r0, r4, r2
 8002396:	4642      	mov	r2, r8
 8002398:	0412      	lsls	r2, r2, #16
 800239a:	431a      	orrs	r2, r3
 800239c:	4693      	mov	fp, r2
 800239e:	464b      	mov	r3, r9
 80023a0:	4659      	mov	r1, fp
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	001f      	movs	r7, r3
 80023a6:	9304      	str	r3, [sp, #16]
 80023a8:	040b      	lsls	r3, r1, #16
 80023aa:	4649      	mov	r1, r9
 80023ac:	0409      	lsls	r1, r1, #16
 80023ae:	0c09      	lsrs	r1, r1, #16
 80023b0:	000c      	movs	r4, r1
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	435c      	muls	r4, r3
 80023b6:	0c12      	lsrs	r2, r2, #16
 80023b8:	437b      	muls	r3, r7
 80023ba:	4688      	mov	r8, r1
 80023bc:	4351      	muls	r1, r2
 80023be:	437a      	muls	r2, r7
 80023c0:	0c27      	lsrs	r7, r4, #16
 80023c2:	46bc      	mov	ip, r7
 80023c4:	185b      	adds	r3, r3, r1
 80023c6:	4463      	add	r3, ip
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d903      	bls.n	80023d4 <__aeabi_ddiv+0x2f4>
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0249      	lsls	r1, r1, #9
 80023d0:	468c      	mov	ip, r1
 80023d2:	4462      	add	r2, ip
 80023d4:	0c19      	lsrs	r1, r3, #16
 80023d6:	0424      	lsls	r4, r4, #16
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	0c24      	lsrs	r4, r4, #16
 80023dc:	188a      	adds	r2, r1, r2
 80023de:	191c      	adds	r4, r3, r4
 80023e0:	4290      	cmp	r0, r2
 80023e2:	d302      	bcc.n	80023ea <__aeabi_ddiv+0x30a>
 80023e4:	d116      	bne.n	8002414 <__aeabi_ddiv+0x334>
 80023e6:	42a5      	cmp	r5, r4
 80023e8:	d214      	bcs.n	8002414 <__aeabi_ddiv+0x334>
 80023ea:	465b      	mov	r3, fp
 80023ec:	9f00      	ldr	r7, [sp, #0]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	444d      	add	r5, r9
 80023f2:	9305      	str	r3, [sp, #20]
 80023f4:	454d      	cmp	r5, r9
 80023f6:	419b      	sbcs	r3, r3
 80023f8:	46bc      	mov	ip, r7
 80023fa:	425b      	negs	r3, r3
 80023fc:	4463      	add	r3, ip
 80023fe:	18c0      	adds	r0, r0, r3
 8002400:	4287      	cmp	r7, r0
 8002402:	d300      	bcc.n	8002406 <__aeabi_ddiv+0x326>
 8002404:	e102      	b.n	800260c <__aeabi_ddiv+0x52c>
 8002406:	4282      	cmp	r2, r0
 8002408:	d900      	bls.n	800240c <__aeabi_ddiv+0x32c>
 800240a:	e129      	b.n	8002660 <__aeabi_ddiv+0x580>
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x330>
 800240e:	e124      	b.n	800265a <__aeabi_ddiv+0x57a>
 8002410:	9b05      	ldr	r3, [sp, #20]
 8002412:	469b      	mov	fp, r3
 8002414:	1b2c      	subs	r4, r5, r4
 8002416:	42a5      	cmp	r5, r4
 8002418:	41ad      	sbcs	r5, r5
 800241a:	9b00      	ldr	r3, [sp, #0]
 800241c:	1a80      	subs	r0, r0, r2
 800241e:	426d      	negs	r5, r5
 8002420:	1b40      	subs	r0, r0, r5
 8002422:	4283      	cmp	r3, r0
 8002424:	d100      	bne.n	8002428 <__aeabi_ddiv+0x348>
 8002426:	e10f      	b.n	8002648 <__aeabi_ddiv+0x568>
 8002428:	9902      	ldr	r1, [sp, #8]
 800242a:	f7fd ff41 	bl	80002b0 <__aeabi_uidivmod>
 800242e:	9a03      	ldr	r2, [sp, #12]
 8002430:	040b      	lsls	r3, r1, #16
 8002432:	4342      	muls	r2, r0
 8002434:	0c21      	lsrs	r1, r4, #16
 8002436:	0005      	movs	r5, r0
 8002438:	4319      	orrs	r1, r3
 800243a:	428a      	cmp	r2, r1
 800243c:	d900      	bls.n	8002440 <__aeabi_ddiv+0x360>
 800243e:	e0cb      	b.n	80025d8 <__aeabi_ddiv+0x4f8>
 8002440:	1a88      	subs	r0, r1, r2
 8002442:	9902      	ldr	r1, [sp, #8]
 8002444:	f7fd ff34 	bl	80002b0 <__aeabi_uidivmod>
 8002448:	9a03      	ldr	r2, [sp, #12]
 800244a:	0424      	lsls	r4, r4, #16
 800244c:	4342      	muls	r2, r0
 800244e:	0409      	lsls	r1, r1, #16
 8002450:	0c24      	lsrs	r4, r4, #16
 8002452:	0003      	movs	r3, r0
 8002454:	430c      	orrs	r4, r1
 8002456:	42a2      	cmp	r2, r4
 8002458:	d900      	bls.n	800245c <__aeabi_ddiv+0x37c>
 800245a:	e0ca      	b.n	80025f2 <__aeabi_ddiv+0x512>
 800245c:	4641      	mov	r1, r8
 800245e:	1aa4      	subs	r4, r4, r2
 8002460:	042a      	lsls	r2, r5, #16
 8002462:	431a      	orrs	r2, r3
 8002464:	9f04      	ldr	r7, [sp, #16]
 8002466:	0413      	lsls	r3, r2, #16
 8002468:	0c1b      	lsrs	r3, r3, #16
 800246a:	4359      	muls	r1, r3
 800246c:	4640      	mov	r0, r8
 800246e:	437b      	muls	r3, r7
 8002470:	469c      	mov	ip, r3
 8002472:	0c15      	lsrs	r5, r2, #16
 8002474:	4368      	muls	r0, r5
 8002476:	0c0b      	lsrs	r3, r1, #16
 8002478:	4484      	add	ip, r0
 800247a:	4463      	add	r3, ip
 800247c:	437d      	muls	r5, r7
 800247e:	4298      	cmp	r0, r3
 8002480:	d903      	bls.n	800248a <__aeabi_ddiv+0x3aa>
 8002482:	2080      	movs	r0, #128	@ 0x80
 8002484:	0240      	lsls	r0, r0, #9
 8002486:	4684      	mov	ip, r0
 8002488:	4465      	add	r5, ip
 800248a:	0c18      	lsrs	r0, r3, #16
 800248c:	0409      	lsls	r1, r1, #16
 800248e:	041b      	lsls	r3, r3, #16
 8002490:	0c09      	lsrs	r1, r1, #16
 8002492:	1940      	adds	r0, r0, r5
 8002494:	185b      	adds	r3, r3, r1
 8002496:	4284      	cmp	r4, r0
 8002498:	d327      	bcc.n	80024ea <__aeabi_ddiv+0x40a>
 800249a:	d023      	beq.n	80024e4 <__aeabi_ddiv+0x404>
 800249c:	2301      	movs	r3, #1
 800249e:	0035      	movs	r5, r6
 80024a0:	431a      	orrs	r2, r3
 80024a2:	4b94      	ldr	r3, [pc, #592]	@ (80026f4 <__aeabi_ddiv+0x614>)
 80024a4:	4453      	add	r3, sl
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	dd60      	ble.n	800256c <__aeabi_ddiv+0x48c>
 80024aa:	0751      	lsls	r1, r2, #29
 80024ac:	d000      	beq.n	80024b0 <__aeabi_ddiv+0x3d0>
 80024ae:	e086      	b.n	80025be <__aeabi_ddiv+0x4de>
 80024b0:	002e      	movs	r6, r5
 80024b2:	08d1      	lsrs	r1, r2, #3
 80024b4:	465a      	mov	r2, fp
 80024b6:	01d2      	lsls	r2, r2, #7
 80024b8:	d506      	bpl.n	80024c8 <__aeabi_ddiv+0x3e8>
 80024ba:	465a      	mov	r2, fp
 80024bc:	4b8e      	ldr	r3, [pc, #568]	@ (80026f8 <__aeabi_ddiv+0x618>)
 80024be:	401a      	ands	r2, r3
 80024c0:	2380      	movs	r3, #128	@ 0x80
 80024c2:	4693      	mov	fp, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4453      	add	r3, sl
 80024c8:	4a8c      	ldr	r2, [pc, #560]	@ (80026fc <__aeabi_ddiv+0x61c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_ddiv+0x3f0>
 80024ce:	e680      	b.n	80021d2 <__aeabi_ddiv+0xf2>
 80024d0:	465a      	mov	r2, fp
 80024d2:	0752      	lsls	r2, r2, #29
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4690      	mov	r8, r2
 80024d8:	465a      	mov	r2, fp
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	0254      	lsls	r4, r2, #9
 80024de:	0b24      	lsrs	r4, r4, #12
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	e669      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80024e4:	0035      	movs	r5, r6
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0db      	beq.n	80024a2 <__aeabi_ddiv+0x3c2>
 80024ea:	9d00      	ldr	r5, [sp, #0]
 80024ec:	1e51      	subs	r1, r2, #1
 80024ee:	46ac      	mov	ip, r5
 80024f0:	4464      	add	r4, ip
 80024f2:	42ac      	cmp	r4, r5
 80024f4:	d200      	bcs.n	80024f8 <__aeabi_ddiv+0x418>
 80024f6:	e09e      	b.n	8002636 <__aeabi_ddiv+0x556>
 80024f8:	4284      	cmp	r4, r0
 80024fa:	d200      	bcs.n	80024fe <__aeabi_ddiv+0x41e>
 80024fc:	e0e1      	b.n	80026c2 <__aeabi_ddiv+0x5e2>
 80024fe:	d100      	bne.n	8002502 <__aeabi_ddiv+0x422>
 8002500:	e0ee      	b.n	80026e0 <__aeabi_ddiv+0x600>
 8002502:	000a      	movs	r2, r1
 8002504:	e7ca      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002506:	4542      	cmp	r2, r8
 8002508:	d900      	bls.n	800250c <__aeabi_ddiv+0x42c>
 800250a:	e708      	b.n	800231e <__aeabi_ddiv+0x23e>
 800250c:	464b      	mov	r3, r9
 800250e:	07dc      	lsls	r4, r3, #31
 8002510:	0858      	lsrs	r0, r3, #1
 8002512:	4643      	mov	r3, r8
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	431c      	orrs	r4, r3
 8002518:	4643      	mov	r3, r8
 800251a:	07dd      	lsls	r5, r3, #31
 800251c:	e706      	b.n	800232c <__aeabi_ddiv+0x24c>
 800251e:	f001 fa83 	bl	8003a28 <__clzsi2>
 8002522:	2315      	movs	r3, #21
 8002524:	469c      	mov	ip, r3
 8002526:	4484      	add	ip, r0
 8002528:	0002      	movs	r2, r0
 800252a:	4663      	mov	r3, ip
 800252c:	3220      	adds	r2, #32
 800252e:	2b1c      	cmp	r3, #28
 8002530:	dc00      	bgt.n	8002534 <__aeabi_ddiv+0x454>
 8002532:	e692      	b.n	800225a <__aeabi_ddiv+0x17a>
 8002534:	0023      	movs	r3, r4
 8002536:	3808      	subs	r0, #8
 8002538:	4083      	lsls	r3, r0
 800253a:	4699      	mov	r9, r3
 800253c:	2300      	movs	r3, #0
 800253e:	4698      	mov	r8, r3
 8002540:	e69a      	b.n	8002278 <__aeabi_ddiv+0x198>
 8002542:	f001 fa71 	bl	8003a28 <__clzsi2>
 8002546:	0002      	movs	r2, r0
 8002548:	0003      	movs	r3, r0
 800254a:	3215      	adds	r2, #21
 800254c:	3320      	adds	r3, #32
 800254e:	2a1c      	cmp	r2, #28
 8002550:	dc00      	bgt.n	8002554 <__aeabi_ddiv+0x474>
 8002552:	e65f      	b.n	8002214 <__aeabi_ddiv+0x134>
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	3808      	subs	r0, #8
 8002558:	4081      	lsls	r1, r0
 800255a:	2200      	movs	r2, #0
 800255c:	468b      	mov	fp, r1
 800255e:	e666      	b.n	800222e <__aeabi_ddiv+0x14e>
 8002560:	2200      	movs	r2, #0
 8002562:	002e      	movs	r6, r5
 8002564:	2400      	movs	r4, #0
 8002566:	4690      	mov	r8, r2
 8002568:	4b65      	ldr	r3, [pc, #404]	@ (8002700 <__aeabi_ddiv+0x620>)
 800256a:	e625      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 800256c:	002e      	movs	r6, r5
 800256e:	2101      	movs	r1, #1
 8002570:	1ac9      	subs	r1, r1, r3
 8002572:	2938      	cmp	r1, #56	@ 0x38
 8002574:	dd00      	ble.n	8002578 <__aeabi_ddiv+0x498>
 8002576:	e61b      	b.n	80021b0 <__aeabi_ddiv+0xd0>
 8002578:	291f      	cmp	r1, #31
 800257a:	dc7e      	bgt.n	800267a <__aeabi_ddiv+0x59a>
 800257c:	4861      	ldr	r0, [pc, #388]	@ (8002704 <__aeabi_ddiv+0x624>)
 800257e:	0014      	movs	r4, r2
 8002580:	4450      	add	r0, sl
 8002582:	465b      	mov	r3, fp
 8002584:	4082      	lsls	r2, r0
 8002586:	4083      	lsls	r3, r0
 8002588:	40cc      	lsrs	r4, r1
 800258a:	1e50      	subs	r0, r2, #1
 800258c:	4182      	sbcs	r2, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	431a      	orrs	r2, r3
 8002592:	465b      	mov	r3, fp
 8002594:	40cb      	lsrs	r3, r1
 8002596:	0751      	lsls	r1, r2, #29
 8002598:	d009      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 800259a:	210f      	movs	r1, #15
 800259c:	4011      	ands	r1, r2
 800259e:	2904      	cmp	r1, #4
 80025a0:	d005      	beq.n	80025ae <__aeabi_ddiv+0x4ce>
 80025a2:	1d11      	adds	r1, r2, #4
 80025a4:	4291      	cmp	r1, r2
 80025a6:	4192      	sbcs	r2, r2
 80025a8:	4252      	negs	r2, r2
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	000a      	movs	r2, r1
 80025ae:	0219      	lsls	r1, r3, #8
 80025b0:	d400      	bmi.n	80025b4 <__aeabi_ddiv+0x4d4>
 80025b2:	e09b      	b.n	80026ec <__aeabi_ddiv+0x60c>
 80025b4:	2200      	movs	r2, #0
 80025b6:	2301      	movs	r3, #1
 80025b8:	2400      	movs	r4, #0
 80025ba:	4690      	mov	r8, r2
 80025bc:	e5fc      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80025be:	210f      	movs	r1, #15
 80025c0:	4011      	ands	r1, r2
 80025c2:	2904      	cmp	r1, #4
 80025c4:	d100      	bne.n	80025c8 <__aeabi_ddiv+0x4e8>
 80025c6:	e773      	b.n	80024b0 <__aeabi_ddiv+0x3d0>
 80025c8:	1d11      	adds	r1, r2, #4
 80025ca:	4291      	cmp	r1, r2
 80025cc:	4192      	sbcs	r2, r2
 80025ce:	4252      	negs	r2, r2
 80025d0:	002e      	movs	r6, r5
 80025d2:	08c9      	lsrs	r1, r1, #3
 80025d4:	4493      	add	fp, r2
 80025d6:	e76d      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 80025d8:	9b00      	ldr	r3, [sp, #0]
 80025da:	3d01      	subs	r5, #1
 80025dc:	469c      	mov	ip, r3
 80025de:	4461      	add	r1, ip
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d900      	bls.n	80025e6 <__aeabi_ddiv+0x506>
 80025e4:	e72c      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025e6:	428a      	cmp	r2, r1
 80025e8:	d800      	bhi.n	80025ec <__aeabi_ddiv+0x50c>
 80025ea:	e729      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025ec:	1e85      	subs	r5, r0, #2
 80025ee:	4461      	add	r1, ip
 80025f0:	e726      	b.n	8002440 <__aeabi_ddiv+0x360>
 80025f2:	9900      	ldr	r1, [sp, #0]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	468c      	mov	ip, r1
 80025f8:	4464      	add	r4, ip
 80025fa:	42a1      	cmp	r1, r4
 80025fc:	d900      	bls.n	8002600 <__aeabi_ddiv+0x520>
 80025fe:	e72d      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002600:	42a2      	cmp	r2, r4
 8002602:	d800      	bhi.n	8002606 <__aeabi_ddiv+0x526>
 8002604:	e72a      	b.n	800245c <__aeabi_ddiv+0x37c>
 8002606:	1e83      	subs	r3, r0, #2
 8002608:	4464      	add	r4, ip
 800260a:	e727      	b.n	800245c <__aeabi_ddiv+0x37c>
 800260c:	4287      	cmp	r7, r0
 800260e:	d000      	beq.n	8002612 <__aeabi_ddiv+0x532>
 8002610:	e6fe      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002612:	45a9      	cmp	r9, r5
 8002614:	d900      	bls.n	8002618 <__aeabi_ddiv+0x538>
 8002616:	e6fb      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002618:	e6f5      	b.n	8002406 <__aeabi_ddiv+0x326>
 800261a:	42a2      	cmp	r2, r4
 800261c:	d800      	bhi.n	8002620 <__aeabi_ddiv+0x540>
 800261e:	e6b9      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002620:	1e83      	subs	r3, r0, #2
 8002622:	4464      	add	r4, ip
 8002624:	e6b6      	b.n	8002394 <__aeabi_ddiv+0x2b4>
 8002626:	428a      	cmp	r2, r1
 8002628:	d800      	bhi.n	800262c <__aeabi_ddiv+0x54c>
 800262a:	e69f      	b.n	800236c <__aeabi_ddiv+0x28c>
 800262c:	46bc      	mov	ip, r7
 800262e:	1e83      	subs	r3, r0, #2
 8002630:	4698      	mov	r8, r3
 8002632:	4461      	add	r1, ip
 8002634:	e69a      	b.n	800236c <__aeabi_ddiv+0x28c>
 8002636:	000a      	movs	r2, r1
 8002638:	4284      	cmp	r4, r0
 800263a:	d000      	beq.n	800263e <__aeabi_ddiv+0x55e>
 800263c:	e72e      	b.n	800249c <__aeabi_ddiv+0x3bc>
 800263e:	454b      	cmp	r3, r9
 8002640:	d000      	beq.n	8002644 <__aeabi_ddiv+0x564>
 8002642:	e72b      	b.n	800249c <__aeabi_ddiv+0x3bc>
 8002644:	0035      	movs	r5, r6
 8002646:	e72c      	b.n	80024a2 <__aeabi_ddiv+0x3c2>
 8002648:	4b2a      	ldr	r3, [pc, #168]	@ (80026f4 <__aeabi_ddiv+0x614>)
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <__aeabi_ddiv+0x628>)
 800264c:	4453      	add	r3, sl
 800264e:	4592      	cmp	sl, r2
 8002650:	db43      	blt.n	80026da <__aeabi_ddiv+0x5fa>
 8002652:	2201      	movs	r2, #1
 8002654:	2100      	movs	r1, #0
 8002656:	4493      	add	fp, r2
 8002658:	e72c      	b.n	80024b4 <__aeabi_ddiv+0x3d4>
 800265a:	42ac      	cmp	r4, r5
 800265c:	d800      	bhi.n	8002660 <__aeabi_ddiv+0x580>
 800265e:	e6d7      	b.n	8002410 <__aeabi_ddiv+0x330>
 8002660:	2302      	movs	r3, #2
 8002662:	425b      	negs	r3, r3
 8002664:	469c      	mov	ip, r3
 8002666:	9900      	ldr	r1, [sp, #0]
 8002668:	444d      	add	r5, r9
 800266a:	454d      	cmp	r5, r9
 800266c:	419b      	sbcs	r3, r3
 800266e:	44e3      	add	fp, ip
 8002670:	468c      	mov	ip, r1
 8002672:	425b      	negs	r3, r3
 8002674:	4463      	add	r3, ip
 8002676:	18c0      	adds	r0, r0, r3
 8002678:	e6cc      	b.n	8002414 <__aeabi_ddiv+0x334>
 800267a:	201f      	movs	r0, #31
 800267c:	4240      	negs	r0, r0
 800267e:	1ac3      	subs	r3, r0, r3
 8002680:	4658      	mov	r0, fp
 8002682:	40d8      	lsrs	r0, r3
 8002684:	2920      	cmp	r1, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_ddiv+0x5b2>
 8002688:	4659      	mov	r1, fp
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <__aeabi_ddiv+0x62c>)
 800268c:	4453      	add	r3, sl
 800268e:	4099      	lsls	r1, r3
 8002690:	430a      	orrs	r2, r1
 8002692:	1e53      	subs	r3, r2, #1
 8002694:	419a      	sbcs	r2, r3
 8002696:	2307      	movs	r3, #7
 8002698:	0019      	movs	r1, r3
 800269a:	4302      	orrs	r2, r0
 800269c:	2400      	movs	r4, #0
 800269e:	4011      	ands	r1, r2
 80026a0:	4213      	tst	r3, r2
 80026a2:	d009      	beq.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026a4:	3308      	adds	r3, #8
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d01d      	beq.n	80026e8 <__aeabi_ddiv+0x608>
 80026ac:	1d13      	adds	r3, r2, #4
 80026ae:	4293      	cmp	r3, r2
 80026b0:	4189      	sbcs	r1, r1
 80026b2:	001a      	movs	r2, r3
 80026b4:	4249      	negs	r1, r1
 80026b6:	0749      	lsls	r1, r1, #29
 80026b8:	08d2      	lsrs	r2, r2, #3
 80026ba:	430a      	orrs	r2, r1
 80026bc:	4690      	mov	r8, r2
 80026be:	2300      	movs	r3, #0
 80026c0:	e57a      	b.n	80021b8 <__aeabi_ddiv+0xd8>
 80026c2:	4649      	mov	r1, r9
 80026c4:	9f00      	ldr	r7, [sp, #0]
 80026c6:	004d      	lsls	r5, r1, #1
 80026c8:	454d      	cmp	r5, r9
 80026ca:	4189      	sbcs	r1, r1
 80026cc:	46bc      	mov	ip, r7
 80026ce:	4249      	negs	r1, r1
 80026d0:	4461      	add	r1, ip
 80026d2:	46a9      	mov	r9, r5
 80026d4:	3a02      	subs	r2, #2
 80026d6:	1864      	adds	r4, r4, r1
 80026d8:	e7ae      	b.n	8002638 <__aeabi_ddiv+0x558>
 80026da:	2201      	movs	r2, #1
 80026dc:	4252      	negs	r2, r2
 80026de:	e746      	b.n	800256e <__aeabi_ddiv+0x48e>
 80026e0:	4599      	cmp	r9, r3
 80026e2:	d3ee      	bcc.n	80026c2 <__aeabi_ddiv+0x5e2>
 80026e4:	000a      	movs	r2, r1
 80026e6:	e7aa      	b.n	800263e <__aeabi_ddiv+0x55e>
 80026e8:	2100      	movs	r1, #0
 80026ea:	e7e5      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026ec:	0759      	lsls	r1, r3, #29
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	0b1c      	lsrs	r4, r3, #12
 80026f2:	e7e1      	b.n	80026b8 <__aeabi_ddiv+0x5d8>
 80026f4:	000003ff 	.word	0x000003ff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	000007fe 	.word	0x000007fe
 8002700:	000007ff 	.word	0x000007ff
 8002704:	0000041e 	.word	0x0000041e
 8002708:	fffffc02 	.word	0xfffffc02
 800270c:	0000043e 	.word	0x0000043e

08002710 <__eqdf2>:
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002712:	4657      	mov	r7, sl
 8002714:	46de      	mov	lr, fp
 8002716:	464e      	mov	r6, r9
 8002718:	4645      	mov	r5, r8
 800271a:	b5e0      	push	{r5, r6, r7, lr}
 800271c:	000d      	movs	r5, r1
 800271e:	0004      	movs	r4, r0
 8002720:	0fe8      	lsrs	r0, r5, #31
 8002722:	4683      	mov	fp, r0
 8002724:	0309      	lsls	r1, r1, #12
 8002726:	0fd8      	lsrs	r0, r3, #31
 8002728:	0b09      	lsrs	r1, r1, #12
 800272a:	4682      	mov	sl, r0
 800272c:	4819      	ldr	r0, [pc, #100]	@ (8002794 <__eqdf2+0x84>)
 800272e:	468c      	mov	ip, r1
 8002730:	031f      	lsls	r7, r3, #12
 8002732:	0069      	lsls	r1, r5, #1
 8002734:	005e      	lsls	r6, r3, #1
 8002736:	0d49      	lsrs	r1, r1, #21
 8002738:	0b3f      	lsrs	r7, r7, #12
 800273a:	0d76      	lsrs	r6, r6, #21
 800273c:	4281      	cmp	r1, r0
 800273e:	d018      	beq.n	8002772 <__eqdf2+0x62>
 8002740:	4286      	cmp	r6, r0
 8002742:	d00f      	beq.n	8002764 <__eqdf2+0x54>
 8002744:	2001      	movs	r0, #1
 8002746:	42b1      	cmp	r1, r6
 8002748:	d10d      	bne.n	8002766 <__eqdf2+0x56>
 800274a:	45bc      	cmp	ip, r7
 800274c:	d10b      	bne.n	8002766 <__eqdf2+0x56>
 800274e:	4294      	cmp	r4, r2
 8002750:	d109      	bne.n	8002766 <__eqdf2+0x56>
 8002752:	45d3      	cmp	fp, sl
 8002754:	d01c      	beq.n	8002790 <__eqdf2+0x80>
 8002756:	2900      	cmp	r1, #0
 8002758:	d105      	bne.n	8002766 <__eqdf2+0x56>
 800275a:	4660      	mov	r0, ip
 800275c:	4320      	orrs	r0, r4
 800275e:	1e43      	subs	r3, r0, #1
 8002760:	4198      	sbcs	r0, r3
 8002762:	e000      	b.n	8002766 <__eqdf2+0x56>
 8002764:	2001      	movs	r0, #1
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
 8002768:	46bb      	mov	fp, r7
 800276a:	46b2      	mov	sl, r6
 800276c:	46a9      	mov	r9, r5
 800276e:	46a0      	mov	r8, r4
 8002770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002772:	2001      	movs	r0, #1
 8002774:	428e      	cmp	r6, r1
 8002776:	d1f6      	bne.n	8002766 <__eqdf2+0x56>
 8002778:	4661      	mov	r1, ip
 800277a:	4339      	orrs	r1, r7
 800277c:	000f      	movs	r7, r1
 800277e:	4317      	orrs	r7, r2
 8002780:	4327      	orrs	r7, r4
 8002782:	d1f0      	bne.n	8002766 <__eqdf2+0x56>
 8002784:	465b      	mov	r3, fp
 8002786:	4652      	mov	r2, sl
 8002788:	1a98      	subs	r0, r3, r2
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
 800278e:	e7ea      	b.n	8002766 <__eqdf2+0x56>
 8002790:	2000      	movs	r0, #0
 8002792:	e7e8      	b.n	8002766 <__eqdf2+0x56>
 8002794:	000007ff 	.word	0x000007ff

08002798 <__gedf2>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	4657      	mov	r7, sl
 800279c:	464e      	mov	r6, r9
 800279e:	4645      	mov	r5, r8
 80027a0:	46de      	mov	lr, fp
 80027a2:	b5e0      	push	{r5, r6, r7, lr}
 80027a4:	000d      	movs	r5, r1
 80027a6:	030e      	lsls	r6, r1, #12
 80027a8:	0049      	lsls	r1, r1, #1
 80027aa:	0d49      	lsrs	r1, r1, #21
 80027ac:	468a      	mov	sl, r1
 80027ae:	0fdf      	lsrs	r7, r3, #31
 80027b0:	0fe9      	lsrs	r1, r5, #31
 80027b2:	46bc      	mov	ip, r7
 80027b4:	b083      	sub	sp, #12
 80027b6:	4f2f      	ldr	r7, [pc, #188]	@ (8002874 <__gedf2+0xdc>)
 80027b8:	0004      	movs	r4, r0
 80027ba:	4680      	mov	r8, r0
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	0058      	lsls	r0, r3, #1
 80027c0:	0319      	lsls	r1, r3, #12
 80027c2:	4691      	mov	r9, r2
 80027c4:	0b36      	lsrs	r6, r6, #12
 80027c6:	0b09      	lsrs	r1, r1, #12
 80027c8:	0d40      	lsrs	r0, r0, #21
 80027ca:	45ba      	cmp	sl, r7
 80027cc:	d01d      	beq.n	800280a <__gedf2+0x72>
 80027ce:	42b8      	cmp	r0, r7
 80027d0:	d00d      	beq.n	80027ee <__gedf2+0x56>
 80027d2:	4657      	mov	r7, sl
 80027d4:	2f00      	cmp	r7, #0
 80027d6:	d12a      	bne.n	800282e <__gedf2+0x96>
 80027d8:	4334      	orrs	r4, r6
 80027da:	2800      	cmp	r0, #0
 80027dc:	d124      	bne.n	8002828 <__gedf2+0x90>
 80027de:	430a      	orrs	r2, r1
 80027e0:	d036      	beq.n	8002850 <__gedf2+0xb8>
 80027e2:	2c00      	cmp	r4, #0
 80027e4:	d141      	bne.n	800286a <__gedf2+0xd2>
 80027e6:	4663      	mov	r3, ip
 80027e8:	0058      	lsls	r0, r3, #1
 80027ea:	3801      	subs	r0, #1
 80027ec:	e015      	b.n	800281a <__gedf2+0x82>
 80027ee:	4311      	orrs	r1, r2
 80027f0:	d138      	bne.n	8002864 <__gedf2+0xcc>
 80027f2:	4653      	mov	r3, sl
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <__gedf2+0x64>
 80027f8:	4326      	orrs	r6, r4
 80027fa:	d0f4      	beq.n	80027e6 <__gedf2+0x4e>
 80027fc:	9b01      	ldr	r3, [sp, #4]
 80027fe:	4563      	cmp	r3, ip
 8002800:	d107      	bne.n	8002812 <__gedf2+0x7a>
 8002802:	9b01      	ldr	r3, [sp, #4]
 8002804:	0058      	lsls	r0, r3, #1
 8002806:	3801      	subs	r0, #1
 8002808:	e007      	b.n	800281a <__gedf2+0x82>
 800280a:	4326      	orrs	r6, r4
 800280c:	d12a      	bne.n	8002864 <__gedf2+0xcc>
 800280e:	4550      	cmp	r0, sl
 8002810:	d021      	beq.n	8002856 <__gedf2+0xbe>
 8002812:	2001      	movs	r0, #1
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	425f      	negs	r7, r3
 8002818:	4338      	orrs	r0, r7
 800281a:	b003      	add	sp, #12
 800281c:	bcf0      	pop	{r4, r5, r6, r7}
 800281e:	46bb      	mov	fp, r7
 8002820:	46b2      	mov	sl, r6
 8002822:	46a9      	mov	r9, r5
 8002824:	46a0      	mov	r8, r4
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002828:	2c00      	cmp	r4, #0
 800282a:	d0dc      	beq.n	80027e6 <__gedf2+0x4e>
 800282c:	e7e6      	b.n	80027fc <__gedf2+0x64>
 800282e:	2800      	cmp	r0, #0
 8002830:	d0ef      	beq.n	8002812 <__gedf2+0x7a>
 8002832:	9b01      	ldr	r3, [sp, #4]
 8002834:	4563      	cmp	r3, ip
 8002836:	d1ec      	bne.n	8002812 <__gedf2+0x7a>
 8002838:	4582      	cmp	sl, r0
 800283a:	dcea      	bgt.n	8002812 <__gedf2+0x7a>
 800283c:	dbe1      	blt.n	8002802 <__gedf2+0x6a>
 800283e:	428e      	cmp	r6, r1
 8002840:	d8e7      	bhi.n	8002812 <__gedf2+0x7a>
 8002842:	d1de      	bne.n	8002802 <__gedf2+0x6a>
 8002844:	45c8      	cmp	r8, r9
 8002846:	d8e4      	bhi.n	8002812 <__gedf2+0x7a>
 8002848:	2000      	movs	r0, #0
 800284a:	45c8      	cmp	r8, r9
 800284c:	d2e5      	bcs.n	800281a <__gedf2+0x82>
 800284e:	e7d8      	b.n	8002802 <__gedf2+0x6a>
 8002850:	2c00      	cmp	r4, #0
 8002852:	d0e2      	beq.n	800281a <__gedf2+0x82>
 8002854:	e7dd      	b.n	8002812 <__gedf2+0x7a>
 8002856:	4311      	orrs	r1, r2
 8002858:	d104      	bne.n	8002864 <__gedf2+0xcc>
 800285a:	9b01      	ldr	r3, [sp, #4]
 800285c:	4563      	cmp	r3, ip
 800285e:	d1d8      	bne.n	8002812 <__gedf2+0x7a>
 8002860:	2000      	movs	r0, #0
 8002862:	e7da      	b.n	800281a <__gedf2+0x82>
 8002864:	2002      	movs	r0, #2
 8002866:	4240      	negs	r0, r0
 8002868:	e7d7      	b.n	800281a <__gedf2+0x82>
 800286a:	9b01      	ldr	r3, [sp, #4]
 800286c:	4563      	cmp	r3, ip
 800286e:	d0e6      	beq.n	800283e <__gedf2+0xa6>
 8002870:	e7cf      	b.n	8002812 <__gedf2+0x7a>
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	000007ff 	.word	0x000007ff

08002878 <__ledf2>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	4657      	mov	r7, sl
 800287c:	464e      	mov	r6, r9
 800287e:	4645      	mov	r5, r8
 8002880:	46de      	mov	lr, fp
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	000d      	movs	r5, r1
 8002886:	030e      	lsls	r6, r1, #12
 8002888:	0049      	lsls	r1, r1, #1
 800288a:	0d49      	lsrs	r1, r1, #21
 800288c:	468a      	mov	sl, r1
 800288e:	0fdf      	lsrs	r7, r3, #31
 8002890:	0fe9      	lsrs	r1, r5, #31
 8002892:	46bc      	mov	ip, r7
 8002894:	b083      	sub	sp, #12
 8002896:	4f2e      	ldr	r7, [pc, #184]	@ (8002950 <__ledf2+0xd8>)
 8002898:	0004      	movs	r4, r0
 800289a:	4680      	mov	r8, r0
 800289c:	9101      	str	r1, [sp, #4]
 800289e:	0058      	lsls	r0, r3, #1
 80028a0:	0319      	lsls	r1, r3, #12
 80028a2:	4691      	mov	r9, r2
 80028a4:	0b36      	lsrs	r6, r6, #12
 80028a6:	0b09      	lsrs	r1, r1, #12
 80028a8:	0d40      	lsrs	r0, r0, #21
 80028aa:	45ba      	cmp	sl, r7
 80028ac:	d01e      	beq.n	80028ec <__ledf2+0x74>
 80028ae:	42b8      	cmp	r0, r7
 80028b0:	d00d      	beq.n	80028ce <__ledf2+0x56>
 80028b2:	4657      	mov	r7, sl
 80028b4:	2f00      	cmp	r7, #0
 80028b6:	d127      	bne.n	8002908 <__ledf2+0x90>
 80028b8:	4334      	orrs	r4, r6
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d133      	bne.n	8002926 <__ledf2+0xae>
 80028be:	430a      	orrs	r2, r1
 80028c0:	d034      	beq.n	800292c <__ledf2+0xb4>
 80028c2:	2c00      	cmp	r4, #0
 80028c4:	d140      	bne.n	8002948 <__ledf2+0xd0>
 80028c6:	4663      	mov	r3, ip
 80028c8:	0058      	lsls	r0, r3, #1
 80028ca:	3801      	subs	r0, #1
 80028cc:	e015      	b.n	80028fa <__ledf2+0x82>
 80028ce:	4311      	orrs	r1, r2
 80028d0:	d112      	bne.n	80028f8 <__ledf2+0x80>
 80028d2:	4653      	mov	r3, sl
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <__ledf2+0x64>
 80028d8:	4326      	orrs	r6, r4
 80028da:	d0f4      	beq.n	80028c6 <__ledf2+0x4e>
 80028dc:	9b01      	ldr	r3, [sp, #4]
 80028de:	4563      	cmp	r3, ip
 80028e0:	d01d      	beq.n	800291e <__ledf2+0xa6>
 80028e2:	2001      	movs	r0, #1
 80028e4:	9b01      	ldr	r3, [sp, #4]
 80028e6:	425f      	negs	r7, r3
 80028e8:	4338      	orrs	r0, r7
 80028ea:	e006      	b.n	80028fa <__ledf2+0x82>
 80028ec:	4326      	orrs	r6, r4
 80028ee:	d103      	bne.n	80028f8 <__ledf2+0x80>
 80028f0:	4550      	cmp	r0, sl
 80028f2:	d1f6      	bne.n	80028e2 <__ledf2+0x6a>
 80028f4:	4311      	orrs	r1, r2
 80028f6:	d01c      	beq.n	8002932 <__ledf2+0xba>
 80028f8:	2002      	movs	r0, #2
 80028fa:	b003      	add	sp, #12
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	2800      	cmp	r0, #0
 800290a:	d0ea      	beq.n	80028e2 <__ledf2+0x6a>
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	4563      	cmp	r3, ip
 8002910:	d1e7      	bne.n	80028e2 <__ledf2+0x6a>
 8002912:	4582      	cmp	sl, r0
 8002914:	dce5      	bgt.n	80028e2 <__ledf2+0x6a>
 8002916:	db02      	blt.n	800291e <__ledf2+0xa6>
 8002918:	428e      	cmp	r6, r1
 800291a:	d8e2      	bhi.n	80028e2 <__ledf2+0x6a>
 800291c:	d00e      	beq.n	800293c <__ledf2+0xc4>
 800291e:	9b01      	ldr	r3, [sp, #4]
 8002920:	0058      	lsls	r0, r3, #1
 8002922:	3801      	subs	r0, #1
 8002924:	e7e9      	b.n	80028fa <__ledf2+0x82>
 8002926:	2c00      	cmp	r4, #0
 8002928:	d0cd      	beq.n	80028c6 <__ledf2+0x4e>
 800292a:	e7d7      	b.n	80028dc <__ledf2+0x64>
 800292c:	2c00      	cmp	r4, #0
 800292e:	d0e4      	beq.n	80028fa <__ledf2+0x82>
 8002930:	e7d7      	b.n	80028e2 <__ledf2+0x6a>
 8002932:	9b01      	ldr	r3, [sp, #4]
 8002934:	2000      	movs	r0, #0
 8002936:	4563      	cmp	r3, ip
 8002938:	d0df      	beq.n	80028fa <__ledf2+0x82>
 800293a:	e7d2      	b.n	80028e2 <__ledf2+0x6a>
 800293c:	45c8      	cmp	r8, r9
 800293e:	d8d0      	bhi.n	80028e2 <__ledf2+0x6a>
 8002940:	2000      	movs	r0, #0
 8002942:	45c8      	cmp	r8, r9
 8002944:	d2d9      	bcs.n	80028fa <__ledf2+0x82>
 8002946:	e7ea      	b.n	800291e <__ledf2+0xa6>
 8002948:	9b01      	ldr	r3, [sp, #4]
 800294a:	4563      	cmp	r3, ip
 800294c:	d0e4      	beq.n	8002918 <__ledf2+0xa0>
 800294e:	e7c8      	b.n	80028e2 <__ledf2+0x6a>
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_dmul>:
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4657      	mov	r7, sl
 8002958:	464e      	mov	r6, r9
 800295a:	46de      	mov	lr, fp
 800295c:	4645      	mov	r5, r8
 800295e:	b5e0      	push	{r5, r6, r7, lr}
 8002960:	001f      	movs	r7, r3
 8002962:	030b      	lsls	r3, r1, #12
 8002964:	0b1b      	lsrs	r3, r3, #12
 8002966:	0016      	movs	r6, r2
 8002968:	469a      	mov	sl, r3
 800296a:	0fca      	lsrs	r2, r1, #31
 800296c:	004b      	lsls	r3, r1, #1
 800296e:	0004      	movs	r4, r0
 8002970:	4691      	mov	r9, r2
 8002972:	b085      	sub	sp, #20
 8002974:	0d5b      	lsrs	r3, r3, #21
 8002976:	d100      	bne.n	800297a <__aeabi_dmul+0x26>
 8002978:	e1cf      	b.n	8002d1a <__aeabi_dmul+0x3c6>
 800297a:	4acd      	ldr	r2, [pc, #820]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d055      	beq.n	8002a2c <__aeabi_dmul+0xd8>
 8002980:	4651      	mov	r1, sl
 8002982:	0f42      	lsrs	r2, r0, #29
 8002984:	00c9      	lsls	r1, r1, #3
 8002986:	430a      	orrs	r2, r1
 8002988:	2180      	movs	r1, #128	@ 0x80
 800298a:	0409      	lsls	r1, r1, #16
 800298c:	4311      	orrs	r1, r2
 800298e:	00c2      	lsls	r2, r0, #3
 8002990:	4690      	mov	r8, r2
 8002992:	4ac8      	ldr	r2, [pc, #800]	@ (8002cb4 <__aeabi_dmul+0x360>)
 8002994:	468a      	mov	sl, r1
 8002996:	4693      	mov	fp, r2
 8002998:	449b      	add	fp, r3
 800299a:	2300      	movs	r3, #0
 800299c:	2500      	movs	r5, #0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	033c      	lsls	r4, r7, #12
 80029a2:	007b      	lsls	r3, r7, #1
 80029a4:	0ffa      	lsrs	r2, r7, #31
 80029a6:	9601      	str	r6, [sp, #4]
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	d100      	bne.n	80029b2 <__aeabi_dmul+0x5e>
 80029b0:	e188      	b.n	8002cc4 <__aeabi_dmul+0x370>
 80029b2:	4abf      	ldr	r2, [pc, #764]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <__aeabi_dmul+0x66>
 80029b8:	e092      	b.n	8002ae0 <__aeabi_dmul+0x18c>
 80029ba:	4abe      	ldr	r2, [pc, #760]	@ (8002cb4 <__aeabi_dmul+0x360>)
 80029bc:	4694      	mov	ip, r2
 80029be:	4463      	add	r3, ip
 80029c0:	449b      	add	fp, r3
 80029c2:	2d0a      	cmp	r5, #10
 80029c4:	dc42      	bgt.n	8002a4c <__aeabi_dmul+0xf8>
 80029c6:	00e4      	lsls	r4, r4, #3
 80029c8:	0f73      	lsrs	r3, r6, #29
 80029ca:	4323      	orrs	r3, r4
 80029cc:	2480      	movs	r4, #128	@ 0x80
 80029ce:	4649      	mov	r1, r9
 80029d0:	0424      	lsls	r4, r4, #16
 80029d2:	431c      	orrs	r4, r3
 80029d4:	00f3      	lsls	r3, r6, #3
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	9b00      	ldr	r3, [sp, #0]
 80029da:	2000      	movs	r0, #0
 80029dc:	4059      	eors	r1, r3
 80029de:	b2cb      	uxtb	r3, r1
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	2d02      	cmp	r5, #2
 80029e4:	dc00      	bgt.n	80029e8 <__aeabi_dmul+0x94>
 80029e6:	e094      	b.n	8002b12 <__aeabi_dmul+0x1be>
 80029e8:	2301      	movs	r3, #1
 80029ea:	40ab      	lsls	r3, r5
 80029ec:	001d      	movs	r5, r3
 80029ee:	23a6      	movs	r3, #166	@ 0xa6
 80029f0:	002a      	movs	r2, r5
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	401a      	ands	r2, r3
 80029f6:	421d      	tst	r5, r3
 80029f8:	d000      	beq.n	80029fc <__aeabi_dmul+0xa8>
 80029fa:	e229      	b.n	8002e50 <__aeabi_dmul+0x4fc>
 80029fc:	2390      	movs	r3, #144	@ 0x90
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	421d      	tst	r5, r3
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dmul+0xb2>
 8002a04:	e24d      	b.n	8002ea2 <__aeabi_dmul+0x54e>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2480      	movs	r4, #128	@ 0x80
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	0324      	lsls	r4, r4, #12
 8002a0e:	4ba8      	ldr	r3, [pc, #672]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002a10:	0010      	movs	r0, r2
 8002a12:	464a      	mov	r2, r9
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	4323      	orrs	r3, r4
 8002a18:	07d2      	lsls	r2, r2, #31
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	b005      	add	sp, #20
 8002a20:	bcf0      	pop	{r4, r5, r6, r7}
 8002a22:	46bb      	mov	fp, r7
 8002a24:	46b2      	mov	sl, r6
 8002a26:	46a9      	mov	r9, r5
 8002a28:	46a0      	mov	r8, r4
 8002a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a2c:	4652      	mov	r2, sl
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	4690      	mov	r8, r2
 8002a32:	d000      	beq.n	8002a36 <__aeabi_dmul+0xe2>
 8002a34:	e1ac      	b.n	8002d90 <__aeabi_dmul+0x43c>
 8002a36:	469b      	mov	fp, r3
 8002a38:	2302      	movs	r3, #2
 8002a3a:	4692      	mov	sl, r2
 8002a3c:	2508      	movs	r5, #8
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	e7ae      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002a42:	9b00      	ldr	r3, [sp, #0]
 8002a44:	46a2      	mov	sl, r4
 8002a46:	4699      	mov	r9, r3
 8002a48:	9b01      	ldr	r3, [sp, #4]
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	9b02      	ldr	r3, [sp, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d100      	bne.n	8002a54 <__aeabi_dmul+0x100>
 8002a52:	e1ca      	b.n	8002dea <__aeabi_dmul+0x496>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dmul+0x106>
 8002a58:	e192      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d110      	bne.n	8002a80 <__aeabi_dmul+0x12c>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2400      	movs	r4, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	e7d4      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002a66:	2201      	movs	r2, #1
 8002a68:	087b      	lsrs	r3, r7, #1
 8002a6a:	403a      	ands	r2, r7
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4652      	mov	r2, sl
 8002a70:	07d2      	lsls	r2, r2, #31
 8002a72:	4313      	orrs	r3, r2
 8002a74:	4698      	mov	r8, r3
 8002a76:	4653      	mov	r3, sl
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	469a      	mov	sl, r3
 8002a7c:	9b03      	ldr	r3, [sp, #12]
 8002a7e:	4699      	mov	r9, r3
 8002a80:	465b      	mov	r3, fp
 8002a82:	1c58      	adds	r0, r3, #1
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	445b      	add	r3, fp
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	dc00      	bgt.n	8002a90 <__aeabi_dmul+0x13c>
 8002a8e:	e1b1      	b.n	8002df4 <__aeabi_dmul+0x4a0>
 8002a90:	4642      	mov	r2, r8
 8002a92:	0752      	lsls	r2, r2, #29
 8002a94:	d00b      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002a96:	220f      	movs	r2, #15
 8002a98:	4641      	mov	r1, r8
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	2a04      	cmp	r2, #4
 8002a9e:	d006      	beq.n	8002aae <__aeabi_dmul+0x15a>
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	1d11      	adds	r1, r2, #4
 8002aa4:	4541      	cmp	r1, r8
 8002aa6:	4192      	sbcs	r2, r2
 8002aa8:	4688      	mov	r8, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	4492      	add	sl, r2
 8002aae:	4652      	mov	r2, sl
 8002ab0:	01d2      	lsls	r2, r2, #7
 8002ab2:	d506      	bpl.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ab4:	4652      	mov	r2, sl
 8002ab6:	4b80      	ldr	r3, [pc, #512]	@ (8002cb8 <__aeabi_dmul+0x364>)
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	@ 0x80
 8002abc:	4692      	mov	sl, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	18c3      	adds	r3, r0, r3
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cbc <__aeabi_dmul+0x368>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	dd00      	ble.n	8002aca <__aeabi_dmul+0x176>
 8002ac8:	e18f      	b.n	8002dea <__aeabi_dmul+0x496>
 8002aca:	4642      	mov	r2, r8
 8002acc:	08d1      	lsrs	r1, r2, #3
 8002ace:	4652      	mov	r2, sl
 8002ad0:	0752      	lsls	r2, r2, #29
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	024c      	lsls	r4, r1, #9
 8002ada:	0b24      	lsrs	r4, r4, #12
 8002adc:	0d5b      	lsrs	r3, r3, #21
 8002ade:	e797      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ae0:	4b73      	ldr	r3, [pc, #460]	@ (8002cb0 <__aeabi_dmul+0x35c>)
 8002ae2:	4326      	orrs	r6, r4
 8002ae4:	469c      	mov	ip, r3
 8002ae6:	44e3      	add	fp, ip
 8002ae8:	2e00      	cmp	r6, #0
 8002aea:	d100      	bne.n	8002aee <__aeabi_dmul+0x19a>
 8002aec:	e16f      	b.n	8002dce <__aeabi_dmul+0x47a>
 8002aee:	2303      	movs	r3, #3
 8002af0:	4649      	mov	r1, r9
 8002af2:	431d      	orrs	r5, r3
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	4059      	eors	r1, r3
 8002af8:	b2cb      	uxtb	r3, r1
 8002afa:	9303      	str	r3, [sp, #12]
 8002afc:	2d0a      	cmp	r5, #10
 8002afe:	dd00      	ble.n	8002b02 <__aeabi_dmul+0x1ae>
 8002b00:	e133      	b.n	8002d6a <__aeabi_dmul+0x416>
 8002b02:	2301      	movs	r3, #1
 8002b04:	40ab      	lsls	r3, r5
 8002b06:	001d      	movs	r5, r3
 8002b08:	2303      	movs	r3, #3
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2288      	movs	r2, #136	@ 0x88
 8002b0e:	422a      	tst	r2, r5
 8002b10:	d197      	bne.n	8002a42 <__aeabi_dmul+0xee>
 8002b12:	4642      	mov	r2, r8
 8002b14:	4643      	mov	r3, r8
 8002b16:	0412      	lsls	r2, r2, #16
 8002b18:	0c12      	lsrs	r2, r2, #16
 8002b1a:	0016      	movs	r6, r2
 8002b1c:	9801      	ldr	r0, [sp, #4]
 8002b1e:	0c1d      	lsrs	r5, r3, #16
 8002b20:	0c03      	lsrs	r3, r0, #16
 8002b22:	0400      	lsls	r0, r0, #16
 8002b24:	0c00      	lsrs	r0, r0, #16
 8002b26:	4346      	muls	r6, r0
 8002b28:	46b4      	mov	ip, r6
 8002b2a:	001e      	movs	r6, r3
 8002b2c:	436e      	muls	r6, r5
 8002b2e:	9600      	str	r6, [sp, #0]
 8002b30:	0016      	movs	r6, r2
 8002b32:	0007      	movs	r7, r0
 8002b34:	435e      	muls	r6, r3
 8002b36:	4661      	mov	r1, ip
 8002b38:	46b0      	mov	r8, r6
 8002b3a:	436f      	muls	r7, r5
 8002b3c:	0c0e      	lsrs	r6, r1, #16
 8002b3e:	44b8      	add	r8, r7
 8002b40:	4446      	add	r6, r8
 8002b42:	42b7      	cmp	r7, r6
 8002b44:	d905      	bls.n	8002b52 <__aeabi_dmul+0x1fe>
 8002b46:	2180      	movs	r1, #128	@ 0x80
 8002b48:	0249      	lsls	r1, r1, #9
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	9f00      	ldr	r7, [sp, #0]
 8002b4e:	4447      	add	r7, r8
 8002b50:	9700      	str	r7, [sp, #0]
 8002b52:	4661      	mov	r1, ip
 8002b54:	0409      	lsls	r1, r1, #16
 8002b56:	0c09      	lsrs	r1, r1, #16
 8002b58:	0c37      	lsrs	r7, r6, #16
 8002b5a:	0436      	lsls	r6, r6, #16
 8002b5c:	468c      	mov	ip, r1
 8002b5e:	0031      	movs	r1, r6
 8002b60:	4461      	add	r1, ip
 8002b62:	9101      	str	r1, [sp, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0c26      	lsrs	r6, r4, #16
 8002b68:	0424      	lsls	r4, r4, #16
 8002b6a:	0c24      	lsrs	r4, r4, #16
 8002b6c:	4361      	muls	r1, r4
 8002b6e:	468c      	mov	ip, r1
 8002b70:	0021      	movs	r1, r4
 8002b72:	4369      	muls	r1, r5
 8002b74:	4689      	mov	r9, r1
 8002b76:	4661      	mov	r1, ip
 8002b78:	0c09      	lsrs	r1, r1, #16
 8002b7a:	4688      	mov	r8, r1
 8002b7c:	4372      	muls	r2, r6
 8002b7e:	444a      	add	r2, r9
 8002b80:	4442      	add	r2, r8
 8002b82:	4375      	muls	r5, r6
 8002b84:	4591      	cmp	r9, r2
 8002b86:	d903      	bls.n	8002b90 <__aeabi_dmul+0x23c>
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0249      	lsls	r1, r1, #9
 8002b8c:	4688      	mov	r8, r1
 8002b8e:	4445      	add	r5, r8
 8002b90:	0c11      	lsrs	r1, r2, #16
 8002b92:	4688      	mov	r8, r1
 8002b94:	4661      	mov	r1, ip
 8002b96:	0409      	lsls	r1, r1, #16
 8002b98:	0c09      	lsrs	r1, r1, #16
 8002b9a:	468c      	mov	ip, r1
 8002b9c:	0412      	lsls	r2, r2, #16
 8002b9e:	4462      	add	r2, ip
 8002ba0:	18b9      	adds	r1, r7, r2
 8002ba2:	9102      	str	r1, [sp, #8]
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	0c09      	lsrs	r1, r1, #16
 8002ba8:	468c      	mov	ip, r1
 8002baa:	4651      	mov	r1, sl
 8002bac:	040f      	lsls	r7, r1, #16
 8002bae:	0c3f      	lsrs	r7, r7, #16
 8002bb0:	0039      	movs	r1, r7
 8002bb2:	4341      	muls	r1, r0
 8002bb4:	4445      	add	r5, r8
 8002bb6:	4688      	mov	r8, r1
 8002bb8:	4661      	mov	r1, ip
 8002bba:	4341      	muls	r1, r0
 8002bbc:	468a      	mov	sl, r1
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	4660      	mov	r0, ip
 8002bc2:	0c09      	lsrs	r1, r1, #16
 8002bc4:	4689      	mov	r9, r1
 8002bc6:	4358      	muls	r0, r3
 8002bc8:	437b      	muls	r3, r7
 8002bca:	4453      	add	r3, sl
 8002bcc:	444b      	add	r3, r9
 8002bce:	459a      	cmp	sl, r3
 8002bd0:	d903      	bls.n	8002bda <__aeabi_dmul+0x286>
 8002bd2:	2180      	movs	r1, #128	@ 0x80
 8002bd4:	0249      	lsls	r1, r1, #9
 8002bd6:	4689      	mov	r9, r1
 8002bd8:	4448      	add	r0, r9
 8002bda:	0c19      	lsrs	r1, r3, #16
 8002bdc:	4689      	mov	r9, r1
 8002bde:	4641      	mov	r1, r8
 8002be0:	0409      	lsls	r1, r1, #16
 8002be2:	0c09      	lsrs	r1, r1, #16
 8002be4:	4688      	mov	r8, r1
 8002be6:	0039      	movs	r1, r7
 8002be8:	4361      	muls	r1, r4
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	4443      	add	r3, r8
 8002bee:	4688      	mov	r8, r1
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	434c      	muls	r4, r1
 8002bf4:	4371      	muls	r1, r6
 8002bf6:	468c      	mov	ip, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4377      	muls	r7, r6
 8002bfc:	0c0e      	lsrs	r6, r1, #16
 8002bfe:	193f      	adds	r7, r7, r4
 8002c00:	19f6      	adds	r6, r6, r7
 8002c02:	4448      	add	r0, r9
 8002c04:	42b4      	cmp	r4, r6
 8002c06:	d903      	bls.n	8002c10 <__aeabi_dmul+0x2bc>
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0249      	lsls	r1, r1, #9
 8002c0c:	4689      	mov	r9, r1
 8002c0e:	44cc      	add	ip, r9
 8002c10:	9902      	ldr	r1, [sp, #8]
 8002c12:	9f00      	ldr	r7, [sp, #0]
 8002c14:	4689      	mov	r9, r1
 8002c16:	0431      	lsls	r1, r6, #16
 8002c18:	444f      	add	r7, r9
 8002c1a:	4689      	mov	r9, r1
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	4297      	cmp	r7, r2
 8002c20:	4192      	sbcs	r2, r2
 8002c22:	040c      	lsls	r4, r1, #16
 8002c24:	0c24      	lsrs	r4, r4, #16
 8002c26:	444c      	add	r4, r9
 8002c28:	18ff      	adds	r7, r7, r3
 8002c2a:	4252      	negs	r2, r2
 8002c2c:	1964      	adds	r4, r4, r5
 8002c2e:	18a1      	adds	r1, r4, r2
 8002c30:	429f      	cmp	r7, r3
 8002c32:	419b      	sbcs	r3, r3
 8002c34:	4688      	mov	r8, r1
 8002c36:	4682      	mov	sl, r0
 8002c38:	425b      	negs	r3, r3
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4590      	cmp	r8, r2
 8002c3e:	4192      	sbcs	r2, r2
 8002c40:	42ac      	cmp	r4, r5
 8002c42:	41a4      	sbcs	r4, r4
 8002c44:	44c2      	add	sl, r8
 8002c46:	44d1      	add	r9, sl
 8002c48:	4252      	negs	r2, r2
 8002c4a:	4264      	negs	r4, r4
 8002c4c:	4314      	orrs	r4, r2
 8002c4e:	4599      	cmp	r9, r3
 8002c50:	419b      	sbcs	r3, r3
 8002c52:	4582      	cmp	sl, r0
 8002c54:	4192      	sbcs	r2, r2
 8002c56:	425b      	negs	r3, r3
 8002c58:	4252      	negs	r2, r2
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	464a      	mov	r2, r9
 8002c5e:	0c36      	lsrs	r6, r6, #16
 8002c60:	19a4      	adds	r4, r4, r6
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	4463      	add	r3, ip
 8002c66:	025b      	lsls	r3, r3, #9
 8002c68:	0dd2      	lsrs	r2, r2, #23
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	9901      	ldr	r1, [sp, #4]
 8002c6e:	4692      	mov	sl, r2
 8002c70:	027a      	lsls	r2, r7, #9
 8002c72:	430a      	orrs	r2, r1
 8002c74:	1e50      	subs	r0, r2, #1
 8002c76:	4182      	sbcs	r2, r0
 8002c78:	0dff      	lsrs	r7, r7, #23
 8002c7a:	4317      	orrs	r7, r2
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	0252      	lsls	r2, r2, #9
 8002c80:	4317      	orrs	r7, r2
 8002c82:	46b8      	mov	r8, r7
 8002c84:	01db      	lsls	r3, r3, #7
 8002c86:	d500      	bpl.n	8002c8a <__aeabi_dmul+0x336>
 8002c88:	e6ed      	b.n	8002a66 <__aeabi_dmul+0x112>
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc0 <__aeabi_dmul+0x36c>)
 8002c8c:	9a03      	ldr	r2, [sp, #12]
 8002c8e:	445b      	add	r3, fp
 8002c90:	4691      	mov	r9, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	dc00      	bgt.n	8002c98 <__aeabi_dmul+0x344>
 8002c96:	e0ac      	b.n	8002df2 <__aeabi_dmul+0x49e>
 8002c98:	003a      	movs	r2, r7
 8002c9a:	0752      	lsls	r2, r2, #29
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dmul+0x34c>
 8002c9e:	e710      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	4658      	mov	r0, fp
 8002ca4:	403a      	ands	r2, r7
 8002ca6:	2a04      	cmp	r2, #4
 8002ca8:	d000      	beq.n	8002cac <__aeabi_dmul+0x358>
 8002caa:	e6f9      	b.n	8002aa0 <__aeabi_dmul+0x14c>
 8002cac:	e709      	b.n	8002ac2 <__aeabi_dmul+0x16e>
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	000007ff 	.word	0x000007ff
 8002cb4:	fffffc01 	.word	0xfffffc01
 8002cb8:	feffffff 	.word	0xfeffffff
 8002cbc:	000007fe 	.word	0x000007fe
 8002cc0:	000003ff 	.word	0x000003ff
 8002cc4:	0022      	movs	r2, r4
 8002cc6:	4332      	orrs	r2, r6
 8002cc8:	d06f      	beq.n	8002daa <__aeabi_dmul+0x456>
 8002cca:	2c00      	cmp	r4, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dmul+0x37c>
 8002cce:	e0c2      	b.n	8002e56 <__aeabi_dmul+0x502>
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	f000 fea9 	bl	8003a28 <__clzsi2>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	0003      	movs	r3, r0
 8002cda:	3a0b      	subs	r2, #11
 8002cdc:	201d      	movs	r0, #29
 8002cde:	1a82      	subs	r2, r0, r2
 8002ce0:	0030      	movs	r0, r6
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	40d0      	lsrs	r0, r2
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	408c      	lsls	r4, r1
 8002cea:	0002      	movs	r2, r0
 8002cec:	4322      	orrs	r2, r4
 8002cee:	0034      	movs	r4, r6
 8002cf0:	408c      	lsls	r4, r1
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	1acb      	subs	r3, r1, r3
 8002cf6:	4986      	ldr	r1, [pc, #536]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002cf8:	468b      	mov	fp, r1
 8002cfa:	449b      	add	fp, r3
 8002cfc:	2d0a      	cmp	r5, #10
 8002cfe:	dd00      	ble.n	8002d02 <__aeabi_dmul+0x3ae>
 8002d00:	e6a4      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002d02:	4649      	mov	r1, r9
 8002d04:	9b00      	ldr	r3, [sp, #0]
 8002d06:	9401      	str	r4, [sp, #4]
 8002d08:	4059      	eors	r1, r3
 8002d0a:	b2cb      	uxtb	r3, r1
 8002d0c:	0014      	movs	r4, r2
 8002d0e:	2000      	movs	r0, #0
 8002d10:	9303      	str	r3, [sp, #12]
 8002d12:	2d02      	cmp	r5, #2
 8002d14:	dd00      	ble.n	8002d18 <__aeabi_dmul+0x3c4>
 8002d16:	e667      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002d18:	e6fb      	b.n	8002b12 <__aeabi_dmul+0x1be>
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	4303      	orrs	r3, r0
 8002d1e:	4698      	mov	r8, r3
 8002d20:	d03c      	beq.n	8002d9c <__aeabi_dmul+0x448>
 8002d22:	4653      	mov	r3, sl
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <__aeabi_dmul+0x3d6>
 8002d28:	e0a3      	b.n	8002e72 <__aeabi_dmul+0x51e>
 8002d2a:	4650      	mov	r0, sl
 8002d2c:	f000 fe7c 	bl	8003a28 <__clzsi2>
 8002d30:	230b      	movs	r3, #11
 8002d32:	425b      	negs	r3, r3
 8002d34:	469c      	mov	ip, r3
 8002d36:	0002      	movs	r2, r0
 8002d38:	4484      	add	ip, r0
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	3908      	subs	r1, #8
 8002d40:	4088      	lsls	r0, r1
 8002d42:	231d      	movs	r3, #29
 8002d44:	4680      	mov	r8, r0
 8002d46:	4660      	mov	r0, ip
 8002d48:	1a1b      	subs	r3, r3, r0
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	40d8      	lsrs	r0, r3
 8002d4e:	0003      	movs	r3, r0
 8002d50:	4640      	mov	r0, r8
 8002d52:	4303      	orrs	r3, r0
 8002d54:	469a      	mov	sl, r3
 8002d56:	0023      	movs	r3, r4
 8002d58:	408b      	lsls	r3, r1
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002f10 <__aeabi_dmul+0x5bc>)
 8002d5e:	2500      	movs	r5, #0
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	2300      	movs	r3, #0
 8002d66:	9302      	str	r3, [sp, #8]
 8002d68:	e61a      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d6a:	2d0f      	cmp	r5, #15
 8002d6c:	d000      	beq.n	8002d70 <__aeabi_dmul+0x41c>
 8002d6e:	e0c9      	b.n	8002f04 <__aeabi_dmul+0x5b0>
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	4652      	mov	r2, sl
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	421a      	tst	r2, r3
 8002d78:	d002      	beq.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7a:	421c      	tst	r4, r3
 8002d7c:	d100      	bne.n	8002d80 <__aeabi_dmul+0x42c>
 8002d7e:	e092      	b.n	8002ea6 <__aeabi_dmul+0x552>
 8002d80:	2480      	movs	r4, #128	@ 0x80
 8002d82:	4653      	mov	r3, sl
 8002d84:	0324      	lsls	r4, r4, #12
 8002d86:	431c      	orrs	r4, r3
 8002d88:	0324      	lsls	r4, r4, #12
 8002d8a:	4642      	mov	r2, r8
 8002d8c:	0b24      	lsrs	r4, r4, #12
 8002d8e:	e63e      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002d90:	469b      	mov	fp, r3
 8002d92:	2303      	movs	r3, #3
 8002d94:	4680      	mov	r8, r0
 8002d96:	250c      	movs	r5, #12
 8002d98:	9302      	str	r3, [sp, #8]
 8002d9a:	e601      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	469a      	mov	sl, r3
 8002da0:	469b      	mov	fp, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	2504      	movs	r5, #4
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	e5fa      	b.n	80029a0 <__aeabi_dmul+0x4c>
 8002daa:	2101      	movs	r1, #1
 8002dac:	430d      	orrs	r5, r1
 8002dae:	2d0a      	cmp	r5, #10
 8002db0:	dd00      	ble.n	8002db4 <__aeabi_dmul+0x460>
 8002db2:	e64b      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002db4:	4649      	mov	r1, r9
 8002db6:	9800      	ldr	r0, [sp, #0]
 8002db8:	4041      	eors	r1, r0
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	9103      	str	r1, [sp, #12]
 8002dbe:	2d02      	cmp	r5, #2
 8002dc0:	dc00      	bgt.n	8002dc4 <__aeabi_dmul+0x470>
 8002dc2:	e096      	b.n	8002ef2 <__aeabi_dmul+0x59e>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2001      	movs	r0, #1
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	e60c      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002dce:	4649      	mov	r1, r9
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9a00      	ldr	r2, [sp, #0]
 8002dd4:	432b      	orrs	r3, r5
 8002dd6:	4051      	eors	r1, r2
 8002dd8:	b2ca      	uxtb	r2, r1
 8002dda:	9203      	str	r2, [sp, #12]
 8002ddc:	2b0a      	cmp	r3, #10
 8002dde:	dd00      	ble.n	8002de2 <__aeabi_dmul+0x48e>
 8002de0:	e634      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002de2:	2d00      	cmp	r5, #0
 8002de4:	d157      	bne.n	8002e96 <__aeabi_dmul+0x542>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	4699      	mov	r9, r3
 8002dea:	2400      	movs	r4, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	4b49      	ldr	r3, [pc, #292]	@ (8002f14 <__aeabi_dmul+0x5c0>)
 8002df0:	e60e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002df2:	4658      	mov	r0, fp
 8002df4:	2101      	movs	r1, #1
 8002df6:	1ac9      	subs	r1, r1, r3
 8002df8:	2938      	cmp	r1, #56	@ 0x38
 8002dfa:	dd00      	ble.n	8002dfe <__aeabi_dmul+0x4aa>
 8002dfc:	e62f      	b.n	8002a5e <__aeabi_dmul+0x10a>
 8002dfe:	291f      	cmp	r1, #31
 8002e00:	dd56      	ble.n	8002eb0 <__aeabi_dmul+0x55c>
 8002e02:	221f      	movs	r2, #31
 8002e04:	4654      	mov	r4, sl
 8002e06:	4252      	negs	r2, r2
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	40dc      	lsrs	r4, r3
 8002e0c:	2920      	cmp	r1, #32
 8002e0e:	d007      	beq.n	8002e20 <__aeabi_dmul+0x4cc>
 8002e10:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <__aeabi_dmul+0x5c4>)
 8002e12:	4642      	mov	r2, r8
 8002e14:	469c      	mov	ip, r3
 8002e16:	4653      	mov	r3, sl
 8002e18:	4460      	add	r0, ip
 8002e1a:	4083      	lsls	r3, r0
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	4690      	mov	r8, r2
 8002e20:	4642      	mov	r2, r8
 8002e22:	2107      	movs	r1, #7
 8002e24:	1e53      	subs	r3, r2, #1
 8002e26:	419a      	sbcs	r2, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	4322      	orrs	r2, r4
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2400      	movs	r4, #0
 8002e30:	4211      	tst	r1, r2
 8002e32:	d009      	beq.n	8002e48 <__aeabi_dmul+0x4f4>
 8002e34:	230f      	movs	r3, #15
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d05d      	beq.n	8002ef8 <__aeabi_dmul+0x5a4>
 8002e3c:	1d11      	adds	r1, r2, #4
 8002e3e:	4291      	cmp	r1, r2
 8002e40:	419b      	sbcs	r3, r3
 8002e42:	000a      	movs	r2, r1
 8002e44:	425b      	negs	r3, r3
 8002e46:	075b      	lsls	r3, r3, #29
 8002e48:	08d2      	lsrs	r2, r2, #3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e5df      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	4699      	mov	r9, r3
 8002e54:	e5fa      	b.n	8002a4c <__aeabi_dmul+0xf8>
 8002e56:	9801      	ldr	r0, [sp, #4]
 8002e58:	f000 fde6 	bl	8003a28 <__clzsi2>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	0003      	movs	r3, r0
 8002e60:	3215      	adds	r2, #21
 8002e62:	3320      	adds	r3, #32
 8002e64:	2a1c      	cmp	r2, #28
 8002e66:	dc00      	bgt.n	8002e6a <__aeabi_dmul+0x516>
 8002e68:	e738      	b.n	8002cdc <__aeabi_dmul+0x388>
 8002e6a:	9a01      	ldr	r2, [sp, #4]
 8002e6c:	3808      	subs	r0, #8
 8002e6e:	4082      	lsls	r2, r0
 8002e70:	e73f      	b.n	8002cf2 <__aeabi_dmul+0x39e>
 8002e72:	f000 fdd9 	bl	8003a28 <__clzsi2>
 8002e76:	2315      	movs	r3, #21
 8002e78:	469c      	mov	ip, r3
 8002e7a:	4484      	add	ip, r0
 8002e7c:	0002      	movs	r2, r0
 8002e7e:	4663      	mov	r3, ip
 8002e80:	3220      	adds	r2, #32
 8002e82:	2b1c      	cmp	r3, #28
 8002e84:	dc00      	bgt.n	8002e88 <__aeabi_dmul+0x534>
 8002e86:	e758      	b.n	8002d3a <__aeabi_dmul+0x3e6>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4698      	mov	r8, r3
 8002e8c:	0023      	movs	r3, r4
 8002e8e:	3808      	subs	r0, #8
 8002e90:	4083      	lsls	r3, r0
 8002e92:	469a      	mov	sl, r3
 8002e94:	e762      	b.n	8002d5c <__aeabi_dmul+0x408>
 8002e96:	001d      	movs	r5, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	e5a2      	b.n	80029e8 <__aeabi_dmul+0x94>
 8002ea2:	9002      	str	r0, [sp, #8]
 8002ea4:	e632      	b.n	8002b0c <__aeabi_dmul+0x1b8>
 8002ea6:	431c      	orrs	r4, r3
 8002ea8:	9b00      	ldr	r3, [sp, #0]
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	4699      	mov	r9, r3
 8002eae:	e5ae      	b.n	8002a0e <__aeabi_dmul+0xba>
 8002eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f1c <__aeabi_dmul+0x5c8>)
 8002eb2:	4652      	mov	r2, sl
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	40c8      	lsrs	r0, r1
 8002ebc:	4302      	orrs	r2, r0
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	4098      	lsls	r0, r3
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	4183      	sbcs	r3, r0
 8002ec8:	4654      	mov	r4, sl
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	40cc      	lsrs	r4, r1
 8002ece:	0753      	lsls	r3, r2, #29
 8002ed0:	d009      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002ed2:	230f      	movs	r3, #15
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d005      	beq.n	8002ee6 <__aeabi_dmul+0x592>
 8002eda:	1d13      	adds	r3, r2, #4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	4252      	negs	r2, r2
 8002ee2:	18a4      	adds	r4, r4, r2
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	0223      	lsls	r3, r4, #8
 8002ee8:	d508      	bpl.n	8002efc <__aeabi_dmul+0x5a8>
 8002eea:	2301      	movs	r3, #1
 8002eec:	2400      	movs	r4, #0
 8002eee:	2200      	movs	r2, #0
 8002ef0:	e58e      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef2:	4689      	mov	r9, r1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	e58b      	b.n	8002a10 <__aeabi_dmul+0xbc>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	e7a5      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002efc:	0763      	lsls	r3, r4, #29
 8002efe:	0264      	lsls	r4, r4, #9
 8002f00:	0b24      	lsrs	r4, r4, #12
 8002f02:	e7a1      	b.n	8002e48 <__aeabi_dmul+0x4f4>
 8002f04:	9b00      	ldr	r3, [sp, #0]
 8002f06:	46a2      	mov	sl, r4
 8002f08:	4699      	mov	r9, r3
 8002f0a:	9b01      	ldr	r3, [sp, #4]
 8002f0c:	4698      	mov	r8, r3
 8002f0e:	e737      	b.n	8002d80 <__aeabi_dmul+0x42c>
 8002f10:	fffffc0d 	.word	0xfffffc0d
 8002f14:	000007ff 	.word	0x000007ff
 8002f18:	0000043e 	.word	0x0000043e
 8002f1c:	0000041e 	.word	0x0000041e

08002f20 <__aeabi_dsub>:
 8002f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f22:	4657      	mov	r7, sl
 8002f24:	464e      	mov	r6, r9
 8002f26:	4645      	mov	r5, r8
 8002f28:	46de      	mov	lr, fp
 8002f2a:	b5e0      	push	{r5, r6, r7, lr}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	9000      	str	r0, [sp, #0]
 8002f30:	9101      	str	r1, [sp, #4]
 8002f32:	030c      	lsls	r4, r1, #12
 8002f34:	004d      	lsls	r5, r1, #1
 8002f36:	0fce      	lsrs	r6, r1, #31
 8002f38:	0a61      	lsrs	r1, r4, #9
 8002f3a:	9c00      	ldr	r4, [sp, #0]
 8002f3c:	005f      	lsls	r7, r3, #1
 8002f3e:	0f64      	lsrs	r4, r4, #29
 8002f40:	430c      	orrs	r4, r1
 8002f42:	9900      	ldr	r1, [sp, #0]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	00c8      	lsls	r0, r1, #3
 8002f4a:	0319      	lsls	r1, r3, #12
 8002f4c:	0d7b      	lsrs	r3, r7, #21
 8002f4e:	4699      	mov	r9, r3
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	4fcc      	ldr	r7, [pc, #816]	@ (8003284 <__aeabi_dsub+0x364>)
 8002f54:	0fdb      	lsrs	r3, r3, #31
 8002f56:	469c      	mov	ip, r3
 8002f58:	0a4b      	lsrs	r3, r1, #9
 8002f5a:	9900      	ldr	r1, [sp, #0]
 8002f5c:	4680      	mov	r8, r0
 8002f5e:	0f49      	lsrs	r1, r1, #29
 8002f60:	4319      	orrs	r1, r3
 8002f62:	9b00      	ldr	r3, [sp, #0]
 8002f64:	468b      	mov	fp, r1
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	4692      	mov	sl, r2
 8002f6a:	0d6d      	lsrs	r5, r5, #21
 8002f6c:	45b9      	cmp	r9, r7
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x52>
 8002f70:	e0bf      	b.n	80030f2 <__aeabi_dsub+0x1d2>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4661      	mov	r1, ip
 8002f76:	4059      	eors	r1, r3
 8002f78:	464b      	mov	r3, r9
 8002f7a:	468c      	mov	ip, r1
 8002f7c:	1aeb      	subs	r3, r5, r3
 8002f7e:	428e      	cmp	r6, r1
 8002f80:	d075      	beq.n	800306e <__aeabi_dsub+0x14e>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc00      	bgt.n	8002f88 <__aeabi_dsub+0x68>
 8002f86:	e2a3      	b.n	80034d0 <__aeabi_dsub+0x5b0>
 8002f88:	4649      	mov	r1, r9
 8002f8a:	2900      	cmp	r1, #0
 8002f8c:	d100      	bne.n	8002f90 <__aeabi_dsub+0x70>
 8002f8e:	e0ce      	b.n	800312e <__aeabi_dsub+0x20e>
 8002f90:	42bd      	cmp	r5, r7
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x76>
 8002f94:	e200      	b.n	8003398 <__aeabi_dsub+0x478>
 8002f96:	2701      	movs	r7, #1
 8002f98:	2b38      	cmp	r3, #56	@ 0x38
 8002f9a:	dc19      	bgt.n	8002fd0 <__aeabi_dsub+0xb0>
 8002f9c:	2780      	movs	r7, #128	@ 0x80
 8002f9e:	4659      	mov	r1, fp
 8002fa0:	043f      	lsls	r7, r7, #16
 8002fa2:	4339      	orrs	r1, r7
 8002fa4:	468b      	mov	fp, r1
 8002fa6:	2b1f      	cmp	r3, #31
 8002fa8:	dd00      	ble.n	8002fac <__aeabi_dsub+0x8c>
 8002faa:	e1fa      	b.n	80033a2 <__aeabi_dsub+0x482>
 8002fac:	2720      	movs	r7, #32
 8002fae:	1af9      	subs	r1, r7, r3
 8002fb0:	468c      	mov	ip, r1
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	4667      	mov	r7, ip
 8002fb6:	40b9      	lsls	r1, r7
 8002fb8:	000f      	movs	r7, r1
 8002fba:	0011      	movs	r1, r2
 8002fbc:	40d9      	lsrs	r1, r3
 8002fbe:	430f      	orrs	r7, r1
 8002fc0:	4661      	mov	r1, ip
 8002fc2:	408a      	lsls	r2, r1
 8002fc4:	1e51      	subs	r1, r2, #1
 8002fc6:	418a      	sbcs	r2, r1
 8002fc8:	4659      	mov	r1, fp
 8002fca:	40d9      	lsrs	r1, r3
 8002fcc:	4317      	orrs	r7, r2
 8002fce:	1a64      	subs	r4, r4, r1
 8002fd0:	1bc7      	subs	r7, r0, r7
 8002fd2:	42b8      	cmp	r0, r7
 8002fd4:	4180      	sbcs	r0, r0
 8002fd6:	4240      	negs	r0, r0
 8002fd8:	1a24      	subs	r4, r4, r0
 8002fda:	0223      	lsls	r3, r4, #8
 8002fdc:	d400      	bmi.n	8002fe0 <__aeabi_dsub+0xc0>
 8002fde:	e140      	b.n	8003262 <__aeabi_dsub+0x342>
 8002fe0:	0264      	lsls	r4, r4, #9
 8002fe2:	0a64      	lsrs	r4, r4, #9
 8002fe4:	2c00      	cmp	r4, #0
 8002fe6:	d100      	bne.n	8002fea <__aeabi_dsub+0xca>
 8002fe8:	e154      	b.n	8003294 <__aeabi_dsub+0x374>
 8002fea:	0020      	movs	r0, r4
 8002fec:	f000 fd1c 	bl	8003a28 <__clzsi2>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	3b08      	subs	r3, #8
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	0038      	movs	r0, r7
 8002ff8:	1aca      	subs	r2, r1, r3
 8002ffa:	40d0      	lsrs	r0, r2
 8002ffc:	409c      	lsls	r4, r3
 8002ffe:	0002      	movs	r2, r0
 8003000:	409f      	lsls	r7, r3
 8003002:	4322      	orrs	r2, r4
 8003004:	429d      	cmp	r5, r3
 8003006:	dd00      	ble.n	800300a <__aeabi_dsub+0xea>
 8003008:	e1a6      	b.n	8003358 <__aeabi_dsub+0x438>
 800300a:	1b58      	subs	r0, r3, r5
 800300c:	3001      	adds	r0, #1
 800300e:	1a09      	subs	r1, r1, r0
 8003010:	003c      	movs	r4, r7
 8003012:	408f      	lsls	r7, r1
 8003014:	40c4      	lsrs	r4, r0
 8003016:	1e7b      	subs	r3, r7, #1
 8003018:	419f      	sbcs	r7, r3
 800301a:	0013      	movs	r3, r2
 800301c:	408b      	lsls	r3, r1
 800301e:	4327      	orrs	r7, r4
 8003020:	431f      	orrs	r7, r3
 8003022:	40c2      	lsrs	r2, r0
 8003024:	003b      	movs	r3, r7
 8003026:	0014      	movs	r4, r2
 8003028:	2500      	movs	r5, #0
 800302a:	4313      	orrs	r3, r2
 800302c:	d100      	bne.n	8003030 <__aeabi_dsub+0x110>
 800302e:	e1f7      	b.n	8003420 <__aeabi_dsub+0x500>
 8003030:	077b      	lsls	r3, r7, #29
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x116>
 8003034:	e377      	b.n	8003726 <__aeabi_dsub+0x806>
 8003036:	230f      	movs	r3, #15
 8003038:	0038      	movs	r0, r7
 800303a:	403b      	ands	r3, r7
 800303c:	2b04      	cmp	r3, #4
 800303e:	d004      	beq.n	800304a <__aeabi_dsub+0x12a>
 8003040:	1d38      	adds	r0, r7, #4
 8003042:	42b8      	cmp	r0, r7
 8003044:	41bf      	sbcs	r7, r7
 8003046:	427f      	negs	r7, r7
 8003048:	19e4      	adds	r4, r4, r7
 800304a:	0223      	lsls	r3, r4, #8
 800304c:	d400      	bmi.n	8003050 <__aeabi_dsub+0x130>
 800304e:	e368      	b.n	8003722 <__aeabi_dsub+0x802>
 8003050:	4b8c      	ldr	r3, [pc, #560]	@ (8003284 <__aeabi_dsub+0x364>)
 8003052:	3501      	adds	r5, #1
 8003054:	429d      	cmp	r5, r3
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x13a>
 8003058:	e0f4      	b.n	8003244 <__aeabi_dsub+0x324>
 800305a:	4b8b      	ldr	r3, [pc, #556]	@ (8003288 <__aeabi_dsub+0x368>)
 800305c:	056d      	lsls	r5, r5, #21
 800305e:	401c      	ands	r4, r3
 8003060:	0d6d      	lsrs	r5, r5, #21
 8003062:	0767      	lsls	r7, r4, #29
 8003064:	08c0      	lsrs	r0, r0, #3
 8003066:	0264      	lsls	r4, r4, #9
 8003068:	4307      	orrs	r7, r0
 800306a:	0b24      	lsrs	r4, r4, #12
 800306c:	e0ec      	b.n	8003248 <__aeabi_dsub+0x328>
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc00      	bgt.n	8003074 <__aeabi_dsub+0x154>
 8003072:	e329      	b.n	80036c8 <__aeabi_dsub+0x7a8>
 8003074:	4649      	mov	r1, r9
 8003076:	2900      	cmp	r1, #0
 8003078:	d000      	beq.n	800307c <__aeabi_dsub+0x15c>
 800307a:	e0d6      	b.n	800322a <__aeabi_dsub+0x30a>
 800307c:	4659      	mov	r1, fp
 800307e:	4311      	orrs	r1, r2
 8003080:	d100      	bne.n	8003084 <__aeabi_dsub+0x164>
 8003082:	e12e      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003084:	1e59      	subs	r1, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d100      	bne.n	800308c <__aeabi_dsub+0x16c>
 800308a:	e1e6      	b.n	800345a <__aeabi_dsub+0x53a>
 800308c:	42bb      	cmp	r3, r7
 800308e:	d100      	bne.n	8003092 <__aeabi_dsub+0x172>
 8003090:	e182      	b.n	8003398 <__aeabi_dsub+0x478>
 8003092:	2701      	movs	r7, #1
 8003094:	000b      	movs	r3, r1
 8003096:	2938      	cmp	r1, #56	@ 0x38
 8003098:	dc14      	bgt.n	80030c4 <__aeabi_dsub+0x1a4>
 800309a:	2b1f      	cmp	r3, #31
 800309c:	dd00      	ble.n	80030a0 <__aeabi_dsub+0x180>
 800309e:	e23c      	b.n	800351a <__aeabi_dsub+0x5fa>
 80030a0:	2720      	movs	r7, #32
 80030a2:	1af9      	subs	r1, r7, r3
 80030a4:	468c      	mov	ip, r1
 80030a6:	4659      	mov	r1, fp
 80030a8:	4667      	mov	r7, ip
 80030aa:	40b9      	lsls	r1, r7
 80030ac:	000f      	movs	r7, r1
 80030ae:	0011      	movs	r1, r2
 80030b0:	40d9      	lsrs	r1, r3
 80030b2:	430f      	orrs	r7, r1
 80030b4:	4661      	mov	r1, ip
 80030b6:	408a      	lsls	r2, r1
 80030b8:	1e51      	subs	r1, r2, #1
 80030ba:	418a      	sbcs	r2, r1
 80030bc:	4659      	mov	r1, fp
 80030be:	40d9      	lsrs	r1, r3
 80030c0:	4317      	orrs	r7, r2
 80030c2:	1864      	adds	r4, r4, r1
 80030c4:	183f      	adds	r7, r7, r0
 80030c6:	4287      	cmp	r7, r0
 80030c8:	4180      	sbcs	r0, r0
 80030ca:	4240      	negs	r0, r0
 80030cc:	1824      	adds	r4, r4, r0
 80030ce:	0223      	lsls	r3, r4, #8
 80030d0:	d400      	bmi.n	80030d4 <__aeabi_dsub+0x1b4>
 80030d2:	e0c6      	b.n	8003262 <__aeabi_dsub+0x342>
 80030d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003284 <__aeabi_dsub+0x364>)
 80030d6:	3501      	adds	r5, #1
 80030d8:	429d      	cmp	r5, r3
 80030da:	d100      	bne.n	80030de <__aeabi_dsub+0x1be>
 80030dc:	e0b2      	b.n	8003244 <__aeabi_dsub+0x324>
 80030de:	2101      	movs	r1, #1
 80030e0:	4b69      	ldr	r3, [pc, #420]	@ (8003288 <__aeabi_dsub+0x368>)
 80030e2:	087a      	lsrs	r2, r7, #1
 80030e4:	401c      	ands	r4, r3
 80030e6:	4039      	ands	r1, r7
 80030e8:	430a      	orrs	r2, r1
 80030ea:	07e7      	lsls	r7, r4, #31
 80030ec:	4317      	orrs	r7, r2
 80030ee:	0864      	lsrs	r4, r4, #1
 80030f0:	e79e      	b.n	8003030 <__aeabi_dsub+0x110>
 80030f2:	4b66      	ldr	r3, [pc, #408]	@ (800328c <__aeabi_dsub+0x36c>)
 80030f4:	4311      	orrs	r1, r2
 80030f6:	468a      	mov	sl, r1
 80030f8:	18eb      	adds	r3, r5, r3
 80030fa:	2900      	cmp	r1, #0
 80030fc:	d028      	beq.n	8003150 <__aeabi_dsub+0x230>
 80030fe:	4566      	cmp	r6, ip
 8003100:	d02c      	beq.n	800315c <__aeabi_dsub+0x23c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d05b      	beq.n	80031be <__aeabi_dsub+0x29e>
 8003106:	2d00      	cmp	r5, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x1ec>
 800310a:	e12c      	b.n	8003366 <__aeabi_dsub+0x446>
 800310c:	465b      	mov	r3, fp
 800310e:	4666      	mov	r6, ip
 8003110:	075f      	lsls	r7, r3, #29
 8003112:	08d2      	lsrs	r2, r2, #3
 8003114:	4317      	orrs	r7, r2
 8003116:	08dd      	lsrs	r5, r3, #3
 8003118:	003b      	movs	r3, r7
 800311a:	432b      	orrs	r3, r5
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x200>
 800311e:	e0e2      	b.n	80032e6 <__aeabi_dsub+0x3c6>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	0324      	lsls	r4, r4, #12
 8003124:	432c      	orrs	r4, r5
 8003126:	0324      	lsls	r4, r4, #12
 8003128:	4d56      	ldr	r5, [pc, #344]	@ (8003284 <__aeabi_dsub+0x364>)
 800312a:	0b24      	lsrs	r4, r4, #12
 800312c:	e08c      	b.n	8003248 <__aeabi_dsub+0x328>
 800312e:	4659      	mov	r1, fp
 8003130:	4311      	orrs	r1, r2
 8003132:	d100      	bne.n	8003136 <__aeabi_dsub+0x216>
 8003134:	e0d5      	b.n	80032e2 <__aeabi_dsub+0x3c2>
 8003136:	1e59      	subs	r1, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x21e>
 800313c:	e1b9      	b.n	80034b2 <__aeabi_dsub+0x592>
 800313e:	42bb      	cmp	r3, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x224>
 8003142:	e1b1      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003144:	2701      	movs	r7, #1
 8003146:	000b      	movs	r3, r1
 8003148:	2938      	cmp	r1, #56	@ 0x38
 800314a:	dd00      	ble.n	800314e <__aeabi_dsub+0x22e>
 800314c:	e740      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 800314e:	e72a      	b.n	8002fa6 <__aeabi_dsub+0x86>
 8003150:	4661      	mov	r1, ip
 8003152:	2701      	movs	r7, #1
 8003154:	4079      	eors	r1, r7
 8003156:	468c      	mov	ip, r1
 8003158:	4566      	cmp	r6, ip
 800315a:	d1d2      	bne.n	8003102 <__aeabi_dsub+0x1e2>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d100      	bne.n	8003162 <__aeabi_dsub+0x242>
 8003160:	e0c5      	b.n	80032ee <__aeabi_dsub+0x3ce>
 8003162:	2d00      	cmp	r5, #0
 8003164:	d000      	beq.n	8003168 <__aeabi_dsub+0x248>
 8003166:	e155      	b.n	8003414 <__aeabi_dsub+0x4f4>
 8003168:	464b      	mov	r3, r9
 800316a:	0025      	movs	r5, r4
 800316c:	4305      	orrs	r5, r0
 800316e:	d100      	bne.n	8003172 <__aeabi_dsub+0x252>
 8003170:	e212      	b.n	8003598 <__aeabi_dsub+0x678>
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	468c      	mov	ip, r1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d100      	bne.n	800317c <__aeabi_dsub+0x25c>
 800317a:	e249      	b.n	8003610 <__aeabi_dsub+0x6f0>
 800317c:	4d41      	ldr	r5, [pc, #260]	@ (8003284 <__aeabi_dsub+0x364>)
 800317e:	42ab      	cmp	r3, r5
 8003180:	d100      	bne.n	8003184 <__aeabi_dsub+0x264>
 8003182:	e28f      	b.n	80036a4 <__aeabi_dsub+0x784>
 8003184:	2701      	movs	r7, #1
 8003186:	2938      	cmp	r1, #56	@ 0x38
 8003188:	dc11      	bgt.n	80031ae <__aeabi_dsub+0x28e>
 800318a:	4663      	mov	r3, ip
 800318c:	2b1f      	cmp	r3, #31
 800318e:	dd00      	ble.n	8003192 <__aeabi_dsub+0x272>
 8003190:	e25b      	b.n	800364a <__aeabi_dsub+0x72a>
 8003192:	4661      	mov	r1, ip
 8003194:	2320      	movs	r3, #32
 8003196:	0027      	movs	r7, r4
 8003198:	1a5b      	subs	r3, r3, r1
 800319a:	0005      	movs	r5, r0
 800319c:	4098      	lsls	r0, r3
 800319e:	409f      	lsls	r7, r3
 80031a0:	40cd      	lsrs	r5, r1
 80031a2:	1e43      	subs	r3, r0, #1
 80031a4:	4198      	sbcs	r0, r3
 80031a6:	40cc      	lsrs	r4, r1
 80031a8:	432f      	orrs	r7, r5
 80031aa:	4307      	orrs	r7, r0
 80031ac:	44a3      	add	fp, r4
 80031ae:	18bf      	adds	r7, r7, r2
 80031b0:	4297      	cmp	r7, r2
 80031b2:	4192      	sbcs	r2, r2
 80031b4:	4252      	negs	r2, r2
 80031b6:	445a      	add	r2, fp
 80031b8:	0014      	movs	r4, r2
 80031ba:	464d      	mov	r5, r9
 80031bc:	e787      	b.n	80030ce <__aeabi_dsub+0x1ae>
 80031be:	4f34      	ldr	r7, [pc, #208]	@ (8003290 <__aeabi_dsub+0x370>)
 80031c0:	1c6b      	adds	r3, r5, #1
 80031c2:	423b      	tst	r3, r7
 80031c4:	d000      	beq.n	80031c8 <__aeabi_dsub+0x2a8>
 80031c6:	e0b6      	b.n	8003336 <__aeabi_dsub+0x416>
 80031c8:	4659      	mov	r1, fp
 80031ca:	0023      	movs	r3, r4
 80031cc:	4311      	orrs	r1, r2
 80031ce:	000f      	movs	r7, r1
 80031d0:	4303      	orrs	r3, r0
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	d000      	beq.n	80031d8 <__aeabi_dsub+0x2b8>
 80031d6:	e126      	b.n	8003426 <__aeabi_dsub+0x506>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d100      	bne.n	80031de <__aeabi_dsub+0x2be>
 80031dc:	e1c0      	b.n	8003560 <__aeabi_dsub+0x640>
 80031de:	2900      	cmp	r1, #0
 80031e0:	d100      	bne.n	80031e4 <__aeabi_dsub+0x2c4>
 80031e2:	e0a1      	b.n	8003328 <__aeabi_dsub+0x408>
 80031e4:	1a83      	subs	r3, r0, r2
 80031e6:	4698      	mov	r8, r3
 80031e8:	465b      	mov	r3, fp
 80031ea:	4540      	cmp	r0, r8
 80031ec:	41ad      	sbcs	r5, r5
 80031ee:	1ae3      	subs	r3, r4, r3
 80031f0:	426d      	negs	r5, r5
 80031f2:	1b5b      	subs	r3, r3, r5
 80031f4:	2580      	movs	r5, #128	@ 0x80
 80031f6:	042d      	lsls	r5, r5, #16
 80031f8:	422b      	tst	r3, r5
 80031fa:	d100      	bne.n	80031fe <__aeabi_dsub+0x2de>
 80031fc:	e14b      	b.n	8003496 <__aeabi_dsub+0x576>
 80031fe:	465b      	mov	r3, fp
 8003200:	1a10      	subs	r0, r2, r0
 8003202:	4282      	cmp	r2, r0
 8003204:	4192      	sbcs	r2, r2
 8003206:	1b1c      	subs	r4, r3, r4
 8003208:	0007      	movs	r7, r0
 800320a:	2601      	movs	r6, #1
 800320c:	4663      	mov	r3, ip
 800320e:	4252      	negs	r2, r2
 8003210:	1aa4      	subs	r4, r4, r2
 8003212:	4327      	orrs	r7, r4
 8003214:	401e      	ands	r6, r3
 8003216:	2f00      	cmp	r7, #0
 8003218:	d100      	bne.n	800321c <__aeabi_dsub+0x2fc>
 800321a:	e142      	b.n	80034a2 <__aeabi_dsub+0x582>
 800321c:	422c      	tst	r4, r5
 800321e:	d100      	bne.n	8003222 <__aeabi_dsub+0x302>
 8003220:	e26d      	b.n	80036fe <__aeabi_dsub+0x7de>
 8003222:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <__aeabi_dsub+0x368>)
 8003224:	2501      	movs	r5, #1
 8003226:	401c      	ands	r4, r3
 8003228:	e71b      	b.n	8003062 <__aeabi_dsub+0x142>
 800322a:	42bd      	cmp	r5, r7
 800322c:	d100      	bne.n	8003230 <__aeabi_dsub+0x310>
 800322e:	e13b      	b.n	80034a8 <__aeabi_dsub+0x588>
 8003230:	2701      	movs	r7, #1
 8003232:	2b38      	cmp	r3, #56	@ 0x38
 8003234:	dd00      	ble.n	8003238 <__aeabi_dsub+0x318>
 8003236:	e745      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003238:	2780      	movs	r7, #128	@ 0x80
 800323a:	4659      	mov	r1, fp
 800323c:	043f      	lsls	r7, r7, #16
 800323e:	4339      	orrs	r1, r7
 8003240:	468b      	mov	fp, r1
 8003242:	e72a      	b.n	800309a <__aeabi_dsub+0x17a>
 8003244:	2400      	movs	r4, #0
 8003246:	2700      	movs	r7, #0
 8003248:	052d      	lsls	r5, r5, #20
 800324a:	4325      	orrs	r5, r4
 800324c:	07f6      	lsls	r6, r6, #31
 800324e:	4335      	orrs	r5, r6
 8003250:	0038      	movs	r0, r7
 8003252:	0029      	movs	r1, r5
 8003254:	b003      	add	sp, #12
 8003256:	bcf0      	pop	{r4, r5, r6, r7}
 8003258:	46bb      	mov	fp, r7
 800325a:	46b2      	mov	sl, r6
 800325c:	46a9      	mov	r9, r5
 800325e:	46a0      	mov	r8, r4
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	077b      	lsls	r3, r7, #29
 8003264:	d004      	beq.n	8003270 <__aeabi_dsub+0x350>
 8003266:	230f      	movs	r3, #15
 8003268:	403b      	ands	r3, r7
 800326a:	2b04      	cmp	r3, #4
 800326c:	d000      	beq.n	8003270 <__aeabi_dsub+0x350>
 800326e:	e6e7      	b.n	8003040 <__aeabi_dsub+0x120>
 8003270:	002b      	movs	r3, r5
 8003272:	08f8      	lsrs	r0, r7, #3
 8003274:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <__aeabi_dsub+0x364>)
 8003276:	0767      	lsls	r7, r4, #29
 8003278:	4307      	orrs	r7, r0
 800327a:	08e5      	lsrs	r5, r4, #3
 800327c:	4293      	cmp	r3, r2
 800327e:	d100      	bne.n	8003282 <__aeabi_dsub+0x362>
 8003280:	e74a      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003282:	e0a5      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003284:	000007ff 	.word	0x000007ff
 8003288:	ff7fffff 	.word	0xff7fffff
 800328c:	fffff801 	.word	0xfffff801
 8003290:	000007fe 	.word	0x000007fe
 8003294:	0038      	movs	r0, r7
 8003296:	f000 fbc7 	bl	8003a28 <__clzsi2>
 800329a:	0003      	movs	r3, r0
 800329c:	3318      	adds	r3, #24
 800329e:	2b1f      	cmp	r3, #31
 80032a0:	dc00      	bgt.n	80032a4 <__aeabi_dsub+0x384>
 80032a2:	e6a7      	b.n	8002ff4 <__aeabi_dsub+0xd4>
 80032a4:	003a      	movs	r2, r7
 80032a6:	3808      	subs	r0, #8
 80032a8:	4082      	lsls	r2, r0
 80032aa:	429d      	cmp	r5, r3
 80032ac:	dd00      	ble.n	80032b0 <__aeabi_dsub+0x390>
 80032ae:	e08a      	b.n	80033c6 <__aeabi_dsub+0x4a6>
 80032b0:	1b5b      	subs	r3, r3, r5
 80032b2:	1c58      	adds	r0, r3, #1
 80032b4:	281f      	cmp	r0, #31
 80032b6:	dc00      	bgt.n	80032ba <__aeabi_dsub+0x39a>
 80032b8:	e1d8      	b.n	800366c <__aeabi_dsub+0x74c>
 80032ba:	0017      	movs	r7, r2
 80032bc:	3b1f      	subs	r3, #31
 80032be:	40df      	lsrs	r7, r3
 80032c0:	2820      	cmp	r0, #32
 80032c2:	d005      	beq.n	80032d0 <__aeabi_dsub+0x3b0>
 80032c4:	2340      	movs	r3, #64	@ 0x40
 80032c6:	1a1b      	subs	r3, r3, r0
 80032c8:	409a      	lsls	r2, r3
 80032ca:	1e53      	subs	r3, r2, #1
 80032cc:	419a      	sbcs	r2, r3
 80032ce:	4317      	orrs	r7, r2
 80032d0:	2500      	movs	r5, #0
 80032d2:	2f00      	cmp	r7, #0
 80032d4:	d100      	bne.n	80032d8 <__aeabi_dsub+0x3b8>
 80032d6:	e0e5      	b.n	80034a4 <__aeabi_dsub+0x584>
 80032d8:	077b      	lsls	r3, r7, #29
 80032da:	d000      	beq.n	80032de <__aeabi_dsub+0x3be>
 80032dc:	e6ab      	b.n	8003036 <__aeabi_dsub+0x116>
 80032de:	002c      	movs	r4, r5
 80032e0:	e7c6      	b.n	8003270 <__aeabi_dsub+0x350>
 80032e2:	08c0      	lsrs	r0, r0, #3
 80032e4:	e7c6      	b.n	8003274 <__aeabi_dsub+0x354>
 80032e6:	2700      	movs	r7, #0
 80032e8:	2400      	movs	r4, #0
 80032ea:	4dd1      	ldr	r5, [pc, #836]	@ (8003630 <__aeabi_dsub+0x710>)
 80032ec:	e7ac      	b.n	8003248 <__aeabi_dsub+0x328>
 80032ee:	4fd1      	ldr	r7, [pc, #836]	@ (8003634 <__aeabi_dsub+0x714>)
 80032f0:	1c6b      	adds	r3, r5, #1
 80032f2:	423b      	tst	r3, r7
 80032f4:	d171      	bne.n	80033da <__aeabi_dsub+0x4ba>
 80032f6:	0023      	movs	r3, r4
 80032f8:	4303      	orrs	r3, r0
 80032fa:	2d00      	cmp	r5, #0
 80032fc:	d000      	beq.n	8003300 <__aeabi_dsub+0x3e0>
 80032fe:	e14e      	b.n	800359e <__aeabi_dsub+0x67e>
 8003300:	4657      	mov	r7, sl
 8003302:	2b00      	cmp	r3, #0
 8003304:	d100      	bne.n	8003308 <__aeabi_dsub+0x3e8>
 8003306:	e1b5      	b.n	8003674 <__aeabi_dsub+0x754>
 8003308:	2f00      	cmp	r7, #0
 800330a:	d00d      	beq.n	8003328 <__aeabi_dsub+0x408>
 800330c:	1883      	adds	r3, r0, r2
 800330e:	4283      	cmp	r3, r0
 8003310:	4180      	sbcs	r0, r0
 8003312:	445c      	add	r4, fp
 8003314:	4240      	negs	r0, r0
 8003316:	1824      	adds	r4, r4, r0
 8003318:	0222      	lsls	r2, r4, #8
 800331a:	d500      	bpl.n	800331e <__aeabi_dsub+0x3fe>
 800331c:	e1c8      	b.n	80036b0 <__aeabi_dsub+0x790>
 800331e:	001f      	movs	r7, r3
 8003320:	4698      	mov	r8, r3
 8003322:	4327      	orrs	r7, r4
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x408>
 8003326:	e0bc      	b.n	80034a2 <__aeabi_dsub+0x582>
 8003328:	4643      	mov	r3, r8
 800332a:	0767      	lsls	r7, r4, #29
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	431f      	orrs	r7, r3
 8003330:	08e5      	lsrs	r5, r4, #3
 8003332:	2300      	movs	r3, #0
 8003334:	e04c      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003336:	1a83      	subs	r3, r0, r2
 8003338:	4698      	mov	r8, r3
 800333a:	465b      	mov	r3, fp
 800333c:	4540      	cmp	r0, r8
 800333e:	41bf      	sbcs	r7, r7
 8003340:	1ae3      	subs	r3, r4, r3
 8003342:	427f      	negs	r7, r7
 8003344:	1bdb      	subs	r3, r3, r7
 8003346:	021f      	lsls	r7, r3, #8
 8003348:	d47c      	bmi.n	8003444 <__aeabi_dsub+0x524>
 800334a:	4647      	mov	r7, r8
 800334c:	431f      	orrs	r7, r3
 800334e:	d100      	bne.n	8003352 <__aeabi_dsub+0x432>
 8003350:	e0a6      	b.n	80034a0 <__aeabi_dsub+0x580>
 8003352:	001c      	movs	r4, r3
 8003354:	4647      	mov	r7, r8
 8003356:	e645      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 8003358:	4cb7      	ldr	r4, [pc, #732]	@ (8003638 <__aeabi_dsub+0x718>)
 800335a:	1aed      	subs	r5, r5, r3
 800335c:	4014      	ands	r4, r2
 800335e:	077b      	lsls	r3, r7, #29
 8003360:	d000      	beq.n	8003364 <__aeabi_dsub+0x444>
 8003362:	e780      	b.n	8003266 <__aeabi_dsub+0x346>
 8003364:	e784      	b.n	8003270 <__aeabi_dsub+0x350>
 8003366:	464b      	mov	r3, r9
 8003368:	0025      	movs	r5, r4
 800336a:	4305      	orrs	r5, r0
 800336c:	d066      	beq.n	800343c <__aeabi_dsub+0x51c>
 800336e:	1e5f      	subs	r7, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d100      	bne.n	8003376 <__aeabi_dsub+0x456>
 8003374:	e0fc      	b.n	8003570 <__aeabi_dsub+0x650>
 8003376:	4dae      	ldr	r5, [pc, #696]	@ (8003630 <__aeabi_dsub+0x710>)
 8003378:	42ab      	cmp	r3, r5
 800337a:	d100      	bne.n	800337e <__aeabi_dsub+0x45e>
 800337c:	e15e      	b.n	800363c <__aeabi_dsub+0x71c>
 800337e:	4666      	mov	r6, ip
 8003380:	2f38      	cmp	r7, #56	@ 0x38
 8003382:	dc00      	bgt.n	8003386 <__aeabi_dsub+0x466>
 8003384:	e0b4      	b.n	80034f0 <__aeabi_dsub+0x5d0>
 8003386:	2001      	movs	r0, #1
 8003388:	1a17      	subs	r7, r2, r0
 800338a:	42ba      	cmp	r2, r7
 800338c:	4192      	sbcs	r2, r2
 800338e:	465b      	mov	r3, fp
 8003390:	4252      	negs	r2, r2
 8003392:	464d      	mov	r5, r9
 8003394:	1a9c      	subs	r4, r3, r2
 8003396:	e620      	b.n	8002fda <__aeabi_dsub+0xba>
 8003398:	0767      	lsls	r7, r4, #29
 800339a:	08c0      	lsrs	r0, r0, #3
 800339c:	4307      	orrs	r7, r0
 800339e:	08e5      	lsrs	r5, r4, #3
 80033a0:	e6ba      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80033a2:	001f      	movs	r7, r3
 80033a4:	4659      	mov	r1, fp
 80033a6:	3f20      	subs	r7, #32
 80033a8:	40f9      	lsrs	r1, r7
 80033aa:	000f      	movs	r7, r1
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d005      	beq.n	80033bc <__aeabi_dsub+0x49c>
 80033b0:	2140      	movs	r1, #64	@ 0x40
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	4659      	mov	r1, fp
 80033b6:	4099      	lsls	r1, r3
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4692      	mov	sl, r2
 80033bc:	4653      	mov	r3, sl
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	4193      	sbcs	r3, r2
 80033c2:	431f      	orrs	r7, r3
 80033c4:	e604      	b.n	8002fd0 <__aeabi_dsub+0xb0>
 80033c6:	1aeb      	subs	r3, r5, r3
 80033c8:	4d9b      	ldr	r5, [pc, #620]	@ (8003638 <__aeabi_dsub+0x718>)
 80033ca:	4015      	ands	r5, r2
 80033cc:	076f      	lsls	r7, r5, #29
 80033ce:	08ed      	lsrs	r5, r5, #3
 80033d0:	032c      	lsls	r4, r5, #12
 80033d2:	055d      	lsls	r5, r3, #21
 80033d4:	0b24      	lsrs	r4, r4, #12
 80033d6:	0d6d      	lsrs	r5, r5, #21
 80033d8:	e736      	b.n	8003248 <__aeabi_dsub+0x328>
 80033da:	4d95      	ldr	r5, [pc, #596]	@ (8003630 <__aeabi_dsub+0x710>)
 80033dc:	42ab      	cmp	r3, r5
 80033de:	d100      	bne.n	80033e2 <__aeabi_dsub+0x4c2>
 80033e0:	e0d6      	b.n	8003590 <__aeabi_dsub+0x670>
 80033e2:	1882      	adds	r2, r0, r2
 80033e4:	0021      	movs	r1, r4
 80033e6:	4282      	cmp	r2, r0
 80033e8:	4180      	sbcs	r0, r0
 80033ea:	4459      	add	r1, fp
 80033ec:	4240      	negs	r0, r0
 80033ee:	1808      	adds	r0, r1, r0
 80033f0:	07c7      	lsls	r7, r0, #31
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	4317      	orrs	r7, r2
 80033f6:	0844      	lsrs	r4, r0, #1
 80033f8:	0752      	lsls	r2, r2, #29
 80033fa:	d400      	bmi.n	80033fe <__aeabi_dsub+0x4de>
 80033fc:	e185      	b.n	800370a <__aeabi_dsub+0x7ea>
 80033fe:	220f      	movs	r2, #15
 8003400:	001d      	movs	r5, r3
 8003402:	403a      	ands	r2, r7
 8003404:	2a04      	cmp	r2, #4
 8003406:	d000      	beq.n	800340a <__aeabi_dsub+0x4ea>
 8003408:	e61a      	b.n	8003040 <__aeabi_dsub+0x120>
 800340a:	08ff      	lsrs	r7, r7, #3
 800340c:	0764      	lsls	r4, r4, #29
 800340e:	4327      	orrs	r7, r4
 8003410:	0905      	lsrs	r5, r0, #4
 8003412:	e7dd      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003414:	465b      	mov	r3, fp
 8003416:	08d2      	lsrs	r2, r2, #3
 8003418:	075f      	lsls	r7, r3, #29
 800341a:	4317      	orrs	r7, r2
 800341c:	08dd      	lsrs	r5, r3, #3
 800341e:	e67b      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003420:	2700      	movs	r7, #0
 8003422:	2400      	movs	r4, #0
 8003424:	e710      	b.n	8003248 <__aeabi_dsub+0x328>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <__aeabi_dsub+0x50c>
 800342a:	e0d6      	b.n	80035da <__aeabi_dsub+0x6ba>
 800342c:	2900      	cmp	r1, #0
 800342e:	d000      	beq.n	8003432 <__aeabi_dsub+0x512>
 8003430:	e12f      	b.n	8003692 <__aeabi_dsub+0x772>
 8003432:	2480      	movs	r4, #128	@ 0x80
 8003434:	2600      	movs	r6, #0
 8003436:	4d7e      	ldr	r5, [pc, #504]	@ (8003630 <__aeabi_dsub+0x710>)
 8003438:	0324      	lsls	r4, r4, #12
 800343a:	e705      	b.n	8003248 <__aeabi_dsub+0x328>
 800343c:	4666      	mov	r6, ip
 800343e:	465c      	mov	r4, fp
 8003440:	08d0      	lsrs	r0, r2, #3
 8003442:	e717      	b.n	8003274 <__aeabi_dsub+0x354>
 8003444:	465b      	mov	r3, fp
 8003446:	1a17      	subs	r7, r2, r0
 8003448:	42ba      	cmp	r2, r7
 800344a:	4192      	sbcs	r2, r2
 800344c:	1b1c      	subs	r4, r3, r4
 800344e:	2601      	movs	r6, #1
 8003450:	4663      	mov	r3, ip
 8003452:	4252      	negs	r2, r2
 8003454:	1aa4      	subs	r4, r4, r2
 8003456:	401e      	ands	r6, r3
 8003458:	e5c4      	b.n	8002fe4 <__aeabi_dsub+0xc4>
 800345a:	1883      	adds	r3, r0, r2
 800345c:	4283      	cmp	r3, r0
 800345e:	4180      	sbcs	r0, r0
 8003460:	445c      	add	r4, fp
 8003462:	4240      	negs	r0, r0
 8003464:	1825      	adds	r5, r4, r0
 8003466:	022a      	lsls	r2, r5, #8
 8003468:	d400      	bmi.n	800346c <__aeabi_dsub+0x54c>
 800346a:	e0da      	b.n	8003622 <__aeabi_dsub+0x702>
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <__aeabi_dsub+0x718>)
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	4015      	ands	r5, r2
 8003472:	07ea      	lsls	r2, r5, #31
 8003474:	431a      	orrs	r2, r3
 8003476:	0869      	lsrs	r1, r5, #1
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d400      	bmi.n	800347e <__aeabi_dsub+0x55e>
 800347c:	e14a      	b.n	8003714 <__aeabi_dsub+0x7f4>
 800347e:	230f      	movs	r3, #15
 8003480:	4013      	ands	r3, r2
 8003482:	2b04      	cmp	r3, #4
 8003484:	d100      	bne.n	8003488 <__aeabi_dsub+0x568>
 8003486:	e0fc      	b.n	8003682 <__aeabi_dsub+0x762>
 8003488:	1d17      	adds	r7, r2, #4
 800348a:	4297      	cmp	r7, r2
 800348c:	41a4      	sbcs	r4, r4
 800348e:	4264      	negs	r4, r4
 8003490:	2502      	movs	r5, #2
 8003492:	1864      	adds	r4, r4, r1
 8003494:	e6ec      	b.n	8003270 <__aeabi_dsub+0x350>
 8003496:	4647      	mov	r7, r8
 8003498:	001c      	movs	r4, r3
 800349a:	431f      	orrs	r7, r3
 800349c:	d000      	beq.n	80034a0 <__aeabi_dsub+0x580>
 800349e:	e743      	b.n	8003328 <__aeabi_dsub+0x408>
 80034a0:	2600      	movs	r6, #0
 80034a2:	2500      	movs	r5, #0
 80034a4:	2400      	movs	r4, #0
 80034a6:	e6cf      	b.n	8003248 <__aeabi_dsub+0x328>
 80034a8:	08c0      	lsrs	r0, r0, #3
 80034aa:	0767      	lsls	r7, r4, #29
 80034ac:	4307      	orrs	r7, r0
 80034ae:	08e5      	lsrs	r5, r4, #3
 80034b0:	e632      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80034b2:	1a87      	subs	r7, r0, r2
 80034b4:	465b      	mov	r3, fp
 80034b6:	42b8      	cmp	r0, r7
 80034b8:	4180      	sbcs	r0, r0
 80034ba:	1ae4      	subs	r4, r4, r3
 80034bc:	4240      	negs	r0, r0
 80034be:	1a24      	subs	r4, r4, r0
 80034c0:	0223      	lsls	r3, r4, #8
 80034c2:	d428      	bmi.n	8003516 <__aeabi_dsub+0x5f6>
 80034c4:	0763      	lsls	r3, r4, #29
 80034c6:	08ff      	lsrs	r7, r7, #3
 80034c8:	431f      	orrs	r7, r3
 80034ca:	08e5      	lsrs	r5, r4, #3
 80034cc:	2301      	movs	r3, #1
 80034ce:	e77f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d100      	bne.n	80034d6 <__aeabi_dsub+0x5b6>
 80034d4:	e673      	b.n	80031be <__aeabi_dsub+0x29e>
 80034d6:	464b      	mov	r3, r9
 80034d8:	1b5f      	subs	r7, r3, r5
 80034da:	003b      	movs	r3, r7
 80034dc:	2d00      	cmp	r5, #0
 80034de:	d100      	bne.n	80034e2 <__aeabi_dsub+0x5c2>
 80034e0:	e742      	b.n	8003368 <__aeabi_dsub+0x448>
 80034e2:	2f38      	cmp	r7, #56	@ 0x38
 80034e4:	dd00      	ble.n	80034e8 <__aeabi_dsub+0x5c8>
 80034e6:	e0ec      	b.n	80036c2 <__aeabi_dsub+0x7a2>
 80034e8:	2380      	movs	r3, #128	@ 0x80
 80034ea:	000e      	movs	r6, r1
 80034ec:	041b      	lsls	r3, r3, #16
 80034ee:	431c      	orrs	r4, r3
 80034f0:	2f1f      	cmp	r7, #31
 80034f2:	dc25      	bgt.n	8003540 <__aeabi_dsub+0x620>
 80034f4:	2520      	movs	r5, #32
 80034f6:	0023      	movs	r3, r4
 80034f8:	1bed      	subs	r5, r5, r7
 80034fa:	0001      	movs	r1, r0
 80034fc:	40a8      	lsls	r0, r5
 80034fe:	40ab      	lsls	r3, r5
 8003500:	40f9      	lsrs	r1, r7
 8003502:	1e45      	subs	r5, r0, #1
 8003504:	41a8      	sbcs	r0, r5
 8003506:	430b      	orrs	r3, r1
 8003508:	40fc      	lsrs	r4, r7
 800350a:	4318      	orrs	r0, r3
 800350c:	465b      	mov	r3, fp
 800350e:	1b1b      	subs	r3, r3, r4
 8003510:	469b      	mov	fp, r3
 8003512:	e739      	b.n	8003388 <__aeabi_dsub+0x468>
 8003514:	4666      	mov	r6, ip
 8003516:	2501      	movs	r5, #1
 8003518:	e562      	b.n	8002fe0 <__aeabi_dsub+0xc0>
 800351a:	001f      	movs	r7, r3
 800351c:	4659      	mov	r1, fp
 800351e:	3f20      	subs	r7, #32
 8003520:	40f9      	lsrs	r1, r7
 8003522:	468c      	mov	ip, r1
 8003524:	2b20      	cmp	r3, #32
 8003526:	d005      	beq.n	8003534 <__aeabi_dsub+0x614>
 8003528:	2740      	movs	r7, #64	@ 0x40
 800352a:	4659      	mov	r1, fp
 800352c:	1afb      	subs	r3, r7, r3
 800352e:	4099      	lsls	r1, r3
 8003530:	430a      	orrs	r2, r1
 8003532:	4692      	mov	sl, r2
 8003534:	4657      	mov	r7, sl
 8003536:	1e7b      	subs	r3, r7, #1
 8003538:	419f      	sbcs	r7, r3
 800353a:	4663      	mov	r3, ip
 800353c:	431f      	orrs	r7, r3
 800353e:	e5c1      	b.n	80030c4 <__aeabi_dsub+0x1a4>
 8003540:	003b      	movs	r3, r7
 8003542:	0025      	movs	r5, r4
 8003544:	3b20      	subs	r3, #32
 8003546:	40dd      	lsrs	r5, r3
 8003548:	2f20      	cmp	r7, #32
 800354a:	d004      	beq.n	8003556 <__aeabi_dsub+0x636>
 800354c:	2340      	movs	r3, #64	@ 0x40
 800354e:	1bdb      	subs	r3, r3, r7
 8003550:	409c      	lsls	r4, r3
 8003552:	4320      	orrs	r0, r4
 8003554:	4680      	mov	r8, r0
 8003556:	4640      	mov	r0, r8
 8003558:	1e43      	subs	r3, r0, #1
 800355a:	4198      	sbcs	r0, r3
 800355c:	4328      	orrs	r0, r5
 800355e:	e713      	b.n	8003388 <__aeabi_dsub+0x468>
 8003560:	2900      	cmp	r1, #0
 8003562:	d09d      	beq.n	80034a0 <__aeabi_dsub+0x580>
 8003564:	2601      	movs	r6, #1
 8003566:	4663      	mov	r3, ip
 8003568:	465c      	mov	r4, fp
 800356a:	4690      	mov	r8, r2
 800356c:	401e      	ands	r6, r3
 800356e:	e6db      	b.n	8003328 <__aeabi_dsub+0x408>
 8003570:	1a17      	subs	r7, r2, r0
 8003572:	465b      	mov	r3, fp
 8003574:	42ba      	cmp	r2, r7
 8003576:	4192      	sbcs	r2, r2
 8003578:	1b1c      	subs	r4, r3, r4
 800357a:	4252      	negs	r2, r2
 800357c:	1aa4      	subs	r4, r4, r2
 800357e:	0223      	lsls	r3, r4, #8
 8003580:	d4c8      	bmi.n	8003514 <__aeabi_dsub+0x5f4>
 8003582:	0763      	lsls	r3, r4, #29
 8003584:	08ff      	lsrs	r7, r7, #3
 8003586:	431f      	orrs	r7, r3
 8003588:	4666      	mov	r6, ip
 800358a:	2301      	movs	r3, #1
 800358c:	08e5      	lsrs	r5, r4, #3
 800358e:	e71f      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003590:	001d      	movs	r5, r3
 8003592:	2400      	movs	r4, #0
 8003594:	2700      	movs	r7, #0
 8003596:	e657      	b.n	8003248 <__aeabi_dsub+0x328>
 8003598:	465c      	mov	r4, fp
 800359a:	08d0      	lsrs	r0, r2, #3
 800359c:	e66a      	b.n	8003274 <__aeabi_dsub+0x354>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <__aeabi_dsub+0x684>
 80035a2:	e737      	b.n	8003414 <__aeabi_dsub+0x4f4>
 80035a4:	4653      	mov	r3, sl
 80035a6:	08c0      	lsrs	r0, r0, #3
 80035a8:	0767      	lsls	r7, r4, #29
 80035aa:	4307      	orrs	r7, r0
 80035ac:	08e5      	lsrs	r5, r4, #3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d100      	bne.n	80035b4 <__aeabi_dsub+0x694>
 80035b2:	e5b1      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	031b      	lsls	r3, r3, #12
 80035b8:	421d      	tst	r5, r3
 80035ba:	d008      	beq.n	80035ce <__aeabi_dsub+0x6ae>
 80035bc:	4659      	mov	r1, fp
 80035be:	08c8      	lsrs	r0, r1, #3
 80035c0:	4218      	tst	r0, r3
 80035c2:	d104      	bne.n	80035ce <__aeabi_dsub+0x6ae>
 80035c4:	08d2      	lsrs	r2, r2, #3
 80035c6:	0749      	lsls	r1, r1, #29
 80035c8:	430a      	orrs	r2, r1
 80035ca:	0017      	movs	r7, r2
 80035cc:	0005      	movs	r5, r0
 80035ce:	0f7b      	lsrs	r3, r7, #29
 80035d0:	00ff      	lsls	r7, r7, #3
 80035d2:	08ff      	lsrs	r7, r7, #3
 80035d4:	075b      	lsls	r3, r3, #29
 80035d6:	431f      	orrs	r7, r3
 80035d8:	e59e      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80035da:	08c0      	lsrs	r0, r0, #3
 80035dc:	0763      	lsls	r3, r4, #29
 80035de:	4318      	orrs	r0, r3
 80035e0:	08e5      	lsrs	r5, r4, #3
 80035e2:	2900      	cmp	r1, #0
 80035e4:	d053      	beq.n	800368e <__aeabi_dsub+0x76e>
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	421d      	tst	r5, r3
 80035ec:	d00a      	beq.n	8003604 <__aeabi_dsub+0x6e4>
 80035ee:	4659      	mov	r1, fp
 80035f0:	08cc      	lsrs	r4, r1, #3
 80035f2:	421c      	tst	r4, r3
 80035f4:	d106      	bne.n	8003604 <__aeabi_dsub+0x6e4>
 80035f6:	2601      	movs	r6, #1
 80035f8:	4663      	mov	r3, ip
 80035fa:	0025      	movs	r5, r4
 80035fc:	08d0      	lsrs	r0, r2, #3
 80035fe:	0749      	lsls	r1, r1, #29
 8003600:	4308      	orrs	r0, r1
 8003602:	401e      	ands	r6, r3
 8003604:	0f47      	lsrs	r7, r0, #29
 8003606:	00c0      	lsls	r0, r0, #3
 8003608:	08c0      	lsrs	r0, r0, #3
 800360a:	077f      	lsls	r7, r7, #29
 800360c:	4307      	orrs	r7, r0
 800360e:	e583      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003610:	1883      	adds	r3, r0, r2
 8003612:	4293      	cmp	r3, r2
 8003614:	4192      	sbcs	r2, r2
 8003616:	445c      	add	r4, fp
 8003618:	4252      	negs	r2, r2
 800361a:	18a5      	adds	r5, r4, r2
 800361c:	022a      	lsls	r2, r5, #8
 800361e:	d500      	bpl.n	8003622 <__aeabi_dsub+0x702>
 8003620:	e724      	b.n	800346c <__aeabi_dsub+0x54c>
 8003622:	076f      	lsls	r7, r5, #29
 8003624:	08db      	lsrs	r3, r3, #3
 8003626:	431f      	orrs	r7, r3
 8003628:	08ed      	lsrs	r5, r5, #3
 800362a:	2301      	movs	r3, #1
 800362c:	e6d0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	000007ff 	.word	0x000007ff
 8003634:	000007fe 	.word	0x000007fe
 8003638:	ff7fffff 	.word	0xff7fffff
 800363c:	465b      	mov	r3, fp
 800363e:	08d2      	lsrs	r2, r2, #3
 8003640:	075f      	lsls	r7, r3, #29
 8003642:	4666      	mov	r6, ip
 8003644:	4317      	orrs	r7, r2
 8003646:	08dd      	lsrs	r5, r3, #3
 8003648:	e566      	b.n	8003118 <__aeabi_dsub+0x1f8>
 800364a:	0025      	movs	r5, r4
 800364c:	3b20      	subs	r3, #32
 800364e:	40dd      	lsrs	r5, r3
 8003650:	4663      	mov	r3, ip
 8003652:	2b20      	cmp	r3, #32
 8003654:	d005      	beq.n	8003662 <__aeabi_dsub+0x742>
 8003656:	2340      	movs	r3, #64	@ 0x40
 8003658:	4661      	mov	r1, ip
 800365a:	1a5b      	subs	r3, r3, r1
 800365c:	409c      	lsls	r4, r3
 800365e:	4320      	orrs	r0, r4
 8003660:	4680      	mov	r8, r0
 8003662:	4647      	mov	r7, r8
 8003664:	1e7b      	subs	r3, r7, #1
 8003666:	419f      	sbcs	r7, r3
 8003668:	432f      	orrs	r7, r5
 800366a:	e5a0      	b.n	80031ae <__aeabi_dsub+0x28e>
 800366c:	2120      	movs	r1, #32
 800366e:	2700      	movs	r7, #0
 8003670:	1a09      	subs	r1, r1, r0
 8003672:	e4d2      	b.n	800301a <__aeabi_dsub+0xfa>
 8003674:	2f00      	cmp	r7, #0
 8003676:	d100      	bne.n	800367a <__aeabi_dsub+0x75a>
 8003678:	e713      	b.n	80034a2 <__aeabi_dsub+0x582>
 800367a:	465c      	mov	r4, fp
 800367c:	0017      	movs	r7, r2
 800367e:	2500      	movs	r5, #0
 8003680:	e5f6      	b.n	8003270 <__aeabi_dsub+0x350>
 8003682:	08d7      	lsrs	r7, r2, #3
 8003684:	0749      	lsls	r1, r1, #29
 8003686:	2302      	movs	r3, #2
 8003688:	430f      	orrs	r7, r1
 800368a:	092d      	lsrs	r5, r5, #4
 800368c:	e6a0      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800368e:	0007      	movs	r7, r0
 8003690:	e542      	b.n	8003118 <__aeabi_dsub+0x1f8>
 8003692:	465b      	mov	r3, fp
 8003694:	2601      	movs	r6, #1
 8003696:	075f      	lsls	r7, r3, #29
 8003698:	08dd      	lsrs	r5, r3, #3
 800369a:	4663      	mov	r3, ip
 800369c:	08d2      	lsrs	r2, r2, #3
 800369e:	4317      	orrs	r7, r2
 80036a0:	401e      	ands	r6, r3
 80036a2:	e539      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036a4:	465b      	mov	r3, fp
 80036a6:	08d2      	lsrs	r2, r2, #3
 80036a8:	075f      	lsls	r7, r3, #29
 80036aa:	4317      	orrs	r7, r2
 80036ac:	08dd      	lsrs	r5, r3, #3
 80036ae:	e533      	b.n	8003118 <__aeabi_dsub+0x1f8>
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <__aeabi_dsub+0x80c>)
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	4022      	ands	r2, r4
 80036b6:	0757      	lsls	r7, r2, #29
 80036b8:	0252      	lsls	r2, r2, #9
 80036ba:	2501      	movs	r5, #1
 80036bc:	431f      	orrs	r7, r3
 80036be:	0b14      	lsrs	r4, r2, #12
 80036c0:	e5c2      	b.n	8003248 <__aeabi_dsub+0x328>
 80036c2:	000e      	movs	r6, r1
 80036c4:	2001      	movs	r0, #1
 80036c6:	e65f      	b.n	8003388 <__aeabi_dsub+0x468>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00d      	beq.n	80036e8 <__aeabi_dsub+0x7c8>
 80036cc:	464b      	mov	r3, r9
 80036ce:	1b5b      	subs	r3, r3, r5
 80036d0:	469c      	mov	ip, r3
 80036d2:	2d00      	cmp	r5, #0
 80036d4:	d100      	bne.n	80036d8 <__aeabi_dsub+0x7b8>
 80036d6:	e548      	b.n	800316a <__aeabi_dsub+0x24a>
 80036d8:	2701      	movs	r7, #1
 80036da:	2b38      	cmp	r3, #56	@ 0x38
 80036dc:	dd00      	ble.n	80036e0 <__aeabi_dsub+0x7c0>
 80036de:	e566      	b.n	80031ae <__aeabi_dsub+0x28e>
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	041b      	lsls	r3, r3, #16
 80036e4:	431c      	orrs	r4, r3
 80036e6:	e550      	b.n	800318a <__aeabi_dsub+0x26a>
 80036e8:	1c6b      	adds	r3, r5, #1
 80036ea:	4d11      	ldr	r5, [pc, #68]	@ (8003730 <__aeabi_dsub+0x810>)
 80036ec:	422b      	tst	r3, r5
 80036ee:	d000      	beq.n	80036f2 <__aeabi_dsub+0x7d2>
 80036f0:	e673      	b.n	80033da <__aeabi_dsub+0x4ba>
 80036f2:	4659      	mov	r1, fp
 80036f4:	0023      	movs	r3, r4
 80036f6:	4311      	orrs	r1, r2
 80036f8:	468a      	mov	sl, r1
 80036fa:	4303      	orrs	r3, r0
 80036fc:	e600      	b.n	8003300 <__aeabi_dsub+0x3e0>
 80036fe:	0767      	lsls	r7, r4, #29
 8003700:	08c0      	lsrs	r0, r0, #3
 8003702:	2300      	movs	r3, #0
 8003704:	4307      	orrs	r7, r0
 8003706:	08e5      	lsrs	r5, r4, #3
 8003708:	e662      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 800370a:	0764      	lsls	r4, r4, #29
 800370c:	08ff      	lsrs	r7, r7, #3
 800370e:	4327      	orrs	r7, r4
 8003710:	0905      	lsrs	r5, r0, #4
 8003712:	e65d      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003714:	08d2      	lsrs	r2, r2, #3
 8003716:	0749      	lsls	r1, r1, #29
 8003718:	4311      	orrs	r1, r2
 800371a:	000f      	movs	r7, r1
 800371c:	2302      	movs	r3, #2
 800371e:	092d      	lsrs	r5, r5, #4
 8003720:	e656      	b.n	80033d0 <__aeabi_dsub+0x4b0>
 8003722:	0007      	movs	r7, r0
 8003724:	e5a4      	b.n	8003270 <__aeabi_dsub+0x350>
 8003726:	0038      	movs	r0, r7
 8003728:	e48f      	b.n	800304a <__aeabi_dsub+0x12a>
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	ff7fffff 	.word	0xff7fffff
 8003730:	000007fe 	.word	0x000007fe

08003734 <__aeabi_dcmpun>:
 8003734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003736:	46c6      	mov	lr, r8
 8003738:	031e      	lsls	r6, r3, #12
 800373a:	0b36      	lsrs	r6, r6, #12
 800373c:	46b0      	mov	r8, r6
 800373e:	4e0d      	ldr	r6, [pc, #52]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003740:	030c      	lsls	r4, r1, #12
 8003742:	004d      	lsls	r5, r1, #1
 8003744:	005f      	lsls	r7, r3, #1
 8003746:	b500      	push	{lr}
 8003748:	0b24      	lsrs	r4, r4, #12
 800374a:	0d6d      	lsrs	r5, r5, #21
 800374c:	0d7f      	lsrs	r7, r7, #21
 800374e:	42b5      	cmp	r5, r6
 8003750:	d00b      	beq.n	800376a <__aeabi_dcmpun+0x36>
 8003752:	4908      	ldr	r1, [pc, #32]	@ (8003774 <__aeabi_dcmpun+0x40>)
 8003754:	2000      	movs	r0, #0
 8003756:	428f      	cmp	r7, r1
 8003758:	d104      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 800375a:	4646      	mov	r6, r8
 800375c:	4316      	orrs	r6, r2
 800375e:	0030      	movs	r0, r6
 8003760:	1e43      	subs	r3, r0, #1
 8003762:	4198      	sbcs	r0, r3
 8003764:	bc80      	pop	{r7}
 8003766:	46b8      	mov	r8, r7
 8003768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800376a:	4304      	orrs	r4, r0
 800376c:	2001      	movs	r0, #1
 800376e:	2c00      	cmp	r4, #0
 8003770:	d1f8      	bne.n	8003764 <__aeabi_dcmpun+0x30>
 8003772:	e7ee      	b.n	8003752 <__aeabi_dcmpun+0x1e>
 8003774:	000007ff 	.word	0x000007ff

08003778 <__aeabi_d2iz>:
 8003778:	000b      	movs	r3, r1
 800377a:	0002      	movs	r2, r0
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4d16      	ldr	r5, [pc, #88]	@ (80037d8 <__aeabi_d2iz+0x60>)
 8003780:	030c      	lsls	r4, r1, #12
 8003782:	b082      	sub	sp, #8
 8003784:	0049      	lsls	r1, r1, #1
 8003786:	2000      	movs	r0, #0
 8003788:	9200      	str	r2, [sp, #0]
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	0b24      	lsrs	r4, r4, #12
 800378e:	0d49      	lsrs	r1, r1, #21
 8003790:	0fde      	lsrs	r6, r3, #31
 8003792:	42a9      	cmp	r1, r5
 8003794:	dd04      	ble.n	80037a0 <__aeabi_d2iz+0x28>
 8003796:	4811      	ldr	r0, [pc, #68]	@ (80037dc <__aeabi_d2iz+0x64>)
 8003798:	4281      	cmp	r1, r0
 800379a:	dd03      	ble.n	80037a4 <__aeabi_d2iz+0x2c>
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <__aeabi_d2iz+0x68>)
 800379e:	18f0      	adds	r0, r6, r3
 80037a0:	b002      	add	sp, #8
 80037a2:	bd70      	pop	{r4, r5, r6, pc}
 80037a4:	2080      	movs	r0, #128	@ 0x80
 80037a6:	0340      	lsls	r0, r0, #13
 80037a8:	4320      	orrs	r0, r4
 80037aa:	4c0e      	ldr	r4, [pc, #56]	@ (80037e4 <__aeabi_d2iz+0x6c>)
 80037ac:	1a64      	subs	r4, r4, r1
 80037ae:	2c1f      	cmp	r4, #31
 80037b0:	dd08      	ble.n	80037c4 <__aeabi_d2iz+0x4c>
 80037b2:	4b0d      	ldr	r3, [pc, #52]	@ (80037e8 <__aeabi_d2iz+0x70>)
 80037b4:	1a5b      	subs	r3, r3, r1
 80037b6:	40d8      	lsrs	r0, r3
 80037b8:	0003      	movs	r3, r0
 80037ba:	4258      	negs	r0, r3
 80037bc:	2e00      	cmp	r6, #0
 80037be:	d1ef      	bne.n	80037a0 <__aeabi_d2iz+0x28>
 80037c0:	0018      	movs	r0, r3
 80037c2:	e7ed      	b.n	80037a0 <__aeabi_d2iz+0x28>
 80037c4:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <__aeabi_d2iz+0x74>)
 80037c6:	9a00      	ldr	r2, [sp, #0]
 80037c8:	469c      	mov	ip, r3
 80037ca:	0003      	movs	r3, r0
 80037cc:	4461      	add	r1, ip
 80037ce:	408b      	lsls	r3, r1
 80037d0:	40e2      	lsrs	r2, r4
 80037d2:	4313      	orrs	r3, r2
 80037d4:	e7f1      	b.n	80037ba <__aeabi_d2iz+0x42>
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	000003fe 	.word	0x000003fe
 80037dc:	0000041d 	.word	0x0000041d
 80037e0:	7fffffff 	.word	0x7fffffff
 80037e4:	00000433 	.word	0x00000433
 80037e8:	00000413 	.word	0x00000413
 80037ec:	fffffbed 	.word	0xfffffbed

080037f0 <__aeabi_i2d>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d016      	beq.n	8003824 <__aeabi_i2d+0x34>
 80037f6:	17c3      	asrs	r3, r0, #31
 80037f8:	18c5      	adds	r5, r0, r3
 80037fa:	405d      	eors	r5, r3
 80037fc:	0fc4      	lsrs	r4, r0, #31
 80037fe:	0028      	movs	r0, r5
 8003800:	f000 f912 	bl	8003a28 <__clzsi2>
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <__aeabi_i2d+0x58>)
 8003806:	1a1b      	subs	r3, r3, r0
 8003808:	055b      	lsls	r3, r3, #21
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	280a      	cmp	r0, #10
 800380e:	dc14      	bgt.n	800383a <__aeabi_i2d+0x4a>
 8003810:	0002      	movs	r2, r0
 8003812:	002e      	movs	r6, r5
 8003814:	3215      	adds	r2, #21
 8003816:	4096      	lsls	r6, r2
 8003818:	220b      	movs	r2, #11
 800381a:	1a12      	subs	r2, r2, r0
 800381c:	40d5      	lsrs	r5, r2
 800381e:	032d      	lsls	r5, r5, #12
 8003820:	0b2d      	lsrs	r5, r5, #12
 8003822:	e003      	b.n	800382c <__aeabi_i2d+0x3c>
 8003824:	2400      	movs	r4, #0
 8003826:	2300      	movs	r3, #0
 8003828:	2500      	movs	r5, #0
 800382a:	2600      	movs	r6, #0
 800382c:	051b      	lsls	r3, r3, #20
 800382e:	432b      	orrs	r3, r5
 8003830:	07e4      	lsls	r4, r4, #31
 8003832:	4323      	orrs	r3, r4
 8003834:	0030      	movs	r0, r6
 8003836:	0019      	movs	r1, r3
 8003838:	bd70      	pop	{r4, r5, r6, pc}
 800383a:	380b      	subs	r0, #11
 800383c:	4085      	lsls	r5, r0
 800383e:	032d      	lsls	r5, r5, #12
 8003840:	2600      	movs	r6, #0
 8003842:	0b2d      	lsrs	r5, r5, #12
 8003844:	e7f2      	b.n	800382c <__aeabi_i2d+0x3c>
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	0000041e 	.word	0x0000041e

0800384c <__aeabi_ui2d>:
 800384c:	b510      	push	{r4, lr}
 800384e:	1e04      	subs	r4, r0, #0
 8003850:	d010      	beq.n	8003874 <__aeabi_ui2d+0x28>
 8003852:	f000 f8e9 	bl	8003a28 <__clzsi2>
 8003856:	4b0e      	ldr	r3, [pc, #56]	@ (8003890 <__aeabi_ui2d+0x44>)
 8003858:	1a1b      	subs	r3, r3, r0
 800385a:	055b      	lsls	r3, r3, #21
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	280a      	cmp	r0, #10
 8003860:	dc0f      	bgt.n	8003882 <__aeabi_ui2d+0x36>
 8003862:	220b      	movs	r2, #11
 8003864:	0021      	movs	r1, r4
 8003866:	1a12      	subs	r2, r2, r0
 8003868:	40d1      	lsrs	r1, r2
 800386a:	3015      	adds	r0, #21
 800386c:	030a      	lsls	r2, r1, #12
 800386e:	4084      	lsls	r4, r0
 8003870:	0b12      	lsrs	r2, r2, #12
 8003872:	e001      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003874:	2300      	movs	r3, #0
 8003876:	2200      	movs	r2, #0
 8003878:	051b      	lsls	r3, r3, #20
 800387a:	4313      	orrs	r3, r2
 800387c:	0020      	movs	r0, r4
 800387e:	0019      	movs	r1, r3
 8003880:	bd10      	pop	{r4, pc}
 8003882:	0022      	movs	r2, r4
 8003884:	380b      	subs	r0, #11
 8003886:	4082      	lsls	r2, r0
 8003888:	0312      	lsls	r2, r2, #12
 800388a:	2400      	movs	r4, #0
 800388c:	0b12      	lsrs	r2, r2, #12
 800388e:	e7f3      	b.n	8003878 <__aeabi_ui2d+0x2c>
 8003890:	0000041e 	.word	0x0000041e

08003894 <__aeabi_f2d>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0242      	lsls	r2, r0, #9
 8003898:	0043      	lsls	r3, r0, #1
 800389a:	0fc4      	lsrs	r4, r0, #31
 800389c:	20fe      	movs	r0, #254	@ 0xfe
 800389e:	0e1b      	lsrs	r3, r3, #24
 80038a0:	1c59      	adds	r1, r3, #1
 80038a2:	0a55      	lsrs	r5, r2, #9
 80038a4:	4208      	tst	r0, r1
 80038a6:	d00c      	beq.n	80038c2 <__aeabi_f2d+0x2e>
 80038a8:	21e0      	movs	r1, #224	@ 0xe0
 80038aa:	0089      	lsls	r1, r1, #2
 80038ac:	468c      	mov	ip, r1
 80038ae:	076d      	lsls	r5, r5, #29
 80038b0:	0b12      	lsrs	r2, r2, #12
 80038b2:	4463      	add	r3, ip
 80038b4:	051b      	lsls	r3, r3, #20
 80038b6:	4313      	orrs	r3, r2
 80038b8:	07e4      	lsls	r4, r4, #31
 80038ba:	4323      	orrs	r3, r4
 80038bc:	0028      	movs	r0, r5
 80038be:	0019      	movs	r1, r3
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d114      	bne.n	80038f0 <__aeabi_f2d+0x5c>
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d01b      	beq.n	8003902 <__aeabi_f2d+0x6e>
 80038ca:	0028      	movs	r0, r5
 80038cc:	f000 f8ac 	bl	8003a28 <__clzsi2>
 80038d0:	280a      	cmp	r0, #10
 80038d2:	dc1c      	bgt.n	800390e <__aeabi_f2d+0x7a>
 80038d4:	230b      	movs	r3, #11
 80038d6:	002a      	movs	r2, r5
 80038d8:	1a1b      	subs	r3, r3, r0
 80038da:	40da      	lsrs	r2, r3
 80038dc:	0003      	movs	r3, r0
 80038de:	3315      	adds	r3, #21
 80038e0:	409d      	lsls	r5, r3
 80038e2:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <__aeabi_f2d+0x88>)
 80038e4:	0312      	lsls	r2, r2, #12
 80038e6:	1a1b      	subs	r3, r3, r0
 80038e8:	055b      	lsls	r3, r3, #21
 80038ea:	0b12      	lsrs	r2, r2, #12
 80038ec:	0d5b      	lsrs	r3, r3, #21
 80038ee:	e7e1      	b.n	80038b4 <__aeabi_f2d+0x20>
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	d009      	beq.n	8003908 <__aeabi_f2d+0x74>
 80038f4:	0b13      	lsrs	r3, r2, #12
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	0312      	lsls	r2, r2, #12
 80038fa:	431a      	orrs	r2, r3
 80038fc:	076d      	lsls	r5, r5, #29
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <__aeabi_f2d+0x8c>)
 8003900:	e7d8      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003902:	2300      	movs	r3, #0
 8003904:	2200      	movs	r2, #0
 8003906:	e7d5      	b.n	80038b4 <__aeabi_f2d+0x20>
 8003908:	2200      	movs	r2, #0
 800390a:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <__aeabi_f2d+0x8c>)
 800390c:	e7d2      	b.n	80038b4 <__aeabi_f2d+0x20>
 800390e:	0003      	movs	r3, r0
 8003910:	002a      	movs	r2, r5
 8003912:	3b0b      	subs	r3, #11
 8003914:	409a      	lsls	r2, r3
 8003916:	2500      	movs	r5, #0
 8003918:	e7e3      	b.n	80038e2 <__aeabi_f2d+0x4e>
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	00000389 	.word	0x00000389
 8003920:	000007ff 	.word	0x000007ff

08003924 <__aeabi_d2f>:
 8003924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003926:	004b      	lsls	r3, r1, #1
 8003928:	030f      	lsls	r7, r1, #12
 800392a:	0d5b      	lsrs	r3, r3, #21
 800392c:	4c3a      	ldr	r4, [pc, #232]	@ (8003a18 <__aeabi_d2f+0xf4>)
 800392e:	0f45      	lsrs	r5, r0, #29
 8003930:	b083      	sub	sp, #12
 8003932:	0a7f      	lsrs	r7, r7, #9
 8003934:	1c5e      	adds	r6, r3, #1
 8003936:	432f      	orrs	r7, r5
 8003938:	9000      	str	r0, [sp, #0]
 800393a:	9101      	str	r1, [sp, #4]
 800393c:	0fca      	lsrs	r2, r1, #31
 800393e:	00c5      	lsls	r5, r0, #3
 8003940:	4226      	tst	r6, r4
 8003942:	d00b      	beq.n	800395c <__aeabi_d2f+0x38>
 8003944:	4935      	ldr	r1, [pc, #212]	@ (8003a1c <__aeabi_d2f+0xf8>)
 8003946:	185c      	adds	r4, r3, r1
 8003948:	2cfe      	cmp	r4, #254	@ 0xfe
 800394a:	dd13      	ble.n	8003974 <__aeabi_d2f+0x50>
 800394c:	20ff      	movs	r0, #255	@ 0xff
 800394e:	2300      	movs	r3, #0
 8003950:	05c0      	lsls	r0, r0, #23
 8003952:	4318      	orrs	r0, r3
 8003954:	07d2      	lsls	r2, r2, #31
 8003956:	4310      	orrs	r0, r2
 8003958:	b003      	add	sp, #12
 800395a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395c:	433d      	orrs	r5, r7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <__aeabi_d2f+0x42>
 8003962:	2000      	movs	r0, #0
 8003964:	e7f4      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003966:	2d00      	cmp	r5, #0
 8003968:	d0f0      	beq.n	800394c <__aeabi_d2f+0x28>
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	03db      	lsls	r3, r3, #15
 800396e:	20ff      	movs	r0, #255	@ 0xff
 8003970:	433b      	orrs	r3, r7
 8003972:	e7ed      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003974:	2c00      	cmp	r4, #0
 8003976:	dd0c      	ble.n	8003992 <__aeabi_d2f+0x6e>
 8003978:	9b00      	ldr	r3, [sp, #0]
 800397a:	00ff      	lsls	r7, r7, #3
 800397c:	019b      	lsls	r3, r3, #6
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	4183      	sbcs	r3, r0
 8003982:	0f69      	lsrs	r1, r5, #29
 8003984:	433b      	orrs	r3, r7
 8003986:	430b      	orrs	r3, r1
 8003988:	0759      	lsls	r1, r3, #29
 800398a:	d127      	bne.n	80039dc <__aeabi_d2f+0xb8>
 800398c:	08db      	lsrs	r3, r3, #3
 800398e:	b2e0      	uxtb	r0, r4
 8003990:	e7de      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003992:	0021      	movs	r1, r4
 8003994:	3117      	adds	r1, #23
 8003996:	db31      	blt.n	80039fc <__aeabi_d2f+0xd8>
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	201e      	movs	r0, #30
 800399c:	0409      	lsls	r1, r1, #16
 800399e:	4339      	orrs	r1, r7
 80039a0:	1b00      	subs	r0, r0, r4
 80039a2:	281f      	cmp	r0, #31
 80039a4:	dd2d      	ble.n	8003a02 <__aeabi_d2f+0xde>
 80039a6:	2602      	movs	r6, #2
 80039a8:	4276      	negs	r6, r6
 80039aa:	1b34      	subs	r4, r6, r4
 80039ac:	000e      	movs	r6, r1
 80039ae:	40e6      	lsrs	r6, r4
 80039b0:	0034      	movs	r4, r6
 80039b2:	2820      	cmp	r0, #32
 80039b4:	d004      	beq.n	80039c0 <__aeabi_d2f+0x9c>
 80039b6:	481a      	ldr	r0, [pc, #104]	@ (8003a20 <__aeabi_d2f+0xfc>)
 80039b8:	4684      	mov	ip, r0
 80039ba:	4463      	add	r3, ip
 80039bc:	4099      	lsls	r1, r3
 80039be:	430d      	orrs	r5, r1
 80039c0:	002b      	movs	r3, r5
 80039c2:	1e59      	subs	r1, r3, #1
 80039c4:	418b      	sbcs	r3, r1
 80039c6:	4323      	orrs	r3, r4
 80039c8:	0759      	lsls	r1, r3, #29
 80039ca:	d003      	beq.n	80039d4 <__aeabi_d2f+0xb0>
 80039cc:	210f      	movs	r1, #15
 80039ce:	4019      	ands	r1, r3
 80039d0:	2904      	cmp	r1, #4
 80039d2:	d10b      	bne.n	80039ec <__aeabi_d2f+0xc8>
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	2000      	movs	r0, #0
 80039d8:	0a5b      	lsrs	r3, r3, #9
 80039da:	e7b9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039dc:	210f      	movs	r1, #15
 80039de:	4019      	ands	r1, r3
 80039e0:	2904      	cmp	r1, #4
 80039e2:	d104      	bne.n	80039ee <__aeabi_d2f+0xca>
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	b2e0      	uxtb	r0, r4
 80039ea:	e7b1      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039ec:	2400      	movs	r4, #0
 80039ee:	3304      	adds	r3, #4
 80039f0:	0159      	lsls	r1, r3, #5
 80039f2:	d5f7      	bpl.n	80039e4 <__aeabi_d2f+0xc0>
 80039f4:	3401      	adds	r4, #1
 80039f6:	2300      	movs	r3, #0
 80039f8:	b2e0      	uxtb	r0, r4
 80039fa:	e7a9      	b.n	8003950 <__aeabi_d2f+0x2c>
 80039fc:	2000      	movs	r0, #0
 80039fe:	2300      	movs	r3, #0
 8003a00:	e7a6      	b.n	8003950 <__aeabi_d2f+0x2c>
 8003a02:	4c08      	ldr	r4, [pc, #32]	@ (8003a24 <__aeabi_d2f+0x100>)
 8003a04:	191c      	adds	r4, r3, r4
 8003a06:	002b      	movs	r3, r5
 8003a08:	40a5      	lsls	r5, r4
 8003a0a:	40c3      	lsrs	r3, r0
 8003a0c:	40a1      	lsls	r1, r4
 8003a0e:	1e68      	subs	r0, r5, #1
 8003a10:	4185      	sbcs	r5, r0
 8003a12:	4329      	orrs	r1, r5
 8003a14:	430b      	orrs	r3, r1
 8003a16:	e7d7      	b.n	80039c8 <__aeabi_d2f+0xa4>
 8003a18:	000007fe 	.word	0x000007fe
 8003a1c:	fffffc80 	.word	0xfffffc80
 8003a20:	fffffca2 	.word	0xfffffca2
 8003a24:	fffffc82 	.word	0xfffffc82

08003a28 <__clzsi2>:
 8003a28:	211c      	movs	r1, #28
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d301      	bcc.n	8003a36 <__clzsi2+0xe>
 8003a32:	0c00      	lsrs	r0, r0, #16
 8003a34:	3910      	subs	r1, #16
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	d301      	bcc.n	8003a40 <__clzsi2+0x18>
 8003a3c:	0a00      	lsrs	r0, r0, #8
 8003a3e:	3908      	subs	r1, #8
 8003a40:	091b      	lsrs	r3, r3, #4
 8003a42:	4298      	cmp	r0, r3
 8003a44:	d301      	bcc.n	8003a4a <__clzsi2+0x22>
 8003a46:	0900      	lsrs	r0, r0, #4
 8003a48:	3904      	subs	r1, #4
 8003a4a:	a202      	add	r2, pc, #8	@ (adr r2, 8003a54 <__clzsi2+0x2c>)
 8003a4c:	5c10      	ldrb	r0, [r2, r0]
 8003a4e:	1840      	adds	r0, r0, r1
 8003a50:	4770      	bx	lr
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	02020304 	.word	0x02020304
 8003a58:	01010101 	.word	0x01010101
	...

08003a64 <__clzdi2>:
 8003a64:	b510      	push	{r4, lr}
 8003a66:	2900      	cmp	r1, #0
 8003a68:	d103      	bne.n	8003a72 <__clzdi2+0xe>
 8003a6a:	f7ff ffdd 	bl	8003a28 <__clzsi2>
 8003a6e:	3020      	adds	r0, #32
 8003a70:	e002      	b.n	8003a78 <__clzdi2+0x14>
 8003a72:	0008      	movs	r0, r1
 8003a74:	f7ff ffd8 	bl	8003a28 <__clzsi2>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

08003a7c <WriteMemRegister>:
ENS160raw raw;
ENS160prediction pred;
ENS160hwsw hwsw;
ENS160State ENSState = ENS_STATE_INIT;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	0004      	movs	r4, r0
 8003a84:	0008      	movs	r0, r1
 8003a86:	60ba      	str	r2, [r7, #8]
 8003a88:	0019      	movs	r1, r3
 8003a8a:	260e      	movs	r6, #14
 8003a8c:	19bb      	adds	r3, r7, r6
 8003a8e:	1c22      	adds	r2, r4, #0
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	230c      	movs	r3, #12
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	1c02      	adds	r2, r0, #0
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	1dbb      	adds	r3, r7, #6
 8003a9c:	1c0a      	adds	r2, r1, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <WriteMemRegister+0x4e>
    return WriteMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <WriteMemRegister+0x58>)
 8003aaa:	681c      	ldr	r4, [r3, #0]
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <WriteMemRegister+0x5c>)
 8003aae:	7918      	ldrb	r0, [r3, #4]
 8003ab0:	68bd      	ldr	r5, [r7, #8]
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	8819      	ldrh	r1, [r3, #0]
 8003abc:	1dbb      	adds	r3, r7, #6
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	002b      	movs	r3, r5
 8003ac4:	47a0      	blx	r4
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	e000      	b.n	8003acc <WriteMemRegister+0x50>
  }
  return false;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b005      	add	sp, #20
 8003ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad4:	20000468 	.word	0x20000468
 8003ad8:	20000498 	.word	0x20000498

08003adc <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	0004      	movs	r4, r0
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	60ba      	str	r2, [r7, #8]
 8003ae8:	0019      	movs	r1, r3
 8003aea:	260e      	movs	r6, #14
 8003aec:	19bb      	adds	r3, r7, r6
 8003aee:	1c22      	adds	r2, r4, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	230c      	movs	r3, #12
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	1c02      	adds	r2, r0, #0
 8003af8:	801a      	strh	r2, [r3, #0]
 8003afa:	1dbb      	adds	r3, r7, #6
 8003afc:	1c0a      	adds	r2, r1, #0
 8003afe:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <ReadMemRegister+0x4e>
    return ReadMemFunction(hwsw._slaveaddr, MemAddress, MemSize, buffer, nrBytes);
 8003b08:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <ReadMemRegister+0x58>)
 8003b0a:	681c      	ldr	r4, [r3, #0]
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <ReadMemRegister+0x5c>)
 8003b0e:	7918      	ldrb	r0, [r3, #4]
 8003b10:	68bd      	ldr	r5, [r7, #8]
 8003b12:	230c      	movs	r3, #12
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	19bb      	adds	r3, r7, r6
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	1dbb      	adds	r3, r7, #6
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	002b      	movs	r3, r5
 8003b24:	47a0      	blx	r4
 8003b26:	0003      	movs	r3, r0
 8003b28:	e000      	b.n	8003b2c <ReadMemRegister+0x50>
  }
  return false;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b005      	add	sp, #20
 8003b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b34:	20000464 	.word	0x20000464
 8003b38:	20000498 	.word	0x20000498

08003b3c <ResetENS160samplecounter>:

void ResetENS160samplecounter() {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  enscnt = 0;
 8003b40:	4b02      	ldr	r3, [pc, #8]	@ (8003b4c <ResetENS160samplecounter+0x10>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	20000460 	.word	0x20000460

08003b50 <setENS160TimeStamp>:
void setENS160TimeStamp(uint32_t ticks) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  ENS160TimeStamp = HAL_GetTick() + ticks;
 8003b58:	f010 fff4 	bl	8014b44 <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	18d2      	adds	r2, r2, r3
 8003b62:	4b03      	ldr	r3, [pc, #12]	@ (8003b70 <setENS160TimeStamp+0x20>)
 8003b64:	601a      	str	r2, [r3, #0]
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	2000045c 	.word	0x2000045c

08003b74 <ENS_Init>:

void ENS160_set_debug(bool debug) {
  debugENS160 = debug;
}

void ENS_Init(I2CReadMEM readFunction, I2CWriteMEM writeFunction) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readFunction;
 8003b7e:	4b05      	ldr	r3, [pc, #20]	@ (8003b94 <ENS_Init+0x20>)
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeFunction;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <ENS_Init+0x24>)
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
}	
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b002      	add	sp, #8
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000464 	.word	0x20000464
 8003b98:	20000468 	.word	0x20000468

08003b9c <ENS160_reset>:



// Sends a reset to the ENS160. Returns false on I2C problems.
bool ENS160_reset(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t data = ENS160_OPMODE_RESET;
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	22f0      	movs	r2, #240	@ 0xf0
 8003ba6:	701a      	strb	r2, [r3, #0]
	uint8_t result = WriteMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 8003ba8:	1dba      	adds	r2, r7, #6
 8003baa:	2301      	movs	r3, #1
 8003bac:	2101      	movs	r1, #1
 8003bae:	2010      	movs	r0, #16
 8003bb0:	f7ff ff64 	bl	8003a7c <WriteMemRegister>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING+20);                   // Wait to boot after reset
 8003bbc:	201e      	movs	r0, #30
 8003bbe:	f010 ffcb 	bl	8014b58 <HAL_Delay>
	return result;
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	1e5a      	subs	r2, r3, #1
 8003bc8:	4193      	sbcs	r3, r2
 8003bca:	b2db      	uxtb	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <ENS160_checkPartID>:

// Reads the part ID and confirms valid sensor
bool ENS160_checkPartID(void) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
	uint8_t i2cbuf[2] = {0};
 8003bda:	003b      	movs	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	801a      	strh	r2, [r3, #0]
	uint16_t part_id;
	bool result = false;
 8003be0:	1dfb      	adds	r3, r7, #7
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	
	ReadMemRegister(ENS160_REG_PART_ID, 1, &i2cbuf[0], 2);
 8003be6:	003a      	movs	r2, r7
 8003be8:	2302      	movs	r3, #2
 8003bea:	2101      	movs	r1, #1
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7ff ff75 	bl	8003adc <ReadMemRegister>

	part_id = i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8);
 8003bf2:	003b      	movs	r3, r7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b21a      	sxth	r2, r3
 8003bf8:	003b      	movs	r3, r7
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	b21b      	sxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21b      	sxth	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	1d3b      	adds	r3, r7, #4
 8003c08:	801a      	strh	r2, [r3, #0]
	if (debugENS160) {
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <ENS160_checkPartID+0xa8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d015      	beq.n	8003c3e <ENS160_checkPartID+0x6a>
		Debug("ENS160 checkPartID() result: %s", (part_id == ENS160_PARTID)?"ENS160 ok":(part_id == ENS161_PARTID)?"ENS161 ok":"nok");
 8003c12:	1d3b      	adds	r3, r7, #4
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	23b0      	movs	r3, #176	@ 0xb0
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d009      	beq.n	8003c32 <ENS160_checkPartID+0x5e>
 8003c1e:	1d3b      	adds	r3, r7, #4
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	2362      	movs	r3, #98	@ 0x62
 8003c24:	33ff      	adds	r3, #255	@ 0xff
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d101      	bne.n	8003c2e <ENS160_checkPartID+0x5a>
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <ENS160_checkPartID+0xac>)
 8003c2c:	e002      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c2e:	4b15      	ldr	r3, [pc, #84]	@ (8003c84 <ENS160_checkPartID+0xb0>)
 8003c30:	e000      	b.n	8003c34 <ENS160_checkPartID+0x60>
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <ENS160_checkPartID+0xb4>)
 8003c34:	4a15      	ldr	r2, [pc, #84]	@ (8003c8c <ENS160_checkPartID+0xb8>)
 8003c36:	4916      	ldr	r1, [pc, #88]	@ (8003c90 <ENS160_checkPartID+0xbc>)
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f010 fa0b 	bl	8014054 <CreateLine>
	}	

	if (part_id == ENS160_PARTID) {
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	23b0      	movs	r3, #176	@ 0xb0
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d106      	bne.n	8003c58 <ENS160_checkPartID+0x84>
	  hwsw._revENS16x = 0;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c50:	1dfb      	adds	r3, r7, #7
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
 8003c56:	e00b      	b.n	8003c70 <ENS160_checkPartID+0x9c>
	}
	else if (part_id == ENS161_PARTID) {
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	2362      	movs	r3, #98	@ 0x62
 8003c5e:	33ff      	adds	r3, #255	@ 0xff
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d105      	bne.n	8003c70 <ENS160_checkPartID+0x9c>
	  hwsw._revENS16x = 1;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <ENS160_checkPartID+0xc0>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	70da      	strb	r2, [r3, #3]
	  result = true;
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000458 	.word	0x20000458
 8003c80:	0802a7e0 	.word	0x0802a7e0
 8003c84:	0802a7ec 	.word	0x0802a7ec
 8003c88:	0802a7f0 	.word	0x0802a7f0
 8003c8c:	0802a7fc 	.word	0x0802a7fc
 8003c90:	0802a81c 	.word	0x0802a81c
 8003c94:	20000498 	.word	0x20000498

08003c98 <ENS160_clearCommand>:


// Initialize idle mode and confirms 
bool ENS160_clearCommand(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af02      	add	r7, sp, #8
	static uint8_t result;
	static uint8_t i2cbuf = ENS160_COMMAND_NOP;
	result = WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003c9e:	4a27      	ldr	r2, [pc, #156]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	2012      	movs	r0, #18
 8003ca6:	f7ff fee9 	bl	8003a7c <WriteMemRegister>
 8003caa:	0003      	movs	r3, r0
 8003cac:	001a      	movs	r2, r3
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cb0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8003cb2:	200a      	movs	r0, #10
 8003cb4:	f010 ff50 	bl	8014b58 <HAL_Delay>
  i2cbuf = ENS160_COMMAND_CLRGPR;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cba:	22cc      	movs	r2, #204	@ 0xcc
 8003cbc:	701a      	strb	r2, [r3, #0]
  result &= WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf, 1);
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2012      	movs	r0, #18
 8003cc6:	f7ff fed9 	bl	8003a7c <WriteMemRegister>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cd8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003cda:	200a      	movs	r0, #10
 8003cdc:	f010 ff3c 	bl	8014b58 <HAL_Delay>
	
  result &= ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &i2cbuf, 1);
 8003ce0:	4a16      	ldr	r2, [pc, #88]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2020      	movs	r0, #32
 8003ce8:	f7ff fef8 	bl	8003adc <ReadMemRegister>
 8003cec:	0003      	movs	r3, r0
 8003cee:	001a      	movs	r2, r3
 8003cf0:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003cfa:	701a      	strb	r2, [r3, #0]

	if (debugENS160) {
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <ENS160_clearCommand+0xac>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <ENS160_clearCommand+0x8e>
		Debug("clearCommand() status of ENS16X: 0x%02X, %s", i2cbuf, (i2cbuf == 00) ? "ok" : "nok");
 8003d04:	4b0d      	ldr	r3, [pc, #52]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	0018      	movs	r0, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <ENS160_clearCommand+0xa4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <ENS160_clearCommand+0x7e>
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <ENS160_clearCommand+0xb0>)
 8003d14:	e000      	b.n	8003d18 <ENS160_clearCommand+0x80>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <ENS160_clearCommand+0xb4>)
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <ENS160_clearCommand+0xb8>)
 8003d1a:	490e      	ldr	r1, [pc, #56]	@ (8003d54 <ENS160_clearCommand+0xbc>)
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	0003      	movs	r3, r0
 8003d20:	2003      	movs	r0, #3
 8003d22:	f010 f997 	bl	8014054 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d26:	200a      	movs	r0, #10
 8003d28:	f010 ff16 	bl	8014b58 <HAL_Delay>
		
	return result;
 8003d2c:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <ENS160_clearCommand+0xa8>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	1e5a      	subs	r2, r3, #1
 8003d32:	4193      	sbcs	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
}
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	200004a0 	.word	0x200004a0
 8003d40:	200004a1 	.word	0x200004a1
 8003d44:	20000458 	.word	0x20000458
 8003d48:	0802a820 	.word	0x0802a820
 8003d4c:	0802a7ec 	.word	0x0802a7ec
 8003d50:	0802a824 	.word	0x0802a824
 8003d54:	0802a81c 	.word	0x0802a81c

08003d58 <ENS160_getFirmware>:

// Read firmware revisions
bool ENS160_getFirmware() {
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af02      	add	r7, sp, #8
  uint8_t i2cbuf[3];

	ENS160_clearCommand();
 8003d5e:	f7ff ff9b 	bl	8003c98 <ENS160_clearCommand>
	
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003d62:	200a      	movs	r0, #10
 8003d64:	f010 fef8 	bl	8014b58 <HAL_Delay>
	
	i2cbuf[0] = ENS160_COMMAND_GET_APPVER;
 8003d68:	1d3b      	adds	r3, r7, #4
 8003d6a:	220e      	movs	r2, #14
 8003d6c:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(ENS160_REG_COMMAND, 1, &i2cbuf[0], 1);
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	2301      	movs	r3, #1
 8003d72:	2101      	movs	r1, #1
 8003d74:	2012      	movs	r0, #18
 8003d76:	f7ff fe81 	bl	8003a7c <WriteMemRegister>

	HAL_Delay(10);
 8003d7a:	200a      	movs	r0, #10
 8003d7c:	f010 feec 	bl	8014b58 <HAL_Delay>
	ReadMemRegister(ENS160_REG_GPR_READ_4, 1, &i2cbuf[0], 3);
 8003d80:	1d3a      	adds	r2, r7, #4
 8003d82:	2303      	movs	r3, #3
 8003d84:	2101      	movs	r1, #1
 8003d86:	204c      	movs	r0, #76	@ 0x4c
 8003d88:	f7ff fea8 	bl	8003adc <ReadMemRegister>

	hwsw._fw_ver_major = i2cbuf[0];
 8003d8c:	1d3b      	adds	r3, r7, #4
 8003d8e:	781a      	ldrb	r2, [r3, #0]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d92:	701a      	strb	r2, [r3, #0]
	hwsw._fw_ver_minor = i2cbuf[1];
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	785a      	ldrb	r2, [r3, #1]
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003d9a:	705a      	strb	r2, [r3, #1]
	hwsw._fw_ver_build = i2cbuf[2];
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	789a      	ldrb	r2, [r3, #2]
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da2:	709a      	strb	r2, [r3, #2]
	
	if (hwsw._fw_ver_major > 6) {
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b06      	cmp	r3, #6
 8003daa:	d903      	bls.n	8003db4 <ENS160_getFirmware+0x5c>
	  hwsw._revENS16x = 1;
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	70da      	strb	r2, [r3, #3]
 8003db2:	e002      	b.n	8003dba <ENS160_getFirmware+0x62>
	}
	else {
	  hwsw._revENS16x = 0;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	70da      	strb	r2, [r3, #3]
	}

	if (debugENS160) {
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <ENS160_getFirmware+0xa8>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00f      	beq.n	8003de2 <ENS160_getFirmware+0x8a>
		Debug("Firmware version:  %d.%d", hwsw._fw_ver_major, hwsw._fw_ver_minor, hwsw._fw_ver_build);
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	001c      	movs	r4, r3
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <ENS160_getFirmware+0xa4>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <ENS160_getFirmware+0xac>)
 8003dd4:	490c      	ldr	r1, [pc, #48]	@ (8003e08 <ENS160_getFirmware+0xb0>)
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	9000      	str	r0, [sp, #0]
 8003dda:	0023      	movs	r3, r4
 8003ddc:	2003      	movs	r0, #3
 8003dde:	f010 f939 	bl	8014054 <CreateLine>
	}
	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003de2:	200a      	movs	r0, #10
 8003de4:	f010 feb8 	bl	8014b58 <HAL_Delay>
	
	return (bool)i2cbuf[0];
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	4193      	sbcs	r3, r2
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b003      	add	sp, #12
 8003df8:	bd90      	pop	{r4, r7, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	20000498 	.word	0x20000498
 8003e00:	20000458 	.word	0x20000458
 8003e04:	0802a850 	.word	0x0802a850
 8003e08:	0802a81c 	.word	0x0802a81c

08003e0c <ENS160_setMode>:

// Set operation mode of sensor
bool ENS160_setMode(uint8_t mode) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	0002      	movs	r2, r0
 8003e14:	1dfb      	adds	r3, r7, #7
 8003e16:	701a      	strb	r2, [r3, #0]
	 uint8_t result;
	
	//LP only valid for rev>0
	if ((mode == ENS160_OPMODE_LP) && (hwsw._revENS16x == 0)) {
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d108      	bne.n	8003e32 <ENS160_setMode+0x26>
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <ENS160_setMode+0x58>)
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <ENS160_setMode+0x26>
	  result = 1;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	e00a      	b.n	8003e48 <ENS160_setMode+0x3c>
	}
	else {
	  result = WriteMemRegister(ENS160_REG_OPMODE, 1, &mode, 1);
 8003e32:	1dfa      	adds	r2, r7, #7
 8003e34:	2301      	movs	r3, #1
 8003e36:	2101      	movs	r1, #1
 8003e38:	2010      	movs	r0, #16
 8003e3a:	f7ff fe1f 	bl	8003a7c <WriteMemRegister>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	001a      	movs	r2, r3
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
 8003e48:	200a      	movs	r0, #10
 8003e4a:	f010 fe85 	bl	8014b58 <HAL_Delay>
	
	return result;
 8003e4e:	230f      	movs	r3, #15
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	4193      	sbcs	r3, r2
 8003e58:	b2db      	uxtb	r3, r3
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	20000498 	.word	0x20000498

08003e68 <ENS_DeviceConnected>:
	
	return result;
}

// Init I2C communication, resets ENS160 and checks its PART_ID. Returns false on I2C problems or wrong PART_ID.
bool ENS_DeviceConnected() {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
//  HAL_Delay(ENS160_BOOTING);                   // Wait to boot after reset
  bool _available = true;            // ENS160 available
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
  hwsw._slaveaddr = ENS160_I2CADDR_0;
 8003e74:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003e76:	2252      	movs	r2, #82	@ 0x52
 8003e78:	711a      	strb	r2, [r3, #4]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003e7a:	1dbb      	adds	r3, r7, #6
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e02d      	b.n	8003ede <ENS_DeviceConnected+0x76>
    _available &= ENS160_reset();
 8003e82:	f7ff fe8b 	bl	8003b9c <ENS160_reset>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	401a      	ands	r2, r3
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	1e51      	subs	r1, r2, #1
 8003e94:	418a      	sbcs	r2, r1
 8003e96:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_checkPartID();
 8003e98:	f7ff fe9c 	bl	8003bd4 <ENS160_checkPartID>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	1dfb      	adds	r3, r7, #7
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	401a      	ands	r2, r3
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	1e51      	subs	r1, r2, #1
 8003eaa:	418a      	sbcs	r2, r1
 8003eac:	701a      	strb	r2, [r3, #0]
    if (!_available) {
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <ENS_DeviceConnected+0x6c>
      Info("ENS160 trying alternate address");
 8003ebc:	4a26      	ldr	r2, [pc, #152]	@ (8003f58 <ENS_DeviceConnected+0xf0>)
 8003ebe:	4b27      	ldr	r3, [pc, #156]	@ (8003f5c <ENS_DeviceConnected+0xf4>)
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f010 f8c6 	bl	8014054 <CreateLine>
      hwsw._slaveaddr = ENS160_I2CADDR_1;
 8003ec8:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <ENS_DeviceConnected+0xec>)
 8003eca:	2253      	movs	r2, #83	@ 0x53
 8003ecc:	711a      	strb	r2, [r3, #4]
      _available = true;            // next try, ENS160 available?
 8003ece:	1dfb      	adds	r3, r7, #7
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
  for (uint8_t tl= 0; tl < 2; tl++) {
 8003ed4:	1dbb      	adds	r3, r7, #6
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1dbb      	adds	r3, r7, #6
 8003eda:	3201      	adds	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	1dbb      	adds	r3, r7, #6
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d9cd      	bls.n	8003e82 <ENS_DeviceConnected+0x1a>
    }
  }

  if (_available) {
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02b      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
    _available &= ENS160_setMode(ENS160_OPMODE_IDLE);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7ff ff8c 	bl	8003e0c <ENS160_setMode>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	401a      	ands	r2, r3
 8003efe:	1dfb      	adds	r3, r7, #7
 8003f00:	1e51      	subs	r1, r2, #1
 8003f02:	418a      	sbcs	r2, r1
 8003f04:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_clearCommand();
 8003f06:	f7ff fec7 	bl	8003c98 <ENS160_clearCommand>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	001a      	movs	r2, r3
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	401a      	ands	r2, r3
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	1e51      	subs	r1, r2, #1
 8003f18:	418a      	sbcs	r2, r1
 8003f1a:	701a      	strb	r2, [r3, #0]
    _available &= ENS160_getFirmware();
 8003f1c:	f7ff ff1c 	bl	8003d58 <ENS160_getFirmware>
 8003f20:	0003      	movs	r3, r0
 8003f22:	001a      	movs	r2, r3
 8003f24:	1dfb      	adds	r3, r7, #7
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	401a      	ands	r2, r3
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	1e51      	subs	r1, r2, #1
 8003f2e:	418a      	sbcs	r2, r1
 8003f30:	701a      	strb	r2, [r3, #0]
    if (debugENS160) {
 8003f32:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <ENS_DeviceConnected+0xf8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <ENS_DeviceConnected+0xde>
      Debug("ENS160 in idle mode");
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <ENS_DeviceConnected+0xfc>)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <ENS_DeviceConnected+0x100>)
 8003f3e:	0019      	movs	r1, r3
 8003f40:	2003      	movs	r0, #3
 8003f42:	f010 f887 	bl	8014054 <CreateLine>
    }
  }
  return _available;
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b002      	add	sp, #8
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	20000498 	.word	0x20000498
 8003f58:	0802a86c 	.word	0x0802a86c
 8003f5c:	0802a88c 	.word	0x0802a88c
 8003f60:	20000458 	.word	0x20000458
 8003f64:	0802a890 	.word	0x0802a890
 8003f68:	0802a81c 	.word	0x0802a81c

08003f6c <ENS160_readStatus>:
	}
	return 1;
	
}

uint8_t ENS160_readStatus(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint8_t status;
  ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 8003f72:	1dfa      	adds	r2, r7, #7
 8003f74:	2301      	movs	r3, #1
 8003f76:	2101      	movs	r1, #1
 8003f78:	2020      	movs	r0, #32
 8003f7a:	f7ff fdaf 	bl	8003adc <ReadMemRegister>

  if (debugENS160) {
 8003f7e:	4b08      	ldr	r3, [pc, #32]	@ (8003fa0 <ENS160_readStatus+0x34>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d006      	beq.n	8003f94 <ENS160_readStatus+0x28>
    Debug("ENS160 Status: %d", status);
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	4a06      	ldr	r2, [pc, #24]	@ (8003fa4 <ENS160_readStatus+0x38>)
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <ENS160_readStatus+0x3c>)
 8003f8e:	2003      	movs	r0, #3
 8003f90:	f010 f860 	bl	8014054 <CreateLine>
  }
  return status;
 8003f94:	1dfb      	adds	r3, r7, #7
 8003f96:	781b      	ldrb	r3, [r3, #0]
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000458 	.word	0x20000458
 8003fa4:	0802a8c4 	.word	0x0802a8c4
 8003fa8:	0802a81c 	.word	0x0802a81c

08003fac <ENS160_measure>:


// Perform prediction measurement and stores result in internal variables
bool ENS160_measure(bool waitForNew) {
 8003fac:	b5b0      	push	{r4, r5, r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  bool newData = false;
 8003fb8:	2317      	movs	r3, #23
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
	uint8_t status;

	// Set default status for early bail out
	if (debugENS160) {
 8003fc0:	4b33      	ldr	r3, [pc, #204]	@ (8004090 <ENS160_measure+0xe4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <ENS160_measure+0x28>
	  Debug("ENS160 Start measurement");
 8003fc8:	4a32      	ldr	r2, [pc, #200]	@ (8004094 <ENS160_measure+0xe8>)
 8003fca:	4b33      	ldr	r3, [pc, #204]	@ (8004098 <ENS160_measure+0xec>)
 8003fcc:	0019      	movs	r1, r3
 8003fce:	2003      	movs	r0, #3
 8003fd0:	f010 f840 	bl	8014054 <CreateLine>
	}
	
	if (waitForNew) {
 8003fd4:	1dfb      	adds	r3, r7, #7
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <ENS160_measure+0x52>
		do {
			HAL_Delay(1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f010 fdbb 	bl	8014b58 <HAL_Delay>
			status = ENS160_readStatus();
 8003fe2:	2516      	movs	r5, #22
 8003fe4:	197c      	adds	r4, r7, r5
 8003fe6:	f7ff ffc1 	bl	8003f6c <ENS160_readStatus>
 8003fea:	0003      	movs	r3, r0
 8003fec:	7023      	strb	r3, [r4, #0]
		} while (!IS_NEWDAT(status));
 8003fee:	197b      	adds	r3, r7, r5
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ef      	beq.n	8003fdc <ENS160_measure+0x30>
 8003ffc:	e002      	b.n	8004004 <ENS160_measure+0x58>
	}
	else {
    HAL_Delay(10);
 8003ffe:	200a      	movs	r0, #10
 8004000:	f010 fdaa 	bl	8014b58 <HAL_Delay>
	}
	
	newData = true;
 8004004:	2317      	movs	r3, #23
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	2201      	movs	r2, #1
 800400a:	701a      	strb	r2, [r3, #0]
	ReadMemRegister(ENS160_REG_DATA_AQI, 1, &i2cbuf[0], 7);
 800400c:	240c      	movs	r4, #12
 800400e:	193a      	adds	r2, r7, r4
 8004010:	2307      	movs	r3, #7
 8004012:	2101      	movs	r1, #1
 8004014:	2021      	movs	r0, #33	@ 0x21
 8004016:	f7ff fd61 	bl	8003adc <ReadMemRegister>
	pred._data_aqi = i2cbuf[0];
 800401a:	0021      	movs	r1, r4
 800401c:	187b      	adds	r3, r7, r1
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b1e      	ldr	r3, [pc, #120]	@ (800409c <ENS160_measure+0xf0>)
 8004022:	701a      	strb	r2, [r3, #0]
	pred._data_tvoc = i2cbuf[1] | ((uint16_t)i2cbuf[2] << 8);
 8004024:	187b      	adds	r3, r7, r1
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	b21a      	sxth	r2, r3
 800402a:	187b      	adds	r3, r7, r1
 800402c:	789b      	ldrb	r3, [r3, #2]
 800402e:	b21b      	sxth	r3, r3
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	b21b      	sxth	r3, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	b21b      	sxth	r3, r3
 8004038:	b29a      	uxth	r2, r3
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <ENS160_measure+0xf0>)
 800403c:	805a      	strh	r2, [r3, #2]
	pred._data_eco2 = i2cbuf[3] | ((uint16_t)i2cbuf[4] << 8);
 800403e:	187b      	adds	r3, r7, r1
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	b21a      	sxth	r2, r3
 8004044:	187b      	adds	r3, r7, r1
 8004046:	791b      	ldrb	r3, [r3, #4]
 8004048:	b21b      	sxth	r3, r3
 800404a:	021b      	lsls	r3, r3, #8
 800404c:	b21b      	sxth	r3, r3
 800404e:	4313      	orrs	r3, r2
 8004050:	b21b      	sxth	r3, r3
 8004052:	b29a      	uxth	r2, r3
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <ENS160_measure+0xf0>)
 8004056:	809a      	strh	r2, [r3, #4]
	if (hwsw._revENS16x > 0) pred._data_aqi500 = ((uint16_t)i2cbuf[5]) | ((uint16_t)i2cbuf[6] << 8);
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <ENS160_measure+0xf4>)
 800405a:	78db      	ldrb	r3, [r3, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00d      	beq.n	800407c <ENS160_measure+0xd0>
 8004060:	187b      	adds	r3, r7, r1
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	b21a      	sxth	r2, r3
 8004066:	187b      	adds	r3, r7, r1
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	b21b      	sxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21b      	sxth	r3, r3
 8004074:	b29a      	uxth	r2, r3
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <ENS160_measure+0xf0>)
 8004078:	80da      	strh	r2, [r3, #6]
 800407a:	e002      	b.n	8004082 <ENS160_measure+0xd6>
  	else pred._data_aqi500 = 0;
 800407c:	4b07      	ldr	r3, [pc, #28]	@ (800409c <ENS160_measure+0xf0>)
 800407e:	2200      	movs	r2, #0
 8004080:	80da      	strh	r2, [r3, #6]
	
	return newData;
 8004082:	2317      	movs	r3, #23
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
}
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bdb0      	pop	{r4, r5, r7, pc}
 8004090:	20000458 	.word	0x20000458
 8004094:	0802a8d8 	.word	0x0802a8d8
 8004098:	0802a81c 	.word	0x0802a81c
 800409c:	20000490 	.word	0x20000490
 80040a0:	20000498 	.word	0x20000498

080040a4 <ENS160_measureRaw>:

// Perform raw measurement
bool ENS160_measureRaw(bool waitForNew) {
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	0002      	movs	r2, r0
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	701a      	strb	r2, [r3, #0]
	uint8_t i2cbuf[8];
  uint8_t status;
	bool newData = false;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
	// Set default status for early bail out
	if (debugENS160) {
 80040b8:	4bae      	ldr	r3, [pc, #696]	@ (8004374 <ENS160_measureRaw+0x2d0>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <ENS160_measureRaw+0x28>
	  Debug("ENS160 Start measurement raw");
 80040c0:	4aad      	ldr	r2, [pc, #692]	@ (8004378 <ENS160_measureRaw+0x2d4>)
 80040c2:	4bae      	ldr	r3, [pc, #696]	@ (800437c <ENS160_measureRaw+0x2d8>)
 80040c4:	0019      	movs	r1, r3
 80040c6:	2003      	movs	r0, #3
 80040c8:	f00f ffc4 	bl	8014054 <CreateLine>
	}
	
	if (waitForNew) {
 80040cc:	1dfb      	adds	r3, r7, #7
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <ENS160_measureRaw+0x52>
		do {
			HAL_Delay(1);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f010 fd3f 	bl	8014b58 <HAL_Delay>
			ReadMemRegister(ENS160_REG_DATA_STATUS, 1, &status, 1);
 80040da:	240b      	movs	r4, #11
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	2301      	movs	r3, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	2020      	movs	r0, #32
 80040e4:	f7ff fcfa 	bl	8003adc <ReadMemRegister>
		} while (!IS_NEWGPR(status));
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <ENS160_measureRaw+0x30>
	}
	
		// Read raw resistance values
    ReadMemRegister(ENS160_REG_GPR_READ_0, 1, &i2cbuf[0], 8);
 80040f6:	240c      	movs	r4, #12
 80040f8:	193a      	adds	r2, r7, r4
 80040fa:	2308      	movs	r3, #8
 80040fc:	2101      	movs	r1, #1
 80040fe:	2048      	movs	r0, #72	@ 0x48
 8004100:	f7ff fcec 	bl	8003adc <ReadMemRegister>

    raw._hp0_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004104:	193b      	adds	r3, r7, r4
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	001a      	movs	r2, r3
 800410a:	193b      	adds	r3, r7, r4
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	4313      	orrs	r3, r2
 8004112:	0018      	movs	r0, r3
 8004114:	f7fd fbd8 	bl	80018c8 <__aeabi_ui2f>
 8004118:	1c03      	adds	r3, r0, #0
 800411a:	218a      	movs	r1, #138	@ 0x8a
 800411c:	05c9      	lsls	r1, r1, #23
 800411e:	1c18      	adds	r0, r3, #0
 8004120:	f7fc fdc0 	bl	8000ca4 <__aeabi_fdiv>
 8004124:	1c03      	adds	r3, r0, #0
 8004126:	1c18      	adds	r0, r3, #0
 8004128:	f7ff fbb4 	bl	8003894 <__aeabi_f2d>
 800412c:	0002      	movs	r2, r0
 800412e:	000b      	movs	r3, r1
 8004130:	2000      	movs	r0, #0
 8004132:	2180      	movs	r1, #128	@ 0x80
 8004134:	05c9      	lsls	r1, r1, #23
 8004136:	f025 f88b 	bl	8029250 <pow>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fc fa83 	bl	800064c <__aeabi_d2uiz>
 8004146:	0002      	movs	r2, r0
 8004148:	4b8d      	ldr	r3, [pc, #564]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800414a:	601a      	str	r2, [r3, #0]
    raw._hp1_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 800414c:	193b      	adds	r3, r7, r4
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	001a      	movs	r2, r3
 8004152:	193b      	adds	r3, r7, r4
 8004154:	78db      	ldrb	r3, [r3, #3]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	4313      	orrs	r3, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f7fd fbb4 	bl	80018c8 <__aeabi_ui2f>
 8004160:	1c03      	adds	r3, r0, #0
 8004162:	218a      	movs	r1, #138	@ 0x8a
 8004164:	05c9      	lsls	r1, r1, #23
 8004166:	1c18      	adds	r0, r3, #0
 8004168:	f7fc fd9c 	bl	8000ca4 <__aeabi_fdiv>
 800416c:	1c03      	adds	r3, r0, #0
 800416e:	1c18      	adds	r0, r3, #0
 8004170:	f7ff fb90 	bl	8003894 <__aeabi_f2d>
 8004174:	0002      	movs	r2, r0
 8004176:	000b      	movs	r3, r1
 8004178:	2000      	movs	r0, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	05c9      	lsls	r1, r1, #23
 800417e:	f025 f867 	bl	8029250 <pow>
 8004182:	0002      	movs	r2, r0
 8004184:	000b      	movs	r3, r1
 8004186:	0010      	movs	r0, r2
 8004188:	0019      	movs	r1, r3
 800418a:	f7fc fa5f 	bl	800064c <__aeabi_d2uiz>
 800418e:	0002      	movs	r2, r0
 8004190:	4b7b      	ldr	r3, [pc, #492]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004192:	609a      	str	r2, [r3, #8]
    raw._hp2_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 8004194:	193b      	adds	r3, r7, r4
 8004196:	791b      	ldrb	r3, [r3, #4]
 8004198:	001a      	movs	r2, r3
 800419a:	193b      	adds	r3, r7, r4
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	4313      	orrs	r3, r2
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fd fb90 	bl	80018c8 <__aeabi_ui2f>
 80041a8:	1c03      	adds	r3, r0, #0
 80041aa:	218a      	movs	r1, #138	@ 0x8a
 80041ac:	05c9      	lsls	r1, r1, #23
 80041ae:	1c18      	adds	r0, r3, #0
 80041b0:	f7fc fd78 	bl	8000ca4 <__aeabi_fdiv>
 80041b4:	1c03      	adds	r3, r0, #0
 80041b6:	1c18      	adds	r0, r3, #0
 80041b8:	f7ff fb6c 	bl	8003894 <__aeabi_f2d>
 80041bc:	0002      	movs	r2, r0
 80041be:	000b      	movs	r3, r1
 80041c0:	2000      	movs	r0, #0
 80041c2:	2180      	movs	r1, #128	@ 0x80
 80041c4:	05c9      	lsls	r1, r1, #23
 80041c6:	f025 f843 	bl	8029250 <pow>
 80041ca:	0002      	movs	r2, r0
 80041cc:	000b      	movs	r3, r1
 80041ce:	0010      	movs	r0, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	f7fc fa3b 	bl	800064c <__aeabi_d2uiz>
 80041d6:	0002      	movs	r2, r0
 80041d8:	4b69      	ldr	r3, [pc, #420]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80041da:	611a      	str	r2, [r3, #16]
    raw._hp3_rs = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 80041dc:	193b      	adds	r3, r7, r4
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	001a      	movs	r2, r3
 80041e2:	193b      	adds	r3, r7, r4
 80041e4:	79db      	ldrb	r3, [r3, #7]
 80041e6:	021b      	lsls	r3, r3, #8
 80041e8:	4313      	orrs	r3, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7fd fb6c 	bl	80018c8 <__aeabi_ui2f>
 80041f0:	1c03      	adds	r3, r0, #0
 80041f2:	218a      	movs	r1, #138	@ 0x8a
 80041f4:	05c9      	lsls	r1, r1, #23
 80041f6:	1c18      	adds	r0, r3, #0
 80041f8:	f7fc fd54 	bl	8000ca4 <__aeabi_fdiv>
 80041fc:	1c03      	adds	r3, r0, #0
 80041fe:	1c18      	adds	r0, r3, #0
 8004200:	f7ff fb48 	bl	8003894 <__aeabi_f2d>
 8004204:	0002      	movs	r2, r0
 8004206:	000b      	movs	r3, r1
 8004208:	2000      	movs	r0, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	05c9      	lsls	r1, r1, #23
 800420e:	f025 f81f 	bl	8029250 <pow>
 8004212:	0002      	movs	r2, r0
 8004214:	000b      	movs	r3, r1
 8004216:	0010      	movs	r0, r2
 8004218:	0019      	movs	r1, r3
 800421a:	f7fc fa17 	bl	800064c <__aeabi_d2uiz>
 800421e:	0002      	movs	r2, r0
 8004220:	4b57      	ldr	r3, [pc, #348]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004222:	619a      	str	r2, [r3, #24]
	
		// Read baselines
    ReadMemRegister(ENS160_REG_DATA_BL, 1, &i2cbuf[0], 8);
 8004224:	193a      	adds	r2, r7, r4
 8004226:	2308      	movs	r3, #8
 8004228:	2101      	movs	r1, #1
 800422a:	2028      	movs	r0, #40	@ 0x28
 800422c:	f7ff fc56 	bl	8003adc <ReadMemRegister>
    raw._hp0_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[0] | ((uint16_t)i2cbuf[1] << 8)));
 8004230:	193b      	adds	r3, r7, r4
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	001a      	movs	r2, r3
 8004236:	193b      	adds	r3, r7, r4
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4313      	orrs	r3, r2
 800423e:	0018      	movs	r0, r3
 8004240:	f7fd fb42 	bl	80018c8 <__aeabi_ui2f>
 8004244:	1c03      	adds	r3, r0, #0
 8004246:	218a      	movs	r1, #138	@ 0x8a
 8004248:	05c9      	lsls	r1, r1, #23
 800424a:	1c18      	adds	r0, r3, #0
 800424c:	f7fc fd2a 	bl	8000ca4 <__aeabi_fdiv>
 8004250:	1c03      	adds	r3, r0, #0
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	f7ff fb1e 	bl	8003894 <__aeabi_f2d>
 8004258:	0002      	movs	r2, r0
 800425a:	000b      	movs	r3, r1
 800425c:	2000      	movs	r0, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	05c9      	lsls	r1, r1, #23
 8004262:	f024 fff5 	bl	8029250 <pow>
 8004266:	0002      	movs	r2, r0
 8004268:	000b      	movs	r3, r1
 800426a:	0010      	movs	r0, r2
 800426c:	0019      	movs	r1, r3
 800426e:	f7fc f9ed 	bl	800064c <__aeabi_d2uiz>
 8004272:	0002      	movs	r2, r0
 8004274:	4b42      	ldr	r3, [pc, #264]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004276:	605a      	str	r2, [r3, #4]
    raw._hp1_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[2] | ((uint16_t)i2cbuf[3] << 8)));
 8004278:	193b      	adds	r3, r7, r4
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	001a      	movs	r2, r3
 800427e:	193b      	adds	r3, r7, r4
 8004280:	78db      	ldrb	r3, [r3, #3]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	4313      	orrs	r3, r2
 8004286:	0018      	movs	r0, r3
 8004288:	f7fd fb1e 	bl	80018c8 <__aeabi_ui2f>
 800428c:	1c03      	adds	r3, r0, #0
 800428e:	218a      	movs	r1, #138	@ 0x8a
 8004290:	05c9      	lsls	r1, r1, #23
 8004292:	1c18      	adds	r0, r3, #0
 8004294:	f7fc fd06 	bl	8000ca4 <__aeabi_fdiv>
 8004298:	1c03      	adds	r3, r0, #0
 800429a:	1c18      	adds	r0, r3, #0
 800429c:	f7ff fafa 	bl	8003894 <__aeabi_f2d>
 80042a0:	0002      	movs	r2, r0
 80042a2:	000b      	movs	r3, r1
 80042a4:	2000      	movs	r0, #0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	05c9      	lsls	r1, r1, #23
 80042aa:	f024 ffd1 	bl	8029250 <pow>
 80042ae:	0002      	movs	r2, r0
 80042b0:	000b      	movs	r3, r1
 80042b2:	0010      	movs	r0, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	f7fc f9c9 	bl	800064c <__aeabi_d2uiz>
 80042ba:	0002      	movs	r2, r0
 80042bc:	4b30      	ldr	r3, [pc, #192]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 80042be:	60da      	str	r2, [r3, #12]
    raw._hp2_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[4] | ((uint16_t)i2cbuf[5] << 8)));
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	791b      	ldrb	r3, [r3, #4]
 80042c4:	001a      	movs	r2, r3
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	795b      	ldrb	r3, [r3, #5]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	4313      	orrs	r3, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fd fafa 	bl	80018c8 <__aeabi_ui2f>
 80042d4:	1c03      	adds	r3, r0, #0
 80042d6:	218a      	movs	r1, #138	@ 0x8a
 80042d8:	05c9      	lsls	r1, r1, #23
 80042da:	1c18      	adds	r0, r3, #0
 80042dc:	f7fc fce2 	bl	8000ca4 <__aeabi_fdiv>
 80042e0:	1c03      	adds	r3, r0, #0
 80042e2:	1c18      	adds	r0, r3, #0
 80042e4:	f7ff fad6 	bl	8003894 <__aeabi_f2d>
 80042e8:	0002      	movs	r2, r0
 80042ea:	000b      	movs	r3, r1
 80042ec:	2000      	movs	r0, #0
 80042ee:	2180      	movs	r1, #128	@ 0x80
 80042f0:	05c9      	lsls	r1, r1, #23
 80042f2:	f024 ffad 	bl	8029250 <pow>
 80042f6:	0002      	movs	r2, r0
 80042f8:	000b      	movs	r3, r1
 80042fa:	0010      	movs	r0, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	f7fc f9a5 	bl	800064c <__aeabi_d2uiz>
 8004302:	0002      	movs	r2, r0
 8004304:	4b1e      	ldr	r3, [pc, #120]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004306:	615a      	str	r2, [r3, #20]
    raw._hp3_bl = CONVERT_RS_RAW2OHMS_F((uint32_t)(i2cbuf[6] | ((uint16_t)i2cbuf[7] << 8)));
 8004308:	193b      	adds	r3, r7, r4
 800430a:	799b      	ldrb	r3, [r3, #6]
 800430c:	001a      	movs	r2, r3
 800430e:	193b      	adds	r3, r7, r4
 8004310:	79db      	ldrb	r3, [r3, #7]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	0018      	movs	r0, r3
 8004318:	f7fd fad6 	bl	80018c8 <__aeabi_ui2f>
 800431c:	1c03      	adds	r3, r0, #0
 800431e:	218a      	movs	r1, #138	@ 0x8a
 8004320:	05c9      	lsls	r1, r1, #23
 8004322:	1c18      	adds	r0, r3, #0
 8004324:	f7fc fcbe 	bl	8000ca4 <__aeabi_fdiv>
 8004328:	1c03      	adds	r3, r0, #0
 800432a:	1c18      	adds	r0, r3, #0
 800432c:	f7ff fab2 	bl	8003894 <__aeabi_f2d>
 8004330:	0002      	movs	r2, r0
 8004332:	000b      	movs	r3, r1
 8004334:	2000      	movs	r0, #0
 8004336:	2180      	movs	r1, #128	@ 0x80
 8004338:	05c9      	lsls	r1, r1, #23
 800433a:	f024 ff89 	bl	8029250 <pow>
 800433e:	0002      	movs	r2, r0
 8004340:	000b      	movs	r3, r1
 8004342:	0010      	movs	r0, r2
 8004344:	0019      	movs	r1, r3
 8004346:	f7fc f981 	bl	800064c <__aeabi_d2uiz>
 800434a:	0002      	movs	r2, r0
 800434c:	4b0c      	ldr	r3, [pc, #48]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 800434e:	61da      	str	r2, [r3, #28]

    ReadMemRegister(ENS160_REG_DATA_MISR, 1, &i2cbuf[0], 1);
 8004350:	193a      	adds	r2, r7, r4
 8004352:	2301      	movs	r3, #1
 8004354:	2101      	movs	r1, #1
 8004356:	2038      	movs	r0, #56	@ 0x38
 8004358:	f7ff fbc0 	bl	8003adc <ReadMemRegister>
    raw._misr = i2cbuf[0];
 800435c:	193b      	adds	r3, r7, r4
 800435e:	7819      	ldrb	r1, [r3, #0]
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <ENS160_measureRaw+0x2dc>)
 8004362:	2220      	movs	r2, #32
 8004364:	5499      	strb	r1, [r3, r2]
	
	return newData;
 8004366:	2317      	movs	r3, #23
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	781b      	ldrb	r3, [r3, #0]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b007      	add	sp, #28
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	20000458 	.word	0x20000458
 8004378:	0802a8f4 	.word	0x0802a8f4
 800437c:	0802a81c 	.word	0x0802a81c
 8004380:	2000046c 	.word	0x2000046c

08004384 <ENS160_set_envdata210>:

bool ENS160_set_envdata210(uint16_t t, uint16_t h) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	0002      	movs	r2, r0
 800438c:	1dbb      	adds	r3, r7, #6
 800438e:	801a      	strh	r2, [r3, #0]
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	1c0a      	adds	r2, r1, #0
 8004394:	801a      	strh	r2, [r3, #0]
  uint8_t trh_in[4];

  trh_in[0] = t & 0xff;
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	2108      	movs	r1, #8
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	701a      	strb	r2, [r3, #0]
  trh_in[1] = (t >> 8) & 0xff;
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	705a      	strb	r2, [r3, #1]
  trh_in[2] = h & 0xff;
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	709a      	strb	r2, [r3, #2]
  trh_in[3] = (h >> 8) & 0xff;
 80043ba:	1d3b      	adds	r3, r7, #4
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	70da      	strb	r2, [r3, #3]
  uint8_t result = WriteMemRegister(ENS160_REG_TEMP_IN, 1, &trh_in[0], 4);
 80043c8:	187a      	adds	r2, r7, r1
 80043ca:	2304      	movs	r3, #4
 80043cc:	2101      	movs	r1, #1
 80043ce:	2013      	movs	r0, #19
 80043d0:	f7ff fb54 	bl	8003a7c <WriteMemRegister>
 80043d4:	0003      	movs	r3, r0
 80043d6:	001a      	movs	r2, r3
 80043d8:	210f      	movs	r1, #15
 80043da:	187b      	adds	r3, r7, r1
 80043dc:	701a      	strb	r2, [r3, #0]
  return result;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	4193      	sbcs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b004      	add	sp, #16
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <ENS160_set_envdata>:


// Writes t (degC) and h (%rh) to ENV_DATA. Returns false on I2C problems.
bool ENS160_set_envdata(float t, float h) {
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
	uint16_t t_data = (uint16_t)((t + 273.15f) * 64.0f);
 80043fa:	4916      	ldr	r1, [pc, #88]	@ (8004454 <ENS160_set_envdata+0x64>)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fa5f 	bl	80008c0 <__aeabi_fadd>
 8004402:	1c03      	adds	r3, r0, #0
 8004404:	2185      	movs	r1, #133	@ 0x85
 8004406:	05c9      	lsls	r1, r1, #23
 8004408:	1c18      	adds	r0, r3, #0
 800440a:	f7fc fe19 	bl	8001040 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	250e      	movs	r5, #14
 8004412:	197c      	adds	r4, r7, r5
 8004414:	1c18      	adds	r0, r3, #0
 8004416:	f7fc f901 	bl	800061c <__aeabi_f2uiz>
 800441a:	0003      	movs	r3, r0
 800441c:	8023      	strh	r3, [r4, #0]
	uint16_t rh_data = (uint16_t)(h * 512.0f);
 800441e:	2188      	movs	r1, #136	@ 0x88
 8004420:	05c9      	lsls	r1, r1, #23
 8004422:	6838      	ldr	r0, [r7, #0]
 8004424:	f7fc fe0c 	bl	8001040 <__aeabi_fmul>
 8004428:	1c03      	adds	r3, r0, #0
 800442a:	260c      	movs	r6, #12
 800442c:	19bc      	adds	r4, r7, r6
 800442e:	1c18      	adds	r0, r3, #0
 8004430:	f7fc f8f4 	bl	800061c <__aeabi_f2uiz>
 8004434:	0003      	movs	r3, r0
 8004436:	8023      	strh	r3, [r4, #0]
	return ENS160_set_envdata210(t_data, rh_data);
 8004438:	19bb      	adds	r3, r7, r6
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	197b      	adds	r3, r7, r5
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f7ff ff9e 	bl	8004384 <ENS160_set_envdata210>
 8004448:	0003      	movs	r3, r0
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b005      	add	sp, #20
 8004450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	43889333 	.word	0x43889333

08004458 <ENS_Upkeep>:

ENS160State ENS_Upkeep(void) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b085      	sub	sp, #20
 800445c:	af02      	add	r7, sp, #8
  uint8_t status;
  if(!TimestampIsReached(ENS160TimeStamp)){
 800445e:	4bce      	ldr	r3, [pc, #824]	@ (8004798 <ENS_Upkeep+0x340>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0018      	movs	r0, r3
 8004464:	f00f fda0 	bl	8013fa8 <TimestampIsReached>
 8004468:	0003      	movs	r3, r0
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4053      	eors	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <ENS_Upkeep+0x24>
    return ENSState;
 8004476:	4bc9      	ldr	r3, [pc, #804]	@ (800479c <ENS_Upkeep+0x344>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	e22e      	b.n	80048da <ENS_Upkeep+0x482>
  }
  switch(ENSState) {
 800447c:	4bc7      	ldr	r3, [pc, #796]	@ (800479c <ENS_Upkeep+0x344>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d900      	bls.n	8004486 <ENS_Upkeep+0x2e>
 8004484:	e210      	b.n	80048a8 <ENS_Upkeep+0x450>
 8004486:	009a      	lsls	r2, r3, #2
 8004488:	4bc5      	ldr	r3, [pc, #788]	@ (80047a0 <ENS_Upkeep+0x348>)
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	469f      	mov	pc, r3
  case ENS_STATE_OFF:
    Debug("Measurements are turned off for gas device ENS160.");
 8004490:	4ac4      	ldr	r2, [pc, #784]	@ (80047a4 <ENS_Upkeep+0x34c>)
 8004492:	4bc5      	ldr	r3, [pc, #788]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004494:	0019      	movs	r1, r3
 8004496:	2003      	movs	r0, #3
 8004498:	f00f fddc 	bl	8014054 <CreateLine>
    ENS160TimeStamp = HAL_GetTick() + 780000;  // 4 times an hour
 800449c:	f010 fb52 	bl	8014b44 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	4ac2      	ldr	r2, [pc, #776]	@ (80047ac <ENS_Upkeep+0x354>)
 80044a4:	189a      	adds	r2, r3, r2
 80044a6:	4bbc      	ldr	r3, [pc, #752]	@ (8004798 <ENS_Upkeep+0x340>)
 80044a8:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 80044aa:	4bc1      	ldr	r3, [pc, #772]	@ (80047b0 <ENS_Upkeep+0x358>)
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	4bc1      	ldr	r3, [pc, #772]	@ (80047b4 <ENS_Upkeep+0x35c>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d100      	bne.n	80044b8 <ENS_Upkeep+0x60>
 80044b6:	e203      	b.n	80048c0 <ENS_Upkeep+0x468>
      ENSState = ENS_STATE_WAIT;
 80044b8:	4bb8      	ldr	r3, [pc, #736]	@ (800479c <ENS_Upkeep+0x344>)
 80044ba:	2208      	movs	r2, #8
 80044bc:	701a      	strb	r2, [r3, #0]
    }
    break;
 80044be:	e1ff      	b.n	80048c0 <ENS_Upkeep+0x468>

  case ENS_STATE_INIT:
    if (getSensorLock() != FREE) {
 80044c0:	f009 fdae 	bl	800e020 <getSensorLock>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d000      	beq.n	80044ca <ENS_Upkeep+0x72>
 80044c8:	e1fc      	b.n	80048c4 <ENS_Upkeep+0x46c>
      break;
    }
    setSensorLock(ENS160);
 80044ca:	2004      	movs	r0, #4
 80044cc:	f009 fd94 	bl	800dff8 <setSensorLock>
    bool result = ENS160_setMode(ENS160_OPMODE_STD);
 80044d0:	1d3c      	adds	r4, r7, #4
 80044d2:	2002      	movs	r0, #2
 80044d4:	f7ff fc9a 	bl	8003e0c <ENS160_setMode>
 80044d8:	0003      	movs	r3, r0
 80044da:	7023      	strb	r3, [r4, #0]
    Debug("ENS160 switched to standard mode %s", result?"done.":"failed.");
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <ENS_Upkeep+0x90>
 80044e4:	4bb4      	ldr	r3, [pc, #720]	@ (80047b8 <ENS_Upkeep+0x360>)
 80044e6:	e000      	b.n	80044ea <ENS_Upkeep+0x92>
 80044e8:	4bb4      	ldr	r3, [pc, #720]	@ (80047bc <ENS_Upkeep+0x364>)
 80044ea:	4ab5      	ldr	r2, [pc, #724]	@ (80047c0 <ENS_Upkeep+0x368>)
 80044ec:	49ae      	ldr	r1, [pc, #696]	@ (80047a8 <ENS_Upkeep+0x350>)
 80044ee:	2003      	movs	r0, #3
 80044f0:	f00f fdb0 	bl	8014054 <CreateLine>
    HAL_Delay(10); // wait for deferred DMA transfers
 80044f4:	200a      	movs	r0, #10
 80044f6:	f010 fb2f 	bl	8014b58 <HAL_Delay>
    setSensorLock(FREE);
 80044fa:	2000      	movs	r0, #0
 80044fc:	f009 fd7c 	bl	800dff8 <setSensorLock>
    ENSState = ENS_STATUS_CHECK;
 8004500:	4ba6      	ldr	r3, [pc, #664]	@ (800479c <ENS_Upkeep+0x344>)
 8004502:	2203      	movs	r2, #3
 8004504:	701a      	strb	r2, [r3, #0]
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004506:	f010 fb1d 	bl	8014b44 <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	22fa      	movs	r2, #250	@ 0xfa
 800450e:	0092      	lsls	r2, r2, #2
 8004510:	189a      	adds	r2, r3, r2
 8004512:	4ba1      	ldr	r3, [pc, #644]	@ (8004798 <ENS_Upkeep+0x340>)
 8004514:	601a      	str	r2, [r3, #0]
    break;
 8004516:	e1de      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATUS_CHECK:
    if (getSensorLock() != FREE) {
 8004518:	f009 fd82 	bl	800e020 <getSensorLock>
 800451c:	1e03      	subs	r3, r0, #0
 800451e:	d000      	beq.n	8004522 <ENS_Upkeep+0xca>
 8004520:	e1d2      	b.n	80048c8 <ENS_Upkeep+0x470>
      break;
    }
    setSensorLock(ENS160);
 8004522:	2004      	movs	r0, #4
 8004524:	f009 fd68 	bl	800dff8 <setSensorLock>
    status = ENS160_readStatus();
 8004528:	1d7c      	adds	r4, r7, #5
 800452a:	f7ff fd1f 	bl	8003f6c <ENS160_readStatus>
 800452e:	0003      	movs	r3, r0
 8004530:	7023      	strb	r3, [r4, #0]
    HAL_Delay(10); // wait for deferred DMA transfers
 8004532:	200a      	movs	r0, #10
 8004534:	f010 fb10 	bl	8014b58 <HAL_Delay>
    setSensorLock(FREE);
 8004538:	2000      	movs	r0, #0
 800453a:	f009 fd5d 	bl	800dff8 <setSensorLock>
    if ((status & 0x0C) != 0) {
 800453e:	1d7b      	adds	r3, r7, #5
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	220c      	movs	r2, #12
 8004544:	4013      	ands	r3, r2
 8004546:	d02e      	beq.n	80045a6 <ENS_Upkeep+0x14e>
      switch (status >> 2) {
 8004548:	1d7b      	adds	r3, r7, #5
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b03      	cmp	r3, #3
 8004552:	d013      	beq.n	800457c <ENS_Upkeep+0x124>
 8004554:	dc19      	bgt.n	800458a <ENS_Upkeep+0x132>
 8004556:	2b01      	cmp	r3, #1
 8004558:	d002      	beq.n	8004560 <ENS_Upkeep+0x108>
 800455a:	2b02      	cmp	r3, #2
 800455c:	d007      	beq.n	800456e <ENS_Upkeep+0x116>
 800455e:	e014      	b.n	800458a <ENS_Upkeep+0x132>
      case 1:
        Debug("ENS160 Warm-Up phase");
 8004560:	4a98      	ldr	r2, [pc, #608]	@ (80047c4 <ENS_Upkeep+0x36c>)
 8004562:	4b91      	ldr	r3, [pc, #580]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004564:	0019      	movs	r1, r3
 8004566:	2003      	movs	r0, #3
 8004568:	f00f fd74 	bl	8014054 <CreateLine>
        break;
 800456c:	e00d      	b.n	800458a <ENS_Upkeep+0x132>
      case 2:
        Debug("ENS160 Initial Start-UP phase");
 800456e:	4a96      	ldr	r2, [pc, #600]	@ (80047c8 <ENS_Upkeep+0x370>)
 8004570:	4b8d      	ldr	r3, [pc, #564]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004572:	0019      	movs	r1, r3
 8004574:	2003      	movs	r0, #3
 8004576:	f00f fd6d 	bl	8014054 <CreateLine>
        break;
 800457a:	e006      	b.n	800458a <ENS_Upkeep+0x132>
      case 3:
        Debug("ENS160 Invalid output");
 800457c:	4a93      	ldr	r2, [pc, #588]	@ (80047cc <ENS_Upkeep+0x374>)
 800457e:	4b8a      	ldr	r3, [pc, #552]	@ (80047a8 <ENS_Upkeep+0x350>)
 8004580:	0019      	movs	r1, r3
 8004582:	2003      	movs	r0, #3
 8004584:	f00f fd66 	bl	8014054 <CreateLine>
        break;
 8004588:	46c0      	nop			@ (mov r8, r8)
      }
      if ((status & 0x03) == 0) {
 800458a:	1d7b      	adds	r3, r7, #5
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2203      	movs	r2, #3
 8004590:	4013      	ands	r3, r2
 8004592:	d108      	bne.n	80045a6 <ENS_Upkeep+0x14e>
        ENS160TimeStamp = HAL_GetTick() + 1000;
 8004594:	f010 fad6 	bl	8014b44 <HAL_GetTick>
 8004598:	0003      	movs	r3, r0
 800459a:	22fa      	movs	r2, #250	@ 0xfa
 800459c:	0092      	lsls	r2, r2, #2
 800459e:	189a      	adds	r2, r3, r2
 80045a0:	4b7d      	ldr	r3, [pc, #500]	@ (8004798 <ENS_Upkeep+0x340>)
 80045a2:	601a      	str	r2, [r3, #0]
//        ENSState = ENS_LOW_POWER;
//        ENSState = ENS_STATE_WAIT;
        break;
 80045a4:	e197      	b.n	80048d6 <ENS_Upkeep+0x47e>
      }
    }
    ENSState = ENS_STATE_START_MEASUREMENTS;
 80045a6:	4b7d      	ldr	r3, [pc, #500]	@ (800479c <ENS_Upkeep+0x344>)
 80045a8:	2204      	movs	r2, #4
 80045aa:	701a      	strb	r2, [r3, #0]
    break;
 80045ac:	e193      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATE_START_MEASUREMENTS:
    if ((getSensorLock() != FREE) && (getSensorLock() != ENS160)) {
 80045ae:	f009 fd37 	bl	800e020 <getSensorLock>
 80045b2:	1e03      	subs	r3, r0, #0
 80045b4:	d036      	beq.n	8004624 <ENS_Upkeep+0x1cc>
 80045b6:	f009 fd33 	bl	800e020 <getSensorLock>
 80045ba:	0003      	movs	r3, r0
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d031      	beq.n	8004624 <ENS_Upkeep+0x1cc>
      uint8_t locktype = getSensorLock();
 80045c0:	1dbc      	adds	r4, r7, #6
 80045c2:	f009 fd2d 	bl	800e020 <getSensorLock>
 80045c6:	0003      	movs	r3, r0
 80045c8:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from ENS160, but from %s",
 80045ca:	1dbb      	adds	r3, r7, #6
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d019      	beq.n	8004606 <ENS_Upkeep+0x1ae>
 80045d2:	1dbb      	adds	r3, r7, #6
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d013      	beq.n	8004602 <ENS_Upkeep+0x1aa>
 80045da:	1dbb      	adds	r3, r7, #6
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d00d      	beq.n	80045fe <ENS_Upkeep+0x1a6>
 80045e2:	1dbb      	adds	r3, r7, #6
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d007      	beq.n	80045fa <ENS_Upkeep+0x1a2>
 80045ea:	1dbb      	adds	r3, r7, #6
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d101      	bne.n	80045f6 <ENS_Upkeep+0x19e>
 80045f2:	4b77      	ldr	r3, [pc, #476]	@ (80047d0 <ENS_Upkeep+0x378>)
 80045f4:	e008      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045f6:	4b77      	ldr	r3, [pc, #476]	@ (80047d4 <ENS_Upkeep+0x37c>)
 80045f8:	e006      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fa:	4b77      	ldr	r3, [pc, #476]	@ (80047d8 <ENS_Upkeep+0x380>)
 80045fc:	e004      	b.n	8004608 <ENS_Upkeep+0x1b0>
 80045fe:	4b77      	ldr	r3, [pc, #476]	@ (80047dc <ENS_Upkeep+0x384>)
 8004600:	e002      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004602:	4b77      	ldr	r3, [pc, #476]	@ (80047e0 <ENS_Upkeep+0x388>)
 8004604:	e000      	b.n	8004608 <ENS_Upkeep+0x1b0>
 8004606:	4b77      	ldr	r3, [pc, #476]	@ (80047e4 <ENS_Upkeep+0x38c>)
 8004608:	4a77      	ldr	r2, [pc, #476]	@ (80047e8 <ENS_Upkeep+0x390>)
 800460a:	4967      	ldr	r1, [pc, #412]	@ (80047a8 <ENS_Upkeep+0x350>)
 800460c:	2003      	movs	r0, #3
 800460e:	f00f fd21 	bl	8014054 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==ENS160?"ENS160":"unknown");
      ENS160TimeStamp = HAL_GetTick() + 333;
 8004612:	f010 fa97 	bl	8014b44 <HAL_GetTick>
 8004616:	0003      	movs	r3, r0
 8004618:	334e      	adds	r3, #78	@ 0x4e
 800461a:	33ff      	adds	r3, #255	@ 0xff
 800461c:	001a      	movs	r2, r3
 800461e:	4b5e      	ldr	r3, [pc, #376]	@ (8004798 <ENS_Upkeep+0x340>)
 8004620:	601a      	str	r2, [r3, #0]
      break;
 8004622:	e158      	b.n	80048d6 <ENS_Upkeep+0x47e>
    }
    setSensorLock(ENS160);
 8004624:	2004      	movs	r0, #4
 8004626:	f009 fce7 	bl	800dff8 <setSensorLock>
    status = ENS160_readStatus();
 800462a:	1d7c      	adds	r4, r7, #5
 800462c:	f7ff fc9e 	bl	8003f6c <ENS160_readStatus>
 8004630:	0003      	movs	r3, r0
 8004632:	7023      	strb	r3, [r4, #0]
    if ((status & 0x02) == 0) {
 8004634:	1d7b      	adds	r3, r7, #5
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2202      	movs	r2, #2
 800463a:	4013      	ands	r3, r2
 800463c:	d10e      	bne.n	800465c <ENS_Upkeep+0x204>
      ENS160TimeStamp = HAL_GetTick() + 500;
 800463e:	f010 fa81 	bl	8014b44 <HAL_GetTick>
 8004642:	0003      	movs	r3, r0
 8004644:	33f5      	adds	r3, #245	@ 0xf5
 8004646:	33ff      	adds	r3, #255	@ 0xff
 8004648:	001a      	movs	r2, r3
 800464a:	4b53      	ldr	r3, [pc, #332]	@ (8004798 <ENS_Upkeep+0x340>)
 800464c:	601a      	str	r2, [r3, #0]
//      Debug("ENS160 status register is: %d", status);
      HAL_Delay(10); // wait for deferred DMA transfers
 800464e:	200a      	movs	r0, #10
 8004650:	f010 fa82 	bl	8014b58 <HAL_Delay>
      setSensorLock(FREE);
 8004654:	2000      	movs	r0, #0
 8004656:	f009 fccf 	bl	800dff8 <setSensorLock>
      break;
 800465a:	e13c      	b.n	80048d6 <ENS_Upkeep+0x47e>
    }
    ENS160_measure(false);
 800465c:	2000      	movs	r0, #0
 800465e:	f7ff fca5 	bl	8003fac <ENS160_measure>
    HAL_Delay(10);
 8004662:	200a      	movs	r0, #10
 8004664:	f010 fa78 	bl	8014b58 <HAL_Delay>
    ENS160_measureRaw(false);
 8004668:	2000      	movs	r0, #0
 800466a:	f7ff fd1b 	bl	80040a4 <ENS160_measureRaw>
    HAL_Delay(10);
 800466e:	200a      	movs	r0, #10
 8004670:	f010 fa72 	bl	8014b58 <HAL_Delay>
    setSensorLock(FREE);
 8004674:	2000      	movs	r0, #0
 8004676:	f009 fcbf 	bl	800dff8 <setSensorLock>
    ENSState = ENS_STATE_PROCESS_RESULTS;
 800467a:	4b48      	ldr	r3, [pc, #288]	@ (800479c <ENS_Upkeep+0x344>)
 800467c:	2206      	movs	r2, #6
 800467e:	701a      	strb	r2, [r3, #0]
    break;
 8004680:	e129      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATE_PROCESS_RESULTS:
    if (enscnt == 1){
 8004682:	4b5a      	ldr	r3, [pc, #360]	@ (80047ec <ENS_Upkeep+0x394>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d13b      	bne.n	8004702 <ENS_Upkeep+0x2aa>
    Info("ENS160 AQI: %d, TVOC: %dppb, eCO2: %dppm", pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800468a:	4b59      	ldr	r3, [pc, #356]	@ (80047f0 <ENS_Upkeep+0x398>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	001c      	movs	r4, r3
 8004690:	4b57      	ldr	r3, [pc, #348]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004692:	885b      	ldrh	r3, [r3, #2]
 8004694:	0018      	movs	r0, r3
 8004696:	4b56      	ldr	r3, [pc, #344]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004698:	889b      	ldrh	r3, [r3, #4]
 800469a:	4a56      	ldr	r2, [pc, #344]	@ (80047f4 <ENS_Upkeep+0x39c>)
 800469c:	4956      	ldr	r1, [pc, #344]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	9000      	str	r0, [sp, #0]
 80046a2:	0023      	movs	r3, r4
 80046a4:	2002      	movs	r0, #2
 80046a6:	f00f fcd5 	bl	8014054 <CreateLine>
    Info("R HP0: %d Ohm, Baseline: %d", raw._hp0_rs, raw._hp0_bl);
 80046aa:	4b54      	ldr	r3, [pc, #336]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	4b53      	ldr	r3, [pc, #332]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4a53      	ldr	r2, [pc, #332]	@ (8004800 <ENS_Upkeep+0x3a8>)
 80046b4:	4950      	ldr	r1, [pc, #320]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	0003      	movs	r3, r0
 80046ba:	2002      	movs	r0, #2
 80046bc:	f00f fcca 	bl	8014054 <CreateLine>
    Info("R HP1: %d Ohm, Baseline: %d", raw._hp1_rs, raw._hp1_bl);
 80046c0:	4b4e      	ldr	r3, [pc, #312]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046c2:	6898      	ldr	r0, [r3, #8]
 80046c4:	4b4d      	ldr	r3, [pc, #308]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a4e      	ldr	r2, [pc, #312]	@ (8004804 <ENS_Upkeep+0x3ac>)
 80046ca:	494b      	ldr	r1, [pc, #300]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	0003      	movs	r3, r0
 80046d0:	2002      	movs	r0, #2
 80046d2:	f00f fcbf 	bl	8014054 <CreateLine>
    Info("R HP2: %d Ohm, Baseline: %d", raw._hp2_rs, raw._hp2_bl);
 80046d6:	4b49      	ldr	r3, [pc, #292]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046d8:	6918      	ldr	r0, [r3, #16]
 80046da:	4b48      	ldr	r3, [pc, #288]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4a4a      	ldr	r2, [pc, #296]	@ (8004808 <ENS_Upkeep+0x3b0>)
 80046e0:	4945      	ldr	r1, [pc, #276]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	0003      	movs	r3, r0
 80046e6:	2002      	movs	r0, #2
 80046e8:	f00f fcb4 	bl	8014054 <CreateLine>
    Info("R HP3: %d Ohm, Baseline: %d", raw._hp3_rs, raw._hp3_bl);
 80046ec:	4b43      	ldr	r3, [pc, #268]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046ee:	6998      	ldr	r0, [r3, #24]
 80046f0:	4b42      	ldr	r3, [pc, #264]	@ (80047fc <ENS_Upkeep+0x3a4>)
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	4a45      	ldr	r2, [pc, #276]	@ (800480c <ENS_Upkeep+0x3b4>)
 80046f6:	4940      	ldr	r1, [pc, #256]	@ (80047f8 <ENS_Upkeep+0x3a0>)
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	0003      	movs	r3, r0
 80046fc:	2002      	movs	r0, #2
 80046fe:	f00f fca9 	bl	8014054 <CreateLine>
    }
    (enscnt == 5)?enscnt=0:enscnt++;
 8004702:	4b3a      	ldr	r3, [pc, #232]	@ (80047ec <ENS_Upkeep+0x394>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b05      	cmp	r3, #5
 8004708:	d103      	bne.n	8004712 <ENS_Upkeep+0x2ba>
 800470a:	4b38      	ldr	r3, [pc, #224]	@ (80047ec <ENS_Upkeep+0x394>)
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e005      	b.n	800471e <ENS_Upkeep+0x2c6>
 8004712:	4b36      	ldr	r3, [pc, #216]	@ (80047ec <ENS_Upkeep+0x394>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	3301      	adds	r3, #1
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4b34      	ldr	r3, [pc, #208]	@ (80047ec <ENS_Upkeep+0x394>)
 800471c:	701a      	strb	r2, [r3, #0]
    setENS160(pred._data_aqi, pred._data_tvoc, pred._data_eco2);
 800471e:	4b34      	ldr	r3, [pc, #208]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004720:	7818      	ldrb	r0, [r3, #0]
 8004722:	4b33      	ldr	r3, [pc, #204]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004724:	8859      	ldrh	r1, [r3, #2]
 8004726:	4b32      	ldr	r3, [pc, #200]	@ (80047f0 <ENS_Upkeep+0x398>)
 8004728:	889b      	ldrh	r3, [r3, #4]
 800472a:	001a      	movs	r2, r3
 800472c:	f000 fa20 	bl	8004b70 <setENS160>
    ENSState = ENS_LOW_POWER;
 8004730:	4b1a      	ldr	r3, [pc, #104]	@ (800479c <ENS_Upkeep+0x344>)
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
    break;
 8004736:	e0ce      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_LOW_POWER:
    ENS160TimeStamp = HAL_GetTick() + 1000;
 8004738:	f010 fa04 	bl	8014b44 <HAL_GetTick>
 800473c:	0003      	movs	r3, r0
 800473e:	22fa      	movs	r2, #250	@ 0xfa
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	189a      	adds	r2, r3, r2
 8004744:	4b14      	ldr	r3, [pc, #80]	@ (8004798 <ENS_Upkeep+0x340>)
 8004746:	601a      	str	r2, [r3, #0]
    if (!usbPluggedIn && !userToggle && (enscnt >= 2)) {
 8004748:	4b31      	ldr	r3, [pc, #196]	@ (8004810 <ENS_Upkeep+0x3b8>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2201      	movs	r2, #1
 800474e:	4053      	eors	r3, r2
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d100      	bne.n	8004758 <ENS_Upkeep+0x300>
 8004756:	e076      	b.n	8004846 <ENS_Upkeep+0x3ee>
 8004758:	4b2e      	ldr	r3, [pc, #184]	@ (8004814 <ENS_Upkeep+0x3bc>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2201      	movs	r2, #1
 800475e:	4053      	eors	r3, r2
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d06f      	beq.n	8004846 <ENS_Upkeep+0x3ee>
 8004766:	4b21      	ldr	r3, [pc, #132]	@ (80047ec <ENS_Upkeep+0x394>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d96b      	bls.n	8004846 <ENS_Upkeep+0x3ee>
      if (getSensorLock() != FREE) {
 800476e:	f009 fc57 	bl	800e020 <getSensorLock>
 8004772:	1e03      	subs	r3, r0, #0
 8004774:	d000      	beq.n	8004778 <ENS_Upkeep+0x320>
 8004776:	e0a9      	b.n	80048cc <ENS_Upkeep+0x474>
        break;
      }
      setSensorLock(ENS160);
 8004778:	2004      	movs	r0, #4
 800477a:	f009 fc3d 	bl	800dff8 <setSensorLock>
      bool result = ENS160_setMode(ENS160_OPMODE_DEP_SLEEP);
 800477e:	1cfc      	adds	r4, r7, #3
 8004780:	2000      	movs	r0, #0
 8004782:	f7ff fb43 	bl	8003e0c <ENS160_setMode>
 8004786:	0003      	movs	r3, r0
 8004788:	7023      	strb	r3, [r4, #0]
      Debug("ENS160 switched to deep sleep %s, sample counter is: %d", result?"done.":"failed.", enscnt);
 800478a:	1cfb      	adds	r3, r7, #3
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d042      	beq.n	8004818 <ENS_Upkeep+0x3c0>
 8004792:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <ENS_Upkeep+0x360>)
 8004794:	e041      	b.n	800481a <ENS_Upkeep+0x3c2>
 8004796:	46c0      	nop			@ (mov r8, r8)
 8004798:	2000045c 	.word	0x2000045c
 800479c:	20000000 	.word	0x20000000
 80047a0:	0802e574 	.word	0x0802e574
 80047a4:	0802a914 	.word	0x0802a914
 80047a8:	0802a81c 	.word	0x0802a81c
 80047ac:	000be6e0 	.word	0x000be6e0
 80047b0:	20000dee 	.word	0x20000dee
 80047b4:	20000461 	.word	0x20000461
 80047b8:	0802a948 	.word	0x0802a948
 80047bc:	0802a950 	.word	0x0802a950
 80047c0:	0802a958 	.word	0x0802a958
 80047c4:	0802a97c 	.word	0x0802a97c
 80047c8:	0802a994 	.word	0x0802a994
 80047cc:	0802a9b4 	.word	0x0802a9b4
 80047d0:	0802a9cc 	.word	0x0802a9cc
 80047d4:	0802a9d4 	.word	0x0802a9d4
 80047d8:	0802a9dc 	.word	0x0802a9dc
 80047dc:	0802a9e4 	.word	0x0802a9e4
 80047e0:	0802a9ec 	.word	0x0802a9ec
 80047e4:	0802a9f4 	.word	0x0802a9f4
 80047e8:	0802a9fc 	.word	0x0802a9fc
 80047ec:	20000460 	.word	0x20000460
 80047f0:	20000490 	.word	0x20000490
 80047f4:	0802aa24 	.word	0x0802aa24
 80047f8:	0802a88c 	.word	0x0802a88c
 80047fc:	2000046c 	.word	0x2000046c
 8004800:	0802aa50 	.word	0x0802aa50
 8004804:	0802aa6c 	.word	0x0802aa6c
 8004808:	0802aa88 	.word	0x0802aa88
 800480c:	0802aaa4 	.word	0x0802aaa4
 8004810:	20002101 	.word	0x20002101
 8004814:	20002102 	.word	0x20002102
 8004818:	4b32      	ldr	r3, [pc, #200]	@ (80048e4 <ENS_Upkeep+0x48c>)
 800481a:	4a33      	ldr	r2, [pc, #204]	@ (80048e8 <ENS_Upkeep+0x490>)
 800481c:	7812      	ldrb	r2, [r2, #0]
 800481e:	0010      	movs	r0, r2
 8004820:	4a32      	ldr	r2, [pc, #200]	@ (80048ec <ENS_Upkeep+0x494>)
 8004822:	4933      	ldr	r1, [pc, #204]	@ (80048f0 <ENS_Upkeep+0x498>)
 8004824:	9000      	str	r0, [sp, #0]
 8004826:	2003      	movs	r0, #3
 8004828:	f00f fc14 	bl	8014054 <CreateLine>
      HAL_Delay(10); // wait for deferred DMA transfers
 800482c:	200a      	movs	r0, #10
 800482e:	f010 f993 	bl	8014b58 <HAL_Delay>
      setSensorLock(FREE);
 8004832:	2000      	movs	r0, #0
 8004834:	f009 fbe0 	bl	800dff8 <setSensorLock>
      ENS160TimeStamp = HAL_GetTick() + 45000;
 8004838:	f010 f984 	bl	8014b44 <HAL_GetTick>
 800483c:	0003      	movs	r3, r0
 800483e:	4a2d      	ldr	r2, [pc, #180]	@ (80048f4 <ENS_Upkeep+0x49c>)
 8004840:	189a      	adds	r2, r3, r2
 8004842:	4b2d      	ldr	r3, [pc, #180]	@ (80048f8 <ENS_Upkeep+0x4a0>)
 8004844:	601a      	str	r2, [r3, #0]
    }
    ENSState = ENS_STATE_WAIT;
 8004846:	4b2d      	ldr	r3, [pc, #180]	@ (80048fc <ENS_Upkeep+0x4a4>)
 8004848:	2208      	movs	r2, #8
 800484a:	701a      	strb	r2, [r3, #0]
    break;
 800484c:	e043      	b.n	80048d6 <ENS_Upkeep+0x47e>

  case ENS_STATE_WAIT:
      if (getSensorLock() != FREE) {
 800484e:	f009 fbe7 	bl	800e020 <getSensorLock>
 8004852:	1e03      	subs	r3, r0, #0
 8004854:	d13c      	bne.n	80048d0 <ENS_Upkeep+0x478>
        break;
      }
      setSensorLock(ENS160);
 8004856:	2004      	movs	r0, #4
 8004858:	f009 fbce 	bl	800dff8 <setSensorLock>
      uint8_t data;
      ReadMemRegister(ENS160_REG_OPMODE, 1, &data, 1);
 800485c:	1cba      	adds	r2, r7, #2
 800485e:	2301      	movs	r3, #1
 8004860:	2101      	movs	r1, #1
 8004862:	2010      	movs	r0, #16
 8004864:	f7ff f93a 	bl	8003adc <ReadMemRegister>
      if (data == 0) {
 8004868:	1cbb      	adds	r3, r7, #2
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d111      	bne.n	8004894 <ENS_Upkeep+0x43c>
        bool result = ENS160_setMode(ENS160_OPMODE_STD);
 8004870:	1dfc      	adds	r4, r7, #7
 8004872:	2002      	movs	r0, #2
 8004874:	f7ff faca 	bl	8003e0c <ENS160_setMode>
 8004878:	0003      	movs	r3, r0
 800487a:	7023      	strb	r3, [r4, #0]
        Debug("ENS160 switched to standard operating mode %s", result?"done.":"failed.");
 800487c:	1dfb      	adds	r3, r7, #7
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <ENS_Upkeep+0x430>
 8004884:	4b1e      	ldr	r3, [pc, #120]	@ (8004900 <ENS_Upkeep+0x4a8>)
 8004886:	e000      	b.n	800488a <ENS_Upkeep+0x432>
 8004888:	4b16      	ldr	r3, [pc, #88]	@ (80048e4 <ENS_Upkeep+0x48c>)
 800488a:	4a1e      	ldr	r2, [pc, #120]	@ (8004904 <ENS_Upkeep+0x4ac>)
 800488c:	4918      	ldr	r1, [pc, #96]	@ (80048f0 <ENS_Upkeep+0x498>)
 800488e:	2003      	movs	r0, #3
 8004890:	f00f fbe0 	bl	8014054 <CreateLine>
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 8004894:	200a      	movs	r0, #10
 8004896:	f010 f95f 	bl	8014b58 <HAL_Delay>
      setSensorLock(FREE);
 800489a:	2000      	movs	r0, #0
 800489c:	f009 fbac 	bl	800dff8 <setSensorLock>
      ENSState = ENS_STATUS_CHECK;
 80048a0:	4b16      	ldr	r3, [pc, #88]	@ (80048fc <ENS_Upkeep+0x4a4>)
 80048a2:	2203      	movs	r2, #3
 80048a4:	701a      	strb	r2, [r3, #0]
    break;
 80048a6:	e016      	b.n	80048d6 <ENS_Upkeep+0x47e>


  default:
    // Handle unexpected state
    ENSState = ENS_STATE_INIT;
 80048a8:	4b14      	ldr	r3, [pc, #80]	@ (80048fc <ENS_Upkeep+0x4a4>)
 80048aa:	2202      	movs	r2, #2
 80048ac:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() != ENS160) {
 80048ae:	f009 fbb7 	bl	800e020 <getSensorLock>
 80048b2:	0003      	movs	r3, r0
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d00d      	beq.n	80048d4 <ENS_Upkeep+0x47c>
      setSensorLock(FREE);
 80048b8:	2000      	movs	r0, #0
 80048ba:	f009 fb9d 	bl	800dff8 <setSensorLock>
    }
    break;
 80048be:	e009      	b.n	80048d4 <ENS_Upkeep+0x47c>
    break;
 80048c0:	46c0      	nop			@ (mov r8, r8)
 80048c2:	e008      	b.n	80048d6 <ENS_Upkeep+0x47e>
      break;
 80048c4:	46c0      	nop			@ (mov r8, r8)
 80048c6:	e006      	b.n	80048d6 <ENS_Upkeep+0x47e>
      break;
 80048c8:	46c0      	nop			@ (mov r8, r8)
 80048ca:	e004      	b.n	80048d6 <ENS_Upkeep+0x47e>
        break;
 80048cc:	46c0      	nop			@ (mov r8, r8)
 80048ce:	e002      	b.n	80048d6 <ENS_Upkeep+0x47e>
        break;
 80048d0:	46c0      	nop			@ (mov r8, r8)
 80048d2:	e000      	b.n	80048d6 <ENS_Upkeep+0x47e>
    break;
 80048d4:	46c0      	nop			@ (mov r8, r8)
  }
  return ENSState;
 80048d6:	4b09      	ldr	r3, [pc, #36]	@ (80048fc <ENS_Upkeep+0x4a4>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
}
 80048da:	0018      	movs	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	b003      	add	sp, #12
 80048e0:	bd90      	pop	{r4, r7, pc}
 80048e2:	46c0      	nop			@ (mov r8, r8)
 80048e4:	0802a950 	.word	0x0802a950
 80048e8:	20000460 	.word	0x20000460
 80048ec:	0802aac0 	.word	0x0802aac0
 80048f0:	0802a81c 	.word	0x0802a81c
 80048f4:	0000afc8 	.word	0x0000afc8
 80048f8:	2000045c 	.word	0x2000045c
 80048fc:	20000000 	.word	0x20000000
 8004900:	0802a948 	.word	0x0802a948
 8004904:	0802aaf8 	.word	0x0802aaf8

08004908 <forceNTPupdate>:
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;

MeasurementValues MeasVal;

void forceNTPupdate() {
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 800490c:	4b02      	ldr	r3, [pc, #8]	@ (8004918 <forceNTPupdate+0x10>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	200006a8 	.word	0x200006a8

0800491c <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 8004924:	f010 f90e 	bl	8014b44 <HAL_GetTick>
 8004928:	0002      	movs	r2, r0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	18d2      	adds	r2, r2, r3
 800492e:	4b03      	ldr	r3, [pc, #12]	@ (800493c <setESPTimeStamp+0x20>)
 8004930:	601a      	str	r2, [r3, #0]
}
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	46bd      	mov	sp, r7
 8004936:	b002      	add	sp, #8
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			@ (mov r8, r8)
 800493c:	200006a4 	.word	0x200006a4

08004940 <setCharges>:

void setCharges(){
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 8004944:	f005 f870 	bl	8009a28 <ReadBatteryVoltage>
 8004948:	1c02      	adds	r2, r0, #0
 800494a:	4b0c      	ldr	r3, [pc, #48]	@ (800497c <setCharges+0x3c>)
 800494c:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 800494e:	f005 f8cd 	bl	8009aec <ReadSolarVoltage>
 8004952:	0003      	movs	r3, r0
 8004954:	0018      	movs	r0, r3
 8004956:	f7fe ff4b 	bl	80037f0 <__aeabi_i2d>
 800495a:	2200      	movs	r2, #0
 800495c:	4b08      	ldr	r3, [pc, #32]	@ (8004980 <setCharges+0x40>)
 800495e:	f7fd fbbf 	bl	80020e0 <__aeabi_ddiv>
 8004962:	0002      	movs	r2, r0
 8004964:	000b      	movs	r3, r1
 8004966:	0010      	movs	r0, r2
 8004968:	0019      	movs	r1, r3
 800496a:	f7fe ffdb 	bl	8003924 <__aeabi_d2f>
 800496e:	1c02      	adds	r2, r0, #0
 8004970:	4b04      	ldr	r3, [pc, #16]	@ (8004984 <setCharges+0x44>)
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	46c0      	nop			@ (mov r8, r8)
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	46c0      	nop			@ (mov r8, r8)
 800497c:	200005cc 	.word	0x200005cc
 8004980:	408f4000 	.word	0x408f4000
 8004984:	200005d0 	.word	0x200005d0

08004988 <getWifiCred>:

void getWifiCred(void){
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  ReadUint8ArrayEEprom(SSIDConfigAddr, (uint8_t*)Credentials.SSID, SSIDMaxLength);
 800498c:	4b14      	ldr	r3, [pc, #80]	@ (80049e0 <getWifiCred+0x58>)
 800498e:	4815      	ldr	r0, [pc, #84]	@ (80049e4 <getWifiCred+0x5c>)
 8004990:	2220      	movs	r2, #32
 8004992:	0019      	movs	r1, r3
 8004994:	f007 fd02 	bl	800c39c <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(pwdConfigAddr, (uint8_t*)Credentials.Password, pwdMaxLength);
 8004998:	4b13      	ldr	r3, [pc, #76]	@ (80049e8 <getWifiCred+0x60>)
 800499a:	4814      	ldr	r0, [pc, #80]	@ (80049ec <getWifiCred+0x64>)
 800499c:	2240      	movs	r2, #64	@ 0x40
 800499e:	0019      	movs	r1, r3
 80049a0:	f007 fcfc 	bl	800c39c <ReadUint8ArrayEEprom>
  if ((Credentials.SSID[0] == 0) || (Credentials.Password[0] == 0)) {
 80049a4:	4b0e      	ldr	r3, [pc, #56]	@ (80049e0 <getWifiCred+0x58>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d004      	beq.n	80049b6 <getWifiCred+0x2e>
 80049ac:	4b0c      	ldr	r3, [pc, #48]	@ (80049e0 <getWifiCred+0x58>)
 80049ae:	2220      	movs	r2, #32
 80049b0:	5c9b      	ldrb	r3, [r3, r2]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d105      	bne.n	80049c2 <getWifiCred+0x3a>
    Error("Wifi credentials not found, reprogram or connect to PC and type Helpme");
 80049b6:	4a0e      	ldr	r2, [pc, #56]	@ (80049f0 <getWifiCred+0x68>)
 80049b8:	4b0e      	ldr	r3, [pc, #56]	@ (80049f4 <getWifiCred+0x6c>)
 80049ba:	0019      	movs	r1, r3
 80049bc:	2001      	movs	r0, #1
 80049be:	f00f fb49 	bl	8014054 <CreateLine>
  }
  Info("The SSID is: %s", Credentials.SSID);
 80049c2:	4b07      	ldr	r3, [pc, #28]	@ (80049e0 <getWifiCred+0x58>)
 80049c4:	4a0c      	ldr	r2, [pc, #48]	@ (80049f8 <getWifiCred+0x70>)
 80049c6:	490d      	ldr	r1, [pc, #52]	@ (80049fc <getWifiCred+0x74>)
 80049c8:	2002      	movs	r0, #2
 80049ca:	f00f fb43 	bl	8014054 <CreateLine>
  Info("The Password is: %s", Credentials.Password);
 80049ce:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <getWifiCred+0x60>)
 80049d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004a00 <getWifiCred+0x78>)
 80049d2:	490a      	ldr	r1, [pc, #40]	@ (80049fc <getWifiCred+0x74>)
 80049d4:	2002      	movs	r0, #2
 80049d6:	f00f fb3d 	bl	8014054 <CreateLine>
}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	200006b0 	.word	0x200006b0
 80049e4:	08080200 	.word	0x08080200
 80049e8:	200006d0 	.word	0x200006d0
 80049ec:	08080220 	.word	0x08080220
 80049f0:	0802ab28 	.word	0x0802ab28
 80049f4:	0802ab70 	.word	0x0802ab70
 80049f8:	0802ab74 	.word	0x0802ab74
 80049fc:	0802ab84 	.word	0x0802ab84
 8004a00:	0802ab88 	.word	0x0802ab88

08004a04 <checkName>:
  }
  test = (configSum == 0);
  return test;
}

bool checkName(){
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8004a0a:	4b15      	ldr	r3, [pc, #84]	@ (8004a60 <checkName+0x5c>)
 8004a0c:	4815      	ldr	r0, [pc, #84]	@ (8004a64 <checkName+0x60>)
 8004a0e:	2220      	movs	r2, #32
 8004a10:	0019      	movs	r1, r3
 8004a12:	f007 fcc3 	bl	800c39c <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8004a16:	1dfb      	adds	r3, r7, #7
 8004a18:	2200      	movs	r2, #0
 8004a1a:	701a      	strb	r2, [r3, #0]
 8004a1c:	e00e      	b.n	8004a3c <checkName+0x38>
    configSum += nameConfig[i];
 8004a1e:	1dfb      	adds	r3, r7, #7
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	4a0f      	ldr	r2, [pc, #60]	@ (8004a60 <checkName+0x5c>)
 8004a24:	5cd3      	ldrb	r3, [r2, r3]
 8004a26:	001a      	movs	r2, r3
 8004a28:	4b0f      	ldr	r3, [pc, #60]	@ (8004a68 <checkName+0x64>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	18d2      	adds	r2, r2, r3
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a68 <checkName+0x64>)
 8004a30:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8004a32:	1dfb      	adds	r3, r7, #7
 8004a34:	781a      	ldrb	r2, [r3, #0]
 8004a36:	1dfb      	adds	r3, r7, #7
 8004a38:	3201      	adds	r2, #1
 8004a3a:	701a      	strb	r2, [r3, #0]
 8004a3c:	1dfb      	adds	r3, r7, #7
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b0b      	cmp	r3, #11
 8004a42:	d9ec      	bls.n	8004a1e <checkName+0x1a>
  }
  test = (configSum != 0);
 8004a44:	4b08      	ldr	r3, [pc, #32]	@ (8004a68 <checkName+0x64>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	1e5a      	subs	r2, r3, #1
 8004a4a:	4193      	sbcs	r3, r2
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	4b07      	ldr	r3, [pc, #28]	@ (8004a6c <checkName+0x68>)
 8004a50:	701a      	strb	r2, [r3, #0]
  return test;
 8004a52:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <checkName+0x68>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
}
 8004a56:	0018      	movs	r0, r3
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b002      	add	sp, #8
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	20000778 	.word	0x20000778
 8004a64:	08080090 	.word	0x08080090
 8004a68:	20000798 	.word	0x20000798
 8004a6c:	2000079c 	.word	0x2000079c

08004a70 <setModePowerMail>:

#ifdef USE_MAIL
void setModePowerMail() {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08c      	sub	sp, #48	@ 0x30
 8004a74:	af00      	add	r7, sp, #0
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8004a76:	003b      	movs	r3, r7
 8004a78:	4811      	ldr	r0, [pc, #68]	@ (8004ac0 <setModePowerMail+0x50>)
 8004a7a:	2230      	movs	r2, #48	@ 0x30
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	f007 fc8d 	bl	800c39c <ReadUint8ArrayEEprom>
  if ( strlen((char*)MailAPIKeyConfig) == 0) {
 8004a82:	003b      	movs	r3, r7
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <setModePowerMail+0x28>
    Error("No mail API key defined");
 8004a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8004ac4 <setModePowerMail+0x54>)
 8004a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac8 <setModePowerMail+0x58>)
 8004a8e:	0019      	movs	r1, r3
 8004a90:	2001      	movs	r0, #1
 8004a92:	f00f fadf 	bl	8014054 <CreateLine>
 8004a96:	e00f      	b.n	8004ab8 <setModePowerMail+0x48>
    return;
  }
  sendpwremail = DO_PWR_MAIL;
 8004a98:	4b0c      	ldr	r3, [pc, #48]	@ (8004acc <setModePowerMail+0x5c>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]
  Mode = AT_MODE_MAIL;
 8004a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad0 <setModePowerMail+0x60>)
 8004aa0:	2206      	movs	r2, #6
 8004aa2:	701a      	strb	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad4 <setModePowerMail+0x64>)
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	701a      	strb	r2, [r3, #0]
  savedESPTimeStamp = ESPTimeStamp;
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad8 <setModePowerMail+0x68>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b0b      	ldr	r3, [pc, #44]	@ (8004adc <setModePowerMail+0x6c>)
 8004ab0:	601a      	str	r2, [r3, #0]
  ESPTimeStamp = 0;
 8004ab2:	4b09      	ldr	r3, [pc, #36]	@ (8004ad8 <setModePowerMail+0x68>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
}
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b00c      	add	sp, #48	@ 0x30
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	080802c0 	.word	0x080802c0
 8004ac4:	0802ab9c 	.word	0x0802ab9c
 8004ac8:	0802ab70 	.word	0x0802ab70
 8004acc:	200010af 	.word	0x200010af
 8004ad0:	20000712 	.word	0x20000712
 8004ad4:	20000030 	.word	0x20000030
 8004ad8:	200006a4 	.word	0x200006a4
 8004adc:	2000002c 	.word	0x2000002c

08004ae0 <setHIDS>:
#endif

void setHIDS(float temp, float humid){
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  MeasVal.Temperature = temp;
 8004aea:	4b05      	ldr	r3, [pc, #20]	@ (8004b00 <setHIDS+0x20>)
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	601a      	str	r2, [r3, #0]
  MeasVal.Humidity = humid;
 8004af0:	4b03      	ldr	r3, [pc, #12]	@ (8004b00 <setHIDS+0x20>)
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	605a      	str	r2, [r3, #4]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
    displayTemperature();
    displayHumidity();
  }
#endif
}
 8004af6:	46c0      	nop			@ (mov r8, r8)
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b002      	add	sp, #8
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	46c0      	nop			@ (mov r8, r8)
 8004b00:	20000714 	.word	0x20000714

08004b04 <setVOC>:

void setVOC(uint16_t voc) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	0002      	movs	r2, r0
 8004b0c:	1dbb      	adds	r3, r7, #6
 8004b0e:	801a      	strh	r2, [r3, #0]
  MeasVal.VOCIndex = voc;
 8004b10:	4b04      	ldr	r3, [pc, #16]	@ (8004b24 <setVOC+0x20>)
 8004b12:	1dba      	adds	r2, r7, #6
 8004b14:	2148      	movs	r1, #72	@ 0x48
 8004b16:	8812      	ldrh	r2, [r2, #0]
 8004b18:	525a      	strh	r2, [r3, r1]
#ifdef SSD1306
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayVOC();
  }
#endif
}
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b002      	add	sp, #8
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	20000714 	.word	0x20000714

08004b28 <setAHT2x>:

void setAHT2x(float airtemp, float airhum) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  MeasVal.AHT2x_humidity = airhum;
 8004b32:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <setAHT2x+0x20>)
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	639a      	str	r2, [r3, #56]	@ 0x38
//  if (airhum > MeasVal.AHT2x_humiditymax) {
//    MeasVal.AHT2x_humiditymax = airhum;
//  }
  MeasVal.AHT2x_temperature = airtemp;
 8004b38:	4b03      	ldr	r3, [pc, #12]	@ (8004b48 <setAHT2x+0x20>)
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	63da      	str	r2, [r3, #60]	@ 0x3c
//  if (airtemp > MeasVal.AHT2x_temperaturemax) {
//    MeasVal.AHT2x_temperaturemax = airtemp;
//  }
}
 8004b3e:	46c0      	nop			@ (mov r8, r8)
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b002      	add	sp, #8
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			@ (mov r8, r8)
 8004b48:	20000714 	.word	0x20000714

08004b4c <setBMP280>:

void setBMP280(float airtemp, float airhpa) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  MeasVal.BMP280_temperature = airtemp;
 8004b56:	4b05      	ldr	r3, [pc, #20]	@ (8004b6c <setBMP280+0x20>)
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	641a      	str	r2, [r3, #64]	@ 0x40
//  if (airtemp > MeasVal.BMP280_temperaturemax) {
//    MeasVal.BMP280_temperaturemax = airtemp;
//  }
  MeasVal.BMP280_airpressure = airhpa;
 8004b5c:	4b03      	ldr	r3, [pc, #12]	@ (8004b6c <setBMP280+0x20>)
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	645a      	str	r2, [r3, #68]	@ 0x44
#ifdef SSD1306
//  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
//    displayhPa();
//  }
#endif
}
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b002      	add	sp, #8
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	46c0      	nop			@ (mov r8, r8)
 8004b6c:	20000714 	.word	0x20000714

08004b70 <setENS160>:

void setENS160(uint8_t aqi, uint16_t tvoc, uint16_t eco2) {
 8004b70:	b590      	push	{r4, r7, lr}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	0004      	movs	r4, r0
 8004b78:	0008      	movs	r0, r1
 8004b7a:	0011      	movs	r1, r2
 8004b7c:	1dfb      	adds	r3, r7, #7
 8004b7e:	1c22      	adds	r2, r4, #0
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	1d3b      	adds	r3, r7, #4
 8004b84:	1c02      	adds	r2, r0, #0
 8004b86:	801a      	strh	r2, [r3, #0]
 8004b88:	1cbb      	adds	r3, r7, #2
 8004b8a:	1c0a      	adds	r2, r1, #0
 8004b8c:	801a      	strh	r2, [r3, #0]
  MeasVal.AQIndex = aqi;
 8004b8e:	4b15      	ldr	r3, [pc, #84]	@ (8004be4 <setENS160+0x74>)
 8004b90:	1dfa      	adds	r2, r7, #7
 8004b92:	2154      	movs	r1, #84	@ 0x54
 8004b94:	7812      	ldrb	r2, [r2, #0]
 8004b96:	545a      	strb	r2, [r3, r1]
  if (aqi > MeasVal.AQIndexmax) {
 8004b98:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <setENS160+0x74>)
 8004b9a:	2255      	movs	r2, #85	@ 0x55
 8004b9c:	5c9b      	ldrb	r3, [r3, r2]
 8004b9e:	1dfa      	adds	r2, r7, #7
 8004ba0:	7812      	ldrb	r2, [r2, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d904      	bls.n	8004bb0 <setENS160+0x40>
    MeasVal.AQIndexmax = aqi;
 8004ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8004be4 <setENS160+0x74>)
 8004ba8:	1dfa      	adds	r2, r7, #7
 8004baa:	2155      	movs	r1, #85	@ 0x55
 8004bac:	7812      	ldrb	r2, [r2, #0]
 8004bae:	545a      	strb	r2, [r3, r1]
  }
  MeasVal.TVOCIndex = tvoc;
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004be4 <setENS160+0x74>)
 8004bb2:	1d3a      	adds	r2, r7, #4
 8004bb4:	214a      	movs	r1, #74	@ 0x4a
 8004bb6:	8812      	ldrh	r2, [r2, #0]
 8004bb8:	525a      	strh	r2, [r3, r1]
  MeasVal.eCO2Index = eco2;
 8004bba:	4b0a      	ldr	r3, [pc, #40]	@ (8004be4 <setENS160+0x74>)
 8004bbc:	1cba      	adds	r2, r7, #2
 8004bbe:	2150      	movs	r1, #80	@ 0x50
 8004bc0:	8812      	ldrh	r2, [r2, #0]
 8004bc2:	525a      	strh	r2, [r3, r1]
  if (eco2 > MeasVal.eCO2Indexmax) {
 8004bc4:	4b07      	ldr	r3, [pc, #28]	@ (8004be4 <setENS160+0x74>)
 8004bc6:	2252      	movs	r2, #82	@ 0x52
 8004bc8:	5a9b      	ldrh	r3, [r3, r2]
 8004bca:	1cba      	adds	r2, r7, #2
 8004bcc:	8812      	ldrh	r2, [r2, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d904      	bls.n	8004bdc <setENS160+0x6c>
    MeasVal.eCO2Indexmax = eco2;
 8004bd2:	4b04      	ldr	r3, [pc, #16]	@ (8004be4 <setENS160+0x74>)
 8004bd4:	1cba      	adds	r2, r7, #2
 8004bd6:	2152      	movs	r1, #82	@ 0x52
 8004bd8:	8812      	ldrh	r2, [r2, #0]
 8004bda:	525a      	strh	r2, [r3, r1]
  }
}
 8004bdc:	46c0      	nop			@ (mov r8, r8)
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b003      	add	sp, #12
 8004be2:	bd90      	pop	{r4, r7, pc}
 8004be4:	20000714 	.word	0x20000714

08004be8 <setMic>:

void setMic(float dB, float dBmax, float dBAavg){
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  MeasVal.dBA = dB;
 8004bf4:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <setMic+0x28>)
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	659a      	str	r2, [r3, #88]	@ 0x58
  MeasVal.dBApeak = dBmax;
 8004bfa:	4b05      	ldr	r3, [pc, #20]	@ (8004c10 <setMic+0x28>)
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
  MeasVal.dBAaverage = dBAavg;
 8004c00:	4b03      	ldr	r3, [pc, #12]	@ (8004c10 <setMic+0x28>)
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	661a      	str	r2, [r3, #96]	@ 0x60
  if (SSD1306detected &&(Check_USB_PowerOn() || userToggle)) {
    displayActdBA();
    displayPeakdBA();
  }
#endif
}
 8004c06:	46c0      	nop			@ (mov r8, r8)
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b004      	add	sp, #16
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	46c0      	nop			@ (mov r8, r8)
 8004c10:	20000714 	.word	0x20000714

08004c14 <setPM1p0>:

void setPM1p0(uint16_t PM1) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	0002      	movs	r2, r0
 8004c1c:	1dbb      	adds	r3, r7, #6
 8004c1e:	801a      	strh	r2, [r3, #0]
  MeasVal.PM1p0 = PM1 / 10.0f;
 8004c20:	1dbb      	adds	r3, r7, #6
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f7fc fdff 	bl	8001828 <__aeabi_i2f>
 8004c2a:	1c03      	adds	r3, r0, #0
 8004c2c:	490d      	ldr	r1, [pc, #52]	@ (8004c64 <setPM1p0+0x50>)
 8004c2e:	1c18      	adds	r0, r3, #0
 8004c30:	f7fc f838 	bl	8000ca4 <__aeabi_fdiv>
 8004c34:	1c03      	adds	r3, r0, #0
 8004c36:	1c1a      	adds	r2, r3, #0
 8004c38:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <setPM1p0+0x54>)
 8004c3a:	609a      	str	r2, [r3, #8]
  if (MeasVal.PM1p0 > MeasVal.PM1p0max) {
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c68 <setPM1p0+0x54>)
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	4b09      	ldr	r3, [pc, #36]	@ (8004c68 <setPM1p0+0x54>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	1c19      	adds	r1, r3, #0
 8004c46:	1c10      	adds	r0, r2, #0
 8004c48:	f7fb fc86 	bl	8000558 <__aeabi_fcmpgt>
 8004c4c:	1e03      	subs	r3, r0, #0
 8004c4e:	d100      	bne.n	8004c52 <setPM1p0+0x3e>
    MeasVal.PM1p0max = MeasVal.PM1p0;
  }
}
 8004c50:	e003      	b.n	8004c5a <setPM1p0+0x46>
    MeasVal.PM1p0max = MeasVal.PM1p0;
 8004c52:	4b05      	ldr	r3, [pc, #20]	@ (8004c68 <setPM1p0+0x54>)
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	4b04      	ldr	r3, [pc, #16]	@ (8004c68 <setPM1p0+0x54>)
 8004c58:	60da      	str	r2, [r3, #12]
}
 8004c5a:	46c0      	nop			@ (mov r8, r8)
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b002      	add	sp, #8
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	41200000 	.word	0x41200000
 8004c68:	20000714 	.word	0x20000714

08004c6c <setPM2p5>:

void setPM2p5(uint16_t PM2) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	0002      	movs	r2, r0
 8004c74:	1dbb      	adds	r3, r7, #6
 8004c76:	801a      	strh	r2, [r3, #0]
  MeasVal.PM2p5 = PM2 / 10.0f;
 8004c78:	1dbb      	adds	r3, r7, #6
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f7fc fdd3 	bl	8001828 <__aeabi_i2f>
 8004c82:	1c03      	adds	r3, r0, #0
 8004c84:	490d      	ldr	r1, [pc, #52]	@ (8004cbc <setPM2p5+0x50>)
 8004c86:	1c18      	adds	r0, r3, #0
 8004c88:	f7fc f80c 	bl	8000ca4 <__aeabi_fdiv>
 8004c8c:	1c03      	adds	r3, r0, #0
 8004c8e:	1c1a      	adds	r2, r3, #0
 8004c90:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc0 <setPM2p5+0x54>)
 8004c92:	611a      	str	r2, [r3, #16]
  if (MeasVal.PM2p5 > MeasVal.PM2p5max) {
 8004c94:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc0 <setPM2p5+0x54>)
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	4b09      	ldr	r3, [pc, #36]	@ (8004cc0 <setPM2p5+0x54>)
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	1c19      	adds	r1, r3, #0
 8004c9e:	1c10      	adds	r0, r2, #0
 8004ca0:	f7fb fc5a 	bl	8000558 <__aeabi_fcmpgt>
 8004ca4:	1e03      	subs	r3, r0, #0
 8004ca6:	d100      	bne.n	8004caa <setPM2p5+0x3e>
#ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM2p5();
  }
#endif
}
 8004ca8:	e003      	b.n	8004cb2 <setPM2p5+0x46>
    MeasVal.PM2p5max = MeasVal.PM2p5;
 8004caa:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <setPM2p5+0x54>)
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	4b04      	ldr	r3, [pc, #16]	@ (8004cc0 <setPM2p5+0x54>)
 8004cb0:	615a      	str	r2, [r3, #20]
}
 8004cb2:	46c0      	nop			@ (mov r8, r8)
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	b002      	add	sp, #8
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	46c0      	nop			@ (mov r8, r8)
 8004cbc:	41200000 	.word	0x41200000
 8004cc0:	20000714 	.word	0x20000714

08004cc4 <setPM4p0>:

void setPM4p0(uint16_t PM4) {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	0002      	movs	r2, r0
 8004ccc:	1dbb      	adds	r3, r7, #6
 8004cce:	801a      	strh	r2, [r3, #0]
  MeasVal.PM4p0 = PM4 / 10.0f;
 8004cd0:	1dbb      	adds	r3, r7, #6
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f7fc fda7 	bl	8001828 <__aeabi_i2f>
 8004cda:	1c03      	adds	r3, r0, #0
 8004cdc:	490d      	ldr	r1, [pc, #52]	@ (8004d14 <setPM4p0+0x50>)
 8004cde:	1c18      	adds	r0, r3, #0
 8004ce0:	f7fb ffe0 	bl	8000ca4 <__aeabi_fdiv>
 8004ce4:	1c03      	adds	r3, r0, #0
 8004ce6:	1c1a      	adds	r2, r3, #0
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d18 <setPM4p0+0x54>)
 8004cea:	619a      	str	r2, [r3, #24]
  if (MeasVal.PM4p0 > MeasVal.PM4p0max) {
 8004cec:	4b0a      	ldr	r3, [pc, #40]	@ (8004d18 <setPM4p0+0x54>)
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	4b09      	ldr	r3, [pc, #36]	@ (8004d18 <setPM4p0+0x54>)
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	1c19      	adds	r1, r3, #0
 8004cf6:	1c10      	adds	r0, r2, #0
 8004cf8:	f7fb fc2e 	bl	8000558 <__aeabi_fcmpgt>
 8004cfc:	1e03      	subs	r3, r0, #0
 8004cfe:	d100      	bne.n	8004d02 <setPM4p0+0x3e>
    MeasVal.PM4p0max = MeasVal.PM4p0;
  }
}
 8004d00:	e003      	b.n	8004d0a <setPM4p0+0x46>
    MeasVal.PM4p0max = MeasVal.PM4p0;
 8004d02:	4b05      	ldr	r3, [pc, #20]	@ (8004d18 <setPM4p0+0x54>)
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	4b04      	ldr	r3, [pc, #16]	@ (8004d18 <setPM4p0+0x54>)
 8004d08:	61da      	str	r2, [r3, #28]
}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b002      	add	sp, #8
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	46c0      	nop			@ (mov r8, r8)
 8004d14:	41200000 	.word	0x41200000
 8004d18:	20000714 	.word	0x20000714

08004d1c <setPM10>:

void setPM10(uint16_t PM10) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	0002      	movs	r2, r0
 8004d24:	1dbb      	adds	r3, r7, #6
 8004d26:	801a      	strh	r2, [r3, #0]
  MeasVal.PM10p0 = PM10 / 10.0f;
 8004d28:	1dbb      	adds	r3, r7, #6
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f7fc fd7b 	bl	8001828 <__aeabi_i2f>
 8004d32:	1c03      	adds	r3, r0, #0
 8004d34:	490d      	ldr	r1, [pc, #52]	@ (8004d6c <setPM10+0x50>)
 8004d36:	1c18      	adds	r0, r3, #0
 8004d38:	f7fb ffb4 	bl	8000ca4 <__aeabi_fdiv>
 8004d3c:	1c03      	adds	r3, r0, #0
 8004d3e:	1c1a      	adds	r2, r3, #0
 8004d40:	4b0b      	ldr	r3, [pc, #44]	@ (8004d70 <setPM10+0x54>)
 8004d42:	621a      	str	r2, [r3, #32]
  if (MeasVal.PM10p0 > MeasVal.PM10p0max) {
 8004d44:	4b0a      	ldr	r3, [pc, #40]	@ (8004d70 <setPM10+0x54>)
 8004d46:	6a1a      	ldr	r2, [r3, #32]
 8004d48:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <setPM10+0x54>)
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	1c19      	adds	r1, r3, #0
 8004d4e:	1c10      	adds	r0, r2, #0
 8004d50:	f7fb fc02 	bl	8000558 <__aeabi_fcmpgt>
 8004d54:	1e03      	subs	r3, r0, #0
 8004d56:	d100      	bne.n	8004d5a <setPM10+0x3e>
  #ifdef SSD1306
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
      displayPM10();
  }
#endif
}
 8004d58:	e003      	b.n	8004d62 <setPM10+0x46>
  MeasVal.PM10p0max = MeasVal.PM10p0;
 8004d5a:	4b05      	ldr	r3, [pc, #20]	@ (8004d70 <setPM10+0x54>)
 8004d5c:	6a1a      	ldr	r2, [r3, #32]
 8004d5e:	4b04      	ldr	r3, [pc, #16]	@ (8004d70 <setPM10+0x54>)
 8004d60:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004d62:	46c0      	nop			@ (mov r8, r8)
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b002      	add	sp, #8
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			@ (mov r8, r8)
 8004d6c:	41200000 	.word	0x41200000
 8004d70:	20000714 	.word	0x20000714

08004d74 <setNOx>:

void setNOx(uint16_t nox) {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	0002      	movs	r2, r0
 8004d7c:	1dbb      	adds	r3, r7, #6
 8004d7e:	801a      	strh	r2, [r3, #0]
//  Debug("SetNOx entered");
  MeasVal.airNOx = nox;
 8004d80:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <setNOx+0x38>)
 8004d82:	1dba      	adds	r2, r7, #6
 8004d84:	214c      	movs	r1, #76	@ 0x4c
 8004d86:	8812      	ldrh	r2, [r2, #0]
 8004d88:	525a      	strh	r2, [r3, r1]
  if (nox > MeasVal.airNOxmax) {
 8004d8a:	4b08      	ldr	r3, [pc, #32]	@ (8004dac <setNOx+0x38>)
 8004d8c:	224e      	movs	r2, #78	@ 0x4e
 8004d8e:	5a9b      	ldrh	r3, [r3, r2]
 8004d90:	1dba      	adds	r2, r7, #6
 8004d92:	8812      	ldrh	r2, [r2, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d904      	bls.n	8004da2 <setNOx+0x2e>
    MeasVal.airNOxmax = nox;
 8004d98:	4b04      	ldr	r3, [pc, #16]	@ (8004dac <setNOx+0x38>)
 8004d9a:	1dba      	adds	r2, r7, #6
 8004d9c:	214e      	movs	r1, #78	@ 0x4e
 8004d9e:	8812      	ldrh	r2, [r2, #0]
 8004da0:	525a      	strh	r2, [r3, r1]
  if (SSD1306detected && (Check_USB_PowerOn() || userToggle)) {
//    Debug("calling display NOx update");
    displayNOx();
  }
#endif
}
 8004da2:	46c0      	nop			@ (mov r8, r8)
 8004da4:	46bd      	mov	sp, r7
 8004da6:	b002      	add	sp, #8
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	46c0      	nop			@ (mov r8, r8)
 8004dac:	20000714 	.word	0x20000714

08004db0 <SetSEN545temphum>:

void SetSEN545temphum(float airtemp, float airhum) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  MeasVal.sen55_temperature = airtemp / 200.0f;
 8004dba:	490a      	ldr	r1, [pc, #40]	@ (8004de4 <SetSEN545temphum+0x34>)
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fb ff71 	bl	8000ca4 <__aeabi_fdiv>
 8004dc2:	1c03      	adds	r3, r0, #0
 8004dc4:	1c1a      	adds	r2, r3, #0
 8004dc6:	4b08      	ldr	r3, [pc, #32]	@ (8004de8 <SetSEN545temphum+0x38>)
 8004dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  MeasVal.sen55_humidity = airhum / 100.0f;
 8004dca:	4908      	ldr	r1, [pc, #32]	@ (8004dec <SetSEN545temphum+0x3c>)
 8004dcc:	6838      	ldr	r0, [r7, #0]
 8004dce:	f7fb ff69 	bl	8000ca4 <__aeabi_fdiv>
 8004dd2:	1c03      	adds	r3, r0, #0
 8004dd4:	1c1a      	adds	r2, r3, #0
 8004dd6:	4b04      	ldr	r3, [pc, #16]	@ (8004de8 <SetSEN545temphum+0x38>)
 8004dd8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b002      	add	sp, #8
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	43480000 	.word	0x43480000
 8004de8:	20000714 	.word	0x20000714
 8004dec:	42c80000 	.word	0x42c80000

08004df0 <resetMaxMeasurementValues>:

void resetMaxMeasurementValues() {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  if (sen5x_Get_sen5x_enable_state()) {
 8004df4:	f009 fcd0 	bl	800e798 <sen5x_Get_sen5x_enable_state>
 8004df8:	1e03      	subs	r3, r0, #0
 8004dfa:	d00f      	beq.n	8004e1c <resetMaxMeasurementValues+0x2c>
    MeasVal.PM1p0max = 0.0f;
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <resetMaxMeasurementValues+0x44>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	60da      	str	r2, [r3, #12]
    MeasVal.PM2p5max = 0.0f;
 8004e02:	4b0c      	ldr	r3, [pc, #48]	@ (8004e34 <resetMaxMeasurementValues+0x44>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	615a      	str	r2, [r3, #20]
    MeasVal.PM4p0max = 0.0f;
 8004e08:	4b0a      	ldr	r3, [pc, #40]	@ (8004e34 <resetMaxMeasurementValues+0x44>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	61da      	str	r2, [r3, #28]
    MeasVal.PM10p0max = 0.0f;
 8004e0e:	4b09      	ldr	r3, [pc, #36]	@ (8004e34 <resetMaxMeasurementValues+0x44>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	625a      	str	r2, [r3, #36]	@ 0x24
    MeasVal.airNOxmax = 0;
 8004e14:	4b07      	ldr	r3, [pc, #28]	@ (8004e34 <resetMaxMeasurementValues+0x44>)
 8004e16:	224e      	movs	r2, #78	@ 0x4e
 8004e18:	2100      	movs	r1, #0
 8004e1a:	5299      	strh	r1, [r3, r2]
  }
//  MeasVal.AHT2x_humiditymax = 0.0;
//  MeasVal.AHT2x_temperaturemax = 0.0;
//  MeasVal.BMP280_temperaturemax = 0.0;
//  MeasVal.BMP280_airpressuremax = 0.0;
  MeasVal.eCO2Indexmax = 0;
 8004e1c:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <resetMaxMeasurementValues+0x44>)
 8004e1e:	2252      	movs	r2, #82	@ 0x52
 8004e20:	2100      	movs	r1, #0
 8004e22:	5299      	strh	r1, [r3, r2]
  MeasVal.AQIndexmax = 0;
 8004e24:	4b03      	ldr	r3, [pc, #12]	@ (8004e34 <resetMaxMeasurementValues+0x44>)
 8004e26:	2255      	movs	r2, #85	@ 0x55
 8004e28:	2100      	movs	r1, #0
 8004e2a:	5499      	strb	r1, [r3, r2]
}
 8004e2c:	46c0      	nop			@ (mov r8, r8)
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	46c0      	nop			@ (mov r8, r8)
 8004e34:	20000714 	.word	0x20000714

08004e38 <SetConfigMode>:

void SetConfigMode(){
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  if (!ReconfigSet) {
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e68 <SetConfigMode+0x30>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2201      	movs	r2, #1
 8004e42:	4053      	eors	r3, r2
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <SetConfigMode+0x1e>
    Debug("ReconfigSet in SetConfigMode");
 8004e4a:	4a08      	ldr	r2, [pc, #32]	@ (8004e6c <SetConfigMode+0x34>)
 8004e4c:	4b08      	ldr	r3, [pc, #32]	@ (8004e70 <SetConfigMode+0x38>)
 8004e4e:	0019      	movs	r1, r3
 8004e50:	2003      	movs	r0, #3
 8004e52:	f00f f8ff 	bl	8014054 <CreateLine>
  }
  ReconfigSet = true;
 8004e56:	4b04      	ldr	r3, [pc, #16]	@ (8004e68 <SetConfigMode+0x30>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	701a      	strb	r2, [r3, #0]
  usblog = false;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <SetConfigMode+0x3c>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
}
 8004e62:	46c0      	nop			@ (mov r8, r8)
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	200005af 	.word	0x200005af
 8004e6c:	0802abb4 	.word	0x0802abb4
 8004e70:	0802abd4 	.word	0x0802abd4
 8004e74:	200027ac 	.word	0x200027ac

08004e78 <GetReconfigMode>:

bool GetReconfigMode() {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  return ReconfigSet;
 8004e7c:	4b02      	ldr	r3, [pc, #8]	@ (8004e88 <GetReconfigMode+0x10>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
}
 8004e80:	0018      	movs	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	46c0      	nop			@ (mov r8, r8)
 8004e88:	200005af 	.word	0x200005af

08004e8c <ESP_GetUID>:

void ESP_GetUID(){
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8004e90:	f00f fea2 	bl	8014bd8 <HAL_GetUIDw0>
 8004e94:	0002      	movs	r2, r0
 8004e96:	4b07      	ldr	r3, [pc, #28]	@ (8004eb4 <ESP_GetUID+0x28>)
 8004e98:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8004e9a:	f00f fea7 	bl	8014bec <HAL_GetUIDw1>
 8004e9e:	0002      	movs	r2, r0
 8004ea0:	4b04      	ldr	r3, [pc, #16]	@ (8004eb4 <ESP_GetUID+0x28>)
 8004ea2:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8004ea4:	f00f feac 	bl	8014c00 <HAL_GetUIDw2>
 8004ea8:	0002      	movs	r2, r0
 8004eaa:	4b02      	ldr	r3, [pc, #8]	@ (8004eb4 <ESP_GetUID+0x28>)
 8004eac:	609a      	str	r2, [r3, #8]
}
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	200005b4 	.word	0x200005b4

08004eb8 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8004ec0:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <ESP_Init+0x20>)
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8004ec6:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <ESP_Init+0x24>)
 8004ec8:	2202      	movs	r2, #2
 8004eca:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8004ecc:	f7ff ffde 	bl	8004e8c <ESP_GetUID>
//  beurs = checkEEprom();
}
 8004ed0:	46c0      	nop			@ (mov r8, r8)
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b002      	add	sp, #8
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	200004a4 	.word	0x200004a4
 8004edc:	20000030 	.word	0x20000030

08004ee0 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8004ee0:	b5b0      	push	{r4, r5, r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	000a      	movs	r2, r1
 8004eea:	1cbb      	adds	r3, r7, #2
 8004eec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8004eee:	4b11      	ldr	r3, [pc, #68]	@ (8004f34 <ESP_Send+0x54>)
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	250f      	movs	r5, #15
 8004ef4:	197c      	adds	r4, r7, r5
 8004ef6:	1cbb      	adds	r3, r7, #2
 8004ef8:	881a      	ldrh	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	0019      	movs	r1, r3
 8004efe:	f018 fc75 	bl	801d7ec <HAL_UART_Transmit_DMA>
 8004f02:	0003      	movs	r3, r0
 8004f04:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004f06:	197b      	adds	r3, r7, r5
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d007      	beq.n	8004f1e <ESP_Send+0x3e>
    Error("Error in HAL_UART_Transmit_DMA");
 8004f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f38 <ESP_Send+0x58>)
 8004f10:	4b0a      	ldr	r3, [pc, #40]	@ (8004f3c <ESP_Send+0x5c>)
 8004f12:	0019      	movs	r1, r3
 8004f14:	2001      	movs	r0, #1
 8004f16:	f00f f89d 	bl	8014054 <CreateLine>
    return false;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e006      	b.n	8004f2c <ESP_Send+0x4c>
  }
  Debug("ESP_Send: %s", command);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a07      	ldr	r2, [pc, #28]	@ (8004f40 <ESP_Send+0x60>)
 8004f22:	4908      	ldr	r1, [pc, #32]	@ (8004f44 <ESP_Send+0x64>)
 8004f24:	2003      	movs	r0, #3
 8004f26:	f00f f895 	bl	8014054 <CreateLine>
  return true;
 8004f2a:	2301      	movs	r3, #1
}
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b004      	add	sp, #16
 8004f32:	bdb0      	pop	{r4, r5, r7, pc}
 8004f34:	200004a4 	.word	0x200004a4
 8004f38:	0802abd8 	.word	0x0802abd8
 8004f3c:	0802ab70 	.word	0x0802ab70
 8004f40:	0802abf8 	.word	0x0802abf8
 8004f44:	0802abd4 	.word	0x0802abd4

08004f48 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8004f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	000a      	movs	r2, r1
 8004f52:	1cbb      	adds	r3, r7, #2
 8004f54:	801a      	strh	r2, [r3, #0]
  RxComplete = false;
 8004f56:	4b5c      	ldr	r3, [pc, #368]	@ (80050c8 <ESP_Receive+0x180>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8004f5c:	260f      	movs	r6, #15
 8004f5e:	19bb      	adds	r3, r7, r6
 8004f60:	2200      	movs	r2, #0
 8004f62:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8004f64:	4b59      	ldr	r3, [pc, #356]	@ (80050cc <ESP_Receive+0x184>)
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	250d      	movs	r5, #13
 8004f6a:	197c      	adds	r4, r7, r5
 8004f6c:	1cbb      	adds	r3, r7, #2
 8004f6e:	881a      	ldrh	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	0019      	movs	r1, r3
 8004f74:	f018 fcca 	bl	801d90c <HAL_UART_Receive_DMA>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8004f7c:	002c      	movs	r4, r5
 8004f7e:	193b      	adds	r3, r7, r4
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d100      	bne.n	8004f88 <ESP_Receive+0x40>
 8004f86:	e09a      	b.n	80050be <ESP_Receive+0x176>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8004f88:	4b50      	ldr	r3, [pc, #320]	@ (80050cc <ESP_Receive+0x184>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2284      	movs	r2, #132	@ 0x84
 8004f8e:	589b      	ldr	r3, [r3, r2]
 8004f90:	4a4f      	ldr	r2, [pc, #316]	@ (80050d0 <ESP_Receive+0x188>)
 8004f92:	4950      	ldr	r1, [pc, #320]	@ (80050d4 <ESP_Receive+0x18c>)
 8004f94:	2001      	movs	r0, #1
 8004f96:	f00f f85d 	bl	8014054 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8004f9a:	193b      	adds	r3, r7, r4
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d008      	beq.n	8004fb6 <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8004fa4:	4a4c      	ldr	r2, [pc, #304]	@ (80050d8 <ESP_Receive+0x190>)
 8004fa6:	4b4b      	ldr	r3, [pc, #300]	@ (80050d4 <ESP_Receive+0x18c>)
 8004fa8:	0019      	movs	r1, r3
 8004faa:	2001      	movs	r0, #1
 8004fac:	f00f f852 	bl	8014054 <CreateLine>
      reset = true;
 8004fb0:	19bb      	adds	r3, r7, r6
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8004fb6:	230d      	movs	r3, #13
 8004fb8:	18fb      	adds	r3, r7, r3
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d005      	beq.n	8004fce <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8004fc2:	4a46      	ldr	r2, [pc, #280]	@ (80050dc <ESP_Receive+0x194>)
 8004fc4:	4b43      	ldr	r3, [pc, #268]	@ (80050d4 <ESP_Receive+0x18c>)
 8004fc6:	0019      	movs	r1, r3
 8004fc8:	2001      	movs	r0, #1
 8004fca:	f00f f843 	bl	8014054 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8004fce:	230d      	movs	r3, #13
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2204      	movs	r2, #4
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	d005      	beq.n	8004fe6 <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8004fda:	4a41      	ldr	r2, [pc, #260]	@ (80050e0 <ESP_Receive+0x198>)
 8004fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80050d4 <ESP_Receive+0x18c>)
 8004fde:	0019      	movs	r1, r3
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	f00f f837 	bl	8014054 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8004fe6:	230d      	movs	r3, #13
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2208      	movs	r2, #8
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d005      	beq.n	8004ffe <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8004ff2:	4a3c      	ldr	r2, [pc, #240]	@ (80050e4 <ESP_Receive+0x19c>)
 8004ff4:	4b37      	ldr	r3, [pc, #220]	@ (80050d4 <ESP_Receive+0x18c>)
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	f00f f82b 	bl	8014054 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8004ffe:	230d      	movs	r3, #13
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2210      	movs	r2, #16
 8005006:	4013      	ands	r3, r2
 8005008:	d005      	beq.n	8005016 <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 800500a:	4a37      	ldr	r2, [pc, #220]	@ (80050e8 <ESP_Receive+0x1a0>)
 800500c:	4b31      	ldr	r3, [pc, #196]	@ (80050d4 <ESP_Receive+0x18c>)
 800500e:	0019      	movs	r1, r3
 8005010:	2001      	movs	r0, #1
 8005012:	f00f f81f 	bl	8014054 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8005016:	230d      	movs	r3, #13
 8005018:	18fb      	adds	r3, r7, r3
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2220      	movs	r2, #32
 800501e:	4013      	ands	r3, r2
 8005020:	d005      	beq.n	800502e <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8005022:	4a32      	ldr	r2, [pc, #200]	@ (80050ec <ESP_Receive+0x1a4>)
 8005024:	4b2b      	ldr	r3, [pc, #172]	@ (80050d4 <ESP_Receive+0x18c>)
 8005026:	0019      	movs	r1, r3
 8005028:	2001      	movs	r0, #1
 800502a:	f00f f813 	bl	8014054 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 800502e:	230d      	movs	r3, #13
 8005030:	18fb      	adds	r3, r7, r3
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2240      	movs	r2, #64	@ 0x40
 8005036:	4013      	ands	r3, r2
 8005038:	d005      	beq.n	8005046 <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 800503a:	4a2d      	ldr	r2, [pc, #180]	@ (80050f0 <ESP_Receive+0x1a8>)
 800503c:	4b25      	ldr	r3, [pc, #148]	@ (80050d4 <ESP_Receive+0x18c>)
 800503e:	0019      	movs	r1, r3
 8005040:	2001      	movs	r0, #1
 8005042:	f00f f807 	bl	8014054 <CreateLine>
    }
#endif
    if (reset) {
 8005046:	230f      	movs	r3, #15
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d031      	beq.n	80050b4 <ESP_Receive+0x16c>
      //switch off the ESP and reset the system
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005050:	4b28      	ldr	r3, [pc, #160]	@ (80050f4 <ESP_Receive+0x1ac>)
 8005052:	2200      	movs	r2, #0
 8005054:	2101      	movs	r1, #1
 8005056:	0018      	movs	r0, r3
 8005058:	f011 f805 	bl	8016066 <HAL_GPIO_WritePin>
      HAL_Delay(10);
 800505c:	200a      	movs	r0, #10
 800505e:	f00f fd7b 	bl	8014b58 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005062:	2380      	movs	r3, #128	@ 0x80
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	4824      	ldr	r0, [pc, #144]	@ (80050f8 <ESP_Receive+0x1b0>)
 8005068:	2200      	movs	r2, #0
 800506a:	0019      	movs	r1, r3
 800506c:	f010 fffb 	bl	8016066 <HAL_GPIO_WritePin>
      HAL_Delay(10);
 8005070:	200a      	movs	r0, #10
 8005072:	f00f fd71 	bl	8014b58 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005076:	4b1f      	ldr	r3, [pc, #124]	@ (80050f4 <ESP_Receive+0x1ac>)
 8005078:	2200      	movs	r2, #0
 800507a:	2102      	movs	r1, #2
 800507c:	0018      	movs	r0, r3
 800507e:	f010 fff2 	bl	8016066 <HAL_GPIO_WritePin>
      for (uint8_t resl = 0; resl < 10; resl++) { //Wait some time to reset
 8005082:	230e      	movs	r3, #14
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	2200      	movs	r2, #0
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	e00c      	b.n	80050a6 <ESP_Receive+0x15e>
        SetAllREDLED();
 800508c:	f00d fe5c 	bl	8012d48 <SetAllREDLED>
        HAL_Delay(1000);
 8005090:	23fa      	movs	r3, #250	@ 0xfa
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	0018      	movs	r0, r3
 8005096:	f00f fd5f 	bl	8014b58 <HAL_Delay>
      for (uint8_t resl = 0; resl < 10; resl++) { //Wait some time to reset
 800509a:	210e      	movs	r1, #14
 800509c:	187b      	adds	r3, r7, r1
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	187b      	adds	r3, r7, r1
 80050a2:	3201      	adds	r2, #1
 80050a4:	701a      	strb	r2, [r3, #0]
 80050a6:	230e      	movs	r3, #14
 80050a8:	18fb      	adds	r3, r7, r3
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b09      	cmp	r3, #9
 80050ae:	d9ed      	bls.n	800508c <ESP_Receive+0x144>
      }
      HAL_NVIC_SystemReset();
 80050b0:	f010 fa11 	bl	80154d6 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 80050b4:	4b04      	ldr	r3, [pc, #16]	@ (80050c8 <ESP_Receive+0x180>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	701a      	strb	r2, [r3, #0]
    return false;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e000      	b.n	80050c0 <ESP_Receive+0x178>
  }
  return true;
 80050be:	2301      	movs	r3, #1
}
 80050c0:	0018      	movs	r0, r3
 80050c2:	46bd      	mov	sp, r7
 80050c4:	b005      	add	sp, #20
 80050c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050c8:	200004a8 	.word	0x200004a8
 80050cc:	200004a4 	.word	0x200004a4
 80050d0:	0802ac08 	.word	0x0802ac08
 80050d4:	0802ab70 	.word	0x0802ab70
 80050d8:	0802ac38 	.word	0x0802ac38
 80050dc:	0802ac5c 	.word	0x0802ac5c
 80050e0:	0802ac80 	.word	0x0802ac80
 80050e4:	0802aca4 	.word	0x0802aca4
 80050e8:	0802acc8 	.word	0x0802acc8
 80050ec:	0802acf4 	.word	0x0802acf4
 80050f0:	0802ad24 	.word	0x0802ad24
 80050f4:	50001c00 	.word	0x50001c00
 80050f8:	50000800 	.word	0x50000800

080050fc <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8005104:	4b39      	ldr	r3, [pc, #228]	@ (80051ec <HAL_UART_ErrorCallback+0xf0>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	429a      	cmp	r2, r3
 800510c:	d16b      	bne.n	80051e6 <HAL_UART_ErrorCallback+0xea>
    if (huart->ErrorCode == 4) {
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2284      	movs	r2, #132	@ 0x84
 8005112:	589b      	ldr	r3, [r3, r2]
 8005114:	2b04      	cmp	r3, #4
 8005116:	d065      	beq.n	80051e4 <HAL_UART_ErrorCallback+0xe8>
      return;
    }
    Debug("A callback error has occurred, errorcode %0X", huart->ErrorCode);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2284      	movs	r2, #132	@ 0x84
 800511c:	589b      	ldr	r3, [r3, r2]
 800511e:	4a34      	ldr	r2, [pc, #208]	@ (80051f0 <HAL_UART_ErrorCallback+0xf4>)
 8005120:	4934      	ldr	r1, [pc, #208]	@ (80051f4 <HAL_UART_ErrorCallback+0xf8>)
 8005122:	2003      	movs	r0, #3
 8005124:	f00e ff96 	bl	8014054 <CreateLine>
    switch (huart->ErrorCode) {
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2284      	movs	r2, #132	@ 0x84
 800512c:	589b      	ldr	r3, [r3, r2]
 800512e:	2b0c      	cmp	r3, #12
 8005130:	d851      	bhi.n	80051d6 <HAL_UART_ErrorCallback+0xda>
 8005132:	009a      	lsls	r2, r3, #2
 8005134:	4b30      	ldr	r3, [pc, #192]	@ (80051f8 <HAL_UART_ErrorCallback+0xfc>)
 8005136:	18d3      	adds	r3, r2, r3
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	469f      	mov	pc, r3
      case HAL_UART_TX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Tx Half Complete Callback ID");
 800513c:	4a2f      	ldr	r2, [pc, #188]	@ (80051fc <HAL_UART_ErrorCallback+0x100>)
 800513e:	4b30      	ldr	r3, [pc, #192]	@ (8005200 <HAL_UART_ErrorCallback+0x104>)
 8005140:	0019      	movs	r1, r3
 8005142:	2001      	movs	r0, #1
 8005144:	f00e ff86 	bl	8014054 <CreateLine>
        break;
 8005148:	e04d      	b.n	80051e6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_TX_COMPLETE_CB_ID:
        Error("ESP connection UART Tx Complete Callback ID");
 800514a:	4a2e      	ldr	r2, [pc, #184]	@ (8005204 <HAL_UART_ErrorCallback+0x108>)
 800514c:	4b2c      	ldr	r3, [pc, #176]	@ (8005200 <HAL_UART_ErrorCallback+0x104>)
 800514e:	0019      	movs	r1, r3
 8005150:	2001      	movs	r0, #1
 8005152:	f00e ff7f 	bl	8014054 <CreateLine>
        break;
 8005156:	e046      	b.n	80051e6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_HALFCOMPLETE_CB_ID:
        Error("ESP connection UART Rx Half Complete Callback ID");
 8005158:	4a2b      	ldr	r2, [pc, #172]	@ (8005208 <HAL_UART_ErrorCallback+0x10c>)
 800515a:	4b29      	ldr	r3, [pc, #164]	@ (8005200 <HAL_UART_ErrorCallback+0x104>)
 800515c:	0019      	movs	r1, r3
 800515e:	2001      	movs	r0, #1
 8005160:	f00e ff78 	bl	8014054 <CreateLine>
        break;
 8005164:	e03f      	b.n	80051e6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_RX_COMPLETE_CB_ID:
        Error("ESP connection UART Rx Complete Callback ID");
 8005166:	4a29      	ldr	r2, [pc, #164]	@ (800520c <HAL_UART_ErrorCallback+0x110>)
 8005168:	4b25      	ldr	r3, [pc, #148]	@ (8005200 <HAL_UART_ErrorCallback+0x104>)
 800516a:	0019      	movs	r1, r3
 800516c:	2001      	movs	r0, #1
 800516e:	f00e ff71 	bl	8014054 <CreateLine>
        break;
 8005172:	e038      	b.n	80051e6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ERROR_CB_ID:
        Error("ESP connection UART Error Callback ID");
 8005174:	4a26      	ldr	r2, [pc, #152]	@ (8005210 <HAL_UART_ErrorCallback+0x114>)
 8005176:	4b22      	ldr	r3, [pc, #136]	@ (8005200 <HAL_UART_ErrorCallback+0x104>)
 8005178:	0019      	movs	r1, r3
 800517a:	2001      	movs	r0, #1
 800517c:	f00e ff6a 	bl	8014054 <CreateLine>
        break;
 8005180:	e031      	b.n	80051e6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Complete Callback ID");
 8005182:	4a24      	ldr	r2, [pc, #144]	@ (8005214 <HAL_UART_ErrorCallback+0x118>)
 8005184:	4b1e      	ldr	r3, [pc, #120]	@ (8005200 <HAL_UART_ErrorCallback+0x104>)
 8005186:	0019      	movs	r1, r3
 8005188:	2001      	movs	r0, #1
 800518a:	f00e ff63 	bl	8014054 <CreateLine>
        break;
 800518e:	e02a      	b.n	80051e6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Transmit Complete Callback ID");
 8005190:	4a21      	ldr	r2, [pc, #132]	@ (8005218 <HAL_UART_ErrorCallback+0x11c>)
 8005192:	4b1b      	ldr	r3, [pc, #108]	@ (8005200 <HAL_UART_ErrorCallback+0x104>)
 8005194:	0019      	movs	r1, r3
 8005196:	2001      	movs	r0, #1
 8005198:	f00e ff5c 	bl	8014054 <CreateLine>
        break;
 800519c:	e023      	b.n	80051e6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID:
        Error("ESP connection UART Abort Receive Complete Callback ID");
 800519e:	4a1f      	ldr	r2, [pc, #124]	@ (800521c <HAL_UART_ErrorCallback+0x120>)
 80051a0:	4b17      	ldr	r3, [pc, #92]	@ (8005200 <HAL_UART_ErrorCallback+0x104>)
 80051a2:	0019      	movs	r1, r3
 80051a4:	2001      	movs	r0, #1
 80051a6:	f00e ff55 	bl	8014054 <CreateLine>
        break;
 80051aa:	e01c      	b.n	80051e6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_WAKEUP_CB_ID:
        Error("ESP connection UART Wakeup Callback ID");
 80051ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005220 <HAL_UART_ErrorCallback+0x124>)
 80051ae:	4b14      	ldr	r3, [pc, #80]	@ (8005200 <HAL_UART_ErrorCallback+0x104>)
 80051b0:	0019      	movs	r1, r3
 80051b2:	2001      	movs	r0, #1
 80051b4:	f00e ff4e 	bl	8014054 <CreateLine>
        break;
 80051b8:	e015      	b.n	80051e6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPINIT_CB_ID:
        Error("ESP connection UART MspInit callback ID");
 80051ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005224 <HAL_UART_ErrorCallback+0x128>)
 80051bc:	4b10      	ldr	r3, [pc, #64]	@ (8005200 <HAL_UART_ErrorCallback+0x104>)
 80051be:	0019      	movs	r1, r3
 80051c0:	2001      	movs	r0, #1
 80051c2:	f00e ff47 	bl	8014054 <CreateLine>
        break;
 80051c6:	e00e      	b.n	80051e6 <HAL_UART_ErrorCallback+0xea>
      case HAL_UART_MSPDEINIT_CB_ID:
        Error("ESP connection UART MspDeInit callback ID");
 80051c8:	4a17      	ldr	r2, [pc, #92]	@ (8005228 <HAL_UART_ErrorCallback+0x12c>)
 80051ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005200 <HAL_UART_ErrorCallback+0x104>)
 80051cc:	0019      	movs	r1, r3
 80051ce:	2001      	movs	r0, #1
 80051d0:	f00e ff40 	bl	8014054 <CreateLine>
        break;
 80051d4:	e007      	b.n	80051e6 <HAL_UART_ErrorCallback+0xea>
      default:
        Error("ESP connection UART Unknown error");
 80051d6:	4a15      	ldr	r2, [pc, #84]	@ (800522c <HAL_UART_ErrorCallback+0x130>)
 80051d8:	4b09      	ldr	r3, [pc, #36]	@ (8005200 <HAL_UART_ErrorCallback+0x104>)
 80051da:	0019      	movs	r1, r3
 80051dc:	2001      	movs	r0, #1
 80051de:	f00e ff39 	bl	8014054 <CreateLine>
 80051e2:	e000      	b.n	80051e6 <HAL_UART_ErrorCallback+0xea>
      return;
 80051e4:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b002      	add	sp, #8
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	200004a4 	.word	0x200004a4
 80051f0:	0802ad54 	.word	0x0802ad54
 80051f4:	0802abd4 	.word	0x0802abd4
 80051f8:	0802e614 	.word	0x0802e614
 80051fc:	0802ad84 	.word	0x0802ad84
 8005200:	0802ab70 	.word	0x0802ab70
 8005204:	0802adb8 	.word	0x0802adb8
 8005208:	0802ade4 	.word	0x0802ade4
 800520c:	0802ae18 	.word	0x0802ae18
 8005210:	0802ae44 	.word	0x0802ae44
 8005214:	0802ae6c 	.word	0x0802ae6c
 8005218:	0802ae9c 	.word	0x0802ae9c
 800521c:	0802aed4 	.word	0x0802aed4
 8005220:	0802af0c 	.word	0x0802af0c
 8005224:	0802af34 	.word	0x0802af34
 8005228:	0802af5c 	.word	0x0802af5c
 800522c:	0802af88 	.word	0x0802af88

08005230 <isKeyValid>:

bool isKeyValid(uint8_t data[], char *sensormodel, char *sensortype) {
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af02      	add	r7, sp, #8
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  if ((data[0] > 66) && (data[0] != 0xFF))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b42      	cmp	r3, #66	@ 0x42
 8005242:	d905      	bls.n	8005250 <isKeyValid+0x20>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2bff      	cmp	r3, #255	@ 0xff
 800524a:	d001      	beq.n	8005250 <isKeyValid+0x20>
    return true;
 800524c:	2301      	movs	r3, #1
 800524e:	e03e      	b.n	80052ce <isKeyValid+0x9e>
  else {
    Error("Error sensor %s seems to have no stored key for %s: ", sensormodel, sensortype);
 8005250:	68b8      	ldr	r0, [r7, #8]
 8005252:	4a21      	ldr	r2, [pc, #132]	@ (80052d8 <isKeyValid+0xa8>)
 8005254:	4921      	ldr	r1, [pc, #132]	@ (80052dc <isKeyValid+0xac>)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	0003      	movs	r3, r0
 800525c:	2001      	movs	r0, #1
 800525e:	f00e fef9 	bl	8014054 <CreateLine>
    for (int i = 0; i < 12; i++) {
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	e01e      	b.n	80052a6 <isKeyValid+0x76>
      if (usblog && Check_USB_PowerOn()) {
 8005268:	4b1d      	ldr	r3, [pc, #116]	@ (80052e0 <isKeyValid+0xb0>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00d      	beq.n	800528c <isKeyValid+0x5c>
 8005270:	f004 fc90 	bl	8009b94 <Check_USB_PowerOn>
 8005274:	1e03      	subs	r3, r0, #0
 8005276:	d009      	beq.n	800528c <isKeyValid+0x5c>
        printf_USB("02x", data[i]);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	18d3      	adds	r3, r2, r3
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	001a      	movs	r2, r3
 8005282:	4b18      	ldr	r3, [pc, #96]	@ (80052e4 <isKeyValid+0xb4>)
 8005284:	0011      	movs	r1, r2
 8005286:	0018      	movs	r0, r3
 8005288:	f003 fbe8 	bl	8008a5c <printf_USB>
      }
      printf("%02x", data[i]);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	18d3      	adds	r3, r2, r3
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	001a      	movs	r2, r3
 8005296:	4b14      	ldr	r3, [pc, #80]	@ (80052e8 <isKeyValid+0xb8>)
 8005298:	0011      	movs	r1, r2
 800529a:	0018      	movs	r0, r3
 800529c:	f021 f838 	bl	8026310 <iprintf>
    for (int i = 0; i < 12; i++) {
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	3301      	adds	r3, #1
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b0b      	cmp	r3, #11
 80052aa:	dddd      	ble.n	8005268 <isKeyValid+0x38>
    }
    if (usblog && Check_USB_PowerOn()) {
 80052ac:	4b0c      	ldr	r3, [pc, #48]	@ (80052e0 <isKeyValid+0xb0>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <isKeyValid+0x94>
 80052b4:	f004 fc6e 	bl	8009b94 <Check_USB_PowerOn>
 80052b8:	1e03      	subs	r3, r0, #0
 80052ba:	d003      	beq.n	80052c4 <isKeyValid+0x94>
      printf_USB("\r\n");
 80052bc:	4b0b      	ldr	r3, [pc, #44]	@ (80052ec <isKeyValid+0xbc>)
 80052be:	0018      	movs	r0, r3
 80052c0:	f003 fbcc 	bl	8008a5c <printf_USB>
    }
    printf("\r\n");
 80052c4:	4b0a      	ldr	r3, [pc, #40]	@ (80052f0 <isKeyValid+0xc0>)
 80052c6:	0018      	movs	r0, r3
 80052c8:	f021 f888 	bl	80263dc <puts>
    return false;
 80052cc:	2300      	movs	r3, #0
  }
}
 80052ce:	0018      	movs	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b006      	add	sp, #24
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	46c0      	nop			@ (mov r8, r8)
 80052d8:	0802afac 	.word	0x0802afac
 80052dc:	0802ab70 	.word	0x0802ab70
 80052e0:	200027ac 	.word	0x200027ac
 80052e4:	0802afe4 	.word	0x0802afe4
 80052e8:	0802afe8 	.word	0x0802afe8
 80052ec:	0802aff0 	.word	0x0802aff0
 80052f0:	0802aff4 	.word	0x0802aff4

080052f4 <uint8ArrayToString>:

void uint8ArrayToString(char *destination, uint8_t data[]) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++) {
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	e010      	b.n	8005326 <uint8ArrayToString+0x32>
    sprintf(&destination[i * 2], "%02x", data[i]);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	001a      	movs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	1898      	adds	r0, r3, r2
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	18d3      	adds	r3, r2, r3
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	001a      	movs	r2, r3
 8005318:	4b07      	ldr	r3, [pc, #28]	@ (8005338 <uint8ArrayToString+0x44>)
 800531a:	0019      	movs	r1, r3
 800531c:	f021 f868 	bl	80263f0 <siprintf>
  for (int i = 0; i < 12; i++) {
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3301      	adds	r3, #1
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b0b      	cmp	r3, #11
 800532a:	ddeb      	ble.n	8005304 <uint8ArrayToString+0x10>
  }
}
 800532c:	46c0      	nop			@ (mov r8, r8)
 800532e:	46c0      	nop			@ (mov r8, r8)
 8005330:	46bd      	mov	sp, r7
 8005332:	b004      	add	sp, #16
 8005334:	bd80      	pop	{r7, pc}
 8005336:	46c0      	nop			@ (mov r8, r8)
 8005338:	0802afe8 	.word	0x0802afe8

0800533c <CreateMailMessage>:

#ifdef USE_MAIL
uint16_t CreateMailMessage(bool *txstat, bool send) {
 800533c:	b590      	push	{r4, r7, lr}
 800533e:	b087      	sub	sp, #28
 8005340:	af02      	add	r7, sp, #8
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	000a      	movs	r2, r1
 8005346:	1cfb      	adds	r3, r7, #3
 8005348:	701a      	strb	r2, [r3, #0]
  static bool status = false;
  static bool retstat = true;
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint8_t SendFromnameConfig[SendFromNameMaxLength];
  static uint8_t SendTonameConfig[SendToNameMaxLength];
  uint16_t lngth = 0;
 800534a:	240e      	movs	r4, #14
 800534c:	193b      	adds	r3, r7, r4
 800534e:	2200      	movs	r2, #0
 8005350:	801a      	strh	r2, [r3, #0]
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8005352:	4b41      	ldr	r3, [pc, #260]	@ (8005458 <CreateMailMessage+0x11c>)
 8005354:	4841      	ldr	r0, [pc, #260]	@ (800545c <CreateMailMessage+0x120>)
 8005356:	2220      	movs	r2, #32
 8005358:	0019      	movs	r1, r3
 800535a:	f007 f81f 	bl	800c39c <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 800535e:	4b40      	ldr	r3, [pc, #256]	@ (8005460 <CreateMailMessage+0x124>)
 8005360:	4840      	ldr	r0, [pc, #256]	@ (8005464 <CreateMailMessage+0x128>)
 8005362:	2230      	movs	r2, #48	@ 0x30
 8005364:	0019      	movs	r1, r3
 8005366:	f007 f819 	bl	800c39c <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 800536a:	4b3f      	ldr	r3, [pc, #252]	@ (8005468 <CreateMailMessage+0x12c>)
 800536c:	483f      	ldr	r0, [pc, #252]	@ (800546c <CreateMailMessage+0x130>)
 800536e:	2230      	movs	r2, #48	@ 0x30
 8005370:	0019      	movs	r1, r3
 8005372:	f007 f813 	bl	800c39c <ReadUint8ArrayEEprom>
  sprintf(message, "{\"sender\": \"%s\",\"to\": [\"%s\"],\"subject\": \"Battery status\",", (char*)SendFromnameConfig, (char*)SendTonameConfig);
 8005376:	4b3c      	ldr	r3, [pc, #240]	@ (8005468 <CreateMailMessage+0x12c>)
 8005378:	4a39      	ldr	r2, [pc, #228]	@ (8005460 <CreateMailMessage+0x124>)
 800537a:	493d      	ldr	r1, [pc, #244]	@ (8005470 <CreateMailMessage+0x134>)
 800537c:	483d      	ldr	r0, [pc, #244]	@ (8005474 <CreateMailMessage+0x138>)
 800537e:	f021 f837 	bl	80263f0 <siprintf>
  lngth = strlen(message);
 8005382:	4b3c      	ldr	r3, [pc, #240]	@ (8005474 <CreateMailMessage+0x138>)
 8005384:	0018      	movs	r0, r3
 8005386:	f7fa fef1 	bl	800016c <strlen>
 800538a:	0002      	movs	r2, r0
 800538c:	193b      	adds	r3, r7, r4
 800538e:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005390:	1cfb      	adds	r3, r7, #3
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d019      	beq.n	80053cc <CreateMailMessage+0x90>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005398:	4b36      	ldr	r3, [pc, #216]	@ (8005474 <CreateMailMessage+0x138>)
 800539a:	0018      	movs	r0, r3
 800539c:	f7fa fee6 	bl	800016c <strlen>
 80053a0:	0003      	movs	r3, r0
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	4b33      	ldr	r3, [pc, #204]	@ (8005474 <CreateMailMessage+0x138>)
 80053a6:	0011      	movs	r1, r2
 80053a8:	0018      	movs	r0, r3
 80053aa:	f7ff fd99 	bl	8004ee0 <ESP_Send>
 80053ae:	0003      	movs	r3, r0
 80053b0:	001a      	movs	r2, r3
 80053b2:	4b31      	ldr	r3, [pc, #196]	@ (8005478 <CreateMailMessage+0x13c>)
 80053b4:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80053b6:	4b31      	ldr	r3, [pc, #196]	@ (800547c <CreateMailMessage+0x140>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	001a      	movs	r2, r3
 80053bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005478 <CreateMailMessage+0x13c>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	4013      	ands	r3, r2
 80053c2:	1e5a      	subs	r2, r3, #1
 80053c4:	4193      	sbcs	r3, r2
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	4b2c      	ldr	r3, [pc, #176]	@ (800547c <CreateMailMessage+0x140>)
 80053ca:	701a      	strb	r2, [r3, #0]
  }
  sprintf(message, "\"text_body\": \"Battery of device %s is nearly empty. Actual voltage is %.2fV, about 20%%\"}", (char*)nameConfig, ReadBatteryVoltage());
 80053cc:	f004 fb2c 	bl	8009a28 <ReadBatteryVoltage>
 80053d0:	1c03      	adds	r3, r0, #0
 80053d2:	1c18      	adds	r0, r3, #0
 80053d4:	f7fe fa5e 	bl	8003894 <__aeabi_f2d>
 80053d8:	0002      	movs	r2, r0
 80053da:	000b      	movs	r3, r1
 80053dc:	4c1e      	ldr	r4, [pc, #120]	@ (8005458 <CreateMailMessage+0x11c>)
 80053de:	4928      	ldr	r1, [pc, #160]	@ (8005480 <CreateMailMessage+0x144>)
 80053e0:	4824      	ldr	r0, [pc, #144]	@ (8005474 <CreateMailMessage+0x138>)
 80053e2:	9200      	str	r2, [sp, #0]
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	0022      	movs	r2, r4
 80053e8:	f021 f802 	bl	80263f0 <siprintf>
  lngth += strlen(message);
 80053ec:	4b21      	ldr	r3, [pc, #132]	@ (8005474 <CreateMailMessage+0x138>)
 80053ee:	0018      	movs	r0, r3
 80053f0:	f7fa febc 	bl	800016c <strlen>
 80053f4:	0003      	movs	r3, r0
 80053f6:	b299      	uxth	r1, r3
 80053f8:	220e      	movs	r2, #14
 80053fa:	18bb      	adds	r3, r7, r2
 80053fc:	18ba      	adds	r2, r7, r2
 80053fe:	8812      	ldrh	r2, [r2, #0]
 8005400:	188a      	adds	r2, r1, r2
 8005402:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005404:	1cfb      	adds	r3, r7, #3
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d019      	beq.n	8005440 <CreateMailMessage+0x104>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800540c:	4b19      	ldr	r3, [pc, #100]	@ (8005474 <CreateMailMessage+0x138>)
 800540e:	0018      	movs	r0, r3
 8005410:	f7fa feac 	bl	800016c <strlen>
 8005414:	0003      	movs	r3, r0
 8005416:	b29a      	uxth	r2, r3
 8005418:	4b16      	ldr	r3, [pc, #88]	@ (8005474 <CreateMailMessage+0x138>)
 800541a:	0011      	movs	r1, r2
 800541c:	0018      	movs	r0, r3
 800541e:	f7ff fd5f 	bl	8004ee0 <ESP_Send>
 8005422:	0003      	movs	r3, r0
 8005424:	001a      	movs	r2, r3
 8005426:	4b14      	ldr	r3, [pc, #80]	@ (8005478 <CreateMailMessage+0x13c>)
 8005428:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800542a:	4b14      	ldr	r3, [pc, #80]	@ (800547c <CreateMailMessage+0x140>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	001a      	movs	r2, r3
 8005430:	4b11      	ldr	r3, [pc, #68]	@ (8005478 <CreateMailMessage+0x13c>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	4013      	ands	r3, r2
 8005436:	1e5a      	subs	r2, r3, #1
 8005438:	4193      	sbcs	r3, r2
 800543a:	b2da      	uxtb	r2, r3
 800543c:	4b0f      	ldr	r3, [pc, #60]	@ (800547c <CreateMailMessage+0x140>)
 800543e:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8005440:	4b0e      	ldr	r3, [pc, #56]	@ (800547c <CreateMailMessage+0x140>)
 8005442:	781a      	ldrb	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	701a      	strb	r2, [r3, #0]
  return lngth;
 8005448:	230e      	movs	r3, #14
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	881b      	ldrh	r3, [r3, #0]
}
 800544e:	0018      	movs	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	b005      	add	sp, #20
 8005454:	bd90      	pop	{r4, r7, pc}
 8005456:	46c0      	nop			@ (mov r8, r8)
 8005458:	200007a0 	.word	0x200007a0
 800545c:	08080090 	.word	0x08080090
 8005460:	200007c0 	.word	0x200007c0
 8005464:	08080260 	.word	0x08080260
 8005468:	200007f0 	.word	0x200007f0
 800546c:	08080290 	.word	0x08080290
 8005470:	0802aff8 	.word	0x0802aff8
 8005474:	200005d4 	.word	0x200005d4
 8005478:	20000820 	.word	0x20000820
 800547c:	20000031 	.word	0x20000031
 8005480:	0802b034 	.word	0x0802b034

08005484 <CreateMessage>:
#endif

uint16_t CreateMessage(bool *txstat, bool send) {
 8005484:	b5b0      	push	{r4, r5, r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af02      	add	r7, sp, #8
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	000a      	movs	r2, r1
 800548e:	1cfb      	adds	r3, r7, #3
 8005490:	701a      	strb	r2, [r3, #0]
  static char uptimeBuf[14];
#ifdef LONGDATAGRAM
  static char Buffer[(IdSize*2)+1];
#endif

  if(checkName()){
 8005492:	f7ff fab7 	bl	8004a04 <checkName>
 8005496:	1e03      	subs	r3, r0, #0
 8005498:	d00a      	beq.n	80054b0 <CreateMessage+0x2c>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800549a:	4b03      	ldr	r3, [pc, #12]	@ (80054a8 <CreateMessage+0x24>)
 800549c:	4803      	ldr	r0, [pc, #12]	@ (80054ac <CreateMessage+0x28>)
 800549e:	2220      	movs	r2, #32
 80054a0:	0019      	movs	r1, r3
 80054a2:	f006 ff7b 	bl	800c39c <ReadUint8ArrayEEprom>
 80054a6:	e009      	b.n	80054bc <CreateMessage+0x38>
 80054a8:	20000824 	.word	0x20000824
 80054ac:	08080090 	.word	0x08080090
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 80054b0:	4bed      	ldr	r3, [pc, #948]	@ (8005868 <CreateMessage+0x3e4>)
 80054b2:	4aee      	ldr	r2, [pc, #952]	@ (800586c <CreateMessage+0x3e8>)
 80054b4:	6811      	ldr	r1, [r2, #0]
 80054b6:	6019      	str	r1, [r3, #0]
 80054b8:	7912      	ldrb	r2, [r2, #4]
 80054ba:	711a      	strb	r2, [r3, #4]
  }
  setCharges();
 80054bc:	f7ff fa40 	bl	8004940 <setCharges>
  uint16_t index = 0;
 80054c0:	250e      	movs	r5, #14
 80054c2:	197b      	adds	r3, r7, r5
 80054c4:	2200      	movs	r2, #0
 80054c6:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 80054c8:	197b      	adds	r3, r7, r5
 80054ca:	881a      	ldrh	r2, [r3, #0]
 80054cc:	4be8      	ldr	r3, [pc, #928]	@ (8005870 <CreateMessage+0x3ec>)
 80054ce:	18d3      	adds	r3, r2, r3
 80054d0:	4ae8      	ldr	r2, [pc, #928]	@ (8005874 <CreateMessage+0x3f0>)
 80054d2:	0011      	movs	r1, r2
 80054d4:	0018      	movs	r0, r3
 80054d6:	f020 ff8b 	bl	80263f0 <siprintf>
#ifdef LONGDATAGRAM
//  memset(message, '\0', 144); \\ unnecessary sprintf terminates with \0

  ReadUint8ArrayEEprom(TempConfigAddr, keybuffer, IdSize);
 80054da:	4be7      	ldr	r3, [pc, #924]	@ (8005878 <CreateMessage+0x3f4>)
 80054dc:	48e7      	ldr	r0, [pc, #924]	@ (800587c <CreateMessage+0x3f8>)
 80054de:	220c      	movs	r2, #12
 80054e0:	0019      	movs	r1, r3
 80054e2:	f006 ff5b 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80054e6:	4ae4      	ldr	r2, [pc, #912]	@ (8005878 <CreateMessage+0x3f4>)
 80054e8:	4be5      	ldr	r3, [pc, #916]	@ (8005880 <CreateMessage+0x3fc>)
 80054ea:	0011      	movs	r1, r2
 80054ec:	0018      	movs	r0, r3
 80054ee:	f7ff ff01 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[1], "{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Temperature);
 80054f2:	4be4      	ldr	r3, [pc, #912]	@ (8005884 <CreateMessage+0x400>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	1c18      	adds	r0, r3, #0
 80054f8:	f7fe f9cc 	bl	8003894 <__aeabi_f2d>
 80054fc:	0002      	movs	r2, r0
 80054fe:	000b      	movs	r3, r1
 8005500:	4cdf      	ldr	r4, [pc, #892]	@ (8005880 <CreateMessage+0x3fc>)
 8005502:	49e1      	ldr	r1, [pc, #900]	@ (8005888 <CreateMessage+0x404>)
 8005504:	48e1      	ldr	r0, [pc, #900]	@ (800588c <CreateMessage+0x408>)
 8005506:	9200      	str	r2, [sp, #0]
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	0022      	movs	r2, r4
 800550c:	f020 ff70 	bl	80263f0 <siprintf>
#else
  sprintf(&message[1], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Temperature);
#endif
index = strlen(message);
 8005510:	4bd7      	ldr	r3, [pc, #860]	@ (8005870 <CreateMessage+0x3ec>)
 8005512:	0018      	movs	r0, r3
 8005514:	f7fa fe2a 	bl	800016c <strlen>
 8005518:	0002      	movs	r2, r0
 800551a:	197b      	adds	r3, r7, r5
 800551c:	801a      	strh	r2, [r3, #0]
  if (send) {
 800551e:	1cfb      	adds	r3, r7, #3
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d019      	beq.n	800555a <CreateMessage+0xd6>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005526:	4bd2      	ldr	r3, [pc, #840]	@ (8005870 <CreateMessage+0x3ec>)
 8005528:	0018      	movs	r0, r3
 800552a:	f7fa fe1f 	bl	800016c <strlen>
 800552e:	0003      	movs	r3, r0
 8005530:	b29a      	uxth	r2, r3
 8005532:	4bcf      	ldr	r3, [pc, #828]	@ (8005870 <CreateMessage+0x3ec>)
 8005534:	0011      	movs	r1, r2
 8005536:	0018      	movs	r0, r3
 8005538:	f7ff fcd2 	bl	8004ee0 <ESP_Send>
 800553c:	0003      	movs	r3, r0
 800553e:	001a      	movs	r2, r3
 8005540:	4bd3      	ldr	r3, [pc, #844]	@ (8005890 <CreateMessage+0x40c>)
 8005542:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005544:	4bd3      	ldr	r3, [pc, #844]	@ (8005894 <CreateMessage+0x410>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	001a      	movs	r2, r3
 800554a:	4bd1      	ldr	r3, [pc, #836]	@ (8005890 <CreateMessage+0x40c>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	4013      	ands	r3, r2
 8005550:	1e5a      	subs	r2, r3, #1
 8005552:	4193      	sbcs	r3, r2
 8005554:	b2da      	uxtb	r2, r3
 8005556:	4bcf      	ldr	r3, [pc, #828]	@ (8005894 <CreateMessage+0x410>)
 8005558:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(HumidConfigAddr, keybuffer, IdSize);
 800555a:	4bc7      	ldr	r3, [pc, #796]	@ (8005878 <CreateMessage+0x3f4>)
 800555c:	48ce      	ldr	r0, [pc, #824]	@ (8005898 <CreateMessage+0x414>)
 800555e:	220c      	movs	r2, #12
 8005560:	0019      	movs	r1, r3
 8005562:	f006 ff1b 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 8005566:	4ac4      	ldr	r2, [pc, #784]	@ (8005878 <CreateMessage+0x3f4>)
 8005568:	4bc5      	ldr	r3, [pc, #788]	@ (8005880 <CreateMessage+0x3fc>)
 800556a:	0011      	movs	r1, r2
 800556c:	0018      	movs	r0, r3
 800556e:	f7ff fec1 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.Humidity);
 8005572:	4bc4      	ldr	r3, [pc, #784]	@ (8005884 <CreateMessage+0x400>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	1c18      	adds	r0, r3, #0
 8005578:	f7fe f98c 	bl	8003894 <__aeabi_f2d>
 800557c:	0002      	movs	r2, r0
 800557e:	000b      	movs	r3, r1
 8005580:	4cbf      	ldr	r4, [pc, #764]	@ (8005880 <CreateMessage+0x3fc>)
 8005582:	49c6      	ldr	r1, [pc, #792]	@ (800589c <CreateMessage+0x418>)
 8005584:	48ba      	ldr	r0, [pc, #744]	@ (8005870 <CreateMessage+0x3ec>)
 8005586:	9200      	str	r2, [sp, #0]
 8005588:	9301      	str	r3, [sp, #4]
 800558a:	0022      	movs	r2, r4
 800558c:	f020 ff30 	bl	80263f0 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.Humidity);
#endif
  index += strlen(message);
 8005590:	4bb7      	ldr	r3, [pc, #732]	@ (8005870 <CreateMessage+0x3ec>)
 8005592:	0018      	movs	r0, r3
 8005594:	f7fa fdea 	bl	800016c <strlen>
 8005598:	0003      	movs	r3, r0
 800559a:	b299      	uxth	r1, r3
 800559c:	220e      	movs	r2, #14
 800559e:	18bb      	adds	r3, r7, r2
 80055a0:	18ba      	adds	r2, r7, r2
 80055a2:	8812      	ldrh	r2, [r2, #0]
 80055a4:	188a      	adds	r2, r1, r2
 80055a6:	801a      	strh	r2, [r3, #0]
  if (send) {
 80055a8:	1cfb      	adds	r3, r7, #3
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d019      	beq.n	80055e4 <CreateMessage+0x160>
    status = ESP_Send((uint8_t*)message, strlen(message));
 80055b0:	4baf      	ldr	r3, [pc, #700]	@ (8005870 <CreateMessage+0x3ec>)
 80055b2:	0018      	movs	r0, r3
 80055b4:	f7fa fdda 	bl	800016c <strlen>
 80055b8:	0003      	movs	r3, r0
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	4bac      	ldr	r3, [pc, #688]	@ (8005870 <CreateMessage+0x3ec>)
 80055be:	0011      	movs	r1, r2
 80055c0:	0018      	movs	r0, r3
 80055c2:	f7ff fc8d 	bl	8004ee0 <ESP_Send>
 80055c6:	0003      	movs	r3, r0
 80055c8:	001a      	movs	r2, r3
 80055ca:	4bb1      	ldr	r3, [pc, #708]	@ (8005890 <CreateMessage+0x40c>)
 80055cc:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 80055ce:	4bb1      	ldr	r3, [pc, #708]	@ (8005894 <CreateMessage+0x410>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	001a      	movs	r2, r3
 80055d4:	4bae      	ldr	r3, [pc, #696]	@ (8005890 <CreateMessage+0x40c>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	4013      	ands	r3, r2
 80055da:	1e5a      	subs	r2, r3, #1
 80055dc:	4193      	sbcs	r3, r2
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	4bac      	ldr	r3, [pc, #688]	@ (8005894 <CreateMessage+0x410>)
 80055e2:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(VocIndexConfigAddr, keybuffer, IdSize);
 80055e4:	4ba4      	ldr	r3, [pc, #656]	@ (8005878 <CreateMessage+0x3f4>)
 80055e6:	48ae      	ldr	r0, [pc, #696]	@ (80058a0 <CreateMessage+0x41c>)
 80055e8:	220c      	movs	r2, #12
 80055ea:	0019      	movs	r1, r3
 80055ec:	f006 fed6 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80055f0:	4aa1      	ldr	r2, [pc, #644]	@ (8005878 <CreateMessage+0x3f4>)
 80055f2:	4ba3      	ldr	r3, [pc, #652]	@ (8005880 <CreateMessage+0x3fc>)
 80055f4:	0011      	movs	r1, r2
 80055f6:	0018      	movs	r0, r3
 80055f8:	f7ff fe7c 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.VOCIndex);
 80055fc:	4ba1      	ldr	r3, [pc, #644]	@ (8005884 <CreateMessage+0x400>)
 80055fe:	2248      	movs	r2, #72	@ 0x48
 8005600:	5a9b      	ldrh	r3, [r3, r2]
 8005602:	4a9f      	ldr	r2, [pc, #636]	@ (8005880 <CreateMessage+0x3fc>)
 8005604:	49a7      	ldr	r1, [pc, #668]	@ (80058a4 <CreateMessage+0x420>)
 8005606:	489a      	ldr	r0, [pc, #616]	@ (8005870 <CreateMessage+0x3ec>)
 8005608:	f020 fef2 	bl	80263f0 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.VOCIndex);
#endif
  index += strlen(message);
 800560c:	4b98      	ldr	r3, [pc, #608]	@ (8005870 <CreateMessage+0x3ec>)
 800560e:	0018      	movs	r0, r3
 8005610:	f7fa fdac 	bl	800016c <strlen>
 8005614:	0003      	movs	r3, r0
 8005616:	b299      	uxth	r1, r3
 8005618:	220e      	movs	r2, #14
 800561a:	18bb      	adds	r3, r7, r2
 800561c:	18ba      	adds	r2, r7, r2
 800561e:	8812      	ldrh	r2, [r2, #0]
 8005620:	188a      	adds	r2, r1, r2
 8005622:	801a      	strh	r2, [r3, #0]
  if (send) {
 8005624:	1cfb      	adds	r3, r7, #3
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d019      	beq.n	8005660 <CreateMessage+0x1dc>
    status = ESP_Send((uint8_t*)message, strlen(message));
 800562c:	4b90      	ldr	r3, [pc, #576]	@ (8005870 <CreateMessage+0x3ec>)
 800562e:	0018      	movs	r0, r3
 8005630:	f7fa fd9c 	bl	800016c <strlen>
 8005634:	0003      	movs	r3, r0
 8005636:	b29a      	uxth	r2, r3
 8005638:	4b8d      	ldr	r3, [pc, #564]	@ (8005870 <CreateMessage+0x3ec>)
 800563a:	0011      	movs	r1, r2
 800563c:	0018      	movs	r0, r3
 800563e:	f7ff fc4f 	bl	8004ee0 <ESP_Send>
 8005642:	0003      	movs	r3, r0
 8005644:	001a      	movs	r2, r3
 8005646:	4b92      	ldr	r3, [pc, #584]	@ (8005890 <CreateMessage+0x40c>)
 8005648:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 800564a:	4b92      	ldr	r3, [pc, #584]	@ (8005894 <CreateMessage+0x410>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	001a      	movs	r2, r3
 8005650:	4b8f      	ldr	r3, [pc, #572]	@ (8005890 <CreateMessage+0x40c>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	4013      	ands	r3, r2
 8005656:	1e5a      	subs	r2, r3, #1
 8005658:	4193      	sbcs	r3, r2
 800565a:	b2da      	uxtb	r2, r3
 800565c:	4b8d      	ldr	r3, [pc, #564]	@ (8005894 <CreateMessage+0x410>)
 800565e:	701a      	strb	r2, [r3, #0]
  }

  ReadUint8ArrayEEprom(UptimeConfigAddr, keybuffer, IdSize);
 8005660:	4b85      	ldr	r3, [pc, #532]	@ (8005878 <CreateMessage+0x3f4>)
 8005662:	4891      	ldr	r0, [pc, #580]	@ (80058a8 <CreateMessage+0x424>)
 8005664:	220c      	movs	r2, #12
 8005666:	0019      	movs	r1, r3
 8005668:	f006 fe98 	bl	800c39c <ReadUint8ArrayEEprom>
  if (isKeyValid(keybuffer, "Uptime", "dhhmm")) {
 800566c:	4a8f      	ldr	r2, [pc, #572]	@ (80058ac <CreateMessage+0x428>)
 800566e:	4990      	ldr	r1, [pc, #576]	@ (80058b0 <CreateMessage+0x42c>)
 8005670:	4b81      	ldr	r3, [pc, #516]	@ (8005878 <CreateMessage+0x3f4>)
 8005672:	0018      	movs	r0, r3
 8005674:	f7ff fddc 	bl	8005230 <isKeyValid>
 8005678:	1e03      	subs	r3, r0, #0
 800567a:	d039      	beq.n	80056f0 <CreateMessage+0x26c>
    uint8ArrayToString(Buffer, keybuffer);
 800567c:	4a7e      	ldr	r2, [pc, #504]	@ (8005878 <CreateMessage+0x3f4>)
 800567e:	4b80      	ldr	r3, [pc, #512]	@ (8005880 <CreateMessage+0x3fc>)
 8005680:	0011      	movs	r1, r2
 8005682:	0018      	movs	r0, r3
 8005684:	f7ff fe36 	bl	80052f4 <uint8ArrayToString>
    getUptime(uptimeBuf);
 8005688:	4b8a      	ldr	r3, [pc, #552]	@ (80058b4 <CreateMessage+0x430>)
 800568a:	0018      	movs	r0, r3
 800568c:	f004 fb1a 	bl	8009cc4 <getUptime>

#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
 8005690:	4b88      	ldr	r3, [pc, #544]	@ (80058b4 <CreateMessage+0x430>)
 8005692:	4a7b      	ldr	r2, [pc, #492]	@ (8005880 <CreateMessage+0x3fc>)
 8005694:	4988      	ldr	r1, [pc, #544]	@ (80058b8 <CreateMessage+0x434>)
 8005696:	4876      	ldr	r0, [pc, #472]	@ (8005870 <CreateMessage+0x3ec>)
 8005698:	f020 feaa 	bl	80263f0 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"uptime\", \"sensor\": \"%s\", \"value\":\"%s\"}", Buffer, uptimeBuf);
#endif
    index += strlen(message);
 800569c:	4b74      	ldr	r3, [pc, #464]	@ (8005870 <CreateMessage+0x3ec>)
 800569e:	0018      	movs	r0, r3
 80056a0:	f7fa fd64 	bl	800016c <strlen>
 80056a4:	0003      	movs	r3, r0
 80056a6:	b299      	uxth	r1, r3
 80056a8:	220e      	movs	r2, #14
 80056aa:	18bb      	adds	r3, r7, r2
 80056ac:	18ba      	adds	r2, r7, r2
 80056ae:	8812      	ldrh	r2, [r2, #0]
 80056b0:	188a      	adds	r2, r1, r2
 80056b2:	801a      	strh	r2, [r3, #0]
    if (send) {
 80056b4:	1cfb      	adds	r3, r7, #3
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d019      	beq.n	80056f0 <CreateMessage+0x26c>
      status = ESP_Send((uint8_t*)message, strlen(message));
 80056bc:	4b6c      	ldr	r3, [pc, #432]	@ (8005870 <CreateMessage+0x3ec>)
 80056be:	0018      	movs	r0, r3
 80056c0:	f7fa fd54 	bl	800016c <strlen>
 80056c4:	0003      	movs	r3, r0
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	4b69      	ldr	r3, [pc, #420]	@ (8005870 <CreateMessage+0x3ec>)
 80056ca:	0011      	movs	r1, r2
 80056cc:	0018      	movs	r0, r3
 80056ce:	f7ff fc07 	bl	8004ee0 <ESP_Send>
 80056d2:	0003      	movs	r3, r0
 80056d4:	001a      	movs	r2, r3
 80056d6:	4b6e      	ldr	r3, [pc, #440]	@ (8005890 <CreateMessage+0x40c>)
 80056d8:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80056da:	4b6e      	ldr	r3, [pc, #440]	@ (8005894 <CreateMessage+0x410>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	001a      	movs	r2, r3
 80056e0:	4b6b      	ldr	r3, [pc, #428]	@ (8005890 <CreateMessage+0x40c>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	4013      	ands	r3, r2
 80056e6:	1e5a      	subs	r2, r3, #1
 80056e8:	4193      	sbcs	r3, r2
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	4b69      	ldr	r3, [pc, #420]	@ (8005894 <CreateMessage+0x410>)
 80056ee:	701a      	strb	r2, [r3, #0]
    }
  }

  if (IsBMP280SensorPresent()) {
 80056f0:	f007 ffd8 	bl	800d6a4 <IsBMP280SensorPresent>
 80056f4:	1e03      	subs	r3, r0, #0
 80056f6:	d100      	bne.n	80056fa <CreateMessage+0x276>
 80056f8:	e0a1      	b.n	800583e <CreateMessage+0x3ba>
    ReadUint8ArrayEEprom(hPaConfigAddr, keybuffer, IdSize);
 80056fa:	4b5f      	ldr	r3, [pc, #380]	@ (8005878 <CreateMessage+0x3f4>)
 80056fc:	486f      	ldr	r0, [pc, #444]	@ (80058bc <CreateMessage+0x438>)
 80056fe:	220c      	movs	r2, #12
 8005700:	0019      	movs	r1, r3
 8005702:	f006 fe4b 	bl	800c39c <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "hPa") && MeasVal.BMP280_airpressure) {
 8005706:	4a6e      	ldr	r2, [pc, #440]	@ (80058c0 <CreateMessage+0x43c>)
 8005708:	496e      	ldr	r1, [pc, #440]	@ (80058c4 <CreateMessage+0x440>)
 800570a:	4b5b      	ldr	r3, [pc, #364]	@ (8005878 <CreateMessage+0x3f4>)
 800570c:	0018      	movs	r0, r3
 800570e:	f7ff fd8f 	bl	8005230 <isKeyValid>
 8005712:	1e03      	subs	r3, r0, #0
 8005714:	d046      	beq.n	80057a4 <CreateMessage+0x320>
 8005716:	4b5b      	ldr	r3, [pc, #364]	@ (8005884 <CreateMessage+0x400>)
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	2100      	movs	r1, #0
 800571c:	1c18      	adds	r0, r3, #0
 800571e:	f7fa ff01 	bl	8000524 <__aeabi_fcmpeq>
 8005722:	1e03      	subs	r3, r0, #0
 8005724:	d13e      	bne.n	80057a4 <CreateMessage+0x320>
      uint8ArrayToString(Buffer, keybuffer);
 8005726:	4a54      	ldr	r2, [pc, #336]	@ (8005878 <CreateMessage+0x3f4>)
 8005728:	4b55      	ldr	r3, [pc, #340]	@ (8005880 <CreateMessage+0x3fc>)
 800572a:	0011      	movs	r1, r2
 800572c:	0018      	movs	r0, r3
 800572e:	f7ff fde1 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_airpressure);
 8005732:	4b54      	ldr	r3, [pc, #336]	@ (8005884 <CreateMessage+0x400>)
 8005734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005736:	1c18      	adds	r0, r3, #0
 8005738:	f7fe f8ac 	bl	8003894 <__aeabi_f2d>
 800573c:	0002      	movs	r2, r0
 800573e:	000b      	movs	r3, r1
 8005740:	4c4f      	ldr	r4, [pc, #316]	@ (8005880 <CreateMessage+0x3fc>)
 8005742:	4956      	ldr	r1, [pc, #344]	@ (800589c <CreateMessage+0x418>)
 8005744:	484a      	ldr	r0, [pc, #296]	@ (8005870 <CreateMessage+0x3ec>)
 8005746:	9200      	str	r2, [sp, #0]
 8005748:	9301      	str	r3, [sp, #4]
 800574a:	0022      	movs	r2, r4
 800574c:	f020 fe50 	bl	80263f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"BMP280 hPa\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"hPa\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_airpressure);
#endif
      index += strlen(message);
 8005750:	4b47      	ldr	r3, [pc, #284]	@ (8005870 <CreateMessage+0x3ec>)
 8005752:	0018      	movs	r0, r3
 8005754:	f7fa fd0a 	bl	800016c <strlen>
 8005758:	0003      	movs	r3, r0
 800575a:	b299      	uxth	r1, r3
 800575c:	220e      	movs	r2, #14
 800575e:	18bb      	adds	r3, r7, r2
 8005760:	18ba      	adds	r2, r7, r2
 8005762:	8812      	ldrh	r2, [r2, #0]
 8005764:	188a      	adds	r2, r1, r2
 8005766:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005768:	1cfb      	adds	r3, r7, #3
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d019      	beq.n	80057a4 <CreateMessage+0x320>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005770:	4b3f      	ldr	r3, [pc, #252]	@ (8005870 <CreateMessage+0x3ec>)
 8005772:	0018      	movs	r0, r3
 8005774:	f7fa fcfa 	bl	800016c <strlen>
 8005778:	0003      	movs	r3, r0
 800577a:	b29a      	uxth	r2, r3
 800577c:	4b3c      	ldr	r3, [pc, #240]	@ (8005870 <CreateMessage+0x3ec>)
 800577e:	0011      	movs	r1, r2
 8005780:	0018      	movs	r0, r3
 8005782:	f7ff fbad 	bl	8004ee0 <ESP_Send>
 8005786:	0003      	movs	r3, r0
 8005788:	001a      	movs	r2, r3
 800578a:	4b41      	ldr	r3, [pc, #260]	@ (8005890 <CreateMessage+0x40c>)
 800578c:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800578e:	4b41      	ldr	r3, [pc, #260]	@ (8005894 <CreateMessage+0x410>)
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	001a      	movs	r2, r3
 8005794:	4b3e      	ldr	r3, [pc, #248]	@ (8005890 <CreateMessage+0x40c>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	4013      	ands	r3, r2
 800579a:	1e5a      	subs	r2, r3, #1
 800579c:	4193      	sbcs	r3, r2
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	4b3c      	ldr	r3, [pc, #240]	@ (8005894 <CreateMessage+0x410>)
 80057a2:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(BMPTempConfigAddr, keybuffer, IdSize);
 80057a4:	4b34      	ldr	r3, [pc, #208]	@ (8005878 <CreateMessage+0x3f4>)
 80057a6:	4848      	ldr	r0, [pc, #288]	@ (80058c8 <CreateMessage+0x444>)
 80057a8:	220c      	movs	r2, #12
 80057aa:	0019      	movs	r1, r3
 80057ac:	f006 fdf6 	bl	800c39c <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "BMP280", "Temperature")) {
 80057b0:	4a46      	ldr	r2, [pc, #280]	@ (80058cc <CreateMessage+0x448>)
 80057b2:	4944      	ldr	r1, [pc, #272]	@ (80058c4 <CreateMessage+0x440>)
 80057b4:	4b30      	ldr	r3, [pc, #192]	@ (8005878 <CreateMessage+0x3f4>)
 80057b6:	0018      	movs	r0, r3
 80057b8:	f7ff fd3a 	bl	8005230 <isKeyValid>
 80057bc:	1e03      	subs	r3, r0, #0
 80057be:	d03e      	beq.n	800583e <CreateMessage+0x3ba>
      uint8ArrayToString(Buffer, keybuffer);
 80057c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005878 <CreateMessage+0x3f4>)
 80057c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005880 <CreateMessage+0x3fc>)
 80057c4:	0011      	movs	r1, r2
 80057c6:	0018      	movs	r0, r3
 80057c8:	f7ff fd94 	bl	80052f4 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.BMP280_temperature);
 80057cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005884 <CreateMessage+0x400>)
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	1c18      	adds	r0, r3, #0
 80057d2:	f7fe f85f 	bl	8003894 <__aeabi_f2d>
 80057d6:	0002      	movs	r2, r0
 80057d8:	000b      	movs	r3, r1
 80057da:	4c29      	ldr	r4, [pc, #164]	@ (8005880 <CreateMessage+0x3fc>)
 80057dc:	492f      	ldr	r1, [pc, #188]	@ (800589c <CreateMessage+0x418>)
 80057de:	4824      	ldr	r0, [pc, #144]	@ (8005870 <CreateMessage+0x3ec>)
 80057e0:	9200      	str	r2, [sp, #0]
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	0022      	movs	r2, r4
 80057e6:	f020 fe03 	bl	80263f0 <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"BMP280 Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.BMP280_temperature);
  #endif
      index += strlen(message);
 80057ea:	4b21      	ldr	r3, [pc, #132]	@ (8005870 <CreateMessage+0x3ec>)
 80057ec:	0018      	movs	r0, r3
 80057ee:	f7fa fcbd 	bl	800016c <strlen>
 80057f2:	0003      	movs	r3, r0
 80057f4:	b299      	uxth	r1, r3
 80057f6:	220e      	movs	r2, #14
 80057f8:	18bb      	adds	r3, r7, r2
 80057fa:	18ba      	adds	r2, r7, r2
 80057fc:	8812      	ldrh	r2, [r2, #0]
 80057fe:	188a      	adds	r2, r1, r2
 8005800:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005802:	1cfb      	adds	r3, r7, #3
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d019      	beq.n	800583e <CreateMessage+0x3ba>
        status = ESP_Send((uint8_t*)message, strlen(message));
 800580a:	4b19      	ldr	r3, [pc, #100]	@ (8005870 <CreateMessage+0x3ec>)
 800580c:	0018      	movs	r0, r3
 800580e:	f7fa fcad 	bl	800016c <strlen>
 8005812:	0003      	movs	r3, r0
 8005814:	b29a      	uxth	r2, r3
 8005816:	4b16      	ldr	r3, [pc, #88]	@ (8005870 <CreateMessage+0x3ec>)
 8005818:	0011      	movs	r1, r2
 800581a:	0018      	movs	r0, r3
 800581c:	f7ff fb60 	bl	8004ee0 <ESP_Send>
 8005820:	0003      	movs	r3, r0
 8005822:	001a      	movs	r2, r3
 8005824:	4b1a      	ldr	r3, [pc, #104]	@ (8005890 <CreateMessage+0x40c>)
 8005826:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005828:	4b1a      	ldr	r3, [pc, #104]	@ (8005894 <CreateMessage+0x410>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	001a      	movs	r2, r3
 800582e:	4b18      	ldr	r3, [pc, #96]	@ (8005890 <CreateMessage+0x40c>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	4013      	ands	r3, r2
 8005834:	1e5a      	subs	r2, r3, #1
 8005836:	4193      	sbcs	r3, r2
 8005838:	b2da      	uxtb	r2, r3
 800583a:	4b16      	ldr	r3, [pc, #88]	@ (8005894 <CreateMessage+0x410>)
 800583c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(dBAConfigAddr, keybuffer, IdSize);
 800583e:	4b0e      	ldr	r3, [pc, #56]	@ (8005878 <CreateMessage+0x3f4>)
 8005840:	4823      	ldr	r0, [pc, #140]	@ (80058d0 <CreateMessage+0x44c>)
 8005842:	220c      	movs	r2, #12
 8005844:	0019      	movs	r1, r3
 8005846:	f006 fda9 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 800584a:	4a0b      	ldr	r2, [pc, #44]	@ (8005878 <CreateMessage+0x3f4>)
 800584c:	4b0c      	ldr	r3, [pc, #48]	@ (8005880 <CreateMessage+0x3fc>)
 800584e:	0011      	movs	r1, r2
 8005850:	0018      	movs	r0, r3
 8005852:	f7ff fd4f 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.dBApeak);
 8005856:	4b0b      	ldr	r3, [pc, #44]	@ (8005884 <CreateMessage+0x400>)
 8005858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800585a:	1c18      	adds	r0, r3, #0
 800585c:	f7fe f81a 	bl	8003894 <__aeabi_f2d>
 8005860:	0002      	movs	r2, r0
 8005862:	000b      	movs	r3, r1
 8005864:	e036      	b.n	80058d4 <CreateMessage+0x450>
 8005866:	46c0      	nop			@ (mov r8, r8)
 8005868:	20000824 	.word	0x20000824
 800586c:	0802e598 	.word	0x0802e598
 8005870:	200005d4 	.word	0x200005d4
 8005874:	0802b090 	.word	0x0802b090
 8005878:	20000844 	.word	0x20000844
 800587c:	0808000c 	.word	0x0808000c
 8005880:	20000850 	.word	0x20000850
 8005884:	20000714 	.word	0x20000714
 8005888:	0802b094 	.word	0x0802b094
 800588c:	200005d5 	.word	0x200005d5
 8005890:	20000869 	.word	0x20000869
 8005894:	20000032 	.word	0x20000032
 8005898:	08080018 	.word	0x08080018
 800589c:	0802b0b4 	.word	0x0802b0b4
 80058a0:	08080030 	.word	0x08080030
 80058a4:	0802b0d4 	.word	0x0802b0d4
 80058a8:	080801a0 	.word	0x080801a0
 80058ac:	0802b0f4 	.word	0x0802b0f4
 80058b0:	0802b0fc 	.word	0x0802b0fc
 80058b4:	2000086c 	.word	0x2000086c
 80058b8:	0802b104 	.word	0x0802b104
 80058bc:	08080188 	.word	0x08080188
 80058c0:	0802b124 	.word	0x0802b124
 80058c4:	0802b128 	.word	0x0802b128
 80058c8:	080800e0 	.word	0x080800e0
 80058cc:	0802b130 	.word	0x0802b130
 80058d0:	08080048 	.word	0x08080048
 80058d4:	4ce6      	ldr	r4, [pc, #920]	@ (8005c70 <CreateMessage+0x7ec>)
 80058d6:	49e7      	ldr	r1, [pc, #924]	@ (8005c74 <CreateMessage+0x7f0>)
 80058d8:	48e7      	ldr	r0, [pc, #924]	@ (8005c78 <CreateMessage+0x7f4>)
 80058da:	9200      	str	r2, [sp, #0]
 80058dc:	9301      	str	r3, [sp, #4]
 80058de:	0022      	movs	r2, r4
 80058e0:	f020 fd86 	bl	80263f0 <siprintf>
#else
  sprintf(&message[0], ",{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.dBApeak);
#endif
  index += strlen(message);
 80058e4:	4be4      	ldr	r3, [pc, #912]	@ (8005c78 <CreateMessage+0x7f4>)
 80058e6:	0018      	movs	r0, r3
 80058e8:	f7fa fc40 	bl	800016c <strlen>
 80058ec:	0003      	movs	r3, r0
 80058ee:	b299      	uxth	r1, r3
 80058f0:	220e      	movs	r2, #14
 80058f2:	18bb      	adds	r3, r7, r2
 80058f4:	18ba      	adds	r2, r7, r2
 80058f6:	8812      	ldrh	r2, [r2, #0]
 80058f8:	188a      	adds	r2, r1, r2
 80058fa:	801a      	strh	r2, [r3, #0]
  if (send) {
 80058fc:	1cfb      	adds	r3, r7, #3
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d019      	beq.n	8005938 <CreateMessage+0x4b4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8005904:	4bdc      	ldr	r3, [pc, #880]	@ (8005c78 <CreateMessage+0x7f4>)
 8005906:	0018      	movs	r0, r3
 8005908:	f7fa fc30 	bl	800016c <strlen>
 800590c:	0003      	movs	r3, r0
 800590e:	b29a      	uxth	r2, r3
 8005910:	4bd9      	ldr	r3, [pc, #868]	@ (8005c78 <CreateMessage+0x7f4>)
 8005912:	0011      	movs	r1, r2
 8005914:	0018      	movs	r0, r3
 8005916:	f7ff fae3 	bl	8004ee0 <ESP_Send>
 800591a:	0003      	movs	r3, r0
 800591c:	001a      	movs	r2, r3
 800591e:	4bd7      	ldr	r3, [pc, #860]	@ (8005c7c <CreateMessage+0x7f8>)
 8005920:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8005922:	4bd7      	ldr	r3, [pc, #860]	@ (8005c80 <CreateMessage+0x7fc>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	001a      	movs	r2, r3
 8005928:	4bd4      	ldr	r3, [pc, #848]	@ (8005c7c <CreateMessage+0x7f8>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	4013      	ands	r3, r2
 800592e:	1e5a      	subs	r2, r3, #1
 8005930:	4193      	sbcs	r3, r2
 8005932:	b2da      	uxtb	r2, r3
 8005934:	4bd2      	ldr	r3, [pc, #840]	@ (8005c80 <CreateMessage+0x7fc>)
 8005936:	701a      	strb	r2, [r3, #0]
  }

//  if(!onBeurs){
    ReadUint8ArrayEEprom(SolVoltConfigAddr, keybuffer, IdSize);
 8005938:	4bd2      	ldr	r3, [pc, #840]	@ (8005c84 <CreateMessage+0x800>)
 800593a:	48d3      	ldr	r0, [pc, #844]	@ (8005c88 <CreateMessage+0x804>)
 800593c:	220c      	movs	r2, #12
 800593e:	0019      	movs	r1, r3
 8005940:	f006 fd2c 	bl	800c39c <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, keybuffer);
 8005944:	4acf      	ldr	r2, [pc, #828]	@ (8005c84 <CreateMessage+0x800>)
 8005946:	4bca      	ldr	r3, [pc, #808]	@ (8005c70 <CreateMessage+0x7ec>)
 8005948:	0011      	movs	r1, r2
 800594a:	0018      	movs	r0, r3
 800594c:	f7ff fcd2 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
    sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, solarCharge);
 8005950:	4bce      	ldr	r3, [pc, #824]	@ (8005c8c <CreateMessage+0x808>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	1c18      	adds	r0, r3, #0
 8005956:	f7fd ff9d 	bl	8003894 <__aeabi_f2d>
 800595a:	0002      	movs	r2, r0
 800595c:	000b      	movs	r3, r1
 800595e:	4cc4      	ldr	r4, [pc, #784]	@ (8005c70 <CreateMessage+0x7ec>)
 8005960:	49c4      	ldr	r1, [pc, #784]	@ (8005c74 <CreateMessage+0x7f0>)
 8005962:	48c5      	ldr	r0, [pc, #788]	@ (8005c78 <CreateMessage+0x7f4>)
 8005964:	9200      	str	r2, [sp, #0]
 8005966:	9301      	str	r3, [sp, #4]
 8005968:	0022      	movs	r2, r4
 800596a:	f020 fd41 	bl	80263f0 <siprintf>
#else
    sprintf(&message[0], ",{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
#endif
    index += strlen(message);
 800596e:	4bc2      	ldr	r3, [pc, #776]	@ (8005c78 <CreateMessage+0x7f4>)
 8005970:	0018      	movs	r0, r3
 8005972:	f7fa fbfb 	bl	800016c <strlen>
 8005976:	0003      	movs	r3, r0
 8005978:	b299      	uxth	r1, r3
 800597a:	220e      	movs	r2, #14
 800597c:	18bb      	adds	r3, r7, r2
 800597e:	18ba      	adds	r2, r7, r2
 8005980:	8812      	ldrh	r2, [r2, #0]
 8005982:	188a      	adds	r2, r1, r2
 8005984:	801a      	strh	r2, [r3, #0]
    if (send) {
 8005986:	1cfb      	adds	r3, r7, #3
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d019      	beq.n	80059c2 <CreateMessage+0x53e>
      status = ESP_Send((uint8_t*)message, strlen(message));
 800598e:	4bba      	ldr	r3, [pc, #744]	@ (8005c78 <CreateMessage+0x7f4>)
 8005990:	0018      	movs	r0, r3
 8005992:	f7fa fbeb 	bl	800016c <strlen>
 8005996:	0003      	movs	r3, r0
 8005998:	b29a      	uxth	r2, r3
 800599a:	4bb7      	ldr	r3, [pc, #732]	@ (8005c78 <CreateMessage+0x7f4>)
 800599c:	0011      	movs	r1, r2
 800599e:	0018      	movs	r0, r3
 80059a0:	f7ff fa9e 	bl	8004ee0 <ESP_Send>
 80059a4:	0003      	movs	r3, r0
 80059a6:	001a      	movs	r2, r3
 80059a8:	4bb4      	ldr	r3, [pc, #720]	@ (8005c7c <CreateMessage+0x7f8>)
 80059aa:	701a      	strb	r2, [r3, #0]
      retstat &= status;
 80059ac:	4bb4      	ldr	r3, [pc, #720]	@ (8005c80 <CreateMessage+0x7fc>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	001a      	movs	r2, r3
 80059b2:	4bb2      	ldr	r3, [pc, #712]	@ (8005c7c <CreateMessage+0x7f8>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	4013      	ands	r3, r2
 80059b8:	1e5a      	subs	r2, r3, #1
 80059ba:	4193      	sbcs	r3, r2
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	4bb0      	ldr	r3, [pc, #704]	@ (8005c80 <CreateMessage+0x7fc>)
 80059c0:	701a      	strb	r2, [r3, #0]
    }

    if ((product_name[4] == '5') && Check_USB_PowerOn()) {  // the NOx has only sense in case of continuous operation
 80059c2:	4bb3      	ldr	r3, [pc, #716]	@ (8005c90 <CreateMessage+0x80c>)
 80059c4:	791b      	ldrb	r3, [r3, #4]
 80059c6:	2b35      	cmp	r3, #53	@ 0x35
 80059c8:	d141      	bne.n	8005a4e <CreateMessage+0x5ca>
 80059ca:	f004 f8e3 	bl	8009b94 <Check_USB_PowerOn>
 80059ce:	1e03      	subs	r3, r0, #0
 80059d0:	d03d      	beq.n	8005a4e <CreateMessage+0x5ca>
      ReadUint8ArrayEEprom(NOxIndexConfigAddr, keybuffer, IdSize);
 80059d2:	4bac      	ldr	r3, [pc, #688]	@ (8005c84 <CreateMessage+0x800>)
 80059d4:	48af      	ldr	r0, [pc, #700]	@ (8005c94 <CreateMessage+0x810>)
 80059d6:	220c      	movs	r2, #12
 80059d8:	0019      	movs	r1, r3
 80059da:	f006 fcdf 	bl	800c39c <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 80059de:	4aa9      	ldr	r2, [pc, #676]	@ (8005c84 <CreateMessage+0x800>)
 80059e0:	4ba3      	ldr	r3, [pc, #652]	@ (8005c70 <CreateMessage+0x7ec>)
 80059e2:	0011      	movs	r1, r2
 80059e4:	0018      	movs	r0, r3
 80059e6:	f7ff fc85 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.airNOxmax);
 80059ea:	4bab      	ldr	r3, [pc, #684]	@ (8005c98 <CreateMessage+0x814>)
 80059ec:	224e      	movs	r2, #78	@ 0x4e
 80059ee:	5a9b      	ldrh	r3, [r3, r2]
 80059f0:	4a9f      	ldr	r2, [pc, #636]	@ (8005c70 <CreateMessage+0x7ec>)
 80059f2:	49aa      	ldr	r1, [pc, #680]	@ (8005c9c <CreateMessage+0x818>)
 80059f4:	48a0      	ldr	r0, [pc, #640]	@ (8005c78 <CreateMessage+0x7f4>)
 80059f6:	f020 fcfb 	bl	80263f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"NOxr\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.airNOxmax);
#endif
      index += strlen(message);
 80059fa:	4b9f      	ldr	r3, [pc, #636]	@ (8005c78 <CreateMessage+0x7f4>)
 80059fc:	0018      	movs	r0, r3
 80059fe:	f7fa fbb5 	bl	800016c <strlen>
 8005a02:	0003      	movs	r3, r0
 8005a04:	b299      	uxth	r1, r3
 8005a06:	220e      	movs	r2, #14
 8005a08:	18bb      	adds	r3, r7, r2
 8005a0a:	18ba      	adds	r2, r7, r2
 8005a0c:	8812      	ldrh	r2, [r2, #0]
 8005a0e:	188a      	adds	r2, r1, r2
 8005a10:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005a12:	1cfb      	adds	r3, r7, #3
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d019      	beq.n	8005a4e <CreateMessage+0x5ca>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005a1a:	4b97      	ldr	r3, [pc, #604]	@ (8005c78 <CreateMessage+0x7f4>)
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f7fa fba5 	bl	800016c <strlen>
 8005a22:	0003      	movs	r3, r0
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	4b94      	ldr	r3, [pc, #592]	@ (8005c78 <CreateMessage+0x7f4>)
 8005a28:	0011      	movs	r1, r2
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f7ff fa58 	bl	8004ee0 <ESP_Send>
 8005a30:	0003      	movs	r3, r0
 8005a32:	001a      	movs	r2, r3
 8005a34:	4b91      	ldr	r3, [pc, #580]	@ (8005c7c <CreateMessage+0x7f8>)
 8005a36:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005a38:	4b91      	ldr	r3, [pc, #580]	@ (8005c80 <CreateMessage+0x7fc>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	001a      	movs	r2, r3
 8005a3e:	4b8f      	ldr	r3, [pc, #572]	@ (8005c7c <CreateMessage+0x7f8>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	4013      	ands	r3, r2
 8005a44:	1e5a      	subs	r2, r3, #1
 8005a46:	4193      	sbcs	r3, r2
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	4b8d      	ldr	r3, [pc, #564]	@ (8005c80 <CreateMessage+0x7fc>)
 8005a4c:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55TempConfigAddr, keybuffer, IdSize);
 8005a4e:	4b8d      	ldr	r3, [pc, #564]	@ (8005c84 <CreateMessage+0x800>)
 8005a50:	4893      	ldr	r0, [pc, #588]	@ (8005ca0 <CreateMessage+0x81c>)
 8005a52:	220c      	movs	r2, #12
 8005a54:	0019      	movs	r1, r3
 8005a56:	f006 fca1 	bl	800c39c <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "temperature")) {
 8005a5a:	4b8d      	ldr	r3, [pc, #564]	@ (8005c90 <CreateMessage+0x80c>)
 8005a5c:	791b      	ldrb	r3, [r3, #4]
 8005a5e:	2b34      	cmp	r3, #52	@ 0x34
 8005a60:	d003      	beq.n	8005a6a <CreateMessage+0x5e6>
 8005a62:	4b8b      	ldr	r3, [pc, #556]	@ (8005c90 <CreateMessage+0x80c>)
 8005a64:	791b      	ldrb	r3, [r3, #4]
 8005a66:	2b35      	cmp	r3, #53	@ 0x35
 8005a68:	d146      	bne.n	8005af8 <CreateMessage+0x674>
 8005a6a:	4a8e      	ldr	r2, [pc, #568]	@ (8005ca4 <CreateMessage+0x820>)
 8005a6c:	498e      	ldr	r1, [pc, #568]	@ (8005ca8 <CreateMessage+0x824>)
 8005a6e:	4b85      	ldr	r3, [pc, #532]	@ (8005c84 <CreateMessage+0x800>)
 8005a70:	0018      	movs	r0, r3
 8005a72:	f7ff fbdd 	bl	8005230 <isKeyValid>
 8005a76:	1e03      	subs	r3, r0, #0
 8005a78:	d03e      	beq.n	8005af8 <CreateMessage+0x674>
      uint8ArrayToString(Buffer, keybuffer);
 8005a7a:	4a82      	ldr	r2, [pc, #520]	@ (8005c84 <CreateMessage+0x800>)
 8005a7c:	4b7c      	ldr	r3, [pc, #496]	@ (8005c70 <CreateMessage+0x7ec>)
 8005a7e:	0011      	movs	r1, r2
 8005a80:	0018      	movs	r0, r3
 8005a82:	f7ff fc37 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_temperature);
 8005a86:	4b84      	ldr	r3, [pc, #528]	@ (8005c98 <CreateMessage+0x814>)
 8005a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8a:	1c18      	adds	r0, r3, #0
 8005a8c:	f7fd ff02 	bl	8003894 <__aeabi_f2d>
 8005a90:	0002      	movs	r2, r0
 8005a92:	000b      	movs	r3, r1
 8005a94:	4c76      	ldr	r4, [pc, #472]	@ (8005c70 <CreateMessage+0x7ec>)
 8005a96:	4985      	ldr	r1, [pc, #532]	@ (8005cac <CreateMessage+0x828>)
 8005a98:	4877      	ldr	r0, [pc, #476]	@ (8005c78 <CreateMessage+0x7f4>)
 8005a9a:	9200      	str	r2, [sp, #0]
 8005a9c:	9301      	str	r3, [sp, #4]
 8005a9e:	0022      	movs	r2, r4
 8005aa0:	f020 fca6 	bl	80263f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_temperature);
#endif
      index += strlen(message);
 8005aa4:	4b74      	ldr	r3, [pc, #464]	@ (8005c78 <CreateMessage+0x7f4>)
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f7fa fb60 	bl	800016c <strlen>
 8005aac:	0003      	movs	r3, r0
 8005aae:	b299      	uxth	r1, r3
 8005ab0:	220e      	movs	r2, #14
 8005ab2:	18bb      	adds	r3, r7, r2
 8005ab4:	18ba      	adds	r2, r7, r2
 8005ab6:	8812      	ldrh	r2, [r2, #0]
 8005ab8:	188a      	adds	r2, r1, r2
 8005aba:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005abc:	1cfb      	adds	r3, r7, #3
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d019      	beq.n	8005af8 <CreateMessage+0x674>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005ac4:	4b6c      	ldr	r3, [pc, #432]	@ (8005c78 <CreateMessage+0x7f4>)
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f7fa fb50 	bl	800016c <strlen>
 8005acc:	0003      	movs	r3, r0
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	4b69      	ldr	r3, [pc, #420]	@ (8005c78 <CreateMessage+0x7f4>)
 8005ad2:	0011      	movs	r1, r2
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f7ff fa03 	bl	8004ee0 <ESP_Send>
 8005ada:	0003      	movs	r3, r0
 8005adc:	001a      	movs	r2, r3
 8005ade:	4b67      	ldr	r3, [pc, #412]	@ (8005c7c <CreateMessage+0x7f8>)
 8005ae0:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005ae2:	4b67      	ldr	r3, [pc, #412]	@ (8005c80 <CreateMessage+0x7fc>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	001a      	movs	r2, r3
 8005ae8:	4b64      	ldr	r3, [pc, #400]	@ (8005c7c <CreateMessage+0x7f8>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	4013      	ands	r3, r2
 8005aee:	1e5a      	subs	r2, r3, #1
 8005af0:	4193      	sbcs	r3, r2
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	4b62      	ldr	r3, [pc, #392]	@ (8005c80 <CreateMessage+0x7fc>)
 8005af6:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(SEN55HumidConfigAddr, keybuffer, IdSize);
 8005af8:	4b62      	ldr	r3, [pc, #392]	@ (8005c84 <CreateMessage+0x800>)
 8005afa:	486d      	ldr	r0, [pc, #436]	@ (8005cb0 <CreateMessage+0x82c>)
 8005afc:	220c      	movs	r2, #12
 8005afe:	0019      	movs	r1, r3
 8005b00:	f006 fc4c 	bl	800c39c <ReadUint8ArrayEEprom>
    if (((product_name[4] == '4') || (product_name[4] == '5')) && isKeyValid(keybuffer, "SEN54/5", "humidity")) {
 8005b04:	4b62      	ldr	r3, [pc, #392]	@ (8005c90 <CreateMessage+0x80c>)
 8005b06:	791b      	ldrb	r3, [r3, #4]
 8005b08:	2b34      	cmp	r3, #52	@ 0x34
 8005b0a:	d003      	beq.n	8005b14 <CreateMessage+0x690>
 8005b0c:	4b60      	ldr	r3, [pc, #384]	@ (8005c90 <CreateMessage+0x80c>)
 8005b0e:	791b      	ldrb	r3, [r3, #4]
 8005b10:	2b35      	cmp	r3, #53	@ 0x35
 8005b12:	d146      	bne.n	8005ba2 <CreateMessage+0x71e>
 8005b14:	4a67      	ldr	r2, [pc, #412]	@ (8005cb4 <CreateMessage+0x830>)
 8005b16:	4964      	ldr	r1, [pc, #400]	@ (8005ca8 <CreateMessage+0x824>)
 8005b18:	4b5a      	ldr	r3, [pc, #360]	@ (8005c84 <CreateMessage+0x800>)
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f7ff fb88 	bl	8005230 <isKeyValid>
 8005b20:	1e03      	subs	r3, r0, #0
 8005b22:	d03e      	beq.n	8005ba2 <CreateMessage+0x71e>
      uint8ArrayToString(Buffer, keybuffer);
 8005b24:	4a57      	ldr	r2, [pc, #348]	@ (8005c84 <CreateMessage+0x800>)
 8005b26:	4b52      	ldr	r3, [pc, #328]	@ (8005c70 <CreateMessage+0x7ec>)
 8005b28:	0011      	movs	r1, r2
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f7ff fbe2 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.1f}", Buffer, MeasVal.sen55_humidity);
 8005b30:	4b59      	ldr	r3, [pc, #356]	@ (8005c98 <CreateMessage+0x814>)
 8005b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b34:	1c18      	adds	r0, r3, #0
 8005b36:	f7fd fead 	bl	8003894 <__aeabi_f2d>
 8005b3a:	0002      	movs	r2, r0
 8005b3c:	000b      	movs	r3, r1
 8005b3e:	4c4c      	ldr	r4, [pc, #304]	@ (8005c70 <CreateMessage+0x7ec>)
 8005b40:	495a      	ldr	r1, [pc, #360]	@ (8005cac <CreateMessage+0x828>)
 8005b42:	484d      	ldr	r0, [pc, #308]	@ (8005c78 <CreateMessage+0x7f4>)
 8005b44:	9200      	str	r2, [sp, #0]
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	0022      	movs	r2, r4
 8005b4a:	f020 fc51 	bl	80263f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"SEN54/5 humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.sen55_humidity);
#endif
      index += strlen(message);
 8005b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8005c78 <CreateMessage+0x7f4>)
 8005b50:	0018      	movs	r0, r3
 8005b52:	f7fa fb0b 	bl	800016c <strlen>
 8005b56:	0003      	movs	r3, r0
 8005b58:	b299      	uxth	r1, r3
 8005b5a:	220e      	movs	r2, #14
 8005b5c:	18bb      	adds	r3, r7, r2
 8005b5e:	18ba      	adds	r2, r7, r2
 8005b60:	8812      	ldrh	r2, [r2, #0]
 8005b62:	188a      	adds	r2, r1, r2
 8005b64:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005b66:	1cfb      	adds	r3, r7, #3
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d019      	beq.n	8005ba2 <CreateMessage+0x71e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005b6e:	4b42      	ldr	r3, [pc, #264]	@ (8005c78 <CreateMessage+0x7f4>)
 8005b70:	0018      	movs	r0, r3
 8005b72:	f7fa fafb 	bl	800016c <strlen>
 8005b76:	0003      	movs	r3, r0
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	4b3f      	ldr	r3, [pc, #252]	@ (8005c78 <CreateMessage+0x7f4>)
 8005b7c:	0011      	movs	r1, r2
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f7ff f9ae 	bl	8004ee0 <ESP_Send>
 8005b84:	0003      	movs	r3, r0
 8005b86:	001a      	movs	r2, r3
 8005b88:	4b3c      	ldr	r3, [pc, #240]	@ (8005c7c <CreateMessage+0x7f8>)
 8005b8a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005b8c:	4b3c      	ldr	r3, [pc, #240]	@ (8005c80 <CreateMessage+0x7fc>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	001a      	movs	r2, r3
 8005b92:	4b3a      	ldr	r3, [pc, #232]	@ (8005c7c <CreateMessage+0x7f8>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	4013      	ands	r3, r2
 8005b98:	1e5a      	subs	r2, r3, #1
 8005b9a:	4193      	sbcs	r3, r2
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	4b38      	ldr	r3, [pc, #224]	@ (8005c80 <CreateMessage+0x7fc>)
 8005ba0:	701a      	strb	r2, [r3, #0]
      }
    }


    if (sen5x_Get_sen5x_enable_state()) {
 8005ba2:	f008 fdf9 	bl	800e798 <sen5x_Get_sen5x_enable_state>
 8005ba6:	1e03      	subs	r3, r0, #0
 8005ba8:	d100      	bne.n	8005bac <CreateMessage+0x728>
 8005baa:	e150      	b.n	8005e4e <CreateMessage+0x9ca>
      ReadUint8ArrayEEprom(PM1ConfigAddr, keybuffer, IdSize);
 8005bac:	4b35      	ldr	r3, [pc, #212]	@ (8005c84 <CreateMessage+0x800>)
 8005bae:	4842      	ldr	r0, [pc, #264]	@ (8005cb8 <CreateMessage+0x834>)
 8005bb0:	220c      	movs	r2, #12
 8005bb2:	0019      	movs	r1, r3
 8005bb4:	f006 fbf2 	bl	800c39c <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM1", "particle")) {
 8005bb8:	4a40      	ldr	r2, [pc, #256]	@ (8005cbc <CreateMessage+0x838>)
 8005bba:	4941      	ldr	r1, [pc, #260]	@ (8005cc0 <CreateMessage+0x83c>)
 8005bbc:	4b31      	ldr	r3, [pc, #196]	@ (8005c84 <CreateMessage+0x800>)
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f7ff fb36 	bl	8005230 <isKeyValid>
 8005bc4:	1e03      	subs	r3, r0, #0
 8005bc6:	d03e      	beq.n	8005c46 <CreateMessage+0x7c2>
        uint8ArrayToString(Buffer, keybuffer);
 8005bc8:	4a2e      	ldr	r2, [pc, #184]	@ (8005c84 <CreateMessage+0x800>)
 8005bca:	4b29      	ldr	r3, [pc, #164]	@ (8005c70 <CreateMessage+0x7ec>)
 8005bcc:	0011      	movs	r1, r2
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f7ff fb90 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM1p0max);
 8005bd4:	4b30      	ldr	r3, [pc, #192]	@ (8005c98 <CreateMessage+0x814>)
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	1c18      	adds	r0, r3, #0
 8005bda:	f7fd fe5b 	bl	8003894 <__aeabi_f2d>
 8005bde:	0002      	movs	r2, r0
 8005be0:	000b      	movs	r3, r1
 8005be2:	4c23      	ldr	r4, [pc, #140]	@ (8005c70 <CreateMessage+0x7ec>)
 8005be4:	4923      	ldr	r1, [pc, #140]	@ (8005c74 <CreateMessage+0x7f0>)
 8005be6:	4824      	ldr	r0, [pc, #144]	@ (8005c78 <CreateMessage+0x7f4>)
 8005be8:	9200      	str	r2, [sp, #0]
 8005bea:	9301      	str	r3, [sp, #4]
 8005bec:	0022      	movs	r2, r4
 8005bee:	f020 fbff 	bl	80263f0 <siprintf>
#else
        sprintf(&message[0], ",{\"name\":\"PM1\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM1p0max);
#endif
        index += strlen(message);
 8005bf2:	4b21      	ldr	r3, [pc, #132]	@ (8005c78 <CreateMessage+0x7f4>)
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f7fa fab9 	bl	800016c <strlen>
 8005bfa:	0003      	movs	r3, r0
 8005bfc:	b299      	uxth	r1, r3
 8005bfe:	220e      	movs	r2, #14
 8005c00:	18bb      	adds	r3, r7, r2
 8005c02:	18ba      	adds	r2, r7, r2
 8005c04:	8812      	ldrh	r2, [r2, #0]
 8005c06:	188a      	adds	r2, r1, r2
 8005c08:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005c0a:	1cfb      	adds	r3, r7, #3
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d019      	beq.n	8005c46 <CreateMessage+0x7c2>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005c12:	4b19      	ldr	r3, [pc, #100]	@ (8005c78 <CreateMessage+0x7f4>)
 8005c14:	0018      	movs	r0, r3
 8005c16:	f7fa faa9 	bl	800016c <strlen>
 8005c1a:	0003      	movs	r3, r0
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	4b16      	ldr	r3, [pc, #88]	@ (8005c78 <CreateMessage+0x7f4>)
 8005c20:	0011      	movs	r1, r2
 8005c22:	0018      	movs	r0, r3
 8005c24:	f7ff f95c 	bl	8004ee0 <ESP_Send>
 8005c28:	0003      	movs	r3, r0
 8005c2a:	001a      	movs	r2, r3
 8005c2c:	4b13      	ldr	r3, [pc, #76]	@ (8005c7c <CreateMessage+0x7f8>)
 8005c2e:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005c30:	4b13      	ldr	r3, [pc, #76]	@ (8005c80 <CreateMessage+0x7fc>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	001a      	movs	r2, r3
 8005c36:	4b11      	ldr	r3, [pc, #68]	@ (8005c7c <CreateMessage+0x7f8>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	1e5a      	subs	r2, r3, #1
 8005c3e:	4193      	sbcs	r3, r2
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	4b0f      	ldr	r3, [pc, #60]	@ (8005c80 <CreateMessage+0x7fc>)
 8005c44:	701a      	strb	r2, [r3, #0]
        }
      }
      ReadUint8ArrayEEprom(PM2ConfigAddr, keybuffer, IdSize);
 8005c46:	4b0f      	ldr	r3, [pc, #60]	@ (8005c84 <CreateMessage+0x800>)
 8005c48:	481e      	ldr	r0, [pc, #120]	@ (8005cc4 <CreateMessage+0x840>)
 8005c4a:	220c      	movs	r2, #12
 8005c4c:	0019      	movs	r1, r3
 8005c4e:	f006 fba5 	bl	800c39c <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005c52:	4a0c      	ldr	r2, [pc, #48]	@ (8005c84 <CreateMessage+0x800>)
 8005c54:	4b06      	ldr	r3, [pc, #24]	@ (8005c70 <CreateMessage+0x7ec>)
 8005c56:	0011      	movs	r1, r2
 8005c58:	0018      	movs	r0, r3
 8005c5a:	f7ff fb4b 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM2p5max);
 8005c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c98 <CreateMessage+0x814>)
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	1c18      	adds	r0, r3, #0
 8005c64:	f7fd fe16 	bl	8003894 <__aeabi_f2d>
 8005c68:	0002      	movs	r2, r0
 8005c6a:	000b      	movs	r3, r1
 8005c6c:	4c00      	ldr	r4, [pc, #0]	@ (8005c70 <CreateMessage+0x7ec>)
 8005c6e:	e02b      	b.n	8005cc8 <CreateMessage+0x844>
 8005c70:	20000850 	.word	0x20000850
 8005c74:	0802b0b4 	.word	0x0802b0b4
 8005c78:	200005d4 	.word	0x200005d4
 8005c7c:	20000869 	.word	0x20000869
 8005c80:	20000032 	.word	0x20000032
 8005c84:	20000844 	.word	0x20000844
 8005c88:	08080078 	.word	0x08080078
 8005c8c:	200005d0 	.word	0x200005d0
 8005c90:	20001174 	.word	0x20001174
 8005c94:	08080024 	.word	0x08080024
 8005c98:	20000714 	.word	0x20000714
 8005c9c:	0802b0d4 	.word	0x0802b0d4
 8005ca0:	08080170 	.word	0x08080170
 8005ca4:	0802b13c 	.word	0x0802b13c
 8005ca8:	0802b148 	.word	0x0802b148
 8005cac:	0802b150 	.word	0x0802b150
 8005cb0:	0808017c 	.word	0x0808017c
 8005cb4:	0802b170 	.word	0x0802b170
 8005cb8:	080800b0 	.word	0x080800b0
 8005cbc:	0802b17c 	.word	0x0802b17c
 8005cc0:	0802b188 	.word	0x0802b188
 8005cc4:	08080054 	.word	0x08080054
 8005cc8:	49ea      	ldr	r1, [pc, #936]	@ (8006074 <CreateMessage+0xbf0>)
 8005cca:	48eb      	ldr	r0, [pc, #940]	@ (8006078 <CreateMessage+0xbf4>)
 8005ccc:	9200      	str	r2, [sp, #0]
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	0022      	movs	r2, r4
 8005cd2:	f020 fb8d 	bl	80263f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM2p5max);
#endif
      index += strlen(message);
 8005cd6:	4be8      	ldr	r3, [pc, #928]	@ (8006078 <CreateMessage+0xbf4>)
 8005cd8:	0018      	movs	r0, r3
 8005cda:	f7fa fa47 	bl	800016c <strlen>
 8005cde:	0003      	movs	r3, r0
 8005ce0:	b299      	uxth	r1, r3
 8005ce2:	220e      	movs	r2, #14
 8005ce4:	18bb      	adds	r3, r7, r2
 8005ce6:	18ba      	adds	r2, r7, r2
 8005ce8:	8812      	ldrh	r2, [r2, #0]
 8005cea:	188a      	adds	r2, r1, r2
 8005cec:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005cee:	1cfb      	adds	r3, r7, #3
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d019      	beq.n	8005d2a <CreateMessage+0x8a6>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005cf6:	4be0      	ldr	r3, [pc, #896]	@ (8006078 <CreateMessage+0xbf4>)
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f7fa fa37 	bl	800016c <strlen>
 8005cfe:	0003      	movs	r3, r0
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	4bdd      	ldr	r3, [pc, #884]	@ (8006078 <CreateMessage+0xbf4>)
 8005d04:	0011      	movs	r1, r2
 8005d06:	0018      	movs	r0, r3
 8005d08:	f7ff f8ea 	bl	8004ee0 <ESP_Send>
 8005d0c:	0003      	movs	r3, r0
 8005d0e:	001a      	movs	r2, r3
 8005d10:	4bda      	ldr	r3, [pc, #872]	@ (800607c <CreateMessage+0xbf8>)
 8005d12:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005d14:	4bda      	ldr	r3, [pc, #872]	@ (8006080 <CreateMessage+0xbfc>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	001a      	movs	r2, r3
 8005d1a:	4bd8      	ldr	r3, [pc, #864]	@ (800607c <CreateMessage+0xbf8>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	1e5a      	subs	r2, r3, #1
 8005d22:	4193      	sbcs	r3, r2
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	4bd6      	ldr	r3, [pc, #856]	@ (8006080 <CreateMessage+0xbfc>)
 8005d28:	701a      	strb	r2, [r3, #0]
      }

      ReadUint8ArrayEEprom(PM4ConfigAddr, keybuffer, IdSize);
 8005d2a:	4bd6      	ldr	r3, [pc, #856]	@ (8006084 <CreateMessage+0xc00>)
 8005d2c:	48d6      	ldr	r0, [pc, #856]	@ (8006088 <CreateMessage+0xc04>)
 8005d2e:	220c      	movs	r2, #12
 8005d30:	0019      	movs	r1, r3
 8005d32:	f006 fb33 	bl	800c39c <ReadUint8ArrayEEprom>
      if (isKeyValid(keybuffer, "PM4", "particle")) {
 8005d36:	4ad5      	ldr	r2, [pc, #852]	@ (800608c <CreateMessage+0xc08>)
 8005d38:	49d5      	ldr	r1, [pc, #852]	@ (8006090 <CreateMessage+0xc0c>)
 8005d3a:	4bd2      	ldr	r3, [pc, #840]	@ (8006084 <CreateMessage+0xc00>)
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f7ff fa77 	bl	8005230 <isKeyValid>
 8005d42:	1e03      	subs	r3, r0, #0
 8005d44:	d03e      	beq.n	8005dc4 <CreateMessage+0x940>
        uint8ArrayToString(Buffer, keybuffer);
 8005d46:	4acf      	ldr	r2, [pc, #828]	@ (8006084 <CreateMessage+0xc00>)
 8005d48:	4bd2      	ldr	r3, [pc, #840]	@ (8006094 <CreateMessage+0xc10>)
 8005d4a:	0011      	movs	r1, r2
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f7ff fad1 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
        sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM4p0max);
 8005d52:	4bd1      	ldr	r3, [pc, #836]	@ (8006098 <CreateMessage+0xc14>)
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	1c18      	adds	r0, r3, #0
 8005d58:	f7fd fd9c 	bl	8003894 <__aeabi_f2d>
 8005d5c:	0002      	movs	r2, r0
 8005d5e:	000b      	movs	r3, r1
 8005d60:	4ccc      	ldr	r4, [pc, #816]	@ (8006094 <CreateMessage+0xc10>)
 8005d62:	49c4      	ldr	r1, [pc, #784]	@ (8006074 <CreateMessage+0xbf0>)
 8005d64:	48c4      	ldr	r0, [pc, #784]	@ (8006078 <CreateMessage+0xbf4>)
 8005d66:	9200      	str	r2, [sp, #0]
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	0022      	movs	r2, r4
 8005d6c:	f020 fb40 	bl	80263f0 <siprintf>
#else
        sprintf(&message[0], ",{\"name\":\"PM4\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM4p0max);
#endif
        index += strlen(message);
 8005d70:	4bc1      	ldr	r3, [pc, #772]	@ (8006078 <CreateMessage+0xbf4>)
 8005d72:	0018      	movs	r0, r3
 8005d74:	f7fa f9fa 	bl	800016c <strlen>
 8005d78:	0003      	movs	r3, r0
 8005d7a:	b299      	uxth	r1, r3
 8005d7c:	220e      	movs	r2, #14
 8005d7e:	18bb      	adds	r3, r7, r2
 8005d80:	18ba      	adds	r2, r7, r2
 8005d82:	8812      	ldrh	r2, [r2, #0]
 8005d84:	188a      	adds	r2, r1, r2
 8005d86:	801a      	strh	r2, [r3, #0]
        if (send) {
 8005d88:	1cfb      	adds	r3, r7, #3
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d019      	beq.n	8005dc4 <CreateMessage+0x940>
          status = ESP_Send((uint8_t*)message, strlen(message));
 8005d90:	4bb9      	ldr	r3, [pc, #740]	@ (8006078 <CreateMessage+0xbf4>)
 8005d92:	0018      	movs	r0, r3
 8005d94:	f7fa f9ea 	bl	800016c <strlen>
 8005d98:	0003      	movs	r3, r0
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	4bb6      	ldr	r3, [pc, #728]	@ (8006078 <CreateMessage+0xbf4>)
 8005d9e:	0011      	movs	r1, r2
 8005da0:	0018      	movs	r0, r3
 8005da2:	f7ff f89d 	bl	8004ee0 <ESP_Send>
 8005da6:	0003      	movs	r3, r0
 8005da8:	001a      	movs	r2, r3
 8005daa:	4bb4      	ldr	r3, [pc, #720]	@ (800607c <CreateMessage+0xbf8>)
 8005dac:	701a      	strb	r2, [r3, #0]
          retstat &= status;
 8005dae:	4bb4      	ldr	r3, [pc, #720]	@ (8006080 <CreateMessage+0xbfc>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	001a      	movs	r2, r3
 8005db4:	4bb1      	ldr	r3, [pc, #708]	@ (800607c <CreateMessage+0xbf8>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	4013      	ands	r3, r2
 8005dba:	1e5a      	subs	r2, r3, #1
 8005dbc:	4193      	sbcs	r3, r2
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	4baf      	ldr	r3, [pc, #700]	@ (8006080 <CreateMessage+0xbfc>)
 8005dc2:	701a      	strb	r2, [r3, #0]
        }
      }

      ReadUint8ArrayEEprom(PM10ConfigAddr, keybuffer, IdSize);
 8005dc4:	4baf      	ldr	r3, [pc, #700]	@ (8006084 <CreateMessage+0xc00>)
 8005dc6:	48b5      	ldr	r0, [pc, #724]	@ (800609c <CreateMessage+0xc18>)
 8005dc8:	220c      	movs	r2, #12
 8005dca:	0019      	movs	r1, r3
 8005dcc:	f006 fae6 	bl	800c39c <ReadUint8ArrayEEprom>
      uint8ArrayToString(Buffer, keybuffer);
 8005dd0:	4aac      	ldr	r2, [pc, #688]	@ (8006084 <CreateMessage+0xc00>)
 8005dd2:	4bb0      	ldr	r3, [pc, #704]	@ (8006094 <CreateMessage+0xc10>)
 8005dd4:	0011      	movs	r1, r2
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f7ff fa8c 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.PM10p0max);
 8005ddc:	4bae      	ldr	r3, [pc, #696]	@ (8006098 <CreateMessage+0xc14>)
 8005dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de0:	1c18      	adds	r0, r3, #0
 8005de2:	f7fd fd57 	bl	8003894 <__aeabi_f2d>
 8005de6:	0002      	movs	r2, r0
 8005de8:	000b      	movs	r3, r1
 8005dea:	4caa      	ldr	r4, [pc, #680]	@ (8006094 <CreateMessage+0xc10>)
 8005dec:	49a1      	ldr	r1, [pc, #644]	@ (8006074 <CreateMessage+0xbf0>)
 8005dee:	48a2      	ldr	r0, [pc, #648]	@ (8006078 <CreateMessage+0xbf4>)
 8005df0:	9200      	str	r2, [sp, #0]
 8005df2:	9301      	str	r3, [sp, #4]
 8005df4:	0022      	movs	r2, r4
 8005df6:	f020 fafb 	bl	80263f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.PM10p0max);
#endif
      index += strlen(message);
 8005dfa:	4b9f      	ldr	r3, [pc, #636]	@ (8006078 <CreateMessage+0xbf4>)
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f7fa f9b5 	bl	800016c <strlen>
 8005e02:	0003      	movs	r3, r0
 8005e04:	b299      	uxth	r1, r3
 8005e06:	220e      	movs	r2, #14
 8005e08:	18bb      	adds	r3, r7, r2
 8005e0a:	18ba      	adds	r2, r7, r2
 8005e0c:	8812      	ldrh	r2, [r2, #0]
 8005e0e:	188a      	adds	r2, r1, r2
 8005e10:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005e12:	1cfb      	adds	r3, r7, #3
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d019      	beq.n	8005e4e <CreateMessage+0x9ca>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005e1a:	4b97      	ldr	r3, [pc, #604]	@ (8006078 <CreateMessage+0xbf4>)
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f7fa f9a5 	bl	800016c <strlen>
 8005e22:	0003      	movs	r3, r0
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	4b94      	ldr	r3, [pc, #592]	@ (8006078 <CreateMessage+0xbf4>)
 8005e28:	0011      	movs	r1, r2
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	f7ff f858 	bl	8004ee0 <ESP_Send>
 8005e30:	0003      	movs	r3, r0
 8005e32:	001a      	movs	r2, r3
 8005e34:	4b91      	ldr	r3, [pc, #580]	@ (800607c <CreateMessage+0xbf8>)
 8005e36:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005e38:	4b91      	ldr	r3, [pc, #580]	@ (8006080 <CreateMessage+0xbfc>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	001a      	movs	r2, r3
 8005e3e:	4b8f      	ldr	r3, [pc, #572]	@ (800607c <CreateMessage+0xbf8>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	4013      	ands	r3, r2
 8005e44:	1e5a      	subs	r2, r3, #1
 8005e46:	4193      	sbcs	r3, r2
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	4b8d      	ldr	r3, [pc, #564]	@ (8006080 <CreateMessage+0xbfc>)
 8005e4c:	701a      	strb	r2, [r3, #0]
      }
    }
//  }

  if (IsAHT20SensorPresent()) {
 8005e4e:	f007 fc1f 	bl	800d690 <IsAHT20SensorPresent>
 8005e52:	1e03      	subs	r3, r0, #0
 8005e54:	d100      	bne.n	8005e58 <CreateMessage+0x9d4>
 8005e56:	e099      	b.n	8005f8c <CreateMessage+0xb08>
    ReadUint8ArrayEEprom(AHTTempConfigAddr, keybuffer, IdSize);
 8005e58:	4b8a      	ldr	r3, [pc, #552]	@ (8006084 <CreateMessage+0xc00>)
 8005e5a:	4891      	ldr	r0, [pc, #580]	@ (80060a0 <CreateMessage+0xc1c>)
 8005e5c:	220c      	movs	r2, #12
 8005e5e:	0019      	movs	r1, r3
 8005e60:	f006 fa9c 	bl	800c39c <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "temperature")) {
 8005e64:	4a8f      	ldr	r2, [pc, #572]	@ (80060a4 <CreateMessage+0xc20>)
 8005e66:	4990      	ldr	r1, [pc, #576]	@ (80060a8 <CreateMessage+0xc24>)
 8005e68:	4b86      	ldr	r3, [pc, #536]	@ (8006084 <CreateMessage+0xc00>)
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f7ff f9e0 	bl	8005230 <isKeyValid>
 8005e70:	1e03      	subs	r3, r0, #0
 8005e72:	d03e      	beq.n	8005ef2 <CreateMessage+0xa6e>
      uint8ArrayToString(Buffer, keybuffer);
 8005e74:	4a83      	ldr	r2, [pc, #524]	@ (8006084 <CreateMessage+0xc00>)
 8005e76:	4b87      	ldr	r3, [pc, #540]	@ (8006094 <CreateMessage+0xc10>)
 8005e78:	0011      	movs	r1, r2
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f7ff fa3a 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_temperature);
 8005e80:	4b85      	ldr	r3, [pc, #532]	@ (8006098 <CreateMessage+0xc14>)
 8005e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e84:	1c18      	adds	r0, r3, #0
 8005e86:	f7fd fd05 	bl	8003894 <__aeabi_f2d>
 8005e8a:	0002      	movs	r2, r0
 8005e8c:	000b      	movs	r3, r1
 8005e8e:	4c81      	ldr	r4, [pc, #516]	@ (8006094 <CreateMessage+0xc10>)
 8005e90:	4978      	ldr	r1, [pc, #480]	@ (8006074 <CreateMessage+0xbf0>)
 8005e92:	4879      	ldr	r0, [pc, #484]	@ (8006078 <CreateMessage+0xbf4>)
 8005e94:	9200      	str	r2, [sp, #0]
 8005e96:	9301      	str	r3, [sp, #4]
 8005e98:	0022      	movs	r2, r4
 8005e9a:	f020 faa9 	bl	80263f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"AHT2x Temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"C\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_temperature);
#endif
      index += strlen(message);
 8005e9e:	4b76      	ldr	r3, [pc, #472]	@ (8006078 <CreateMessage+0xbf4>)
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	f7fa f963 	bl	800016c <strlen>
 8005ea6:	0003      	movs	r3, r0
 8005ea8:	b299      	uxth	r1, r3
 8005eaa:	220e      	movs	r2, #14
 8005eac:	18bb      	adds	r3, r7, r2
 8005eae:	18ba      	adds	r2, r7, r2
 8005eb0:	8812      	ldrh	r2, [r2, #0]
 8005eb2:	188a      	adds	r2, r1, r2
 8005eb4:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005eb6:	1cfb      	adds	r3, r7, #3
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d019      	beq.n	8005ef2 <CreateMessage+0xa6e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005ebe:	4b6e      	ldr	r3, [pc, #440]	@ (8006078 <CreateMessage+0xbf4>)
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	f7fa f953 	bl	800016c <strlen>
 8005ec6:	0003      	movs	r3, r0
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	4b6b      	ldr	r3, [pc, #428]	@ (8006078 <CreateMessage+0xbf4>)
 8005ecc:	0011      	movs	r1, r2
 8005ece:	0018      	movs	r0, r3
 8005ed0:	f7ff f806 	bl	8004ee0 <ESP_Send>
 8005ed4:	0003      	movs	r3, r0
 8005ed6:	001a      	movs	r2, r3
 8005ed8:	4b68      	ldr	r3, [pc, #416]	@ (800607c <CreateMessage+0xbf8>)
 8005eda:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005edc:	4b68      	ldr	r3, [pc, #416]	@ (8006080 <CreateMessage+0xbfc>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	001a      	movs	r2, r3
 8005ee2:	4b66      	ldr	r3, [pc, #408]	@ (800607c <CreateMessage+0xbf8>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	1e5a      	subs	r2, r3, #1
 8005eea:	4193      	sbcs	r3, r2
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	4b64      	ldr	r3, [pc, #400]	@ (8006080 <CreateMessage+0xbfc>)
 8005ef0:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(AHTHumidConfigAddr, keybuffer, IdSize);
 8005ef2:	4b64      	ldr	r3, [pc, #400]	@ (8006084 <CreateMessage+0xc00>)
 8005ef4:	486d      	ldr	r0, [pc, #436]	@ (80060ac <CreateMessage+0xc28>)
 8005ef6:	220c      	movs	r2, #12
 8005ef8:	0019      	movs	r1, r3
 8005efa:	f006 fa4f 	bl	800c39c <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "AHT2x", "humidity")) {
 8005efe:	4a6c      	ldr	r2, [pc, #432]	@ (80060b0 <CreateMessage+0xc2c>)
 8005f00:	4969      	ldr	r1, [pc, #420]	@ (80060a8 <CreateMessage+0xc24>)
 8005f02:	4b60      	ldr	r3, [pc, #384]	@ (8006084 <CreateMessage+0xc00>)
 8005f04:	0018      	movs	r0, r3
 8005f06:	f7ff f993 	bl	8005230 <isKeyValid>
 8005f0a:	1e03      	subs	r3, r0, #0
 8005f0c:	d03e      	beq.n	8005f8c <CreateMessage+0xb08>
      uint8ArrayToString(Buffer, keybuffer);
 8005f0e:	4a5d      	ldr	r2, [pc, #372]	@ (8006084 <CreateMessage+0xc00>)
 8005f10:	4b60      	ldr	r3, [pc, #384]	@ (8006094 <CreateMessage+0xc10>)
 8005f12:	0011      	movs	r1, r2
 8005f14:	0018      	movs	r0, r3
 8005f16:	f7ff f9ed 	bl	80052f4 <uint8ArrayToString>
  #ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, MeasVal.AHT2x_humidity);
 8005f1a:	4b5f      	ldr	r3, [pc, #380]	@ (8006098 <CreateMessage+0xc14>)
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1e:	1c18      	adds	r0, r3, #0
 8005f20:	f7fd fcb8 	bl	8003894 <__aeabi_f2d>
 8005f24:	0002      	movs	r2, r0
 8005f26:	000b      	movs	r3, r1
 8005f28:	4c5a      	ldr	r4, [pc, #360]	@ (8006094 <CreateMessage+0xc10>)
 8005f2a:	4952      	ldr	r1, [pc, #328]	@ (8006074 <CreateMessage+0xbf0>)
 8005f2c:	4852      	ldr	r0, [pc, #328]	@ (8006078 <CreateMessage+0xbf4>)
 8005f2e:	9200      	str	r2, [sp, #0]
 8005f30:	9301      	str	r3, [sp, #4]
 8005f32:	0022      	movs	r2, r4
 8005f34:	f020 fa5c 	bl	80263f0 <siprintf>
  #else
      sprintf(&message[0], ",{\"name\":\"AHT2x humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AHT2x_humidity);
  #endif
      index += strlen(message);
 8005f38:	4b4f      	ldr	r3, [pc, #316]	@ (8006078 <CreateMessage+0xbf4>)
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f7fa f916 	bl	800016c <strlen>
 8005f40:	0003      	movs	r3, r0
 8005f42:	b299      	uxth	r1, r3
 8005f44:	220e      	movs	r2, #14
 8005f46:	18bb      	adds	r3, r7, r2
 8005f48:	18ba      	adds	r2, r7, r2
 8005f4a:	8812      	ldrh	r2, [r2, #0]
 8005f4c:	188a      	adds	r2, r1, r2
 8005f4e:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005f50:	1cfb      	adds	r3, r7, #3
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d019      	beq.n	8005f8c <CreateMessage+0xb08>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005f58:	4b47      	ldr	r3, [pc, #284]	@ (8006078 <CreateMessage+0xbf4>)
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f7fa f906 	bl	800016c <strlen>
 8005f60:	0003      	movs	r3, r0
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	4b44      	ldr	r3, [pc, #272]	@ (8006078 <CreateMessage+0xbf4>)
 8005f66:	0011      	movs	r1, r2
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f7fe ffb9 	bl	8004ee0 <ESP_Send>
 8005f6e:	0003      	movs	r3, r0
 8005f70:	001a      	movs	r2, r3
 8005f72:	4b42      	ldr	r3, [pc, #264]	@ (800607c <CreateMessage+0xbf8>)
 8005f74:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8005f76:	4b42      	ldr	r3, [pc, #264]	@ (8006080 <CreateMessage+0xbfc>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	001a      	movs	r2, r3
 8005f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800607c <CreateMessage+0xbf8>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	4013      	ands	r3, r2
 8005f82:	1e5a      	subs	r2, r3, #1
 8005f84:	4193      	sbcs	r3, r2
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	4b3d      	ldr	r3, [pc, #244]	@ (8006080 <CreateMessage+0xbfc>)
 8005f8a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  if (IsENS160SensorPresent()) {
 8005f8c:	f007 fb94 	bl	800d6b8 <IsENS160SensorPresent>
 8005f90:	1e03      	subs	r3, r0, #0
 8005f92:	d100      	bne.n	8005f96 <CreateMessage+0xb12>
 8005f94:	e0ff      	b.n	8006196 <CreateMessage+0xd12>
    ReadUint8ArrayEEprom(ENSAQIConfigAddr, keybuffer, IdSize);
 8005f96:	4b3b      	ldr	r3, [pc, #236]	@ (8006084 <CreateMessage+0xc00>)
 8005f98:	4846      	ldr	r0, [pc, #280]	@ (80060b4 <CreateMessage+0xc30>)
 8005f9a:	220c      	movs	r2, #12
 8005f9c:	0019      	movs	r1, r3
 8005f9e:	f006 f9fd 	bl	800c39c <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "air quality index")) {
 8005fa2:	4a45      	ldr	r2, [pc, #276]	@ (80060b8 <CreateMessage+0xc34>)
 8005fa4:	4945      	ldr	r1, [pc, #276]	@ (80060bc <CreateMessage+0xc38>)
 8005fa6:	4b37      	ldr	r3, [pc, #220]	@ (8006084 <CreateMessage+0xc00>)
 8005fa8:	0018      	movs	r0, r3
 8005faa:	f7ff f941 	bl	8005230 <isKeyValid>
 8005fae:	1e03      	subs	r3, r0, #0
 8005fb0:	d037      	beq.n	8006022 <CreateMessage+0xb9e>
      uint8ArrayToString(Buffer, keybuffer);
 8005fb2:	4a34      	ldr	r2, [pc, #208]	@ (8006084 <CreateMessage+0xc00>)
 8005fb4:	4b37      	ldr	r3, [pc, #220]	@ (8006094 <CreateMessage+0xc10>)
 8005fb6:	0011      	movs	r1, r2
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f7ff f99b 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.AQIndexmax);
 8005fbe:	4b36      	ldr	r3, [pc, #216]	@ (8006098 <CreateMessage+0xc14>)
 8005fc0:	2255      	movs	r2, #85	@ 0x55
 8005fc2:	5c9b      	ldrb	r3, [r3, r2]
 8005fc4:	4a33      	ldr	r2, [pc, #204]	@ (8006094 <CreateMessage+0xc10>)
 8005fc6:	493e      	ldr	r1, [pc, #248]	@ (80060c0 <CreateMessage+0xc3c>)
 8005fc8:	482b      	ldr	r0, [pc, #172]	@ (8006078 <CreateMessage+0xbf4>)
 8005fca:	f020 fa11 	bl	80263f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 AQI\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"i\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.AQIndexmax);
#endif
      index += strlen(message);
 8005fce:	4b2a      	ldr	r3, [pc, #168]	@ (8006078 <CreateMessage+0xbf4>)
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	f7fa f8cb 	bl	800016c <strlen>
 8005fd6:	0003      	movs	r3, r0
 8005fd8:	b299      	uxth	r1, r3
 8005fda:	220e      	movs	r2, #14
 8005fdc:	18bb      	adds	r3, r7, r2
 8005fde:	18ba      	adds	r2, r7, r2
 8005fe0:	8812      	ldrh	r2, [r2, #0]
 8005fe2:	188a      	adds	r2, r1, r2
 8005fe4:	801a      	strh	r2, [r3, #0]
      if (send) {
 8005fe6:	1cfb      	adds	r3, r7, #3
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d019      	beq.n	8006022 <CreateMessage+0xb9e>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8005fee:	4b22      	ldr	r3, [pc, #136]	@ (8006078 <CreateMessage+0xbf4>)
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f7fa f8bb 	bl	800016c <strlen>
 8005ff6:	0003      	movs	r3, r0
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8006078 <CreateMessage+0xbf4>)
 8005ffc:	0011      	movs	r1, r2
 8005ffe:	0018      	movs	r0, r3
 8006000:	f7fe ff6e 	bl	8004ee0 <ESP_Send>
 8006004:	0003      	movs	r3, r0
 8006006:	001a      	movs	r2, r3
 8006008:	4b1c      	ldr	r3, [pc, #112]	@ (800607c <CreateMessage+0xbf8>)
 800600a:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 800600c:	4b1c      	ldr	r3, [pc, #112]	@ (8006080 <CreateMessage+0xbfc>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	001a      	movs	r2, r3
 8006012:	4b1a      	ldr	r3, [pc, #104]	@ (800607c <CreateMessage+0xbf8>)
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	4013      	ands	r3, r2
 8006018:	1e5a      	subs	r2, r3, #1
 800601a:	4193      	sbcs	r3, r2
 800601c:	b2da      	uxtb	r2, r3
 800601e:	4b18      	ldr	r3, [pc, #96]	@ (8006080 <CreateMessage+0xbfc>)
 8006020:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSTVOCConfigAddr, keybuffer, IdSize);
 8006022:	4b18      	ldr	r3, [pc, #96]	@ (8006084 <CreateMessage+0xc00>)
 8006024:	4827      	ldr	r0, [pc, #156]	@ (80060c4 <CreateMessage+0xc40>)
 8006026:	220c      	movs	r2, #12
 8006028:	0019      	movs	r1, r3
 800602a:	f006 f9b7 	bl	800c39c <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "TVOC")) {
 800602e:	4a26      	ldr	r2, [pc, #152]	@ (80060c8 <CreateMessage+0xc44>)
 8006030:	4922      	ldr	r1, [pc, #136]	@ (80060bc <CreateMessage+0xc38>)
 8006032:	4b14      	ldr	r3, [pc, #80]	@ (8006084 <CreateMessage+0xc00>)
 8006034:	0018      	movs	r0, r3
 8006036:	f7ff f8fb 	bl	8005230 <isKeyValid>
 800603a:	1e03      	subs	r3, r0, #0
 800603c:	d065      	beq.n	800610a <CreateMessage+0xc86>
      uint8ArrayToString(Buffer, keybuffer);
 800603e:	4a11      	ldr	r2, [pc, #68]	@ (8006084 <CreateMessage+0xc00>)
 8006040:	4b14      	ldr	r3, [pc, #80]	@ (8006094 <CreateMessage+0xc10>)
 8006042:	0011      	movs	r1, r2
 8006044:	0018      	movs	r0, r3
 8006046:	f7ff f955 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.TVOCIndex);
 800604a:	4b13      	ldr	r3, [pc, #76]	@ (8006098 <CreateMessage+0xc14>)
 800604c:	224a      	movs	r2, #74	@ 0x4a
 800604e:	5a9b      	ldrh	r3, [r3, r2]
 8006050:	4a10      	ldr	r2, [pc, #64]	@ (8006094 <CreateMessage+0xc10>)
 8006052:	491b      	ldr	r1, [pc, #108]	@ (80060c0 <CreateMessage+0xc3c>)
 8006054:	4808      	ldr	r0, [pc, #32]	@ (8006078 <CreateMessage+0xbf4>)
 8006056:	f020 f9cb 	bl	80263f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 TVOC\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppb\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.TVOCIndex);
#endif
      index += strlen(message);
 800605a:	4b07      	ldr	r3, [pc, #28]	@ (8006078 <CreateMessage+0xbf4>)
 800605c:	0018      	movs	r0, r3
 800605e:	f7fa f885 	bl	800016c <strlen>
 8006062:	0003      	movs	r3, r0
 8006064:	b299      	uxth	r1, r3
 8006066:	220e      	movs	r2, #14
 8006068:	18bb      	adds	r3, r7, r2
 800606a:	18ba      	adds	r2, r7, r2
 800606c:	8812      	ldrh	r2, [r2, #0]
 800606e:	188a      	adds	r2, r1, r2
 8006070:	e02c      	b.n	80060cc <CreateMessage+0xc48>
 8006072:	46c0      	nop			@ (mov r8, r8)
 8006074:	0802b0b4 	.word	0x0802b0b4
 8006078:	200005d4 	.word	0x200005d4
 800607c:	20000869 	.word	0x20000869
 8006080:	20000032 	.word	0x20000032
 8006084:	20000844 	.word	0x20000844
 8006088:	080800bc 	.word	0x080800bc
 800608c:	0802b17c 	.word	0x0802b17c
 8006090:	0802b18c 	.word	0x0802b18c
 8006094:	20000850 	.word	0x20000850
 8006098:	20000714 	.word	0x20000714
 800609c:	08080060 	.word	0x08080060
 80060a0:	080800c8 	.word	0x080800c8
 80060a4:	0802b13c 	.word	0x0802b13c
 80060a8:	0802b190 	.word	0x0802b190
 80060ac:	080800d4 	.word	0x080800d4
 80060b0:	0802b170 	.word	0x0802b170
 80060b4:	080800ec 	.word	0x080800ec
 80060b8:	0802b198 	.word	0x0802b198
 80060bc:	0802b1ac 	.word	0x0802b1ac
 80060c0:	0802b0d4 	.word	0x0802b0d4
 80060c4:	080800f8 	.word	0x080800f8
 80060c8:	0802b1b4 	.word	0x0802b1b4
 80060cc:	801a      	strh	r2, [r3, #0]
      if (send) {
 80060ce:	1cfb      	adds	r3, r7, #3
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d019      	beq.n	800610a <CreateMessage+0xc86>
        status = ESP_Send((uint8_t*)message, strlen(message));
 80060d6:	4b5e      	ldr	r3, [pc, #376]	@ (8006250 <CreateMessage+0xdcc>)
 80060d8:	0018      	movs	r0, r3
 80060da:	f7fa f847 	bl	800016c <strlen>
 80060de:	0003      	movs	r3, r0
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	4b5b      	ldr	r3, [pc, #364]	@ (8006250 <CreateMessage+0xdcc>)
 80060e4:	0011      	movs	r1, r2
 80060e6:	0018      	movs	r0, r3
 80060e8:	f7fe fefa 	bl	8004ee0 <ESP_Send>
 80060ec:	0003      	movs	r3, r0
 80060ee:	001a      	movs	r2, r3
 80060f0:	4b58      	ldr	r3, [pc, #352]	@ (8006254 <CreateMessage+0xdd0>)
 80060f2:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 80060f4:	4b58      	ldr	r3, [pc, #352]	@ (8006258 <CreateMessage+0xdd4>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	001a      	movs	r2, r3
 80060fa:	4b56      	ldr	r3, [pc, #344]	@ (8006254 <CreateMessage+0xdd0>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	4013      	ands	r3, r2
 8006100:	1e5a      	subs	r2, r3, #1
 8006102:	4193      	sbcs	r3, r2
 8006104:	b2da      	uxtb	r2, r3
 8006106:	4b54      	ldr	r3, [pc, #336]	@ (8006258 <CreateMessage+0xdd4>)
 8006108:	701a      	strb	r2, [r3, #0]
      }
    }

    ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, keybuffer, IdSize);
 800610a:	4b54      	ldr	r3, [pc, #336]	@ (800625c <CreateMessage+0xdd8>)
 800610c:	4854      	ldr	r0, [pc, #336]	@ (8006260 <CreateMessage+0xddc>)
 800610e:	220c      	movs	r2, #12
 8006110:	0019      	movs	r1, r3
 8006112:	f006 f943 	bl	800c39c <ReadUint8ArrayEEprom>
    if (isKeyValid(keybuffer, "ENS160", "eCO2")) {
 8006116:	4a53      	ldr	r2, [pc, #332]	@ (8006264 <CreateMessage+0xde0>)
 8006118:	4953      	ldr	r1, [pc, #332]	@ (8006268 <CreateMessage+0xde4>)
 800611a:	4b50      	ldr	r3, [pc, #320]	@ (800625c <CreateMessage+0xdd8>)
 800611c:	0018      	movs	r0, r3
 800611e:	f7ff f887 	bl	8005230 <isKeyValid>
 8006122:	1e03      	subs	r3, r0, #0
 8006124:	d037      	beq.n	8006196 <CreateMessage+0xd12>
      uint8ArrayToString(Buffer, keybuffer);
 8006126:	4a4d      	ldr	r2, [pc, #308]	@ (800625c <CreateMessage+0xdd8>)
 8006128:	4b50      	ldr	r3, [pc, #320]	@ (800626c <CreateMessage+0xde8>)
 800612a:	0011      	movs	r1, r2
 800612c:	0018      	movs	r0, r3
 800612e:	f7ff f8e1 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
      sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%d}", Buffer, MeasVal.eCO2Indexmax);
 8006132:	4b4f      	ldr	r3, [pc, #316]	@ (8006270 <CreateMessage+0xdec>)
 8006134:	2252      	movs	r2, #82	@ 0x52
 8006136:	5a9b      	ldrh	r3, [r3, r2]
 8006138:	4a4c      	ldr	r2, [pc, #304]	@ (800626c <CreateMessage+0xde8>)
 800613a:	494e      	ldr	r1, [pc, #312]	@ (8006274 <CreateMessage+0xdf0>)
 800613c:	4844      	ldr	r0, [pc, #272]	@ (8006250 <CreateMessage+0xdcc>)
 800613e:	f020 f957 	bl	80263f0 <siprintf>
#else
      sprintf(&message[0], ",{\"name\":\"ENS160 eCO2\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"ppm\"}", uid[2], (char*)nameConfig, Buffer, MeasVal.eCO2Indexmax);
#endif
      index += strlen(message);
 8006142:	4b43      	ldr	r3, [pc, #268]	@ (8006250 <CreateMessage+0xdcc>)
 8006144:	0018      	movs	r0, r3
 8006146:	f7fa f811 	bl	800016c <strlen>
 800614a:	0003      	movs	r3, r0
 800614c:	b299      	uxth	r1, r3
 800614e:	220e      	movs	r2, #14
 8006150:	18bb      	adds	r3, r7, r2
 8006152:	18ba      	adds	r2, r7, r2
 8006154:	8812      	ldrh	r2, [r2, #0]
 8006156:	188a      	adds	r2, r1, r2
 8006158:	801a      	strh	r2, [r3, #0]
      if (send) {
 800615a:	1cfb      	adds	r3, r7, #3
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d019      	beq.n	8006196 <CreateMessage+0xd12>
        status = ESP_Send((uint8_t*)message, strlen(message));
 8006162:	4b3b      	ldr	r3, [pc, #236]	@ (8006250 <CreateMessage+0xdcc>)
 8006164:	0018      	movs	r0, r3
 8006166:	f7fa f801 	bl	800016c <strlen>
 800616a:	0003      	movs	r3, r0
 800616c:	b29a      	uxth	r2, r3
 800616e:	4b38      	ldr	r3, [pc, #224]	@ (8006250 <CreateMessage+0xdcc>)
 8006170:	0011      	movs	r1, r2
 8006172:	0018      	movs	r0, r3
 8006174:	f7fe feb4 	bl	8004ee0 <ESP_Send>
 8006178:	0003      	movs	r3, r0
 800617a:	001a      	movs	r2, r3
 800617c:	4b35      	ldr	r3, [pc, #212]	@ (8006254 <CreateMessage+0xdd0>)
 800617e:	701a      	strb	r2, [r3, #0]
        retstat &= status;
 8006180:	4b35      	ldr	r3, [pc, #212]	@ (8006258 <CreateMessage+0xdd4>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	001a      	movs	r2, r3
 8006186:	4b33      	ldr	r3, [pc, #204]	@ (8006254 <CreateMessage+0xdd0>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	4013      	ands	r3, r2
 800618c:	1e5a      	subs	r2, r3, #1
 800618e:	4193      	sbcs	r3, r2
 8006190:	b2da      	uxtb	r2, r3
 8006192:	4b31      	ldr	r3, [pc, #196]	@ (8006258 <CreateMessage+0xdd4>)
 8006194:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  ReadUint8ArrayEEprom(BatVoltConfigAddr, keybuffer, IdSize);
 8006196:	4b31      	ldr	r3, [pc, #196]	@ (800625c <CreateMessage+0xdd8>)
 8006198:	4837      	ldr	r0, [pc, #220]	@ (8006278 <CreateMessage+0xdf4>)
 800619a:	220c      	movs	r2, #12
 800619c:	0019      	movs	r1, r3
 800619e:	f006 f8fd 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, keybuffer);
 80061a2:	4a2e      	ldr	r2, [pc, #184]	@ (800625c <CreateMessage+0xdd8>)
 80061a4:	4b31      	ldr	r3, [pc, #196]	@ (800626c <CreateMessage+0xde8>)
 80061a6:	0011      	movs	r1, r2
 80061a8:	0018      	movs	r0, r3
 80061aa:	f7ff f8a3 	bl	80052f4 <uint8ArrayToString>
#ifdef OPENSENSEMAP
  sprintf(&message[0], ",{\"sensor\": \"%s\", \"value\":%.2f}", Buffer, batteryCharge);
 80061ae:	4b33      	ldr	r3, [pc, #204]	@ (800627c <CreateMessage+0xdf8>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	1c18      	adds	r0, r3, #0
 80061b4:	f7fd fb6e 	bl	8003894 <__aeabi_f2d>
 80061b8:	0002      	movs	r2, r0
 80061ba:	000b      	movs	r3, r1
 80061bc:	4c2b      	ldr	r4, [pc, #172]	@ (800626c <CreateMessage+0xde8>)
 80061be:	4930      	ldr	r1, [pc, #192]	@ (8006280 <CreateMessage+0xdfc>)
 80061c0:	4823      	ldr	r0, [pc, #140]	@ (8006250 <CreateMessage+0xdcc>)
 80061c2:	9200      	str	r2, [sp, #0]
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	0022      	movs	r2, r4
 80061c8:	f020 f912 	bl	80263f0 <siprintf>
    arridx += strlen(message);
    index +=arridx;

    sprintf(&message[arridx], "{\"NOX\":%d}", MeasVal.airNOxmax);
#endif
  sprintf(&message[strlen(message)], "]");
 80061cc:	4b20      	ldr	r3, [pc, #128]	@ (8006250 <CreateMessage+0xdcc>)
 80061ce:	0018      	movs	r0, r3
 80061d0:	f7f9 ffcc 	bl	800016c <strlen>
 80061d4:	0002      	movs	r2, r0
 80061d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006250 <CreateMessage+0xdcc>)
 80061d8:	18d3      	adds	r3, r2, r3
 80061da:	4a2a      	ldr	r2, [pc, #168]	@ (8006284 <CreateMessage+0xe00>)
 80061dc:	0011      	movs	r1, r2
 80061de:	0018      	movs	r0, r3
 80061e0:	f020 f906 	bl	80263f0 <siprintf>
  index += strlen(message);
 80061e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006250 <CreateMessage+0xdcc>)
 80061e6:	0018      	movs	r0, r3
 80061e8:	f7f9 ffc0 	bl	800016c <strlen>
 80061ec:	0003      	movs	r3, r0
 80061ee:	b299      	uxth	r1, r3
 80061f0:	220e      	movs	r2, #14
 80061f2:	18bb      	adds	r3, r7, r2
 80061f4:	18ba      	adds	r2, r7, r2
 80061f6:	8812      	ldrh	r2, [r2, #0]
 80061f8:	188a      	adds	r2, r1, r2
 80061fa:	801a      	strh	r2, [r3, #0]
  if (send) {
 80061fc:	1cfb      	adds	r3, r7, #3
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d019      	beq.n	8006238 <CreateMessage+0xdb4>
    status = ESP_Send((uint8_t*)message, strlen(message));
 8006204:	4b12      	ldr	r3, [pc, #72]	@ (8006250 <CreateMessage+0xdcc>)
 8006206:	0018      	movs	r0, r3
 8006208:	f7f9 ffb0 	bl	800016c <strlen>
 800620c:	0003      	movs	r3, r0
 800620e:	b29a      	uxth	r2, r3
 8006210:	4b0f      	ldr	r3, [pc, #60]	@ (8006250 <CreateMessage+0xdcc>)
 8006212:	0011      	movs	r1, r2
 8006214:	0018      	movs	r0, r3
 8006216:	f7fe fe63 	bl	8004ee0 <ESP_Send>
 800621a:	0003      	movs	r3, r0
 800621c:	001a      	movs	r2, r3
 800621e:	4b0d      	ldr	r3, [pc, #52]	@ (8006254 <CreateMessage+0xdd0>)
 8006220:	701a      	strb	r2, [r3, #0]
    retstat &= status;
 8006222:	4b0d      	ldr	r3, [pc, #52]	@ (8006258 <CreateMessage+0xdd4>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	001a      	movs	r2, r3
 8006228:	4b0a      	ldr	r3, [pc, #40]	@ (8006254 <CreateMessage+0xdd0>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	4013      	ands	r3, r2
 800622e:	1e5a      	subs	r2, r3, #1
 8006230:	4193      	sbcs	r3, r2
 8006232:	b2da      	uxtb	r2, r3
 8006234:	4b08      	ldr	r3, [pc, #32]	@ (8006258 <CreateMessage+0xdd4>)
 8006236:	701a      	strb	r2, [r3, #0]
  }
  *txstat = retstat;
 8006238:	4b07      	ldr	r3, [pc, #28]	@ (8006258 <CreateMessage+0xdd4>)
 800623a:	781a      	ldrb	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	701a      	strb	r2, [r3, #0]
  return index;
 8006240:	230e      	movs	r3, #14
 8006242:	18fb      	adds	r3, r7, r3
 8006244:	881b      	ldrh	r3, [r3, #0]
}
 8006246:	0018      	movs	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	b004      	add	sp, #16
 800624c:	bdb0      	pop	{r4, r5, r7, pc}
 800624e:	46c0      	nop			@ (mov r8, r8)
 8006250:	200005d4 	.word	0x200005d4
 8006254:	20000869 	.word	0x20000869
 8006258:	20000032 	.word	0x20000032
 800625c:	20000844 	.word	0x20000844
 8006260:	08080104 	.word	0x08080104
 8006264:	0802b1bc 	.word	0x0802b1bc
 8006268:	0802b1ac 	.word	0x0802b1ac
 800626c:	20000850 	.word	0x20000850
 8006270:	20000714 	.word	0x20000714
 8006274:	0802b0d4 	.word	0x0802b0d4
 8006278:	0808006c 	.word	0x0808006c
 800627c:	200005cc 	.word	0x200005cc
 8006280:	0802b0b4 	.word	0x0802b0b4
 8006284:	0802b1c4 	.word	0x0802b1c4

08006288 <StartProg>:

void StartProg(){
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 800628c:	2064      	movs	r0, #100	@ 0x64
 800628e:	f00e fc63 	bl	8014b58 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8006292:	4b15      	ldr	r3, [pc, #84]	@ (80062e8 <StartProg+0x60>)
 8006294:	2200      	movs	r2, #0
 8006296:	2101      	movs	r1, #1
 8006298:	0018      	movs	r0, r3
 800629a:	f00f fee4 	bl	8016066 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800629e:	2064      	movs	r0, #100	@ 0x64
 80062a0:	f00e fc5a 	bl	8014b58 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80062a4:	4b10      	ldr	r3, [pc, #64]	@ (80062e8 <StartProg+0x60>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	2102      	movs	r1, #2
 80062aa:	0018      	movs	r0, r3
 80062ac:	f00f fedb 	bl	8016066 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80062b0:	23fa      	movs	r3, #250	@ 0xfa
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	0018      	movs	r0, r3
 80062b6:	f00e fc4f 	bl	8014b58 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80062ba:	4b0b      	ldr	r3, [pc, #44]	@ (80062e8 <StartProg+0x60>)
 80062bc:	2201      	movs	r2, #1
 80062be:	2101      	movs	r1, #1
 80062c0:	0018      	movs	r0, r3
 80062c2:	f00f fed0 	bl	8016066 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80062c6:	23fa      	movs	r3, #250	@ 0xfa
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	0018      	movs	r0, r3
 80062cc:	f00e fc44 	bl	8014b58 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80062d0:	4b05      	ldr	r3, [pc, #20]	@ (80062e8 <StartProg+0x60>)
 80062d2:	2201      	movs	r2, #1
 80062d4:	2102      	movs	r1, #2
 80062d6:	0018      	movs	r0, r3
 80062d8:	f00f fec5 	bl	8016066 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 80062dc:	2028      	movs	r0, #40	@ 0x28
 80062de:	f00e fc3b 	bl	8014b58 <HAL_Delay>
}
 80062e2:	46c0      	nop			@ (mov r8, r8)
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	50001c00 	.word	0x50001c00

080062ec <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 80062ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ee:	b0df      	sub	sp, #380	@ 0x17c
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	0008      	movs	r0, r1
 80062f6:	0011      	movs	r1, r2
 80062f8:	4bc0      	ldr	r3, [pc, #768]	@ (80065fc <ParseBuffer+0x310>)
 80062fa:	24bc      	movs	r4, #188	@ 0xbc
 80062fc:	0064      	lsls	r4, r4, #1
 80062fe:	191b      	adds	r3, r3, r4
 8006300:	19db      	adds	r3, r3, r7
 8006302:	1c02      	adds	r2, r0, #0
 8006304:	801a      	strh	r2, [r3, #0]
 8006306:	4bbe      	ldr	r3, [pc, #760]	@ (8006600 <ParseBuffer+0x314>)
 8006308:	191b      	adds	r3, r3, r4
 800630a:	19db      	adds	r3, r3, r7
 800630c:	1c0a      	adds	r2, r1, #0
 800630e:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8006310:	2380      	movs	r3, #128	@ 0x80
 8006312:	005a      	lsls	r2, r3, #1
 8006314:	235c      	movs	r3, #92	@ 0x5c
 8006316:	18fb      	adds	r3, r7, r3
 8006318:	2100      	movs	r1, #0
 800631a:	0018      	movs	r0, r3
 800631c:	f020 f9d2 	bl	80266c4 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8006320:	2378      	movs	r3, #120	@ 0x78
 8006322:	33ff      	adds	r3, #255	@ 0xff
 8006324:	18fb      	adds	r3, r7, r3
 8006326:	2203      	movs	r2, #3
 8006328:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800632a:	23ba      	movs	r3, #186	@ 0xba
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	18fb      	adds	r3, r7, r3
 8006330:	2200      	movs	r2, #0
 8006332:	801a      	strh	r2, [r3, #0]
 8006334:	e013      	b.n	800635e <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8006336:	20ba      	movs	r0, #186	@ 0xba
 8006338:	0040      	lsls	r0, r0, #1
 800633a:	183b      	adds	r3, r7, r0
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	18d2      	adds	r2, r2, r3
 8006342:	183b      	adds	r3, r7, r0
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	7811      	ldrb	r1, [r2, #0]
 8006348:	4aae      	ldr	r2, [pc, #696]	@ (8006604 <ParseBuffer+0x318>)
 800634a:	24bc      	movs	r4, #188	@ 0xbc
 800634c:	0064      	lsls	r4, r4, #1
 800634e:	1912      	adds	r2, r2, r4
 8006350:	19d2      	adds	r2, r2, r7
 8006352:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8006354:	183b      	adds	r3, r7, r0
 8006356:	881a      	ldrh	r2, [r3, #0]
 8006358:	183b      	adds	r3, r7, r0
 800635a:	3201      	adds	r2, #1
 800635c:	801a      	strh	r2, [r3, #0]
 800635e:	23ba      	movs	r3, #186	@ 0xba
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	18fa      	adds	r2, r7, r3
 8006364:	4ba5      	ldr	r3, [pc, #660]	@ (80065fc <ParseBuffer+0x310>)
 8006366:	21bc      	movs	r1, #188	@ 0xbc
 8006368:	0049      	lsls	r1, r1, #1
 800636a:	185b      	adds	r3, r3, r1
 800636c:	19db      	adds	r3, r3, r7
 800636e:	8812      	ldrh	r2, [r2, #0]
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	429a      	cmp	r2, r3
 8006374:	d3df      	bcc.n	8006336 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8006376:	4ba1      	ldr	r3, [pc, #644]	@ (80065fc <ParseBuffer+0x310>)
 8006378:	185b      	adds	r3, r3, r1
 800637a:	19db      	adds	r3, r3, r7
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	4aa1      	ldr	r2, [pc, #644]	@ (8006604 <ParseBuffer+0x318>)
 8006380:	1852      	adds	r2, r2, r1
 8006382:	19d2      	adds	r2, r2, r7
 8006384:	2100      	movs	r1, #0
 8006386:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8006388:	f00d feee 	bl	8014168 <GetVerboseLevel>
 800638c:	0003      	movs	r3, r0
 800638e:	2b03      	cmp	r3, #3
 8006390:	d115      	bne.n	80063be <ParseBuffer+0xd2>
#ifdef LONGMESSAGES
  if (usblog && Check_USB_PowerOn()) {
 8006392:	4b9d      	ldr	r3, [pc, #628]	@ (8006608 <ParseBuffer+0x31c>)
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00a      	beq.n	80063b0 <ParseBuffer+0xc4>
 800639a:	f003 fbfb 	bl	8009b94 <Check_USB_PowerOn>
 800639e:	1e03      	subs	r3, r0, #0
 80063a0:	d006      	beq.n	80063b0 <ParseBuffer+0xc4>
    printf_USB("%s\r\n", tempBuf);
 80063a2:	235c      	movs	r3, #92	@ 0x5c
 80063a4:	18fa      	adds	r2, r7, r3
 80063a6:	4b99      	ldr	r3, [pc, #612]	@ (800660c <ParseBuffer+0x320>)
 80063a8:	0011      	movs	r1, r2
 80063aa:	0018      	movs	r0, r3
 80063ac:	f002 fb56 	bl	8008a5c <printf_USB>
  }
  printf("Receive ParseBuffer: %s", tempBuf );
 80063b0:	235c      	movs	r3, #92	@ 0x5c
 80063b2:	18fa      	adds	r2, r7, r3
 80063b4:	4b96      	ldr	r3, [pc, #600]	@ (8006610 <ParseBuffer+0x324>)
 80063b6:	0011      	movs	r1, r2
 80063b8:	0018      	movs	r0, r3
 80063ba:	f01f ffa9 	bl	8026310 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  }
  char * ParsePoint = 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	26b8      	movs	r6, #184	@ 0xb8
 80063c2:	0076      	lsls	r6, r6, #1
 80063c4:	19ba      	adds	r2, r7, r6
 80063c6:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 80063c8:	4b92      	ldr	r3, [pc, #584]	@ (8006614 <ParseBuffer+0x328>)
 80063ca:	25bc      	movs	r5, #188	@ 0xbc
 80063cc:	006d      	lsls	r5, r5, #1
 80063ce:	195b      	adds	r3, r3, r5
 80063d0:	19db      	adds	r3, r3, r7
 80063d2:	4a91      	ldr	r2, [pc, #580]	@ (8006618 <ParseBuffer+0x32c>)
 80063d4:	8811      	ldrh	r1, [r2, #0]
 80063d6:	8019      	strh	r1, [r3, #0]
 80063d8:	7892      	ldrb	r2, [r2, #2]
 80063da:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80063dc:	4b8f      	ldr	r3, [pc, #572]	@ (800661c <ParseBuffer+0x330>)
 80063de:	195b      	adds	r3, r3, r5
 80063e0:	19db      	adds	r3, r3, r7
 80063e2:	4a8f      	ldr	r2, [pc, #572]	@ (8006620 <ParseBuffer+0x334>)
 80063e4:	6811      	ldr	r1, [r2, #0]
 80063e6:	6019      	str	r1, [r3, #0]
 80063e8:	8892      	ldrh	r2, [r2, #4]
 80063ea:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 80063ec:	4b8d      	ldr	r3, [pc, #564]	@ (8006624 <ParseBuffer+0x338>)
 80063ee:	195b      	adds	r3, r3, r5
 80063f0:	19db      	adds	r3, r3, r7
 80063f2:	4a8d      	ldr	r2, [pc, #564]	@ (8006628 <ParseBuffer+0x33c>)
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	2200      	movs	r2, #0
 80063f8:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 80063fa:	4b8c      	ldr	r3, [pc, #560]	@ (800662c <ParseBuffer+0x340>)
 80063fc:	195b      	adds	r3, r3, r5
 80063fe:	19db      	adds	r3, r3, r7
 8006400:	4a8b      	ldr	r2, [pc, #556]	@ (8006630 <ParseBuffer+0x344>)
 8006402:	6811      	ldr	r1, [r2, #0]
 8006404:	6019      	str	r1, [r3, #0]
 8006406:	8892      	ldrh	r2, [r2, #4]
 8006408:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 800640a:	4b8a      	ldr	r3, [pc, #552]	@ (8006634 <ParseBuffer+0x348>)
 800640c:	195b      	adds	r3, r3, r5
 800640e:	19db      	adds	r3, r3, r7
 8006410:	223e      	movs	r2, #62	@ 0x3e
 8006412:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8006414:	4b88      	ldr	r3, [pc, #544]	@ (8006638 <ParseBuffer+0x34c>)
 8006416:	195b      	adds	r3, r3, r5
 8006418:	19db      	adds	r3, r3, r7
 800641a:	4a88      	ldr	r2, [pc, #544]	@ (800663c <ParseBuffer+0x350>)
 800641c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800641e:	c313      	stmia	r3!, {r0, r1, r4}
 8006420:	8811      	ldrh	r1, [r2, #0]
 8006422:	8019      	strh	r1, [r3, #0]
 8006424:	7892      	ldrb	r2, [r2, #2]
 8006426:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8006428:	4b85      	ldr	r3, [pc, #532]	@ (8006640 <ParseBuffer+0x354>)
 800642a:	195b      	adds	r3, r3, r5
 800642c:	19db      	adds	r3, r3, r7
 800642e:	4a85      	ldr	r2, [pc, #532]	@ (8006644 <ParseBuffer+0x358>)
 8006430:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006432:	c313      	stmia	r3!, {r0, r1, r4}
 8006434:	8812      	ldrh	r2, [r2, #0]
 8006436:	801a      	strh	r2, [r3, #0]
  const char MAIL_API[] = AT_RESPONSE_MAIL_API;
 8006438:	4b83      	ldr	r3, [pc, #524]	@ (8006648 <ParseBuffer+0x35c>)
 800643a:	195b      	adds	r3, r3, r5
 800643c:	19db      	adds	r3, r3, r7
 800643e:	4a83      	ldr	r2, [pc, #524]	@ (800664c <ParseBuffer+0x360>)
 8006440:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006442:	c313      	stmia	r3!, {r0, r1, r4}
 8006444:	8811      	ldrh	r1, [r2, #0]
 8006446:	8019      	strh	r1, [r3, #0]
 8006448:	7892      	ldrb	r2, [r2, #2]
 800644a:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 800644c:	4b6c      	ldr	r3, [pc, #432]	@ (8006600 <ParseBuffer+0x314>)
 800644e:	195b      	adds	r3, r3, r5
 8006450:	19db      	adds	r3, r3, r7
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10a      	bne.n	800646e <ParseBuffer+0x182>
    ParsePoint = strstr(tempBuf, OK);
 8006458:	2358      	movs	r3, #88	@ 0x58
 800645a:	18fa      	adds	r2, r7, r3
 800645c:	235c      	movs	r3, #92	@ 0x5c
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	0011      	movs	r1, r2
 8006462:	0018      	movs	r0, r3
 8006464:	f020 f969 	bl	802673a <strstr>
 8006468:	0003      	movs	r3, r0
 800646a:	19ba      	adds	r2, r7, r6
 800646c:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 800646e:	4b64      	ldr	r3, [pc, #400]	@ (8006600 <ParseBuffer+0x314>)
 8006470:	22bc      	movs	r2, #188	@ 0xbc
 8006472:	0052      	lsls	r2, r2, #1
 8006474:	189b      	adds	r3, r3, r2
 8006476:	19db      	adds	r3, r3, r7
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d10c      	bne.n	8006498 <ParseBuffer+0x1ac>
    ParsePoint = strstr(tempBuf, ready);
 800647e:	2340      	movs	r3, #64	@ 0x40
 8006480:	18fa      	adds	r2, r7, r3
 8006482:	235c      	movs	r3, #92	@ 0x5c
 8006484:	18fb      	adds	r3, r7, r3
 8006486:	0011      	movs	r1, r2
 8006488:	0018      	movs	r0, r3
 800648a:	f020 f956 	bl	802673a <strstr>
 800648e:	0003      	movs	r3, r0
 8006490:	22b8      	movs	r2, #184	@ 0xb8
 8006492:	0052      	lsls	r2, r2, #1
 8006494:	18ba      	adds	r2, r7, r2
 8006496:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8006498:	4b59      	ldr	r3, [pc, #356]	@ (8006600 <ParseBuffer+0x314>)
 800649a:	22bc      	movs	r2, #188	@ 0xbc
 800649c:	0052      	lsls	r2, r2, #1
 800649e:	189b      	adds	r3, r3, r2
 80064a0:	19db      	adds	r3, r3, r7
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d10c      	bne.n	80064c2 <ParseBuffer+0x1d6>
    ParsePoint = strstr(tempBuf, start);
 80064a8:	233c      	movs	r3, #60	@ 0x3c
 80064aa:	18fa      	adds	r2, r7, r3
 80064ac:	235c      	movs	r3, #92	@ 0x5c
 80064ae:	18fb      	adds	r3, r7, r3
 80064b0:	0011      	movs	r1, r2
 80064b2:	0018      	movs	r0, r3
 80064b4:	f020 f941 	bl	802673a <strstr>
 80064b8:	0003      	movs	r3, r0
 80064ba:	22b8      	movs	r2, #184	@ 0xb8
 80064bc:	0052      	lsls	r2, r2, #1
 80064be:	18ba      	adds	r2, r7, r2
 80064c0:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80064c2:	4b4f      	ldr	r3, [pc, #316]	@ (8006600 <ParseBuffer+0x314>)
 80064c4:	22bc      	movs	r2, #188	@ 0xbc
 80064c6:	0052      	lsls	r2, r2, #1
 80064c8:	189b      	adds	r3, r3, r2
 80064ca:	19db      	adds	r3, r3, r7
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	2b05      	cmp	r3, #5
 80064d0:	d10c      	bne.n	80064ec <ParseBuffer+0x200>
    ParsePoint = strstr(tempBuf, TIME);
 80064d2:	231c      	movs	r3, #28
 80064d4:	18fa      	adds	r2, r7, r3
 80064d6:	235c      	movs	r3, #92	@ 0x5c
 80064d8:	18fb      	adds	r3, r7, r3
 80064da:	0011      	movs	r1, r2
 80064dc:	0018      	movs	r0, r3
 80064de:	f020 f92c 	bl	802673a <strstr>
 80064e2:	0003      	movs	r3, r0
 80064e4:	22b8      	movs	r2, #184	@ 0xb8
 80064e6:	0052      	lsls	r2, r2, #1
 80064e8:	18ba      	adds	r2, r7, r2
 80064ea:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_MAIL_API){
 80064ec:	4b44      	ldr	r3, [pc, #272]	@ (8006600 <ParseBuffer+0x314>)
 80064ee:	22bc      	movs	r2, #188	@ 0xbc
 80064f0:	0052      	lsls	r2, r2, #1
 80064f2:	189b      	adds	r3, r3, r2
 80064f4:	19db      	adds	r3, r3, r7
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b06      	cmp	r3, #6
 80064fa:	d10c      	bne.n	8006516 <ParseBuffer+0x22a>
    ParsePoint = strstr(tempBuf, MAIL_API);
 80064fc:	230c      	movs	r3, #12
 80064fe:	18fa      	adds	r2, r7, r3
 8006500:	235c      	movs	r3, #92	@ 0x5c
 8006502:	18fb      	adds	r3, r7, r3
 8006504:	0011      	movs	r1, r2
 8006506:	0018      	movs	r0, r3
 8006508:	f020 f917 	bl	802673a <strstr>
 800650c:	0003      	movs	r3, r0
 800650e:	22b8      	movs	r2, #184	@ 0xb8
 8006510:	0052      	lsls	r2, r2, #1
 8006512:	18ba      	adds	r2, r7, r2
 8006514:	6013      	str	r3, [r2, #0]
  }
  char *ParsePoint2 = strstr(tempBuf, ERROR);
 8006516:	2350      	movs	r3, #80	@ 0x50
 8006518:	18fa      	adds	r2, r7, r3
 800651a:	245c      	movs	r4, #92	@ 0x5c
 800651c:	193b      	adds	r3, r7, r4
 800651e:	0011      	movs	r1, r2
 8006520:	0018      	movs	r0, r3
 8006522:	f020 f90a 	bl	802673a <strstr>
 8006526:	0003      	movs	r3, r0
 8006528:	22b6      	movs	r2, #182	@ 0xb6
 800652a:	0052      	lsls	r2, r2, #1
 800652c:	18ba      	adds	r2, r7, r2
 800652e:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8006530:	232c      	movs	r3, #44	@ 0x2c
 8006532:	18fa      	adds	r2, r7, r3
 8006534:	193b      	adds	r3, r7, r4
 8006536:	0011      	movs	r1, r2
 8006538:	0018      	movs	r0, r3
 800653a:	f020 f8fe 	bl	802673a <strstr>
 800653e:	0003      	movs	r3, r0
 8006540:	22b4      	movs	r2, #180	@ 0xb4
 8006542:	0052      	lsls	r2, r2, #1
 8006544:	18ba      	adds	r2, r7, r2
 8006546:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, Credentials.SSID);
 8006548:	4a41      	ldr	r2, [pc, #260]	@ (8006650 <ParseBuffer+0x364>)
 800654a:	193b      	adds	r3, r7, r4
 800654c:	0011      	movs	r1, r2
 800654e:	0018      	movs	r0, r3
 8006550:	f020 f8f3 	bl	802673a <strstr>
 8006554:	0003      	movs	r3, r0
 8006556:	22b2      	movs	r2, #178	@ 0xb2
 8006558:	0052      	lsls	r2, r2, #1
 800655a:	18ba      	adds	r2, r7, r2
 800655c:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800655e:	2348      	movs	r3, #72	@ 0x48
 8006560:	18fa      	adds	r2, r7, r3
 8006562:	193b      	adds	r3, r7, r4
 8006564:	0011      	movs	r1, r2
 8006566:	0018      	movs	r0, r3
 8006568:	f020 f8e7 	bl	802673a <strstr>
 800656c:	0003      	movs	r3, r0
 800656e:	22b0      	movs	r2, #176	@ 0xb0
 8006570:	0052      	lsls	r2, r2, #1
 8006572:	18ba      	adds	r2, r7, r2
 8006574:	6013      	str	r3, [r2, #0]
  char *ParsePoint6 = strstr(tempBuf, MAIL_API);
 8006576:	230c      	movs	r3, #12
 8006578:	18fa      	adds	r2, r7, r3
 800657a:	193b      	adds	r3, r7, r4
 800657c:	0011      	movs	r1, r2
 800657e:	0018      	movs	r0, r3
 8006580:	f020 f8db 	bl	802673a <strstr>
 8006584:	0003      	movs	r3, r0
 8006586:	22ae      	movs	r2, #174	@ 0xae
 8006588:	0052      	lsls	r2, r2, #1
 800658a:	18ba      	adds	r2, r7, r2
 800658c:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 800658e:	4b1b      	ldr	r3, [pc, #108]	@ (80065fc <ParseBuffer+0x310>)
 8006590:	21bc      	movs	r1, #188	@ 0xbc
 8006592:	0049      	lsls	r1, r1, #1
 8006594:	185b      	adds	r3, r3, r1
 8006596:	19db      	adds	r3, r3, r7
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d800      	bhi.n	80065a0 <ParseBuffer+0x2b4>
 800659e:	e0c8      	b.n	8006732 <ParseBuffer+0x446>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80065a0:	22b8      	movs	r2, #184	@ 0xb8
 80065a2:	0052      	lsls	r2, r2, #1
 80065a4:	18bb      	adds	r3, r7, r2
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d059      	beq.n	8006660 <ParseBuffer+0x374>
 80065ac:	18bb      	adds	r3, r7, r2
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2b4f      	cmp	r3, #79	@ 0x4f
 80065b4:	d154      	bne.n	8006660 <ParseBuffer+0x374>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 80065b6:	2378      	movs	r3, #120	@ 0x78
 80065b8:	33ff      	adds	r3, #255	@ 0xff
 80065ba:	18fb      	adds	r3, r7, r3
 80065bc:	2200      	movs	r2, #0
 80065be:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 80065c0:	4b24      	ldr	r3, [pc, #144]	@ (8006654 <ParseBuffer+0x368>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b12      	cmp	r3, #18
 80065c6:	d14b      	bne.n	8006660 <ParseBuffer+0x374>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 80065c8:	4b0c      	ldr	r3, [pc, #48]	@ (80065fc <ParseBuffer+0x310>)
 80065ca:	185b      	adds	r3, r3, r1
 80065cc:	19db      	adds	r3, r3, r7
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	2b2b      	cmp	r3, #43	@ 0x2b
 80065d2:	d10b      	bne.n	80065ec <ParseBuffer+0x300>
 80065d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006604 <ParseBuffer+0x318>)
 80065d6:	185b      	adds	r3, r3, r1
 80065d8:	19db      	adds	r3, r3, r7
 80065da:	2221      	movs	r2, #33	@ 0x21
 80065dc:	5c9b      	ldrb	r3, [r3, r2]
 80065de:	2b32      	cmp	r3, #50	@ 0x32
 80065e0:	d104      	bne.n	80065ec <ParseBuffer+0x300>
          ParseTime(tempBuf);
 80065e2:	193b      	adds	r3, r7, r4
 80065e4:	0018      	movs	r0, r3
 80065e6:	f003 fd25 	bl	800a034 <ParseTime>
 80065ea:	e039      	b.n	8006660 <ParseBuffer+0x374>
        }
        else {
          Error("Error getting time");
 80065ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006658 <ParseBuffer+0x36c>)
 80065ee:	4b1b      	ldr	r3, [pc, #108]	@ (800665c <ParseBuffer+0x370>)
 80065f0:	0019      	movs	r1, r3
 80065f2:	2001      	movs	r0, #1
 80065f4:	f00d fd2e 	bl	8014054 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80065f8:	2306      	movs	r3, #6
 80065fa:	e09e      	b.n	800673a <ParseBuffer+0x44e>
 80065fc:	fffffe8a 	.word	0xfffffe8a
 8006600:	fffffe89 	.word	0xfffffe89
 8006604:	fffffee4 	.word	0xfffffee4
 8006608:	200027ac 	.word	0x200027ac
 800660c:	0802b1c8 	.word	0x0802b1c8
 8006610:	0802b1d0 	.word	0x0802b1d0
 8006614:	fffffee0 	.word	0xfffffee0
 8006618:	0802b1fc 	.word	0x0802b1fc
 800661c:	fffffed8 	.word	0xfffffed8
 8006620:	0802b200 	.word	0x0802b200
 8006624:	fffffed0 	.word	0xfffffed0
 8006628:	4c494146 	.word	0x4c494146
 800662c:	fffffec8 	.word	0xfffffec8
 8006630:	0802b208 	.word	0x0802b208
 8006634:	fffffec4 	.word	0xfffffec4
 8006638:	fffffeb4 	.word	0xfffffeb4
 800663c:	0802b210 	.word	0x0802b210
 8006640:	fffffea4 	.word	0xfffffea4
 8006644:	0802b220 	.word	0x0802b220
 8006648:	fffffe94 	.word	0xfffffe94
 800664c:	0802b230 	.word	0x0802b230
 8006650:	200006b0 	.word	0x200006b0
 8006654:	20000711 	.word	0x20000711
 8006658:	0802b1e8 	.word	0x0802b1e8
 800665c:	0802ab70 	.word	0x0802ab70
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8006660:	22b8      	movs	r2, #184	@ 0xb8
 8006662:	0052      	lsls	r2, r2, #1
 8006664:	18bb      	adds	r3, r7, r2
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d009      	beq.n	8006680 <ParseBuffer+0x394>
 800666c:	18bb      	adds	r3, r7, r2
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b72      	cmp	r3, #114	@ 0x72
 8006674:	d104      	bne.n	8006680 <ParseBuffer+0x394>
      status = RECEIVE_STATUS_READY;
 8006676:	2378      	movs	r3, #120	@ 0x78
 8006678:	33ff      	adds	r3, #255	@ 0xff
 800667a:	18fb      	adds	r3, r7, r3
 800667c:	2202      	movs	r2, #2
 800667e:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8006680:	22b8      	movs	r2, #184	@ 0xb8
 8006682:	0052      	lsls	r2, r2, #1
 8006684:	18bb      	adds	r3, r7, r2
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d009      	beq.n	80066a0 <ParseBuffer+0x3b4>
 800668c:	18bb      	adds	r3, r7, r2
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	2b3e      	cmp	r3, #62	@ 0x3e
 8006694:	d104      	bne.n	80066a0 <ParseBuffer+0x3b4>
      status = RECEIVE_STATUS_START;
 8006696:	2378      	movs	r3, #120	@ 0x78
 8006698:	33ff      	adds	r3, #255	@ 0xff
 800669a:	18fb      	adds	r3, r7, r3
 800669c:	2205      	movs	r2, #5
 800669e:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80066a0:	22b8      	movs	r2, #184	@ 0xb8
 80066a2:	0052      	lsls	r2, r2, #1
 80066a4:	18bb      	adds	r3, r7, r2
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d009      	beq.n	80066c0 <ParseBuffer+0x3d4>
 80066ac:	18bb      	adds	r3, r7, r2
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b2b      	cmp	r3, #43	@ 0x2b
 80066b4:	d104      	bne.n	80066c0 <ParseBuffer+0x3d4>
      status = RECEIVE_STATUS_TIME;
 80066b6:	2378      	movs	r3, #120	@ 0x78
 80066b8:	33ff      	adds	r3, #255	@ 0xff
 80066ba:	18fb      	adds	r3, r7, r3
 80066bc:	220b      	movs	r2, #11
 80066be:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 80066c0:	22b6      	movs	r2, #182	@ 0xb6
 80066c2:	0052      	lsls	r2, r2, #1
 80066c4:	18bb      	adds	r3, r7, r2
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d004      	beq.n	80066d6 <ParseBuffer+0x3ea>
 80066cc:	18bb      	adds	r3, r7, r2
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b45      	cmp	r3, #69	@ 0x45
 80066d4:	d00a      	beq.n	80066ec <ParseBuffer+0x400>
 80066d6:	22b0      	movs	r2, #176	@ 0xb0
 80066d8:	0052      	lsls	r2, r2, #1
 80066da:	18bb      	adds	r3, r7, r2
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d009      	beq.n	80066f6 <ParseBuffer+0x40a>
 80066e2:	18bb      	adds	r3, r7, r2
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b46      	cmp	r3, #70	@ 0x46
 80066ea:	d104      	bne.n	80066f6 <ParseBuffer+0x40a>
      status = RECEIVE_STATUS_ERROR;
 80066ec:	2378      	movs	r3, #120	@ 0x78
 80066ee:	33ff      	adds	r3, #255	@ 0xff
 80066f0:	18fb      	adds	r3, r7, r3
 80066f2:	2201      	movs	r2, #1
 80066f4:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80066f6:	22b4      	movs	r2, #180	@ 0xb4
 80066f8:	0052      	lsls	r2, r2, #1
 80066fa:	18bb      	adds	r3, r7, r2
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d007      	beq.n	8006712 <ParseBuffer+0x426>
 8006702:	18bb      	adds	r3, r7, r2
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b57      	cmp	r3, #87	@ 0x57
 800670a:	d102      	bne.n	8006712 <ParseBuffer+0x426>
      ConnectionMade = true;
 800670c:	4b0d      	ldr	r3, [pc, #52]	@ (8006744 <ParseBuffer+0x458>)
 800670e:	2201      	movs	r2, #1
 8006710:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
    }
#ifdef USE_MAIL
    if(ParsePoint6 != 0 && *ParsePoint6 == '{'){
 8006712:	22ae      	movs	r2, #174	@ 0xae
 8006714:	0052      	lsls	r2, r2, #1
 8006716:	18bb      	adds	r3, r7, r2
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d009      	beq.n	8006732 <ParseBuffer+0x446>
 800671e:	18bb      	adds	r3, r7, r2
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	2b7b      	cmp	r3, #123	@ 0x7b
 8006726:	d104      	bne.n	8006732 <ParseBuffer+0x446>
      status = RECEIVE_STATUS_MAIL_API;
 8006728:	2378      	movs	r3, #120	@ 0x78
 800672a:	33ff      	adds	r3, #255	@ 0xff
 800672c:	18fb      	adds	r3, r7, r3
 800672e:	220c      	movs	r2, #12
 8006730:	701a      	strb	r2, [r3, #0]
    }
#endif
  }
  return(status);
 8006732:	2378      	movs	r3, #120	@ 0x78
 8006734:	33ff      	adds	r3, #255	@ 0xff
 8006736:	18fb      	adds	r3, r7, r3
 8006738:	781b      	ldrb	r3, [r3, #0]

}
 800673a:	0018      	movs	r0, r3
 800673c:	46bd      	mov	sp, r7
 800673e:	b05f      	add	sp, #380	@ 0x17c
 8006740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006742:	46c0      	nop			@ (mov r8, r8)
 8006744:	200005b0 	.word	0x200005b0

08006748 <PollAwake>:

 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800674e:	4b0b      	ldr	r3, [pc, #44]	@ (800677c <PollAwake+0x34>)
 8006750:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	0018      	movs	r0, r3
 8006756:	f7f9 fd09 	bl	800016c <strlen>
 800675a:	0003      	movs	r3, r0
 800675c:	b29a      	uxth	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	0011      	movs	r1, r2
 8006762:	0018      	movs	r0, r3
 8006764:	f7fe fbbc 	bl	8004ee0 <ESP_Send>
 8006768:	1e03      	subs	r3, r0, #0
 800676a:	d001      	beq.n	8006770 <PollAwake+0x28>
    return true;
 800676c:	2301      	movs	r3, #1
 800676e:	e000      	b.n	8006772 <PollAwake+0x2a>
  }
  else{
    return false;
 8006770:	2300      	movs	r3, #0
  }
}
 8006772:	0018      	movs	r0, r3
 8006774:	46bd      	mov	sp, r7
 8006776:	b002      	add	sp, #8
 8006778:	bd80      	pop	{r7, pc}
 800677a:	46c0      	nop			@ (mov r8, r8)
 800677c:	0802b240 	.word	0x0802b240

08006780 <RFPower>:

bool RFPower(){
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8006786:	4b0b      	ldr	r3, [pc, #44]	@ (80067b4 <RFPower+0x34>)
 8006788:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	0018      	movs	r0, r3
 800678e:	f7f9 fced 	bl	800016c <strlen>
 8006792:	0003      	movs	r3, r0
 8006794:	b29a      	uxth	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	0011      	movs	r1, r2
 800679a:	0018      	movs	r0, r3
 800679c:	f7fe fba0 	bl	8004ee0 <ESP_Send>
 80067a0:	1e03      	subs	r3, r0, #0
 80067a2:	d001      	beq.n	80067a8 <RFPower+0x28>
    return true;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e000      	b.n	80067aa <RFPower+0x2a>
  }
  else{
    return false;
 80067a8:	2300      	movs	r3, #0
  }
}
 80067aa:	0018      	movs	r0, r3
 80067ac:	46bd      	mov	sp, r7
 80067ae:	b002      	add	sp, #8
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	46c0      	nop			@ (mov r8, r8)
 80067b4:	0802b248 	.word	0x0802b248

080067b8 <CheckRFPower>:

bool CheckRFPower(){
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 80067be:	4b0b      	ldr	r3, [pc, #44]	@ (80067ec <CheckRFPower+0x34>)
 80067c0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	0018      	movs	r0, r3
 80067c6:	f7f9 fcd1 	bl	800016c <strlen>
 80067ca:	0003      	movs	r3, r0
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	0011      	movs	r1, r2
 80067d2:	0018      	movs	r0, r3
 80067d4:	f7fe fb84 	bl	8004ee0 <ESP_Send>
 80067d8:	1e03      	subs	r3, r0, #0
 80067da:	d001      	beq.n	80067e0 <CheckRFPower+0x28>
    return true;
 80067dc:	2301      	movs	r3, #1
 80067de:	e000      	b.n	80067e2 <CheckRFPower+0x2a>
  }
  else{
    return false;
 80067e0:	2300      	movs	r3, #0
  }
}
 80067e2:	0018      	movs	r0, r3
 80067e4:	46bd      	mov	sp, r7
 80067e6:	b002      	add	sp, #8
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	46c0      	nop			@ (mov r8, r8)
 80067ec:	0802b258 	.word	0x0802b258

080067f0 <ATRestore>:

//Only necesarry on first init
bool ATRestore(){
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80067f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006824 <ATRestore+0x34>)
 80067f8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	0018      	movs	r0, r3
 80067fe:	f7f9 fcb5 	bl	800016c <strlen>
 8006802:	0003      	movs	r3, r0
 8006804:	b29a      	uxth	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	0011      	movs	r1, r2
 800680a:	0018      	movs	r0, r3
 800680c:	f7fe fb68 	bl	8004ee0 <ESP_Send>
 8006810:	1e03      	subs	r3, r0, #0
 8006812:	d001      	beq.n	8006818 <ATRestore+0x28>
    return true;
 8006814:	2301      	movs	r3, #1
 8006816:	e000      	b.n	800681a <ATRestore+0x2a>
  }
  else{
    return false;
 8006818:	2300      	movs	r3, #0
  }
}
 800681a:	0018      	movs	r0, r3
 800681c:	46bd      	mov	sp, r7
 800681e:	b002      	add	sp, #8
 8006820:	bd80      	pop	{r7, pc}
 8006822:	46c0      	nop			@ (mov r8, r8)
 8006824:	0802b268 	.word	0x0802b268

08006828 <CWINIT>:

bool CWINIT(){
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800682e:	4b0b      	ldr	r3, [pc, #44]	@ (800685c <CWINIT+0x34>)
 8006830:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	0018      	movs	r0, r3
 8006836:	f7f9 fc99 	bl	800016c <strlen>
 800683a:	0003      	movs	r3, r0
 800683c:	b29a      	uxth	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	0011      	movs	r1, r2
 8006842:	0018      	movs	r0, r3
 8006844:	f7fe fb4c 	bl	8004ee0 <ESP_Send>
 8006848:	1e03      	subs	r3, r0, #0
 800684a:	d001      	beq.n	8006850 <CWINIT+0x28>
    return true;
 800684c:	2301      	movs	r3, #1
 800684e:	e000      	b.n	8006852 <CWINIT+0x2a>
  }
  else{
    return false;
 8006850:	2300      	movs	r3, #0
  }
}
 8006852:	0018      	movs	r0, r3
 8006854:	46bd      	mov	sp, r7
 8006856:	b002      	add	sp, #8
 8006858:	bd80      	pop	{r7, pc}
 800685a:	46c0      	nop			@ (mov r8, r8)
 800685c:	0802b278 	.word	0x0802b278

08006860 <CWMODE1>:

bool CWMODE1(){
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8006866:	4b0b      	ldr	r3, [pc, #44]	@ (8006894 <CWMODE1+0x34>)
 8006868:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	0018      	movs	r0, r3
 800686e:	f7f9 fc7d 	bl	800016c <strlen>
 8006872:	0003      	movs	r3, r0
 8006874:	b29a      	uxth	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	0011      	movs	r1, r2
 800687a:	0018      	movs	r0, r3
 800687c:	f7fe fb30 	bl	8004ee0 <ESP_Send>
 8006880:	1e03      	subs	r3, r0, #0
 8006882:	d001      	beq.n	8006888 <CWMODE1+0x28>
    return true;
 8006884:	2301      	movs	r3, #1
 8006886:	e000      	b.n	800688a <CWMODE1+0x2a>
  }
  else{
    return false;
 8006888:	2300      	movs	r3, #0
  }
}
 800688a:	0018      	movs	r0, r3
 800688c:	46bd      	mov	sp, r7
 800688e:	b002      	add	sp, #8
 8006890:	bd80      	pop	{r7, pc}
 8006892:	46c0      	nop			@ (mov r8, r8)
 8006894:	0802b288 	.word	0x0802b288

08006898 <CWMODE2>:

bool CWMODE2(){
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 800689e:	4b0b      	ldr	r3, [pc, #44]	@ (80068cc <CWMODE2+0x34>)
 80068a0:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	0018      	movs	r0, r3
 80068a6:	f7f9 fc61 	bl	800016c <strlen>
 80068aa:	0003      	movs	r3, r0
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	0011      	movs	r1, r2
 80068b2:	0018      	movs	r0, r3
 80068b4:	f7fe fb14 	bl	8004ee0 <ESP_Send>
 80068b8:	1e03      	subs	r3, r0, #0
 80068ba:	d001      	beq.n	80068c0 <CWMODE2+0x28>
    return true;
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <CWMODE2+0x2a>
  }
  else{
    return false;
 80068c0:	2300      	movs	r3, #0
  }
}
 80068c2:	0018      	movs	r0, r3
 80068c4:	46bd      	mov	sp, r7
 80068c6:	b002      	add	sp, #8
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	46c0      	nop			@ (mov r8, r8)
 80068cc:	0802b298 	.word	0x0802b298

080068d0 <CWAUTOCONN>:

bool CWAUTOCONN(){
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 80068d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006904 <CWAUTOCONN+0x34>)
 80068d8:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	0018      	movs	r0, r3
 80068de:	f7f9 fc45 	bl	800016c <strlen>
 80068e2:	0003      	movs	r3, r0
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	0011      	movs	r1, r2
 80068ea:	0018      	movs	r0, r3
 80068ec:	f7fe faf8 	bl	8004ee0 <ESP_Send>
 80068f0:	1e03      	subs	r3, r0, #0
 80068f2:	d001      	beq.n	80068f8 <CWAUTOCONN+0x28>
    return true;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e000      	b.n	80068fa <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80068f8:	2300      	movs	r3, #0
  }
}
 80068fa:	0018      	movs	r0, r3
 80068fc:	46bd      	mov	sp, r7
 80068fe:	b002      	add	sp, #8
 8006900:	bd80      	pop	{r7, pc}
 8006902:	46c0      	nop			@ (mov r8, r8)
 8006904:	0802b2a8 	.word	0x0802b2a8

08006908 <CWJAP>:
  }
}
*/

bool CWJAP()
{
 8006908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800690a:	46c6      	mov	lr, r8
 800690c:	b500      	push	{lr}
 800690e:	b08a      	sub	sp, #40	@ 0x28
 8006910:	af00      	add	r7, sp, #0
 8006912:	466b      	mov	r3, sp
 8006914:	4698      	mov	r8, r3
  APtested = true;
 8006916:	4b36      	ldr	r3, [pc, #216]	@ (80069f0 <CWJAP+0xe8>)
 8006918:	2201      	movs	r2, #1
 800691a:	701a      	strb	r2, [r3, #0]
  getWifiCred();
 800691c:	f7fe f834 	bl	8004988 <getWifiCred>
  static char atCommandBuff[112];
  memset(atCommandBuff, '\0', 112);
 8006920:	4b34      	ldr	r3, [pc, #208]	@ (80069f4 <CWJAP+0xec>)
 8006922:	2270      	movs	r2, #112	@ 0x70
 8006924:	2100      	movs	r1, #0
 8006926:	0018      	movs	r0, r3
 8006928:	f01f fecc 	bl	80266c4 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", Credentials.SSID, Credentials.Password);
 800692c:	4b32      	ldr	r3, [pc, #200]	@ (80069f8 <CWJAP+0xf0>)
 800692e:	4a33      	ldr	r2, [pc, #204]	@ (80069fc <CWJAP+0xf4>)
 8006930:	4933      	ldr	r1, [pc, #204]	@ (8006a00 <CWJAP+0xf8>)
 8006932:	4830      	ldr	r0, [pc, #192]	@ (80069f4 <CWJAP+0xec>)
 8006934:	f01f fd5c 	bl	80263f0 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8006938:	4b2e      	ldr	r3, [pc, #184]	@ (80069f4 <CWJAP+0xec>)
 800693a:	0018      	movs	r0, r3
 800693c:	f7f9 fc16 	bl	800016c <strlen>
 8006940:	0002      	movs	r2, r0
 8006942:	210f      	movs	r1, #15
 8006944:	2018      	movs	r0, #24
 8006946:	180b      	adds	r3, r1, r0
 8006948:	19db      	adds	r3, r3, r7
 800694a:	701a      	strb	r2, [r3, #0]
  char atCommand[len + 1];
 800694c:	180b      	adds	r3, r1, r0
 800694e:	19db      	adds	r3, r3, r7
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	3301      	adds	r3, #1
 8006954:	1e5a      	subs	r2, r3, #1
 8006956:	623a      	str	r2, [r7, #32]
 8006958:	001a      	movs	r2, r3
 800695a:	60ba      	str	r2, [r7, #8]
 800695c:	2200      	movs	r2, #0
 800695e:	60fa      	str	r2, [r7, #12]
 8006960:	68b8      	ldr	r0, [r7, #8]
 8006962:	68f9      	ldr	r1, [r7, #12]
 8006964:	0002      	movs	r2, r0
 8006966:	0f52      	lsrs	r2, r2, #29
 8006968:	000e      	movs	r6, r1
 800696a:	00f6      	lsls	r6, r6, #3
 800696c:	617e      	str	r6, [r7, #20]
 800696e:	697e      	ldr	r6, [r7, #20]
 8006970:	4316      	orrs	r6, r2
 8006972:	617e      	str	r6, [r7, #20]
 8006974:	0002      	movs	r2, r0
 8006976:	00d2      	lsls	r2, r2, #3
 8006978:	613a      	str	r2, [r7, #16]
 800697a:	001a      	movs	r2, r3
 800697c:	603a      	str	r2, [r7, #0]
 800697e:	2200      	movs	r2, #0
 8006980:	607a      	str	r2, [r7, #4]
 8006982:	6838      	ldr	r0, [r7, #0]
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	0002      	movs	r2, r0
 8006988:	0f52      	lsrs	r2, r2, #29
 800698a:	000e      	movs	r6, r1
 800698c:	00f5      	lsls	r5, r6, #3
 800698e:	4315      	orrs	r5, r2
 8006990:	0002      	movs	r2, r0
 8006992:	00d4      	lsls	r4, r2, #3
 8006994:	3307      	adds	r3, #7
 8006996:	08db      	lsrs	r3, r3, #3
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	466a      	mov	r2, sp
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	469d      	mov	sp, r3
 80069a0:	466b      	mov	r3, sp
 80069a2:	3300      	adds	r3, #0
 80069a4:	61fb      	str	r3, [r7, #28]
  memset(atCommand, '\0', len + 1);
 80069a6:	240f      	movs	r4, #15
 80069a8:	2518      	movs	r5, #24
 80069aa:	1963      	adds	r3, r4, r5
 80069ac:	19db      	adds	r3, r3, r7
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	3301      	adds	r3, #1
 80069b2:	001a      	movs	r2, r3
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	2100      	movs	r1, #0
 80069b8:	0018      	movs	r0, r3
 80069ba:	f01f fe83 	bl	80266c4 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80069be:	1963      	adds	r3, r4, r5
 80069c0:	19db      	adds	r3, r3, r7
 80069c2:	781a      	ldrb	r2, [r3, #0]
 80069c4:	490b      	ldr	r1, [pc, #44]	@ (80069f4 <CWJAP+0xec>)
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	0018      	movs	r0, r3
 80069ca:	f01f fea2 	bl	8026712 <strncpy>
  return ESP_Send((uint8_t*)atCommand, len);
 80069ce:	1963      	adds	r3, r4, r5
 80069d0:	19db      	adds	r3, r3, r7
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	0011      	movs	r1, r2
 80069da:	0018      	movs	r0, r3
 80069dc:	f7fe fa80 	bl	8004ee0 <ESP_Send>
 80069e0:	0003      	movs	r3, r0
 80069e2:	46c5      	mov	sp, r8
}
 80069e4:	0018      	movs	r0, r3
 80069e6:	46bd      	mov	sp, r7
 80069e8:	b00a      	add	sp, #40	@ 0x28
 80069ea:	bc80      	pop	{r7}
 80069ec:	46b8      	mov	r8, r7
 80069ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069f0:	200005b1 	.word	0x200005b1
 80069f4:	2000087c 	.word	0x2000087c
 80069f8:	200006d0 	.word	0x200006d0
 80069fc:	200006b0 	.word	0x200006b0
 8006a00:	0802b2bc 	.word	0x0802b2bc

08006a04 <CWMODE3>:


bool CWMODE3(){
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a38 <CWMODE3+0x34>)
 8006a0c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	0018      	movs	r0, r3
 8006a12:	f7f9 fbab 	bl	800016c <strlen>
 8006a16:	0003      	movs	r3, r0
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	0011      	movs	r1, r2
 8006a1e:	0018      	movs	r0, r3
 8006a20:	f7fe fa5e 	bl	8004ee0 <ESP_Send>
 8006a24:	1e03      	subs	r3, r0, #0
 8006a26:	d001      	beq.n	8006a2c <CWMODE3+0x28>
    return true;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e000      	b.n	8006a2e <CWMODE3+0x2a>
  }
  else{
    return false;
 8006a2c:	2300      	movs	r3, #0
  }
}
 8006a2e:	0018      	movs	r0, r3
 8006a30:	46bd      	mov	sp, r7
 8006a32:	b002      	add	sp, #8
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	46c0      	nop			@ (mov r8, r8)
 8006a38:	0802b2d4 	.word	0x0802b2d4

08006a3c <CWSTATE>:

bool CWSTATE(){
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8006a42:	4b0b      	ldr	r3, [pc, #44]	@ (8006a70 <CWSTATE+0x34>)
 8006a44:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	0018      	movs	r0, r3
 8006a4a:	f7f9 fb8f 	bl	800016c <strlen>
 8006a4e:	0003      	movs	r3, r0
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	0011      	movs	r1, r2
 8006a56:	0018      	movs	r0, r3
 8006a58:	f7fe fa42 	bl	8004ee0 <ESP_Send>
 8006a5c:	1e03      	subs	r3, r0, #0
 8006a5e:	d001      	beq.n	8006a64 <CWSTATE+0x28>
    return true;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e000      	b.n	8006a66 <CWSTATE+0x2a>
  }
  else{
    return false;
 8006a64:	2300      	movs	r3, #0
  }
}
 8006a66:	0018      	movs	r0, r3
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	b002      	add	sp, #8
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	46c0      	nop			@ (mov r8, r8)
 8006a70:	0802b2e4 	.word	0x0802b2e4

08006a74 <CWSAP>:

bool CWSAP(){
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <CWSAP+0x34>)
 8006a7c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	0018      	movs	r0, r3
 8006a82:	f7f9 fb73 	bl	800016c <strlen>
 8006a86:	0003      	movs	r3, r0
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	0011      	movs	r1, r2
 8006a8e:	0018      	movs	r0, r3
 8006a90:	f7fe fa26 	bl	8004ee0 <ESP_Send>
 8006a94:	1e03      	subs	r3, r0, #0
 8006a96:	d001      	beq.n	8006a9c <CWSAP+0x28>
    return true;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e000      	b.n	8006a9e <CWSAP+0x2a>
  }
  else{
    return false;
 8006a9c:	2300      	movs	r3, #0
  }
}
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	b002      	add	sp, #8
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	46c0      	nop			@ (mov r8, r8)
 8006aa8:	0802b2f4 	.word	0x0802b2f4

08006aac <CIPMUX>:

bool CIPMUX(){
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8006ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae0 <CIPMUX+0x34>)
 8006ab4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f7f9 fb57 	bl	800016c <strlen>
 8006abe:	0003      	movs	r3, r0
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	0011      	movs	r1, r2
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f7fe fa0a 	bl	8004ee0 <ESP_Send>
 8006acc:	1e03      	subs	r3, r0, #0
 8006ace:	d001      	beq.n	8006ad4 <CIPMUX+0x28>
    return true;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e000      	b.n	8006ad6 <CIPMUX+0x2a>
  }
  else{
    return false;
 8006ad4:	2300      	movs	r3, #0
  }
}
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	b002      	add	sp, #8
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	46c0      	nop			@ (mov r8, r8)
 8006ae0:	0802b318 	.word	0x0802b318

08006ae4 <WEBSERVER>:

//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8006aea:	4b0b      	ldr	r3, [pc, #44]	@ (8006b18 <WEBSERVER+0x34>)
 8006aec:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	0018      	movs	r0, r3
 8006af2:	f7f9 fb3b 	bl	800016c <strlen>
 8006af6:	0003      	movs	r3, r0
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	0011      	movs	r1, r2
 8006afe:	0018      	movs	r0, r3
 8006b00:	f7fe f9ee 	bl	8004ee0 <ESP_Send>
 8006b04:	1e03      	subs	r3, r0, #0
 8006b06:	d001      	beq.n	8006b0c <WEBSERVER+0x28>
    return true;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e000      	b.n	8006b0e <WEBSERVER+0x2a>
  }
  else{
    return false;
 8006b0c:	2300      	movs	r3, #0
  }
}
 8006b0e:	0018      	movs	r0, r3
 8006b10:	46bd      	mov	sp, r7
 8006b12:	b002      	add	sp, #8
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	46c0      	nop			@ (mov r8, r8)
 8006b18:	0802b328 	.word	0x0802b328

08006b1c <HTTPCPOST>:

//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8006b1c:	b5b0      	push	{r4, r5, r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006b22:	1cfb      	adds	r3, r7, #3
 8006b24:	2200      	movs	r2, #0
 8006b26:	701a      	strb	r2, [r3, #0]

  uint16_t length = CreateMessage(&txresult, false);
 8006b28:	1dbc      	adds	r4, r7, #6
 8006b2a:	1cfb      	adds	r3, r7, #3
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	0018      	movs	r0, r3
 8006b30:	f7fe fca8 	bl	8005484 <CreateMessage>
 8006b34:	0003      	movs	r3, r0
 8006b36:	8023      	strh	r3, [r4, #0]
  static uint8_t boxConfig[IdSize];
  static char Buffer[25];
  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8006b38:	4b1d      	ldr	r3, [pc, #116]	@ (8006bb0 <HTTPCPOST+0x94>)
 8006b3a:	481e      	ldr	r0, [pc, #120]	@ (8006bb4 <HTTPCPOST+0x98>)
 8006b3c:	220c      	movs	r2, #12
 8006b3e:	0019      	movs	r1, r3
 8006b40:	f005 fc2c 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8006b44:	4a1a      	ldr	r2, [pc, #104]	@ (8006bb0 <HTTPCPOST+0x94>)
 8006b46:	4b1c      	ldr	r3, [pc, #112]	@ (8006bb8 <HTTPCPOST+0x9c>)
 8006b48:	0011      	movs	r1, r2
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	f7fe fbd2 	bl	80052f4 <uint8ArrayToString>
  sprintf(message, "AT+HTTPCPOST=%s%s/data\",%d,1,%s\r\n", API, Buffer, length, header1);
 8006b50:	1dbb      	adds	r3, r7, #6
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	4d18      	ldr	r5, [pc, #96]	@ (8006bb8 <HTTPCPOST+0x9c>)
 8006b56:	4c19      	ldr	r4, [pc, #100]	@ (8006bbc <HTTPCPOST+0xa0>)
 8006b58:	4919      	ldr	r1, [pc, #100]	@ (8006bc0 <HTTPCPOST+0xa4>)
 8006b5a:	481a      	ldr	r0, [pc, #104]	@ (8006bc4 <HTTPCPOST+0xa8>)
 8006b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8006bc8 <HTTPCPOST+0xac>)
 8006b5e:	9201      	str	r2, [sp, #4]
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	002b      	movs	r3, r5
 8006b64:	0022      	movs	r2, r4
 8006b66:	f01f fc43 	bl	80263f0 <siprintf>
  uint16_t len = strlen(message);
 8006b6a:	4b16      	ldr	r3, [pc, #88]	@ (8006bc4 <HTTPCPOST+0xa8>)
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f7f9 fafd 	bl	800016c <strlen>
 8006b72:	0002      	movs	r2, r0
 8006b74:	1d3b      	adds	r3, r7, #4
 8006b76:	801a      	strh	r2, [r3, #0]
  Debug("length of message (former atCommandBuff) during header tx: %d, bool value of tx result %d", len, txresult);
 8006b78:	1d3b      	adds	r3, r7, #4
 8006b7a:	8818      	ldrh	r0, [r3, #0]
 8006b7c:	1cfb      	adds	r3, r7, #3
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	4a12      	ldr	r2, [pc, #72]	@ (8006bcc <HTTPCPOST+0xb0>)
 8006b82:	4913      	ldr	r1, [pc, #76]	@ (8006bd0 <HTTPCPOST+0xb4>)
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	0003      	movs	r3, r0
 8006b88:	2003      	movs	r0, #3
 8006b8a:	f00d fa63 	bl	8014054 <CreateLine>
  if(ESP_Send((uint8_t*)message, len)){
 8006b8e:	1d3b      	adds	r3, r7, #4
 8006b90:	881a      	ldrh	r2, [r3, #0]
 8006b92:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc4 <HTTPCPOST+0xa8>)
 8006b94:	0011      	movs	r1, r2
 8006b96:	0018      	movs	r0, r3
 8006b98:	f7fe f9a2 	bl	8004ee0 <ESP_Send>
 8006b9c:	1e03      	subs	r3, r0, #0
 8006b9e:	d001      	beq.n	8006ba4 <HTTPCPOST+0x88>
    return true;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e000      	b.n	8006ba6 <HTTPCPOST+0x8a>
  }
  else{
    return false;
 8006ba4:	2300      	movs	r3, #0
  }
}
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	b002      	add	sp, #8
 8006bac:	bdb0      	pop	{r4, r5, r7, pc}
 8006bae:	46c0      	nop			@ (mov r8, r8)
 8006bb0:	200008ec 	.word	0x200008ec
 8006bb4:	08080000 	.word	0x08080000
 8006bb8:	200008f8 	.word	0x200008f8
 8006bbc:	0802e5a0 	.word	0x0802e5a0
 8006bc0:	0802b340 	.word	0x0802b340
 8006bc4:	200005d4 	.word	0x200005d4
 8006bc8:	0802e5c8 	.word	0x0802e5c8
 8006bcc:	0802b364 	.word	0x0802b364
 8006bd0:	0802abd4 	.word	0x0802abd4

08006bd4 <SENDMAIL>:

#ifdef USE_MAIL
bool SENDMAIL() {
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af02      	add	r7, sp, #8
  bool result = false;
 8006bda:	1dfb      	adds	r3, r7, #7
 8006bdc:	2200      	movs	r2, #0
 8006bde:	701a      	strb	r2, [r3, #0]
  txLength = CreateMailMessage(&result, true);
 8006be0:	1dfb      	adds	r3, r7, #7
 8006be2:	2101      	movs	r1, #1
 8006be4:	0018      	movs	r0, r3
 8006be6:	f7fe fba9 	bl	800533c <CreateMailMessage>
 8006bea:	0003      	movs	r3, r0
 8006bec:	001a      	movs	r2, r3
 8006bee:	4b0a      	ldr	r3, [pc, #40]	@ (8006c18 <SENDMAIL+0x44>)
 8006bf0:	801a      	strh	r2, [r3, #0]
  Debug("SENDMAIL ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8006bf2:	1dfb      	adds	r3, r7, #7
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	4b07      	ldr	r3, [pc, #28]	@ (8006c18 <SENDMAIL+0x44>)
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	4a07      	ldr	r2, [pc, #28]	@ (8006c1c <SENDMAIL+0x48>)
 8006bfe:	4908      	ldr	r1, [pc, #32]	@ (8006c20 <SENDMAIL+0x4c>)
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	0003      	movs	r3, r0
 8006c04:	2003      	movs	r0, #3
 8006c06:	f00d fa25 	bl	8014054 <CreateLine>
  return result;
 8006c0a:	1dfb      	adds	r3, r7, #7
 8006c0c:	781b      	ldrb	r3, [r3, #0]
}
 8006c0e:	0018      	movs	r0, r3
 8006c10:	46bd      	mov	sp, r7
 8006c12:	b002      	add	sp, #8
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	46c0      	nop			@ (mov r8, r8)
 8006c18:	200005c8 	.word	0x200005c8
 8006c1c:	0802b3c0 	.word	0x0802b3c0
 8006c20:	0802abd4 	.word	0x0802abd4

08006c24 <HTTPCPOST_MAILAPI>:

bool HTTPCPOST_MAILAPI() {
 8006c24:	b5b0      	push	{r4, r5, r7, lr}
 8006c26:	b090      	sub	sp, #64	@ 0x40
 8006c28:	af02      	add	r7, sp, #8
  bool txresult = false;
 8006c2a:	2133      	movs	r1, #51	@ 0x33
 8006c2c:	187b      	adds	r3, r7, r1
 8006c2e:	2200      	movs	r2, #0
 8006c30:	701a      	strb	r2, [r3, #0]
  uint16_t maillength = CreateMailMessage(&txresult, false);
 8006c32:	2536      	movs	r5, #54	@ 0x36
 8006c34:	197c      	adds	r4, r7, r5
 8006c36:	187b      	adds	r3, r7, r1
 8006c38:	2100      	movs	r1, #0
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f7fe fb7e 	bl	800533c <CreateMailMessage>
 8006c40:	0003      	movs	r3, r0
 8006c42:	8023      	strh	r3, [r4, #0]
  uint8_t MailAPIKeyConfig[MailAPIKeyMaxLength];
  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 8006c44:	003b      	movs	r3, r7
 8006c46:	4814      	ldr	r0, [pc, #80]	@ (8006c98 <HTTPCPOST_MAILAPI+0x74>)
 8006c48:	2230      	movs	r2, #48	@ 0x30
 8006c4a:	0019      	movs	r1, r3
 8006c4c:	f005 fba6 	bl	800c39c <ReadUint8ArrayEEprom>
  sprintf(message, "AT+HTTPCPOST=%s,%d,3,%s,\"accept: application/json\",\"X-Smtp2go-Api-Key: %s\"\r\n", APIMail, maillength, header1, (char*)MailAPIKeyConfig);
 8006c50:	197b      	adds	r3, r7, r5
 8006c52:	881c      	ldrh	r4, [r3, #0]
 8006c54:	4a11      	ldr	r2, [pc, #68]	@ (8006c9c <HTTPCPOST_MAILAPI+0x78>)
 8006c56:	4912      	ldr	r1, [pc, #72]	@ (8006ca0 <HTTPCPOST_MAILAPI+0x7c>)
 8006c58:	4812      	ldr	r0, [pc, #72]	@ (8006ca4 <HTTPCPOST_MAILAPI+0x80>)
 8006c5a:	003b      	movs	r3, r7
 8006c5c:	9301      	str	r3, [sp, #4]
 8006c5e:	4b12      	ldr	r3, [pc, #72]	@ (8006ca8 <HTTPCPOST_MAILAPI+0x84>)
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	0023      	movs	r3, r4
 8006c64:	f01f fbc4 	bl	80263f0 <siprintf>
  uint16_t len = strlen(message);
 8006c68:	4b0e      	ldr	r3, [pc, #56]	@ (8006ca4 <HTTPCPOST_MAILAPI+0x80>)
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	f7f9 fa7e 	bl	800016c <strlen>
 8006c70:	0002      	movs	r2, r0
 8006c72:	2134      	movs	r1, #52	@ 0x34
 8006c74:	187b      	adds	r3, r7, r1
 8006c76:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)){
 8006c78:	187b      	adds	r3, r7, r1
 8006c7a:	881a      	ldrh	r2, [r3, #0]
 8006c7c:	4b09      	ldr	r3, [pc, #36]	@ (8006ca4 <HTTPCPOST_MAILAPI+0x80>)
 8006c7e:	0011      	movs	r1, r2
 8006c80:	0018      	movs	r0, r3
 8006c82:	f7fe f92d 	bl	8004ee0 <ESP_Send>
 8006c86:	1e03      	subs	r3, r0, #0
 8006c88:	d001      	beq.n	8006c8e <HTTPCPOST_MAILAPI+0x6a>
    return true;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <HTTPCPOST_MAILAPI+0x6c>
  }
  return false;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	0018      	movs	r0, r3
 8006c92:	46bd      	mov	sp, r7
 8006c94:	b00e      	add	sp, #56	@ 0x38
 8006c96:	bdb0      	pop	{r4, r5, r7, pc}
 8006c98:	080802c0 	.word	0x080802c0
 8006c9c:	0802e5ec 	.word	0x0802e5ec
 8006ca0:	0802b3fc 	.word	0x0802b3fc
 8006ca4:	200005d4 	.word	0x200005d4
 8006ca8:	0802e5c8 	.word	0x0802e5c8

08006cac <SENDDATA>:
#endif

bool SENDDATA(){
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af02      	add	r7, sp, #8
  bool result = false;
 8006cb2:	1dfb      	adds	r3, r7, #7
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	701a      	strb	r2, [r3, #0]
  txLength = CreateMessage(&result, true);
 8006cb8:	1dfb      	adds	r3, r7, #7
 8006cba:	2101      	movs	r1, #1
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	f7fe fbe1 	bl	8005484 <CreateMessage>
 8006cc2:	0003      	movs	r3, r0
 8006cc4:	001a      	movs	r2, r3
 8006cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf0 <SENDDATA+0x44>)
 8006cc8:	801a      	strh	r2, [r3, #0]
  Debug("SENDDATA ESP_Send result = %d, transmitted data %d chars", result, txLength);
 8006cca:	1dfb      	adds	r3, r7, #7
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	0018      	movs	r0, r3
 8006cd0:	4b07      	ldr	r3, [pc, #28]	@ (8006cf0 <SENDDATA+0x44>)
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	4a07      	ldr	r2, [pc, #28]	@ (8006cf4 <SENDDATA+0x48>)
 8006cd6:	4908      	ldr	r1, [pc, #32]	@ (8006cf8 <SENDDATA+0x4c>)
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	0003      	movs	r3, r0
 8006cdc:	2003      	movs	r0, #3
 8006cde:	f00d f9b9 	bl	8014054 <CreateLine>
  return result;
 8006ce2:	1dfb      	adds	r3, r7, #7
 8006ce4:	781b      	ldrb	r3, [r3, #0]
}
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	b002      	add	sp, #8
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	46c0      	nop			@ (mov r8, r8)
 8006cf0:	200005c8 	.word	0x200005c8
 8006cf4:	0802b44c 	.word	0x0802b44c
 8006cf8:	0802abd4 	.word	0x0802abd4

08006cfc <SLEEP>:

bool SLEEP(){
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8006d02:	4b0b      	ldr	r3, [pc, #44]	@ (8006d30 <SLEEP+0x34>)
 8006d04:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f7f9 fa2f 	bl	800016c <strlen>
 8006d0e:	0003      	movs	r3, r0
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	0011      	movs	r1, r2
 8006d16:	0018      	movs	r0, r3
 8006d18:	f7fe f8e2 	bl	8004ee0 <ESP_Send>
 8006d1c:	1e03      	subs	r3, r0, #0
 8006d1e:	d001      	beq.n	8006d24 <SLEEP+0x28>
    return true;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e000      	b.n	8006d26 <SLEEP+0x2a>
  }
  else{
    return false;
 8006d24:	2300      	movs	r3, #0
  }
}
 8006d26:	0018      	movs	r0, r3
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	b002      	add	sp, #8
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	46c0      	nop			@ (mov r8, r8)
 8006d30:	0802b488 	.word	0x0802b488

08006d34 <CIPSNTPCFG>:

bool CIPSNTPCFG(){
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d70 <CIPSNTPCFG+0x3c>)
 8006d3c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	0018      	movs	r0, r3
 8006d42:	f7f9 fa13 	bl	800016c <strlen>
 8006d46:	0003      	movs	r3, r0
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	0011      	movs	r1, r2
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f7fe f8c6 	bl	8004ee0 <ESP_Send>
 8006d54:	1e03      	subs	r3, r0, #0
 8006d56:	d006      	beq.n	8006d66 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8006d58:	23fa      	movs	r3, #250	@ 0xfa
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f00d fefb 	bl	8014b58 <HAL_Delay>
    return true;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8006d66:	2300      	movs	r3, #0
  }
}
 8006d68:	0018      	movs	r0, r3
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	b002      	add	sp, #8
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	0802b498 	.word	0x0802b498

08006d74 <CIPSNTPTIME>:

bool CIPSNTPTIME(){
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8006d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006da8 <CIPSNTPTIME+0x34>)
 8006d7c:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	0018      	movs	r0, r3
 8006d82:	f7f9 f9f3 	bl	800016c <strlen>
 8006d86:	0003      	movs	r3, r0
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	0011      	movs	r1, r2
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f7fe f8a6 	bl	8004ee0 <ESP_Send>
 8006d94:	1e03      	subs	r3, r0, #0
 8006d96:	d001      	beq.n	8006d9c <CIPSNTPTIME+0x28>
    return true;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e000      	b.n	8006d9e <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8006d9c:	2300      	movs	r3, #0
  }
}
 8006d9e:	0018      	movs	r0, r3
 8006da0:	46bd      	mov	sp, r7
 8006da2:	b002      	add	sp, #8
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	46c0      	nop			@ (mov r8, r8)
 8006da8:	0802b4e8 	.word	0x0802b4e8

08006dac <CIPSNTPINTV>:

bool CIPSNTPINTV(){
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8006db2:	4b0b      	ldr	r3, [pc, #44]	@ (8006de0 <CIPSNTPINTV+0x34>)
 8006db4:	607b      	str	r3, [r7, #4]
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	0018      	movs	r0, r3
 8006dba:	f7f9 f9d7 	bl	800016c <strlen>
 8006dbe:	0003      	movs	r3, r0
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	0011      	movs	r1, r2
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f7fe f88a 	bl	8004ee0 <ESP_Send>
 8006dcc:	1e03      	subs	r3, r0, #0
 8006dce:	d001      	beq.n	8006dd4 <CIPSNTPINTV+0x28>
    return true;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e000      	b.n	8006dd6 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8006dd4:	2300      	movs	r3, #0
  }
}
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	b002      	add	sp, #8
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	46c0      	nop			@ (mov r8, r8)
 8006de0:	0802b4fc 	.word	0x0802b4fc

08006de4 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8006de4:	b5b0      	push	{r4, r5, r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	0002      	movs	r2, r0
 8006dec:	1dfb      	adds	r3, r7, #7
 8006dee:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8006df0:	4b6c      	ldr	r3, [pc, #432]	@ (8006fa4 <DMA_ProcessBuffer+0x1c0>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	200e      	movs	r0, #14
 8006dfa:	183b      	adds	r3, r7, r0
 8006dfc:	2180      	movs	r1, #128	@ 0x80
 8006dfe:	0049      	lsls	r1, r1, #1
 8006e00:	1a8a      	subs	r2, r1, r2
 8006e02:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8006e04:	230d      	movs	r3, #13
 8006e06:	18fb      	adds	r3, r7, r3
 8006e08:	2203      	movs	r2, #3
 8006e0a:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8006e0c:	183b      	adds	r3, r7, r0
 8006e0e:	881a      	ldrh	r2, [r3, #0]
 8006e10:	2380      	movs	r3, #128	@ 0x80
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d903      	bls.n	8006e20 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8006e18:	183b      	adds	r3, r7, r0
 8006e1a:	2280      	movs	r2, #128	@ 0x80
 8006e1c:	0052      	lsls	r2, r2, #1
 8006e1e:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8006e20:	4b61      	ldr	r3, [pc, #388]	@ (8006fa8 <DMA_ProcessBuffer+0x1c4>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	001a      	movs	r2, r3
 8006e28:	230e      	movs	r3, #14
 8006e2a:	18fb      	adds	r3, r7, r3
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d131      	bne.n	8006e96 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8006e32:	4b5e      	ldr	r3, [pc, #376]	@ (8006fac <DMA_ProcessBuffer+0x1c8>)
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b14      	cmp	r3, #20
 8006e38:	d91b      	bls.n	8006e72 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8006e3a:	4b5c      	ldr	r3, [pc, #368]	@ (8006fac <DMA_ProcessBuffer+0x1c8>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8006e40:	4b5b      	ldr	r3, [pc, #364]	@ (8006fb0 <DMA_ProcessBuffer+0x1cc>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d107      	bne.n	8006e58 <DMA_ProcessBuffer+0x74>
 8006e48:	4b5a      	ldr	r3, [pc, #360]	@ (8006fb4 <DMA_ProcessBuffer+0x1d0>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8006e50:	230d      	movs	r3, #13
 8006e52:	18fb      	adds	r3, r7, r3
 8006e54:	2207      	movs	r2, #7
 8006e56:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8006e58:	4b55      	ldr	r3, [pc, #340]	@ (8006fb0 <DMA_ProcessBuffer+0x1cc>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b08      	cmp	r3, #8
 8006e5e:	d103      	bne.n	8006e68 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8006e60:	4b55      	ldr	r3, [pc, #340]	@ (8006fb8 <DMA_ProcessBuffer+0x1d4>)
 8006e62:	220b      	movs	r2, #11
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	e016      	b.n	8006e96 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8006e68:	230d      	movs	r3, #13
 8006e6a:	18fb      	adds	r3, r7, r3
 8006e6c:	2206      	movs	r2, #6
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	e011      	b.n	8006e96 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8006e72:	4b4e      	ldr	r3, [pc, #312]	@ (8006fac <DMA_ProcessBuffer+0x1c8>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	3301      	adds	r3, #1
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	4b4c      	ldr	r3, [pc, #304]	@ (8006fac <DMA_ProcessBuffer+0x1c8>)
 8006e7c:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8006e7e:	f00d fe61 	bl	8014b44 <HAL_GetTick>
 8006e82:	0003      	movs	r3, r0
 8006e84:	33f5      	adds	r3, #245	@ 0xf5
 8006e86:	33ff      	adds	r3, #255	@ 0xff
 8006e88:	001a      	movs	r2, r3
 8006e8a:	4b4c      	ldr	r3, [pc, #304]	@ (8006fbc <DMA_ProcessBuffer+0x1d8>)
 8006e8c:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8006e8e:	230d      	movs	r3, #13
 8006e90:	18fb      	adds	r3, r7, r3
 8006e92:	2204      	movs	r2, #4
 8006e94:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8006e96:	4b44      	ldr	r3, [pc, #272]	@ (8006fa8 <DMA_ProcessBuffer+0x1c4>)
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	001a      	movs	r2, r3
 8006e9e:	210e      	movs	r1, #14
 8006ea0:	187b      	adds	r3, r7, r1
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d100      	bne.n	8006eaa <DMA_ProcessBuffer+0xc6>
 8006ea8:	e075      	b.n	8006f96 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8006eaa:	4b40      	ldr	r3, [pc, #256]	@ (8006fac <DMA_ProcessBuffer+0x1c8>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8006eb0:	4b43      	ldr	r3, [pc, #268]	@ (8006fc0 <DMA_ProcessBuffer+0x1dc>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	4b3c      	ldr	r3, [pc, #240]	@ (8006fa8 <DMA_ProcessBuffer+0x1c4>)
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d109      	bne.n	8006ed4 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8006ec0:	187b      	adds	r3, r7, r1
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8006fc0 <DMA_ProcessBuffer+0x1dc>)
 8006ec8:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8006eca:	230d      	movs	r3, #13
 8006ecc:	18fb      	adds	r3, r7, r3
 8006ece:	220a      	movs	r2, #10
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	e060      	b.n	8006f96 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8006ed4:	4b3a      	ldr	r3, [pc, #232]	@ (8006fc0 <DMA_ProcessBuffer+0x1dc>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	001a      	movs	r2, r3
 8006edc:	210e      	movs	r1, #14
 8006ede:	187b      	adds	r3, r7, r1
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d009      	beq.n	8006efa <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8006ee6:	187b      	adds	r3, r7, r1
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	4b34      	ldr	r3, [pc, #208]	@ (8006fc0 <DMA_ProcessBuffer+0x1dc>)
 8006eee:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8006ef0:	230d      	movs	r3, #13
 8006ef2:	18fb      	adds	r3, r7, r3
 8006ef4:	220a      	movs	r2, #10
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	e04d      	b.n	8006f96 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8006efa:	4b2b      	ldr	r3, [pc, #172]	@ (8006fa8 <DMA_ProcessBuffer+0x1c4>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	001a      	movs	r2, r3
 8006f02:	210e      	movs	r1, #14
 8006f04:	187b      	adds	r3, r7, r1
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d917      	bls.n	8006f3c <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8006f0c:	4b26      	ldr	r3, [pc, #152]	@ (8006fa8 <DMA_ProcessBuffer+0x1c4>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	001a      	movs	r2, r3
 8006f14:	4b2b      	ldr	r3, [pc, #172]	@ (8006fc4 <DMA_ProcessBuffer+0x1e0>)
 8006f16:	18d0      	adds	r0, r2, r3
 8006f18:	4b23      	ldr	r3, [pc, #140]	@ (8006fa8 <DMA_ProcessBuffer+0x1c4>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	001a      	movs	r2, r3
 8006f20:	187b      	adds	r3, r7, r1
 8006f22:	881b      	ldrh	r3, [r3, #0]
 8006f24:	1a9b      	subs	r3, r3, r2
 8006f26:	b299      	uxth	r1, r3
 8006f28:	230d      	movs	r3, #13
 8006f2a:	18fc      	adds	r4, r7, r3
 8006f2c:	1dfb      	adds	r3, r7, #7
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	001a      	movs	r2, r3
 8006f32:	f7ff f9db 	bl	80062ec <ParseBuffer>
 8006f36:	0003      	movs	r3, r0
 8006f38:	7023      	strb	r3, [r4, #0]
 8006f3a:	e026      	b.n	8006f8a <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8006f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa8 <DMA_ProcessBuffer+0x1c4>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	001a      	movs	r2, r3
 8006f44:	4b1f      	ldr	r3, [pc, #124]	@ (8006fc4 <DMA_ProcessBuffer+0x1e0>)
 8006f46:	18d0      	adds	r0, r2, r3
 8006f48:	4b17      	ldr	r3, [pc, #92]	@ (8006fa8 <DMA_ProcessBuffer+0x1c4>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	001a      	movs	r2, r3
 8006f50:	2380      	movs	r3, #128	@ 0x80
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	1a9b      	subs	r3, r3, r2
 8006f56:	b299      	uxth	r1, r3
 8006f58:	250d      	movs	r5, #13
 8006f5a:	197c      	adds	r4, r7, r5
 8006f5c:	1dfb      	adds	r3, r7, #7
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	001a      	movs	r2, r3
 8006f62:	f7ff f9c3 	bl	80062ec <ParseBuffer>
 8006f66:	0003      	movs	r3, r0
 8006f68:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8006f6a:	210e      	movs	r1, #14
 8006f6c:	187b      	adds	r3, r7, r1
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00a      	beq.n	8006f8a <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8006f74:	197c      	adds	r4, r7, r5
 8006f76:	1dfb      	adds	r3, r7, #7
 8006f78:	781a      	ldrb	r2, [r3, #0]
 8006f7a:	187b      	adds	r3, r7, r1
 8006f7c:	8819      	ldrh	r1, [r3, #0]
 8006f7e:	4b11      	ldr	r3, [pc, #68]	@ (8006fc4 <DMA_ProcessBuffer+0x1e0>)
 8006f80:	0018      	movs	r0, r3
 8006f82:	f7ff f9b3 	bl	80062ec <ParseBuffer>
 8006f86:	0003      	movs	r3, r0
 8006f88:	7023      	strb	r3, [r4, #0]
              }
          }
          OldPos = pos;
 8006f8a:	230e      	movs	r3, #14
 8006f8c:	18fb      	adds	r3, r7, r3
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	4b05      	ldr	r3, [pc, #20]	@ (8006fa8 <DMA_ProcessBuffer+0x1c4>)
 8006f94:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8006f96:	230d      	movs	r3, #13
 8006f98:	18fb      	adds	r3, r7, r3
 8006f9a:	781b      	ldrb	r3, [r3, #0]
}
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	b004      	add	sp, #16
 8006fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8006fa4:	20002408 	.word	0x20002408
 8006fa8:	20000911 	.word	0x20000911
 8006fac:	200006ac 	.word	0x200006ac
 8006fb0:	20000711 	.word	0x20000711
 8006fb4:	20000001 	.word	0x20000001
 8006fb8:	20000030 	.word	0x20000030
 8006fbc:	200006a4 	.word	0x200006a4
 8006fc0:	20000912 	.word	0x20000912
 8006fc4:	200004ac 	.word	0x200004ac

08006fc8 <clearDMABuffer>:

void clearDMABuffer(){
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8006fcc:	2380      	movs	r3, #128	@ 0x80
 8006fce:	005a      	lsls	r2, r3, #1
 8006fd0:	4b03      	ldr	r3, [pc, #12]	@ (8006fe0 <clearDMABuffer+0x18>)
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	0018      	movs	r0, r3
 8006fd6:	f01f fb75 	bl	80266c4 <memset>
}
 8006fda:	46c0      	nop			@ (mov r8, r8)
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	200004ac 	.word	0x200004ac

08006fe4 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	0002      	movs	r2, r0
 8006fec:	1dfb      	adds	r3, r7, #7
 8006fee:	701a      	strb	r2, [r3, #0]
 8006ff0:	1dbb      	adds	r3, r7, #6
 8006ff2:	1c0a      	adds	r2, r1, #0
 8006ff4:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8006ff6:	210f      	movs	r1, #15
 8006ff8:	187b      	adds	r3, r7, r1
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8006ffe:	1dbb      	adds	r3, r7, #6
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d105      	bne.n	8007012 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8007006:	187b      	adds	r3, r7, r1
 8007008:	1dfa      	adds	r2, r7, #7
 800700a:	7812      	ldrb	r2, [r2, #0]
 800700c:	4251      	negs	r1, r2
 800700e:	414a      	adcs	r2, r1
 8007010:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8007012:	1dbb      	adds	r3, r7, #6
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d107      	bne.n	800702a <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800701a:	230f      	movs	r3, #15
 800701c:	18fb      	adds	r3, r7, r3
 800701e:	1dfa      	adds	r2, r7, #7
 8007020:	7812      	ldrb	r2, [r2, #0]
 8007022:	3a02      	subs	r2, #2
 8007024:	4251      	negs	r1, r2
 8007026:	414a      	adcs	r2, r1
 8007028:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 800702a:	1dbb      	adds	r3, r7, #6
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	2b02      	cmp	r3, #2
 8007030:	d107      	bne.n	8007042 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8007032:	230f      	movs	r3, #15
 8007034:	18fb      	adds	r3, r7, r3
 8007036:	1dfa      	adds	r2, r7, #7
 8007038:	7812      	ldrb	r2, [r2, #0]
 800703a:	3a05      	subs	r2, #5
 800703c:	4251      	negs	r1, r2
 800703e:	414a      	adcs	r2, r1
 8007040:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8007042:	1dbb      	adds	r3, r7, #6
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b05      	cmp	r3, #5
 8007048:	d107      	bne.n	800705a <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 800704a:	230f      	movs	r3, #15
 800704c:	18fb      	adds	r3, r7, r3
 800704e:	1dfa      	adds	r2, r7, #7
 8007050:	7812      	ldrb	r2, [r2, #0]
 8007052:	3a0b      	subs	r2, #11
 8007054:	4251      	negs	r1, r2
 8007056:	414a      	adcs	r2, r1
 8007058:	701a      	strb	r2, [r3, #0]
  }
#ifdef USE_MAIL
  if(AT_Command_Expected == RECEIVE_EXPECTATION_MAIL_API){
 800705a:	1dbb      	adds	r3, r7, #6
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	2b06      	cmp	r3, #6
 8007060:	d107      	bne.n	8007072 <ATCompare+0x8e>
    value = (AT_Command_Received == RECEIVE_STATUS_MAIL_API);
 8007062:	230f      	movs	r3, #15
 8007064:	18fb      	adds	r3, r7, r3
 8007066:	1dfa      	adds	r2, r7, #7
 8007068:	7812      	ldrb	r2, [r2, #0]
 800706a:	3a0c      	subs	r2, #12
 800706c:	4251      	negs	r1, r2
 800706e:	414a      	adcs	r2, r1
 8007070:	701a      	strb	r2, [r3, #0]
  }
#endif
  return(value);
 8007072:	230f      	movs	r3, #15
 8007074:	18fb      	adds	r3, r7, r3
 8007076:	781b      	ldrb	r3, [r3, #0]
}
 8007078:	0018      	movs	r0, r3
 800707a:	46bd      	mov	sp, r7
 800707c:	b004      	add	sp, #16
 800707e:	bd80      	pop	{r7, pc}

08007080 <AT_Send>:

bool AT_Send(AT_Commands state){
 8007080:	b590      	push	{r4, r7, lr}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	0002      	movs	r2, r0
 8007088:	1dfb      	adds	r3, r7, #7
 800708a:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 800708c:	230f      	movs	r3, #15
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	2200      	movs	r2, #0
 8007092:	701a      	strb	r2, [r3, #0]
  switch (state){
 8007094:	1dfb      	adds	r3, r7, #7
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	2b16      	cmp	r3, #22
 800709a:	d900      	bls.n	800709e <AT_Send+0x1e>
 800709c:	e1c7      	b.n	800742e <AT_Send+0x3ae>
 800709e:	009a      	lsls	r2, r3, #2
 80070a0:	4be6      	ldr	r3, [pc, #920]	@ (800743c <AT_Send+0x3bc>)
 80070a2:	18d3      	adds	r3, r2, r3
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80070a8:	4be5      	ldr	r3, [pc, #916]	@ (8007440 <AT_Send+0x3c0>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	0018      	movs	r0, r3
 80070ae:	f00c ff7b 	bl	8013fa8 <TimestampIsReached>
 80070b2:	1e03      	subs	r3, r0, #0
 80070b4:	d100      	bne.n	80070b8 <AT_Send+0x38>
 80070b6:	e1b9      	b.n	800742c <AT_Send+0x3ac>
    Debug("AT_WAKEUP");
 80070b8:	4ae2      	ldr	r2, [pc, #904]	@ (8007444 <AT_Send+0x3c4>)
 80070ba:	4be3      	ldr	r3, [pc, #908]	@ (8007448 <AT_Send+0x3c8>)
 80070bc:	0019      	movs	r1, r3
 80070be:	2003      	movs	r0, #3
 80070c0:	f00c ffc8 	bl	8014054 <CreateLine>
    ATCommandSend = PollAwake();
 80070c4:	230f      	movs	r3, #15
 80070c6:	18fc      	adds	r4, r7, r3
 80070c8:	f7ff fb3e 	bl	8006748 <PollAwake>
 80070cc:	0003      	movs	r3, r0
 80070ce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80070d0:	f00d fd38 	bl	8014b44 <HAL_GetTick>
 80070d4:	0003      	movs	r3, r0
 80070d6:	3332      	adds	r3, #50	@ 0x32
 80070d8:	001a      	movs	r2, r3
 80070da:	4bd9      	ldr	r3, [pc, #868]	@ (8007440 <AT_Send+0x3c0>)
 80070dc:	601a      	str	r2, [r3, #0]
  }
  break;
 80070de:	e1a5      	b.n	800742c <AT_Send+0x3ac>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 80070e0:	4ada      	ldr	r2, [pc, #872]	@ (800744c <AT_Send+0x3cc>)
 80070e2:	4bd9      	ldr	r3, [pc, #868]	@ (8007448 <AT_Send+0x3c8>)
 80070e4:	0019      	movs	r1, r3
 80070e6:	2003      	movs	r0, #3
 80070e8:	f00c ffb4 	bl	8014054 <CreateLine>
    ATCommandSend = RFPower();
 80070ec:	230f      	movs	r3, #15
 80070ee:	18fc      	adds	r4, r7, r3
 80070f0:	f7ff fb46 	bl	8006780 <RFPower>
 80070f4:	0003      	movs	r3, r0
 80070f6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80070f8:	f00d fd24 	bl	8014b44 <HAL_GetTick>
 80070fc:	0003      	movs	r3, r0
 80070fe:	330a      	adds	r3, #10
 8007100:	001a      	movs	r2, r3
 8007102:	4bcf      	ldr	r3, [pc, #828]	@ (8007440 <AT_Send+0x3c0>)
 8007104:	601a      	str	r2, [r3, #0]
    break;
 8007106:	e192      	b.n	800742e <AT_Send+0x3ae>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8007108:	4ad1      	ldr	r2, [pc, #836]	@ (8007450 <AT_Send+0x3d0>)
 800710a:	4bcf      	ldr	r3, [pc, #828]	@ (8007448 <AT_Send+0x3c8>)
 800710c:	0019      	movs	r1, r3
 800710e:	2003      	movs	r0, #3
 8007110:	f00c ffa0 	bl	8014054 <CreateLine>
    ATCommandSend = CheckRFPower();
 8007114:	230f      	movs	r3, #15
 8007116:	18fc      	adds	r4, r7, r3
 8007118:	f7ff fb4e 	bl	80067b8 <CheckRFPower>
 800711c:	0003      	movs	r3, r0
 800711e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007120:	f00d fd10 	bl	8014b44 <HAL_GetTick>
 8007124:	0003      	movs	r3, r0
 8007126:	330a      	adds	r3, #10
 8007128:	001a      	movs	r2, r3
 800712a:	4bc5      	ldr	r3, [pc, #788]	@ (8007440 <AT_Send+0x3c0>)
 800712c:	601a      	str	r2, [r3, #0]
    break;
 800712e:	e17e      	b.n	800742e <AT_Send+0x3ae>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8007130:	4ac8      	ldr	r2, [pc, #800]	@ (8007454 <AT_Send+0x3d4>)
 8007132:	4bc5      	ldr	r3, [pc, #788]	@ (8007448 <AT_Send+0x3c8>)
 8007134:	0019      	movs	r1, r3
 8007136:	2003      	movs	r0, #3
 8007138:	f00c ff8c 	bl	8014054 <CreateLine>
    ATCommandSend = ATRestore();
 800713c:	230f      	movs	r3, #15
 800713e:	18fc      	adds	r4, r7, r3
 8007140:	f7ff fb56 	bl	80067f0 <ATRestore>
 8007144:	0003      	movs	r3, r0
 8007146:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8007148:	f00d fcfc 	bl	8014b44 <HAL_GetTick>
 800714c:	0003      	movs	r3, r0
 800714e:	3332      	adds	r3, #50	@ 0x32
 8007150:	001a      	movs	r2, r3
 8007152:	4bbb      	ldr	r3, [pc, #748]	@ (8007440 <AT_Send+0x3c0>)
 8007154:	601a      	str	r2, [r3, #0]
    break;
 8007156:	e16a      	b.n	800742e <AT_Send+0x3ae>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8007158:	4abf      	ldr	r2, [pc, #764]	@ (8007458 <AT_Send+0x3d8>)
 800715a:	4bbb      	ldr	r3, [pc, #748]	@ (8007448 <AT_Send+0x3c8>)
 800715c:	0019      	movs	r1, r3
 800715e:	2003      	movs	r0, #3
 8007160:	f00c ff78 	bl	8014054 <CreateLine>
    ATCommandSend = CWINIT();
 8007164:	230f      	movs	r3, #15
 8007166:	18fc      	adds	r4, r7, r3
 8007168:	f7ff fb5e 	bl	8006828 <CWINIT>
 800716c:	0003      	movs	r3, r0
 800716e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8007170:	f00d fce8 	bl	8014b44 <HAL_GetTick>
 8007174:	0003      	movs	r3, r0
 8007176:	33f5      	adds	r3, #245	@ 0xf5
 8007178:	33ff      	adds	r3, #255	@ 0xff
 800717a:	001a      	movs	r2, r3
 800717c:	4bb0      	ldr	r3, [pc, #704]	@ (8007440 <AT_Send+0x3c0>)
 800717e:	601a      	str	r2, [r3, #0]
    break;
 8007180:	e155      	b.n	800742e <AT_Send+0x3ae>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8007182:	4ab6      	ldr	r2, [pc, #728]	@ (800745c <AT_Send+0x3dc>)
 8007184:	4bb0      	ldr	r3, [pc, #704]	@ (8007448 <AT_Send+0x3c8>)
 8007186:	0019      	movs	r1, r3
 8007188:	2003      	movs	r0, #3
 800718a:	f00c ff63 	bl	8014054 <CreateLine>
    ATCommandSend = CWSTATE();
 800718e:	230f      	movs	r3, #15
 8007190:	18fc      	adds	r4, r7, r3
 8007192:	f7ff fc53 	bl	8006a3c <CWSTATE>
 8007196:	0003      	movs	r3, r0
 8007198:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800719a:	f00d fcd3 	bl	8014b44 <HAL_GetTick>
 800719e:	0003      	movs	r3, r0
 80071a0:	33f5      	adds	r3, #245	@ 0xf5
 80071a2:	33ff      	adds	r3, #255	@ 0xff
 80071a4:	001a      	movs	r2, r3
 80071a6:	4ba6      	ldr	r3, [pc, #664]	@ (8007440 <AT_Send+0x3c0>)
 80071a8:	601a      	str	r2, [r3, #0]
    break;
 80071aa:	e140      	b.n	800742e <AT_Send+0x3ae>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80071ac:	4aac      	ldr	r2, [pc, #688]	@ (8007460 <AT_Send+0x3e0>)
 80071ae:	4ba6      	ldr	r3, [pc, #664]	@ (8007448 <AT_Send+0x3c8>)
 80071b0:	0019      	movs	r1, r3
 80071b2:	2003      	movs	r0, #3
 80071b4:	f00c ff4e 	bl	8014054 <CreateLine>
    ATCommandSend = CWMODE1();
 80071b8:	230f      	movs	r3, #15
 80071ba:	18fc      	adds	r4, r7, r3
 80071bc:	f7ff fb50 	bl	8006860 <CWMODE1>
 80071c0:	0003      	movs	r3, r0
 80071c2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071c4:	f00d fcbe 	bl	8014b44 <HAL_GetTick>
 80071c8:	0003      	movs	r3, r0
 80071ca:	330a      	adds	r3, #10
 80071cc:	001a      	movs	r2, r3
 80071ce:	4b9c      	ldr	r3, [pc, #624]	@ (8007440 <AT_Send+0x3c0>)
 80071d0:	601a      	str	r2, [r3, #0]
    break;
 80071d2:	e12c      	b.n	800742e <AT_Send+0x3ae>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 80071d4:	4aa2      	ldr	r2, [pc, #648]	@ (8007460 <AT_Send+0x3e0>)
 80071d6:	4b9c      	ldr	r3, [pc, #624]	@ (8007448 <AT_Send+0x3c8>)
 80071d8:	0019      	movs	r1, r3
 80071da:	2003      	movs	r0, #3
 80071dc:	f00c ff3a 	bl	8014054 <CreateLine>
    ATCommandSend = CWMODE2();
 80071e0:	230f      	movs	r3, #15
 80071e2:	18fc      	adds	r4, r7, r3
 80071e4:	f7ff fb58 	bl	8006898 <CWMODE2>
 80071e8:	0003      	movs	r3, r0
 80071ea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80071ec:	f00d fcaa 	bl	8014b44 <HAL_GetTick>
 80071f0:	0003      	movs	r3, r0
 80071f2:	330a      	adds	r3, #10
 80071f4:	001a      	movs	r2, r3
 80071f6:	4b92      	ldr	r3, [pc, #584]	@ (8007440 <AT_Send+0x3c0>)
 80071f8:	601a      	str	r2, [r3, #0]
    break;
 80071fa:	e118      	b.n	800742e <AT_Send+0x3ae>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 80071fc:	4a99      	ldr	r2, [pc, #612]	@ (8007464 <AT_Send+0x3e4>)
 80071fe:	4b92      	ldr	r3, [pc, #584]	@ (8007448 <AT_Send+0x3c8>)
 8007200:	0019      	movs	r1, r3
 8007202:	2003      	movs	r0, #3
 8007204:	f00c ff26 	bl	8014054 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8007208:	230f      	movs	r3, #15
 800720a:	18fc      	adds	r4, r7, r3
 800720c:	f7ff fb60 	bl	80068d0 <CWAUTOCONN>
 8007210:	0003      	movs	r3, r0
 8007212:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007214:	f00d fc96 	bl	8014b44 <HAL_GetTick>
 8007218:	0003      	movs	r3, r0
 800721a:	330a      	adds	r3, #10
 800721c:	001a      	movs	r2, r3
 800721e:	4b88      	ldr	r3, [pc, #544]	@ (8007440 <AT_Send+0x3c0>)
 8007220:	601a      	str	r2, [r3, #0]
    break;
 8007222:	e104      	b.n	800742e <AT_Send+0x3ae>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8007224:	4a90      	ldr	r2, [pc, #576]	@ (8007468 <AT_Send+0x3e8>)
 8007226:	4b88      	ldr	r3, [pc, #544]	@ (8007448 <AT_Send+0x3c8>)
 8007228:	0019      	movs	r1, r3
 800722a:	2003      	movs	r0, #3
 800722c:	f00c ff12 	bl	8014054 <CreateLine>
    ATCommandSend = CWJAP();
 8007230:	230f      	movs	r3, #15
 8007232:	18fc      	adds	r4, r7, r3
 8007234:	f7ff fb68 	bl	8006908 <CWJAP>
 8007238:	0003      	movs	r3, r0
 800723a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800723c:	f00d fc82 	bl	8014b44 <HAL_GetTick>
 8007240:	0003      	movs	r3, r0
 8007242:	3332      	adds	r3, #50	@ 0x32
 8007244:	001a      	movs	r2, r3
 8007246:	4b7e      	ldr	r3, [pc, #504]	@ (8007440 <AT_Send+0x3c0>)
 8007248:	601a      	str	r2, [r3, #0]
    break;
 800724a:	e0f0      	b.n	800742e <AT_Send+0x3ae>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 800724c:	4a87      	ldr	r2, [pc, #540]	@ (800746c <AT_Send+0x3ec>)
 800724e:	4b7e      	ldr	r3, [pc, #504]	@ (8007448 <AT_Send+0x3c8>)
 8007250:	0019      	movs	r1, r3
 8007252:	2003      	movs	r0, #3
 8007254:	f00c fefe 	bl	8014054 <CreateLine>
    ATCommandSend = CWMODE3();
 8007258:	230f      	movs	r3, #15
 800725a:	18fc      	adds	r4, r7, r3
 800725c:	f7ff fbd2 	bl	8006a04 <CWMODE3>
 8007260:	0003      	movs	r3, r0
 8007262:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007264:	f00d fc6e 	bl	8014b44 <HAL_GetTick>
 8007268:	0003      	movs	r3, r0
 800726a:	330a      	adds	r3, #10
 800726c:	001a      	movs	r2, r3
 800726e:	4b74      	ldr	r3, [pc, #464]	@ (8007440 <AT_Send+0x3c0>)
 8007270:	601a      	str	r2, [r3, #0]
    break;
 8007272:	e0dc      	b.n	800742e <AT_Send+0x3ae>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8007274:	4a7e      	ldr	r2, [pc, #504]	@ (8007470 <AT_Send+0x3f0>)
 8007276:	4b74      	ldr	r3, [pc, #464]	@ (8007448 <AT_Send+0x3c8>)
 8007278:	0019      	movs	r1, r3
 800727a:	2003      	movs	r0, #3
 800727c:	f00c feea 	bl	8014054 <CreateLine>
    ATCommandSend = CWSAP();
 8007280:	230f      	movs	r3, #15
 8007282:	18fc      	adds	r4, r7, r3
 8007284:	f7ff fbf6 	bl	8006a74 <CWSAP>
 8007288:	0003      	movs	r3, r0
 800728a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800728c:	f00d fc5a 	bl	8014b44 <HAL_GetTick>
 8007290:	0003      	movs	r3, r0
 8007292:	330a      	adds	r3, #10
 8007294:	001a      	movs	r2, r3
 8007296:	4b6a      	ldr	r3, [pc, #424]	@ (8007440 <AT_Send+0x3c0>)
 8007298:	601a      	str	r2, [r3, #0]
    break;
 800729a:	e0c8      	b.n	800742e <AT_Send+0x3ae>

  case AT_CIPMUX:
    Debug("ATCommandSend = CIPMUX()");
 800729c:	4a75      	ldr	r2, [pc, #468]	@ (8007474 <AT_Send+0x3f4>)
 800729e:	4b6a      	ldr	r3, [pc, #424]	@ (8007448 <AT_Send+0x3c8>)
 80072a0:	0019      	movs	r1, r3
 80072a2:	2003      	movs	r0, #3
 80072a4:	f00c fed6 	bl	8014054 <CreateLine>
    ATCommandSend = CIPMUX();
 80072a8:	230f      	movs	r3, #15
 80072aa:	18fc      	adds	r4, r7, r3
 80072ac:	f7ff fbfe 	bl	8006aac <CIPMUX>
 80072b0:	0003      	movs	r3, r0
 80072b2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80072b4:	f00d fc46 	bl	8014b44 <HAL_GetTick>
 80072b8:	0003      	movs	r3, r0
 80072ba:	330a      	adds	r3, #10
 80072bc:	001a      	movs	r2, r3
 80072be:	4b60      	ldr	r3, [pc, #384]	@ (8007440 <AT_Send+0x3c0>)
 80072c0:	601a      	str	r2, [r3, #0]
    break;
 80072c2:	e0b4      	b.n	800742e <AT_Send+0x3ae>

  case AT_WEBSERVER:
    Debug("ATCommandSend = WEBSERVER()");
 80072c4:	4a6c      	ldr	r2, [pc, #432]	@ (8007478 <AT_Send+0x3f8>)
 80072c6:	4b60      	ldr	r3, [pc, #384]	@ (8007448 <AT_Send+0x3c8>)
 80072c8:	0019      	movs	r1, r3
 80072ca:	2003      	movs	r0, #3
 80072cc:	f00c fec2 	bl	8014054 <CreateLine>
    ATCommandSend = WEBSERVER();
 80072d0:	230f      	movs	r3, #15
 80072d2:	18fc      	adds	r4, r7, r3
 80072d4:	f7ff fc06 	bl	8006ae4 <WEBSERVER>
 80072d8:	0003      	movs	r3, r0
 80072da:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80072dc:	f00d fc32 	bl	8014b44 <HAL_GetTick>
 80072e0:	0003      	movs	r3, r0
 80072e2:	330a      	adds	r3, #10
 80072e4:	001a      	movs	r2, r3
 80072e6:	4b56      	ldr	r3, [pc, #344]	@ (8007440 <AT_Send+0x3c0>)
 80072e8:	601a      	str	r2, [r3, #0]
    break;
 80072ea:	e0a0      	b.n	800742e <AT_Send+0x3ae>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 80072ec:	230f      	movs	r3, #15
 80072ee:	18fc      	adds	r4, r7, r3
 80072f0:	f7ff fc14 	bl	8006b1c <HTTPCPOST>
 80072f4:	0003      	movs	r3, r0
 80072f6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80072f8:	f00d fc24 	bl	8014b44 <HAL_GetTick>
 80072fc:	0003      	movs	r3, r0
 80072fe:	33f5      	adds	r3, #245	@ 0xf5
 8007300:	33ff      	adds	r3, #255	@ 0xff
 8007302:	001a      	movs	r2, r3
 8007304:	4b4e      	ldr	r3, [pc, #312]	@ (8007440 <AT_Send+0x3c0>)
 8007306:	601a      	str	r2, [r3, #0]
    break;
 8007308:	e091      	b.n	800742e <AT_Send+0x3ae>

  case AT_SENDDATA:
    Debug("Send the data");
 800730a:	4a5c      	ldr	r2, [pc, #368]	@ (800747c <AT_Send+0x3fc>)
 800730c:	4b4e      	ldr	r3, [pc, #312]	@ (8007448 <AT_Send+0x3c8>)
 800730e:	0019      	movs	r1, r3
 8007310:	2003      	movs	r0, #3
 8007312:	f00c fe9f 	bl	8014054 <CreateLine>
    ATCommandSend = SENDDATA();
 8007316:	230f      	movs	r3, #15
 8007318:	18fc      	adds	r4, r7, r3
 800731a:	f7ff fcc7 	bl	8006cac <SENDDATA>
 800731e:	0003      	movs	r3, r0
 8007320:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8007322:	f00d fc0f 	bl	8014b44 <HAL_GetTick>
 8007326:	0003      	movs	r3, r0
 8007328:	33f5      	adds	r3, #245	@ 0xf5
 800732a:	33ff      	adds	r3, #255	@ 0xff
 800732c:	001a      	movs	r2, r3
 800732e:	4b44      	ldr	r3, [pc, #272]	@ (8007440 <AT_Send+0x3c0>)
 8007330:	601a      	str	r2, [r3, #0]
    break;
 8007332:	e07c      	b.n	800742e <AT_Send+0x3ae>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8007334:	4a52      	ldr	r2, [pc, #328]	@ (8007480 <AT_Send+0x400>)
 8007336:	4b44      	ldr	r3, [pc, #272]	@ (8007448 <AT_Send+0x3c8>)
 8007338:	0019      	movs	r1, r3
 800733a:	2003      	movs	r0, #3
 800733c:	f00c fe8a 	bl	8014054 <CreateLine>
    ATCommandSend = SLEEP();
 8007340:	230f      	movs	r3, #15
 8007342:	18fc      	adds	r4, r7, r3
 8007344:	f7ff fcda 	bl	8006cfc <SLEEP>
 8007348:	0003      	movs	r3, r0
 800734a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800734c:	f00d fbfa 	bl	8014b44 <HAL_GetTick>
 8007350:	0003      	movs	r3, r0
 8007352:	330a      	adds	r3, #10
 8007354:	001a      	movs	r2, r3
 8007356:	4b3a      	ldr	r3, [pc, #232]	@ (8007440 <AT_Send+0x3c0>)
 8007358:	601a      	str	r2, [r3, #0]
    break;
 800735a:	e068      	b.n	800742e <AT_Send+0x3ae>

  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 800735c:	4a49      	ldr	r2, [pc, #292]	@ (8007484 <AT_Send+0x404>)
 800735e:	4b3a      	ldr	r3, [pc, #232]	@ (8007448 <AT_Send+0x3c8>)
 8007360:	0019      	movs	r1, r3
 8007362:	2003      	movs	r0, #3
 8007364:	f00c fe76 	bl	8014054 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8007368:	230f      	movs	r3, #15
 800736a:	18fc      	adds	r4, r7, r3
 800736c:	f7ff fce2 	bl	8006d34 <CIPSNTPCFG>
 8007370:	0003      	movs	r3, r0
 8007372:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8007374:	f00d fbe6 	bl	8014b44 <HAL_GetTick>
 8007378:	0003      	movs	r3, r0
 800737a:	330a      	adds	r3, #10
 800737c:	001a      	movs	r2, r3
 800737e:	4b30      	ldr	r3, [pc, #192]	@ (8007440 <AT_Send+0x3c0>)
 8007380:	601a      	str	r2, [r3, #0]
    break;
 8007382:	e054      	b.n	800742e <AT_Send+0x3ae>

  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8007384:	4a40      	ldr	r2, [pc, #256]	@ (8007488 <AT_Send+0x408>)
 8007386:	4b30      	ldr	r3, [pc, #192]	@ (8007448 <AT_Send+0x3c8>)
 8007388:	0019      	movs	r1, r3
 800738a:	2003      	movs	r0, #3
 800738c:	f00c fe62 	bl	8014054 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8007390:	230f      	movs	r3, #15
 8007392:	18fc      	adds	r4, r7, r3
 8007394:	f7ff fcee 	bl	8006d74 <CIPSNTPTIME>
 8007398:	0003      	movs	r3, r0
 800739a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800739c:	f00d fbd2 	bl	8014b44 <HAL_GetTick>
 80073a0:	0003      	movs	r3, r0
 80073a2:	33f5      	adds	r3, #245	@ 0xf5
 80073a4:	33ff      	adds	r3, #255	@ 0xff
 80073a6:	001a      	movs	r2, r3
 80073a8:	4b25      	ldr	r3, [pc, #148]	@ (8007440 <AT_Send+0x3c0>)
 80073aa:	601a      	str	r2, [r3, #0]
    break;
 80073ac:	e03f      	b.n	800742e <AT_Send+0x3ae>

  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 80073ae:	4a37      	ldr	r2, [pc, #220]	@ (800748c <AT_Send+0x40c>)
 80073b0:	4b25      	ldr	r3, [pc, #148]	@ (8007448 <AT_Send+0x3c8>)
 80073b2:	0019      	movs	r1, r3
 80073b4:	2003      	movs	r0, #3
 80073b6:	f00c fe4d 	bl	8014054 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 80073ba:	230f      	movs	r3, #15
 80073bc:	18fc      	adds	r4, r7, r3
 80073be:	f7ff fcf5 	bl	8006dac <CIPSNTPINTV>
 80073c2:	0003      	movs	r3, r0
 80073c4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80073c6:	f00d fbbd 	bl	8014b44 <HAL_GetTick>
 80073ca:	0003      	movs	r3, r0
 80073cc:	330a      	adds	r3, #10
 80073ce:	001a      	movs	r2, r3
 80073d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007440 <AT_Send+0x3c0>)
 80073d2:	601a      	str	r2, [r3, #0]
    break;
 80073d4:	e02b      	b.n	800742e <AT_Send+0x3ae>
#ifdef USE_MAIL
  case AT_HTTPCPOST_MAILAPI:
    Debug("Start EMAIL Post via HTTP");
 80073d6:	4a2e      	ldr	r2, [pc, #184]	@ (8007490 <AT_Send+0x410>)
 80073d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007448 <AT_Send+0x3c8>)
 80073da:	0019      	movs	r1, r3
 80073dc:	2003      	movs	r0, #3
 80073de:	f00c fe39 	bl	8014054 <CreateLine>
    ATCommandSend = HTTPCPOST_MAILAPI();
 80073e2:	230f      	movs	r3, #15
 80073e4:	18fc      	adds	r4, r7, r3
 80073e6:	f7ff fc1d 	bl	8006c24 <HTTPCPOST_MAILAPI>
 80073ea:	0003      	movs	r3, r0
 80073ec:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80073ee:	f00d fba9 	bl	8014b44 <HAL_GetTick>
 80073f2:	0003      	movs	r3, r0
 80073f4:	3332      	adds	r3, #50	@ 0x32
 80073f6:	001a      	movs	r2, r3
 80073f8:	4b11      	ldr	r3, [pc, #68]	@ (8007440 <AT_Send+0x3c0>)
 80073fa:	601a      	str	r2, [r3, #0]
    break;
 80073fc:	e017      	b.n	800742e <AT_Send+0x3ae>

  case AT_SENDMAIL:
    Debug("Send Email content");
 80073fe:	4a25      	ldr	r2, [pc, #148]	@ (8007494 <AT_Send+0x414>)
 8007400:	4b11      	ldr	r3, [pc, #68]	@ (8007448 <AT_Send+0x3c8>)
 8007402:	0019      	movs	r1, r3
 8007404:	2003      	movs	r0, #3
 8007406:	f00c fe25 	bl	8014054 <CreateLine>
    ATCommandSend = SENDMAIL();
 800740a:	230f      	movs	r3, #15
 800740c:	18fc      	adds	r4, r7, r3
 800740e:	f7ff fbe1 	bl	8006bd4 <SENDMAIL>
 8007412:	0003      	movs	r3, r0
 8007414:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8007416:	f00d fb95 	bl	8014b44 <HAL_GetTick>
 800741a:	0003      	movs	r3, r0
 800741c:	33f5      	adds	r3, #245	@ 0xf5
 800741e:	33ff      	adds	r3, #255	@ 0xff
 8007420:	001a      	movs	r2, r3
 8007422:	4b07      	ldr	r3, [pc, #28]	@ (8007440 <AT_Send+0x3c0>)
 8007424:	601a      	str	r2, [r3, #0]
    break;
 8007426:	e002      	b.n	800742e <AT_Send+0x3ae>
#endif

  case AT_END:
    break;
 8007428:	46c0      	nop			@ (mov r8, r8)
 800742a:	e000      	b.n	800742e <AT_Send+0x3ae>
  break;
 800742c:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 800742e:	230f      	movs	r3, #15
 8007430:	18fb      	adds	r3, r7, r3
 8007432:	781b      	ldrb	r3, [r3, #0]
}
 8007434:	0018      	movs	r0, r3
 8007436:	46bd      	mov	sp, r7
 8007438:	b005      	add	sp, #20
 800743a:	bd90      	pop	{r4, r7, pc}
 800743c:	0802e648 	.word	0x0802e648
 8007440:	200006a4 	.word	0x200006a4
 8007444:	0802b514 	.word	0x0802b514
 8007448:	0802abd4 	.word	0x0802abd4
 800744c:	0802b520 	.word	0x0802b520
 8007450:	0802b534 	.word	0x0802b534
 8007454:	0802b548 	.word	0x0802b548
 8007458:	0802b558 	.word	0x0802b558
 800745c:	0802b56c 	.word	0x0802b56c
 8007460:	0802b584 	.word	0x0802b584
 8007464:	0802b59c 	.word	0x0802b59c
 8007468:	0802b5b4 	.word	0x0802b5b4
 800746c:	0802b5c8 	.word	0x0802b5c8
 8007470:	0802b5e4 	.word	0x0802b5e4
 8007474:	0802b600 	.word	0x0802b600
 8007478:	0802b61c 	.word	0x0802b61c
 800747c:	0802b638 	.word	0x0802b638
 8007480:	0802b648 	.word	0x0802b648
 8007484:	0802b66c 	.word	0x0802b66c
 8007488:	0802b680 	.word	0x0802b680
 800748c:	0802b698 	.word	0x0802b698
 8007490:	0802b6b8 	.word	0x0802b6b8
 8007494:	0802b6d4 	.word	0x0802b6d4

08007498 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8007498:	b590      	push	{r4, r7, lr}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800749e:	1dfb      	adds	r3, r7, #7
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80074a4:	4b7e      	ldr	r3, [pc, #504]	@ (80076a0 <ESP_WakeTest+0x208>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	2b05      	cmp	r3, #5
 80074aa:	d900      	bls.n	80074ae <ESP_WakeTest+0x16>
 80074ac:	e0dc      	b.n	8007668 <ESP_WakeTest+0x1d0>
 80074ae:	009a      	lsls	r2, r3, #2
 80074b0:	4b7c      	ldr	r3, [pc, #496]	@ (80076a4 <ESP_WakeTest+0x20c>)
 80074b2:	18d3      	adds	r3, r2, r3
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 80074b8:	4b7b      	ldr	r3, [pc, #492]	@ (80076a8 <ESP_WakeTest+0x210>)
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	2201      	movs	r2, #1
 80074be:	4053      	eors	r3, r2
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d039      	beq.n	800753a <ESP_WakeTest+0xa2>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80074c6:	2380      	movs	r3, #128	@ 0x80
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	4878      	ldr	r0, [pc, #480]	@ (80076ac <ESP_WakeTest+0x214>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	0019      	movs	r1, r3
 80074d0:	f00e fdc9 	bl	8016066 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80074d4:	2032      	movs	r0, #50	@ 0x32
 80074d6:	f00d fb3f 	bl	8014b58 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80074da:	2380      	movs	r3, #128	@ 0x80
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	4873      	ldr	r0, [pc, #460]	@ (80076ac <ESP_WakeTest+0x214>)
 80074e0:	2201      	movs	r2, #1
 80074e2:	0019      	movs	r1, r3
 80074e4:	f00e fdbf 	bl	8016066 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80074e8:	200a      	movs	r0, #10
 80074ea:	f00d fb35 	bl	8014b58 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80074ee:	4b70      	ldr	r3, [pc, #448]	@ (80076b0 <ESP_WakeTest+0x218>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	2101      	movs	r1, #1
 80074f4:	0018      	movs	r0, r3
 80074f6:	f00e fdb6 	bl	8016066 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80074fa:	200a      	movs	r0, #10
 80074fc:	f00d fb2c 	bl	8014b58 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8007500:	4b6b      	ldr	r3, [pc, #428]	@ (80076b0 <ESP_WakeTest+0x218>)
 8007502:	2201      	movs	r2, #1
 8007504:	2102      	movs	r1, #2
 8007506:	0018      	movs	r0, r3
 8007508:	f00e fdad 	bl	8016066 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800750c:	200a      	movs	r0, #10
 800750e:	f00d fb23 	bl	8014b58 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8007512:	4b67      	ldr	r3, [pc, #412]	@ (80076b0 <ESP_WakeTest+0x218>)
 8007514:	2201      	movs	r2, #1
 8007516:	2101      	movs	r1, #1
 8007518:	0018      	movs	r0, r3
 800751a:	f00e fda4 	bl	8016066 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800751e:	f00d fb11 	bl	8014b44 <HAL_GetTick>
 8007522:	0003      	movs	r3, r0
 8007524:	22af      	movs	r2, #175	@ 0xaf
 8007526:	0092      	lsls	r2, r2, #2
 8007528:	189a      	adds	r2, r3, r2
 800752a:	4b62      	ldr	r3, [pc, #392]	@ (80076b4 <ESP_WakeTest+0x21c>)
 800752c:	601a      	str	r2, [r3, #0]
        HAL_Delay(10);
 800752e:	200a      	movs	r0, #10
 8007530:	f00d fb12 	bl	8014b58 <HAL_Delay>
        EspTurnedOn = true;
 8007534:	4b5c      	ldr	r3, [pc, #368]	@ (80076a8 <ESP_WakeTest+0x210>)
 8007536:	2201      	movs	r2, #1
 8007538:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800753a:	2380      	movs	r3, #128	@ 0x80
 800753c:	005a      	lsls	r2, r3, #1
 800753e:	4b5e      	ldr	r3, [pc, #376]	@ (80076b8 <ESP_WakeTest+0x220>)
 8007540:	0011      	movs	r1, r2
 8007542:	0018      	movs	r0, r3
 8007544:	f7fd fd00 	bl	8004f48 <ESP_Receive>
 8007548:	1e03      	subs	r3, r0, #0
 800754a:	d100      	bne.n	800754e <ESP_WakeTest+0xb6>
 800754c:	e09f      	b.n	800768e <ESP_WakeTest+0x1f6>
        TestState = ESP_TEST_SEND;
 800754e:	4b54      	ldr	r3, [pc, #336]	@ (80076a0 <ESP_WakeTest+0x208>)
 8007550:	2201      	movs	r2, #1
 8007552:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007554:	e09b      	b.n	800768e <ESP_WakeTest+0x1f6>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8007556:	4b57      	ldr	r3, [pc, #348]	@ (80076b4 <ESP_WakeTest+0x21c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	0018      	movs	r0, r3
 800755c:	f00c fd24 	bl	8013fa8 <TimestampIsReached>
 8007560:	1e03      	subs	r3, r0, #0
 8007562:	d100      	bne.n	8007566 <ESP_WakeTest+0xce>
 8007564:	e095      	b.n	8007692 <ESP_WakeTest+0x1fa>
        ATSend = AT_Send(ATCommand);
 8007566:	4b55      	ldr	r3, [pc, #340]	@ (80076bc <ESP_WakeTest+0x224>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	1dfc      	adds	r4, r7, #7
 800756c:	0018      	movs	r0, r3
 800756e:	f7ff fd87 	bl	8007080 <AT_Send>
 8007572:	0003      	movs	r3, r0
 8007574:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007576:	1dfb      	adds	r3, r7, #7
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d100      	bne.n	8007580 <ESP_WakeTest+0xe8>
 800757e:	e088      	b.n	8007692 <ESP_WakeTest+0x1fa>
          TestState = ESP_TEST_RECEIVE;
 8007580:	4b47      	ldr	r3, [pc, #284]	@ (80076a0 <ESP_WakeTest+0x208>)
 8007582:	2202      	movs	r2, #2
 8007584:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007586:	e084      	b.n	8007692 <ESP_WakeTest+0x1fa>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8007588:	4b4a      	ldr	r3, [pc, #296]	@ (80076b4 <ESP_WakeTest+0x21c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	0018      	movs	r0, r3
 800758e:	f00c fd0b 	bl	8013fa8 <TimestampIsReached>
 8007592:	1e03      	subs	r3, r0, #0
 8007594:	d100      	bne.n	8007598 <ESP_WakeTest+0x100>
 8007596:	e07e      	b.n	8007696 <ESP_WakeTest+0x1fe>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007598:	4b49      	ldr	r3, [pc, #292]	@ (80076c0 <ESP_WakeTest+0x228>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	0018      	movs	r0, r3
 800759e:	f7ff fc21 	bl	8006de4 <DMA_ProcessBuffer>
 80075a2:	0003      	movs	r3, r0
 80075a4:	001a      	movs	r2, r3
 80075a6:	4b47      	ldr	r3, [pc, #284]	@ (80076c4 <ESP_WakeTest+0x22c>)
 80075a8:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80075aa:	4b46      	ldr	r3, [pc, #280]	@ (80076c4 <ESP_WakeTest+0x22c>)
 80075ac:	781a      	ldrb	r2, [r3, #0]
 80075ae:	4b44      	ldr	r3, [pc, #272]	@ (80076c0 <ESP_WakeTest+0x228>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	1dbc      	adds	r4, r7, #6
 80075b4:	0019      	movs	r1, r3
 80075b6:	0010      	movs	r0, r2
 80075b8:	f7ff fd14 	bl	8006fe4 <ATCompare>
 80075bc:	0003      	movs	r3, r0
 80075be:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80075c0:	4b40      	ldr	r3, [pc, #256]	@ (80076c4 <ESP_WakeTest+0x22c>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d102      	bne.n	80075ce <ESP_WakeTest+0x136>
          TestState = ESP_TEST_SEND;
 80075c8:	4b35      	ldr	r3, [pc, #212]	@ (80076a0 <ESP_WakeTest+0x208>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80075ce:	4b3d      	ldr	r3, [pc, #244]	@ (80076c4 <ESP_WakeTest+0x22c>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b07      	cmp	r3, #7
 80075d4:	d104      	bne.n	80075e0 <ESP_WakeTest+0x148>
          StartProg();
 80075d6:	f7fe fe57 	bl	8006288 <StartProg>
          TestState = ESP_TEST_BOOT;
 80075da:	4b31      	ldr	r3, [pc, #196]	@ (80076a0 <ESP_WakeTest+0x208>)
 80075dc:	2205      	movs	r2, #5
 80075de:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80075e0:	4b38      	ldr	r3, [pc, #224]	@ (80076c4 <ESP_WakeTest+0x22c>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d109      	bne.n	80075fc <ESP_WakeTest+0x164>
          ESPTimeStamp = HAL_GetTick() + 50;
 80075e8:	f00d faac 	bl	8014b44 <HAL_GetTick>
 80075ec:	0003      	movs	r3, r0
 80075ee:	3332      	adds	r3, #50	@ 0x32
 80075f0:	001a      	movs	r2, r3
 80075f2:	4b30      	ldr	r3, [pc, #192]	@ (80076b4 <ESP_WakeTest+0x21c>)
 80075f4:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80075f6:	4b2a      	ldr	r3, [pc, #168]	@ (80076a0 <ESP_WakeTest+0x208>)
 80075f8:	2201      	movs	r2, #1
 80075fa:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80075fc:	1dbb      	adds	r3, r7, #6
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d048      	beq.n	8007696 <ESP_WakeTest+0x1fe>
          TestState = ESP_TEST_VALIDATE;
 8007604:	4b26      	ldr	r3, [pc, #152]	@ (80076a0 <ESP_WakeTest+0x208>)
 8007606:	2203      	movs	r2, #3
 8007608:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800760a:	e044      	b.n	8007696 <ESP_WakeTest+0x1fe>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 800760c:	4b2e      	ldr	r3, [pc, #184]	@ (80076c8 <ESP_WakeTest+0x230>)
 800760e:	22fa      	movs	r2, #250	@ 0xfa
 8007610:	0112      	lsls	r2, r2, #4
 8007612:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 8007614:	f00b f976 	bl	8012904 <Calculate_LED_ON>
 8007618:	0003      	movs	r3, r0
 800761a:	001a      	movs	r2, r3
 800761c:	4b2a      	ldr	r3, [pc, #168]	@ (80076c8 <ESP_WakeTest+0x230>)
 800761e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8007620:	4b29      	ldr	r3, [pc, #164]	@ (80076c8 <ESP_WakeTest+0x230>)
 8007622:	22fa      	movs	r2, #250	@ 0xfa
 8007624:	0112      	lsls	r2, r2, #4
 8007626:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8007628:	4b1d      	ldr	r3, [pc, #116]	@ (80076a0 <ESP_WakeTest+0x208>)
 800762a:	2204      	movs	r2, #4
 800762c:	701a      	strb	r2, [r3, #0]

      break;
 800762e:	e033      	b.n	8007698 <ESP_WakeTest+0x200>

    case ESP_TEST_DEINIT:
      testRound = false;
 8007630:	4b26      	ldr	r3, [pc, #152]	@ (80076cc <ESP_WakeTest+0x234>)
 8007632:	2200      	movs	r2, #0
 8007634:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8007636:	4b1c      	ldr	r3, [pc, #112]	@ (80076a8 <ESP_WakeTest+0x210>)
 8007638:	2200      	movs	r2, #0
 800763a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800763c:	4b1c      	ldr	r3, [pc, #112]	@ (80076b0 <ESP_WakeTest+0x218>)
 800763e:	2200      	movs	r2, #0
 8007640:	2101      	movs	r1, #1
 8007642:	0018      	movs	r0, r3
 8007644:	f00e fd0f 	bl	8016066 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007648:	2380      	movs	r3, #128	@ 0x80
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	4817      	ldr	r0, [pc, #92]	@ (80076ac <ESP_WakeTest+0x214>)
 800764e:	2200      	movs	r2, #0
 8007650:	0019      	movs	r1, r3
 8007652:	f00e fd08 	bl	8016066 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007656:	4b16      	ldr	r3, [pc, #88]	@ (80076b0 <ESP_WakeTest+0x218>)
 8007658:	2200      	movs	r2, #0
 800765a:	2102      	movs	r1, #2
 800765c:	0018      	movs	r0, r3
 800765e:	f00e fd02 	bl	8016066 <HAL_GPIO_WritePin>
      SetESPMeasurementDone();
 8007662:	f006 f897 	bl	800d794 <SetESPMeasurementDone>
      break;
 8007666:	e017      	b.n	8007698 <ESP_WakeTest+0x200>

    default:
      TestState = ESP_TEST_INIT;
 8007668:	4b0d      	ldr	r3, [pc, #52]	@ (80076a0 <ESP_WakeTest+0x208>)
 800766a:	2200      	movs	r2, #0
 800766c:	701a      	strb	r2, [r3, #0]
      break;
 800766e:	e013      	b.n	8007698 <ESP_WakeTest+0x200>

    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = LED_OFF;
 8007670:	4b15      	ldr	r3, [pc, #84]	@ (80076c8 <ESP_WakeTest+0x230>)
 8007672:	22fa      	movs	r2, #250	@ 0xfa
 8007674:	0112      	lsls	r2, r2, #4
 8007676:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_OFF;
 8007678:	4b13      	ldr	r3, [pc, #76]	@ (80076c8 <ESP_WakeTest+0x230>)
 800767a:	22fa      	movs	r2, #250	@ 0xfa
 800767c:	0112      	lsls	r2, r2, #4
 800767e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8007680:	f00b f940 	bl	8012904 <Calculate_LED_ON>
 8007684:	0003      	movs	r3, r0
 8007686:	001a      	movs	r2, r3
 8007688:	4b0f      	ldr	r3, [pc, #60]	@ (80076c8 <ESP_WakeTest+0x230>)
 800768a:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 800768c:	e004      	b.n	8007698 <ESP_WakeTest+0x200>
      break;
 800768e:	46c0      	nop			@ (mov r8, r8)
 8007690:	e002      	b.n	8007698 <ESP_WakeTest+0x200>
      break;
 8007692:	46c0      	nop			@ (mov r8, r8)
 8007694:	e000      	b.n	8007698 <ESP_WakeTest+0x200>
      break;
 8007696:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007698:	46c0      	nop			@ (mov r8, r8)
 800769a:	46bd      	mov	sp, r7
 800769c:	b003      	add	sp, #12
 800769e:	bd90      	pop	{r4, r7, pc}
 80076a0:	20000713 	.word	0x20000713
 80076a4:	0802e6a4 	.word	0x0802e6a4
 80076a8:	200005ac 	.word	0x200005ac
 80076ac:	50000800 	.word	0x50000800
 80076b0:	50001c00 	.word	0x50001c00
 80076b4:	200006a4 	.word	0x200006a4
 80076b8:	200004ac 	.word	0x200004ac
 80076bc:	20000711 	.word	0x20000711
 80076c0:	20000710 	.word	0x20000710
 80076c4:	20000033 	.word	0x20000033
 80076c8:	40000400 	.word	0x40000400
 80076cc:	20000001 	.word	0x20000001

080076d0 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80076d0:	b5b0      	push	{r4, r5, r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80076d6:	1dfb      	adds	r3, r7, #7
 80076d8:	2200      	movs	r2, #0
 80076da:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80076dc:	4b66      	ldr	r3, [pc, #408]	@ (8007878 <ESP_Upkeep+0x1a8>)
 80076de:	781a      	ldrb	r2, [r3, #0]
 80076e0:	4b66      	ldr	r3, [pc, #408]	@ (800787c <ESP_Upkeep+0x1ac>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d028      	beq.n	800773a <ESP_Upkeep+0x6a>
 80076e8:	f00c fd3e 	bl	8014168 <GetVerboseLevel>
 80076ec:	0003      	movs	r3, r0
 80076ee:	2b03      	cmp	r3, #3
 80076f0:	d123      	bne.n	800773a <ESP_Upkeep+0x6a>
    oldEspState = EspState;
 80076f2:	4b61      	ldr	r3, [pc, #388]	@ (8007878 <ESP_Upkeep+0x1a8>)
 80076f4:	781a      	ldrb	r2, [r3, #0]
 80076f6:	4b61      	ldr	r3, [pc, #388]	@ (800787c <ESP_Upkeep+0x1ac>)
 80076f8:	701a      	strb	r2, [r3, #0]
#ifdef USE_MAIL
    if ( !((oldEspState == 3) && ((ATCommand == AT_HTTPCPOST) || (ATCommand == AT_HTTPCPOST_MAILAPI))) ) {
 80076fa:	4b60      	ldr	r3, [pc, #384]	@ (800787c <ESP_Upkeep+0x1ac>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d107      	bne.n	8007712 <ESP_Upkeep+0x42>
 8007702:	4b5f      	ldr	r3, [pc, #380]	@ (8007880 <ESP_Upkeep+0x1b0>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	2b0e      	cmp	r3, #14
 8007708:	d017      	beq.n	800773a <ESP_Upkeep+0x6a>
 800770a:	4b5d      	ldr	r3, [pc, #372]	@ (8007880 <ESP_Upkeep+0x1b0>)
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	2b14      	cmp	r3, #20
 8007710:	d013      	beq.n	800773a <ESP_Upkeep+0x6a>
#else
      if ( !((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
#endif
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 8007712:	4b5a      	ldr	r3, [pc, #360]	@ (800787c <ESP_Upkeep+0x1ac>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	001d      	movs	r5, r3
 8007718:	4b59      	ldr	r3, [pc, #356]	@ (8007880 <ESP_Upkeep+0x1b0>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	0018      	movs	r0, r3
 800771e:	4b59      	ldr	r3, [pc, #356]	@ (8007884 <ESP_Upkeep+0x1b4>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	001c      	movs	r4, r3
 8007724:	4b58      	ldr	r3, [pc, #352]	@ (8007888 <ESP_Upkeep+0x1b8>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	4a58      	ldr	r2, [pc, #352]	@ (800788c <ESP_Upkeep+0x1bc>)
 800772a:	4959      	ldr	r1, [pc, #356]	@ (8007890 <ESP_Upkeep+0x1c0>)
 800772c:	9302      	str	r3, [sp, #8]
 800772e:	9401      	str	r4, [sp, #4]
 8007730:	9000      	str	r0, [sp, #0]
 8007732:	002b      	movs	r3, r5
 8007734:	2003      	movs	r0, #3
 8007736:	f00c fc8d 	bl	8014054 <CreateLine>
    }
  }
  switch (EspState) {
 800773a:	4b4f      	ldr	r3, [pc, #316]	@ (8007878 <ESP_Upkeep+0x1a8>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	2b0f      	cmp	r3, #15
 8007740:	d901      	bls.n	8007746 <ESP_Upkeep+0x76>
 8007742:	f000 fce8 	bl	8008116 <ESP_Upkeep+0xa46>
 8007746:	009a      	lsls	r2, r3, #2
 8007748:	4b52      	ldr	r3, [pc, #328]	@ (8007894 <ESP_Upkeep+0x1c4>)
 800774a:	18d3      	adds	r3, r2, r3
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8007750:	4b49      	ldr	r3, [pc, #292]	@ (8007878 <ESP_Upkeep+0x1a8>)
 8007752:	2201      	movs	r2, #1
 8007754:	701a      	strb	r2, [r3, #0]
      break;
 8007756:	f000 fcf9 	bl	800814c <ESP_Upkeep+0xa7c>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
//      Debug("entry in ESP_STATE_INIT");
      deviceTimeOut = 0;
 800775a:	4b4f      	ldr	r3, [pc, #316]	@ (8007898 <ESP_Upkeep+0x1c8>)
 800775c:	2200      	movs	r2, #0
 800775e:	601a      	str	r2, [r3, #0]
      if (!AllDevicesReady()) {
 8007760:	f006 fa78 	bl	800dc54 <AllDevicesReady>
 8007764:	0003      	movs	r3, r0
 8007766:	001a      	movs	r2, r3
 8007768:	2301      	movs	r3, #1
 800776a:	4053      	eors	r3, r2
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <ESP_Upkeep+0xa6>
 8007772:	f000 fcdc 	bl	800812e <ESP_Upkeep+0xa5e>
//        Debug("Waiting for all devices ready");
        break;
      }
      SetESPIndicator();
 8007776:	f00b fa57 	bl	8012c28 <SetESPIndicator>
      if(!EspTurnedOn){
 800777a:	4b48      	ldr	r3, [pc, #288]	@ (800789c <ESP_Upkeep+0x1cc>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	2201      	movs	r2, #1
 8007780:	4053      	eors	r3, r2
 8007782:	b2db      	uxtb	r3, r3
 8007784:	2b00      	cmp	r3, #0
 8007786:	d03c      	beq.n	8007802 <ESP_Upkeep+0x132>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007788:	2380      	movs	r3, #128	@ 0x80
 800778a:	011b      	lsls	r3, r3, #4
 800778c:	4844      	ldr	r0, [pc, #272]	@ (80078a0 <ESP_Upkeep+0x1d0>)
 800778e:	2200      	movs	r2, #0
 8007790:	0019      	movs	r1, r3
 8007792:	f00e fc68 	bl	8016066 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8007796:	2001      	movs	r0, #1
 8007798:	f00d f9de 	bl	8014b58 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800779c:	2380      	movs	r3, #128	@ 0x80
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	483f      	ldr	r0, [pc, #252]	@ (80078a0 <ESP_Upkeep+0x1d0>)
 80077a2:	2201      	movs	r2, #1
 80077a4:	0019      	movs	r1, r3
 80077a6:	f00e fc5e 	bl	8016066 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80077aa:	2001      	movs	r0, #1
 80077ac:	f00d f9d4 	bl	8014b58 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80077b0:	4b3c      	ldr	r3, [pc, #240]	@ (80078a4 <ESP_Upkeep+0x1d4>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	2101      	movs	r1, #1
 80077b6:	0018      	movs	r0, r3
 80077b8:	f00e fc55 	bl	8016066 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80077bc:	2001      	movs	r0, #1
 80077be:	f00d f9cb 	bl	8014b58 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80077c2:	4b38      	ldr	r3, [pc, #224]	@ (80078a4 <ESP_Upkeep+0x1d4>)
 80077c4:	2201      	movs	r2, #1
 80077c6:	2102      	movs	r1, #2
 80077c8:	0018      	movs	r0, r3
 80077ca:	f00e fc4c 	bl	8016066 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80077ce:	2001      	movs	r0, #1
 80077d0:	f00d f9c2 	bl	8014b58 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80077d4:	4b33      	ldr	r3, [pc, #204]	@ (80078a4 <ESP_Upkeep+0x1d4>)
 80077d6:	2201      	movs	r2, #1
 80077d8:	2101      	movs	r1, #1
 80077da:	0018      	movs	r0, r3
 80077dc:	f00e fc43 	bl	8016066 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80077e0:	f00d f9b0 	bl	8014b44 <HAL_GetTick>
 80077e4:	0003      	movs	r3, r0
 80077e6:	22af      	movs	r2, #175	@ 0xaf
 80077e8:	0092      	lsls	r2, r2, #2
 80077ea:	189a      	adds	r2, r3, r2
 80077ec:	4b2e      	ldr	r3, [pc, #184]	@ (80078a8 <ESP_Upkeep+0x1d8>)
 80077ee:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80077f0:	4b2a      	ldr	r3, [pc, #168]	@ (800789c <ESP_Upkeep+0x1cc>)
 80077f2:	2201      	movs	r2, #1
 80077f4:	701a      	strb	r2, [r3, #0]
        Debug("ESP powered on.");
 80077f6:	4a2d      	ldr	r2, [pc, #180]	@ (80078ac <ESP_Upkeep+0x1dc>)
 80077f8:	4b25      	ldr	r3, [pc, #148]	@ (8007890 <ESP_Upkeep+0x1c0>)
 80077fa:	0019      	movs	r1, r3
 80077fc:	2003      	movs	r0, #3
 80077fe:	f00c fc29 	bl	8014054 <CreateLine>
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8007802:	2380      	movs	r3, #128	@ 0x80
 8007804:	005a      	lsls	r2, r3, #1
 8007806:	4b2a      	ldr	r3, [pc, #168]	@ (80078b0 <ESP_Upkeep+0x1e0>)
 8007808:	0011      	movs	r1, r2
 800780a:	0018      	movs	r0, r3
 800780c:	f7fd fb9c 	bl	8004f48 <ESP_Receive>
 8007810:	1e03      	subs	r3, r0, #0
 8007812:	d101      	bne.n	8007818 <ESP_Upkeep+0x148>
 8007814:	f000 fc8d 	bl	8008132 <ESP_Upkeep+0xa62>
        EspState = ESP_STATE_WAIT_AWAKE;
 8007818:	4b17      	ldr	r3, [pc, #92]	@ (8007878 <ESP_Upkeep+0x1a8>)
 800781a:	220f      	movs	r2, #15
 800781c:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 800781e:	f00d f991 	bl	8014b44 <HAL_GetTick>
 8007822:	0003      	movs	r3, r0
 8007824:	22fa      	movs	r2, #250	@ 0xfa
 8007826:	00d2      	lsls	r2, r2, #3
 8007828:	189a      	adds	r2, r3, r2
 800782a:	4b22      	ldr	r3, [pc, #136]	@ (80078b4 <ESP_Upkeep+0x1e4>)
 800782c:	601a      	str	r2, [r3, #0]
      }
      break;
 800782e:	f000 fc80 	bl	8008132 <ESP_Upkeep+0xa62>

    case ESP_STATE_WAIT_AWAKE:
//        Debug("entry in ESP_STATE_WAIT_AWAKE");
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8007832:	2001      	movs	r0, #1
 8007834:	f7ff fad6 	bl	8006de4 <DMA_ProcessBuffer>
 8007838:	0003      	movs	r3, r0
 800783a:	001a      	movs	r2, r3
 800783c:	4b1e      	ldr	r3, [pc, #120]	@ (80078b8 <ESP_Upkeep+0x1e8>)
 800783e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8007840:	4b1d      	ldr	r3, [pc, #116]	@ (80078b8 <ESP_Upkeep+0x1e8>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	1dbc      	adds	r4, r7, #6
 8007846:	2101      	movs	r1, #1
 8007848:	0018      	movs	r0, r3
 800784a:	f7ff fbcb 	bl	8006fe4 <ATCompare>
 800784e:	0003      	movs	r3, r0
 8007850:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8007852:	1dbb      	adds	r3, r7, #6
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d108      	bne.n	800786c <ESP_Upkeep+0x19c>
 800785a:	4b16      	ldr	r3, [pc, #88]	@ (80078b4 <ESP_Upkeep+0x1e4>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	0018      	movs	r0, r3
 8007860:	f00c fba2 	bl	8013fa8 <TimestampIsReached>
 8007864:	1e03      	subs	r3, r0, #0
 8007866:	d101      	bne.n	800786c <ESP_Upkeep+0x19c>
 8007868:	f000 fc65 	bl	8008136 <ESP_Upkeep+0xa66>
          EspState = ESP_STATE_MODE_SELECT;
 800786c:	4b02      	ldr	r3, [pc, #8]	@ (8007878 <ESP_Upkeep+0x1a8>)
 800786e:	220b      	movs	r2, #11
 8007870:	701a      	strb	r2, [r3, #0]
        }
        break;
 8007872:	f000 fc60 	bl	8008136 <ESP_Upkeep+0xa66>
 8007876:	46c0      	nop			@ (mov r8, r8)
 8007878:	20000030 	.word	0x20000030
 800787c:	20000003 	.word	0x20000003
 8007880:	20000711 	.word	0x20000711
 8007884:	20000712 	.word	0x20000712
 8007888:	20000710 	.word	0x20000710
 800788c:	0802b6e8 	.word	0x0802b6e8
 8007890:	0802abd4 	.word	0x0802abd4
 8007894:	0802e6bc 	.word	0x0802e6bc
 8007898:	200010c4 	.word	0x200010c4
 800789c:	200005ac 	.word	0x200005ac
 80078a0:	50000800 	.word	0x50000800
 80078a4:	50001c00 	.word	0x50001c00
 80078a8:	200006a4 	.word	0x200006a4
 80078ac:	0802b714 	.word	0x0802b714
 80078b0:	200004ac 	.word	0x200004ac
 80078b4:	20000914 	.word	0x20000914
 80078b8:	20000034 	.word	0x20000034

    case ESP_STATE_MODE_SELECT:
//      Debug("entry in ESP_STATE_MODE_SELECT");
      memset(ATCommandArray, AT_END, 9);
 80078bc:	4bd2      	ldr	r3, [pc, #840]	@ (8007c08 <ESP_Upkeep+0x538>)
 80078be:	2209      	movs	r2, #9
 80078c0:	2116      	movs	r1, #22
 80078c2:	0018      	movs	r0, r3
 80078c4:	f01e fefe 	bl	80266c4 <memset>
      if(!InitIsDone || WifiReset){
 80078c8:	4bd0      	ldr	r3, [pc, #832]	@ (8007c0c <ESP_Upkeep+0x53c>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2201      	movs	r2, #1
 80078ce:	4053      	eors	r3, r2
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d103      	bne.n	80078de <ESP_Upkeep+0x20e>
 80078d6:	4bce      	ldr	r3, [pc, #824]	@ (8007c10 <ESP_Upkeep+0x540>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d01a      	beq.n	8007914 <ESP_Upkeep+0x244>
        memcpy(ATCommandArray, AT_INIT, 7);
 80078de:	4bca      	ldr	r3, [pc, #808]	@ (8007c08 <ESP_Upkeep+0x538>)
 80078e0:	4acc      	ldr	r2, [pc, #816]	@ (8007c14 <ESP_Upkeep+0x544>)
 80078e2:	6811      	ldr	r1, [r2, #0]
 80078e4:	6019      	str	r1, [r3, #0]
 80078e6:	8891      	ldrh	r1, [r2, #4]
 80078e8:	8099      	strh	r1, [r3, #4]
 80078ea:	7992      	ldrb	r2, [r2, #6]
 80078ec:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 80078ee:	4bca      	ldr	r3, [pc, #808]	@ (8007c18 <ESP_Upkeep+0x548>)
 80078f0:	2204      	movs	r2, #4
 80078f2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80078f4:	4bc9      	ldr	r3, [pc, #804]	@ (8007c1c <ESP_Upkeep+0x54c>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80078fa:	4bc9      	ldr	r3, [pc, #804]	@ (8007c20 <ESP_Upkeep+0x550>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007900:	4bc6      	ldr	r3, [pc, #792]	@ (8007c1c <ESP_Upkeep+0x54c>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	001a      	movs	r2, r3
 8007906:	4bc0      	ldr	r3, [pc, #768]	@ (8007c08 <ESP_Upkeep+0x538>)
 8007908:	5c9a      	ldrb	r2, [r3, r2]
 800790a:	4bc6      	ldr	r3, [pc, #792]	@ (8007c24 <ESP_Upkeep+0x554>)
 800790c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800790e:	4bc6      	ldr	r3, [pc, #792]	@ (8007c28 <ESP_Upkeep+0x558>)
 8007910:	2200      	movs	r2, #0
 8007912:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8007914:	4bbd      	ldr	r3, [pc, #756]	@ (8007c0c <ESP_Upkeep+0x53c>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01f      	beq.n	800795c <ESP_Upkeep+0x28c>
 800791c:	4bc3      	ldr	r3, [pc, #780]	@ (8007c2c <ESP_Upkeep+0x55c>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2201      	movs	r2, #1
 8007922:	4053      	eors	r3, r2
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d018      	beq.n	800795c <ESP_Upkeep+0x28c>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 800792a:	4bb7      	ldr	r3, [pc, #732]	@ (8007c08 <ESP_Upkeep+0x538>)
 800792c:	4ac0      	ldr	r2, [pc, #768]	@ (8007c30 <ESP_Upkeep+0x560>)
 800792e:	6811      	ldr	r1, [r2, #0]
 8007930:	6019      	str	r1, [r3, #0]
 8007932:	8892      	ldrh	r2, [r2, #4]
 8007934:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8007936:	4bb8      	ldr	r3, [pc, #736]	@ (8007c18 <ESP_Upkeep+0x548>)
 8007938:	2204      	movs	r2, #4
 800793a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800793c:	4bb7      	ldr	r3, [pc, #732]	@ (8007c1c <ESP_Upkeep+0x54c>)
 800793e:	2200      	movs	r2, #0
 8007940:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8007942:	4bb7      	ldr	r3, [pc, #732]	@ (8007c20 <ESP_Upkeep+0x550>)
 8007944:	2201      	movs	r2, #1
 8007946:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007948:	4bb4      	ldr	r3, [pc, #720]	@ (8007c1c <ESP_Upkeep+0x54c>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	001a      	movs	r2, r3
 800794e:	4bae      	ldr	r3, [pc, #696]	@ (8007c08 <ESP_Upkeep+0x538>)
 8007950:	5c9a      	ldrb	r2, [r3, r2]
 8007952:	4bb4      	ldr	r3, [pc, #720]	@ (8007c24 <ESP_Upkeep+0x554>)
 8007954:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007956:	4bb4      	ldr	r3, [pc, #720]	@ (8007c28 <ESP_Upkeep+0x558>)
 8007958:	2200      	movs	r2, #0
 800795a:	701a      	strb	r2, [r3, #0]
      }
//      if(InitIsDone && ConnectionMade && !beursTest){
      if(InitIsDone && ConnectionMade && !APtested){
 800795c:	4bab      	ldr	r3, [pc, #684]	@ (8007c0c <ESP_Upkeep+0x53c>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d021      	beq.n	80079a8 <ESP_Upkeep+0x2d8>
 8007964:	4bb1      	ldr	r3, [pc, #708]	@ (8007c2c <ESP_Upkeep+0x55c>)
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d01d      	beq.n	80079a8 <ESP_Upkeep+0x2d8>
 800796c:	4bb1      	ldr	r3, [pc, #708]	@ (8007c34 <ESP_Upkeep+0x564>)
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	2201      	movs	r2, #1
 8007972:	4053      	eors	r3, r2
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d016      	beq.n	80079a8 <ESP_Upkeep+0x2d8>
        memcpy(ATCommandArray, AT_TEST, 2);
 800797a:	4baf      	ldr	r3, [pc, #700]	@ (8007c38 <ESP_Upkeep+0x568>)
 800797c:	881a      	ldrh	r2, [r3, #0]
 800797e:	4ba2      	ldr	r3, [pc, #648]	@ (8007c08 <ESP_Upkeep+0x538>)
 8007980:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007982:	4ba5      	ldr	r3, [pc, #660]	@ (8007c18 <ESP_Upkeep+0x548>)
 8007984:	2204      	movs	r2, #4
 8007986:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007988:	4ba4      	ldr	r3, [pc, #656]	@ (8007c1c <ESP_Upkeep+0x54c>)
 800798a:	2200      	movs	r2, #0
 800798c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 800798e:	4ba4      	ldr	r3, [pc, #656]	@ (8007c20 <ESP_Upkeep+0x550>)
 8007990:	2204      	movs	r2, #4
 8007992:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007994:	4ba1      	ldr	r3, [pc, #644]	@ (8007c1c <ESP_Upkeep+0x54c>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	001a      	movs	r2, r3
 800799a:	4b9b      	ldr	r3, [pc, #620]	@ (8007c08 <ESP_Upkeep+0x538>)
 800799c:	5c9a      	ldrb	r2, [r3, r2]
 800799e:	4ba1      	ldr	r3, [pc, #644]	@ (8007c24 <ESP_Upkeep+0x554>)
 80079a0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80079a2:	4ba1      	ldr	r3, [pc, #644]	@ (8007c28 <ESP_Upkeep+0x558>)
 80079a4:	2200      	movs	r2, #0
 80079a6:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(InitIsDone && ConnectionMade && APtested && (sendpwremail == DO_PWR_MAIL)){
 80079a8:	4b98      	ldr	r3, [pc, #608]	@ (8007c0c <ESP_Upkeep+0x53c>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d024      	beq.n	80079fa <ESP_Upkeep+0x32a>
 80079b0:	4b9e      	ldr	r3, [pc, #632]	@ (8007c2c <ESP_Upkeep+0x55c>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d020      	beq.n	80079fa <ESP_Upkeep+0x32a>
 80079b8:	4b9e      	ldr	r3, [pc, #632]	@ (8007c34 <ESP_Upkeep+0x564>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d01c      	beq.n	80079fa <ESP_Upkeep+0x32a>
 80079c0:	4b9e      	ldr	r3, [pc, #632]	@ (8007c3c <ESP_Upkeep+0x56c>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d118      	bne.n	80079fa <ESP_Upkeep+0x32a>
        memcpy(ATCommandArray, AT_MAIL, 3);
 80079c8:	4b8f      	ldr	r3, [pc, #572]	@ (8007c08 <ESP_Upkeep+0x538>)
 80079ca:	4a9d      	ldr	r2, [pc, #628]	@ (8007c40 <ESP_Upkeep+0x570>)
 80079cc:	8811      	ldrh	r1, [r2, #0]
 80079ce:	8019      	strh	r1, [r3, #0]
 80079d0:	7892      	ldrb	r2, [r2, #2]
 80079d2:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80079d4:	4b90      	ldr	r3, [pc, #576]	@ (8007c18 <ESP_Upkeep+0x548>)
 80079d6:	2204      	movs	r2, #4
 80079d8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80079da:	4b90      	ldr	r3, [pc, #576]	@ (8007c1c <ESP_Upkeep+0x54c>)
 80079dc:	2200      	movs	r2, #0
 80079de:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_MAIL;
 80079e0:	4b8f      	ldr	r3, [pc, #572]	@ (8007c20 <ESP_Upkeep+0x550>)
 80079e2:	2206      	movs	r2, #6
 80079e4:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80079e6:	4b8d      	ldr	r3, [pc, #564]	@ (8007c1c <ESP_Upkeep+0x54c>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	001a      	movs	r2, r3
 80079ec:	4b86      	ldr	r3, [pc, #536]	@ (8007c08 <ESP_Upkeep+0x538>)
 80079ee:	5c9a      	ldrb	r2, [r3, r2]
 80079f0:	4b8c      	ldr	r3, [pc, #560]	@ (8007c24 <ESP_Upkeep+0x554>)
 80079f2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80079f4:	4b8c      	ldr	r3, [pc, #560]	@ (8007c28 <ESP_Upkeep+0x558>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	701a      	strb	r2, [r3, #0]
      }
#endif
//      if(InitIsDone && ConnectionMade && beursTest && !setTime){
      if(InitIsDone && ConnectionMade && APtested && !setTime && (sendpwremail != DO_PWR_MAIL)){
 80079fa:	4b84      	ldr	r3, [pc, #528]	@ (8007c0c <ESP_Upkeep+0x53c>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d030      	beq.n	8007a64 <ESP_Upkeep+0x394>
 8007a02:	4b8a      	ldr	r3, [pc, #552]	@ (8007c2c <ESP_Upkeep+0x55c>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d02c      	beq.n	8007a64 <ESP_Upkeep+0x394>
 8007a0a:	4b8a      	ldr	r3, [pc, #552]	@ (8007c34 <ESP_Upkeep+0x564>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d028      	beq.n	8007a64 <ESP_Upkeep+0x394>
 8007a12:	4b8c      	ldr	r3, [pc, #560]	@ (8007c44 <ESP_Upkeep+0x574>)
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2201      	movs	r2, #1
 8007a18:	4053      	eors	r3, r2
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d021      	beq.n	8007a64 <ESP_Upkeep+0x394>
 8007a20:	4b86      	ldr	r3, [pc, #536]	@ (8007c3c <ESP_Upkeep+0x56c>)
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d01d      	beq.n	8007a64 <ESP_Upkeep+0x394>
        memcpy(ATCommandArray, AT_SEND, 3);
 8007a28:	4b77      	ldr	r3, [pc, #476]	@ (8007c08 <ESP_Upkeep+0x538>)
 8007a2a:	4a87      	ldr	r2, [pc, #540]	@ (8007c48 <ESP_Upkeep+0x578>)
 8007a2c:	8811      	ldrh	r1, [r2, #0]
 8007a2e:	8019      	strh	r1, [r3, #0]
 8007a30:	7892      	ldrb	r2, [r2, #2]
 8007a32:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8007a34:	4b78      	ldr	r3, [pc, #480]	@ (8007c18 <ESP_Upkeep+0x548>)
 8007a36:	2204      	movs	r2, #4
 8007a38:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007a3a:	4b78      	ldr	r3, [pc, #480]	@ (8007c1c <ESP_Upkeep+0x54c>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8007a40:	4b77      	ldr	r3, [pc, #476]	@ (8007c20 <ESP_Upkeep+0x550>)
 8007a42:	2202      	movs	r2, #2
 8007a44:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007a46:	f00d f87d 	bl	8014b44 <HAL_GetTick>
 8007a4a:	0002      	movs	r2, r0
 8007a4c:	4b7f      	ldr	r3, [pc, #508]	@ (8007c4c <ESP_Upkeep+0x57c>)
 8007a4e:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007a50:	4b72      	ldr	r3, [pc, #456]	@ (8007c1c <ESP_Upkeep+0x54c>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	001a      	movs	r2, r3
 8007a56:	4b6c      	ldr	r3, [pc, #432]	@ (8007c08 <ESP_Upkeep+0x538>)
 8007a58:	5c9a      	ldrb	r2, [r3, r2]
 8007a5a:	4b72      	ldr	r3, [pc, #456]	@ (8007c24 <ESP_Upkeep+0x554>)
 8007a5c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007a5e:	4b72      	ldr	r3, [pc, #456]	@ (8007c28 <ESP_Upkeep+0x558>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	701a      	strb	r2, [r3, #0]
      }
//      if(InitIsDone && ConnectionMade && beursTest && setTime){
      if(InitIsDone && ConnectionMade && APtested && setTime && (sendpwremail != DO_PWR_MAIL)){
 8007a64:	4b69      	ldr	r3, [pc, #420]	@ (8007c0c <ESP_Upkeep+0x53c>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d02b      	beq.n	8007ac4 <ESP_Upkeep+0x3f4>
 8007a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8007c2c <ESP_Upkeep+0x55c>)
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d027      	beq.n	8007ac4 <ESP_Upkeep+0x3f4>
 8007a74:	4b6f      	ldr	r3, [pc, #444]	@ (8007c34 <ESP_Upkeep+0x564>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d023      	beq.n	8007ac4 <ESP_Upkeep+0x3f4>
 8007a7c:	4b71      	ldr	r3, [pc, #452]	@ (8007c44 <ESP_Upkeep+0x574>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d01f      	beq.n	8007ac4 <ESP_Upkeep+0x3f4>
 8007a84:	4b6d      	ldr	r3, [pc, #436]	@ (8007c3c <ESP_Upkeep+0x56c>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d01b      	beq.n	8007ac4 <ESP_Upkeep+0x3f4>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8007a8c:	4b70      	ldr	r3, [pc, #448]	@ (8007c50 <ESP_Upkeep+0x580>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	4b5d      	ldr	r3, [pc, #372]	@ (8007c08 <ESP_Upkeep+0x538>)
 8007a92:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007a94:	4b60      	ldr	r3, [pc, #384]	@ (8007c18 <ESP_Upkeep+0x548>)
 8007a96:	2204      	movs	r2, #4
 8007a98:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007a9a:	4b60      	ldr	r3, [pc, #384]	@ (8007c1c <ESP_Upkeep+0x54c>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8007aa0:	4b5f      	ldr	r3, [pc, #380]	@ (8007c20 <ESP_Upkeep+0x550>)
 8007aa2:	2205      	movs	r2, #5
 8007aa4:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8007aa6:	f00d f84d 	bl	8014b44 <HAL_GetTick>
 8007aaa:	0002      	movs	r2, r0
 8007aac:	4b67      	ldr	r3, [pc, #412]	@ (8007c4c <ESP_Upkeep+0x57c>)
 8007aae:	601a      	str	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007ab0:	4b5a      	ldr	r3, [pc, #360]	@ (8007c1c <ESP_Upkeep+0x54c>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	001a      	movs	r2, r3
 8007ab6:	4b54      	ldr	r3, [pc, #336]	@ (8007c08 <ESP_Upkeep+0x538>)
 8007ab8:	5c9a      	ldrb	r2, [r3, r2]
 8007aba:	4b5a      	ldr	r3, [pc, #360]	@ (8007c24 <ESP_Upkeep+0x554>)
 8007abc:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007abe:	4b5a      	ldr	r3, [pc, #360]	@ (8007c28 <ESP_Upkeep+0x558>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8007ac4:	4b63      	ldr	r3, [pc, #396]	@ (8007c54 <ESP_Upkeep+0x584>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d100      	bne.n	8007ace <ESP_Upkeep+0x3fe>
 8007acc:	e335      	b.n	800813a <ESP_Upkeep+0xa6a>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8007ace:	4b4e      	ldr	r3, [pc, #312]	@ (8007c08 <ESP_Upkeep+0x538>)
 8007ad0:	4a61      	ldr	r2, [pc, #388]	@ (8007c58 <ESP_Upkeep+0x588>)
 8007ad2:	6811      	ldr	r1, [r2, #0]
 8007ad4:	6019      	str	r1, [r3, #0]
 8007ad6:	7912      	ldrb	r2, [r2, #4]
 8007ad8:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 8007ada:	4a60      	ldr	r2, [pc, #384]	@ (8007c5c <ESP_Upkeep+0x58c>)
 8007adc:	4b60      	ldr	r3, [pc, #384]	@ (8007c60 <ESP_Upkeep+0x590>)
 8007ade:	0019      	movs	r1, r3
 8007ae0:	2003      	movs	r0, #3
 8007ae2:	f00c fab7 	bl	8014054 <CreateLine>
        DisableConnectedDevices();
 8007ae6:	f006 fa61 	bl	800dfac <DisableConnectedDevices>
        usblog = false;
 8007aea:	4b5e      	ldr	r3, [pc, #376]	@ (8007c64 <ESP_Upkeep+0x594>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8007af0:	4b49      	ldr	r3, [pc, #292]	@ (8007c18 <ESP_Upkeep+0x548>)
 8007af2:	2204      	movs	r2, #4
 8007af4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8007af6:	4b49      	ldr	r3, [pc, #292]	@ (8007c1c <ESP_Upkeep+0x54c>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8007afc:	4b48      	ldr	r3, [pc, #288]	@ (8007c20 <ESP_Upkeep+0x550>)
 8007afe:	2203      	movs	r2, #3
 8007b00:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8007b02:	4b46      	ldr	r3, [pc, #280]	@ (8007c1c <ESP_Upkeep+0x54c>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	001a      	movs	r2, r3
 8007b08:	4b3f      	ldr	r3, [pc, #252]	@ (8007c08 <ESP_Upkeep+0x538>)
 8007b0a:	5c9a      	ldrb	r2, [r3, r2]
 8007b0c:	4b45      	ldr	r3, [pc, #276]	@ (8007c24 <ESP_Upkeep+0x554>)
 8007b0e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007b10:	4b45      	ldr	r3, [pc, #276]	@ (8007c28 <ESP_Upkeep+0x558>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	701a      	strb	r2, [r3, #0]
      }
    break;
 8007b16:	e310      	b.n	800813a <ESP_Upkeep+0xa6a>

    case ESP_STATE_SEND:
//      Debug("entry in ESP_STATE_SEND");
        ATSend = AT_Send(ATCommand);
 8007b18:	4b42      	ldr	r3, [pc, #264]	@ (8007c24 <ESP_Upkeep+0x554>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	1dfc      	adds	r4, r7, #7
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f7ff faae 	bl	8007080 <AT_Send>
 8007b24:	0003      	movs	r3, r0
 8007b26:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8007b28:	1dfb      	adds	r3, r7, #7
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d100      	bne.n	8007b32 <ESP_Upkeep+0x462>
 8007b30:	e305      	b.n	800813e <ESP_Upkeep+0xa6e>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8007b32:	4b39      	ldr	r3, [pc, #228]	@ (8007c18 <ESP_Upkeep+0x548>)
 8007b34:	2203      	movs	r2, #3
 8007b36:	701a      	strb	r2, [r3, #0]
        }
    break;
 8007b38:	e301      	b.n	800813e <ESP_Upkeep+0xa6e>

    case ESP_STATE_WAIT_FOR_REPLY:
      if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8007b3a:	4b46      	ldr	r3, [pc, #280]	@ (8007c54 <ESP_Upkeep+0x584>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d007      	beq.n	8007b52 <ESP_Upkeep+0x482>
 8007b42:	4b37      	ldr	r3, [pc, #220]	@ (8007c20 <ESP_Upkeep+0x550>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d003      	beq.n	8007b52 <ESP_Upkeep+0x482>
        EspState = ESP_STATE_MODE_SELECT;
 8007b4a:	4b33      	ldr	r3, [pc, #204]	@ (8007c18 <ESP_Upkeep+0x548>)
 8007b4c:	220b      	movs	r2, #11
 8007b4e:	701a      	strb	r2, [r3, #0]
        break;
 8007b50:	e2fc      	b.n	800814c <ESP_Upkeep+0xa7c>
      }
      if(TimestampIsReached(ESPTimeStamp)){
 8007b52:	4b45      	ldr	r3, [pc, #276]	@ (8007c68 <ESP_Upkeep+0x598>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	0018      	movs	r0, r3
 8007b58:	f00c fa26 	bl	8013fa8 <TimestampIsReached>
 8007b5c:	1e03      	subs	r3, r0, #0
 8007b5e:	d100      	bne.n	8007b62 <ESP_Upkeep+0x492>
 8007b60:	e2ef      	b.n	8008142 <ESP_Upkeep+0xa72>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8007b62:	4b31      	ldr	r3, [pc, #196]	@ (8007c28 <ESP_Upkeep+0x558>)
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	0018      	movs	r0, r3
 8007b68:	f7ff f93c 	bl	8006de4 <DMA_ProcessBuffer>
 8007b6c:	0003      	movs	r3, r0
 8007b6e:	001a      	movs	r2, r3
 8007b70:	4b3e      	ldr	r3, [pc, #248]	@ (8007c6c <ESP_Upkeep+0x59c>)
 8007b72:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8007b74:	4b3d      	ldr	r3, [pc, #244]	@ (8007c6c <ESP_Upkeep+0x59c>)
 8007b76:	781a      	ldrb	r2, [r3, #0]
 8007b78:	4b2b      	ldr	r3, [pc, #172]	@ (8007c28 <ESP_Upkeep+0x558>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	1d7c      	adds	r4, r7, #5
 8007b7e:	0019      	movs	r1, r3
 8007b80:	0010      	movs	r0, r2
 8007b82:	f7ff fa2f 	bl	8006fe4 <ATCompare>
 8007b86:	0003      	movs	r3, r0
 8007b88:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8007b8a:	4b38      	ldr	r3, [pc, #224]	@ (8007c6c <ESP_Upkeep+0x59c>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d000      	beq.n	8007b94 <ESP_Upkeep+0x4c4>
 8007b92:	e079      	b.n	8007c88 <ESP_Upkeep+0x5b8>
          if(ATCommand == AT_SENDDATA){
 8007b94:	4b23      	ldr	r3, [pc, #140]	@ (8007c24 <ESP_Upkeep+0x554>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b0f      	cmp	r3, #15
 8007b9a:	d108      	bne.n	8007bae <ESP_Upkeep+0x4de>
            ATCommand = AT_HTTPCPOST;
 8007b9c:	4b21      	ldr	r3, [pc, #132]	@ (8007c24 <ESP_Upkeep+0x554>)
 8007b9e:	220e      	movs	r2, #14
 8007ba0:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007ba2:	4b21      	ldr	r3, [pc, #132]	@ (8007c28 <ESP_Upkeep+0x558>)
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8007ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8007c1c <ESP_Upkeep+0x54c>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8007bae:	4b1a      	ldr	r3, [pc, #104]	@ (8007c18 <ESP_Upkeep+0x548>)
 8007bb0:	2204      	movs	r2, #4
 8007bb2:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8007bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8007c70 <ESP_Upkeep+0x5a0>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8007c70 <ESP_Upkeep+0x5a0>)
 8007bbe:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8007bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8007c70 <ESP_Upkeep+0x5a0>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d95f      	bls.n	8007c88 <ESP_Upkeep+0x5b8>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007bc8:	f00c ffbc 	bl	8014b44 <HAL_GetTick>
 8007bcc:	0003      	movs	r3, r0
 8007bce:	4a29      	ldr	r2, [pc, #164]	@ (8007c74 <ESP_Upkeep+0x5a4>)
 8007bd0:	189a      	adds	r2, r3, r2
 8007bd2:	4b25      	ldr	r3, [pc, #148]	@ (8007c68 <ESP_Upkeep+0x598>)
 8007bd4:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007bd6:	4b28      	ldr	r3, [pc, #160]	@ (8007c78 <ESP_Upkeep+0x5a8>)
 8007bd8:	2201      	movs	r2, #1
 8007bda:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007bdc:	f7ff f9f4 	bl	8006fc8 <clearDMABuffer>
            stop = HAL_GetTick();
 8007be0:	f00c ffb0 	bl	8014b44 <HAL_GetTick>
 8007be4:	0002      	movs	r2, r0
 8007be6:	4b25      	ldr	r3, [pc, #148]	@ (8007c7c <ESP_Upkeep+0x5ac>)
 8007be8:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8007bea:	4b24      	ldr	r3, [pc, #144]	@ (8007c7c <ESP_Upkeep+0x5ac>)
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	4b17      	ldr	r3, [pc, #92]	@ (8007c4c <ESP_Upkeep+0x57c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	4a22      	ldr	r2, [pc, #136]	@ (8007c80 <ESP_Upkeep+0x5b0>)
 8007bf6:	4923      	ldr	r1, [pc, #140]	@ (8007c84 <ESP_Upkeep+0x5b4>)
 8007bf8:	2001      	movs	r0, #1
 8007bfa:	f00c fa2b 	bl	8014054 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007bfe:	4b06      	ldr	r3, [pc, #24]	@ (8007c18 <ESP_Upkeep+0x548>)
 8007c00:	220d      	movs	r2, #13
 8007c02:	701a      	strb	r2, [r3, #0]
            break;
 8007c04:	e2a2      	b.n	800814c <ESP_Upkeep+0xa7c>
 8007c06:	46c0      	nop			@ (mov r8, r8)
 8007c08:	20000694 	.word	0x20000694
 8007c0c:	200005ad 	.word	0x200005ad
 8007c10:	200005ae 	.word	0x200005ae
 8007c14:	20000004 	.word	0x20000004
 8007c18:	20000030 	.word	0x20000030
 8007c1c:	2000069e 	.word	0x2000069e
 8007c20:	20000712 	.word	0x20000712
 8007c24:	20000711 	.word	0x20000711
 8007c28:	20000710 	.word	0x20000710
 8007c2c:	200005b0 	.word	0x200005b0
 8007c30:	20000014 	.word	0x20000014
 8007c34:	200005b1 	.word	0x200005b1
 8007c38:	20000010 	.word	0x20000010
 8007c3c:	200010af 	.word	0x200010af
 8007c40:	20000028 	.word	0x20000028
 8007c44:	20000002 	.word	0x20000002
 8007c48:	2000000c 	.word	0x2000000c
 8007c4c:	200005c0 	.word	0x200005c0
 8007c50:	20000024 	.word	0x20000024
 8007c54:	200005af 	.word	0x200005af
 8007c58:	2000001c 	.word	0x2000001c
 8007c5c:	0802b724 	.word	0x0802b724
 8007c60:	0802abd4 	.word	0x0802abd4
 8007c64:	200027ac 	.word	0x200027ac
 8007c68:	200006a4 	.word	0x200006a4
 8007c6c:	20000034 	.word	0x20000034
 8007c70:	2000069f 	.word	0x2000069f
 8007c74:	0003a980 	.word	0x0003a980
 8007c78:	200005b3 	.word	0x200005b3
 8007c7c:	200005c4 	.word	0x200005c4
 8007c80:	0802b754 	.word	0x0802b754
 8007c84:	0802ab70 	.word	0x0802ab70
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8007c88:	4bb6      	ldr	r3, [pc, #728]	@ (8007f64 <ESP_Upkeep+0x894>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	2b03      	cmp	r3, #3
 8007c8e:	d106      	bne.n	8007c9e <ESP_Upkeep+0x5ce>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007c90:	f00c ff58 	bl	8014b44 <HAL_GetTick>
 8007c94:	0003      	movs	r3, r0
 8007c96:	330a      	adds	r3, #10
 8007c98:	001a      	movs	r2, r3
 8007c9a:	4bb3      	ldr	r3, [pc, #716]	@ (8007f68 <ESP_Upkeep+0x898>)
 8007c9c:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8007c9e:	4bb1      	ldr	r3, [pc, #708]	@ (8007f64 <ESP_Upkeep+0x894>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b0a      	cmp	r3, #10
 8007ca4:	d106      	bne.n	8007cb4 <ESP_Upkeep+0x5e4>
          ESPTimeStamp = HAL_GetTick() + 10;
 8007ca6:	f00c ff4d 	bl	8014b44 <HAL_GetTick>
 8007caa:	0003      	movs	r3, r0
 8007cac:	330a      	adds	r3, #10
 8007cae:	001a      	movs	r2, r3
 8007cb0:	4bad      	ldr	r3, [pc, #692]	@ (8007f68 <ESP_Upkeep+0x898>)
 8007cb2:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8007cb4:	4bab      	ldr	r3, [pc, #684]	@ (8007f64 <ESP_Upkeep+0x894>)
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b06      	cmp	r3, #6
 8007cba:	d14b      	bne.n	8007d54 <ESP_Upkeep+0x684>
          timeoutcntr++;
 8007cbc:	4bab      	ldr	r3, [pc, #684]	@ (8007f6c <ESP_Upkeep+0x89c>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	4ba9      	ldr	r3, [pc, #676]	@ (8007f6c <ESP_Upkeep+0x89c>)
 8007cc6:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 8007cc8:	4aa9      	ldr	r2, [pc, #676]	@ (8007f70 <ESP_Upkeep+0x8a0>)
 8007cca:	4baa      	ldr	r3, [pc, #680]	@ (8007f74 <ESP_Upkeep+0x8a4>)
 8007ccc:	0019      	movs	r1, r3
 8007cce:	2001      	movs	r0, #1
 8007cd0:	f00c f9c0 	bl	8014054 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 8007cd4:	4ba5      	ldr	r3, [pc, #660]	@ (8007f6c <ESP_Upkeep+0x89c>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d924      	bls.n	8007d26 <ESP_Upkeep+0x656>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_RETRANSMIT_SEND;
 8007cdc:	f00c ff32 	bl	8014b44 <HAL_GetTick>
 8007ce0:	0003      	movs	r3, r0
 8007ce2:	4aa5      	ldr	r2, [pc, #660]	@ (8007f78 <ESP_Upkeep+0x8a8>)
 8007ce4:	189a      	adds	r2, r3, r2
 8007ce6:	4ba0      	ldr	r3, [pc, #640]	@ (8007f68 <ESP_Upkeep+0x898>)
 8007ce8:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 8007cea:	4ba4      	ldr	r3, [pc, #656]	@ (8007f7c <ESP_Upkeep+0x8ac>)
 8007cec:	2201      	movs	r2, #1
 8007cee:	701a      	strb	r2, [r3, #0]
            clearDMABuffer();
 8007cf0:	f7ff f96a 	bl	8006fc8 <clearDMABuffer>
            stop = HAL_GetTick();
 8007cf4:	f00c ff26 	bl	8014b44 <HAL_GetTick>
 8007cf8:	0002      	movs	r2, r0
 8007cfa:	4ba1      	ldr	r3, [pc, #644]	@ (8007f80 <ESP_Upkeep+0x8b0>)
 8007cfc:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8007cfe:	4ba0      	ldr	r3, [pc, #640]	@ (8007f80 <ESP_Upkeep+0x8b0>)
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	4ba0      	ldr	r3, [pc, #640]	@ (8007f84 <ESP_Upkeep+0x8b4>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	4a9f      	ldr	r2, [pc, #636]	@ (8007f88 <ESP_Upkeep+0x8b8>)
 8007d0a:	499a      	ldr	r1, [pc, #616]	@ (8007f74 <ESP_Upkeep+0x8a4>)
 8007d0c:	2001      	movs	r0, #1
 8007d0e:	f00c f9a1 	bl	8014054 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8007d12:	4b9e      	ldr	r3, [pc, #632]	@ (8007f8c <ESP_Upkeep+0x8bc>)
 8007d14:	220d      	movs	r2, #13
 8007d16:	701a      	strb	r2, [r3, #0]
            ATCommand = AT_END;
 8007d18:	4b9d      	ldr	r3, [pc, #628]	@ (8007f90 <ESP_Upkeep+0x8c0>)
 8007d1a:	2216      	movs	r2, #22
 8007d1c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_OK;
 8007d1e:	4b9d      	ldr	r3, [pc, #628]	@ (8007f94 <ESP_Upkeep+0x8c4>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	701a      	strb	r2, [r3, #0]
            break;
 8007d24:	e212      	b.n	800814c <ESP_Upkeep+0xa7c>
          }
          if(ATCommand != AT_SENDDATA){
 8007d26:	4b9a      	ldr	r3, [pc, #616]	@ (8007f90 <ESP_Upkeep+0x8c0>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b0f      	cmp	r3, #15
 8007d2c:	d003      	beq.n	8007d36 <ESP_Upkeep+0x666>
            EspState = ESP_STATE_SEND;
 8007d2e:	4b97      	ldr	r3, [pc, #604]	@ (8007f8c <ESP_Upkeep+0x8bc>)
 8007d30:	2204      	movs	r2, #4
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	e00e      	b.n	8007d54 <ESP_Upkeep+0x684>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8007d36:	4b96      	ldr	r3, [pc, #600]	@ (8007f90 <ESP_Upkeep+0x8c0>)
 8007d38:	220e      	movs	r2, #14
 8007d3a:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8007d3c:	4b96      	ldr	r3, [pc, #600]	@ (8007f98 <ESP_Upkeep+0x8c8>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	4b94      	ldr	r3, [pc, #592]	@ (8007f98 <ESP_Upkeep+0x8c8>)
 8007d46:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8007d48:	4b92      	ldr	r3, [pc, #584]	@ (8007f94 <ESP_Upkeep+0x8c4>)
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8007d4e:	4b8f      	ldr	r3, [pc, #572]	@ (8007f8c <ESP_Upkeep+0x8bc>)
 8007d50:	2204      	movs	r2, #4
 8007d52:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8007d54:	1d7b      	adds	r3, r7, #5
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d100      	bne.n	8007d5e <ESP_Upkeep+0x68e>
 8007d5c:	e1f1      	b.n	8008142 <ESP_Upkeep+0xa72>
          EspState = ESP_STATE_NEXT_AT;
 8007d5e:	4b8b      	ldr	r3, [pc, #556]	@ (8007f8c <ESP_Upkeep+0x8bc>)
 8007d60:	2205      	movs	r2, #5
 8007d62:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8007d64:	e1ed      	b.n	8008142 <ESP_Upkeep+0xa72>

    case ESP_STATE_NEXT_AT:
//      Debug("entry in ESP_STATE_NEXT_AT");
      ATCounter += 1;
 8007d66:	4b8c      	ldr	r3, [pc, #560]	@ (8007f98 <ESP_Upkeep+0x8c8>)
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	b2da      	uxtb	r2, r3
 8007d6e:	4b8a      	ldr	r3, [pc, #552]	@ (8007f98 <ESP_Upkeep+0x8c8>)
 8007d70:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8007d72:	4b89      	ldr	r3, [pc, #548]	@ (8007f98 <ESP_Upkeep+0x8c8>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	001a      	movs	r2, r3
 8007d78:	4b88      	ldr	r3, [pc, #544]	@ (8007f9c <ESP_Upkeep+0x8cc>)
 8007d7a:	5c9a      	ldrb	r2, [r3, r2]
 8007d7c:	4b84      	ldr	r3, [pc, #528]	@ (8007f90 <ESP_Upkeep+0x8c0>)
 8007d7e:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8007d80:	4b83      	ldr	r3, [pc, #524]	@ (8007f90 <ESP_Upkeep+0x8c0>)
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d102      	bne.n	8007d8e <ESP_Upkeep+0x6be>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8007d88:	4b82      	ldr	r3, [pc, #520]	@ (8007f94 <ESP_Upkeep+0x8c4>)
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8007d8e:	4b80      	ldr	r3, [pc, #512]	@ (8007f90 <ESP_Upkeep+0x8c0>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b0e      	cmp	r3, #14
 8007d94:	d102      	bne.n	8007d9c <ESP_Upkeep+0x6cc>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8007d96:	4b7f      	ldr	r3, [pc, #508]	@ (8007f94 <ESP_Upkeep+0x8c4>)
 8007d98:	2202      	movs	r2, #2
 8007d9a:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8007d9c:	4b7c      	ldr	r3, [pc, #496]	@ (8007f90 <ESP_Upkeep+0x8c0>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b0e      	cmp	r3, #14
 8007da2:	d006      	beq.n	8007db2 <ESP_Upkeep+0x6e2>
 8007da4:	4b7a      	ldr	r3, [pc, #488]	@ (8007f90 <ESP_Upkeep+0x8c0>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d002      	beq.n	8007db2 <ESP_Upkeep+0x6e2>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8007dac:	4b79      	ldr	r3, [pc, #484]	@ (8007f94 <ESP_Upkeep+0x8c4>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8007db2:	4b77      	ldr	r3, [pc, #476]	@ (8007f90 <ESP_Upkeep+0x8c0>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	2b11      	cmp	r3, #17
 8007db8:	d102      	bne.n	8007dc0 <ESP_Upkeep+0x6f0>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8007dba:	4b76      	ldr	r3, [pc, #472]	@ (8007f94 <ESP_Upkeep+0x8c4>)
 8007dbc:	2205      	movs	r2, #5
 8007dbe:	701a      	strb	r2, [r3, #0]
      }
#ifdef USE_MAIL
      if(ATCommand == AT_SENDMAIL){
 8007dc0:	4b73      	ldr	r3, [pc, #460]	@ (8007f90 <ESP_Upkeep+0x8c0>)
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	2b15      	cmp	r3, #21
 8007dc6:	d102      	bne.n	8007dce <ESP_Upkeep+0x6fe>
         ATExpectation = RECEIVE_EXPECTATION_MAIL_API;
 8007dc8:	4b72      	ldr	r3, [pc, #456]	@ (8007f94 <ESP_Upkeep+0x8c4>)
 8007dca:	2206      	movs	r2, #6
 8007dcc:	701a      	strb	r2, [r3, #0]
      }
#endif
      EspState = ESP_STATE_SEND;
 8007dce:	4b6f      	ldr	r3, [pc, #444]	@ (8007f8c <ESP_Upkeep+0x8bc>)
 8007dd0:	2204      	movs	r2, #4
 8007dd2:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8007dd4:	4b6e      	ldr	r3, [pc, #440]	@ (8007f90 <ESP_Upkeep+0x8c0>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b16      	cmp	r3, #22
 8007dda:	d000      	beq.n	8007dde <ESP_Upkeep+0x70e>
 8007ddc:	e1b3      	b.n	8008146 <ESP_Upkeep+0xa76>
        if(Mode == AT_MODE_SEND){
 8007dde:	4b70      	ldr	r3, [pc, #448]	@ (8007fa0 <ESP_Upkeep+0x8d0>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d124      	bne.n	8007e30 <ESP_Upkeep+0x760>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8007de6:	f00c fead 	bl	8014b44 <HAL_GetTick>
 8007dea:	0003      	movs	r3, r0
 8007dec:	4a6d      	ldr	r2, [pc, #436]	@ (8007fa4 <ESP_Upkeep+0x8d4>)
 8007dee:	189a      	adds	r2, r3, r2
 8007df0:	4b5d      	ldr	r3, [pc, #372]	@ (8007f68 <ESP_Upkeep+0x898>)
 8007df2:	601a      	str	r2, [r3, #0]
          clearDMABuffer();
 8007df4:	f7ff f8e8 	bl	8006fc8 <clearDMABuffer>
          stop = HAL_GetTick();
 8007df8:	f00c fea4 	bl	8014b44 <HAL_GetTick>
 8007dfc:	0002      	movs	r2, r0
 8007dfe:	4b60      	ldr	r3, [pc, #384]	@ (8007f80 <ESP_Upkeep+0x8b0>)
 8007e00:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8007e02:	4b5f      	ldr	r3, [pc, #380]	@ (8007f80 <ESP_Upkeep+0x8b0>)
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	4b5f      	ldr	r3, [pc, #380]	@ (8007f84 <ESP_Upkeep+0x8b4>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	4a66      	ldr	r2, [pc, #408]	@ (8007fa8 <ESP_Upkeep+0x8d8>)
 8007e0e:	4967      	ldr	r1, [pc, #412]	@ (8007fac <ESP_Upkeep+0x8dc>)
 8007e10:	2002      	movs	r0, #2
 8007e12:	f00c f91f 	bl	8014054 <CreateLine>
          ResetdBAmax();
 8007e16:	f006 f951 	bl	800e0bc <ResetdBAmax>
          resetMaxMeasurementValues();
 8007e1a:	f7fc ffe9 	bl	8004df0 <resetMaxMeasurementValues>
          showTime();
 8007e1e:	f001 ff6b 	bl	8009cf8 <showTime>
          ESPTransmitDone = true;
 8007e22:	4b56      	ldr	r3, [pc, #344]	@ (8007f7c <ESP_Upkeep+0x8ac>)
 8007e24:	2201      	movs	r2, #1
 8007e26:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8007e28:	4b58      	ldr	r3, [pc, #352]	@ (8007f8c <ESP_Upkeep+0x8bc>)
 8007e2a:	220d      	movs	r2, #13
 8007e2c:	701a      	strb	r2, [r3, #0]
#endif
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8007e2e:	e18a      	b.n	8008146 <ESP_Upkeep+0xa76>
        else if (Mode == AT_MODE_GETTIME) {
 8007e30:	4b5b      	ldr	r3, [pc, #364]	@ (8007fa0 <ESP_Upkeep+0x8d0>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b05      	cmp	r3, #5
 8007e36:	d13a      	bne.n	8007eae <ESP_Upkeep+0x7de>
            setTime = false;
 8007e38:	4b5d      	ldr	r3, [pc, #372]	@ (8007fb0 <ESP_Upkeep+0x8e0>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = calculateNextNTPTime();
 8007e3e:	f001 fffb 	bl	8009e38 <calculateNextNTPTime>
 8007e42:	0002      	movs	r2, r0
 8007e44:	4b5b      	ldr	r3, [pc, #364]	@ (8007fb4 <ESP_Upkeep+0x8e4>)
 8007e46:	601a      	str	r2, [r3, #0]
            ESPNTPTimeStamp += ESP_UNTIL_NEXT_NTP;
 8007e48:	4b5a      	ldr	r3, [pc, #360]	@ (8007fb4 <ESP_Upkeep+0x8e4>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a5a      	ldr	r2, [pc, #360]	@ (8007fb8 <ESP_Upkeep+0x8e8>)
 8007e4e:	189a      	adds	r2, r3, r2
 8007e50:	4b58      	ldr	r3, [pc, #352]	@ (8007fb4 <ESP_Upkeep+0x8e4>)
 8007e52:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called in %lu seconds", ESP_UNTIL_NEXT_NTP);
 8007e54:	4b58      	ldr	r3, [pc, #352]	@ (8007fb8 <ESP_Upkeep+0x8e8>)
 8007e56:	4a59      	ldr	r2, [pc, #356]	@ (8007fbc <ESP_Upkeep+0x8ec>)
 8007e58:	4954      	ldr	r1, [pc, #336]	@ (8007fac <ESP_Upkeep+0x8dc>)
 8007e5a:	2002      	movs	r0, #2
 8007e5c:	f00c f8fa 	bl	8014054 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007e60:	4b57      	ldr	r3, [pc, #348]	@ (8007fc0 <ESP_Upkeep+0x8f0>)
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	4b40      	ldr	r3, [pc, #256]	@ (8007f68 <ESP_Upkeep+0x898>)
 8007e66:	601a      	str	r2, [r3, #0]
            clearDMABuffer();
 8007e68:	f7ff f8ae 	bl	8006fc8 <clearDMABuffer>
            stop = HAL_GetTick();
 8007e6c:	f00c fe6a 	bl	8014b44 <HAL_GetTick>
 8007e70:	0002      	movs	r2, r0
 8007e72:	4b43      	ldr	r3, [pc, #268]	@ (8007f80 <ESP_Upkeep+0x8b0>)
 8007e74:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8007e76:	4b42      	ldr	r3, [pc, #264]	@ (8007f80 <ESP_Upkeep+0x8b0>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	4b42      	ldr	r3, [pc, #264]	@ (8007f84 <ESP_Upkeep+0x8b4>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	4a50      	ldr	r2, [pc, #320]	@ (8007fc4 <ESP_Upkeep+0x8f4>)
 8007e82:	494a      	ldr	r1, [pc, #296]	@ (8007fac <ESP_Upkeep+0x8dc>)
 8007e84:	2002      	movs	r0, #2
 8007e86:	f00c f8e5 	bl	8014054 <CreateLine>
            if (HAL_GetTick() < DEVICE_INIT_TIMEOUT) { // during startup the sensors are active after getting time
 8007e8a:	f00c fe5b 	bl	8014b44 <HAL_GetTick>
 8007e8e:	0003      	movs	r3, r0
 8007e90:	4a4d      	ldr	r2, [pc, #308]	@ (8007fc8 <ESP_Upkeep+0x8f8>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d804      	bhi.n	8007ea0 <ESP_Upkeep+0x7d0>
              deviceTimeOut = DEVICE_INIT_TIMEOUT;
 8007e96:	4b4d      	ldr	r3, [pc, #308]	@ (8007fcc <ESP_Upkeep+0x8fc>)
 8007e98:	4a4d      	ldr	r2, [pc, #308]	@ (8007fd0 <ESP_Upkeep+0x900>)
 8007e9a:	601a      	str	r2, [r3, #0]
              EnabledConnectedDevices();
 8007e9c:	f006 f800 	bl	800dea0 <EnabledConnectedDevices>
            EspState = ESP_STATE_DEINIT;
 8007ea0:	4b3a      	ldr	r3, [pc, #232]	@ (8007f8c <ESP_Upkeep+0x8bc>)
 8007ea2:	220d      	movs	r2, #13
 8007ea4:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8007fa0 <ESP_Upkeep+0x8d0>)
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	701a      	strb	r2, [r3, #0]
    break;
 8007eac:	e14b      	b.n	8008146 <ESP_Upkeep+0xa76>
        else if (Mode == AT_MODE_MAIL) {
 8007eae:	4b3c      	ldr	r3, [pc, #240]	@ (8007fa0 <ESP_Upkeep+0x8d0>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2b06      	cmp	r3, #6
 8007eb4:	d117      	bne.n	8007ee6 <ESP_Upkeep+0x816>
            clearDMABuffer();
 8007eb6:	f7ff f887 	bl	8006fc8 <clearDMABuffer>
            Info("Email message send");
 8007eba:	4a46      	ldr	r2, [pc, #280]	@ (8007fd4 <ESP_Upkeep+0x904>)
 8007ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8007fac <ESP_Upkeep+0x8dc>)
 8007ebe:	0019      	movs	r1, r3
 8007ec0:	2002      	movs	r0, #2
 8007ec2:	f00c f8c7 	bl	8014054 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8007ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8007fc0 <ESP_Upkeep+0x8f0>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	4b27      	ldr	r3, [pc, #156]	@ (8007f68 <ESP_Upkeep+0x898>)
 8007ecc:	601a      	str	r2, [r3, #0]
            sendpwremail = DONE;
 8007ece:	4b42      	ldr	r3, [pc, #264]	@ (8007fd8 <ESP_Upkeep+0x908>)
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_DEINIT;
 8007ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8007f8c <ESP_Upkeep+0x8bc>)
 8007ed6:	220d      	movs	r2, #13
 8007ed8:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8007eda:	4b31      	ldr	r3, [pc, #196]	@ (8007fa0 <ESP_Upkeep+0x8d0>)
 8007edc:	2202      	movs	r2, #2
 8007ede:	701a      	strb	r2, [r3, #0]
            EnabledConnectedDevices();
 8007ee0:	f005 ffde 	bl	800dea0 <EnabledConnectedDevices>
    break;
 8007ee4:	e12f      	b.n	8008146 <ESP_Upkeep+0xa76>
          EspState = ESP_STATE_RESET;
 8007ee6:	4b29      	ldr	r3, [pc, #164]	@ (8007f8c <ESP_Upkeep+0x8bc>)
 8007ee8:	2209      	movs	r2, #9
 8007eea:	701a      	strb	r2, [r3, #0]
    break;
 8007eec:	e12b      	b.n	8008146 <ESP_Upkeep+0xa76>

    case ESP_STATE_DEINIT:
//      Debug("entry in ESP_STATE_DEINIT");
      EspTurnedOn = false;
 8007eee:	4b3b      	ldr	r3, [pc, #236]	@ (8007fdc <ESP_Upkeep+0x90c>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8007ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8007fe0 <ESP_Upkeep+0x910>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2101      	movs	r1, #1
 8007efa:	0018      	movs	r0, r3
 8007efc:	f00e f8b3 	bl	8016066 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007f00:	2001      	movs	r0, #1
 8007f02:	f00c fe29 	bl	8014b58 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8007f06:	2380      	movs	r3, #128	@ 0x80
 8007f08:	011b      	lsls	r3, r3, #4
 8007f0a:	4836      	ldr	r0, [pc, #216]	@ (8007fe4 <ESP_Upkeep+0x914>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	0019      	movs	r1, r3
 8007f10:	f00e f8a9 	bl	8016066 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8007f14:	2001      	movs	r0, #1
 8007f16:	f00c fe1f 	bl	8014b58 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8007f1a:	4b31      	ldr	r3, [pc, #196]	@ (8007fe0 <ESP_Upkeep+0x910>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2102      	movs	r1, #2
 8007f20:	0018      	movs	r0, r3
 8007f22:	f00e f8a0 	bl	8016066 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8007f26:	4b19      	ldr	r3, [pc, #100]	@ (8007f8c <ESP_Upkeep+0x8bc>)
 8007f28:	2209      	movs	r2, #9
 8007f2a:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8007f2c:	2001      	movs	r0, #1
 8007f2e:	f00c fe13 	bl	8014b58 <HAL_Delay>
      ResetESPIndicator();
 8007f32:	f00a fe91 	bl	8012c58 <ResetESPIndicator>
      Debug("ESP powered off.");
 8007f36:	4a2c      	ldr	r2, [pc, #176]	@ (8007fe8 <ESP_Upkeep+0x918>)
 8007f38:	4b2c      	ldr	r3, [pc, #176]	@ (8007fec <ESP_Upkeep+0x91c>)
 8007f3a:	0019      	movs	r1, r3
 8007f3c:	2003      	movs	r0, #3
 8007f3e:	f00c f889 	bl	8014054 <CreateLine>
      if (Check_USB_PowerOn() || userToggle) {
 8007f42:	f001 fe27 	bl	8009b94 <Check_USB_PowerOn>
 8007f46:	1e03      	subs	r3, r0, #0
 8007f48:	d103      	bne.n	8007f52 <ESP_Upkeep+0x882>
 8007f4a:	4b29      	ldr	r3, [pc, #164]	@ (8007ff0 <ESP_Upkeep+0x920>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <ESP_Upkeep+0x886>
        EnabledConnectedDevices();
 8007f52:	f005 ffa5 	bl	800dea0 <EnabledConnectedDevices>
      }
      errorcntr = 0;
 8007f56:	4b27      	ldr	r3, [pc, #156]	@ (8007ff4 <ESP_Upkeep+0x924>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8007f5c:	4b03      	ldr	r3, [pc, #12]	@ (8007f6c <ESP_Upkeep+0x89c>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	701a      	strb	r2, [r3, #0]
      break;
 8007f62:	e0f3      	b.n	800814c <ESP_Upkeep+0xa7c>
 8007f64:	20000034 	.word	0x20000034
 8007f68:	200006a4 	.word	0x200006a4
 8007f6c:	200006a0 	.word	0x200006a0
 8007f70:	0802b788 	.word	0x0802b788
 8007f74:	0802ab70 	.word	0x0802ab70
 8007f78:	0000c350 	.word	0x0000c350
 8007f7c:	200005b3 	.word	0x200005b3
 8007f80:	200005c4 	.word	0x200005c4
 8007f84:	200005c0 	.word	0x200005c0
 8007f88:	0802b7c4 	.word	0x0802b7c4
 8007f8c:	20000030 	.word	0x20000030
 8007f90:	20000711 	.word	0x20000711
 8007f94:	20000710 	.word	0x20000710
 8007f98:	2000069e 	.word	0x2000069e
 8007f9c:	20000694 	.word	0x20000694
 8007fa0:	20000712 	.word	0x20000712
 8007fa4:	0003a980 	.word	0x0003a980
 8007fa8:	0802b7f4 	.word	0x0802b7f4
 8007fac:	0802ab84 	.word	0x0802ab84
 8007fb0:	20000002 	.word	0x20000002
 8007fb4:	200006a8 	.word	0x200006a8
 8007fb8:	00012686 	.word	0x00012686
 8007fbc:	0802b80c 	.word	0x0802b80c
 8007fc0:	2000002c 	.word	0x2000002c
 8007fc4:	0802b850 	.word	0x0802b850
 8007fc8:	000061a7 	.word	0x000061a7
 8007fcc:	200010c4 	.word	0x200010c4
 8007fd0:	000061a8 	.word	0x000061a8
 8007fd4:	0802b870 	.word	0x0802b870
 8007fd8:	200010af 	.word	0x200010af
 8007fdc:	200005ac 	.word	0x200005ac
 8007fe0:	50001c00 	.word	0x50001c00
 8007fe4:	50000800 	.word	0x50000800
 8007fe8:	0802b884 	.word	0x0802b884
 8007fec:	0802abd4 	.word	0x0802abd4
 8007ff0:	20002102 	.word	0x20002102
 8007ff4:	2000069f 	.word	0x2000069f

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8007ff8:	4b57      	ldr	r3, [pc, #348]	@ (8008158 <ESP_Upkeep+0xa88>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	f00b ffd3 	bl	8013fa8 <TimestampIsReached>
 8008002:	1e03      	subs	r3, r0, #0
 8008004:	d103      	bne.n	800800e <ESP_Upkeep+0x93e>
 8008006:	4b55      	ldr	r3, [pc, #340]	@ (800815c <ESP_Upkeep+0xa8c>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d047      	beq.n	800809e <ESP_Upkeep+0x9ce>
        ESPTransmitDone = false;
 800800e:	4b54      	ldr	r3, [pc, #336]	@ (8008160 <ESP_Upkeep+0xa90>)
 8008010:	2200      	movs	r2, #0
 8008012:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8008014:	4b53      	ldr	r3, [pc, #332]	@ (8008164 <ESP_Upkeep+0xa94>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d105      	bne.n	8008028 <ESP_Upkeep+0x958>
          InitIsDone = true;
 800801c:	4b52      	ldr	r3, [pc, #328]	@ (8008168 <ESP_Upkeep+0xa98>)
 800801e:	2201      	movs	r2, #1
 8008020:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8008022:	4b52      	ldr	r3, [pc, #328]	@ (800816c <ESP_Upkeep+0xa9c>)
 8008024:	220b      	movs	r2, #11
 8008026:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8008028:	4b4e      	ldr	r3, [pc, #312]	@ (8008164 <ESP_Upkeep+0xa94>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d105      	bne.n	800803c <ESP_Upkeep+0x96c>
          ConnectionMade = true;
 8008030:	4b4f      	ldr	r3, [pc, #316]	@ (8008170 <ESP_Upkeep+0xaa0>)
 8008032:	2201      	movs	r2, #1
 8008034:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8008036:	4b4d      	ldr	r3, [pc, #308]	@ (800816c <ESP_Upkeep+0xa9c>)
 8008038:	220b      	movs	r2, #11
 800803a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 800803c:	4b49      	ldr	r3, [pc, #292]	@ (8008164 <ESP_Upkeep+0xa94>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b02      	cmp	r3, #2
 8008042:	d102      	bne.n	800804a <ESP_Upkeep+0x97a>
          EspState = ESP_STATE_INIT;
 8008044:	4b49      	ldr	r3, [pc, #292]	@ (800816c <ESP_Upkeep+0xa9c>)
 8008046:	2202      	movs	r2, #2
 8008048:	701a      	strb	r2, [r3, #0]
        }
#ifdef USE_MAIL
        if(Mode == AT_MODE_MAIL){
 800804a:	4b46      	ldr	r3, [pc, #280]	@ (8008164 <ESP_Upkeep+0xa94>)
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	2b06      	cmp	r3, #6
 8008050:	d102      	bne.n	8008058 <ESP_Upkeep+0x988>
          EspState = ESP_STATE_CONFIG;
 8008052:	4b46      	ldr	r3, [pc, #280]	@ (800816c <ESP_Upkeep+0xa9c>)
 8008054:	220e      	movs	r2, #14
 8008056:	701a      	strb	r2, [r3, #0]
        }
#endif
        if(Mode == AT_MODE_RECONFIG){
 8008058:	4b42      	ldr	r3, [pc, #264]	@ (8008164 <ESP_Upkeep+0xa94>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2b03      	cmp	r3, #3
 800805e:	d108      	bne.n	8008072 <ESP_Upkeep+0x9a2>
          EspState = ESP_STATE_CONFIG;
 8008060:	4b42      	ldr	r3, [pc, #264]	@ (800816c <ESP_Upkeep+0xa9c>)
 8008062:	220e      	movs	r2, #14
 8008064:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8008066:	4a43      	ldr	r2, [pc, #268]	@ (8008174 <ESP_Upkeep+0xaa4>)
 8008068:	4b43      	ldr	r3, [pc, #268]	@ (8008178 <ESP_Upkeep+0xaa8>)
 800806a:	0019      	movs	r1, r3
 800806c:	2002      	movs	r0, #2
 800806e:	f00b fff1 	bl	8014054 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8008072:	4b3c      	ldr	r3, [pc, #240]	@ (8008164 <ESP_Upkeep+0xa94>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b04      	cmp	r3, #4
 8008078:	d105      	bne.n	8008086 <ESP_Upkeep+0x9b6>
          EspState = ESP_STATE_MODE_SELECT;
 800807a:	4b3c      	ldr	r3, [pc, #240]	@ (800816c <ESP_Upkeep+0xa9c>)
 800807c:	220b      	movs	r2, #11
 800807e:	701a      	strb	r2, [r3, #0]
          APtested = true;  // deze lijkt mij dubieus wordt in CWJAP gezet.
 8008080:	4b3e      	ldr	r3, [pc, #248]	@ (800817c <ESP_Upkeep+0xaac>)
 8008082:	2201      	movs	r2, #1
 8008084:	701a      	strb	r2, [r3, #0]
        }
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 8008086:	4b35      	ldr	r3, [pc, #212]	@ (800815c <ESP_Upkeep+0xa8c>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d020      	beq.n	80080d0 <ESP_Upkeep+0xa00>
 800808e:	4b35      	ldr	r3, [pc, #212]	@ (8008164 <ESP_Upkeep+0xa94>)
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	2b03      	cmp	r3, #3
 8008094:	d01c      	beq.n	80080d0 <ESP_Upkeep+0xa00>
          EspState = ESP_STATE_INIT;
 8008096:	4b35      	ldr	r3, [pc, #212]	@ (800816c <ESP_Upkeep+0xa9c>)
 8008098:	2202      	movs	r2, #2
 800809a:	701a      	strb	r2, [r3, #0]
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 800809c:	e018      	b.n	80080d0 <ESP_Upkeep+0xa00>
        }
      }
      else if (calculateNextNTPTime() > ESPNTPTimeStamp) {
 800809e:	f001 fecb 	bl	8009e38 <calculateNextNTPTime>
 80080a2:	0002      	movs	r2, r0
 80080a4:	4b36      	ldr	r3, [pc, #216]	@ (8008180 <ESP_Upkeep+0xab0>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d94e      	bls.n	800814a <ESP_Upkeep+0xa7a>
        if(Mode == AT_MODE_SEND ) {
 80080ac:	4b2d      	ldr	r3, [pc, #180]	@ (8008164 <ESP_Upkeep+0xa94>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d14a      	bne.n	800814a <ESP_Upkeep+0xa7a>
           Mode = AT_MODE_GETTIME;
 80080b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008164 <ESP_Upkeep+0xa94>)
 80080b6:	2205      	movs	r2, #5
 80080b8:	701a      	strb	r2, [r3, #0]
           EspState = ESP_STATE_INIT;
 80080ba:	4b2c      	ldr	r3, [pc, #176]	@ (800816c <ESP_Upkeep+0xa9c>)
 80080bc:	2202      	movs	r2, #2
 80080be:	701a      	strb	r2, [r3, #0]
           savedESPTimeStamp = ESPTimeStamp;
 80080c0:	4b25      	ldr	r3, [pc, #148]	@ (8008158 <ESP_Upkeep+0xa88>)
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	4b2f      	ldr	r3, [pc, #188]	@ (8008184 <ESP_Upkeep+0xab4>)
 80080c6:	601a      	str	r2, [r3, #0]
           setTime = true;
 80080c8:	4b2f      	ldr	r3, [pc, #188]	@ (8008188 <ESP_Upkeep+0xab8>)
 80080ca:	2201      	movs	r2, #1
 80080cc:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80080ce:	e03c      	b.n	800814a <ESP_Upkeep+0xa7a>
        if ((ReconfigSet) && (Mode != AT_MODE_RECONFIG)) {
 80080d0:	46c0      	nop			@ (mov r8, r8)
      break;
 80080d2:	e03a      	b.n	800814a <ESP_Upkeep+0xa7a>

    case ESP_STATE_CONFIG:
      if (!msgdone) {
 80080d4:	4b2d      	ldr	r3, [pc, #180]	@ (800818c <ESP_Upkeep+0xabc>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2201      	movs	r2, #1
 80080da:	4053      	eors	r3, r2
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d008      	beq.n	80080f4 <ESP_Upkeep+0xa24>
        Info("Do nothing until reset");
 80080e2:	4a24      	ldr	r2, [pc, #144]	@ (8008174 <ESP_Upkeep+0xaa4>)
 80080e4:	4b24      	ldr	r3, [pc, #144]	@ (8008178 <ESP_Upkeep+0xaa8>)
 80080e6:	0019      	movs	r1, r3
 80080e8:	2002      	movs	r0, #2
 80080ea:	f00b ffb3 	bl	8014054 <CreateLine>
        msgdone = true;
 80080ee:	4b27      	ldr	r3, [pc, #156]	@ (800818c <ESP_Upkeep+0xabc>)
 80080f0:	2201      	movs	r2, #1
 80080f2:	701a      	strb	r2, [r3, #0]
      }
      Process_PC_Config(GetUsbRxPointer());
 80080f4:	f01b f89e 	bl	8023234 <GetUsbRxPointer>
 80080f8:	0003      	movs	r3, r0
 80080fa:	0018      	movs	r0, r3
 80080fc:	f000 f97e 	bl	80083fc <Process_PC_Config>
      break;
 8008100:	e024      	b.n	800814c <ESP_Upkeep+0xa7c>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8008102:	4a23      	ldr	r2, [pc, #140]	@ (8008190 <ESP_Upkeep+0xac0>)
 8008104:	4b23      	ldr	r3, [pc, #140]	@ (8008194 <ESP_Upkeep+0xac4>)
 8008106:	0019      	movs	r1, r3
 8008108:	2001      	movs	r0, #1
 800810a:	f00b ffa3 	bl	8014054 <CreateLine>
      EspState = ESP_STATE_INIT;
 800810e:	4b17      	ldr	r3, [pc, #92]	@ (800816c <ESP_Upkeep+0xa9c>)
 8008110:	2202      	movs	r2, #2
 8008112:	701a      	strb	r2, [r3, #0]
      break;
 8008114:	e01a      	b.n	800814c <ESP_Upkeep+0xa7c>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8008116:	4a20      	ldr	r2, [pc, #128]	@ (8008198 <ESP_Upkeep+0xac8>)
 8008118:	4b1e      	ldr	r3, [pc, #120]	@ (8008194 <ESP_Upkeep+0xac4>)
 800811a:	0019      	movs	r1, r3
 800811c:	2001      	movs	r0, #1
 800811e:	f00b ff99 	bl	8014054 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8008122:	4b12      	ldr	r3, [pc, #72]	@ (800816c <ESP_Upkeep+0xa9c>)
 8008124:	2207      	movs	r2, #7
 8008126:	701a      	strb	r2, [r3, #0]
      break;
 8008128:	e010      	b.n	800814c <ESP_Upkeep+0xa7c>
      break;
 800812a:	46c0      	nop			@ (mov r8, r8)
 800812c:	e00e      	b.n	800814c <ESP_Upkeep+0xa7c>
        break;
 800812e:	46c0      	nop			@ (mov r8, r8)
 8008130:	e00c      	b.n	800814c <ESP_Upkeep+0xa7c>
      break;
 8008132:	46c0      	nop			@ (mov r8, r8)
 8008134:	e00a      	b.n	800814c <ESP_Upkeep+0xa7c>
        break;
 8008136:	46c0      	nop			@ (mov r8, r8)
 8008138:	e008      	b.n	800814c <ESP_Upkeep+0xa7c>
    break;
 800813a:	46c0      	nop			@ (mov r8, r8)
 800813c:	e006      	b.n	800814c <ESP_Upkeep+0xa7c>
    break;
 800813e:	46c0      	nop			@ (mov r8, r8)
 8008140:	e004      	b.n	800814c <ESP_Upkeep+0xa7c>
      break;
 8008142:	46c0      	nop			@ (mov r8, r8)
 8008144:	e002      	b.n	800814c <ESP_Upkeep+0xa7c>
    break;
 8008146:	46c0      	nop			@ (mov r8, r8)
 8008148:	e000      	b.n	800814c <ESP_Upkeep+0xa7c>
      break;
 800814a:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 800814c:	4b07      	ldr	r3, [pc, #28]	@ (800816c <ESP_Upkeep+0xa9c>)
 800814e:	781b      	ldrb	r3, [r3, #0]
}
 8008150:	0018      	movs	r0, r3
 8008152:	46bd      	mov	sp, r7
 8008154:	b002      	add	sp, #8
 8008156:	bdb0      	pop	{r4, r5, r7, pc}
 8008158:	200006a4 	.word	0x200006a4
 800815c:	200005af 	.word	0x200005af
 8008160:	200005b3 	.word	0x200005b3
 8008164:	20000712 	.word	0x20000712
 8008168:	200005ad 	.word	0x200005ad
 800816c:	20000030 	.word	0x20000030
 8008170:	200005b0 	.word	0x200005b0
 8008174:	0802b898 	.word	0x0802b898
 8008178:	0802ab84 	.word	0x0802ab84
 800817c:	200005b1 	.word	0x200005b1
 8008180:	200006a8 	.word	0x200006a8
 8008184:	2000002c 	.word	0x2000002c
 8008188:	20000002 	.word	0x20000002
 800818c:	200005b2 	.word	0x200005b2
 8008190:	0802b8b0 	.word	0x0802b8b0
 8008194:	0802ab70 	.word	0x0802ab70
 8008198:	0802b8c4 	.word	0x0802b8c4

0800819c <I2CSensors_Init>:
static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);
static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 80081a4:	4b12      	ldr	r3, [pc, #72]	@ (80081f0 <I2CSensors_Init+0x54>)
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	601a      	str	r2, [r3, #0]
    HIDS_Init(ReadI2C, WriteI2C);
 80081aa:	4a12      	ldr	r2, [pc, #72]	@ (80081f4 <I2CSensors_Init+0x58>)
 80081ac:	4b12      	ldr	r3, [pc, #72]	@ (80081f8 <I2CSensors_Init+0x5c>)
 80081ae:	0011      	movs	r1, r2
 80081b0:	0018      	movs	r0, r3
 80081b2:	f00c f985 	bl	80144c0 <HIDS_Init>
    SGP_Init(ReadI2C, WriteI2C);
 80081b6:	4a0f      	ldr	r2, [pc, #60]	@ (80081f4 <I2CSensors_Init+0x58>)
 80081b8:	4b0f      	ldr	r3, [pc, #60]	@ (80081f8 <I2CSensors_Init+0x5c>)
 80081ba:	0011      	movs	r1, r2
 80081bc:	0018      	movs	r0, r3
 80081be:	f008 ff05 	bl	8010fcc <SGP_Init>
    AHT_Init(ReadI2C, WriteI2C, ReadI2CDirect);
 80081c2:	4a0e      	ldr	r2, [pc, #56]	@ (80081fc <I2CSensors_Init+0x60>)
 80081c4:	490b      	ldr	r1, [pc, #44]	@ (80081f4 <I2CSensors_Init+0x58>)
 80081c6:	4b0c      	ldr	r3, [pc, #48]	@ (80081f8 <I2CSensors_Init+0x5c>)
 80081c8:	0018      	movs	r0, r3
 80081ca:	f002 fe49 	bl	800ae60 <AHT_Init>
    BMP_Init(ReadI2CMem, WriteI2CMem);
 80081ce:	4a0c      	ldr	r2, [pc, #48]	@ (8008200 <I2CSensors_Init+0x64>)
 80081d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008204 <I2CSensors_Init+0x68>)
 80081d2:	0011      	movs	r1, r2
 80081d4:	0018      	movs	r0, r3
 80081d6:	f003 fc53 	bl	800ba80 <BMP_Init>
    ENS_Init(ReadI2CMem, WriteI2CMem);
 80081da:	4a09      	ldr	r2, [pc, #36]	@ (8008200 <I2CSensors_Init+0x64>)
 80081dc:	4b09      	ldr	r3, [pc, #36]	@ (8008204 <I2CSensors_Init+0x68>)
 80081de:	0011      	movs	r1, r2
 80081e0:	0018      	movs	r0, r3
 80081e2:	f7fb fcc7 	bl	8003b74 <ENS_Init>
}
 80081e6:	46c0      	nop			@ (mov r8, r8)
 80081e8:	46bd      	mov	sp, r7
 80081ea:	b002      	add	sp, #8
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	46c0      	nop			@ (mov r8, r8)
 80081f0:	20000918 	.word	0x20000918
 80081f4:	080082b5 	.word	0x080082b5
 80081f8:	08008261 	.word	0x08008261
 80081fc:	08008209 	.word	0x08008209
 8008200:	08008385 	.word	0x08008385
 8008204:	08008309 	.word	0x08008309

08008208 <ReadI2CDirect>:

static bool ReadI2CDirect(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800820a:	b087      	sub	sp, #28
 800820c:	af02      	add	r7, sp, #8
 800820e:	6039      	str	r1, [r7, #0]
 8008210:	0011      	movs	r1, r2
 8008212:	1dfb      	adds	r3, r7, #7
 8008214:	1c02      	adds	r2, r0, #0
 8008216:	701a      	strb	r2, [r3, #0]
 8008218:	1dbb      	adds	r3, r7, #6
 800821a:	1c0a      	adds	r2, r1, #0
 800821c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive(SensorI2C, (address << 1), buffer, nrBytes, 250);
 800821e:	4b0f      	ldr	r3, [pc, #60]	@ (800825c <ReadI2CDirect+0x54>)
 8008220:	6818      	ldr	r0, [r3, #0]
 8008222:	1dfb      	adds	r3, r7, #7
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	b29b      	uxth	r3, r3
 8008228:	18db      	adds	r3, r3, r3
 800822a:	b299      	uxth	r1, r3
 800822c:	1dbb      	adds	r3, r7, #6
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	b29b      	uxth	r3, r3
 8008232:	260f      	movs	r6, #15
 8008234:	19bc      	adds	r4, r7, r6
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	25fa      	movs	r5, #250	@ 0xfa
 800823a:	9500      	str	r5, [sp, #0]
 800823c:	f00e f8ea 	bl	8016414 <HAL_I2C_Master_Receive>
 8008240:	0003      	movs	r3, r0
 8008242:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8008244:	19bb      	adds	r3, r7, r6
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d001      	beq.n	8008250 <ReadI2CDirect+0x48>
        return false;
 800824c:	2300      	movs	r3, #0
 800824e:	e000      	b.n	8008252 <ReadI2CDirect+0x4a>
    }
    return true;
 8008250:	2301      	movs	r3, #1
}
 8008252:	0018      	movs	r0, r3
 8008254:	46bd      	mov	sp, r7
 8008256:	b005      	add	sp, #20
 8008258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800825a:	46c0      	nop			@ (mov r8, r8)
 800825c:	20000918 	.word	0x20000918

08008260 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008260:	b5b0      	push	{r4, r5, r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6039      	str	r1, [r7, #0]
 8008268:	0011      	movs	r1, r2
 800826a:	1dfb      	adds	r3, r7, #7
 800826c:	1c02      	adds	r2, r0, #0
 800826e:	701a      	strb	r2, [r3, #0]
 8008270:	1dbb      	adds	r3, r7, #6
 8008272:	1c0a      	adds	r2, r1, #0
 8008274:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8008276:	4b0e      	ldr	r3, [pc, #56]	@ (80082b0 <ReadI2C+0x50>)
 8008278:	6818      	ldr	r0, [r3, #0]
 800827a:	1dfb      	adds	r3, r7, #7
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	b29b      	uxth	r3, r3
 8008280:	18db      	adds	r3, r3, r3
 8008282:	b299      	uxth	r1, r3
 8008284:	1dbb      	adds	r3, r7, #6
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	b29b      	uxth	r3, r3
 800828a:	250f      	movs	r5, #15
 800828c:	197c      	adds	r4, r7, r5
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	f00e face 	bl	8016830 <HAL_I2C_Master_Receive_DMA>
 8008294:	0003      	movs	r3, r0
 8008296:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8008298:	197b      	adds	r3, r7, r5
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <ReadI2C+0x44>
        return false;
 80082a0:	2300      	movs	r3, #0
 80082a2:	e000      	b.n	80082a6 <ReadI2C+0x46>
    }
    return true;
 80082a4:	2301      	movs	r3, #1
}
 80082a6:	0018      	movs	r0, r3
 80082a8:	46bd      	mov	sp, r7
 80082aa:	b004      	add	sp, #16
 80082ac:	bdb0      	pop	{r4, r5, r7, pc}
 80082ae:	46c0      	nop			@ (mov r8, r8)
 80082b0:	20000918 	.word	0x20000918

080082b4 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80082b4:	b5b0      	push	{r4, r5, r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6039      	str	r1, [r7, #0]
 80082bc:	0011      	movs	r1, r2
 80082be:	1dfb      	adds	r3, r7, #7
 80082c0:	1c02      	adds	r2, r0, #0
 80082c2:	701a      	strb	r2, [r3, #0]
 80082c4:	1dbb      	adds	r3, r7, #6
 80082c6:	1c0a      	adds	r2, r1, #0
 80082c8:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80082ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008304 <WriteI2C+0x50>)
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	1dfb      	adds	r3, r7, #7
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	18db      	adds	r3, r3, r3
 80082d6:	b299      	uxth	r1, r3
 80082d8:	1dbb      	adds	r3, r7, #6
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	250f      	movs	r5, #15
 80082e0:	197c      	adds	r4, r7, r5
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	f00e f99e 	bl	8016624 <HAL_I2C_Master_Transmit_DMA>
 80082e8:	0003      	movs	r3, r0
 80082ea:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80082ec:	197b      	adds	r3, r7, r5
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <WriteI2C+0x44>
        return false;
 80082f4:	2300      	movs	r3, #0
 80082f6:	e000      	b.n	80082fa <WriteI2C+0x46>
    }
    return true;
 80082f8:	2301      	movs	r3, #1
}
 80082fa:	0018      	movs	r0, r3
 80082fc:	46bd      	mov	sp, r7
 80082fe:	b004      	add	sp, #16
 8008300:	bdb0      	pop	{r4, r5, r7, pc}
 8008302:	46c0      	nop			@ (mov r8, r8)
 8008304:	20000918 	.word	0x20000918

08008308 <ReadI2CMem>:

static bool ReadI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8008308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800830a:	b08b      	sub	sp, #44	@ 0x2c
 800830c:	af04      	add	r7, sp, #16
 800830e:	0004      	movs	r4, r0
 8008310:	0008      	movs	r0, r1
 8008312:	0011      	movs	r1, r2
 8008314:	607b      	str	r3, [r7, #4]
 8008316:	250f      	movs	r5, #15
 8008318:	197b      	adds	r3, r7, r5
 800831a:	1c22      	adds	r2, r4, #0
 800831c:	701a      	strb	r2, [r3, #0]
 800831e:	260c      	movs	r6, #12
 8008320:	19bb      	adds	r3, r7, r6
 8008322:	1c02      	adds	r2, r0, #0
 8008324:	801a      	strh	r2, [r3, #0]
 8008326:	230a      	movs	r3, #10
 8008328:	18fb      	adds	r3, r7, r3
 800832a:	1c0a      	adds	r2, r1, #0
 800832c:	801a      	strh	r2, [r3, #0]
//  HAL_StatusTypeDef status = HAL_I2C_Mem_Read_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes,100);
 800832e:	4b14      	ldr	r3, [pc, #80]	@ (8008380 <ReadI2CMem+0x78>)
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	197b      	adds	r3, r7, r5
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	b29b      	uxth	r3, r3
 8008338:	18db      	adds	r3, r3, r3
 800833a:	b299      	uxth	r1, r3
 800833c:	2217      	movs	r2, #23
 800833e:	18bc      	adds	r4, r7, r2
 8008340:	230a      	movs	r3, #10
 8008342:	18fb      	adds	r3, r7, r3
 8008344:	881d      	ldrh	r5, [r3, #0]
 8008346:	19bb      	adds	r3, r7, r6
 8008348:	881a      	ldrh	r2, [r3, #0]
 800834a:	2364      	movs	r3, #100	@ 0x64
 800834c:	9302      	str	r3, [sp, #8]
 800834e:	2328      	movs	r3, #40	@ 0x28
 8008350:	2608      	movs	r6, #8
 8008352:	199b      	adds	r3, r3, r6
 8008354:	19db      	adds	r3, r3, r7
 8008356:	881b      	ldrh	r3, [r3, #0]
 8008358:	9301      	str	r3, [sp, #4]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	9300      	str	r3, [sp, #0]
 800835e:	002b      	movs	r3, r5
 8008360:	f00e fb6c 	bl	8016a3c <HAL_I2C_Mem_Read>
 8008364:	0003      	movs	r3, r0
 8008366:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 8008368:	2217      	movs	r2, #23
 800836a:	18bb      	adds	r3, r7, r2
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <ReadI2CMem+0x6e>
     return false;
 8008372:	2300      	movs	r3, #0
 8008374:	e000      	b.n	8008378 <ReadI2CMem+0x70>
   }
   return true;
 8008376:	2301      	movs	r3, #1
}
 8008378:	0018      	movs	r0, r3
 800837a:	46bd      	mov	sp, r7
 800837c:	b007      	add	sp, #28
 800837e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008380:	20000918 	.word	0x20000918

08008384 <WriteI2CMem>:

static bool WriteI2CMem(uint8_t address, uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 8008384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008386:	b089      	sub	sp, #36	@ 0x24
 8008388:	af02      	add	r7, sp, #8
 800838a:	0004      	movs	r4, r0
 800838c:	0008      	movs	r0, r1
 800838e:	0011      	movs	r1, r2
 8008390:	607b      	str	r3, [r7, #4]
 8008392:	250f      	movs	r5, #15
 8008394:	197b      	adds	r3, r7, r5
 8008396:	1c22      	adds	r2, r4, #0
 8008398:	701a      	strb	r2, [r3, #0]
 800839a:	260c      	movs	r6, #12
 800839c:	19bb      	adds	r3, r7, r6
 800839e:	1c02      	adds	r2, r0, #0
 80083a0:	801a      	strh	r2, [r3, #0]
 80083a2:	230a      	movs	r3, #10
 80083a4:	18fb      	adds	r3, r7, r3
 80083a6:	1c0a      	adds	r2, r1, #0
 80083a8:	801a      	strh	r2, [r3, #0]
   HAL_StatusTypeDef status = HAL_I2C_Mem_Write_DMA(SensorI2C, (address << 1), MemAddress, MemSize, buffer, nrBytes);
 80083aa:	4b13      	ldr	r3, [pc, #76]	@ (80083f8 <WriteI2CMem+0x74>)
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	197b      	adds	r3, r7, r5
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	18db      	adds	r3, r3, r3
 80083b6:	b299      	uxth	r1, r3
 80083b8:	2217      	movs	r2, #23
 80083ba:	18bc      	adds	r4, r7, r2
 80083bc:	230a      	movs	r3, #10
 80083be:	18fb      	adds	r3, r7, r3
 80083c0:	881d      	ldrh	r5, [r3, #0]
 80083c2:	19bb      	adds	r3, r7, r6
 80083c4:	881a      	ldrh	r2, [r3, #0]
 80083c6:	2328      	movs	r3, #40	@ 0x28
 80083c8:	2608      	movs	r6, #8
 80083ca:	199b      	adds	r3, r3, r6
 80083cc:	19db      	adds	r3, r3, r7
 80083ce:	881b      	ldrh	r3, [r3, #0]
 80083d0:	9301      	str	r3, [sp, #4]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	002b      	movs	r3, r5
 80083d8:	f00e fc64 	bl	8016ca4 <HAL_I2C_Mem_Write_DMA>
 80083dc:	0003      	movs	r3, r0
 80083de:	7023      	strb	r3, [r4, #0]
   if (status != HAL_OK) {
 80083e0:	2217      	movs	r2, #23
 80083e2:	18bb      	adds	r3, r7, r2
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <WriteI2CMem+0x6a>
     return false;
 80083ea:	2300      	movs	r3, #0
 80083ec:	e000      	b.n	80083f0 <WriteI2CMem+0x6c>
   }
   return true;
 80083ee:	2301      	movs	r3, #1
}
 80083f0:	0018      	movs	r0, r3
 80083f2:	46bd      	mov	sp, r7
 80083f4:	b007      	add	sp, #28
 80083f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083f8:	20000918 	.word	0x20000918

080083fc <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 80083fc:	b590      	push	{r4, r7, lr}
 80083fe:	b0c3      	sub	sp, #268	@ 0x10c
 8008400:	af3e      	add	r7, sp, #248	@ 0xf8
 8008402:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8008404:	f01a ff36 	bl	8023274 <GetUsbRxDataSize>
 8008408:	0003      	movs	r3, r0
 800840a:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2b05      	cmp	r3, #5
 8008410:	d972      	bls.n	80084f8 <Process_PC_Config+0xfc>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2123      	movs	r1, #35	@ 0x23
 8008416:	0018      	movs	r0, r3
 8008418:	f01e f95c 	bl	80266d4 <strchr>
 800841c:	0003      	movs	r3, r0
 800841e:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d066      	beq.n	80084f4 <Process_PC_Config+0xf8>
        {
            received.Command = message[1];
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	785a      	ldrb	r2, [r3, #1]
 800842a:	4b35      	ldr	r3, [pc, #212]	@ (8008500 <Process_PC_Config+0x104>)
 800842c:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	789a      	ldrb	r2, [r3, #2]
 8008432:	4b33      	ldr	r3, [pc, #204]	@ (8008500 <Process_PC_Config+0x104>)
 8008434:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8008436:	4b32      	ldr	r3, [pc, #200]	@ (8008500 <Process_PC_Config+0x104>)
 8008438:	785b      	ldrb	r3, [r3, #1]
 800843a:	3305      	adds	r3, #5
 800843c:	001a      	movs	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	4293      	cmp	r3, r2
 8008442:	d352      	bcc.n	80084ea <Process_PC_Config+0xee>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	1cd9      	adds	r1, r3, #3
 8008448:	4b2d      	ldr	r3, [pc, #180]	@ (8008500 <Process_PC_Config+0x104>)
 800844a:	785b      	ldrb	r3, [r3, #1]
 800844c:	001a      	movs	r2, r3
 800844e:	4b2d      	ldr	r3, [pc, #180]	@ (8008504 <Process_PC_Config+0x108>)
 8008450:	0018      	movs	r0, r3
 8008452:	f01e fa13 	bl	802687c <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8008456:	4b2a      	ldr	r3, [pc, #168]	@ (8008500 <Process_PC_Config+0x104>)
 8008458:	785b      	ldrb	r3, [r3, #1]
 800845a:	3303      	adds	r3, #3
 800845c:	001a      	movs	r2, r3
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	189b      	adds	r3, r3, r2
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	b21b      	sxth	r3, r3
 8008466:	021b      	lsls	r3, r3, #8
 8008468:	b21a      	sxth	r2, r3
 800846a:	4b25      	ldr	r3, [pc, #148]	@ (8008500 <Process_PC_Config+0x104>)
 800846c:	785b      	ldrb	r3, [r3, #1]
 800846e:	3304      	adds	r3, #4
 8008470:	68b9      	ldr	r1, [r7, #8]
 8008472:	18cb      	adds	r3, r1, r3
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	b21b      	sxth	r3, r3
 8008478:	4313      	orrs	r3, r2
 800847a:	b21b      	sxth	r3, r3
 800847c:	b299      	uxth	r1, r3
 800847e:	4a20      	ldr	r2, [pc, #128]	@ (8008500 <Process_PC_Config+0x104>)
 8008480:	2381      	movs	r3, #129	@ 0x81
 8008482:	005b      	lsls	r3, r3, #1
 8008484:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8008486:	4a1e      	ldr	r2, [pc, #120]	@ (8008500 <Process_PC_Config+0x104>)
 8008488:	2381      	movs	r3, #129	@ 0x81
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	5ad4      	ldrh	r4, [r2, r3]
 800848e:	4b1c      	ldr	r3, [pc, #112]	@ (8008500 <Process_PC_Config+0x104>)
 8008490:	785b      	ldrb	r3, [r3, #1]
 8008492:	3303      	adds	r3, #3
 8008494:	b29a      	uxth	r2, r3
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	0011      	movs	r1, r2
 800849a:	0018      	movs	r0, r3
 800849c:	f000 fa92 	bl	80089c4 <CRC16_ARC>
 80084a0:	0003      	movs	r3, r0
 80084a2:	429c      	cmp	r4, r3
 80084a4:	d007      	beq.n	80084b6 <Process_PC_Config+0xba>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80084a6:	4b16      	ldr	r3, [pc, #88]	@ (8008500 <Process_PC_Config+0x104>)
 80084a8:	785a      	ldrb	r2, [r3, #1]
 80084aa:	4b16      	ldr	r3, [pc, #88]	@ (8008504 <Process_PC_Config+0x108>)
 80084ac:	0019      	movs	r1, r3
 80084ae:	2001      	movs	r0, #1
 80084b0:	f000 fa36 	bl	8008920 <Create_Message>
 80084b4:	e016      	b.n	80084e4 <Process_PC_Config+0xe8>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80084b6:	4c12      	ldr	r4, [pc, #72]	@ (8008500 <Process_PC_Config+0x104>)
 80084b8:	466b      	mov	r3, sp
 80084ba:	0018      	movs	r0, r3
 80084bc:	0023      	movs	r3, r4
 80084be:	3310      	adds	r3, #16
 80084c0:	22f4      	movs	r2, #244	@ 0xf4
 80084c2:	0019      	movs	r1, r3
 80084c4:	f01e f9da 	bl	802687c <memcpy>
 80084c8:	6820      	ldr	r0, [r4, #0]
 80084ca:	6861      	ldr	r1, [r4, #4]
 80084cc:	68a2      	ldr	r2, [r4, #8]
 80084ce:	68e3      	ldr	r3, [r4, #12]
 80084d0:	f000 f81a 	bl	8008508 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80084d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008500 <Process_PC_Config+0x104>)
 80084d6:	7818      	ldrb	r0, [r3, #0]
 80084d8:	4b09      	ldr	r3, [pc, #36]	@ (8008500 <Process_PC_Config+0x104>)
 80084da:	785a      	ldrb	r2, [r3, #1]
 80084dc:	4b09      	ldr	r3, [pc, #36]	@ (8008504 <Process_PC_Config+0x108>)
 80084de:	0019      	movs	r1, r3
 80084e0:	f000 fa1e 	bl	8008920 <Create_Message>
                }
                ResetUsbRxDataSize();
 80084e4:	f01a feae 	bl	8023244 <ResetUsbRxDataSize>
                return;
 80084e8:	e006      	b.n	80084f8 <Process_PC_Config+0xfc>
            }
            GetUsbRxNextChunk(length);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	0018      	movs	r0, r3
 80084ee:	f01a fecb 	bl	8023288 <GetUsbRxNextChunk>
 80084f2:	e001      	b.n	80084f8 <Process_PC_Config+0xfc>
        }
        else
        {
            ResetUsbRxDataSize();
 80084f4:	f01a fea6 	bl	8023244 <ResetUsbRxDataSize>
        }
    }
}
 80084f8:	46bd      	mov	sp, r7
 80084fa:	b005      	add	sp, #20
 80084fc:	bd90      	pop	{r4, r7, pc}
 80084fe:	46c0      	nop			@ (mov r8, r8)
 8008500:	2000091c 	.word	0x2000091c
 8008504:	2000091e 	.word	0x2000091e

08008508 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8008508:	b084      	sub	sp, #16
 800850a:	b5b0      	push	{r4, r5, r7, lr}
 800850c:	b082      	sub	sp, #8
 800850e:	af00      	add	r7, sp, #0
 8008510:	2518      	movs	r5, #24
 8008512:	197c      	adds	r4, r7, r5
 8008514:	6020      	str	r0, [r4, #0]
 8008516:	6061      	str	r1, [r4, #4]
 8008518:	60a2      	str	r2, [r4, #8]
 800851a:	60e3      	str	r3, [r4, #12]
  switch (msg.Command)
 800851c:	197b      	adds	r3, r7, r5
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	2bfe      	cmp	r3, #254	@ 0xfe
 8008522:	d100      	bne.n	8008526 <ProcessCmd+0x1e>
 8008524:	e193      	b.n	800884e <ProcessCmd+0x346>
 8008526:	dd00      	ble.n	800852a <ProcessCmd+0x22>
 8008528:	e1b4      	b.n	8008894 <ProcessCmd+0x38c>
 800852a:	2b1d      	cmp	r3, #29
 800852c:	dc0a      	bgt.n	8008544 <ProcessCmd+0x3c>
 800852e:	2b00      	cmp	r3, #0
 8008530:	da00      	bge.n	8008534 <ProcessCmd+0x2c>
 8008532:	e1af      	b.n	8008894 <ProcessCmd+0x38c>
 8008534:	2b1d      	cmp	r3, #29
 8008536:	d900      	bls.n	800853a <ProcessCmd+0x32>
 8008538:	e1ac      	b.n	8008894 <ProcessCmd+0x38c>
 800853a:	009a      	lsls	r2, r3, #2
 800853c:	4bd9      	ldr	r3, [pc, #868]	@ (80088a4 <ProcessCmd+0x39c>)
 800853e:	18d3      	adds	r3, r2, r3
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	469f      	mov	pc, r3
 8008544:	2bfd      	cmp	r3, #253	@ 0xfd
 8008546:	d100      	bne.n	800854a <ProcessCmd+0x42>
 8008548:	e174      	b.n	8008834 <ProcessCmd+0x32c>
            }
            break;
        }
    }

}
 800854a:	e1a3      	b.n	8008894 <ProcessCmd+0x38c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800854c:	2118      	movs	r1, #24
 800854e:	187b      	adds	r3, r7, r1
 8008550:	785b      	ldrb	r3, [r3, #1]
 8008552:	001a      	movs	r2, r3
 8008554:	187b      	adds	r3, r7, r1
 8008556:	1c99      	adds	r1, r3, #2
 8008558:	48d3      	ldr	r0, [pc, #844]	@ (80088a8 <ProcessCmd+0x3a0>)
 800855a:	230c      	movs	r3, #12
 800855c:	f003 ff02 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 8008560:	e198      	b.n	8008894 <ProcessCmd+0x38c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008562:	2118      	movs	r1, #24
 8008564:	187b      	adds	r3, r7, r1
 8008566:	785b      	ldrb	r3, [r3, #1]
 8008568:	001a      	movs	r2, r3
 800856a:	187b      	adds	r3, r7, r1
 800856c:	1c99      	adds	r1, r3, #2
 800856e:	48cf      	ldr	r0, [pc, #828]	@ (80088ac <ProcessCmd+0x3a4>)
 8008570:	230c      	movs	r3, #12
 8008572:	f003 fef7 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 8008576:	e18d      	b.n	8008894 <ProcessCmd+0x38c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008578:	2118      	movs	r1, #24
 800857a:	187b      	adds	r3, r7, r1
 800857c:	785b      	ldrb	r3, [r3, #1]
 800857e:	001a      	movs	r2, r3
 8008580:	187b      	adds	r3, r7, r1
 8008582:	1c99      	adds	r1, r3, #2
 8008584:	48ca      	ldr	r0, [pc, #808]	@ (80088b0 <ProcessCmd+0x3a8>)
 8008586:	230c      	movs	r3, #12
 8008588:	f003 feec 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 800858c:	e182      	b.n	8008894 <ProcessCmd+0x38c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800858e:	2118      	movs	r1, #24
 8008590:	187b      	adds	r3, r7, r1
 8008592:	785b      	ldrb	r3, [r3, #1]
 8008594:	001a      	movs	r2, r3
 8008596:	187b      	adds	r3, r7, r1
 8008598:	1c99      	adds	r1, r3, #2
 800859a:	48c6      	ldr	r0, [pc, #792]	@ (80088b4 <ProcessCmd+0x3ac>)
 800859c:	230c      	movs	r3, #12
 800859e:	f003 fee1 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 80085a2:	e177      	b.n	8008894 <ProcessCmd+0x38c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085a4:	2118      	movs	r1, #24
 80085a6:	187b      	adds	r3, r7, r1
 80085a8:	785b      	ldrb	r3, [r3, #1]
 80085aa:	001a      	movs	r2, r3
 80085ac:	187b      	adds	r3, r7, r1
 80085ae:	1c99      	adds	r1, r3, #2
 80085b0:	48c1      	ldr	r0, [pc, #772]	@ (80088b8 <ProcessCmd+0x3b0>)
 80085b2:	230c      	movs	r3, #12
 80085b4:	f003 fed6 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 80085b8:	e16c      	b.n	8008894 <ProcessCmd+0x38c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085ba:	2118      	movs	r1, #24
 80085bc:	187b      	adds	r3, r7, r1
 80085be:	785b      	ldrb	r3, [r3, #1]
 80085c0:	001a      	movs	r2, r3
 80085c2:	187b      	adds	r3, r7, r1
 80085c4:	1c99      	adds	r1, r3, #2
 80085c6:	48bd      	ldr	r0, [pc, #756]	@ (80088bc <ProcessCmd+0x3b4>)
 80085c8:	230c      	movs	r3, #12
 80085ca:	f003 fecb 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 80085ce:	e161      	b.n	8008894 <ProcessCmd+0x38c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085d0:	2118      	movs	r1, #24
 80085d2:	187b      	adds	r3, r7, r1
 80085d4:	785b      	ldrb	r3, [r3, #1]
 80085d6:	001a      	movs	r2, r3
 80085d8:	187b      	adds	r3, r7, r1
 80085da:	1c99      	adds	r1, r3, #2
 80085dc:	48b8      	ldr	r0, [pc, #736]	@ (80088c0 <ProcessCmd+0x3b8>)
 80085de:	230c      	movs	r3, #12
 80085e0:	f003 fec0 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 80085e4:	e156      	b.n	8008894 <ProcessCmd+0x38c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085e6:	2118      	movs	r1, #24
 80085e8:	187b      	adds	r3, r7, r1
 80085ea:	785b      	ldrb	r3, [r3, #1]
 80085ec:	001a      	movs	r2, r3
 80085ee:	187b      	adds	r3, r7, r1
 80085f0:	1c99      	adds	r1, r3, #2
 80085f2:	48b4      	ldr	r0, [pc, #720]	@ (80088c4 <ProcessCmd+0x3bc>)
 80085f4:	230c      	movs	r3, #12
 80085f6:	f003 feb5 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 80085fa:	e14b      	b.n	8008894 <ProcessCmd+0x38c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80085fc:	2118      	movs	r1, #24
 80085fe:	187b      	adds	r3, r7, r1
 8008600:	785b      	ldrb	r3, [r3, #1]
 8008602:	001a      	movs	r2, r3
 8008604:	187b      	adds	r3, r7, r1
 8008606:	1c99      	adds	r1, r3, #2
 8008608:	48af      	ldr	r0, [pc, #700]	@ (80088c8 <ProcessCmd+0x3c0>)
 800860a:	230c      	movs	r3, #12
 800860c:	f003 feaa 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 8008610:	e140      	b.n	8008894 <ProcessCmd+0x38c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008612:	2118      	movs	r1, #24
 8008614:	187b      	adds	r3, r7, r1
 8008616:	785b      	ldrb	r3, [r3, #1]
 8008618:	001a      	movs	r2, r3
 800861a:	187b      	adds	r3, r7, r1
 800861c:	1c99      	adds	r1, r3, #2
 800861e:	48ab      	ldr	r0, [pc, #684]	@ (80088cc <ProcessCmd+0x3c4>)
 8008620:	230c      	movs	r3, #12
 8008622:	f003 fe9f 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 8008626:	e135      	b.n	8008894 <ProcessCmd+0x38c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008628:	2118      	movs	r1, #24
 800862a:	187b      	adds	r3, r7, r1
 800862c:	785b      	ldrb	r3, [r3, #1]
 800862e:	001a      	movs	r2, r3
 8008630:	187b      	adds	r3, r7, r1
 8008632:	1c99      	adds	r1, r3, #2
 8008634:	48a6      	ldr	r0, [pc, #664]	@ (80088d0 <ProcessCmd+0x3c8>)
 8008636:	230c      	movs	r3, #12
 8008638:	f003 fe94 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 800863c:	e12a      	b.n	8008894 <ProcessCmd+0x38c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 800863e:	2118      	movs	r1, #24
 8008640:	187b      	adds	r3, r7, r1
 8008642:	785b      	ldrb	r3, [r3, #1]
 8008644:	001a      	movs	r2, r3
 8008646:	187b      	adds	r3, r7, r1
 8008648:	1c99      	adds	r1, r3, #2
 800864a:	48a2      	ldr	r0, [pc, #648]	@ (80088d4 <ProcessCmd+0x3cc>)
 800864c:	2320      	movs	r3, #32
 800864e:	f003 fe89 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 8008652:	e11f      	b.n	8008894 <ProcessCmd+0x38c>
          ClearEEprom(SSIDConfigAddr, SSIDMaxLength);
 8008654:	4ba0      	ldr	r3, [pc, #640]	@ (80088d8 <ProcessCmd+0x3d0>)
 8008656:	2120      	movs	r1, #32
 8008658:	0018      	movs	r0, r3
 800865a:	f003 fec8 	bl	800c3ee <ClearEEprom>
          WriteUint8ArrayEepromSafe(SSIDConfigAddr, msg.Payload, msg.PayloadLength, SSIDMaxLength);
 800865e:	2118      	movs	r1, #24
 8008660:	187b      	adds	r3, r7, r1
 8008662:	785b      	ldrb	r3, [r3, #1]
 8008664:	001a      	movs	r2, r3
 8008666:	187b      	adds	r3, r7, r1
 8008668:	1c99      	adds	r1, r3, #2
 800866a:	489b      	ldr	r0, [pc, #620]	@ (80088d8 <ProcessCmd+0x3d0>)
 800866c:	2320      	movs	r3, #32
 800866e:	f003 fe79 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 8008672:	e10f      	b.n	8008894 <ProcessCmd+0x38c>
          ClearEEprom(pwdConfigAddr, pwdMaxLength);
 8008674:	4b99      	ldr	r3, [pc, #612]	@ (80088dc <ProcessCmd+0x3d4>)
 8008676:	2140      	movs	r1, #64	@ 0x40
 8008678:	0018      	movs	r0, r3
 800867a:	f003 feb8 	bl	800c3ee <ClearEEprom>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 800867e:	2218      	movs	r2, #24
 8008680:	18bb      	adds	r3, r7, r2
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	0019      	movs	r1, r3
 8008686:	18bb      	adds	r3, r7, r2
 8008688:	785b      	ldrb	r3, [r3, #1]
 800868a:	001c      	movs	r4, r3
 800868c:	0015      	movs	r5, r2
 800868e:	18bb      	adds	r3, r7, r2
 8008690:	1c9a      	adds	r2, r3, #2
 8008692:	4893      	ldr	r0, [pc, #588]	@ (80088e0 <ProcessCmd+0x3d8>)
 8008694:	0023      	movs	r3, r4
 8008696:	f000 f9e1 	bl	8008a5c <printf_USB>
          WriteUint8ArrayEepromSafe(pwdConfigAddr, msg.Payload, msg.PayloadLength, pwdMaxLength);
 800869a:	0029      	movs	r1, r5
 800869c:	187b      	adds	r3, r7, r1
 800869e:	785b      	ldrb	r3, [r3, #1]
 80086a0:	001a      	movs	r2, r3
 80086a2:	187b      	adds	r3, r7, r1
 80086a4:	1c99      	adds	r1, r3, #2
 80086a6:	488d      	ldr	r0, [pc, #564]	@ (80088dc <ProcessCmd+0x3d4>)
 80086a8:	2340      	movs	r3, #64	@ 0x40
 80086aa:	f003 fe5b 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 80086ae:	e0f1      	b.n	8008894 <ProcessCmd+0x38c>
            WriteUint8ArrayEepromSafe(PM1ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086b0:	2118      	movs	r1, #24
 80086b2:	187b      	adds	r3, r7, r1
 80086b4:	785b      	ldrb	r3, [r3, #1]
 80086b6:	001a      	movs	r2, r3
 80086b8:	187b      	adds	r3, r7, r1
 80086ba:	1c99      	adds	r1, r3, #2
 80086bc:	4889      	ldr	r0, [pc, #548]	@ (80088e4 <ProcessCmd+0x3dc>)
 80086be:	230c      	movs	r3, #12
 80086c0:	f003 fe50 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 80086c4:	e0e6      	b.n	8008894 <ProcessCmd+0x38c>
            WriteUint8ArrayEepromSafe(PM4ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086c6:	2118      	movs	r1, #24
 80086c8:	187b      	adds	r3, r7, r1
 80086ca:	785b      	ldrb	r3, [r3, #1]
 80086cc:	001a      	movs	r2, r3
 80086ce:	187b      	adds	r3, r7, r1
 80086d0:	1c99      	adds	r1, r3, #2
 80086d2:	4885      	ldr	r0, [pc, #532]	@ (80088e8 <ProcessCmd+0x3e0>)
 80086d4:	230c      	movs	r3, #12
 80086d6:	f003 fe45 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 80086da:	e0db      	b.n	8008894 <ProcessCmd+0x38c>
          WriteUint8ArrayEepromSafe(AHTTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086dc:	2118      	movs	r1, #24
 80086de:	187b      	adds	r3, r7, r1
 80086e0:	785b      	ldrb	r3, [r3, #1]
 80086e2:	001a      	movs	r2, r3
 80086e4:	187b      	adds	r3, r7, r1
 80086e6:	1c99      	adds	r1, r3, #2
 80086e8:	4880      	ldr	r0, [pc, #512]	@ (80088ec <ProcessCmd+0x3e4>)
 80086ea:	230c      	movs	r3, #12
 80086ec:	f003 fe3a 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 80086f0:	e0d0      	b.n	8008894 <ProcessCmd+0x38c>
          WriteUint8ArrayEepromSafe(AHTHumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80086f2:	2118      	movs	r1, #24
 80086f4:	187b      	adds	r3, r7, r1
 80086f6:	785b      	ldrb	r3, [r3, #1]
 80086f8:	001a      	movs	r2, r3
 80086fa:	187b      	adds	r3, r7, r1
 80086fc:	1c99      	adds	r1, r3, #2
 80086fe:	487c      	ldr	r0, [pc, #496]	@ (80088f0 <ProcessCmd+0x3e8>)
 8008700:	230c      	movs	r3, #12
 8008702:	f003 fe2f 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 8008706:	e0c5      	b.n	8008894 <ProcessCmd+0x38c>
          WriteUint8ArrayEepromSafe(BMPTempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008708:	2118      	movs	r1, #24
 800870a:	187b      	adds	r3, r7, r1
 800870c:	785b      	ldrb	r3, [r3, #1]
 800870e:	001a      	movs	r2, r3
 8008710:	187b      	adds	r3, r7, r1
 8008712:	1c99      	adds	r1, r3, #2
 8008714:	4877      	ldr	r0, [pc, #476]	@ (80088f4 <ProcessCmd+0x3ec>)
 8008716:	230c      	movs	r3, #12
 8008718:	f003 fe24 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 800871c:	e0ba      	b.n	8008894 <ProcessCmd+0x38c>
          WriteUint8ArrayEepromSafe(ENSAQIConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800871e:	2118      	movs	r1, #24
 8008720:	187b      	adds	r3, r7, r1
 8008722:	785b      	ldrb	r3, [r3, #1]
 8008724:	001a      	movs	r2, r3
 8008726:	187b      	adds	r3, r7, r1
 8008728:	1c99      	adds	r1, r3, #2
 800872a:	4873      	ldr	r0, [pc, #460]	@ (80088f8 <ProcessCmd+0x3f0>)
 800872c:	230c      	movs	r3, #12
 800872e:	f003 fe19 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 8008732:	e0af      	b.n	8008894 <ProcessCmd+0x38c>
          WriteUint8ArrayEepromSafe(ENSTVOCConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008734:	2118      	movs	r1, #24
 8008736:	187b      	adds	r3, r7, r1
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	001a      	movs	r2, r3
 800873c:	187b      	adds	r3, r7, r1
 800873e:	1c99      	adds	r1, r3, #2
 8008740:	486e      	ldr	r0, [pc, #440]	@ (80088fc <ProcessCmd+0x3f4>)
 8008742:	230c      	movs	r3, #12
 8008744:	f003 fe0e 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 8008748:	e0a4      	b.n	8008894 <ProcessCmd+0x38c>
          WriteUint8ArrayEepromSafe(ENSeCO2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800874a:	2118      	movs	r1, #24
 800874c:	187b      	adds	r3, r7, r1
 800874e:	785b      	ldrb	r3, [r3, #1]
 8008750:	001a      	movs	r2, r3
 8008752:	187b      	adds	r3, r7, r1
 8008754:	1c99      	adds	r1, r3, #2
 8008756:	486a      	ldr	r0, [pc, #424]	@ (8008900 <ProcessCmd+0x3f8>)
 8008758:	230c      	movs	r3, #12
 800875a:	f003 fe03 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 800875e:	e099      	b.n	8008894 <ProcessCmd+0x38c>
          WriteUint8ArrayEepromSafe(SEN55TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008760:	2118      	movs	r1, #24
 8008762:	187b      	adds	r3, r7, r1
 8008764:	785b      	ldrb	r3, [r3, #1]
 8008766:	001a      	movs	r2, r3
 8008768:	187b      	adds	r3, r7, r1
 800876a:	1c99      	adds	r1, r3, #2
 800876c:	4865      	ldr	r0, [pc, #404]	@ (8008904 <ProcessCmd+0x3fc>)
 800876e:	230c      	movs	r3, #12
 8008770:	f003 fdf8 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 8008774:	e08e      	b.n	8008894 <ProcessCmd+0x38c>
          WriteUint8ArrayEepromSafe(SEN55HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008776:	2118      	movs	r1, #24
 8008778:	187b      	adds	r3, r7, r1
 800877a:	785b      	ldrb	r3, [r3, #1]
 800877c:	001a      	movs	r2, r3
 800877e:	187b      	adds	r3, r7, r1
 8008780:	1c99      	adds	r1, r3, #2
 8008782:	4861      	ldr	r0, [pc, #388]	@ (8008908 <ProcessCmd+0x400>)
 8008784:	230c      	movs	r3, #12
 8008786:	f003 fded 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 800878a:	e083      	b.n	8008894 <ProcessCmd+0x38c>
          ClearEEprom(SendFromNameConfigAddr, SendFromNameMaxLength);
 800878c:	4b5f      	ldr	r3, [pc, #380]	@ (800890c <ProcessCmd+0x404>)
 800878e:	2130      	movs	r1, #48	@ 0x30
 8008790:	0018      	movs	r0, r3
 8008792:	f003 fe2c 	bl	800c3ee <ClearEEprom>
          WriteUint8ArrayEepromSafe(SendFromNameConfigAddr, msg.Payload, msg.PayloadLength, SendFromNameMaxLength);
 8008796:	2118      	movs	r1, #24
 8008798:	187b      	adds	r3, r7, r1
 800879a:	785b      	ldrb	r3, [r3, #1]
 800879c:	001a      	movs	r2, r3
 800879e:	187b      	adds	r3, r7, r1
 80087a0:	1c99      	adds	r1, r3, #2
 80087a2:	485a      	ldr	r0, [pc, #360]	@ (800890c <ProcessCmd+0x404>)
 80087a4:	2330      	movs	r3, #48	@ 0x30
 80087a6:	f003 fddd 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 80087aa:	e073      	b.n	8008894 <ProcessCmd+0x38c>
          ClearEEprom(SendToNameConfigAddr, SendToNameMaxLength);
 80087ac:	4b58      	ldr	r3, [pc, #352]	@ (8008910 <ProcessCmd+0x408>)
 80087ae:	2130      	movs	r1, #48	@ 0x30
 80087b0:	0018      	movs	r0, r3
 80087b2:	f003 fe1c 	bl	800c3ee <ClearEEprom>
          printf_USB("(command: %d, payload to write: %s, length: %d\r\n",msg.Command, msg.Payload, msg.PayloadLength);
 80087b6:	2218      	movs	r2, #24
 80087b8:	18bb      	adds	r3, r7, r2
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	0019      	movs	r1, r3
 80087be:	18bb      	adds	r3, r7, r2
 80087c0:	785b      	ldrb	r3, [r3, #1]
 80087c2:	001c      	movs	r4, r3
 80087c4:	0015      	movs	r5, r2
 80087c6:	18bb      	adds	r3, r7, r2
 80087c8:	1c9a      	adds	r2, r3, #2
 80087ca:	4845      	ldr	r0, [pc, #276]	@ (80088e0 <ProcessCmd+0x3d8>)
 80087cc:	0023      	movs	r3, r4
 80087ce:	f000 f945 	bl	8008a5c <printf_USB>
          WriteUint8ArrayEepromSafe(SendToNameConfigAddr, msg.Payload, msg.PayloadLength, SendToNameMaxLength);
 80087d2:	0029      	movs	r1, r5
 80087d4:	187b      	adds	r3, r7, r1
 80087d6:	785b      	ldrb	r3, [r3, #1]
 80087d8:	001a      	movs	r2, r3
 80087da:	187b      	adds	r3, r7, r1
 80087dc:	1c99      	adds	r1, r3, #2
 80087de:	484c      	ldr	r0, [pc, #304]	@ (8008910 <ProcessCmd+0x408>)
 80087e0:	2330      	movs	r3, #48	@ 0x30
 80087e2:	f003 fdbf 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 80087e6:	e055      	b.n	8008894 <ProcessCmd+0x38c>
          ClearEEprom(MailAPIKeyConfigAddr, MailAPIKeyMaxLength);
 80087e8:	4b4a      	ldr	r3, [pc, #296]	@ (8008914 <ProcessCmd+0x40c>)
 80087ea:	2130      	movs	r1, #48	@ 0x30
 80087ec:	0018      	movs	r0, r3
 80087ee:	f003 fdfe 	bl	800c3ee <ClearEEprom>
          WriteUint8ArrayEepromSafe(MailAPIKeyConfigAddr, msg.Payload, msg.PayloadLength, MailAPIKeyMaxLength);
 80087f2:	2118      	movs	r1, #24
 80087f4:	187b      	adds	r3, r7, r1
 80087f6:	785b      	ldrb	r3, [r3, #1]
 80087f8:	001a      	movs	r2, r3
 80087fa:	187b      	adds	r3, r7, r1
 80087fc:	1c99      	adds	r1, r3, #2
 80087fe:	4845      	ldr	r0, [pc, #276]	@ (8008914 <ProcessCmd+0x40c>)
 8008800:	2330      	movs	r3, #48	@ 0x30
 8008802:	f003 fdaf 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 8008806:	e045      	b.n	8008894 <ProcessCmd+0x38c>
          WriteUint8ArrayEepromSafe(hPaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8008808:	2118      	movs	r1, #24
 800880a:	187b      	adds	r3, r7, r1
 800880c:	785b      	ldrb	r3, [r3, #1]
 800880e:	001a      	movs	r2, r3
 8008810:	187b      	adds	r3, r7, r1
 8008812:	1c99      	adds	r1, r3, #2
 8008814:	4840      	ldr	r0, [pc, #256]	@ (8008918 <ProcessCmd+0x410>)
 8008816:	230c      	movs	r3, #12
 8008818:	f003 fda4 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 800881c:	e03a      	b.n	8008894 <ProcessCmd+0x38c>
          WriteUint8ArrayEepromSafe(UptimeConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800881e:	2118      	movs	r1, #24
 8008820:	187b      	adds	r3, r7, r1
 8008822:	785b      	ldrb	r3, [r3, #1]
 8008824:	001a      	movs	r2, r3
 8008826:	187b      	adds	r3, r7, r1
 8008828:	1c99      	adds	r1, r3, #2
 800882a:	483c      	ldr	r0, [pc, #240]	@ (800891c <ProcessCmd+0x414>)
 800882c:	230c      	movs	r3, #12
 800882e:	f003 fd99 	bl	800c364 <WriteUint8ArrayEepromSafe>
        break;
 8008832:	e02f      	b.n	8008894 <ProcessCmd+0x38c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8008834:	2396      	movs	r3, #150	@ 0x96
 8008836:	33ff      	adds	r3, #255	@ 0xff
 8008838:	4a1b      	ldr	r2, [pc, #108]	@ (80088a8 <ProcessCmd+0x3a0>)
 800883a:	0019      	movs	r1, r3
 800883c:	0010      	movs	r0, r2
 800883e:	f003 fdd6 	bl	800c3ee <ClearEEprom>
            ClearEEprom(SSIDStartAddr, IPrelatedConfigSize);
 8008842:	4b25      	ldr	r3, [pc, #148]	@ (80088d8 <ProcessCmd+0x3d0>)
 8008844:	21f0      	movs	r1, #240	@ 0xf0
 8008846:	0018      	movs	r0, r3
 8008848:	f003 fdd1 	bl	800c3ee <ClearEEprom>
        break;
 800884c:	e022      	b.n	8008894 <ProcessCmd+0x38c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 800884e:	2118      	movs	r1, #24
 8008850:	187b      	adds	r3, r7, r1
 8008852:	789b      	ldrb	r3, [r3, #2]
 8008854:	b21b      	sxth	r3, r3
 8008856:	021b      	lsls	r3, r3, #8
 8008858:	b21a      	sxth	r2, r3
 800885a:	187b      	adds	r3, r7, r1
 800885c:	78db      	ldrb	r3, [r3, #3]
 800885e:	b21b      	sxth	r3, r3
 8008860:	4313      	orrs	r3, r2
 8008862:	b21a      	sxth	r2, r3
 8008864:	1dbb      	adds	r3, r7, #6
 8008866:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8008868:	1dbb      	adds	r3, r7, #6
 800886a:	881a      	ldrh	r2, [r3, #0]
 800886c:	23c0      	movs	r3, #192	@ 0xc0
 800886e:	015b      	lsls	r3, r3, #5
 8008870:	429a      	cmp	r2, r3
 8008872:	d207      	bcs.n	8008884 <ProcessCmd+0x37c>
                ClearEEprom(EEPromStartAddr, size);
 8008874:	1dbb      	adds	r3, r7, #6
 8008876:	881b      	ldrh	r3, [r3, #0]
 8008878:	4a0b      	ldr	r2, [pc, #44]	@ (80088a8 <ProcessCmd+0x3a0>)
 800887a:	0019      	movs	r1, r3
 800887c:	0010      	movs	r0, r2
 800887e:	f003 fdb6 	bl	800c3ee <ClearEEprom>
            break;
 8008882:	e006      	b.n	8008892 <ProcessCmd+0x38a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8008884:	23c0      	movs	r3, #192	@ 0xc0
 8008886:	015b      	lsls	r3, r3, #5
 8008888:	4a07      	ldr	r2, [pc, #28]	@ (80088a8 <ProcessCmd+0x3a0>)
 800888a:	0019      	movs	r1, r3
 800888c:	0010      	movs	r0, r2
 800888e:	f003 fdae 	bl	800c3ee <ClearEEprom>
            break;
 8008892:	46c0      	nop			@ (mov r8, r8)
}
 8008894:	46c0      	nop			@ (mov r8, r8)
 8008896:	46bd      	mov	sp, r7
 8008898:	b002      	add	sp, #8
 800889a:	bcb0      	pop	{r4, r5, r7}
 800889c:	bc08      	pop	{r3}
 800889e:	b004      	add	sp, #16
 80088a0:	4718      	bx	r3
 80088a2:	46c0      	nop			@ (mov r8, r8)
 80088a4:	0802e6fc 	.word	0x0802e6fc
 80088a8:	08080000 	.word	0x08080000
 80088ac:	0808000c 	.word	0x0808000c
 80088b0:	08080018 	.word	0x08080018
 80088b4:	08080024 	.word	0x08080024
 80088b8:	08080030 	.word	0x08080030
 80088bc:	08080048 	.word	0x08080048
 80088c0:	0808003c 	.word	0x0808003c
 80088c4:	08080054 	.word	0x08080054
 80088c8:	08080060 	.word	0x08080060
 80088cc:	0808006c 	.word	0x0808006c
 80088d0:	08080078 	.word	0x08080078
 80088d4:	08080090 	.word	0x08080090
 80088d8:	08080200 	.word	0x08080200
 80088dc:	08080220 	.word	0x08080220
 80088e0:	0802b8f4 	.word	0x0802b8f4
 80088e4:	080800b0 	.word	0x080800b0
 80088e8:	080800bc 	.word	0x080800bc
 80088ec:	080800c8 	.word	0x080800c8
 80088f0:	080800d4 	.word	0x080800d4
 80088f4:	080800e0 	.word	0x080800e0
 80088f8:	080800ec 	.word	0x080800ec
 80088fc:	080800f8 	.word	0x080800f8
 8008900:	08080104 	.word	0x08080104
 8008904:	08080170 	.word	0x08080170
 8008908:	0808017c 	.word	0x0808017c
 800890c:	08080260 	.word	0x08080260
 8008910:	08080290 	.word	0x08080290
 8008914:	080802c0 	.word	0x080802c0
 8008918:	08080188 	.word	0x08080188
 800891c:	080801a0 	.word	0x080801a0

08008920 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8008920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6039      	str	r1, [r7, #0]
 8008928:	0011      	movs	r1, r2
 800892a:	1dfb      	adds	r3, r7, #7
 800892c:	1c02      	adds	r2, r0, #0
 800892e:	701a      	strb	r2, [r3, #0]
 8008930:	1dbb      	adds	r3, r7, #6
 8008932:	1c0a      	adds	r2, r1, #0
 8008934:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREAMBLE[0];
 8008936:	2223      	movs	r2, #35	@ 0x23
 8008938:	4b20      	ldr	r3, [pc, #128]	@ (80089bc <Create_Message+0x9c>)
 800893a:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 800893c:	4b1f      	ldr	r3, [pc, #124]	@ (80089bc <Create_Message+0x9c>)
 800893e:	1dfa      	adds	r2, r7, #7
 8008940:	7812      	ldrb	r2, [r2, #0]
 8008942:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8008944:	4b1d      	ldr	r3, [pc, #116]	@ (80089bc <Create_Message+0x9c>)
 8008946:	1dba      	adds	r2, r7, #6
 8008948:	7812      	ldrb	r2, [r2, #0]
 800894a:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 800894c:	1dbb      	adds	r3, r7, #6
 800894e:	781a      	ldrb	r2, [r3, #0]
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	4b1b      	ldr	r3, [pc, #108]	@ (80089c0 <Create_Message+0xa0>)
 8008954:	0018      	movs	r0, r3
 8008956:	f01d ff91 	bl	802687c <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 800895a:	1dbb      	adds	r3, r7, #6
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	b29a      	uxth	r2, r3
 8008960:	250e      	movs	r5, #14
 8008962:	197b      	adds	r3, r7, r5
 8008964:	3203      	adds	r2, #3
 8008966:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8008968:	260c      	movs	r6, #12
 800896a:	19bc      	adds	r4, r7, r6
 800896c:	197b      	adds	r3, r7, r5
 800896e:	881a      	ldrh	r2, [r3, #0]
 8008970:	4b12      	ldr	r3, [pc, #72]	@ (80089bc <Create_Message+0x9c>)
 8008972:	0011      	movs	r1, r2
 8008974:	0018      	movs	r0, r3
 8008976:	f000 f825 	bl	80089c4 <CRC16_ARC>
 800897a:	0003      	movs	r3, r0
 800897c:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 800897e:	0030      	movs	r0, r6
 8008980:	183b      	adds	r3, r7, r0
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	0a1b      	lsrs	r3, r3, #8
 8008986:	b29a      	uxth	r2, r3
 8008988:	197b      	adds	r3, r7, r5
 800898a:	881b      	ldrh	r3, [r3, #0]
 800898c:	b2d1      	uxtb	r1, r2
 800898e:	4a0b      	ldr	r2, [pc, #44]	@ (80089bc <Create_Message+0x9c>)
 8008990:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8008992:	197b      	adds	r3, r7, r5
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	3301      	adds	r3, #1
 8008998:	183a      	adds	r2, r7, r0
 800899a:	8812      	ldrh	r2, [r2, #0]
 800899c:	b2d1      	uxtb	r1, r2
 800899e:	4a07      	ldr	r2, [pc, #28]	@ (80089bc <Create_Message+0x9c>)
 80089a0:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 80089a2:	197b      	adds	r3, r7, r5
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	3302      	adds	r3, #2
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	4b04      	ldr	r3, [pc, #16]	@ (80089bc <Create_Message+0x9c>)
 80089ac:	0011      	movs	r1, r2
 80089ae:	0018      	movs	r0, r3
 80089b0:	f01a fc06 	bl	80231c0 <CDC_Transmit_FS>
}
 80089b4:	46c0      	nop			@ (mov r8, r8)
 80089b6:	46bd      	mov	sp, r7
 80089b8:	b005      	add	sp, #20
 80089ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089bc:	20000a28 	.word	0x20000a28
 80089c0:	20000a2b 	.word	0x20000a2b

080089c4 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	000a      	movs	r2, r1
 80089ce:	1cbb      	adds	r3, r7, #2
 80089d0:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80089d2:	2316      	movs	r3, #22
 80089d4:	18fb      	adds	r3, r7, r3
 80089d6:	2200      	movs	r2, #0
 80089d8:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80089da:	2300      	movs	r3, #0
 80089dc:	613b      	str	r3, [r7, #16]
 80089de:	e02e      	b.n	8008a3e <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	18d3      	adds	r3, r2, r3
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	0019      	movs	r1, r3
 80089ea:	2216      	movs	r2, #22
 80089ec:	18bb      	adds	r3, r7, r2
 80089ee:	18ba      	adds	r2, r7, r2
 80089f0:	8812      	ldrh	r2, [r2, #0]
 80089f2:	404a      	eors	r2, r1
 80089f4:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 80089f6:	2300      	movs	r3, #0
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	e01a      	b.n	8008a32 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80089fc:	2116      	movs	r1, #22
 80089fe:	187b      	adds	r3, r7, r1
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	2201      	movs	r2, #1
 8008a04:	4013      	ands	r3, r2
 8008a06:	d00b      	beq.n	8008a20 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8008a08:	187b      	adds	r3, r7, r1
 8008a0a:	187a      	adds	r2, r7, r1
 8008a0c:	8812      	ldrh	r2, [r2, #0]
 8008a0e:	0852      	lsrs	r2, r2, #1
 8008a10:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8008a12:	187b      	adds	r3, r7, r1
 8008a14:	187a      	adds	r2, r7, r1
 8008a16:	8812      	ldrh	r2, [r2, #0]
 8008a18:	490f      	ldr	r1, [pc, #60]	@ (8008a58 <CRC16_ARC+0x94>)
 8008a1a:	404a      	eors	r2, r1
 8008a1c:	801a      	strh	r2, [r3, #0]
 8008a1e:	e005      	b.n	8008a2c <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8008a20:	2216      	movs	r2, #22
 8008a22:	18bb      	adds	r3, r7, r2
 8008a24:	18ba      	adds	r2, r7, r2
 8008a26:	8812      	ldrh	r2, [r2, #0]
 8008a28:	0852      	lsrs	r2, r2, #1
 8008a2a:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b07      	cmp	r3, #7
 8008a36:	dde1      	ble.n	80089fc <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	613b      	str	r3, [r7, #16]
 8008a3e:	1cbb      	adds	r3, r7, #2
 8008a40:	881b      	ldrh	r3, [r3, #0]
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	dbcb      	blt.n	80089e0 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8008a48:	2316      	movs	r3, #22
 8008a4a:	18fb      	adds	r3, r7, r3
 8008a4c:	881b      	ldrh	r3, [r3, #0]
}
 8008a4e:	0018      	movs	r0, r3
 8008a50:	46bd      	mov	sp, r7
 8008a52:	b006      	add	sp, #24
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	46c0      	nop			@ (mov r8, r8)
 8008a58:	ffffa001 	.word	0xffffa001

08008a5c <printf_USB>:

void printf_USB(const char* message, ...)
{
 8008a5c:	b40f      	push	{r0, r1, r2, r3}
 8008a5e:	b590      	push	{r4, r7, lr}
 8008a60:	b0a9      	sub	sp, #164	@ 0xa4
 8008a62:	af00      	add	r7, sp, #0
  char string[150];
  va_list args;
  va_start(args, message);
 8008a64:	23ac      	movs	r3, #172	@ 0xac
 8008a66:	2108      	movs	r1, #8
 8008a68:	185b      	adds	r3, r3, r1
 8008a6a:	19db      	adds	r3, r3, r7
 8008a6c:	607b      	str	r3, [r7, #4]
  vsprintf(string, message, args);
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	23a8      	movs	r3, #168	@ 0xa8
 8008a72:	185b      	adds	r3, r3, r1
 8008a74:	19db      	adds	r3, r3, r7
 8008a76:	6819      	ldr	r1, [r3, #0]
 8008a78:	2408      	movs	r4, #8
 8008a7a:	193b      	adds	r3, r7, r4
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	f01d fd75 	bl	802656c <vsiprintf>
  va_end(args);
  CDC_Transmit_FS((uint8_t*)string, strlen(string));
 8008a82:	193b      	adds	r3, r7, r4
 8008a84:	0018      	movs	r0, r3
 8008a86:	f7f7 fb71 	bl	800016c <strlen>
 8008a8a:	0003      	movs	r3, r0
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	193b      	adds	r3, r7, r4
 8008a90:	0011      	movs	r1, r2
 8008a92:	0018      	movs	r0, r3
 8008a94:	f01a fb94 	bl	80231c0 <CDC_Transmit_FS>
}
 8008a98:	46c0      	nop			@ (mov r8, r8)
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	b029      	add	sp, #164	@ 0xa4
 8008a9e:	bc90      	pop	{r4, r7}
 8008aa0:	bc08      	pop	{r3}
 8008aa2:	b004      	add	sp, #16
 8008aa4:	4718      	bx	r3

08008aa6 <PC_selectout>:

void PC_selectout(char *msg, bool usb_out) {
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b082      	sub	sp, #8
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	000a      	movs	r2, r1
 8008ab0:	1cfb      	adds	r3, r7, #3
 8008ab2:	701a      	strb	r2, [r3, #0]
  if (usb_out){
 8008ab4:	1cfb      	adds	r3, r7, #3
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d006      	beq.n	8008aca <PC_selectout+0x24>
    printf_USB(msg);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	0018      	movs	r0, r3
 8008ac0:	f7ff ffcc 	bl	8008a5c <printf_USB>
    HAL_Delay(10); //wait for the host poll of the USB buffer
 8008ac4:	200a      	movs	r0, #10
 8008ac6:	f00c f847 	bl	8014b58 <HAL_Delay>
  }
//  else {
    printf(msg);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	0018      	movs	r0, r3
 8008ace:	f01d fc1f 	bl	8026310 <iprintf>
//  }
}
 8008ad2:	46c0      	nop			@ (mov r8, r8)
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	b002      	add	sp, #8
 8008ad8:	bd80      	pop	{r7, pc}
	...

08008adc <PC_show_Keys>:

void PC_show_Keys() {
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
  static uint8_t hPaConfig[IdSize];               // 28 was 5
  static uint8_t UptimeConfig[IdSize];            // 29

  static char Buffer[25];
  static char msg[70];
  if(Check_USB_PowerOn()){
 8008ae0:	f001 f858 	bl	8009b94 <Check_USB_PowerOn>
 8008ae4:	1e03      	subs	r3, r0, #0
 8008ae6:	d005      	beq.n	8008af4 <PC_show_Keys+0x18>
    usb_out = true;
 8008ae8:	4b01      	ldr	r3, [pc, #4]	@ (8008af0 <PC_show_Keys+0x14>)
 8008aea:	2201      	movs	r2, #1
 8008aec:	701a      	strb	r2, [r3, #0]
 8008aee:	e004      	b.n	8008afa <PC_show_Keys+0x1e>
 8008af0:	20000b2d 	.word	0x20000b2d
  }
  else {
    usb_out = false;
 8008af4:	4bfd      	ldr	r3, [pc, #1012]	@ (8008eec <PC_show_Keys+0x410>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	701a      	strb	r2, [r3, #0]
  }
  sprintf(msg, "Overview of stored keys:\r\n");
 8008afa:	4afd      	ldr	r2, [pc, #1012]	@ (8008ef0 <PC_show_Keys+0x414>)
 8008afc:	4bfd      	ldr	r3, [pc, #1012]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008afe:	0011      	movs	r1, r2
 8008b00:	0018      	movs	r0, r3
 8008b02:	f01d fc75 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b06:	4bf9      	ldr	r3, [pc, #996]	@ (8008eec <PC_show_Keys+0x410>)
 8008b08:	781a      	ldrb	r2, [r3, #0]
 8008b0a:	4bfa      	ldr	r3, [pc, #1000]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008b0c:	0011      	movs	r1, r2
 8008b0e:	0018      	movs	r0, r3
 8008b10:	f7ff ffc9 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8008b14:	4bf8      	ldr	r3, [pc, #992]	@ (8008ef8 <PC_show_Keys+0x41c>)
 8008b16:	48f9      	ldr	r0, [pc, #996]	@ (8008efc <PC_show_Keys+0x420>)
 8008b18:	220c      	movs	r2, #12
 8008b1a:	0019      	movs	r1, r3
 8008b1c:	f003 fc3e 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, boxConfig);
 8008b20:	4af5      	ldr	r2, [pc, #980]	@ (8008ef8 <PC_show_Keys+0x41c>)
 8008b22:	4bf7      	ldr	r3, [pc, #988]	@ (8008f00 <PC_show_Keys+0x424>)
 8008b24:	0011      	movs	r1, r2
 8008b26:	0018      	movs	r0, r3
 8008b28:	f7fc fbe4 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - Box id ------------------------: %s\r\n", BoxConfigCmd, Buffer);
 8008b2c:	4bf4      	ldr	r3, [pc, #976]	@ (8008f00 <PC_show_Keys+0x424>)
 8008b2e:	49f5      	ldr	r1, [pc, #980]	@ (8008f04 <PC_show_Keys+0x428>)
 8008b30:	48f0      	ldr	r0, [pc, #960]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	f01d fc5c 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b38:	4bec      	ldr	r3, [pc, #944]	@ (8008eec <PC_show_Keys+0x410>)
 8008b3a:	781a      	ldrb	r2, [r3, #0]
 8008b3c:	4bed      	ldr	r3, [pc, #948]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008b3e:	0011      	movs	r1, r2
 8008b40:	0018      	movs	r0, r3
 8008b42:	f7ff ffb0 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8008b46:	4bf0      	ldr	r3, [pc, #960]	@ (8008f08 <PC_show_Keys+0x42c>)
 8008b48:	48f0      	ldr	r0, [pc, #960]	@ (8008f0c <PC_show_Keys+0x430>)
 8008b4a:	220c      	movs	r2, #12
 8008b4c:	0019      	movs	r1, r3
 8008b4e:	f003 fc25 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, tempConfig);
 8008b52:	4aed      	ldr	r2, [pc, #948]	@ (8008f08 <PC_show_Keys+0x42c>)
 8008b54:	4bea      	ldr	r3, [pc, #936]	@ (8008f00 <PC_show_Keys+0x424>)
 8008b56:	0011      	movs	r1, r2
 8008b58:	0018      	movs	r0, r3
 8008b5a:	f7fc fbcb 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - Temperature sensor id: --------: %s\r\n", TempConfigCmd, Buffer);
 8008b5e:	4be8      	ldr	r3, [pc, #928]	@ (8008f00 <PC_show_Keys+0x424>)
 8008b60:	49eb      	ldr	r1, [pc, #940]	@ (8008f10 <PC_show_Keys+0x434>)
 8008b62:	48e4      	ldr	r0, [pc, #912]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008b64:	2201      	movs	r2, #1
 8008b66:	f01d fc43 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b6a:	4be0      	ldr	r3, [pc, #896]	@ (8008eec <PC_show_Keys+0x410>)
 8008b6c:	781a      	ldrb	r2, [r3, #0]
 8008b6e:	4be1      	ldr	r3, [pc, #900]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008b70:	0011      	movs	r1, r2
 8008b72:	0018      	movs	r0, r3
 8008b74:	f7ff ff97 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8008b78:	4be6      	ldr	r3, [pc, #920]	@ (8008f14 <PC_show_Keys+0x438>)
 8008b7a:	48e7      	ldr	r0, [pc, #924]	@ (8008f18 <PC_show_Keys+0x43c>)
 8008b7c:	220c      	movs	r2, #12
 8008b7e:	0019      	movs	r1, r3
 8008b80:	f003 fc0c 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, humidConfig);
 8008b84:	4ae3      	ldr	r2, [pc, #908]	@ (8008f14 <PC_show_Keys+0x438>)
 8008b86:	4bde      	ldr	r3, [pc, #888]	@ (8008f00 <PC_show_Keys+0x424>)
 8008b88:	0011      	movs	r1, r2
 8008b8a:	0018      	movs	r0, r3
 8008b8c:	f7fc fbb2 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - Humidity sensor id ------------: %s\r\n", HumidConfigCmd, Buffer);
 8008b90:	4bdb      	ldr	r3, [pc, #876]	@ (8008f00 <PC_show_Keys+0x424>)
 8008b92:	49e2      	ldr	r1, [pc, #904]	@ (8008f1c <PC_show_Keys+0x440>)
 8008b94:	48d7      	ldr	r0, [pc, #860]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008b96:	2202      	movs	r2, #2
 8008b98:	f01d fc2a 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008b9c:	4bd3      	ldr	r3, [pc, #844]	@ (8008eec <PC_show_Keys+0x410>)
 8008b9e:	781a      	ldrb	r2, [r3, #0]
 8008ba0:	4bd4      	ldr	r3, [pc, #848]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008ba2:	0011      	movs	r1, r2
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	f7ff ff7e 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8008baa:	4bdd      	ldr	r3, [pc, #884]	@ (8008f20 <PC_show_Keys+0x444>)
 8008bac:	48dd      	ldr	r0, [pc, #884]	@ (8008f24 <PC_show_Keys+0x448>)
 8008bae:	220c      	movs	r2, #12
 8008bb0:	0019      	movs	r1, r3
 8008bb2:	f003 fbf3 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, noxConfig);
 8008bb6:	4ada      	ldr	r2, [pc, #872]	@ (8008f20 <PC_show_Keys+0x444>)
 8008bb8:	4bd1      	ldr	r3, [pc, #836]	@ (8008f00 <PC_show_Keys+0x424>)
 8008bba:	0011      	movs	r1, r2
 8008bbc:	0018      	movs	r0, r3
 8008bbe:	f7fc fb99 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - NOx sensor id -----------------: %s\r\n", NOxIndexConfigCmd, Buffer);
 8008bc2:	4bcf      	ldr	r3, [pc, #828]	@ (8008f00 <PC_show_Keys+0x424>)
 8008bc4:	49d8      	ldr	r1, [pc, #864]	@ (8008f28 <PC_show_Keys+0x44c>)
 8008bc6:	48cb      	ldr	r0, [pc, #812]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008bc8:	2203      	movs	r2, #3
 8008bca:	f01d fc11 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008bce:	4bc7      	ldr	r3, [pc, #796]	@ (8008eec <PC_show_Keys+0x410>)
 8008bd0:	781a      	ldrb	r2, [r3, #0]
 8008bd2:	4bc8      	ldr	r3, [pc, #800]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008bd4:	0011      	movs	r1, r2
 8008bd6:	0018      	movs	r0, r3
 8008bd8:	f7ff ff65 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8008bdc:	4bd3      	ldr	r3, [pc, #844]	@ (8008f2c <PC_show_Keys+0x450>)
 8008bde:	48d4      	ldr	r0, [pc, #848]	@ (8008f30 <PC_show_Keys+0x454>)
 8008be0:	220c      	movs	r2, #12
 8008be2:	0019      	movs	r1, r3
 8008be4:	f003 fbda 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, vocConfig);
 8008be8:	4ad0      	ldr	r2, [pc, #832]	@ (8008f2c <PC_show_Keys+0x450>)
 8008bea:	4bc5      	ldr	r3, [pc, #788]	@ (8008f00 <PC_show_Keys+0x424>)
 8008bec:	0011      	movs	r1, r2
 8008bee:	0018      	movs	r0, r3
 8008bf0:	f7fc fb80 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - VOC sensor id -----------------: %s\r\n", VocIndexConfigCmd, Buffer);
 8008bf4:	4bc2      	ldr	r3, [pc, #776]	@ (8008f00 <PC_show_Keys+0x424>)
 8008bf6:	49cf      	ldr	r1, [pc, #828]	@ (8008f34 <PC_show_Keys+0x458>)
 8008bf8:	48be      	ldr	r0, [pc, #760]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008bfa:	2204      	movs	r2, #4
 8008bfc:	f01d fbf8 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c00:	4bba      	ldr	r3, [pc, #744]	@ (8008eec <PC_show_Keys+0x410>)
 8008c02:	781a      	ldrb	r2, [r3, #0]
 8008c04:	4bbb      	ldr	r3, [pc, #748]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008c06:	0011      	movs	r1, r2
 8008c08:	0018      	movs	r0, r3
 8008c0a:	f7ff ff4c 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8008c0e:	4bca      	ldr	r3, [pc, #808]	@ (8008f38 <PC_show_Keys+0x45c>)
 8008c10:	48ca      	ldr	r0, [pc, #808]	@ (8008f3c <PC_show_Keys+0x460>)
 8008c12:	220c      	movs	r2, #12
 8008c14:	0019      	movs	r1, r3
 8008c16:	f003 fbc1 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, soundConfig);
 8008c1a:	4ac7      	ldr	r2, [pc, #796]	@ (8008f38 <PC_show_Keys+0x45c>)
 8008c1c:	4bb8      	ldr	r3, [pc, #736]	@ (8008f00 <PC_show_Keys+0x424>)
 8008c1e:	0011      	movs	r1, r2
 8008c20:	0018      	movs	r0, r3
 8008c22:	f7fc fb67 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - dBA sensor id -----------------: %s\r\n", dBAConfigCmd, Buffer);
 8008c26:	4bb6      	ldr	r3, [pc, #728]	@ (8008f00 <PC_show_Keys+0x424>)
 8008c28:	49c5      	ldr	r1, [pc, #788]	@ (8008f40 <PC_show_Keys+0x464>)
 8008c2a:	48b2      	ldr	r0, [pc, #712]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008c2c:	2205      	movs	r2, #5
 8008c2e:	f01d fbdf 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c32:	4bae      	ldr	r3, [pc, #696]	@ (8008eec <PC_show_Keys+0x410>)
 8008c34:	781a      	ldrb	r2, [r3, #0]
 8008c36:	4baf      	ldr	r3, [pc, #700]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008c38:	0011      	movs	r1, r2
 8008c3a:	0018      	movs	r0, r3
 8008c3c:	f7ff ff33 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(dBcConfigAddr, dBcConfig, IdSize);
 8008c40:	4bc0      	ldr	r3, [pc, #768]	@ (8008f44 <PC_show_Keys+0x468>)
 8008c42:	48c1      	ldr	r0, [pc, #772]	@ (8008f48 <PC_show_Keys+0x46c>)
 8008c44:	220c      	movs	r2, #12
 8008c46:	0019      	movs	r1, r3
 8008c48:	f003 fba8 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, dBcConfig);
 8008c4c:	4abd      	ldr	r2, [pc, #756]	@ (8008f44 <PC_show_Keys+0x468>)
 8008c4e:	4bac      	ldr	r3, [pc, #688]	@ (8008f00 <PC_show_Keys+0x424>)
 8008c50:	0011      	movs	r1, r2
 8008c52:	0018      	movs	r0, r3
 8008c54:	f7fc fb4e 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - Sound dBc sensor id -----------: %s\r\n", dBcConfigCmd, Buffer);
 8008c58:	4ba9      	ldr	r3, [pc, #676]	@ (8008f00 <PC_show_Keys+0x424>)
 8008c5a:	49bc      	ldr	r1, [pc, #752]	@ (8008f4c <PC_show_Keys+0x470>)
 8008c5c:	48a5      	ldr	r0, [pc, #660]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008c5e:	2206      	movs	r2, #6
 8008c60:	f01d fbc6 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c64:	4ba1      	ldr	r3, [pc, #644]	@ (8008eec <PC_show_Keys+0x410>)
 8008c66:	781a      	ldrb	r2, [r3, #0]
 8008c68:	4ba2      	ldr	r3, [pc, #648]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008c6a:	0011      	movs	r1, r2
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	f7ff ff1a 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8008c72:	4bb7      	ldr	r3, [pc, #732]	@ (8008f50 <PC_show_Keys+0x474>)
 8008c74:	48b7      	ldr	r0, [pc, #732]	@ (8008f54 <PC_show_Keys+0x478>)
 8008c76:	220c      	movs	r2, #12
 8008c78:	0019      	movs	r1, r3
 8008c7a:	f003 fb8f 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM2Config);
 8008c7e:	4ab4      	ldr	r2, [pc, #720]	@ (8008f50 <PC_show_Keys+0x474>)
 8008c80:	4b9f      	ldr	r3, [pc, #636]	@ (8008f00 <PC_show_Keys+0x424>)
 8008c82:	0011      	movs	r1, r2
 8008c84:	0018      	movs	r0, r3
 8008c86:	f7fc fb35 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - PM2p5 sensor id ---------------: %s\r\n", PM2ConfigCmd, Buffer);
 8008c8a:	4b9d      	ldr	r3, [pc, #628]	@ (8008f00 <PC_show_Keys+0x424>)
 8008c8c:	49b2      	ldr	r1, [pc, #712]	@ (8008f58 <PC_show_Keys+0x47c>)
 8008c8e:	4899      	ldr	r0, [pc, #612]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008c90:	2207      	movs	r2, #7
 8008c92:	f01d fbad 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008c96:	4b95      	ldr	r3, [pc, #596]	@ (8008eec <PC_show_Keys+0x410>)
 8008c98:	781a      	ldrb	r2, [r3, #0]
 8008c9a:	4b96      	ldr	r3, [pc, #600]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008c9c:	0011      	movs	r1, r2
 8008c9e:	0018      	movs	r0, r3
 8008ca0:	f7ff ff01 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8008ca4:	4bad      	ldr	r3, [pc, #692]	@ (8008f5c <PC_show_Keys+0x480>)
 8008ca6:	48ae      	ldr	r0, [pc, #696]	@ (8008f60 <PC_show_Keys+0x484>)
 8008ca8:	220c      	movs	r2, #12
 8008caa:	0019      	movs	r1, r3
 8008cac:	f003 fb76 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM10Config);
 8008cb0:	4aaa      	ldr	r2, [pc, #680]	@ (8008f5c <PC_show_Keys+0x480>)
 8008cb2:	4b93      	ldr	r3, [pc, #588]	@ (8008f00 <PC_show_Keys+0x424>)
 8008cb4:	0011      	movs	r1, r2
 8008cb6:	0018      	movs	r0, r3
 8008cb8:	f7fc fb1c 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - PM10 sensor id ----------------: %s\r\n", PM10ConfigCmd, Buffer);
 8008cbc:	4b90      	ldr	r3, [pc, #576]	@ (8008f00 <PC_show_Keys+0x424>)
 8008cbe:	49a9      	ldr	r1, [pc, #676]	@ (8008f64 <PC_show_Keys+0x488>)
 8008cc0:	488c      	ldr	r0, [pc, #560]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008cc2:	2208      	movs	r2, #8
 8008cc4:	f01d fb94 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008cc8:	4b88      	ldr	r3, [pc, #544]	@ (8008eec <PC_show_Keys+0x410>)
 8008cca:	781a      	ldrb	r2, [r3, #0]
 8008ccc:	4b89      	ldr	r3, [pc, #548]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008cce:	0011      	movs	r1, r2
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	f7ff fee8 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8008cd6:	4ba4      	ldr	r3, [pc, #656]	@ (8008f68 <PC_show_Keys+0x48c>)
 8008cd8:	48a4      	ldr	r0, [pc, #656]	@ (8008f6c <PC_show_Keys+0x490>)
 8008cda:	220c      	movs	r2, #12
 8008cdc:	0019      	movs	r1, r3
 8008cde:	f003 fb5d 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, batteryConfig);
 8008ce2:	4aa1      	ldr	r2, [pc, #644]	@ (8008f68 <PC_show_Keys+0x48c>)
 8008ce4:	4b86      	ldr	r3, [pc, #536]	@ (8008f00 <PC_show_Keys+0x424>)
 8008ce6:	0011      	movs	r1, r2
 8008ce8:	0018      	movs	r0, r3
 8008cea:	f7fc fb03 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - Battery voltage sensor id -----: %s\r\n", BatVoltConfigCmd, Buffer);
 8008cee:	4b84      	ldr	r3, [pc, #528]	@ (8008f00 <PC_show_Keys+0x424>)
 8008cf0:	499f      	ldr	r1, [pc, #636]	@ (8008f70 <PC_show_Keys+0x494>)
 8008cf2:	4880      	ldr	r0, [pc, #512]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008cf4:	2209      	movs	r2, #9
 8008cf6:	f01d fb7b 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008cfa:	4b7c      	ldr	r3, [pc, #496]	@ (8008eec <PC_show_Keys+0x410>)
 8008cfc:	781a      	ldrb	r2, [r3, #0]
 8008cfe:	4b7d      	ldr	r3, [pc, #500]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008d00:	0011      	movs	r1, r2
 8008d02:	0018      	movs	r0, r3
 8008d04:	f7ff fecf 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8008d08:	4b9a      	ldr	r3, [pc, #616]	@ (8008f74 <PC_show_Keys+0x498>)
 8008d0a:	489b      	ldr	r0, [pc, #620]	@ (8008f78 <PC_show_Keys+0x49c>)
 8008d0c:	220c      	movs	r2, #12
 8008d0e:	0019      	movs	r1, r3
 8008d10:	f003 fb44 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, solarConfig);
 8008d14:	4a97      	ldr	r2, [pc, #604]	@ (8008f74 <PC_show_Keys+0x498>)
 8008d16:	4b7a      	ldr	r3, [pc, #488]	@ (8008f00 <PC_show_Keys+0x424>)
 8008d18:	0011      	movs	r1, r2
 8008d1a:	0018      	movs	r0, r3
 8008d1c:	f7fc faea 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - Solar voltage sensor id -------: %s\r\n", SolVoltConfigCmd, Buffer);
 8008d20:	4b77      	ldr	r3, [pc, #476]	@ (8008f00 <PC_show_Keys+0x424>)
 8008d22:	4996      	ldr	r1, [pc, #600]	@ (8008f7c <PC_show_Keys+0x4a0>)
 8008d24:	4873      	ldr	r0, [pc, #460]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008d26:	220a      	movs	r2, #10
 8008d28:	f01d fb62 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d2c:	4b6f      	ldr	r3, [pc, #444]	@ (8008eec <PC_show_Keys+0x410>)
 8008d2e:	781a      	ldrb	r2, [r3, #0]
 8008d30:	4b70      	ldr	r3, [pc, #448]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008d32:	0011      	movs	r1, r2
 8008d34:	0018      	movs	r0, r3
 8008d36:	f7ff feb6 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(ChargerStatConfigAddr, ChargerStatConfig, IdSize);
 8008d3a:	4b91      	ldr	r3, [pc, #580]	@ (8008f80 <PC_show_Keys+0x4a4>)
 8008d3c:	4891      	ldr	r0, [pc, #580]	@ (8008f84 <PC_show_Keys+0x4a8>)
 8008d3e:	220c      	movs	r2, #12
 8008d40:	0019      	movs	r1, r3
 8008d42:	f003 fb2b 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ChargerStatConfig);
 8008d46:	4a8e      	ldr	r2, [pc, #568]	@ (8008f80 <PC_show_Keys+0x4a4>)
 8008d48:	4b6d      	ldr	r3, [pc, #436]	@ (8008f00 <PC_show_Keys+0x424>)
 8008d4a:	0011      	movs	r1, r2
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	f7fc fad1 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - Charger status (not used) -----: %s\r\n", ChargerStatConfigCmd, Buffer);
 8008d52:	4b6b      	ldr	r3, [pc, #428]	@ (8008f00 <PC_show_Keys+0x424>)
 8008d54:	498c      	ldr	r1, [pc, #560]	@ (8008f88 <PC_show_Keys+0x4ac>)
 8008d56:	4867      	ldr	r0, [pc, #412]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008d58:	220b      	movs	r2, #11
 8008d5a:	f01d fb49 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d5e:	4b63      	ldr	r3, [pc, #396]	@ (8008eec <PC_show_Keys+0x410>)
 8008d60:	781a      	ldrb	r2, [r3, #0]
 8008d62:	4b64      	ldr	r3, [pc, #400]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008d64:	0011      	movs	r1, r2
 8008d66:	0018      	movs	r0, r3
 8008d68:	f7ff fe9d 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8008d6c:	4b87      	ldr	r3, [pc, #540]	@ (8008f8c <PC_show_Keys+0x4b0>)
 8008d6e:	4888      	ldr	r0, [pc, #544]	@ (8008f90 <PC_show_Keys+0x4b4>)
 8008d70:	2220      	movs	r2, #32
 8008d72:	0019      	movs	r1, r3
 8008d74:	f003 fb12 	bl	800c39c <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored name -------------------: ", CustomNameConfigCmd);
 8008d78:	4986      	ldr	r1, [pc, #536]	@ (8008f94 <PC_show_Keys+0x4b8>)
 8008d7a:	4b5e      	ldr	r3, [pc, #376]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008d7c:	220c      	movs	r2, #12
 8008d7e:	0018      	movs	r0, r3
 8008d80:	f01d fb36 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d84:	4b59      	ldr	r3, [pc, #356]	@ (8008eec <PC_show_Keys+0x410>)
 8008d86:	781a      	ldrb	r2, [r3, #0]
 8008d88:	4b5a      	ldr	r3, [pc, #360]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008d8a:	0011      	movs	r1, r2
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	f7ff fe8a 	bl	8008aa6 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)nameConfig);  // probably too long to held in same buffer
 8008d92:	4a7e      	ldr	r2, [pc, #504]	@ (8008f8c <PC_show_Keys+0x4b0>)
 8008d94:	4980      	ldr	r1, [pc, #512]	@ (8008f98 <PC_show_Keys+0x4bc>)
 8008d96:	4b57      	ldr	r3, [pc, #348]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008d98:	0018      	movs	r0, r3
 8008d9a:	f01d fb29 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008d9e:	4b53      	ldr	r3, [pc, #332]	@ (8008eec <PC_show_Keys+0x410>)
 8008da0:	781a      	ldrb	r2, [r3, #0]
 8008da2:	4b54      	ldr	r3, [pc, #336]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008da4:	0011      	movs	r1, r2
 8008da6:	0018      	movs	r0, r3
 8008da8:	f7ff fe7d 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(SSIDConfigAddr, SSIDConfig, SSIDMaxLength);
 8008dac:	4b7b      	ldr	r3, [pc, #492]	@ (8008f9c <PC_show_Keys+0x4c0>)
 8008dae:	487c      	ldr	r0, [pc, #496]	@ (8008fa0 <PC_show_Keys+0x4c4>)
 8008db0:	2220      	movs	r2, #32
 8008db2:	0019      	movs	r1, r3
 8008db4:	f003 faf2 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SSIDConfig);
 8008db8:	4a78      	ldr	r2, [pc, #480]	@ (8008f9c <PC_show_Keys+0x4c0>)
 8008dba:	4b51      	ldr	r3, [pc, #324]	@ (8008f00 <PC_show_Keys+0x424>)
 8008dbc:	0011      	movs	r1, r2
 8008dbe:	0018      	movs	r0, r3
 8008dc0:	f7fc fa98 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - SSID name ---------------------: ", SSIDConfigCmd);
 8008dc4:	4977      	ldr	r1, [pc, #476]	@ (8008fa4 <PC_show_Keys+0x4c8>)
 8008dc6:	4b4b      	ldr	r3, [pc, #300]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008dc8:	220d      	movs	r2, #13
 8008dca:	0018      	movs	r0, r3
 8008dcc:	f01d fb10 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008dd0:	4b46      	ldr	r3, [pc, #280]	@ (8008eec <PC_show_Keys+0x410>)
 8008dd2:	781a      	ldrb	r2, [r3, #0]
 8008dd4:	4b47      	ldr	r3, [pc, #284]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008dd6:	0011      	movs	r1, r2
 8008dd8:	0018      	movs	r0, r3
 8008dda:	f7ff fe64 	bl	8008aa6 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SSIDConfig);  // probably too long to held in same buffer
 8008dde:	4a6f      	ldr	r2, [pc, #444]	@ (8008f9c <PC_show_Keys+0x4c0>)
 8008de0:	496d      	ldr	r1, [pc, #436]	@ (8008f98 <PC_show_Keys+0x4bc>)
 8008de2:	4b44      	ldr	r3, [pc, #272]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008de4:	0018      	movs	r0, r3
 8008de6:	f01d fb03 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008dea:	4b40      	ldr	r3, [pc, #256]	@ (8008eec <PC_show_Keys+0x410>)
 8008dec:	781a      	ldrb	r2, [r3, #0]
 8008dee:	4b41      	ldr	r3, [pc, #260]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008df0:	0011      	movs	r1, r2
 8008df2:	0018      	movs	r0, r3
 8008df4:	f7ff fe57 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(pwdConfigAddr, pwdConfig, pwdMaxLength);
 8008df8:	4b6b      	ldr	r3, [pc, #428]	@ (8008fa8 <PC_show_Keys+0x4cc>)
 8008dfa:	486c      	ldr	r0, [pc, #432]	@ (8008fac <PC_show_Keys+0x4d0>)
 8008dfc:	2240      	movs	r2, #64	@ 0x40
 8008dfe:	0019      	movs	r1, r3
 8008e00:	f003 facc 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, pwdConfig);
 8008e04:	4a68      	ldr	r2, [pc, #416]	@ (8008fa8 <PC_show_Keys+0x4cc>)
 8008e06:	4b3e      	ldr	r3, [pc, #248]	@ (8008f00 <PC_show_Keys+0x424>)
 8008e08:	0011      	movs	r1, r2
 8008e0a:	0018      	movs	r0, r3
 8008e0c:	f7fc fa72 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - WiFi password -----------------: ", PasswordConfigCmd);
 8008e10:	4967      	ldr	r1, [pc, #412]	@ (8008fb0 <PC_show_Keys+0x4d4>)
 8008e12:	4b38      	ldr	r3, [pc, #224]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008e14:	220e      	movs	r2, #14
 8008e16:	0018      	movs	r0, r3
 8008e18:	f01d faea 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e1c:	4b33      	ldr	r3, [pc, #204]	@ (8008eec <PC_show_Keys+0x410>)
 8008e1e:	781a      	ldrb	r2, [r3, #0]
 8008e20:	4b34      	ldr	r3, [pc, #208]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008e22:	0011      	movs	r1, r2
 8008e24:	0018      	movs	r0, r3
 8008e26:	f7ff fe3e 	bl	8008aa6 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)pwdConfig);  // probably too long to held in same buffer
 8008e2a:	4a5f      	ldr	r2, [pc, #380]	@ (8008fa8 <PC_show_Keys+0x4cc>)
 8008e2c:	495a      	ldr	r1, [pc, #360]	@ (8008f98 <PC_show_Keys+0x4bc>)
 8008e2e:	4b31      	ldr	r3, [pc, #196]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008e30:	0018      	movs	r0, r3
 8008e32:	f01d fadd 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e36:	4b2d      	ldr	r3, [pc, #180]	@ (8008eec <PC_show_Keys+0x410>)
 8008e38:	781a      	ldrb	r2, [r3, #0]
 8008e3a:	4b2e      	ldr	r3, [pc, #184]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008e3c:	0011      	movs	r1, r2
 8008e3e:	0018      	movs	r0, r3
 8008e40:	f7ff fe31 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(AHTTempConfigAddr, AHTTempConfig, IdSize);
 8008e44:	4b5b      	ldr	r3, [pc, #364]	@ (8008fb4 <PC_show_Keys+0x4d8>)
 8008e46:	485c      	ldr	r0, [pc, #368]	@ (8008fb8 <PC_show_Keys+0x4dc>)
 8008e48:	220c      	movs	r2, #12
 8008e4a:	0019      	movs	r1, r3
 8008e4c:	f003 faa6 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTTempConfig);
 8008e50:	4a58      	ldr	r2, [pc, #352]	@ (8008fb4 <PC_show_Keys+0x4d8>)
 8008e52:	4b2b      	ldr	r3, [pc, #172]	@ (8008f00 <PC_show_Keys+0x424>)
 8008e54:	0011      	movs	r1, r2
 8008e56:	0018      	movs	r0, r3
 8008e58:	f7fc fa4c 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Temperature sensor id ---: %s\r\n", AHTTempConfigCmd, Buffer);
 8008e5c:	4b28      	ldr	r3, [pc, #160]	@ (8008f00 <PC_show_Keys+0x424>)
 8008e5e:	4957      	ldr	r1, [pc, #348]	@ (8008fbc <PC_show_Keys+0x4e0>)
 8008e60:	4824      	ldr	r0, [pc, #144]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008e62:	220f      	movs	r2, #15
 8008e64:	f01d fac4 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e68:	4b20      	ldr	r3, [pc, #128]	@ (8008eec <PC_show_Keys+0x410>)
 8008e6a:	781a      	ldrb	r2, [r3, #0]
 8008e6c:	4b21      	ldr	r3, [pc, #132]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008e6e:	0011      	movs	r1, r2
 8008e70:	0018      	movs	r0, r3
 8008e72:	f7ff fe18 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(AHTHumidConfigAddr, AHTHumidConfig, IdSize);
 8008e76:	4b52      	ldr	r3, [pc, #328]	@ (8008fc0 <PC_show_Keys+0x4e4>)
 8008e78:	4852      	ldr	r0, [pc, #328]	@ (8008fc4 <PC_show_Keys+0x4e8>)
 8008e7a:	220c      	movs	r2, #12
 8008e7c:	0019      	movs	r1, r3
 8008e7e:	f003 fa8d 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, AHTHumidConfig);
 8008e82:	4a4f      	ldr	r2, [pc, #316]	@ (8008fc0 <PC_show_Keys+0x4e4>)
 8008e84:	4b1e      	ldr	r3, [pc, #120]	@ (8008f00 <PC_show_Keys+0x424>)
 8008e86:	0011      	movs	r1, r2
 8008e88:	0018      	movs	r0, r3
 8008e8a:	f7fc fa33 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - AHT2x Humidity sensor id ------: %s\r\n", AHTHumidConfigCmd, Buffer);
 8008e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8008f00 <PC_show_Keys+0x424>)
 8008e90:	494d      	ldr	r1, [pc, #308]	@ (8008fc8 <PC_show_Keys+0x4ec>)
 8008e92:	4818      	ldr	r0, [pc, #96]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008e94:	2210      	movs	r2, #16
 8008e96:	f01d faab 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008e9a:	4b14      	ldr	r3, [pc, #80]	@ (8008eec <PC_show_Keys+0x410>)
 8008e9c:	781a      	ldrb	r2, [r3, #0]
 8008e9e:	4b15      	ldr	r3, [pc, #84]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008ea0:	0011      	movs	r1, r2
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f7ff fdff 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(BMPTempConfigAddr, BMPTempConfig, IdSize);
 8008ea8:	4b48      	ldr	r3, [pc, #288]	@ (8008fcc <PC_show_Keys+0x4f0>)
 8008eaa:	4849      	ldr	r0, [pc, #292]	@ (8008fd0 <PC_show_Keys+0x4f4>)
 8008eac:	220c      	movs	r2, #12
 8008eae:	0019      	movs	r1, r3
 8008eb0:	f003 fa74 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, BMPTempConfig);
 8008eb4:	4a45      	ldr	r2, [pc, #276]	@ (8008fcc <PC_show_Keys+0x4f0>)
 8008eb6:	4b12      	ldr	r3, [pc, #72]	@ (8008f00 <PC_show_Keys+0x424>)
 8008eb8:	0011      	movs	r1, r2
 8008eba:	0018      	movs	r0, r3
 8008ebc:	f7fc fa1a 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - BMP280 Temperature sensor id --: %s\r\n", BMPTempConfigCmd, Buffer);
 8008ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8008f00 <PC_show_Keys+0x424>)
 8008ec2:	4944      	ldr	r1, [pc, #272]	@ (8008fd4 <PC_show_Keys+0x4f8>)
 8008ec4:	480b      	ldr	r0, [pc, #44]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008ec6:	2211      	movs	r2, #17
 8008ec8:	f01d fa92 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ecc:	4b07      	ldr	r3, [pc, #28]	@ (8008eec <PC_show_Keys+0x410>)
 8008ece:	781a      	ldrb	r2, [r3, #0]
 8008ed0:	4b08      	ldr	r3, [pc, #32]	@ (8008ef4 <PC_show_Keys+0x418>)
 8008ed2:	0011      	movs	r1, r2
 8008ed4:	0018      	movs	r0, r3
 8008ed6:	f7ff fde6 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(ENSAQIConfigAddr, ENSAQIConfig, IdSize);
 8008eda:	4b3f      	ldr	r3, [pc, #252]	@ (8008fd8 <PC_show_Keys+0x4fc>)
 8008edc:	483f      	ldr	r0, [pc, #252]	@ (8008fdc <PC_show_Keys+0x500>)
 8008ede:	220c      	movs	r2, #12
 8008ee0:	0019      	movs	r1, r3
 8008ee2:	f003 fa5b 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSAQIConfig);
 8008ee6:	4a3c      	ldr	r2, [pc, #240]	@ (8008fd8 <PC_show_Keys+0x4fc>)
 8008ee8:	e07a      	b.n	8008fe0 <PC_show_Keys+0x504>
 8008eea:	46c0      	nop			@ (mov r8, r8)
 8008eec:	20000b2d 	.word	0x20000b2d
 8008ef0:	0802b928 	.word	0x0802b928
 8008ef4:	20000b30 	.word	0x20000b30
 8008ef8:	20000b78 	.word	0x20000b78
 8008efc:	08080000 	.word	0x08080000
 8008f00:	20000b84 	.word	0x20000b84
 8008f04:	0802b944 	.word	0x0802b944
 8008f08:	20000ba0 	.word	0x20000ba0
 8008f0c:	0808000c 	.word	0x0808000c
 8008f10:	0802b974 	.word	0x0802b974
 8008f14:	20000bac 	.word	0x20000bac
 8008f18:	08080018 	.word	0x08080018
 8008f1c:	0802b9a4 	.word	0x0802b9a4
 8008f20:	20000bb8 	.word	0x20000bb8
 8008f24:	08080024 	.word	0x08080024
 8008f28:	0802b9d4 	.word	0x0802b9d4
 8008f2c:	20000bc4 	.word	0x20000bc4
 8008f30:	08080030 	.word	0x08080030
 8008f34:	0802ba04 	.word	0x0802ba04
 8008f38:	20000bd0 	.word	0x20000bd0
 8008f3c:	08080048 	.word	0x08080048
 8008f40:	0802ba34 	.word	0x0802ba34
 8008f44:	20000bdc 	.word	0x20000bdc
 8008f48:	0808003c 	.word	0x0808003c
 8008f4c:	0802ba64 	.word	0x0802ba64
 8008f50:	20000be8 	.word	0x20000be8
 8008f54:	08080054 	.word	0x08080054
 8008f58:	0802ba94 	.word	0x0802ba94
 8008f5c:	20000bf4 	.word	0x20000bf4
 8008f60:	08080060 	.word	0x08080060
 8008f64:	0802bac4 	.word	0x0802bac4
 8008f68:	20000c00 	.word	0x20000c00
 8008f6c:	0808006c 	.word	0x0808006c
 8008f70:	0802baf4 	.word	0x0802baf4
 8008f74:	20000c0c 	.word	0x20000c0c
 8008f78:	08080078 	.word	0x08080078
 8008f7c:	0802bb24 	.word	0x0802bb24
 8008f80:	20000c18 	.word	0x20000c18
 8008f84:	08080084 	.word	0x08080084
 8008f88:	0802bb54 	.word	0x0802bb54
 8008f8c:	20000c24 	.word	0x20000c24
 8008f90:	08080090 	.word	0x08080090
 8008f94:	0802bb84 	.word	0x0802bb84
 8008f98:	0802bbb0 	.word	0x0802bbb0
 8008f9c:	20000c44 	.word	0x20000c44
 8008fa0:	08080200 	.word	0x08080200
 8008fa4:	0802bbb8 	.word	0x0802bbb8
 8008fa8:	20000c64 	.word	0x20000c64
 8008fac:	08080220 	.word	0x08080220
 8008fb0:	0802bbe4 	.word	0x0802bbe4
 8008fb4:	20000ca4 	.word	0x20000ca4
 8008fb8:	080800c8 	.word	0x080800c8
 8008fbc:	0802bc10 	.word	0x0802bc10
 8008fc0:	20000cb0 	.word	0x20000cb0
 8008fc4:	080800d4 	.word	0x080800d4
 8008fc8:	0802bc40 	.word	0x0802bc40
 8008fcc:	20000cbc 	.word	0x20000cbc
 8008fd0:	080800e0 	.word	0x080800e0
 8008fd4:	0802bc70 	.word	0x0802bc70
 8008fd8:	20000cc8 	.word	0x20000cc8
 8008fdc:	080800ec 	.word	0x080800ec
 8008fe0:	4bd4      	ldr	r3, [pc, #848]	@ (8009334 <PC_show_Keys+0x858>)
 8008fe2:	0011      	movs	r1, r2
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	f7fc f985 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 AQI sensor id ----------: %s\r\n", ENSAQIConfigCmd, Buffer);
 8008fea:	4bd2      	ldr	r3, [pc, #840]	@ (8009334 <PC_show_Keys+0x858>)
 8008fec:	49d2      	ldr	r1, [pc, #840]	@ (8009338 <PC_show_Keys+0x85c>)
 8008fee:	48d3      	ldr	r0, [pc, #844]	@ (800933c <PC_show_Keys+0x860>)
 8008ff0:	2212      	movs	r2, #18
 8008ff2:	f01d f9fd 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8008ff6:	4bd2      	ldr	r3, [pc, #840]	@ (8009340 <PC_show_Keys+0x864>)
 8008ff8:	781a      	ldrb	r2, [r3, #0]
 8008ffa:	4bd0      	ldr	r3, [pc, #832]	@ (800933c <PC_show_Keys+0x860>)
 8008ffc:	0011      	movs	r1, r2
 8008ffe:	0018      	movs	r0, r3
 8009000:	f7ff fd51 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(ENSTVOCConfigAddr, ENSTVOCConfig, IdSize);
 8009004:	4bcf      	ldr	r3, [pc, #828]	@ (8009344 <PC_show_Keys+0x868>)
 8009006:	48d0      	ldr	r0, [pc, #832]	@ (8009348 <PC_show_Keys+0x86c>)
 8009008:	220c      	movs	r2, #12
 800900a:	0019      	movs	r1, r3
 800900c:	f003 f9c6 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSTVOCConfig);
 8009010:	4acc      	ldr	r2, [pc, #816]	@ (8009344 <PC_show_Keys+0x868>)
 8009012:	4bc8      	ldr	r3, [pc, #800]	@ (8009334 <PC_show_Keys+0x858>)
 8009014:	0011      	movs	r1, r2
 8009016:	0018      	movs	r0, r3
 8009018:	f7fc f96c 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 TVOC sensor id ---------: %s\r\n", ENSTVOCConfigCmd, Buffer);
 800901c:	4bc5      	ldr	r3, [pc, #788]	@ (8009334 <PC_show_Keys+0x858>)
 800901e:	49cb      	ldr	r1, [pc, #812]	@ (800934c <PC_show_Keys+0x870>)
 8009020:	48c6      	ldr	r0, [pc, #792]	@ (800933c <PC_show_Keys+0x860>)
 8009022:	2213      	movs	r2, #19
 8009024:	f01d f9e4 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009028:	4bc5      	ldr	r3, [pc, #788]	@ (8009340 <PC_show_Keys+0x864>)
 800902a:	781a      	ldrb	r2, [r3, #0]
 800902c:	4bc3      	ldr	r3, [pc, #780]	@ (800933c <PC_show_Keys+0x860>)
 800902e:	0011      	movs	r1, r2
 8009030:	0018      	movs	r0, r3
 8009032:	f7ff fd38 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(ENSeCO2ConfigAddr, ENSeCO2Config, IdSize);
 8009036:	4bc6      	ldr	r3, [pc, #792]	@ (8009350 <PC_show_Keys+0x874>)
 8009038:	48c6      	ldr	r0, [pc, #792]	@ (8009354 <PC_show_Keys+0x878>)
 800903a:	220c      	movs	r2, #12
 800903c:	0019      	movs	r1, r3
 800903e:	f003 f9ad 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, ENSeCO2Config);
 8009042:	4ac3      	ldr	r2, [pc, #780]	@ (8009350 <PC_show_Keys+0x874>)
 8009044:	4bbb      	ldr	r3, [pc, #748]	@ (8009334 <PC_show_Keys+0x858>)
 8009046:	0011      	movs	r1, r2
 8009048:	0018      	movs	r0, r3
 800904a:	f7fc f953 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - ENS160 eCO2 sensor id ---------: %s\r\n", ENSeCO2ConfigCmd, Buffer);
 800904e:	4bb9      	ldr	r3, [pc, #740]	@ (8009334 <PC_show_Keys+0x858>)
 8009050:	49c1      	ldr	r1, [pc, #772]	@ (8009358 <PC_show_Keys+0x87c>)
 8009052:	48ba      	ldr	r0, [pc, #744]	@ (800933c <PC_show_Keys+0x860>)
 8009054:	2214      	movs	r2, #20
 8009056:	f01d f9cb 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800905a:	4bb9      	ldr	r3, [pc, #740]	@ (8009340 <PC_show_Keys+0x864>)
 800905c:	781a      	ldrb	r2, [r3, #0]
 800905e:	4bb7      	ldr	r3, [pc, #732]	@ (800933c <PC_show_Keys+0x860>)
 8009060:	0011      	movs	r1, r2
 8009062:	0018      	movs	r0, r3
 8009064:	f7ff fd1f 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(PM1ConfigAddr, PM1Config, IdSize);
 8009068:	4bbc      	ldr	r3, [pc, #752]	@ (800935c <PC_show_Keys+0x880>)
 800906a:	48bd      	ldr	r0, [pc, #756]	@ (8009360 <PC_show_Keys+0x884>)
 800906c:	220c      	movs	r2, #12
 800906e:	0019      	movs	r1, r3
 8009070:	f003 f994 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM1Config);
 8009074:	4ab9      	ldr	r2, [pc, #740]	@ (800935c <PC_show_Keys+0x880>)
 8009076:	4baf      	ldr	r3, [pc, #700]	@ (8009334 <PC_show_Keys+0x858>)
 8009078:	0011      	movs	r1, r2
 800907a:	0018      	movs	r0, r3
 800907c:	f7fc f93a 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - PM1p0 sensor id ---------------: %s\r\n", PM1ConfigCmd, Buffer);
 8009080:	4bac      	ldr	r3, [pc, #688]	@ (8009334 <PC_show_Keys+0x858>)
 8009082:	49b8      	ldr	r1, [pc, #736]	@ (8009364 <PC_show_Keys+0x888>)
 8009084:	48ad      	ldr	r0, [pc, #692]	@ (800933c <PC_show_Keys+0x860>)
 8009086:	2215      	movs	r2, #21
 8009088:	f01d f9b2 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 800908c:	4bac      	ldr	r3, [pc, #688]	@ (8009340 <PC_show_Keys+0x864>)
 800908e:	781a      	ldrb	r2, [r3, #0]
 8009090:	4baa      	ldr	r3, [pc, #680]	@ (800933c <PC_show_Keys+0x860>)
 8009092:	0011      	movs	r1, r2
 8009094:	0018      	movs	r0, r3
 8009096:	f7ff fd06 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(PM4ConfigAddr, PM4Config, IdSize);
 800909a:	4bb3      	ldr	r3, [pc, #716]	@ (8009368 <PC_show_Keys+0x88c>)
 800909c:	48b3      	ldr	r0, [pc, #716]	@ (800936c <PC_show_Keys+0x890>)
 800909e:	220c      	movs	r2, #12
 80090a0:	0019      	movs	r1, r3
 80090a2:	f003 f97b 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, PM4Config);
 80090a6:	4ab0      	ldr	r2, [pc, #704]	@ (8009368 <PC_show_Keys+0x88c>)
 80090a8:	4ba2      	ldr	r3, [pc, #648]	@ (8009334 <PC_show_Keys+0x858>)
 80090aa:	0011      	movs	r1, r2
 80090ac:	0018      	movs	r0, r3
 80090ae:	f7fc f921 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - PM4p0 sensor id ---------------: %s\r\n", PM4ConfigCmd, Buffer);
 80090b2:	4ba0      	ldr	r3, [pc, #640]	@ (8009334 <PC_show_Keys+0x858>)
 80090b4:	49ae      	ldr	r1, [pc, #696]	@ (8009370 <PC_show_Keys+0x894>)
 80090b6:	48a1      	ldr	r0, [pc, #644]	@ (800933c <PC_show_Keys+0x860>)
 80090b8:	2216      	movs	r2, #22
 80090ba:	f01d f999 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090be:	4ba0      	ldr	r3, [pc, #640]	@ (8009340 <PC_show_Keys+0x864>)
 80090c0:	781a      	ldrb	r2, [r3, #0]
 80090c2:	4b9e      	ldr	r3, [pc, #632]	@ (800933c <PC_show_Keys+0x860>)
 80090c4:	0011      	movs	r1, r2
 80090c6:	0018      	movs	r0, r3
 80090c8:	f7ff fced 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(SEN55TempConfigAddr, SEN55TempConfig, IdSize);
 80090cc:	4ba9      	ldr	r3, [pc, #676]	@ (8009374 <PC_show_Keys+0x898>)
 80090ce:	48aa      	ldr	r0, [pc, #680]	@ (8009378 <PC_show_Keys+0x89c>)
 80090d0:	220c      	movs	r2, #12
 80090d2:	0019      	movs	r1, r3
 80090d4:	f003 f962 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55TempConfig);
 80090d8:	4aa6      	ldr	r2, [pc, #664]	@ (8009374 <PC_show_Keys+0x898>)
 80090da:	4b96      	ldr	r3, [pc, #600]	@ (8009334 <PC_show_Keys+0x858>)
 80090dc:	0011      	movs	r1, r2
 80090de:	0018      	movs	r0, r3
 80090e0:	f7fc f908 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Temperature sensor id : %s\r\n", SEN55TempConfigCmd, Buffer);
 80090e4:	4b93      	ldr	r3, [pc, #588]	@ (8009334 <PC_show_Keys+0x858>)
 80090e6:	49a5      	ldr	r1, [pc, #660]	@ (800937c <PC_show_Keys+0x8a0>)
 80090e8:	4894      	ldr	r0, [pc, #592]	@ (800933c <PC_show_Keys+0x860>)
 80090ea:	2217      	movs	r2, #23
 80090ec:	f01d f980 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80090f0:	4b93      	ldr	r3, [pc, #588]	@ (8009340 <PC_show_Keys+0x864>)
 80090f2:	781a      	ldrb	r2, [r3, #0]
 80090f4:	4b91      	ldr	r3, [pc, #580]	@ (800933c <PC_show_Keys+0x860>)
 80090f6:	0011      	movs	r1, r2
 80090f8:	0018      	movs	r0, r3
 80090fa:	f7ff fcd4 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(SEN55HumidConfigAddr, SEN55HumidConfig, IdSize);
 80090fe:	4ba0      	ldr	r3, [pc, #640]	@ (8009380 <PC_show_Keys+0x8a4>)
 8009100:	48a0      	ldr	r0, [pc, #640]	@ (8009384 <PC_show_Keys+0x8a8>)
 8009102:	220c      	movs	r2, #12
 8009104:	0019      	movs	r1, r3
 8009106:	f003 f949 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, SEN55HumidConfig);
 800910a:	4a9d      	ldr	r2, [pc, #628]	@ (8009380 <PC_show_Keys+0x8a4>)
 800910c:	4b89      	ldr	r3, [pc, #548]	@ (8009334 <PC_show_Keys+0x858>)
 800910e:	0011      	movs	r1, r2
 8009110:	0018      	movs	r0, r3
 8009112:	f7fc f8ef 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - SEN54/55 Humidity sensor id ---: %s\r\n", SEN55HumidConfigCmd, Buffer);
 8009116:	4b87      	ldr	r3, [pc, #540]	@ (8009334 <PC_show_Keys+0x858>)
 8009118:	499b      	ldr	r1, [pc, #620]	@ (8009388 <PC_show_Keys+0x8ac>)
 800911a:	4888      	ldr	r0, [pc, #544]	@ (800933c <PC_show_Keys+0x860>)
 800911c:	2218      	movs	r2, #24
 800911e:	f01d f967 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009122:	4b87      	ldr	r3, [pc, #540]	@ (8009340 <PC_show_Keys+0x864>)
 8009124:	781a      	ldrb	r2, [r3, #0]
 8009126:	4b85      	ldr	r3, [pc, #532]	@ (800933c <PC_show_Keys+0x860>)
 8009128:	0011      	movs	r1, r2
 800912a:	0018      	movs	r0, r3
 800912c:	f7ff fcbb 	bl	8008aa6 <PC_selectout>

#ifdef USE_MAIL
  ReadUint8ArrayEEprom(SendFromNameConfigAddr, SendFromnameConfig, SendFromNameMaxLength);
 8009130:	4b96      	ldr	r3, [pc, #600]	@ (800938c <PC_show_Keys+0x8b0>)
 8009132:	4897      	ldr	r0, [pc, #604]	@ (8009390 <PC_show_Keys+0x8b4>)
 8009134:	2230      	movs	r2, #48	@ 0x30
 8009136:	0019      	movs	r1, r3
 8009138:	f003 f930 	bl	800c39c <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send from name ---------: ", SendFromNameConfigCmd);
 800913c:	4995      	ldr	r1, [pc, #596]	@ (8009394 <PC_show_Keys+0x8b8>)
 800913e:	4b7f      	ldr	r3, [pc, #508]	@ (800933c <PC_show_Keys+0x860>)
 8009140:	2219      	movs	r2, #25
 8009142:	0018      	movs	r0, r3
 8009144:	f01d f954 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009148:	4b7d      	ldr	r3, [pc, #500]	@ (8009340 <PC_show_Keys+0x864>)
 800914a:	781a      	ldrb	r2, [r3, #0]
 800914c:	4b7b      	ldr	r3, [pc, #492]	@ (800933c <PC_show_Keys+0x860>)
 800914e:	0011      	movs	r1, r2
 8009150:	0018      	movs	r0, r3
 8009152:	f7ff fca8 	bl	8008aa6 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendFromnameConfig);  // probably too long to held in same buffer
 8009156:	4a8d      	ldr	r2, [pc, #564]	@ (800938c <PC_show_Keys+0x8b0>)
 8009158:	498f      	ldr	r1, [pc, #572]	@ (8009398 <PC_show_Keys+0x8bc>)
 800915a:	4b78      	ldr	r3, [pc, #480]	@ (800933c <PC_show_Keys+0x860>)
 800915c:	0018      	movs	r0, r3
 800915e:	f01d f947 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009162:	4b77      	ldr	r3, [pc, #476]	@ (8009340 <PC_show_Keys+0x864>)
 8009164:	781a      	ldrb	r2, [r3, #0]
 8009166:	4b75      	ldr	r3, [pc, #468]	@ (800933c <PC_show_Keys+0x860>)
 8009168:	0011      	movs	r1, r2
 800916a:	0018      	movs	r0, r3
 800916c:	f7ff fc9b 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(SendToNameConfigAddr, SendTonameConfig, SendToNameMaxLength);
 8009170:	4b8a      	ldr	r3, [pc, #552]	@ (800939c <PC_show_Keys+0x8c0>)
 8009172:	488b      	ldr	r0, [pc, #556]	@ (80093a0 <PC_show_Keys+0x8c4>)
 8009174:	2230      	movs	r2, #48	@ 0x30
 8009176:	0019      	movs	r1, r3
 8009178:	f003 f910 	bl	800c39c <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored Send to name -----------: ", SendToNameConfigCmd);
 800917c:	4989      	ldr	r1, [pc, #548]	@ (80093a4 <PC_show_Keys+0x8c8>)
 800917e:	4b6f      	ldr	r3, [pc, #444]	@ (800933c <PC_show_Keys+0x860>)
 8009180:	221a      	movs	r2, #26
 8009182:	0018      	movs	r0, r3
 8009184:	f01d f934 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009188:	4b6d      	ldr	r3, [pc, #436]	@ (8009340 <PC_show_Keys+0x864>)
 800918a:	781a      	ldrb	r2, [r3, #0]
 800918c:	4b6b      	ldr	r3, [pc, #428]	@ (800933c <PC_show_Keys+0x860>)
 800918e:	0011      	movs	r1, r2
 8009190:	0018      	movs	r0, r3
 8009192:	f7ff fc88 	bl	8008aa6 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)SendTonameConfig);  // probably too long to held in same buffer
 8009196:	4a81      	ldr	r2, [pc, #516]	@ (800939c <PC_show_Keys+0x8c0>)
 8009198:	497f      	ldr	r1, [pc, #508]	@ (8009398 <PC_show_Keys+0x8bc>)
 800919a:	4b68      	ldr	r3, [pc, #416]	@ (800933c <PC_show_Keys+0x860>)
 800919c:	0018      	movs	r0, r3
 800919e:	f01d f927 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091a2:	4b67      	ldr	r3, [pc, #412]	@ (8009340 <PC_show_Keys+0x864>)
 80091a4:	781a      	ldrb	r2, [r3, #0]
 80091a6:	4b65      	ldr	r3, [pc, #404]	@ (800933c <PC_show_Keys+0x860>)
 80091a8:	0011      	movs	r1, r2
 80091aa:	0018      	movs	r0, r3
 80091ac:	f7ff fc7b 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(MailAPIKeyConfigAddr, MailAPIKeyConfig, MailAPIKeyMaxLength);
 80091b0:	4b7d      	ldr	r3, [pc, #500]	@ (80093a8 <PC_show_Keys+0x8cc>)
 80091b2:	487e      	ldr	r0, [pc, #504]	@ (80093ac <PC_show_Keys+0x8d0>)
 80091b4:	2230      	movs	r2, #48	@ 0x30
 80091b6:	0019      	movs	r1, r3
 80091b8:	f003 f8f0 	bl	800c39c <ReadUint8ArrayEEprom>
  sprintf(msg, "%02d - Stored SMTP2go API key --------: ", MailAPIKeyConfigCmd);
 80091bc:	497c      	ldr	r1, [pc, #496]	@ (80093b0 <PC_show_Keys+0x8d4>)
 80091be:	4b5f      	ldr	r3, [pc, #380]	@ (800933c <PC_show_Keys+0x860>)
 80091c0:	221b      	movs	r2, #27
 80091c2:	0018      	movs	r0, r3
 80091c4:	f01d f914 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091c8:	4b5d      	ldr	r3, [pc, #372]	@ (8009340 <PC_show_Keys+0x864>)
 80091ca:	781a      	ldrb	r2, [r3, #0]
 80091cc:	4b5b      	ldr	r3, [pc, #364]	@ (800933c <PC_show_Keys+0x860>)
 80091ce:	0011      	movs	r1, r2
 80091d0:	0018      	movs	r0, r3
 80091d2:	f7ff fc68 	bl	8008aa6 <PC_selectout>
  sprintf(msg, "%s\r\n", (char*)MailAPIKeyConfig);  // probably too long to held in same buffer
 80091d6:	4a74      	ldr	r2, [pc, #464]	@ (80093a8 <PC_show_Keys+0x8cc>)
 80091d8:	496f      	ldr	r1, [pc, #444]	@ (8009398 <PC_show_Keys+0x8bc>)
 80091da:	4b58      	ldr	r3, [pc, #352]	@ (800933c <PC_show_Keys+0x860>)
 80091dc:	0018      	movs	r0, r3
 80091de:	f01d f907 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 80091e2:	4b57      	ldr	r3, [pc, #348]	@ (8009340 <PC_show_Keys+0x864>)
 80091e4:	781a      	ldrb	r2, [r3, #0]
 80091e6:	4b55      	ldr	r3, [pc, #340]	@ (800933c <PC_show_Keys+0x860>)
 80091e8:	0011      	movs	r1, r2
 80091ea:	0018      	movs	r0, r3
 80091ec:	f7ff fc5b 	bl	8008aa6 <PC_selectout>
#endif

  ReadUint8ArrayEEprom(hPaConfigAddr, hPaConfig, IdSize);
 80091f0:	4b70      	ldr	r3, [pc, #448]	@ (80093b4 <PC_show_Keys+0x8d8>)
 80091f2:	4871      	ldr	r0, [pc, #452]	@ (80093b8 <PC_show_Keys+0x8dc>)
 80091f4:	220c      	movs	r2, #12
 80091f6:	0019      	movs	r1, r3
 80091f8:	f003 f8d0 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, hPaConfig);
 80091fc:	4a6d      	ldr	r2, [pc, #436]	@ (80093b4 <PC_show_Keys+0x8d8>)
 80091fe:	4b4d      	ldr	r3, [pc, #308]	@ (8009334 <PC_show_Keys+0x858>)
 8009200:	0011      	movs	r1, r2
 8009202:	0018      	movs	r0, r3
 8009204:	f7fc f876 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - Air pressure sensor id --------: %s\r\n", hPaConfigCmd, Buffer);
 8009208:	4b4a      	ldr	r3, [pc, #296]	@ (8009334 <PC_show_Keys+0x858>)
 800920a:	496c      	ldr	r1, [pc, #432]	@ (80093bc <PC_show_Keys+0x8e0>)
 800920c:	484b      	ldr	r0, [pc, #300]	@ (800933c <PC_show_Keys+0x860>)
 800920e:	221c      	movs	r2, #28
 8009210:	f01d f8ee 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009214:	4b4a      	ldr	r3, [pc, #296]	@ (8009340 <PC_show_Keys+0x864>)
 8009216:	781a      	ldrb	r2, [r3, #0]
 8009218:	4b48      	ldr	r3, [pc, #288]	@ (800933c <PC_show_Keys+0x860>)
 800921a:	0011      	movs	r1, r2
 800921c:	0018      	movs	r0, r3
 800921e:	f7ff fc42 	bl	8008aa6 <PC_selectout>

  ReadUint8ArrayEEprom(UptimeConfigAddr, UptimeConfig, IdSize);
 8009222:	4b67      	ldr	r3, [pc, #412]	@ (80093c0 <PC_show_Keys+0x8e4>)
 8009224:	4867      	ldr	r0, [pc, #412]	@ (80093c4 <PC_show_Keys+0x8e8>)
 8009226:	220c      	movs	r2, #12
 8009228:	0019      	movs	r1, r3
 800922a:	f003 f8b7 	bl	800c39c <ReadUint8ArrayEEprom>
  uint8ArrayToString(Buffer, UptimeConfig);
 800922e:	4a64      	ldr	r2, [pc, #400]	@ (80093c0 <PC_show_Keys+0x8e4>)
 8009230:	4b40      	ldr	r3, [pc, #256]	@ (8009334 <PC_show_Keys+0x858>)
 8009232:	0011      	movs	r1, r2
 8009234:	0018      	movs	r0, r3
 8009236:	f7fc f85d 	bl	80052f4 <uint8ArrayToString>
  sprintf(msg, "%02d - Uptime sensor id --------------: %s\r\n", UptimeConfigCmd, Buffer);
 800923a:	4b3e      	ldr	r3, [pc, #248]	@ (8009334 <PC_show_Keys+0x858>)
 800923c:	4962      	ldr	r1, [pc, #392]	@ (80093c8 <PC_show_Keys+0x8ec>)
 800923e:	483f      	ldr	r0, [pc, #252]	@ (800933c <PC_show_Keys+0x860>)
 8009240:	221d      	movs	r2, #29
 8009242:	f01d f8d5 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009246:	4b3e      	ldr	r3, [pc, #248]	@ (8009340 <PC_show_Keys+0x864>)
 8009248:	781a      	ldrb	r2, [r3, #0]
 800924a:	4b3c      	ldr	r3, [pc, #240]	@ (800933c <PC_show_Keys+0x860>)
 800924c:	0011      	movs	r1, r2
 800924e:	0018      	movs	r0, r3
 8009250:	f7ff fc29 	bl	8008aa6 <PC_selectout>

  sprintf(msg, "%02d - Clear all definitions in EEPROM\r\n", clearDefsCmd);
 8009254:	495d      	ldr	r1, [pc, #372]	@ (80093cc <PC_show_Keys+0x8f0>)
 8009256:	4b39      	ldr	r3, [pc, #228]	@ (800933c <PC_show_Keys+0x860>)
 8009258:	221e      	movs	r2, #30
 800925a:	0018      	movs	r0, r3
 800925c:	f01d f8c8 	bl	80263f0 <siprintf>
  PC_selectout(&msg[0], usb_out);
 8009260:	4b37      	ldr	r3, [pc, #220]	@ (8009340 <PC_show_Keys+0x864>)
 8009262:	781a      	ldrb	r2, [r3, #0]
 8009264:	4b35      	ldr	r3, [pc, #212]	@ (800933c <PC_show_Keys+0x860>)
 8009266:	0011      	movs	r1, r2
 8009268:	0018      	movs	r0, r3
 800926a:	f7ff fc1c 	bl	8008aa6 <PC_selectout>

  printf_USB("\r\n!!NO LINE EDITING!!\r\n");
 800926e:	4b58      	ldr	r3, [pc, #352]	@ (80093d0 <PC_show_Keys+0x8f4>)
 8009270:	0018      	movs	r0, r3
 8009272:	f7ff fbf3 	bl	8008a5c <printf_USB>
  HAL_Delay(10);
 8009276:	200a      	movs	r0, #10
 8009278:	f00b fc6e 	bl	8014b58 <HAL_Delay>
  printf_USB("If the key differs only the last two bytes,");
 800927c:	4b55      	ldr	r3, [pc, #340]	@ (80093d4 <PC_show_Keys+0x8f8>)
 800927e:	0018      	movs	r0, r3
 8009280:	f7ff fbec 	bl	8008a5c <printf_USB>
  HAL_Delay(10);
 8009284:	200a      	movs	r0, #10
 8009286:	f00b fc67 	bl	8014b58 <HAL_Delay>
  printf_USB(" command example for air pressure => #05,6a\r\n");
 800928a:	4b53      	ldr	r3, [pc, #332]	@ (80093d8 <PC_show_Keys+0x8fc>)
 800928c:	0018      	movs	r0, r3
 800928e:	f7ff fbe5 	bl	8008a5c <printf_USB>
  HAL_Delay(10);
 8009292:	200a      	movs	r0, #10
 8009294:	f00b fc60 	bl	8014b58 <HAL_Delay>
  printf_USB("For the full key variant copy and paste the key sequence");
 8009298:	4b50      	ldr	r3, [pc, #320]	@ (80093dc <PC_show_Keys+0x900>)
 800929a:	0018      	movs	r0, r3
 800929c:	f7ff fbde 	bl	8008a5c <printf_USB>
  HAL_Delay(10);
 80092a0:	200a      	movs	r0, #10
 80092a2:	f00b fc59 	bl	8014b58 <HAL_Delay>
  printf_USB("from opensensemap.org in your account to this input.\r\n");
 80092a6:	4b4e      	ldr	r3, [pc, #312]	@ (80093e0 <PC_show_Keys+0x904>)
 80092a8:	0018      	movs	r0, r3
 80092aa:	f7ff fbd7 	bl	8008a5c <printf_USB>
  HAL_Delay(10);
 80092ae:	200a      	movs	r0, #10
 80092b0:	f00b fc52 	bl	8014b58 <HAL_Delay>
  printf_USB("Command example for a full key for air pressure =>");
 80092b4:	4b4b      	ldr	r3, [pc, #300]	@ (80093e4 <PC_show_Keys+0x908>)
 80092b6:	0018      	movs	r0, r3
 80092b8:	f7ff fbd0 	bl	8008a5c <printf_USB>
  HAL_Delay(10);
 80092bc:	200a      	movs	r0, #10
 80092be:	f00b fc4b 	bl	8014b58 <HAL_Delay>
  printf_USB(" $05,67af09374cdef30007b35055\r\n");
 80092c2:	4b49      	ldr	r3, [pc, #292]	@ (80093e8 <PC_show_Keys+0x90c>)
 80092c4:	0018      	movs	r0, r3
 80092c6:	f7ff fbc9 	bl	8008a5c <printf_USB>
  HAL_Delay(10);
 80092ca:	200a      	movs	r0, #10
 80092cc:	f00b fc44 	bl	8014b58 <HAL_Delay>
  printf_USB("For changing string entries use prefix S, example: ");
 80092d0:	4b46      	ldr	r3, [pc, #280]	@ (80093ec <PC_show_Keys+0x910>)
 80092d2:	0018      	movs	r0, r3
 80092d4:	f7ff fbc2 	bl	8008a5c <printf_USB>
  HAL_Delay(10);
 80092d8:	200a      	movs	r0, #10
 80092da:	f00b fc3d 	bl	8014b58 <HAL_Delay>
  printf_USB("S12,Testsysteem (max 48 chars)\r\n");
 80092de:	4b44      	ldr	r3, [pc, #272]	@ (80093f0 <PC_show_Keys+0x914>)
 80092e0:	0018      	movs	r0, r3
 80092e2:	f7ff fbbb 	bl	8008a5c <printf_USB>
  HAL_Delay(10);
 80092e6:	200a      	movs	r0, #10
 80092e8:	f00b fc36 	bl	8014b58 <HAL_Delay>
  printf_USB("L - toggle logging on/off, current: %s\r\n", usblog?"on":"off");
 80092ec:	4b41      	ldr	r3, [pc, #260]	@ (80093f4 <PC_show_Keys+0x918>)
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <PC_show_Keys+0x81c>
 80092f4:	4b40      	ldr	r3, [pc, #256]	@ (80093f8 <PC_show_Keys+0x91c>)
 80092f6:	e000      	b.n	80092fa <PC_show_Keys+0x81e>
 80092f8:	4b40      	ldr	r3, [pc, #256]	@ (80093fc <PC_show_Keys+0x920>)
 80092fa:	4a41      	ldr	r2, [pc, #260]	@ (8009400 <PC_show_Keys+0x924>)
 80092fc:	0019      	movs	r1, r3
 80092fe:	0010      	movs	r0, r2
 8009300:	f7ff fbac 	bl	8008a5c <printf_USB>
  HAL_Delay(10);
 8009304:	200a      	movs	r0, #10
 8009306:	f00b fc27 	bl	8014b58 <HAL_Delay>
  printf_USB("B - show build information\r\n");
 800930a:	4b3e      	ldr	r3, [pc, #248]	@ (8009404 <PC_show_Keys+0x928>)
 800930c:	0018      	movs	r0, r3
 800930e:	f7ff fba5 	bl	8008a5c <printf_USB>
  HAL_Delay(10);
 8009312:	200a      	movs	r0, #10
 8009314:	f00b fc20 	bl	8014b58 <HAL_Delay>
  if (!usb_out) {
 8009318:	4b09      	ldr	r3, [pc, #36]	@ (8009340 <PC_show_Keys+0x864>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2201      	movs	r2, #1
 800931e:	4053      	eors	r3, r2
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <PC_show_Keys+0x852>
    printf("A sensor key can only be changed by USB input or the by configuration programm.\r\n");
 8009326:	4b38      	ldr	r3, [pc, #224]	@ (8009408 <PC_show_Keys+0x92c>)
 8009328:	0018      	movs	r0, r3
 800932a:	f01d f857 	bl	80263dc <puts>
  }
}
 800932e:	46c0      	nop			@ (mov r8, r8)
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	20000b84 	.word	0x20000b84
 8009338:	0802bca0 	.word	0x0802bca0
 800933c:	20000b30 	.word	0x20000b30
 8009340:	20000b2d 	.word	0x20000b2d
 8009344:	20000cd4 	.word	0x20000cd4
 8009348:	080800f8 	.word	0x080800f8
 800934c:	0802bcd0 	.word	0x0802bcd0
 8009350:	20000ce0 	.word	0x20000ce0
 8009354:	08080104 	.word	0x08080104
 8009358:	0802bd00 	.word	0x0802bd00
 800935c:	20000cec 	.word	0x20000cec
 8009360:	080800b0 	.word	0x080800b0
 8009364:	0802bd30 	.word	0x0802bd30
 8009368:	20000cf8 	.word	0x20000cf8
 800936c:	080800bc 	.word	0x080800bc
 8009370:	0802bd60 	.word	0x0802bd60
 8009374:	20000d04 	.word	0x20000d04
 8009378:	08080170 	.word	0x08080170
 800937c:	0802bd90 	.word	0x0802bd90
 8009380:	20000d10 	.word	0x20000d10
 8009384:	0808017c 	.word	0x0808017c
 8009388:	0802bdc0 	.word	0x0802bdc0
 800938c:	20000d1c 	.word	0x20000d1c
 8009390:	08080260 	.word	0x08080260
 8009394:	0802bdf0 	.word	0x0802bdf0
 8009398:	0802bbb0 	.word	0x0802bbb0
 800939c:	20000d4c 	.word	0x20000d4c
 80093a0:	08080290 	.word	0x08080290
 80093a4:	0802be1c 	.word	0x0802be1c
 80093a8:	20000d7c 	.word	0x20000d7c
 80093ac:	080802c0 	.word	0x080802c0
 80093b0:	0802be48 	.word	0x0802be48
 80093b4:	20000dac 	.word	0x20000dac
 80093b8:	08080188 	.word	0x08080188
 80093bc:	0802be74 	.word	0x0802be74
 80093c0:	20000db8 	.word	0x20000db8
 80093c4:	080801a0 	.word	0x080801a0
 80093c8:	0802bea4 	.word	0x0802bea4
 80093cc:	0802bed4 	.word	0x0802bed4
 80093d0:	0802bf00 	.word	0x0802bf00
 80093d4:	0802bf18 	.word	0x0802bf18
 80093d8:	0802bf44 	.word	0x0802bf44
 80093dc:	0802bf74 	.word	0x0802bf74
 80093e0:	0802bfb0 	.word	0x0802bfb0
 80093e4:	0802bfe8 	.word	0x0802bfe8
 80093e8:	0802c01c 	.word	0x0802c01c
 80093ec:	0802c03c 	.word	0x0802c03c
 80093f0:	0802c070 	.word	0x0802c070
 80093f4:	200027ac 	.word	0x200027ac
 80093f8:	0802c094 	.word	0x0802c094
 80093fc:	0802c098 	.word	0x0802c098
 8009400:	0802c09c 	.word	0x0802c09c
 8009404:	0802c0c8 	.word	0x0802c0c8
 8009408:	0802c0e8 	.word	0x0802c0e8

0800940c <ascii_to_uint8>:

uint8_t ascii_to_uint8(uint8_t *inchar) {
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  if (!isdigit(inchar[0]) || !isdigit(inchar[1])) {
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	1c5a      	adds	r2, r3, #1
 800941a:	4b20      	ldr	r3, [pc, #128]	@ (800949c <ascii_to_uint8+0x90>)
 800941c:	18d3      	adds	r3, r2, r3
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	001a      	movs	r2, r3
 8009422:	2304      	movs	r3, #4
 8009424:	4013      	ands	r3, r2
 8009426:	d00a      	beq.n	800943e <ascii_to_uint8+0x32>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	3301      	adds	r3, #1
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	1c5a      	adds	r2, r3, #1
 8009430:	4b1a      	ldr	r3, [pc, #104]	@ (800949c <ascii_to_uint8+0x90>)
 8009432:	18d3      	adds	r3, r2, r3
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	001a      	movs	r2, r3
 8009438:	2304      	movs	r3, #4
 800943a:	4013      	ands	r3, r2
 800943c:	d105      	bne.n	800944a <ascii_to_uint8+0x3e>
    printf_USB("Error: two decimal numbers expected\r\n");
 800943e:	4b18      	ldr	r3, [pc, #96]	@ (80094a0 <ascii_to_uint8+0x94>)
 8009440:	0018      	movs	r0, r3
 8009442:	f7ff fb0b 	bl	8008a5c <printf_USB>
    return 100;
 8009446:	2364      	movs	r3, #100	@ 0x64
 8009448:	e024      	b.n	8009494 <ascii_to_uint8+0x88>
  }
  uint8_t value = (inchar[0] - '0') * 10 + (inchar[1] - '0');
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	1c1a      	adds	r2, r3, #0
 8009450:	0092      	lsls	r2, r2, #2
 8009452:	18d3      	adds	r3, r2, r3
 8009454:	18db      	adds	r3, r3, r3
 8009456:	b2da      	uxtb	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3301      	adds	r3, #1
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	18d3      	adds	r3, r2, r3
 8009460:	b2da      	uxtb	r2, r3
 8009462:	210f      	movs	r1, #15
 8009464:	187b      	adds	r3, r7, r1
 8009466:	3a10      	subs	r2, #16
 8009468:	701a      	strb	r2, [r3, #0]

  if (value >= maxCmd) {
 800946a:	187b      	adds	r3, r7, r1
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2b1e      	cmp	r3, #30
 8009470:	d905      	bls.n	800947e <ascii_to_uint8+0x72>
    printf_USB("Error: value out of range\r\n");
 8009472:	4b0c      	ldr	r3, [pc, #48]	@ (80094a4 <ascii_to_uint8+0x98>)
 8009474:	0018      	movs	r0, r3
 8009476:	f7ff faf1 	bl	8008a5c <printf_USB>
    return 100;
 800947a:	2364      	movs	r3, #100	@ 0x64
 800947c:	e00a      	b.n	8009494 <ascii_to_uint8+0x88>
  }
  if (value == clearDefsCmd) {
 800947e:	220f      	movs	r2, #15
 8009480:	18bb      	adds	r3, r7, r2
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	2b1e      	cmp	r3, #30
 8009486:	d102      	bne.n	800948e <ascii_to_uint8+0x82>
    value = ClearConfigCmd;
 8009488:	18bb      	adds	r3, r7, r2
 800948a:	22fd      	movs	r2, #253	@ 0xfd
 800948c:	701a      	strb	r2, [r3, #0]
  }
  return (uint8_t)value;
 800948e:	230f      	movs	r3, #15
 8009490:	18fb      	adds	r3, r7, r3
 8009492:	781b      	ldrb	r3, [r3, #0]
}
 8009494:	0018      	movs	r0, r3
 8009496:	46bd      	mov	sp, r7
 8009498:	b004      	add	sp, #16
 800949a:	bd80      	pop	{r7, pc}
 800949c:	0802f168 	.word	0x0802f168
 80094a0:	0802c13c 	.word	0x0802c13c
 80094a4:	0802c164 	.word	0x0802c164

080094a8 <Process_USB_input>:

bool Process_USB_input(uint8_t* data) {
 80094a8:	b590      	push	{r4, r7, lr}
 80094aa:	b0d5      	sub	sp, #340	@ 0x154
 80094ac:	af3e      	add	r7, sp, #248	@ 0xf8
 80094ae:	6078      	str	r0, [r7, #4]
  uint8_t boxConfig[IdSize];
  static uint32_t len = 6;
  uint32_t length = GetUsbRxDataSize();
 80094b0:	f019 fee0 	bl	8023274 <GetUsbRxDataSize>
 80094b4:	0003      	movs	r3, r0
 80094b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t r = 0;
 80094b8:	2357      	movs	r3, #87	@ 0x57
 80094ba:	18fb      	adds	r3, r7, r3
 80094bc:	2200      	movs	r2, #0
 80094be:	701a      	strb	r2, [r3, #0]
  uint8_t i = 0;
 80094c0:	2356      	movs	r3, #86	@ 0x56
 80094c2:	18fb      	adds	r3, r7, r3
 80094c4:	2200      	movs	r2, #0
 80094c6:	701a      	strb	r2, [r3, #0]
  char Buffer[48];
  uint8_t* message = (unsigned char*)strstr((const char*)data, PREAMBLE_F);  // zoek op $
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2124      	movs	r1, #36	@ 0x24
 80094cc:	0018      	movs	r0, r3
 80094ce:	f01d f901 	bl	80266d4 <strchr>
 80094d2:	0003      	movs	r3, r0
 80094d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if ((length == 1) && (message != NULL) && (len != 28)){
 80094d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d10f      	bne.n	80094fc <Process_USB_input+0x54>
 80094dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00c      	beq.n	80094fc <Process_USB_input+0x54>
 80094e2:	4bc8      	ldr	r3, [pc, #800]	@ (8009804 <Process_USB_input+0x35c>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b1c      	cmp	r3, #28
 80094e8:	d008      	beq.n	80094fc <Process_USB_input+0x54>
      Debug("Switching to input length of 28 for full opensensemap keylength");
 80094ea:	4ac7      	ldr	r2, [pc, #796]	@ (8009808 <Process_USB_input+0x360>)
 80094ec:	4bc7      	ldr	r3, [pc, #796]	@ (800980c <Process_USB_input+0x364>)
 80094ee:	0019      	movs	r1, r3
 80094f0:	2003      	movs	r0, #3
 80094f2:	f00a fdaf 	bl	8014054 <CreateLine>
      len = 28;
 80094f6:	4bc3      	ldr	r3, [pc, #780]	@ (8009804 <Process_USB_input+0x35c>)
 80094f8:	221c      	movs	r2, #28
 80094fa:	601a      	str	r2, [r3, #0]
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_S);  // zoek op S
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2153      	movs	r1, #83	@ 0x53
 8009500:	0018      	movs	r0, r3
 8009502:	f01d f8e7 	bl	80266d4 <strchr>
 8009506:	0003      	movs	r3, r0
 8009508:	64bb      	str	r3, [r7, #72]	@ 0x48
  if ((length == 1) && (message != NULL) && (len != 48)){
 800950a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800950c:	2b01      	cmp	r3, #1
 800950e:	d10f      	bne.n	8009530 <Process_USB_input+0x88>
 8009510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00c      	beq.n	8009530 <Process_USB_input+0x88>
 8009516:	4bbb      	ldr	r3, [pc, #748]	@ (8009804 <Process_USB_input+0x35c>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b30      	cmp	r3, #48	@ 0x30
 800951c:	d008      	beq.n	8009530 <Process_USB_input+0x88>
      Debug("Switching to input length of 48 for full name strings");
 800951e:	4abc      	ldr	r2, [pc, #752]	@ (8009810 <Process_USB_input+0x368>)
 8009520:	4bba      	ldr	r3, [pc, #744]	@ (800980c <Process_USB_input+0x364>)
 8009522:	0019      	movs	r1, r3
 8009524:	2003      	movs	r0, #3
 8009526:	f00a fd95 	bl	8014054 <CreateLine>
      len = 48;
 800952a:	4bb6      	ldr	r3, [pc, #728]	@ (8009804 <Process_USB_input+0x35c>)
 800952c:	2230      	movs	r2, #48	@ 0x30
 800952e:	601a      	str	r2, [r3, #0]
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_L);  // Search for 'U'to toggle USB logging
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	214c      	movs	r1, #76	@ 0x4c
 8009534:	0018      	movs	r0, r3
 8009536:	f01d f8cd 	bl	80266d4 <strchr>
 800953a:	0003      	movs	r3, r0
 800953c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if ((length == 1) && (message != NULL)){
 800953e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009540:	2b01      	cmp	r3, #1
 8009542:	d135      	bne.n	80095b0 <Process_USB_input+0x108>
 8009544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009546:	2b00      	cmp	r3, #0
 8009548:	d032      	beq.n	80095b0 <Process_USB_input+0x108>
    ReadUint8ArrayEEprom(USBlogstatusConfigAddr, (uint8_t*)usblog, uint8_tSize);
 800954a:	4bb2      	ldr	r3, [pc, #712]	@ (8009814 <Process_USB_input+0x36c>)
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	0019      	movs	r1, r3
 8009550:	4bb1      	ldr	r3, [pc, #708]	@ (8009818 <Process_USB_input+0x370>)
 8009552:	2201      	movs	r2, #1
 8009554:	0018      	movs	r0, r3
 8009556:	f002 ff21 	bl	800c39c <ReadUint8ArrayEEprom>
    usblog = !usblog; // log info to usb too
 800955a:	4bae      	ldr	r3, [pc, #696]	@ (8009814 <Process_USB_input+0x36c>)
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	1e5a      	subs	r2, r3, #1
 8009560:	4193      	sbcs	r3, r2
 8009562:	b2db      	uxtb	r3, r3
 8009564:	2201      	movs	r2, #1
 8009566:	4053      	eors	r3, r2
 8009568:	b2db      	uxtb	r3, r3
 800956a:	1c1a      	adds	r2, r3, #0
 800956c:	2301      	movs	r3, #1
 800956e:	4013      	ands	r3, r2
 8009570:	b2da      	uxtb	r2, r3
 8009572:	4ba8      	ldr	r3, [pc, #672]	@ (8009814 <Process_USB_input+0x36c>)
 8009574:	701a      	strb	r2, [r3, #0]
    WriteUint8ArrayEepromSafe(USBlogstatusConfigAddr, (uint8_t*)usblog, uint8_tSize, uint8_tSize);
 8009576:	4ba7      	ldr	r3, [pc, #668]	@ (8009814 <Process_USB_input+0x36c>)
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	0019      	movs	r1, r3
 800957c:	48a6      	ldr	r0, [pc, #664]	@ (8009818 <Process_USB_input+0x370>)
 800957e:	2301      	movs	r3, #1
 8009580:	2201      	movs	r2, #1
 8009582:	f002 feef 	bl	800c364 <WriteUint8ArrayEepromSafe>
    printf_USB("\r\nSwitching USB logging to %s\r\n", usblog?"on":"off");
 8009586:	4ba3      	ldr	r3, [pc, #652]	@ (8009814 <Process_USB_input+0x36c>)
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <Process_USB_input+0xea>
 800958e:	4ba3      	ldr	r3, [pc, #652]	@ (800981c <Process_USB_input+0x374>)
 8009590:	e000      	b.n	8009594 <Process_USB_input+0xec>
 8009592:	4ba3      	ldr	r3, [pc, #652]	@ (8009820 <Process_USB_input+0x378>)
 8009594:	4aa3      	ldr	r2, [pc, #652]	@ (8009824 <Process_USB_input+0x37c>)
 8009596:	0019      	movs	r1, r3
 8009598:	0010      	movs	r0, r2
 800959a:	f7ff fa5f 	bl	8008a5c <printf_USB>
    length = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    data[0] = '\0';
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 80095a8:	f019 fe4c 	bl	8023244 <ResetUsbRxDataSize>
    return true;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e223      	b.n	80099f8 <Process_USB_input+0x550>
  }
  message = (unsigned char*)strstr((const char*)data, PREAMBLE_B);  // Search for 'B'to show the build
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2142      	movs	r1, #66	@ 0x42
 80095b4:	0018      	movs	r0, r3
 80095b6:	f01d f88d 	bl	80266d4 <strchr>
 80095ba:	0003      	movs	r3, r0
 80095bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if ((length == 1) && (message != NULL)){
 80095be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d10d      	bne.n	80095e0 <Process_USB_input+0x138>
 80095c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00a      	beq.n	80095e0 <Process_USB_input+0x138>
    BinaryReleaseInfo();
 80095ca:	f00a fdd7 	bl	801417c <BinaryReleaseInfo>
    length = 0;
 80095ce:	2300      	movs	r3, #0
 80095d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    data[0] = '\0';
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	701a      	strb	r2, [r3, #0]
    ResetUsbRxDataSize();
 80095d8:	f019 fe34 	bl	8023244 <ResetUsbRxDataSize>
    return true;
 80095dc:	2301      	movs	r3, #1
 80095de:	e20b      	b.n	80099f8 <Process_USB_input+0x550>
  }
  if ((length >= len) || (data[length-1] == 13)) {
 80095e0:	4b88      	ldr	r3, [pc, #544]	@ (8009804 <Process_USB_input+0x35c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d207      	bcs.n	80095fa <Process_USB_input+0x152>
 80095ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095ec:	3b01      	subs	r3, #1
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	18d3      	adds	r3, r2, r3
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b0d      	cmp	r3, #13
 80095f6:	d000      	beq.n	80095fa <Process_USB_input+0x152>
 80095f8:	e1eb      	b.n	80099d2 <Process_USB_input+0x52a>
    // 'S' is for entering a ASCII string
    if((data[0] == '#') || (data[0] == '$') || (data[0] == 'S')) {
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	2b23      	cmp	r3, #35	@ 0x23
 8009600:	d008      	beq.n	8009614 <Process_USB_input+0x16c>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	2b24      	cmp	r3, #36	@ 0x24
 8009608:	d004      	beq.n	8009614 <Process_USB_input+0x16c>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	2b53      	cmp	r3, #83	@ 0x53
 8009610:	d000      	beq.n	8009614 <Process_USB_input+0x16c>
 8009612:	e1c0      	b.n	8009996 <Process_USB_input+0x4ee>
      received.Command = ascii_to_uint8(&data[1]);  // calculate the command number
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	3301      	adds	r3, #1
 8009618:	0018      	movs	r0, r3
 800961a:	f7ff fef7 	bl	800940c <ascii_to_uint8>
 800961e:	0003      	movs	r3, r0
 8009620:	001a      	movs	r2, r3
 8009622:	4b81      	ldr	r3, [pc, #516]	@ (8009828 <Process_USB_input+0x380>)
 8009624:	701a      	strb	r2, [r3, #0]
      if (received.Command == 100)
 8009626:	4b80      	ldr	r3, [pc, #512]	@ (8009828 <Process_USB_input+0x380>)
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	2b64      	cmp	r3, #100	@ 0x64
 800962c:	d11b      	bne.n	8009666 <Process_USB_input+0x1be>
      {
        ResetUsbRxDataSize();
 800962e:	f019 fe09 	bl	8023244 <ResetUsbRxDataSize>
        PC_show_Keys();
 8009632:	f7ff fa53 	bl	8008adc <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 8009636:	2355      	movs	r3, #85	@ 0x55
 8009638:	18fb      	adds	r3, r7, r3
 800963a:	2200      	movs	r2, #0
 800963c:	701a      	strb	r2, [r3, #0]
 800963e:	e00b      	b.n	8009658 <Process_USB_input+0x1b0>
          data[i] = '\0';
 8009640:	2155      	movs	r1, #85	@ 0x55
 8009642:	187b      	adds	r3, r7, r1
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	18d3      	adds	r3, r2, r3
 800964a:	2200      	movs	r2, #0
 800964c:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 800964e:	187b      	adds	r3, r7, r1
 8009650:	781a      	ldrb	r2, [r3, #0]
 8009652:	187b      	adds	r3, r7, r1
 8009654:	3201      	adds	r2, #1
 8009656:	701a      	strb	r2, [r3, #0]
 8009658:	2355      	movs	r3, #85	@ 0x55
 800965a:	18fb      	adds	r3, r7, r3
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	2b1f      	cmp	r3, #31
 8009660:	d9ee      	bls.n	8009640 <Process_USB_input+0x198>
        }
        return false; // value out of range
 8009662:	2300      	movs	r3, #0
 8009664:	e1c8      	b.n	80099f8 <Process_USB_input+0x550>
      }
      if (data[3] == ',') {
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	3303      	adds	r3, #3
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	2b2c      	cmp	r3, #44	@ 0x2c
 800966e:	d000      	beq.n	8009672 <Process_USB_input+0x1ca>
 8009670:	e175      	b.n	800995e <Process_USB_input+0x4b6>
        for (i=4; i < len; i++) {
 8009672:	2356      	movs	r3, #86	@ 0x56
 8009674:	18fb      	adds	r3, r7, r3
 8009676:	2204      	movs	r2, #4
 8009678:	701a      	strb	r2, [r3, #0]
 800967a:	e0e7      	b.n	800984c <Process_USB_input+0x3a4>
          if (data[0] == 'S') {
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b53      	cmp	r3, #83	@ 0x53
 8009682:	d10f      	bne.n	80096a4 <Process_USB_input+0x1fc>
            if (data[i] == 13) {
 8009684:	2156      	movs	r1, #86	@ 0x56
 8009686:	187b      	adds	r3, r7, r1
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	18d3      	adds	r3, r2, r3
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	2b0d      	cmp	r3, #13
 8009692:	d000      	beq.n	8009696 <Process_USB_input+0x1ee>
 8009694:	e0d4      	b.n	8009840 <Process_USB_input+0x398>
              data[i] = 0;
 8009696:	187b      	adds	r3, r7, r1
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	18d3      	adds	r3, r2, r3
 800969e:	2200      	movs	r2, #0
 80096a0:	701a      	strb	r2, [r3, #0]
              break;
 80096a2:	e0db      	b.n	800985c <Process_USB_input+0x3b4>
            }
          }
          else {
          HAL_Delay(10);
 80096a4:	200a      	movs	r0, #10
 80096a6:	f00b fa57 	bl	8014b58 <HAL_Delay>
            if (isxdigit(data[i])) {
 80096aa:	2156      	movs	r1, #86	@ 0x56
 80096ac:	187b      	adds	r3, r7, r1
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	18d3      	adds	r3, r2, r3
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	1c5a      	adds	r2, r3, #1
 80096b8:	4b5c      	ldr	r3, [pc, #368]	@ (800982c <Process_USB_input+0x384>)
 80096ba:	18d3      	adds	r3, r2, r3
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	001a      	movs	r2, r3
 80096c0:	2344      	movs	r3, #68	@ 0x44
 80096c2:	4013      	ands	r3, r2
 80096c4:	d072      	beq.n	80097ac <Process_USB_input+0x304>
              result = (result << 4) | (isdigit(data[i]) ? data[i] - '0' : toupper(data[i]) - 'A' + 10);
 80096c6:	4b5a      	ldr	r3, [pc, #360]	@ (8009830 <Process_USB_input+0x388>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	b25b      	sxtb	r3, r3
 80096cc:	011b      	lsls	r3, r3, #4
 80096ce:	b25a      	sxtb	r2, r3
 80096d0:	0008      	movs	r0, r1
 80096d2:	187b      	adds	r3, r7, r1
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	6879      	ldr	r1, [r7, #4]
 80096d8:	18cb      	adds	r3, r1, r3
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	1c59      	adds	r1, r3, #1
 80096de:	4b53      	ldr	r3, [pc, #332]	@ (800982c <Process_USB_input+0x384>)
 80096e0:	18cb      	adds	r3, r1, r3
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	0019      	movs	r1, r3
 80096e6:	2304      	movs	r3, #4
 80096e8:	400b      	ands	r3, r1
 80096ea:	d008      	beq.n	80096fe <Process_USB_input+0x256>
 80096ec:	183b      	adds	r3, r7, r0
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	18cb      	adds	r3, r1, r3
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	3b30      	subs	r3, #48	@ 0x30
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	b25b      	sxtb	r3, r3
 80096fc:	e01e      	b.n	800973c <Process_USB_input+0x294>
 80096fe:	2356      	movs	r3, #86	@ 0x56
 8009700:	18fb      	adds	r3, r7, r3
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	6879      	ldr	r1, [r7, #4]
 8009706:	18c9      	adds	r1, r1, r3
 8009708:	2047      	movs	r0, #71	@ 0x47
 800970a:	183b      	adds	r3, r7, r0
 800970c:	7809      	ldrb	r1, [r1, #0]
 800970e:	7019      	strb	r1, [r3, #0]
 8009710:	183b      	adds	r3, r7, r0
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	1c59      	adds	r1, r3, #1
 8009716:	4b45      	ldr	r3, [pc, #276]	@ (800982c <Process_USB_input+0x384>)
 8009718:	18cb      	adds	r3, r1, r3
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	0019      	movs	r1, r3
 800971e:	2303      	movs	r3, #3
 8009720:	400b      	ands	r3, r1
 8009722:	2b02      	cmp	r3, #2
 8009724:	d103      	bne.n	800972e <Process_USB_input+0x286>
 8009726:	183b      	adds	r3, r7, r0
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	3b20      	subs	r3, #32
 800972c:	e002      	b.n	8009734 <Process_USB_input+0x28c>
 800972e:	2347      	movs	r3, #71	@ 0x47
 8009730:	18fb      	adds	r3, r7, r3
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	b2db      	uxtb	r3, r3
 8009736:	3b37      	subs	r3, #55	@ 0x37
 8009738:	b2db      	uxtb	r3, r3
 800973a:	b25b      	sxtb	r3, r3
 800973c:	4313      	orrs	r3, r2
 800973e:	b25b      	sxtb	r3, r3
 8009740:	b2da      	uxtb	r2, r3
 8009742:	4b3b      	ldr	r3, [pc, #236]	@ (8009830 <Process_USB_input+0x388>)
 8009744:	701a      	strb	r2, [r3, #0]
              printf_USB("Result is 0x%02X\r\n", result);
 8009746:	4b3a      	ldr	r3, [pc, #232]	@ (8009830 <Process_USB_input+0x388>)
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	001a      	movs	r2, r3
 800974c:	4b39      	ldr	r3, [pc, #228]	@ (8009834 <Process_USB_input+0x38c>)
 800974e:	0011      	movs	r1, r2
 8009750:	0018      	movs	r0, r3
 8009752:	f7ff f983 	bl	8008a5c <printf_USB>
              HAL_Delay(10);
 8009756:	200a      	movs	r0, #10
 8009758:	f00b f9fe 	bl	8014b58 <HAL_Delay>
              if (len == 28) {
 800975c:	4b29      	ldr	r3, [pc, #164]	@ (8009804 <Process_USB_input+0x35c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b1c      	cmp	r3, #28
 8009762:	d16d      	bne.n	8009840 <Process_USB_input+0x398>
                if ((i % 2) == 1) {
 8009764:	2356      	movs	r3, #86	@ 0x56
 8009766:	18fb      	adds	r3, r7, r3
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	2201      	movs	r2, #1
 800976c:	4013      	ands	r3, r2
 800976e:	b2db      	uxtb	r3, r3
 8009770:	2b00      	cmp	r3, #0
 8009772:	d065      	beq.n	8009840 <Process_USB_input+0x398>
                  data[r] = result;
 8009774:	2457      	movs	r4, #87	@ 0x57
 8009776:	193b      	adds	r3, r7, r4
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	18d3      	adds	r3, r2, r3
 800977e:	4a2c      	ldr	r2, [pc, #176]	@ (8009830 <Process_USB_input+0x388>)
 8009780:	7812      	ldrb	r2, [r2, #0]
 8009782:	701a      	strb	r2, [r3, #0]
                  Debug("data[%d] = 0x%02X",r, data[r]);
 8009784:	193b      	adds	r3, r7, r4
 8009786:	7818      	ldrb	r0, [r3, #0]
 8009788:	193b      	adds	r3, r7, r4
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	18d3      	adds	r3, r2, r3
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	4a29      	ldr	r2, [pc, #164]	@ (8009838 <Process_USB_input+0x390>)
 8009794:	491d      	ldr	r1, [pc, #116]	@ (800980c <Process_USB_input+0x364>)
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	0003      	movs	r3, r0
 800979a:	2003      	movs	r0, #3
 800979c:	f00a fc5a 	bl	8014054 <CreateLine>
                  r++;
 80097a0:	193b      	adds	r3, r7, r4
 80097a2:	781a      	ldrb	r2, [r3, #0]
 80097a4:	193b      	adds	r3, r7, r4
 80097a6:	3201      	adds	r2, #1
 80097a8:	701a      	strb	r2, [r3, #0]
 80097aa:	e049      	b.n	8009840 <Process_USB_input+0x398>
                }
              }
            }
            else {
              Debug("Invalid hexadecimal character: '%c at position %d", data[i], i);
 80097ac:	2156      	movs	r1, #86	@ 0x56
 80097ae:	187b      	adds	r3, r7, r1
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	18d3      	adds	r3, r2, r3
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	0018      	movs	r0, r3
 80097ba:	187b      	adds	r3, r7, r1
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	4a1f      	ldr	r2, [pc, #124]	@ (800983c <Process_USB_input+0x394>)
 80097c0:	4912      	ldr	r1, [pc, #72]	@ (800980c <Process_USB_input+0x364>)
 80097c2:	9300      	str	r3, [sp, #0]
 80097c4:	0003      	movs	r3, r0
 80097c6:	2003      	movs	r0, #3
 80097c8:	f00a fc44 	bl	8014054 <CreateLine>
              ResetUsbRxDataSize();
 80097cc:	f019 fd3a 	bl	8023244 <ResetUsbRxDataSize>
              PC_show_Keys();
 80097d0:	f7ff f984 	bl	8008adc <PC_show_Keys>
              for (uint8_t i=0; i < 32; i++) {
 80097d4:	2354      	movs	r3, #84	@ 0x54
 80097d6:	18fb      	adds	r3, r7, r3
 80097d8:	2200      	movs	r2, #0
 80097da:	701a      	strb	r2, [r3, #0]
 80097dc:	e00b      	b.n	80097f6 <Process_USB_input+0x34e>
                data[i] = '\0';
 80097de:	2154      	movs	r1, #84	@ 0x54
 80097e0:	187b      	adds	r3, r7, r1
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	18d3      	adds	r3, r2, r3
 80097e8:	2200      	movs	r2, #0
 80097ea:	701a      	strb	r2, [r3, #0]
              for (uint8_t i=0; i < 32; i++) {
 80097ec:	187b      	adds	r3, r7, r1
 80097ee:	781a      	ldrb	r2, [r3, #0]
 80097f0:	187b      	adds	r3, r7, r1
 80097f2:	3201      	adds	r2, #1
 80097f4:	701a      	strb	r2, [r3, #0]
 80097f6:	2354      	movs	r3, #84	@ 0x54
 80097f8:	18fb      	adds	r3, r7, r3
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b1f      	cmp	r3, #31
 80097fe:	d9ee      	bls.n	80097de <Process_USB_input+0x336>
              }
              return false; // Of een andere foutwaarde
 8009800:	2300      	movs	r3, #0
 8009802:	e0f9      	b.n	80099f8 <Process_USB_input+0x550>
 8009804:	20000038 	.word	0x20000038
 8009808:	0802c180 	.word	0x0802c180
 800980c:	0802c1c0 	.word	0x0802c1c0
 8009810:	0802c1c4 	.word	0x0802c1c4
 8009814:	200027ac 	.word	0x200027ac
 8009818:	08080194 	.word	0x08080194
 800981c:	0802c094 	.word	0x0802c094
 8009820:	0802c098 	.word	0x0802c098
 8009824:	0802c1fc 	.word	0x0802c1fc
 8009828:	2000091c 	.word	0x2000091c
 800982c:	0802f168 	.word	0x0802f168
 8009830:	20000a20 	.word	0x20000a20
 8009834:	0802c21c 	.word	0x0802c21c
 8009838:	0802c230 	.word	0x0802c230
 800983c:	0802c244 	.word	0x0802c244
        for (i=4; i < len; i++) {
 8009840:	2156      	movs	r1, #86	@ 0x56
 8009842:	187b      	adds	r3, r7, r1
 8009844:	781a      	ldrb	r2, [r3, #0]
 8009846:	187b      	adds	r3, r7, r1
 8009848:	3201      	adds	r2, #1
 800984a:	701a      	strb	r2, [r3, #0]
 800984c:	2356      	movs	r3, #86	@ 0x56
 800984e:	18fb      	adds	r3, r7, r3
 8009850:	781a      	ldrb	r2, [r3, #0]
 8009852:	4b6b      	ldr	r3, [pc, #428]	@ (8009a00 <Process_USB_input+0x558>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d200      	bcs.n	800985c <Process_USB_input+0x3b4>
 800985a:	e70f      	b.n	800967c <Process_USB_input+0x1d4>
            }
          }
        }
        if (len < 48) {
 800985c:	4b68      	ldr	r3, [pc, #416]	@ (8009a00 <Process_USB_input+0x558>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b2f      	cmp	r3, #47	@ 0x2f
 8009862:	d825      	bhi.n	80098b0 <Process_USB_input+0x408>
          if (len == 6) {
 8009864:	4b66      	ldr	r3, [pc, #408]	@ (8009a00 <Process_USB_input+0x558>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b06      	cmp	r3, #6
 800986a:	d114      	bne.n	8009896 <Process_USB_input+0x3ee>
            ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 800986c:	2438      	movs	r4, #56	@ 0x38
 800986e:	193b      	adds	r3, r7, r4
 8009870:	4864      	ldr	r0, [pc, #400]	@ (8009a04 <Process_USB_input+0x55c>)
 8009872:	220c      	movs	r2, #12
 8009874:	0019      	movs	r1, r3
 8009876:	f002 fd91 	bl	800c39c <ReadUint8ArrayEEprom>
            boxConfig[11] = result; //overwrite the last byte of the key
 800987a:	4b63      	ldr	r3, [pc, #396]	@ (8009a08 <Process_USB_input+0x560>)
 800987c:	781a      	ldrb	r2, [r3, #0]
 800987e:	0021      	movs	r1, r4
 8009880:	187b      	adds	r3, r7, r1
 8009882:	72da      	strb	r2, [r3, #11]
            memcpy(received.Payload, boxConfig, IdSize);
 8009884:	4b61      	ldr	r3, [pc, #388]	@ (8009a0c <Process_USB_input+0x564>)
 8009886:	2202      	movs	r2, #2
 8009888:	1879      	adds	r1, r7, r1
 800988a:	189b      	adds	r3, r3, r2
 800988c:	220c      	movs	r2, #12
 800988e:	0018      	movs	r0, r3
 8009890:	f01c fff4 	bl	802687c <memcpy>
 8009894:	e005      	b.n	80098a2 <Process_USB_input+0x3fa>
          }
          else {
            memcpy(received.Payload, data, IdSize);
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	4b5d      	ldr	r3, [pc, #372]	@ (8009a10 <Process_USB_input+0x568>)
 800989a:	220c      	movs	r2, #12
 800989c:	0018      	movs	r0, r3
 800989e:	f01c ffed 	bl	802687c <memcpy>
          }
          received.Payload[12] = '\0';
 80098a2:	4b5a      	ldr	r3, [pc, #360]	@ (8009a0c <Process_USB_input+0x564>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	739a      	strb	r2, [r3, #14]
          received.PayloadLength = IdSize;
 80098a8:	4b58      	ldr	r3, [pc, #352]	@ (8009a0c <Process_USB_input+0x564>)
 80098aa:	220c      	movs	r2, #12
 80098ac:	705a      	strb	r2, [r3, #1]
 80098ae:	e006      	b.n	80098be <Process_USB_input+0x416>
        }
        else {
          received.PayloadLength = i-3;  // The string terminator counts
 80098b0:	2356      	movs	r3, #86	@ 0x56
 80098b2:	18fb      	adds	r3, r7, r3
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	3b03      	subs	r3, #3
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	4b54      	ldr	r3, [pc, #336]	@ (8009a0c <Process_USB_input+0x564>)
 80098bc:	705a      	strb	r2, [r3, #1]
        }
        if (len < 48) {
 80098be:	4b50      	ldr	r3, [pc, #320]	@ (8009a00 <Process_USB_input+0x558>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80098c4:	d80d      	bhi.n	80098e2 <Process_USB_input+0x43a>
          uint8ArrayToString(Buffer, received.Payload);
 80098c6:	4a52      	ldr	r2, [pc, #328]	@ (8009a10 <Process_USB_input+0x568>)
 80098c8:	2408      	movs	r4, #8
 80098ca:	193b      	adds	r3, r7, r4
 80098cc:	0011      	movs	r1, r2
 80098ce:	0018      	movs	r0, r3
 80098d0:	f7fb fd10 	bl	80052f4 <uint8ArrayToString>
          Debug("received Payload to write %s", Buffer);
 80098d4:	193b      	adds	r3, r7, r4
 80098d6:	4a4f      	ldr	r2, [pc, #316]	@ (8009a14 <Process_USB_input+0x56c>)
 80098d8:	494f      	ldr	r1, [pc, #316]	@ (8009a18 <Process_USB_input+0x570>)
 80098da:	2003      	movs	r0, #3
 80098dc:	f00a fbba 	bl	8014054 <CreateLine>
 80098e0:	e012      	b.n	8009908 <Process_USB_input+0x460>
        }
        else if (len == 48) {
 80098e2:	4b47      	ldr	r3, [pc, #284]	@ (8009a00 <Process_USB_input+0x558>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b30      	cmp	r3, #48	@ 0x30
 80098e8:	d10e      	bne.n	8009908 <Process_USB_input+0x460>
          memcpy(received.Payload, data+4, i);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	1d19      	adds	r1, r3, #4
 80098ee:	2356      	movs	r3, #86	@ 0x56
 80098f0:	18fb      	adds	r3, r7, r3
 80098f2:	781a      	ldrb	r2, [r3, #0]
 80098f4:	4b46      	ldr	r3, [pc, #280]	@ (8009a10 <Process_USB_input+0x568>)
 80098f6:	0018      	movs	r0, r3
 80098f8:	f01c ffc0 	bl	802687c <memcpy>
          Debug("received Payload to write %s", received.Payload);
 80098fc:	4b44      	ldr	r3, [pc, #272]	@ (8009a10 <Process_USB_input+0x568>)
 80098fe:	4a45      	ldr	r2, [pc, #276]	@ (8009a14 <Process_USB_input+0x56c>)
 8009900:	4945      	ldr	r1, [pc, #276]	@ (8009a18 <Process_USB_input+0x570>)
 8009902:	2003      	movs	r0, #3
 8009904:	f00a fba6 	bl	8014054 <CreateLine>
        }
        ProcessCmd(received);
 8009908:	4c40      	ldr	r4, [pc, #256]	@ (8009a0c <Process_USB_input+0x564>)
 800990a:	466b      	mov	r3, sp
 800990c:	0018      	movs	r0, r3
 800990e:	0023      	movs	r3, r4
 8009910:	3310      	adds	r3, #16
 8009912:	22f4      	movs	r2, #244	@ 0xf4
 8009914:	0019      	movs	r1, r3
 8009916:	f01c ffb1 	bl	802687c <memcpy>
 800991a:	6820      	ldr	r0, [r4, #0]
 800991c:	6861      	ldr	r1, [r4, #4]
 800991e:	68a2      	ldr	r2, [r4, #8]
 8009920:	68e3      	ldr	r3, [r4, #12]
 8009922:	f7fe fdf1 	bl	8008508 <ProcessCmd>
        ResetUsbRxDataSize();
 8009926:	f019 fc8d 	bl	8023244 <ResetUsbRxDataSize>
        PC_show_Keys();
 800992a:	f7ff f8d7 	bl	8008adc <PC_show_Keys>
        for (uint8_t i=0; i < 32; i++) {
 800992e:	2353      	movs	r3, #83	@ 0x53
 8009930:	18fb      	adds	r3, r7, r3
 8009932:	2200      	movs	r2, #0
 8009934:	701a      	strb	r2, [r3, #0]
 8009936:	e00b      	b.n	8009950 <Process_USB_input+0x4a8>
          data[i] = '\0';
 8009938:	2153      	movs	r1, #83	@ 0x53
 800993a:	187b      	adds	r3, r7, r1
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	18d3      	adds	r3, r2, r3
 8009942:	2200      	movs	r2, #0
 8009944:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8009946:	187b      	adds	r3, r7, r1
 8009948:	781a      	ldrb	r2, [r3, #0]
 800994a:	187b      	adds	r3, r7, r1
 800994c:	3201      	adds	r2, #1
 800994e:	701a      	strb	r2, [r3, #0]
 8009950:	2353      	movs	r3, #83	@ 0x53
 8009952:	18fb      	adds	r3, r7, r3
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	2b1f      	cmp	r3, #31
 8009958:	d9ee      	bls.n	8009938 <Process_USB_input+0x490>
        }
        return true;
 800995a:	2301      	movs	r3, #1
 800995c:	e04c      	b.n	80099f8 <Process_USB_input+0x550>
      }
      else {
        printf_USB("\r\nInvalid input; Command comma not found\r\n");
 800995e:	4b2f      	ldr	r3, [pc, #188]	@ (8009a1c <Process_USB_input+0x574>)
 8009960:	0018      	movs	r0, r3
 8009962:	f7ff f87b 	bl	8008a5c <printf_USB>
        ResetUsbRxDataSize();
 8009966:	f019 fc6d 	bl	8023244 <ResetUsbRxDataSize>
        for (uint8_t i=0; i < 32; i++) {
 800996a:	2352      	movs	r3, #82	@ 0x52
 800996c:	18fb      	adds	r3, r7, r3
 800996e:	2200      	movs	r2, #0
 8009970:	701a      	strb	r2, [r3, #0]
 8009972:	e00b      	b.n	800998c <Process_USB_input+0x4e4>
          data[i] = '\0';
 8009974:	2152      	movs	r1, #82	@ 0x52
 8009976:	187b      	adds	r3, r7, r1
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	18d3      	adds	r3, r2, r3
 800997e:	2200      	movs	r2, #0
 8009980:	701a      	strb	r2, [r3, #0]
        for (uint8_t i=0; i < 32; i++) {
 8009982:	187b      	adds	r3, r7, r1
 8009984:	781a      	ldrb	r2, [r3, #0]
 8009986:	187b      	adds	r3, r7, r1
 8009988:	3201      	adds	r2, #1
 800998a:	701a      	strb	r2, [r3, #0]
 800998c:	2352      	movs	r3, #82	@ 0x52
 800998e:	18fb      	adds	r3, r7, r3
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	2b1f      	cmp	r3, #31
 8009994:	d9ee      	bls.n	8009974 <Process_USB_input+0x4cc>
        }
      }
    }
//    else {
    PC_show_Keys();
 8009996:	f7ff f8a1 	bl	8008adc <PC_show_Keys>
    ResetUsbRxDataSize();
 800999a:	f019 fc53 	bl	8023244 <ResetUsbRxDataSize>
//    }
    for (uint8_t i=0; i < length; i++) {
 800999e:	2351      	movs	r3, #81	@ 0x51
 80099a0:	18fb      	adds	r3, r7, r3
 80099a2:	2200      	movs	r2, #0
 80099a4:	701a      	strb	r2, [r3, #0]
 80099a6:	e00b      	b.n	80099c0 <Process_USB_input+0x518>
      data[i] = '\0';
 80099a8:	2151      	movs	r1, #81	@ 0x51
 80099aa:	187b      	adds	r3, r7, r1
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	18d3      	adds	r3, r2, r3
 80099b2:	2200      	movs	r2, #0
 80099b4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i=0; i < length; i++) {
 80099b6:	187b      	adds	r3, r7, r1
 80099b8:	781a      	ldrb	r2, [r3, #0]
 80099ba:	187b      	adds	r3, r7, r1
 80099bc:	3201      	adds	r2, #1
 80099be:	701a      	strb	r2, [r3, #0]
 80099c0:	2351      	movs	r3, #81	@ 0x51
 80099c2:	18fb      	adds	r3, r7, r3
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d8ed      	bhi.n	80099a8 <Process_USB_input+0x500>
    }
    len = 6;
 80099cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009a00 <Process_USB_input+0x558>)
 80099ce:	2206      	movs	r2, #6
 80099d0:	601a      	str	r2, [r3, #0]
  }
  if (formerlength != length) {
 80099d2:	4b13      	ldr	r3, [pc, #76]	@ (8009a20 <Process_USB_input+0x578>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80099d8:	429a      	cmp	r2, r3
 80099da:	d008      	beq.n	80099ee <Process_USB_input+0x546>
    printf_USB("USB input: %s\r", (const char*)data);
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	4b11      	ldr	r3, [pc, #68]	@ (8009a24 <Process_USB_input+0x57c>)
 80099e0:	0011      	movs	r1, r2
 80099e2:	0018      	movs	r0, r3
 80099e4:	f7ff f83a 	bl	8008a5c <printf_USB>
    formerlength = length;
 80099e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009a20 <Process_USB_input+0x578>)
 80099ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80099ec:	601a      	str	r2, [r3, #0]
  }
  GetUsbRxNextChunk(length);
 80099ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099f0:	0018      	movs	r0, r3
 80099f2:	f019 fc49 	bl	8023288 <GetUsbRxNextChunk>
  return false;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	0018      	movs	r0, r3
 80099fa:	46bd      	mov	sp, r7
 80099fc:	b017      	add	sp, #92	@ 0x5c
 80099fe:	bd90      	pop	{r4, r7, pc}
 8009a00:	20000038 	.word	0x20000038
 8009a04:	08080000 	.word	0x08080000
 8009a08:	20000a20 	.word	0x20000a20
 8009a0c:	2000091c 	.word	0x2000091c
 8009a10:	2000091e 	.word	0x2000091e
 8009a14:	0802c278 	.word	0x0802c278
 8009a18:	0802c1c0 	.word	0x0802c1c0
 8009a1c:	0802c298 	.word	0x0802c298
 8009a20:	20000a24 	.word	0x20000a24
 8009a24:	0802c2c4 	.word	0x0802c2c4

08009a28 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0.0;
  sConfig.Channel = ADC_CHANNEL_14;
 8009a2c:	4b26      	ldr	r3, [pc, #152]	@ (8009ac8 <ReadBatteryVoltage+0xa0>)
 8009a2e:	4a27      	ldr	r2, [pc, #156]	@ (8009acc <ReadBatteryVoltage+0xa4>)
 8009a30:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009a32:	4b25      	ldr	r3, [pc, #148]	@ (8009ac8 <ReadBatteryVoltage+0xa0>)
 8009a34:	2280      	movs	r2, #128	@ 0x80
 8009a36:	0152      	lsls	r2, r2, #5
 8009a38:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009a3a:	4a23      	ldr	r2, [pc, #140]	@ (8009ac8 <ReadBatteryVoltage+0xa0>)
 8009a3c:	4b24      	ldr	r3, [pc, #144]	@ (8009ad0 <ReadBatteryVoltage+0xa8>)
 8009a3e:	0011      	movs	r1, r2
 8009a40:	0018      	movs	r0, r3
 8009a42:	f00b fb57 	bl	80150f4 <HAL_ADC_ConfigChannel>
 8009a46:	1e03      	subs	r3, r0, #0
 8009a48:	d001      	beq.n	8009a4e <ReadBatteryVoltage+0x26>
    Error_Handler();
 8009a4a:	f003 fdbb 	bl	800d5c4 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009a4e:	4b20      	ldr	r3, [pc, #128]	@ (8009ad0 <ReadBatteryVoltage+0xa8>)
 8009a50:	0018      	movs	r0, r3
 8009a52:	f00b fa53 	bl	8014efc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009a56:	4b1e      	ldr	r3, [pc, #120]	@ (8009ad0 <ReadBatteryVoltage+0xa8>)
 8009a58:	2101      	movs	r1, #1
 8009a5a:	0018      	movs	r0, r3
 8009a5c:	f00b faa2 	bl	8014fa4 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8009a60:	4b1b      	ldr	r3, [pc, #108]	@ (8009ad0 <ReadBatteryVoltage+0xa8>)
 8009a62:	0018      	movs	r0, r3
 8009a64:	f00b fb3a 	bl	80150dc <HAL_ADC_GetValue>
 8009a68:	0002      	movs	r2, r0
 8009a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8009ad4 <ReadBatteryVoltage+0xac>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4353      	muls	r3, r2
 8009a70:	005b      	lsls	r3, r3, #1
 8009a72:	4919      	ldr	r1, [pc, #100]	@ (8009ad8 <ReadBatteryVoltage+0xb0>)
 8009a74:	0018      	movs	r0, r3
 8009a76:	f7f6 fb95 	bl	80001a4 <__udivsi3>
 8009a7a:	0003      	movs	r3, r0
 8009a7c:	001a      	movs	r2, r3
 8009a7e:	4b17      	ldr	r3, [pc, #92]	@ (8009adc <ReadBatteryVoltage+0xb4>)
 8009a80:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8009a82:	4b16      	ldr	r3, [pc, #88]	@ (8009adc <ReadBatteryVoltage+0xb4>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	0018      	movs	r0, r3
 8009a88:	f7f7 ff1e 	bl	80018c8 <__aeabi_ui2f>
 8009a8c:	1c03      	adds	r3, r0, #0
 8009a8e:	4914      	ldr	r1, [pc, #80]	@ (8009ae0 <ReadBatteryVoltage+0xb8>)
 8009a90:	1c18      	adds	r0, r3, #0
 8009a92:	f7f7 f907 	bl	8000ca4 <__aeabi_fdiv>
 8009a96:	1c03      	adds	r3, r0, #0
 8009a98:	1c1a      	adds	r2, r3, #0
 8009a9a:	4b12      	ldr	r3, [pc, #72]	@ (8009ae4 <ReadBatteryVoltage+0xbc>)
 8009a9c:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8009a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8009ac8 <ReadBatteryVoltage+0xa0>)
 8009aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8009acc <ReadBatteryVoltage+0xa4>)
 8009aa2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009aa4:	4b08      	ldr	r3, [pc, #32]	@ (8009ac8 <ReadBatteryVoltage+0xa0>)
 8009aa6:	4a10      	ldr	r2, [pc, #64]	@ (8009ae8 <ReadBatteryVoltage+0xc0>)
 8009aa8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009aaa:	4a07      	ldr	r2, [pc, #28]	@ (8009ac8 <ReadBatteryVoltage+0xa0>)
 8009aac:	4b08      	ldr	r3, [pc, #32]	@ (8009ad0 <ReadBatteryVoltage+0xa8>)
 8009aae:	0011      	movs	r1, r2
 8009ab0:	0018      	movs	r0, r3
 8009ab2:	f00b fb1f 	bl	80150f4 <HAL_ADC_ConfigChannel>
 8009ab6:	1e03      	subs	r3, r0, #0
 8009ab8:	d001      	beq.n	8009abe <ReadBatteryVoltage+0x96>
    Error_Handler();
 8009aba:	f003 fd83 	bl	800d5c4 <Error_Handler>
  }
  return trueValue;
 8009abe:	4b09      	ldr	r3, [pc, #36]	@ (8009ae4 <ReadBatteryVoltage+0xbc>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 }
 8009ac2:	1c18      	adds	r0, r3, #0
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	20000dc4 	.word	0x20000dc4
 8009acc:	38004000 	.word	0x38004000
 8009ad0:	20000e18 	.word	0x20000e18
 8009ad4:	2000003c 	.word	0x2000003c
 8009ad8:	00000fff 	.word	0x00000fff
 8009adc:	20000de0 	.word	0x20000de0
 8009ae0:	447a0000 	.word	0x447a0000
 8009ae4:	20000de4 	.word	0x20000de4
 8009ae8:	00001001 	.word	0x00001001

08009aec <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 8009aec:	b580      	push	{r7, lr}
 8009aee:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8009af0:	4b21      	ldr	r3, [pc, #132]	@ (8009b78 <ReadSolarVoltage+0x8c>)
 8009af2:	4a22      	ldr	r2, [pc, #136]	@ (8009b7c <ReadSolarVoltage+0x90>)
 8009af4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8009af6:	4b20      	ldr	r3, [pc, #128]	@ (8009b78 <ReadSolarVoltage+0x8c>)
 8009af8:	2280      	movs	r2, #128	@ 0x80
 8009afa:	0152      	lsls	r2, r2, #5
 8009afc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009afe:	4a1e      	ldr	r2, [pc, #120]	@ (8009b78 <ReadSolarVoltage+0x8c>)
 8009b00:	4b1f      	ldr	r3, [pc, #124]	@ (8009b80 <ReadSolarVoltage+0x94>)
 8009b02:	0011      	movs	r1, r2
 8009b04:	0018      	movs	r0, r3
 8009b06:	f00b faf5 	bl	80150f4 <HAL_ADC_ConfigChannel>
 8009b0a:	1e03      	subs	r3, r0, #0
 8009b0c:	d001      	beq.n	8009b12 <ReadSolarVoltage+0x26>
    Error_Handler();
 8009b0e:	f003 fd59 	bl	800d5c4 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8009b12:	4b1b      	ldr	r3, [pc, #108]	@ (8009b80 <ReadSolarVoltage+0x94>)
 8009b14:	0018      	movs	r0, r3
 8009b16:	f00b f9f1 	bl	8014efc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8009b1a:	4b19      	ldr	r3, [pc, #100]	@ (8009b80 <ReadSolarVoltage+0x94>)
 8009b1c:	2101      	movs	r1, #1
 8009b1e:	0018      	movs	r0, r3
 8009b20:	f00b fa40 	bl	8014fa4 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8009b24:	4b16      	ldr	r3, [pc, #88]	@ (8009b80 <ReadSolarVoltage+0x94>)
 8009b26:	0018      	movs	r0, r3
 8009b28:	f00b fad8 	bl	80150dc <HAL_ADC_GetValue>
 8009b2c:	0002      	movs	r2, r0
 8009b2e:	4b15      	ldr	r3, [pc, #84]	@ (8009b84 <ReadSolarVoltage+0x98>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	435a      	muls	r2, r3
 8009b34:	0013      	movs	r3, r2
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	189b      	adds	r3, r3, r2
 8009b3a:	4913      	ldr	r1, [pc, #76]	@ (8009b88 <ReadSolarVoltage+0x9c>)
 8009b3c:	0018      	movs	r0, r3
 8009b3e:	f7f6 fb31 	bl	80001a4 <__udivsi3>
 8009b42:	0003      	movs	r3, r0
 8009b44:	001a      	movs	r2, r3
 8009b46:	4b11      	ldr	r3, [pc, #68]	@ (8009b8c <ReadSolarVoltage+0xa0>)
 8009b48:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8009b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8009b78 <ReadSolarVoltage+0x8c>)
 8009b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8009b7c <ReadSolarVoltage+0x90>)
 8009b4e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8009b50:	4b09      	ldr	r3, [pc, #36]	@ (8009b78 <ReadSolarVoltage+0x8c>)
 8009b52:	4a0f      	ldr	r2, [pc, #60]	@ (8009b90 <ReadSolarVoltage+0xa4>)
 8009b54:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8009b56:	4a08      	ldr	r2, [pc, #32]	@ (8009b78 <ReadSolarVoltage+0x8c>)
 8009b58:	4b09      	ldr	r3, [pc, #36]	@ (8009b80 <ReadSolarVoltage+0x94>)
 8009b5a:	0011      	movs	r1, r2
 8009b5c:	0018      	movs	r0, r3
 8009b5e:	f00b fac9 	bl	80150f4 <HAL_ADC_ConfigChannel>
 8009b62:	1e03      	subs	r3, r0, #0
 8009b64:	d001      	beq.n	8009b6a <ReadSolarVoltage+0x7e>
    Error_Handler();
 8009b66:	f003 fd2d 	bl	800d5c4 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 8009b6a:	4b08      	ldr	r3, [pc, #32]	@ (8009b8c <ReadSolarVoltage+0xa0>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	b29b      	uxth	r3, r3
 }
 8009b70:	0018      	movs	r0, r3
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	46c0      	nop			@ (mov r8, r8)
 8009b78:	20000dc4 	.word	0x20000dc4
 8009b7c:	3c008000 	.word	0x3c008000
 8009b80:	20000e18 	.word	0x20000e18
 8009b84:	2000003c 	.word	0x2000003c
 8009b88:	00000fff 	.word	0x00000fff
 8009b8c:	20000de8 	.word	0x20000de8
 8009b90:	00001001 	.word	0x00001001

08009b94 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8009b94:	b580      	push	{r7, lr}
 8009b96:	af00      	add	r7, sp, #0
   if (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin)) {
 8009b98:	23a0      	movs	r3, #160	@ 0xa0
 8009b9a:	05db      	lsls	r3, r3, #23
 8009b9c:	2180      	movs	r1, #128	@ 0x80
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	f00c fa44 	bl	801602c <HAL_GPIO_ReadPin>
 8009ba4:	1e03      	subs	r3, r0, #0
 8009ba6:	d008      	beq.n	8009bba <Check_USB_PowerOn+0x26>
     if (sendpwremail == DONE) {
 8009ba8:	4b06      	ldr	r3, [pc, #24]	@ (8009bc4 <Check_USB_PowerOn+0x30>)
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	d102      	bne.n	8009bb6 <Check_USB_PowerOn+0x22>
       sendpwremail = CLEAR;
 8009bb0:	4b04      	ldr	r3, [pc, #16]	@ (8009bc4 <Check_USB_PowerOn+0x30>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	701a      	strb	r2, [r3, #0]
     }
     return true;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e000      	b.n	8009bbc <Check_USB_PowerOn+0x28>
   }
   return false;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	0018      	movs	r0, r3
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	46c0      	nop			@ (mov r8, r8)
 8009bc4:	200010af 	.word	0x200010af

08009bc8 <Read_Charge_Status>:
//  CHARGING_OFF  = 0
//  CHARGING_ON   = 1
//  CHARGING_FULL = 2
//  Function returns Chargestatus

ChargeStatus Read_Charge_Status(void){
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
  bool PulledUpStatus   = true  ;
 8009bce:	1dfb      	adds	r3, r7, #7
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	701a      	strb	r2, [r3, #0]
  bool PulledDownStatus = false ;
 8009bd4:	1dbb      	adds	r3, r7, #6
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	701a      	strb	r2, [r3, #0]
  //Read with Pull Up
  //Charge_Pin_Up();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009bda:	4b27      	ldr	r3, [pc, #156]	@ (8009c78 <Read_Charge_Status+0xb0>)
 8009bdc:	2280      	movs	r2, #128	@ 0x80
 8009bde:	0092      	lsls	r2, r2, #2
 8009be0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009be2:	4b25      	ldr	r3, [pc, #148]	@ (8009c78 <Read_Charge_Status+0xb0>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009be8:	4b23      	ldr	r3, [pc, #140]	@ (8009c78 <Read_Charge_Status+0xb0>)
 8009bea:	2201      	movs	r2, #1
 8009bec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009bee:	4b22      	ldr	r3, [pc, #136]	@ (8009c78 <Read_Charge_Status+0xb0>)
 8009bf0:	4a22      	ldr	r2, [pc, #136]	@ (8009c7c <Read_Charge_Status+0xb4>)
 8009bf2:	0019      	movs	r1, r3
 8009bf4:	0010      	movs	r0, r2
 8009bf6:	f00c f89b 	bl	8015d30 <HAL_GPIO_Init>

  PulledUpStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009bfa:	2380      	movs	r3, #128	@ 0x80
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8009c7c <Read_Charge_Status+0xb4>)
 8009c00:	0019      	movs	r1, r3
 8009c02:	0010      	movs	r0, r2
 8009c04:	f00c fa12 	bl	801602c <HAL_GPIO_ReadPin>
 8009c08:	0003      	movs	r3, r0
 8009c0a:	001a      	movs	r2, r3
 8009c0c:	1dfb      	adds	r3, r7, #7
 8009c0e:	1e51      	subs	r1, r2, #1
 8009c10:	418a      	sbcs	r2, r1
 8009c12:	701a      	strb	r2, [r3, #0]

  //Read with Pull Down
  // Charge_Pin_Down();
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8009c14:	4b18      	ldr	r3, [pc, #96]	@ (8009c78 <Read_Charge_Status+0xb0>)
 8009c16:	2280      	movs	r2, #128	@ 0x80
 8009c18:	0092      	lsls	r2, r2, #2
 8009c1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c1c:	4b16      	ldr	r3, [pc, #88]	@ (8009c78 <Read_Charge_Status+0xb0>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009c22:	4b15      	ldr	r3, [pc, #84]	@ (8009c78 <Read_Charge_Status+0xb0>)
 8009c24:	2202      	movs	r2, #2
 8009c26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8009c28:	4b13      	ldr	r3, [pc, #76]	@ (8009c78 <Read_Charge_Status+0xb0>)
 8009c2a:	4a14      	ldr	r2, [pc, #80]	@ (8009c7c <Read_Charge_Status+0xb4>)
 8009c2c:	0019      	movs	r1, r3
 8009c2e:	0010      	movs	r0, r2
 8009c30:	f00c f87e 	bl	8015d30 <HAL_GPIO_Init>

  PulledDownStatus = (HAL_GPIO_ReadPin(Charger_status_GPIO_Port, Charger_status_Pin));
 8009c34:	2380      	movs	r3, #128	@ 0x80
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4a10      	ldr	r2, [pc, #64]	@ (8009c7c <Read_Charge_Status+0xb4>)
 8009c3a:	0019      	movs	r1, r3
 8009c3c:	0010      	movs	r0, r2
 8009c3e:	f00c f9f5 	bl	801602c <HAL_GPIO_ReadPin>
 8009c42:	0003      	movs	r3, r0
 8009c44:	001a      	movs	r2, r3
 8009c46:	1dbb      	adds	r3, r7, #6
 8009c48:	1e51      	subs	r1, r2, #1
 8009c4a:	418a      	sbcs	r2, r1
 8009c4c:	701a      	strb	r2, [r3, #0]

  if (PulledUpStatus==false) {
 8009c4e:	1dfb      	adds	r3, r7, #7
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	2201      	movs	r2, #1
 8009c54:	4053      	eors	r3, r2
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d001      	beq.n	8009c60 <Read_Charge_Status+0x98>
    return CHARGING_ON;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e006      	b.n	8009c6e <Read_Charge_Status+0xa6>
  }
  if (PulledDownStatus==true){
 8009c60:	1dbb      	adds	r3, r7, #6
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <Read_Charge_Status+0xa4>
    return CHARGING_FULL;
 8009c68:	2302      	movs	r3, #2
 8009c6a:	e000      	b.n	8009c6e <Read_Charge_Status+0xa6>
  }
  return CHARGING_OFF;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	0018      	movs	r0, r3
 8009c70:	46bd      	mov	sp, r7
 8009c72:	b002      	add	sp, #8
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	46c0      	nop			@ (mov r8, r8)
 8009c78:	20000dcc 	.word	0x20000dcc
 8009c7c:	50000800 	.word	0x50000800

08009c80 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8009c80:	b580      	push	{r7, lr}
 8009c82:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8009c84:	2380      	movs	r3, #128	@ 0x80
 8009c86:	021a      	lsls	r2, r3, #8
 8009c88:	23a0      	movs	r3, #160	@ 0xa0
 8009c8a:	05db      	lsls	r3, r3, #23
 8009c8c:	0011      	movs	r1, r2
 8009c8e:	0018      	movs	r0, r3
 8009c90:	f00c f9cc 	bl	801602c <HAL_GPIO_ReadPin>
 8009c94:	0003      	movs	r3, r0
 8009c96:	1e5a      	subs	r2, r3, #1
 8009c98:	4193      	sbcs	r3, r2
 8009c9a:	b2db      	uxtb	r3, r3
}
 8009c9c:	0018      	movs	r0, r3
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
	...

08009ca4 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8009ca8:	4b05      	ldr	r3, [pc, #20]	@ (8009cc0 <UserButton_Pressed+0x1c>)
 8009caa:	2104      	movs	r1, #4
 8009cac:	0018      	movs	r0, r3
 8009cae:	f00c f9bd 	bl	801602c <HAL_GPIO_ReadPin>
 8009cb2:	0003      	movs	r3, r0
 8009cb4:	425a      	negs	r2, r3
 8009cb6:	4153      	adcs	r3, r2
 8009cb8:	b2db      	uxtb	r3, r3
}
 8009cba:	0018      	movs	r0, r3
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	50000c00 	.word	0x50000c00

08009cc4 <getUptime>:

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

#ifndef PUBLIC
void getUptime(char* uptbuffer) {
 8009cc4:	b590      	push	{r4, r7, lr}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af02      	add	r7, sp, #8
 8009cca:	6078      	str	r0, [r7, #4]
  sprintf(uptbuffer, "%d%02d.%02d", myUpTime.Day, myUpTime.Hour, myUpTime.Minutes);
 8009ccc:	4b08      	ldr	r3, [pc, #32]	@ (8009cf0 <getUptime+0x2c>)
 8009cce:	881b      	ldrh	r3, [r3, #0]
 8009cd0:	001a      	movs	r2, r3
 8009cd2:	4b07      	ldr	r3, [pc, #28]	@ (8009cf0 <getUptime+0x2c>)
 8009cd4:	789b      	ldrb	r3, [r3, #2]
 8009cd6:	001c      	movs	r4, r3
 8009cd8:	4b05      	ldr	r3, [pc, #20]	@ (8009cf0 <getUptime+0x2c>)
 8009cda:	78db      	ldrb	r3, [r3, #3]
 8009cdc:	4905      	ldr	r1, [pc, #20]	@ (8009cf4 <getUptime+0x30>)
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	0023      	movs	r3, r4
 8009ce4:	f01c fb84 	bl	80263f0 <siprintf>
}
 8009ce8:	46c0      	nop			@ (mov r8, r8)
 8009cea:	46bd      	mov	sp, r7
 8009cec:	b003      	add	sp, #12
 8009cee:	bd90      	pop	{r4, r7, pc}
 8009cf0:	20000df0 	.word	0x20000df0
 8009cf4:	0802c320 	.word	0x0802c320

08009cf8 <showTime>:
#endif

void showTime() {
 8009cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cfa:	46de      	mov	lr, fp
 8009cfc:	4657      	mov	r7, sl
 8009cfe:	464e      	mov	r6, r9
 8009d00:	4645      	mov	r5, r8
 8009d02:	b5e0      	push	{r5, r6, r7, lr}
 8009d04:	b093      	sub	sp, #76	@ 0x4c
 8009d06:	af0a      	add	r7, sp, #40	@ 0x28
  if (posixBootTime == 0) {
 8009d08:	4b43      	ldr	r3, [pc, #268]	@ (8009e18 <showTime+0x120>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d100      	bne.n	8009d12 <showTime+0x1a>
 8009d10:	e079      	b.n	8009e06 <showTime+0x10e>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009d12:	2308      	movs	r3, #8
 8009d14:	18fa      	adds	r2, r7, r3
 8009d16:	230c      	movs	r3, #12
 8009d18:	18fb      	adds	r3, r7, r3
 8009d1a:	0011      	movs	r1, r2
 8009d1c:	0018      	movs	r0, r3
 8009d1e:	f000 fb07 	bl	800a330 <RTC_GetTime>
  lasthour = currentTime.Hours;
 8009d22:	230c      	movs	r3, #12
 8009d24:	18fb      	adds	r3, r7, r3
 8009d26:	781a      	ldrb	r2, [r3, #0]
 8009d28:	4b3c      	ldr	r3, [pc, #240]	@ (8009e1c <showTime+0x124>)
 8009d2a:	701a      	strb	r2, [r3, #0]
  weekday = currentDate.WeekDay;
 8009d2c:	2308      	movs	r3, #8
 8009d2e:	18fb      	adds	r3, r7, r3
 8009d30:	781a      	ldrb	r2, [r3, #0]
 8009d32:	4b3b      	ldr	r3, [pc, #236]	@ (8009e20 <showTime+0x128>)
 8009d34:	701a      	strb	r2, [r3, #0]
  UpdateSystemUptime();
 8009d36:	f000 f893 	bl	8009e60 <UpdateSystemUptime>
  Info("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds",
 8009d3a:	2308      	movs	r3, #8
 8009d3c:	18fb      	adds	r3, r7, r3
 8009d3e:	789b      	ldrb	r3, [r3, #2]
 8009d40:	469b      	mov	fp, r3
 8009d42:	2308      	movs	r3, #8
 8009d44:	18fb      	adds	r3, r7, r3
 8009d46:	785b      	ldrb	r3, [r3, #1]
 8009d48:	1e5a      	subs	r2, r3, #1
 8009d4a:	4b36      	ldr	r3, [pc, #216]	@ (8009e24 <showTime+0x12c>)
 8009d4c:	0092      	lsls	r2, r2, #2
 8009d4e:	58d3      	ldr	r3, [r2, r3]
 8009d50:	607b      	str	r3, [r7, #4]
 8009d52:	2308      	movs	r3, #8
 8009d54:	18fa      	adds	r2, r7, r3
 8009d56:	78d2      	ldrb	r2, [r2, #3]
 8009d58:	0010      	movs	r0, r2
 8009d5a:	230c      	movs	r3, #12
 8009d5c:	18fa      	adds	r2, r7, r3
 8009d5e:	7812      	ldrb	r2, [r2, #0]
 8009d60:	0014      	movs	r4, r2
 8009d62:	230c      	movs	r3, #12
 8009d64:	18fa      	adds	r2, r7, r3
 8009d66:	7852      	ldrb	r2, [r2, #1]
 8009d68:	0015      	movs	r5, r2
 8009d6a:	230c      	movs	r3, #12
 8009d6c:	18fa      	adds	r2, r7, r3
 8009d6e:	7892      	ldrb	r2, [r2, #2]
 8009d70:	0016      	movs	r6, r2
 8009d72:	4a2d      	ldr	r2, [pc, #180]	@ (8009e28 <showTime+0x130>)
 8009d74:	8812      	ldrh	r2, [r2, #0]
 8009d76:	4694      	mov	ip, r2
 8009d78:	4a2b      	ldr	r2, [pc, #172]	@ (8009e28 <showTime+0x130>)
 8009d7a:	7892      	ldrb	r2, [r2, #2]
 8009d7c:	4690      	mov	r8, r2
 8009d7e:	4a2a      	ldr	r2, [pc, #168]	@ (8009e28 <showTime+0x130>)
 8009d80:	78d2      	ldrb	r2, [r2, #3]
 8009d82:	4691      	mov	r9, r2
 8009d84:	4a28      	ldr	r2, [pc, #160]	@ (8009e28 <showTime+0x130>)
 8009d86:	7912      	ldrb	r2, [r2, #4]
 8009d88:	4692      	mov	sl, r2
 8009d8a:	4a28      	ldr	r2, [pc, #160]	@ (8009e2c <showTime+0x134>)
 8009d8c:	4928      	ldr	r1, [pc, #160]	@ (8009e30 <showTime+0x138>)
 8009d8e:	4653      	mov	r3, sl
 8009d90:	9308      	str	r3, [sp, #32]
 8009d92:	464b      	mov	r3, r9
 8009d94:	9307      	str	r3, [sp, #28]
 8009d96:	4643      	mov	r3, r8
 8009d98:	9306      	str	r3, [sp, #24]
 8009d9a:	4663      	mov	r3, ip
 8009d9c:	9305      	str	r3, [sp, #20]
 8009d9e:	9604      	str	r6, [sp, #16]
 8009da0:	9503      	str	r5, [sp, #12]
 8009da2:	9402      	str	r4, [sp, #8]
 8009da4:	9001      	str	r0, [sp, #4]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	465b      	mov	r3, fp
 8009dac:	2002      	movs	r0, #2
 8009dae:	f00a f951 	bl	8014054 <CreateLine>
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
  if ((weekday == 7) && (lasthour == 3) && (currentTime.Minutes < 17) && !dstchkd && (currentDate.Date > 24) && ((currentDate.Month == 3) || (currentDate.Month == 10))) {
 8009db2:	4b1b      	ldr	r3, [pc, #108]	@ (8009e20 <showTime+0x128>)
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	2b07      	cmp	r3, #7
 8009db8:	d126      	bne.n	8009e08 <showTime+0x110>
 8009dba:	4b18      	ldr	r3, [pc, #96]	@ (8009e1c <showTime+0x124>)
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d122      	bne.n	8009e08 <showTime+0x110>
 8009dc2:	230c      	movs	r3, #12
 8009dc4:	18fb      	adds	r3, r7, r3
 8009dc6:	785b      	ldrb	r3, [r3, #1]
 8009dc8:	2b10      	cmp	r3, #16
 8009dca:	d81d      	bhi.n	8009e08 <showTime+0x110>
 8009dcc:	4b19      	ldr	r3, [pc, #100]	@ (8009e34 <showTime+0x13c>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	4053      	eors	r3, r2
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d016      	beq.n	8009e08 <showTime+0x110>
 8009dda:	2308      	movs	r3, #8
 8009ddc:	18fb      	adds	r3, r7, r3
 8009dde:	789b      	ldrb	r3, [r3, #2]
 8009de0:	2b18      	cmp	r3, #24
 8009de2:	d911      	bls.n	8009e08 <showTime+0x110>
 8009de4:	2308      	movs	r3, #8
 8009de6:	18fb      	adds	r3, r7, r3
 8009de8:	785b      	ldrb	r3, [r3, #1]
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	d004      	beq.n	8009df8 <showTime+0x100>
 8009dee:	2308      	movs	r3, #8
 8009df0:	18fb      	adds	r3, r7, r3
 8009df2:	785b      	ldrb	r3, [r3, #1]
 8009df4:	2b0a      	cmp	r3, #10
 8009df6:	d107      	bne.n	8009e08 <showTime+0x110>
    dstchkd = true;
 8009df8:	4b0e      	ldr	r3, [pc, #56]	@ (8009e34 <showTime+0x13c>)
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	701a      	strb	r2, [r3, #0]
    setESPTimeStamp(0); // check for summer/wintertime
 8009dfe:	2000      	movs	r0, #0
 8009e00:	f7fa fd8c 	bl	800491c <setESPTimeStamp>
 8009e04:	e000      	b.n	8009e08 <showTime+0x110>
    return;
 8009e06:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	b009      	add	sp, #36	@ 0x24
 8009e0c:	bcf0      	pop	{r4, r5, r6, r7}
 8009e0e:	46bb      	mov	fp, r7
 8009e10:	46b2      	mov	sl, r6
 8009e12:	46a9      	mov	r9, r5
 8009e14:	46a0      	mov	r8, r4
 8009e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e18:	20000dfc 	.word	0x20000dfc
 8009e1c:	20000ded 	.word	0x20000ded
 8009e20:	20000dee 	.word	0x20000dee
 8009e24:	2000005c 	.word	0x2000005c
 8009e28:	20000df0 	.word	0x20000df0
 8009e2c:	0802c32c 	.word	0x0802c32c
 8009e30:	0802c384 	.word	0x0802c384
 8009e34:	20000dec 	.word	0x20000dec

08009e38 <calculateNextNTPTime>:


uint32_t calculateNextNTPTime(void) {
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8009e3e:	003a      	movs	r2, r7
 8009e40:	1d3b      	adds	r3, r7, #4
 8009e42:	0011      	movs	r1, r2
 8009e44:	0018      	movs	r0, r3
 8009e46:	f000 fa73 	bl	800a330 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8009e4a:	1d3a      	adds	r2, r7, #4
 8009e4c:	003b      	movs	r3, r7
 8009e4e:	0011      	movs	r1, r2
 8009e50:	0018      	movs	r0, r3
 8009e52:	f000 fc97 	bl	800a784 <makeTime>
 8009e56:	0003      	movs	r3, r0
}
 8009e58:	0018      	movs	r0, r3
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	b006      	add	sp, #24
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <UpdateSystemUptime>:


void UpdateSystemUptime() {
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b088      	sub	sp, #32
 8009e64:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 8009e66:	003a      	movs	r2, r7
 8009e68:	1d3b      	adds	r3, r7, #4
 8009e6a:	0011      	movs	r1, r2
 8009e6c:	0018      	movs	r0, r3
 8009e6e:	f000 fa5f 	bl	800a330 <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 8009e72:	1d3a      	adds	r2, r7, #4
 8009e74:	003b      	movs	r3, r7
 8009e76:	0011      	movs	r1, r2
 8009e78:	0018      	movs	r0, r3
 8009e7a:	f000 fc83 	bl	800a784 <makeTime>
 8009e7e:	0002      	movs	r2, r0
 8009e80:	4b1e      	ldr	r3, [pc, #120]	@ (8009efc <UpdateSystemUptime+0x9c>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	213c      	movs	r1, #60	@ 0x3c
 8009e90:	0018      	movs	r0, r3
 8009e92:	f7f6 fa0d 	bl	80002b0 <__aeabi_uidivmod>
 8009e96:	000b      	movs	r3, r1
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	4b19      	ldr	r3, [pc, #100]	@ (8009f00 <UpdateSystemUptime+0xa0>)
 8009e9c:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	213c      	movs	r1, #60	@ 0x3c
 8009ea2:	0018      	movs	r0, r3
 8009ea4:	f7f6 f97e 	bl	80001a4 <__udivsi3>
 8009ea8:	0003      	movs	r3, r0
 8009eaa:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	213c      	movs	r1, #60	@ 0x3c
 8009eb0:	0018      	movs	r0, r3
 8009eb2:	f7f6 f9fd 	bl	80002b0 <__aeabi_uidivmod>
 8009eb6:	000b      	movs	r3, r1
 8009eb8:	b2da      	uxtb	r2, r3
 8009eba:	4b11      	ldr	r3, [pc, #68]	@ (8009f00 <UpdateSystemUptime+0xa0>)
 8009ebc:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	213c      	movs	r1, #60	@ 0x3c
 8009ec2:	0018      	movs	r0, r3
 8009ec4:	f7f6 f96e 	bl	80001a4 <__udivsi3>
 8009ec8:	0003      	movs	r3, r0
 8009eca:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	2118      	movs	r1, #24
 8009ed0:	0018      	movs	r0, r3
 8009ed2:	f7f6 f9ed 	bl	80002b0 <__aeabi_uidivmod>
 8009ed6:	000b      	movs	r3, r1
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	4b09      	ldr	r3, [pc, #36]	@ (8009f00 <UpdateSystemUptime+0xa0>)
 8009edc:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	2118      	movs	r1, #24
 8009ee2:	0018      	movs	r0, r3
 8009ee4:	f7f6 f95e 	bl	80001a4 <__udivsi3>
 8009ee8:	0003      	movs	r3, r0
 8009eea:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	4b03      	ldr	r3, [pc, #12]	@ (8009f00 <UpdateSystemUptime+0xa0>)
 8009ef2:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 8009ef4:	46c0      	nop			@ (mov r8, r8)
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	b008      	add	sp, #32
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	20000dfc 	.word	0x20000dfc
 8009f00:	20000df0 	.word	0x20000df0

08009f04 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8009f04:	b590      	push	{r4, r7, lr}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	0008      	movs	r0, r1
 8009f0e:	0011      	movs	r1, r2
 8009f10:	1cfb      	adds	r3, r7, #3
 8009f12:	1c02      	adds	r2, r0, #0
 8009f14:	701a      	strb	r2, [r3, #0]
 8009f16:	1cbb      	adds	r3, r7, #2
 8009f18:	1c0a      	adds	r2, r1, #0
 8009f1a:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8009f1c:	230e      	movs	r3, #14
 8009f1e:	18fb      	adds	r3, r7, r3
 8009f20:	2200      	movs	r2, #0
 8009f22:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8009f24:	230f      	movs	r3, #15
 8009f26:	18fb      	adds	r3, r7, r3
 8009f28:	1cfa      	adds	r2, r7, #3
 8009f2a:	7812      	ldrb	r2, [r2, #0]
 8009f2c:	701a      	strb	r2, [r3, #0]
 8009f2e:	e015      	b.n	8009f5c <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8009f30:	200f      	movs	r0, #15
 8009f32:	183b      	adds	r3, r7, r0
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	18d2      	adds	r2, r2, r3
 8009f3a:	240e      	movs	r4, #14
 8009f3c:	193b      	adds	r3, r7, r4
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	7811      	ldrb	r1, [r2, #0]
 8009f42:	2208      	movs	r2, #8
 8009f44:	18ba      	adds	r2, r7, r2
 8009f46:	54d1      	strb	r1, [r2, r3]
    pos++;
 8009f48:	193b      	adds	r3, r7, r4
 8009f4a:	781a      	ldrb	r2, [r3, #0]
 8009f4c:	193b      	adds	r3, r7, r4
 8009f4e:	3201      	adds	r2, #1
 8009f50:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8009f52:	183b      	adds	r3, r7, r0
 8009f54:	781a      	ldrb	r2, [r3, #0]
 8009f56:	183b      	adds	r3, r7, r0
 8009f58:	3201      	adds	r2, #1
 8009f5a:	701a      	strb	r2, [r3, #0]
 8009f5c:	200f      	movs	r0, #15
 8009f5e:	183a      	adds	r2, r7, r0
 8009f60:	1cbb      	adds	r3, r7, #2
 8009f62:	7812      	ldrb	r2, [r2, #0]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d9e2      	bls.n	8009f30 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8009f6a:	230e      	movs	r3, #14
 8009f6c:	18fb      	adds	r3, r7, r3
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	2208      	movs	r2, #8
 8009f72:	18ba      	adds	r2, r7, r2
 8009f74:	2100      	movs	r1, #0
 8009f76:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8009f78:	1cfb      	adds	r3, r7, #3
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	2b13      	cmp	r3, #19
 8009f7e:	d849      	bhi.n	800a014 <aBuff2int+0x110>
    if (start == 17) { //month
 8009f80:	1cfb      	adds	r3, r7, #3
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	2b11      	cmp	r3, #17
 8009f86:	d122      	bne.n	8009fce <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8009f88:	183b      	adds	r3, r7, r0
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	701a      	strb	r2, [r3, #0]
 8009f8e:	e018      	b.n	8009fc2 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8009f90:	240f      	movs	r4, #15
 8009f92:	193b      	adds	r3, r7, r4
 8009f94:	781a      	ldrb	r2, [r3, #0]
 8009f96:	4b25      	ldr	r3, [pc, #148]	@ (800a02c <aBuff2int+0x128>)
 8009f98:	0092      	lsls	r2, r2, #2
 8009f9a:	58d2      	ldr	r2, [r2, r3]
 8009f9c:	2308      	movs	r3, #8
 8009f9e:	18fb      	adds	r3, r7, r3
 8009fa0:	0011      	movs	r1, r2
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	f7f6 f8d8 	bl	8000158 <strcmp>
 8009fa8:	1e03      	subs	r3, r0, #0
 8009faa:	d104      	bne.n	8009fb6 <aBuff2int+0xb2>
          return i+1;
 8009fac:	193b      	adds	r3, r7, r4
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	e035      	b.n	800a022 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 8009fb6:	210f      	movs	r1, #15
 8009fb8:	187b      	adds	r3, r7, r1
 8009fba:	781a      	ldrb	r2, [r3, #0]
 8009fbc:	187b      	adds	r3, r7, r1
 8009fbe:	3201      	adds	r2, #1
 8009fc0:	701a      	strb	r2, [r3, #0]
 8009fc2:	230f      	movs	r3, #15
 8009fc4:	18fb      	adds	r3, r7, r3
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	2b0b      	cmp	r3, #11
 8009fca:	d9e1      	bls.n	8009f90 <aBuff2int+0x8c>
 8009fcc:	e022      	b.n	800a014 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8009fce:	230f      	movs	r3, #15
 8009fd0:	18fb      	adds	r3, r7, r3
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	701a      	strb	r2, [r3, #0]
 8009fd6:	e018      	b.n	800a00a <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8009fd8:	240f      	movs	r4, #15
 8009fda:	193b      	adds	r3, r7, r4
 8009fdc:	781a      	ldrb	r2, [r3, #0]
 8009fde:	4b14      	ldr	r3, [pc, #80]	@ (800a030 <aBuff2int+0x12c>)
 8009fe0:	0092      	lsls	r2, r2, #2
 8009fe2:	58d2      	ldr	r2, [r2, r3]
 8009fe4:	2308      	movs	r3, #8
 8009fe6:	18fb      	adds	r3, r7, r3
 8009fe8:	0011      	movs	r1, r2
 8009fea:	0018      	movs	r0, r3
 8009fec:	f7f6 f8b4 	bl	8000158 <strcmp>
 8009ff0:	1e03      	subs	r3, r0, #0
 8009ff2:	d104      	bne.n	8009ffe <aBuff2int+0xfa>
          return i+1;
 8009ff4:	193b      	adds	r3, r7, r4
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	e011      	b.n	800a022 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8009ffe:	210f      	movs	r1, #15
 800a000:	187b      	adds	r3, r7, r1
 800a002:	781a      	ldrb	r2, [r3, #0]
 800a004:	187b      	adds	r3, r7, r1
 800a006:	3201      	adds	r2, #1
 800a008:	701a      	strb	r2, [r3, #0]
 800a00a:	230f      	movs	r3, #15
 800a00c:	18fb      	adds	r3, r7, r3
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	2b06      	cmp	r3, #6
 800a012:	d9e1      	bls.n	8009fd8 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 800a014:	2308      	movs	r3, #8
 800a016:	18fb      	adds	r3, r7, r3
 800a018:	0018      	movs	r0, r3
 800a01a:	f01a fd94 	bl	8024b46 <atoi>
 800a01e:	0003      	movs	r3, r0
 800a020:	b2db      	uxtb	r3, r3
}
 800a022:	0018      	movs	r0, r3
 800a024:	46bd      	mov	sp, r7
 800a026:	b005      	add	sp, #20
 800a028:	bd90      	pop	{r4, r7, pc}
 800a02a:	46c0      	nop			@ (mov r8, r8)
 800a02c:	2000005c 	.word	0x2000005c
 800a030:	20000040 	.word	0x20000040

0800a034 <ParseTime>:

void ParseTime(char* buffer) {
 800a034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a036:	b08d      	sub	sp, #52	@ 0x34
 800a038:	af02      	add	r7, sp, #8
 800a03a:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a03c:	2408      	movs	r4, #8
 800a03e:	193a      	adds	r2, r7, r4
 800a040:	260c      	movs	r6, #12
 800a042:	19bb      	adds	r3, r7, r6
 800a044:	0011      	movs	r1, r2
 800a046:	0018      	movs	r0, r3
 800a048:	f000 f972 	bl	800a330 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2219      	movs	r2, #25
 800a050:	2118      	movs	r1, #24
 800a052:	0018      	movs	r0, r3
 800a054:	f7ff ff56 	bl	8009f04 <aBuff2int>
 800a058:	0003      	movs	r3, r0
 800a05a:	001a      	movs	r2, r3
 800a05c:	19bb      	adds	r3, r7, r6
 800a05e:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	221c      	movs	r2, #28
 800a064:	211b      	movs	r1, #27
 800a066:	0018      	movs	r0, r3
 800a068:	f7ff ff4c 	bl	8009f04 <aBuff2int>
 800a06c:	0003      	movs	r3, r0
 800a06e:	001a      	movs	r2, r3
 800a070:	19bb      	adds	r3, r7, r6
 800a072:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	221f      	movs	r2, #31
 800a078:	211e      	movs	r1, #30
 800a07a:	0018      	movs	r0, r3
 800a07c:	f7ff ff42 	bl	8009f04 <aBuff2int>
 800a080:	0003      	movs	r3, r0
 800a082:	001a      	movs	r2, r3
 800a084:	19bb      	adds	r3, r7, r6
 800a086:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2224      	movs	r2, #36	@ 0x24
 800a08c:	2123      	movs	r1, #35	@ 0x23
 800a08e:	0018      	movs	r0, r3
 800a090:	f7ff ff38 	bl	8009f04 <aBuff2int>
 800a094:	0003      	movs	r3, r0
 800a096:	001a      	movs	r2, r3
 800a098:	0025      	movs	r5, r4
 800a09a:	197b      	adds	r3, r7, r5
 800a09c:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2213      	movs	r2, #19
 800a0a2:	2111      	movs	r1, #17
 800a0a4:	0018      	movs	r0, r3
 800a0a6:	f7ff ff2d 	bl	8009f04 <aBuff2int>
 800a0aa:	0003      	movs	r3, r0
 800a0ac:	001a      	movs	r2, r3
 800a0ae:	197b      	adds	r3, r7, r5
 800a0b0:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2216      	movs	r2, #22
 800a0b6:	2115      	movs	r1, #21
 800a0b8:	0018      	movs	r0, r3
 800a0ba:	f7ff ff23 	bl	8009f04 <aBuff2int>
 800a0be:	0003      	movs	r3, r0
 800a0c0:	001a      	movs	r2, r3
 800a0c2:	197b      	adds	r3, r7, r5
 800a0c4:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	220f      	movs	r2, #15
 800a0ca:	210d      	movs	r1, #13
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	f7ff ff19 	bl	8009f04 <aBuff2int>
 800a0d2:	0003      	movs	r3, r0
 800a0d4:	001a      	movs	r2, r3
 800a0d6:	197b      	adds	r3, r7, r5
 800a0d8:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a0da:	19bb      	adds	r3, r7, r6
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	001c      	movs	r4, r3
 800a0e0:	19bb      	adds	r3, r7, r6
 800a0e2:	785b      	ldrb	r3, [r3, #1]
 800a0e4:	0018      	movs	r0, r3
 800a0e6:	19bb      	adds	r3, r7, r6
 800a0e8:	789b      	ldrb	r3, [r3, #2]
 800a0ea:	4a56      	ldr	r2, [pc, #344]	@ (800a244 <ParseTime+0x210>)
 800a0ec:	4956      	ldr	r1, [pc, #344]	@ (800a248 <ParseTime+0x214>)
 800a0ee:	9301      	str	r3, [sp, #4]
 800a0f0:	9000      	str	r0, [sp, #0]
 800a0f2:	0023      	movs	r3, r4
 800a0f4:	2003      	movs	r0, #3
 800a0f6:	f009 ffad 	bl	8014054 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 800a0fa:	197b      	adds	r3, r7, r5
 800a0fc:	789b      	ldrb	r3, [r3, #2]
 800a0fe:	001c      	movs	r4, r3
 800a100:	197b      	adds	r3, r7, r5
 800a102:	785b      	ldrb	r3, [r3, #1]
 800a104:	0018      	movs	r0, r3
 800a106:	197b      	adds	r3, r7, r5
 800a108:	78db      	ldrb	r3, [r3, #3]
 800a10a:	4a50      	ldr	r2, [pc, #320]	@ (800a24c <ParseTime+0x218>)
 800a10c:	494e      	ldr	r1, [pc, #312]	@ (800a248 <ParseTime+0x214>)
 800a10e:	9301      	str	r3, [sp, #4]
 800a110:	9000      	str	r0, [sp, #0]
 800a112:	0023      	movs	r3, r4
 800a114:	2003      	movs	r0, #3
 800a116:	f009 ff9d 	bl	8014054 <CreateLine>
  RTC_SetTime(&currentTime);
 800a11a:	19bb      	adds	r3, r7, r6
 800a11c:	0018      	movs	r0, r3
 800a11e:	f000 f8a3 	bl	800a268 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800a122:	197b      	adds	r3, r7, r5
 800a124:	0018      	movs	r0, r3
 800a126:	f000 f8c5 	bl	800a2b4 <RTC_SetDate>
/* DST insert === */
  // DST == DaySavingTime == Zomertijd
  bool dst = false;
 800a12a:	2327      	movs	r3, #39	@ 0x27
 800a12c:	18fb      	adds	r3, r7, r3
 800a12e:	2200      	movs	r2, #0
 800a130:	701a      	strb	r2, [r3, #0]

  int mnd = currentDate.Month;
 800a132:	197b      	adds	r3, r7, r5
 800a134:	785b      	ldrb	r3, [r3, #1]
 800a136:	623b      	str	r3, [r7, #32]
  dst = !((mnd < 3) || (mnd > 10)); // between october and march
 800a138:	6a3b      	ldr	r3, [r7, #32]
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	dd04      	ble.n	800a148 <ParseTime+0x114>
 800a13e:	6a3b      	ldr	r3, [r7, #32]
 800a140:	2b0a      	cmp	r3, #10
 800a142:	dc01      	bgt.n	800a148 <ParseTime+0x114>
 800a144:	2201      	movs	r2, #1
 800a146:	e000      	b.n	800a14a <ParseTime+0x116>
 800a148:	2200      	movs	r2, #0
 800a14a:	2027      	movs	r0, #39	@ 0x27
 800a14c:	183b      	adds	r3, r7, r0
 800a14e:	701a      	strb	r2, [r3, #0]
 800a150:	781a      	ldrb	r2, [r3, #0]
 800a152:	2101      	movs	r1, #1
 800a154:	400a      	ands	r2, r1
 800a156:	701a      	strb	r2, [r3, #0]
  if (dst)
 800a158:	0002      	movs	r2, r0
 800a15a:	18bb      	adds	r3, r7, r2
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d01f      	beq.n	800a1a2 <ParseTime+0x16e>
  {
    if ((mnd == 3) && (currentDate.WeekDay == 7) && (currentDate.Date < 25)) {
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	2b03      	cmp	r3, #3
 800a166:	d10c      	bne.n	800a182 <ParseTime+0x14e>
 800a168:	2108      	movs	r1, #8
 800a16a:	187b      	adds	r3, r7, r1
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	2b07      	cmp	r3, #7
 800a170:	d107      	bne.n	800a182 <ParseTime+0x14e>
 800a172:	187b      	adds	r3, r7, r1
 800a174:	789b      	ldrb	r3, [r3, #2]
 800a176:	2b18      	cmp	r3, #24
 800a178:	d803      	bhi.n	800a182 <ParseTime+0x14e>
      // starts last sunday of march
      // weekday -> sunday returns 7
        dst = false;
 800a17a:	18bb      	adds	r3, r7, r2
 800a17c:	2200      	movs	r2, #0
 800a17e:	701a      	strb	r2, [r3, #0]
 800a180:	e00f      	b.n	800a1a2 <ParseTime+0x16e>
    }
    else if ((mnd == 10) && (currentDate.WeekDay == 7) && (currentDate.Date < 25))
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	2b0a      	cmp	r3, #10
 800a186:	d10c      	bne.n	800a1a2 <ParseTime+0x16e>
 800a188:	2208      	movs	r2, #8
 800a18a:	18bb      	adds	r3, r7, r2
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	2b07      	cmp	r3, #7
 800a190:	d107      	bne.n	800a1a2 <ParseTime+0x16e>
 800a192:	18bb      	adds	r3, r7, r2
 800a194:	789b      	ldrb	r3, [r3, #2]
 800a196:	2b18      	cmp	r3, #24
 800a198:	d803      	bhi.n	800a1a2 <ParseTime+0x16e>
    {
        dst = false;
 800a19a:	2327      	movs	r3, #39	@ 0x27
 800a19c:	18fb      	adds	r3, r7, r3
 800a19e:	2200      	movs	r2, #0
 800a1a0:	701a      	strb	r2, [r3, #0]
    }
  }
  if (dst) {
 800a1a2:	2327      	movs	r3, #39	@ 0x27
 800a1a4:	18fb      	adds	r3, r7, r3
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d02d      	beq.n	800a208 <ParseTime+0x1d4>
    Info("Daylight Saving Time active");
 800a1ac:	4a28      	ldr	r2, [pc, #160]	@ (800a250 <ParseTime+0x21c>)
 800a1ae:	4b29      	ldr	r3, [pc, #164]	@ (800a254 <ParseTime+0x220>)
 800a1b0:	0019      	movs	r1, r3
 800a1b2:	2002      	movs	r0, #2
 800a1b4:	f009 ff4e 	bl	8014054 <CreateLine>
    HAL_Delay(1000);
 800a1b8:	23fa      	movs	r3, #250	@ 0xfa
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	0018      	movs	r0, r3
 800a1be:	f00a fccb 	bl	8014b58 <HAL_Delay>
    HAL_RTC_DST_Add1Hour(RealTime_Handle); // CEST or CET
 800a1c2:	4b25      	ldr	r3, [pc, #148]	@ (800a258 <ParseTime+0x224>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	0018      	movs	r0, r3
 800a1c8:	f012 fafc 	bl	801c7c4 <HAL_RTC_DST_Add1Hour>
    HAL_Delay(1000);
 800a1cc:	23fa      	movs	r3, #250	@ 0xfa
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	0018      	movs	r0, r3
 800a1d2:	f00a fcc1 	bl	8014b58 <HAL_Delay>
    RTC_GetTime(&currentTime, &currentDate);
 800a1d6:	2308      	movs	r3, #8
 800a1d8:	18fa      	adds	r2, r7, r3
 800a1da:	240c      	movs	r4, #12
 800a1dc:	193b      	adds	r3, r7, r4
 800a1de:	0011      	movs	r1, r2
 800a1e0:	0018      	movs	r0, r3
 800a1e2:	f000 f8a5 	bl	800a330 <RTC_GetTime>
    Debug("Current RTC time after update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 800a1e6:	0022      	movs	r2, r4
 800a1e8:	18bb      	adds	r3, r7, r2
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	001c      	movs	r4, r3
 800a1ee:	18bb      	adds	r3, r7, r2
 800a1f0:	785b      	ldrb	r3, [r3, #1]
 800a1f2:	0018      	movs	r0, r3
 800a1f4:	18bb      	adds	r3, r7, r2
 800a1f6:	789b      	ldrb	r3, [r3, #2]
 800a1f8:	4a18      	ldr	r2, [pc, #96]	@ (800a25c <ParseTime+0x228>)
 800a1fa:	4913      	ldr	r1, [pc, #76]	@ (800a248 <ParseTime+0x214>)
 800a1fc:	9301      	str	r3, [sp, #4]
 800a1fe:	9000      	str	r0, [sp, #0]
 800a200:	0023      	movs	r3, r4
 800a202:	2003      	movs	r0, #3
 800a204:	f009 ff26 	bl	8014054 <CreateLine>
  }

//=================
  if (currentDate.WeekDay == 2) {
 800a208:	2308      	movs	r3, #8
 800a20a:	18fb      	adds	r3, r7, r3
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d104      	bne.n	800a21c <ParseTime+0x1e8>
    reset_fanCleaningDone(); // reset the cleaning flag done
 800a212:	f004 fbb5 	bl	800e980 <reset_fanCleaningDone>
    dstchkd = false; // reset the dst flag done
 800a216:	4b12      	ldr	r3, [pc, #72]	@ (800a260 <ParseTime+0x22c>)
 800a218:	2200      	movs	r2, #0
 800a21a:	701a      	strb	r2, [r3, #0]
  }
  if (posixBootTime == 0) {
 800a21c:	4b11      	ldr	r3, [pc, #68]	@ (800a264 <ParseTime+0x230>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <ParseTime+0x206>
    posixBootTime = makeTime(&currentDate, &currentTime);
 800a224:	230c      	movs	r3, #12
 800a226:	18fa      	adds	r2, r7, r3
 800a228:	2308      	movs	r3, #8
 800a22a:	18fb      	adds	r3, r7, r3
 800a22c:	0011      	movs	r1, r2
 800a22e:	0018      	movs	r0, r3
 800a230:	f000 faa8 	bl	800a784 <makeTime>
 800a234:	0002      	movs	r2, r0
 800a236:	4b0b      	ldr	r3, [pc, #44]	@ (800a264 <ParseTime+0x230>)
 800a238:	601a      	str	r2, [r3, #0]
  }
}
 800a23a:	46c0      	nop			@ (mov r8, r8)
 800a23c:	46bd      	mov	sp, r7
 800a23e:	b00b      	add	sp, #44	@ 0x2c
 800a240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a242:	46c0      	nop			@ (mov r8, r8)
 800a244:	0802c388 	.word	0x0802c388
 800a248:	0802c3c0 	.word	0x0802c3c0
 800a24c:	0802c3c4 	.word	0x0802c3c4
 800a250:	0802c3f8 	.word	0x0802c3f8
 800a254:	0802c384 	.word	0x0802c384
 800a258:	20000df8 	.word	0x20000df8
 800a25c:	0802c414 	.word	0x0802c414
 800a260:	20000dec 	.word	0x20000dec
 800a264:	20000dfc 	.word	0x20000dfc

0800a268 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2200      	movs	r2, #0
 800a280:	611a      	str	r2, [r3, #16]
        if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a282:	4b09      	ldr	r3, [pc, #36]	@ (800a2a8 <RTC_SetTime+0x40>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	6879      	ldr	r1, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	0018      	movs	r0, r3
 800a28c:	f012 f886 	bl	801c39c <HAL_RTC_SetTime>
 800a290:	1e03      	subs	r3, r0, #0
 800a292:	d005      	beq.n	800a2a0 <RTC_SetTime+0x38>
      Error("Error setting time to RTC");
 800a294:	4a05      	ldr	r2, [pc, #20]	@ (800a2ac <RTC_SetTime+0x44>)
 800a296:	4b06      	ldr	r3, [pc, #24]	@ (800a2b0 <RTC_SetTime+0x48>)
 800a298:	0019      	movs	r1, r3
 800a29a:	2001      	movs	r0, #1
 800a29c:	f009 feda 	bl	8014054 <CreateLine>
    }
}
 800a2a0:	46c0      	nop			@ (mov r8, r8)
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	b002      	add	sp, #8
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	20000df8 	.word	0x20000df8
 800a2ac:	0802c448 	.word	0x0802c448
 800a2b0:	0802c464 	.word	0x0802c464

0800a2b4 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a2bc:	4b16      	ldr	r3, [pc, #88]	@ (800a318 <RTC_SetDate+0x64>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	6879      	ldr	r1, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	0018      	movs	r0, r3
 800a2c6:	f012 f971 	bl	801c5ac <HAL_RTC_SetDate>
 800a2ca:	1e03      	subs	r3, r0, #0
 800a2cc:	d005      	beq.n	800a2da <RTC_SetDate+0x26>
      Error("Error setting date to RTC");
 800a2ce:	4a13      	ldr	r2, [pc, #76]	@ (800a31c <RTC_SetDate+0x68>)
 800a2d0:	4b13      	ldr	r3, [pc, #76]	@ (800a320 <RTC_SetDate+0x6c>)
 800a2d2:	0019      	movs	r1, r3
 800a2d4:	2001      	movs	r0, #1
 800a2d6:	f009 febd 	bl	8014054 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 800a2da:	4b0f      	ldr	r3, [pc, #60]	@ (800a318 <RTC_SetDate+0x64>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2101      	movs	r1, #1
 800a2e0:	0018      	movs	r0, r3
 800a2e2:	f012 fcc7 	bl	801cc74 <HAL_RTCEx_BKUPRead>
 800a2e6:	0003      	movs	r3, r0
 800a2e8:	4a0e      	ldr	r2, [pc, #56]	@ (800a324 <RTC_SetDate+0x70>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d010      	beq.n	800a310 <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 800a2ee:	4a0e      	ldr	r2, [pc, #56]	@ (800a328 <RTC_SetDate+0x74>)
 800a2f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a32c <RTC_SetDate+0x78>)
 800a2f2:	0019      	movs	r1, r3
 800a2f4:	2003      	movs	r0, #3
 800a2f6:	f009 fead 	bl	8014054 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 800a2fa:	f010 ffcf 	bl	801b29c <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 800a2fe:	4b06      	ldr	r3, [pc, #24]	@ (800a318 <RTC_SetDate+0x64>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a08      	ldr	r2, [pc, #32]	@ (800a324 <RTC_SetDate+0x70>)
 800a304:	2101      	movs	r1, #1
 800a306:	0018      	movs	r0, r3
 800a308:	f012 fc9c 	bl	801cc44 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 800a30c:	f010 ffd4 	bl	801b2b8 <HAL_PWR_DisableBkUpAccess>
    }
}
 800a310:	46c0      	nop			@ (mov r8, r8)
 800a312:	46bd      	mov	sp, r7
 800a314:	b002      	add	sp, #8
 800a316:	bd80      	pop	{r7, pc}
 800a318:	20000df8 	.word	0x20000df8
 800a31c:	0802c468 	.word	0x0802c468
 800a320:	0802c464 	.word	0x0802c464
 800a324:	0000bebe 	.word	0x0000bebe
 800a328:	0802c484 	.word	0x0802c484
 800a32c:	0802c3c0 	.word	0x0802c3c0

0800a330 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800a330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 800a33a:	250f      	movs	r5, #15
 800a33c:	197b      	adds	r3, r7, r5
 800a33e:	2201      	movs	r2, #1
 800a340:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800a342:	230e      	movs	r3, #14
 800a344:	18fb      	adds	r3, r7, r3
 800a346:	2200      	movs	r2, #0
 800a348:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 800a34a:	260c      	movs	r6, #12
 800a34c:	19bc      	adds	r4, r7, r6
 800a34e:	f008 fed5 	bl	80130fc <powerCheck>
 800a352:	0003      	movs	r3, r0
 800a354:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 800a356:	19bb      	adds	r3, r7, r6
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d104      	bne.n	800a368 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800a35e:	197b      	adds	r3, r7, r5
 800a360:	781a      	ldrb	r2, [r3, #0]
 800a362:	197b      	adds	r3, r7, r5
 800a364:	3201      	adds	r2, #1
 800a366:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 800a368:	230d      	movs	r3, #13
 800a36a:	18fb      	adds	r3, r7, r3
 800a36c:	2200      	movs	r2, #0
 800a36e:	701a      	strb	r2, [r3, #0]
 800a370:	e039      	b.n	800a3e6 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800a372:	4b23      	ldr	r3, [pc, #140]	@ (800a400 <RTC_GetTime+0xd0>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6879      	ldr	r1, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	0018      	movs	r0, r3
 800a37c:	f012 f8b8 	bl	801c4f0 <HAL_RTC_GetTime>
 800a380:	1e03      	subs	r3, r0, #0
 800a382:	d005      	beq.n	800a390 <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 800a384:	4a1f      	ldr	r2, [pc, #124]	@ (800a404 <RTC_GetTime+0xd4>)
 800a386:	4b20      	ldr	r3, [pc, #128]	@ (800a408 <RTC_GetTime+0xd8>)
 800a388:	0019      	movs	r1, r3
 800a38a:	2001      	movs	r0, #1
 800a38c:	f009 fe62 	bl	8014054 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800a390:	4b1b      	ldr	r3, [pc, #108]	@ (800a400 <RTC_GetTime+0xd0>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	6839      	ldr	r1, [r7, #0]
 800a396:	2200      	movs	r2, #0
 800a398:	0018      	movs	r0, r3
 800a39a:	f012 f99b 	bl	801c6d4 <HAL_RTC_GetDate>
 800a39e:	1e03      	subs	r3, r0, #0
 800a3a0:	d005      	beq.n	800a3ae <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 800a3a2:	4a1a      	ldr	r2, [pc, #104]	@ (800a40c <RTC_GetTime+0xdc>)
 800a3a4:	4b18      	ldr	r3, [pc, #96]	@ (800a408 <RTC_GetTime+0xd8>)
 800a3a6:	0019      	movs	r1, r3
 800a3a8:	2001      	movs	r0, #1
 800a3aa:	f009 fe53 	bl	8014054 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 800a3ae:	230c      	movs	r3, #12
 800a3b0:	18fb      	adds	r3, r7, r3
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d110      	bne.n	800a3da <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	210e      	movs	r1, #14
 800a3be:	187a      	adds	r2, r7, r1
 800a3c0:	7812      	ldrb	r2, [r2, #0]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d018      	beq.n	800a3f8 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 800a3c6:	187b      	adds	r3, r7, r1
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	7812      	ldrb	r2, [r2, #0]
 800a3cc:	701a      	strb	r2, [r3, #0]
        t++;
 800a3ce:	210f      	movs	r1, #15
 800a3d0:	187b      	adds	r3, r7, r1
 800a3d2:	781a      	ldrb	r2, [r3, #0]
 800a3d4:	187b      	adds	r3, r7, r1
 800a3d6:	3201      	adds	r2, #1
 800a3d8:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 800a3da:	210d      	movs	r1, #13
 800a3dc:	187b      	adds	r3, r7, r1
 800a3de:	781a      	ldrb	r2, [r3, #0]
 800a3e0:	187b      	adds	r3, r7, r1
 800a3e2:	3201      	adds	r2, #1
 800a3e4:	701a      	strb	r2, [r3, #0]
 800a3e6:	230d      	movs	r3, #13
 800a3e8:	18fa      	adds	r2, r7, r3
 800a3ea:	230f      	movs	r3, #15
 800a3ec:	18fb      	adds	r3, r7, r3
 800a3ee:	7812      	ldrb	r2, [r2, #0]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d3bd      	bcc.n	800a372 <RTC_GetTime+0x42>
 800a3f6:	e000      	b.n	800a3fa <RTC_GetTime+0xca>
      }
      else {
        return;
 800a3f8:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	b005      	add	sp, #20
 800a3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a400:	20000df8 	.word	0x20000df8
 800a404:	0802c49c 	.word	0x0802c49c
 800a408:	0802c464 	.word	0x0802c464
 800a40c:	0802c4b8 	.word	0x0802c4b8

0800a410 <getPosixTime>:

uint32_t getPosixTime(void) {
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800a416:	003a      	movs	r2, r7
 800a418:	1d3b      	adds	r3, r7, #4
 800a41a:	0011      	movs	r1, r2
 800a41c:	0018      	movs	r0, r3
 800a41e:	f7ff ff87 	bl	800a330 <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 800a422:	1d3a      	adds	r2, r7, #4
 800a424:	003b      	movs	r3, r7
 800a426:	0011      	movs	r1, r2
 800a428:	0018      	movs	r0, r3
 800a42a:	f000 f9ab 	bl	800a784 <makeTime>
 800a42e:	0003      	movs	r3, r0
}
 800a430:	0018      	movs	r0, r3
 800a432:	46bd      	mov	sp, r7
 800a434:	b006      	add	sp, #24
 800a436:	bd80      	pop	{r7, pc}

0800a438 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 800a438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a43a:	b08d      	sub	sp, #52	@ 0x34
 800a43c:	af04      	add	r7, sp, #16
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  breakPosixTime(posixTime, &currentDate, &currentTime);
 800a442:	240c      	movs	r4, #12
 800a444:	193a      	adds	r2, r7, r4
 800a446:	2508      	movs	r5, #8
 800a448:	1979      	adds	r1, r7, r5
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	0018      	movs	r0, r3
 800a44e:	f000 fa63 	bl	800a918 <breakPosixTime>
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a452:	002a      	movs	r2, r5
 800a454:	18bb      	adds	r3, r7, r2
 800a456:	789b      	ldrb	r3, [r3, #2]
 800a458:	001e      	movs	r6, r3
 800a45a:	18bb      	adds	r3, r7, r2
 800a45c:	785b      	ldrb	r3, [r3, #1]
 800a45e:	469c      	mov	ip, r3
 800a460:	18bb      	adds	r3, r7, r2
 800a462:	78db      	ldrb	r3, [r3, #3]
 800a464:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a466:	0021      	movs	r1, r4
 800a468:	187b      	adds	r3, r7, r1
 800a46a:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a46c:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a46e:	187b      	adds	r3, r7, r1
 800a470:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a472:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 800a474:	187b      	adds	r3, r7, r1
 800a476:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 800a478:	4906      	ldr	r1, [pc, #24]	@ (800a494 <getUTCfromPosixTime+0x5c>)
 800a47a:	6838      	ldr	r0, [r7, #0]
 800a47c:	9303      	str	r3, [sp, #12]
 800a47e:	9502      	str	r5, [sp, #8]
 800a480:	9401      	str	r4, [sp, #4]
 800a482:	9200      	str	r2, [sp, #0]
 800a484:	4663      	mov	r3, ip
 800a486:	0032      	movs	r2, r6
 800a488:	f01b ffb2 	bl	80263f0 <siprintf>
}
 800a48c:	46c0      	nop			@ (mov r8, r8)
 800a48e:	46bd      	mov	sp, r7
 800a490:	b009      	add	sp, #36	@ 0x24
 800a492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a494:	0802c4d4 	.word	0x0802c4d4

0800a498 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800a4a0:	4b10      	ldr	r3, [pc, #64]	@ (800a4e4 <RTC_SetWakeUpTimer+0x4c>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	0018      	movs	r0, r3
 800a4a6:	f012 fb31 	bl	801cb0c <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 800a4aa:	4b0e      	ldr	r3, [pc, #56]	@ (800a4e4 <RTC_SetWakeUpTimer+0x4c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	22ff      	movs	r2, #255	@ 0xff
 800a4b4:	401a      	ands	r2, r3
 800a4b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a4e4 <RTC_SetWakeUpTimer+0x4c>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	490a      	ldr	r1, [pc, #40]	@ (800a4e8 <RTC_SetWakeUpTimer+0x50>)
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800a4c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a4ec <RTC_SetWakeUpTimer+0x54>)
 800a4c4:	2280      	movs	r2, #128	@ 0x80
 800a4c6:	0352      	lsls	r2, r2, #13
 800a4c8:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 800a4ca:	4b06      	ldr	r3, [pc, #24]	@ (800a4e4 <RTC_SetWakeUpTimer+0x4c>)
 800a4cc:	6818      	ldr	r0, [r3, #0]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	2204      	movs	r2, #4
 800a4d4:	0019      	movs	r1, r3
 800a4d6:	f012 fa41 	bl	801c95c <HAL_RTCEx_SetWakeUpTimer_IT>
}
 800a4da:	46c0      	nop			@ (mov r8, r8)
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	b002      	add	sp, #8
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	46c0      	nop			@ (mov r8, r8)
 800a4e4:	20000df8 	.word	0x20000df8
 800a4e8:	fffffb7f 	.word	0xfffffb7f
 800a4ec:	40010400 	.word	0x40010400

0800a4f0 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 800a4f4:	4a0b      	ldr	r2, [pc, #44]	@ (800a524 <Enter_Standby_Mode+0x34>)
 800a4f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a528 <Enter_Standby_Mode+0x38>)
 800a4f8:	0019      	movs	r1, r3
 800a4fa:	2003      	movs	r0, #3
 800a4fc:	f009 fdaa 	bl	8014054 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 800a500:	2064      	movs	r0, #100	@ 0x64
 800a502:	f00a fb29 	bl	8014b58 <HAL_Delay>
  HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800a506:	4b09      	ldr	r3, [pc, #36]	@ (800a52c <Enter_Standby_Mode+0x3c>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	0018      	movs	r0, r3
 800a50c:	f012 fafe 	bl	801cb0c <HAL_RTCEx_DeactivateWakeUpTimer>
  // Disable unwanted wake-ups
  GPIO_PrepareForStandbyMode();
 800a510:	f002 fa1e 	bl	800c950 <GPIO_PrepareForStandbyMode>
  // Schakel Standby Mode in only if battery is drained
  HAL_SuspendTick();
 800a514:	f00a fb44 	bl	8014ba0 <HAL_SuspendTick>
  HAL_PWR_EnterSTANDBYMode();
 800a518:	f010 ff3a 	bl	801b390 <HAL_PWR_EnterSTANDBYMode>
}
 800a51c:	46c0      	nop			@ (mov r8, r8)
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	46c0      	nop			@ (mov r8, r8)
 800a524:	0802c528 	.word	0x0802c528
 800a528:	0802c3c0 	.word	0x0802c3c0
 800a52c:	20000df8 	.word	0x20000df8

0800a530 <Enter_Stop_Mode_for_empty_battery>:


void Enter_Stop_Mode_for_empty_battery(uint16_t sleepTime)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af02      	add	r7, sp, #8
 800a536:	0002      	movs	r2, r0
 800a538:	1dbb      	adds	r3, r7, #6
 800a53a:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a53c:	4b25      	ldr	r3, [pc, #148]	@ (800a5d4 <Enter_Stop_Mode_for_empty_battery+0xa4>)
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <Enter_Stop_Mode_for_empty_battery+0x18>
    sen5x_Power_Off();
 800a544:	f004 f9f0 	bl	800e928 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 800a548:	f7ff fa6e 	bl	8009a28 <ReadBatteryVoltage>
 800a54c:	1c03      	adds	r3, r0, #0
 800a54e:	1c18      	adds	r0, r3, #0
 800a550:	f7f9 f9a0 	bl	8003894 <__aeabi_f2d>
 800a554:	0002      	movs	r2, r0
 800a556:	000b      	movs	r3, r1
 800a558:	481f      	ldr	r0, [pc, #124]	@ (800a5d8 <Enter_Stop_Mode_for_empty_battery+0xa8>)
 800a55a:	4920      	ldr	r1, [pc, #128]	@ (800a5dc <Enter_Stop_Mode_for_empty_battery+0xac>)
 800a55c:	9200      	str	r2, [sp, #0]
 800a55e:	9301      	str	r3, [sp, #4]
 800a560:	0002      	movs	r2, r0
 800a562:	2002      	movs	r0, #2
 800a564:	f009 fd76 	bl	8014054 <CreateLine>
  powerDisplay(powerCheck());
 800a568:	f008 fdc8 	bl	80130fc <powerCheck>
 800a56c:	0003      	movs	r3, r0
 800a56e:	0018      	movs	r0, r3
 800a570:	f008 fde0 	bl	8013134 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a574:	1dbb      	adds	r3, r7, #6
 800a576:	881b      	ldrh	r3, [r3, #0]
 800a578:	4a19      	ldr	r2, [pc, #100]	@ (800a5e0 <Enter_Stop_Mode_for_empty_battery+0xb0>)
 800a57a:	491a      	ldr	r1, [pc, #104]	@ (800a5e4 <Enter_Stop_Mode_for_empty_battery+0xb4>)
 800a57c:	2003      	movs	r0, #3
 800a57e:	f009 fd69 	bl	8014054 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a582:	f7ff ff45 	bl	800a410 <getPosixTime>
 800a586:	0002      	movs	r2, r0
 800a588:	1dbb      	adds	r3, r7, #6
 800a58a:	881b      	ldrh	r3, [r3, #0]
 800a58c:	18d3      	adds	r3, r2, r3
 800a58e:	4a16      	ldr	r2, [pc, #88]	@ (800a5e8 <Enter_Stop_Mode_for_empty_battery+0xb8>)
 800a590:	0011      	movs	r1, r2
 800a592:	0018      	movs	r0, r3
 800a594:	f7ff ff50 	bl	800a438 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a598:	4b13      	ldr	r3, [pc, #76]	@ (800a5e8 <Enter_Stop_Mode_for_empty_battery+0xb8>)
 800a59a:	4a14      	ldr	r2, [pc, #80]	@ (800a5ec <Enter_Stop_Mode_for_empty_battery+0xbc>)
 800a59c:	490f      	ldr	r1, [pc, #60]	@ (800a5dc <Enter_Stop_Mode_for_empty_battery+0xac>)
 800a59e:	2002      	movs	r0, #2
 800a5a0:	f009 fd58 	bl	8014054 <CreateLine>
  HAL_Delay(100);
 800a5a4:	2064      	movs	r0, #100	@ 0x64
 800a5a6:	f00a fad7 	bl	8014b58 <HAL_Delay>
  HAL_SuspendTick();
 800a5aa:	f00a faf9 	bl	8014ba0 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a5ae:	1dbb      	adds	r3, r7, #6
 800a5b0:	881b      	ldrh	r3, [r3, #0]
 800a5b2:	0018      	movs	r0, r3
 800a5b4:	f7ff ff70 	bl	800a498 <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	2001      	movs	r0, #1
 800a5bc:	f010 fe8c 	bl	801b2d8 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a5c0:	f002 fe94 	bl	800d2ec <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a5c4:	f00a fafa 	bl	8014bbc <HAL_ResumeTick>
  showTime();
 800a5c8:	f7ff fb96 	bl	8009cf8 <showTime>
}
 800a5cc:	46c0      	nop			@ (mov r8, r8)
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	b002      	add	sp, #8
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	20001171 	.word	0x20001171
 800a5d8:	0802c54c 	.word	0x0802c54c
 800a5dc:	0802c384 	.word	0x0802c384
 800a5e0:	0802c564 	.word	0x0802c564
 800a5e4:	0802c3c0 	.word	0x0802c3c0
 800a5e8:	20000e00 	.word	0x20000e00
 800a5ec:	0802c588 	.word	0x0802c588

0800a5f0 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af02      	add	r7, sp, #8
 800a5f6:	0002      	movs	r2, r0
 800a5f8:	1dbb      	adds	r3, r7, #6
 800a5fa:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 800a5fc:	4b4f      	ldr	r3, [pc, #316]	@ (800a73c <Enter_Stop_Mode+0x14c>)
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d001      	beq.n	800a608 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 800a604:	f004 f990 	bl	800e928 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 800a608:	f7ff fa0e 	bl	8009a28 <ReadBatteryVoltage>
 800a60c:	1c03      	adds	r3, r0, #0
 800a60e:	1c18      	adds	r0, r3, #0
 800a610:	f7f9 f940 	bl	8003894 <__aeabi_f2d>
 800a614:	0002      	movs	r2, r0
 800a616:	000b      	movs	r3, r1
 800a618:	4849      	ldr	r0, [pc, #292]	@ (800a740 <Enter_Stop_Mode+0x150>)
 800a61a:	494a      	ldr	r1, [pc, #296]	@ (800a744 <Enter_Stop_Mode+0x154>)
 800a61c:	9200      	str	r2, [sp, #0]
 800a61e:	9301      	str	r3, [sp, #4]
 800a620:	0002      	movs	r2, r0
 800a622:	2002      	movs	r0, #2
 800a624:	f009 fd16 	bl	8014054 <CreateLine>
  powerDisplay(powerCheck());
 800a628:	f008 fd68 	bl	80130fc <powerCheck>
 800a62c:	0003      	movs	r3, r0
 800a62e:	0018      	movs	r0, r3
 800a630:	f008 fd80 	bl	8013134 <powerDisplay>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 800a634:	1dbb      	adds	r3, r7, #6
 800a636:	881b      	ldrh	r3, [r3, #0]
 800a638:	4a43      	ldr	r2, [pc, #268]	@ (800a748 <Enter_Stop_Mode+0x158>)
 800a63a:	4944      	ldr	r1, [pc, #272]	@ (800a74c <Enter_Stop_Mode+0x15c>)
 800a63c:	2003      	movs	r0, #3
 800a63e:	f009 fd09 	bl	8014054 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 800a642:	f7ff fee5 	bl	800a410 <getPosixTime>
 800a646:	0002      	movs	r2, r0
 800a648:	1dbb      	adds	r3, r7, #6
 800a64a:	881b      	ldrh	r3, [r3, #0]
 800a64c:	18d3      	adds	r3, r2, r3
 800a64e:	4a40      	ldr	r2, [pc, #256]	@ (800a750 <Enter_Stop_Mode+0x160>)
 800a650:	0011      	movs	r1, r2
 800a652:	0018      	movs	r0, r3
 800a654:	f7ff fef0 	bl	800a438 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 800a658:	4b3d      	ldr	r3, [pc, #244]	@ (800a750 <Enter_Stop_Mode+0x160>)
 800a65a:	4a3e      	ldr	r2, [pc, #248]	@ (800a754 <Enter_Stop_Mode+0x164>)
 800a65c:	4939      	ldr	r1, [pc, #228]	@ (800a744 <Enter_Stop_Mode+0x154>)
 800a65e:	2002      	movs	r0, #2
 800a660:	f009 fcf8 	bl	8014054 <CreateLine>
  HAL_Delay(100);
 800a664:	2064      	movs	r0, #100	@ 0x64
 800a666:	f00a fa77 	bl	8014b58 <HAL_Delay>
  HAL_SuspendTick();
 800a66a:	f00a fa99 	bl	8014ba0 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 800a66e:	1dbb      	adds	r3, r7, #6
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	0018      	movs	r0, r3
 800a674:	f7ff ff10 	bl	800a498 <RTC_SetWakeUpTimer>
#ifdef SSD1306
  stop_I2C2();
#endif
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a678:	2101      	movs	r1, #1
 800a67a:	2001      	movs	r0, #1
 800a67c:	f010 fe2c 	bl	801b2d8 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 800a680:	f002 fe34 	bl	800d2ec <SystemClock_Config>
  HAL_ResumeTick(); // Enable SysTick after wake-up
 800a684:	f00a fa9a 	bl	8014bbc <HAL_ResumeTick>
#ifdef SSD1306
  MX_I2C2_Init();
#endif
  if (sen5x_enable((uint32_t)sleepTime)) {
 800a688:	1dbb      	adds	r3, r7, #6
 800a68a:	881b      	ldrh	r3, [r3, #0]
 800a68c:	0018      	movs	r0, r3
 800a68e:	f004 f8bf 	bl	800e810 <sen5x_enable>
 800a692:	1e03      	subs	r3, r0, #0
 800a694:	d01e      	beq.n	800a6d4 <Enter_Stop_Mode+0xe4>
    showTime();
 800a696:	f7ff fb2f 	bl	8009cf8 <showTime>
    set_light_on_state();
 800a69a:	f004 fe15 	bl	800f2c8 <set_light_on_state>
    if (!userToggle) {
 800a69e:	4b2e      	ldr	r3, [pc, #184]	@ (800a758 <Enter_Stop_Mode+0x168>)
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	4053      	eors	r3, r2
 800a6a6:	b2db      	uxtb	r3, r3
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d013      	beq.n	800a6d4 <Enter_Stop_Mode+0xe4>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 28 + 3s measurement time is approx 30 seconds
 800a6ac:	201c      	movs	r0, #28
 800a6ae:	f7ff fef3 	bl	800a498 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 800a6b2:	4a25      	ldr	r2, [pc, #148]	@ (800a748 <Enter_Stop_Mode+0x158>)
 800a6b4:	4925      	ldr	r1, [pc, #148]	@ (800a74c <Enter_Stop_Mode+0x15c>)
 800a6b6:	231c      	movs	r3, #28
 800a6b8:	2003      	movs	r0, #3
 800a6ba:	f009 fccb 	bl	8014054 <CreateLine>
#ifdef SSD1306
      stop_I2C2();
#endif
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800a6be:	2101      	movs	r1, #1
 800a6c0:	2001      	movs	r0, #1
 800a6c2:	f010 fe09 	bl	801b2d8 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 800a6c6:	f002 fe11 	bl	800d2ec <SystemClock_Config>
      HAL_ResumeTick(); // Enable SysTick after wake-up
 800a6ca:	f00a fa77 	bl	8014bbc <HAL_ResumeTick>
      MX_I2C2_Init();
      if (userToggle) {
        displayStart();
      }
#endif
      setsen5xReadTimer(0);
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	f004 f87c 	bl	800e7cc <setsen5xReadTimer>
    }
  }
  showTime();
 800a6d4:	f7ff fb10 	bl	8009cf8 <showTime>
  EnabledConnectedDevices();
 800a6d8:	f003 fbe2 	bl	800dea0 <EnabledConnectedDevices>
  ResetDBACalculator();  // reset the DBA average calculation
 800a6dc:	f003 fd0a 	bl	800e0f4 <ResetDBACalculator>
  ResetBMP280samplecounter();
 800a6e0:	f000 ffa4 	bl	800b62c <ResetBMP280samplecounter>
  ResetSGP40samplecounter();
 800a6e4:	f006 fc68 	bl	8010fb8 <ResetSGP40samplecounter>
  ResetENS160samplecounter();
 800a6e8:	f7f9 fa28 	bl	8003b3c <ResetENS160samplecounter>
  setsen5xSamplecounter(0);
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	f004 f87f 	bl	800e7f0 <setsen5xSamplecounter>
  setESPTimeStamp(ESP_DELAY_TIME_AFTER_STM_WAKEUP);
 800a6f2:	4b1a      	ldr	r3, [pc, #104]	@ (800a75c <Enter_Stop_Mode+0x16c>)
 800a6f4:	0018      	movs	r0, r3
 800a6f6:	f7fa f911 	bl	800491c <setESPTimeStamp>
  setSGP40TimeStamp(30);
 800a6fa:	201e      	movs	r0, #30
 800a6fc:	f006 fc4a 	bl	8010f94 <setSGP40TimeStamp>
  setHIDSTimeStamp(90);
 800a700:	205a      	movs	r0, #90	@ 0x5a
 800a702:	f009 ff3d 	bl	8014580 <setHIDSTimeStamp>
  setAHT20TimeStamp(60);
 800a706:	203c      	movs	r0, #60	@ 0x3c
 800a708:	f000 fb98 	bl	800ae3c <setAHT20TimeStamp>
  setBMP280TimeStamp(90);
 800a70c:	205a      	movs	r0, #90	@ 0x5a
 800a70e:	f000 ff7b 	bl	800b608 <setBMP280TimeStamp>
  setENS160TimeStamp(0);
 800a712:	2000      	movs	r0, #0
 800a714:	f7f9 fa1c 	bl	8003b50 <setENS160TimeStamp>
  setMICTimeStamp(0);
 800a718:	2000      	movs	r0, #0
 800a71a:	f003 fcd9 	bl	800e0d0 <setMICTimeStamp>
  ESPTransmitDone = false;
 800a71e:	4b10      	ldr	r3, [pc, #64]	@ (800a760 <Enter_Stop_Mode+0x170>)
 800a720:	2200      	movs	r2, #0
 800a722:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800a724:	f00a fa0e 	bl	8014b44 <HAL_GetTick>
 800a728:	0003      	movs	r3, r0
 800a72a:	4a0c      	ldr	r2, [pc, #48]	@ (800a75c <Enter_Stop_Mode+0x16c>)
 800a72c:	189a      	adds	r2, r3, r2
 800a72e:	4b0d      	ldr	r3, [pc, #52]	@ (800a764 <Enter_Stop_Mode+0x174>)
 800a730:	601a      	str	r2, [r3, #0]
}
 800a732:	46c0      	nop			@ (mov r8, r8)
 800a734:	46bd      	mov	sp, r7
 800a736:	b002      	add	sp, #8
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	46c0      	nop			@ (mov r8, r8)
 800a73c:	20001171 	.word	0x20001171
 800a740:	0802c54c 	.word	0x0802c54c
 800a744:	0802c384 	.word	0x0802c384
 800a748:	0802c564 	.word	0x0802c564
 800a74c:	0802c3c0 	.word	0x0802c3c0
 800a750:	20000e00 	.word	0x20000e00
 800a754:	0802c588 	.word	0x0802c588
 800a758:	20002102 	.word	0x20002102
 800a75c:	00001194 	.word	0x00001194
 800a760:	200005b3 	.word	0x200005b3
 800a764:	200010c4 	.word	0x200010c4

0800a768 <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 800a770:	4b03      	ldr	r3, [pc, #12]	@ (800a780 <InitClock+0x18>)
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	601a      	str	r2, [r3, #0]
}
 800a776:	46c0      	nop			@ (mov r8, r8)
 800a778:	46bd      	mov	sp, r7
 800a77a:	b002      	add	sp, #8
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	46c0      	nop			@ (mov r8, r8)
 800a780:	20000df8 	.word	0x20000df8

0800a784 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	78db      	ldrb	r3, [r3, #3]
 800a792:	001a      	movs	r2, r3
 800a794:	0013      	movs	r3, r2
 800a796:	025b      	lsls	r3, r3, #9
 800a798:	189b      	adds	r3, r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	189b      	adds	r3, r3, r2
 800a79e:	00db      	lsls	r3, r3, #3
 800a7a0:	189b      	adds	r3, r3, r2
 800a7a2:	011a      	lsls	r2, r3, #4
 800a7a4:	1ad2      	subs	r2, r2, r3
 800a7a6:	01d3      	lsls	r3, r2, #7
 800a7a8:	001a      	movs	r2, r3
 800a7aa:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	60fb      	str	r3, [r7, #12]
 800a7b0:	e028      	b.n	800a804 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	4a53      	ldr	r2, [pc, #332]	@ (800a904 <makeTime+0x180>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	db21      	blt.n	800a7fe <makeTime+0x7a>
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	4a52      	ldr	r2, [pc, #328]	@ (800a908 <makeTime+0x184>)
 800a7be:	4694      	mov	ip, r2
 800a7c0:	4463      	add	r3, ip
 800a7c2:	001a      	movs	r2, r3
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	d119      	bne.n	800a7fe <makeTime+0x7a>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	4a4e      	ldr	r2, [pc, #312]	@ (800a908 <makeTime+0x184>)
 800a7ce:	4694      	mov	ip, r2
 800a7d0:	4463      	add	r3, ip
 800a7d2:	2164      	movs	r1, #100	@ 0x64
 800a7d4:	0018      	movs	r0, r3
 800a7d6:	f7f5 fe55 	bl	8000484 <__aeabi_idivmod>
 800a7da:	1e0b      	subs	r3, r1, #0
 800a7dc:	d10a      	bne.n	800a7f4 <makeTime+0x70>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	4a49      	ldr	r2, [pc, #292]	@ (800a908 <makeTime+0x184>)
 800a7e2:	4694      	mov	ip, r2
 800a7e4:	4463      	add	r3, ip
 800a7e6:	22c8      	movs	r2, #200	@ 0xc8
 800a7e8:	0051      	lsls	r1, r2, #1
 800a7ea:	0018      	movs	r0, r3
 800a7ec:	f7f5 fe4a 	bl	8000484 <__aeabi_idivmod>
 800a7f0:	1e0b      	subs	r3, r1, #0
 800a7f2:	d104      	bne.n	800a7fe <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	4a45      	ldr	r2, [pc, #276]	@ (800a90c <makeTime+0x188>)
 800a7f8:	4694      	mov	ip, r2
 800a7fa:	4463      	add	r3, ip
 800a7fc:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	3301      	adds	r3, #1
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	78db      	ldrb	r3, [r3, #3]
 800a808:	001a      	movs	r2, r3
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	4293      	cmp	r3, r2
 800a80e:	dbd0      	blt.n	800a7b2 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 800a810:	2301      	movs	r3, #1
 800a812:	60fb      	str	r3, [r7, #12]
 800a814:	e03c      	b.n	800a890 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2b02      	cmp	r3, #2
 800a81a:	d125      	bne.n	800a868 <makeTime+0xe4>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	78db      	ldrb	r3, [r3, #3]
 800a820:	4a39      	ldr	r2, [pc, #228]	@ (800a908 <makeTime+0x184>)
 800a822:	4694      	mov	ip, r2
 800a824:	4463      	add	r3, ip
 800a826:	001a      	movs	r2, r3
 800a828:	2303      	movs	r3, #3
 800a82a:	4013      	ands	r3, r2
 800a82c:	d11c      	bne.n	800a868 <makeTime+0xe4>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	78db      	ldrb	r3, [r3, #3]
 800a832:	4a35      	ldr	r2, [pc, #212]	@ (800a908 <makeTime+0x184>)
 800a834:	4694      	mov	ip, r2
 800a836:	4463      	add	r3, ip
 800a838:	2164      	movs	r1, #100	@ 0x64
 800a83a:	0018      	movs	r0, r3
 800a83c:	f7f5 fe22 	bl	8000484 <__aeabi_idivmod>
 800a840:	1e0b      	subs	r3, r1, #0
 800a842:	d10b      	bne.n	800a85c <makeTime+0xd8>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	78db      	ldrb	r3, [r3, #3]
 800a848:	4a2f      	ldr	r2, [pc, #188]	@ (800a908 <makeTime+0x184>)
 800a84a:	4694      	mov	ip, r2
 800a84c:	4463      	add	r3, ip
 800a84e:	22c8      	movs	r2, #200	@ 0xc8
 800a850:	0051      	lsls	r1, r2, #1
 800a852:	0018      	movs	r0, r3
 800a854:	f7f5 fe16 	bl	8000484 <__aeabi_idivmod>
 800a858:	1e0b      	subs	r3, r1, #0
 800a85a:	d105      	bne.n	800a868 <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	4a2c      	ldr	r2, [pc, #176]	@ (800a910 <makeTime+0x18c>)
 800a860:	4694      	mov	ip, r2
 800a862:	4463      	add	r3, ip
 800a864:	60bb      	str	r3, [r7, #8]
 800a866:	e010      	b.n	800a88a <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	3b01      	subs	r3, #1
 800a86c:	4a29      	ldr	r2, [pc, #164]	@ (800a914 <makeTime+0x190>)
 800a86e:	5cd3      	ldrb	r3, [r2, r3]
 800a870:	001a      	movs	r2, r3
 800a872:	0013      	movs	r3, r2
 800a874:	005b      	lsls	r3, r3, #1
 800a876:	189b      	adds	r3, r3, r2
 800a878:	011a      	lsls	r2, r3, #4
 800a87a:	1ad2      	subs	r2, r2, r3
 800a87c:	0113      	lsls	r3, r2, #4
 800a87e:	1a9b      	subs	r3, r3, r2
 800a880:	01db      	lsls	r3, r3, #7
 800a882:	001a      	movs	r2, r3
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	189b      	adds	r3, r3, r2
 800a888:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3301      	adds	r3, #1
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	785b      	ldrb	r3, [r3, #1]
 800a894:	001a      	movs	r2, r3
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	4293      	cmp	r3, r2
 800a89a:	dbbc      	blt.n	800a816 <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	789b      	ldrb	r3, [r3, #2]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	001a      	movs	r2, r3
 800a8a4:	0013      	movs	r3, r2
 800a8a6:	005b      	lsls	r3, r3, #1
 800a8a8:	189b      	adds	r3, r3, r2
 800a8aa:	011a      	lsls	r2, r3, #4
 800a8ac:	1ad2      	subs	r2, r2, r3
 800a8ae:	0113      	lsls	r3, r2, #4
 800a8b0:	1a9b      	subs	r3, r3, r2
 800a8b2:	01db      	lsls	r3, r3, #7
 800a8b4:	001a      	movs	r2, r3
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	189b      	adds	r3, r3, r2
 800a8ba:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	001a      	movs	r2, r3
 800a8c2:	0013      	movs	r3, r2
 800a8c4:	011b      	lsls	r3, r3, #4
 800a8c6:	1a9b      	subs	r3, r3, r2
 800a8c8:	011a      	lsls	r2, r3, #4
 800a8ca:	1ad2      	subs	r2, r2, r3
 800a8cc:	0113      	lsls	r3, r2, #4
 800a8ce:	001a      	movs	r2, r3
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	189b      	adds	r3, r3, r2
 800a8d4:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	785b      	ldrb	r3, [r3, #1]
 800a8da:	001a      	movs	r2, r3
 800a8dc:	0013      	movs	r3, r2
 800a8de:	011b      	lsls	r3, r3, #4
 800a8e0:	1a9b      	subs	r3, r3, r2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	001a      	movs	r2, r3
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	189b      	adds	r3, r3, r2
 800a8ea:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	789b      	ldrb	r3, [r3, #2]
 800a8f0:	001a      	movs	r2, r3
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	189b      	adds	r3, r3, r2
 800a8f6:	60bb      	str	r3, [r7, #8]
  return seconds;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
}
 800a8fa:	0018      	movs	r0, r3
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	b004      	add	sp, #16
 800a900:	bd80      	pop	{r7, pc}
 800a902:	46c0      	nop			@ (mov r8, r8)
 800a904:	fffff84f 	.word	0xfffff84f
 800a908:	000007b2 	.word	0x000007b2
 800a90c:	00015180 	.word	0x00015180
 800a910:	00263b80 	.word	0x00263b80
 800a914:	0802e774 	.word	0x0802e774

0800a918 <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 800a918:	b590      	push	{r4, r7, lr}
 800a91a:	b089      	sub	sp, #36	@ 0x24
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	213c      	movs	r1, #60	@ 0x3c
 800a92c:	0018      	movs	r0, r3
 800a92e:	f7f5 fcbf 	bl	80002b0 <__aeabi_uidivmod>
 800a932:	000b      	movs	r3, r1
 800a934:	b2da      	uxtb	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	213c      	movs	r1, #60	@ 0x3c
 800a93e:	0018      	movs	r0, r3
 800a940:	f7f5 fc30 	bl	80001a4 <__udivsi3>
 800a944:	0003      	movs	r3, r0
 800a946:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	213c      	movs	r1, #60	@ 0x3c
 800a94c:	0018      	movs	r0, r3
 800a94e:	f7f5 fcaf 	bl	80002b0 <__aeabi_uidivmod>
 800a952:	000b      	movs	r3, r1
 800a954:	b2da      	uxtb	r2, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	213c      	movs	r1, #60	@ 0x3c
 800a95e:	0018      	movs	r0, r3
 800a960:	f7f5 fc20 	bl	80001a4 <__udivsi3>
 800a964:	0003      	movs	r3, r0
 800a966:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	2118      	movs	r1, #24
 800a96c:	0018      	movs	r0, r3
 800a96e:	f7f5 fc9f 	bl	80002b0 <__aeabi_uidivmod>
 800a972:	000b      	movs	r3, r1
 800a974:	b2da      	uxtb	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	2118      	movs	r1, #24
 800a97e:	0018      	movs	r0, r3
 800a980:	f7f5 fc10 	bl	80001a4 <__udivsi3>
 800a984:	0003      	movs	r3, r0
 800a986:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	3b01      	subs	r3, #1
 800a98c:	2107      	movs	r1, #7
 800a98e:	0018      	movs	r0, r3
 800a990:	f7f5 fc8e 	bl	80002b0 <__aeabi_uidivmod>
 800a994:	000b      	movs	r3, r1
 800a996:	b2db      	uxtb	r3, r3
 800a998:	3301      	adds	r3, #1
 800a99a:	b2da      	uxtb	r2, r3
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	701a      	strb	r2, [r3, #0]
  year = 0;
 800a9a0:	231f      	movs	r3, #31
 800a9a2:	18fb      	adds	r3, r7, r3
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	701a      	strb	r2, [r3, #0]
  days = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800a9ac:	e005      	b.n	800a9ba <breakPosixTime+0xa2>
    year++;
 800a9ae:	211f      	movs	r1, #31
 800a9b0:	187b      	adds	r3, r7, r1
 800a9b2:	781a      	ldrb	r2, [r3, #0]
 800a9b4:	187b      	adds	r3, r7, r1
 800a9b6:	3201      	adds	r2, #1
 800a9b8:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 800a9ba:	241f      	movs	r4, #31
 800a9bc:	193b      	adds	r3, r7, r4
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	4a64      	ldr	r2, [pc, #400]	@ (800ab54 <breakPosixTime+0x23c>)
 800a9c2:	4694      	mov	ip, r2
 800a9c4:	4463      	add	r3, ip
 800a9c6:	001a      	movs	r2, r3
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	d119      	bne.n	800aa02 <breakPosixTime+0xea>
 800a9ce:	193b      	adds	r3, r7, r4
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	4a60      	ldr	r2, [pc, #384]	@ (800ab54 <breakPosixTime+0x23c>)
 800a9d4:	4694      	mov	ip, r2
 800a9d6:	4463      	add	r3, ip
 800a9d8:	2164      	movs	r1, #100	@ 0x64
 800a9da:	0018      	movs	r0, r3
 800a9dc:	f7f5 fd52 	bl	8000484 <__aeabi_idivmod>
 800a9e0:	1e0b      	subs	r3, r1, #0
 800a9e2:	d10b      	bne.n	800a9fc <breakPosixTime+0xe4>
 800a9e4:	193b      	adds	r3, r7, r4
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	4a5a      	ldr	r2, [pc, #360]	@ (800ab54 <breakPosixTime+0x23c>)
 800a9ea:	4694      	mov	ip, r2
 800a9ec:	4463      	add	r3, ip
 800a9ee:	22c8      	movs	r2, #200	@ 0xc8
 800a9f0:	0051      	lsls	r1, r2, #1
 800a9f2:	0018      	movs	r0, r3
 800a9f4:	f7f5 fd46 	bl	8000484 <__aeabi_idivmod>
 800a9f8:	1e0b      	subs	r3, r1, #0
 800a9fa:	d102      	bne.n	800aa02 <breakPosixTime+0xea>
 800a9fc:	23b7      	movs	r3, #183	@ 0xb7
 800a9fe:	005b      	lsls	r3, r3, #1
 800aa00:	e001      	b.n	800aa06 <breakPosixTime+0xee>
 800aa02:	236e      	movs	r3, #110	@ 0x6e
 800aa04:	33ff      	adds	r3, #255	@ 0xff
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	18d3      	adds	r3, r2, r3
 800aa0a:	617b      	str	r3, [r7, #20]
 800aa0c:	697a      	ldr	r2, [r7, #20]
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d9cc      	bls.n	800a9ae <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	241f      	movs	r4, #31
 800aa18:	193a      	adds	r2, r7, r4
 800aa1a:	7812      	ldrb	r2, [r2, #0]
 800aa1c:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 800aa1e:	193b      	adds	r3, r7, r4
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	4a4c      	ldr	r2, [pc, #304]	@ (800ab54 <breakPosixTime+0x23c>)
 800aa24:	4694      	mov	ip, r2
 800aa26:	4463      	add	r3, ip
 800aa28:	001a      	movs	r2, r3
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	d119      	bne.n	800aa64 <breakPosixTime+0x14c>
 800aa30:	193b      	adds	r3, r7, r4
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	4a47      	ldr	r2, [pc, #284]	@ (800ab54 <breakPosixTime+0x23c>)
 800aa36:	4694      	mov	ip, r2
 800aa38:	4463      	add	r3, ip
 800aa3a:	2164      	movs	r1, #100	@ 0x64
 800aa3c:	0018      	movs	r0, r3
 800aa3e:	f7f5 fd21 	bl	8000484 <__aeabi_idivmod>
 800aa42:	1e0b      	subs	r3, r1, #0
 800aa44:	d10b      	bne.n	800aa5e <breakPosixTime+0x146>
 800aa46:	193b      	adds	r3, r7, r4
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	4a42      	ldr	r2, [pc, #264]	@ (800ab54 <breakPosixTime+0x23c>)
 800aa4c:	4694      	mov	ip, r2
 800aa4e:	4463      	add	r3, ip
 800aa50:	22c8      	movs	r2, #200	@ 0xc8
 800aa52:	0051      	lsls	r1, r2, #1
 800aa54:	0018      	movs	r0, r3
 800aa56:	f7f5 fd15 	bl	8000484 <__aeabi_idivmod>
 800aa5a:	1e0b      	subs	r3, r1, #0
 800aa5c:	d102      	bne.n	800aa64 <breakPosixTime+0x14c>
 800aa5e:	23b7      	movs	r3, #183	@ 0xb7
 800aa60:	005b      	lsls	r3, r3, #1
 800aa62:	e001      	b.n	800aa68 <breakPosixTime+0x150>
 800aa64:	236e      	movs	r3, #110	@ 0x6e
 800aa66:	33ff      	adds	r3, #255	@ 0xff
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	1ad3      	subs	r3, r2, r3
 800aa6c:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 800aa6e:	69ba      	ldr	r2, [r7, #24]
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	61bb      	str	r3, [r7, #24]

  days=0;
 800aa76:	2300      	movs	r3, #0
 800aa78:	617b      	str	r3, [r7, #20]
  month=0;
 800aa7a:	211e      	movs	r1, #30
 800aa7c:	187b      	adds	r3, r7, r1
 800aa7e:	2200      	movs	r2, #0
 800aa80:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 800aa82:	231d      	movs	r3, #29
 800aa84:	18fb      	adds	r3, r7, r3
 800aa86:	2200      	movs	r2, #0
 800aa88:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 800aa8a:	187b      	adds	r3, r7, r1
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	701a      	strb	r2, [r3, #0]
 800aa90:	e048      	b.n	800ab24 <breakPosixTime+0x20c>
    if (month==1) { // february
 800aa92:	231e      	movs	r3, #30
 800aa94:	18fb      	adds	r3, r7, r3
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d12a      	bne.n	800aaf2 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 800aa9c:	241f      	movs	r4, #31
 800aa9e:	193b      	adds	r3, r7, r4
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	4a2c      	ldr	r2, [pc, #176]	@ (800ab54 <breakPosixTime+0x23c>)
 800aaa4:	4694      	mov	ip, r2
 800aaa6:	4463      	add	r3, ip
 800aaa8:	001a      	movs	r2, r3
 800aaaa:	2303      	movs	r3, #3
 800aaac:	4013      	ands	r3, r2
 800aaae:	d11b      	bne.n	800aae8 <breakPosixTime+0x1d0>
 800aab0:	193b      	adds	r3, r7, r4
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	4a27      	ldr	r2, [pc, #156]	@ (800ab54 <breakPosixTime+0x23c>)
 800aab6:	4694      	mov	ip, r2
 800aab8:	4463      	add	r3, ip
 800aaba:	2164      	movs	r1, #100	@ 0x64
 800aabc:	0018      	movs	r0, r3
 800aabe:	f7f5 fce1 	bl	8000484 <__aeabi_idivmod>
 800aac2:	1e0b      	subs	r3, r1, #0
 800aac4:	d10b      	bne.n	800aade <breakPosixTime+0x1c6>
 800aac6:	193b      	adds	r3, r7, r4
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	4a22      	ldr	r2, [pc, #136]	@ (800ab54 <breakPosixTime+0x23c>)
 800aacc:	4694      	mov	ip, r2
 800aace:	4463      	add	r3, ip
 800aad0:	22c8      	movs	r2, #200	@ 0xc8
 800aad2:	0051      	lsls	r1, r2, #1
 800aad4:	0018      	movs	r0, r3
 800aad6:	f7f5 fcd5 	bl	8000484 <__aeabi_idivmod>
 800aada:	1e0b      	subs	r3, r1, #0
 800aadc:	d104      	bne.n	800aae8 <breakPosixTime+0x1d0>
        monthLength=29;
 800aade:	231d      	movs	r3, #29
 800aae0:	18fb      	adds	r3, r7, r3
 800aae2:	221d      	movs	r2, #29
 800aae4:	701a      	strb	r2, [r3, #0]
 800aae6:	e00c      	b.n	800ab02 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 800aae8:	231d      	movs	r3, #29
 800aaea:	18fb      	adds	r3, r7, r3
 800aaec:	221c      	movs	r2, #28
 800aaee:	701a      	strb	r2, [r3, #0]
 800aaf0:	e007      	b.n	800ab02 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 800aaf2:	231e      	movs	r3, #30
 800aaf4:	18fb      	adds	r3, r7, r3
 800aaf6:	781a      	ldrb	r2, [r3, #0]
 800aaf8:	231d      	movs	r3, #29
 800aafa:	18fb      	adds	r3, r7, r3
 800aafc:	4916      	ldr	r1, [pc, #88]	@ (800ab58 <breakPosixTime+0x240>)
 800aafe:	5c8a      	ldrb	r2, [r1, r2]
 800ab00:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 800ab02:	211d      	movs	r1, #29
 800ab04:	187b      	adds	r3, r7, r1
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	69ba      	ldr	r2, [r7, #24]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d310      	bcc.n	800ab30 <breakPosixTime+0x218>
      time -= monthLength;
 800ab0e:	187b      	adds	r3, r7, r1
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	69ba      	ldr	r2, [r7, #24]
 800ab14:	1ad3      	subs	r3, r2, r3
 800ab16:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 800ab18:	211e      	movs	r1, #30
 800ab1a:	187b      	adds	r3, r7, r1
 800ab1c:	781a      	ldrb	r2, [r3, #0]
 800ab1e:	187b      	adds	r3, r7, r1
 800ab20:	3201      	adds	r2, #1
 800ab22:	701a      	strb	r2, [r3, #0]
 800ab24:	231e      	movs	r3, #30
 800ab26:	18fb      	adds	r3, r7, r3
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	2b0b      	cmp	r3, #11
 800ab2c:	d9b1      	bls.n	800aa92 <breakPosixTime+0x17a>
 800ab2e:	e000      	b.n	800ab32 <breakPosixTime+0x21a>
    } else {
        break;
 800ab30:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 800ab32:	231e      	movs	r3, #30
 800ab34:	18fb      	adds	r3, r7, r3
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 800ab40:	69bb      	ldr	r3, [r7, #24]
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	3301      	adds	r3, #1
 800ab46:	b2da      	uxtb	r2, r3
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	709a      	strb	r2, [r3, #2]
}
 800ab4c:	46c0      	nop			@ (mov r8, r8)
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	b009      	add	sp, #36	@ 0x24
 800ab52:	bd90      	pop	{r4, r7, pc}
 800ab54:	000007b2 	.word	0x000007b2
 800ab58:	0802e774 	.word	0x0802e774

0800ab5c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ab62:	003b      	movs	r3, r7
 800ab64:	0018      	movs	r0, r3
 800ab66:	2308      	movs	r3, #8
 800ab68:	001a      	movs	r2, r3
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	f01b fdaa 	bl	80266c4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800ab70:	4b30      	ldr	r3, [pc, #192]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800ab72:	4a31      	ldr	r2, [pc, #196]	@ (800ac38 <MX_ADC_Init+0xdc>)
 800ab74:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800ab76:	4b2f      	ldr	r3, [pc, #188]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800ab7c:	4b2d      	ldr	r3, [pc, #180]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800ab7e:	22c0      	movs	r2, #192	@ 0xc0
 800ab80:	0612      	lsls	r2, r2, #24
 800ab82:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800ab84:	4b2b      	ldr	r3, [pc, #172]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800ab8a:	4b2a      	ldr	r3, [pc, #168]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800ab90:	4b28      	ldr	r3, [pc, #160]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800ab92:	2201      	movs	r2, #1
 800ab94:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ab96:	4b27      	ldr	r3, [pc, #156]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800ab98:	2200      	movs	r2, #0
 800ab9a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800ab9c:	4b25      	ldr	r3, [pc, #148]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800ab9e:	2220      	movs	r2, #32
 800aba0:	2100      	movs	r1, #0
 800aba2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800aba4:	4b23      	ldr	r3, [pc, #140]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800aba6:	2221      	movs	r2, #33	@ 0x21
 800aba8:	2101      	movs	r1, #1
 800abaa:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800abac:	4b21      	ldr	r3, [pc, #132]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800abae:	2200      	movs	r2, #0
 800abb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800abb2:	4b20      	ldr	r3, [pc, #128]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800abb4:	22c2      	movs	r2, #194	@ 0xc2
 800abb6:	32ff      	adds	r2, #255	@ 0xff
 800abb8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800abba:	4b1e      	ldr	r3, [pc, #120]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800abbc:	222c      	movs	r2, #44	@ 0x2c
 800abbe:	2100      	movs	r1, #0
 800abc0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800abc2:	4b1c      	ldr	r3, [pc, #112]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800abc4:	2204      	movs	r2, #4
 800abc6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800abc8:	4b1a      	ldr	r3, [pc, #104]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800abca:	2200      	movs	r2, #0
 800abcc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800abce:	4b19      	ldr	r3, [pc, #100]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800abd4:	4b17      	ldr	r3, [pc, #92]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800abd6:	2200      	movs	r2, #0
 800abd8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800abda:	4b16      	ldr	r3, [pc, #88]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800abdc:	2200      	movs	r2, #0
 800abde:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800abe0:	4b14      	ldr	r3, [pc, #80]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800abe2:	0018      	movs	r0, r3
 800abe4:	f00a f816 	bl	8014c14 <HAL_ADC_Init>
 800abe8:	1e03      	subs	r3, r0, #0
 800abea:	d001      	beq.n	800abf0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800abec:	f002 fcea 	bl	800d5c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800abf0:	003b      	movs	r3, r7
 800abf2:	4a12      	ldr	r2, [pc, #72]	@ (800ac3c <MX_ADC_Init+0xe0>)
 800abf4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800abf6:	003b      	movs	r3, r7
 800abf8:	2280      	movs	r2, #128	@ 0x80
 800abfa:	0152      	lsls	r2, r2, #5
 800abfc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800abfe:	003a      	movs	r2, r7
 800ac00:	4b0c      	ldr	r3, [pc, #48]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800ac02:	0011      	movs	r1, r2
 800ac04:	0018      	movs	r0, r3
 800ac06:	f00a fa75 	bl	80150f4 <HAL_ADC_ConfigChannel>
 800ac0a:	1e03      	subs	r3, r0, #0
 800ac0c:	d001      	beq.n	800ac12 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800ac0e:	f002 fcd9 	bl	800d5c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800ac12:	003b      	movs	r3, r7
 800ac14:	4a0a      	ldr	r2, [pc, #40]	@ (800ac40 <MX_ADC_Init+0xe4>)
 800ac16:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800ac18:	003a      	movs	r2, r7
 800ac1a:	4b06      	ldr	r3, [pc, #24]	@ (800ac34 <MX_ADC_Init+0xd8>)
 800ac1c:	0011      	movs	r1, r2
 800ac1e:	0018      	movs	r0, r3
 800ac20:	f00a fa68 	bl	80150f4 <HAL_ADC_ConfigChannel>
 800ac24:	1e03      	subs	r3, r0, #0
 800ac26:	d001      	beq.n	800ac2c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800ac28:	f002 fccc 	bl	800d5c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800ac2c:	46c0      	nop			@ (mov r8, r8)
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	b002      	add	sp, #8
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	20000e18 	.word	0x20000e18
 800ac38:	40012400 	.word	0x40012400
 800ac3c:	38004000 	.word	0x38004000
 800ac40:	3c008000 	.word	0x3c008000

0800ac44 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800ac44:	b590      	push	{r4, r7, lr}
 800ac46:	b089      	sub	sp, #36	@ 0x24
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac4c:	240c      	movs	r4, #12
 800ac4e:	193b      	adds	r3, r7, r4
 800ac50:	0018      	movs	r0, r3
 800ac52:	2314      	movs	r3, #20
 800ac54:	001a      	movs	r2, r3
 800ac56:	2100      	movs	r1, #0
 800ac58:	f01b fd34 	bl	80266c4 <memset>
  if(adcHandle->Instance==ADC1)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a14      	ldr	r2, [pc, #80]	@ (800acb4 <HAL_ADC_MspInit+0x70>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d121      	bne.n	800acaa <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ac66:	4b14      	ldr	r3, [pc, #80]	@ (800acb8 <HAL_ADC_MspInit+0x74>)
 800ac68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac6a:	4b13      	ldr	r3, [pc, #76]	@ (800acb8 <HAL_ADC_MspInit+0x74>)
 800ac6c:	2180      	movs	r1, #128	@ 0x80
 800ac6e:	0089      	lsls	r1, r1, #2
 800ac70:	430a      	orrs	r2, r1
 800ac72:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ac74:	4b10      	ldr	r3, [pc, #64]	@ (800acb8 <HAL_ADC_MspInit+0x74>)
 800ac76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac78:	4b0f      	ldr	r3, [pc, #60]	@ (800acb8 <HAL_ADC_MspInit+0x74>)
 800ac7a:	2104      	movs	r1, #4
 800ac7c:	430a      	orrs	r2, r1
 800ac7e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ac80:	4b0d      	ldr	r3, [pc, #52]	@ (800acb8 <HAL_ADC_MspInit+0x74>)
 800ac82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac84:	2204      	movs	r2, #4
 800ac86:	4013      	ands	r3, r2
 800ac88:	60bb      	str	r3, [r7, #8]
 800ac8a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800ac8c:	193b      	adds	r3, r7, r4
 800ac8e:	2230      	movs	r2, #48	@ 0x30
 800ac90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ac92:	193b      	adds	r3, r7, r4
 800ac94:	2203      	movs	r2, #3
 800ac96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac98:	193b      	adds	r3, r7, r4
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ac9e:	193b      	adds	r3, r7, r4
 800aca0:	4a06      	ldr	r2, [pc, #24]	@ (800acbc <HAL_ADC_MspInit+0x78>)
 800aca2:	0019      	movs	r1, r3
 800aca4:	0010      	movs	r0, r2
 800aca6:	f00b f843 	bl	8015d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800acaa:	46c0      	nop			@ (mov r8, r8)
 800acac:	46bd      	mov	sp, r7
 800acae:	b009      	add	sp, #36	@ 0x24
 800acb0:	bd90      	pop	{r4, r7, pc}
 800acb2:	46c0      	nop			@ (mov r8, r8)
 800acb4:	40012400 	.word	0x40012400
 800acb8:	40021000 	.word	0x40021000
 800acbc:	50000800 	.word	0x50000800

0800acc0 <ReadDirRegister>:

AHT20State AHTState = AHT_STATE_START_MEASUREMENTS; // init is done by probing

static uint8_t CalculateCRC(uint8_t* data, uint8_t length);

static bool ReadDirRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800acc0:	b590      	push	{r4, r7, lr}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6039      	str	r1, [r7, #0]
 800acc8:	0011      	movs	r1, r2
 800acca:	1dfb      	adds	r3, r7, #7
 800accc:	1c02      	adds	r2, r0, #0
 800acce:	701a      	strb	r2, [r3, #0]
 800acd0:	1dbb      	adds	r3, r7, #6
 800acd2:	1c0a      	adds	r2, r1, #0
 800acd4:	701a      	strb	r2, [r3, #0]
  if (ReadDirFunction != NULL) {
 800acd6:	4b0a      	ldr	r3, [pc, #40]	@ (800ad00 <ReadDirRegister+0x40>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00a      	beq.n	800acf4 <ReadDirRegister+0x34>
    return ReadDirFunction(address, buffer, nrBytes);
 800acde:	4b08      	ldr	r3, [pc, #32]	@ (800ad00 <ReadDirRegister+0x40>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	1dba      	adds	r2, r7, #6
 800ace4:	7814      	ldrb	r4, [r2, #0]
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	1dfa      	adds	r2, r7, #7
 800acea:	7810      	ldrb	r0, [r2, #0]
 800acec:	0022      	movs	r2, r4
 800acee:	4798      	blx	r3
 800acf0:	0003      	movs	r3, r0
 800acf2:	e000      	b.n	800acf6 <ReadDirRegister+0x36>
  }
  return false;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	0018      	movs	r0, r3
 800acf8:	46bd      	mov	sp, r7
 800acfa:	b003      	add	sp, #12
 800acfc:	bd90      	pop	{r4, r7, pc}
 800acfe:	46c0      	nop			@ (mov r8, r8)
 800ad00:	20000e84 	.word	0x20000e84

0800ad04 <ReadRegister>:

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ad04:	b590      	push	{r4, r7, lr}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6039      	str	r1, [r7, #0]
 800ad0c:	0011      	movs	r1, r2
 800ad0e:	1dfb      	adds	r3, r7, #7
 800ad10:	1c02      	adds	r2, r0, #0
 800ad12:	701a      	strb	r2, [r3, #0]
 800ad14:	1dbb      	adds	r3, r7, #6
 800ad16:	1c0a      	adds	r2, r1, #0
 800ad18:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800ad1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ad44 <ReadRegister+0x40>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00a      	beq.n	800ad38 <ReadRegister+0x34>
    return ReadFunction(address, buffer, nrBytes);
 800ad22:	4b08      	ldr	r3, [pc, #32]	@ (800ad44 <ReadRegister+0x40>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	1dba      	adds	r2, r7, #6
 800ad28:	7814      	ldrb	r4, [r2, #0]
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	1dfa      	adds	r2, r7, #7
 800ad2e:	7810      	ldrb	r0, [r2, #0]
 800ad30:	0022      	movs	r2, r4
 800ad32:	4798      	blx	r3
 800ad34:	0003      	movs	r3, r0
 800ad36:	e000      	b.n	800ad3a <ReadRegister+0x36>
  }
  return false;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	0018      	movs	r0, r3
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	b003      	add	sp, #12
 800ad40:	bd90      	pop	{r4, r7, pc}
 800ad42:	46c0      	nop			@ (mov r8, r8)
 800ad44:	20000e7c 	.word	0x20000e7c

0800ad48 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800ad48:	b590      	push	{r4, r7, lr}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6039      	str	r1, [r7, #0]
 800ad50:	0011      	movs	r1, r2
 800ad52:	1dfb      	adds	r3, r7, #7
 800ad54:	1c02      	adds	r2, r0, #0
 800ad56:	701a      	strb	r2, [r3, #0]
 800ad58:	1dbb      	adds	r3, r7, #6
 800ad5a:	1c0a      	adds	r2, r1, #0
 800ad5c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800ad5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ad88 <WriteRegister+0x40>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00a      	beq.n	800ad7c <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800ad66:	4b08      	ldr	r3, [pc, #32]	@ (800ad88 <WriteRegister+0x40>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	1dba      	adds	r2, r7, #6
 800ad6c:	7814      	ldrb	r4, [r2, #0]
 800ad6e:	6839      	ldr	r1, [r7, #0]
 800ad70:	1dfa      	adds	r2, r7, #7
 800ad72:	7810      	ldrb	r0, [r2, #0]
 800ad74:	0022      	movs	r2, r4
 800ad76:	4798      	blx	r3
 800ad78:	0003      	movs	r3, r0
 800ad7a:	e000      	b.n	800ad7e <WriteRegister+0x36>
  }
  return false;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	0018      	movs	r0, r3
 800ad80:	46bd      	mov	sp, r7
 800ad82:	b003      	add	sp, #12
 800ad84:	bd90      	pop	{r4, r7, pc}
 800ad86:	46c0      	nop			@ (mov r8, r8)
 800ad88:	20000e80 	.word	0x20000e80

0800ad8c <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	000a      	movs	r2, r1
 800ad96:	1cfb      	adds	r3, r7, #3
 800ad98:	701a      	strb	r2, [r3, #0]
  uint8_t crc = AHT20_CRC_INIT_VALUE;
 800ad9a:	230f      	movs	r3, #15
 800ad9c:	18fb      	adds	r3, r7, r3
 800ad9e:	22ff      	movs	r2, #255	@ 0xff
 800ada0:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800ada2:	230e      	movs	r3, #14
 800ada4:	18fb      	adds	r3, r7, r3
 800ada6:	2200      	movs	r2, #0
 800ada8:	701a      	strb	r2, [r3, #0]
 800adaa:	e038      	b.n	800ae1e <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800adac:	230e      	movs	r3, #14
 800adae:	18fb      	adds	r3, r7, r3
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	18d3      	adds	r3, r2, r3
 800adb6:	7819      	ldrb	r1, [r3, #0]
 800adb8:	220f      	movs	r2, #15
 800adba:	18bb      	adds	r3, r7, r2
 800adbc:	18ba      	adds	r2, r7, r2
 800adbe:	7812      	ldrb	r2, [r2, #0]
 800adc0:	404a      	eors	r2, r1
 800adc2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800adc4:	230d      	movs	r3, #13
 800adc6:	18fb      	adds	r3, r7, r3
 800adc8:	2200      	movs	r2, #0
 800adca:	701a      	strb	r2, [r3, #0]
 800adcc:	e01c      	b.n	800ae08 <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & AHT20_CRC_MSB_MASK) {
 800adce:	210f      	movs	r1, #15
 800add0:	187b      	adds	r3, r7, r1
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	b25b      	sxtb	r3, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	da0a      	bge.n	800adf0 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ AHT_CRC_POLYNOMIAL;
 800adda:	187b      	adds	r3, r7, r1
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	b25b      	sxtb	r3, r3
 800ade0:	18db      	adds	r3, r3, r3
 800ade2:	b25b      	sxtb	r3, r3
 800ade4:	2231      	movs	r2, #49	@ 0x31
 800ade6:	4053      	eors	r3, r2
 800ade8:	b25a      	sxtb	r2, r3
 800adea:	187b      	adds	r3, r7, r1
 800adec:	701a      	strb	r2, [r3, #0]
 800adee:	e005      	b.n	800adfc <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 800adf0:	230f      	movs	r3, #15
 800adf2:	18fa      	adds	r2, r7, r3
 800adf4:	18fb      	adds	r3, r7, r3
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	18db      	adds	r3, r3, r3
 800adfa:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800adfc:	210d      	movs	r1, #13
 800adfe:	187b      	adds	r3, r7, r1
 800ae00:	781a      	ldrb	r2, [r3, #0]
 800ae02:	187b      	adds	r3, r7, r1
 800ae04:	3201      	adds	r2, #1
 800ae06:	701a      	strb	r2, [r3, #0]
 800ae08:	230d      	movs	r3, #13
 800ae0a:	18fb      	adds	r3, r7, r3
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	2b07      	cmp	r3, #7
 800ae10:	d9dd      	bls.n	800adce <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800ae12:	210e      	movs	r1, #14
 800ae14:	187b      	adds	r3, r7, r1
 800ae16:	781a      	ldrb	r2, [r3, #0]
 800ae18:	187b      	adds	r3, r7, r1
 800ae1a:	3201      	adds	r2, #1
 800ae1c:	701a      	strb	r2, [r3, #0]
 800ae1e:	230e      	movs	r3, #14
 800ae20:	18fa      	adds	r2, r7, r3
 800ae22:	1cfb      	adds	r3, r7, #3
 800ae24:	7812      	ldrb	r2, [r2, #0]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d3bf      	bcc.n	800adac <CalculateCRC+0x20>
      }
    }
  }
//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800ae2c:	230f      	movs	r3, #15
 800ae2e:	18fb      	adds	r3, r7, r3
 800ae30:	781b      	ldrb	r3, [r3, #0]
}
 800ae32:	0018      	movs	r0, r3
 800ae34:	46bd      	mov	sp, r7
 800ae36:	b004      	add	sp, #16
 800ae38:	bd80      	pop	{r7, pc}
	...

0800ae3c <setAHT20TimeStamp>:

void setAHT20TimeStamp(uint32_t ticks) {
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  AHT20TimeStamp = HAL_GetTick() + ticks;
 800ae44:	f009 fe7e 	bl	8014b44 <HAL_GetTick>
 800ae48:	0002      	movs	r2, r0
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	18d2      	adds	r2, r2, r3
 800ae4e:	4b03      	ldr	r3, [pc, #12]	@ (800ae5c <setAHT20TimeStamp+0x20>)
 800ae50:	601a      	str	r2, [r3, #0]
}
 800ae52:	46c0      	nop			@ (mov r8, r8)
 800ae54:	46bd      	mov	sp, r7
 800ae56:	b002      	add	sp, #8
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	46c0      	nop			@ (mov r8, r8)
 800ae5c:	20000e74 	.word	0x20000e74

0800ae60 <AHT_Init>:

void AHT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction, I2CReadDir readDirFunction) {
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
  ReadDirFunction = readDirFunction;
 800ae6c:	4b06      	ldr	r3, [pc, #24]	@ (800ae88 <AHT_Init+0x28>)
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	601a      	str	r2, [r3, #0]
  ReadFunction = readFunction;
 800ae72:	4b06      	ldr	r3, [pc, #24]	@ (800ae8c <AHT_Init+0x2c>)
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800ae78:	4b05      	ldr	r3, [pc, #20]	@ (800ae90 <AHT_Init+0x30>)
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	601a      	str	r2, [r3, #0]
}
 800ae7e:	46c0      	nop			@ (mov r8, r8)
 800ae80:	46bd      	mov	sp, r7
 800ae82:	b004      	add	sp, #16
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	46c0      	nop			@ (mov r8, r8)
 800ae88:	20000e84 	.word	0x20000e84
 800ae8c:	20000e7c 	.word	0x20000e7c
 800ae90:	20000e80 	.word	0x20000e80

0800ae94 <AHT20_register_reset>:

void AHT20_register_reset(uint8_t addr){
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af02      	add	r7, sp, #8
 800ae9a:	0002      	movs	r2, r0
 800ae9c:	1dfb      	adds	r3, r7, #7
 800ae9e:	701a      	strb	r2, [r3, #0]
  AHT20_INIT_1[0] = addr;
 800aea0:	4b18      	ldr	r3, [pc, #96]	@ (800af04 <AHT20_register_reset+0x70>)
 800aea2:	1dfa      	adds	r2, r7, #7
 800aea4:	7812      	ldrb	r2, [r2, #0]
 800aea6:	701a      	strb	r2, [r3, #0]
  WriteRegister(AHT20_ADDRESS, AHT20_INIT_1, 3);
 800aea8:	4b16      	ldr	r3, [pc, #88]	@ (800af04 <AHT20_register_reset+0x70>)
 800aeaa:	2203      	movs	r2, #3
 800aeac:	0019      	movs	r1, r3
 800aeae:	2038      	movs	r0, #56	@ 0x38
 800aeb0:	f7ff ff4a 	bl	800ad48 <WriteRegister>
  HAL_Delay(15);
 800aeb4:	200f      	movs	r0, #15
 800aeb6:	f009 fe4f 	bl	8014b58 <HAL_Delay>
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800aeba:	4b13      	ldr	r3, [pc, #76]	@ (800af08 <AHT20_register_reset+0x74>)
 800aebc:	2203      	movs	r2, #3
 800aebe:	0019      	movs	r1, r3
 800aec0:	2038      	movs	r0, #56	@ 0x38
 800aec2:	f7ff ff1f 	bl	800ad04 <ReadRegister>
  HAL_Delay(15);
 800aec6:	200f      	movs	r0, #15
 800aec8:	f009 fe46 	bl	8014b58 <HAL_Delay>
  airtemphumraw[0] = 0xB0;
 800aecc:	4b0e      	ldr	r3, [pc, #56]	@ (800af08 <AHT20_register_reset+0x74>)
 800aece:	22b0      	movs	r2, #176	@ 0xb0
 800aed0:	701a      	strb	r2, [r3, #0]
  Debug("AHT20 Magic from AOSONG, Readed values from AHTxx device 2nd=0x%02X, 3rd=0x%02X", airtemphumraw[2], airtemphumraw[3]);
 800aed2:	4b0d      	ldr	r3, [pc, #52]	@ (800af08 <AHT20_register_reset+0x74>)
 800aed4:	789b      	ldrb	r3, [r3, #2]
 800aed6:	0018      	movs	r0, r3
 800aed8:	4b0b      	ldr	r3, [pc, #44]	@ (800af08 <AHT20_register_reset+0x74>)
 800aeda:	78db      	ldrb	r3, [r3, #3]
 800aedc:	4a0b      	ldr	r2, [pc, #44]	@ (800af0c <AHT20_register_reset+0x78>)
 800aede:	490c      	ldr	r1, [pc, #48]	@ (800af10 <AHT20_register_reset+0x7c>)
 800aee0:	9300      	str	r3, [sp, #0]
 800aee2:	0003      	movs	r3, r0
 800aee4:	2003      	movs	r0, #3
 800aee6:	f009 f8b5 	bl	8014054 <CreateLine>
  WriteRegister(AHT20_ADDRESS, airtemphumraw, 3);
 800aeea:	4b07      	ldr	r3, [pc, #28]	@ (800af08 <AHT20_register_reset+0x74>)
 800aeec:	2203      	movs	r2, #3
 800aeee:	0019      	movs	r1, r3
 800aef0:	2038      	movs	r0, #56	@ 0x38
 800aef2:	f7ff ff29 	bl	800ad48 <WriteRegister>
  HAL_Delay(15);
 800aef6:	200f      	movs	r0, #15
 800aef8:	f009 fe2e 	bl	8014b58 <HAL_Delay>
}
 800aefc:	46c0      	nop			@ (mov r8, r8)
 800aefe:	46bd      	mov	sp, r7
 800af00:	b002      	add	sp, #8
 800af02:	bd80      	pop	{r7, pc}
 800af04:	2000009c 	.word	0x2000009c
 800af08:	20000e88 	.word	0x20000e88
 800af0c:	0802c5a8 	.word	0x0802c5a8
 800af10:	0802c5f8 	.word	0x0802c5f8

0800af14 <AHT20_Start_Init>:

void AHT20_Start_Init(void)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	af00      	add	r7, sp, #0
  AHT20_register_reset(0x1b);
 800af18:	201b      	movs	r0, #27
 800af1a:	f7ff ffbb 	bl	800ae94 <AHT20_register_reset>
  AHT20_register_reset(0x1c);
 800af1e:	201c      	movs	r0, #28
 800af20:	f7ff ffb8 	bl	800ae94 <AHT20_register_reset>
  AHT20_register_reset(0x1e);
 800af24:	201e      	movs	r0, #30
 800af26:	f7ff ffb5 	bl	800ae94 <AHT20_register_reset>
}
 800af2a:	46c0      	nop			@ (mov r8, r8)
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <AHT20_read_status>:

uint8_t AHT20_read_status() {
 800af30:	b580      	push	{r7, lr}
 800af32:	af00      	add	r7, sp, #0
  WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800af34:	4b0c      	ldr	r3, [pc, #48]	@ (800af68 <AHT20_read_status+0x38>)
 800af36:	2201      	movs	r2, #1
 800af38:	0019      	movs	r1, r3
 800af3a:	2038      	movs	r0, #56	@ 0x38
 800af3c:	f7ff ff04 	bl	800ad48 <WriteRegister>
  HAL_Delay(10);
 800af40:	200a      	movs	r0, #10
 800af42:	f009 fe09 	bl	8014b58 <HAL_Delay>
  airtemphumraw[0] = 0;
 800af46:	4b09      	ldr	r3, [pc, #36]	@ (800af6c <AHT20_read_status+0x3c>)
 800af48:	2200      	movs	r2, #0
 800af4a:	701a      	strb	r2, [r3, #0]
  ReadRegister(AHT20_ADDRESS, airtemphumraw, 1);
 800af4c:	4b07      	ldr	r3, [pc, #28]	@ (800af6c <AHT20_read_status+0x3c>)
 800af4e:	2201      	movs	r2, #1
 800af50:	0019      	movs	r1, r3
 800af52:	2038      	movs	r0, #56	@ 0x38
 800af54:	f7ff fed6 	bl	800ad04 <ReadRegister>
  HAL_Delay(10);
 800af58:	200a      	movs	r0, #10
 800af5a:	f009 fdfd 	bl	8014b58 <HAL_Delay>
  return airtemphumraw[0];
 800af5e:	4b03      	ldr	r3, [pc, #12]	@ (800af6c <AHT20_read_status+0x3c>)
 800af60:	781b      	ldrb	r3, [r3, #0]
}
 800af62:	0018      	movs	r0, r3
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	20000098 	.word	0x20000098
 800af6c:	20000e88 	.word	0x20000e88

0800af70 <AHT20_init>:

bool AHT20_init(void) {
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
  uint32_t ticks = HAL_GetTick();
 800af76:	f009 fde5 	bl	8014b44 <HAL_GetTick>
 800af7a:	0003      	movs	r3, r0
 800af7c:	607b      	str	r3, [r7, #4]
  if (ticks < 120) {
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2b77      	cmp	r3, #119	@ 0x77
 800af82:	d805      	bhi.n	800af90 <AHT20_init+0x20>
    HAL_Delay(120-ticks); // wait for minimum startup time
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2278      	movs	r2, #120	@ 0x78
 800af88:	1ad3      	subs	r3, r2, r3
 800af8a:	0018      	movs	r0, r3
 800af8c:	f009 fde4 	bl	8014b58 <HAL_Delay>
  }
  AHT20_read_status();
 800af90:	f7ff ffce 	bl	800af30 <AHT20_read_status>
  Debug("AHT20 Value of statusregister: 0x%02X", airtemphumraw[0]);
 800af94:	4b0e      	ldr	r3, [pc, #56]	@ (800afd0 <AHT20_init+0x60>)
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	4a0e      	ldr	r2, [pc, #56]	@ (800afd4 <AHT20_init+0x64>)
 800af9a:	490f      	ldr	r1, [pc, #60]	@ (800afd8 <AHT20_init+0x68>)
 800af9c:	2003      	movs	r0, #3
 800af9e:	f009 f859 	bl	8014054 <CreateLine>
  if ((airtemphumraw[0] & 0x18) != 0x18) {
 800afa2:	4b0b      	ldr	r3, [pc, #44]	@ (800afd0 <AHT20_init+0x60>)
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	001a      	movs	r2, r3
 800afa8:	2318      	movs	r3, #24
 800afaa:	4013      	ands	r3, r2
 800afac:	2b18      	cmp	r3, #24
 800afae:	d00a      	beq.n	800afc6 <AHT20_init+0x56>
    WriteRegister(AHT20_ADDRESS, AHT20_start, 3);
 800afb0:	4b0a      	ldr	r3, [pc, #40]	@ (800afdc <AHT20_init+0x6c>)
 800afb2:	2203      	movs	r2, #3
 800afb4:	0019      	movs	r1, r3
 800afb6:	2038      	movs	r0, #56	@ 0x38
 800afb8:	f7ff fec6 	bl	800ad48 <WriteRegister>
    HAL_Delay(10);
 800afbc:	200a      	movs	r0, #10
 800afbe:	f009 fdcb 	bl	8014b58 <HAL_Delay>
    AHT20_Start_Init();
 800afc2:	f7ff ffa7 	bl	800af14 <AHT20_Start_Init>
  }
  return true;
 800afc6:	2301      	movs	r3, #1
}
 800afc8:	0018      	movs	r0, r3
 800afca:	46bd      	mov	sp, r7
 800afcc:	b002      	add	sp, #8
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	20000e88 	.word	0x20000e88
 800afd4:	0802c5fc 	.word	0x0802c5fc
 800afd8:	0802c5f8 	.word	0x0802c5f8
 800afdc:	2000008c 	.word	0x2000008c

0800afe0 <AHT20_calibrate>:


bool AHT20_calibrate() {
 800afe0:	b590      	push	{r4, r7, lr}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_status, 1);
 800afe6:	1dfc      	adds	r4, r7, #7
 800afe8:	4b10      	ldr	r3, [pc, #64]	@ (800b02c <AHT20_calibrate+0x4c>)
 800afea:	2201      	movs	r2, #1
 800afec:	0019      	movs	r1, r3
 800afee:	2038      	movs	r0, #56	@ 0x38
 800aff0:	f7ff feaa 	bl	800ad48 <WriteRegister>
 800aff4:	0003      	movs	r3, r0
 800aff6:	7023      	strb	r3, [r4, #0]
  if (!response) {
 800aff8:	1dfb      	adds	r3, r7, #7
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	2201      	movs	r2, #1
 800affe:	4053      	eors	r3, r2
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b00      	cmp	r3, #0
 800b004:	d005      	beq.n	800b012 <AHT20_calibrate+0x32>
    Error("AHT20 Write status request error during calibaration");
 800b006:	4a0a      	ldr	r2, [pc, #40]	@ (800b030 <AHT20_calibrate+0x50>)
 800b008:	4b0a      	ldr	r3, [pc, #40]	@ (800b034 <AHT20_calibrate+0x54>)
 800b00a:	0019      	movs	r1, r3
 800b00c:	2001      	movs	r0, #1
 800b00e:	f009 f821 	bl	8014054 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b012:	f009 fd97 	bl	8014b44 <HAL_GetTick>
 800b016:	0003      	movs	r3, r0
 800b018:	3332      	adds	r3, #50	@ 0x32
 800b01a:	001a      	movs	r2, r3
 800b01c:	4b06      	ldr	r3, [pc, #24]	@ (800b038 <AHT20_calibrate+0x58>)
 800b01e:	601a      	str	r2, [r3, #0]
  return response;
 800b020:	1dfb      	adds	r3, r7, #7
 800b022:	781b      	ldrb	r3, [r3, #0]
    airtemphumraw[0] = 0;
  }
  Debug("status of AHT20 [0]= 0x%02x", airtemphumraw[0]);
  AHT20TimeStamp = HAL_GetTick() + 200;
  return (airtemphumraw[0]);
}
 800b024:	0018      	movs	r0, r3
 800b026:	46bd      	mov	sp, r7
 800b028:	b003      	add	sp, #12
 800b02a:	bd90      	pop	{r4, r7, pc}
 800b02c:	20000098 	.word	0x20000098
 800b030:	0802c624 	.word	0x0802c624
 800b034:	0802c65c 	.word	0x0802c65c
 800b038:	20000e74 	.word	0x20000e74

0800b03c <AHT20_DeviceConnected>:

 bool AHT20_DeviceConnected() {
 800b03c:	b580      	push	{r7, lr}
 800b03e:	af00      	add	r7, sp, #0
   Debug("Init & probing AHT20");
 800b040:	4a0a      	ldr	r2, [pc, #40]	@ (800b06c <AHT20_DeviceConnected+0x30>)
 800b042:	4b0b      	ldr	r3, [pc, #44]	@ (800b070 <AHT20_DeviceConnected+0x34>)
 800b044:	0019      	movs	r1, r3
 800b046:	2003      	movs	r0, #3
 800b048:	f009 f804 	bl	8014054 <CreateLine>
   AHT20_init();
 800b04c:	f7ff ff90 	bl	800af70 <AHT20_init>
   HAL_Delay(10);
 800b050:	200a      	movs	r0, #10
 800b052:	f009 fd81 	bl	8014b58 <HAL_Delay>
   AHT20_calibrate();
 800b056:	f7ff ffc3 	bl	800afe0 <AHT20_calibrate>
   return (bool)AHT20_read_status();
 800b05a:	f7ff ff69 	bl	800af30 <AHT20_read_status>
 800b05e:	0003      	movs	r3, r0
 800b060:	1e5a      	subs	r2, r3, #1
 800b062:	4193      	sbcs	r3, r2
 800b064:	b2db      	uxtb	r3, r3
 }
 800b066:	0018      	movs	r0, r3
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}
 800b06c:	0802c660 	.word	0x0802c660
 800b070:	0802c5f8 	.word	0x0802c5f8

0800b074 <AHT20_StartMeasurement>:

bool AHT20_StartMeasurement(void) {
 800b074:	b590      	push	{r4, r7, lr}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
  bool response = WriteRegister(AHT20_ADDRESS, AHT20_measure, 3);
 800b07a:	1dfc      	adds	r4, r7, #7
 800b07c:	4b10      	ldr	r3, [pc, #64]	@ (800b0c0 <AHT20_StartMeasurement+0x4c>)
 800b07e:	2203      	movs	r2, #3
 800b080:	0019      	movs	r1, r3
 800b082:	2038      	movs	r0, #56	@ 0x38
 800b084:	f7ff fe60 	bl	800ad48 <WriteRegister>
 800b088:	0003      	movs	r3, r0
 800b08a:	7023      	strb	r3, [r4, #0]
//  Debug("AHT20_StartMeasurement executed");
  if (!response) {
 800b08c:	1dfb      	adds	r3, r7, #7
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	2201      	movs	r2, #1
 800b092:	4053      	eors	r3, r2
 800b094:	b2db      	uxtb	r3, r3
 800b096:	2b00      	cmp	r3, #0
 800b098:	d005      	beq.n	800b0a6 <AHT20_StartMeasurement+0x32>
    Error("AHT20 Write error during start measurement");
 800b09a:	4a0a      	ldr	r2, [pc, #40]	@ (800b0c4 <AHT20_StartMeasurement+0x50>)
 800b09c:	4b0a      	ldr	r3, [pc, #40]	@ (800b0c8 <AHT20_StartMeasurement+0x54>)
 800b09e:	0019      	movs	r1, r3
 800b0a0:	2001      	movs	r0, #1
 800b0a2:	f008 ffd7 	bl	8014054 <CreateLine>
  }
  AHT20TimeStamp = HAL_GetTick() + 250;
 800b0a6:	f009 fd4d 	bl	8014b44 <HAL_GetTick>
 800b0aa:	0003      	movs	r3, r0
 800b0ac:	33fa      	adds	r3, #250	@ 0xfa
 800b0ae:	001a      	movs	r2, r3
 800b0b0:	4b06      	ldr	r3, [pc, #24]	@ (800b0cc <AHT20_StartMeasurement+0x58>)
 800b0b2:	601a      	str	r2, [r3, #0]
  return response;
 800b0b4:	1dfb      	adds	r3, r7, #7
 800b0b6:	781b      	ldrb	r3, [r3, #0]
}
 800b0b8:	0018      	movs	r0, r3
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	b003      	add	sp, #12
 800b0be:	bd90      	pop	{r4, r7, pc}
 800b0c0:	20000094 	.word	0x20000094
 800b0c4:	0802c678 	.word	0x0802c678
 800b0c8:	0802c65c 	.word	0x0802c65c
 800b0cc:	20000e74 	.word	0x20000e74

0800b0d0 <AHT20_GetMeasurementValues>:

bool AHT20_GetMeasurementValues() {
 800b0d0:	b590      	push	{r4, r7, lr}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
//  Debug("AHT20_GetMeasurementValues executed");
  AHT20TimeStamp = HAL_GetTick() + 1000;
 800b0d6:	f009 fd35 	bl	8014b44 <HAL_GetTick>
 800b0da:	0003      	movs	r3, r0
 800b0dc:	22fa      	movs	r2, #250	@ 0xfa
 800b0de:	0092      	lsls	r2, r2, #2
 800b0e0:	189a      	adds	r2, r3, r2
 800b0e2:	4b2c      	ldr	r3, [pc, #176]	@ (800b194 <AHT20_GetMeasurementValues+0xc4>)
 800b0e4:	601a      	str	r2, [r3, #0]
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b0e6:	e01f      	b.n	800b128 <AHT20_GetMeasurementValues+0x58>
    Info("AHT20 Device busy, waiting for results");
 800b0e8:	4a2b      	ldr	r2, [pc, #172]	@ (800b198 <AHT20_GetMeasurementValues+0xc8>)
 800b0ea:	4b2c      	ldr	r3, [pc, #176]	@ (800b19c <AHT20_GetMeasurementValues+0xcc>)
 800b0ec:	0019      	movs	r1, r3
 800b0ee:	2002      	movs	r0, #2
 800b0f0:	f008 ffb0 	bl	8014054 <CreateLine>
    if (TimestampIsReached(AHT20TimeStamp)) {
 800b0f4:	4b27      	ldr	r3, [pc, #156]	@ (800b194 <AHT20_GetMeasurementValues+0xc4>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	0018      	movs	r0, r3
 800b0fa:	f008 ff55 	bl	8013fa8 <TimestampIsReached>
 800b0fe:	1e03      	subs	r3, r0, #0
 800b100:	d00f      	beq.n	800b122 <AHT20_GetMeasurementValues+0x52>
      Error("AHT2x timeout for getting values");
 800b102:	4a27      	ldr	r2, [pc, #156]	@ (800b1a0 <AHT20_GetMeasurementValues+0xd0>)
 800b104:	4b27      	ldr	r3, [pc, #156]	@ (800b1a4 <AHT20_GetMeasurementValues+0xd4>)
 800b106:	0019      	movs	r1, r3
 800b108:	2001      	movs	r0, #1
 800b10a:	f008 ffa3 	bl	8014054 <CreateLine>
      AHT20TimeStamp = HAL_GetTick() + 2000;
 800b10e:	f009 fd19 	bl	8014b44 <HAL_GetTick>
 800b112:	0003      	movs	r3, r0
 800b114:	22fa      	movs	r2, #250	@ 0xfa
 800b116:	00d2      	lsls	r2, r2, #3
 800b118:	189a      	adds	r2, r3, r2
 800b11a:	4b1e      	ldr	r3, [pc, #120]	@ (800b194 <AHT20_GetMeasurementValues+0xc4>)
 800b11c:	601a      	str	r2, [r3, #0]
      return false;
 800b11e:	2300      	movs	r3, #0
 800b120:	e034      	b.n	800b18c <AHT20_GetMeasurementValues+0xbc>
    }
    HAL_Delay(10);
 800b122:	200a      	movs	r0, #10
 800b124:	f009 fd18 	bl	8014b58 <HAL_Delay>
  while ((AHT20_read_status() & 0x80) == 0x80) {
 800b128:	f7ff ff02 	bl	800af30 <AHT20_read_status>
 800b12c:	0003      	movs	r3, r0
 800b12e:	001a      	movs	r2, r3
 800b130:	2380      	movs	r3, #128	@ 0x80
 800b132:	4013      	ands	r3, r2
 800b134:	2b80      	cmp	r3, #128	@ 0x80
 800b136:	d0d7      	beq.n	800b0e8 <AHT20_GetMeasurementValues+0x18>
  }
  HAL_Delay(10);
 800b138:	200a      	movs	r0, #10
 800b13a:	f009 fd0d 	bl	8014b58 <HAL_Delay>
  for (uint8_t g = 0; g < 7; g++){
 800b13e:	1dfb      	adds	r3, r7, #7
 800b140:	2200      	movs	r2, #0
 800b142:	701a      	strb	r2, [r3, #0]
 800b144:	e009      	b.n	800b15a <AHT20_GetMeasurementValues+0x8a>
    airtemphumraw[g] = 0;
 800b146:	1dfb      	adds	r3, r7, #7
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	4a17      	ldr	r2, [pc, #92]	@ (800b1a8 <AHT20_GetMeasurementValues+0xd8>)
 800b14c:	2100      	movs	r1, #0
 800b14e:	54d1      	strb	r1, [r2, r3]
  for (uint8_t g = 0; g < 7; g++){
 800b150:	1dfb      	adds	r3, r7, #7
 800b152:	781a      	ldrb	r2, [r3, #0]
 800b154:	1dfb      	adds	r3, r7, #7
 800b156:	3201      	adds	r2, #1
 800b158:	701a      	strb	r2, [r3, #0]
 800b15a:	1dfb      	adds	r3, r7, #7
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	2b06      	cmp	r3, #6
 800b160:	d9f1      	bls.n	800b146 <AHT20_GetMeasurementValues+0x76>
  }
  bool response = ReadDirRegister(AHT20_ADDRESS, airtemphumraw, 7);
 800b162:	1dbc      	adds	r4, r7, #6
 800b164:	4b10      	ldr	r3, [pc, #64]	@ (800b1a8 <AHT20_GetMeasurementValues+0xd8>)
 800b166:	2207      	movs	r2, #7
 800b168:	0019      	movs	r1, r3
 800b16a:	2038      	movs	r0, #56	@ 0x38
 800b16c:	f7ff fda8 	bl	800acc0 <ReadDirRegister>
 800b170:	0003      	movs	r3, r0
 800b172:	7023      	strb	r3, [r4, #0]
  HAL_Delay(10);
 800b174:	200a      	movs	r0, #10
 800b176:	f009 fcef 	bl	8014b58 <HAL_Delay>
//  Debug("response of AHT20 [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
//      airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
  AHT20TimeStamp = HAL_GetTick() + 100;
 800b17a:	f009 fce3 	bl	8014b44 <HAL_GetTick>
 800b17e:	0003      	movs	r3, r0
 800b180:	3364      	adds	r3, #100	@ 0x64
 800b182:	001a      	movs	r2, r3
 800b184:	4b03      	ldr	r3, [pc, #12]	@ (800b194 <AHT20_GetMeasurementValues+0xc4>)
 800b186:	601a      	str	r2, [r3, #0]
  return response;
 800b188:	1dbb      	adds	r3, r7, #6
 800b18a:	781b      	ldrb	r3, [r3, #0]
}
 800b18c:	0018      	movs	r0, r3
 800b18e:	46bd      	mov	sp, r7
 800b190:	b003      	add	sp, #12
 800b192:	bd90      	pop	{r4, r7, pc}
 800b194:	20000e74 	.word	0x20000e74
 800b198:	0802c6a4 	.word	0x0802c6a4
 800b19c:	0802c6cc 	.word	0x0802c6cc
 800b1a0:	0802c6d0 	.word	0x0802c6d0
 800b1a4:	0802c65c 	.word	0x0802c65c
 800b1a8:	20000e88 	.word	0x20000e88

0800b1ac <AHT20_Calculate>:


bool AHT20_Calculate(float *airtemp, float *airhum) {
 800b1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ae:	46c6      	mov	lr, r8
 800b1b0:	b500      	push	{lr}
 800b1b2:	b08a      	sub	sp, #40	@ 0x28
 800b1b4:	af06      	add	r7, sp, #24
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  uint32_t temperature;
  uint32_t humidity;
//  Debug("AHT20 entering AHT20_Calculate");
  if ((airtemphumraw[6] != CalculateCRC(airtemphumraw, 6)) && (airtemphumraw[6] != 0xFF)) {
 800b1ba:	4b5a      	ldr	r3, [pc, #360]	@ (800b324 <AHT20_Calculate+0x178>)
 800b1bc:	799c      	ldrb	r4, [r3, #6]
 800b1be:	4b59      	ldr	r3, [pc, #356]	@ (800b324 <AHT20_Calculate+0x178>)
 800b1c0:	2106      	movs	r1, #6
 800b1c2:	0018      	movs	r0, r3
 800b1c4:	f7ff fde2 	bl	800ad8c <CalculateCRC>
 800b1c8:	0003      	movs	r3, r0
 800b1ca:	429c      	cmp	r4, r3
 800b1cc:	d044      	beq.n	800b258 <AHT20_Calculate+0xac>
 800b1ce:	4b55      	ldr	r3, [pc, #340]	@ (800b324 <AHT20_Calculate+0x178>)
 800b1d0:	799b      	ldrb	r3, [r3, #6]
 800b1d2:	2bff      	cmp	r3, #255	@ 0xff
 800b1d4:	d040      	beq.n	800b258 <AHT20_Calculate+0xac>
    Debug("AHT20 Packet when calculated after CRC [0]= 0x%02x [1]=0x%02x  [2]=0x%02x  [3]=0x%02x  [4]=0x%02x  [5]=0x%02x, CRC-8[6]=0x%02x",
 800b1d6:	4b53      	ldr	r3, [pc, #332]	@ (800b324 <AHT20_Calculate+0x178>)
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	4698      	mov	r8, r3
 800b1dc:	4b51      	ldr	r3, [pc, #324]	@ (800b324 <AHT20_Calculate+0x178>)
 800b1de:	785b      	ldrb	r3, [r3, #1]
 800b1e0:	0018      	movs	r0, r3
 800b1e2:	4b50      	ldr	r3, [pc, #320]	@ (800b324 <AHT20_Calculate+0x178>)
 800b1e4:	789b      	ldrb	r3, [r3, #2]
 800b1e6:	001c      	movs	r4, r3
 800b1e8:	4b4e      	ldr	r3, [pc, #312]	@ (800b324 <AHT20_Calculate+0x178>)
 800b1ea:	78db      	ldrb	r3, [r3, #3]
 800b1ec:	001d      	movs	r5, r3
 800b1ee:	4b4d      	ldr	r3, [pc, #308]	@ (800b324 <AHT20_Calculate+0x178>)
 800b1f0:	791b      	ldrb	r3, [r3, #4]
 800b1f2:	001e      	movs	r6, r3
 800b1f4:	4b4b      	ldr	r3, [pc, #300]	@ (800b324 <AHT20_Calculate+0x178>)
 800b1f6:	795b      	ldrb	r3, [r3, #5]
 800b1f8:	469c      	mov	ip, r3
 800b1fa:	4b4a      	ldr	r3, [pc, #296]	@ (800b324 <AHT20_Calculate+0x178>)
 800b1fc:	799b      	ldrb	r3, [r3, #6]
 800b1fe:	4a4a      	ldr	r2, [pc, #296]	@ (800b328 <AHT20_Calculate+0x17c>)
 800b200:	494a      	ldr	r1, [pc, #296]	@ (800b32c <AHT20_Calculate+0x180>)
 800b202:	9305      	str	r3, [sp, #20]
 800b204:	4663      	mov	r3, ip
 800b206:	9304      	str	r3, [sp, #16]
 800b208:	9603      	str	r6, [sp, #12]
 800b20a:	9502      	str	r5, [sp, #8]
 800b20c:	9401      	str	r4, [sp, #4]
 800b20e:	9000      	str	r0, [sp, #0]
 800b210:	4643      	mov	r3, r8
 800b212:	2003      	movs	r0, #3
 800b214:	f008 ff1e 	bl	8014054 <CreateLine>
        airtemphumraw[0], airtemphumraw[1], airtemphumraw[2], airtemphumraw[3], airtemphumraw[4], airtemphumraw[5], airtemphumraw[6]);
    Error("CRC8 = 0x%02X, calculated CRC8 = 0x%02X", airtemphumraw[6], CalculateCRC(airtemphumraw, 6));
 800b218:	4b42      	ldr	r3, [pc, #264]	@ (800b324 <AHT20_Calculate+0x178>)
 800b21a:	799b      	ldrb	r3, [r3, #6]
 800b21c:	001c      	movs	r4, r3
 800b21e:	4b41      	ldr	r3, [pc, #260]	@ (800b324 <AHT20_Calculate+0x178>)
 800b220:	2106      	movs	r1, #6
 800b222:	0018      	movs	r0, r3
 800b224:	f7ff fdb2 	bl	800ad8c <CalculateCRC>
 800b228:	0003      	movs	r3, r0
 800b22a:	4a41      	ldr	r2, [pc, #260]	@ (800b330 <AHT20_Calculate+0x184>)
 800b22c:	4941      	ldr	r1, [pc, #260]	@ (800b334 <AHT20_Calculate+0x188>)
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	0023      	movs	r3, r4
 800b232:	2001      	movs	r0, #1
 800b234:	f008 ff0e 	bl	8014054 <CreateLine>
    *airtemp = 0.0;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	601a      	str	r2, [r3, #0]
    *airhum = 0.0;
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	2200      	movs	r2, #0
 800b242:	601a      	str	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 2000;
 800b244:	f009 fc7e 	bl	8014b44 <HAL_GetTick>
 800b248:	0003      	movs	r3, r0
 800b24a:	22fa      	movs	r2, #250	@ 0xfa
 800b24c:	00d2      	lsls	r2, r2, #3
 800b24e:	189a      	adds	r2, r3, r2
 800b250:	4b39      	ldr	r3, [pc, #228]	@ (800b338 <AHT20_Calculate+0x18c>)
 800b252:	601a      	str	r2, [r3, #0]
    return false;
 800b254:	2300      	movs	r3, #0
 800b256:	e05f      	b.n	800b318 <AHT20_Calculate+0x16c>
  }
  AHTerrors = 0; // reset error counter
 800b258:	4b38      	ldr	r3, [pc, #224]	@ (800b33c <AHT20_Calculate+0x190>)
 800b25a:	2200      	movs	r2, #0
 800b25c:	701a      	strb	r2, [r3, #0]

  temperature = ((airtemphumraw[3] & 0x0f) << 16) + (airtemphumraw[4] << 8) + (airtemphumraw[5]);
 800b25e:	4b31      	ldr	r3, [pc, #196]	@ (800b324 <AHT20_Calculate+0x178>)
 800b260:	78db      	ldrb	r3, [r3, #3]
 800b262:	041a      	lsls	r2, r3, #16
 800b264:	23f0      	movs	r3, #240	@ 0xf0
 800b266:	031b      	lsls	r3, r3, #12
 800b268:	401a      	ands	r2, r3
 800b26a:	4b2e      	ldr	r3, [pc, #184]	@ (800b324 <AHT20_Calculate+0x178>)
 800b26c:	791b      	ldrb	r3, [r3, #4]
 800b26e:	021b      	lsls	r3, r3, #8
 800b270:	18d3      	adds	r3, r2, r3
 800b272:	4a2c      	ldr	r2, [pc, #176]	@ (800b324 <AHT20_Calculate+0x178>)
 800b274:	7952      	ldrb	r2, [r2, #5]
 800b276:	189b      	adds	r3, r3, r2
 800b278:	60fb      	str	r3, [r7, #12]
  *airtemp = (((float)temperature / 1048576) * 200) - 50;
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f7f6 fb24 	bl	80018c8 <__aeabi_ui2f>
 800b280:	1c03      	adds	r3, r0, #0
 800b282:	2193      	movs	r1, #147	@ 0x93
 800b284:	05c9      	lsls	r1, r1, #23
 800b286:	1c18      	adds	r0, r3, #0
 800b288:	f7f5 fd0c 	bl	8000ca4 <__aeabi_fdiv>
 800b28c:	1c03      	adds	r3, r0, #0
 800b28e:	492c      	ldr	r1, [pc, #176]	@ (800b340 <AHT20_Calculate+0x194>)
 800b290:	1c18      	adds	r0, r3, #0
 800b292:	f7f5 fed5 	bl	8001040 <__aeabi_fmul>
 800b296:	1c03      	adds	r3, r0, #0
 800b298:	492a      	ldr	r1, [pc, #168]	@ (800b344 <AHT20_Calculate+0x198>)
 800b29a:	1c18      	adds	r0, r3, #0
 800b29c:	f7f6 f82a 	bl	80012f4 <__aeabi_fsub>
 800b2a0:	1c03      	adds	r3, r0, #0
 800b2a2:	1c1a      	adds	r2, r3, #0
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	601a      	str	r2, [r3, #0]
  humidity = (airtemphumraw[1] << 12) + (airtemphumraw[2] << 4) + (airtemphumraw[3]>>4);
 800b2a8:	4b1e      	ldr	r3, [pc, #120]	@ (800b324 <AHT20_Calculate+0x178>)
 800b2aa:	785b      	ldrb	r3, [r3, #1]
 800b2ac:	031a      	lsls	r2, r3, #12
 800b2ae:	4b1d      	ldr	r3, [pc, #116]	@ (800b324 <AHT20_Calculate+0x178>)
 800b2b0:	789b      	ldrb	r3, [r3, #2]
 800b2b2:	011b      	lsls	r3, r3, #4
 800b2b4:	18d3      	adds	r3, r2, r3
 800b2b6:	4a1b      	ldr	r2, [pc, #108]	@ (800b324 <AHT20_Calculate+0x178>)
 800b2b8:	78d2      	ldrb	r2, [r2, #3]
 800b2ba:	0912      	lsrs	r2, r2, #4
 800b2bc:	b2d2      	uxtb	r2, r2
 800b2be:	189b      	adds	r3, r3, r2
 800b2c0:	60bb      	str	r3, [r7, #8]
  *airhum = ((float)humidity / 1048576) * 100;
 800b2c2:	68b8      	ldr	r0, [r7, #8]
 800b2c4:	f7f6 fb00 	bl	80018c8 <__aeabi_ui2f>
 800b2c8:	1c03      	adds	r3, r0, #0
 800b2ca:	2193      	movs	r1, #147	@ 0x93
 800b2cc:	05c9      	lsls	r1, r1, #23
 800b2ce:	1c18      	adds	r0, r3, #0
 800b2d0:	f7f5 fce8 	bl	8000ca4 <__aeabi_fdiv>
 800b2d4:	1c03      	adds	r3, r0, #0
 800b2d6:	491c      	ldr	r1, [pc, #112]	@ (800b348 <AHT20_Calculate+0x19c>)
 800b2d8:	1c18      	adds	r0, r3, #0
 800b2da:	f7f5 feb1 	bl	8001040 <__aeabi_fmul>
 800b2de:	1c03      	adds	r3, r0, #0
 800b2e0:	1c1a      	adds	r2, r3, #0
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	601a      	str	r2, [r3, #0]
  Info("AHT20 air humidity = %2.2f%%, temperature = %2.2fC", *airhum, *airtemp);
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	1c18      	adds	r0, r3, #0
 800b2ec:	f7f8 fad2 	bl	8003894 <__aeabi_f2d>
 800b2f0:	0004      	movs	r4, r0
 800b2f2:	000d      	movs	r5, r1
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	1c18      	adds	r0, r3, #0
 800b2fa:	f7f8 facb 	bl	8003894 <__aeabi_f2d>
 800b2fe:	0002      	movs	r2, r0
 800b300:	000b      	movs	r3, r1
 800b302:	4812      	ldr	r0, [pc, #72]	@ (800b34c <AHT20_Calculate+0x1a0>)
 800b304:	4912      	ldr	r1, [pc, #72]	@ (800b350 <AHT20_Calculate+0x1a4>)
 800b306:	9202      	str	r2, [sp, #8]
 800b308:	9303      	str	r3, [sp, #12]
 800b30a:	9400      	str	r4, [sp, #0]
 800b30c:	9501      	str	r5, [sp, #4]
 800b30e:	0002      	movs	r2, r0
 800b310:	2002      	movs	r0, #2
 800b312:	f008 fe9f 	bl	8014054 <CreateLine>
  return true;
 800b316:	2301      	movs	r3, #1
}
 800b318:	0018      	movs	r0, r3
 800b31a:	46bd      	mov	sp, r7
 800b31c:	b004      	add	sp, #16
 800b31e:	bc80      	pop	{r7}
 800b320:	46b8      	mov	r8, r7
 800b322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b324:	20000e88 	.word	0x20000e88
 800b328:	0802c6f4 	.word	0x0802c6f4
 800b32c:	0802c5f8 	.word	0x0802c5f8
 800b330:	0802c774 	.word	0x0802c774
 800b334:	0802c65c 	.word	0x0802c65c
 800b338:	20000e74 	.word	0x20000e74
 800b33c:	20000e8f 	.word	0x20000e8f
 800b340:	43480000 	.word	0x43480000
 800b344:	42480000 	.word	0x42480000
 800b348:	42c80000 	.word	0x42c80000
 800b34c:	0802c79c 	.word	0x0802c79c
 800b350:	0802c6cc 	.word	0x0802c6cc

0800b354 <AHT20_reset>:

bool AHT20_reset(void) {
 800b354:	b580      	push	{r7, lr}
 800b356:	af00      	add	r7, sp, #0
  AHT20TimeStamp = HAL_GetTick() + 50;
 800b358:	f009 fbf4 	bl	8014b44 <HAL_GetTick>
 800b35c:	0003      	movs	r3, r0
 800b35e:	3332      	adds	r3, #50	@ 0x32
 800b360:	001a      	movs	r2, r3
 800b362:	4b07      	ldr	r3, [pc, #28]	@ (800b380 <AHT20_reset+0x2c>)
 800b364:	601a      	str	r2, [r3, #0]
  calibrated = false;
 800b366:	4b07      	ldr	r3, [pc, #28]	@ (800b384 <AHT20_reset+0x30>)
 800b368:	2200      	movs	r2, #0
 800b36a:	701a      	strb	r2, [r3, #0]
  return WriteRegister(AHT20_ADDRESS, AHT20_soft_reset, 1);
 800b36c:	4b06      	ldr	r3, [pc, #24]	@ (800b388 <AHT20_reset+0x34>)
 800b36e:	2201      	movs	r2, #1
 800b370:	0019      	movs	r1, r3
 800b372:	2038      	movs	r0, #56	@ 0x38
 800b374:	f7ff fce8 	bl	800ad48 <WriteRegister>
 800b378:	0003      	movs	r3, r0
}
 800b37a:	0018      	movs	r0, r3
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	20000e74 	.word	0x20000e74
 800b384:	20000e78 	.word	0x20000e78
 800b388:	20000090 	.word	0x20000090

0800b38c <AHT_Upkeep>:

AHT20State AHT_Upkeep(void) {
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
//  static AHT20State AHTState = AHT20_STATE_INIT;
  if(!TimestampIsReached(AHT20TimeStamp)){
 800b392:	4b61      	ldr	r3, [pc, #388]	@ (800b518 <AHT_Upkeep+0x18c>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	0018      	movs	r0, r3
 800b398:	f008 fe06 	bl	8013fa8 <TimestampIsReached>
 800b39c:	0003      	movs	r3, r0
 800b39e:	001a      	movs	r2, r3
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	4053      	eors	r3, r2
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d002      	beq.n	800b3b0 <AHT_Upkeep+0x24>
    return AHTState;
 800b3aa:	4b5c      	ldr	r3, [pc, #368]	@ (800b51c <AHT_Upkeep+0x190>)
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	e0ae      	b.n	800b50e <AHT_Upkeep+0x182>
  }
  switch(AHTState) {
 800b3b0:	4b5a      	ldr	r3, [pc, #360]	@ (800b51c <AHT_Upkeep+0x190>)
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	2b05      	cmp	r3, #5
 800b3b6:	d900      	bls.n	800b3ba <AHT_Upkeep+0x2e>
 800b3b8:	e07d      	b.n	800b4b6 <AHT_Upkeep+0x12a>
 800b3ba:	009a      	lsls	r2, r3, #2
 800b3bc:	4b58      	ldr	r3, [pc, #352]	@ (800b520 <AHT_Upkeep+0x194>)
 800b3be:	18d3      	adds	r3, r2, r3
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	469f      	mov	pc, r3
  case AHT_STATE_OFF:
    Debug("Measurements are turned off for AHT20.");
 800b3c4:	4a57      	ldr	r2, [pc, #348]	@ (800b524 <AHT_Upkeep+0x198>)
 800b3c6:	4b58      	ldr	r3, [pc, #352]	@ (800b528 <AHT_Upkeep+0x19c>)
 800b3c8:	0019      	movs	r1, r3
 800b3ca:	2003      	movs	r0, #3
 800b3cc:	f008 fe42 	bl	8014054 <CreateLine>
    AHT20TimeStamp = HAL_GetTick() + 900000;  // about every 15 minute
 800b3d0:	f009 fbb8 	bl	8014b44 <HAL_GetTick>
 800b3d4:	0003      	movs	r3, r0
 800b3d6:	4a55      	ldr	r2, [pc, #340]	@ (800b52c <AHT_Upkeep+0x1a0>)
 800b3d8:	189a      	adds	r2, r3, r2
 800b3da:	4b4f      	ldr	r3, [pc, #316]	@ (800b518 <AHT_Upkeep+0x18c>)
 800b3dc:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 800b3de:	4b54      	ldr	r3, [pc, #336]	@ (800b530 <AHT_Upkeep+0x1a4>)
 800b3e0:	781a      	ldrb	r2, [r3, #0]
 800b3e2:	4b54      	ldr	r3, [pc, #336]	@ (800b534 <AHT_Upkeep+0x1a8>)
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d100      	bne.n	800b3ec <AHT_Upkeep+0x60>
 800b3ea:	e087      	b.n	800b4fc <AHT_Upkeep+0x170>
      AHTState = AHT_STATE_WAIT;
 800b3ec:	4b4b      	ldr	r3, [pc, #300]	@ (800b51c <AHT_Upkeep+0x190>)
 800b3ee:	2205      	movs	r2, #5
 800b3f0:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b3f2:	e083      	b.n	800b4fc <AHT_Upkeep+0x170>

  case AHT_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800b3f4:	f002 fe14 	bl	800e020 <getSensorLock>
 800b3f8:	1e03      	subs	r3, r0, #0
 800b3fa:	d000      	beq.n	800b3fe <AHT_Upkeep+0x72>
 800b3fc:	e080      	b.n	800b500 <AHT_Upkeep+0x174>
      break;
    }
    setSensorLock(AHT20);
 800b3fe:	2002      	movs	r0, #2
 800b400:	f002 fdfa 	bl	800dff8 <setSensorLock>
    if (!AHT20_StartMeasurement()) {
 800b404:	f7ff fe36 	bl	800b074 <AHT20_StartMeasurement>
 800b408:	0003      	movs	r3, r0
 800b40a:	001a      	movs	r2, r3
 800b40c:	2301      	movs	r3, #1
 800b40e:	4053      	eors	r3, r2
 800b410:	b2db      	uxtb	r3, r3
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00c      	beq.n	800b430 <AHT_Upkeep+0xa4>
      AHT20_reset();
 800b416:	f7ff ff9d 	bl	800b354 <AHT20_reset>
      AHT20TimeStamp = HAL_GetTick() + 200;
 800b41a:	f009 fb93 	bl	8014b44 <HAL_GetTick>
 800b41e:	0003      	movs	r3, r0
 800b420:	33c8      	adds	r3, #200	@ 0xc8
 800b422:	001a      	movs	r2, r3
 800b424:	4b3c      	ldr	r3, [pc, #240]	@ (800b518 <AHT_Upkeep+0x18c>)
 800b426:	601a      	str	r2, [r3, #0]
      AHTState = AHT20_ERROR;
 800b428:	4b3c      	ldr	r3, [pc, #240]	@ (800b51c <AHT_Upkeep+0x190>)
 800b42a:	22ff      	movs	r2, #255	@ 0xff
 800b42c:	701a      	strb	r2, [r3, #0]
 800b42e:	e002      	b.n	800b436 <AHT_Upkeep+0xaa>
    }
    else {
      AHTState = AHT_STATE_WAIT_FOR_COMPLETION;
 800b430:	4b3a      	ldr	r3, [pc, #232]	@ (800b51c <AHT_Upkeep+0x190>)
 800b432:	2202      	movs	r2, #2
 800b434:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 800b436:	200a      	movs	r0, #10
 800b438:	f009 fb8e 	bl	8014b58 <HAL_Delay>
    break;
 800b43c:	e065      	b.n	800b50a <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT_FOR_COMPLETION:
    if(AHT20_GetMeasurementValues()) {
 800b43e:	f7ff fe47 	bl	800b0d0 <AHT20_GetMeasurementValues>
 800b442:	1e03      	subs	r3, r0, #0
 800b444:	d05e      	beq.n	800b504 <AHT_Upkeep+0x178>
//      Debug("AHT20_GetMeasurementValues success");
      HAL_Delay(10); // wait for deferred DMA transfers
 800b446:	200a      	movs	r0, #10
 800b448:	f009 fb86 	bl	8014b58 <HAL_Delay>
      setSensorLock(FREE);
 800b44c:	2000      	movs	r0, #0
 800b44e:	f002 fdd3 	bl	800dff8 <setSensorLock>
      AHTState = AHT_STATE_PROCESS_RESULTS;
 800b452:	4b32      	ldr	r3, [pc, #200]	@ (800b51c <AHT_Upkeep+0x190>)
 800b454:	2203      	movs	r2, #3
 800b456:	701a      	strb	r2, [r3, #0]
    }
//    else {
//      AHT20TimeStamp = HAL_GetTick() + 40;
//    }
    break;
 800b458:	e054      	b.n	800b504 <AHT_Upkeep+0x178>

  case AHT_STATE_PROCESS_RESULTS:
    float airtemp, airhum;
    if (!AHT20_Calculate(&airtemp, &airhum)) {
 800b45a:	003a      	movs	r2, r7
 800b45c:	1d3b      	adds	r3, r7, #4
 800b45e:	0011      	movs	r1, r2
 800b460:	0018      	movs	r0, r3
 800b462:	f7ff fea3 	bl	800b1ac <AHT20_Calculate>
 800b466:	0003      	movs	r3, r0
 800b468:	001a      	movs	r2, r3
 800b46a:	2301      	movs	r3, #1
 800b46c:	4053      	eors	r3, r2
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	2b00      	cmp	r3, #0
 800b472:	d005      	beq.n	800b480 <AHT_Upkeep+0xf4>
      AHTState = AHT20_ERROR;
 800b474:	4b29      	ldr	r3, [pc, #164]	@ (800b51c <AHT_Upkeep+0x190>)
 800b476:	22ff      	movs	r2, #255	@ 0xff
 800b478:	701a      	strb	r2, [r3, #0]
      return AHTState;
 800b47a:	4b28      	ldr	r3, [pc, #160]	@ (800b51c <AHT_Upkeep+0x190>)
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	e046      	b.n	800b50e <AHT_Upkeep+0x182>
    }
    setAHT2x(airtemp, airhum); //store to transmit
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	683a      	ldr	r2, [r7, #0]
 800b484:	1c11      	adds	r1, r2, #0
 800b486:	1c18      	adds	r0, r3, #0
 800b488:	f7f9 fb4e 	bl	8004b28 <setAHT2x>
    ENS160_set_envdata(airtemp, airhum); // use the actual values to the gas sensor
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	1c11      	adds	r1, r2, #0
 800b492:	1c18      	adds	r0, r3, #0
 800b494:	f7f8 ffac 	bl	80043f0 <ENS160_set_envdata>
    AHTState = AHT_STATE_WAIT;
 800b498:	4b20      	ldr	r3, [pc, #128]	@ (800b51c <AHT_Upkeep+0x190>)
 800b49a:	2205      	movs	r2, #5
 800b49c:	701a      	strb	r2, [r3, #0]
    AHT20TimeStamp = HAL_GetTick() + 60000;  // about every 1 minute
 800b49e:	f009 fb51 	bl	8014b44 <HAL_GetTick>
 800b4a2:	0003      	movs	r3, r0
 800b4a4:	4a24      	ldr	r2, [pc, #144]	@ (800b538 <AHT_Upkeep+0x1ac>)
 800b4a6:	189a      	adds	r2, r3, r2
 800b4a8:	4b1b      	ldr	r3, [pc, #108]	@ (800b518 <AHT_Upkeep+0x18c>)
 800b4aa:	601a      	str	r2, [r3, #0]
    break;
 800b4ac:	e02d      	b.n	800b50a <AHT_Upkeep+0x17e>

  case AHT_STATE_WAIT:
//    ResetMeasurementIndicator();
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b4ae:	4b1b      	ldr	r3, [pc, #108]	@ (800b51c <AHT_Upkeep+0x190>)
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	701a      	strb	r2, [r3, #0]
  break;
 800b4b4:	e029      	b.n	800b50a <AHT_Upkeep+0x17e>

  default:
    // Handle unexpected state
    AHTState = AHT_STATE_START_MEASUREMENTS;
 800b4b6:	4b19      	ldr	r3, [pc, #100]	@ (800b51c <AHT_Upkeep+0x190>)
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == AHT20) {
 800b4bc:	f002 fdb0 	bl	800e020 <getSensorLock>
 800b4c0:	0003      	movs	r3, r0
 800b4c2:	2b02      	cmp	r3, #2
 800b4c4:	d102      	bne.n	800b4cc <AHT_Upkeep+0x140>
      setSensorLock(FREE);
 800b4c6:	2000      	movs	r0, #0
 800b4c8:	f002 fd96 	bl	800dff8 <setSensorLock>
    }
    AHTerrors++;
 800b4cc:	4b1b      	ldr	r3, [pc, #108]	@ (800b53c <AHT_Upkeep+0x1b0>)
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	b2da      	uxtb	r2, r3
 800b4d4:	4b19      	ldr	r3, [pc, #100]	@ (800b53c <AHT_Upkeep+0x1b0>)
 800b4d6:	701a      	strb	r2, [r3, #0]
    if (AHTerrors > 25) {
 800b4d8:	4b18      	ldr	r3, [pc, #96]	@ (800b53c <AHT_Upkeep+0x1b0>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	2b19      	cmp	r3, #25
 800b4de:	d913      	bls.n	800b508 <AHT_Upkeep+0x17c>
      Error("AHT2x more than 25 consecutive errors detected. Device disabled.");
 800b4e0:	4a17      	ldr	r2, [pc, #92]	@ (800b540 <AHT_Upkeep+0x1b4>)
 800b4e2:	4b18      	ldr	r3, [pc, #96]	@ (800b544 <AHT_Upkeep+0x1b8>)
 800b4e4:	0019      	movs	r1, r3
 800b4e6:	2001      	movs	r0, #1
 800b4e8:	f008 fdb4 	bl	8014054 <CreateLine>
      AHTState = AHT_STATE_OFF;
 800b4ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b51c <AHT_Upkeep+0x190>)
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	701a      	strb	r2, [r3, #0]
      offday = weekday;
 800b4f2:	4b0f      	ldr	r3, [pc, #60]	@ (800b530 <AHT_Upkeep+0x1a4>)
 800b4f4:	781a      	ldrb	r2, [r3, #0]
 800b4f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b534 <AHT_Upkeep+0x1a8>)
 800b4f8:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b4fa:	e005      	b.n	800b508 <AHT_Upkeep+0x17c>
    break;
 800b4fc:	46c0      	nop			@ (mov r8, r8)
 800b4fe:	e004      	b.n	800b50a <AHT_Upkeep+0x17e>
      break;
 800b500:	46c0      	nop			@ (mov r8, r8)
 800b502:	e002      	b.n	800b50a <AHT_Upkeep+0x17e>
    break;
 800b504:	46c0      	nop			@ (mov r8, r8)
 800b506:	e000      	b.n	800b50a <AHT_Upkeep+0x17e>
    break;
 800b508:	46c0      	nop			@ (mov r8, r8)
  }
  return AHTState;
 800b50a:	4b04      	ldr	r3, [pc, #16]	@ (800b51c <AHT_Upkeep+0x190>)
 800b50c:	781b      	ldrb	r3, [r3, #0]
}
 800b50e:	0018      	movs	r0, r3
 800b510:	46bd      	mov	sp, r7
 800b512:	b002      	add	sp, #8
 800b514:	bd80      	pop	{r7, pc}
 800b516:	46c0      	nop			@ (mov r8, r8)
 800b518:	20000e74 	.word	0x20000e74
 800b51c:	2000009f 	.word	0x2000009f
 800b520:	0802e780 	.word	0x0802e780
 800b524:	0802c7d0 	.word	0x0802c7d0
 800b528:	0802c5f8 	.word	0x0802c5f8
 800b52c:	000dbba0 	.word	0x000dbba0
 800b530:	20000dee 	.word	0x20000dee
 800b534:	20000e90 	.word	0x20000e90
 800b538:	0000ea60 	.word	0x0000ea60
 800b53c:	20000e8f 	.word	0x20000e8f
 800b540:	0802c7f8 	.word	0x0802c7f8
 800b544:	0802c65c 	.word	0x0802c65c

0800b548 <WriteMemRegister>:
static uint32_t BMP280TimeStamp;
static uint8_t offday;

BMP280State BMPState = BMP_SET_CONFIG;

static bool WriteMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af02      	add	r7, sp, #8
 800b54e:	0004      	movs	r4, r0
 800b550:	0008      	movs	r0, r1
 800b552:	60ba      	str	r2, [r7, #8]
 800b554:	0019      	movs	r1, r3
 800b556:	260e      	movs	r6, #14
 800b558:	19bb      	adds	r3, r7, r6
 800b55a:	1c22      	adds	r2, r4, #0
 800b55c:	801a      	strh	r2, [r3, #0]
 800b55e:	230c      	movs	r3, #12
 800b560:	18fb      	adds	r3, r7, r3
 800b562:	1c02      	adds	r2, r0, #0
 800b564:	801a      	strh	r2, [r3, #0]
 800b566:	1dbb      	adds	r3, r7, #6
 800b568:	1c0a      	adds	r2, r1, #0
 800b56a:	801a      	strh	r2, [r3, #0]
  if (WriteMemFunction != NULL) {
 800b56c:	4b0c      	ldr	r3, [pc, #48]	@ (800b5a0 <WriteMemRegister+0x58>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d010      	beq.n	800b596 <WriteMemRegister+0x4e>
    return WriteMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b574:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a0 <WriteMemRegister+0x58>)
 800b576:	681c      	ldr	r4, [r3, #0]
 800b578:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a4 <WriteMemRegister+0x5c>)
 800b57a:	7818      	ldrb	r0, [r3, #0]
 800b57c:	68bd      	ldr	r5, [r7, #8]
 800b57e:	230c      	movs	r3, #12
 800b580:	18fb      	adds	r3, r7, r3
 800b582:	881a      	ldrh	r2, [r3, #0]
 800b584:	19bb      	adds	r3, r7, r6
 800b586:	8819      	ldrh	r1, [r3, #0]
 800b588:	1dbb      	adds	r3, r7, #6
 800b58a:	881b      	ldrh	r3, [r3, #0]
 800b58c:	9300      	str	r3, [sp, #0]
 800b58e:	002b      	movs	r3, r5
 800b590:	47a0      	blx	r4
 800b592:	0003      	movs	r3, r0
 800b594:	e000      	b.n	800b598 <WriteMemRegister+0x50>
  }
  return false;
 800b596:	2300      	movs	r3, #0
}
 800b598:	0018      	movs	r0, r3
 800b59a:	46bd      	mov	sp, r7
 800b59c:	b005      	add	sp, #20
 800b59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5a0:	20000e94 	.word	0x20000e94
 800b5a4:	200000a0 	.word	0x200000a0

0800b5a8 <ReadMemRegister>:

static bool ReadMemRegister(uint16_t MemAddress, uint16_t MemSize, uint8_t* buffer, uint16_t nrBytes) {
 800b5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5aa:	b087      	sub	sp, #28
 800b5ac:	af02      	add	r7, sp, #8
 800b5ae:	0004      	movs	r4, r0
 800b5b0:	0008      	movs	r0, r1
 800b5b2:	60ba      	str	r2, [r7, #8]
 800b5b4:	0019      	movs	r1, r3
 800b5b6:	260e      	movs	r6, #14
 800b5b8:	19bb      	adds	r3, r7, r6
 800b5ba:	1c22      	adds	r2, r4, #0
 800b5bc:	801a      	strh	r2, [r3, #0]
 800b5be:	230c      	movs	r3, #12
 800b5c0:	18fb      	adds	r3, r7, r3
 800b5c2:	1c02      	adds	r2, r0, #0
 800b5c4:	801a      	strh	r2, [r3, #0]
 800b5c6:	1dbb      	adds	r3, r7, #6
 800b5c8:	1c0a      	adds	r2, r1, #0
 800b5ca:	801a      	strh	r2, [r3, #0]
  if (ReadMemFunction != NULL) {
 800b5cc:	4b0c      	ldr	r3, [pc, #48]	@ (800b600 <ReadMemRegister+0x58>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d010      	beq.n	800b5f6 <ReadMemRegister+0x4e>
    return ReadMemFunction(bmp280I2Caddr, MemAddress, MemSize, buffer, nrBytes);
 800b5d4:	4b0a      	ldr	r3, [pc, #40]	@ (800b600 <ReadMemRegister+0x58>)
 800b5d6:	681c      	ldr	r4, [r3, #0]
 800b5d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b604 <ReadMemRegister+0x5c>)
 800b5da:	7818      	ldrb	r0, [r3, #0]
 800b5dc:	68bd      	ldr	r5, [r7, #8]
 800b5de:	230c      	movs	r3, #12
 800b5e0:	18fb      	adds	r3, r7, r3
 800b5e2:	881a      	ldrh	r2, [r3, #0]
 800b5e4:	19bb      	adds	r3, r7, r6
 800b5e6:	8819      	ldrh	r1, [r3, #0]
 800b5e8:	1dbb      	adds	r3, r7, #6
 800b5ea:	881b      	ldrh	r3, [r3, #0]
 800b5ec:	9300      	str	r3, [sp, #0]
 800b5ee:	002b      	movs	r3, r5
 800b5f0:	47a0      	blx	r4
 800b5f2:	0003      	movs	r3, r0
 800b5f4:	e000      	b.n	800b5f8 <ReadMemRegister+0x50>
  }
  return false;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	0018      	movs	r0, r3
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	b005      	add	sp, #20
 800b5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b600:	20000e98 	.word	0x20000e98
 800b604:	200000a0 	.word	0x200000a0

0800b608 <setBMP280TimeStamp>:

void setBMP280TimeStamp(uint32_t ticks) {
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  BMP280TimeStamp = HAL_GetTick() + ticks;
 800b610:	f009 fa98 	bl	8014b44 <HAL_GetTick>
 800b614:	0002      	movs	r2, r0
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	18d2      	adds	r2, r2, r3
 800b61a:	4b03      	ldr	r3, [pc, #12]	@ (800b628 <setBMP280TimeStamp+0x20>)
 800b61c:	601a      	str	r2, [r3, #0]
}
 800b61e:	46c0      	nop			@ (mov r8, r8)
 800b620:	46bd      	mov	sp, r7
 800b622:	b002      	add	sp, #8
 800b624:	bd80      	pop	{r7, pc}
 800b626:	46c0      	nop			@ (mov r8, r8)
 800b628:	20000ec4 	.word	0x20000ec4

0800b62c <ResetBMP280samplecounter>:

void ResetBMP280samplecounter() {
 800b62c:	b580      	push	{r7, lr}
 800b62e:	af00      	add	r7, sp, #0
  bmp280samplecounter = 0;
 800b630:	4b02      	ldr	r3, [pc, #8]	@ (800b63c <ResetBMP280samplecounter+0x10>)
 800b632:	2200      	movs	r2, #0
 800b634:	701a      	strb	r2, [r3, #0]
}
 800b636:	46c0      	nop			@ (mov r8, r8)
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	20000eb4 	.word	0x20000eb4

0800b640 <BMP280_reset>:


static void BMP280_reset() {
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
  uint8_t data = BMP280_RESET_VALUE;
 800b646:	1dfb      	adds	r3, r7, #7
 800b648:	22b6      	movs	r2, #182	@ 0xb6
 800b64a:	701a      	strb	r2, [r3, #0]
  WriteMemRegister(BMP280_REG_RESET, 1, &data, 1);
 800b64c:	1dfa      	adds	r2, r7, #7
 800b64e:	2301      	movs	r3, #1
 800b650:	2101      	movs	r1, #1
 800b652:	20e0      	movs	r0, #224	@ 0xe0
 800b654:	f7ff ff78 	bl	800b548 <WriteMemRegister>
  Info("BMP280 has been reset");
 800b658:	4a06      	ldr	r2, [pc, #24]	@ (800b674 <BMP280_reset+0x34>)
 800b65a:	4b07      	ldr	r3, [pc, #28]	@ (800b678 <BMP280_reset+0x38>)
 800b65c:	0019      	movs	r1, r3
 800b65e:	2002      	movs	r0, #2
 800b660:	f008 fcf8 	bl	8014054 <CreateLine>
  HAL_Delay(100);
 800b664:	2064      	movs	r0, #100	@ 0x64
 800b666:	f009 fa77 	bl	8014b58 <HAL_Delay>
}
 800b66a:	46c0      	nop			@ (mov r8, r8)
 800b66c:	46bd      	mov	sp, r7
 800b66e:	b002      	add	sp, #8
 800b670:	bd80      	pop	{r7, pc}
 800b672:	46c0      	nop			@ (mov r8, r8)
 800b674:	0802c83c 	.word	0x0802c83c
 800b678:	0802c854 	.word	0x0802c854

0800b67c <BMP280_get_calibration>:

static void BMP280_get_calibration() {
 800b67c:	b590      	push	{r4, r7, lr}
 800b67e:	b083      	sub	sp, #12
 800b680:	af02      	add	r7, sp, #8
  static uint8_t bmpData[32];
  ReadMemRegister(BMP280_REG_TEMP_PRESS_CALIB_DATA, 1, &bmpData[0], 26);
 800b682:	4aae      	ldr	r2, [pc, #696]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b684:	231a      	movs	r3, #26
 800b686:	2101      	movs	r1, #1
 800b688:	2088      	movs	r0, #136	@ 0x88
 800b68a:	f7ff ff8d 	bl	800b5a8 <ReadMemRegister>
  dig.T1 = (uint16_t)((((uint16_t)bmpData[1]) << 8) + (uint16_t)bmpData[0]);
 800b68e:	4bab      	ldr	r3, [pc, #684]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b690:	785b      	ldrb	r3, [r3, #1]
 800b692:	021b      	lsls	r3, r3, #8
 800b694:	b29b      	uxth	r3, r3
 800b696:	4aa9      	ldr	r2, [pc, #676]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b698:	7812      	ldrb	r2, [r2, #0]
 800b69a:	189b      	adds	r3, r3, r2
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	4ba8      	ldr	r3, [pc, #672]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b6a0:	801a      	strh	r2, [r3, #0]
  dig.T2 = (int16_t)((((int16_t)bmpData[3]) << 8) + (int16_t)bmpData[2]);
 800b6a2:	4ba6      	ldr	r3, [pc, #664]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b6a4:	78db      	ldrb	r3, [r3, #3]
 800b6a6:	021b      	lsls	r3, r3, #8
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	4aa4      	ldr	r2, [pc, #656]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b6ac:	7892      	ldrb	r2, [r2, #2]
 800b6ae:	189b      	adds	r3, r3, r2
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	b21a      	sxth	r2, r3
 800b6b4:	4ba2      	ldr	r3, [pc, #648]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b6b6:	805a      	strh	r2, [r3, #2]
  dig.T3 = (int16_t)((((int16_t)bmpData[5]) << 8) + (int16_t)bmpData[4]);
 800b6b8:	4ba0      	ldr	r3, [pc, #640]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b6ba:	795b      	ldrb	r3, [r3, #5]
 800b6bc:	021b      	lsls	r3, r3, #8
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	4a9e      	ldr	r2, [pc, #632]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b6c2:	7912      	ldrb	r2, [r2, #4]
 800b6c4:	189b      	adds	r3, r3, r2
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	b21a      	sxth	r2, r3
 800b6ca:	4b9d      	ldr	r3, [pc, #628]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b6cc:	809a      	strh	r2, [r3, #4]
  dig.P1 = (uint16_t)((((uint16_t)bmpData[7]) << 8) + (uint16_t)bmpData[6]);
 800b6ce:	4b9b      	ldr	r3, [pc, #620]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b6d0:	79db      	ldrb	r3, [r3, #7]
 800b6d2:	021b      	lsls	r3, r3, #8
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	4a99      	ldr	r2, [pc, #612]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b6d8:	7992      	ldrb	r2, [r2, #6]
 800b6da:	189b      	adds	r3, r3, r2
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	4b98      	ldr	r3, [pc, #608]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b6e0:	80da      	strh	r2, [r3, #6]
  dig.P2 = (int16_t)((((int16_t)bmpData[9]) << 8) + (int16_t)bmpData[8]);
 800b6e2:	4b96      	ldr	r3, [pc, #600]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b6e4:	7a5b      	ldrb	r3, [r3, #9]
 800b6e6:	021b      	lsls	r3, r3, #8
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	4a94      	ldr	r2, [pc, #592]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b6ec:	7a12      	ldrb	r2, [r2, #8]
 800b6ee:	189b      	adds	r3, r3, r2
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	b21a      	sxth	r2, r3
 800b6f4:	4b92      	ldr	r3, [pc, #584]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b6f6:	811a      	strh	r2, [r3, #8]
  dig.P3 = (int16_t)((((int16_t)bmpData[11]) << 8) + (int16_t)bmpData[10]);
 800b6f8:	4b90      	ldr	r3, [pc, #576]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b6fa:	7adb      	ldrb	r3, [r3, #11]
 800b6fc:	021b      	lsls	r3, r3, #8
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	4a8e      	ldr	r2, [pc, #568]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b702:	7a92      	ldrb	r2, [r2, #10]
 800b704:	189b      	adds	r3, r3, r2
 800b706:	b29b      	uxth	r3, r3
 800b708:	b21a      	sxth	r2, r3
 800b70a:	4b8d      	ldr	r3, [pc, #564]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b70c:	815a      	strh	r2, [r3, #10]
  dig.P4 = (int16_t)((((int16_t)bmpData[13]) << 8) + (int16_t)bmpData[12]);
 800b70e:	4b8b      	ldr	r3, [pc, #556]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b710:	7b5b      	ldrb	r3, [r3, #13]
 800b712:	021b      	lsls	r3, r3, #8
 800b714:	b29b      	uxth	r3, r3
 800b716:	4a89      	ldr	r2, [pc, #548]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b718:	7b12      	ldrb	r2, [r2, #12]
 800b71a:	189b      	adds	r3, r3, r2
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	b21a      	sxth	r2, r3
 800b720:	4b87      	ldr	r3, [pc, #540]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b722:	819a      	strh	r2, [r3, #12]
  dig.P5 = (int16_t)((((int16_t)bmpData[15]) << 8) + (int16_t)bmpData[14]);
 800b724:	4b85      	ldr	r3, [pc, #532]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b726:	7bdb      	ldrb	r3, [r3, #15]
 800b728:	021b      	lsls	r3, r3, #8
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	4a83      	ldr	r2, [pc, #524]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b72e:	7b92      	ldrb	r2, [r2, #14]
 800b730:	189b      	adds	r3, r3, r2
 800b732:	b29b      	uxth	r3, r3
 800b734:	b21a      	sxth	r2, r3
 800b736:	4b82      	ldr	r3, [pc, #520]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b738:	81da      	strh	r2, [r3, #14]
  dig.P6 = (int16_t)((((int16_t)bmpData[17]) << 8) + (int16_t)bmpData[16]);
 800b73a:	4b80      	ldr	r3, [pc, #512]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b73c:	7c5b      	ldrb	r3, [r3, #17]
 800b73e:	021b      	lsls	r3, r3, #8
 800b740:	b29b      	uxth	r3, r3
 800b742:	4a7e      	ldr	r2, [pc, #504]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b744:	7c12      	ldrb	r2, [r2, #16]
 800b746:	189b      	adds	r3, r3, r2
 800b748:	b29b      	uxth	r3, r3
 800b74a:	b21a      	sxth	r2, r3
 800b74c:	4b7c      	ldr	r3, [pc, #496]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b74e:	821a      	strh	r2, [r3, #16]
  dig.P7 = (int16_t)((((int16_t)bmpData[19]) << 8) + (int16_t)bmpData[18]);
 800b750:	4b7a      	ldr	r3, [pc, #488]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b752:	7cdb      	ldrb	r3, [r3, #19]
 800b754:	021b      	lsls	r3, r3, #8
 800b756:	b29b      	uxth	r3, r3
 800b758:	4a78      	ldr	r2, [pc, #480]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b75a:	7c92      	ldrb	r2, [r2, #18]
 800b75c:	189b      	adds	r3, r3, r2
 800b75e:	b29b      	uxth	r3, r3
 800b760:	b21a      	sxth	r2, r3
 800b762:	4b77      	ldr	r3, [pc, #476]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b764:	825a      	strh	r2, [r3, #18]
  dig.P8 = (int16_t)((((int16_t)bmpData[21]) << 8) + (int16_t)bmpData[20]);
 800b766:	4b75      	ldr	r3, [pc, #468]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b768:	7d5b      	ldrb	r3, [r3, #21]
 800b76a:	021b      	lsls	r3, r3, #8
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	4a73      	ldr	r2, [pc, #460]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b770:	7d12      	ldrb	r2, [r2, #20]
 800b772:	189b      	adds	r3, r3, r2
 800b774:	b29b      	uxth	r3, r3
 800b776:	b21a      	sxth	r2, r3
 800b778:	4b71      	ldr	r3, [pc, #452]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b77a:	829a      	strh	r2, [r3, #20]
  dig.P9 = (int16_t)((((int16_t)bmpData[23]) << 8) + (int16_t)bmpData[22]);
 800b77c:	4b6f      	ldr	r3, [pc, #444]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b77e:	7ddb      	ldrb	r3, [r3, #23]
 800b780:	021b      	lsls	r3, r3, #8
 800b782:	b29b      	uxth	r3, r3
 800b784:	4a6d      	ldr	r2, [pc, #436]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b786:	7d92      	ldrb	r2, [r2, #22]
 800b788:	189b      	adds	r3, r3, r2
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	b21a      	sxth	r2, r3
 800b78e:	4b6c      	ldr	r3, [pc, #432]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b790:	82da      	strh	r2, [r3, #22]
  Debug("BMP280 calibration data:");
 800b792:	4a6c      	ldr	r2, [pc, #432]	@ (800b944 <BMP280_get_calibration+0x2c8>)
 800b794:	4b6c      	ldr	r3, [pc, #432]	@ (800b948 <BMP280_get_calibration+0x2cc>)
 800b796:	0019      	movs	r1, r3
 800b798:	2003      	movs	r0, #3
 800b79a:	f008 fc5b 	bl	8014054 <CreateLine>
  Debug("bmpData[1] 0x%02X, bmpData[0] 0x%02X, dig.T1 = %d", bmpData[1], bmpData[0], dig.T1);
 800b79e:	4b67      	ldr	r3, [pc, #412]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b7a0:	785b      	ldrb	r3, [r3, #1]
 800b7a2:	001c      	movs	r4, r3
 800b7a4:	4b65      	ldr	r3, [pc, #404]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	0018      	movs	r0, r3
 800b7aa:	4b65      	ldr	r3, [pc, #404]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b7ac:	881b      	ldrh	r3, [r3, #0]
 800b7ae:	4a67      	ldr	r2, [pc, #412]	@ (800b94c <BMP280_get_calibration+0x2d0>)
 800b7b0:	4965      	ldr	r1, [pc, #404]	@ (800b948 <BMP280_get_calibration+0x2cc>)
 800b7b2:	9301      	str	r3, [sp, #4]
 800b7b4:	9000      	str	r0, [sp, #0]
 800b7b6:	0023      	movs	r3, r4
 800b7b8:	2003      	movs	r0, #3
 800b7ba:	f008 fc4b 	bl	8014054 <CreateLine>
  Debug("bmpData[3] 0x%02X, bmpData[2] 0x%02X, dig.T1 = %d", bmpData[3], bmpData[2], dig.T2);
 800b7be:	4b5f      	ldr	r3, [pc, #380]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b7c0:	78db      	ldrb	r3, [r3, #3]
 800b7c2:	001c      	movs	r4, r3
 800b7c4:	4b5d      	ldr	r3, [pc, #372]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b7c6:	789b      	ldrb	r3, [r3, #2]
 800b7c8:	0018      	movs	r0, r3
 800b7ca:	4b5d      	ldr	r3, [pc, #372]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b7cc:	2202      	movs	r2, #2
 800b7ce:	5e9b      	ldrsh	r3, [r3, r2]
 800b7d0:	4a5f      	ldr	r2, [pc, #380]	@ (800b950 <BMP280_get_calibration+0x2d4>)
 800b7d2:	495d      	ldr	r1, [pc, #372]	@ (800b948 <BMP280_get_calibration+0x2cc>)
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	9000      	str	r0, [sp, #0]
 800b7d8:	0023      	movs	r3, r4
 800b7da:	2003      	movs	r0, #3
 800b7dc:	f008 fc3a 	bl	8014054 <CreateLine>
  Debug("bmpData[5] 0x%02X, bmpData[4] 0x%02X, dig.T1 = %d", bmpData[5], bmpData[4], dig.T3);
 800b7e0:	4b56      	ldr	r3, [pc, #344]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b7e2:	795b      	ldrb	r3, [r3, #5]
 800b7e4:	001c      	movs	r4, r3
 800b7e6:	4b55      	ldr	r3, [pc, #340]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b7e8:	791b      	ldrb	r3, [r3, #4]
 800b7ea:	0018      	movs	r0, r3
 800b7ec:	4b54      	ldr	r3, [pc, #336]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b7ee:	2204      	movs	r2, #4
 800b7f0:	5e9b      	ldrsh	r3, [r3, r2]
 800b7f2:	4a58      	ldr	r2, [pc, #352]	@ (800b954 <BMP280_get_calibration+0x2d8>)
 800b7f4:	4954      	ldr	r1, [pc, #336]	@ (800b948 <BMP280_get_calibration+0x2cc>)
 800b7f6:	9301      	str	r3, [sp, #4]
 800b7f8:	9000      	str	r0, [sp, #0]
 800b7fa:	0023      	movs	r3, r4
 800b7fc:	2003      	movs	r0, #3
 800b7fe:	f008 fc29 	bl	8014054 <CreateLine>
  Debug("bmpData[7] 0x%02X, bmpData[6] 0x%02X, dig.T1 = %d", bmpData[7], bmpData[6], dig.P1);
 800b802:	4b4e      	ldr	r3, [pc, #312]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b804:	79db      	ldrb	r3, [r3, #7]
 800b806:	001c      	movs	r4, r3
 800b808:	4b4c      	ldr	r3, [pc, #304]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b80a:	799b      	ldrb	r3, [r3, #6]
 800b80c:	0018      	movs	r0, r3
 800b80e:	4b4c      	ldr	r3, [pc, #304]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b810:	88db      	ldrh	r3, [r3, #6]
 800b812:	4a51      	ldr	r2, [pc, #324]	@ (800b958 <BMP280_get_calibration+0x2dc>)
 800b814:	494c      	ldr	r1, [pc, #304]	@ (800b948 <BMP280_get_calibration+0x2cc>)
 800b816:	9301      	str	r3, [sp, #4]
 800b818:	9000      	str	r0, [sp, #0]
 800b81a:	0023      	movs	r3, r4
 800b81c:	2003      	movs	r0, #3
 800b81e:	f008 fc19 	bl	8014054 <CreateLine>
  Debug("bmpData[9] 0x%02X, bmpData[8] 0x%02X, dig.T1 = %d", bmpData[9], bmpData[8], dig.P2);
 800b822:	4b46      	ldr	r3, [pc, #280]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b824:	7a5b      	ldrb	r3, [r3, #9]
 800b826:	001c      	movs	r4, r3
 800b828:	4b44      	ldr	r3, [pc, #272]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b82a:	7a1b      	ldrb	r3, [r3, #8]
 800b82c:	0018      	movs	r0, r3
 800b82e:	4b44      	ldr	r3, [pc, #272]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b830:	2208      	movs	r2, #8
 800b832:	5e9b      	ldrsh	r3, [r3, r2]
 800b834:	4a49      	ldr	r2, [pc, #292]	@ (800b95c <BMP280_get_calibration+0x2e0>)
 800b836:	4944      	ldr	r1, [pc, #272]	@ (800b948 <BMP280_get_calibration+0x2cc>)
 800b838:	9301      	str	r3, [sp, #4]
 800b83a:	9000      	str	r0, [sp, #0]
 800b83c:	0023      	movs	r3, r4
 800b83e:	2003      	movs	r0, #3
 800b840:	f008 fc08 	bl	8014054 <CreateLine>
  Debug("bmpData[11] 0x%02X, bmpData[10] 0x%02X, dig.T1 = %d", bmpData[11], bmpData[10], dig.P3);
 800b844:	4b3d      	ldr	r3, [pc, #244]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b846:	7adb      	ldrb	r3, [r3, #11]
 800b848:	001c      	movs	r4, r3
 800b84a:	4b3c      	ldr	r3, [pc, #240]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b84c:	7a9b      	ldrb	r3, [r3, #10]
 800b84e:	0018      	movs	r0, r3
 800b850:	4b3b      	ldr	r3, [pc, #236]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b852:	220a      	movs	r2, #10
 800b854:	5e9b      	ldrsh	r3, [r3, r2]
 800b856:	4a42      	ldr	r2, [pc, #264]	@ (800b960 <BMP280_get_calibration+0x2e4>)
 800b858:	493b      	ldr	r1, [pc, #236]	@ (800b948 <BMP280_get_calibration+0x2cc>)
 800b85a:	9301      	str	r3, [sp, #4]
 800b85c:	9000      	str	r0, [sp, #0]
 800b85e:	0023      	movs	r3, r4
 800b860:	2003      	movs	r0, #3
 800b862:	f008 fbf7 	bl	8014054 <CreateLine>
  Debug("bmpData[13] 0x%02X, bmpData[12] 0x%02X, dig.T1 = %d", bmpData[13], bmpData[12], dig.P4);
 800b866:	4b35      	ldr	r3, [pc, #212]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b868:	7b5b      	ldrb	r3, [r3, #13]
 800b86a:	001c      	movs	r4, r3
 800b86c:	4b33      	ldr	r3, [pc, #204]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b86e:	7b1b      	ldrb	r3, [r3, #12]
 800b870:	0018      	movs	r0, r3
 800b872:	4b33      	ldr	r3, [pc, #204]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b874:	220c      	movs	r2, #12
 800b876:	5e9b      	ldrsh	r3, [r3, r2]
 800b878:	4a3a      	ldr	r2, [pc, #232]	@ (800b964 <BMP280_get_calibration+0x2e8>)
 800b87a:	4933      	ldr	r1, [pc, #204]	@ (800b948 <BMP280_get_calibration+0x2cc>)
 800b87c:	9301      	str	r3, [sp, #4]
 800b87e:	9000      	str	r0, [sp, #0]
 800b880:	0023      	movs	r3, r4
 800b882:	2003      	movs	r0, #3
 800b884:	f008 fbe6 	bl	8014054 <CreateLine>
  Debug("bmpData[15] 0x%02X, bmpData[14] 0x%02X, dig.T1 = %d", bmpData[15], bmpData[14], dig.P5);
 800b888:	4b2c      	ldr	r3, [pc, #176]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b88a:	7bdb      	ldrb	r3, [r3, #15]
 800b88c:	001c      	movs	r4, r3
 800b88e:	4b2b      	ldr	r3, [pc, #172]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b890:	7b9b      	ldrb	r3, [r3, #14]
 800b892:	0018      	movs	r0, r3
 800b894:	4b2a      	ldr	r3, [pc, #168]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b896:	220e      	movs	r2, #14
 800b898:	5e9b      	ldrsh	r3, [r3, r2]
 800b89a:	4a33      	ldr	r2, [pc, #204]	@ (800b968 <BMP280_get_calibration+0x2ec>)
 800b89c:	492a      	ldr	r1, [pc, #168]	@ (800b948 <BMP280_get_calibration+0x2cc>)
 800b89e:	9301      	str	r3, [sp, #4]
 800b8a0:	9000      	str	r0, [sp, #0]
 800b8a2:	0023      	movs	r3, r4
 800b8a4:	2003      	movs	r0, #3
 800b8a6:	f008 fbd5 	bl	8014054 <CreateLine>
  Debug("bmpData[17] 0x%02X, bmpData[16] 0x%02X, dig.T1 = %d", bmpData[17], bmpData[16], dig.P6);
 800b8aa:	4b24      	ldr	r3, [pc, #144]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b8ac:	7c5b      	ldrb	r3, [r3, #17]
 800b8ae:	001c      	movs	r4, r3
 800b8b0:	4b22      	ldr	r3, [pc, #136]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b8b2:	7c1b      	ldrb	r3, [r3, #16]
 800b8b4:	0018      	movs	r0, r3
 800b8b6:	4b22      	ldr	r3, [pc, #136]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b8b8:	2210      	movs	r2, #16
 800b8ba:	5e9b      	ldrsh	r3, [r3, r2]
 800b8bc:	4a2b      	ldr	r2, [pc, #172]	@ (800b96c <BMP280_get_calibration+0x2f0>)
 800b8be:	4922      	ldr	r1, [pc, #136]	@ (800b948 <BMP280_get_calibration+0x2cc>)
 800b8c0:	9301      	str	r3, [sp, #4]
 800b8c2:	9000      	str	r0, [sp, #0]
 800b8c4:	0023      	movs	r3, r4
 800b8c6:	2003      	movs	r0, #3
 800b8c8:	f008 fbc4 	bl	8014054 <CreateLine>
  Debug("bmpData[19] 0x%02X, bmpData[18] 0x%02X, dig.T1 = %d", bmpData[19], bmpData[18], dig.P7);
 800b8cc:	4b1b      	ldr	r3, [pc, #108]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b8ce:	7cdb      	ldrb	r3, [r3, #19]
 800b8d0:	001c      	movs	r4, r3
 800b8d2:	4b1a      	ldr	r3, [pc, #104]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b8d4:	7c9b      	ldrb	r3, [r3, #18]
 800b8d6:	0018      	movs	r0, r3
 800b8d8:	4b19      	ldr	r3, [pc, #100]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b8da:	2212      	movs	r2, #18
 800b8dc:	5e9b      	ldrsh	r3, [r3, r2]
 800b8de:	4a24      	ldr	r2, [pc, #144]	@ (800b970 <BMP280_get_calibration+0x2f4>)
 800b8e0:	4919      	ldr	r1, [pc, #100]	@ (800b948 <BMP280_get_calibration+0x2cc>)
 800b8e2:	9301      	str	r3, [sp, #4]
 800b8e4:	9000      	str	r0, [sp, #0]
 800b8e6:	0023      	movs	r3, r4
 800b8e8:	2003      	movs	r0, #3
 800b8ea:	f008 fbb3 	bl	8014054 <CreateLine>
  Debug("bmpData[21] 0x%02X, bmpData[20] 0x%02X, dig.T1 = %d", bmpData[21], bmpData[20], dig.P8);
 800b8ee:	4b13      	ldr	r3, [pc, #76]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b8f0:	7d5b      	ldrb	r3, [r3, #21]
 800b8f2:	001c      	movs	r4, r3
 800b8f4:	4b11      	ldr	r3, [pc, #68]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b8f6:	7d1b      	ldrb	r3, [r3, #20]
 800b8f8:	0018      	movs	r0, r3
 800b8fa:	4b11      	ldr	r3, [pc, #68]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b8fc:	2214      	movs	r2, #20
 800b8fe:	5e9b      	ldrsh	r3, [r3, r2]
 800b900:	4a1c      	ldr	r2, [pc, #112]	@ (800b974 <BMP280_get_calibration+0x2f8>)
 800b902:	4911      	ldr	r1, [pc, #68]	@ (800b948 <BMP280_get_calibration+0x2cc>)
 800b904:	9301      	str	r3, [sp, #4]
 800b906:	9000      	str	r0, [sp, #0]
 800b908:	0023      	movs	r3, r4
 800b90a:	2003      	movs	r0, #3
 800b90c:	f008 fba2 	bl	8014054 <CreateLine>
  Debug("bmpData[23] 0x%02X, bmpData[22] 0x%02X, dig.T1 = %d", bmpData[23], bmpData[22], dig.P9);
 800b910:	4b0a      	ldr	r3, [pc, #40]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b912:	7ddb      	ldrb	r3, [r3, #23]
 800b914:	001c      	movs	r4, r3
 800b916:	4b09      	ldr	r3, [pc, #36]	@ (800b93c <BMP280_get_calibration+0x2c0>)
 800b918:	7d9b      	ldrb	r3, [r3, #22]
 800b91a:	0018      	movs	r0, r3
 800b91c:	4b08      	ldr	r3, [pc, #32]	@ (800b940 <BMP280_get_calibration+0x2c4>)
 800b91e:	2216      	movs	r2, #22
 800b920:	5e9b      	ldrsh	r3, [r3, r2]
 800b922:	4a15      	ldr	r2, [pc, #84]	@ (800b978 <BMP280_get_calibration+0x2fc>)
 800b924:	4908      	ldr	r1, [pc, #32]	@ (800b948 <BMP280_get_calibration+0x2cc>)
 800b926:	9301      	str	r3, [sp, #4]
 800b928:	9000      	str	r0, [sp, #0]
 800b92a:	0023      	movs	r3, r4
 800b92c:	2003      	movs	r0, #3
 800b92e:	f008 fb91 	bl	8014054 <CreateLine>
}
 800b932:	46c0      	nop			@ (mov r8, r8)
 800b934:	46bd      	mov	sp, r7
 800b936:	b001      	add	sp, #4
 800b938:	bd90      	pop	{r4, r7, pc}
 800b93a:	46c0      	nop			@ (mov r8, r8)
 800b93c:	20000ecc 	.word	0x20000ecc
 800b940:	20000e9c 	.word	0x20000e9c
 800b944:	0802c858 	.word	0x0802c858
 800b948:	0802c874 	.word	0x0802c874
 800b94c:	0802c878 	.word	0x0802c878
 800b950:	0802c8ac 	.word	0x0802c8ac
 800b954:	0802c8e0 	.word	0x0802c8e0
 800b958:	0802c914 	.word	0x0802c914
 800b95c:	0802c948 	.word	0x0802c948
 800b960:	0802c97c 	.word	0x0802c97c
 800b964:	0802c9b0 	.word	0x0802c9b0
 800b968:	0802c9e4 	.word	0x0802c9e4
 800b96c:	0802ca18 	.word	0x0802ca18
 800b970:	0802ca4c 	.word	0x0802ca4c
 800b974:	0802ca80 	.word	0x0802ca80
 800b978:	0802cab4 	.word	0x0802cab4

0800b97c <BMP280_probe>:

static bool BMP280_probe() {
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af02      	add	r7, sp, #8
    int8_t rslt;
    uint8_t bmpData;
    /* Read the chip-id of bmp280 sensor */
    bmp280I2Caddr = BMP280_ADDRESS;
 800b982:	4b34      	ldr	r3, [pc, #208]	@ (800ba54 <BMP280_probe+0xd8>)
 800b984:	2276      	movs	r2, #118	@ 0x76
 800b986:	701a      	strb	r2, [r3, #0]
    rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b988:	1dba      	adds	r2, r7, #6
 800b98a:	2301      	movs	r3, #1
 800b98c:	2101      	movs	r1, #1
 800b98e:	20d0      	movs	r0, #208	@ 0xd0
 800b990:	f7ff fe0a 	bl	800b5a8 <ReadMemRegister>
 800b994:	0003      	movs	r3, r0
 800b996:	001a      	movs	r2, r3
 800b998:	1dfb      	adds	r3, r7, #7
 800b99a:	701a      	strb	r2, [r3, #0]
    if (rslt && (bmpData != 0)) {
 800b99c:	1dfb      	adds	r3, r7, #7
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	b25b      	sxtb	r3, r3
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00a      	beq.n	800b9bc <BMP280_probe+0x40>
 800b9a6:	1dbb      	adds	r3, r7, #6
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d006      	beq.n	800b9bc <BMP280_probe+0x40>
      Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800b9ae:	1dbb      	adds	r3, r7, #6
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	4a29      	ldr	r2, [pc, #164]	@ (800ba58 <BMP280_probe+0xdc>)
 800b9b4:	4929      	ldr	r1, [pc, #164]	@ (800ba5c <BMP280_probe+0xe0>)
 800b9b6:	2003      	movs	r0, #3
 800b9b8:	f008 fb4c 	bl	8014054 <CreateLine>
    }
    if (bmpData != BMP280_CHIP_ID) {
 800b9bc:	1dbb      	adds	r3, r7, #6
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	2b58      	cmp	r3, #88	@ 0x58
 800b9c2:	d01f      	beq.n	800ba04 <BMP280_probe+0x88>
      bmp280I2Caddr++;
 800b9c4:	4b23      	ldr	r3, [pc, #140]	@ (800ba54 <BMP280_probe+0xd8>)
 800b9c6:	781b      	ldrb	r3, [r3, #0]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	b2da      	uxtb	r2, r3
 800b9cc:	4b21      	ldr	r3, [pc, #132]	@ (800ba54 <BMP280_probe+0xd8>)
 800b9ce:	701a      	strb	r2, [r3, #0]
      rslt = ReadMemRegister(BMP280_REG_CHIP_ID, 1, &bmpData, 1);
 800b9d0:	1dba      	adds	r2, r7, #6
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	2101      	movs	r1, #1
 800b9d6:	20d0      	movs	r0, #208	@ 0xd0
 800b9d8:	f7ff fde6 	bl	800b5a8 <ReadMemRegister>
 800b9dc:	0003      	movs	r3, r0
 800b9de:	001a      	movs	r2, r3
 800b9e0:	1dfb      	adds	r3, r7, #7
 800b9e2:	701a      	strb	r2, [r3, #0]
      if (rslt && (bmpData != 0)) {
 800b9e4:	1dfb      	adds	r3, r7, #7
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	b25b      	sxtb	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00a      	beq.n	800ba04 <BMP280_probe+0x88>
 800b9ee:	1dbb      	adds	r3, r7, #6
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d006      	beq.n	800ba04 <BMP280_probe+0x88>
        Debug("BMP280 chip_id read on secondary address 0x%02X", bmpData);
 800b9f6:	1dbb      	adds	r3, r7, #6
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	4a17      	ldr	r2, [pc, #92]	@ (800ba58 <BMP280_probe+0xdc>)
 800b9fc:	4917      	ldr	r1, [pc, #92]	@ (800ba5c <BMP280_probe+0xe0>)
 800b9fe:	2003      	movs	r0, #3
 800ba00:	f008 fb28 	bl	8014054 <CreateLine>
      }
    }
    if (bmpData == BMP280_CHIP_ID) {
 800ba04:	1dbb      	adds	r3, r7, #6
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	2b58      	cmp	r3, #88	@ 0x58
 800ba0a:	d110      	bne.n	800ba2e <BMP280_probe+0xb2>
      Info("BMP280 with chip_id 0x%02X found at I2C address: 0x%02X", bmpData, bmp280I2Caddr);
 800ba0c:	1dbb      	adds	r3, r7, #6
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	0018      	movs	r0, r3
 800ba12:	4b10      	ldr	r3, [pc, #64]	@ (800ba54 <BMP280_probe+0xd8>)
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	4a12      	ldr	r2, [pc, #72]	@ (800ba60 <BMP280_probe+0xe4>)
 800ba18:	4912      	ldr	r1, [pc, #72]	@ (800ba64 <BMP280_probe+0xe8>)
 800ba1a:	9300      	str	r3, [sp, #0]
 800ba1c:	0003      	movs	r3, r0
 800ba1e:	2002      	movs	r0, #2
 800ba20:	f008 fb18 	bl	8014054 <CreateLine>
      BMP280_reset(); // get an initial state
 800ba24:	f7ff fe0c 	bl	800b640 <BMP280_reset>
      BMP280_get_calibration();
 800ba28:	f7ff fe28 	bl	800b67c <BMP280_get_calibration>
 800ba2c:	e008      	b.n	800ba40 <BMP280_probe+0xc4>
    }
    else {
      bmp280I2Caddr = 0;
 800ba2e:	4b09      	ldr	r3, [pc, #36]	@ (800ba54 <BMP280_probe+0xd8>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	701a      	strb	r2, [r3, #0]
      Error("BMP280 not found");
 800ba34:	4a0c      	ldr	r2, [pc, #48]	@ (800ba68 <BMP280_probe+0xec>)
 800ba36:	4b0d      	ldr	r3, [pc, #52]	@ (800ba6c <BMP280_probe+0xf0>)
 800ba38:	0019      	movs	r1, r3
 800ba3a:	2001      	movs	r0, #1
 800ba3c:	f008 fb0a 	bl	8014054 <CreateLine>
    }
    return bmp280I2Caddr;
 800ba40:	4b04      	ldr	r3, [pc, #16]	@ (800ba54 <BMP280_probe+0xd8>)
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	1e5a      	subs	r2, r3, #1
 800ba46:	4193      	sbcs	r3, r2
 800ba48:	b2db      	uxtb	r3, r3
}
 800ba4a:	0018      	movs	r0, r3
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	b002      	add	sp, #8
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	46c0      	nop			@ (mov r8, r8)
 800ba54:	200000a0 	.word	0x200000a0
 800ba58:	0802cae8 	.word	0x0802cae8
 800ba5c:	0802c874 	.word	0x0802c874
 800ba60:	0802cb18 	.word	0x0802cb18
 800ba64:	0802c854 	.word	0x0802c854
 800ba68:	0802cb50 	.word	0x0802cb50
 800ba6c:	0802cb64 	.word	0x0802cb64

0800ba70 <BMP280_DeviceConnected>:

bool BMP280_DeviceConnected() {
 800ba70:	b580      	push	{r7, lr}
 800ba72:	af00      	add	r7, sp, #0
  return BMP280_probe();
 800ba74:	f7ff ff82 	bl	800b97c <BMP280_probe>
 800ba78:	0003      	movs	r3, r0
}
 800ba7a:	0018      	movs	r0, r3
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <BMP_Init>:

void BMP_Init(I2CReadMEM readMemFunction, I2CWriteMEM writeMemFunction) {
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  ReadMemFunction = readMemFunction;
 800ba8a:	4b05      	ldr	r3, [pc, #20]	@ (800baa0 <BMP_Init+0x20>)
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	601a      	str	r2, [r3, #0]
  WriteMemFunction = writeMemFunction;
 800ba90:	4b04      	ldr	r3, [pc, #16]	@ (800baa4 <BMP_Init+0x24>)
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	601a      	str	r2, [r3, #0]
}
 800ba96:	46c0      	nop			@ (mov r8, r8)
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	b002      	add	sp, #8
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	46c0      	nop			@ (mov r8, r8)
 800baa0:	20000e98 	.word	0x20000e98
 800baa4:	20000e94 	.word	0x20000e94

0800baa8 <BMP280_set_config>:


static bool BMP280_set_config() {
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t data = (BMP280_T_SB_500 | BMP280_FILTER_4 | BMP280_SPI_OFF);
 800baae:	1dbb      	adds	r3, r7, #6
 800bab0:	228c      	movs	r2, #140	@ 0x8c
 800bab2:	701a      	strb	r2, [r3, #0]
  rslt = WriteMemRegister(BMP280_REG_CONFIG, 1, &data, 1);
 800bab4:	1dba      	adds	r2, r7, #6
 800bab6:	2301      	movs	r3, #1
 800bab8:	2101      	movs	r1, #1
 800baba:	20f5      	movs	r0, #245	@ 0xf5
 800babc:	f7ff fd44 	bl	800b548 <WriteMemRegister>
 800bac0:	0003      	movs	r3, r0
 800bac2:	001a      	movs	r2, r3
 800bac4:	1dfb      	adds	r3, r7, #7
 800bac6:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800bac8:	f009 f83c 	bl	8014b44 <HAL_GetTick>
 800bacc:	0003      	movs	r3, r0
 800bace:	330a      	adds	r3, #10
 800bad0:	001a      	movs	r2, r3
 800bad2:	4b06      	ldr	r3, [pc, #24]	@ (800baec <BMP280_set_config+0x44>)
 800bad4:	601a      	str	r2, [r3, #0]
  return rslt;
 800bad6:	1dfb      	adds	r3, r7, #7
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	b25b      	sxtb	r3, r3
 800badc:	1e5a      	subs	r2, r3, #1
 800bade:	4193      	sbcs	r3, r2
 800bae0:	b2db      	uxtb	r3, r3
}
 800bae2:	0018      	movs	r0, r3
 800bae4:	46bd      	mov	sp, r7
 800bae6:	b002      	add	sp, #8
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	46c0      	nop			@ (mov r8, r8)
 800baec:	20000ec4 	.word	0x20000ec4

0800baf0 <BMP280_set_mode>:

void BMP280_set_modus(uint8_t modus) {
  mode = modus;
}

static bool BMP280_set_mode() {
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData = BMP280_MEAS_RDY;
 800baf6:	1dbb      	adds	r3, r7, #6
 800baf8:	2208      	movs	r2, #8
 800bafa:	701a      	strb	r2, [r3, #0]
  uint8_t data = (BMP280_OSRS_T_2 | BMP280_OSRS_P_4 | mode);
 800bafc:	4b22      	ldr	r3, [pc, #136]	@ (800bb88 <BMP280_set_mode+0x98>)
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	224c      	movs	r2, #76	@ 0x4c
 800bb02:	4313      	orrs	r3, r2
 800bb04:	b2da      	uxtb	r2, r3
 800bb06:	1d7b      	adds	r3, r7, #5
 800bb08:	701a      	strb	r2, [r3, #0]
//  Debug("Operation mode = %s", mode==0?"sleep":mode==3?"normal":"forced");
  rslt = WriteMemRegister(BMP280_REG_CTRL_MEAS, 1, &data, 1);
 800bb0a:	1d7a      	adds	r2, r7, #5
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	2101      	movs	r1, #1
 800bb10:	20f4      	movs	r0, #244	@ 0xf4
 800bb12:	f7ff fd19 	bl	800b548 <WriteMemRegister>
 800bb16:	0003      	movs	r3, r0
 800bb18:	001a      	movs	r2, r3
 800bb1a:	1dfb      	adds	r3, r7, #7
 800bb1c:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 1000;
 800bb1e:	f009 f811 	bl	8014b44 <HAL_GetTick>
 800bb22:	0003      	movs	r3, r0
 800bb24:	22fa      	movs	r2, #250	@ 0xfa
 800bb26:	0092      	lsls	r2, r2, #2
 800bb28:	189a      	adds	r2, r3, r2
 800bb2a:	4b18      	ldr	r3, [pc, #96]	@ (800bb8c <BMP280_set_mode+0x9c>)
 800bb2c:	601a      	str	r2, [r3, #0]
  while (bmpData & BMP280_MEAS_RDY) {
 800bb2e:	e016      	b.n	800bb5e <BMP280_set_mode+0x6e>
    ReadMemRegister(BMP280_REG_STATUS, 1, &bmpData, 1);
 800bb30:	1dba      	adds	r2, r7, #6
 800bb32:	2301      	movs	r3, #1
 800bb34:	2101      	movs	r1, #1
 800bb36:	20f3      	movs	r0, #243	@ 0xf3
 800bb38:	f7ff fd36 	bl	800b5a8 <ReadMemRegister>
    if(TimestampIsReached(BMP280TimeStamp)){
 800bb3c:	4b13      	ldr	r3, [pc, #76]	@ (800bb8c <BMP280_set_mode+0x9c>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	0018      	movs	r0, r3
 800bb42:	f008 fa31 	bl	8013fa8 <TimestampIsReached>
 800bb46:	1e03      	subs	r3, r0, #0
 800bb48:	d006      	beq.n	800bb58 <BMP280_set_mode+0x68>
      Error("BMP280 measurement was blocking, cancelled.");
 800bb4a:	4a11      	ldr	r2, [pc, #68]	@ (800bb90 <BMP280_set_mode+0xa0>)
 800bb4c:	4b11      	ldr	r3, [pc, #68]	@ (800bb94 <BMP280_set_mode+0xa4>)
 800bb4e:	0019      	movs	r1, r3
 800bb50:	2001      	movs	r0, #1
 800bb52:	f008 fa7f 	bl	8014054 <CreateLine>
      break;
 800bb56:	e008      	b.n	800bb6a <BMP280_set_mode+0x7a>
    }
    HAL_Delay(1);
 800bb58:	2001      	movs	r0, #1
 800bb5a:	f008 fffd 	bl	8014b58 <HAL_Delay>
  while (bmpData & BMP280_MEAS_RDY) {
 800bb5e:	1dbb      	adds	r3, r7, #6
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	001a      	movs	r2, r3
 800bb64:	2308      	movs	r3, #8
 800bb66:	4013      	ands	r3, r2
 800bb68:	d1e2      	bne.n	800bb30 <BMP280_set_mode+0x40>
  }
  BMP280TimeStamp = HAL_GetTick();
 800bb6a:	f008 ffeb 	bl	8014b44 <HAL_GetTick>
 800bb6e:	0002      	movs	r2, r0
 800bb70:	4b06      	ldr	r3, [pc, #24]	@ (800bb8c <BMP280_set_mode+0x9c>)
 800bb72:	601a      	str	r2, [r3, #0]
  return rslt;
 800bb74:	1dfb      	adds	r3, r7, #7
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	b25b      	sxtb	r3, r3
 800bb7a:	1e5a      	subs	r2, r3, #1
 800bb7c:	4193      	sbcs	r3, r2
 800bb7e:	b2db      	uxtb	r3, r3
}
 800bb80:	0018      	movs	r0, r3
 800bb82:	46bd      	mov	sp, r7
 800bb84:	b002      	add	sp, #8
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	200000a1 	.word	0x200000a1
 800bb8c:	20000ec4 	.word	0x20000ec4
 800bb90:	0802cb68 	.word	0x0802cb68
 800bb94:	0802cb64 	.word	0x0802cb64

0800bb98 <BMP280_get_mode>:


static uint8_t BMP280_get_mode() {
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
  int8_t rslt;
  uint8_t bmpData;
  rslt = ReadMemRegister(BMP280_REG_CTRL_MEAS, 1, &bmpData, 1);
 800bb9e:	1dba      	adds	r2, r7, #6
 800bba0:	2301      	movs	r3, #1
 800bba2:	2101      	movs	r1, #1
 800bba4:	20f4      	movs	r0, #244	@ 0xf4
 800bba6:	f7ff fcff 	bl	800b5a8 <ReadMemRegister>
 800bbaa:	0003      	movs	r3, r0
 800bbac:	001a      	movs	r2, r3
 800bbae:	1dfb      	adds	r3, r7, #7
 800bbb0:	701a      	strb	r2, [r3, #0]
  bmpData &= BMP280_NORMAL_MODE; //BMP280_NORMAL_MODE has all mode bits set 0x03;
 800bbb2:	1dbb      	adds	r3, r7, #6
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	2203      	movs	r2, #3
 800bbb8:	4013      	ands	r3, r2
 800bbba:	b2da      	uxtb	r2, r3
 800bbbc:	1dbb      	adds	r3, r7, #6
 800bbbe:	701a      	strb	r2, [r3, #0]
  BMP280TimeStamp = HAL_GetTick() + 10;
 800bbc0:	f008 ffc0 	bl	8014b44 <HAL_GetTick>
 800bbc4:	0003      	movs	r3, r0
 800bbc6:	330a      	adds	r3, #10
 800bbc8:	001a      	movs	r2, r3
 800bbca:	4b08      	ldr	r3, [pc, #32]	@ (800bbec <BMP280_get_mode+0x54>)
 800bbcc:	601a      	str	r2, [r3, #0]
  if (!rslt) {
 800bbce:	1dfb      	adds	r3, r7, #7
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	b25b      	sxtb	r3, r3
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d102      	bne.n	800bbde <BMP280_get_mode+0x46>
    bmpData = 255;
 800bbd8:	1dbb      	adds	r3, r7, #6
 800bbda:	22ff      	movs	r2, #255	@ 0xff
 800bbdc:	701a      	strb	r2, [r3, #0]
  }
  return bmpData;
 800bbde:	1dbb      	adds	r3, r7, #6
 800bbe0:	781b      	ldrb	r3, [r3, #0]
}
 800bbe2:	0018      	movs	r0, r3
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	b002      	add	sp, #8
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	46c0      	nop			@ (mov r8, r8)
 800bbec:	20000ec4 	.word	0x20000ec4

0800bbf0 <BMP280_get_measurement_values>:


static bool BMP280_get_measurement_values() {
 800bbf0:	b5b0      	push	{r4, r5, r7, lr}
 800bbf2:	b088      	sub	sp, #32
 800bbf4:	af04      	add	r7, sp, #16
  int8_t rslt;
  uint8_t bmpData[8];
  rslt = ReadMemRegister(BMP280_REG_DATA, 1, &bmpData[0], 6);
 800bbf6:	1d3a      	adds	r2, r7, #4
 800bbf8:	2306      	movs	r3, #6
 800bbfa:	2101      	movs	r1, #1
 800bbfc:	20f7      	movs	r0, #247	@ 0xf7
 800bbfe:	f7ff fcd3 	bl	800b5a8 <ReadMemRegister>
 800bc02:	0003      	movs	r3, r0
 800bc04:	001a      	movs	r2, r3
 800bc06:	230f      	movs	r3, #15
 800bc08:	18fb      	adds	r3, r7, r3
 800bc0a:	701a      	strb	r2, [r3, #0]
// check for valid value
  if (bmpData[0] != 0x80) {
 800bc0c:	1d3b      	adds	r3, r7, #4
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	2b80      	cmp	r3, #128	@ 0x80
 800bc12:	d013      	beq.n	800bc3c <BMP280_get_measurement_values+0x4c>
    raw_mpa = (int32_t)((((uint32_t)bmpData[0]) << 12) + (((uint32_t)bmpData[1]) << 4) + (((uint32_t)bmpData[2]) >> 4));
 800bc14:	1d3b      	adds	r3, r7, #4
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	031a      	lsls	r2, r3, #12
 800bc1a:	1d3b      	adds	r3, r7, #4
 800bc1c:	785b      	ldrb	r3, [r3, #1]
 800bc1e:	011b      	lsls	r3, r3, #4
 800bc20:	18d3      	adds	r3, r2, r3
 800bc22:	1d3a      	adds	r2, r7, #4
 800bc24:	7892      	ldrb	r2, [r2, #2]
 800bc26:	0912      	lsrs	r2, r2, #4
 800bc28:	b2d2      	uxtb	r2, r2
 800bc2a:	189b      	adds	r3, r3, r2
 800bc2c:	001a      	movs	r2, r3
 800bc2e:	4b2e      	ldr	r3, [pc, #184]	@ (800bce8 <BMP280_get_measurement_values+0xf8>)
 800bc30:	601a      	str	r2, [r3, #0]
    Error("BMP280 Invalid read of barometric pressure.");
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
    SetAllBlueLED();
    return false;
  }
  if (bmpData[3] != 0x80) {
 800bc32:	1d3b      	adds	r3, r7, #4
 800bc34:	78db      	ldrb	r3, [r3, #3]
 800bc36:	2b80      	cmp	r3, #128	@ 0x80
 800bc38:	d035      	beq.n	800bca6 <BMP280_get_measurement_values+0xb6>
 800bc3a:	e01d      	b.n	800bc78 <BMP280_get_measurement_values+0x88>
    Error("BMP280 Invalid read of barometric pressure.");
 800bc3c:	4a2b      	ldr	r2, [pc, #172]	@ (800bcec <BMP280_get_measurement_values+0xfc>)
 800bc3e:	4b2c      	ldr	r3, [pc, #176]	@ (800bcf0 <BMP280_get_measurement_values+0x100>)
 800bc40:	0019      	movs	r1, r3
 800bc42:	2001      	movs	r0, #1
 800bc44:	f008 fa06 	bl	8014054 <CreateLine>
    Debug("bmpData[0] 0x%02X, bmpData[1] 0x%02X, bmpData[3] 0x%02X, VALUE=0x%06X", bmpData[0], bmpData[1], bmpData[2], raw_mpa);
 800bc48:	1d3b      	adds	r3, r7, #4
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	001d      	movs	r5, r3
 800bc4e:	1d3b      	adds	r3, r7, #4
 800bc50:	785b      	ldrb	r3, [r3, #1]
 800bc52:	0018      	movs	r0, r3
 800bc54:	1d3b      	adds	r3, r7, #4
 800bc56:	789b      	ldrb	r3, [r3, #2]
 800bc58:	001c      	movs	r4, r3
 800bc5a:	4b23      	ldr	r3, [pc, #140]	@ (800bce8 <BMP280_get_measurement_values+0xf8>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a25      	ldr	r2, [pc, #148]	@ (800bcf4 <BMP280_get_measurement_values+0x104>)
 800bc60:	4925      	ldr	r1, [pc, #148]	@ (800bcf8 <BMP280_get_measurement_values+0x108>)
 800bc62:	9302      	str	r3, [sp, #8]
 800bc64:	9401      	str	r4, [sp, #4]
 800bc66:	9000      	str	r0, [sp, #0]
 800bc68:	002b      	movs	r3, r5
 800bc6a:	2003      	movs	r0, #3
 800bc6c:	f008 f9f2 	bl	8014054 <CreateLine>
    SetAllBlueLED();
 800bc70:	f007 f900 	bl	8012e74 <SetAllBlueLED>
    return false;
 800bc74:	2300      	movs	r3, #0
 800bc76:	e033      	b.n	800bce0 <BMP280_get_measurement_values+0xf0>
    raw_temp = (int32_t)((((uint32_t)bmpData[3]) << 12) + (((uint32_t)bmpData[4]) << 4) + (((uint32_t)bmpData[5]) >> 4));
 800bc78:	1d3b      	adds	r3, r7, #4
 800bc7a:	78db      	ldrb	r3, [r3, #3]
 800bc7c:	031a      	lsls	r2, r3, #12
 800bc7e:	1d3b      	adds	r3, r7, #4
 800bc80:	791b      	ldrb	r3, [r3, #4]
 800bc82:	011b      	lsls	r3, r3, #4
 800bc84:	18d3      	adds	r3, r2, r3
 800bc86:	1d3a      	adds	r2, r7, #4
 800bc88:	7952      	ldrb	r2, [r2, #5]
 800bc8a:	0912      	lsrs	r2, r2, #4
 800bc8c:	b2d2      	uxtb	r2, r2
 800bc8e:	189b      	adds	r3, r3, r2
 800bc90:	001a      	movs	r2, r3
 800bc92:	4b1a      	ldr	r3, [pc, #104]	@ (800bcfc <BMP280_get_measurement_values+0x10c>)
 800bc94:	601a      	str	r2, [r3, #0]
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
    SetAllBlueLED();
    return false;
  }
//  Debug("raw_mpa: %ld, raw_temp: %ld ", raw_mpa, raw_temp);
  return rslt;
 800bc96:	230f      	movs	r3, #15
 800bc98:	18fb      	adds	r3, r7, r3
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	b25b      	sxtb	r3, r3
 800bc9e:	1e5a      	subs	r2, r3, #1
 800bca0:	4193      	sbcs	r3, r2
 800bca2:	b2db      	uxtb	r3, r3
 800bca4:	e01c      	b.n	800bce0 <BMP280_get_measurement_values+0xf0>
    Error("BMP280 Invalid read of temperature.");
 800bca6:	4a16      	ldr	r2, [pc, #88]	@ (800bd00 <BMP280_get_measurement_values+0x110>)
 800bca8:	4b11      	ldr	r3, [pc, #68]	@ (800bcf0 <BMP280_get_measurement_values+0x100>)
 800bcaa:	0019      	movs	r1, r3
 800bcac:	2001      	movs	r0, #1
 800bcae:	f008 f9d1 	bl	8014054 <CreateLine>
    Debug("bmpData[3] 0x%02X, bmpData[4] 0x%02X, bmpData[5] 0x%02X, VALUE=0x%06X", bmpData[3], bmpData[4], bmpData[5], raw_temp);
 800bcb2:	1d3b      	adds	r3, r7, #4
 800bcb4:	78db      	ldrb	r3, [r3, #3]
 800bcb6:	001d      	movs	r5, r3
 800bcb8:	1d3b      	adds	r3, r7, #4
 800bcba:	791b      	ldrb	r3, [r3, #4]
 800bcbc:	0018      	movs	r0, r3
 800bcbe:	1d3b      	adds	r3, r7, #4
 800bcc0:	795b      	ldrb	r3, [r3, #5]
 800bcc2:	001c      	movs	r4, r3
 800bcc4:	4b0d      	ldr	r3, [pc, #52]	@ (800bcfc <BMP280_get_measurement_values+0x10c>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a0e      	ldr	r2, [pc, #56]	@ (800bd04 <BMP280_get_measurement_values+0x114>)
 800bcca:	490b      	ldr	r1, [pc, #44]	@ (800bcf8 <BMP280_get_measurement_values+0x108>)
 800bccc:	9302      	str	r3, [sp, #8]
 800bcce:	9401      	str	r4, [sp, #4]
 800bcd0:	9000      	str	r0, [sp, #0]
 800bcd2:	002b      	movs	r3, r5
 800bcd4:	2003      	movs	r0, #3
 800bcd6:	f008 f9bd 	bl	8014054 <CreateLine>
    SetAllBlueLED();
 800bcda:	f007 f8cb 	bl	8012e74 <SetAllBlueLED>
    return false;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	0018      	movs	r0, r3
 800bce2:	46bd      	mov	sp, r7
 800bce4:	b004      	add	sp, #16
 800bce6:	bdb0      	pop	{r4, r5, r7, pc}
 800bce8:	20000ec0 	.word	0x20000ec0
 800bcec:	0802cb94 	.word	0x0802cb94
 800bcf0:	0802cb64 	.word	0x0802cb64
 800bcf4:	0802cbc0 	.word	0x0802cbc0
 800bcf8:	0802c874 	.word	0x0802c874
 800bcfc:	20000ebc 	.word	0x20000ebc
 800bd00:	0802cc08 	.word	0x0802cc08
 800bd04:	0802cc2c 	.word	0x0802cc2c

0800bd08 <BMP280_calc_temperature>:


// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// reads temperature value from internal bmp280 registers in centigrade*/
// copied from datasheet
static float BMP280_calc_temperature() {
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0

  int32_t adc_T = raw_temp;
 800bd0e:	4b1e      	ldr	r3, [pc, #120]	@ (800bd88 <BMP280_calc_temperature+0x80>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	617b      	str	r3, [r7, #20]
  int32_t var1, var2, T;
  float airTemp;

  var1 = ((((adc_T >> 3) - ((int32_t)dig.T1 << 1))) * ((int32_t)dig.T2)) >> 11;
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	10da      	asrs	r2, r3, #3
 800bd18:	4b1c      	ldr	r3, [pc, #112]	@ (800bd8c <BMP280_calc_temperature+0x84>)
 800bd1a:	881b      	ldrh	r3, [r3, #0]
 800bd1c:	005b      	lsls	r3, r3, #1
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	4a1a      	ldr	r2, [pc, #104]	@ (800bd8c <BMP280_calc_temperature+0x84>)
 800bd22:	2102      	movs	r1, #2
 800bd24:	5e52      	ldrsh	r2, [r2, r1]
 800bd26:	4353      	muls	r3, r2
 800bd28:	12db      	asrs	r3, r3, #11
 800bd2a:	613b      	str	r3, [r7, #16]
  var2 = (((((adc_T >> 4) - ((int32_t)dig.T1)) * ((adc_T >> 4) - ((int32_t)dig.T1))) >> 12) * ((int32_t)dig.T3)) >> 14;
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	111b      	asrs	r3, r3, #4
 800bd30:	4a16      	ldr	r2, [pc, #88]	@ (800bd8c <BMP280_calc_temperature+0x84>)
 800bd32:	8812      	ldrh	r2, [r2, #0]
 800bd34:	1a9b      	subs	r3, r3, r2
 800bd36:	697a      	ldr	r2, [r7, #20]
 800bd38:	1112      	asrs	r2, r2, #4
 800bd3a:	4914      	ldr	r1, [pc, #80]	@ (800bd8c <BMP280_calc_temperature+0x84>)
 800bd3c:	8809      	ldrh	r1, [r1, #0]
 800bd3e:	1a52      	subs	r2, r2, r1
 800bd40:	4353      	muls	r3, r2
 800bd42:	131b      	asrs	r3, r3, #12
 800bd44:	4a11      	ldr	r2, [pc, #68]	@ (800bd8c <BMP280_calc_temperature+0x84>)
 800bd46:	2104      	movs	r1, #4
 800bd48:	5e52      	ldrsh	r2, [r2, r1]
 800bd4a:	4353      	muls	r3, r2
 800bd4c:	139b      	asrs	r3, r3, #14
 800bd4e:	60fb      	str	r3, [r7, #12]

  t_fine = var1 + var2;
 800bd50:	693a      	ldr	r2, [r7, #16]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	18d2      	adds	r2, r2, r3
 800bd56:	4b0e      	ldr	r3, [pc, #56]	@ (800bd90 <BMP280_calc_temperature+0x88>)
 800bd58:	601a      	str	r2, [r3, #0]
  T = (t_fine * 5 + 128) >> 8;
 800bd5a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd90 <BMP280_calc_temperature+0x88>)
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	0013      	movs	r3, r2
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	189b      	adds	r3, r3, r2
 800bd64:	3380      	adds	r3, #128	@ 0x80
 800bd66:	121b      	asrs	r3, r3, #8
 800bd68:	60bb      	str	r3, [r7, #8]
  airTemp = (float)T / 100.0;
 800bd6a:	68b8      	ldr	r0, [r7, #8]
 800bd6c:	f7f5 fd5c 	bl	8001828 <__aeabi_i2f>
 800bd70:	1c03      	adds	r3, r0, #0
 800bd72:	4908      	ldr	r1, [pc, #32]	@ (800bd94 <BMP280_calc_temperature+0x8c>)
 800bd74:	1c18      	adds	r0, r3, #0
 800bd76:	f7f4 ff95 	bl	8000ca4 <__aeabi_fdiv>
 800bd7a:	1c03      	adds	r3, r0, #0
 800bd7c:	607b      	str	r3, [r7, #4]
  return airTemp;
 800bd7e:	687b      	ldr	r3, [r7, #4]
}
 800bd80:	1c18      	adds	r0, r3, #0
 800bd82:	46bd      	mov	sp, r7
 800bd84:	b006      	add	sp, #24
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	20000ebc 	.word	0x20000ebc
 800bd8c:	20000e9c 	.word	0x20000e9c
 800bd90:	20000eb8 	.word	0x20000eb8
 800bd94:	42c80000 	.word	0x42c80000

0800bd98 <BMP280_calc_pressure>:


// Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
// reads pressure value from internal bmp280 registers in pascal
// copied from datasheet
static float BMP280_calc_pressure() {
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0

  int32_t adc_P = raw_mpa;
 800bd9e:	4b4e      	ldr	r3, [pc, #312]	@ (800bed8 <BMP280_calc_pressure+0x140>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	613b      	str	r3, [r7, #16]
  int32_t var1, var2;
  uint32_t p;
  float airhPa;

  var1 = (((int32_t) t_fine) >> 1) - (int32_t)64000;
 800bda4:	4b4d      	ldr	r3, [pc, #308]	@ (800bedc <BMP280_calc_pressure+0x144>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	105b      	asrs	r3, r3, #1
 800bdaa:	4a4d      	ldr	r2, [pc, #308]	@ (800bee0 <BMP280_calc_pressure+0x148>)
 800bdac:	4694      	mov	ip, r2
 800bdae:	4463      	add	r3, ip
 800bdb0:	60fb      	str	r3, [r7, #12]
  var2 = (((var1>>2) * (var1>>2)) >> 11) * ((int32_t) dig.P6);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	109b      	asrs	r3, r3, #2
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	1092      	asrs	r2, r2, #2
 800bdba:	4353      	muls	r3, r2
 800bdbc:	12db      	asrs	r3, r3, #11
 800bdbe:	4a49      	ldr	r2, [pc, #292]	@ (800bee4 <BMP280_calc_pressure+0x14c>)
 800bdc0:	2110      	movs	r1, #16
 800bdc2:	5e52      	ldrsh	r2, [r2, r1]
 800bdc4:	4353      	muls	r3, r2
 800bdc6:	60bb      	str	r3, [r7, #8]
  var2 = var2 + ((var1 * ((int32_t) dig.P5))<<1);
 800bdc8:	4b46      	ldr	r3, [pc, #280]	@ (800bee4 <BMP280_calc_pressure+0x14c>)
 800bdca:	220e      	movs	r2, #14
 800bdcc:	5e9b      	ldrsh	r3, [r3, r2]
 800bdce:	001a      	movs	r2, r3
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	4353      	muls	r3, r2
 800bdd4:	005b      	lsls	r3, r3, #1
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	18d3      	adds	r3, r2, r3
 800bdda:	60bb      	str	r3, [r7, #8]
  var2 = (var2>>2) + (((int32_t)dig.P4)<<16);
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	109a      	asrs	r2, r3, #2
 800bde0:	4b40      	ldr	r3, [pc, #256]	@ (800bee4 <BMP280_calc_pressure+0x14c>)
 800bde2:	210c      	movs	r1, #12
 800bde4:	5e5b      	ldrsh	r3, [r3, r1]
 800bde6:	041b      	lsls	r3, r3, #16
 800bde8:	18d3      	adds	r3, r2, r3
 800bdea:	60bb      	str	r3, [r7, #8]
  var1 = (((dig.P3 * (((var1>>2) * (var1>>2)) >> 13))>>3) + ((((int32_t) dig.P2) * var1)>>1))>>18;
 800bdec:	4b3d      	ldr	r3, [pc, #244]	@ (800bee4 <BMP280_calc_pressure+0x14c>)
 800bdee:	220a      	movs	r2, #10
 800bdf0:	5e9b      	ldrsh	r3, [r3, r2]
 800bdf2:	0019      	movs	r1, r3
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	109b      	asrs	r3, r3, #2
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	1092      	asrs	r2, r2, #2
 800bdfc:	4353      	muls	r3, r2
 800bdfe:	135b      	asrs	r3, r3, #13
 800be00:	434b      	muls	r3, r1
 800be02:	10da      	asrs	r2, r3, #3
 800be04:	4b37      	ldr	r3, [pc, #220]	@ (800bee4 <BMP280_calc_pressure+0x14c>)
 800be06:	2108      	movs	r1, #8
 800be08:	5e5b      	ldrsh	r3, [r3, r1]
 800be0a:	0019      	movs	r1, r3
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	434b      	muls	r3, r1
 800be10:	105b      	asrs	r3, r3, #1
 800be12:	18d3      	adds	r3, r2, r3
 800be14:	149b      	asrs	r3, r3, #18
 800be16:	60fb      	str	r3, [r7, #12]
  var1 = ((((32768 + var1)) * ((int32_t) dig.P1))>>15);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2280      	movs	r2, #128	@ 0x80
 800be1c:	0212      	lsls	r2, r2, #8
 800be1e:	4694      	mov	ip, r2
 800be20:	4463      	add	r3, ip
 800be22:	4a30      	ldr	r2, [pc, #192]	@ (800bee4 <BMP280_calc_pressure+0x14c>)
 800be24:	88d2      	ldrh	r2, [r2, #6]
 800be26:	4353      	muls	r3, r2
 800be28:	13db      	asrs	r3, r3, #15
 800be2a:	60fb      	str	r3, [r7, #12]

  /* Avoid exception caused by division with zero */
  if (var1 == 0) {
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d101      	bne.n	800be36 <BMP280_calc_pressure+0x9e>
    return 0;
 800be32:	2300      	movs	r3, #0
 800be34:	e04b      	b.n	800bece <BMP280_calc_pressure+0x136>
  }
  p = ((uint32_t)(((int32_t)(1048576) - adc_P) - (var2>>12))) * 3125;
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	2280      	movs	r2, #128	@ 0x80
 800be3a:	0352      	lsls	r2, r2, #13
 800be3c:	1ad2      	subs	r2, r2, r3
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	131b      	asrs	r3, r3, #12
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	001a      	movs	r2, r3
 800be46:	4b28      	ldr	r3, [pc, #160]	@ (800bee8 <BMP280_calc_pressure+0x150>)
 800be48:	4353      	muls	r3, r2
 800be4a:	617b      	str	r3, [r7, #20]

    /* Check for overflows against UINT32_MAX/2; if pres is left-shifted by 1 */
  if (p < 0x80000000)
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	db09      	blt.n	800be66 <BMP280_calc_pressure+0xce>
    {
      p = (p << 1) / ((uint32_t) var1);
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	0011      	movs	r1, r2
 800be5a:	0018      	movs	r0, r3
 800be5c:	f7f4 f9a2 	bl	80001a4 <__udivsi3>
 800be60:	0003      	movs	r3, r0
 800be62:	617b      	str	r3, [r7, #20]
 800be64:	e007      	b.n	800be76 <BMP280_calc_pressure+0xde>
    }
    else
    {
      p = (p / (uint32_t) var1) * 2;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	0019      	movs	r1, r3
 800be6a:	6978      	ldr	r0, [r7, #20]
 800be6c:	f7f4 f99a 	bl	80001a4 <__udivsi3>
 800be70:	0003      	movs	r3, r0
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	617b      	str	r3, [r7, #20]
    }
    var1 = (((int32_t) dig.P9) * ((int32_t) (((p>>3) * (p>>3))>>13)))>>12;
 800be76:	4b1b      	ldr	r3, [pc, #108]	@ (800bee4 <BMP280_calc_pressure+0x14c>)
 800be78:	2216      	movs	r2, #22
 800be7a:	5e9b      	ldrsh	r3, [r3, r2]
 800be7c:	0019      	movs	r1, r3
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	08db      	lsrs	r3, r3, #3
 800be82:	697a      	ldr	r2, [r7, #20]
 800be84:	08d2      	lsrs	r2, r2, #3
 800be86:	4353      	muls	r3, r2
 800be88:	0b5b      	lsrs	r3, r3, #13
 800be8a:	434b      	muls	r3, r1
 800be8c:	131b      	asrs	r3, r3, #12
 800be8e:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t) (p>>2)) * ((int32_t) dig.P8))>>13;
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	089b      	lsrs	r3, r3, #2
 800be94:	001a      	movs	r2, r3
 800be96:	4b13      	ldr	r3, [pc, #76]	@ (800bee4 <BMP280_calc_pressure+0x14c>)
 800be98:	2114      	movs	r1, #20
 800be9a:	5e5b      	ldrsh	r3, [r3, r1]
 800be9c:	4353      	muls	r3, r2
 800be9e:	135b      	asrs	r3, r3, #13
 800bea0:	60bb      	str	r3, [r7, #8]
    p = (uint32_t) ((int32_t)p + ((var1 + var2 + dig.P7)>>4));
 800bea2:	68fa      	ldr	r2, [r7, #12]
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	18d3      	adds	r3, r2, r3
 800bea8:	4a0e      	ldr	r2, [pc, #56]	@ (800bee4 <BMP280_calc_pressure+0x14c>)
 800beaa:	2112      	movs	r1, #18
 800beac:	5e52      	ldrsh	r2, [r2, r1]
 800beae:	189b      	adds	r3, r3, r2
 800beb0:	111a      	asrs	r2, r3, #4
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	18d3      	adds	r3, r2, r3
 800beb6:	617b      	str	r3, [r7, #20]
    airhPa = (float)p / 100.0;
 800beb8:	6978      	ldr	r0, [r7, #20]
 800beba:	f7f5 fd05 	bl	80018c8 <__aeabi_ui2f>
 800bebe:	1c03      	adds	r3, r0, #0
 800bec0:	490a      	ldr	r1, [pc, #40]	@ (800beec <BMP280_calc_pressure+0x154>)
 800bec2:	1c18      	adds	r0, r3, #0
 800bec4:	f7f4 feee 	bl	8000ca4 <__aeabi_fdiv>
 800bec8:	1c03      	adds	r3, r0, #0
 800beca:	607b      	str	r3, [r7, #4]
  return airhPa;
 800becc:	687b      	ldr	r3, [r7, #4]
}
 800bece:	1c18      	adds	r0, r3, #0
 800bed0:	46bd      	mov	sp, r7
 800bed2:	b006      	add	sp, #24
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	46c0      	nop			@ (mov r8, r8)
 800bed8:	20000ec0 	.word	0x20000ec0
 800bedc:	20000eb8 	.word	0x20000eb8
 800bee0:	ffff0600 	.word	0xffff0600
 800bee4:	20000e9c 	.word	0x20000e9c
 800bee8:	00000c35 	.word	0x00000c35
 800beec:	42c80000 	.word	0x42c80000

0800bef0 <BMP_Upkeep>:

BMP280State BMP_Upkeep(void) {
 800bef0:	b5b0      	push	{r4, r5, r7, lr}
 800bef2:	b088      	sub	sp, #32
 800bef4:	af04      	add	r7, sp, #16

  if(!TimestampIsReached(BMP280TimeStamp)){
 800bef6:	4bcc      	ldr	r3, [pc, #816]	@ (800c228 <BMP_Upkeep+0x338>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	0018      	movs	r0, r3
 800befc:	f008 f854 	bl	8013fa8 <TimestampIsReached>
 800bf00:	0003      	movs	r3, r0
 800bf02:	001a      	movs	r2, r3
 800bf04:	2301      	movs	r3, #1
 800bf06:	4053      	eors	r3, r2
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d002      	beq.n	800bf14 <BMP_Upkeep+0x24>
    return BMPState;
 800bf0e:	4bc7      	ldr	r3, [pc, #796]	@ (800c22c <BMP_Upkeep+0x33c>)
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	e1c2      	b.n	800c29a <BMP_Upkeep+0x3aa>
  }
  switch(BMPState) {
 800bf14:	4bc5      	ldr	r3, [pc, #788]	@ (800c22c <BMP_Upkeep+0x33c>)
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	2b09      	cmp	r3, #9
 800bf1a:	d900      	bls.n	800bf1e <BMP_Upkeep+0x2e>
 800bf1c:	e16d      	b.n	800c1fa <BMP_Upkeep+0x30a>
 800bf1e:	009a      	lsls	r2, r3, #2
 800bf20:	4bc3      	ldr	r3, [pc, #780]	@ (800c230 <BMP_Upkeep+0x340>)
 800bf22:	18d3      	adds	r3, r2, r3
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	469f      	mov	pc, r3
  case BMP_STATE_OFF:
    Debug("Measurements are turned off for barometric device BMP280.");
 800bf28:	4ac2      	ldr	r2, [pc, #776]	@ (800c234 <BMP_Upkeep+0x344>)
 800bf2a:	4bc3      	ldr	r3, [pc, #780]	@ (800c238 <BMP_Upkeep+0x348>)
 800bf2c:	0019      	movs	r1, r3
 800bf2e:	2003      	movs	r0, #3
 800bf30:	f008 f890 	bl	8014054 <CreateLine>
    BMP280TimeStamp = HAL_GetTick() + 780000;  // about 4 times an hour if powered
 800bf34:	f008 fe06 	bl	8014b44 <HAL_GetTick>
 800bf38:	0003      	movs	r3, r0
 800bf3a:	4ac0      	ldr	r2, [pc, #768]	@ (800c23c <BMP_Upkeep+0x34c>)
 800bf3c:	189a      	adds	r2, r3, r2
 800bf3e:	4bba      	ldr	r3, [pc, #744]	@ (800c228 <BMP_Upkeep+0x338>)
 800bf40:	601a      	str	r2, [r3, #0]
    if (weekday != offday) {  // try to enable device again
 800bf42:	4bbf      	ldr	r3, [pc, #764]	@ (800c240 <BMP_Upkeep+0x350>)
 800bf44:	781a      	ldrb	r2, [r3, #0]
 800bf46:	4bbf      	ldr	r3, [pc, #764]	@ (800c244 <BMP_Upkeep+0x354>)
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d100      	bne.n	800bf50 <BMP_Upkeep+0x60>
 800bf4e:	e160      	b.n	800c212 <BMP_Upkeep+0x322>
      BMPState = BMP_STATE_WAIT;
 800bf50:	4bb6      	ldr	r3, [pc, #728]	@ (800c22c <BMP_Upkeep+0x33c>)
 800bf52:	2208      	movs	r2, #8
 800bf54:	701a      	strb	r2, [r3, #0]
    }
    break;
 800bf56:	e15c      	b.n	800c212 <BMP_Upkeep+0x322>

  case BMP_STATE_INIT:
    if (getSensorLock() != FREE) {
 800bf58:	f002 f862 	bl	800e020 <getSensorLock>
 800bf5c:	1e03      	subs	r3, r0, #0
 800bf5e:	d000      	beq.n	800bf62 <BMP_Upkeep+0x72>
 800bf60:	e159      	b.n	800c216 <BMP_Upkeep+0x326>
      break;
    }
    setSensorLock(BMP280);
 800bf62:	2003      	movs	r0, #3
 800bf64:	f002 f848 	bl	800dff8 <setSensorLock>
    BMP280_reset();
 800bf68:	f7ff fb6a 	bl	800b640 <BMP280_reset>
    HAL_Delay(10); // wait for deferred DMA transfers
 800bf6c:	200a      	movs	r0, #10
 800bf6e:	f008 fdf3 	bl	8014b58 <HAL_Delay>
    setSensorLock(FREE);
 800bf72:	2000      	movs	r0, #0
 800bf74:	f002 f840 	bl	800dff8 <setSensorLock>
    BMPState = BMP_SET_CONFIG;
 800bf78:	4bac      	ldr	r3, [pc, #688]	@ (800c22c <BMP_Upkeep+0x33c>)
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	701a      	strb	r2, [r3, #0]
    break;
 800bf7e:	e18a      	b.n	800c296 <BMP_Upkeep+0x3a6>

  case BMP_SET_CONFIG:
    if (getSensorLock() != FREE) {
 800bf80:	f002 f84e 	bl	800e020 <getSensorLock>
 800bf84:	1e03      	subs	r3, r0, #0
 800bf86:	d000      	beq.n	800bf8a <BMP_Upkeep+0x9a>
 800bf88:	e147      	b.n	800c21a <BMP_Upkeep+0x32a>
      break;
    }
    setSensorLock(BMP280);
 800bf8a:	2003      	movs	r0, #3
 800bf8c:	f002 f834 	bl	800dff8 <setSensorLock>
    if (BMP280_set_config()) {
 800bf90:	f7ff fd8a 	bl	800baa8 <BMP280_set_config>
 800bf94:	1e03      	subs	r3, r0, #0
 800bf96:	d003      	beq.n	800bfa0 <BMP_Upkeep+0xb0>
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800bf98:	4ba4      	ldr	r3, [pc, #656]	@ (800c22c <BMP_Upkeep+0x33c>)
 800bf9a:	2202      	movs	r2, #2
 800bf9c:	701a      	strb	r2, [r3, #0]
 800bf9e:	e00f      	b.n	800bfc0 <BMP_Upkeep+0xd0>
    }
    else {
      Error("Error while configuring BMP280");
 800bfa0:	4aa9      	ldr	r2, [pc, #676]	@ (800c248 <BMP_Upkeep+0x358>)
 800bfa2:	4baa      	ldr	r3, [pc, #680]	@ (800c24c <BMP_Upkeep+0x35c>)
 800bfa4:	0019      	movs	r1, r3
 800bfa6:	2001      	movs	r0, #1
 800bfa8:	f008 f854 	bl	8014054 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800bfac:	f008 fdca 	bl	8014b44 <HAL_GetTick>
 800bfb0:	0003      	movs	r3, r0
 800bfb2:	4aa7      	ldr	r2, [pc, #668]	@ (800c250 <BMP_Upkeep+0x360>)
 800bfb4:	189a      	adds	r2, r3, r2
 800bfb6:	4b9c      	ldr	r3, [pc, #624]	@ (800c228 <BMP_Upkeep+0x338>)
 800bfb8:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800bfba:	4b9c      	ldr	r3, [pc, #624]	@ (800c22c <BMP_Upkeep+0x33c>)
 800bfbc:	2208      	movs	r2, #8
 800bfbe:	701a      	strb	r2, [r3, #0]
     }
    HAL_Delay(10); // wait for deferred DMA transfers
 800bfc0:	200a      	movs	r0, #10
 800bfc2:	f008 fdc9 	bl	8014b58 <HAL_Delay>
    setSensorLock(FREE);
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	f002 f816 	bl	800dff8 <setSensorLock>
  break;
 800bfcc:	e163      	b.n	800c296 <BMP_Upkeep+0x3a6>

  case BMP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 800bfce:	f002 f827 	bl	800e020 <getSensorLock>
 800bfd2:	1e03      	subs	r3, r0, #0
 800bfd4:	d030      	beq.n	800c038 <BMP_Upkeep+0x148>
      uint8_t locktype = getSensorLock();
 800bfd6:	1dfc      	adds	r4, r7, #7
 800bfd8:	f002 f822 	bl	800e020 <getSensorLock>
 800bfdc:	0003      	movs	r3, r0
 800bfde:	7023      	strb	r3, [r4, #0]
      Debug("Lock is not from BMP280, but from %s",
 800bfe0:	1dfb      	adds	r3, r7, #7
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d019      	beq.n	800c01c <BMP_Upkeep+0x12c>
 800bfe8:	1dfb      	adds	r3, r7, #7
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d013      	beq.n	800c018 <BMP_Upkeep+0x128>
 800bff0:	1dfb      	adds	r3, r7, #7
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	2b05      	cmp	r3, #5
 800bff6:	d00d      	beq.n	800c014 <BMP_Upkeep+0x124>
 800bff8:	1dfb      	adds	r3, r7, #7
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	2b02      	cmp	r3, #2
 800bffe:	d007      	beq.n	800c010 <BMP_Upkeep+0x120>
 800c000:	1dfb      	adds	r3, r7, #7
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	2b03      	cmp	r3, #3
 800c006:	d101      	bne.n	800c00c <BMP_Upkeep+0x11c>
 800c008:	4b92      	ldr	r3, [pc, #584]	@ (800c254 <BMP_Upkeep+0x364>)
 800c00a:	e008      	b.n	800c01e <BMP_Upkeep+0x12e>
 800c00c:	4b92      	ldr	r3, [pc, #584]	@ (800c258 <BMP_Upkeep+0x368>)
 800c00e:	e006      	b.n	800c01e <BMP_Upkeep+0x12e>
 800c010:	4b92      	ldr	r3, [pc, #584]	@ (800c25c <BMP_Upkeep+0x36c>)
 800c012:	e004      	b.n	800c01e <BMP_Upkeep+0x12e>
 800c014:	4b92      	ldr	r3, [pc, #584]	@ (800c260 <BMP_Upkeep+0x370>)
 800c016:	e002      	b.n	800c01e <BMP_Upkeep+0x12e>
 800c018:	4b92      	ldr	r3, [pc, #584]	@ (800c264 <BMP_Upkeep+0x374>)
 800c01a:	e000      	b.n	800c01e <BMP_Upkeep+0x12e>
 800c01c:	4b92      	ldr	r3, [pc, #584]	@ (800c268 <BMP_Upkeep+0x378>)
 800c01e:	4a93      	ldr	r2, [pc, #588]	@ (800c26c <BMP_Upkeep+0x37c>)
 800c020:	4985      	ldr	r1, [pc, #532]	@ (800c238 <BMP_Upkeep+0x348>)
 800c022:	2003      	movs	r0, #3
 800c024:	f008 f816 	bl	8014054 <CreateLine>
          locktype==FREE?"FREE":locktype==HIDS?"HIDS":locktype==SGP40?"SGP40":locktype==AHT20?"AHT20":locktype==BMP280?"BMP280":"unknown");
      BMP280TimeStamp = HAL_GetTick() + 97;
 800c028:	f008 fd8c 	bl	8014b44 <HAL_GetTick>
 800c02c:	0003      	movs	r3, r0
 800c02e:	3361      	adds	r3, #97	@ 0x61
 800c030:	001a      	movs	r2, r3
 800c032:	4b7d      	ldr	r3, [pc, #500]	@ (800c228 <BMP_Upkeep+0x338>)
 800c034:	601a      	str	r2, [r3, #0]
      break;
 800c036:	e12e      	b.n	800c296 <BMP_Upkeep+0x3a6>
    }
    if (getSensorLock() == FREE) {
 800c038:	f001 fff2 	bl	800e020 <getSensorLock>
 800c03c:	1e03      	subs	r3, r0, #0
 800c03e:	d105      	bne.n	800c04c <BMP_Upkeep+0x15c>
      HAL_Delay(10);
 800c040:	200a      	movs	r0, #10
 800c042:	f008 fd89 	bl	8014b58 <HAL_Delay>
      setSensorLock(BMP280);
 800c046:	2003      	movs	r0, #3
 800c048:	f001 ffd6 	bl	800dff8 <setSensorLock>
    }
    if (BMP280_set_mode()) {
 800c04c:	f7ff fd50 	bl	800baf0 <BMP280_set_mode>
 800c050:	1e03      	subs	r3, r0, #0
 800c052:	d003      	beq.n	800c05c <BMP_Upkeep+0x16c>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800c054:	4b75      	ldr	r3, [pc, #468]	@ (800c22c <BMP_Upkeep+0x33c>)
 800c056:	2205      	movs	r2, #5
 800c058:	701a      	strb	r2, [r3, #0]
 800c05a:	e00f      	b.n	800c07c <BMP_Upkeep+0x18c>
    }
    else {
      Error("Error while setting BMP280 to forced mode");
 800c05c:	4a84      	ldr	r2, [pc, #528]	@ (800c270 <BMP_Upkeep+0x380>)
 800c05e:	4b7b      	ldr	r3, [pc, #492]	@ (800c24c <BMP_Upkeep+0x35c>)
 800c060:	0019      	movs	r1, r3
 800c062:	2001      	movs	r0, #1
 800c064:	f007 fff6 	bl	8014054 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800c068:	f008 fd6c 	bl	8014b44 <HAL_GetTick>
 800c06c:	0003      	movs	r3, r0
 800c06e:	4a78      	ldr	r2, [pc, #480]	@ (800c250 <BMP_Upkeep+0x360>)
 800c070:	189a      	adds	r2, r3, r2
 800c072:	4b6d      	ldr	r3, [pc, #436]	@ (800c228 <BMP_Upkeep+0x338>)
 800c074:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800c076:	4b6d      	ldr	r3, [pc, #436]	@ (800c22c <BMP_Upkeep+0x33c>)
 800c078:	2208      	movs	r2, #8
 800c07a:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800c07c:	200a      	movs	r0, #10
 800c07e:	f008 fd6b 	bl	8014b58 <HAL_Delay>
    setSensorLock(FREE);
 800c082:	2000      	movs	r0, #0
 800c084:	f001 ffb8 	bl	800dff8 <setSensorLock>
    break;
 800c088:	e105      	b.n	800c296 <BMP_Upkeep+0x3a6>

  case BMP_READ_MEASUREMENT_ARRAY:
    if (getSensorLock() != FREE) {
 800c08a:	f001 ffc9 	bl	800e020 <getSensorLock>
 800c08e:	1e03      	subs	r3, r0, #0
 800c090:	d000      	beq.n	800c094 <BMP_Upkeep+0x1a4>
 800c092:	e0c4      	b.n	800c21e <BMP_Upkeep+0x32e>
      break;
    }
    HAL_Delay(10);
 800c094:	200a      	movs	r0, #10
 800c096:	f008 fd5f 	bl	8014b58 <HAL_Delay>
    setSensorLock(BMP280);
 800c09a:	2003      	movs	r0, #3
 800c09c:	f001 ffac 	bl	800dff8 <setSensorLock>
    if (BMP280_get_measurement_values()) {
 800c0a0:	f7ff fda6 	bl	800bbf0 <BMP280_get_measurement_values>
 800c0a4:	1e03      	subs	r3, r0, #0
 800c0a6:	d003      	beq.n	800c0b0 <BMP_Upkeep+0x1c0>
      BMPState = BMP_STATE_PROCESS_RESULTS;
 800c0a8:	4b60      	ldr	r3, [pc, #384]	@ (800c22c <BMP_Upkeep+0x33c>)
 800c0aa:	2203      	movs	r2, #3
 800c0ac:	701a      	strb	r2, [r3, #0]
 800c0ae:	e00f      	b.n	800c0d0 <BMP_Upkeep+0x1e0>
    }
    else {
      Error("BMP280 Error during reading measurement results array");
 800c0b0:	4a70      	ldr	r2, [pc, #448]	@ (800c274 <BMP_Upkeep+0x384>)
 800c0b2:	4b66      	ldr	r3, [pc, #408]	@ (800c24c <BMP_Upkeep+0x35c>)
 800c0b4:	0019      	movs	r1, r3
 800c0b6:	2001      	movs	r0, #1
 800c0b8:	f007 ffcc 	bl	8014054 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800c0bc:	f008 fd42 	bl	8014b44 <HAL_GetTick>
 800c0c0:	0003      	movs	r3, r0
 800c0c2:	4a63      	ldr	r2, [pc, #396]	@ (800c250 <BMP_Upkeep+0x360>)
 800c0c4:	189a      	adds	r2, r3, r2
 800c0c6:	4b58      	ldr	r3, [pc, #352]	@ (800c228 <BMP_Upkeep+0x338>)
 800c0c8:	601a      	str	r2, [r3, #0]
      BMPState = BMP_STATE_WAIT ;
 800c0ca:	4b58      	ldr	r3, [pc, #352]	@ (800c22c <BMP_Upkeep+0x33c>)
 800c0cc:	2208      	movs	r2, #8
 800c0ce:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800c0d0:	200a      	movs	r0, #10
 800c0d2:	f008 fd41 	bl	8014b58 <HAL_Delay>
    setSensorLock(FREE);
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	f001 ff8e 	bl	800dff8 <setSensorLock>
  break;
 800c0dc:	e0db      	b.n	800c296 <BMP_Upkeep+0x3a6>

  case BMP_STATE_PROCESS_RESULTS:
    float airtemp, airhpa;
    airtemp = BMP280_calc_temperature();
 800c0de:	f7ff fe13 	bl	800bd08 <BMP280_calc_temperature>
 800c0e2:	1c03      	adds	r3, r0, #0
 800c0e4:	60fb      	str	r3, [r7, #12]
    airhpa = BMP280_calc_pressure();
 800c0e6:	f7ff fe57 	bl	800bd98 <BMP280_calc_pressure>
 800c0ea:	1c03      	adds	r3, r0, #0
 800c0ec:	60bb      	str	r3, [r7, #8]
    if ((airhpa > 850.0) && (airhpa < 1100)) {
 800c0ee:	4962      	ldr	r1, [pc, #392]	@ (800c278 <BMP_Upkeep+0x388>)
 800c0f0:	68b8      	ldr	r0, [r7, #8]
 800c0f2:	f7f4 fa31 	bl	8000558 <__aeabi_fcmpgt>
 800c0f6:	1e03      	subs	r3, r0, #0
 800c0f8:	d049      	beq.n	800c18e <BMP_Upkeep+0x29e>
 800c0fa:	4960      	ldr	r1, [pc, #384]	@ (800c27c <BMP_Upkeep+0x38c>)
 800c0fc:	68b8      	ldr	r0, [r7, #8]
 800c0fe:	f7f4 fa17 	bl	8000530 <__aeabi_fcmplt>
 800c102:	1e03      	subs	r3, r0, #0
 800c104:	d043      	beq.n	800c18e <BMP_Upkeep+0x29e>
      bmp280samplecounter++;
 800c106:	4b5e      	ldr	r3, [pc, #376]	@ (800c280 <BMP_Upkeep+0x390>)
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	3301      	adds	r3, #1
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	4b5c      	ldr	r3, [pc, #368]	@ (800c280 <BMP_Upkeep+0x390>)
 800c110:	701a      	strb	r2, [r3, #0]
      if (bmp280samplecounter == 2) {
 800c112:	4b5b      	ldr	r3, [pc, #364]	@ (800c280 <BMP_Upkeep+0x390>)
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	2b02      	cmp	r3, #2
 800c118:	d114      	bne.n	800c144 <BMP_Upkeep+0x254>
        Info("BMP280 barometric value: %.2fhPa  airtemperature: %2.2fC", airhpa, airtemp);
 800c11a:	68b8      	ldr	r0, [r7, #8]
 800c11c:	f7f7 fbba 	bl	8003894 <__aeabi_f2d>
 800c120:	0004      	movs	r4, r0
 800c122:	000d      	movs	r5, r1
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f7f7 fbb5 	bl	8003894 <__aeabi_f2d>
 800c12a:	0002      	movs	r2, r0
 800c12c:	000b      	movs	r3, r1
 800c12e:	4855      	ldr	r0, [pc, #340]	@ (800c284 <BMP_Upkeep+0x394>)
 800c130:	4955      	ldr	r1, [pc, #340]	@ (800c288 <BMP_Upkeep+0x398>)
 800c132:	9202      	str	r2, [sp, #8]
 800c134:	9303      	str	r3, [sp, #12]
 800c136:	9400      	str	r4, [sp, #0]
 800c138:	9501      	str	r5, [sp, #4]
 800c13a:	0002      	movs	r2, r0
 800c13c:	2002      	movs	r0, #2
 800c13e:	f007 ff89 	bl	8014054 <CreateLine>
 800c142:	e006      	b.n	800c152 <BMP_Upkeep+0x262>
      }
      else {
        if (bmp280samplecounter == 11) {
 800c144:	4b4e      	ldr	r3, [pc, #312]	@ (800c280 <BMP_Upkeep+0x390>)
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	2b0b      	cmp	r3, #11
 800c14a:	d102      	bne.n	800c152 <BMP_Upkeep+0x262>
          bmp280samplecounter = 0;
 800c14c:	4b4c      	ldr	r3, [pc, #304]	@ (800c280 <BMP_Upkeep+0x390>)
 800c14e:	2200      	movs	r2, #0
 800c150:	701a      	strb	r2, [r3, #0]
        }
      }


      setBMP280(airtemp, airhpa);
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	1c11      	adds	r1, r2, #0
 800c158:	1c18      	adds	r0, r3, #0
 800c15a:	f7f8 fcf7 	bl	8004b4c <setBMP280>
      if (Check_USB_PowerOn()) {
 800c15e:	f7fd fd19 	bl	8009b94 <Check_USB_PowerOn>
 800c162:	1e03      	subs	r3, r0, #0
 800c164:	d00a      	beq.n	800c17c <BMP_Upkeep+0x28c>
        BMP280TimeStamp = HAL_GetTick() + 60000;
 800c166:	f008 fced 	bl	8014b44 <HAL_GetTick>
 800c16a:	0003      	movs	r3, r0
 800c16c:	4a47      	ldr	r2, [pc, #284]	@ (800c28c <BMP_Upkeep+0x39c>)
 800c16e:	189a      	adds	r2, r3, r2
 800c170:	4b2d      	ldr	r3, [pc, #180]	@ (800c228 <BMP_Upkeep+0x338>)
 800c172:	601a      	str	r2, [r3, #0]
        bmp280samplecounter = 1;
 800c174:	4b42      	ldr	r3, [pc, #264]	@ (800c280 <BMP_Upkeep+0x390>)
 800c176:	2201      	movs	r2, #1
 800c178:	701a      	strb	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800c17a:	e015      	b.n	800c1a8 <BMP_Upkeep+0x2b8>
      }
      else {
        BMP280TimeStamp = HAL_GetTick() + 1000;
 800c17c:	f008 fce2 	bl	8014b44 <HAL_GetTick>
 800c180:	0003      	movs	r3, r0
 800c182:	22fa      	movs	r2, #250	@ 0xfa
 800c184:	0092      	lsls	r2, r2, #2
 800c186:	189a      	adds	r2, r3, r2
 800c188:	4b27      	ldr	r3, [pc, #156]	@ (800c228 <BMP_Upkeep+0x338>)
 800c18a:	601a      	str	r2, [r3, #0]
      if (Check_USB_PowerOn()) {
 800c18c:	e00c      	b.n	800c1a8 <BMP_Upkeep+0x2b8>
      }
    }
    else {
      Error("BMP280 value out of valid range, not stored/used");
 800c18e:	4a40      	ldr	r2, [pc, #256]	@ (800c290 <BMP_Upkeep+0x3a0>)
 800c190:	4b2e      	ldr	r3, [pc, #184]	@ (800c24c <BMP_Upkeep+0x35c>)
 800c192:	0019      	movs	r1, r3
 800c194:	2001      	movs	r0, #1
 800c196:	f007 ff5d 	bl	8014054 <CreateLine>
      BMP280TimeStamp = HAL_GetTick() + 10000;
 800c19a:	f008 fcd3 	bl	8014b44 <HAL_GetTick>
 800c19e:	0003      	movs	r3, r0
 800c1a0:	4a2b      	ldr	r2, [pc, #172]	@ (800c250 <BMP_Upkeep+0x360>)
 800c1a2:	189a      	adds	r2, r3, r2
 800c1a4:	4b20      	ldr	r3, [pc, #128]	@ (800c228 <BMP_Upkeep+0x338>)
 800c1a6:	601a      	str	r2, [r3, #0]
    }
    BMPState = BMP_STATE_WAIT;
 800c1a8:	4b20      	ldr	r3, [pc, #128]	@ (800c22c <BMP_Upkeep+0x33c>)
 800c1aa:	2208      	movs	r2, #8
 800c1ac:	701a      	strb	r2, [r3, #0]
    break;
 800c1ae:	e072      	b.n	800c296 <BMP_Upkeep+0x3a6>

  case BMP_STATE_WAIT:
    BMPState = BMP_MODE_SELECT;
 800c1b0:	4b1e      	ldr	r3, [pc, #120]	@ (800c22c <BMP_Upkeep+0x33c>)
 800c1b2:	2209      	movs	r2, #9
 800c1b4:	701a      	strb	r2, [r3, #0]
    break;
 800c1b6:	e06e      	b.n	800c296 <BMP_Upkeep+0x3a6>

  case BMP_MODE_SELECT:
    if (getSensorLock() != FREE) {
 800c1b8:	f001 ff32 	bl	800e020 <getSensorLock>
 800c1bc:	1e03      	subs	r3, r0, #0
 800c1be:	d130      	bne.n	800c222 <BMP_Upkeep+0x332>
      break;
    }
    setSensorLock(BMP280);
 800c1c0:	2003      	movs	r0, #3
 800c1c2:	f001 ff19 	bl	800dff8 <setSensorLock>
    if (BMP280_get_mode() == BMP280_NORMAL_MODE) {
 800c1c6:	f7ff fce7 	bl	800bb98 <BMP280_get_mode>
 800c1ca:	0003      	movs	r3, r0
 800c1cc:	2b03      	cmp	r3, #3
 800c1ce:	d103      	bne.n	800c1d8 <BMP_Upkeep+0x2e8>
      BMPState = BMP_READ_MEASUREMENT_ARRAY;
 800c1d0:	4b16      	ldr	r3, [pc, #88]	@ (800c22c <BMP_Upkeep+0x33c>)
 800c1d2:	2205      	movs	r2, #5
 800c1d4:	701a      	strb	r2, [r3, #0]
 800c1d6:	e002      	b.n	800c1de <BMP_Upkeep+0x2ee>
    }
    else {
      BMPState = BMP_STATE_START_MEASUREMENTS;
 800c1d8:	4b14      	ldr	r3, [pc, #80]	@ (800c22c <BMP_Upkeep+0x33c>)
 800c1da:	2202      	movs	r2, #2
 800c1dc:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 800c1de:	200a      	movs	r0, #10
 800c1e0:	f008 fcba 	bl	8014b58 <HAL_Delay>
    setSensorLock(FREE);
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	f001 ff07 	bl	800dff8 <setSensorLock>
    BMP280TimeStamp = HAL_GetTick() + 23;
 800c1ea:	f008 fcab 	bl	8014b44 <HAL_GetTick>
 800c1ee:	0003      	movs	r3, r0
 800c1f0:	3317      	adds	r3, #23
 800c1f2:	001a      	movs	r2, r3
 800c1f4:	4b0c      	ldr	r3, [pc, #48]	@ (800c228 <BMP_Upkeep+0x338>)
 800c1f6:	601a      	str	r2, [r3, #0]
    break;
 800c1f8:	e04d      	b.n	800c296 <BMP_Upkeep+0x3a6>

  default:
    // Handle unexpected state
    BMPState = BMP_STATE_INIT;
 800c1fa:	4b0c      	ldr	r3, [pc, #48]	@ (800c22c <BMP_Upkeep+0x33c>)
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == BMP280) {
 800c200:	f001 ff0e 	bl	800e020 <getSensorLock>
 800c204:	0003      	movs	r3, r0
 800c206:	2b03      	cmp	r3, #3
 800c208:	d144      	bne.n	800c294 <BMP_Upkeep+0x3a4>
      setSensorLock(FREE);
 800c20a:	2000      	movs	r0, #0
 800c20c:	f001 fef4 	bl	800dff8 <setSensorLock>
    }
    break;
 800c210:	e040      	b.n	800c294 <BMP_Upkeep+0x3a4>
    break;
 800c212:	46c0      	nop			@ (mov r8, r8)
 800c214:	e03f      	b.n	800c296 <BMP_Upkeep+0x3a6>
      break;
 800c216:	46c0      	nop			@ (mov r8, r8)
 800c218:	e03d      	b.n	800c296 <BMP_Upkeep+0x3a6>
      break;
 800c21a:	46c0      	nop			@ (mov r8, r8)
 800c21c:	e03b      	b.n	800c296 <BMP_Upkeep+0x3a6>
      break;
 800c21e:	46c0      	nop			@ (mov r8, r8)
 800c220:	e039      	b.n	800c296 <BMP_Upkeep+0x3a6>
      break;
 800c222:	46c0      	nop			@ (mov r8, r8)
 800c224:	e037      	b.n	800c296 <BMP_Upkeep+0x3a6>
 800c226:	46c0      	nop			@ (mov r8, r8)
 800c228:	20000ec4 	.word	0x20000ec4
 800c22c:	200000a2 	.word	0x200000a2
 800c230:	0802e798 	.word	0x0802e798
 800c234:	0802cc74 	.word	0x0802cc74
 800c238:	0802c874 	.word	0x0802c874
 800c23c:	000be6e0 	.word	0x000be6e0
 800c240:	20000dee 	.word	0x20000dee
 800c244:	20000ec8 	.word	0x20000ec8
 800c248:	0802ccb0 	.word	0x0802ccb0
 800c24c:	0802cb64 	.word	0x0802cb64
 800c250:	00002710 	.word	0x00002710
 800c254:	0802ccd0 	.word	0x0802ccd0
 800c258:	0802ccd8 	.word	0x0802ccd8
 800c25c:	0802cce0 	.word	0x0802cce0
 800c260:	0802cce8 	.word	0x0802cce8
 800c264:	0802ccf0 	.word	0x0802ccf0
 800c268:	0802ccf8 	.word	0x0802ccf8
 800c26c:	0802cd00 	.word	0x0802cd00
 800c270:	0802cd28 	.word	0x0802cd28
 800c274:	0802cd54 	.word	0x0802cd54
 800c278:	44548000 	.word	0x44548000
 800c27c:	44898000 	.word	0x44898000
 800c280:	20000eb4 	.word	0x20000eb4
 800c284:	0802cd8c 	.word	0x0802cd8c
 800c288:	0802c854 	.word	0x0802c854
 800c28c:	0000ea60 	.word	0x0000ea60
 800c290:	0802cdc8 	.word	0x0802cdc8
    break;
 800c294:	46c0      	nop			@ (mov r8, r8)
  }
  return BMPState;
 800c296:	4b03      	ldr	r3, [pc, #12]	@ (800c2a4 <BMP_Upkeep+0x3b4>)
 800c298:	781b      	ldrb	r3, [r3, #0]
}
 800c29a:	0018      	movs	r0, r3
 800c29c:	46bd      	mov	sp, r7
 800c29e:	b004      	add	sp, #16
 800c2a0:	bdb0      	pop	{r4, r5, r7, pc}
 800c2a2:	46c0      	nop			@ (mov r8, r8)
 800c2a4:	200000a2 	.word	0x200000a2

0800c2a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800c2ae:	4b10      	ldr	r3, [pc, #64]	@ (800c2f0 <MX_DMA_Init+0x48>)
 800c2b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c2b2:	4b0f      	ldr	r3, [pc, #60]	@ (800c2f0 <MX_DMA_Init+0x48>)
 800c2b4:	2101      	movs	r1, #1
 800c2b6:	430a      	orrs	r2, r1
 800c2b8:	631a      	str	r2, [r3, #48]	@ 0x30
 800c2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800c2f0 <MX_DMA_Init+0x48>)
 800c2bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2be:	2201      	movs	r2, #1
 800c2c0:	4013      	ands	r3, r2
 800c2c2:	607b      	str	r3, [r7, #4]
 800c2c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	200a      	movs	r0, #10
 800c2cc:	f009 f8de 	bl	801548c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800c2d0:	200a      	movs	r0, #10
 800c2d2:	f009 f8f0 	bl	80154b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	2103      	movs	r1, #3
 800c2da:	200b      	movs	r0, #11
 800c2dc:	f009 f8d6 	bl	801548c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800c2e0:	200b      	movs	r0, #11
 800c2e2:	f009 f8e8 	bl	80154b6 <HAL_NVIC_EnableIRQ>

}
 800c2e6:	46c0      	nop			@ (mov r8, r8)
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	b002      	add	sp, #8
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	46c0      	nop			@ (mov r8, r8)
 800c2f0:	40021000 	.word	0x40021000

0800c2f4 <WriteUint8ArrayEeprom>:
#include <eeprom.h>

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c2f4:	b590      	push	{r4, r7, lr}
 800c2f6:	b087      	sub	sp, #28
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	1dbb      	adds	r3, r7, #6
 800c300:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800c302:	4b17      	ldr	r3, [pc, #92]	@ (800c360 <WriteUint8ArrayEeprom+0x6c>)
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c308:	f009 fc52 	bl	8015bb0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 800c30c:	2316      	movs	r3, #22
 800c30e:	18fb      	adds	r3, r7, r3
 800c310:	2200      	movs	r2, #0
 800c312:	801a      	strh	r2, [r3, #0]
 800c314:	e015      	b.n	800c342 <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800c316:	4b12      	ldr	r3, [pc, #72]	@ (800c360 <WriteUint8ArrayEeprom+0x6c>)
 800c318:	6819      	ldr	r1, [r3, #0]
 800c31a:	2416      	movs	r4, #22
 800c31c:	193b      	adds	r3, r7, r4
 800c31e:	881b      	ldrh	r3, [r3, #0]
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	18d3      	adds	r3, r2, r3
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	001a      	movs	r2, r3
 800c328:	2000      	movs	r0, #0
 800c32a:	f009 fca9 	bl	8015c80 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800c32e:	4b0c      	ldr	r3, [pc, #48]	@ (800c360 <WriteUint8ArrayEeprom+0x6c>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	1c5a      	adds	r2, r3, #1
 800c334:	4b0a      	ldr	r3, [pc, #40]	@ (800c360 <WriteUint8ArrayEeprom+0x6c>)
 800c336:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c338:	193b      	adds	r3, r7, r4
 800c33a:	881a      	ldrh	r2, [r3, #0]
 800c33c:	193b      	adds	r3, r7, r4
 800c33e:	3201      	adds	r2, #1
 800c340:	801a      	strh	r2, [r3, #0]
 800c342:	2316      	movs	r3, #22
 800c344:	18fa      	adds	r2, r7, r3
 800c346:	1dbb      	adds	r3, r7, #6
 800c348:	8812      	ldrh	r2, [r2, #0]
 800c34a:	881b      	ldrh	r3, [r3, #0]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d3e2      	bcc.n	800c316 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c350:	f009 fc5c 	bl	8015c0c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 800c354:	4b02      	ldr	r3, [pc, #8]	@ (800c360 <WriteUint8ArrayEeprom+0x6c>)
 800c356:	681b      	ldr	r3, [r3, #0]
}
 800c358:	0018      	movs	r0, r3
 800c35a:	46bd      	mov	sp, r7
 800c35c:	b007      	add	sp, #28
 800c35e:	bd90      	pop	{r4, r7, pc}
 800c360:	20000eec 	.word	0x20000eec

0800c364 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b084      	sub	sp, #16
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	0019      	movs	r1, r3
 800c370:	1dbb      	adds	r3, r7, #6
 800c372:	801a      	strh	r2, [r3, #0]
 800c374:	1d3b      	adds	r3, r7, #4
 800c376:	1c0a      	adds	r2, r1, #0
 800c378:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 800c37a:	1dba      	adds	r2, r7, #6
 800c37c:	1d3b      	adds	r3, r7, #4
 800c37e:	8812      	ldrh	r2, [r2, #0]
 800c380:	881b      	ldrh	r3, [r3, #0]
 800c382:	429a      	cmp	r2, r3
 800c384:	d806      	bhi.n	800c394 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 800c386:	1dbb      	adds	r3, r7, #6
 800c388:	881a      	ldrh	r2, [r3, #0]
 800c38a:	68b9      	ldr	r1, [r7, #8]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	0018      	movs	r0, r3
 800c390:	f7ff ffb0 	bl	800c2f4 <WriteUint8ArrayEeprom>
    }
}
 800c394:	46c0      	nop			@ (mov r8, r8)
 800c396:	46bd      	mov	sp, r7
 800c398:	b004      	add	sp, #16
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b086      	sub	sp, #24
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	1dbb      	adds	r3, r7, #6
 800c3a8:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c3aa:	2316      	movs	r3, #22
 800c3ac:	18fb      	adds	r3, r7, r3
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	801a      	strh	r2, [r3, #0]
 800c3b2:	e010      	b.n	800c3d6 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800c3b4:	2016      	movs	r0, #22
 800c3b6:	183b      	adds	r3, r7, r0
 800c3b8:	881a      	ldrh	r2, [r3, #0]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	18d3      	adds	r3, r2, r3
 800c3be:	0019      	movs	r1, r3
 800c3c0:	183b      	adds	r3, r7, r0
 800c3c2:	881b      	ldrh	r3, [r3, #0]
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	18d3      	adds	r3, r2, r3
 800c3c8:	780a      	ldrb	r2, [r1, #0]
 800c3ca:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 800c3cc:	183b      	adds	r3, r7, r0
 800c3ce:	881a      	ldrh	r2, [r3, #0]
 800c3d0:	183b      	adds	r3, r7, r0
 800c3d2:	3201      	adds	r2, #1
 800c3d4:	801a      	strh	r2, [r3, #0]
 800c3d6:	2316      	movs	r3, #22
 800c3d8:	18fa      	adds	r2, r7, r3
 800c3da:	1dbb      	adds	r3, r7, #6
 800c3dc:	8812      	ldrh	r2, [r2, #0]
 800c3de:	881b      	ldrh	r3, [r3, #0]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d3e7      	bcc.n	800c3b4 <ReadUint8ArrayEEprom+0x18>
    }
}
 800c3e4:	46c0      	nop			@ (mov r8, r8)
 800c3e6:	46c0      	nop			@ (mov r8, r8)
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	b006      	add	sp, #24
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800c3ee:	b590      	push	{r4, r7, lr}
 800c3f0:	b085      	sub	sp, #20
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	000a      	movs	r2, r1
 800c3f8:	1cbb      	adds	r3, r7, #2
 800c3fa:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800c3fc:	f009 fbd8 	bl	8015bb0 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800c400:	230e      	movs	r3, #14
 800c402:	18fb      	adds	r3, r7, r3
 800c404:	2200      	movs	r2, #0
 800c406:	801a      	strh	r2, [r3, #0]
 800c408:	e00c      	b.n	800c424 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 800c40a:	240e      	movs	r4, #14
 800c40c:	193b      	adds	r3, r7, r4
 800c40e:	881a      	ldrh	r2, [r3, #0]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	18d3      	adds	r3, r2, r3
 800c414:	0018      	movs	r0, r3
 800c416:	f009 fc07 	bl	8015c28 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 800c41a:	193b      	adds	r3, r7, r4
 800c41c:	193a      	adds	r2, r7, r4
 800c41e:	8812      	ldrh	r2, [r2, #0]
 800c420:	3204      	adds	r2, #4
 800c422:	801a      	strh	r2, [r3, #0]
 800c424:	230e      	movs	r3, #14
 800c426:	18fa      	adds	r2, r7, r3
 800c428:	1cbb      	adds	r3, r7, #2
 800c42a:	8812      	ldrh	r2, [r2, #0]
 800c42c:	881b      	ldrh	r3, [r3, #0]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d3eb      	bcc.n	800c40a <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800c432:	f009 fbeb 	bl	8015c0c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800c436:	46c0      	nop			@ (mov r8, r8)
 800c438:	46bd      	mov	sp, r7
 800c43a:	b005      	add	sp, #20
 800c43c:	bd90      	pop	{r4, r7, pc}
	...

0800c440 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b086      	sub	sp, #24
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c450:	d901      	bls.n	800c456 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 800c452:	237f      	movs	r3, #127	@ 0x7f
 800c454:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 800c456:	2017      	movs	r0, #23
 800c458:	183b      	adds	r3, r7, r0
 800c45a:	490d      	ldr	r1, [pc, #52]	@ (800c490 <accessLUT10log10+0x50>)
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	188a      	adds	r2, r1, r2
 800c460:	7812      	ldrb	r2, [r2, #0]
 800c462:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 800c464:	0001      	movs	r1, r0
 800c466:	187b      	adds	r3, r7, r1
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	2206      	movs	r2, #6
 800c46c:	4113      	asrs	r3, r2
 800c46e:	001a      	movs	r2, r3
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 800c474:	187b      	adds	r3, r7, r1
 800c476:	781a      	ldrb	r2, [r3, #0]
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	2106      	movs	r1, #6
 800c47e:	408b      	lsls	r3, r1
 800c480:	1ad2      	subs	r2, r2, r3
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	601a      	str	r2, [r3, #0]
}
 800c486:	46c0      	nop			@ (mov r8, r8)
 800c488:	46bd      	mov	sp, r7
 800c48a:	b006      	add	sp, #24
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	46c0      	nop			@ (mov r8, r8)
 800c490:	0802e7c0 	.word	0x0802e7c0

0800c494 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 800c494:	b5b0      	push	{r4, r5, r7, lr}
 800c496:	b090      	sub	sp, #64	@ 0x40
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6138      	str	r0, [r7, #16]
 800c49c:	6179      	str	r1, [r7, #20]
 800c49e:	60fa      	str	r2, [r7, #12]
 800c4a0:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 800c4a2:	2308      	movs	r3, #8
 800c4a4:	001a      	movs	r2, r3
 800c4a6:	3a20      	subs	r2, #32
 800c4a8:	2a00      	cmp	r2, #0
 800c4aa:	db03      	blt.n	800c4b4 <efficient10log10+0x20>
 800c4ac:	2101      	movs	r1, #1
 800c4ae:	4091      	lsls	r1, r2
 800c4b0:	000d      	movs	r5, r1
 800c4b2:	e008      	b.n	800c4c6 <efficient10log10+0x32>
 800c4b4:	2220      	movs	r2, #32
 800c4b6:	1ad2      	subs	r2, r2, r3
 800c4b8:	2101      	movs	r1, #1
 800c4ba:	40d1      	lsrs	r1, r2
 800c4bc:	000a      	movs	r2, r1
 800c4be:	2100      	movs	r1, #0
 800c4c0:	4099      	lsls	r1, r3
 800c4c2:	000d      	movs	r5, r1
 800c4c4:	4315      	orrs	r5, r2
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	409a      	lsls	r2, r3
 800c4ca:	0014      	movs	r4, r2
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	4252      	negs	r2, r2
 800c4d0:	17d3      	asrs	r3, r2, #31
 800c4d2:	1912      	adds	r2, r2, r4
 800c4d4:	416b      	adcs	r3, r5
 800c4d6:	633a      	str	r2, [r7, #48]	@ 0x30
 800c4d8:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800c4da:	2336      	movs	r3, #54	@ 0x36
 800c4dc:	2208      	movs	r2, #8
 800c4de:	189b      	adds	r3, r3, r2
 800c4e0:	19db      	adds	r3, r3, r7
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c4e6:	e017      	b.n	800c518 <efficient10log10+0x84>
    {
        P = P >> 1;
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	07db      	lsls	r3, r3, #31
 800c4ec:	693a      	ldr	r2, [r7, #16]
 800c4ee:	0852      	lsrs	r2, r2, #1
 800c4f0:	603a      	str	r2, [r7, #0]
 800c4f2:	683a      	ldr	r2, [r7, #0]
 800c4f4:	431a      	orrs	r2, r3
 800c4f6:	603a      	str	r2, [r7, #0]
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	085b      	lsrs	r3, r3, #1
 800c4fc:	607b      	str	r3, [r7, #4]
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	687c      	ldr	r4, [r7, #4]
 800c502:	613b      	str	r3, [r7, #16]
 800c504:	617c      	str	r4, [r7, #20]
        bShift++;
 800c506:	2136      	movs	r1, #54	@ 0x36
 800c508:	2008      	movs	r0, #8
 800c50a:	180b      	adds	r3, r1, r0
 800c50c:	19db      	adds	r3, r3, r7
 800c50e:	881a      	ldrh	r2, [r3, #0]
 800c510:	180b      	adds	r3, r1, r0
 800c512:	19db      	adds	r3, r3, r7
 800c514:	3201      	adds	r2, #1
 800c516:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800c518:	697a      	ldr	r2, [r7, #20]
 800c51a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d8e3      	bhi.n	800c4e8 <efficient10log10+0x54>
 800c520:	697a      	ldr	r2, [r7, #20]
 800c522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c524:	429a      	cmp	r2, r3
 800c526:	d103      	bne.n	800c530 <efficient10log10+0x9c>
 800c528:	693a      	ldr	r2, [r7, #16]
 800c52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d8db      	bhi.n	800c4e8 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 800c530:	693a      	ldr	r2, [r7, #16]
 800c532:	2308      	movs	r3, #8
 800c534:	3b01      	subs	r3, #1
 800c536:	2101      	movs	r1, #1
 800c538:	4099      	lsls	r1, r3
 800c53a:	000b      	movs	r3, r1
 800c53c:	1ad3      	subs	r3, r2, r3
 800c53e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 800c540:	2300      	movs	r3, #0
 800c542:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 800c544:	2300      	movs	r3, #0
 800c546:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 800c548:	231c      	movs	r3, #28
 800c54a:	2408      	movs	r4, #8
 800c54c:	191b      	adds	r3, r3, r4
 800c54e:	19da      	adds	r2, r3, r7
 800c550:	2320      	movs	r3, #32
 800c552:	191b      	adds	r3, r3, r4
 800c554:	19d9      	adds	r1, r3, r7
 800c556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c558:	0018      	movs	r0, r3
 800c55a:	f7ff ff71 	bl	800c440 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c55e:	2215      	movs	r2, #21
 800c560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c562:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 800c564:	2036      	movs	r0, #54	@ 0x36
 800c566:	1902      	adds	r2, r0, r4
 800c568:	19d2      	adds	r2, r2, r7
 800c56a:	8812      	ldrh	r2, [r2, #0]
 800c56c:	2103      	movs	r1, #3
 800c56e:	434a      	muls	r2, r1
 800c570:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800c572:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 800c574:	0021      	movs	r1, r4
 800c576:	1843      	adds	r3, r0, r1
 800c578:	19db      	adds	r3, r3, r7
 800c57a:	881b      	ldrh	r3, [r3, #0]
 800c57c:	2201      	movs	r2, #1
 800c57e:	4353      	muls	r3, r2
 800c580:	2203      	movs	r2, #3
 800c582:	4113      	asrs	r3, r2
 800c584:	001a      	movs	r2, r3
 800c586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c588:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800c58a:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800c58c:	2314      	movs	r3, #20
 800c58e:	185b      	adds	r3, r3, r1
 800c590:	19da      	adds	r2, r3, r7
 800c592:	2318      	movs	r3, #24
 800c594:	185b      	adds	r3, r3, r1
 800c596:	19db      	adds	r3, r3, r7
 800c598:	0011      	movs	r1, r2
 800c59a:	0018      	movs	r0, r3
 800c59c:	f000 f80a 	bl	800c5b4 <correctIntFracNumber>
    integerPart[0] = intPart;
 800c5a0:	6a3a      	ldr	r2, [r7, #32]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800c5a6:	69fa      	ldr	r2, [r7, #28]
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	601a      	str	r2, [r3, #0]
}
 800c5ac:	46c0      	nop			@ (mov r8, r8)
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	b010      	add	sp, #64	@ 0x40
 800c5b2:	bdb0      	pop	{r4, r5, r7, pc}

0800c5b4 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800c5be:	e00a      	b.n	800c5d6 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	1c5a      	adds	r2, r3, #1
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	3b0a      	subs	r3, #10
 800c5d0:	001a      	movs	r2, r3
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b09      	cmp	r3, #9
 800c5dc:	dcf0      	bgt.n	800c5c0 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800c5de:	e00a      	b.n	800c5f6 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	1e5a      	subs	r2, r3, #1
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	330a      	adds	r3, #10
 800c5f0:	001a      	movs	r2, r3
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	3309      	adds	r3, #9
 800c5fc:	dbf0      	blt.n	800c5e0 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	da0f      	bge.n	800c626 <correctIntFracNumber+0x72>
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	dd0b      	ble.n	800c626 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	1c5a      	adds	r2, r3, #1
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	3b0a      	subs	r3, #10
 800c61e:	001a      	movs	r2, r3
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 800c624:	e012      	b.n	800c64c <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	dd0e      	ble.n	800c64c <correctIntFracNumber+0x98>
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	da0a      	bge.n	800c64c <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	1e5a      	subs	r2, r3, #1
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	330a      	adds	r3, #10
 800c646:	001a      	movs	r2, r3
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	601a      	str	r2, [r3, #0]
}
 800c64c:	46c0      	nop			@ (mov r8, r8)
 800c64e:	46bd      	mov	sp, r7
 800c650:	b002      	add	sp, #8
 800c652:	bd80      	pop	{r7, pc}

0800c654 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800c654:	b590      	push	{r4, r7, lr}
 800c656:	b08b      	sub	sp, #44	@ 0x2c
 800c658:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c65a:	2414      	movs	r4, #20
 800c65c:	193b      	adds	r3, r7, r4
 800c65e:	0018      	movs	r0, r3
 800c660:	2314      	movs	r3, #20
 800c662:	001a      	movs	r2, r3
 800c664:	2100      	movs	r1, #0
 800c666:	f01a f82d 	bl	80266c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c66a:	4b8a      	ldr	r3, [pc, #552]	@ (800c894 <MX_GPIO_Init+0x240>)
 800c66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c66e:	4b89      	ldr	r3, [pc, #548]	@ (800c894 <MX_GPIO_Init+0x240>)
 800c670:	2104      	movs	r1, #4
 800c672:	430a      	orrs	r2, r1
 800c674:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c676:	4b87      	ldr	r3, [pc, #540]	@ (800c894 <MX_GPIO_Init+0x240>)
 800c678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c67a:	2204      	movs	r2, #4
 800c67c:	4013      	ands	r3, r2
 800c67e:	613b      	str	r3, [r7, #16]
 800c680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c682:	4b84      	ldr	r3, [pc, #528]	@ (800c894 <MX_GPIO_Init+0x240>)
 800c684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c686:	4b83      	ldr	r3, [pc, #524]	@ (800c894 <MX_GPIO_Init+0x240>)
 800c688:	2180      	movs	r1, #128	@ 0x80
 800c68a:	430a      	orrs	r2, r1
 800c68c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c68e:	4b81      	ldr	r3, [pc, #516]	@ (800c894 <MX_GPIO_Init+0x240>)
 800c690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c692:	2280      	movs	r2, #128	@ 0x80
 800c694:	4013      	ands	r3, r2
 800c696:	60fb      	str	r3, [r7, #12]
 800c698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c69a:	4b7e      	ldr	r3, [pc, #504]	@ (800c894 <MX_GPIO_Init+0x240>)
 800c69c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c69e:	4b7d      	ldr	r3, [pc, #500]	@ (800c894 <MX_GPIO_Init+0x240>)
 800c6a0:	2101      	movs	r1, #1
 800c6a2:	430a      	orrs	r2, r1
 800c6a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c6a6:	4b7b      	ldr	r3, [pc, #492]	@ (800c894 <MX_GPIO_Init+0x240>)
 800c6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	4013      	ands	r3, r2
 800c6ae:	60bb      	str	r3, [r7, #8]
 800c6b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c6b2:	4b78      	ldr	r3, [pc, #480]	@ (800c894 <MX_GPIO_Init+0x240>)
 800c6b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6b6:	4b77      	ldr	r3, [pc, #476]	@ (800c894 <MX_GPIO_Init+0x240>)
 800c6b8:	2102      	movs	r1, #2
 800c6ba:	430a      	orrs	r2, r1
 800c6bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c6be:	4b75      	ldr	r3, [pc, #468]	@ (800c894 <MX_GPIO_Init+0x240>)
 800c6c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6c2:	2202      	movs	r2, #2
 800c6c4:	4013      	ands	r3, r2
 800c6c6:	607b      	str	r3, [r7, #4]
 800c6c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c6ca:	4b72      	ldr	r3, [pc, #456]	@ (800c894 <MX_GPIO_Init+0x240>)
 800c6cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6ce:	4b71      	ldr	r3, [pc, #452]	@ (800c894 <MX_GPIO_Init+0x240>)
 800c6d0:	2108      	movs	r1, #8
 800c6d2:	430a      	orrs	r2, r1
 800c6d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c6d6:	4b6f      	ldr	r3, [pc, #444]	@ (800c894 <MX_GPIO_Init+0x240>)
 800c6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6da:	2208      	movs	r2, #8
 800c6dc:	4013      	ands	r3, r2
 800c6de:	603b      	str	r3, [r7, #0]
 800c6e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800c6e2:	4b6d      	ldr	r3, [pc, #436]	@ (800c898 <MX_GPIO_Init+0x244>)
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	2101      	movs	r1, #1
 800c6e8:	0018      	movs	r0, r3
 800c6ea:	f009 fcbc 	bl	8016066 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800c6ee:	4b6a      	ldr	r3, [pc, #424]	@ (800c898 <MX_GPIO_Init+0x244>)
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	2102      	movs	r1, #2
 800c6f4:	0018      	movs	r0, r3
 800c6f6:	f009 fcb6 	bl	8016066 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800c6fa:	4968      	ldr	r1, [pc, #416]	@ (800c89c <MX_GPIO_Init+0x248>)
 800c6fc:	4b68      	ldr	r3, [pc, #416]	@ (800c8a0 <MX_GPIO_Init+0x24c>)
 800c6fe:	2201      	movs	r2, #1
 800c700:	0018      	movs	r0, r3
 800c702:	f009 fcb0 	bl	8016066 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800c706:	2380      	movs	r3, #128	@ 0x80
 800c708:	011b      	lsls	r3, r3, #4
 800c70a:	4866      	ldr	r0, [pc, #408]	@ (800c8a4 <MX_GPIO_Init+0x250>)
 800c70c:	2201      	movs	r2, #1
 800c70e:	0019      	movs	r1, r3
 800c710:	f009 fca9 	bl	8016066 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800c714:	2380      	movs	r3, #128	@ 0x80
 800c716:	015b      	lsls	r3, r3, #5
 800c718:	4862      	ldr	r0, [pc, #392]	@ (800c8a4 <MX_GPIO_Init+0x250>)
 800c71a:	2200      	movs	r2, #0
 800c71c:	0019      	movs	r1, r3
 800c71e:	f009 fca2 	bl	8016066 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800c722:	193b      	adds	r3, r7, r4
 800c724:	4a60      	ldr	r2, [pc, #384]	@ (800c8a8 <MX_GPIO_Init+0x254>)
 800c726:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c728:	193b      	adds	r3, r7, r4
 800c72a:	2203      	movs	r2, #3
 800c72c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c72e:	193b      	adds	r3, r7, r4
 800c730:	2200      	movs	r2, #0
 800c732:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c734:	193b      	adds	r3, r7, r4
 800c736:	4a5b      	ldr	r2, [pc, #364]	@ (800c8a4 <MX_GPIO_Init+0x250>)
 800c738:	0019      	movs	r1, r3
 800c73a:	0010      	movs	r0, r2
 800c73c:	f009 faf8 	bl	8015d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800c740:	193b      	adds	r3, r7, r4
 800c742:	2203      	movs	r2, #3
 800c744:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c746:	193b      	adds	r3, r7, r4
 800c748:	2201      	movs	r2, #1
 800c74a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c74c:	193b      	adds	r3, r7, r4
 800c74e:	2200      	movs	r2, #0
 800c750:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c752:	193b      	adds	r3, r7, r4
 800c754:	2200      	movs	r2, #0
 800c756:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800c758:	193b      	adds	r3, r7, r4
 800c75a:	4a4f      	ldr	r2, [pc, #316]	@ (800c898 <MX_GPIO_Init+0x244>)
 800c75c:	0019      	movs	r1, r3
 800c75e:	0010      	movs	r0, r2
 800c760:	f009 fae6 	bl	8015d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800c764:	193b      	adds	r3, r7, r4
 800c766:	2270      	movs	r2, #112	@ 0x70
 800c768:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c76a:	193b      	adds	r3, r7, r4
 800c76c:	2203      	movs	r2, #3
 800c76e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c770:	193b      	adds	r3, r7, r4
 800c772:	2200      	movs	r2, #0
 800c774:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c776:	193a      	adds	r2, r7, r4
 800c778:	23a0      	movs	r3, #160	@ 0xa0
 800c77a:	05db      	lsls	r3, r3, #23
 800c77c:	0011      	movs	r1, r2
 800c77e:	0018      	movs	r0, r3
 800c780:	f009 fad6 	bl	8015d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 800c784:	193b      	adds	r3, r7, r4
 800c786:	22c0      	movs	r2, #192	@ 0xc0
 800c788:	0052      	lsls	r2, r2, #1
 800c78a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c78c:	193b      	adds	r3, r7, r4
 800c78e:	2200      	movs	r2, #0
 800c790:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c792:	193b      	adds	r3, r7, r4
 800c794:	2200      	movs	r2, #0
 800c796:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c798:	193a      	adds	r2, r7, r4
 800c79a:	23a0      	movs	r3, #160	@ 0xa0
 800c79c:	05db      	lsls	r3, r3, #23
 800c79e:	0011      	movs	r1, r2
 800c7a0:	0018      	movs	r0, r3
 800c7a2:	f009 fac5 	bl	8015d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 800c7a6:	193b      	adds	r3, r7, r4
 800c7a8:	4a3c      	ldr	r2, [pc, #240]	@ (800c89c <MX_GPIO_Init+0x248>)
 800c7aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c7ac:	193b      	adds	r3, r7, r4
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7b2:	193b      	adds	r3, r7, r4
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7b8:	193b      	adds	r3, r7, r4
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c7be:	193b      	adds	r3, r7, r4
 800c7c0:	4a37      	ldr	r2, [pc, #220]	@ (800c8a0 <MX_GPIO_Init+0x24c>)
 800c7c2:	0019      	movs	r1, r3
 800c7c4:	0010      	movs	r0, r2
 800c7c6:	f009 fab3 	bl	8015d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800c7ca:	193b      	adds	r3, r7, r4
 800c7cc:	4a37      	ldr	r2, [pc, #220]	@ (800c8ac <MX_GPIO_Init+0x258>)
 800c7ce:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c7d0:	193b      	adds	r3, r7, r4
 800c7d2:	2203      	movs	r2, #3
 800c7d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7d6:	193b      	adds	r3, r7, r4
 800c7d8:	2200      	movs	r2, #0
 800c7da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c7dc:	193b      	adds	r3, r7, r4
 800c7de:	4a30      	ldr	r2, [pc, #192]	@ (800c8a0 <MX_GPIO_Init+0x24c>)
 800c7e0:	0019      	movs	r1, r3
 800c7e2:	0010      	movs	r0, r2
 800c7e4:	f009 faa4 	bl	8015d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 800c7e8:	0021      	movs	r1, r4
 800c7ea:	187b      	adds	r3, r7, r1
 800c7ec:	2280      	movs	r2, #128	@ 0x80
 800c7ee:	0092      	lsls	r2, r2, #2
 800c7f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c7f2:	000c      	movs	r4, r1
 800c7f4:	193b      	adds	r3, r7, r4
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7fa:	193b      	adds	r3, r7, r4
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 800c800:	193b      	adds	r3, r7, r4
 800c802:	4a28      	ldr	r2, [pc, #160]	@ (800c8a4 <MX_GPIO_Init+0x250>)
 800c804:	0019      	movs	r1, r3
 800c806:	0010      	movs	r0, r2
 800c808:	f009 fa92 	bl	8015d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 800c80c:	193b      	adds	r3, r7, r4
 800c80e:	2280      	movs	r2, #128	@ 0x80
 800c810:	0212      	lsls	r2, r2, #8
 800c812:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c814:	193b      	adds	r3, r7, r4
 800c816:	2288      	movs	r2, #136	@ 0x88
 800c818:	0352      	lsls	r2, r2, #13
 800c81a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c81c:	193b      	adds	r3, r7, r4
 800c81e:	2200      	movs	r2, #0
 800c820:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 800c822:	193a      	adds	r2, r7, r4
 800c824:	23a0      	movs	r3, #160	@ 0xa0
 800c826:	05db      	lsls	r3, r3, #23
 800c828:	0011      	movs	r1, r2
 800c82a:	0018      	movs	r0, r3
 800c82c:	f009 fa80 	bl	8015d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 800c830:	0021      	movs	r1, r4
 800c832:	187b      	adds	r3, r7, r1
 800c834:	22c0      	movs	r2, #192	@ 0xc0
 800c836:	0152      	lsls	r2, r2, #5
 800c838:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c83a:	000c      	movs	r4, r1
 800c83c:	193b      	adds	r3, r7, r4
 800c83e:	2201      	movs	r2, #1
 800c840:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c842:	193b      	adds	r3, r7, r4
 800c844:	2200      	movs	r2, #0
 800c846:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c848:	193b      	adds	r3, r7, r4
 800c84a:	2200      	movs	r2, #0
 800c84c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c84e:	193b      	adds	r3, r7, r4
 800c850:	4a14      	ldr	r2, [pc, #80]	@ (800c8a4 <MX_GPIO_Init+0x250>)
 800c852:	0019      	movs	r1, r3
 800c854:	0010      	movs	r0, r2
 800c856:	f009 fa6b 	bl	8015d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800c85a:	0021      	movs	r1, r4
 800c85c:	187b      	adds	r3, r7, r1
 800c85e:	2204      	movs	r2, #4
 800c860:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c862:	187b      	adds	r3, r7, r1
 800c864:	2200      	movs	r2, #0
 800c866:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c868:	187b      	adds	r3, r7, r1
 800c86a:	2201      	movs	r2, #1
 800c86c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800c86e:	187b      	adds	r3, r7, r1
 800c870:	4a0f      	ldr	r2, [pc, #60]	@ (800c8b0 <MX_GPIO_Init+0x25c>)
 800c872:	0019      	movs	r1, r3
 800c874:	0010      	movs	r0, r2
 800c876:	f009 fa5b 	bl	8015d30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800c87a:	2200      	movs	r2, #0
 800c87c:	2100      	movs	r1, #0
 800c87e:	2007      	movs	r0, #7
 800c880:	f008 fe04 	bl	801548c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800c884:	2007      	movs	r0, #7
 800c886:	f008 fe16 	bl	80154b6 <HAL_NVIC_EnableIRQ>

}
 800c88a:	46c0      	nop			@ (mov r8, r8)
 800c88c:	46bd      	mov	sp, r7
 800c88e:	b00b      	add	sp, #44	@ 0x2c
 800c890:	bd90      	pop	{r4, r7, pc}
 800c892:	46c0      	nop			@ (mov r8, r8)
 800c894:	40021000 	.word	0x40021000
 800c898:	50001c00 	.word	0x50001c00
 800c89c:	00000301 	.word	0x00000301
 800c8a0:	50000400 	.word	0x50000400
 800c8a4:	50000800 	.word	0x50000800
 800c8a8:	0000200c 	.word	0x0000200c
 800c8ac:	0000403e 	.word	0x0000403e
 800c8b0:	50000c00 	.word	0x50000c00

0800c8b4 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	0018      	movs	r0, r3
 800c8c4:	f010 fad4 	bl	801ce70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2108      	movs	r1, #8
 800c8cc:	0018      	movs	r0, r3
 800c8ce:	f010 facf 	bl	801ce70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	210c      	movs	r1, #12
 800c8d6:	0018      	movs	r0, r3
 800c8d8:	f010 faca 	bl	801ce70 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 800c8dc:	2380      	movs	r3, #128	@ 0x80
 800c8de:	05db      	lsls	r3, r3, #23
 800c8e0:	22fa      	movs	r2, #250	@ 0xfa
 800c8e2:	0112      	lsls	r2, r2, #4
 800c8e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800c8e6:	2380      	movs	r3, #128	@ 0x80
 800c8e8:	05db      	lsls	r3, r3, #23
 800c8ea:	22fa      	movs	r2, #250	@ 0xfa
 800c8ec:	0112      	lsls	r2, r2, #4
 800c8ee:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800c8f0:	2380      	movs	r3, #128	@ 0x80
 800c8f2:	05db      	lsls	r3, r3, #23
 800c8f4:	22fa      	movs	r2, #250	@ 0xfa
 800c8f6:	0112      	lsls	r2, r2, #4
 800c8f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800c8fa:	2380      	movs	r3, #128	@ 0x80
 800c8fc:	05db      	lsls	r3, r3, #23
 800c8fe:	22fa      	movs	r2, #250	@ 0xfa
 800c900:	0112      	lsls	r2, r2, #4
 800c902:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	2100      	movs	r1, #0
 800c908:	0018      	movs	r0, r3
 800c90a:	f010 fab1 	bl	801ce70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	2104      	movs	r1, #4
 800c912:	0018      	movs	r0, r3
 800c914:	f010 faac 	bl	801ce70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	2108      	movs	r1, #8
 800c91c:	0018      	movs	r0, r3
 800c91e:	f010 faa7 	bl	801ce70 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800c922:	4b0a      	ldr	r3, [pc, #40]	@ (800c94c <GPIO_InitPWMLEDs+0x98>)
 800c924:	22fa      	movs	r2, #250	@ 0xfa
 800c926:	0112      	lsls	r2, r2, #4
 800c928:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800c92a:	4b08      	ldr	r3, [pc, #32]	@ (800c94c <GPIO_InitPWMLEDs+0x98>)
 800c92c:	22fa      	movs	r2, #250	@ 0xfa
 800c92e:	0112      	lsls	r2, r2, #4
 800c930:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800c932:	4b06      	ldr	r3, [pc, #24]	@ (800c94c <GPIO_InitPWMLEDs+0x98>)
 800c934:	22fa      	movs	r2, #250	@ 0xfa
 800c936:	0112      	lsls	r2, r2, #4
 800c938:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800c93a:	4b04      	ldr	r3, [pc, #16]	@ (800c94c <GPIO_InitPWMLEDs+0x98>)
 800c93c:	22fa      	movs	r2, #250	@ 0xfa
 800c93e:	0112      	lsls	r2, r2, #4
 800c940:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c942:	46c0      	nop			@ (mov r8, r8)
 800c944:	46bd      	mov	sp, r7
 800c946:	b002      	add	sp, #8
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	46c0      	nop			@ (mov r8, r8)
 800c94c:	40000400 	.word	0x40000400

0800c950 <GPIO_PrepareForStandbyMode>:

void GPIO_PrepareForStandbyMode() {
 800c950:	b580      	push	{r7, lr}
 800c952:	b086      	sub	sp, #24
 800c954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c956:	1d3b      	adds	r3, r7, #4
 800c958:	0018      	movs	r0, r3
 800c95a:	2314      	movs	r3, #20
 800c95c:	001a      	movs	r2, r3
 800c95e:	2100      	movs	r1, #0
 800c960:	f019 feb0 	bl	80266c4 <memset>
  /*Reconfigure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800c964:	1d3b      	adds	r3, r7, #4
 800c966:	2205      	movs	r2, #5
 800c968:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c96a:	1d3b      	adds	r3, r7, #4
 800c96c:	2203      	movs	r2, #3
 800c96e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c970:	1d3b      	adds	r3, r7, #4
 800c972:	2200      	movs	r2, #0
 800c974:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c976:	1d3a      	adds	r2, r7, #4
 800c978:	23a0      	movs	r3, #160	@ 0xa0
 800c97a:	05db      	lsls	r3, r3, #23
 800c97c:	0011      	movs	r1, r2
 800c97e:	0018      	movs	r0, r3
 800c980:	f009 f9d6 	bl	8015d30 <HAL_GPIO_Init>
}
 800c984:	46c0      	nop			@ (mov r8, r8)
 800c986:	46bd      	mov	sp, r7
 800c988:	b006      	add	sp, #24
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800c990:	4b1b      	ldr	r3, [pc, #108]	@ (800ca00 <MX_I2C1_Init+0x74>)
 800c992:	4a1c      	ldr	r2, [pc, #112]	@ (800ca04 <MX_I2C1_Init+0x78>)
 800c994:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800c996:	4b1a      	ldr	r3, [pc, #104]	@ (800ca00 <MX_I2C1_Init+0x74>)
 800c998:	4a1b      	ldr	r2, [pc, #108]	@ (800ca08 <MX_I2C1_Init+0x7c>)
 800c99a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c99c:	4b18      	ldr	r3, [pc, #96]	@ (800ca00 <MX_I2C1_Init+0x74>)
 800c99e:	2200      	movs	r2, #0
 800c9a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c9a2:	4b17      	ldr	r3, [pc, #92]	@ (800ca00 <MX_I2C1_Init+0x74>)
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c9a8:	4b15      	ldr	r3, [pc, #84]	@ (800ca00 <MX_I2C1_Init+0x74>)
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c9ae:	4b14      	ldr	r3, [pc, #80]	@ (800ca00 <MX_I2C1_Init+0x74>)
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c9b4:	4b12      	ldr	r3, [pc, #72]	@ (800ca00 <MX_I2C1_Init+0x74>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c9ba:	4b11      	ldr	r3, [pc, #68]	@ (800ca00 <MX_I2C1_Init+0x74>)
 800c9bc:	2200      	movs	r2, #0
 800c9be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c9c0:	4b0f      	ldr	r3, [pc, #60]	@ (800ca00 <MX_I2C1_Init+0x74>)
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c9c6:	4b0e      	ldr	r3, [pc, #56]	@ (800ca00 <MX_I2C1_Init+0x74>)
 800c9c8:	0018      	movs	r0, r3
 800c9ca:	f009 fb85 	bl	80160d8 <HAL_I2C_Init>
 800c9ce:	1e03      	subs	r3, r0, #0
 800c9d0:	d001      	beq.n	800c9d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800c9d2:	f000 fdf7 	bl	800d5c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800c9d6:	4b0a      	ldr	r3, [pc, #40]	@ (800ca00 <MX_I2C1_Init+0x74>)
 800c9d8:	2100      	movs	r1, #0
 800c9da:	0018      	movs	r0, r3
 800c9dc:	f00c fa62 	bl	8018ea4 <HAL_I2CEx_ConfigAnalogFilter>
 800c9e0:	1e03      	subs	r3, r0, #0
 800c9e2:	d001      	beq.n	800c9e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800c9e4:	f000 fdee 	bl	800d5c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800c9e8:	4b05      	ldr	r3, [pc, #20]	@ (800ca00 <MX_I2C1_Init+0x74>)
 800c9ea:	2100      	movs	r1, #0
 800c9ec:	0018      	movs	r0, r3
 800c9ee:	f00c faa5 	bl	8018f3c <HAL_I2CEx_ConfigDigitalFilter>
 800c9f2:	1e03      	subs	r3, r0, #0
 800c9f4:	d001      	beq.n	800c9fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800c9f6:	f000 fde5 	bl	800d5c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800c9fa:	46c0      	nop			@ (mov r8, r8)
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}
 800ca00:	20000ef0 	.word	0x20000ef0
 800ca04:	40005400 	.word	0x40005400
 800ca08:	00503d58 	.word	0x00503d58

0800ca0c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800ca10:	4b1b      	ldr	r3, [pc, #108]	@ (800ca80 <MX_I2C2_Init+0x74>)
 800ca12:	4a1c      	ldr	r2, [pc, #112]	@ (800ca84 <MX_I2C2_Init+0x78>)
 800ca14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 800ca16:	4b1a      	ldr	r3, [pc, #104]	@ (800ca80 <MX_I2C2_Init+0x74>)
 800ca18:	4a1b      	ldr	r2, [pc, #108]	@ (800ca88 <MX_I2C2_Init+0x7c>)
 800ca1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800ca1c:	4b18      	ldr	r3, [pc, #96]	@ (800ca80 <MX_I2C2_Init+0x74>)
 800ca1e:	2200      	movs	r2, #0
 800ca20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ca22:	4b17      	ldr	r3, [pc, #92]	@ (800ca80 <MX_I2C2_Init+0x74>)
 800ca24:	2201      	movs	r2, #1
 800ca26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ca28:	4b15      	ldr	r3, [pc, #84]	@ (800ca80 <MX_I2C2_Init+0x74>)
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800ca2e:	4b14      	ldr	r3, [pc, #80]	@ (800ca80 <MX_I2C2_Init+0x74>)
 800ca30:	2200      	movs	r2, #0
 800ca32:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800ca34:	4b12      	ldr	r3, [pc, #72]	@ (800ca80 <MX_I2C2_Init+0x74>)
 800ca36:	2200      	movs	r2, #0
 800ca38:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ca3a:	4b11      	ldr	r3, [pc, #68]	@ (800ca80 <MX_I2C2_Init+0x74>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ca40:	4b0f      	ldr	r3, [pc, #60]	@ (800ca80 <MX_I2C2_Init+0x74>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800ca46:	4b0e      	ldr	r3, [pc, #56]	@ (800ca80 <MX_I2C2_Init+0x74>)
 800ca48:	0018      	movs	r0, r3
 800ca4a:	f009 fb45 	bl	80160d8 <HAL_I2C_Init>
 800ca4e:	1e03      	subs	r3, r0, #0
 800ca50:	d001      	beq.n	800ca56 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800ca52:	f000 fdb7 	bl	800d5c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800ca56:	4b0a      	ldr	r3, [pc, #40]	@ (800ca80 <MX_I2C2_Init+0x74>)
 800ca58:	2100      	movs	r1, #0
 800ca5a:	0018      	movs	r0, r3
 800ca5c:	f00c fa22 	bl	8018ea4 <HAL_I2CEx_ConfigAnalogFilter>
 800ca60:	1e03      	subs	r3, r0, #0
 800ca62:	d001      	beq.n	800ca68 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800ca64:	f000 fdae 	bl	800d5c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800ca68:	4b05      	ldr	r3, [pc, #20]	@ (800ca80 <MX_I2C2_Init+0x74>)
 800ca6a:	2100      	movs	r1, #0
 800ca6c:	0018      	movs	r0, r3
 800ca6e:	f00c fa65 	bl	8018f3c <HAL_I2CEx_ConfigDigitalFilter>
 800ca72:	1e03      	subs	r3, r0, #0
 800ca74:	d001      	beq.n	800ca7a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800ca76:	f000 fda5 	bl	800d5c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800ca7a:	46c0      	nop			@ (mov r8, r8)
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	20000f44 	.word	0x20000f44
 800ca84:	40005800 	.word	0x40005800
 800ca88:	00503d58 	.word	0x00503d58

0800ca8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800ca8c:	b590      	push	{r4, r7, lr}
 800ca8e:	b08b      	sub	sp, #44	@ 0x2c
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca94:	2414      	movs	r4, #20
 800ca96:	193b      	adds	r3, r7, r4
 800ca98:	0018      	movs	r0, r3
 800ca9a:	2314      	movs	r3, #20
 800ca9c:	001a      	movs	r2, r3
 800ca9e:	2100      	movs	r1, #0
 800caa0:	f019 fe10 	bl	80266c4 <memset>
  if(i2cHandle->Instance==I2C1)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a5d      	ldr	r2, [pc, #372]	@ (800cc20 <HAL_I2C_MspInit+0x194>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d000      	beq.n	800cab0 <HAL_I2C_MspInit+0x24>
 800caae:	e083      	b.n	800cbb8 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cab0:	4b5c      	ldr	r3, [pc, #368]	@ (800cc24 <HAL_I2C_MspInit+0x198>)
 800cab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cab4:	4b5b      	ldr	r3, [pc, #364]	@ (800cc24 <HAL_I2C_MspInit+0x198>)
 800cab6:	2102      	movs	r1, #2
 800cab8:	430a      	orrs	r2, r1
 800caba:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cabc:	4b59      	ldr	r3, [pc, #356]	@ (800cc24 <HAL_I2C_MspInit+0x198>)
 800cabe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cac0:	2202      	movs	r2, #2
 800cac2:	4013      	ands	r3, r2
 800cac4:	613b      	str	r3, [r7, #16]
 800cac6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800cac8:	0021      	movs	r1, r4
 800caca:	187b      	adds	r3, r7, r1
 800cacc:	22c0      	movs	r2, #192	@ 0xc0
 800cace:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cad0:	187b      	adds	r3, r7, r1
 800cad2:	2212      	movs	r2, #18
 800cad4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cad6:	187b      	adds	r3, r7, r1
 800cad8:	2200      	movs	r2, #0
 800cada:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cadc:	187b      	adds	r3, r7, r1
 800cade:	2203      	movs	r2, #3
 800cae0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800cae2:	187b      	adds	r3, r7, r1
 800cae4:	2201      	movs	r2, #1
 800cae6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cae8:	187b      	adds	r3, r7, r1
 800caea:	4a4f      	ldr	r2, [pc, #316]	@ (800cc28 <HAL_I2C_MspInit+0x19c>)
 800caec:	0019      	movs	r1, r3
 800caee:	0010      	movs	r0, r2
 800caf0:	f009 f91e 	bl	8015d30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800caf4:	4b4b      	ldr	r3, [pc, #300]	@ (800cc24 <HAL_I2C_MspInit+0x198>)
 800caf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800caf8:	4b4a      	ldr	r3, [pc, #296]	@ (800cc24 <HAL_I2C_MspInit+0x198>)
 800cafa:	2180      	movs	r1, #128	@ 0x80
 800cafc:	0389      	lsls	r1, r1, #14
 800cafe:	430a      	orrs	r2, r1
 800cb00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800cb02:	4b4a      	ldr	r3, [pc, #296]	@ (800cc2c <HAL_I2C_MspInit+0x1a0>)
 800cb04:	4a4a      	ldr	r2, [pc, #296]	@ (800cc30 <HAL_I2C_MspInit+0x1a4>)
 800cb06:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800cb08:	4b48      	ldr	r3, [pc, #288]	@ (800cc2c <HAL_I2C_MspInit+0x1a0>)
 800cb0a:	2206      	movs	r2, #6
 800cb0c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cb0e:	4b47      	ldr	r3, [pc, #284]	@ (800cc2c <HAL_I2C_MspInit+0x1a0>)
 800cb10:	2200      	movs	r2, #0
 800cb12:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cb14:	4b45      	ldr	r3, [pc, #276]	@ (800cc2c <HAL_I2C_MspInit+0x1a0>)
 800cb16:	2200      	movs	r2, #0
 800cb18:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800cb1a:	4b44      	ldr	r3, [pc, #272]	@ (800cc2c <HAL_I2C_MspInit+0x1a0>)
 800cb1c:	2280      	movs	r2, #128	@ 0x80
 800cb1e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cb20:	4b42      	ldr	r3, [pc, #264]	@ (800cc2c <HAL_I2C_MspInit+0x1a0>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cb26:	4b41      	ldr	r3, [pc, #260]	@ (800cc2c <HAL_I2C_MspInit+0x1a0>)
 800cb28:	2200      	movs	r2, #0
 800cb2a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800cb2c:	4b3f      	ldr	r3, [pc, #252]	@ (800cc2c <HAL_I2C_MspInit+0x1a0>)
 800cb2e:	2200      	movs	r2, #0
 800cb30:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800cb32:	4b3e      	ldr	r3, [pc, #248]	@ (800cc2c <HAL_I2C_MspInit+0x1a0>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800cb38:	4b3c      	ldr	r3, [pc, #240]	@ (800cc2c <HAL_I2C_MspInit+0x1a0>)
 800cb3a:	0018      	movs	r0, r3
 800cb3c:	f008 fcdc 	bl	80154f8 <HAL_DMA_Init>
 800cb40:	1e03      	subs	r3, r0, #0
 800cb42:	d001      	beq.n	800cb48 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 800cb44:	f000 fd3e 	bl	800d5c4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4a38      	ldr	r2, [pc, #224]	@ (800cc2c <HAL_I2C_MspInit+0x1a0>)
 800cb4c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800cb4e:	4b37      	ldr	r3, [pc, #220]	@ (800cc2c <HAL_I2C_MspInit+0x1a0>)
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800cb54:	4b37      	ldr	r3, [pc, #220]	@ (800cc34 <HAL_I2C_MspInit+0x1a8>)
 800cb56:	4a38      	ldr	r2, [pc, #224]	@ (800cc38 <HAL_I2C_MspInit+0x1ac>)
 800cb58:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800cb5a:	4b36      	ldr	r3, [pc, #216]	@ (800cc34 <HAL_I2C_MspInit+0x1a8>)
 800cb5c:	2206      	movs	r2, #6
 800cb5e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cb60:	4b34      	ldr	r3, [pc, #208]	@ (800cc34 <HAL_I2C_MspInit+0x1a8>)
 800cb62:	2210      	movs	r2, #16
 800cb64:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cb66:	4b33      	ldr	r3, [pc, #204]	@ (800cc34 <HAL_I2C_MspInit+0x1a8>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800cb6c:	4b31      	ldr	r3, [pc, #196]	@ (800cc34 <HAL_I2C_MspInit+0x1a8>)
 800cb6e:	2280      	movs	r2, #128	@ 0x80
 800cb70:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cb72:	4b30      	ldr	r3, [pc, #192]	@ (800cc34 <HAL_I2C_MspInit+0x1a8>)
 800cb74:	2200      	movs	r2, #0
 800cb76:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cb78:	4b2e      	ldr	r3, [pc, #184]	@ (800cc34 <HAL_I2C_MspInit+0x1a8>)
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800cb7e:	4b2d      	ldr	r3, [pc, #180]	@ (800cc34 <HAL_I2C_MspInit+0x1a8>)
 800cb80:	2200      	movs	r2, #0
 800cb82:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800cb84:	4b2b      	ldr	r3, [pc, #172]	@ (800cc34 <HAL_I2C_MspInit+0x1a8>)
 800cb86:	2200      	movs	r2, #0
 800cb88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800cb8a:	4b2a      	ldr	r3, [pc, #168]	@ (800cc34 <HAL_I2C_MspInit+0x1a8>)
 800cb8c:	0018      	movs	r0, r3
 800cb8e:	f008 fcb3 	bl	80154f8 <HAL_DMA_Init>
 800cb92:	1e03      	subs	r3, r0, #0
 800cb94:	d001      	beq.n	800cb9a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800cb96:	f000 fd15 	bl	800d5c4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4a25      	ldr	r2, [pc, #148]	@ (800cc34 <HAL_I2C_MspInit+0x1a8>)
 800cb9e:	639a      	str	r2, [r3, #56]	@ 0x38
 800cba0:	4b24      	ldr	r3, [pc, #144]	@ (800cc34 <HAL_I2C_MspInit+0x1a8>)
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800cba6:	2200      	movs	r2, #0
 800cba8:	2100      	movs	r1, #0
 800cbaa:	2017      	movs	r0, #23
 800cbac:	f008 fc6e 	bl	801548c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800cbb0:	2017      	movs	r0, #23
 800cbb2:	f008 fc80 	bl	80154b6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800cbb6:	e02e      	b.n	800cc16 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a1f      	ldr	r2, [pc, #124]	@ (800cc3c <HAL_I2C_MspInit+0x1b0>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d129      	bne.n	800cc16 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cbc2:	4b18      	ldr	r3, [pc, #96]	@ (800cc24 <HAL_I2C_MspInit+0x198>)
 800cbc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbc6:	4b17      	ldr	r3, [pc, #92]	@ (800cc24 <HAL_I2C_MspInit+0x198>)
 800cbc8:	2102      	movs	r1, #2
 800cbca:	430a      	orrs	r2, r1
 800cbcc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cbce:	4b15      	ldr	r3, [pc, #84]	@ (800cc24 <HAL_I2C_MspInit+0x198>)
 800cbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbd2:	2202      	movs	r2, #2
 800cbd4:	4013      	ands	r3, r2
 800cbd6:	60fb      	str	r3, [r7, #12]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800cbda:	2114      	movs	r1, #20
 800cbdc:	187b      	adds	r3, r7, r1
 800cbde:	22c0      	movs	r2, #192	@ 0xc0
 800cbe0:	0112      	lsls	r2, r2, #4
 800cbe2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cbe4:	187b      	adds	r3, r7, r1
 800cbe6:	2212      	movs	r2, #18
 800cbe8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbea:	187b      	adds	r3, r7, r1
 800cbec:	2200      	movs	r2, #0
 800cbee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbf0:	187b      	adds	r3, r7, r1
 800cbf2:	2203      	movs	r2, #3
 800cbf4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800cbf6:	187b      	adds	r3, r7, r1
 800cbf8:	2206      	movs	r2, #6
 800cbfa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cbfc:	187b      	adds	r3, r7, r1
 800cbfe:	4a0a      	ldr	r2, [pc, #40]	@ (800cc28 <HAL_I2C_MspInit+0x19c>)
 800cc00:	0019      	movs	r1, r3
 800cc02:	0010      	movs	r0, r2
 800cc04:	f009 f894 	bl	8015d30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800cc08:	4b06      	ldr	r3, [pc, #24]	@ (800cc24 <HAL_I2C_MspInit+0x198>)
 800cc0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc0c:	4b05      	ldr	r3, [pc, #20]	@ (800cc24 <HAL_I2C_MspInit+0x198>)
 800cc0e:	2180      	movs	r1, #128	@ 0x80
 800cc10:	03c9      	lsls	r1, r1, #15
 800cc12:	430a      	orrs	r2, r1
 800cc14:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800cc16:	46c0      	nop			@ (mov r8, r8)
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	b00b      	add	sp, #44	@ 0x2c
 800cc1c:	bd90      	pop	{r4, r7, pc}
 800cc1e:	46c0      	nop			@ (mov r8, r8)
 800cc20:	40005400 	.word	0x40005400
 800cc24:	40021000 	.word	0x40021000
 800cc28:	50000400 	.word	0x50000400
 800cc2c:	20000f98 	.word	0x20000f98
 800cc30:	40020030 	.word	0x40020030
 800cc34:	20000fe0 	.word	0x20000fe0
 800cc38:	4002001c 	.word	0x4002001c
 800cc3c:	40005800 	.word	0x40005800

0800cc40 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800cc44:	4b10      	ldr	r3, [pc, #64]	@ (800cc88 <MX_I2S2_Init+0x48>)
 800cc46:	4a11      	ldr	r2, [pc, #68]	@ (800cc8c <MX_I2S2_Init+0x4c>)
 800cc48:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800cc4a:	4b0f      	ldr	r3, [pc, #60]	@ (800cc88 <MX_I2S2_Init+0x48>)
 800cc4c:	22c0      	movs	r2, #192	@ 0xc0
 800cc4e:	0092      	lsls	r2, r2, #2
 800cc50:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800cc52:	4b0d      	ldr	r3, [pc, #52]	@ (800cc88 <MX_I2S2_Init+0x48>)
 800cc54:	2200      	movs	r2, #0
 800cc56:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800cc58:	4b0b      	ldr	r3, [pc, #44]	@ (800cc88 <MX_I2S2_Init+0x48>)
 800cc5a:	2203      	movs	r2, #3
 800cc5c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800cc5e:	4b0a      	ldr	r3, [pc, #40]	@ (800cc88 <MX_I2S2_Init+0x48>)
 800cc60:	2200      	movs	r2, #0
 800cc62:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800cc64:	4b08      	ldr	r3, [pc, #32]	@ (800cc88 <MX_I2S2_Init+0x48>)
 800cc66:	22fa      	movs	r2, #250	@ 0xfa
 800cc68:	0192      	lsls	r2, r2, #6
 800cc6a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800cc6c:	4b06      	ldr	r3, [pc, #24]	@ (800cc88 <MX_I2S2_Init+0x48>)
 800cc6e:	2200      	movs	r2, #0
 800cc70:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800cc72:	4b05      	ldr	r3, [pc, #20]	@ (800cc88 <MX_I2S2_Init+0x48>)
 800cc74:	0018      	movs	r0, r3
 800cc76:	f00c f9ad 	bl	8018fd4 <HAL_I2S_Init>
 800cc7a:	1e03      	subs	r3, r0, #0
 800cc7c:	d001      	beq.n	800cc82 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800cc7e:	f000 fca1 	bl	800d5c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800cc82:	46c0      	nop			@ (mov r8, r8)
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	20001028 	.word	0x20001028
 800cc8c:	40003800 	.word	0x40003800

0800cc90 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800cc90:	b590      	push	{r4, r7, lr}
 800cc92:	b089      	sub	sp, #36	@ 0x24
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc98:	240c      	movs	r4, #12
 800cc9a:	193b      	adds	r3, r7, r4
 800cc9c:	0018      	movs	r0, r3
 800cc9e:	2314      	movs	r3, #20
 800cca0:	001a      	movs	r2, r3
 800cca2:	2100      	movs	r1, #0
 800cca4:	f019 fd0e 	bl	80266c4 <memset>
  if(i2sHandle->Instance==SPI2)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a2d      	ldr	r2, [pc, #180]	@ (800cd64 <HAL_I2S_MspInit+0xd4>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d154      	bne.n	800cd5c <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ccb2:	4b2d      	ldr	r3, [pc, #180]	@ (800cd68 <HAL_I2S_MspInit+0xd8>)
 800ccb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccb6:	4b2c      	ldr	r3, [pc, #176]	@ (800cd68 <HAL_I2S_MspInit+0xd8>)
 800ccb8:	2180      	movs	r1, #128	@ 0x80
 800ccba:	01c9      	lsls	r1, r1, #7
 800ccbc:	430a      	orrs	r2, r1
 800ccbe:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ccc0:	4b29      	ldr	r3, [pc, #164]	@ (800cd68 <HAL_I2S_MspInit+0xd8>)
 800ccc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccc4:	4b28      	ldr	r3, [pc, #160]	@ (800cd68 <HAL_I2S_MspInit+0xd8>)
 800ccc6:	2102      	movs	r1, #2
 800ccc8:	430a      	orrs	r2, r1
 800ccca:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cccc:	4b26      	ldr	r3, [pc, #152]	@ (800cd68 <HAL_I2S_MspInit+0xd8>)
 800ccce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	4013      	ands	r3, r2
 800ccd4:	60bb      	str	r3, [r7, #8]
 800ccd6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800ccd8:	193b      	adds	r3, r7, r4
 800ccda:	22b0      	movs	r2, #176	@ 0xb0
 800ccdc:	0212      	lsls	r2, r2, #8
 800ccde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cce0:	0021      	movs	r1, r4
 800cce2:	187b      	adds	r3, r7, r1
 800cce4:	2202      	movs	r2, #2
 800cce6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cce8:	187b      	adds	r3, r7, r1
 800ccea:	2200      	movs	r2, #0
 800ccec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ccee:	187b      	adds	r3, r7, r1
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800ccf4:	187b      	adds	r3, r7, r1
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ccfa:	187b      	adds	r3, r7, r1
 800ccfc:	4a1b      	ldr	r2, [pc, #108]	@ (800cd6c <HAL_I2S_MspInit+0xdc>)
 800ccfe:	0019      	movs	r1, r3
 800cd00:	0010      	movs	r0, r2
 800cd02:	f009 f815 	bl	8015d30 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800cd06:	4b1a      	ldr	r3, [pc, #104]	@ (800cd70 <HAL_I2S_MspInit+0xe0>)
 800cd08:	4a1a      	ldr	r2, [pc, #104]	@ (800cd74 <HAL_I2S_MspInit+0xe4>)
 800cd0a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800cd0c:	4b18      	ldr	r3, [pc, #96]	@ (800cd70 <HAL_I2S_MspInit+0xe0>)
 800cd0e:	2202      	movs	r2, #2
 800cd10:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cd12:	4b17      	ldr	r3, [pc, #92]	@ (800cd70 <HAL_I2S_MspInit+0xe0>)
 800cd14:	2200      	movs	r2, #0
 800cd16:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cd18:	4b15      	ldr	r3, [pc, #84]	@ (800cd70 <HAL_I2S_MspInit+0xe0>)
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800cd1e:	4b14      	ldr	r3, [pc, #80]	@ (800cd70 <HAL_I2S_MspInit+0xe0>)
 800cd20:	2280      	movs	r2, #128	@ 0x80
 800cd22:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800cd24:	4b12      	ldr	r3, [pc, #72]	@ (800cd70 <HAL_I2S_MspInit+0xe0>)
 800cd26:	2280      	movs	r2, #128	@ 0x80
 800cd28:	0052      	lsls	r2, r2, #1
 800cd2a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800cd2c:	4b10      	ldr	r3, [pc, #64]	@ (800cd70 <HAL_I2S_MspInit+0xe0>)
 800cd2e:	2280      	movs	r2, #128	@ 0x80
 800cd30:	00d2      	lsls	r2, r2, #3
 800cd32:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800cd34:	4b0e      	ldr	r3, [pc, #56]	@ (800cd70 <HAL_I2S_MspInit+0xe0>)
 800cd36:	2220      	movs	r2, #32
 800cd38:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800cd3a:	4b0d      	ldr	r3, [pc, #52]	@ (800cd70 <HAL_I2S_MspInit+0xe0>)
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800cd40:	4b0b      	ldr	r3, [pc, #44]	@ (800cd70 <HAL_I2S_MspInit+0xe0>)
 800cd42:	0018      	movs	r0, r3
 800cd44:	f008 fbd8 	bl	80154f8 <HAL_DMA_Init>
 800cd48:	1e03      	subs	r3, r0, #0
 800cd4a:	d001      	beq.n	800cd50 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800cd4c:	f000 fc3a 	bl	800d5c4 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	4a07      	ldr	r2, [pc, #28]	@ (800cd70 <HAL_I2S_MspInit+0xe0>)
 800cd54:	631a      	str	r2, [r3, #48]	@ 0x30
 800cd56:	4b06      	ldr	r3, [pc, #24]	@ (800cd70 <HAL_I2S_MspInit+0xe0>)
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800cd5c:	46c0      	nop			@ (mov r8, r8)
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	b009      	add	sp, #36	@ 0x24
 800cd62:	bd90      	pop	{r4, r7, pc}
 800cd64:	40003800 	.word	0x40003800
 800cd68:	40021000 	.word	0x40021000
 800cd6c:	50000400 	.word	0x50000400
 800cd70:	20001064 	.word	0x20001064
 800cd74:	40020044 	.word	0x40020044

0800cd78 <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	af00      	add	r7, sp, #0
  testDone = true;
 800cd7c:	4b14      	ldr	r3, [pc, #80]	@ (800cdd0 <SetTestDone+0x58>)
 800cd7e:	2201      	movs	r2, #1
 800cd80:	701a      	strb	r2, [r3, #0]
  HAL_Delay(500);
 800cd82:	23fa      	movs	r3, #250	@ 0xfa
 800cd84:	005b      	lsls	r3, r3, #1
 800cd86:	0018      	movs	r0, r3
 800cd88:	f007 fee6 	bl	8014b58 <HAL_Delay>
  SetDBLED(false, false, true);
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	2100      	movs	r1, #0
 800cd90:	2000      	movs	r0, #0
 800cd92:	f005 fe33 	bl	80129fc <SetDBLED>
  SetStatusLED(LED_OFF, LED_OFF, LED_ON);
 800cd96:	4a0f      	ldr	r2, [pc, #60]	@ (800cdd4 <SetTestDone+0x5c>)
 800cd98:	23fa      	movs	r3, #250	@ 0xfa
 800cd9a:	0119      	lsls	r1, r3, #4
 800cd9c:	23fa      	movs	r3, #250	@ 0xfa
 800cd9e:	011b      	lsls	r3, r3, #4
 800cda0:	0018      	movs	r0, r3
 800cda2:	f005 fdf7 	bl	8012994 <SetStatusLED>
  SetVocLED(LED_OFF, LED_OFF, LED_ON);
 800cda6:	4a0b      	ldr	r2, [pc, #44]	@ (800cdd4 <SetTestDone+0x5c>)
 800cda8:	23fa      	movs	r3, #250	@ 0xfa
 800cdaa:	0119      	lsls	r1, r3, #4
 800cdac:	23fa      	movs	r3, #250	@ 0xfa
 800cdae:	011b      	lsls	r3, r3, #4
 800cdb0:	0018      	movs	r0, r3
 800cdb2:	f005 fe6d 	bl	8012a90 <SetVocLED>
  HAL_Delay(500);
 800cdb6:	23fa      	movs	r3, #250	@ 0xfa
 800cdb8:	005b      	lsls	r3, r3, #1
 800cdba:	0018      	movs	r0, r3
 800cdbc:	f007 fecc 	bl	8014b58 <HAL_Delay>
  SetLEDsOff();
 800cdc0:	f005 ffa6 	bl	8012d10 <SetLEDsOff>
  InitDone();
 800cdc4:	f005 fd32 	bl	801282c <InitDone>
}
 800cdc8:	46c0      	nop			@ (mov r8, r8)
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	46c0      	nop			@ (mov r8, r8)
 800cdd0:	200010ac 	.word	0x200010ac
 800cdd4:	00000bb8 	.word	0x00000bb8

0800cdd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cdde:	f007 fe4b 	bl	8014a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cde2:	f000 fa83 	bl	800d2ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cde6:	f7ff fc35 	bl	800c654 <MX_GPIO_Init>
  MX_DMA_Init();
 800cdea:	f7ff fa5d 	bl	800c2a8 <MX_DMA_Init>
  MX_I2C1_Init();
 800cdee:	f7ff fdcd 	bl	800c98c <MX_I2C1_Init>
  MX_I2S2_Init();
 800cdf2:	f7ff ff25 	bl	800cc40 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800cdf6:	f006 ff3f 	bl	8013c78 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800cdfa:	f7ff fe07 	bl	800ca0c <MX_I2C2_Init>
  MX_TIM2_Init();
 800cdfe:	f006 fd33 	bl	8013868 <MX_TIM2_Init>
  MX_TIM3_Init();
 800ce02:	f006 fda5 	bl	8013950 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800ce06:	f006 ff67 	bl	8013cd8 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800ce0a:	f7fd fea7 	bl	800ab5c <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800ce0e:	f016 f92b 	bl	8023068 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800ce12:	f001 fc33 	bl	800e67c <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800ce16:	f006 fef9 	bl	8013c0c <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800ce1a:	f006 fe17 	bl	8013a4c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  if (Check_USB_PowerOn())
 800ce1e:	f7fc feb9 	bl	8009b94 <Check_USB_PowerOn>
 800ce22:	1e03      	subs	r3, r0, #0
 800ce24:	d006      	beq.n	800ce34 <main+0x5c>
    while (HAL_GetTick() < 650);  // Wait for the USB to become ready
 800ce26:	46c0      	nop			@ (mov r8, r8)
 800ce28:	f007 fe8c 	bl	8014b44 <HAL_GetTick>
 800ce2c:	0003      	movs	r3, r0
 800ce2e:	4aad      	ldr	r2, [pc, #692]	@ (800d0e4 <main+0x30c>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d9f9      	bls.n	800ce28 <main+0x50>
	 * : Put SSID in EEPROM
	 * : Turn on heater if humidity is too high
	 * : LEDs indicator for air quality
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800ce34:	4aac      	ldr	r2, [pc, #688]	@ (800d0e8 <main+0x310>)
 800ce36:	4bad      	ldr	r3, [pc, #692]	@ (800d0ec <main+0x314>)
 800ce38:	0011      	movs	r1, r2
 800ce3a:	0018      	movs	r0, r3
 800ce3c:	f7ff fd3a 	bl	800c8b4 <GPIO_InitPWMLEDs>
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800ce40:	4aab      	ldr	r2, [pc, #684]	@ (800d0f0 <main+0x318>)
 800ce42:	4bac      	ldr	r3, [pc, #688]	@ (800d0f4 <main+0x31c>)
 800ce44:	0019      	movs	r1, r3
 800ce46:	2002      	movs	r0, #2
 800ce48:	f007 f904 	bl	8014054 <CreateLine>
  BinaryReleaseInfo();
 800ce4c:	f007 f996 	bl	801417c <BinaryReleaseInfo>
  ReadUint8ArrayEEprom(USBlogstatusConfigAddr, (uint8_t*)usblog, uint8_tSize);
 800ce50:	4ba9      	ldr	r3, [pc, #676]	@ (800d0f8 <main+0x320>)
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	0019      	movs	r1, r3
 800ce56:	4ba9      	ldr	r3, [pc, #676]	@ (800d0fc <main+0x324>)
 800ce58:	2201      	movs	r2, #1
 800ce5a:	0018      	movs	r0, r3
 800ce5c:	f7ff fa9e 	bl	800c39c <ReadUint8ArrayEEprom>
  charge = Battery_Upkeep();
 800ce60:	f006 fb8a 	bl	8013578 <Battery_Upkeep>
 800ce64:	0003      	movs	r3, r0
 800ce66:	001a      	movs	r2, r3
 800ce68:	4ba5      	ldr	r3, [pc, #660]	@ (800d100 <main+0x328>)
 800ce6a:	701a      	strb	r2, [r3, #0]
  if(charge == BATTERY_CRITICAL) {
 800ce6c:	4ba4      	ldr	r3, [pc, #656]	@ (800d100 <main+0x328>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d113      	bne.n	800ce9c <main+0xc4>
    SetAllREDLED();
 800ce74:	f005 ff68 	bl	8012d48 <SetAllREDLED>
    Info("Battery voltage is critical: %.02fV", ReadBatteryVoltage());
 800ce78:	f7fc fdd6 	bl	8009a28 <ReadBatteryVoltage>
 800ce7c:	1c03      	adds	r3, r0, #0
 800ce7e:	1c18      	adds	r0, r3, #0
 800ce80:	f7f6 fd08 	bl	8003894 <__aeabi_f2d>
 800ce84:	0002      	movs	r2, r0
 800ce86:	000b      	movs	r3, r1
 800ce88:	489e      	ldr	r0, [pc, #632]	@ (800d104 <main+0x32c>)
 800ce8a:	499a      	ldr	r1, [pc, #616]	@ (800d0f4 <main+0x31c>)
 800ce8c:	9200      	str	r2, [sp, #0]
 800ce8e:	9301      	str	r3, [sp, #4]
 800ce90:	0002      	movs	r2, r0
 800ce92:	2002      	movs	r0, #2
 800ce94:	f007 f8de 	bl	8014054 <CreateLine>
#ifndef STLINK_V3PWR
    Enter_Standby_Mode(); // Battery is empty we are going in deep sleep, nearly off and no wakeup from RTC
 800ce98:	f7fd fb2a 	bl	800a4f0 <Enter_Standby_Mode>
#endif
  }
  if(UserButton_Pressed()){
 800ce9c:	f7fc ff02 	bl	8009ca4 <UserButton_Pressed>
 800cea0:	1e03      	subs	r3, r0, #0
 800cea2:	d004      	beq.n	800ceae <main+0xd6>
    EnableESPProg();
 800cea4:	f016 f9bc 	bl	8023220 <EnableESPProg>
    ESP_Programming = true;
 800cea8:	4b97      	ldr	r3, [pc, #604]	@ (800d108 <main+0x330>)
 800ceaa:	2201      	movs	r2, #1
 800ceac:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 800ceae:	2003      	movs	r0, #3
 800ceb0:	f007 f94a 	bl	8014148 <SetVerboseLevel>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800ceb4:	4995      	ldr	r1, [pc, #596]	@ (800d10c <main+0x334>)
 800ceb6:	4b96      	ldr	r3, [pc, #600]	@ (800d110 <main+0x338>)
 800ceb8:	2201      	movs	r2, #1
 800ceba:	0018      	movs	r0, r3
 800cebc:	f010 fc38 	bl	801d730 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 800cec0:	4b94      	ldr	r3, [pc, #592]	@ (800d114 <main+0x33c>)
 800cec2:	0018      	movs	r0, r3
 800cec4:	f7fd fc50 	bl	800a768 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 800cec8:	4a93      	ldr	r2, [pc, #588]	@ (800d118 <main+0x340>)
 800ceca:	4994      	ldr	r1, [pc, #592]	@ (800d11c <main+0x344>)
 800cecc:	4894      	ldr	r0, [pc, #592]	@ (800d120 <main+0x348>)
 800cece:	230b      	movs	r3, #11
 800ced0:	f004 fe22 	bl	8011b18 <soundInit>
 800ced4:	0003      	movs	r3, r0
 800ced6:	001a      	movs	r2, r3
 800ced8:	2301      	movs	r3, #1
 800ceda:	4053      	eors	r3, r2
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d005      	beq.n	800ceee <main+0x116>
    errorHandler(__func__, __LINE__, __FILE__);
 800cee2:	4a90      	ldr	r2, [pc, #576]	@ (800d124 <main+0x34c>)
 800cee4:	4b90      	ldr	r3, [pc, #576]	@ (800d128 <main+0x350>)
 800cee6:	21f2      	movs	r1, #242	@ 0xf2
 800cee8:	0018      	movs	r0, r3
 800ceea:	f007 f99b 	bl	8014224 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 800ceee:	4b8f      	ldr	r3, [pc, #572]	@ (800d12c <main+0x354>)
 800cef0:	4a8f      	ldr	r2, [pc, #572]	@ (800d130 <main+0x358>)
 800cef2:	498a      	ldr	r1, [pc, #552]	@ (800d11c <main+0x344>)
 800cef4:	488f      	ldr	r0, [pc, #572]	@ (800d134 <main+0x35c>)
 800cef6:	f000 fc57 	bl	800d7a8 <Device_Init>
  deviceTimeOut = HAL_GetTick() + DEVICE_INIT_TIMEOUT;
 800cefa:	f007 fe23 	bl	8014b44 <HAL_GetTick>
 800cefe:	0003      	movs	r3, r0
 800cf00:	4a8d      	ldr	r2, [pc, #564]	@ (800d138 <main+0x360>)
 800cf02:	189a      	adds	r2, r3, r2
 800cf04:	4b8d      	ldr	r3, [pc, #564]	@ (800d13c <main+0x364>)
 800cf06:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 800cf08:	f7fc fe44 	bl	8009b94 <Check_USB_PowerOn>
 800cf0c:	0003      	movs	r3, r0
 800cf0e:	1e5a      	subs	r2, r3, #1
 800cf10:	4193      	sbcs	r3, r2
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	2201      	movs	r2, #1
 800cf16:	4053      	eors	r3, r2
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	1c1a      	adds	r2, r3, #0
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	4013      	ands	r3, r2
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	4b87      	ldr	r3, [pc, #540]	@ (800d140 <main+0x368>)
 800cf24:	701a      	strb	r2, [r3, #0]
  if (Check_USB_PowerOn()) {
 800cf26:	f7fc fe35 	bl	8009b94 <Check_USB_PowerOn>
 800cf2a:	1e03      	subs	r3, r0, #0
 800cf2c:	d003      	beq.n	800cf36 <main+0x15e>
    printf_USB("input command followed by Enter or type Helpme\r\n");
 800cf2e:	4b85      	ldr	r3, [pc, #532]	@ (800d144 <main+0x36c>)
 800cf30:	0018      	movs	r0, r3
 800cf32:	f7fb fd93 	bl	8008a5c <printf_USB>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 800cf36:	4b84      	ldr	r3, [pc, #528]	@ (800d148 <main+0x370>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	0018      	movs	r0, r3
 800cf3c:	f007 f834 	bl	8013fa8 <TimestampIsReached>
 800cf40:	1e03      	subs	r3, r0, #0
 800cf42:	d00e      	beq.n	800cf62 <main+0x18a>
      charge = Battery_Upkeep();
 800cf44:	f006 fb18 	bl	8013578 <Battery_Upkeep>
 800cf48:	0003      	movs	r3, r0
 800cf4a:	001a      	movs	r2, r3
 800cf4c:	4b6c      	ldr	r3, [pc, #432]	@ (800d100 <main+0x328>)
 800cf4e:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + BATTERY_READ_CYCLE;
 800cf50:	f007 fdf8 	bl	8014b44 <HAL_GetTick>
 800cf54:	0003      	movs	r3, r0
 800cf56:	4a7d      	ldr	r2, [pc, #500]	@ (800d14c <main+0x374>)
 800cf58:	189a      	adds	r2, r3, r2
 800cf5a:	4b7b      	ldr	r3, [pc, #492]	@ (800d148 <main+0x370>)
 800cf5c:	601a      	str	r2, [r3, #0]
      showTime();
 800cf5e:	f7fc fecb 	bl	8009cf8 <showTime>

    }
    configCheck();
 800cf62:	f006 f965 	bl	8013230 <configCheck>
    if (charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 800cf66:	4b66      	ldr	r3, [pc, #408]	@ (800d100 <main+0x328>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d003      	beq.n	800cf76 <main+0x19e>
 800cf6e:	4b64      	ldr	r3, [pc, #400]	@ (800d100 <main+0x328>)
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d120      	bne.n	800cfb8 <main+0x1e0>
      WalkAllRedLED();
 800cf76:	f005 ff27 	bl	8012dc8 <WalkAllRedLED>
      Sensor.PM_measurementEnabled = false;
 800cf7a:	4b75      	ldr	r3, [pc, #468]	@ (800d150 <main+0x378>)
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	709a      	strb	r2, [r3, #2]
#ifdef USE_MAIL
      if ((charge == BATTERY_LOW) && (sendpwremail == CLEAR) && !EspTurnedOn && (!Check_USB_PowerOn())) {
 800cf80:	4b5f      	ldr	r3, [pc, #380]	@ (800d100 <main+0x328>)
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d117      	bne.n	800cfb8 <main+0x1e0>
 800cf88:	4b72      	ldr	r3, [pc, #456]	@ (800d154 <main+0x37c>)
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d113      	bne.n	800cfb8 <main+0x1e0>
 800cf90:	4b71      	ldr	r3, [pc, #452]	@ (800d158 <main+0x380>)
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	2201      	movs	r2, #1
 800cf96:	4053      	eors	r3, r2
 800cf98:	b2db      	uxtb	r3, r3
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00c      	beq.n	800cfb8 <main+0x1e0>
 800cf9e:	f7fc fdf9 	bl	8009b94 <Check_USB_PowerOn>
 800cfa2:	0003      	movs	r3, r0
 800cfa4:	001a      	movs	r2, r3
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	4053      	eors	r3, r2
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d003      	beq.n	800cfb8 <main+0x1e0>
        setModePowerMail();
 800cfb0:	f7f7 fd5e 	bl	8004a70 <setModePowerMail>
        ESP_Upkeep();
 800cfb4:	f7fa fb8c 	bl	80076d0 <ESP_Upkeep>
    // ==== end of test mail
*/
#endif
#ifndef STLINK_V3PWR
//==== disable for power measurements in test condition
    stlinkpwr = false;
 800cfb8:	4b68      	ldr	r3, [pc, #416]	@ (800d15c <main+0x384>)
 800cfba:	2200      	movs	r2, #0
 800cfbc:	701a      	strb	r2, [r3, #0]
    if (charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 800cfbe:	4b50      	ldr	r3, [pc, #320]	@ (800d100 <main+0x328>)
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d10a      	bne.n	800cfdc <main+0x204>
 800cfc6:	4b66      	ldr	r3, [pc, #408]	@ (800d160 <main+0x388>)
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	2b09      	cmp	r3, #9
 800cfcc:	d106      	bne.n	800cfdc <main+0x204>
       batteryEmpty = true;
 800cfce:	4b65      	ldr	r3, [pc, #404]	@ (800d164 <main+0x38c>)
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	701a      	strb	r2, [r3, #0]
       // we are going in deep sleep, nearly off and no wakeup from RTC Do not use standby mode,
       // because without a modification on the PCB the ESP32 is activated
       // instead use the stop mode with or without RTC
       //Enter_Standby_Mode();
       Enter_Stop_Mode_for_empty_battery(120); // light up the leds every 2 minutes
 800cfd4:	2078      	movs	r0, #120	@ 0x78
 800cfd6:	f7fd faab 	bl	800a530 <Enter_Stop_Mode_for_empty_battery>
 800cfda:	e002      	b.n	800cfe2 <main+0x20a>
    }
    else{
      batteryEmpty = false;
 800cfdc:	4b61      	ldr	r3, [pc, #388]	@ (800d164 <main+0x38c>)
 800cfde:	2200      	movs	r2, #0
 800cfe0:	701a      	strb	r2, [r3, #0]
    }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 800cfe2:	4b61      	ldr	r3, [pc, #388]	@ (800d168 <main+0x390>)
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d100      	bne.n	800cfec <main+0x214>
 800cfea:	e0f2      	b.n	800d1d2 <main+0x3fa>
 800cfec:	4b46      	ldr	r3, [pc, #280]	@ (800d108 <main+0x330>)
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	2201      	movs	r2, #1
 800cff2:	4053      	eors	r3, r2
 800cff4:	b2db      	uxtb	r3, r3
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d100      	bne.n	800cffc <main+0x224>
 800cffa:	e0ea      	b.n	800d1d2 <main+0x3fa>
 800cffc:	4b59      	ldr	r3, [pc, #356]	@ (800d164 <main+0x38c>)
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	2201      	movs	r2, #1
 800d002:	4053      	eors	r3, r2
 800d004:	b2db      	uxtb	r3, r3
 800d006:	2b00      	cmp	r3, #0
 800d008:	d100      	bne.n	800d00c <main+0x234>
 800d00a:	e0e2      	b.n	800d1d2 <main+0x3fa>
      if (priorUSBpluggedIn != usbPluggedIn) {
 800d00c:	4b4c      	ldr	r3, [pc, #304]	@ (800d140 <main+0x368>)
 800d00e:	781a      	ldrb	r2, [r3, #0]
 800d010:	4b56      	ldr	r3, [pc, #344]	@ (800d16c <main+0x394>)
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	429a      	cmp	r2, r3
 800d016:	d03a      	beq.n	800d08e <main+0x2b6>
        if (IsSGPPresent() && !usbPluggedIn) {
 800d018:	f000 fb58 	bl	800d6cc <IsSGPPresent>
 800d01c:	1e03      	subs	r3, r0, #0
 800d01e:	d009      	beq.n	800d034 <main+0x25c>
 800d020:	4b52      	ldr	r3, [pc, #328]	@ (800d16c <main+0x394>)
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	2201      	movs	r2, #1
 800d026:	4053      	eors	r3, r2
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d002      	beq.n	800d034 <main+0x25c>
          SetVOCSensorDIS_ENA(true);
 800d02e:	2001      	movs	r0, #1
 800d030:	f000 fb56 	bl	800d6e0 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 800d034:	4b4e      	ldr	r3, [pc, #312]	@ (800d170 <main+0x398>)
 800d036:	791b      	ldrb	r3, [r3, #4]
 800d038:	2b34      	cmp	r3, #52	@ 0x34
 800d03a:	d003      	beq.n	800d044 <main+0x26c>
 800d03c:	4b4c      	ldr	r3, [pc, #304]	@ (800d170 <main+0x398>)
 800d03e:	791b      	ldrb	r3, [r3, #4]
 800d040:	2b35      	cmp	r3, #53	@ 0x35
 800d042:	d106      	bne.n	800d052 <main+0x27a>
 800d044:	4b49      	ldr	r3, [pc, #292]	@ (800d16c <main+0x394>)
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d002      	beq.n	800d052 <main+0x27a>
          SetVOCSensorDIS_ENA(false);
 800d04c:	2000      	movs	r0, #0
 800d04e:	f000 fb47 	bl	800d6e0 <SetVOCSensorDIS_ENA>
        }
        if (!usbPluggedIn && (HAL_GetTick() > DEVICE_INIT_TIMEOUT)) {
 800d052:	4b46      	ldr	r3, [pc, #280]	@ (800d16c <main+0x394>)
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	2201      	movs	r2, #1
 800d058:	4053      	eors	r3, r2
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d012      	beq.n	800d086 <main+0x2ae>
 800d060:	f007 fd70 	bl	8014b44 <HAL_GetTick>
 800d064:	0003      	movs	r3, r0
 800d066:	4a34      	ldr	r2, [pc, #208]	@ (800d138 <main+0x360>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d90c      	bls.n	800d086 <main+0x2ae>
          Debug("Device time out set in main due to powerstatus shift");
 800d06c:	4a41      	ldr	r2, [pc, #260]	@ (800d174 <main+0x39c>)
 800d06e:	4b42      	ldr	r3, [pc, #264]	@ (800d178 <main+0x3a0>)
 800d070:	0019      	movs	r1, r3
 800d072:	2003      	movs	r0, #3
 800d074:	f006 ffee 	bl	8014054 <CreateLine>
          deviceTimeOut = HAL_GetTick() + DEVICE_TIMEOUT;
 800d078:	f007 fd64 	bl	8014b44 <HAL_GetTick>
 800d07c:	0003      	movs	r3, r0
 800d07e:	4a3f      	ldr	r2, [pc, #252]	@ (800d17c <main+0x3a4>)
 800d080:	189a      	adds	r2, r3, r2
 800d082:	4b2e      	ldr	r3, [pc, #184]	@ (800d13c <main+0x364>)
 800d084:	601a      	str	r2, [r3, #0]
        }
        priorUSBpluggedIn = usbPluggedIn;
 800d086:	4b39      	ldr	r3, [pc, #228]	@ (800d16c <main+0x394>)
 800d088:	781a      	ldrb	r2, [r3, #0]
 800d08a:	4b2d      	ldr	r3, [pc, #180]	@ (800d140 <main+0x368>)
 800d08c:	701a      	strb	r2, [r3, #0]
      }
      UpkeepI2Csensors();
 800d08e:	f000 ffd1 	bl	800e034 <UpkeepI2Csensors>
      if (Sensor.MIC_measurementEnabled) {
 800d092:	4b2f      	ldr	r3, [pc, #188]	@ (800d150 <main+0x378>)
 800d094:	78db      	ldrb	r3, [r3, #3]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d005      	beq.n	800d0a6 <main+0x2ce>
        MICstate = Mic_Upkeep();
 800d09a:	f001 f9db 	bl	800e454 <Mic_Upkeep>
 800d09e:	0003      	movs	r3, r0
 800d0a0:	001a      	movs	r2, r3
 800d0a2:	4b37      	ldr	r3, [pc, #220]	@ (800d180 <main+0x3a8>)
 800d0a4:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 800d0a6:	4b16      	ldr	r3, [pc, #88]	@ (800d100 <main+0x328>)
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d803      	bhi.n	800d0b6 <main+0x2de>
 800d0ae:	4b2b      	ldr	r3, [pc, #172]	@ (800d15c <main+0x384>)
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d066      	beq.n	800d184 <main+0x3ac>
 800d0b6:	4b26      	ldr	r3, [pc, #152]	@ (800d150 <main+0x378>)
 800d0b8:	789b      	ldrb	r3, [r3, #2]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d062      	beq.n	800d184 <main+0x3ac>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 800d0be:	f001 fb6b 	bl	800e798 <sen5x_Get_sen5x_enable_state>
 800d0c2:	0003      	movs	r3, r0
 800d0c4:	001a      	movs	r2, r3
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	4053      	eors	r3, r2
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d006      	beq.n	800d0de <main+0x306>
 800d0d0:	4b26      	ldr	r3, [pc, #152]	@ (800d16c <main+0x394>)
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d002      	beq.n	800d0de <main+0x306>
          sen5x_enable(0);  // this forces the sen5x to enable when powered
 800d0d8:	2000      	movs	r0, #0
 800d0da:	f001 fb99 	bl	800e810 <sen5x_enable>
        }
        sen5x_statemachine();
 800d0de:	f002 f931 	bl	800f344 <sen5x_statemachine>
 800d0e2:	e070      	b.n	800d1c6 <main+0x3ee>
 800d0e4:	00000289 	.word	0x00000289
 800d0e8:	20002160 	.word	0x20002160
 800d0ec:	20002120 	.word	0x20002120
 800d0f0:	0802cdfc 	.word	0x0802cdfc
 800d0f4:	0802ce28 	.word	0x0802ce28
 800d0f8:	200027ac 	.word	0x200027ac
 800d0fc:	08080194 	.word	0x08080194
 800d100:	200010c8 	.word	0x200010c8
 800d104:	0802ce2c 	.word	0x0802ce2c
 800d108:	200010ad 	.word	0x200010ad
 800d10c:	200010b4 	.word	0x200010b4
 800d110:	20002298 	.word	0x20002298
 800d114:	2000114c 	.word	0x2000114c
 800d118:	200021a0 	.word	0x200021a0
 800d11c:	20001028 	.word	0x20001028
 800d120:	20001064 	.word	0x20001064
 800d124:	0802ce50 	.word	0x0802ce50
 800d128:	0802e898 	.word	0x0802e898
 800d12c:	20002350 	.word	0x20002350
 800d130:	20000e18 	.word	0x20000e18
 800d134:	20000ef0 	.word	0x20000ef0
 800d138:	000061a8 	.word	0x000061a8
 800d13c:	200010c4 	.word	0x200010c4
 800d140:	200010b0 	.word	0x200010b0
 800d144:	0802ce64 	.word	0x0802ce64
 800d148:	200000a4 	.word	0x200000a4
 800d14c:	0000c350 	.word	0x0000c350
 800d150:	200010cc 	.word	0x200010cc
 800d154:	200010af 	.word	0x200010af
 800d158:	200005ac 	.word	0x200005ac
 800d15c:	200000a3 	.word	0x200000a3
 800d160:	200010b2 	.word	0x200010b2
 800d164:	200010ae 	.word	0x200010ae
 800d168:	200010ac 	.word	0x200010ac
 800d16c:	20002101 	.word	0x20002101
 800d170:	20001174 	.word	0x20001174
 800d174:	0802ce98 	.word	0x0802ce98
 800d178:	0802ced0 	.word	0x0802ced0
 800d17c:	00001194 	.word	0x00001194
 800d180:	200010b1 	.word	0x200010b1
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 800d184:	4b47      	ldr	r3, [pc, #284]	@ (800d2a4 <main+0x4cc>)
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d81c      	bhi.n	800d1c6 <main+0x3ee>
 800d18c:	4b46      	ldr	r3, [pc, #280]	@ (800d2a8 <main+0x4d0>)
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	2201      	movs	r2, #1
 800d192:	4053      	eors	r3, r2
 800d194:	b2db      	uxtb	r3, r3
 800d196:	2b00      	cmp	r3, #0
 800d198:	d015      	beq.n	800d1c6 <main+0x3ee>
 800d19a:	4b44      	ldr	r3, [pc, #272]	@ (800d2ac <main+0x4d4>)
 800d19c:	789b      	ldrb	r3, [r3, #2]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d011      	beq.n	800d1c6 <main+0x3ee>
        Info("Battery level insufficient for sen5x operation");
 800d1a2:	4a43      	ldr	r2, [pc, #268]	@ (800d2b0 <main+0x4d8>)
 800d1a4:	4b43      	ldr	r3, [pc, #268]	@ (800d2b4 <main+0x4dc>)
 800d1a6:	0019      	movs	r1, r3
 800d1a8:	2002      	movs	r0, #2
 800d1aa:	f006 ff53 	bl	8014054 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 800d1ae:	4b3f      	ldr	r3, [pc, #252]	@ (800d2ac <main+0x4d4>)
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 800d1b4:	4b40      	ldr	r3, [pc, #256]	@ (800d2b8 <main+0x4e0>)
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 800d1ba:	4b40      	ldr	r3, [pc, #256]	@ (800d2bc <main+0x4e4>)
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d001      	beq.n	800d1c6 <main+0x3ee>
          sen5x_Power_Off();
 800d1c2:	f001 fbb1 	bl	800e928 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 800d1c6:	f7fa fa83 	bl	80076d0 <ESP_Upkeep>
 800d1ca:	0003      	movs	r3, r0
 800d1cc:	001a      	movs	r2, r3
 800d1ce:	4b3c      	ldr	r3, [pc, #240]	@ (800d2c0 <main+0x4e8>)
 800d1d0:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800d1d2:	4b3c      	ldr	r3, [pc, #240]	@ (800d2c4 <main+0x4ec>)
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	4053      	eors	r3, r2
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d00f      	beq.n	800d200 <main+0x428>
 800d1e0:	4b39      	ldr	r3, [pc, #228]	@ (800d2c8 <main+0x4f0>)
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	4053      	eors	r3, r2
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d008      	beq.n	800d200 <main+0x428>
 800d1ee:	4b37      	ldr	r3, [pc, #220]	@ (800d2cc <main+0x4f4>)
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	4053      	eors	r3, r2
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d001      	beq.n	800d200 <main+0x428>
      Device_Test();  // for device with startup time
 800d1fc:	f000 fcac 	bl	800db58 <Device_Test>
    }
    if (!usbPluggedIn) {
 800d200:	4b33      	ldr	r3, [pc, #204]	@ (800d2d0 <main+0x4f8>)
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	2201      	movs	r2, #1
 800d206:	4053      	eors	r3, r2
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d030      	beq.n	800d270 <main+0x498>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 800d20e:	4b31      	ldr	r3, [pc, #196]	@ (800d2d4 <main+0x4fc>)
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	2201      	movs	r2, #1
 800d214:	4053      	eors	r3, r2
 800d216:	b2db      	uxtb	r3, r3
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d029      	beq.n	800d270 <main+0x498>
 800d21c:	f000 fd1a 	bl	800dc54 <AllDevicesReady>
 800d220:	1e03      	subs	r3, r0, #0
 800d222:	d025      	beq.n	800d270 <main+0x498>
 800d224:	4b2c      	ldr	r3, [pc, #176]	@ (800d2d8 <main+0x500>)
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d021      	beq.n	800d270 <main+0x498>
        EnabledConnectedDevices();
 800d22c:	f000 fe38 	bl	800dea0 <EnabledConnectedDevices>
        if (ReadSolarVoltage() > 4900) {  // if battery is fully charged and sun is shining wake-up about every 5 minutes
 800d230:	f7fc fc5c 	bl	8009aec <ReadSolarVoltage>
 800d234:	0003      	movs	r3, r0
 800d236:	001a      	movs	r2, r3
 800d238:	4b28      	ldr	r3, [pc, #160]	@ (800d2dc <main+0x504>)
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d90c      	bls.n	800d258 <main+0x480>
          Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM_SUN:WAIT_WITHOUT_PM_SUN);
 800d23e:	4b28      	ldr	r3, [pc, #160]	@ (800d2e0 <main+0x508>)
 800d240:	795b      	ldrb	r3, [r3, #5]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d002      	beq.n	800d24c <main+0x474>
 800d246:	2382      	movs	r3, #130	@ 0x82
 800d248:	005b      	lsls	r3, r3, #1
 800d24a:	e001      	b.n	800d250 <main+0x478>
 800d24c:	238c      	movs	r3, #140	@ 0x8c
 800d24e:	005b      	lsls	r3, r3, #1
 800d250:	0018      	movs	r0, r3
 800d252:	f7fd f9cd 	bl	800a5f0 <Enter_Stop_Mode>
 800d256:	e00b      	b.n	800d270 <main+0x498>
        }
        else {
          Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 800d258:	4b21      	ldr	r3, [pc, #132]	@ (800d2e0 <main+0x508>)
 800d25a:	795b      	ldrb	r3, [r3, #5]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d002      	beq.n	800d266 <main+0x48e>
 800d260:	23d7      	movs	r3, #215	@ 0xd7
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	e001      	b.n	800d26a <main+0x492>
 800d266:	23dc      	movs	r3, #220	@ 0xdc
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	0018      	movs	r0, r3
 800d26c:	f7fd f9c0 	bl	800a5f0 <Enter_Stop_Mode>
        }
      }
    }
    if (u1_rx_buff[0] != '\0') {
 800d270:	4b1c      	ldr	r3, [pc, #112]	@ (800d2e4 <main+0x50c>)
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d001      	beq.n	800d27c <main+0x4a4>
      check_cli_command();
 800d278:	f000 f8c2 	bl	800d400 <check_cli_command>
    }

    if (Check_USB_PowerOn() && !ReconfigSet) {
 800d27c:	f7fc fc8a 	bl	8009b94 <Check_USB_PowerOn>
 800d280:	1e03      	subs	r3, r0, #0
 800d282:	d100      	bne.n	800d286 <main+0x4ae>
 800d284:	e657      	b.n	800cf36 <main+0x15e>
 800d286:	4b18      	ldr	r3, [pc, #96]	@ (800d2e8 <main+0x510>)
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	2201      	movs	r2, #1
 800d28c:	4053      	eors	r3, r2
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	2b00      	cmp	r3, #0
 800d292:	d100      	bne.n	800d296 <main+0x4be>
 800d294:	e64f      	b.n	800cf36 <main+0x15e>
      Process_USB_input(GetUsbRxPointer());
 800d296:	f015 ffcd 	bl	8023234 <GetUsbRxPointer>
 800d29a:	0003      	movs	r3, r0
 800d29c:	0018      	movs	r0, r3
 800d29e:	f7fc f903 	bl	80094a8 <Process_USB_input>
    if(TimestampIsReached(batteryReadTimer)){
 800d2a2:	e648      	b.n	800cf36 <main+0x15e>
 800d2a4:	200010c8 	.word	0x200010c8
 800d2a8:	200000a3 	.word	0x200000a3
 800d2ac:	200010cc 	.word	0x200010cc
 800d2b0:	0802ced4 	.word	0x0802ced4
 800d2b4:	0802ce28 	.word	0x0802ce28
 800d2b8:	20001172 	.word	0x20001172
 800d2bc:	20001171 	.word	0x20001171
 800d2c0:	200010b2 	.word	0x200010b2
 800d2c4:	200010ac 	.word	0x200010ac
 800d2c8:	200010ad 	.word	0x200010ad
 800d2cc:	200010ae 	.word	0x200010ae
 800d2d0:	20002101 	.word	0x20002101
 800d2d4:	20002102 	.word	0x20002102
 800d2d8:	200005b3 	.word	0x200005b3
 800d2dc:	00001324 	.word	0x00001324
 800d2e0:	200010d4 	.word	0x200010d4
 800d2e4:	200010b4 	.word	0x200010b4
 800d2e8:	200005af 	.word	0x200005af

0800d2ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d2ec:	b590      	push	{r4, r7, lr}
 800d2ee:	b09d      	sub	sp, #116	@ 0x74
 800d2f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d2f2:	2438      	movs	r4, #56	@ 0x38
 800d2f4:	193b      	adds	r3, r7, r4
 800d2f6:	0018      	movs	r0, r3
 800d2f8:	2338      	movs	r3, #56	@ 0x38
 800d2fa:	001a      	movs	r2, r3
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	f019 f9e1 	bl	80266c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d302:	2324      	movs	r3, #36	@ 0x24
 800d304:	18fb      	adds	r3, r7, r3
 800d306:	0018      	movs	r0, r3
 800d308:	2314      	movs	r3, #20
 800d30a:	001a      	movs	r2, r3
 800d30c:	2100      	movs	r1, #0
 800d30e:	f019 f9d9 	bl	80266c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d312:	003b      	movs	r3, r7
 800d314:	0018      	movs	r0, r3
 800d316:	2324      	movs	r3, #36	@ 0x24
 800d318:	001a      	movs	r2, r3
 800d31a:	2100      	movs	r1, #0
 800d31c:	f019 f9d2 	bl	80266c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d320:	4b34      	ldr	r3, [pc, #208]	@ (800d3f4 <SystemClock_Config+0x108>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4a34      	ldr	r2, [pc, #208]	@ (800d3f8 <SystemClock_Config+0x10c>)
 800d326:	401a      	ands	r2, r3
 800d328:	4b32      	ldr	r3, [pc, #200]	@ (800d3f4 <SystemClock_Config+0x108>)
 800d32a:	2180      	movs	r1, #128	@ 0x80
 800d32c:	0109      	lsls	r1, r1, #4
 800d32e:	430a      	orrs	r2, r1
 800d330:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800d332:	f00d ffb3 	bl	801b29c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800d336:	4b31      	ldr	r3, [pc, #196]	@ (800d3fc <SystemClock_Config+0x110>)
 800d338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d33a:	4a2f      	ldr	r2, [pc, #188]	@ (800d3f8 <SystemClock_Config+0x10c>)
 800d33c:	401a      	ands	r2, r3
 800d33e:	4b2f      	ldr	r3, [pc, #188]	@ (800d3fc <SystemClock_Config+0x110>)
 800d340:	2180      	movs	r1, #128	@ 0x80
 800d342:	0149      	lsls	r1, r1, #5
 800d344:	430a      	orrs	r2, r1
 800d346:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800d348:	193b      	adds	r3, r7, r4
 800d34a:	2226      	movs	r2, #38	@ 0x26
 800d34c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800d34e:	193b      	adds	r3, r7, r4
 800d350:	2280      	movs	r2, #128	@ 0x80
 800d352:	0052      	lsls	r2, r2, #1
 800d354:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d356:	0021      	movs	r1, r4
 800d358:	187b      	adds	r3, r7, r1
 800d35a:	2201      	movs	r2, #1
 800d35c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800d35e:	187b      	adds	r3, r7, r1
 800d360:	2210      	movs	r2, #16
 800d362:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800d364:	187b      	adds	r3, r7, r1
 800d366:	2201      	movs	r2, #1
 800d368:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800d36a:	187b      	adds	r3, r7, r1
 800d36c:	2200      	movs	r2, #0
 800d36e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d370:	187b      	adds	r3, r7, r1
 800d372:	0018      	movs	r0, r3
 800d374:	f00e f822 	bl	801b3bc <HAL_RCC_OscConfig>
 800d378:	1e03      	subs	r3, r0, #0
 800d37a:	d001      	beq.n	800d380 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d37c:	f000 f922 	bl	800d5c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d380:	2124      	movs	r1, #36	@ 0x24
 800d382:	187b      	adds	r3, r7, r1
 800d384:	220f      	movs	r2, #15
 800d386:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800d388:	187b      	adds	r3, r7, r1
 800d38a:	2201      	movs	r2, #1
 800d38c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d38e:	187b      	adds	r3, r7, r1
 800d390:	2200      	movs	r2, #0
 800d392:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800d394:	187b      	adds	r3, r7, r1
 800d396:	2200      	movs	r2, #0
 800d398:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d39a:	187b      	adds	r3, r7, r1
 800d39c:	2200      	movs	r2, #0
 800d39e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800d3a0:	187b      	adds	r3, r7, r1
 800d3a2:	2100      	movs	r1, #0
 800d3a4:	0018      	movs	r0, r3
 800d3a6:	f00e fbdd 	bl	801bb64 <HAL_RCC_ClockConfig>
 800d3aa:	1e03      	subs	r3, r0, #0
 800d3ac:	d001      	beq.n	800d3b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800d3ae:	f000 f909 	bl	800d5c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800d3b2:	003b      	movs	r3, r7
 800d3b4:	226d      	movs	r2, #109	@ 0x6d
 800d3b6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800d3b8:	003b      	movs	r3, r7
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800d3be:	003b      	movs	r3, r7
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800d3c4:	003b      	movs	r3, r7
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800d3ca:	003b      	movs	r3, r7
 800d3cc:	2280      	movs	r2, #128	@ 0x80
 800d3ce:	0252      	lsls	r2, r2, #9
 800d3d0:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d3d2:	003b      	movs	r3, r7
 800d3d4:	2280      	movs	r2, #128	@ 0x80
 800d3d6:	04d2      	lsls	r2, r2, #19
 800d3d8:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d3da:	003b      	movs	r3, r7
 800d3dc:	0018      	movs	r0, r3
 800d3de:	f00e fde5 	bl	801bfac <HAL_RCCEx_PeriphCLKConfig>
 800d3e2:	1e03      	subs	r3, r0, #0
 800d3e4:	d001      	beq.n	800d3ea <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800d3e6:	f000 f8ed 	bl	800d5c4 <Error_Handler>
  }
}
 800d3ea:	46c0      	nop			@ (mov r8, r8)
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	b01d      	add	sp, #116	@ 0x74
 800d3f0:	bd90      	pop	{r4, r7, pc}
 800d3f2:	46c0      	nop			@ (mov r8, r8)
 800d3f4:	40007000 	.word	0x40007000
 800d3f8:	ffffe7ff 	.word	0xffffe7ff
 800d3fc:	40021000 	.word	0x40021000

0800d400 <check_cli_command>:

/* USER CODE BEGIN 4 */

void check_cli_command() {
 800d400:	b580      	push	{r7, lr}
 800d402:	af00      	add	r7, sp, #0
  switch (u1_rx_buff[0]){
 800d404:	4b40      	ldr	r3, [pc, #256]	@ (800d508 <check_cli_command+0x108>)
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	3b61      	subs	r3, #97	@ 0x61
 800d40a:	2b15      	cmp	r3, #21
 800d40c:	d845      	bhi.n	800d49a <check_cli_command+0x9a>
 800d40e:	009a      	lsls	r2, r3, #2
 800d410:	4b3e      	ldr	r3, [pc, #248]	@ (800d50c <check_cli_command+0x10c>)
 800d412:	18d3      	adds	r3, r2, r3
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800d418:	4b3d      	ldr	r3, [pc, #244]	@ (800d510 <check_cli_command+0x110>)
 800d41a:	0018      	movs	r0, r3
 800d41c:	f018 ffde 	bl	80263dc <puts>
      SetVerboseLevel(VERBOSE_ALL);
 800d420:	2003      	movs	r0, #3
 800d422:	f006 fe91 	bl	8014148 <SetVerboseLevel>
      break;
 800d426:	e069      	b.n	800d4fc <check_cli_command+0xfc>
    case (uint8_t)'e':
      PC_show_Keys();  // show the eeprom stored content conditional on USART or USB
 800d428:	f7fb fb58 	bl	8008adc <PC_show_Keys>
    break;
 800d42c:	e066      	b.n	800d4fc <check_cli_command+0xfc>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800d42e:	f7f7 fa6b 	bl	8004908 <forceNTPupdate>
    break;
 800d432:	e063      	b.n	800d4fc <check_cli_command+0xfc>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 800d434:	4b37      	ldr	r3, [pc, #220]	@ (800d514 <check_cli_command+0x114>)
 800d436:	0018      	movs	r0, r3
 800d438:	f018 ffd0 	bl	80263dc <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800d43c:	2002      	movs	r0, #2
 800d43e:	f006 fe83 	bl	8014148 <SetVerboseLevel>
      break;
 800d442:	e05b      	b.n	800d4fc <check_cli_command+0xfc>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 800d444:	4b34      	ldr	r3, [pc, #208]	@ (800d518 <check_cli_command+0x118>)
 800d446:	0018      	movs	r0, r3
 800d448:	f018 ffc8 	bl	80263dc <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800d44c:	2001      	movs	r0, #1
 800d44e:	f006 fe7b 	bl	8014148 <SetVerboseLevel>
      break;
 800d452:	e053      	b.n	800d4fc <check_cli_command+0xfc>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 800d454:	4b31      	ldr	r3, [pc, #196]	@ (800d51c <check_cli_command+0x11c>)
 800d456:	0018      	movs	r0, r3
 800d458:	f018 ffc0 	bl	80263dc <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800d45c:	2000      	movs	r0, #0
 800d45e:	f006 fe73 	bl	8014148 <SetVerboseLevel>
      break;
 800d462:	e04b      	b.n	800d4fc <check_cli_command+0xfc>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 800d464:	f007 fb6e 	bl	8014b44 <HAL_GetTick>
 800d468:	0002      	movs	r2, r0
 800d46a:	4b2d      	ldr	r3, [pc, #180]	@ (800d520 <check_cli_command+0x120>)
 800d46c:	601a      	str	r2, [r3, #0]
      break;
 800d46e:	e045      	b.n	800d4fc <check_cli_command+0xfc>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800d470:	f7fc fc42 	bl	8009cf8 <showTime>
      break;
 800d474:	e042      	b.n	800d4fc <check_cli_command+0xfc>
    case (uint8_t)'u':
      usblog = !usblog; // log info to usb too
 800d476:	4b2b      	ldr	r3, [pc, #172]	@ (800d524 <check_cli_command+0x124>)
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	1e5a      	subs	r2, r3, #1
 800d47c:	4193      	sbcs	r3, r2
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	2201      	movs	r2, #1
 800d482:	4053      	eors	r3, r2
 800d484:	b2db      	uxtb	r3, r3
 800d486:	1c1a      	adds	r2, r3, #0
 800d488:	2301      	movs	r3, #1
 800d48a:	4013      	ands	r3, r2
 800d48c:	b2da      	uxtb	r2, r3
 800d48e:	4b25      	ldr	r3, [pc, #148]	@ (800d524 <check_cli_command+0x124>)
 800d490:	701a      	strb	r2, [r3, #0]
      break;
 800d492:	e033      	b.n	800d4fc <check_cli_command+0xfc>
    case (uint8_t)'v':
      BinaryReleaseInfo(); // show me the build
 800d494:	f006 fe72 	bl	801417c <BinaryReleaseInfo>
      break;
 800d498:	e030      	b.n	800d4fc <check_cli_command+0xfc>
    default:
      printf("Error unknown request from Serial UART1 (TTY)\r\n");
 800d49a:	4b23      	ldr	r3, [pc, #140]	@ (800d528 <check_cli_command+0x128>)
 800d49c:	0018      	movs	r0, r3
 800d49e:	f018 ff9d 	bl	80263dc <puts>
      printf("\r\n\r\nPossible commands:\r\n\r\n");
 800d4a2:	4b22      	ldr	r3, [pc, #136]	@ (800d52c <check_cli_command+0x12c>)
 800d4a4:	0018      	movs	r0, r3
 800d4a6:	f018 ff99 	bl	80263dc <puts>
      printf("a - VerboseLevel set to all\r\n");
 800d4aa:	4b21      	ldr	r3, [pc, #132]	@ (800d530 <check_cli_command+0x130>)
 800d4ac:	0018      	movs	r0, r3
 800d4ae:	f018 ff95 	bl	80263dc <puts>
      printf("e - show EEPROM\r\n");
 800d4b2:	4b20      	ldr	r3, [pc, #128]	@ (800d534 <check_cli_command+0x134>)
 800d4b4:	0018      	movs	r0, r3
 800d4b6:	f018 ff91 	bl	80263dc <puts>
      printf("f - Force NTP time synchronization\r\n");
 800d4ba:	4b1f      	ldr	r3, [pc, #124]	@ (800d538 <check_cli_command+0x138>)
 800d4bc:	0018      	movs	r0, r3
 800d4be:	f018 ff8d 	bl	80263dc <puts>
      printf("i - VerboseLevel set to info\r\n");
 800d4c2:	4b1e      	ldr	r3, [pc, #120]	@ (800d53c <check_cli_command+0x13c>)
 800d4c4:	0018      	movs	r0, r3
 800d4c6:	f018 ff89 	bl	80263dc <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 800d4ca:	4b1d      	ldr	r3, [pc, #116]	@ (800d540 <check_cli_command+0x140>)
 800d4cc:	0018      	movs	r0, r3
 800d4ce:	f018 ff85 	bl	80263dc <puts>
      printf("n - VerboseLevel set to none\r\n");
 800d4d2:	4b1c      	ldr	r3, [pc, #112]	@ (800d544 <check_cli_command+0x144>)
 800d4d4:	0018      	movs	r0, r3
 800d4d6:	f018 ff81 	bl	80263dc <puts>
      printf("s - Start particle measurement\r\n");
 800d4da:	4b1b      	ldr	r3, [pc, #108]	@ (800d548 <check_cli_command+0x148>)
 800d4dc:	0018      	movs	r0, r3
 800d4de:	f018 ff7d 	bl	80263dc <puts>
      printf("t - Show actual system time\r\n");
 800d4e2:	4b1a      	ldr	r3, [pc, #104]	@ (800d54c <check_cli_command+0x14c>)
 800d4e4:	0018      	movs	r0, r3
 800d4e6:	f018 ff79 	bl	80263dc <puts>
      printf("u - USB logging toggle\r\n");
 800d4ea:	4b19      	ldr	r3, [pc, #100]	@ (800d550 <check_cli_command+0x150>)
 800d4ec:	0018      	movs	r0, r3
 800d4ee:	f018 ff75 	bl	80263dc <puts>
      printf("v - Show system version\r\n");
 800d4f2:	4b18      	ldr	r3, [pc, #96]	@ (800d554 <check_cli_command+0x154>)
 800d4f4:	0018      	movs	r0, r3
 800d4f6:	f018 ff71 	bl	80263dc <puts>
  break;
 800d4fa:	46c0      	nop			@ (mov r8, r8)
  }
  u1_rx_buff[0] = '\0';
 800d4fc:	4b02      	ldr	r3, [pc, #8]	@ (800d508 <check_cli_command+0x108>)
 800d4fe:	2200      	movs	r2, #0
 800d500:	701a      	strb	r2, [r3, #0]
}
 800d502:	46c0      	nop			@ (mov r8, r8)
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	200010b4 	.word	0x200010b4
 800d50c:	0802e840 	.word	0x0802e840
 800d510:	0802cf04 	.word	0x0802cf04
 800d514:	0802cf20 	.word	0x0802cf20
 800d518:	0802cf3c 	.word	0x0802cf3c
 800d51c:	0802cf5c 	.word	0x0802cf5c
 800d520:	20001180 	.word	0x20001180
 800d524:	200027ac 	.word	0x200027ac
 800d528:	0802cf78 	.word	0x0802cf78
 800d52c:	0802cfa8 	.word	0x0802cfa8
 800d530:	0802cfc4 	.word	0x0802cfc4
 800d534:	0802cfe4 	.word	0x0802cfe4
 800d538:	0802cff8 	.word	0x0802cff8
 800d53c:	0802d01c 	.word	0x0802d01c
 800d540:	0802d03c 	.word	0x0802d03c
 800d544:	0802d060 	.word	0x0802d060
 800d548:	0802d080 	.word	0x0802d080
 800d54c:	0802d0a0 	.word	0x0802d0a0
 800d550:	0802d0c0 	.word	0x0802d0c0
 800d554:	0802d0d8 	.word	0x0802d0d8

0800d558 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800d560:	4907      	ldr	r1, [pc, #28]	@ (800d580 <HAL_UART_RxCpltCallback+0x28>)
 800d562:	4b08      	ldr	r3, [pc, #32]	@ (800d584 <HAL_UART_RxCpltCallback+0x2c>)
 800d564:	2201      	movs	r2, #1
 800d566:	0018      	movs	r0, r3
 800d568:	f010 f8e2 	bl	801d730 <HAL_UART_Receive_IT>
//  check_cli_command();
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 800d56c:	4904      	ldr	r1, [pc, #16]	@ (800d580 <HAL_UART_RxCpltCallback+0x28>)
 800d56e:	4b05      	ldr	r3, [pc, #20]	@ (800d584 <HAL_UART_RxCpltCallback+0x2c>)
 800d570:	2201      	movs	r2, #1
 800d572:	0018      	movs	r0, r3
 800d574:	f010 f8dc 	bl	801d730 <HAL_UART_Receive_IT>
}
 800d578:	46c0      	nop			@ (mov r8, r8)
 800d57a:	46bd      	mov	sp, r7
 800d57c:	b002      	add	sp, #8
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	200010b4 	.word	0x200010b4
 800d584:	20002298 	.word	0x20002298

0800d588 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	0002      	movs	r2, r0
 800d590:	1dbb      	adds	r3, r7, #6
 800d592:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 800d594:	1dbb      	adds	r3, r7, #6
 800d596:	881a      	ldrh	r2, [r3, #0]
 800d598:	2380      	movs	r3, #128	@ 0x80
 800d59a:	021b      	lsls	r3, r3, #8
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d10b      	bne.n	800d5b8 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800d5a0:	f005 fffe 	bl	80135a0 <setuserToggle>
    if (GetPMSensorPresence()) {
 800d5a4:	f000 f860 	bl	800d668 <GetPMSensorPresence>
 800d5a8:	1e03      	subs	r3, r0, #0
 800d5aa:	d005      	beq.n	800d5b8 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 800d5ac:	4b04      	ldr	r3, [pc, #16]	@ (800d5c0 <HAL_GPIO_EXTI_Callback+0x38>)
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	709a      	strb	r2, [r3, #2]
      sen5x_Set_sen5x_state(false);  // sounds contradictory, but this enables sen5x immediate
 800d5b2:	2000      	movs	r0, #0
 800d5b4:	f001 f8fa 	bl	800e7ac <sen5x_Set_sen5x_state>
    }
  }
}
 800d5b8:	46c0      	nop			@ (mov r8, r8)
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	b002      	add	sp, #8
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	200010cc 	.word	0x200010cc

0800d5c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  SetAllREDLED();
 800d5c8:	f005 fbbe 	bl	8012d48 <SetAllREDLED>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d5cc:	b672      	cpsid	i
}
 800d5ce:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 800d5d0:	4a05      	ldr	r2, [pc, #20]	@ (800d5e8 <Error_Handler+0x24>)
 800d5d2:	4b06      	ldr	r3, [pc, #24]	@ (800d5ec <Error_Handler+0x28>)
 800d5d4:	0019      	movs	r1, r3
 800d5d6:	2001      	movs	r0, #1
 800d5d8:	f006 fd3c 	bl	8014054 <CreateLine>

    HAL_Delay(2500);
 800d5dc:	4b04      	ldr	r3, [pc, #16]	@ (800d5f0 <Error_Handler+0x2c>)
 800d5de:	0018      	movs	r0, r3
 800d5e0:	f007 faba 	bl	8014b58 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 800d5e4:	46c0      	nop			@ (mov r8, r8)
 800d5e6:	e7f3      	b.n	800d5d0 <Error_Handler+0xc>
 800d5e8:	0802d0f4 	.word	0x0802d0f4
 800d5ec:	0802d120 	.word	0x0802d120
 800d5f0:	000009c4 	.word	0x000009c4

0800d5f4 <testInit>:
static uint8_t AHTstate;
static uint8_t BMPstate;
static uint8_t ENSstate;
static bool sensorsdisablereq = false;

void testInit(){
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 800d5f8:	4b19      	ldr	r3, [pc, #100]	@ (800d660 <testInit+0x6c>)
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 800d5fe:	4b18      	ldr	r3, [pc, #96]	@ (800d660 <testInit+0x6c>)
 800d600:	2200      	movs	r2, #0
 800d602:	705a      	strb	r2, [r3, #1]
  SensorProbe.AHT20_Present = false;
 800d604:	4b16      	ldr	r3, [pc, #88]	@ (800d660 <testInit+0x6c>)
 800d606:	2200      	movs	r2, #0
 800d608:	709a      	strb	r2, [r3, #2]
  SensorProbe.ENS160_Present = false;
 800d60a:	4b15      	ldr	r3, [pc, #84]	@ (800d660 <testInit+0x6c>)
 800d60c:	2200      	movs	r2, #0
 800d60e:	70da      	strb	r2, [r3, #3]
  SensorProbe.BMP280_Present = false;
 800d610:	4b13      	ldr	r3, [pc, #76]	@ (800d660 <testInit+0x6c>)
 800d612:	2200      	movs	r2, #0
 800d614:	711a      	strb	r2, [r3, #4]
  SensorProbe.PM_Present = false;
 800d616:	4b12      	ldr	r3, [pc, #72]	@ (800d660 <testInit+0x6c>)
 800d618:	2200      	movs	r2, #0
 800d61a:	715a      	strb	r2, [r3, #5]
  SensorProbe.MIC_Present = false;
 800d61c:	4b10      	ldr	r3, [pc, #64]	@ (800d660 <testInit+0x6c>)
 800d61e:	2200      	movs	r2, #0
 800d620:	719a      	strb	r2, [r3, #6]
  SensorProbe.ESP_Present = false;
 800d622:	4b0f      	ldr	r3, [pc, #60]	@ (800d660 <testInit+0x6c>)
 800d624:	2200      	movs	r2, #0
 800d626:	71da      	strb	r2, [r3, #7]
  SensorProbe.SGP_Enabled = false;
 800d628:	4b0d      	ldr	r3, [pc, #52]	@ (800d660 <testInit+0x6c>)
 800d62a:	2200      	movs	r2, #0
 800d62c:	721a      	strb	r2, [r3, #8]
  Sensor.HT_measurementEnabled = true;
 800d62e:	4b0d      	ldr	r3, [pc, #52]	@ (800d664 <testInit+0x70>)
 800d630:	2201      	movs	r2, #1
 800d632:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = true;
 800d634:	4b0b      	ldr	r3, [pc, #44]	@ (800d664 <testInit+0x70>)
 800d636:	2201      	movs	r2, #1
 800d638:	705a      	strb	r2, [r3, #1]
  Sensor.PM_measurementEnabled = true;
 800d63a:	4b0a      	ldr	r3, [pc, #40]	@ (800d664 <testInit+0x70>)
 800d63c:	2201      	movs	r2, #1
 800d63e:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = true;
 800d640:	4b08      	ldr	r3, [pc, #32]	@ (800d664 <testInit+0x70>)
 800d642:	2201      	movs	r2, #1
 800d644:	70da      	strb	r2, [r3, #3]
  Sensor.AHT_measurementEnabled = true;
 800d646:	4b07      	ldr	r3, [pc, #28]	@ (800d664 <testInit+0x70>)
 800d648:	2201      	movs	r2, #1
 800d64a:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = true;
 800d64c:	4b05      	ldr	r3, [pc, #20]	@ (800d664 <testInit+0x70>)
 800d64e:	2201      	movs	r2, #1
 800d650:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = true;
 800d652:	4b04      	ldr	r3, [pc, #16]	@ (800d664 <testInit+0x70>)
 800d654:	2201      	movs	r2, #1
 800d656:	719a      	strb	r2, [r3, #6]
}
 800d658:	46c0      	nop			@ (mov r8, r8)
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	46c0      	nop			@ (mov r8, r8)
 800d660:	200010d4 	.word	0x200010d4
 800d664:	200010cc 	.word	0x200010cc

0800d668 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 800d668:	b580      	push	{r7, lr}
 800d66a:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 800d66c:	4b02      	ldr	r3, [pc, #8]	@ (800d678 <GetPMSensorPresence+0x10>)
 800d66e:	795b      	ldrb	r3, [r3, #5]
}
 800d670:	0018      	movs	r0, r3
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	46c0      	nop			@ (mov r8, r8)
 800d678:	200010d4 	.word	0x200010d4

0800d67c <DisablePMSensor>:

void DisablePMSensor() {
 800d67c:	b580      	push	{r7, lr}
 800d67e:	af00      	add	r7, sp, #0
  SensorProbe.PM_Present = false;
 800d680:	4b02      	ldr	r3, [pc, #8]	@ (800d68c <DisablePMSensor+0x10>)
 800d682:	2200      	movs	r2, #0
 800d684:	715a      	strb	r2, [r3, #5]
}
 800d686:	46c0      	nop			@ (mov r8, r8)
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}
 800d68c:	200010d4 	.word	0x200010d4

0800d690 <IsAHT20SensorPresent>:

bool IsHTSensorEnabled() {
  return Sensor.HT_measurementEnabled;
}

bool IsAHT20SensorPresent() {
 800d690:	b580      	push	{r7, lr}
 800d692:	af00      	add	r7, sp, #0
  return SensorProbe.AHT20_Present;
 800d694:	4b02      	ldr	r3, [pc, #8]	@ (800d6a0 <IsAHT20SensorPresent+0x10>)
 800d696:	789b      	ldrb	r3, [r3, #2]
}
 800d698:	0018      	movs	r0, r3
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
 800d69e:	46c0      	nop			@ (mov r8, r8)
 800d6a0:	200010d4 	.word	0x200010d4

0800d6a4 <IsBMP280SensorPresent>:

bool IsBMP280SensorPresent() {
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	af00      	add	r7, sp, #0
  return SensorProbe.BMP280_Present;
 800d6a8:	4b02      	ldr	r3, [pc, #8]	@ (800d6b4 <IsBMP280SensorPresent+0x10>)
 800d6aa:	791b      	ldrb	r3, [r3, #4]
}
 800d6ac:	0018      	movs	r0, r3
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	46c0      	nop			@ (mov r8, r8)
 800d6b4:	200010d4 	.word	0x200010d4

0800d6b8 <IsENS160SensorPresent>:

bool IsENS160SensorPresent() {
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	af00      	add	r7, sp, #0
  return SensorProbe.ENS160_Present;
 800d6bc:	4b02      	ldr	r3, [pc, #8]	@ (800d6c8 <IsENS160SensorPresent+0x10>)
 800d6be:	78db      	ldrb	r3, [r3, #3]
}
 800d6c0:	0018      	movs	r0, r3
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	46c0      	nop			@ (mov r8, r8)
 800d6c8:	200010d4 	.word	0x200010d4

0800d6cc <IsSGPPresent>:

bool IsSGPPresent() {
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 800d6d0:	4b02      	ldr	r3, [pc, #8]	@ (800d6dc <IsSGPPresent+0x10>)
 800d6d2:	785b      	ldrb	r3, [r3, #1]
}
 800d6d4:	0018      	movs	r0, r3
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	46c0      	nop			@ (mov r8, r8)
 800d6dc:	200010d4 	.word	0x200010d4

0800d6e0 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	0002      	movs	r2, r0
 800d6e8:	1dfb      	adds	r3, r7, #7
 800d6ea:	701a      	strb	r2, [r3, #0]

  SensorProbe.SGP_Enabled = setting;
 800d6ec:	4b0b      	ldr	r3, [pc, #44]	@ (800d71c <SetVOCSensorDIS_ENA+0x3c>)
 800d6ee:	1dfa      	adds	r2, r7, #7
 800d6f0:	7812      	ldrb	r2, [r2, #0]
 800d6f2:	721a      	strb	r2, [r3, #8]
  Sensor.VOC_measurementEnabled = setting;
 800d6f4:	4b0a      	ldr	r3, [pc, #40]	@ (800d720 <SetVOCSensorDIS_ENA+0x40>)
 800d6f6:	1dfa      	adds	r2, r7, #7
 800d6f8:	7812      	ldrb	r2, [r2, #0]
 800d6fa:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 800d6fc:	1dfb      	adds	r3, r7, #7
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d001      	beq.n	800d708 <SetVOCSensorDIS_ENA+0x28>
 800d704:	4b07      	ldr	r3, [pc, #28]	@ (800d724 <SetVOCSensorDIS_ENA+0x44>)
 800d706:	e000      	b.n	800d70a <SetVOCSensorDIS_ENA+0x2a>
 800d708:	4b07      	ldr	r3, [pc, #28]	@ (800d728 <SetVOCSensorDIS_ENA+0x48>)
 800d70a:	4a08      	ldr	r2, [pc, #32]	@ (800d72c <SetVOCSensorDIS_ENA+0x4c>)
 800d70c:	4908      	ldr	r1, [pc, #32]	@ (800d730 <SetVOCSensorDIS_ENA+0x50>)
 800d70e:	2003      	movs	r0, #3
 800d710:	f006 fca0 	bl	8014054 <CreateLine>
}
 800d714:	46c0      	nop			@ (mov r8, r8)
 800d716:	46bd      	mov	sp, r7
 800d718:	b002      	add	sp, #8
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	200010d4 	.word	0x200010d4
 800d720:	200010cc 	.word	0x200010cc
 800d724:	0802d124 	.word	0x0802d124
 800d728:	0802d12c 	.word	0x0802d12c
 800d72c:	0802d138 	.word	0x0802d138
 800d730:	0802d14c 	.word	0x0802d14c

0800d734 <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800d734:	b580      	push	{r7, lr}
 800d736:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 800d738:	4b02      	ldr	r3, [pc, #8]	@ (800d744 <IsPMSensorEnabled+0x10>)
 800d73a:	789b      	ldrb	r3, [r3, #2]
}
 800d73c:	0018      	movs	r0, r3
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	46c0      	nop			@ (mov r8, r8)
 800d744:	200010cc 	.word	0x200010cc

0800d748 <SetVOCSensorStatus>:

void SetENS160SensorStatus(bool setting) {
  Sensor.ENS_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	0002      	movs	r2, r0
 800d750:	1dfb      	adds	r3, r7, #7
 800d752:	701a      	strb	r2, [r3, #0]
  if (SensorProbe.SGP_Enabled) {
 800d754:	4b05      	ldr	r3, [pc, #20]	@ (800d76c <SetVOCSensorStatus+0x24>)
 800d756:	7a1b      	ldrb	r3, [r3, #8]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d003      	beq.n	800d764 <SetVOCSensorStatus+0x1c>
    Sensor.VOC_measurementEnabled = setting;
 800d75c:	4b04      	ldr	r3, [pc, #16]	@ (800d770 <SetVOCSensorStatus+0x28>)
 800d75e:	1dfa      	adds	r2, r7, #7
 800d760:	7812      	ldrb	r2, [r2, #0]
 800d762:	705a      	strb	r2, [r3, #1]
  }
//  Debug("SetVOCSensorStatus VOC_measurementEnabled = %d", setting);
}
 800d764:	46c0      	nop			@ (mov r8, r8)
 800d766:	46bd      	mov	sp, r7
 800d768:	b002      	add	sp, #8
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	200010d4 	.word	0x200010d4
 800d770:	200010cc 	.word	0x200010cc

0800d774 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	0002      	movs	r2, r0
 800d77c:	1dfb      	adds	r3, r7, #7
 800d77e:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 800d780:	4b03      	ldr	r3, [pc, #12]	@ (800d790 <SetPMSensorStatus+0x1c>)
 800d782:	1dfa      	adds	r2, r7, #7
 800d784:	7812      	ldrb	r2, [r2, #0]
 800d786:	709a      	strb	r2, [r3, #2]
}
 800d788:	46c0      	nop			@ (mov r8, r8)
 800d78a:	46bd      	mov	sp, r7
 800d78c:	b002      	add	sp, #8
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	200010cc 	.word	0x200010cc

0800d794 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 800d794:	b580      	push	{r7, lr}
 800d796:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 800d798:	4b02      	ldr	r3, [pc, #8]	@ (800d7a4 <SetESPMeasurementDone+0x10>)
 800d79a:	2201      	movs	r2, #1
 800d79c:	71da      	strb	r2, [r3, #7]
}
 800d79e:	46c0      	nop			@ (mov r8, r8)
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	200010d4 	.word	0x200010d4

0800d7a8 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	60f8      	str	r0, [r7, #12]
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	607a      	str	r2, [r7, #4]
 800d7b4:	603b      	str	r3, [r7, #0]
  testInit();
 800d7b6:	f7ff ff1d 	bl	800d5f4 <testInit>
  I2CSensors_Init(sensorI2C);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	0018      	movs	r0, r3
 800d7be:	f7fa fced 	bl	800819c <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800d7c2:	f006 ff4b 	bl	801465c <HIDS_DeviceConnected>
 800d7c6:	0003      	movs	r3, r0
 800d7c8:	001a      	movs	r2, r3
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	4053      	eors	r3, r2
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d00c      	beq.n	800d7ee <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 800d7d4:	4abf      	ldr	r2, [pc, #764]	@ (800dad4 <Device_Init+0x32c>)
 800d7d6:	4bc0      	ldr	r3, [pc, #768]	@ (800dad8 <Device_Init+0x330>)
 800d7d8:	0019      	movs	r1, r3
 800d7da:	2001      	movs	r0, #1
 800d7dc:	f006 fc3a 	bl	8014054 <CreateLine>
     SensorProbe.HT_Present = false;
 800d7e0:	4bbe      	ldr	r3, [pc, #760]	@ (800dadc <Device_Init+0x334>)
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 800d7e6:	4bbe      	ldr	r3, [pc, #760]	@ (800dae0 <Device_Init+0x338>)
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	701a      	strb	r2, [r3, #0]
 800d7ec:	e008      	b.n	800d800 <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800d7ee:	4bbb      	ldr	r3, [pc, #748]	@ (800dadc <Device_Init+0x334>)
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 800d7f4:	4abb      	ldr	r2, [pc, #748]	@ (800dae4 <Device_Init+0x33c>)
 800d7f6:	4bbc      	ldr	r3, [pc, #752]	@ (800dae8 <Device_Init+0x340>)
 800d7f8:	0019      	movs	r1, r3
 800d7fa:	2003      	movs	r0, #3
 800d7fc:	f006 fc2a 	bl	8014054 <CreateLine>
  }
  if(!BMP280_DeviceConnected()) {
 800d800:	f7fe f936 	bl	800ba70 <BMP280_DeviceConnected>
 800d804:	0003      	movs	r3, r0
 800d806:	001a      	movs	r2, r3
 800d808:	2301      	movs	r3, #1
 800d80a:	4053      	eors	r3, r2
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d00c      	beq.n	800d82c <Device_Init+0x84>
     Error("Air pressure / Temperature sensor NOT connected!");
 800d812:	4ab6      	ldr	r2, [pc, #728]	@ (800daec <Device_Init+0x344>)
 800d814:	4bb0      	ldr	r3, [pc, #704]	@ (800dad8 <Device_Init+0x330>)
 800d816:	0019      	movs	r1, r3
 800d818:	2001      	movs	r0, #1
 800d81a:	f006 fc1b 	bl	8014054 <CreateLine>
     SensorProbe.BMP280_Present = false;
 800d81e:	4baf      	ldr	r3, [pc, #700]	@ (800dadc <Device_Init+0x334>)
 800d820:	2200      	movs	r2, #0
 800d822:	711a      	strb	r2, [r3, #4]
     Sensor.BMP_measurementEnabled = false;
 800d824:	4bae      	ldr	r3, [pc, #696]	@ (800dae0 <Device_Init+0x338>)
 800d826:	2200      	movs	r2, #0
 800d828:	715a      	strb	r2, [r3, #5]
 800d82a:	e008      	b.n	800d83e <Device_Init+0x96>
  }else {
    SensorProbe.BMP280_Present = true;
 800d82c:	4bab      	ldr	r3, [pc, #684]	@ (800dadc <Device_Init+0x334>)
 800d82e:	2201      	movs	r2, #1
 800d830:	711a      	strb	r2, [r3, #4]
    Debug("Air pressure / Temperature sensor initialised.");
 800d832:	4aaf      	ldr	r2, [pc, #700]	@ (800daf0 <Device_Init+0x348>)
 800d834:	4bac      	ldr	r3, [pc, #688]	@ (800dae8 <Device_Init+0x340>)
 800d836:	0019      	movs	r1, r3
 800d838:	2003      	movs	r0, #3
 800d83a:	f006 fc0b 	bl	8014054 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800d83e:	f003 fd9d 	bl	801137c <SGP_DeviceConnected>
 800d842:	0003      	movs	r3, r0
 800d844:	001a      	movs	r2, r3
 800d846:	2301      	movs	r3, #1
 800d848:	4053      	eors	r3, r2
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d00c      	beq.n	800d86a <Device_Init+0xc2>
    SensorProbe.VOC_Present = false;
 800d850:	4ba2      	ldr	r3, [pc, #648]	@ (800dadc <Device_Init+0x334>)
 800d852:	2200      	movs	r2, #0
 800d854:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 800d856:	4aa7      	ldr	r2, [pc, #668]	@ (800daf4 <Device_Init+0x34c>)
 800d858:	4b9f      	ldr	r3, [pc, #636]	@ (800dad8 <Device_Init+0x330>)
 800d85a:	0019      	movs	r1, r3
 800d85c:	2001      	movs	r0, #1
 800d85e:	f006 fbf9 	bl	8014054 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 800d862:	4b9f      	ldr	r3, [pc, #636]	@ (800dae0 <Device_Init+0x338>)
 800d864:	2200      	movs	r2, #0
 800d866:	705a      	strb	r2, [r3, #1]
 800d868:	e00b      	b.n	800d882 <Device_Init+0xda>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 800d86a:	4b9c      	ldr	r3, [pc, #624]	@ (800dadc <Device_Init+0x334>)
 800d86c:	2201      	movs	r2, #1
 800d86e:	721a      	strb	r2, [r3, #8]
    SensorProbe.VOC_Present = true;
 800d870:	4b9a      	ldr	r3, [pc, #616]	@ (800dadc <Device_Init+0x334>)
 800d872:	2201      	movs	r2, #1
 800d874:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 800d876:	4aa0      	ldr	r2, [pc, #640]	@ (800daf8 <Device_Init+0x350>)
 800d878:	4b9b      	ldr	r3, [pc, #620]	@ (800dae8 <Device_Init+0x340>)
 800d87a:	0019      	movs	r1, r3
 800d87c:	2003      	movs	r0, #3
 800d87e:	f006 fbe9 	bl	8014054 <CreateLine>
  }
  if(!ENS_DeviceConnected()) {
 800d882:	f7f6 faf1 	bl	8003e68 <ENS_DeviceConnected>
 800d886:	0003      	movs	r3, r0
 800d888:	001a      	movs	r2, r3
 800d88a:	2301      	movs	r3, #1
 800d88c:	4053      	eors	r3, r2
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00c      	beq.n	800d8ae <Device_Init+0x106>
    SensorProbe.ENS160_Present = false;
 800d894:	4b91      	ldr	r3, [pc, #580]	@ (800dadc <Device_Init+0x334>)
 800d896:	2200      	movs	r2, #0
 800d898:	70da      	strb	r2, [r3, #3]
     Error("ENS device not connected!");
 800d89a:	4a98      	ldr	r2, [pc, #608]	@ (800dafc <Device_Init+0x354>)
 800d89c:	4b8e      	ldr	r3, [pc, #568]	@ (800dad8 <Device_Init+0x330>)
 800d89e:	0019      	movs	r1, r3
 800d8a0:	2001      	movs	r0, #1
 800d8a2:	f006 fbd7 	bl	8014054 <CreateLine>
     Sensor.ENS_measurementEnabled = false;
 800d8a6:	4b8e      	ldr	r3, [pc, #568]	@ (800dae0 <Device_Init+0x338>)
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	719a      	strb	r2, [r3, #6]
 800d8ac:	e008      	b.n	800d8c0 <Device_Init+0x118>
  }
  else{
    SensorProbe.ENS160_Present = true;
 800d8ae:	4b8b      	ldr	r3, [pc, #556]	@ (800dadc <Device_Init+0x334>)
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	70da      	strb	r2, [r3, #3]
    Debug("ENS sensor initialised.");
 800d8b4:	4a92      	ldr	r2, [pc, #584]	@ (800db00 <Device_Init+0x358>)
 800d8b6:	4b8c      	ldr	r3, [pc, #560]	@ (800dae8 <Device_Init+0x340>)
 800d8b8:	0019      	movs	r1, r3
 800d8ba:	2003      	movs	r0, #3
 800d8bc:	f006 fbca 	bl	8014054 <CreateLine>
  }
  if(!AHT20_DeviceConnected()) {
 800d8c0:	f7fd fbbc 	bl	800b03c <AHT20_DeviceConnected>
 800d8c4:	0003      	movs	r3, r0
 800d8c6:	001a      	movs	r2, r3
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	4053      	eors	r3, r2
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00c      	beq.n	800d8ec <Device_Init+0x144>
     Error("AHT20 Humidity / Temperature sensor NOT connected!");
 800d8d2:	4a8c      	ldr	r2, [pc, #560]	@ (800db04 <Device_Init+0x35c>)
 800d8d4:	4b80      	ldr	r3, [pc, #512]	@ (800dad8 <Device_Init+0x330>)
 800d8d6:	0019      	movs	r1, r3
 800d8d8:	2001      	movs	r0, #1
 800d8da:	f006 fbbb 	bl	8014054 <CreateLine>
     SensorProbe.AHT20_Present = false;
 800d8de:	4b7f      	ldr	r3, [pc, #508]	@ (800dadc <Device_Init+0x334>)
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	709a      	strb	r2, [r3, #2]
     Sensor.AHT_measurementEnabled = false;
 800d8e4:	4b7e      	ldr	r3, [pc, #504]	@ (800dae0 <Device_Init+0x338>)
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	711a      	strb	r2, [r3, #4]
 800d8ea:	e008      	b.n	800d8fe <Device_Init+0x156>
  }else {
    SensorProbe.AHT20_Present = true;
 800d8ec:	4b7b      	ldr	r3, [pc, #492]	@ (800dadc <Device_Init+0x334>)
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	709a      	strb	r2, [r3, #2]
    Debug("AHT20 Humidity / Temperature sensor initialised.");
 800d8f2:	4a85      	ldr	r2, [pc, #532]	@ (800db08 <Device_Init+0x360>)
 800d8f4:	4b7c      	ldr	r3, [pc, #496]	@ (800dae8 <Device_Init+0x340>)
 800d8f6:	0019      	movs	r1, r3
 800d8f8:	2003      	movs	r0, #3
 800d8fa:	f006 fbab 	bl	8014054 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 800d8fe:	4b77      	ldr	r3, [pc, #476]	@ (800dadc <Device_Init+0x334>)
 800d900:	785b      	ldrb	r3, [r3, #1]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d009      	beq.n	800d91a <Device_Init+0x172>
 800d906:	4b75      	ldr	r3, [pc, #468]	@ (800dadc <Device_Init+0x334>)
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d005      	beq.n	800d91a <Device_Init+0x172>
    SetDBLED(false, true, false);
 800d90e:	2200      	movs	r2, #0
 800d910:	2101      	movs	r1, #1
 800d912:	2000      	movs	r0, #0
 800d914:	f005 f872 	bl	80129fc <SetDBLED>
 800d918:	e018      	b.n	800d94c <Device_Init+0x1a4>
  }
  else{
    SetDBLED(true, false, false);
 800d91a:	2200      	movs	r2, #0
 800d91c:	2100      	movs	r1, #0
 800d91e:	2001      	movs	r0, #1
 800d920:	f005 f86c 	bl	80129fc <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800d924:	4b79      	ldr	r3, [pc, #484]	@ (800db0c <Device_Init+0x364>)
 800d926:	2200      	movs	r2, #0
 800d928:	2101      	movs	r1, #1
 800d92a:	0018      	movs	r0, r3
 800d92c:	f008 fb9b 	bl	8016066 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800d930:	2380      	movs	r3, #128	@ 0x80
 800d932:	005b      	lsls	r3, r3, #1
 800d934:	4875      	ldr	r0, [pc, #468]	@ (800db0c <Device_Init+0x364>)
 800d936:	2201      	movs	r2, #1
 800d938:	0019      	movs	r1, r3
 800d93a:	f008 fb94 	bl	8016066 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800d93e:	2380      	movs	r3, #128	@ 0x80
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	4872      	ldr	r0, [pc, #456]	@ (800db0c <Device_Init+0x364>)
 800d944:	2201      	movs	r2, #1
 800d946:	0019      	movs	r1, r3
 800d948:	f008 fb8d 	bl	8016066 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 800d94c:	4b64      	ldr	r3, [pc, #400]	@ (800dae0 <Device_Init+0x338>)
 800d94e:	78db      	ldrb	r3, [r3, #3]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d028      	beq.n	800d9a6 <Device_Init+0x1fe>
    Info("Device_Init calls enableMicrophone");
 800d954:	4a6e      	ldr	r2, [pc, #440]	@ (800db10 <Device_Init+0x368>)
 800d956:	4b6f      	ldr	r3, [pc, #444]	@ (800db14 <Device_Init+0x36c>)
 800d958:	0019      	movs	r1, r3
 800d95a:	2002      	movs	r0, #2
 800d95c:	f006 fb7a 	bl	8014054 <CreateLine>
    if (!enableMicrophone(true)) {
 800d960:	2001      	movs	r0, #1
 800d962:	f004 f941 	bl	8011be8 <enableMicrophone>
 800d966:	0003      	movs	r3, r0
 800d968:	001a      	movs	r2, r3
 800d96a:	2301      	movs	r3, #1
 800d96c:	4053      	eors	r3, r2
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	2b00      	cmp	r3, #0
 800d972:	d00c      	beq.n	800d98e <Device_Init+0x1e6>
      Error("Microphone device not connected! DMA Error.");
 800d974:	4a68      	ldr	r2, [pc, #416]	@ (800db18 <Device_Init+0x370>)
 800d976:	4b58      	ldr	r3, [pc, #352]	@ (800dad8 <Device_Init+0x330>)
 800d978:	0019      	movs	r1, r3
 800d97a:	2001      	movs	r0, #1
 800d97c:	f006 fb6a 	bl	8014054 <CreateLine>
      SensorProbe.MIC_Present = false;
 800d980:	4b56      	ldr	r3, [pc, #344]	@ (800dadc <Device_Init+0x334>)
 800d982:	2200      	movs	r2, #0
 800d984:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = false;
 800d986:	4b56      	ldr	r3, [pc, #344]	@ (800dae0 <Device_Init+0x338>)
 800d988:	2200      	movs	r2, #0
 800d98a:	70da      	strb	r2, [r3, #3]
 800d98c:	e00b      	b.n	800d9a6 <Device_Init+0x1fe>
    }
    else{
      SensorProbe.MIC_Present = true;
 800d98e:	4b53      	ldr	r3, [pc, #332]	@ (800dadc <Device_Init+0x334>)
 800d990:	2201      	movs	r2, #1
 800d992:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800d994:	4b52      	ldr	r3, [pc, #328]	@ (800dae0 <Device_Init+0x338>)
 800d996:	2201      	movs	r2, #1
 800d998:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800d99a:	4a60      	ldr	r2, [pc, #384]	@ (800db1c <Device_Init+0x374>)
 800d99c:	4b52      	ldr	r3, [pc, #328]	@ (800dae8 <Device_Init+0x340>)
 800d99e:	0019      	movs	r1, r3
 800d9a0:	2003      	movs	r0, #3
 800d9a2:	f006 fb57 	bl	8014054 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 800d9a6:	f000 fff5 	bl	800e994 <probe_sen5x>
 800d9aa:	1e03      	subs	r3, r0, #0
 800d9ac:	d122      	bne.n	800d9f4 <Device_Init+0x24c>
    Debug("PM sensor initialised.");
 800d9ae:	4a5c      	ldr	r2, [pc, #368]	@ (800db20 <Device_Init+0x378>)
 800d9b0:	4b4d      	ldr	r3, [pc, #308]	@ (800dae8 <Device_Init+0x340>)
 800d9b2:	0019      	movs	r1, r3
 800d9b4:	2003      	movs	r0, #3
 800d9b6:	f006 fb4d 	bl	8014054 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800d9ba:	4b48      	ldr	r3, [pc, #288]	@ (800dadc <Device_Init+0x334>)
 800d9bc:	2201      	movs	r2, #1
 800d9be:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = true;
 800d9c0:	4b47      	ldr	r3, [pc, #284]	@ (800dae0 <Device_Init+0x338>)
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d9c6:	4b57      	ldr	r3, [pc, #348]	@ (800db24 <Device_Init+0x37c>)
 800d9c8:	791b      	ldrb	r3, [r3, #4]
 800d9ca:	2b34      	cmp	r3, #52	@ 0x34
 800d9cc:	d003      	beq.n	800d9d6 <Device_Init+0x22e>
 800d9ce:	4b55      	ldr	r3, [pc, #340]	@ (800db24 <Device_Init+0x37c>)
 800d9d0:	791b      	ldrb	r3, [r3, #4]
 800d9d2:	2b35      	cmp	r3, #53	@ 0x35
 800d9d4:	d11c      	bne.n	800da10 <Device_Init+0x268>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 800d9d6:	4a54      	ldr	r2, [pc, #336]	@ (800db28 <Device_Init+0x380>)
 800d9d8:	4b4e      	ldr	r3, [pc, #312]	@ (800db14 <Device_Init+0x36c>)
 800d9da:	0019      	movs	r1, r3
 800d9dc:	2002      	movs	r0, #2
 800d9de:	f006 fb39 	bl	8014054 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 800d9e2:	4b3f      	ldr	r3, [pc, #252]	@ (800dae0 <Device_Init+0x338>)
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800d9e8:	4b3c      	ldr	r3, [pc, #240]	@ (800dadc <Device_Init+0x334>)
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	721a      	strb	r2, [r3, #8]
      SGP_SoftReset();
 800d9ee:	f003 feab 	bl	8011748 <SGP_SoftReset>
 800d9f2:	e00d      	b.n	800da10 <Device_Init+0x268>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 800d9f4:	f000 ff98 	bl	800e928 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800d9f8:	4a4c      	ldr	r2, [pc, #304]	@ (800db2c <Device_Init+0x384>)
 800d9fa:	4b3b      	ldr	r3, [pc, #236]	@ (800dae8 <Device_Init+0x340>)
 800d9fc:	0019      	movs	r1, r3
 800d9fe:	2003      	movs	r0, #3
 800da00:	f006 fb28 	bl	8014054 <CreateLine>
    SensorProbe.PM_Present = false;
 800da04:	4b35      	ldr	r3, [pc, #212]	@ (800dadc <Device_Init+0x334>)
 800da06:	2200      	movs	r2, #0
 800da08:	715a      	strb	r2, [r3, #5]
    Sensor.PM_measurementEnabled = false;
 800da0a:	4b35      	ldr	r3, [pc, #212]	@ (800dae0 <Device_Init+0x338>)
 800da0c:	2200      	movs	r2, #0
 800da0e:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 800da10:	4b32      	ldr	r3, [pc, #200]	@ (800dadc <Device_Init+0x334>)
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d001      	beq.n	800da1c <Device_Init+0x274>
 800da18:	4b45      	ldr	r3, [pc, #276]	@ (800db30 <Device_Init+0x388>)
 800da1a:	e000      	b.n	800da1e <Device_Init+0x276>
 800da1c:	4b45      	ldr	r3, [pc, #276]	@ (800db34 <Device_Init+0x38c>)
 800da1e:	4a46      	ldr	r2, [pc, #280]	@ (800db38 <Device_Init+0x390>)
 800da20:	493c      	ldr	r1, [pc, #240]	@ (800db14 <Device_Init+0x36c>)
 800da22:	2002      	movs	r0, #2
 800da24:	f006 fb16 	bl	8014054 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 800da28:	4b2c      	ldr	r3, [pc, #176]	@ (800dadc <Device_Init+0x334>)
 800da2a:	785b      	ldrb	r3, [r3, #1]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d001      	beq.n	800da34 <Device_Init+0x28c>
 800da30:	4b3f      	ldr	r3, [pc, #252]	@ (800db30 <Device_Init+0x388>)
 800da32:	e000      	b.n	800da36 <Device_Init+0x28e>
 800da34:	4b3f      	ldr	r3, [pc, #252]	@ (800db34 <Device_Init+0x38c>)
 800da36:	4a41      	ldr	r2, [pc, #260]	@ (800db3c <Device_Init+0x394>)
 800da38:	4936      	ldr	r1, [pc, #216]	@ (800db14 <Device_Init+0x36c>)
 800da3a:	2002      	movs	r0, #2
 800da3c:	f006 fb0a 	bl	8014054 <CreateLine>
  Info("SensorProbe.AHT20_Present: %s", SensorProbe.AHT20_Present?"yes":"no");
 800da40:	4b26      	ldr	r3, [pc, #152]	@ (800dadc <Device_Init+0x334>)
 800da42:	789b      	ldrb	r3, [r3, #2]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d001      	beq.n	800da4c <Device_Init+0x2a4>
 800da48:	4b39      	ldr	r3, [pc, #228]	@ (800db30 <Device_Init+0x388>)
 800da4a:	e000      	b.n	800da4e <Device_Init+0x2a6>
 800da4c:	4b39      	ldr	r3, [pc, #228]	@ (800db34 <Device_Init+0x38c>)
 800da4e:	4a3c      	ldr	r2, [pc, #240]	@ (800db40 <Device_Init+0x398>)
 800da50:	4930      	ldr	r1, [pc, #192]	@ (800db14 <Device_Init+0x36c>)
 800da52:	2002      	movs	r0, #2
 800da54:	f006 fafe 	bl	8014054 <CreateLine>
  Info("SensorProbe.BMP280_Present: %s", SensorProbe.BMP280_Present?"yes":"no");
 800da58:	4b20      	ldr	r3, [pc, #128]	@ (800dadc <Device_Init+0x334>)
 800da5a:	791b      	ldrb	r3, [r3, #4]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d001      	beq.n	800da64 <Device_Init+0x2bc>
 800da60:	4b33      	ldr	r3, [pc, #204]	@ (800db30 <Device_Init+0x388>)
 800da62:	e000      	b.n	800da66 <Device_Init+0x2be>
 800da64:	4b33      	ldr	r3, [pc, #204]	@ (800db34 <Device_Init+0x38c>)
 800da66:	4a37      	ldr	r2, [pc, #220]	@ (800db44 <Device_Init+0x39c>)
 800da68:	492a      	ldr	r1, [pc, #168]	@ (800db14 <Device_Init+0x36c>)
 800da6a:	2002      	movs	r0, #2
 800da6c:	f006 faf2 	bl	8014054 <CreateLine>
  Info("SensorProbe.ENS160_Present: %s", SensorProbe.ENS160_Present?"yes":"no");
 800da70:	4b1a      	ldr	r3, [pc, #104]	@ (800dadc <Device_Init+0x334>)
 800da72:	78db      	ldrb	r3, [r3, #3]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d001      	beq.n	800da7c <Device_Init+0x2d4>
 800da78:	4b2d      	ldr	r3, [pc, #180]	@ (800db30 <Device_Init+0x388>)
 800da7a:	e000      	b.n	800da7e <Device_Init+0x2d6>
 800da7c:	4b2d      	ldr	r3, [pc, #180]	@ (800db34 <Device_Init+0x38c>)
 800da7e:	4a32      	ldr	r2, [pc, #200]	@ (800db48 <Device_Init+0x3a0>)
 800da80:	4924      	ldr	r1, [pc, #144]	@ (800db14 <Device_Init+0x36c>)
 800da82:	2002      	movs	r0, #2
 800da84:	f006 fae6 	bl	8014054 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 800da88:	4b14      	ldr	r3, [pc, #80]	@ (800dadc <Device_Init+0x334>)
 800da8a:	795b      	ldrb	r3, [r3, #5]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d001      	beq.n	800da94 <Device_Init+0x2ec>
 800da90:	4b27      	ldr	r3, [pc, #156]	@ (800db30 <Device_Init+0x388>)
 800da92:	e000      	b.n	800da96 <Device_Init+0x2ee>
 800da94:	4b27      	ldr	r3, [pc, #156]	@ (800db34 <Device_Init+0x38c>)
 800da96:	4a2d      	ldr	r2, [pc, #180]	@ (800db4c <Device_Init+0x3a4>)
 800da98:	491e      	ldr	r1, [pc, #120]	@ (800db14 <Device_Init+0x36c>)
 800da9a:	2002      	movs	r0, #2
 800da9c:	f006 fada 	bl	8014054 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 800daa0:	4b0e      	ldr	r3, [pc, #56]	@ (800dadc <Device_Init+0x334>)
 800daa2:	799b      	ldrb	r3, [r3, #6]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <Device_Init+0x304>
 800daa8:	4b21      	ldr	r3, [pc, #132]	@ (800db30 <Device_Init+0x388>)
 800daaa:	e000      	b.n	800daae <Device_Init+0x306>
 800daac:	4b21      	ldr	r3, [pc, #132]	@ (800db34 <Device_Init+0x38c>)
 800daae:	4a28      	ldr	r2, [pc, #160]	@ (800db50 <Device_Init+0x3a8>)
 800dab0:	4918      	ldr	r1, [pc, #96]	@ (800db14 <Device_Init+0x36c>)
 800dab2:	2002      	movs	r0, #2
 800dab4:	f006 face 	bl	8014054 <CreateLine>
  ESP_Init(espUart);
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	0018      	movs	r0, r3
 800dabc:	f7f7 f9fc 	bl	8004eb8 <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800dac0:	4a24      	ldr	r2, [pc, #144]	@ (800db54 <Device_Init+0x3ac>)
 800dac2:	4b09      	ldr	r3, [pc, #36]	@ (800dae8 <Device_Init+0x340>)
 800dac4:	0019      	movs	r1, r3
 800dac6:	2003      	movs	r0, #3
 800dac8:	f006 fac4 	bl	8014054 <CreateLine>
}
 800dacc:	46c0      	nop			@ (mov r8, r8)
 800dace:	46bd      	mov	sp, r7
 800dad0:	b004      	add	sp, #16
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	0802d150 	.word	0x0802d150
 800dad8:	0802d180 	.word	0x0802d180
 800dadc:	200010d4 	.word	0x200010d4
 800dae0:	200010cc 	.word	0x200010cc
 800dae4:	0802d184 	.word	0x0802d184
 800dae8:	0802d14c 	.word	0x0802d14c
 800daec:	0802d1b0 	.word	0x0802d1b0
 800daf0:	0802d1e4 	.word	0x0802d1e4
 800daf4:	0802d214 	.word	0x0802d214
 800daf8:	0802d230 	.word	0x0802d230
 800dafc:	0802d248 	.word	0x0802d248
 800db00:	0802d264 	.word	0x0802d264
 800db04:	0802d27c 	.word	0x0802d27c
 800db08:	0802d2b0 	.word	0x0802d2b0
 800db0c:	50000400 	.word	0x50000400
 800db10:	0802d2e4 	.word	0x0802d2e4
 800db14:	0802d308 	.word	0x0802d308
 800db18:	0802d30c 	.word	0x0802d30c
 800db1c:	0802d338 	.word	0x0802d338
 800db20:	0802d364 	.word	0x0802d364
 800db24:	20001174 	.word	0x20001174
 800db28:	0802d37c 	.word	0x0802d37c
 800db2c:	0802d3cc 	.word	0x0802d3cc
 800db30:	0802d3f0 	.word	0x0802d3f0
 800db34:	0802d3f4 	.word	0x0802d3f4
 800db38:	0802d3f8 	.word	0x0802d3f8
 800db3c:	0802d414 	.word	0x0802d414
 800db40:	0802d430 	.word	0x0802d430
 800db44:	0802d450 	.word	0x0802d450
 800db48:	0802d470 	.word	0x0802d470
 800db4c:	0802d490 	.word	0x0802d490
 800db50:	0802d4ac 	.word	0x0802d4ac
 800db54:	0802d4c8 	.word	0x0802d4c8

0800db58 <Device_Test>:

void Device_Test(){
 800db58:	b580      	push	{r7, lr}
 800db5a:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 800db5c:	4b34      	ldr	r3, [pc, #208]	@ (800dc30 <Device_Test+0xd8>)
 800db5e:	799b      	ldrb	r3, [r3, #6]
 800db60:	2201      	movs	r2, #1
 800db62:	4053      	eors	r3, r2
 800db64:	b2db      	uxtb	r3, r3
 800db66:	2b00      	cmp	r3, #0
 800db68:	d027      	beq.n	800dbba <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 800db6a:	f000 fc43 	bl	800e3f4 <MIC_TestMeasurementDone>
 800db6e:	1e03      	subs	r3, r0, #0
 800db70:	d011      	beq.n	800db96 <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
      SensorProbe.MIC_Present = true;
 800db72:	4b2f      	ldr	r3, [pc, #188]	@ (800dc30 <Device_Test+0xd8>)
 800db74:	2201      	movs	r2, #1
 800db76:	719a      	strb	r2, [r3, #6]
      Sensor.MIC_measurementEnabled = true;
 800db78:	4b2e      	ldr	r3, [pc, #184]	@ (800dc34 <Device_Test+0xdc>)
 800db7a:	2201      	movs	r2, #1
 800db7c:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 800db7e:	f004 fec1 	bl	8012904 <Calculate_LED_ON>
 800db82:	0003      	movs	r3, r0
 800db84:	0019      	movs	r1, r3
 800db86:	23fa      	movs	r3, #250	@ 0xfa
 800db88:	011a      	lsls	r2, r3, #4
 800db8a:	23fa      	movs	r3, #250	@ 0xfa
 800db8c:	011b      	lsls	r3, r3, #4
 800db8e:	0018      	movs	r0, r3
 800db90:	f004 ff00 	bl	8012994 <SetStatusLED>
 800db94:	e011      	b.n	800dbba <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 800db96:	f004 f803 	bl	8011ba0 <micSettlingComplete>
 800db9a:	1e03      	subs	r3, r0, #0
 800db9c:	d00d      	beq.n	800dbba <Device_Test+0x62>
        // his has to be met first
        Sensor.MIC_measurementEnabled = true;
 800db9e:	4b25      	ldr	r3, [pc, #148]	@ (800dc34 <Device_Test+0xdc>)
 800dba0:	2201      	movs	r2, #1
 800dba2:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 800dba4:	f004 feae 	bl	8012904 <Calculate_LED_ON>
 800dba8:	0003      	movs	r3, r0
 800dbaa:	0018      	movs	r0, r3
 800dbac:	23fa      	movs	r3, #250	@ 0xfa
 800dbae:	011a      	lsls	r2, r3, #4
 800dbb0:	23fa      	movs	r3, #250	@ 0xfa
 800dbb2:	011b      	lsls	r3, r3, #4
 800dbb4:	0019      	movs	r1, r3
 800dbb6:	f004 feed 	bl	8012994 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 800dbba:	4b1d      	ldr	r3, [pc, #116]	@ (800dc30 <Device_Test+0xd8>)
 800dbbc:	79db      	ldrb	r3, [r3, #7]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	4053      	eors	r3, r2
 800dbc2:	b2db      	uxtb	r3, r3
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d001      	beq.n	800dbcc <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 800dbc8:	f7f9 fc66 	bl	8007498 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 800dbcc:	4b18      	ldr	r3, [pc, #96]	@ (800dc30 <Device_Test+0xd8>)
 800dbce:	79db      	ldrb	r3, [r3, #7]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d003      	beq.n	800dbdc <Device_Test+0x84>
 800dbd4:	4b16      	ldr	r3, [pc, #88]	@ (800dc30 <Device_Test+0xd8>)
 800dbd6:	799b      	ldrb	r3, [r3, #6]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d106      	bne.n	800dbea <Device_Test+0x92>
 800dbdc:	4b16      	ldr	r3, [pc, #88]	@ (800dc38 <Device_Test+0xe0>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	0018      	movs	r0, r3
 800dbe2:	f006 f9e1 	bl	8013fa8 <TimestampIsReached>
 800dbe6:	1e03      	subs	r3, r0, #0
 800dbe8:	d01f      	beq.n	800dc2a <Device_Test+0xd2>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800dbea:	4b11      	ldr	r3, [pc, #68]	@ (800dc30 <Device_Test+0xd8>)
 800dbec:	79db      	ldrb	r3, [r3, #7]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d001      	beq.n	800dbf6 <Device_Test+0x9e>
 800dbf2:	4b12      	ldr	r3, [pc, #72]	@ (800dc3c <Device_Test+0xe4>)
 800dbf4:	e000      	b.n	800dbf8 <Device_Test+0xa0>
 800dbf6:	4b12      	ldr	r3, [pc, #72]	@ (800dc40 <Device_Test+0xe8>)
 800dbf8:	4a12      	ldr	r2, [pc, #72]	@ (800dc44 <Device_Test+0xec>)
 800dbfa:	4913      	ldr	r1, [pc, #76]	@ (800dc48 <Device_Test+0xf0>)
 800dbfc:	2002      	movs	r0, #2
 800dbfe:	f006 fa29 	bl	8014054 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 800dc02:	4b0b      	ldr	r3, [pc, #44]	@ (800dc30 <Device_Test+0xd8>)
 800dc04:	799b      	ldrb	r3, [r3, #6]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d001      	beq.n	800dc0e <Device_Test+0xb6>
 800dc0a:	4b0c      	ldr	r3, [pc, #48]	@ (800dc3c <Device_Test+0xe4>)
 800dc0c:	e000      	b.n	800dc10 <Device_Test+0xb8>
 800dc0e:	4b0c      	ldr	r3, [pc, #48]	@ (800dc40 <Device_Test+0xe8>)
 800dc10:	4a0e      	ldr	r2, [pc, #56]	@ (800dc4c <Device_Test+0xf4>)
 800dc12:	490d      	ldr	r1, [pc, #52]	@ (800dc48 <Device_Test+0xf0>)
 800dc14:	2002      	movs	r0, #2
 800dc16:	f006 fa1d 	bl	8014054 <CreateLine>
    Info("Test completed");
 800dc1a:	4a0d      	ldr	r2, [pc, #52]	@ (800dc50 <Device_Test+0xf8>)
 800dc1c:	4b0a      	ldr	r3, [pc, #40]	@ (800dc48 <Device_Test+0xf0>)
 800dc1e:	0019      	movs	r1, r3
 800dc20:	2002      	movs	r0, #2
 800dc22:	f006 fa17 	bl	8014054 <CreateLine>
#ifdef  SSD1306
    if (Check_USB_PowerOn() || userToggle) {
      display2ndmsg2ndline();
    }
#endif
    SetTestDone();
 800dc26:	f7ff f8a7 	bl	800cd78 <SetTestDone>
  }
}
 800dc2a:	46c0      	nop			@ (mov r8, r8)
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	200010d4 	.word	0x200010d4
 800dc34:	200010cc 	.word	0x200010cc
 800dc38:	200010c4 	.word	0x200010c4
 800dc3c:	0802d4ec 	.word	0x0802d4ec
 800dc40:	0802d4f4 	.word	0x0802d4f4
 800dc44:	0802d4fc 	.word	0x0802d4fc
 800dc48:	0802d308 	.word	0x0802d308
 800dc4c:	0802d510 	.word	0x0802d510
 800dc50:	0802d524 	.word	0x0802d524

0800dc54 <AllDevicesReady>:

bool AllDevicesReady() {
 800dc54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc56:	46de      	mov	lr, fp
 800dc58:	4657      	mov	r7, sl
 800dc5a:	464e      	mov	r6, r9
 800dc5c:	4645      	mov	r5, r8
 800dc5e:	b5e0      	push	{r5, r6, r7, lr}
 800dc60:	b08b      	sub	sp, #44	@ 0x2c
 800dc62:	af08      	add	r7, sp, #32
  static bool prevstatus = true;
  static bool allinwait = false;
  if (TimestampIsReached(deviceTimeOut)) {
 800dc64:	4b7c      	ldr	r3, [pc, #496]	@ (800de58 <AllDevicesReady+0x204>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	0018      	movs	r0, r3
 800dc6a:	f006 f99d 	bl	8013fa8 <TimestampIsReached>
 800dc6e:	1e03      	subs	r3, r0, #0
 800dc70:	d100      	bne.n	800dc74 <AllDevicesReady+0x20>
 800dc72:	e0e7      	b.n	800de44 <AllDevicesReady+0x1f0>
    if (!sensorsdisablereq) {
 800dc74:	4b79      	ldr	r3, [pc, #484]	@ (800de5c <AllDevicesReady+0x208>)
 800dc76:	781b      	ldrb	r3, [r3, #0]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	4053      	eors	r3, r2
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d008      	beq.n	800dc94 <AllDevicesReady+0x40>
      Debug("Requesting all devices ready");
 800dc82:	4a77      	ldr	r2, [pc, #476]	@ (800de60 <AllDevicesReady+0x20c>)
 800dc84:	4b77      	ldr	r3, [pc, #476]	@ (800de64 <AllDevicesReady+0x210>)
 800dc86:	0019      	movs	r1, r3
 800dc88:	2003      	movs	r0, #3
 800dc8a:	f006 f9e3 	bl	8014054 <CreateLine>
      sensorsdisablereq = true;
 800dc8e:	4b73      	ldr	r3, [pc, #460]	@ (800de5c <AllDevicesReady+0x208>)
 800dc90:	2201      	movs	r2, #1
 800dc92:	701a      	strb	r2, [r3, #0]
    }
    if (HIDSstate == HIDS_STATE_WAIT) {
 800dc94:	4b74      	ldr	r3, [pc, #464]	@ (800de68 <AllDevicesReady+0x214>)
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	2b06      	cmp	r3, #6
 800dc9a:	d102      	bne.n	800dca2 <AllDevicesReady+0x4e>
      Sensor.HT_measurementEnabled = false;
 800dc9c:	4b73      	ldr	r3, [pc, #460]	@ (800de6c <AllDevicesReady+0x218>)
 800dc9e:	2200      	movs	r2, #0
 800dca0:	701a      	strb	r2, [r3, #0]
    }
    if ((AHTstate == AHT_STATE_WAIT) || !SensorProbe.AHT20_Present) {
 800dca2:	4b73      	ldr	r3, [pc, #460]	@ (800de70 <AllDevicesReady+0x21c>)
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	2b05      	cmp	r3, #5
 800dca8:	d006      	beq.n	800dcb8 <AllDevicesReady+0x64>
 800dcaa:	4b72      	ldr	r3, [pc, #456]	@ (800de74 <AllDevicesReady+0x220>)
 800dcac:	789b      	ldrb	r3, [r3, #2]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	4053      	eors	r3, r2
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d002      	beq.n	800dcbe <AllDevicesReady+0x6a>
      Sensor.AHT_measurementEnabled = false;
 800dcb8:	4b6c      	ldr	r3, [pc, #432]	@ (800de6c <AllDevicesReady+0x218>)
 800dcba:	2200      	movs	r2, #0
 800dcbc:	711a      	strb	r2, [r3, #4]
    }
    if ((BMPstate == BMP_STATE_WAIT) || !SensorProbe.BMP280_Present) {
 800dcbe:	4b6e      	ldr	r3, [pc, #440]	@ (800de78 <AllDevicesReady+0x224>)
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	2b08      	cmp	r3, #8
 800dcc4:	d006      	beq.n	800dcd4 <AllDevicesReady+0x80>
 800dcc6:	4b6b      	ldr	r3, [pc, #428]	@ (800de74 <AllDevicesReady+0x220>)
 800dcc8:	791b      	ldrb	r3, [r3, #4]
 800dcca:	2201      	movs	r2, #1
 800dccc:	4053      	eors	r3, r2
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d002      	beq.n	800dcda <AllDevicesReady+0x86>
      Sensor.BMP_measurementEnabled = false;
 800dcd4:	4b65      	ldr	r3, [pc, #404]	@ (800de6c <AllDevicesReady+0x218>)
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	715a      	strb	r2, [r3, #5]
    }
    if ((ENSstate == ENS_STATE_WAIT) || !SensorProbe.ENS160_Present) {
 800dcda:	4b68      	ldr	r3, [pc, #416]	@ (800de7c <AllDevicesReady+0x228>)
 800dcdc:	781b      	ldrb	r3, [r3, #0]
 800dcde:	2b08      	cmp	r3, #8
 800dce0:	d006      	beq.n	800dcf0 <AllDevicesReady+0x9c>
 800dce2:	4b64      	ldr	r3, [pc, #400]	@ (800de74 <AllDevicesReady+0x220>)
 800dce4:	78db      	ldrb	r3, [r3, #3]
 800dce6:	2201      	movs	r2, #1
 800dce8:	4053      	eors	r3, r2
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d002      	beq.n	800dcf6 <AllDevicesReady+0xa2>
      Sensor.ENS_measurementEnabled = false;
 800dcf0:	4b5e      	ldr	r3, [pc, #376]	@ (800de6c <AllDevicesReady+0x218>)
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	719a      	strb	r2, [r3, #6]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800dcf6:	4b62      	ldr	r3, [pc, #392]	@ (800de80 <AllDevicesReady+0x22c>)
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	2b07      	cmp	r3, #7
 800dcfc:	d006      	beq.n	800dd0c <AllDevicesReady+0xb8>
 800dcfe:	4b5d      	ldr	r3, [pc, #372]	@ (800de74 <AllDevicesReady+0x220>)
 800dd00:	7a1b      	ldrb	r3, [r3, #8]
 800dd02:	2201      	movs	r2, #1
 800dd04:	4053      	eors	r3, r2
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d002      	beq.n	800dd12 <AllDevicesReady+0xbe>
      Sensor.VOC_measurementEnabled = false;
 800dd0c:	4b57      	ldr	r3, [pc, #348]	@ (800de6c <AllDevicesReady+0x218>)
 800dd0e:	2200      	movs	r2, #0
 800dd10:	705a      	strb	r2, [r3, #1]
    }
    if ((PMsamplesState == LIGHT_OUT) || (PMsamplesState == CHECK_SEN5X)) {
 800dd12:	4b5c      	ldr	r3, [pc, #368]	@ (800de84 <AllDevicesReady+0x230>)
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	2b01      	cmp	r3, #1
 800dd18:	d003      	beq.n	800dd22 <AllDevicesReady+0xce>
 800dd1a:	4b5a      	ldr	r3, [pc, #360]	@ (800de84 <AllDevicesReady+0x230>)
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	2b03      	cmp	r3, #3
 800dd20:	d102      	bne.n	800dd28 <AllDevicesReady+0xd4>
      Sensor.PM_measurementEnabled = false;
 800dd22:	4b52      	ldr	r3, [pc, #328]	@ (800de6c <AllDevicesReady+0x218>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 800dd28:	4b57      	ldr	r3, [pc, #348]	@ (800de88 <AllDevicesReady+0x234>)
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	2b03      	cmp	r3, #3
 800dd2e:	d102      	bne.n	800dd36 <AllDevicesReady+0xe2>
      Sensor.MIC_measurementEnabled = false;
 800dd30:	4b4e      	ldr	r3, [pc, #312]	@ (800de6c <AllDevicesReady+0x218>)
 800dd32:	2200      	movs	r2, #0
 800dd34:	70da      	strb	r2, [r3, #3]
    }
    if ((ESPstate == ESP_STATE_RESET) || (ESPstate == ESP_STATE_INIT)) {
 800dd36:	4b55      	ldr	r3, [pc, #340]	@ (800de8c <AllDevicesReady+0x238>)
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	2b09      	cmp	r3, #9
 800dd3c:	d004      	beq.n	800dd48 <AllDevicesReady+0xf4>
 800dd3e:	4b53      	ldr	r3, [pc, #332]	@ (800de8c <AllDevicesReady+0x238>)
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	2b02      	cmp	r3, #2
 800dd44:	d000      	beq.n	800dd48 <AllDevicesReady+0xf4>
 800dd46:	e07d      	b.n	800de44 <AllDevicesReady+0x1f0>
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800dd48:	4b48      	ldr	r3, [pc, #288]	@ (800de6c <AllDevicesReady+0x218>)
 800dd4a:	781a      	ldrb	r2, [r3, #0]
 800dd4c:	4b47      	ldr	r3, [pc, #284]	@ (800de6c <AllDevicesReady+0x218>)
 800dd4e:	785b      	ldrb	r3, [r3, #1]
 800dd50:	4313      	orrs	r3, r2
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	4b45      	ldr	r3, [pc, #276]	@ (800de6c <AllDevicesReady+0x218>)
 800dd56:	791b      	ldrb	r3, [r3, #4]
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	b2da      	uxtb	r2, r3
 800dd5c:	4b43      	ldr	r3, [pc, #268]	@ (800de6c <AllDevicesReady+0x218>)
 800dd5e:	795b      	ldrb	r3, [r3, #5]
 800dd60:	4313      	orrs	r3, r2
 800dd62:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800dd64:	4b41      	ldr	r3, [pc, #260]	@ (800de6c <AllDevicesReady+0x218>)
 800dd66:	799b      	ldrb	r3, [r3, #6]
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	b2da      	uxtb	r2, r3
          Sensor.ENS_measurementEnabled | Sensor.PM_measurementEnabled | Sensor.MIC_measurementEnabled);
 800dd6c:	4b3f      	ldr	r3, [pc, #252]	@ (800de6c <AllDevicesReady+0x218>)
 800dd6e:	789b      	ldrb	r3, [r3, #2]
 800dd70:	4313      	orrs	r3, r2
 800dd72:	b2da      	uxtb	r2, r3
 800dd74:	4b3d      	ldr	r3, [pc, #244]	@ (800de6c <AllDevicesReady+0x218>)
 800dd76:	78db      	ldrb	r3, [r3, #3]
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	1e5a      	subs	r2, r3, #1
 800dd7e:	4193      	sbcs	r3, r2
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	2201      	movs	r2, #1
 800dd84:	4053      	eors	r3, r2
 800dd86:	b2db      	uxtb	r3, r3
 800dd88:	001a      	movs	r2, r3
      bool status = !(Sensor.HT_measurementEnabled | Sensor.VOC_measurementEnabled | Sensor.AHT_measurementEnabled | Sensor.BMP_measurementEnabled |
 800dd8a:	1dfb      	adds	r3, r7, #7
 800dd8c:	701a      	strb	r2, [r3, #0]
 800dd8e:	781a      	ldrb	r2, [r3, #0]
 800dd90:	2101      	movs	r1, #1
 800dd92:	400a      	ands	r2, r1
 800dd94:	701a      	strb	r2, [r3, #0]
      if (!status && (prevstatus != status)) {
 800dd96:	1dfb      	adds	r3, r7, #7
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	4053      	eors	r3, r2
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d034      	beq.n	800de0e <AllDevicesReady+0x1ba>
 800dda4:	4b3a      	ldr	r3, [pc, #232]	@ (800de90 <AllDevicesReady+0x23c>)
 800dda6:	781b      	ldrb	r3, [r3, #0]
 800dda8:	1dfa      	adds	r2, r7, #7
 800ddaa:	7812      	ldrb	r2, [r2, #0]
 800ddac:	429a      	cmp	r2, r3
 800ddae:	d02e      	beq.n	800de0e <AllDevicesReady+0x1ba>
        Debug("HIDS %d, AHT %d, BMP %d, ENS %d, SGP %d,PM %d, MIC %d, Lock is from sensor column : %d (0 is FREE)",Sensor.HT_measurementEnabled, Sensor.AHT_measurementEnabled,
 800ddb0:	4b2e      	ldr	r3, [pc, #184]	@ (800de6c <AllDevicesReady+0x218>)
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	469b      	mov	fp, r3
 800ddb6:	4b2d      	ldr	r3, [pc, #180]	@ (800de6c <AllDevicesReady+0x218>)
 800ddb8:	791b      	ldrb	r3, [r3, #4]
 800ddba:	001c      	movs	r4, r3
 800ddbc:	4b2b      	ldr	r3, [pc, #172]	@ (800de6c <AllDevicesReady+0x218>)
 800ddbe:	795b      	ldrb	r3, [r3, #5]
 800ddc0:	001d      	movs	r5, r3
 800ddc2:	4b2a      	ldr	r3, [pc, #168]	@ (800de6c <AllDevicesReady+0x218>)
 800ddc4:	799b      	ldrb	r3, [r3, #6]
 800ddc6:	001e      	movs	r6, r3
 800ddc8:	4b28      	ldr	r3, [pc, #160]	@ (800de6c <AllDevicesReady+0x218>)
 800ddca:	785b      	ldrb	r3, [r3, #1]
 800ddcc:	4698      	mov	r8, r3
 800ddce:	4b27      	ldr	r3, [pc, #156]	@ (800de6c <AllDevicesReady+0x218>)
 800ddd0:	789b      	ldrb	r3, [r3, #2]
 800ddd2:	4699      	mov	r9, r3
 800ddd4:	4b25      	ldr	r3, [pc, #148]	@ (800de6c <AllDevicesReady+0x218>)
 800ddd6:	78db      	ldrb	r3, [r3, #3]
 800ddd8:	469a      	mov	sl, r3
 800ddda:	f000 f921 	bl	800e020 <getSensorLock>
 800ddde:	0003      	movs	r3, r0
 800dde0:	4a2c      	ldr	r2, [pc, #176]	@ (800de94 <AllDevicesReady+0x240>)
 800dde2:	4920      	ldr	r1, [pc, #128]	@ (800de64 <AllDevicesReady+0x210>)
 800dde4:	9306      	str	r3, [sp, #24]
 800dde6:	4653      	mov	r3, sl
 800dde8:	9305      	str	r3, [sp, #20]
 800ddea:	464b      	mov	r3, r9
 800ddec:	9304      	str	r3, [sp, #16]
 800ddee:	4643      	mov	r3, r8
 800ddf0:	9303      	str	r3, [sp, #12]
 800ddf2:	9602      	str	r6, [sp, #8]
 800ddf4:	9501      	str	r5, [sp, #4]
 800ddf6:	9400      	str	r4, [sp, #0]
 800ddf8:	465b      	mov	r3, fp
 800ddfa:	2003      	movs	r0, #3
 800ddfc:	f006 f92a 	bl	8014054 <CreateLine>
          Sensor.BMP_measurementEnabled, Sensor.ENS_measurementEnabled, Sensor.VOC_measurementEnabled, Sensor.PM_measurementEnabled, Sensor.MIC_measurementEnabled, getSensorLock());
        prevstatus = status;
 800de00:	4b23      	ldr	r3, [pc, #140]	@ (800de90 <AllDevicesReady+0x23c>)
 800de02:	1dfa      	adds	r2, r7, #7
 800de04:	7812      	ldrb	r2, [r2, #0]
 800de06:	701a      	strb	r2, [r3, #0]
        allinwait = false;
 800de08:	4b23      	ldr	r3, [pc, #140]	@ (800de98 <AllDevicesReady+0x244>)
 800de0a:	2200      	movs	r2, #0
 800de0c:	701a      	strb	r2, [r3, #0]
      }
      if (status && !allinwait) {
 800de0e:	1dfb      	adds	r3, r7, #7
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d013      	beq.n	800de3e <AllDevicesReady+0x1ea>
 800de16:	4b20      	ldr	r3, [pc, #128]	@ (800de98 <AllDevicesReady+0x244>)
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	2201      	movs	r2, #1
 800de1c:	4053      	eors	r3, r2
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	2b00      	cmp	r3, #0
 800de22:	d00c      	beq.n	800de3e <AllDevicesReady+0x1ea>
        Debug("All sensors in wait");
 800de24:	4a1d      	ldr	r2, [pc, #116]	@ (800de9c <AllDevicesReady+0x248>)
 800de26:	4b0f      	ldr	r3, [pc, #60]	@ (800de64 <AllDevicesReady+0x210>)
 800de28:	0019      	movs	r1, r3
 800de2a:	2003      	movs	r0, #3
 800de2c:	f006 f912 	bl	8014054 <CreateLine>
        prevstatus = status;
 800de30:	4b17      	ldr	r3, [pc, #92]	@ (800de90 <AllDevicesReady+0x23c>)
 800de32:	1dfa      	adds	r2, r7, #7
 800de34:	7812      	ldrb	r2, [r2, #0]
 800de36:	701a      	strb	r2, [r3, #0]
        allinwait = true;
 800de38:	4b17      	ldr	r3, [pc, #92]	@ (800de98 <AllDevicesReady+0x244>)
 800de3a:	2201      	movs	r2, #1
 800de3c:	701a      	strb	r2, [r3, #0]
      }
      return status;
 800de3e:	1dfb      	adds	r3, r7, #7
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	e000      	b.n	800de46 <AllDevicesReady+0x1f2>
    }
  }
  return false;
 800de44:	2300      	movs	r3, #0
}
 800de46:	0018      	movs	r0, r3
 800de48:	46bd      	mov	sp, r7
 800de4a:	b003      	add	sp, #12
 800de4c:	bcf0      	pop	{r4, r5, r6, r7}
 800de4e:	46bb      	mov	fp, r7
 800de50:	46b2      	mov	sl, r6
 800de52:	46a9      	mov	r9, r5
 800de54:	46a0      	mov	r8, r4
 800de56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de58:	200010c4 	.word	0x200010c4
 800de5c:	200010e3 	.word	0x200010e3
 800de60:	0802d534 	.word	0x0802d534
 800de64:	0802d14c 	.word	0x0802d14c
 800de68:	200010df 	.word	0x200010df
 800de6c:	200010cc 	.word	0x200010cc
 800de70:	200010e0 	.word	0x200010e0
 800de74:	200010d4 	.word	0x200010d4
 800de78:	200010e1 	.word	0x200010e1
 800de7c:	200010e2 	.word	0x200010e2
 800de80:	200010de 	.word	0x200010de
 800de84:	200000aa 	.word	0x200000aa
 800de88:	200010b1 	.word	0x200010b1
 800de8c:	200010b2 	.word	0x200010b2
 800de90:	200000a8 	.word	0x200000a8
 800de94:	0802d554 	.word	0x0802d554
 800de98:	200010e4 	.word	0x200010e4
 800de9c:	0802d5b8 	.word	0x0802d5b8

0800dea0 <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800dea0:	b580      	push	{r7, lr}
 800dea2:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 800dea4:	4b35      	ldr	r3, [pc, #212]	@ (800df7c <EnabledConnectedDevices+0xdc>)
 800dea6:	781b      	ldrb	r3, [r3, #0]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d002      	beq.n	800deb2 <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 800deac:	4b34      	ldr	r3, [pc, #208]	@ (800df80 <EnabledConnectedDevices+0xe0>)
 800deae:	2201      	movs	r2, #1
 800deb0:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.AHT20_Present) && (AHTState != AHT_STATE_OFF)) {
 800deb2:	4b32      	ldr	r3, [pc, #200]	@ (800df7c <EnabledConnectedDevices+0xdc>)
 800deb4:	789b      	ldrb	r3, [r3, #2]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d006      	beq.n	800dec8 <EnabledConnectedDevices+0x28>
 800deba:	4b32      	ldr	r3, [pc, #200]	@ (800df84 <EnabledConnectedDevices+0xe4>)
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d002      	beq.n	800dec8 <EnabledConnectedDevices+0x28>
    Sensor.AHT_measurementEnabled = true;
 800dec2:	4b2f      	ldr	r3, [pc, #188]	@ (800df80 <EnabledConnectedDevices+0xe0>)
 800dec4:	2201      	movs	r2, #1
 800dec6:	711a      	strb	r2, [r3, #4]
  }
  if ((SensorProbe.AHT20_Present) && (AHTState == AHT_STATE_OFF)) {
 800dec8:	4b2c      	ldr	r3, [pc, #176]	@ (800df7c <EnabledConnectedDevices+0xdc>)
 800deca:	789b      	ldrb	r3, [r3, #2]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d009      	beq.n	800dee4 <EnabledConnectedDevices+0x44>
 800ded0:	4b2c      	ldr	r3, [pc, #176]	@ (800df84 <EnabledConnectedDevices+0xe4>)
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d105      	bne.n	800dee4 <EnabledConnectedDevices+0x44>
    Info("AHT2x sensor is disabled");
 800ded8:	4a2b      	ldr	r2, [pc, #172]	@ (800df88 <EnabledConnectedDevices+0xe8>)
 800deda:	4b2c      	ldr	r3, [pc, #176]	@ (800df8c <EnabledConnectedDevices+0xec>)
 800dedc:	0019      	movs	r1, r3
 800dede:	2002      	movs	r0, #2
 800dee0:	f006 f8b8 	bl	8014054 <CreateLine>
  }
  if ((SensorProbe.BMP280_Present) && (BMPState != BMP_STATE_OFF)) {
 800dee4:	4b25      	ldr	r3, [pc, #148]	@ (800df7c <EnabledConnectedDevices+0xdc>)
 800dee6:	791b      	ldrb	r3, [r3, #4]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d006      	beq.n	800defa <EnabledConnectedDevices+0x5a>
 800deec:	4b28      	ldr	r3, [pc, #160]	@ (800df90 <EnabledConnectedDevices+0xf0>)
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	2b06      	cmp	r3, #6
 800def2:	d002      	beq.n	800defa <EnabledConnectedDevices+0x5a>
    Sensor.BMP_measurementEnabled = true;
 800def4:	4b22      	ldr	r3, [pc, #136]	@ (800df80 <EnabledConnectedDevices+0xe0>)
 800def6:	2201      	movs	r2, #1
 800def8:	715a      	strb	r2, [r3, #5]
  }
  if ((SensorProbe.BMP280_Present) && (BMPState == BMP_STATE_OFF)) {
 800defa:	4b20      	ldr	r3, [pc, #128]	@ (800df7c <EnabledConnectedDevices+0xdc>)
 800defc:	791b      	ldrb	r3, [r3, #4]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d009      	beq.n	800df16 <EnabledConnectedDevices+0x76>
 800df02:	4b23      	ldr	r3, [pc, #140]	@ (800df90 <EnabledConnectedDevices+0xf0>)
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	2b06      	cmp	r3, #6
 800df08:	d105      	bne.n	800df16 <EnabledConnectedDevices+0x76>
    Info("BMP20 sensor is disabled");
 800df0a:	4a22      	ldr	r2, [pc, #136]	@ (800df94 <EnabledConnectedDevices+0xf4>)
 800df0c:	4b1f      	ldr	r3, [pc, #124]	@ (800df8c <EnabledConnectedDevices+0xec>)
 800df0e:	0019      	movs	r1, r3
 800df10:	2002      	movs	r0, #2
 800df12:	f006 f89f 	bl	8014054 <CreateLine>
  }
  if (SensorProbe.ENS160_Present) {
 800df16:	4b19      	ldr	r3, [pc, #100]	@ (800df7c <EnabledConnectedDevices+0xdc>)
 800df18:	78db      	ldrb	r3, [r3, #3]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d002      	beq.n	800df24 <EnabledConnectedDevices+0x84>
    Sensor.ENS_measurementEnabled = true;
 800df1e:	4b18      	ldr	r3, [pc, #96]	@ (800df80 <EnabledConnectedDevices+0xe0>)
 800df20:	2201      	movs	r2, #1
 800df22:	719a      	strb	r2, [r3, #6]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800df24:	4b15      	ldr	r3, [pc, #84]	@ (800df7c <EnabledConnectedDevices+0xdc>)
 800df26:	785b      	ldrb	r3, [r3, #1]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d006      	beq.n	800df3a <EnabledConnectedDevices+0x9a>
 800df2c:	4b13      	ldr	r3, [pc, #76]	@ (800df7c <EnabledConnectedDevices+0xdc>)
 800df2e:	7a1b      	ldrb	r3, [r3, #8]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d002      	beq.n	800df3a <EnabledConnectedDevices+0x9a>
    Sensor.VOC_measurementEnabled = true;
 800df34:	4b12      	ldr	r3, [pc, #72]	@ (800df80 <EnabledConnectedDevices+0xe0>)
 800df36:	2201      	movs	r2, #1
 800df38:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 800df3a:	4b10      	ldr	r3, [pc, #64]	@ (800df7c <EnabledConnectedDevices+0xdc>)
 800df3c:	795b      	ldrb	r3, [r3, #5]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d002      	beq.n	800df48 <EnabledConnectedDevices+0xa8>
    Sensor.PM_measurementEnabled = true;
 800df42:	4b0f      	ldr	r3, [pc, #60]	@ (800df80 <EnabledConnectedDevices+0xe0>)
 800df44:	2201      	movs	r2, #1
 800df46:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 800df48:	4b0c      	ldr	r3, [pc, #48]	@ (800df7c <EnabledConnectedDevices+0xdc>)
 800df4a:	799b      	ldrb	r3, [r3, #6]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d002      	beq.n	800df56 <EnabledConnectedDevices+0xb6>
    Sensor.MIC_measurementEnabled = true;
 800df50:	4b0b      	ldr	r3, [pc, #44]	@ (800df80 <EnabledConnectedDevices+0xe0>)
 800df52:	2201      	movs	r2, #1
 800df54:	70da      	strb	r2, [r3, #3]
  }
  deviceTimeOut = HAL_GetTick() + 1200000;
 800df56:	f006 fdf5 	bl	8014b44 <HAL_GetTick>
 800df5a:	0003      	movs	r3, r0
 800df5c:	4a0e      	ldr	r2, [pc, #56]	@ (800df98 <EnabledConnectedDevices+0xf8>)
 800df5e:	189a      	adds	r2, r3, r2
 800df60:	4b0e      	ldr	r3, [pc, #56]	@ (800df9c <EnabledConnectedDevices+0xfc>)
 800df62:	601a      	str	r2, [r3, #0]
  sensorsdisablereq = false;
 800df64:	4b0e      	ldr	r3, [pc, #56]	@ (800dfa0 <EnabledConnectedDevices+0x100>)
 800df66:	2200      	movs	r2, #0
 800df68:	701a      	strb	r2, [r3, #0]
  Debug("Sensors enabled");
 800df6a:	4a0e      	ldr	r2, [pc, #56]	@ (800dfa4 <EnabledConnectedDevices+0x104>)
 800df6c:	4b0e      	ldr	r3, [pc, #56]	@ (800dfa8 <EnabledConnectedDevices+0x108>)
 800df6e:	0019      	movs	r1, r3
 800df70:	2003      	movs	r0, #3
 800df72:	f006 f86f 	bl	8014054 <CreateLine>
}
 800df76:	46c0      	nop			@ (mov r8, r8)
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	200010d4 	.word	0x200010d4
 800df80:	200010cc 	.word	0x200010cc
 800df84:	2000009f 	.word	0x2000009f
 800df88:	0802d5cc 	.word	0x0802d5cc
 800df8c:	0802d308 	.word	0x0802d308
 800df90:	200000a2 	.word	0x200000a2
 800df94:	0802d5e8 	.word	0x0802d5e8
 800df98:	00124f80 	.word	0x00124f80
 800df9c:	200010c4 	.word	0x200010c4
 800dfa0:	200010e3 	.word	0x200010e3
 800dfa4:	0802d604 	.word	0x0802d604
 800dfa8:	0802d14c 	.word	0x0802d14c

0800dfac <DisableConnectedDevices>:

void DisableConnectedDevices() {
 800dfac:	b580      	push	{r7, lr}
 800dfae:	af00      	add	r7, sp, #0
  Sensor.HT_measurementEnabled = false;
 800dfb0:	4b0e      	ldr	r3, [pc, #56]	@ (800dfec <DisableConnectedDevices+0x40>)
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = false;
 800dfb6:	4b0d      	ldr	r3, [pc, #52]	@ (800dfec <DisableConnectedDevices+0x40>)
 800dfb8:	2200      	movs	r2, #0
 800dfba:	705a      	strb	r2, [r3, #1]
  Sensor.AHT_measurementEnabled = false;
 800dfbc:	4b0b      	ldr	r3, [pc, #44]	@ (800dfec <DisableConnectedDevices+0x40>)
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	711a      	strb	r2, [r3, #4]
  Sensor.BMP_measurementEnabled = false;
 800dfc2:	4b0a      	ldr	r3, [pc, #40]	@ (800dfec <DisableConnectedDevices+0x40>)
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	715a      	strb	r2, [r3, #5]
  Sensor.ENS_measurementEnabled = false;
 800dfc8:	4b08      	ldr	r3, [pc, #32]	@ (800dfec <DisableConnectedDevices+0x40>)
 800dfca:	2200      	movs	r2, #0
 800dfcc:	719a      	strb	r2, [r3, #6]
  Sensor.PM_measurementEnabled = false;
 800dfce:	4b07      	ldr	r3, [pc, #28]	@ (800dfec <DisableConnectedDevices+0x40>)
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	709a      	strb	r2, [r3, #2]
  Sensor.MIC_measurementEnabled = false;
 800dfd4:	4b05      	ldr	r3, [pc, #20]	@ (800dfec <DisableConnectedDevices+0x40>)
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	70da      	strb	r2, [r3, #3]
  Debug("Sensors disabled");
 800dfda:	4a05      	ldr	r2, [pc, #20]	@ (800dff0 <DisableConnectedDevices+0x44>)
 800dfdc:	4b05      	ldr	r3, [pc, #20]	@ (800dff4 <DisableConnectedDevices+0x48>)
 800dfde:	0019      	movs	r1, r3
 800dfe0:	2003      	movs	r0, #3
 800dfe2:	f006 f837 	bl	8014054 <CreateLine>
}
 800dfe6:	46c0      	nop			@ (mov r8, r8)
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	200010cc 	.word	0x200010cc
 800dff0:	0802d614 	.word	0x0802d614
 800dff4:	0802d14c 	.word	0x0802d14c

0800dff8 <setSensorLock>:

void setSensorLock(uint8_t sensor) {
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	0002      	movs	r2, r0
 800e000:	1dfb      	adds	r3, r7, #7
 800e002:	701a      	strb	r2, [r3, #0]
  SensorHasLock = sensor;
 800e004:	4b05      	ldr	r3, [pc, #20]	@ (800e01c <setSensorLock+0x24>)
 800e006:	1dfa      	adds	r2, r7, #7
 800e008:	7812      	ldrb	r2, [r2, #0]
 800e00a:	701a      	strb	r2, [r3, #0]
  HAL_Delay(10); // be sure the DMA of the previous has completed
 800e00c:	200a      	movs	r0, #10
 800e00e:	f006 fda3 	bl	8014b58 <HAL_Delay>
}
 800e012:	46c0      	nop			@ (mov r8, r8)
 800e014:	46bd      	mov	sp, r7
 800e016:	b002      	add	sp, #8
 800e018:	bd80      	pop	{r7, pc}
 800e01a:	46c0      	nop			@ (mov r8, r8)
 800e01c:	200010dd 	.word	0x200010dd

0800e020 <getSensorLock>:

uint8_t getSensorLock() {
 800e020:	b580      	push	{r7, lr}
 800e022:	af00      	add	r7, sp, #0
  return SensorHasLock;
 800e024:	4b02      	ldr	r3, [pc, #8]	@ (800e030 <getSensorLock+0x10>)
 800e026:	781b      	ldrb	r3, [r3, #0]
}
 800e028:	0018      	movs	r0, r3
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	46c0      	nop			@ (mov r8, r8)
 800e030:	200010dd 	.word	0x200010dd

0800e034 <UpkeepI2Csensors>:

void UpkeepI2Csensors() {
 800e034:	b580      	push	{r7, lr}
 800e036:	af00      	add	r7, sp, #0
//  Debug("Upkeep I2C Sensors");
  if (Sensor.HT_measurementEnabled) {
 800e038:	4b1a      	ldr	r3, [pc, #104]	@ (800e0a4 <UpkeepI2Csensors+0x70>)
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d005      	beq.n	800e04c <UpkeepI2Csensors+0x18>
    HIDSstate = HIDS_Upkeep();
 800e040:	f006 fbfe 	bl	8014840 <HIDS_Upkeep>
 800e044:	0003      	movs	r3, r0
 800e046:	001a      	movs	r2, r3
 800e048:	4b17      	ldr	r3, [pc, #92]	@ (800e0a8 <UpkeepI2Csensors+0x74>)
 800e04a:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.VOC_measurementEnabled) {
 800e04c:	4b15      	ldr	r3, [pc, #84]	@ (800e0a4 <UpkeepI2Csensors+0x70>)
 800e04e:	785b      	ldrb	r3, [r3, #1]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d005      	beq.n	800e060 <UpkeepI2Csensors+0x2c>
    SGPstate = SGP_Upkeep();
 800e054:	f003 fb9e 	bl	8011794 <SGP_Upkeep>
 800e058:	0003      	movs	r3, r0
 800e05a:	001a      	movs	r2, r3
 800e05c:	4b13      	ldr	r3, [pc, #76]	@ (800e0ac <UpkeepI2Csensors+0x78>)
 800e05e:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.AHT_measurementEnabled) {
 800e060:	4b10      	ldr	r3, [pc, #64]	@ (800e0a4 <UpkeepI2Csensors+0x70>)
 800e062:	791b      	ldrb	r3, [r3, #4]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d005      	beq.n	800e074 <UpkeepI2Csensors+0x40>
    AHTstate = AHT_Upkeep();
 800e068:	f7fd f990 	bl	800b38c <AHT_Upkeep>
 800e06c:	0003      	movs	r3, r0
 800e06e:	001a      	movs	r2, r3
 800e070:	4b0f      	ldr	r3, [pc, #60]	@ (800e0b0 <UpkeepI2Csensors+0x7c>)
 800e072:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.BMP_measurementEnabled) {
 800e074:	4b0b      	ldr	r3, [pc, #44]	@ (800e0a4 <UpkeepI2Csensors+0x70>)
 800e076:	795b      	ldrb	r3, [r3, #5]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d005      	beq.n	800e088 <UpkeepI2Csensors+0x54>
    BMPstate = BMP_Upkeep();
 800e07c:	f7fd ff38 	bl	800bef0 <BMP_Upkeep>
 800e080:	0003      	movs	r3, r0
 800e082:	001a      	movs	r2, r3
 800e084:	4b0b      	ldr	r3, [pc, #44]	@ (800e0b4 <UpkeepI2Csensors+0x80>)
 800e086:	701a      	strb	r2, [r3, #0]
  }
  if (Sensor.ENS_measurementEnabled) {
 800e088:	4b06      	ldr	r3, [pc, #24]	@ (800e0a4 <UpkeepI2Csensors+0x70>)
 800e08a:	799b      	ldrb	r3, [r3, #6]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d005      	beq.n	800e09c <UpkeepI2Csensors+0x68>
    ENSstate = ENS_Upkeep();
 800e090:	f7f6 f9e2 	bl	8004458 <ENS_Upkeep>
 800e094:	0003      	movs	r3, r0
 800e096:	001a      	movs	r2, r3
 800e098:	4b07      	ldr	r3, [pc, #28]	@ (800e0b8 <UpkeepI2Csensors+0x84>)
 800e09a:	701a      	strb	r2, [r3, #0]
  }
}
 800e09c:	46c0      	nop			@ (mov r8, r8)
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
 800e0a2:	46c0      	nop			@ (mov r8, r8)
 800e0a4:	200010cc 	.word	0x200010cc
 800e0a8:	200010df 	.word	0x200010df
 800e0ac:	200010de 	.word	0x200010de
 800e0b0:	200010e0 	.word	0x200010e0
 800e0b4:	200010e1 	.word	0x200010e1
 800e0b8:	200010e2 	.word	0x200010e2

0800e0bc <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 800e0c0:	4b02      	ldr	r3, [pc, #8]	@ (800e0cc <ResetdBAmax+0x10>)
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	601a      	str	r2, [r3, #0]
}
 800e0c6:	46c0      	nop			@ (mov r8, r8)
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	2000112c 	.word	0x2000112c

0800e0d0 <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 800e0d8:	f006 fd34 	bl	8014b44 <HAL_GetTick>
 800e0dc:	0002      	movs	r2, r0
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	18d2      	adds	r2, r2, r3
 800e0e2:	4b03      	ldr	r3, [pc, #12]	@ (800e0f0 <setMICTimeStamp+0x20>)
 800e0e4:	601a      	str	r2, [r3, #0]
}
 800e0e6:	46c0      	nop			@ (mov r8, r8)
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	b002      	add	sp, #8
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	46c0      	nop			@ (mov r8, r8)
 800e0f0:	20001134 	.word	0x20001134

0800e0f4 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	af00      	add	r7, sp, #0
  counter = 0;
 800e0f8:	4b05      	ldr	r3, [pc, #20]	@ (800e110 <ResetDBACalculator+0x1c>)
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800e0fe:	4b05      	ldr	r3, [pc, #20]	@ (800e114 <ResetDBACalculator+0x20>)
 800e100:	2201      	movs	r2, #1
 800e102:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 800e104:	4b04      	ldr	r3, [pc, #16]	@ (800e118 <ResetDBACalculator+0x24>)
 800e106:	2200      	movs	r2, #0
 800e108:	701a      	strb	r2, [r3, #0]
}
 800e10a:	46c0      	nop			@ (mov r8, r8)
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}
 800e110:	20001130 	.word	0x20001130
 800e114:	200000a9 	.word	0x200000a9
 800e118:	20001131 	.word	0x20001131

0800e11c <MIC_Print>:

void MIC_Print(void) {
 800e11c:	b5b0      	push	{r4, r5, r7, lr}
 800e11e:	b08c      	sub	sp, #48	@ 0x30
 800e120:	af08      	add	r7, sp, #32
  dBA = dBValue; // dBValue is the actual sample
 800e122:	4ba1      	ldr	r3, [pc, #644]	@ (800e3a8 <MIC_Print+0x28c>)
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	4ba1      	ldr	r3, [pc, #644]	@ (800e3ac <MIC_Print+0x290>)
 800e128:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 800e12a:	4ba1      	ldr	r3, [pc, #644]	@ (800e3b0 <MIC_Print+0x294>)
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	001a      	movs	r2, r3
 800e130:	4b9e      	ldr	r3, [pc, #632]	@ (800e3ac <MIC_Print+0x290>)
 800e132:	6819      	ldr	r1, [r3, #0]
 800e134:	4b9f      	ldr	r3, [pc, #636]	@ (800e3b4 <MIC_Print+0x298>)
 800e136:	0092      	lsls	r2, r2, #2
 800e138:	50d1      	str	r1, [r2, r3]
  counter++;
 800e13a:	4b9d      	ldr	r3, [pc, #628]	@ (800e3b0 <MIC_Print+0x294>)
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	3301      	adds	r3, #1
 800e140:	b2da      	uxtb	r2, r3
 800e142:	4b9b      	ldr	r3, [pc, #620]	@ (800e3b0 <MIC_Print+0x294>)
 800e144:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 800e146:	4b9a      	ldr	r3, [pc, #616]	@ (800e3b0 <MIC_Print+0x294>)
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	2b09      	cmp	r3, #9
 800e14c:	d80b      	bhi.n	800e166 <MIC_Print+0x4a>
 800e14e:	4b9a      	ldr	r3, [pc, #616]	@ (800e3b8 <MIC_Print+0x29c>)
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	2201      	movs	r2, #1
 800e154:	4053      	eors	r3, r2
 800e156:	b2db      	uxtb	r3, r3
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d004      	beq.n	800e166 <MIC_Print+0x4a>
    denominator = counter;
 800e15c:	4b94      	ldr	r3, [pc, #592]	@ (800e3b0 <MIC_Print+0x294>)
 800e15e:	781a      	ldrb	r2, [r3, #0]
 800e160:	4b96      	ldr	r3, [pc, #600]	@ (800e3bc <MIC_Print+0x2a0>)
 800e162:	701a      	strb	r2, [r3, #0]
 800e164:	e005      	b.n	800e172 <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 800e166:	4b95      	ldr	r3, [pc, #596]	@ (800e3bc <MIC_Print+0x2a0>)
 800e168:	220a      	movs	r2, #10
 800e16a:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 800e16c:	4b92      	ldr	r3, [pc, #584]	@ (800e3b8 <MIC_Print+0x29c>)
 800e16e:	2201      	movs	r2, #1
 800e170:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800e172:	4b93      	ldr	r3, [pc, #588]	@ (800e3c0 <MIC_Print+0x2a4>)
 800e174:	2200      	movs	r2, #0
 800e176:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 800e178:	230f      	movs	r3, #15
 800e17a:	18fb      	adds	r3, r7, r3
 800e17c:	2200      	movs	r2, #0
 800e17e:	701a      	strb	r2, [r3, #0]
 800e180:	e042      	b.n	800e208 <MIC_Print+0xec>
    dBAsum += dBASamples[i];
 800e182:	240f      	movs	r4, #15
 800e184:	193b      	adds	r3, r7, r4
 800e186:	781a      	ldrb	r2, [r3, #0]
 800e188:	4b8a      	ldr	r3, [pc, #552]	@ (800e3b4 <MIC_Print+0x298>)
 800e18a:	0092      	lsls	r2, r2, #2
 800e18c:	58d2      	ldr	r2, [r2, r3]
 800e18e:	4b8c      	ldr	r3, [pc, #560]	@ (800e3c0 <MIC_Print+0x2a4>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	1c19      	adds	r1, r3, #0
 800e194:	1c10      	adds	r0, r2, #0
 800e196:	f7f2 fb93 	bl	80008c0 <__aeabi_fadd>
 800e19a:	1c03      	adds	r3, r0, #0
 800e19c:	1c1a      	adds	r2, r3, #0
 800e19e:	4b88      	ldr	r3, [pc, #544]	@ (800e3c0 <MIC_Print+0x2a4>)
 800e1a0:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 800e1a2:	193b      	adds	r3, r7, r4
 800e1a4:	781a      	ldrb	r2, [r3, #0]
 800e1a6:	4b83      	ldr	r3, [pc, #524]	@ (800e3b4 <MIC_Print+0x298>)
 800e1a8:	0092      	lsls	r2, r2, #2
 800e1aa:	58d2      	ldr	r2, [r2, r3]
 800e1ac:	4b85      	ldr	r3, [pc, #532]	@ (800e3c4 <MIC_Print+0x2a8>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	1c19      	adds	r1, r3, #0
 800e1b2:	1c10      	adds	r0, r2, #0
 800e1b4:	f7f2 f9d0 	bl	8000558 <__aeabi_fcmpgt>
 800e1b8:	1e03      	subs	r3, r0, #0
 800e1ba:	d006      	beq.n	800e1ca <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 800e1bc:	193b      	adds	r3, r7, r4
 800e1be:	781a      	ldrb	r2, [r3, #0]
 800e1c0:	4b7c      	ldr	r3, [pc, #496]	@ (800e3b4 <MIC_Print+0x298>)
 800e1c2:	0092      	lsls	r2, r2, #2
 800e1c4:	58d2      	ldr	r2, [r2, r3]
 800e1c6:	4b7f      	ldr	r3, [pc, #508]	@ (800e3c4 <MIC_Print+0x2a8>)
 800e1c8:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 800e1ca:	4b7d      	ldr	r3, [pc, #500]	@ (800e3c0 <MIC_Print+0x2a4>)
 800e1cc:	681c      	ldr	r4, [r3, #0]
 800e1ce:	4b7b      	ldr	r3, [pc, #492]	@ (800e3bc <MIC_Print+0x2a0>)
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	0018      	movs	r0, r3
 800e1d4:	f7f3 fb78 	bl	80018c8 <__aeabi_ui2f>
 800e1d8:	1c03      	adds	r3, r0, #0
 800e1da:	1c19      	adds	r1, r3, #0
 800e1dc:	1c20      	adds	r0, r4, #0
 800e1de:	f7f2 fd61 	bl	8000ca4 <__aeabi_fdiv>
 800e1e2:	1c03      	adds	r3, r0, #0
 800e1e4:	1c1a      	adds	r2, r3, #0
 800e1e6:	4b78      	ldr	r3, [pc, #480]	@ (800e3c8 <MIC_Print+0x2ac>)
 800e1e8:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBA, dBAmax, dBAAverage); // first parameter is uploaded to opensensemap.org others are stored in structure
 800e1ea:	4b70      	ldr	r3, [pc, #448]	@ (800e3ac <MIC_Print+0x290>)
 800e1ec:	6818      	ldr	r0, [r3, #0]
 800e1ee:	4b75      	ldr	r3, [pc, #468]	@ (800e3c4 <MIC_Print+0x2a8>)
 800e1f0:	6819      	ldr	r1, [r3, #0]
 800e1f2:	4b75      	ldr	r3, [pc, #468]	@ (800e3c8 <MIC_Print+0x2ac>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	1c1a      	adds	r2, r3, #0
 800e1f8:	f7f6 fcf6 	bl	8004be8 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 800e1fc:	210f      	movs	r1, #15
 800e1fe:	187b      	adds	r3, r7, r1
 800e200:	781a      	ldrb	r2, [r3, #0]
 800e202:	187b      	adds	r3, r7, r1
 800e204:	3201      	adds	r2, #1
 800e206:	701a      	strb	r2, [r3, #0]
 800e208:	4b6c      	ldr	r3, [pc, #432]	@ (800e3bc <MIC_Print+0x2a0>)
 800e20a:	781b      	ldrb	r3, [r3, #0]
 800e20c:	220f      	movs	r2, #15
 800e20e:	18ba      	adds	r2, r7, r2
 800e210:	7812      	ldrb	r2, [r2, #0]
 800e212:	429a      	cmp	r2, r3
 800e214:	d3b5      	bcc.n	800e182 <MIC_Print+0x66>
  }
  Info("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f", dBA,mPabuffer, dBAmax, dBAAverage);
 800e216:	4b65      	ldr	r3, [pc, #404]	@ (800e3ac <MIC_Print+0x290>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	1c18      	adds	r0, r3, #0
 800e21c:	f7f5 fb3a 	bl	8003894 <__aeabi_f2d>
 800e220:	0004      	movs	r4, r0
 800e222:	000d      	movs	r5, r1
 800e224:	4b67      	ldr	r3, [pc, #412]	@ (800e3c4 <MIC_Print+0x2a8>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	1c18      	adds	r0, r3, #0
 800e22a:	f7f5 fb33 	bl	8003894 <__aeabi_f2d>
 800e22e:	6038      	str	r0, [r7, #0]
 800e230:	6079      	str	r1, [r7, #4]
 800e232:	4b65      	ldr	r3, [pc, #404]	@ (800e3c8 <MIC_Print+0x2ac>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	1c18      	adds	r0, r3, #0
 800e238:	f7f5 fb2c 	bl	8003894 <__aeabi_f2d>
 800e23c:	0002      	movs	r2, r0
 800e23e:	000b      	movs	r3, r1
 800e240:	4862      	ldr	r0, [pc, #392]	@ (800e3cc <MIC_Print+0x2b0>)
 800e242:	4963      	ldr	r1, [pc, #396]	@ (800e3d0 <MIC_Print+0x2b4>)
 800e244:	9206      	str	r2, [sp, #24]
 800e246:	9307      	str	r3, [sp, #28]
 800e248:	683a      	ldr	r2, [r7, #0]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	9204      	str	r2, [sp, #16]
 800e24e:	9305      	str	r3, [sp, #20]
 800e250:	4b60      	ldr	r3, [pc, #384]	@ (800e3d4 <MIC_Print+0x2b8>)
 800e252:	9302      	str	r3, [sp, #8]
 800e254:	9400      	str	r4, [sp, #0]
 800e256:	9501      	str	r5, [sp, #4]
 800e258:	0002      	movs	r2, r0
 800e25a:	2002      	movs	r0, #2
 800e25c:	f005 fefa 	bl	8014054 <CreateLine>

  if(counter > NUMBER_OF_SAMPLES){
 800e260:	4b53      	ldr	r3, [pc, #332]	@ (800e3b0 <MIC_Print+0x294>)
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	2b0a      	cmp	r3, #10
 800e266:	d902      	bls.n	800e26e <MIC_Print+0x152>
    counter = 0;
 800e268:	4b51      	ldr	r3, [pc, #324]	@ (800e3b0 <MIC_Print+0x294>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 800e26e:	4b4f      	ldr	r3, [pc, #316]	@ (800e3ac <MIC_Print+0x290>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4959      	ldr	r1, [pc, #356]	@ (800e3d8 <MIC_Print+0x2bc>)
 800e274:	1c18      	adds	r0, r3, #0
 800e276:	f7f2 f979 	bl	800056c <__aeabi_fcmpge>
 800e27a:	1e03      	subs	r3, r0, #0
 800e27c:	d004      	beq.n	800e288 <MIC_Print+0x16c>
    SetDBLED(true, true, true);
 800e27e:	2201      	movs	r2, #1
 800e280:	2101      	movs	r1, #1
 800e282:	2001      	movs	r0, #1
 800e284:	f004 fbba 	bl	80129fc <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 800e288:	4b48      	ldr	r3, [pc, #288]	@ (800e3ac <MIC_Print+0x290>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4953      	ldr	r1, [pc, #332]	@ (800e3dc <MIC_Print+0x2c0>)
 800e28e:	1c18      	adds	r0, r3, #0
 800e290:	f7f2 f96c 	bl	800056c <__aeabi_fcmpge>
 800e294:	1e03      	subs	r3, r0, #0
 800e296:	d00c      	beq.n	800e2b2 <MIC_Print+0x196>
 800e298:	4b44      	ldr	r3, [pc, #272]	@ (800e3ac <MIC_Print+0x290>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	494e      	ldr	r1, [pc, #312]	@ (800e3d8 <MIC_Print+0x2bc>)
 800e29e:	1c18      	adds	r0, r3, #0
 800e2a0:	f7f2 f946 	bl	8000530 <__aeabi_fcmplt>
 800e2a4:	1e03      	subs	r3, r0, #0
 800e2a6:	d004      	beq.n	800e2b2 <MIC_Print+0x196>
    SetDBLED(true, false, false);
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	2001      	movs	r0, #1
 800e2ae:	f004 fba5 	bl	80129fc <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 800e2b2:	4b3e      	ldr	r3, [pc, #248]	@ (800e3ac <MIC_Print+0x290>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	494a      	ldr	r1, [pc, #296]	@ (800e3e0 <MIC_Print+0x2c4>)
 800e2b8:	1c18      	adds	r0, r3, #0
 800e2ba:	f7f2 f957 	bl	800056c <__aeabi_fcmpge>
 800e2be:	1e03      	subs	r3, r0, #0
 800e2c0:	d00c      	beq.n	800e2dc <MIC_Print+0x1c0>
 800e2c2:	4b3a      	ldr	r3, [pc, #232]	@ (800e3ac <MIC_Print+0x290>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	4945      	ldr	r1, [pc, #276]	@ (800e3dc <MIC_Print+0x2c0>)
 800e2c8:	1c18      	adds	r0, r3, #0
 800e2ca:	f7f2 f931 	bl	8000530 <__aeabi_fcmplt>
 800e2ce:	1e03      	subs	r3, r0, #0
 800e2d0:	d004      	beq.n	800e2dc <MIC_Print+0x1c0>
    SetDBLED(true, true, false);
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	2101      	movs	r1, #1
 800e2d6:	2001      	movs	r0, #1
 800e2d8:	f004 fb90 	bl	80129fc <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 800e2dc:	4b33      	ldr	r3, [pc, #204]	@ (800e3ac <MIC_Print+0x290>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4940      	ldr	r1, [pc, #256]	@ (800e3e4 <MIC_Print+0x2c8>)
 800e2e2:	1c18      	adds	r0, r3, #0
 800e2e4:	f7f2 f942 	bl	800056c <__aeabi_fcmpge>
 800e2e8:	1e03      	subs	r3, r0, #0
 800e2ea:	d00c      	beq.n	800e306 <MIC_Print+0x1ea>
 800e2ec:	4b2f      	ldr	r3, [pc, #188]	@ (800e3ac <MIC_Print+0x290>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	493b      	ldr	r1, [pc, #236]	@ (800e3e0 <MIC_Print+0x2c4>)
 800e2f2:	1c18      	adds	r0, r3, #0
 800e2f4:	f7f2 f91c 	bl	8000530 <__aeabi_fcmplt>
 800e2f8:	1e03      	subs	r3, r0, #0
 800e2fa:	d004      	beq.n	800e306 <MIC_Print+0x1ea>
    SetDBLED(false, true, false);
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	2101      	movs	r1, #1
 800e300:	2000      	movs	r0, #0
 800e302:	f004 fb7b 	bl	80129fc <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 800e306:	4b29      	ldr	r3, [pc, #164]	@ (800e3ac <MIC_Print+0x290>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4937      	ldr	r1, [pc, #220]	@ (800e3e8 <MIC_Print+0x2cc>)
 800e30c:	1c18      	adds	r0, r3, #0
 800e30e:	f7f2 f92d 	bl	800056c <__aeabi_fcmpge>
 800e312:	1e03      	subs	r3, r0, #0
 800e314:	d00c      	beq.n	800e330 <MIC_Print+0x214>
 800e316:	4b25      	ldr	r3, [pc, #148]	@ (800e3ac <MIC_Print+0x290>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	4932      	ldr	r1, [pc, #200]	@ (800e3e4 <MIC_Print+0x2c8>)
 800e31c:	1c18      	adds	r0, r3, #0
 800e31e:	f7f2 f907 	bl	8000530 <__aeabi_fcmplt>
 800e322:	1e03      	subs	r3, r0, #0
 800e324:	d004      	beq.n	800e330 <MIC_Print+0x214>
    SetDBLED(false, true, true);
 800e326:	2201      	movs	r2, #1
 800e328:	2101      	movs	r1, #1
 800e32a:	2000      	movs	r0, #0
 800e32c:	f004 fb66 	bl	80129fc <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 800e330:	4b1e      	ldr	r3, [pc, #120]	@ (800e3ac <MIC_Print+0x290>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	492d      	ldr	r1, [pc, #180]	@ (800e3ec <MIC_Print+0x2d0>)
 800e336:	1c18      	adds	r0, r3, #0
 800e338:	f7f2 f918 	bl	800056c <__aeabi_fcmpge>
 800e33c:	1e03      	subs	r3, r0, #0
 800e33e:	d00c      	beq.n	800e35a <MIC_Print+0x23e>
 800e340:	4b1a      	ldr	r3, [pc, #104]	@ (800e3ac <MIC_Print+0x290>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4928      	ldr	r1, [pc, #160]	@ (800e3e8 <MIC_Print+0x2cc>)
 800e346:	1c18      	adds	r0, r3, #0
 800e348:	f7f2 f8f2 	bl	8000530 <__aeabi_fcmplt>
 800e34c:	1e03      	subs	r3, r0, #0
 800e34e:	d004      	beq.n	800e35a <MIC_Print+0x23e>
    SetDBLED(false, false, true);
 800e350:	2201      	movs	r2, #1
 800e352:	2100      	movs	r1, #0
 800e354:	2000      	movs	r0, #0
 800e356:	f004 fb51 	bl	80129fc <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 800e35a:	4b14      	ldr	r3, [pc, #80]	@ (800e3ac <MIC_Print+0x290>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4924      	ldr	r1, [pc, #144]	@ (800e3f0 <MIC_Print+0x2d4>)
 800e360:	1c18      	adds	r0, r3, #0
 800e362:	f7f2 f903 	bl	800056c <__aeabi_fcmpge>
 800e366:	1e03      	subs	r3, r0, #0
 800e368:	d00c      	beq.n	800e384 <MIC_Print+0x268>
 800e36a:	4b10      	ldr	r3, [pc, #64]	@ (800e3ac <MIC_Print+0x290>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	491f      	ldr	r1, [pc, #124]	@ (800e3ec <MIC_Print+0x2d0>)
 800e370:	1c18      	adds	r0, r3, #0
 800e372:	f7f2 f8dd 	bl	8000530 <__aeabi_fcmplt>
 800e376:	1e03      	subs	r3, r0, #0
 800e378:	d004      	beq.n	800e384 <MIC_Print+0x268>
    SetDBLED(true, false, true);
 800e37a:	2201      	movs	r2, #1
 800e37c:	2100      	movs	r1, #0
 800e37e:	2001      	movs	r0, #1
 800e380:	f004 fb3c 	bl	80129fc <SetDBLED>
  }
  if(dBA < 35){//off
 800e384:	4b09      	ldr	r3, [pc, #36]	@ (800e3ac <MIC_Print+0x290>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4919      	ldr	r1, [pc, #100]	@ (800e3f0 <MIC_Print+0x2d4>)
 800e38a:	1c18      	adds	r0, r3, #0
 800e38c:	f7f2 f8d0 	bl	8000530 <__aeabi_fcmplt>
 800e390:	1e03      	subs	r3, r0, #0
 800e392:	d100      	bne.n	800e396 <MIC_Print+0x27a>
    SetDBLED(false, false, false);
  }
}
 800e394:	e004      	b.n	800e3a0 <MIC_Print+0x284>
    SetDBLED(false, false, false);
 800e396:	2200      	movs	r2, #0
 800e398:	2100      	movs	r1, #0
 800e39a:	2000      	movs	r0, #0
 800e39c:	f004 fb2e 	bl	80129fc <SetDBLED>
}
 800e3a0:	46c0      	nop			@ (mov r8, r8)
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	b004      	add	sp, #16
 800e3a6:	bdb0      	pop	{r4, r5, r7, pc}
 800e3a8:	20001128 	.word	0x20001128
 800e3ac:	200010f4 	.word	0x200010f4
 800e3b0:	20001130 	.word	0x20001130
 800e3b4:	200010f8 	.word	0x200010f8
 800e3b8:	20001131 	.word	0x20001131
 800e3bc:	200000a9 	.word	0x200000a9
 800e3c0:	20001124 	.word	0x20001124
 800e3c4:	2000112c 	.word	0x2000112c
 800e3c8:	20001120 	.word	0x20001120
 800e3cc:	0802d628 	.word	0x0802d628
 800e3d0:	0802d66c 	.word	0x0802d66c
 800e3d4:	200010e8 	.word	0x200010e8
 800e3d8:	42b40000 	.word	0x42b40000
 800e3dc:	42a00000 	.word	0x42a00000
 800e3e0:	428c0000 	.word	0x428c0000
 800e3e4:	42700000 	.word	0x42700000
 800e3e8:	42480000 	.word	0x42480000
 800e3ec:	42200000 	.word	0x42200000
 800e3f0:	420c0000 	.word	0x420c0000

0800e3f4 <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800e3fa:	4b11      	ldr	r3, [pc, #68]	@ (800e440 <MIC_TestMeasurementDone+0x4c>)
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	4a10      	ldr	r2, [pc, #64]	@ (800e444 <MIC_TestMeasurementDone+0x50>)
 800e402:	4911      	ldr	r1, [pc, #68]	@ (800e448 <MIC_TestMeasurementDone+0x54>)
 800e404:	2002      	movs	r0, #2
 800e406:	f005 fe25 	bl	8014054 <CreateLine>
  if(DataReady) {
 800e40a:	4b0d      	ldr	r3, [pc, #52]	@ (800e440 <MIC_TestMeasurementDone+0x4c>)
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	b2db      	uxtb	r3, r3
 800e410:	2b00      	cmp	r3, #0
 800e412:	d010      	beq.n	800e436 <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 800e414:	1dfb      	adds	r3, r7, #7
 800e416:	4a0d      	ldr	r2, [pc, #52]	@ (800e44c <MIC_TestMeasurementDone+0x58>)
 800e418:	7812      	ldrb	r2, [r2, #0]
 800e41a:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800e41c:	4b0b      	ldr	r3, [pc, #44]	@ (800e44c <MIC_TestMeasurementDone+0x58>)
 800e41e:	781b      	ldrb	r3, [r3, #0]
 800e420:	b2db      	uxtb	r3, r3
 800e422:	4a0b      	ldr	r2, [pc, #44]	@ (800e450 <MIC_TestMeasurementDone+0x5c>)
 800e424:	4908      	ldr	r1, [pc, #32]	@ (800e448 <MIC_TestMeasurementDone+0x54>)
 800e426:	2002      	movs	r0, #2
 800e428:	f005 fe14 	bl	8014054 <CreateLine>
    ResetMICIndicator();
 800e42c:	f004 fbd4 	bl	8012bd8 <ResetMICIndicator>
    return Check;
 800e430:	1dfb      	adds	r3, r7, #7
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	e000      	b.n	800e438 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800e436:	2300      	movs	r3, #0
}
 800e438:	0018      	movs	r0, r3
 800e43a:	46bd      	mov	sp, r7
 800e43c:	b002      	add	sp, #8
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	20001265 	.word	0x20001265
 800e444:	0802d670 	.word	0x0802d670
 800e448:	0802d66c 	.word	0x0802d66c
 800e44c:	20001266 	.word	0x20001266
 800e450:	0802d69c 	.word	0x0802d69c

0800e454 <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800e45a:	4b78      	ldr	r3, [pc, #480]	@ (800e63c <Mic_Upkeep+0x1e8>)
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	2b03      	cmp	r3, #3
 800e460:	d100      	bne.n	800e464 <Mic_Upkeep+0x10>
 800e462:	e0b8      	b.n	800e5d6 <Mic_Upkeep+0x182>
 800e464:	dd00      	ble.n	800e468 <Mic_Upkeep+0x14>
 800e466:	e0d3      	b.n	800e610 <Mic_Upkeep+0x1bc>
 800e468:	2b02      	cmp	r3, #2
 800e46a:	d037      	beq.n	800e4dc <Mic_Upkeep+0x88>
 800e46c:	dd00      	ble.n	800e470 <Mic_Upkeep+0x1c>
 800e46e:	e0cf      	b.n	800e610 <Mic_Upkeep+0x1bc>
 800e470:	2b00      	cmp	r3, #0
 800e472:	d002      	beq.n	800e47a <Mic_Upkeep+0x26>
 800e474:	2b01      	cmp	r3, #1
 800e476:	d014      	beq.n	800e4a2 <Mic_Upkeep+0x4e>
 800e478:	e0ca      	b.n	800e610 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 800e47a:	2001      	movs	r0, #1
 800e47c:	f003 fbb4 	bl	8011be8 <enableMicrophone>
 800e480:	0003      	movs	r3, r0
 800e482:	001a      	movs	r2, r3
 800e484:	2301      	movs	r3, #1
 800e486:	4053      	eors	r3, r2
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d005      	beq.n	800e49a <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 800e48e:	4a6c      	ldr	r2, [pc, #432]	@ (800e640 <Mic_Upkeep+0x1ec>)
 800e490:	4b6c      	ldr	r3, [pc, #432]	@ (800e644 <Mic_Upkeep+0x1f0>)
 800e492:	217f      	movs	r1, #127	@ 0x7f
 800e494:	0018      	movs	r0, r3
 800e496:	f005 fec5 	bl	8014224 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 800e49a:	4b68      	ldr	r3, [pc, #416]	@ (800e63c <Mic_Upkeep+0x1e8>)
 800e49c:	2201      	movs	r2, #1
 800e49e:	701a      	strb	r2, [r3, #0]
    break;
 800e4a0:	e0c5      	b.n	800e62e <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 800e4a2:	f003 fb7d 	bl	8011ba0 <micSettlingComplete>
 800e4a6:	1e03      	subs	r3, r0, #0
 800e4a8:	d105      	bne.n	800e4b6 <Mic_Upkeep+0x62>
 800e4aa:	4b67      	ldr	r3, [pc, #412]	@ (800e648 <Mic_Upkeep+0x1f4>)
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d100      	bne.n	800e4b6 <Mic_Upkeep+0x62>
 800e4b4:	e0b6      	b.n	800e624 <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 800e4b6:	f003 fc01 	bl	8011cbc <startSPLcalculation>
 800e4ba:	0003      	movs	r3, r0
 800e4bc:	001a      	movs	r2, r3
 800e4be:	2301      	movs	r3, #1
 800e4c0:	4053      	eors	r3, r2
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d005      	beq.n	800e4d4 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800e4c8:	4a5d      	ldr	r2, [pc, #372]	@ (800e640 <Mic_Upkeep+0x1ec>)
 800e4ca:	4b5e      	ldr	r3, [pc, #376]	@ (800e644 <Mic_Upkeep+0x1f0>)
 800e4cc:	2188      	movs	r1, #136	@ 0x88
 800e4ce:	0018      	movs	r0, r3
 800e4d0:	f005 fea8 	bl	8014224 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 800e4d4:	4b59      	ldr	r3, [pc, #356]	@ (800e63c <Mic_Upkeep+0x1e8>)
 800e4d6:	2202      	movs	r2, #2
 800e4d8:	701a      	strb	r2, [r3, #0]
    }
    break;
 800e4da:	e0a3      	b.n	800e624 <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800e4dc:	4b5b      	ldr	r3, [pc, #364]	@ (800e64c <Mic_Upkeep+0x1f8>)
 800e4de:	2201      	movs	r2, #1
 800e4e0:	2101      	movs	r1, #1
 800e4e2:	0018      	movs	r0, r3
 800e4e4:	f003 fa3e 	bl	8011964 <getSoundData>
 800e4e8:	1e03      	subs	r3, r0, #0
 800e4ea:	d100      	bne.n	800e4ee <Mic_Upkeep+0x9a>
 800e4ec:	e09c      	b.n	800e628 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 800e4ee:	f003 fb37 	bl	8011b60 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 800e4f2:	4b56      	ldr	r3, [pc, #344]	@ (800e64c <Mic_Upkeep+0x1f8>)
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	001a      	movs	r2, r3
 800e4f8:	4b54      	ldr	r3, [pc, #336]	@ (800e64c <Mic_Upkeep+0x1f8>)
 800e4fa:	785b      	ldrb	r3, [r3, #1]
 800e4fc:	4954      	ldr	r1, [pc, #336]	@ (800e650 <Mic_Upkeep+0x1fc>)
 800e4fe:	0038      	movs	r0, r7
 800e500:	f017 ff76 	bl	80263f0 <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 800e504:	4b51      	ldr	r3, [pc, #324]	@ (800e64c <Mic_Upkeep+0x1f8>)
 800e506:	89db      	ldrh	r3, [r3, #14]
 800e508:	001a      	movs	r2, r3
 800e50a:	4b50      	ldr	r3, [pc, #320]	@ (800e64c <Mic_Upkeep+0x1f8>)
 800e50c:	7c1b      	ldrb	r3, [r3, #16]
 800e50e:	4951      	ldr	r1, [pc, #324]	@ (800e654 <Mic_Upkeep+0x200>)
 800e510:	4851      	ldr	r0, [pc, #324]	@ (800e658 <Mic_Upkeep+0x204>)
 800e512:	f017 ff6d 	bl	80263f0 <siprintf>
      dBValue = atof(dBbuffer);
 800e516:	003b      	movs	r3, r7
 800e518:	0018      	movs	r0, r3
 800e51a:	f016 fb0f 	bl	8024b3c <atof>
 800e51e:	0002      	movs	r2, r0
 800e520:	000b      	movs	r3, r1
 800e522:	0010      	movs	r0, r2
 800e524:	0019      	movs	r1, r3
 800e526:	f7f5 f9fd 	bl	8003924 <__aeabi_d2f>
 800e52a:	1c02      	adds	r2, r0, #0
 800e52c:	4b4b      	ldr	r3, [pc, #300]	@ (800e65c <Mic_Upkeep+0x208>)
 800e52e:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 800e530:	4b4a      	ldr	r3, [pc, #296]	@ (800e65c <Mic_Upkeep+0x208>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	494a      	ldr	r1, [pc, #296]	@ (800e660 <Mic_Upkeep+0x20c>)
 800e536:	1c18      	adds	r0, r3, #0
 800e538:	f7f2 fd82 	bl	8001040 <__aeabi_fmul>
 800e53c:	1c03      	adds	r3, r0, #0
 800e53e:	1c18      	adds	r0, r3, #0
 800e540:	f7f5 f9a8 	bl	8003894 <__aeabi_f2d>
 800e544:	2200      	movs	r2, #0
 800e546:	4b47      	ldr	r3, [pc, #284]	@ (800e664 <Mic_Upkeep+0x210>)
 800e548:	f7f3 fa04 	bl	8001954 <__aeabi_dadd>
 800e54c:	0002      	movs	r2, r0
 800e54e:	000b      	movs	r3, r1
 800e550:	0010      	movs	r0, r2
 800e552:	0019      	movs	r1, r3
 800e554:	f7f5 f910 	bl	8003778 <__aeabi_d2iz>
 800e558:	0003      	movs	r3, r0
 800e55a:	0018      	movs	r0, r3
 800e55c:	f7f5 f948 	bl	80037f0 <__aeabi_i2d>
 800e560:	2200      	movs	r2, #0
 800e562:	4b41      	ldr	r3, [pc, #260]	@ (800e668 <Mic_Upkeep+0x214>)
 800e564:	f7f3 fdbc 	bl	80020e0 <__aeabi_ddiv>
 800e568:	0002      	movs	r2, r0
 800e56a:	000b      	movs	r3, r1
 800e56c:	0010      	movs	r0, r2
 800e56e:	0019      	movs	r1, r3
 800e570:	f7f5 f9d8 	bl	8003924 <__aeabi_d2f>
 800e574:	1c02      	adds	r2, r0, #0
 800e576:	4b39      	ldr	r3, [pc, #228]	@ (800e65c <Mic_Upkeep+0x208>)
 800e578:	601a      	str	r2, [r3, #0]
      MIC_Print();
 800e57a:	f7ff fdcf 	bl	800e11c <MIC_Print>
      if (!startSPLcalculation()) {
 800e57e:	f003 fb9d 	bl	8011cbc <startSPLcalculation>
 800e582:	0003      	movs	r3, r0
 800e584:	001a      	movs	r2, r3
 800e586:	2301      	movs	r3, #1
 800e588:	4053      	eors	r3, r2
 800e58a:	b2db      	uxtb	r3, r3
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d005      	beq.n	800e59c <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 800e590:	4a2b      	ldr	r2, [pc, #172]	@ (800e640 <Mic_Upkeep+0x1ec>)
 800e592:	4b2c      	ldr	r3, [pc, #176]	@ (800e644 <Mic_Upkeep+0x1f0>)
 800e594:	2198      	movs	r1, #152	@ 0x98
 800e596:	0018      	movs	r0, r3
 800e598:	f005 fe44 	bl	8014224 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 800e59c:	2000      	movs	r0, #0
 800e59e:	f003 fb23 	bl	8011be8 <enableMicrophone>
 800e5a2:	0003      	movs	r3, r0
 800e5a4:	001a      	movs	r2, r3
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	4053      	eors	r3, r2
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d005      	beq.n	800e5bc <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 800e5b0:	4a23      	ldr	r2, [pc, #140]	@ (800e640 <Mic_Upkeep+0x1ec>)
 800e5b2:	4b24      	ldr	r3, [pc, #144]	@ (800e644 <Mic_Upkeep+0x1f0>)
 800e5b4:	219b      	movs	r1, #155	@ 0x9b
 800e5b6:	0018      	movs	r0, r3
 800e5b8:	f005 fe34 	bl	8014224 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 800e5bc:	f006 fac2 	bl	8014b44 <HAL_GetTick>
 800e5c0:	0003      	movs	r3, r0
 800e5c2:	4a2a      	ldr	r2, [pc, #168]	@ (800e66c <Mic_Upkeep+0x218>)
 800e5c4:	189a      	adds	r2, r3, r2
 800e5c6:	4b2a      	ldr	r3, [pc, #168]	@ (800e670 <Mic_Upkeep+0x21c>)
 800e5c8:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800e5ca:	4b1c      	ldr	r3, [pc, #112]	@ (800e63c <Mic_Upkeep+0x1e8>)
 800e5cc:	2203      	movs	r2, #3
 800e5ce:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 800e5d0:	f004 fb02 	bl	8012bd8 <ResetMICIndicator>
    }
    break;
 800e5d4:	e028      	b.n	800e628 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 800e5d6:	4b26      	ldr	r3, [pc, #152]	@ (800e670 <Mic_Upkeep+0x21c>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	0018      	movs	r0, r3
 800e5dc:	f005 fce4 	bl	8013fa8 <TimestampIsReached>
 800e5e0:	1e03      	subs	r3, r0, #0
 800e5e2:	d023      	beq.n	800e62c <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 800e5e4:	2001      	movs	r0, #1
 800e5e6:	f003 faff 	bl	8011be8 <enableMicrophone>
 800e5ea:	0003      	movs	r3, r0
 800e5ec:	001a      	movs	r2, r3
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	4053      	eors	r3, r2
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d005      	beq.n	800e604 <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 800e5f8:	4a11      	ldr	r2, [pc, #68]	@ (800e640 <Mic_Upkeep+0x1ec>)
 800e5fa:	4b12      	ldr	r3, [pc, #72]	@ (800e644 <Mic_Upkeep+0x1f0>)
 800e5fc:	21a6      	movs	r1, #166	@ 0xa6
 800e5fe:	0018      	movs	r0, r3
 800e600:	f005 fe10 	bl	8014224 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 800e604:	4b0d      	ldr	r3, [pc, #52]	@ (800e63c <Mic_Upkeep+0x1e8>)
 800e606:	2201      	movs	r2, #1
 800e608:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 800e60a:	f004 faa3 	bl	8012b54 <SetMICIndicator>
    }
    break;
 800e60e:	e00d      	b.n	800e62c <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 800e610:	4a18      	ldr	r2, [pc, #96]	@ (800e674 <Mic_Upkeep+0x220>)
 800e612:	4b19      	ldr	r3, [pc, #100]	@ (800e678 <Mic_Upkeep+0x224>)
 800e614:	0019      	movs	r1, r3
 800e616:	2003      	movs	r0, #3
 800e618:	f005 fd1c 	bl	8014054 <CreateLine>
    MicState = MIC_STATE_INIT;
 800e61c:	4b07      	ldr	r3, [pc, #28]	@ (800e63c <Mic_Upkeep+0x1e8>)
 800e61e:	2200      	movs	r2, #0
 800e620:	701a      	strb	r2, [r3, #0]
    break;
 800e622:	e004      	b.n	800e62e <Mic_Upkeep+0x1da>
    break;
 800e624:	46c0      	nop			@ (mov r8, r8)
 800e626:	e002      	b.n	800e62e <Mic_Upkeep+0x1da>
    break;
 800e628:	46c0      	nop			@ (mov r8, r8)
 800e62a:	e000      	b.n	800e62e <Mic_Upkeep+0x1da>
    break;
 800e62c:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 800e62e:	4b03      	ldr	r3, [pc, #12]	@ (800e63c <Mic_Upkeep+0x1e8>)
 800e630:	781b      	ldrb	r3, [r3, #0]
}
 800e632:	0018      	movs	r0, r3
 800e634:	46bd      	mov	sp, r7
 800e636:	b002      	add	sp, #8
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	46c0      	nop			@ (mov r8, r8)
 800e63c:	2000114a 	.word	0x2000114a
 800e640:	0802d6b4 	.word	0x0802d6b4
 800e644:	0802e8a0 	.word	0x0802e8a0
 800e648:	20001265 	.word	0x20001265
 800e64c:	20001138 	.word	0x20001138
 800e650:	0802d6d0 	.word	0x0802d6d0
 800e654:	0802d6d8 	.word	0x0802d6d8
 800e658:	200010e8 	.word	0x200010e8
 800e65c:	20001128 	.word	0x20001128
 800e660:	42c80000 	.word	0x42c80000
 800e664:	3fe00000 	.word	0x3fe00000
 800e668:	40590000 	.word	0x40590000
 800e66c:	000002f3 	.word	0x000002f3
 800e670:	20001134 	.word	0x20001134
 800e674:	0802d6e0 	.word	0x0802d6e0
 800e678:	0802d700 	.word	0x0802d700

0800e67c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b086      	sub	sp, #24
 800e680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800e682:	1d3b      	adds	r3, r7, #4
 800e684:	0018      	movs	r0, r3
 800e686:	2314      	movs	r3, #20
 800e688:	001a      	movs	r2, r3
 800e68a:	2100      	movs	r1, #0
 800e68c:	f018 f81a 	bl	80266c4 <memset>
  RTC_DateTypeDef sDate = {0};
 800e690:	003b      	movs	r3, r7
 800e692:	2200      	movs	r2, #0
 800e694:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800e696:	4b2e      	ldr	r3, [pc, #184]	@ (800e750 <MX_RTC_Init+0xd4>)
 800e698:	4a2e      	ldr	r2, [pc, #184]	@ (800e754 <MX_RTC_Init+0xd8>)
 800e69a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800e69c:	4b2c      	ldr	r3, [pc, #176]	@ (800e750 <MX_RTC_Init+0xd4>)
 800e69e:	2200      	movs	r2, #0
 800e6a0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800e6a2:	4b2b      	ldr	r3, [pc, #172]	@ (800e750 <MX_RTC_Init+0xd4>)
 800e6a4:	227f      	movs	r2, #127	@ 0x7f
 800e6a6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800e6a8:	4b29      	ldr	r3, [pc, #164]	@ (800e750 <MX_RTC_Init+0xd4>)
 800e6aa:	22ff      	movs	r2, #255	@ 0xff
 800e6ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e6ae:	4b28      	ldr	r3, [pc, #160]	@ (800e750 <MX_RTC_Init+0xd4>)
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800e6b4:	4b26      	ldr	r3, [pc, #152]	@ (800e750 <MX_RTC_Init+0xd4>)
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e6ba:	4b25      	ldr	r3, [pc, #148]	@ (800e750 <MX_RTC_Init+0xd4>)
 800e6bc:	2200      	movs	r2, #0
 800e6be:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e6c0:	4b23      	ldr	r3, [pc, #140]	@ (800e750 <MX_RTC_Init+0xd4>)
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800e6c6:	4b22      	ldr	r3, [pc, #136]	@ (800e750 <MX_RTC_Init+0xd4>)
 800e6c8:	0018      	movs	r0, r3
 800e6ca:	f00d fdcb 	bl	801c264 <HAL_RTC_Init>
 800e6ce:	1e03      	subs	r3, r0, #0
 800e6d0:	d001      	beq.n	800e6d6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800e6d2:	f7fe ff77 	bl	800d5c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 800e6d6:	1d3b      	adds	r3, r7, #4
 800e6d8:	220d      	movs	r2, #13
 800e6da:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800e6dc:	1d3b      	adds	r3, r7, #4
 800e6de:	2200      	movs	r2, #0
 800e6e0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800e6e2:	1d3b      	adds	r3, r7, #4
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e6e8:	1d3b      	adds	r3, r7, #4
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800e6ee:	1d3b      	adds	r3, r7, #4
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800e6f4:	1d39      	adds	r1, r7, #4
 800e6f6:	4b16      	ldr	r3, [pc, #88]	@ (800e750 <MX_RTC_Init+0xd4>)
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	0018      	movs	r0, r3
 800e6fc:	f00d fe4e 	bl	801c39c <HAL_RTC_SetTime>
 800e700:	1e03      	subs	r3, r0, #0
 800e702:	d001      	beq.n	800e708 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800e704:	f7fe ff5e 	bl	800d5c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800e708:	003b      	movs	r3, r7
 800e70a:	2206      	movs	r2, #6
 800e70c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800e70e:	003b      	movs	r3, r7
 800e710:	2211      	movs	r2, #17
 800e712:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800e714:	003b      	movs	r3, r7
 800e716:	2217      	movs	r2, #23
 800e718:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800e71a:	003b      	movs	r3, r7
 800e71c:	2218      	movs	r2, #24
 800e71e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800e720:	0039      	movs	r1, r7
 800e722:	4b0b      	ldr	r3, [pc, #44]	@ (800e750 <MX_RTC_Init+0xd4>)
 800e724:	2200      	movs	r2, #0
 800e726:	0018      	movs	r0, r3
 800e728:	f00d ff40 	bl	801c5ac <HAL_RTC_SetDate>
 800e72c:	1e03      	subs	r3, r0, #0
 800e72e:	d001      	beq.n	800e734 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800e730:	f7fe ff48 	bl	800d5c4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800e734:	4b06      	ldr	r3, [pc, #24]	@ (800e750 <MX_RTC_Init+0xd4>)
 800e736:	2200      	movs	r2, #0
 800e738:	2100      	movs	r1, #0
 800e73a:	0018      	movs	r0, r3
 800e73c:	f00e f90e 	bl	801c95c <HAL_RTCEx_SetWakeUpTimer_IT>
 800e740:	1e03      	subs	r3, r0, #0
 800e742:	d001      	beq.n	800e748 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800e744:	f7fe ff3e 	bl	800d5c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800e748:	46c0      	nop			@ (mov r8, r8)
 800e74a:	46bd      	mov	sp, r7
 800e74c:	b006      	add	sp, #24
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	2000114c 	.word	0x2000114c
 800e754:	40002800 	.word	0x40002800

0800e758 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b082      	sub	sp, #8
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4a0a      	ldr	r2, [pc, #40]	@ (800e790 <HAL_RTC_MspInit+0x38>)
 800e766:	4293      	cmp	r3, r2
 800e768:	d10e      	bne.n	800e788 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800e76a:	4b0a      	ldr	r3, [pc, #40]	@ (800e794 <HAL_RTC_MspInit+0x3c>)
 800e76c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e76e:	4b09      	ldr	r3, [pc, #36]	@ (800e794 <HAL_RTC_MspInit+0x3c>)
 800e770:	2180      	movs	r1, #128	@ 0x80
 800e772:	02c9      	lsls	r1, r1, #11
 800e774:	430a      	orrs	r2, r1
 800e776:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800e778:	2200      	movs	r2, #0
 800e77a:	2100      	movs	r1, #0
 800e77c:	2002      	movs	r0, #2
 800e77e:	f006 fe85 	bl	801548c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800e782:	2002      	movs	r0, #2
 800e784:	f006 fe97 	bl	80154b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800e788:	46c0      	nop			@ (mov r8, r8)
 800e78a:	46bd      	mov	sp, r7
 800e78c:	b002      	add	sp, #8
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	40002800 	.word	0x40002800
 800e794:	40021000 	.word	0x40021000

0800e798 <sen5x_Get_sen5x_enable_state>:
*/
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 800e798:	b580      	push	{r7, lr}
 800e79a:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 800e79c:	4b02      	ldr	r3, [pc, #8]	@ (800e7a8 <sen5x_Get_sen5x_enable_state+0x10>)
 800e79e:	781b      	ldrb	r3, [r3, #0]
}
 800e7a0:	0018      	movs	r0, r3
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	46c0      	nop			@ (mov r8, r8)
 800e7a8:	20001173 	.word	0x20001173

0800e7ac <sen5x_Set_sen5x_state>:

void sen5x_Set_sen5x_state(bool status) {
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	0002      	movs	r2, r0
 800e7b4:	1dfb      	adds	r3, r7, #7
 800e7b6:	701a      	strb	r2, [r3, #0]
  sen5x_Enable = status;
 800e7b8:	4b03      	ldr	r3, [pc, #12]	@ (800e7c8 <sen5x_Set_sen5x_state+0x1c>)
 800e7ba:	1dfa      	adds	r2, r7, #7
 800e7bc:	7812      	ldrb	r2, [r2, #0]
 800e7be:	701a      	strb	r2, [r3, #0]
}
 800e7c0:	46c0      	nop			@ (mov r8, r8)
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	b002      	add	sp, #8
 800e7c6:	bd80      	pop	{r7, pc}
 800e7c8:	20001173 	.word	0x20001173

0800e7cc <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 800e7d4:	f006 f9b6 	bl	8014b44 <HAL_GetTick>
 800e7d8:	0002      	movs	r2, r0
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	18d2      	adds	r2, r2, r3
 800e7de:	4b03      	ldr	r3, [pc, #12]	@ (800e7ec <setsen5xReadTimer+0x20>)
 800e7e0:	601a      	str	r2, [r3, #0]
}
 800e7e2:	46c0      	nop			@ (mov r8, r8)
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	b002      	add	sp, #8
 800e7e8:	bd80      	pop	{r7, pc}
 800e7ea:	46c0      	nop			@ (mov r8, r8)
 800e7ec:	20001180 	.word	0x20001180

0800e7f0 <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	0002      	movs	r2, r0
 800e7f8:	1dfb      	adds	r3, r7, #7
 800e7fa:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 800e7fc:	4b03      	ldr	r3, [pc, #12]	@ (800e80c <setsen5xSamplecounter+0x1c>)
 800e7fe:	2200      	movs	r2, #0
 800e800:	701a      	strb	r2, [r3, #0]
}
 800e802:	46c0      	nop			@ (mov r8, r8)
 800e804:	46bd      	mov	sp, r7
 800e806:	b002      	add	sp, #8
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	46c0      	nop			@ (mov r8, r8)
 800e80c:	2000117c 	.word	0x2000117c

0800e810 <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 800e818:	f7fe ff8c 	bl	800d734 <IsPMSensorEnabled>
 800e81c:	1e03      	subs	r3, r0, #0
 800e81e:	d035      	beq.n	800e88c <sen5x_enable+0x7c>
    if (batteryChargeCheck() == BATTERY_FULL) {
 800e820:	f004 f80e 	bl	8012840 <batteryChargeCheck>
 800e824:	0003      	movs	r3, r0
 800e826:	2b03      	cmp	r3, #3
 800e828:	d103      	bne.n	800e832 <sen5x_enable+0x22>
      sen5x_Enable = true;
 800e82a:	4b20      	ldr	r3, [pc, #128]	@ (800e8ac <sen5x_enable+0x9c>)
 800e82c:	2201      	movs	r2, #1
 800e82e:	701a      	strb	r2, [r3, #0]
 800e830:	e00d      	b.n	800e84e <sen5x_enable+0x3e>
    }
    else {
    sen5x_Enable = !sen5x_Enable;
 800e832:	4b1e      	ldr	r3, [pc, #120]	@ (800e8ac <sen5x_enable+0x9c>)
 800e834:	781b      	ldrb	r3, [r3, #0]
 800e836:	1e5a      	subs	r2, r3, #1
 800e838:	4193      	sbcs	r3, r2
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	2201      	movs	r2, #1
 800e83e:	4053      	eors	r3, r2
 800e840:	b2db      	uxtb	r3, r3
 800e842:	1c1a      	adds	r2, r3, #0
 800e844:	2301      	movs	r3, #1
 800e846:	4013      	ands	r3, r2
 800e848:	b2da      	uxtb	r2, r3
 800e84a:	4b18      	ldr	r3, [pc, #96]	@ (800e8ac <sen5x_enable+0x9c>)
 800e84c:	701a      	strb	r2, [r3, #0]
    }
    if (sen5x_Enable) {
 800e84e:	4b17      	ldr	r3, [pc, #92]	@ (800e8ac <sen5x_enable+0x9c>)
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d003      	beq.n	800e85e <sen5x_enable+0x4e>
      setsen5xReadTimer(0);
 800e856:	2000      	movs	r0, #0
 800e858:	f7ff ffb8 	bl	800e7cc <setsen5xReadTimer>
 800e85c:	e009      	b.n	800e872 <sen5x_enable+0x62>
    }
    else {
      //The ticker starts after 880*100, effective, this cycle the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 800e85e:	f006 f971 	bl	8014b44 <HAL_GetTick>
 800e862:	0002      	movs	r2, r0
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2164      	movs	r1, #100	@ 0x64
 800e868:	434b      	muls	r3, r1
 800e86a:	18d3      	adds	r3, r2, r3
 800e86c:	0018      	movs	r0, r3
 800e86e:	f7ff ffad 	bl	800e7cc <setsen5xReadTimer>
    }
    Info("This cycle the sen5x is: %s", sen5x_Enable?"enabled":"disabled");
 800e872:	4b0e      	ldr	r3, [pc, #56]	@ (800e8ac <sen5x_enable+0x9c>)
 800e874:	781b      	ldrb	r3, [r3, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d001      	beq.n	800e87e <sen5x_enable+0x6e>
 800e87a:	4b0d      	ldr	r3, [pc, #52]	@ (800e8b0 <sen5x_enable+0xa0>)
 800e87c:	e000      	b.n	800e880 <sen5x_enable+0x70>
 800e87e:	4b0d      	ldr	r3, [pc, #52]	@ (800e8b4 <sen5x_enable+0xa4>)
 800e880:	4a0d      	ldr	r2, [pc, #52]	@ (800e8b8 <sen5x_enable+0xa8>)
 800e882:	490e      	ldr	r1, [pc, #56]	@ (800e8bc <sen5x_enable+0xac>)
 800e884:	2002      	movs	r0, #2
 800e886:	f005 fbe5 	bl	8014054 <CreateLine>
 800e88a:	e005      	b.n	800e898 <sen5x_enable+0x88>
  }
  else {
    Info("sen5x measurement is disabled");
 800e88c:	4a0c      	ldr	r2, [pc, #48]	@ (800e8c0 <sen5x_enable+0xb0>)
 800e88e:	4b0b      	ldr	r3, [pc, #44]	@ (800e8bc <sen5x_enable+0xac>)
 800e890:	0019      	movs	r1, r3
 800e892:	2002      	movs	r0, #2
 800e894:	f005 fbde 	bl	8014054 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800e898:	4b0a      	ldr	r3, [pc, #40]	@ (800e8c4 <sen5x_enable+0xb4>)
 800e89a:	2201      	movs	r2, #1
 800e89c:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 800e89e:	4b03      	ldr	r3, [pc, #12]	@ (800e8ac <sen5x_enable+0x9c>)
 800e8a0:	781b      	ldrb	r3, [r3, #0]
}
 800e8a2:	0018      	movs	r0, r3
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	b002      	add	sp, #8
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	46c0      	nop			@ (mov r8, r8)
 800e8ac:	20001173 	.word	0x20001173
 800e8b0:	0802d704 	.word	0x0802d704
 800e8b4:	0802d70c 	.word	0x0802d70c
 800e8b8:	0802d718 	.word	0x0802d718
 800e8bc:	0802d734 	.word	0x0802d734
 800e8c0:	0802d738 	.word	0x0802d738
 800e8c4:	200000aa 	.word	0x200000aa

0800e8c8 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 800e8cc:	2380      	movs	r3, #128	@ 0x80
 800e8ce:	015b      	lsls	r3, r3, #5
 800e8d0:	480f      	ldr	r0, [pc, #60]	@ (800e910 <sen5x_Power_On+0x48>)
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	0019      	movs	r1, r3
 800e8d6:	f007 fbc6 	bl	8016066 <HAL_GPIO_WritePin>
  Debug("executing sen5x_Power_On");
 800e8da:	4a0e      	ldr	r2, [pc, #56]	@ (800e914 <sen5x_Power_On+0x4c>)
 800e8dc:	4b0e      	ldr	r3, [pc, #56]	@ (800e918 <sen5x_Power_On+0x50>)
 800e8de:	0019      	movs	r1, r3
 800e8e0:	2003      	movs	r0, #3
 800e8e2:	f005 fbb7 	bl	8014054 <CreateLine>
  HAL_Delay(150);
 800e8e6:	2096      	movs	r0, #150	@ 0x96
 800e8e8:	f006 f936 	bl	8014b58 <HAL_Delay>
  if (sen5x_device_reset()) {
 800e8ec:	f001 f9f6 	bl	800fcdc <sen5x_device_reset>
 800e8f0:	1e03      	subs	r3, r0, #0
 800e8f2:	d006      	beq.n	800e902 <sen5x_Power_On+0x3a>
    Error("sen5x device reset error after power on");
 800e8f4:	4a09      	ldr	r2, [pc, #36]	@ (800e91c <sen5x_Power_On+0x54>)
 800e8f6:	4b0a      	ldr	r3, [pc, #40]	@ (800e920 <sen5x_Power_On+0x58>)
 800e8f8:	0019      	movs	r1, r3
 800e8fa:	2001      	movs	r0, #1
 800e8fc:	f005 fbaa 	bl	8014054 <CreateLine>
#ifdef SSD1306
  if (userToggle || Check_USB_PowerOn()) {
    displayStart();
  }
#endif
}
 800e900:	e002      	b.n	800e908 <sen5x_Power_On+0x40>
    sen5x_On = true;
 800e902:	4b08      	ldr	r3, [pc, #32]	@ (800e924 <sen5x_Power_On+0x5c>)
 800e904:	2201      	movs	r2, #1
 800e906:	701a      	strb	r2, [r3, #0]
}
 800e908:	46c0      	nop			@ (mov r8, r8)
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	46c0      	nop			@ (mov r8, r8)
 800e910:	50000800 	.word	0x50000800
 800e914:	0802d758 	.word	0x0802d758
 800e918:	0802d774 	.word	0x0802d774
 800e91c:	0802d778 	.word	0x0802d778
 800e920:	0802d7a0 	.word	0x0802d7a0
 800e924:	20001171 	.word	0x20001171

0800e928 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 800e928:	b580      	push	{r7, lr}
 800e92a:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 800e92c:	4b0e      	ldr	r3, [pc, #56]	@ (800e968 <sen5x_Power_Off+0x40>)
 800e92e:	781b      	ldrb	r3, [r3, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d006      	beq.n	800e942 <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800e934:	4a0d      	ldr	r2, [pc, #52]	@ (800e96c <sen5x_Power_Off+0x44>)
 800e936:	4b0e      	ldr	r3, [pc, #56]	@ (800e970 <sen5x_Power_Off+0x48>)
 800e938:	0019      	movs	r1, r3
 800e93a:	2003      	movs	r0, #3
 800e93c:	f005 fb8a 	bl	8014054 <CreateLine>
      sen5x_On = false;
#ifdef SSD1306
    }
#endif
  }
}
 800e940:	e00f      	b.n	800e962 <sen5x_Power_Off+0x3a>
      Debug("executing sen5x_Power_Off");
 800e942:	4a0c      	ldr	r2, [pc, #48]	@ (800e974 <sen5x_Power_Off+0x4c>)
 800e944:	4b0a      	ldr	r3, [pc, #40]	@ (800e970 <sen5x_Power_Off+0x48>)
 800e946:	0019      	movs	r1, r3
 800e948:	2003      	movs	r0, #3
 800e94a:	f005 fb83 	bl	8014054 <CreateLine>
      HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800e94e:	2380      	movs	r3, #128	@ 0x80
 800e950:	015b      	lsls	r3, r3, #5
 800e952:	4809      	ldr	r0, [pc, #36]	@ (800e978 <sen5x_Power_Off+0x50>)
 800e954:	2200      	movs	r2, #0
 800e956:	0019      	movs	r1, r3
 800e958:	f007 fb85 	bl	8016066 <HAL_GPIO_WritePin>
      sen5x_On = false;
 800e95c:	4b07      	ldr	r3, [pc, #28]	@ (800e97c <sen5x_Power_Off+0x54>)
 800e95e:	2200      	movs	r2, #0
 800e960:	701a      	strb	r2, [r3, #0]
}
 800e962:	46c0      	nop			@ (mov r8, r8)
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	20001172 	.word	0x20001172
 800e96c:	0802d7a4 	.word	0x0802d7a4
 800e970:	0802d774 	.word	0x0802d774
 800e974:	0802d7d4 	.word	0x0802d7d4
 800e978:	50000800 	.word	0x50000800
 800e97c:	20001171 	.word	0x20001171

0800e980 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 800e980:	b580      	push	{r7, lr}
 800e982:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800e984:	4b02      	ldr	r3, [pc, #8]	@ (800e990 <reset_fanCleaningDone+0x10>)
 800e986:	2200      	movs	r2, #0
 800e988:	701a      	strb	r2, [r3, #0]
}
 800e98a:	46c0      	nop			@ (mov r8, r8)
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	20001170 	.word	0x20001170

0800e994 <probe_sen5x>:

int16_t probe_sen5x(void) {
 800e994:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e996:	b093      	sub	sp, #76	@ 0x4c
 800e998:	af04      	add	r7, sp, #16
  int16_t error = 0;
 800e99a:	2436      	movs	r4, #54	@ 0x36
 800e99c:	193b      	adds	r3, r7, r4
 800e99e:	2200      	movs	r2, #0
 800e9a0:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800e9a2:	2335      	movs	r3, #53	@ 0x35
 800e9a4:	18fb      	adds	r3, r7, r3
 800e9a6:	2220      	movs	r2, #32
 800e9a8:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 800e9aa:	2334      	movs	r3, #52	@ 0x34
 800e9ac:	18fb      	adds	r3, r7, r3
 800e9ae:	2220      	movs	r2, #32
 800e9b0:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800e9b2:	f7ff ff89 	bl	800e8c8 <sen5x_Power_On>
  error = sen5x_device_reset();
 800e9b6:	0025      	movs	r5, r4
 800e9b8:	193c      	adds	r4, r7, r4
 800e9ba:	f001 f98f 	bl	800fcdc <sen5x_device_reset>
 800e9be:	0003      	movs	r3, r0
 800e9c0:	8023      	strh	r3, [r4, #0]
  if (error) {
 800e9c2:	002c      	movs	r4, r5
 800e9c4:	193b      	adds	r3, r7, r4
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	5e9b      	ldrsh	r3, [r3, r2]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d00b      	beq.n	800e9e6 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800e9ce:	193b      	adds	r3, r7, r4
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	5e9b      	ldrsh	r3, [r3, r2]
 800e9d4:	4a77      	ldr	r2, [pc, #476]	@ (800ebb4 <probe_sen5x+0x220>)
 800e9d6:	4978      	ldr	r1, [pc, #480]	@ (800ebb8 <probe_sen5x+0x224>)
 800e9d8:	2001      	movs	r0, #1
 800e9da:	f005 fb3b 	bl	8014054 <CreateLine>
      return error;
 800e9de:	193b      	adds	r3, r7, r4
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	5e9b      	ldrsh	r3, [r3, r2]
 800e9e4:	e0e2      	b.n	800ebac <probe_sen5x+0x218>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800e9e6:	2536      	movs	r5, #54	@ 0x36
 800e9e8:	197c      	adds	r4, r7, r5
 800e9ea:	2335      	movs	r3, #53	@ 0x35
 800e9ec:	18fb      	adds	r3, r7, r3
 800e9ee:	781a      	ldrb	r2, [r3, #0]
 800e9f0:	230c      	movs	r3, #12
 800e9f2:	18fb      	adds	r3, r7, r3
 800e9f4:	0011      	movs	r1, r2
 800e9f6:	0018      	movs	r0, r3
 800e9f8:	f001 f85c 	bl	800fab4 <sen5x_get_serial_number>
 800e9fc:	0003      	movs	r3, r0
 800e9fe:	8023      	strh	r3, [r4, #0]
  if (error) {
 800ea00:	197b      	adds	r3, r7, r5
 800ea02:	2200      	movs	r2, #0
 800ea04:	5e9b      	ldrsh	r3, [r3, r2]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d00b      	beq.n	800ea22 <probe_sen5x+0x8e>
      Error("Error executing sen5x_get_serial_number(): %i", error);
 800ea0a:	197b      	adds	r3, r7, r5
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	5e9b      	ldrsh	r3, [r3, r2]
 800ea10:	4a6a      	ldr	r2, [pc, #424]	@ (800ebbc <probe_sen5x+0x228>)
 800ea12:	4969      	ldr	r1, [pc, #420]	@ (800ebb8 <probe_sen5x+0x224>)
 800ea14:	2001      	movs	r0, #1
 800ea16:	f005 fb1d 	bl	8014054 <CreateLine>
      return error;
 800ea1a:	197b      	adds	r3, r7, r5
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	5e9b      	ldrsh	r3, [r3, r2]
 800ea20:	e0c4      	b.n	800ebac <probe_sen5x+0x218>
  } else {
      Info("Serial number: %s", serial_number);
 800ea22:	230c      	movs	r3, #12
 800ea24:	18fb      	adds	r3, r7, r3
 800ea26:	4a66      	ldr	r2, [pc, #408]	@ (800ebc0 <probe_sen5x+0x22c>)
 800ea28:	4966      	ldr	r1, [pc, #408]	@ (800ebc4 <probe_sen5x+0x230>)
 800ea2a:	2002      	movs	r0, #2
 800ea2c:	f005 fb12 	bl	8014054 <CreateLine>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 800ea30:	2536      	movs	r5, #54	@ 0x36
 800ea32:	197c      	adds	r4, r7, r5
 800ea34:	2334      	movs	r3, #52	@ 0x34
 800ea36:	18fb      	adds	r3, r7, r3
 800ea38:	781a      	ldrb	r2, [r3, #0]
 800ea3a:	4b63      	ldr	r3, [pc, #396]	@ (800ebc8 <probe_sen5x+0x234>)
 800ea3c:	0011      	movs	r1, r2
 800ea3e:	0018      	movs	r0, r3
 800ea40:	f000 ffe2 	bl	800fa08 <sen5x_get_product_name>
 800ea44:	0003      	movs	r3, r0
 800ea46:	8023      	strh	r3, [r4, #0]
  if (error) {
 800ea48:	197b      	adds	r3, r7, r5
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	5e9b      	ldrsh	r3, [r3, r2]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d00b      	beq.n	800ea6a <probe_sen5x+0xd6>
      Error("Error executing sen5x_get_product_name(): %i", error);
 800ea52:	197b      	adds	r3, r7, r5
 800ea54:	2200      	movs	r2, #0
 800ea56:	5e9b      	ldrsh	r3, [r3, r2]
 800ea58:	4a5c      	ldr	r2, [pc, #368]	@ (800ebcc <probe_sen5x+0x238>)
 800ea5a:	4957      	ldr	r1, [pc, #348]	@ (800ebb8 <probe_sen5x+0x224>)
 800ea5c:	2001      	movs	r0, #1
 800ea5e:	f005 faf9 	bl	8014054 <CreateLine>
      return error;
 800ea62:	197b      	adds	r3, r7, r5
 800ea64:	2200      	movs	r2, #0
 800ea66:	5e9b      	ldrsh	r3, [r3, r2]
 800ea68:	e0a0      	b.n	800ebac <probe_sen5x+0x218>
  } else {
      Info("Product name: %s", product_name);
 800ea6a:	4b57      	ldr	r3, [pc, #348]	@ (800ebc8 <probe_sen5x+0x234>)
 800ea6c:	4a58      	ldr	r2, [pc, #352]	@ (800ebd0 <probe_sen5x+0x23c>)
 800ea6e:	4955      	ldr	r1, [pc, #340]	@ (800ebc4 <probe_sen5x+0x230>)
 800ea70:	2002      	movs	r0, #2
 800ea72:	f005 faef 	bl	8014054 <CreateLine>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800ea76:	2636      	movs	r6, #54	@ 0x36
 800ea78:	19bc      	adds	r4, r7, r6
 800ea7a:	2308      	movs	r3, #8
 800ea7c:	18fd      	adds	r5, r7, r3
 800ea7e:	2309      	movs	r3, #9
 800ea80:	18fa      	adds	r2, r7, r3
 800ea82:	230a      	movs	r3, #10
 800ea84:	18f9      	adds	r1, r7, r3
 800ea86:	230b      	movs	r3, #11
 800ea88:	18f8      	adds	r0, r7, r3
 800ea8a:	1d7b      	adds	r3, r7, #5
 800ea8c:	9302      	str	r3, [sp, #8]
 800ea8e:	1dbb      	adds	r3, r7, #6
 800ea90:	9301      	str	r3, [sp, #4]
 800ea92:	1dfb      	adds	r3, r7, #7
 800ea94:	9300      	str	r3, [sp, #0]
 800ea96:	002b      	movs	r3, r5
 800ea98:	f001 f862 	bl	800fb60 <sen5x_get_version>
 800ea9c:	0003      	movs	r3, r0
 800ea9e:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 800eaa0:	19bb      	adds	r3, r7, r6
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	5e9b      	ldrsh	r3, [r3, r2]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d00b      	beq.n	800eac2 <probe_sen5x+0x12e>
      Error("Error executing sen5x_get_version(): %i", error);
 800eaaa:	19bb      	adds	r3, r7, r6
 800eaac:	2200      	movs	r2, #0
 800eaae:	5e9b      	ldrsh	r3, [r3, r2]
 800eab0:	4a48      	ldr	r2, [pc, #288]	@ (800ebd4 <probe_sen5x+0x240>)
 800eab2:	4941      	ldr	r1, [pc, #260]	@ (800ebb8 <probe_sen5x+0x224>)
 800eab4:	2001      	movs	r0, #1
 800eab6:	f005 facd 	bl	8014054 <CreateLine>
      return error;
 800eaba:	19bb      	adds	r3, r7, r6
 800eabc:	2200      	movs	r2, #0
 800eabe:	5e9b      	ldrsh	r3, [r3, r2]
 800eac0:	e074      	b.n	800ebac <probe_sen5x+0x218>
  } else {
      Info("Firmware: %u.%u, Hardware: %u.%u", firmware_major,
 800eac2:	230b      	movs	r3, #11
 800eac4:	18fb      	adds	r3, r7, r3
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	001d      	movs	r5, r3
 800eaca:	230a      	movs	r3, #10
 800eacc:	18fb      	adds	r3, r7, r3
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	0018      	movs	r0, r3
 800ead2:	2308      	movs	r3, #8
 800ead4:	18fb      	adds	r3, r7, r3
 800ead6:	781b      	ldrb	r3, [r3, #0]
 800ead8:	001c      	movs	r4, r3
 800eada:	1dfb      	adds	r3, r7, #7
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	4a3e      	ldr	r2, [pc, #248]	@ (800ebd8 <probe_sen5x+0x244>)
 800eae0:	4938      	ldr	r1, [pc, #224]	@ (800ebc4 <probe_sen5x+0x230>)
 800eae2:	9302      	str	r3, [sp, #8]
 800eae4:	9401      	str	r4, [sp, #4]
 800eae6:	9000      	str	r0, [sp, #0]
 800eae8:	002b      	movs	r3, r5
 800eaea:	2002      	movs	r0, #2
 800eaec:	f005 fab2 	bl	8014054 <CreateLine>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 800eaf4:	262e      	movs	r6, #46	@ 0x2e
 800eaf6:	19bb      	adds	r3, r7, r6
 800eaf8:	2200      	movs	r2, #0
 800eafa:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800eafc:	232c      	movs	r3, #44	@ 0x2c
 800eafe:	18fb      	adds	r3, r7, r3
 800eb00:	2200      	movs	r2, #0
 800eb02:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 800eb04:	4935      	ldr	r1, [pc, #212]	@ (800ebdc <probe_sen5x+0x248>)
 800eb06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb08:	f7f2 fa9a 	bl	8001040 <__aeabi_fmul>
 800eb0c:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800eb0e:	1c18      	adds	r0, r3, #0
 800eb10:	f7f2 fe6a 	bl	80017e8 <__aeabi_f2iz>
 800eb14:	0003      	movs	r3, r0
 800eb16:	b218      	sxth	r0, r3
 800eb18:	2536      	movs	r5, #54	@ 0x36
 800eb1a:	197c      	adds	r4, r7, r5
 800eb1c:	232c      	movs	r3, #44	@ 0x2c
 800eb1e:	18fb      	adds	r3, r7, r3
 800eb20:	881a      	ldrh	r2, [r3, #0]
 800eb22:	19bb      	adds	r3, r7, r6
 800eb24:	2100      	movs	r1, #0
 800eb26:	5e5b      	ldrsh	r3, [r3, r1]
 800eb28:	0019      	movs	r1, r3
 800eb2a:	f000 ff09 	bl	800f940 <sen5x_set_temperature_offset_parameters>
 800eb2e:	0003      	movs	r3, r0
 800eb30:	8023      	strh	r3, [r4, #0]
  if (error) {
 800eb32:	197b      	adds	r3, r7, r5
 800eb34:	2200      	movs	r2, #0
 800eb36:	5e9b      	ldrsh	r3, [r3, r2]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d00b      	beq.n	800eb54 <probe_sen5x+0x1c0>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800eb3c:	197b      	adds	r3, r7, r5
 800eb3e:	2200      	movs	r2, #0
 800eb40:	5e9b      	ldrsh	r3, [r3, r2]
 800eb42:	4a27      	ldr	r2, [pc, #156]	@ (800ebe0 <probe_sen5x+0x24c>)
 800eb44:	491c      	ldr	r1, [pc, #112]	@ (800ebb8 <probe_sen5x+0x224>)
 800eb46:	2001      	movs	r0, #1
 800eb48:	f005 fa84 	bl	8014054 <CreateLine>
      return error;
 800eb4c:	197b      	adds	r3, r7, r5
 800eb4e:	2200      	movs	r2, #0
 800eb50:	5e9b      	ldrsh	r3, [r3, r2]
 800eb52:	e02b      	b.n	800ebac <probe_sen5x+0x218>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 800eb54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb56:	f7f4 fe9d 	bl	8003894 <__aeabi_f2d>
 800eb5a:	0002      	movs	r2, r0
 800eb5c:	000b      	movs	r3, r1
 800eb5e:	4821      	ldr	r0, [pc, #132]	@ (800ebe4 <probe_sen5x+0x250>)
 800eb60:	4918      	ldr	r1, [pc, #96]	@ (800ebc4 <probe_sen5x+0x230>)
 800eb62:	9200      	str	r2, [sp, #0]
 800eb64:	9301      	str	r3, [sp, #4]
 800eb66:	0002      	movs	r2, r0
 800eb68:	2002      	movs	r0, #2
 800eb6a:	f005 fa73 	bl	8014054 <CreateLine>
  }
  if (!Check_USB_PowerOn()) {
 800eb6e:	f7fb f811 	bl	8009b94 <Check_USB_PowerOn>
 800eb72:	0003      	movs	r3, r0
 800eb74:	001a      	movs	r2, r3
 800eb76:	2301      	movs	r3, #1
 800eb78:	4053      	eors	r3, r2
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d00a      	beq.n	800eb96 <probe_sen5x+0x202>
    sen5x_Power_Off();
 800eb80:	f7ff fed2 	bl	800e928 <sen5x_Power_Off>
    sen5xReadTimer  = HAL_GetTick() + 2000; // after 25 second first measurement
 800eb84:	f005 ffde 	bl	8014b44 <HAL_GetTick>
 800eb88:	0003      	movs	r3, r0
 800eb8a:	22fa      	movs	r2, #250	@ 0xfa
 800eb8c:	00d2      	lsls	r2, r2, #3
 800eb8e:	189a      	adds	r2, r3, r2
 800eb90:	4b15      	ldr	r3, [pc, #84]	@ (800ebe8 <probe_sen5x+0x254>)
 800eb92:	601a      	str	r2, [r3, #0]
 800eb94:	e006      	b.n	800eba4 <probe_sen5x+0x210>
  }
  else {
    sen5xReadTimer  = HAL_GetTick() + 28000; // after 25 second first measurement
 800eb96:	f005 ffd5 	bl	8014b44 <HAL_GetTick>
 800eb9a:	0003      	movs	r3, r0
 800eb9c:	4a13      	ldr	r2, [pc, #76]	@ (800ebec <probe_sen5x+0x258>)
 800eb9e:	189a      	adds	r2, r3, r2
 800eba0:	4b11      	ldr	r3, [pc, #68]	@ (800ebe8 <probe_sen5x+0x254>)
 800eba2:	601a      	str	r2, [r3, #0]
  }
  return error;
 800eba4:	2336      	movs	r3, #54	@ 0x36
 800eba6:	18fb      	adds	r3, r7, r3
 800eba8:	2200      	movs	r2, #0
 800ebaa:	5e9b      	ldrsh	r3, [r3, r2]
}
 800ebac:	0018      	movs	r0, r3
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	b00f      	add	sp, #60	@ 0x3c
 800ebb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebb4:	0802d7f0 	.word	0x0802d7f0
 800ebb8:	0802d7a0 	.word	0x0802d7a0
 800ebbc:	0802d81c 	.word	0x0802d81c
 800ebc0:	0802d84c 	.word	0x0802d84c
 800ebc4:	0802d734 	.word	0x0802d734
 800ebc8:	20001174 	.word	0x20001174
 800ebcc:	0802d860 	.word	0x0802d860
 800ebd0:	0802d890 	.word	0x0802d890
 800ebd4:	0802d8a4 	.word	0x0802d8a4
 800ebd8:	0802d8cc 	.word	0x0802d8cc
 800ebdc:	43480000 	.word	0x43480000
 800ebe0:	0802d8f0 	.word	0x0802d8f0
 800ebe4:	0802d930 	.word	0x0802d930
 800ebe8:	20001180 	.word	0x20001180
 800ebec:	00006d60 	.word	0x00006d60

0800ebf0 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 800ebf0:	b590      	push	{r4, r7, lr}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800ebf6:	1dbb      	adds	r3, r7, #6
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 800ebfc:	4b1b      	ldr	r3, [pc, #108]	@ (800ec6c <sen5x_lightup_measurement+0x7c>)
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d00b      	beq.n	800ec1c <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 800ec04:	4a1a      	ldr	r2, [pc, #104]	@ (800ec70 <sen5x_lightup_measurement+0x80>)
 800ec06:	4b1b      	ldr	r3, [pc, #108]	@ (800ec74 <sen5x_lightup_measurement+0x84>)
 800ec08:	0019      	movs	r1, r3
 800ec0a:	2002      	movs	r0, #2
 800ec0c:	f005 fa22 	bl	8014054 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800ec10:	1dbc      	adds	r4, r7, #6
 800ec12:	f000 fd21 	bl	800f658 <sen5x_start_measurement_without_pm>
 800ec16:	0003      	movs	r3, r0
 800ec18:	8023      	strh	r3, [r4, #0]
 800ec1a:	e00a      	b.n	800ec32 <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 800ec1c:	4a16      	ldr	r2, [pc, #88]	@ (800ec78 <sen5x_lightup_measurement+0x88>)
 800ec1e:	4b15      	ldr	r3, [pc, #84]	@ (800ec74 <sen5x_lightup_measurement+0x84>)
 800ec20:	0019      	movs	r1, r3
 800ec22:	2002      	movs	r0, #2
 800ec24:	f005 fa16 	bl	8014054 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 800ec28:	1dbc      	adds	r4, r7, #6
 800ec2a:	f000 fce7 	bl	800f5fc <sen5x_start_measurement>
 800ec2e:	0003      	movs	r3, r0
 800ec30:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 800ec32:	1dbb      	adds	r3, r7, #6
 800ec34:	2200      	movs	r2, #0
 800ec36:	5e9b      	ldrsh	r3, [r3, r2]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d008      	beq.n	800ec4e <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 800ec3c:	1dbb      	adds	r3, r7, #6
 800ec3e:	2200      	movs	r2, #0
 800ec40:	5e9b      	ldrsh	r3, [r3, r2]
 800ec42:	4a0e      	ldr	r2, [pc, #56]	@ (800ec7c <sen5x_lightup_measurement+0x8c>)
 800ec44:	490e      	ldr	r1, [pc, #56]	@ (800ec80 <sen5x_lightup_measurement+0x90>)
 800ec46:	2001      	movs	r0, #1
 800ec48:	f005 fa04 	bl	8014054 <CreateLine>
 800ec4c:	e007      	b.n	800ec5e <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800ec4e:	f7fb f853 	bl	8009cf8 <showTime>
    Info("sen5x_start_measurement executed");
 800ec52:	4a0c      	ldr	r2, [pc, #48]	@ (800ec84 <sen5x_lightup_measurement+0x94>)
 800ec54:	4b07      	ldr	r3, [pc, #28]	@ (800ec74 <sen5x_lightup_measurement+0x84>)
 800ec56:	0019      	movs	r1, r3
 800ec58:	2002      	movs	r0, #2
 800ec5a:	f005 f9fb 	bl	8014054 <CreateLine>
  }
  return error;
 800ec5e:	1dbb      	adds	r3, r7, #6
 800ec60:	2200      	movs	r2, #0
 800ec62:	5e9b      	ldrsh	r3, [r3, r2]
}
 800ec64:	0018      	movs	r0, r3
 800ec66:	46bd      	mov	sp, r7
 800ec68:	b003      	add	sp, #12
 800ec6a:	bd90      	pop	{r4, r7, pc}
 800ec6c:	20001172 	.word	0x20001172
 800ec70:	0802d968 	.word	0x0802d968
 800ec74:	0802d734 	.word	0x0802d734
 800ec78:	0802d994 	.word	0x0802d994
 800ec7c:	0802d9b4 	.word	0x0802d9b4
 800ec80:	0802d7a0 	.word	0x0802d7a0
 800ec84:	0802d9e4 	.word	0x0802d9e4

0800ec88 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 800ec88:	b590      	push	{r4, r7, lr}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
  int16_t error = 0;
 800ec8e:	1dbb      	adds	r3, r7, #6
 800ec90:	2200      	movs	r2, #0
 800ec92:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 800ec94:	4b21      	ldr	r3, [pc, #132]	@ (800ed1c <sen5x_extinguish_measurement+0x94>)
 800ec96:	781b      	ldrb	r3, [r3, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d01e      	beq.n	800ecda <sen5x_extinguish_measurement+0x52>
    Info("Continuous VOC & NOx is active, sensor not powered off");
 800ec9c:	4a20      	ldr	r2, [pc, #128]	@ (800ed20 <sen5x_extinguish_measurement+0x98>)
 800ec9e:	4b21      	ldr	r3, [pc, #132]	@ (800ed24 <sen5x_extinguish_measurement+0x9c>)
 800eca0:	0019      	movs	r1, r3
 800eca2:	2002      	movs	r0, #2
 800eca4:	f005 f9d6 	bl	8014054 <CreateLine>
    Info("PM measurement is disabled");
 800eca8:	4a1f      	ldr	r2, [pc, #124]	@ (800ed28 <sen5x_extinguish_measurement+0xa0>)
 800ecaa:	4b1e      	ldr	r3, [pc, #120]	@ (800ed24 <sen5x_extinguish_measurement+0x9c>)
 800ecac:	0019      	movs	r1, r3
 800ecae:	2002      	movs	r0, #2
 800ecb0:	f005 f9d0 	bl	8014054 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 800ecb4:	1dbc      	adds	r4, r7, #6
 800ecb6:	f000 fccf 	bl	800f658 <sen5x_start_measurement_without_pm>
 800ecba:	0003      	movs	r3, r0
 800ecbc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800ecbe:	1dbb      	adds	r3, r7, #6
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	5e9b      	ldrsh	r3, [r3, r2]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d022      	beq.n	800ed0e <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 800ecc8:	1dbb      	adds	r3, r7, #6
 800ecca:	2200      	movs	r2, #0
 800eccc:	5e9b      	ldrsh	r3, [r3, r2]
 800ecce:	4a17      	ldr	r2, [pc, #92]	@ (800ed2c <sen5x_extinguish_measurement+0xa4>)
 800ecd0:	4917      	ldr	r1, [pc, #92]	@ (800ed30 <sen5x_extinguish_measurement+0xa8>)
 800ecd2:	2001      	movs	r0, #1
 800ecd4:	f005 f9be 	bl	8014054 <CreateLine>
 800ecd8:	e019      	b.n	800ed0e <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 800ecda:	1dbc      	adds	r4, r7, #6
 800ecdc:	f000 fcea 	bl	800f6b4 <sen5x_stop_measurement>
 800ece0:	0003      	movs	r3, r0
 800ece2:	8023      	strh	r3, [r4, #0]
    showTime();
 800ece4:	f7fb f808 	bl	8009cf8 <showTime>
    Info("sen5x_stop_measurement executed");
 800ece8:	4a12      	ldr	r2, [pc, #72]	@ (800ed34 <sen5x_extinguish_measurement+0xac>)
 800ecea:	4b0e      	ldr	r3, [pc, #56]	@ (800ed24 <sen5x_extinguish_measurement+0x9c>)
 800ecec:	0019      	movs	r1, r3
 800ecee:	2002      	movs	r0, #2
 800ecf0:	f005 f9b0 	bl	8014054 <CreateLine>
    if (error) {
 800ecf4:	1dbb      	adds	r3, r7, #6
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	5e9b      	ldrsh	r3, [r3, r2]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d007      	beq.n	800ed0e <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 800ecfe:	1dbb      	adds	r3, r7, #6
 800ed00:	2200      	movs	r2, #0
 800ed02:	5e9b      	ldrsh	r3, [r3, r2]
 800ed04:	4a0c      	ldr	r2, [pc, #48]	@ (800ed38 <sen5x_extinguish_measurement+0xb0>)
 800ed06:	490a      	ldr	r1, [pc, #40]	@ (800ed30 <sen5x_extinguish_measurement+0xa8>)
 800ed08:	2001      	movs	r0, #1
 800ed0a:	f005 f9a3 	bl	8014054 <CreateLine>
    }
  }
  return error;
 800ed0e:	1dbb      	adds	r3, r7, #6
 800ed10:	2200      	movs	r2, #0
 800ed12:	5e9b      	ldrsh	r3, [r3, r2]
}
 800ed14:	0018      	movs	r0, r3
 800ed16:	46bd      	mov	sp, r7
 800ed18:	b003      	add	sp, #12
 800ed1a:	bd90      	pop	{r4, r7, pc}
 800ed1c:	20001172 	.word	0x20001172
 800ed20:	0802da08 	.word	0x0802da08
 800ed24:	0802d734 	.word	0x0802d734
 800ed28:	0802da40 	.word	0x0802da40
 800ed2c:	0802da5c 	.word	0x0802da5c
 800ed30:	0802d7a0 	.word	0x0802d7a0
 800ed34:	0802da9c 	.word	0x0802da9c
 800ed38:	0802dabc 	.word	0x0802dabc

0800ed3c <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 800ed3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed3e:	b08d      	sub	sp, #52	@ 0x34
 800ed40:	af04      	add	r7, sp, #16
 800ed42:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 800ed44:	261e      	movs	r6, #30
 800ed46:	19bb      	adds	r3, r7, r6
 800ed48:	2200      	movs	r2, #0
 800ed4a:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 800ed4c:	19bc      	adds	r4, r7, r6
 800ed4e:	2316      	movs	r3, #22
 800ed50:	18fd      	adds	r5, r7, r3
 800ed52:	2318      	movs	r3, #24
 800ed54:	18fa      	adds	r2, r7, r3
 800ed56:	231a      	movs	r3, #26
 800ed58:	18f9      	adds	r1, r7, r3
 800ed5a:	231c      	movs	r3, #28
 800ed5c:	18f8      	adds	r0, r7, r3
 800ed5e:	230e      	movs	r3, #14
 800ed60:	18fb      	adds	r3, r7, r3
 800ed62:	9303      	str	r3, [sp, #12]
 800ed64:	2310      	movs	r3, #16
 800ed66:	18fb      	adds	r3, r7, r3
 800ed68:	9302      	str	r3, [sp, #8]
 800ed6a:	2312      	movs	r3, #18
 800ed6c:	18fb      	adds	r3, r7, r3
 800ed6e:	9301      	str	r3, [sp, #4]
 800ed70:	2314      	movs	r3, #20
 800ed72:	18fb      	adds	r3, r7, r3
 800ed74:	9300      	str	r3, [sp, #0]
 800ed76:	002b      	movs	r3, r5
 800ed78:	f000 fd1e 	bl	800f7b8 <sen5x_read_measured_values>
 800ed7c:	0003      	movs	r3, r0
 800ed7e:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800ed80:	19bb      	adds	r3, r7, r6
 800ed82:	2200      	movs	r2, #0
 800ed84:	5e9b      	ldrsh	r3, [r3, r2]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d003      	beq.n	800ed92 <sen5x_read_measurement+0x56>
    return error;
 800ed8a:	19bb      	adds	r3, r7, r6
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	5e9b      	ldrsh	r3, [r3, r2]
 800ed90:	e02c      	b.n	800edec <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800ed92:	231c      	movs	r3, #28
 800ed94:	18fb      	adds	r3, r7, r3
 800ed96:	881a      	ldrh	r2, [r3, #0]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 800ed9c:	231a      	movs	r3, #26
 800ed9e:	18fb      	adds	r3, r7, r3
 800eda0:	881a      	ldrh	r2, [r3, #0]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 800eda6:	2318      	movs	r3, #24
 800eda8:	18fb      	adds	r3, r7, r3
 800edaa:	881a      	ldrh	r2, [r3, #0]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800edb0:	2316      	movs	r3, #22
 800edb2:	18fb      	adds	r3, r7, r3
 800edb4:	881a      	ldrh	r2, [r3, #0]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 800edba:	2314      	movs	r3, #20
 800edbc:	18fb      	adds	r3, r7, r3
 800edbe:	2200      	movs	r2, #0
 800edc0:	5e9a      	ldrsh	r2, [r3, r2]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 800edc6:	2312      	movs	r3, #18
 800edc8:	18fb      	adds	r3, r7, r3
 800edca:	2200      	movs	r2, #0
 800edcc:	5e9a      	ldrsh	r2, [r3, r2]
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800edd2:	2310      	movs	r3, #16
 800edd4:	18fb      	adds	r3, r7, r3
 800edd6:	2200      	movs	r2, #0
 800edd8:	5e9a      	ldrsh	r2, [r3, r2]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800edde:	230e      	movs	r3, #14
 800ede0:	18fb      	adds	r3, r7, r3
 800ede2:	2200      	movs	r2, #0
 800ede4:	5e9a      	ldrsh	r2, [r3, r2]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	81da      	strh	r2, [r3, #14]
  return 0;
 800edea:	2300      	movs	r3, #0
}
 800edec:	0018      	movs	r0, r3
 800edee:	46bd      	mov	sp, r7
 800edf0:	b009      	add	sp, #36	@ 0x24
 800edf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800edf4 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b082      	sub	sp, #8
 800edf8:	af02      	add	r7, sp, #8
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800edfa:	4b6e      	ldr	r3, [pc, #440]	@ (800efb4 <sen5x_printvalues+0x1c0>)
 800edfc:	881b      	ldrh	r3, [r3, #0]
 800edfe:	4a6e      	ldr	r2, [pc, #440]	@ (800efb8 <sen5x_printvalues+0x1c4>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d017      	beq.n	800ee34 <sen5x_printvalues+0x40>
      Info("Mass concentration pm1p0: %.1f µg/m³", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 800ee04:	4b6b      	ldr	r3, [pc, #428]	@ (800efb4 <sen5x_printvalues+0x1c0>)
 800ee06:	881b      	ldrh	r3, [r3, #0]
 800ee08:	0018      	movs	r0, r3
 800ee0a:	f7f2 fd0d 	bl	8001828 <__aeabi_i2f>
 800ee0e:	1c03      	adds	r3, r0, #0
 800ee10:	496a      	ldr	r1, [pc, #424]	@ (800efbc <sen5x_printvalues+0x1c8>)
 800ee12:	1c18      	adds	r0, r3, #0
 800ee14:	f7f1 ff46 	bl	8000ca4 <__aeabi_fdiv>
 800ee18:	1c03      	adds	r3, r0, #0
 800ee1a:	1c18      	adds	r0, r3, #0
 800ee1c:	f7f4 fd3a 	bl	8003894 <__aeabi_f2d>
 800ee20:	0002      	movs	r2, r0
 800ee22:	000b      	movs	r3, r1
 800ee24:	4866      	ldr	r0, [pc, #408]	@ (800efc0 <sen5x_printvalues+0x1cc>)
 800ee26:	4967      	ldr	r1, [pc, #412]	@ (800efc4 <sen5x_printvalues+0x1d0>)
 800ee28:	9200      	str	r2, [sp, #0]
 800ee2a:	9301      	str	r3, [sp, #4]
 800ee2c:	0002      	movs	r2, r0
 800ee2e:	2002      	movs	r0, #2
 800ee30:	f005 f910 	bl	8014054 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800ee34:	4b5f      	ldr	r3, [pc, #380]	@ (800efb4 <sen5x_printvalues+0x1c0>)
 800ee36:	885b      	ldrh	r3, [r3, #2]
 800ee38:	4a5f      	ldr	r2, [pc, #380]	@ (800efb8 <sen5x_printvalues+0x1c4>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d017      	beq.n	800ee6e <sen5x_printvalues+0x7a>
        Info("Mass concentration pm2p5: %.1f µg/m³", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 800ee3e:	4b5d      	ldr	r3, [pc, #372]	@ (800efb4 <sen5x_printvalues+0x1c0>)
 800ee40:	885b      	ldrh	r3, [r3, #2]
 800ee42:	0018      	movs	r0, r3
 800ee44:	f7f2 fcf0 	bl	8001828 <__aeabi_i2f>
 800ee48:	1c03      	adds	r3, r0, #0
 800ee4a:	495c      	ldr	r1, [pc, #368]	@ (800efbc <sen5x_printvalues+0x1c8>)
 800ee4c:	1c18      	adds	r0, r3, #0
 800ee4e:	f7f1 ff29 	bl	8000ca4 <__aeabi_fdiv>
 800ee52:	1c03      	adds	r3, r0, #0
 800ee54:	1c18      	adds	r0, r3, #0
 800ee56:	f7f4 fd1d 	bl	8003894 <__aeabi_f2d>
 800ee5a:	0002      	movs	r2, r0
 800ee5c:	000b      	movs	r3, r1
 800ee5e:	485a      	ldr	r0, [pc, #360]	@ (800efc8 <sen5x_printvalues+0x1d4>)
 800ee60:	4958      	ldr	r1, [pc, #352]	@ (800efc4 <sen5x_printvalues+0x1d0>)
 800ee62:	9200      	str	r2, [sp, #0]
 800ee64:	9301      	str	r3, [sp, #4]
 800ee66:	0002      	movs	r2, r0
 800ee68:	2002      	movs	r0, #2
 800ee6a:	f005 f8f3 	bl	8014054 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800ee6e:	4b51      	ldr	r3, [pc, #324]	@ (800efb4 <sen5x_printvalues+0x1c0>)
 800ee70:	889b      	ldrh	r3, [r3, #4]
 800ee72:	4a51      	ldr	r2, [pc, #324]	@ (800efb8 <sen5x_printvalues+0x1c4>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d017      	beq.n	800eea8 <sen5x_printvalues+0xb4>
        Info("Mass concentration pm4p0: %.1f µg/m³", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 800ee78:	4b4e      	ldr	r3, [pc, #312]	@ (800efb4 <sen5x_printvalues+0x1c0>)
 800ee7a:	889b      	ldrh	r3, [r3, #4]
 800ee7c:	0018      	movs	r0, r3
 800ee7e:	f7f2 fcd3 	bl	8001828 <__aeabi_i2f>
 800ee82:	1c03      	adds	r3, r0, #0
 800ee84:	494d      	ldr	r1, [pc, #308]	@ (800efbc <sen5x_printvalues+0x1c8>)
 800ee86:	1c18      	adds	r0, r3, #0
 800ee88:	f7f1 ff0c 	bl	8000ca4 <__aeabi_fdiv>
 800ee8c:	1c03      	adds	r3, r0, #0
 800ee8e:	1c18      	adds	r0, r3, #0
 800ee90:	f7f4 fd00 	bl	8003894 <__aeabi_f2d>
 800ee94:	0002      	movs	r2, r0
 800ee96:	000b      	movs	r3, r1
 800ee98:	484c      	ldr	r0, [pc, #304]	@ (800efcc <sen5x_printvalues+0x1d8>)
 800ee9a:	494a      	ldr	r1, [pc, #296]	@ (800efc4 <sen5x_printvalues+0x1d0>)
 800ee9c:	9200      	str	r2, [sp, #0]
 800ee9e:	9301      	str	r3, [sp, #4]
 800eea0:	0002      	movs	r2, r0
 800eea2:	2002      	movs	r0, #2
 800eea4:	f005 f8d6 	bl	8014054 <CreateLine>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800eea8:	4b42      	ldr	r3, [pc, #264]	@ (800efb4 <sen5x_printvalues+0x1c0>)
 800eeaa:	88db      	ldrh	r3, [r3, #6]
 800eeac:	4a42      	ldr	r2, [pc, #264]	@ (800efb8 <sen5x_printvalues+0x1c4>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d017      	beq.n	800eee2 <sen5x_printvalues+0xee>
        Info("Mass concentration pm10p0: %.1f µg/m³", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800eeb2:	4b40      	ldr	r3, [pc, #256]	@ (800efb4 <sen5x_printvalues+0x1c0>)
 800eeb4:	88db      	ldrh	r3, [r3, #6]
 800eeb6:	0018      	movs	r0, r3
 800eeb8:	f7f2 fcb6 	bl	8001828 <__aeabi_i2f>
 800eebc:	1c03      	adds	r3, r0, #0
 800eebe:	493f      	ldr	r1, [pc, #252]	@ (800efbc <sen5x_printvalues+0x1c8>)
 800eec0:	1c18      	adds	r0, r3, #0
 800eec2:	f7f1 feef 	bl	8000ca4 <__aeabi_fdiv>
 800eec6:	1c03      	adds	r3, r0, #0
 800eec8:	1c18      	adds	r0, r3, #0
 800eeca:	f7f4 fce3 	bl	8003894 <__aeabi_f2d>
 800eece:	0002      	movs	r2, r0
 800eed0:	000b      	movs	r3, r1
 800eed2:	483f      	ldr	r0, [pc, #252]	@ (800efd0 <sen5x_printvalues+0x1dc>)
 800eed4:	493b      	ldr	r1, [pc, #236]	@ (800efc4 <sen5x_printvalues+0x1d0>)
 800eed6:	9200      	str	r2, [sp, #0]
 800eed8:	9301      	str	r3, [sp, #4]
 800eeda:	0002      	movs	r2, r0
 800eedc:	2002      	movs	r0, #2
 800eede:	f005 f8b9 	bl	8014054 <CreateLine>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800eee2:	4b34      	ldr	r3, [pc, #208]	@ (800efb4 <sen5x_printvalues+0x1c0>)
 800eee4:	2208      	movs	r2, #8
 800eee6:	5e9b      	ldrsh	r3, [r3, r2]
 800eee8:	4a3a      	ldr	r2, [pc, #232]	@ (800efd4 <sen5x_printvalues+0x1e0>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d018      	beq.n	800ef20 <sen5x_printvalues+0x12c>
        Info("sen5x Ambient humidity: %.1f %%RH", sen5x_data.ambient_humidity / 100.0f);
 800eeee:	4b31      	ldr	r3, [pc, #196]	@ (800efb4 <sen5x_printvalues+0x1c0>)
 800eef0:	2208      	movs	r2, #8
 800eef2:	5e9b      	ldrsh	r3, [r3, r2]
 800eef4:	0018      	movs	r0, r3
 800eef6:	f7f2 fc97 	bl	8001828 <__aeabi_i2f>
 800eefa:	1c03      	adds	r3, r0, #0
 800eefc:	4936      	ldr	r1, [pc, #216]	@ (800efd8 <sen5x_printvalues+0x1e4>)
 800eefe:	1c18      	adds	r0, r3, #0
 800ef00:	f7f1 fed0 	bl	8000ca4 <__aeabi_fdiv>
 800ef04:	1c03      	adds	r3, r0, #0
 800ef06:	1c18      	adds	r0, r3, #0
 800ef08:	f7f4 fcc4 	bl	8003894 <__aeabi_f2d>
 800ef0c:	0002      	movs	r2, r0
 800ef0e:	000b      	movs	r3, r1
 800ef10:	4832      	ldr	r0, [pc, #200]	@ (800efdc <sen5x_printvalues+0x1e8>)
 800ef12:	492c      	ldr	r1, [pc, #176]	@ (800efc4 <sen5x_printvalues+0x1d0>)
 800ef14:	9200      	str	r2, [sp, #0]
 800ef16:	9301      	str	r3, [sp, #4]
 800ef18:	0002      	movs	r2, r0
 800ef1a:	2002      	movs	r0, #2
 800ef1c:	f005 f89a 	bl	8014054 <CreateLine>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 800ef20:	4b24      	ldr	r3, [pc, #144]	@ (800efb4 <sen5x_printvalues+0x1c0>)
 800ef22:	220a      	movs	r2, #10
 800ef24:	5e9b      	ldrsh	r3, [r3, r2]
 800ef26:	4a2b      	ldr	r2, [pc, #172]	@ (800efd4 <sen5x_printvalues+0x1e0>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d018      	beq.n	800ef5e <sen5x_printvalues+0x16a>
        Info("sen5x Ambient temperature: %.1f °C", sen5x_data.ambient_temperature / 200.0f);
 800ef2c:	4b21      	ldr	r3, [pc, #132]	@ (800efb4 <sen5x_printvalues+0x1c0>)
 800ef2e:	220a      	movs	r2, #10
 800ef30:	5e9b      	ldrsh	r3, [r3, r2]
 800ef32:	0018      	movs	r0, r3
 800ef34:	f7f2 fc78 	bl	8001828 <__aeabi_i2f>
 800ef38:	1c03      	adds	r3, r0, #0
 800ef3a:	4929      	ldr	r1, [pc, #164]	@ (800efe0 <sen5x_printvalues+0x1ec>)
 800ef3c:	1c18      	adds	r0, r3, #0
 800ef3e:	f7f1 feb1 	bl	8000ca4 <__aeabi_fdiv>
 800ef42:	1c03      	adds	r3, r0, #0
 800ef44:	1c18      	adds	r0, r3, #0
 800ef46:	f7f4 fca5 	bl	8003894 <__aeabi_f2d>
 800ef4a:	0002      	movs	r2, r0
 800ef4c:	000b      	movs	r3, r1
 800ef4e:	4825      	ldr	r0, [pc, #148]	@ (800efe4 <sen5x_printvalues+0x1f0>)
 800ef50:	491c      	ldr	r1, [pc, #112]	@ (800efc4 <sen5x_printvalues+0x1d0>)
 800ef52:	9200      	str	r2, [sp, #0]
 800ef54:	9301      	str	r3, [sp, #4]
 800ef56:	0002      	movs	r2, r0
 800ef58:	2002      	movs	r0, #2
 800ef5a:	f005 f87b 	bl	8014054 <CreateLine>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 800ef5e:	4b15      	ldr	r3, [pc, #84]	@ (800efb4 <sen5x_printvalues+0x1c0>)
 800ef60:	220c      	movs	r2, #12
 800ef62:	5e9b      	ldrsh	r3, [r3, r2]
 800ef64:	4a1b      	ldr	r2, [pc, #108]	@ (800efd4 <sen5x_printvalues+0x1e0>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d00d      	beq.n	800ef86 <sen5x_printvalues+0x192>
        Info("sen55 VOC index: %d", sen5x_data.voc_index / 10);
 800ef6a:	4b12      	ldr	r3, [pc, #72]	@ (800efb4 <sen5x_printvalues+0x1c0>)
 800ef6c:	220c      	movs	r2, #12
 800ef6e:	5e9b      	ldrsh	r3, [r3, r2]
 800ef70:	210a      	movs	r1, #10
 800ef72:	0018      	movs	r0, r3
 800ef74:	f7f1 f9a0 	bl	80002b8 <__divsi3>
 800ef78:	0003      	movs	r3, r0
 800ef7a:	b21b      	sxth	r3, r3
 800ef7c:	4a1a      	ldr	r2, [pc, #104]	@ (800efe8 <sen5x_printvalues+0x1f4>)
 800ef7e:	4911      	ldr	r1, [pc, #68]	@ (800efc4 <sen5x_printvalues+0x1d0>)
 800ef80:	2002      	movs	r0, #2
 800ef82:	f005 f867 	bl	8014054 <CreateLine>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800ef86:	4b0b      	ldr	r3, [pc, #44]	@ (800efb4 <sen5x_printvalues+0x1c0>)
 800ef88:	220e      	movs	r2, #14
 800ef8a:	5e9b      	ldrsh	r3, [r3, r2]
 800ef8c:	4a11      	ldr	r2, [pc, #68]	@ (800efd4 <sen5x_printvalues+0x1e0>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d00d      	beq.n	800efae <sen5x_printvalues+0x1ba>
        Info("sen55 NOx index: %d", sen5x_data.nox_index / 10);
 800ef92:	4b08      	ldr	r3, [pc, #32]	@ (800efb4 <sen5x_printvalues+0x1c0>)
 800ef94:	220e      	movs	r2, #14
 800ef96:	5e9b      	ldrsh	r3, [r3, r2]
 800ef98:	210a      	movs	r1, #10
 800ef9a:	0018      	movs	r0, r3
 800ef9c:	f7f1 f98c 	bl	80002b8 <__divsi3>
 800efa0:	0003      	movs	r3, r0
 800efa2:	b21b      	sxth	r3, r3
 800efa4:	4a11      	ldr	r2, [pc, #68]	@ (800efec <sen5x_printvalues+0x1f8>)
 800efa6:	4907      	ldr	r1, [pc, #28]	@ (800efc4 <sen5x_printvalues+0x1d0>)
 800efa8:	2002      	movs	r0, #2
 800efaa:	f005 f853 	bl	8014054 <CreateLine>
  }
}
 800efae:	46c0      	nop			@ (mov r8, r8)
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}
 800efb4:	20001184 	.word	0x20001184
 800efb8:	0000ffff 	.word	0x0000ffff
 800efbc:	41200000 	.word	0x41200000
 800efc0:	0802daec 	.word	0x0802daec
 800efc4:	0802d734 	.word	0x0802d734
 800efc8:	0802db14 	.word	0x0802db14
 800efcc:	0802db3c 	.word	0x0802db3c
 800efd0:	0802db64 	.word	0x0802db64
 800efd4:	00007fff 	.word	0x00007fff
 800efd8:	42c80000 	.word	0x42c80000
 800efdc:	0802db8c 	.word	0x0802db8c
 800efe0:	43480000 	.word	0x43480000
 800efe4:	0802dbb0 	.word	0x0802dbb0
 800efe8:	0802dbd4 	.word	0x0802dbd4
 800efec:	0802dbe8 	.word	0x0802dbe8

0800eff0 <sen5xStore>:

void sen5xStore() {
 800eff0:	b5b0      	push	{r4, r5, r7, lr}
 800eff2:	af00      	add	r7, sp, #0
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 800eff4:	4b41      	ldr	r3, [pc, #260]	@ (800f0fc <sen5xStore+0x10c>)
 800eff6:	881b      	ldrh	r3, [r3, #0]
 800eff8:	4a41      	ldr	r2, [pc, #260]	@ (800f100 <sen5xStore+0x110>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d004      	beq.n	800f008 <sen5xStore+0x18>
    setPM1p0(sen5x_data.mass_concentration_pm1p0);
 800effe:	4b3f      	ldr	r3, [pc, #252]	@ (800f0fc <sen5xStore+0x10c>)
 800f000:	881b      	ldrh	r3, [r3, #0]
 800f002:	0018      	movs	r0, r3
 800f004:	f7f5 fe06 	bl	8004c14 <setPM1p0>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 800f008:	4b3c      	ldr	r3, [pc, #240]	@ (800f0fc <sen5xStore+0x10c>)
 800f00a:	885b      	ldrh	r3, [r3, #2]
 800f00c:	4a3c      	ldr	r2, [pc, #240]	@ (800f100 <sen5xStore+0x110>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d004      	beq.n	800f01c <sen5xStore+0x2c>
    setPM2p5(sen5x_data.mass_concentration_pm2p5);
 800f012:	4b3a      	ldr	r3, [pc, #232]	@ (800f0fc <sen5xStore+0x10c>)
 800f014:	885b      	ldrh	r3, [r3, #2]
 800f016:	0018      	movs	r0, r3
 800f018:	f7f5 fe28 	bl	8004c6c <setPM2p5>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 800f01c:	4b37      	ldr	r3, [pc, #220]	@ (800f0fc <sen5xStore+0x10c>)
 800f01e:	889b      	ldrh	r3, [r3, #4]
 800f020:	4a37      	ldr	r2, [pc, #220]	@ (800f100 <sen5xStore+0x110>)
 800f022:	4293      	cmp	r3, r2
 800f024:	d004      	beq.n	800f030 <sen5xStore+0x40>
    setPM4p0(sen5x_data.mass_concentration_pm4p0);
 800f026:	4b35      	ldr	r3, [pc, #212]	@ (800f0fc <sen5xStore+0x10c>)
 800f028:	889b      	ldrh	r3, [r3, #4]
 800f02a:	0018      	movs	r0, r3
 800f02c:	f7f5 fe4a 	bl	8004cc4 <setPM4p0>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800f030:	4b32      	ldr	r3, [pc, #200]	@ (800f0fc <sen5xStore+0x10c>)
 800f032:	88db      	ldrh	r3, [r3, #6]
 800f034:	4a32      	ldr	r2, [pc, #200]	@ (800f100 <sen5xStore+0x110>)
 800f036:	4293      	cmp	r3, r2
 800f038:	d004      	beq.n	800f044 <sen5xStore+0x54>
    setPM10(sen5x_data.mass_concentration_pm10p0);
 800f03a:	4b30      	ldr	r3, [pc, #192]	@ (800f0fc <sen5xStore+0x10c>)
 800f03c:	88db      	ldrh	r3, [r3, #6]
 800f03e:	0018      	movs	r0, r3
 800f040:	f7f5 fe6c 	bl	8004d1c <setPM10>
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 800f044:	4b2f      	ldr	r3, [pc, #188]	@ (800f104 <sen5xStore+0x114>)
 800f046:	791b      	ldrb	r3, [r3, #4]
 800f048:	2b34      	cmp	r3, #52	@ 0x34
 800f04a:	d003      	beq.n	800f054 <sen5xStore+0x64>
 800f04c:	4b2d      	ldr	r3, [pc, #180]	@ (800f104 <sen5xStore+0x114>)
 800f04e:	791b      	ldrb	r3, [r3, #4]
 800f050:	2b35      	cmp	r3, #53	@ 0x35
 800f052:	d14f      	bne.n	800f0f4 <sen5xStore+0x104>
    SetSEN545temphum(sen5x_data.ambient_temperature, sen5x_data.ambient_humidity);
 800f054:	4b29      	ldr	r3, [pc, #164]	@ (800f0fc <sen5xStore+0x10c>)
 800f056:	220a      	movs	r2, #10
 800f058:	5e9b      	ldrsh	r3, [r3, r2]
 800f05a:	0018      	movs	r0, r3
 800f05c:	f7f2 fbe4 	bl	8001828 <__aeabi_i2f>
 800f060:	1c04      	adds	r4, r0, #0
 800f062:	4b26      	ldr	r3, [pc, #152]	@ (800f0fc <sen5xStore+0x10c>)
 800f064:	2208      	movs	r2, #8
 800f066:	5e9b      	ldrsh	r3, [r3, r2]
 800f068:	0018      	movs	r0, r3
 800f06a:	f7f2 fbdd 	bl	8001828 <__aeabi_i2f>
 800f06e:	1c03      	adds	r3, r0, #0
 800f070:	1c19      	adds	r1, r3, #0
 800f072:	1c20      	adds	r0, r4, #0
 800f074:	f7f5 fe9c 	bl	8004db0 <SetSEN545temphum>
    if (!VOCNOx || usbPluggedIn) {
 800f078:	4b23      	ldr	r3, [pc, #140]	@ (800f108 <sen5xStore+0x118>)
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	2201      	movs	r2, #1
 800f07e:	4053      	eors	r3, r2
 800f080:	b2db      	uxtb	r3, r3
 800f082:	2b00      	cmp	r3, #0
 800f084:	d103      	bne.n	800f08e <sen5xStore+0x9e>
 800f086:	4b21      	ldr	r3, [pc, #132]	@ (800f10c <sen5xStore+0x11c>)
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d032      	beq.n	800f0f4 <sen5xStore+0x104>
      if (sen5x_data.voc_index != 0x7fff) {
 800f08e:	4b1b      	ldr	r3, [pc, #108]	@ (800f0fc <sen5xStore+0x10c>)
 800f090:	220c      	movs	r2, #12
 800f092:	5e9b      	ldrsh	r3, [r3, r2]
 800f094:	4a1e      	ldr	r2, [pc, #120]	@ (800f110 <sen5xStore+0x120>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d019      	beq.n	800f0ce <sen5xStore+0xde>
        SetVOCindicator(sen5x_data.voc_index / 10);
 800f09a:	4b18      	ldr	r3, [pc, #96]	@ (800f0fc <sen5xStore+0x10c>)
 800f09c:	220c      	movs	r2, #12
 800f09e:	5e9b      	ldrsh	r3, [r3, r2]
 800f0a0:	210a      	movs	r1, #10
 800f0a2:	0018      	movs	r0, r3
 800f0a4:	f7f1 f908 	bl	80002b8 <__divsi3>
 800f0a8:	0003      	movs	r3, r0
 800f0aa:	b21b      	sxth	r3, r3
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	0018      	movs	r0, r3
 800f0b0:	f003 ff42 	bl	8012f38 <SetVOCindicator>
        setVOC(sen5x_data.voc_index / 10);
 800f0b4:	4b11      	ldr	r3, [pc, #68]	@ (800f0fc <sen5xStore+0x10c>)
 800f0b6:	220c      	movs	r2, #12
 800f0b8:	5e9b      	ldrsh	r3, [r3, r2]
 800f0ba:	210a      	movs	r1, #10
 800f0bc:	0018      	movs	r0, r3
 800f0be:	f7f1 f8fb 	bl	80002b8 <__divsi3>
 800f0c2:	0003      	movs	r3, r0
 800f0c4:	b21b      	sxth	r3, r3
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	0018      	movs	r0, r3
 800f0ca:	f7f5 fd1b 	bl	8004b04 <setVOC>
      }
      if (sen5x_data.nox_index != 0x7fff) {
 800f0ce:	4b0b      	ldr	r3, [pc, #44]	@ (800f0fc <sen5xStore+0x10c>)
 800f0d0:	220e      	movs	r2, #14
 800f0d2:	5e9b      	ldrsh	r3, [r3, r2]
 800f0d4:	4a0e      	ldr	r2, [pc, #56]	@ (800f110 <sen5xStore+0x120>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d00c      	beq.n	800f0f4 <sen5xStore+0x104>
        setNOx(sen5x_data.nox_index / 10);
 800f0da:	4b08      	ldr	r3, [pc, #32]	@ (800f0fc <sen5xStore+0x10c>)
 800f0dc:	220e      	movs	r2, #14
 800f0de:	5e9b      	ldrsh	r3, [r3, r2]
 800f0e0:	210a      	movs	r1, #10
 800f0e2:	0018      	movs	r0, r3
 800f0e4:	f7f1 f8e8 	bl	80002b8 <__divsi3>
 800f0e8:	0003      	movs	r3, r0
 800f0ea:	b21b      	sxth	r3, r3
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	0018      	movs	r0, r3
 800f0f0:	f7f5 fe40 	bl	8004d74 <setNOx>
      }
    }
  }
    //    Debug("pm2p5 = %d, pm10p0 = %d, s5xvoci = %d, s5xnoxi = %d", pm2p5, pm10p0, s5xvoci, s5xnoxi);
}
 800f0f4:	46c0      	nop			@ (mov r8, r8)
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bdb0      	pop	{r4, r5, r7, pc}
 800f0fa:	46c0      	nop			@ (mov r8, r8)
 800f0fc:	20001184 	.word	0x20001184
 800f100:	0000ffff 	.word	0x0000ffff
 800f104:	20001174 	.word	0x20001174
 800f108:	20001172 	.word	0x20001172
 800f10c:	20002101 	.word	0x20002101
 800f110:	00007fff 	.word	0x00007fff

0800f114 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800f114:	b590      	push	{r4, r7, lr}
 800f116:	b085      	sub	sp, #20
 800f118:	af02      	add	r7, sp, #8
 800f11a:	6039      	str	r1, [r7, #0]
 800f11c:	0011      	movs	r1, r2
 800f11e:	1dfb      	adds	r3, r7, #7
 800f120:	1c02      	adds	r2, r0, #0
 800f122:	701a      	strb	r2, [r3, #0]
 800f124:	1d3b      	adds	r3, r7, #4
 800f126:	1c0a      	adds	r2, r1, #0
 800f128:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800f12a:	1dfb      	adds	r3, r7, #7
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	b29b      	uxth	r3, r3
 800f130:	18db      	adds	r3, r3, r3
 800f132:	b299      	uxth	r1, r3
 800f134:	1d3b      	adds	r3, r7, #4
 800f136:	881b      	ldrh	r3, [r3, #0]
 800f138:	683a      	ldr	r2, [r7, #0]
 800f13a:	4805      	ldr	r0, [pc, #20]	@ (800f150 <sensirion_i2c_hal_read+0x3c>)
 800f13c:	2464      	movs	r4, #100	@ 0x64
 800f13e:	9400      	str	r4, [sp, #0]
 800f140:	f007 f968 	bl	8016414 <HAL_I2C_Master_Receive>
 800f144:	0003      	movs	r3, r0
 800f146:	b25b      	sxtb	r3, r3
}
 800f148:	0018      	movs	r0, r3
 800f14a:	46bd      	mov	sp, r7
 800f14c:	b003      	add	sp, #12
 800f14e:	bd90      	pop	{r4, r7, pc}
 800f150:	20000f44 	.word	0x20000f44

0800f154 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 800f154:	b590      	push	{r4, r7, lr}
 800f156:	b085      	sub	sp, #20
 800f158:	af02      	add	r7, sp, #8
 800f15a:	6039      	str	r1, [r7, #0]
 800f15c:	0011      	movs	r1, r2
 800f15e:	1dfb      	adds	r3, r7, #7
 800f160:	1c02      	adds	r2, r0, #0
 800f162:	701a      	strb	r2, [r3, #0]
 800f164:	1d3b      	adds	r3, r7, #4
 800f166:	1c0a      	adds	r2, r1, #0
 800f168:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800f16a:	1dfb      	adds	r3, r7, #7
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	b29b      	uxth	r3, r3
 800f170:	18db      	adds	r3, r3, r3
 800f172:	b299      	uxth	r1, r3
 800f174:	1d3b      	adds	r3, r7, #4
 800f176:	881b      	ldrh	r3, [r3, #0]
 800f178:	683a      	ldr	r2, [r7, #0]
 800f17a:	4805      	ldr	r0, [pc, #20]	@ (800f190 <sensirion_i2c_hal_write+0x3c>)
 800f17c:	2464      	movs	r4, #100	@ 0x64
 800f17e:	9400      	str	r4, [sp, #0]
 800f180:	f007 f840 	bl	8016204 <HAL_I2C_Master_Transmit>
 800f184:	0003      	movs	r3, r0
 800f186:	b25b      	sxtb	r3, r3
}
 800f188:	0018      	movs	r0, r3
 800f18a:	46bd      	mov	sp, r7
 800f18c:	b003      	add	sp, #12
 800f18e:	bd90      	pop	{r4, r7, pc}
 800f190:	20000f44 	.word	0x20000f44

0800f194 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	22fa      	movs	r2, #250	@ 0xfa
 800f1a0:	0091      	lsls	r1, r2, #2
 800f1a2:	0018      	movs	r0, r3
 800f1a4:	f7f0 fffe 	bl	80001a4 <__udivsi3>
 800f1a8:	0003      	movs	r3, r0
 800f1aa:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	22fa      	movs	r2, #250	@ 0xfa
 800f1b0:	0091      	lsls	r1, r2, #2
 800f1b2:	0018      	movs	r0, r3
 800f1b4:	f7f1 f87c 	bl	80002b0 <__aeabi_uidivmod>
 800f1b8:	1e0b      	subs	r3, r1, #0
 800f1ba:	d002      	beq.n	800f1c2 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	3301      	adds	r3, #1
 800f1c0:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	0018      	movs	r0, r3
 800f1c6:	f005 fcc7 	bl	8014b58 <HAL_Delay>
}
 800f1ca:	46c0      	nop			@ (mov r8, r8)
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	b004      	add	sp, #16
 800f1d0:	bd80      	pop	{r7, pc}
	...

0800f1d4 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b082      	sub	sp, #8
 800f1d8:	af00      	add	r7, sp, #0
  uint32_t device_status = sen5x_read_device_status(&device_status);
 800f1da:	1d3b      	adds	r3, r7, #4
 800f1dc:	0018      	movs	r0, r3
 800f1de:	f000 fd2b 	bl	800fc38 <sen5x_read_device_status>
 800f1e2:	0003      	movs	r3, r0
 800f1e4:	607b      	str	r3, [r7, #4]
  if (device_status == 0xD206) {
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	4a2c      	ldr	r2, [pc, #176]	@ (800f29c <sen5x_check_for_errors+0xc8>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d107      	bne.n	800f1fe <sen5x_check_for_errors+0x2a>
    Error("Error reading sen5x device status register causes by I2C error");
 800f1ee:	4a2c      	ldr	r2, [pc, #176]	@ (800f2a0 <sen5x_check_for_errors+0xcc>)
 800f1f0:	4b2c      	ldr	r3, [pc, #176]	@ (800f2a4 <sen5x_check_for_errors+0xd0>)
 800f1f2:	0019      	movs	r1, r3
 800f1f4:	2001      	movs	r0, #1
 800f1f6:	f004 ff2d 	bl	8014054 <CreateLine>
    return true;
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	e049      	b.n	800f292 <sen5x_check_for_errors+0xbe>
  }
  if (device_status == 0) {
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d101      	bne.n	800f208 <sen5x_check_for_errors+0x34>
    return false;
 800f204:	2300      	movs	r3, #0
 800f206:	e044      	b.n	800f292 <sen5x_check_for_errors+0xbe>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 800f208:	687a      	ldr	r2, [r7, #4]
 800f20a:	2380      	movs	r3, #128	@ 0x80
 800f20c:	039b      	lsls	r3, r3, #14
 800f20e:	4013      	ands	r3, r2
 800f210:	d005      	beq.n	800f21e <sen5x_check_for_errors+0x4a>
    Debug("sen5x Fan speed out of range");
 800f212:	4a25      	ldr	r2, [pc, #148]	@ (800f2a8 <sen5x_check_for_errors+0xd4>)
 800f214:	4b25      	ldr	r3, [pc, #148]	@ (800f2ac <sen5x_check_for_errors+0xd8>)
 800f216:	0019      	movs	r1, r3
 800f218:	2003      	movs	r0, #3
 800f21a:	f004 ff1b 	bl	8014054 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	2380      	movs	r3, #128	@ 0x80
 800f222:	031b      	lsls	r3, r3, #12
 800f224:	4013      	ands	r3, r2
 800f226:	d005      	beq.n	800f234 <sen5x_check_for_errors+0x60>
    Debug("sen5x Fan cleaning active");
 800f228:	4a21      	ldr	r2, [pc, #132]	@ (800f2b0 <sen5x_check_for_errors+0xdc>)
 800f22a:	4b20      	ldr	r3, [pc, #128]	@ (800f2ac <sen5x_check_for_errors+0xd8>)
 800f22c:	0019      	movs	r1, r3
 800f22e:	2003      	movs	r0, #3
 800f230:	f004 ff10 	bl	8014054 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2280      	movs	r2, #128	@ 0x80
 800f238:	4013      	ands	r3, r2
 800f23a:	d005      	beq.n	800f248 <sen5x_check_for_errors+0x74>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 800f23c:	4a1d      	ldr	r2, [pc, #116]	@ (800f2b4 <sen5x_check_for_errors+0xe0>)
 800f23e:	4b1b      	ldr	r3, [pc, #108]	@ (800f2ac <sen5x_check_for_errors+0xd8>)
 800f240:	0019      	movs	r1, r3
 800f242:	2003      	movs	r0, #3
 800f244:	f004 ff06 	bl	8014054 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2240      	movs	r2, #64	@ 0x40
 800f24c:	4013      	ands	r3, r2
 800f24e:	d005      	beq.n	800f25c <sen5x_check_for_errors+0x88>
    Debug("sen5x RHT communication error");
 800f250:	4a19      	ldr	r2, [pc, #100]	@ (800f2b8 <sen5x_check_for_errors+0xe4>)
 800f252:	4b16      	ldr	r3, [pc, #88]	@ (800f2ac <sen5x_check_for_errors+0xd8>)
 800f254:	0019      	movs	r1, r3
 800f256:	2003      	movs	r0, #3
 800f258:	f004 fefc 	bl	8014054 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2220      	movs	r2, #32
 800f260:	4013      	ands	r3, r2
 800f262:	d005      	beq.n	800f270 <sen5x_check_for_errors+0x9c>
    Debug("sen5x Laser failure");
 800f264:	4a15      	ldr	r2, [pc, #84]	@ (800f2bc <sen5x_check_for_errors+0xe8>)
 800f266:	4b11      	ldr	r3, [pc, #68]	@ (800f2ac <sen5x_check_for_errors+0xd8>)
 800f268:	0019      	movs	r1, r3
 800f26a:	2003      	movs	r0, #3
 800f26c:	f004 fef2 	bl	8014054 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2210      	movs	r2, #16
 800f274:	4013      	ands	r3, r2
 800f276:	d005      	beq.n	800f284 <sen5x_check_for_errors+0xb0>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 800f278:	4a11      	ldr	r2, [pc, #68]	@ (800f2c0 <sen5x_check_for_errors+0xec>)
 800f27a:	4b0c      	ldr	r3, [pc, #48]	@ (800f2ac <sen5x_check_for_errors+0xd8>)
 800f27c:	0019      	movs	r1, r3
 800f27e:	2003      	movs	r0, #3
 800f280:	f004 fee8 	bl	8014054 <CreateLine>
  }
  Debug("Content of SEN5x Device Status Register: 0x%08X", device_status);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	4a0f      	ldr	r2, [pc, #60]	@ (800f2c4 <sen5x_check_for_errors+0xf0>)
 800f288:	4908      	ldr	r1, [pc, #32]	@ (800f2ac <sen5x_check_for_errors+0xd8>)
 800f28a:	2003      	movs	r0, #3
 800f28c:	f004 fee2 	bl	8014054 <CreateLine>
  return true;
 800f290:	2301      	movs	r3, #1
}
 800f292:	0018      	movs	r0, r3
 800f294:	46bd      	mov	sp, r7
 800f296:	b002      	add	sp, #8
 800f298:	bd80      	pop	{r7, pc}
 800f29a:	46c0      	nop			@ (mov r8, r8)
 800f29c:	0000d206 	.word	0x0000d206
 800f2a0:	0802dbfc 	.word	0x0802dbfc
 800f2a4:	0802d7a0 	.word	0x0802d7a0
 800f2a8:	0802dc3c 	.word	0x0802dc3c
 800f2ac:	0802d774 	.word	0x0802d774
 800f2b0:	0802dc5c 	.word	0x0802dc5c
 800f2b4:	0802dc78 	.word	0x0802dc78
 800f2b8:	0802dc9c 	.word	0x0802dc9c
 800f2bc:	0802dcbc 	.word	0x0802dcbc
 800f2c0:	0802dcd0 	.word	0x0802dcd0
 800f2c4:	0802dd0c 	.word	0x0802dd0c

0800f2c8 <set_light_on_state>:

void set_light_on_state(void) {
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 800f2cc:	4b15      	ldr	r3, [pc, #84]	@ (800f324 <set_light_on_state+0x5c>)
 800f2ce:	781b      	ldrb	r3, [r3, #0]
 800f2d0:	2201      	movs	r2, #1
 800f2d2:	4053      	eors	r3, r2
 800f2d4:	b2db      	uxtb	r3, r3
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d008      	beq.n	800f2ec <set_light_on_state+0x24>
    sen5x_Power_On();
 800f2da:	f7ff faf5 	bl	800e8c8 <sen5x_Power_On>
    Debug("sen5x powered on, warming up.");
 800f2de:	4a12      	ldr	r2, [pc, #72]	@ (800f328 <set_light_on_state+0x60>)
 800f2e0:	4b12      	ldr	r3, [pc, #72]	@ (800f32c <set_light_on_state+0x64>)
 800f2e2:	0019      	movs	r1, r3
 800f2e4:	2003      	movs	r0, #3
 800f2e6:	f004 feb5 	bl	8014054 <CreateLine>
 800f2ea:	e00a      	b.n	800f302 <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 800f2ec:	f005 fc2a 	bl	8014b44 <HAL_GetTick>
 800f2f0:	0002      	movs	r2, r0
 800f2f2:	4b0f      	ldr	r3, [pc, #60]	@ (800f330 <set_light_on_state+0x68>)
 800f2f4:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 800f2f6:	4a0f      	ldr	r2, [pc, #60]	@ (800f334 <set_light_on_state+0x6c>)
 800f2f8:	4b0c      	ldr	r3, [pc, #48]	@ (800f32c <set_light_on_state+0x64>)
 800f2fa:	0019      	movs	r1, r3
 800f2fc:	2003      	movs	r0, #3
 800f2fe:	f004 fea9 	bl	8014054 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 800f302:	f7ff fc75 	bl	800ebf0 <sen5x_lightup_measurement>
 800f306:	1e03      	subs	r3, r0, #0
 800f308:	d005      	beq.n	800f316 <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 800f30a:	4a0b      	ldr	r2, [pc, #44]	@ (800f338 <set_light_on_state+0x70>)
 800f30c:	4b0b      	ldr	r3, [pc, #44]	@ (800f33c <set_light_on_state+0x74>)
 800f30e:	0019      	movs	r1, r3
 800f310:	2001      	movs	r0, #1
 800f312:	f004 fe9f 	bl	8014054 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 800f316:	4b0a      	ldr	r3, [pc, #40]	@ (800f340 <set_light_on_state+0x78>)
 800f318:	2203      	movs	r2, #3
 800f31a:	701a      	strb	r2, [r3, #0]
}
 800f31c:	46c0      	nop			@ (mov r8, r8)
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	46c0      	nop			@ (mov r8, r8)
 800f324:	20001171 	.word	0x20001171
 800f328:	0802dd3c 	.word	0x0802dd3c
 800f32c:	0802d774 	.word	0x0802d774
 800f330:	20001180 	.word	0x20001180
 800f334:	0802dd5c 	.word	0x0802dd5c
 800f338:	0802dd74 	.word	0x0802dd74
 800f33c:	0802d7a0 	.word	0x0802d7a0
 800f340:	200000aa 	.word	0x200000aa

0800f344 <sen5x_statemachine>:

void sen5x_statemachine() {
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
  bool data_ready = false;
 800f34a:	1dfb      	adds	r3, r7, #7
 800f34c:	2200      	movs	r2, #0
 800f34e:	701a      	strb	r2, [r3, #0]
  if (TimestampIsReached(sen5xReadTimer)) {
 800f350:	4b92      	ldr	r3, [pc, #584]	@ (800f59c <sen5x_statemachine+0x258>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	0018      	movs	r0, r3
 800f356:	f004 fe27 	bl	8013fa8 <TimestampIsReached>
 800f35a:	1e03      	subs	r3, r0, #0
 800f35c:	d100      	bne.n	800f360 <sen5x_statemachine+0x1c>
 800f35e:	e118      	b.n	800f592 <sen5x_statemachine+0x24e>
    switch (PMsamplesState) {
 800f360:	4b8f      	ldr	r3, [pc, #572]	@ (800f5a0 <sen5x_statemachine+0x25c>)
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	2b05      	cmp	r3, #5
 800f366:	d900      	bls.n	800f36a <sen5x_statemachine+0x26>
 800f368:	e113      	b.n	800f592 <sen5x_statemachine+0x24e>
 800f36a:	009a      	lsls	r2, r3, #2
 800f36c:	4b8d      	ldr	r3, [pc, #564]	@ (800f5a4 <sen5x_statemachine+0x260>)
 800f36e:	18d3      	adds	r3, r2, r3
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 800f374:	4a8c      	ldr	r2, [pc, #560]	@ (800f5a8 <sen5x_statemachine+0x264>)
 800f376:	4b8d      	ldr	r3, [pc, #564]	@ (800f5ac <sen5x_statemachine+0x268>)
 800f378:	0019      	movs	r1, r3
 800f37a:	2001      	movs	r0, #1
 800f37c:	f004 fe6a 	bl	8014054 <CreateLine>
      SetPMSensorStatus(false);
 800f380:	2000      	movs	r0, #0
 800f382:	f7fe f9f7 	bl	800d774 <SetPMSensorStatus>
      DisablePMSensor();
 800f386:	f7fe f979 	bl	800d67c <DisablePMSensor>
      sen5xReadTimer = HAL_GetTick() + SEN5X_DISPLAY_DISABLED_MSG; //some more less then an hour a message when continue operated.
 800f38a:	f005 fbdb 	bl	8014b44 <HAL_GetTick>
 800f38e:	0003      	movs	r3, r0
 800f390:	4a87      	ldr	r2, [pc, #540]	@ (800f5b0 <sen5x_statemachine+0x26c>)
 800f392:	189a      	adds	r2, r3, r2
 800f394:	4b81      	ldr	r3, [pc, #516]	@ (800f59c <sen5x_statemachine+0x258>)
 800f396:	601a      	str	r2, [r3, #0]
      break;
 800f398:	e0fb      	b.n	800f592 <sen5x_statemachine+0x24e>
    case LIGHT_OUT:
      sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f39a:	f005 fbd3 	bl	8014b44 <HAL_GetTick>
 800f39e:	0003      	movs	r3, r0
 800f3a0:	4a84      	ldr	r2, [pc, #528]	@ (800f5b4 <sen5x_statemachine+0x270>)
 800f3a2:	189a      	adds	r2, r3, r2
 800f3a4:	4b7d      	ldr	r3, [pc, #500]	@ (800f59c <sen5x_statemachine+0x258>)
 800f3a6:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 800f3a8:	f7ff ff8e 	bl	800f2c8 <set_light_on_state>
      break;
 800f3ac:	e0f1      	b.n	800f592 <sen5x_statemachine+0x24e>
    case CHECK_SEN5X:
      PMsamplesState = LIGHT_ON;
 800f3ae:	4b7c      	ldr	r3, [pc, #496]	@ (800f5a0 <sen5x_statemachine+0x25c>)
 800f3b0:	2202      	movs	r2, #2
 800f3b2:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800f3b4:	4b80      	ldr	r3, [pc, #512]	@ (800f5b8 <sen5x_statemachine+0x274>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	2b05      	cmp	r3, #5
 800f3ba:	d905      	bls.n	800f3c8 <sen5x_statemachine+0x84>
        PMsamplesState = S5X_DISABLED;
 800f3bc:	4b78      	ldr	r3, [pc, #480]	@ (800f5a0 <sen5x_statemachine+0x25c>)
 800f3be:	2200      	movs	r2, #0
 800f3c0:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f3c2:	f7ff fab1 	bl	800e928 <sen5x_Power_Off>
            sen5xErrors = 0;
            Debug("sen5xErrors reset");
          }
        }
      }
      break;
 800f3c6:	e0e1      	b.n	800f58c <sen5x_statemachine+0x248>
        if (sen5x_check_for_errors()) {
 800f3c8:	f7ff ff04 	bl	800f1d4 <sen5x_check_for_errors>
 800f3cc:	1e03      	subs	r3, r0, #0
 800f3ce:	d028      	beq.n	800f422 <sen5x_statemachine+0xde>
          if (sen5x_device_reset()) {
 800f3d0:	f000 fc84 	bl	800fcdc <sen5x_device_reset>
 800f3d4:	1e03      	subs	r3, r0, #0
 800f3d6:	d018      	beq.n	800f40a <sen5x_statemachine+0xc6>
            Error("Error resetting sen5x");
 800f3d8:	4a78      	ldr	r2, [pc, #480]	@ (800f5bc <sen5x_statemachine+0x278>)
 800f3da:	4b74      	ldr	r3, [pc, #464]	@ (800f5ac <sen5x_statemachine+0x268>)
 800f3dc:	0019      	movs	r1, r3
 800f3de:	2001      	movs	r0, #1
 800f3e0:	f004 fe38 	bl	8014054 <CreateLine>
            sen5xErrors++;
 800f3e4:	4b74      	ldr	r3, [pc, #464]	@ (800f5b8 <sen5x_statemachine+0x274>)
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	3301      	adds	r3, #1
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	4b72      	ldr	r3, [pc, #456]	@ (800f5b8 <sen5x_statemachine+0x274>)
 800f3ee:	701a      	strb	r2, [r3, #0]
            sen5x_Power_Off();  // switch off sen5x for a full reset
 800f3f0:	f7ff fa9a 	bl	800e928 <sen5x_Power_Off>
            sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f3f4:	f005 fba6 	bl	8014b44 <HAL_GetTick>
 800f3f8:	0003      	movs	r3, r0
 800f3fa:	4a6e      	ldr	r2, [pc, #440]	@ (800f5b4 <sen5x_statemachine+0x270>)
 800f3fc:	189a      	adds	r2, r3, r2
 800f3fe:	4b67      	ldr	r3, [pc, #412]	@ (800f59c <sen5x_statemachine+0x258>)
 800f400:	601a      	str	r2, [r3, #0]
            PMsamplesState = SAMPLES_TAKEN;
 800f402:	4b67      	ldr	r3, [pc, #412]	@ (800f5a0 <sen5x_statemachine+0x25c>)
 800f404:	2205      	movs	r2, #5
 800f406:	701a      	strb	r2, [r3, #0]
 800f408:	e005      	b.n	800f416 <sen5x_statemachine+0xd2>
            Info("sen5x reset executed");
 800f40a:	4a6d      	ldr	r2, [pc, #436]	@ (800f5c0 <sen5x_statemachine+0x27c>)
 800f40c:	4b6d      	ldr	r3, [pc, #436]	@ (800f5c4 <sen5x_statemachine+0x280>)
 800f40e:	0019      	movs	r1, r3
 800f410:	2002      	movs	r0, #2
 800f412:	f004 fe1f 	bl	8014054 <CreateLine>
          sen5xReadTimer = HAL_GetTick();
 800f416:	f005 fb95 	bl	8014b44 <HAL_GetTick>
 800f41a:	0002      	movs	r2, r0
 800f41c:	4b5f      	ldr	r3, [pc, #380]	@ (800f59c <sen5x_statemachine+0x258>)
 800f41e:	601a      	str	r2, [r3, #0]
      break;
 800f420:	e0b4      	b.n	800f58c <sen5x_statemachine+0x248>
          if (sen5xErrors != 0) {
 800f422:	4b65      	ldr	r3, [pc, #404]	@ (800f5b8 <sen5x_statemachine+0x274>)
 800f424:	781b      	ldrb	r3, [r3, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d100      	bne.n	800f42c <sen5x_statemachine+0xe8>
 800f42a:	e0af      	b.n	800f58c <sen5x_statemachine+0x248>
            sen5xErrors = 0;
 800f42c:	4b62      	ldr	r3, [pc, #392]	@ (800f5b8 <sen5x_statemachine+0x274>)
 800f42e:	2200      	movs	r2, #0
 800f430:	701a      	strb	r2, [r3, #0]
            Debug("sen5xErrors reset");
 800f432:	4a65      	ldr	r2, [pc, #404]	@ (800f5c8 <sen5x_statemachine+0x284>)
 800f434:	4b65      	ldr	r3, [pc, #404]	@ (800f5cc <sen5x_statemachine+0x288>)
 800f436:	0019      	movs	r1, r3
 800f438:	2003      	movs	r0, #3
 800f43a:	f004 fe0b 	bl	8014054 <CreateLine>
      break;
 800f43e:	e0a5      	b.n	800f58c <sen5x_statemachine+0x248>
    case LIGHT_ON:
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 800f440:	1dfb      	adds	r3, r7, #7
 800f442:	0018      	movs	r0, r3
 800f444:	f000 f966 	bl	800f714 <sen5x_read_data_ready>
      if (data_ready) {
 800f448:	1dfb      	adds	r3, r7, #7
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d038      	beq.n	800f4c2 <sen5x_statemachine+0x17e>
        SetPMIndicator();
 800f450:	f003 fc18 	bl	8012c84 <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 800f454:	4b5e      	ldr	r3, [pc, #376]	@ (800f5d0 <sen5x_statemachine+0x28c>)
 800f456:	0018      	movs	r0, r3
 800f458:	f7ff fc70 	bl	800ed3c <sen5x_read_measurement>
 800f45c:	1e03      	subs	r3, r0, #0
 800f45e:	d017      	beq.n	800f490 <sen5x_statemachine+0x14c>
          Error("Error executing sen5x_read_measured_values()");
 800f460:	4a5c      	ldr	r2, [pc, #368]	@ (800f5d4 <sen5x_statemachine+0x290>)
 800f462:	4b52      	ldr	r3, [pc, #328]	@ (800f5ac <sen5x_statemachine+0x268>)
 800f464:	0019      	movs	r1, r3
 800f466:	2001      	movs	r0, #1
 800f468:	f004 fdf4 	bl	8014054 <CreateLine>
          sen5xErrors++;
 800f46c:	4b52      	ldr	r3, [pc, #328]	@ (800f5b8 <sen5x_statemachine+0x274>)
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	3301      	adds	r3, #1
 800f472:	b2da      	uxtb	r2, r3
 800f474:	4b50      	ldr	r3, [pc, #320]	@ (800f5b8 <sen5x_statemachine+0x274>)
 800f476:	701a      	strb	r2, [r3, #0]
          sen5x_Power_Off();  // switch off sen5x for a full reset
 800f478:	f7ff fa56 	bl	800e928 <sen5x_Power_Off>
          sen5xReadTimer = HAL_GetTick() + SEN5X_STARTUP_DELAY; // wait about 30s when started up
 800f47c:	f005 fb62 	bl	8014b44 <HAL_GetTick>
 800f480:	0003      	movs	r3, r0
 800f482:	4a4c      	ldr	r2, [pc, #304]	@ (800f5b4 <sen5x_statemachine+0x270>)
 800f484:	189a      	adds	r2, r3, r2
 800f486:	4b45      	ldr	r3, [pc, #276]	@ (800f59c <sen5x_statemachine+0x258>)
 800f488:	601a      	str	r2, [r3, #0]
          PMsamplesState = SAMPLES_TAKEN;
 800f48a:	4b45      	ldr	r3, [pc, #276]	@ (800f5a0 <sen5x_statemachine+0x25c>)
 800f48c:	2205      	movs	r2, #5
 800f48e:	701a      	strb	r2, [r3, #0]
        }
        sen5xSamples++;
 800f490:	4b51      	ldr	r3, [pc, #324]	@ (800f5d8 <sen5x_statemachine+0x294>)
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	3301      	adds	r3, #1
 800f496:	b2da      	uxtb	r2, r3
 800f498:	4b4f      	ldr	r3, [pc, #316]	@ (800f5d8 <sen5x_statemachine+0x294>)
 800f49a:	701a      	strb	r2, [r3, #0]
        if (sen5xSamples == 31) { // about two times a minute
 800f49c:	4b4e      	ldr	r3, [pc, #312]	@ (800f5d8 <sen5x_statemachine+0x294>)
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	2b1f      	cmp	r3, #31
 800f4a2:	d102      	bne.n	800f4aa <sen5x_statemachine+0x166>
          sen5xSamples = 0;  // enable display on serial
 800f4a4:	4b4c      	ldr	r3, [pc, #304]	@ (800f5d8 <sen5x_statemachine+0x294>)
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 800f4aa:	4b4b      	ldr	r3, [pc, #300]	@ (800f5d8 <sen5x_statemachine+0x294>)
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	2b01      	cmp	r3, #1
 800f4b0:	d901      	bls.n	800f4b6 <sen5x_statemachine+0x172>
          sen5xStore();
 800f4b2:	f7ff fd9d 	bl	800eff0 <sen5xStore>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 800f4b6:	4b48      	ldr	r3, [pc, #288]	@ (800f5d8 <sen5x_statemachine+0x294>)
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	2b02      	cmp	r3, #2
 800f4bc:	d101      	bne.n	800f4c2 <sen5x_statemachine+0x17e>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 800f4be:	f7ff fc99 	bl	800edf4 <sen5x_printvalues>
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
//          HAL_Delay(1000);
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 800f4c2:	4b46      	ldr	r3, [pc, #280]	@ (800f5dc <sen5x_statemachine+0x298>)
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d103      	bne.n	800f4d2 <sen5x_statemachine+0x18e>
 800f4ca:	4b43      	ldr	r3, [pc, #268]	@ (800f5d8 <sen5x_statemachine+0x294>)
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	2b01      	cmp	r3, #1
 800f4d0:	d95e      	bls.n	800f590 <sen5x_statemachine+0x24c>
        PMsamplesState = CLEAN_FAN;
 800f4d2:	4b33      	ldr	r3, [pc, #204]	@ (800f5a0 <sen5x_statemachine+0x25c>)
 800f4d4:	2204      	movs	r2, #4
 800f4d6:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f4d8:	e05a      	b.n	800f590 <sen5x_statemachine+0x24c>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      if ((weekday == MONDAY ) && (lasthour == 1) && !fanCleaningDone) {
 800f4da:	4b41      	ldr	r3, [pc, #260]	@ (800f5e0 <sen5x_statemachine+0x29c>)
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d11e      	bne.n	800f520 <sen5x_statemachine+0x1dc>
 800f4e2:	4b40      	ldr	r3, [pc, #256]	@ (800f5e4 <sen5x_statemachine+0x2a0>)
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	d11a      	bne.n	800f520 <sen5x_statemachine+0x1dc>
 800f4ea:	4b3f      	ldr	r3, [pc, #252]	@ (800f5e8 <sen5x_statemachine+0x2a4>)
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	2201      	movs	r2, #1
 800f4f0:	4053      	eors	r3, r2
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d013      	beq.n	800f520 <sen5x_statemachine+0x1dc>
        sen5x_start_fan_cleaning();
 800f4f8:	f000 f9f2 	bl	800f8e0 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 800f4fc:	4a3b      	ldr	r2, [pc, #236]	@ (800f5ec <sen5x_statemachine+0x2a8>)
 800f4fe:	4b31      	ldr	r3, [pc, #196]	@ (800f5c4 <sen5x_statemachine+0x280>)
 800f500:	0019      	movs	r1, r3
 800f502:	2002      	movs	r0, #2
 800f504:	f004 fda6 	bl	8014054 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + SEN5X_FAN_CLEANING_PERIOD;  // fan cleaning takes 10 seconds
 800f508:	f005 fb1c 	bl	8014b44 <HAL_GetTick>
 800f50c:	0003      	movs	r3, r0
 800f50e:	4a38      	ldr	r2, [pc, #224]	@ (800f5f0 <sen5x_statemachine+0x2ac>)
 800f510:	189a      	adds	r2, r3, r2
 800f512:	4b22      	ldr	r3, [pc, #136]	@ (800f59c <sen5x_statemachine+0x258>)
 800f514:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 800f516:	4b34      	ldr	r3, [pc, #208]	@ (800f5e8 <sen5x_statemachine+0x2a4>)
 800f518:	2201      	movs	r2, #1
 800f51a:	701a      	strb	r2, [r3, #0]
        sen5x_lightup_measurement();
 800f51c:	f7ff fb68 	bl	800ebf0 <sen5x_lightup_measurement>
      }
      PMsamplesState = SAMPLES_TAKEN;
 800f520:	4b1f      	ldr	r3, [pc, #124]	@ (800f5a0 <sen5x_statemachine+0x25c>)
 800f522:	2205      	movs	r2, #5
 800f524:	701a      	strb	r2, [r3, #0]
      break;
 800f526:	e034      	b.n	800f592 <sen5x_statemachine+0x24e>
    case SAMPLES_TAKEN:
      if (!usbPluggedIn && !userToggle) {
 800f528:	4b2c      	ldr	r3, [pc, #176]	@ (800f5dc <sen5x_statemachine+0x298>)
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	2201      	movs	r2, #1
 800f52e:	4053      	eors	r3, r2
 800f530:	b2db      	uxtb	r3, r3
 800f532:	2b00      	cmp	r3, #0
 800f534:	d01c      	beq.n	800f570 <sen5x_statemachine+0x22c>
 800f536:	4b2f      	ldr	r3, [pc, #188]	@ (800f5f4 <sen5x_statemachine+0x2b0>)
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	2201      	movs	r2, #1
 800f53c:	4053      	eors	r3, r2
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	2b00      	cmp	r3, #0
 800f542:	d015      	beq.n	800f570 <sen5x_statemachine+0x22c>
        if (sen5x_extinguish_measurement()) {
 800f544:	f7ff fba0 	bl	800ec88 <sen5x_extinguish_measurement>
 800f548:	1e03      	subs	r3, r0, #0
 800f54a:	d005      	beq.n	800f558 <sen5x_statemachine+0x214>
          Error("Error executing sen5x_extinguish_measurement()");
 800f54c:	4a2a      	ldr	r2, [pc, #168]	@ (800f5f8 <sen5x_statemachine+0x2b4>)
 800f54e:	4b17      	ldr	r3, [pc, #92]	@ (800f5ac <sen5x_statemachine+0x268>)
 800f550:	0019      	movs	r1, r3
 800f552:	2001      	movs	r0, #1
 800f554:	f004 fd7e 	bl	8014054 <CreateLine>
        }
        sen5xSamples = 0;
 800f558:	4b1f      	ldr	r3, [pc, #124]	@ (800f5d8 <sen5x_statemachine+0x294>)
 800f55a:	2200      	movs	r2, #0
 800f55c:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800f55e:	f7ff f9e3 	bl	800e928 <sen5x_Power_Off>
//        if (!userToggle) {
          SetPMSensorStatus(false);
 800f562:	2000      	movs	r0, #0
 800f564:	f7fe f906 	bl	800d774 <SetPMSensorStatus>
//        }
        PMsamplesState = LIGHT_OUT;
 800f568:	4b0d      	ldr	r3, [pc, #52]	@ (800f5a0 <sen5x_statemachine+0x25c>)
 800f56a:	2201      	movs	r2, #1
 800f56c:	701a      	strb	r2, [r3, #0]
 800f56e:	e002      	b.n	800f576 <sen5x_statemachine+0x232>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 800f570:	4b0b      	ldr	r3, [pc, #44]	@ (800f5a0 <sen5x_statemachine+0x25c>)
 800f572:	2203      	movs	r2, #3
 800f574:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 800f576:	f003 fbab 	bl	8012cd0 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + SEN5X_SAMPLE_INTERVAL;
 800f57a:	f005 fae3 	bl	8014b44 <HAL_GetTick>
 800f57e:	0003      	movs	r3, r0
 800f580:	22fa      	movs	r2, #250	@ 0xfa
 800f582:	0092      	lsls	r2, r2, #2
 800f584:	189a      	adds	r2, r3, r2
 800f586:	4b05      	ldr	r3, [pc, #20]	@ (800f59c <sen5x_statemachine+0x258>)
 800f588:	601a      	str	r2, [r3, #0]
    }
  }
}
 800f58a:	e002      	b.n	800f592 <sen5x_statemachine+0x24e>
      break;
 800f58c:	46c0      	nop			@ (mov r8, r8)
 800f58e:	e000      	b.n	800f592 <sen5x_statemachine+0x24e>
      break;
 800f590:	46c0      	nop			@ (mov r8, r8)
}
 800f592:	46c0      	nop			@ (mov r8, r8)
 800f594:	46bd      	mov	sp, r7
 800f596:	b002      	add	sp, #8
 800f598:	bd80      	pop	{r7, pc}
 800f59a:	46c0      	nop			@ (mov r8, r8)
 800f59c:	20001180 	.word	0x20001180
 800f5a0:	200000aa 	.word	0x200000aa
 800f5a4:	0802e8ac 	.word	0x0802e8ac
 800f5a8:	0802dda0 	.word	0x0802dda0
 800f5ac:	0802d7a0 	.word	0x0802d7a0
 800f5b0:	002fefd8 	.word	0x002fefd8
 800f5b4:	00005910 	.word	0x00005910
 800f5b8:	2000117d 	.word	0x2000117d
 800f5bc:	0802ddd0 	.word	0x0802ddd0
 800f5c0:	0802dde8 	.word	0x0802dde8
 800f5c4:	0802d734 	.word	0x0802d734
 800f5c8:	0802de00 	.word	0x0802de00
 800f5cc:	0802d774 	.word	0x0802d774
 800f5d0:	20001184 	.word	0x20001184
 800f5d4:	0802de14 	.word	0x0802de14
 800f5d8:	2000117c 	.word	0x2000117c
 800f5dc:	20002101 	.word	0x20002101
 800f5e0:	20000dee 	.word	0x20000dee
 800f5e4:	20000ded 	.word	0x20000ded
 800f5e8:	20001170 	.word	0x20001170
 800f5ec:	0802de44 	.word	0x0802de44
 800f5f0:	00002710 	.word	0x00002710
 800f5f4:	20002102 	.word	0x20002102
 800f5f8:	0802de5c 	.word	0x0802de5c

0800f5fc <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 800f5fc:	b590      	push	{r4, r7, lr}
 800f5fe:	b083      	sub	sp, #12
 800f600:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f602:	1dbb      	adds	r3, r7, #6
 800f604:	2200      	movs	r2, #0
 800f606:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 800f608:	1dbc      	adds	r4, r7, #6
 800f60a:	1dbb      	adds	r3, r7, #6
 800f60c:	8819      	ldrh	r1, [r3, #0]
 800f60e:	003b      	movs	r3, r7
 800f610:	2221      	movs	r2, #33	@ 0x21
 800f612:	0018      	movs	r0, r3
 800f614:	f001 fb57 	bl	8010cc6 <sensirion_i2c_add_command_to_buffer>
 800f618:	0003      	movs	r3, r0
 800f61a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f61c:	1d3c      	adds	r4, r7, #4
 800f61e:	1dbb      	adds	r3, r7, #6
 800f620:	881a      	ldrh	r2, [r3, #0]
 800f622:	003b      	movs	r3, r7
 800f624:	0019      	movs	r1, r3
 800f626:	2069      	movs	r0, #105	@ 0x69
 800f628:	f001 fbd1 	bl	8010dce <sensirion_i2c_write_data>
 800f62c:	0003      	movs	r3, r0
 800f62e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f630:	1d3b      	adds	r3, r7, #4
 800f632:	2200      	movs	r2, #0
 800f634:	5e9b      	ldrsh	r3, [r3, r2]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d003      	beq.n	800f642 <sen5x_start_measurement+0x46>
        return error;
 800f63a:	1d3b      	adds	r3, r7, #4
 800f63c:	2200      	movs	r2, #0
 800f63e:	5e9b      	ldrsh	r3, [r3, r2]
 800f640:	e004      	b.n	800f64c <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f642:	4b04      	ldr	r3, [pc, #16]	@ (800f654 <sen5x_start_measurement+0x58>)
 800f644:	0018      	movs	r0, r3
 800f646:	f7ff fda5 	bl	800f194 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f64a:	2300      	movs	r3, #0
}
 800f64c:	0018      	movs	r0, r3
 800f64e:	46bd      	mov	sp, r7
 800f650:	b003      	add	sp, #12
 800f652:	bd90      	pop	{r4, r7, pc}
 800f654:	0000c350 	.word	0x0000c350

0800f658 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 800f658:	b590      	push	{r4, r7, lr}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f65e:	1dbb      	adds	r3, r7, #6
 800f660:	2200      	movs	r2, #0
 800f662:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 800f664:	1dbc      	adds	r4, r7, #6
 800f666:	1dbb      	adds	r3, r7, #6
 800f668:	8819      	ldrh	r1, [r3, #0]
 800f66a:	003b      	movs	r3, r7
 800f66c:	2237      	movs	r2, #55	@ 0x37
 800f66e:	0018      	movs	r0, r3
 800f670:	f001 fb29 	bl	8010cc6 <sensirion_i2c_add_command_to_buffer>
 800f674:	0003      	movs	r3, r0
 800f676:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f678:	1d3c      	adds	r4, r7, #4
 800f67a:	1dbb      	adds	r3, r7, #6
 800f67c:	881a      	ldrh	r2, [r3, #0]
 800f67e:	003b      	movs	r3, r7
 800f680:	0019      	movs	r1, r3
 800f682:	2069      	movs	r0, #105	@ 0x69
 800f684:	f001 fba3 	bl	8010dce <sensirion_i2c_write_data>
 800f688:	0003      	movs	r3, r0
 800f68a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f68c:	1d3b      	adds	r3, r7, #4
 800f68e:	2200      	movs	r2, #0
 800f690:	5e9b      	ldrsh	r3, [r3, r2]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d003      	beq.n	800f69e <sen5x_start_measurement_without_pm+0x46>
        return error;
 800f696:	1d3b      	adds	r3, r7, #4
 800f698:	2200      	movs	r2, #0
 800f69a:	5e9b      	ldrsh	r3, [r3, r2]
 800f69c:	e004      	b.n	800f6a8 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 800f69e:	4b04      	ldr	r3, [pc, #16]	@ (800f6b0 <sen5x_start_measurement_without_pm+0x58>)
 800f6a0:	0018      	movs	r0, r3
 800f6a2:	f7ff fd77 	bl	800f194 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f6a6:	2300      	movs	r3, #0
}
 800f6a8:	0018      	movs	r0, r3
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	b003      	add	sp, #12
 800f6ae:	bd90      	pop	{r4, r7, pc}
 800f6b0:	0000c350 	.word	0x0000c350

0800f6b4 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 800f6b4:	b590      	push	{r4, r7, lr}
 800f6b6:	b083      	sub	sp, #12
 800f6b8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f6ba:	1dbb      	adds	r3, r7, #6
 800f6bc:	2200      	movs	r2, #0
 800f6be:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800f6c0:	1dbc      	adds	r4, r7, #6
 800f6c2:	2382      	movs	r3, #130	@ 0x82
 800f6c4:	005a      	lsls	r2, r3, #1
 800f6c6:	1dbb      	adds	r3, r7, #6
 800f6c8:	8819      	ldrh	r1, [r3, #0]
 800f6ca:	003b      	movs	r3, r7
 800f6cc:	0018      	movs	r0, r3
 800f6ce:	f001 fafa 	bl	8010cc6 <sensirion_i2c_add_command_to_buffer>
 800f6d2:	0003      	movs	r3, r0
 800f6d4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f6d6:	1d3c      	adds	r4, r7, #4
 800f6d8:	1dbb      	adds	r3, r7, #6
 800f6da:	881a      	ldrh	r2, [r3, #0]
 800f6dc:	003b      	movs	r3, r7
 800f6de:	0019      	movs	r1, r3
 800f6e0:	2069      	movs	r0, #105	@ 0x69
 800f6e2:	f001 fb74 	bl	8010dce <sensirion_i2c_write_data>
 800f6e6:	0003      	movs	r3, r0
 800f6e8:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f6ea:	1d3b      	adds	r3, r7, #4
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	5e9b      	ldrsh	r3, [r3, r2]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d003      	beq.n	800f6fc <sen5x_stop_measurement+0x48>
        return error;
 800f6f4:	1d3b      	adds	r3, r7, #4
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	5e9b      	ldrsh	r3, [r3, r2]
 800f6fa:	e004      	b.n	800f706 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800f6fc:	4b04      	ldr	r3, [pc, #16]	@ (800f710 <sen5x_stop_measurement+0x5c>)
 800f6fe:	0018      	movs	r0, r3
 800f700:	f7ff fd48 	bl	800f194 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f704:	2300      	movs	r3, #0
}
 800f706:	0018      	movs	r0, r3
 800f708:	46bd      	mov	sp, r7
 800f70a:	b003      	add	sp, #12
 800f70c:	bd90      	pop	{r4, r7, pc}
 800f70e:	46c0      	nop			@ (mov r8, r8)
 800f710:	00030d40 	.word	0x00030d40

0800f714 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 800f714:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f716:	b085      	sub	sp, #20
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 800f71c:	250e      	movs	r5, #14
 800f71e:	197b      	adds	r3, r7, r5
 800f720:	2200      	movs	r2, #0
 800f722:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 800f724:	197c      	adds	r4, r7, r5
 800f726:	4a22      	ldr	r2, [pc, #136]	@ (800f7b0 <sen5x_read_data_ready+0x9c>)
 800f728:	197b      	adds	r3, r7, r5
 800f72a:	8819      	ldrh	r1, [r3, #0]
 800f72c:	2308      	movs	r3, #8
 800f72e:	18fb      	adds	r3, r7, r3
 800f730:	0018      	movs	r0, r3
 800f732:	f001 fac8 	bl	8010cc6 <sensirion_i2c_add_command_to_buffer>
 800f736:	0003      	movs	r3, r0
 800f738:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f73a:	260c      	movs	r6, #12
 800f73c:	19bc      	adds	r4, r7, r6
 800f73e:	197b      	adds	r3, r7, r5
 800f740:	881a      	ldrh	r2, [r3, #0]
 800f742:	2308      	movs	r3, #8
 800f744:	18fb      	adds	r3, r7, r3
 800f746:	0019      	movs	r1, r3
 800f748:	2069      	movs	r0, #105	@ 0x69
 800f74a:	f001 fb40 	bl	8010dce <sensirion_i2c_write_data>
 800f74e:	0003      	movs	r3, r0
 800f750:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f752:	19bb      	adds	r3, r7, r6
 800f754:	2200      	movs	r2, #0
 800f756:	5e9b      	ldrsh	r3, [r3, r2]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d003      	beq.n	800f764 <sen5x_read_data_ready+0x50>
        return error;
 800f75c:	19bb      	adds	r3, r7, r6
 800f75e:	2200      	movs	r2, #0
 800f760:	5e9b      	ldrsh	r3, [r3, r2]
 800f762:	e020      	b.n	800f7a6 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f764:	4b13      	ldr	r3, [pc, #76]	@ (800f7b4 <sen5x_read_data_ready+0xa0>)
 800f766:	0018      	movs	r0, r3
 800f768:	f7ff fd14 	bl	800f194 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 800f76c:	250c      	movs	r5, #12
 800f76e:	197c      	adds	r4, r7, r5
 800f770:	2308      	movs	r3, #8
 800f772:	18fb      	adds	r3, r7, r3
 800f774:	2202      	movs	r2, #2
 800f776:	0019      	movs	r1, r3
 800f778:	2069      	movs	r0, #105	@ 0x69
 800f77a:	f001 fb40 	bl	8010dfe <sensirion_i2c_read_data_inplace>
 800f77e:	0003      	movs	r3, r0
 800f780:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f782:	197b      	adds	r3, r7, r5
 800f784:	2200      	movs	r2, #0
 800f786:	5e9b      	ldrsh	r3, [r3, r2]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d003      	beq.n	800f794 <sen5x_read_data_ready+0x80>
        return error;
 800f78c:	197b      	adds	r3, r7, r5
 800f78e:	2200      	movs	r2, #0
 800f790:	5e9b      	ldrsh	r3, [r3, r2]
 800f792:	e008      	b.n	800f7a6 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 800f794:	2308      	movs	r3, #8
 800f796:	18fb      	adds	r3, r7, r3
 800f798:	785b      	ldrb	r3, [r3, #1]
 800f79a:	1e5a      	subs	r2, r3, #1
 800f79c:	4193      	sbcs	r3, r2
 800f79e:	b2da      	uxtb	r2, r3
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800f7a4:	2300      	movs	r3, #0
}
 800f7a6:	0018      	movs	r0, r3
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	b005      	add	sp, #20
 800f7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7ae:	46c0      	nop			@ (mov r8, r8)
 800f7b0:	00000202 	.word	0x00000202
 800f7b4:	00004e20 	.word	0x00004e20

0800f7b8 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800f7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7ba:	b08d      	sub	sp, #52	@ 0x34
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	60f8      	str	r0, [r7, #12]
 800f7c0:	60b9      	str	r1, [r7, #8]
 800f7c2:	607a      	str	r2, [r7, #4]
 800f7c4:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800f7c6:	252e      	movs	r5, #46	@ 0x2e
 800f7c8:	197b      	adds	r3, r7, r5
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800f7ce:	197c      	adds	r4, r7, r5
 800f7d0:	23f1      	movs	r3, #241	@ 0xf1
 800f7d2:	009a      	lsls	r2, r3, #2
 800f7d4:	197b      	adds	r3, r7, r5
 800f7d6:	8819      	ldrh	r1, [r3, #0]
 800f7d8:	2314      	movs	r3, #20
 800f7da:	18fb      	adds	r3, r7, r3
 800f7dc:	0018      	movs	r0, r3
 800f7de:	f001 fa72 	bl	8010cc6 <sensirion_i2c_add_command_to_buffer>
 800f7e2:	0003      	movs	r3, r0
 800f7e4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f7e6:	262c      	movs	r6, #44	@ 0x2c
 800f7e8:	19bc      	adds	r4, r7, r6
 800f7ea:	197b      	adds	r3, r7, r5
 800f7ec:	881a      	ldrh	r2, [r3, #0]
 800f7ee:	2314      	movs	r3, #20
 800f7f0:	18fb      	adds	r3, r7, r3
 800f7f2:	0019      	movs	r1, r3
 800f7f4:	2069      	movs	r0, #105	@ 0x69
 800f7f6:	f001 faea 	bl	8010dce <sensirion_i2c_write_data>
 800f7fa:	0003      	movs	r3, r0
 800f7fc:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f7fe:	19bb      	adds	r3, r7, r6
 800f800:	2200      	movs	r2, #0
 800f802:	5e9b      	ldrsh	r3, [r3, r2]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d003      	beq.n	800f810 <sen5x_read_measured_values+0x58>
        return error;
 800f808:	19bb      	adds	r3, r7, r6
 800f80a:	2200      	movs	r2, #0
 800f80c:	5e9b      	ldrsh	r3, [r3, r2]
 800f80e:	e060      	b.n	800f8d2 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800f810:	4b32      	ldr	r3, [pc, #200]	@ (800f8dc <sen5x_read_measured_values+0x124>)
 800f812:	0018      	movs	r0, r3
 800f814:	f7ff fcbe 	bl	800f194 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800f818:	252c      	movs	r5, #44	@ 0x2c
 800f81a:	197c      	adds	r4, r7, r5
 800f81c:	2314      	movs	r3, #20
 800f81e:	18fb      	adds	r3, r7, r3
 800f820:	2210      	movs	r2, #16
 800f822:	0019      	movs	r1, r3
 800f824:	2069      	movs	r0, #105	@ 0x69
 800f826:	f001 faea 	bl	8010dfe <sensirion_i2c_read_data_inplace>
 800f82a:	0003      	movs	r3, r0
 800f82c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f82e:	197b      	adds	r3, r7, r5
 800f830:	2200      	movs	r2, #0
 800f832:	5e9b      	ldrsh	r3, [r3, r2]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d003      	beq.n	800f840 <sen5x_read_measured_values+0x88>
        return error;
 800f838:	197b      	adds	r3, r7, r5
 800f83a:	2200      	movs	r2, #0
 800f83c:	5e9b      	ldrsh	r3, [r3, r2]
 800f83e:	e048      	b.n	800f8d2 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800f840:	2414      	movs	r4, #20
 800f842:	193b      	adds	r3, r7, r4
 800f844:	0018      	movs	r0, r3
 800f846:	f000 fa79 	bl	800fd3c <sensirion_common_bytes_to_uint16_t>
 800f84a:	0003      	movs	r3, r0
 800f84c:	001a      	movs	r2, r3
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 800f852:	193b      	adds	r3, r7, r4
 800f854:	3302      	adds	r3, #2
 800f856:	0018      	movs	r0, r3
 800f858:	f000 fa70 	bl	800fd3c <sensirion_common_bytes_to_uint16_t>
 800f85c:	0003      	movs	r3, r0
 800f85e:	001a      	movs	r2, r3
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 800f864:	193b      	adds	r3, r7, r4
 800f866:	3304      	adds	r3, #4
 800f868:	0018      	movs	r0, r3
 800f86a:	f000 fa67 	bl	800fd3c <sensirion_common_bytes_to_uint16_t>
 800f86e:	0003      	movs	r3, r0
 800f870:	001a      	movs	r2, r3
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 800f876:	193b      	adds	r3, r7, r4
 800f878:	3306      	adds	r3, #6
 800f87a:	0018      	movs	r0, r3
 800f87c:	f000 fa5e 	bl	800fd3c <sensirion_common_bytes_to_uint16_t>
 800f880:	0003      	movs	r3, r0
 800f882:	001a      	movs	r2, r3
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 800f888:	193b      	adds	r3, r7, r4
 800f88a:	3308      	adds	r3, #8
 800f88c:	0018      	movs	r0, r3
 800f88e:	f000 fa82 	bl	800fd96 <sensirion_common_bytes_to_int16_t>
 800f892:	0003      	movs	r3, r0
 800f894:	001a      	movs	r2, r3
 800f896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f898:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 800f89a:	193b      	adds	r3, r7, r4
 800f89c:	330a      	adds	r3, #10
 800f89e:	0018      	movs	r0, r3
 800f8a0:	f000 fa79 	bl	800fd96 <sensirion_common_bytes_to_int16_t>
 800f8a4:	0003      	movs	r3, r0
 800f8a6:	001a      	movs	r2, r3
 800f8a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8aa:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 800f8ac:	193b      	adds	r3, r7, r4
 800f8ae:	330c      	adds	r3, #12
 800f8b0:	0018      	movs	r0, r3
 800f8b2:	f000 fa70 	bl	800fd96 <sensirion_common_bytes_to_int16_t>
 800f8b6:	0003      	movs	r3, r0
 800f8b8:	001a      	movs	r2, r3
 800f8ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8bc:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800f8be:	193b      	adds	r3, r7, r4
 800f8c0:	330e      	adds	r3, #14
 800f8c2:	0018      	movs	r0, r3
 800f8c4:	f000 fa67 	bl	800fd96 <sensirion_common_bytes_to_int16_t>
 800f8c8:	0003      	movs	r3, r0
 800f8ca:	001a      	movs	r2, r3
 800f8cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f8ce:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800f8d0:	2300      	movs	r3, #0
}
 800f8d2:	0018      	movs	r0, r3
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	b00d      	add	sp, #52	@ 0x34
 800f8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8da:	46c0      	nop			@ (mov r8, r8)
 800f8dc:	00004e20 	.word	0x00004e20

0800f8e0 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800f8e0:	b590      	push	{r4, r7, lr}
 800f8e2:	b083      	sub	sp, #12
 800f8e4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800f8e6:	1dbb      	adds	r3, r7, #6
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 800f8ec:	1dbc      	adds	r4, r7, #6
 800f8ee:	4a12      	ldr	r2, [pc, #72]	@ (800f938 <sen5x_start_fan_cleaning+0x58>)
 800f8f0:	1dbb      	adds	r3, r7, #6
 800f8f2:	8819      	ldrh	r1, [r3, #0]
 800f8f4:	003b      	movs	r3, r7
 800f8f6:	0018      	movs	r0, r3
 800f8f8:	f001 f9e5 	bl	8010cc6 <sensirion_i2c_add_command_to_buffer>
 800f8fc:	0003      	movs	r3, r0
 800f8fe:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f900:	1d3c      	adds	r4, r7, #4
 800f902:	1dbb      	adds	r3, r7, #6
 800f904:	881a      	ldrh	r2, [r3, #0]
 800f906:	003b      	movs	r3, r7
 800f908:	0019      	movs	r1, r3
 800f90a:	2069      	movs	r0, #105	@ 0x69
 800f90c:	f001 fa5f 	bl	8010dce <sensirion_i2c_write_data>
 800f910:	0003      	movs	r3, r0
 800f912:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f914:	1d3b      	adds	r3, r7, #4
 800f916:	2200      	movs	r2, #0
 800f918:	5e9b      	ldrsh	r3, [r3, r2]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d003      	beq.n	800f926 <sen5x_start_fan_cleaning+0x46>
        return error;
 800f91e:	1d3b      	adds	r3, r7, #4
 800f920:	2200      	movs	r2, #0
 800f922:	5e9b      	ldrsh	r3, [r3, r2]
 800f924:	e004      	b.n	800f930 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f926:	4b05      	ldr	r3, [pc, #20]	@ (800f93c <sen5x_start_fan_cleaning+0x5c>)
 800f928:	0018      	movs	r0, r3
 800f92a:	f7ff fc33 	bl	800f194 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f92e:	2300      	movs	r3, #0
}
 800f930:	0018      	movs	r0, r3
 800f932:	46bd      	mov	sp, r7
 800f934:	b003      	add	sp, #12
 800f936:	bd90      	pop	{r4, r7, pc}
 800f938:	00005607 	.word	0x00005607
 800f93c:	00004e20 	.word	0x00004e20

0800f940 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800f940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f942:	b087      	sub	sp, #28
 800f944:	af00      	add	r7, sp, #0
 800f946:	0004      	movs	r4, r0
 800f948:	0008      	movs	r0, r1
 800f94a:	0011      	movs	r1, r2
 800f94c:	1dbb      	adds	r3, r7, #6
 800f94e:	1c22      	adds	r2, r4, #0
 800f950:	801a      	strh	r2, [r3, #0]
 800f952:	1d3b      	adds	r3, r7, #4
 800f954:	1c02      	adds	r2, r0, #0
 800f956:	801a      	strh	r2, [r3, #0]
 800f958:	1cbb      	adds	r3, r7, #2
 800f95a:	1c0a      	adds	r2, r1, #0
 800f95c:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800f95e:	2516      	movs	r5, #22
 800f960:	197b      	adds	r3, r7, r5
 800f962:	2200      	movs	r2, #0
 800f964:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800f966:	197c      	adds	r4, r7, r5
 800f968:	4a25      	ldr	r2, [pc, #148]	@ (800fa00 <sen5x_set_temperature_offset_parameters+0xc0>)
 800f96a:	197b      	adds	r3, r7, r5
 800f96c:	8819      	ldrh	r1, [r3, #0]
 800f96e:	2608      	movs	r6, #8
 800f970:	19bb      	adds	r3, r7, r6
 800f972:	0018      	movs	r0, r3
 800f974:	f001 f9a7 	bl	8010cc6 <sensirion_i2c_add_command_to_buffer>
 800f978:	0003      	movs	r3, r0
 800f97a:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800f97c:	197c      	adds	r4, r7, r5
 800f97e:	1dbb      	adds	r3, r7, #6
 800f980:	2200      	movs	r2, #0
 800f982:	5e9a      	ldrsh	r2, [r3, r2]
 800f984:	197b      	adds	r3, r7, r5
 800f986:	8819      	ldrh	r1, [r3, #0]
 800f988:	19bb      	adds	r3, r7, r6
 800f98a:	0018      	movs	r0, r3
 800f98c:	f001 fa06 	bl	8010d9c <sensirion_i2c_add_int16_t_to_buffer>
 800f990:	0003      	movs	r3, r0
 800f992:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800f994:	197c      	adds	r4, r7, r5
 800f996:	1d3b      	adds	r3, r7, #4
 800f998:	2200      	movs	r2, #0
 800f99a:	5e9a      	ldrsh	r2, [r3, r2]
 800f99c:	197b      	adds	r3, r7, r5
 800f99e:	8819      	ldrh	r1, [r3, #0]
 800f9a0:	19bb      	adds	r3, r7, r6
 800f9a2:	0018      	movs	r0, r3
 800f9a4:	f001 f9fa 	bl	8010d9c <sensirion_i2c_add_int16_t_to_buffer>
 800f9a8:	0003      	movs	r3, r0
 800f9aa:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800f9ac:	197c      	adds	r4, r7, r5
 800f9ae:	1cbb      	adds	r3, r7, #2
 800f9b0:	881a      	ldrh	r2, [r3, #0]
 800f9b2:	197b      	adds	r3, r7, r5
 800f9b4:	8819      	ldrh	r1, [r3, #0]
 800f9b6:	19bb      	adds	r3, r7, r6
 800f9b8:	0018      	movs	r0, r3
 800f9ba:	f001 f9b0 	bl	8010d1e <sensirion_i2c_add_uint16_t_to_buffer>
 800f9be:	0003      	movs	r3, r0
 800f9c0:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800f9c2:	2214      	movs	r2, #20
 800f9c4:	18bc      	adds	r4, r7, r2
 800f9c6:	197b      	adds	r3, r7, r5
 800f9c8:	881a      	ldrh	r2, [r3, #0]
 800f9ca:	19bb      	adds	r3, r7, r6
 800f9cc:	0019      	movs	r1, r3
 800f9ce:	2069      	movs	r0, #105	@ 0x69
 800f9d0:	f001 f9fd 	bl	8010dce <sensirion_i2c_write_data>
 800f9d4:	0003      	movs	r3, r0
 800f9d6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800f9d8:	2214      	movs	r2, #20
 800f9da:	18bb      	adds	r3, r7, r2
 800f9dc:	2100      	movs	r1, #0
 800f9de:	5e5b      	ldrsh	r3, [r3, r1]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d003      	beq.n	800f9ec <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800f9e4:	18bb      	adds	r3, r7, r2
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	5e9b      	ldrsh	r3, [r3, r2]
 800f9ea:	e004      	b.n	800f9f6 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800f9ec:	4b05      	ldr	r3, [pc, #20]	@ (800fa04 <sen5x_set_temperature_offset_parameters+0xc4>)
 800f9ee:	0018      	movs	r0, r3
 800f9f0:	f7ff fbd0 	bl	800f194 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800f9f4:	2300      	movs	r3, #0
}
 800f9f6:	0018      	movs	r0, r3
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	b007      	add	sp, #28
 800f9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9fe:	46c0      	nop			@ (mov r8, r8)
 800fa00:	000060b2 	.word	0x000060b2
 800fa04:	00004e20 	.word	0x00004e20

0800fa08 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800fa08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa0a:	b091      	sub	sp, #68	@ 0x44
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	000a      	movs	r2, r1
 800fa12:	1cfb      	adds	r3, r7, #3
 800fa14:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800fa16:	253e      	movs	r5, #62	@ 0x3e
 800fa18:	197b      	adds	r3, r7, r5
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800fa1e:	197c      	adds	r4, r7, r5
 800fa20:	4a22      	ldr	r2, [pc, #136]	@ (800faac <sen5x_get_product_name+0xa4>)
 800fa22:	197b      	adds	r3, r7, r5
 800fa24:	8819      	ldrh	r1, [r3, #0]
 800fa26:	230c      	movs	r3, #12
 800fa28:	18fb      	adds	r3, r7, r3
 800fa2a:	0018      	movs	r0, r3
 800fa2c:	f001 f94b 	bl	8010cc6 <sensirion_i2c_add_command_to_buffer>
 800fa30:	0003      	movs	r3, r0
 800fa32:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fa34:	263c      	movs	r6, #60	@ 0x3c
 800fa36:	19bc      	adds	r4, r7, r6
 800fa38:	197b      	adds	r3, r7, r5
 800fa3a:	881a      	ldrh	r2, [r3, #0]
 800fa3c:	230c      	movs	r3, #12
 800fa3e:	18fb      	adds	r3, r7, r3
 800fa40:	0019      	movs	r1, r3
 800fa42:	2069      	movs	r0, #105	@ 0x69
 800fa44:	f001 f9c3 	bl	8010dce <sensirion_i2c_write_data>
 800fa48:	0003      	movs	r3, r0
 800fa4a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fa4c:	19bb      	adds	r3, r7, r6
 800fa4e:	2200      	movs	r2, #0
 800fa50:	5e9b      	ldrsh	r3, [r3, r2]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d003      	beq.n	800fa5e <sen5x_get_product_name+0x56>
        return error;
 800fa56:	19bb      	adds	r3, r7, r6
 800fa58:	2200      	movs	r2, #0
 800fa5a:	5e9b      	ldrsh	r3, [r3, r2]
 800fa5c:	e021      	b.n	800faa2 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800fa5e:	4b14      	ldr	r3, [pc, #80]	@ (800fab0 <sen5x_get_product_name+0xa8>)
 800fa60:	0018      	movs	r0, r3
 800fa62:	f7ff fb97 	bl	800f194 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800fa66:	253c      	movs	r5, #60	@ 0x3c
 800fa68:	197c      	adds	r4, r7, r5
 800fa6a:	230c      	movs	r3, #12
 800fa6c:	18fb      	adds	r3, r7, r3
 800fa6e:	2220      	movs	r2, #32
 800fa70:	0019      	movs	r1, r3
 800fa72:	2069      	movs	r0, #105	@ 0x69
 800fa74:	f001 f9c3 	bl	8010dfe <sensirion_i2c_read_data_inplace>
 800fa78:	0003      	movs	r3, r0
 800fa7a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fa7c:	197b      	adds	r3, r7, r5
 800fa7e:	2200      	movs	r2, #0
 800fa80:	5e9b      	ldrsh	r3, [r3, r2]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d003      	beq.n	800fa8e <sen5x_get_product_name+0x86>
        return error;
 800fa86:	197b      	adds	r3, r7, r5
 800fa88:	2200      	movs	r2, #0
 800fa8a:	5e9b      	ldrsh	r3, [r3, r2]
 800fa8c:	e009      	b.n	800faa2 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800fa8e:	1cfb      	adds	r3, r7, #3
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	b29a      	uxth	r2, r3
 800fa94:	6879      	ldr	r1, [r7, #4]
 800fa96:	230c      	movs	r3, #12
 800fa98:	18fb      	adds	r3, r7, r3
 800fa9a:	0018      	movs	r0, r3
 800fa9c:	f000 f989 	bl	800fdb2 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800faa0:	2300      	movs	r3, #0
}
 800faa2:	0018      	movs	r0, r3
 800faa4:	46bd      	mov	sp, r7
 800faa6:	b011      	add	sp, #68	@ 0x44
 800faa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faaa:	46c0      	nop			@ (mov r8, r8)
 800faac:	0000d014 	.word	0x0000d014
 800fab0:	0000c350 	.word	0x0000c350

0800fab4 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800fab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fab6:	b091      	sub	sp, #68	@ 0x44
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	000a      	movs	r2, r1
 800fabe:	1cfb      	adds	r3, r7, #3
 800fac0:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800fac2:	253e      	movs	r5, #62	@ 0x3e
 800fac4:	197b      	adds	r3, r7, r5
 800fac6:	2200      	movs	r2, #0
 800fac8:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800faca:	197c      	adds	r4, r7, r5
 800facc:	4a22      	ldr	r2, [pc, #136]	@ (800fb58 <sen5x_get_serial_number+0xa4>)
 800face:	197b      	adds	r3, r7, r5
 800fad0:	8819      	ldrh	r1, [r3, #0]
 800fad2:	230c      	movs	r3, #12
 800fad4:	18fb      	adds	r3, r7, r3
 800fad6:	0018      	movs	r0, r3
 800fad8:	f001 f8f5 	bl	8010cc6 <sensirion_i2c_add_command_to_buffer>
 800fadc:	0003      	movs	r3, r0
 800fade:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fae0:	263c      	movs	r6, #60	@ 0x3c
 800fae2:	19bc      	adds	r4, r7, r6
 800fae4:	197b      	adds	r3, r7, r5
 800fae6:	881a      	ldrh	r2, [r3, #0]
 800fae8:	230c      	movs	r3, #12
 800faea:	18fb      	adds	r3, r7, r3
 800faec:	0019      	movs	r1, r3
 800faee:	2069      	movs	r0, #105	@ 0x69
 800faf0:	f001 f96d 	bl	8010dce <sensirion_i2c_write_data>
 800faf4:	0003      	movs	r3, r0
 800faf6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800faf8:	19bb      	adds	r3, r7, r6
 800fafa:	2200      	movs	r2, #0
 800fafc:	5e9b      	ldrsh	r3, [r3, r2]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d003      	beq.n	800fb0a <sen5x_get_serial_number+0x56>
        return error;
 800fb02:	19bb      	adds	r3, r7, r6
 800fb04:	2200      	movs	r2, #0
 800fb06:	5e9b      	ldrsh	r3, [r3, r2]
 800fb08:	e021      	b.n	800fb4e <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800fb0a:	4b14      	ldr	r3, [pc, #80]	@ (800fb5c <sen5x_get_serial_number+0xa8>)
 800fb0c:	0018      	movs	r0, r3
 800fb0e:	f7ff fb41 	bl	800f194 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800fb12:	253c      	movs	r5, #60	@ 0x3c
 800fb14:	197c      	adds	r4, r7, r5
 800fb16:	230c      	movs	r3, #12
 800fb18:	18fb      	adds	r3, r7, r3
 800fb1a:	2220      	movs	r2, #32
 800fb1c:	0019      	movs	r1, r3
 800fb1e:	2069      	movs	r0, #105	@ 0x69
 800fb20:	f001 f96d 	bl	8010dfe <sensirion_i2c_read_data_inplace>
 800fb24:	0003      	movs	r3, r0
 800fb26:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fb28:	197b      	adds	r3, r7, r5
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	5e9b      	ldrsh	r3, [r3, r2]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d003      	beq.n	800fb3a <sen5x_get_serial_number+0x86>
        return error;
 800fb32:	197b      	adds	r3, r7, r5
 800fb34:	2200      	movs	r2, #0
 800fb36:	5e9b      	ldrsh	r3, [r3, r2]
 800fb38:	e009      	b.n	800fb4e <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800fb3a:	1cfb      	adds	r3, r7, #3
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	b29a      	uxth	r2, r3
 800fb40:	6879      	ldr	r1, [r7, #4]
 800fb42:	230c      	movs	r3, #12
 800fb44:	18fb      	adds	r3, r7, r3
 800fb46:	0018      	movs	r0, r3
 800fb48:	f000 f933 	bl	800fdb2 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800fb4c:	2300      	movs	r3, #0
}
 800fb4e:	0018      	movs	r0, r3
 800fb50:	46bd      	mov	sp, r7
 800fb52:	b011      	add	sp, #68	@ 0x44
 800fb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb56:	46c0      	nop			@ (mov r8, r8)
 800fb58:	0000d033 	.word	0x0000d033
 800fb5c:	0000c350 	.word	0x0000c350

0800fb60 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800fb60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb62:	b089      	sub	sp, #36	@ 0x24
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	60b9      	str	r1, [r7, #8]
 800fb6a:	607a      	str	r2, [r7, #4]
 800fb6c:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800fb6e:	251e      	movs	r5, #30
 800fb70:	197b      	adds	r3, r7, r5
 800fb72:	2200      	movs	r2, #0
 800fb74:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800fb76:	197c      	adds	r4, r7, r5
 800fb78:	23d1      	movs	r3, #209	@ 0xd1
 800fb7a:	021a      	lsls	r2, r3, #8
 800fb7c:	197b      	adds	r3, r7, r5
 800fb7e:	8819      	ldrh	r1, [r3, #0]
 800fb80:	2310      	movs	r3, #16
 800fb82:	18fb      	adds	r3, r7, r3
 800fb84:	0018      	movs	r0, r3
 800fb86:	f001 f89e 	bl	8010cc6 <sensirion_i2c_add_command_to_buffer>
 800fb8a:	0003      	movs	r3, r0
 800fb8c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fb8e:	261c      	movs	r6, #28
 800fb90:	19bc      	adds	r4, r7, r6
 800fb92:	197b      	adds	r3, r7, r5
 800fb94:	881a      	ldrh	r2, [r3, #0]
 800fb96:	2310      	movs	r3, #16
 800fb98:	18fb      	adds	r3, r7, r3
 800fb9a:	0019      	movs	r1, r3
 800fb9c:	2069      	movs	r0, #105	@ 0x69
 800fb9e:	f001 f916 	bl	8010dce <sensirion_i2c_write_data>
 800fba2:	0003      	movs	r3, r0
 800fba4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fba6:	19bb      	adds	r3, r7, r6
 800fba8:	2200      	movs	r2, #0
 800fbaa:	5e9b      	ldrsh	r3, [r3, r2]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d003      	beq.n	800fbb8 <sen5x_get_version+0x58>
        return error;
 800fbb0:	19bb      	adds	r3, r7, r6
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	5e9b      	ldrsh	r3, [r3, r2]
 800fbb6:	e038      	b.n	800fc2a <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800fbb8:	4b1e      	ldr	r3, [pc, #120]	@ (800fc34 <sen5x_get_version+0xd4>)
 800fbba:	0018      	movs	r0, r3
 800fbbc:	f7ff faea 	bl	800f194 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800fbc0:	251c      	movs	r5, #28
 800fbc2:	197c      	adds	r4, r7, r5
 800fbc4:	2310      	movs	r3, #16
 800fbc6:	18fb      	adds	r3, r7, r3
 800fbc8:	2208      	movs	r2, #8
 800fbca:	0019      	movs	r1, r3
 800fbcc:	2069      	movs	r0, #105	@ 0x69
 800fbce:	f001 f916 	bl	8010dfe <sensirion_i2c_read_data_inplace>
 800fbd2:	0003      	movs	r3, r0
 800fbd4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fbd6:	197b      	adds	r3, r7, r5
 800fbd8:	2200      	movs	r2, #0
 800fbda:	5e9b      	ldrsh	r3, [r3, r2]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d003      	beq.n	800fbe8 <sen5x_get_version+0x88>
        return error;
 800fbe0:	197b      	adds	r3, r7, r5
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	5e9b      	ldrsh	r3, [r3, r2]
 800fbe6:	e020      	b.n	800fc2a <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800fbe8:	2110      	movs	r1, #16
 800fbea:	187b      	adds	r3, r7, r1
 800fbec:	781a      	ldrb	r2, [r3, #0]
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800fbf2:	187b      	adds	r3, r7, r1
 800fbf4:	785a      	ldrb	r2, [r3, #1]
 800fbf6:	68bb      	ldr	r3, [r7, #8]
 800fbf8:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800fbfa:	187b      	adds	r3, r7, r1
 800fbfc:	789b      	ldrb	r3, [r3, #2]
 800fbfe:	1e5a      	subs	r2, r3, #1
 800fc00:	4193      	sbcs	r3, r2
 800fc02:	b2da      	uxtb	r2, r3
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800fc08:	187b      	adds	r3, r7, r1
 800fc0a:	78da      	ldrb	r2, [r3, #3]
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800fc10:	187b      	adds	r3, r7, r1
 800fc12:	791a      	ldrb	r2, [r3, #4]
 800fc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc16:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800fc18:	187b      	adds	r3, r7, r1
 800fc1a:	795a      	ldrb	r2, [r3, #5]
 800fc1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc1e:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800fc20:	187b      	adds	r3, r7, r1
 800fc22:	799a      	ldrb	r2, [r3, #6]
 800fc24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc26:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800fc28:	2300      	movs	r3, #0
}
 800fc2a:	0018      	movs	r0, r3
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	b009      	add	sp, #36	@ 0x24
 800fc30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc32:	46c0      	nop			@ (mov r8, r8)
 800fc34:	00004e20 	.word	0x00004e20

0800fc38 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800fc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc3a:	b087      	sub	sp, #28
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800fc40:	2516      	movs	r5, #22
 800fc42:	197b      	adds	r3, r7, r5
 800fc44:	2200      	movs	r2, #0
 800fc46:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800fc48:	197c      	adds	r4, r7, r5
 800fc4a:	4a21      	ldr	r2, [pc, #132]	@ (800fcd0 <sen5x_read_device_status+0x98>)
 800fc4c:	197b      	adds	r3, r7, r5
 800fc4e:	8819      	ldrh	r1, [r3, #0]
 800fc50:	260c      	movs	r6, #12
 800fc52:	19bb      	adds	r3, r7, r6
 800fc54:	0018      	movs	r0, r3
 800fc56:	f001 f836 	bl	8010cc6 <sensirion_i2c_add_command_to_buffer>
 800fc5a:	0003      	movs	r3, r0
 800fc5c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fc5e:	2314      	movs	r3, #20
 800fc60:	18fc      	adds	r4, r7, r3
 800fc62:	197b      	adds	r3, r7, r5
 800fc64:	881a      	ldrh	r2, [r3, #0]
 800fc66:	19bb      	adds	r3, r7, r6
 800fc68:	0019      	movs	r1, r3
 800fc6a:	2069      	movs	r0, #105	@ 0x69
 800fc6c:	f001 f8af 	bl	8010dce <sensirion_i2c_write_data>
 800fc70:	0003      	movs	r3, r0
 800fc72:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fc74:	2314      	movs	r3, #20
 800fc76:	18fb      	adds	r3, r7, r3
 800fc78:	2200      	movs	r2, #0
 800fc7a:	5e9b      	ldrsh	r3, [r3, r2]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d001      	beq.n	800fc84 <sen5x_read_device_status+0x4c>
        return 0xD206;
 800fc80:	4b14      	ldr	r3, [pc, #80]	@ (800fcd4 <sen5x_read_device_status+0x9c>)
 800fc82:	e020      	b.n	800fcc6 <sen5x_read_device_status+0x8e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800fc84:	4b14      	ldr	r3, [pc, #80]	@ (800fcd8 <sen5x_read_device_status+0xa0>)
 800fc86:	0018      	movs	r0, r3
 800fc88:	f7ff fa84 	bl	800f194 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800fc8c:	2514      	movs	r5, #20
 800fc8e:	197c      	adds	r4, r7, r5
 800fc90:	230c      	movs	r3, #12
 800fc92:	18fb      	adds	r3, r7, r3
 800fc94:	2204      	movs	r2, #4
 800fc96:	0019      	movs	r1, r3
 800fc98:	2069      	movs	r0, #105	@ 0x69
 800fc9a:	f001 f8b0 	bl	8010dfe <sensirion_i2c_read_data_inplace>
 800fc9e:	0003      	movs	r3, r0
 800fca0:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fca2:	197b      	adds	r3, r7, r5
 800fca4:	2200      	movs	r2, #0
 800fca6:	5e9b      	ldrsh	r3, [r3, r2]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d003      	beq.n	800fcb4 <sen5x_read_device_status+0x7c>
        return error;
 800fcac:	197b      	adds	r3, r7, r5
 800fcae:	2200      	movs	r2, #0
 800fcb0:	5e9b      	ldrsh	r3, [r3, r2]
 800fcb2:	e008      	b.n	800fcc6 <sen5x_read_device_status+0x8e>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800fcb4:	230c      	movs	r3, #12
 800fcb6:	18fb      	adds	r3, r7, r3
 800fcb8:	0018      	movs	r0, r3
 800fcba:	f000 f853 	bl	800fd64 <sensirion_common_bytes_to_uint32_t>
 800fcbe:	0002      	movs	r2, r0
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800fcc4:	2300      	movs	r3, #0
}
 800fcc6:	0018      	movs	r0, r3
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	b007      	add	sp, #28
 800fccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcce:	46c0      	nop			@ (mov r8, r8)
 800fcd0:	0000d206 	.word	0x0000d206
 800fcd4:	ffffd206 	.word	0xffffd206
 800fcd8:	00004e20 	.word	0x00004e20

0800fcdc <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800fcdc:	b590      	push	{r4, r7, lr}
 800fcde:	b083      	sub	sp, #12
 800fce0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800fce2:	1dbb      	adds	r3, r7, #6
 800fce4:	2200      	movs	r2, #0
 800fce6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800fce8:	1dbc      	adds	r4, r7, #6
 800fcea:	4a12      	ldr	r2, [pc, #72]	@ (800fd34 <sen5x_device_reset+0x58>)
 800fcec:	1dbb      	adds	r3, r7, #6
 800fcee:	8819      	ldrh	r1, [r3, #0]
 800fcf0:	003b      	movs	r3, r7
 800fcf2:	0018      	movs	r0, r3
 800fcf4:	f000 ffe7 	bl	8010cc6 <sensirion_i2c_add_command_to_buffer>
 800fcf8:	0003      	movs	r3, r0
 800fcfa:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800fcfc:	1d3c      	adds	r4, r7, #4
 800fcfe:	1dbb      	adds	r3, r7, #6
 800fd00:	881a      	ldrh	r2, [r3, #0]
 800fd02:	003b      	movs	r3, r7
 800fd04:	0019      	movs	r1, r3
 800fd06:	2069      	movs	r0, #105	@ 0x69
 800fd08:	f001 f861 	bl	8010dce <sensirion_i2c_write_data>
 800fd0c:	0003      	movs	r3, r0
 800fd0e:	8023      	strh	r3, [r4, #0]
    if (error) {
 800fd10:	1d3b      	adds	r3, r7, #4
 800fd12:	2200      	movs	r2, #0
 800fd14:	5e9b      	ldrsh	r3, [r3, r2]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d003      	beq.n	800fd22 <sen5x_device_reset+0x46>
        return error;
 800fd1a:	1d3b      	adds	r3, r7, #4
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	5e9b      	ldrsh	r3, [r3, r2]
 800fd20:	e004      	b.n	800fd2c <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800fd22:	4b05      	ldr	r3, [pc, #20]	@ (800fd38 <sen5x_device_reset+0x5c>)
 800fd24:	0018      	movs	r0, r3
 800fd26:	f7ff fa35 	bl	800f194 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800fd2a:	2300      	movs	r3, #0
}
 800fd2c:	0018      	movs	r0, r3
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	b003      	add	sp, #12
 800fd32:	bd90      	pop	{r4, r7, pc}
 800fd34:	0000d304 	.word	0x0000d304
 800fd38:	00030d40 	.word	0x00030d40

0800fd3c <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	b21b      	sxth	r3, r3
 800fd4a:	021b      	lsls	r3, r3, #8
 800fd4c:	b21a      	sxth	r2, r3
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	3301      	adds	r3, #1
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	b21b      	sxth	r3, r3
 800fd56:	4313      	orrs	r3, r2
 800fd58:	b21b      	sxth	r3, r3
 800fd5a:	b29b      	uxth	r3, r3
}
 800fd5c:	0018      	movs	r0, r3
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	b002      	add	sp, #8
 800fd62:	bd80      	pop	{r7, pc}

0800fd64 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	061a      	lsls	r2, r3, #24
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	3301      	adds	r3, #1
 800fd76:	781b      	ldrb	r3, [r3, #0]
 800fd78:	041b      	lsls	r3, r3, #16
 800fd7a:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	3302      	adds	r3, #2
 800fd80:	781b      	ldrb	r3, [r3, #0]
 800fd82:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800fd84:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800fd86:	687a      	ldr	r2, [r7, #4]
 800fd88:	3203      	adds	r2, #3
 800fd8a:	7812      	ldrb	r2, [r2, #0]
 800fd8c:	4313      	orrs	r3, r2
}
 800fd8e:	0018      	movs	r0, r3
 800fd90:	46bd      	mov	sp, r7
 800fd92:	b002      	add	sp, #8
 800fd94:	bd80      	pop	{r7, pc}

0800fd96 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800fd96:	b580      	push	{r7, lr}
 800fd98:	b082      	sub	sp, #8
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	0018      	movs	r0, r3
 800fda2:	f7ff ffcb 	bl	800fd3c <sensirion_common_bytes_to_uint16_t>
 800fda6:	0003      	movs	r3, r0
 800fda8:	b21b      	sxth	r3, r3
}
 800fdaa:	0018      	movs	r0, r3
 800fdac:	46bd      	mov	sp, r7
 800fdae:	b002      	add	sp, #8
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b086      	sub	sp, #24
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	60f8      	str	r0, [r7, #12]
 800fdba:	60b9      	str	r1, [r7, #8]
 800fdbc:	1dbb      	adds	r3, r7, #6
 800fdbe:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800fdc0:	2316      	movs	r3, #22
 800fdc2:	18fb      	adds	r3, r7, r3
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	801a      	strh	r2, [r3, #0]
 800fdc8:	e00f      	b.n	800fdea <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800fdca:	2016      	movs	r0, #22
 800fdcc:	183b      	adds	r3, r7, r0
 800fdce:	881b      	ldrh	r3, [r3, #0]
 800fdd0:	68fa      	ldr	r2, [r7, #12]
 800fdd2:	18d2      	adds	r2, r2, r3
 800fdd4:	183b      	adds	r3, r7, r0
 800fdd6:	881b      	ldrh	r3, [r3, #0]
 800fdd8:	68b9      	ldr	r1, [r7, #8]
 800fdda:	18cb      	adds	r3, r1, r3
 800fddc:	7812      	ldrb	r2, [r2, #0]
 800fdde:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800fde0:	183b      	adds	r3, r7, r0
 800fde2:	881a      	ldrh	r2, [r3, #0]
 800fde4:	183b      	adds	r3, r7, r0
 800fde6:	3201      	adds	r2, #1
 800fde8:	801a      	strh	r2, [r3, #0]
 800fdea:	2316      	movs	r3, #22
 800fdec:	18fa      	adds	r2, r7, r3
 800fdee:	1dbb      	adds	r3, r7, #6
 800fdf0:	8812      	ldrh	r2, [r2, #0]
 800fdf2:	881b      	ldrh	r3, [r3, #0]
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d3e8      	bcc.n	800fdca <sensirion_common_copy_bytes+0x18>
    }
}
 800fdf8:	46c0      	nop			@ (mov r8, r8)
 800fdfa:	46c0      	nop			@ (mov r8, r8)
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	b006      	add	sp, #24
 800fe00:	bd80      	pop	{r7, pc}
	...

0800fe04 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b084      	sub	sp, #16
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	60f8      	str	r0, [r7, #12]
 800fe0c:	60b9      	str	r1, [r7, #8]
 800fe0e:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	68ba      	ldr	r2, [r7, #8]
 800fe14:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	687a      	ldr	r2, [r7, #4]
 800fe1a:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	2b01      	cmp	r3, #1
 800fe20:	d113      	bne.n	800fe4a <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	22fe      	movs	r2, #254	@ 0xfe
 800fe26:	0592      	lsls	r2, r2, #22
 800fe28:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	4a1a      	ldr	r2, [pc, #104]	@ (800fe98 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800fe2e:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	4a1a      	ldr	r2, [pc, #104]	@ (800fe9c <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800fe34:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	4a19      	ldr	r2, [pc, #100]	@ (800fea0 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800fe3a:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	4a19      	ldr	r2, [pc, #100]	@ (800fea4 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800fe40:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	4a18      	ldr	r2, [pc, #96]	@ (800fea8 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800fe46:	61da      	str	r2, [r3, #28]
 800fe48:	e011      	b.n	800fe6e <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	4a17      	ldr	r2, [pc, #92]	@ (800feac <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800fe4e:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	4a17      	ldr	r2, [pc, #92]	@ (800feb0 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800fe54:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	4a16      	ldr	r2, [pc, #88]	@ (800feb4 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800fe5a:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	4a16      	ldr	r2, [pc, #88]	@ (800feb8 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800fe60:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	4a15      	ldr	r2, [pc, #84]	@ (800febc <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800fe66:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	4a15      	ldr	r2, [pc, #84]	@ (800fec0 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800fe6c:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	4a14      	ldr	r2, [pc, #80]	@ (800fec4 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800fe72:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	4a14      	ldr	r2, [pc, #80]	@ (800fec8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800fe78:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	4a12      	ldr	r2, [pc, #72]	@ (800fec8 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800fe7e:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	4a12      	ldr	r2, [pc, #72]	@ (800fecc <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800fe84:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	0018      	movs	r0, r3
 800fe8a:	f000 f831 	bl	800fef0 <GasIndexAlgorithm_reset>
}
 800fe8e:	46c0      	nop			@ (mov r8, r8)
 800fe90:	46bd      	mov	sp, r7
 800fe92:	b004      	add	sp, #16
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	46c0      	nop			@ (mov r8, r8)
 800fe98:	00002710 	.word	0x00002710
 800fe9c:	44340000 	.word	0x44340000
 800fea0:	46859800 	.word	0x46859800
 800fea4:	46a05000 	.word	0x46a05000
 800fea8:	41f00000 	.word	0x41f00000
 800feac:	42c80000 	.word	0x42c80000
 800feb0:	00004e20 	.word	0x00004e20
 800feb4:	43340000 	.word	0x43340000
 800feb8:	4528c000 	.word	0x4528c000
 800febc:	45a32000 	.word	0x45a32000
 800fec0:	43aa0000 	.word	0x43aa0000
 800fec4:	43660000 	.word	0x43660000
 800fec8:	41400000 	.word	0x41400000
 800fecc:	42480000 	.word	0x42480000

0800fed0 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b082      	sub	sp, #8
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800feda:	22fe      	movs	r2, #254	@ 0xfe
 800fedc:	0592      	lsls	r2, r2, #22
 800fede:	6839      	ldr	r1, [r7, #0]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	0018      	movs	r0, r3
 800fee4:	f7ff ff8e 	bl	800fe04 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800fee8:	46c0      	nop			@ (mov r8, r8)
 800feea:	46bd      	mov	sp, r7
 800feec:	b002      	add	sp, #8
 800feee:	bd80      	pop	{r7, pc}

0800fef0 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b082      	sub	sp, #8
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2200      	movs	r2, #0
 800fefc:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2200      	movs	r2, #0
 800ff02:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2200      	movs	r2, #0
 800ff08:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	0018      	movs	r0, r3
 800ff0e:	f000 f805 	bl	800ff1c <GasIndexAlgorithm__init_instances>
}
 800ff12:	46c0      	nop			@ (mov r8, r8)
 800ff14:	46bd      	mov	sp, r7
 800ff16:	b002      	add	sp, #8
 800ff18:	bd80      	pop	{r7, pc}
	...

0800ff1c <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800ff1c:	b590      	push	{r4, r7, lr}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	0018      	movs	r0, r3
 800ff28:	f000 f8e8 	bl	80100fc <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	0018      	movs	r0, r3
 800ff30:	f000 f9a6 	bl	8010280 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800ff34:	1c04      	adds	r4, r0, #0
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	0018      	movs	r0, r3
 800ff3a:	f000 f9ab 	bl	8010294 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800ff3e:	1c02      	adds	r2, r0, #0
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	1c21      	adds	r1, r4, #0
 800ff44:	0018      	movs	r0, r3
 800ff46:	f000 fc3b 	bl	80107c0 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d107      	bne.n	800ff62 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800ff52:	23fe      	movs	r3, #254	@ 0xfe
 800ff54:	059b      	lsls	r3, r3, #22
 800ff56:	4a0a      	ldr	r2, [pc, #40]	@ (800ff80 <GasIndexAlgorithm__init_instances+0x64>)
 800ff58:	490a      	ldr	r1, [pc, #40]	@ (800ff84 <GasIndexAlgorithm__init_instances+0x68>)
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 fc86 	bl	801086c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800ff60:	e005      	b.n	800ff6e <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800ff62:	4b09      	ldr	r3, [pc, #36]	@ (800ff88 <GasIndexAlgorithm__init_instances+0x6c>)
 800ff64:	4a09      	ldr	r2, [pc, #36]	@ (800ff8c <GasIndexAlgorithm__init_instances+0x70>)
 800ff66:	490a      	ldr	r1, [pc, #40]	@ (800ff90 <GasIndexAlgorithm__init_instances+0x74>)
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f000 fc7f 	bl	801086c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	0018      	movs	r0, r3
 800ff72:	f000 fd35 	bl	80109e0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800ff76:	46c0      	nop			@ (mov r8, r8)
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	b003      	add	sp, #12
 800ff7c:	bd90      	pop	{r4, r7, pc}
 800ff7e:	46c0      	nop			@ (mov r8, r8)
 800ff80:	bc257a78 	.word	0xbc257a78
 800ff84:	44198000 	.word	0x44198000
 800ff88:	42c80000 	.word	0x42c80000
 800ff8c:	bbd4fdf4 	.word	0xbbd4fdf4
 800ff90:	43550000 	.word	0x43550000

0800ff94 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800ff94:	b590      	push	{r4, r7, lr}
 800ff96:	b085      	sub	sp, #20
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffa4:	4952      	ldr	r1, [pc, #328]	@ (80100f0 <GasIndexAlgorithm_process+0x15c>)
 800ffa6:	1c18      	adds	r0, r3, #0
 800ffa8:	f7f0 facc 	bl	8000544 <__aeabi_fcmple>
 800ffac:	1e03      	subs	r3, r0, #0
 800ffae:	d00c      	beq.n	800ffca <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	1c19      	adds	r1, r3, #0
 800ffba:	1c10      	adds	r0, r2, #0
 800ffbc:	f7f0 fc80 	bl	80008c0 <__aeabi_fadd>
 800ffc0:	1c03      	adds	r3, r0, #0
 800ffc2:	1c1a      	adds	r2, r3, #0
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	631a      	str	r2, [r3, #48]	@ 0x30
 800ffc8:	e080      	b.n	80100cc <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	dd25      	ble.n	801001c <GasIndexAlgorithm_process+0x88>
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	4a48      	ldr	r2, [pc, #288]	@ (80100f4 <GasIndexAlgorithm_process+0x160>)
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	dc21      	bgt.n	801001c <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	68db      	ldr	r3, [r3, #12]
 800ffdc:	68ba      	ldr	r2, [r7, #8]
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	dc04      	bgt.n	800ffec <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	68db      	ldr	r3, [r3, #12]
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	60bb      	str	r3, [r7, #8]
 800ffea:	e00d      	b.n	8010008 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	68db      	ldr	r3, [r3, #12]
 800fff0:	4a41      	ldr	r2, [pc, #260]	@ (80100f8 <GasIndexAlgorithm_process+0x164>)
 800fff2:	4694      	mov	ip, r2
 800fff4:	4463      	add	r3, ip
 800fff6:	68ba      	ldr	r2, [r7, #8]
 800fff8:	429a      	cmp	r2, r3
 800fffa:	dd05      	ble.n	8010008 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	68db      	ldr	r3, [r3, #12]
 8010000:	4a3d      	ldr	r2, [pc, #244]	@ (80100f8 <GasIndexAlgorithm_process+0x164>)
 8010002:	4694      	mov	ip, r2
 8010004:	4463      	add	r3, ip
 8010006:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	68db      	ldr	r3, [r3, #12]
 801000c:	68ba      	ldr	r2, [r7, #8]
 801000e:	1ad3      	subs	r3, r2, r3
 8010010:	0018      	movs	r0, r3
 8010012:	f7f1 fc09 	bl	8001828 <__aeabi_i2f>
 8010016:	1c02      	adds	r2, r0, #0
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d005      	beq.n	8010030 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	0018      	movs	r0, r3
 8010028:	f000 f945 	bl	80102b6 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 801002c:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 801002e:	d014      	beq.n	801005a <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	1c11      	adds	r1, r2, #0
 8010038:	0018      	movs	r0, r3
 801003a:	f000 fbd1 	bl	80107e0 <GasIndexAlgorithm__mox_model__process>
 801003e:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	1c11      	adds	r1, r2, #0
 801004c:	0018      	movs	r0, r3
 801004e:	f000 fc25 	bl	801089c <GasIndexAlgorithm__sigmoid_scaled__process>
 8010052:	1c02      	adds	r2, r0, #0
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	639a      	str	r2, [r3, #56]	@ 0x38
 8010058:	e003      	b.n	8010062 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	689a      	ldr	r2, [r3, #8]
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	1c11      	adds	r1, r2, #0
 801006a:	0018      	movs	r0, r3
 801006c:	f000 fcec 	bl	8010a48 <GasIndexAlgorithm__adaptive_lowpass__process>
 8010070:	1c02      	adds	r2, r0, #0
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801007a:	21fc      	movs	r1, #252	@ 0xfc
 801007c:	0589      	lsls	r1, r1, #22
 801007e:	1c18      	adds	r0, r3, #0
 8010080:	f7f0 fa56 	bl	8000530 <__aeabi_fcmplt>
 8010084:	1e03      	subs	r3, r0, #0
 8010086:	d003      	beq.n	8010090 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	22fc      	movs	r2, #252	@ 0xfc
 801008c:	0592      	lsls	r2, r2, #22
 801008e:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010094:	2100      	movs	r1, #0
 8010096:	1c18      	adds	r0, r3, #0
 8010098:	f7f0 fa5e 	bl	8000558 <__aeabi_fcmpgt>
 801009c:	1e03      	subs	r3, r0, #0
 801009e:	d015      	beq.n	80100cc <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	1c11      	adds	r1, r2, #0
 80100a8:	0018      	movs	r0, r3
 80100aa:	f000 fa4f 	bl	801054c <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	0018      	movs	r0, r3
 80100b2:	f000 f8e5 	bl	8010280 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80100b6:	1c04      	adds	r4, r0, #0
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	0018      	movs	r0, r3
 80100bc:	f000 f8ea 	bl	8010294 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80100c0:	1c02      	adds	r2, r0, #0
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	1c21      	adds	r1, r4, #0
 80100c6:	0018      	movs	r0, r3
 80100c8:	f000 fb7a 	bl	80107c0 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100d0:	21fc      	movs	r1, #252	@ 0xfc
 80100d2:	0589      	lsls	r1, r1, #22
 80100d4:	1c18      	adds	r0, r3, #0
 80100d6:	f7f0 fbf3 	bl	80008c0 <__aeabi_fadd>
 80100da:	1c03      	adds	r3, r0, #0
 80100dc:	1c18      	adds	r0, r3, #0
 80100de:	f7f1 fb83 	bl	80017e8 <__aeabi_f2iz>
 80100e2:	0002      	movs	r2, r0
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	601a      	str	r2, [r3, #0]
    return;
 80100e8:	46c0      	nop			@ (mov r8, r8)
}
 80100ea:	46bd      	mov	sp, r7
 80100ec:	b005      	add	sp, #20
 80100ee:	bd90      	pop	{r4, r7, pc}
 80100f0:	42340000 	.word	0x42340000
 80100f4:	0000fde7 	.word	0x0000fde7
 80100f8:	00007fff 	.word	0x00007fff

080100fc <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 80100fc:	b5b0      	push	{r4, r5, r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	223c      	movs	r2, #60	@ 0x3c
 8010108:	2100      	movs	r1, #0
 801010a:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2200      	movs	r2, #0
 8010110:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2200      	movs	r2, #0
 8010116:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	4952      	ldr	r1, [pc, #328]	@ (8010270 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8010126:	1c18      	adds	r0, r3, #0
 8010128:	f7f0 fdbc 	bl	8000ca4 <__aeabi_fdiv>
 801012c:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 801012e:	2188      	movs	r1, #136	@ 0x88
 8010130:	05c9      	lsls	r1, r1, #23
 8010132:	1c18      	adds	r0, r3, #0
 8010134:	f7f0 ff84 	bl	8001040 <__aeabi_fmul>
 8010138:	1c03      	adds	r3, r0, #0
 801013a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	685b      	ldr	r3, [r3, #4]
 8010144:	494a      	ldr	r1, [pc, #296]	@ (8010270 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8010146:	1c18      	adds	r0, r3, #0
 8010148:	f7f0 fdac 	bl	8000ca4 <__aeabi_fdiv>
 801014c:	1c03      	adds	r3, r0, #0
 801014e:	1c19      	adds	r1, r3, #0
 8010150:	1c20      	adds	r0, r4, #0
 8010152:	f7f0 fbb5 	bl	80008c0 <__aeabi_fadd>
 8010156:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8010158:	1c19      	adds	r1, r3, #0
 801015a:	1c28      	adds	r0, r5, #0
 801015c:	f7f0 fda2 	bl	8000ca4 <__aeabi_fdiv>
 8010160:	1c03      	adds	r3, r0, #0
 8010162:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	4940      	ldr	r1, [pc, #256]	@ (8010270 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 801016e:	1c18      	adds	r0, r3, #0
 8010170:	f7f0 fd98 	bl	8000ca4 <__aeabi_fdiv>
 8010174:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8010176:	2185      	movs	r1, #133	@ 0x85
 8010178:	05c9      	lsls	r1, r1, #23
 801017a:	1c18      	adds	r0, r3, #0
 801017c:	f7f0 ff60 	bl	8001040 <__aeabi_fmul>
 8010180:	1c03      	adds	r3, r0, #0
 8010182:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	4938      	ldr	r1, [pc, #224]	@ (8010270 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 801018e:	1c18      	adds	r0, r3, #0
 8010190:	f7f0 fd88 	bl	8000ca4 <__aeabi_fdiv>
 8010194:	1c03      	adds	r3, r0, #0
 8010196:	1c19      	adds	r1, r3, #0
 8010198:	1c20      	adds	r0, r4, #0
 801019a:	f7f0 fb91 	bl	80008c0 <__aeabi_fadd>
 801019e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80101a0:	1c19      	adds	r1, r3, #0
 80101a2:	1c28      	adds	r0, r5, #0
 80101a4:	f7f0 fd7e 	bl	8000ca4 <__aeabi_fdiv>
 80101a8:	1c03      	adds	r3, r0, #0
 80101aa:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	d118      	bne.n	80101ea <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80101bc:	2188      	movs	r1, #136	@ 0x88
 80101be:	05c9      	lsls	r1, r1, #23
 80101c0:	1c18      	adds	r0, r3, #0
 80101c2:	f7f0 ff3d 	bl	8001040 <__aeabi_fmul>
 80101c6:	1c03      	adds	r3, r0, #0
 80101c8:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 80101ce:	4929      	ldr	r1, [pc, #164]	@ (8010274 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 80101d0:	1c18      	adds	r0, r3, #0
 80101d2:	f7f0 fb75 	bl	80008c0 <__aeabi_fadd>
 80101d6:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80101d8:	1c19      	adds	r1, r3, #0
 80101da:	1c20      	adds	r0, r4, #0
 80101dc:	f7f0 fd62 	bl	8000ca4 <__aeabi_fdiv>
 80101e0:	1c03      	adds	r3, r0, #0
 80101e2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80101e8:	e017      	b.n	801021a <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80101ee:	2188      	movs	r1, #136	@ 0x88
 80101f0:	05c9      	lsls	r1, r1, #23
 80101f2:	1c18      	adds	r0, r3, #0
 80101f4:	f7f0 ff24 	bl	8001040 <__aeabi_fmul>
 80101f8:	1c03      	adds	r3, r0, #0
 80101fa:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8010200:	491d      	ldr	r1, [pc, #116]	@ (8010278 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8010202:	1c18      	adds	r0, r3, #0
 8010204:	f7f0 fb5c 	bl	80008c0 <__aeabi_fadd>
 8010208:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 801020a:	1c19      	adds	r1, r3, #0
 801020c:	1c20      	adds	r0, r4, #0
 801020e:	f7f0 fd49 	bl	8000ca4 <__aeabi_fdiv>
 8010212:	1c03      	adds	r3, r0, #0
 8010214:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 801021e:	2185      	movs	r1, #133	@ 0x85
 8010220:	05c9      	lsls	r1, r1, #23
 8010222:	1c18      	adds	r0, r3, #0
 8010224:	f7f0 ff0c 	bl	8001040 <__aeabi_fmul>
 8010228:	1c03      	adds	r3, r0, #0
 801022a:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	685b      	ldr	r3, [r3, #4]
 8010230:	4912      	ldr	r1, [pc, #72]	@ (801027c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8010232:	1c18      	adds	r0, r3, #0
 8010234:	f7f0 fb44 	bl	80008c0 <__aeabi_fadd>
 8010238:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 801023a:	1c19      	adds	r1, r3, #0
 801023c:	1c20      	adds	r0, r4, #0
 801023e:	f7f0 fd31 	bl	8000ca4 <__aeabi_fdiv>
 8010242:	1c03      	adds	r3, r0, #0
 8010244:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2200      	movs	r2, #0
 801024e:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2200      	movs	r2, #0
 8010254:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2200      	movs	r2, #0
 801025a:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2200      	movs	r2, #0
 8010260:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2200      	movs	r2, #0
 8010266:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8010268:	46c0      	nop			@ (mov r8, r8)
 801026a:	46bd      	mov	sp, r7
 801026c:	b002      	add	sp, #8
 801026e:	bdb0      	pop	{r4, r5, r7, pc}
 8010270:	45610000 	.word	0x45610000
 8010274:	44960000 	.word	0x44960000
 8010278:	41a00000 	.word	0x41a00000
 801027c:	451c4000 	.word	0x451c4000

08010280 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8010280:	b580      	push	{r7, lr}
 8010282:	b082      	sub	sp, #8
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 801028c:	1c18      	adds	r0, r3, #0
 801028e:	46bd      	mov	sp, r7
 8010290:	b002      	add	sp, #8
 8010292:	bd80      	pop	{r7, pc}

08010294 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8010294:	b580      	push	{r7, lr}
 8010296:	b082      	sub	sp, #8
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 80102a4:	1c19      	adds	r1, r3, #0
 80102a6:	1c10      	adds	r0, r2, #0
 80102a8:	f7f0 fb0a 	bl	80008c0 <__aeabi_fadd>
 80102ac:	1c03      	adds	r3, r0, #0
}
 80102ae:	1c18      	adds	r0, r3, #0
 80102b0:	46bd      	mov	sp, r7
 80102b2:	b002      	add	sp, #8
 80102b4:	bd80      	pop	{r7, pc}

080102b6 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 80102b6:	b580      	push	{r7, lr}
 80102b8:	b082      	sub	sp, #8
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	223c      	movs	r2, #60	@ 0x3c
 80102c2:	5c9b      	ldrb	r3, [r3, r2]
}
 80102c4:	0018      	movs	r0, r3
 80102c6:	46bd      	mov	sp, r7
 80102c8:	b002      	add	sp, #8
 80102ca:	bd80      	pop	{r7, pc}

080102cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 80102cc:	b5b0      	push	{r4, r5, r7, lr}
 80102ce:	b08c      	sub	sp, #48	@ 0x30
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 80102d8:	1c19      	adds	r1, r3, #0
 80102da:	4895      	ldr	r0, [pc, #596]	@ (8010530 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 80102dc:	f7f1 f80a 	bl	80012f4 <__aeabi_fsub>
 80102e0:	1c03      	adds	r3, r0, #0
 80102e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80102e8:	1c19      	adds	r1, r3, #0
 80102ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80102ec:	f7f0 f934 	bl	8000558 <__aeabi_fcmpgt>
 80102f0:	1e03      	subs	r3, r0, #0
 80102f2:	d00b      	beq.n	801030c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80102fc:	1c19      	adds	r1, r3, #0
 80102fe:	1c10      	adds	r0, r2, #0
 8010300:	f7f0 fade 	bl	80008c0 <__aeabi_fadd>
 8010304:	1c03      	adds	r3, r0, #0
 8010306:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010310:	1c19      	adds	r1, r3, #0
 8010312:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010314:	f7f0 f920 	bl	8000558 <__aeabi_fcmpgt>
 8010318:	1e03      	subs	r3, r0, #0
 801031a:	d00b      	beq.n	8010334 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8010324:	1c19      	adds	r1, r3, #0
 8010326:	1c10      	adds	r0, r2, #0
 8010328:	f7f0 faca 	bl	80008c0 <__aeabi_fadd>
 801032c:	1c03      	adds	r3, r0, #0
 801032e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6959      	ldr	r1, [r3, #20]
 8010338:	4a7e      	ldr	r2, [pc, #504]	@ (8010534 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	0018      	movs	r0, r3
 801033e:	f000 f9f1 	bl	8010724 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	1c11      	adds	r1, r2, #0
 801034a:	0018      	movs	r0, r3
 801034c:	f000 f9fa 	bl	8010744 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010350:	1c03      	adds	r3, r0, #0
 8010352:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8010360:	1c19      	adds	r1, r3, #0
 8010362:	1c10      	adds	r0, r2, #0
 8010364:	f7f0 ffc6 	bl	80012f4 <__aeabi_fsub>
 8010368:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 801036a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801036c:	1c18      	adds	r0, r3, #0
 801036e:	f7f0 fe67 	bl	8001040 <__aeabi_fmul>
 8010372:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8010374:	1c19      	adds	r1, r3, #0
 8010376:	1c20      	adds	r0, r4, #0
 8010378:	f7f0 faa2 	bl	80008c0 <__aeabi_fadd>
 801037c:	1c03      	adds	r3, r0, #0
 801037e:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8010388:	1c19      	adds	r1, r3, #0
 801038a:	486b      	ldr	r0, [pc, #428]	@ (8010538 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 801038c:	f7f0 ffb2 	bl	80012f4 <__aeabi_fsub>
 8010390:	1c03      	adds	r3, r0, #0
 8010392:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	1c11      	adds	r1, r2, #0
 801039c:	0018      	movs	r0, r3
 801039e:	f000 f9d1 	bl	8010744 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80103a2:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 80103a4:	1c19      	adds	r1, r3, #0
 80103a6:	1c28      	adds	r0, r5, #0
 80103a8:	f7f0 fe4a 	bl	8001040 <__aeabi_fmul>
 80103ac:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 80103ae:	1c19      	adds	r1, r3, #0
 80103b0:	1c20      	adds	r0, r4, #0
 80103b2:	f7f0 fa85 	bl	80008c0 <__aeabi_fadd>
 80103b6:	1c03      	adds	r3, r0, #0
 80103b8:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80103ba:	4a60      	ldr	r2, [pc, #384]	@ (801053c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 80103bc:	6a39      	ldr	r1, [r7, #32]
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	0018      	movs	r0, r3
 80103c2:	f000 f9af 	bl	8010724 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	1c11      	adds	r1, r2, #0
 80103ce:	0018      	movs	r0, r3
 80103d0:	f000 f9b8 	bl	8010744 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80103d4:	1c03      	adds	r3, r0, #0
 80103d6:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 80103d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80103da:	69f8      	ldr	r0, [r7, #28]
 80103dc:	f7f0 fe30 	bl	8001040 <__aeabi_fmul>
 80103e0:	1c03      	adds	r3, r0, #0
 80103e2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6999      	ldr	r1, [r3, #24]
 80103ec:	4a51      	ldr	r2, [pc, #324]	@ (8010534 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	0018      	movs	r0, r3
 80103f2:	f000 f997 	bl	8010724 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	1c11      	adds	r1, r2, #0
 80103fe:	0018      	movs	r0, r3
 8010400:	f000 f9a0 	bl	8010744 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010404:	1c03      	adds	r3, r0, #0
 8010406:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8010414:	1c19      	adds	r1, r3, #0
 8010416:	1c10      	adds	r0, r2, #0
 8010418:	f7f0 ff6c 	bl	80012f4 <__aeabi_fsub>
 801041c:	1c03      	adds	r3, r0, #0
 801041e:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8010420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010422:	69b8      	ldr	r0, [r7, #24]
 8010424:	f7f0 ff66 	bl	80012f4 <__aeabi_fsub>
 8010428:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 801042a:	1c19      	adds	r1, r3, #0
 801042c:	1c28      	adds	r0, r5, #0
 801042e:	f7f0 fe07 	bl	8001040 <__aeabi_fmul>
 8010432:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8010434:	1c19      	adds	r1, r3, #0
 8010436:	1c20      	adds	r0, r4, #0
 8010438:	f7f0 fa42 	bl	80008c0 <__aeabi_fadd>
 801043c:	1c03      	adds	r3, r0, #0
 801043e:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8010448:	1c19      	adds	r1, r3, #0
 801044a:	483b      	ldr	r0, [pc, #236]	@ (8010538 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 801044c:	f7f0 ff52 	bl	80012f4 <__aeabi_fsub>
 8010450:	1c03      	adds	r3, r0, #0
 8010452:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	1c11      	adds	r1, r2, #0
 801045c:	0018      	movs	r0, r3
 801045e:	f000 f971 	bl	8010744 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010462:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8010464:	1c19      	adds	r1, r3, #0
 8010466:	1c28      	adds	r0, r5, #0
 8010468:	f7f0 fdea 	bl	8001040 <__aeabi_fmul>
 801046c:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 801046e:	1c19      	adds	r1, r3, #0
 8010470:	1c20      	adds	r0, r4, #0
 8010472:	f7f0 fa25 	bl	80008c0 <__aeabi_fadd>
 8010476:	1c03      	adds	r3, r0, #0
 8010478:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 801047a:	4a30      	ldr	r2, [pc, #192]	@ (801053c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 801047c:	6939      	ldr	r1, [r7, #16]
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	0018      	movs	r0, r3
 8010482:	f000 f94f 	bl	8010724 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	1c11      	adds	r1, r2, #0
 801048e:	0018      	movs	r0, r3
 8010490:	f000 f958 	bl	8010744 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8010494:	1c03      	adds	r3, r0, #0
 8010496:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8010498:	6979      	ldr	r1, [r7, #20]
 801049a:	68f8      	ldr	r0, [r7, #12]
 801049c:	f7f0 fdd0 	bl	8001040 <__aeabi_fmul>
 80104a0:	1c03      	adds	r3, r0, #0
 80104a2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	4923      	ldr	r1, [pc, #140]	@ (8010540 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 80104b2:	1c18      	adds	r0, r3, #0
 80104b4:	f7f0 fbf6 	bl	8000ca4 <__aeabi_fdiv>
 80104b8:	1c03      	adds	r3, r0, #0
 80104ba:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 80104bc:	69f9      	ldr	r1, [r7, #28]
 80104be:	20fe      	movs	r0, #254	@ 0xfe
 80104c0:	0580      	lsls	r0, r0, #22
 80104c2:	f7f0 ff17 	bl	80012f4 <__aeabi_fsub>
 80104c6:	1c03      	adds	r3, r0, #0
 80104c8:	491e      	ldr	r1, [pc, #120]	@ (8010544 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 80104ca:	1c18      	adds	r0, r3, #0
 80104cc:	f7f0 fdb8 	bl	8001040 <__aeabi_fmul>
 80104d0:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 80104d2:	491d      	ldr	r1, [pc, #116]	@ (8010548 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 80104d4:	1c18      	adds	r0, r3, #0
 80104d6:	f7f0 ff0d 	bl	80012f4 <__aeabi_fsub>
 80104da:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 80104dc:	1c19      	adds	r1, r3, #0
 80104de:	1c28      	adds	r0, r5, #0
 80104e0:	f7f0 fdae 	bl	8001040 <__aeabi_fmul>
 80104e4:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80104e6:	1c19      	adds	r1, r3, #0
 80104e8:	1c20      	adds	r0, r4, #0
 80104ea:	f7f0 f9e9 	bl	80008c0 <__aeabi_fadd>
 80104ee:	1c03      	adds	r3, r0, #0
 80104f0:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80104fa:	2100      	movs	r1, #0
 80104fc:	1c18      	adds	r0, r3, #0
 80104fe:	f7f0 f817 	bl	8000530 <__aeabi_fcmplt>
 8010502:	1e03      	subs	r3, r0, #0
 8010504:	d002      	beq.n	801050c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2200      	movs	r2, #0
 801050a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8010514:	1c19      	adds	r1, r3, #0
 8010516:	1c10      	adds	r0, r2, #0
 8010518:	f7f0 f81e 	bl	8000558 <__aeabi_fcmpgt>
 801051c:	1e03      	subs	r3, r0, #0
 801051e:	d100      	bne.n	8010522 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8010520:	e002      	b.n	8010528 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	2200      	movs	r2, #0
 8010526:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8010528:	46c0      	nop			@ (mov r8, r8)
 801052a:	46bd      	mov	sp, r7
 801052c:	b00c      	add	sp, #48	@ 0x30
 801052e:	bdb0      	pop	{r4, r5, r7, pc}
 8010530:	46fffe00 	.word	0x46fffe00
 8010534:	3c23d70a 	.word	0x3c23d70a
 8010538:	43ff0000 	.word	0x43ff0000
 801053c:	3db851ec 	.word	0x3db851ec
 8010540:	42700000 	.word	0x42700000
 8010544:	3fa66666 	.word	0x3fa66666
 8010548:	3e99999a 	.word	0x3e99999a

0801054c <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 801054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801054e:	b087      	sub	sp, #28
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	223c      	movs	r2, #60	@ 0x3c
 801055a:	5c9b      	ldrb	r3, [r3, r2]
 801055c:	2201      	movs	r2, #1
 801055e:	4053      	eors	r3, r2
 8010560:	b2db      	uxtb	r3, r3
 8010562:	2b00      	cmp	r3, #0
 8010564:	d00a      	beq.n	801057c <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	223c      	movs	r2, #60	@ 0x3c
 801056a:	2101      	movs	r1, #1
 801056c:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	683a      	ldr	r2, [r7, #0]
 8010572:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2200      	movs	r2, #0
 8010578:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 801057a:	e0c8      	b.n	801070e <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010580:	4965      	ldr	r1, [pc, #404]	@ (8010718 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8010582:	1c18      	adds	r0, r3, #0
 8010584:	f7ef fff2 	bl	800056c <__aeabi_fcmpge>
 8010588:	1e03      	subs	r3, r0, #0
 801058a:	d107      	bne.n	801059c <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8010590:	4962      	ldr	r1, [pc, #392]	@ (801071c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8010592:	1c18      	adds	r0, r3, #0
 8010594:	f7ef ffd6 	bl	8000544 <__aeabi_fcmple>
 8010598:	1e03      	subs	r3, r0, #0
 801059a:	d00e      	beq.n	80105ba <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 80105a4:	1c19      	adds	r1, r3, #0
 80105a6:	1c10      	adds	r0, r2, #0
 80105a8:	f7f0 f98a 	bl	80008c0 <__aeabi_fadd>
 80105ac:	1c03      	adds	r3, r0, #0
 80105ae:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2200      	movs	r2, #0
 80105b8:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105be:	1c19      	adds	r1, r3, #0
 80105c0:	6838      	ldr	r0, [r7, #0]
 80105c2:	f7f0 fe97 	bl	80012f4 <__aeabi_fsub>
 80105c6:	1c03      	adds	r3, r0, #0
 80105c8:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	0018      	movs	r0, r3
 80105ce:	f7ff fe7d 	bl	80102cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80105d6:	1c19      	adds	r1, r3, #0
 80105d8:	6838      	ldr	r0, [r7, #0]
 80105da:	f7f0 fe8b 	bl	80012f4 <__aeabi_fsub>
 80105de:	1c03      	adds	r3, r0, #0
 80105e0:	2185      	movs	r1, #133	@ 0x85
 80105e2:	05c9      	lsls	r1, r1, #23
 80105e4:	1c18      	adds	r0, r3, #0
 80105e6:	f7f0 fb5d 	bl	8000ca4 <__aeabi_fdiv>
 80105ea:	1c03      	adds	r3, r0, #0
 80105ec:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 80105ee:	2100      	movs	r1, #0
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	f7ef ff9d 	bl	8000530 <__aeabi_fcmplt>
 80105f6:	1e03      	subs	r3, r0, #0
 80105f8:	d008      	beq.n	801060c <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80105fe:	68f9      	ldr	r1, [r7, #12]
 8010600:	1c18      	adds	r0, r3, #0
 8010602:	f7f0 fe77 	bl	80012f4 <__aeabi_fsub>
 8010606:	1c03      	adds	r3, r0, #0
 8010608:	617b      	str	r3, [r7, #20]
 801060a:	e007      	b.n	801061c <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010610:	1c19      	adds	r1, r3, #0
 8010612:	68f8      	ldr	r0, [r7, #12]
 8010614:	f7f0 f954 	bl	80008c0 <__aeabi_fadd>
 8010618:	1c03      	adds	r3, r0, #0
 801061a:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 801061c:	23fe      	movs	r3, #254	@ 0xfe
 801061e:	059b      	lsls	r3, r3, #22
 8010620:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8010622:	493f      	ldr	r1, [pc, #252]	@ (8010720 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8010624:	6978      	ldr	r0, [r7, #20]
 8010626:	f7ef ff97 	bl	8000558 <__aeabi_fcmpgt>
 801062a:	1e03      	subs	r3, r0, #0
 801062c:	d010      	beq.n	8010650 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 801062e:	493c      	ldr	r1, [pc, #240]	@ (8010720 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8010630:	6978      	ldr	r0, [r7, #20]
 8010632:	f7f0 fb37 	bl	8000ca4 <__aeabi_fdiv>
 8010636:	1c03      	adds	r3, r0, #0
 8010638:	1c1c      	adds	r4, r3, #0
 801063a:	4939      	ldr	r1, [pc, #228]	@ (8010720 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 801063c:	6978      	ldr	r0, [r7, #20]
 801063e:	f7f0 fb31 	bl	8000ca4 <__aeabi_fdiv>
 8010642:	1c03      	adds	r3, r0, #0
 8010644:	1c19      	adds	r1, r3, #0
 8010646:	1c20      	adds	r0, r4, #0
 8010648:	f7f0 fcfa 	bl	8001040 <__aeabi_fmul>
 801064c:	1c03      	adds	r3, r0, #0
 801064e:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8010654:	1c19      	adds	r1, r3, #0
 8010656:	2085      	movs	r0, #133	@ 0x85
 8010658:	05c0      	lsls	r0, r0, #23
 801065a:	f7f0 fe4b 	bl	80012f4 <__aeabi_fsub>
 801065e:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8010660:	6939      	ldr	r1, [r7, #16]
 8010662:	1c18      	adds	r0, r3, #0
 8010664:	f7f0 fcec 	bl	8001040 <__aeabi_fmul>
 8010668:	1c03      	adds	r3, r0, #0
 801066a:	1c18      	adds	r0, r3, #0
 801066c:	f018 fe86 	bl	802937c <sqrtf>
 8010670:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 801067a:	2185      	movs	r1, #133	@ 0x85
 801067c:	05c9      	lsls	r1, r1, #23
 801067e:	6938      	ldr	r0, [r7, #16]
 8010680:	f7f0 fcde 	bl	8001040 <__aeabi_fmul>
 8010684:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8010686:	1c19      	adds	r1, r3, #0
 8010688:	1c28      	adds	r0, r5, #0
 801068a:	f7f0 fb0b 	bl	8000ca4 <__aeabi_fdiv>
 801068e:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8010690:	1c19      	adds	r1, r3, #0
 8010692:	1c20      	adds	r0, r4, #0
 8010694:	f7f0 fcd4 	bl	8001040 <__aeabi_fmul>
 8010698:	1c03      	adds	r3, r0, #0
 801069a:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80106a0:	68f9      	ldr	r1, [r7, #12]
 80106a2:	1c18      	adds	r0, r3, #0
 80106a4:	f7f0 fccc 	bl	8001040 <__aeabi_fmul>
 80106a8:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 80106aa:	6939      	ldr	r1, [r7, #16]
 80106ac:	1c18      	adds	r0, r3, #0
 80106ae:	f7f0 faf9 	bl	8000ca4 <__aeabi_fdiv>
 80106b2:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 80106b4:	68f9      	ldr	r1, [r7, #12]
 80106b6:	1c18      	adds	r0, r3, #0
 80106b8:	f7f0 fcc2 	bl	8001040 <__aeabi_fmul>
 80106bc:	1c03      	adds	r3, r0, #0
             sqrtf(
 80106be:	1c19      	adds	r1, r3, #0
 80106c0:	1c20      	adds	r0, r4, #0
 80106c2:	f7f0 f8fd 	bl	80008c0 <__aeabi_fadd>
 80106c6:	1c03      	adds	r3, r0, #0
 80106c8:	1c18      	adds	r0, r3, #0
 80106ca:	f018 fe57 	bl	802937c <sqrtf>
 80106ce:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 80106d0:	1c19      	adds	r1, r3, #0
 80106d2:	1c30      	adds	r0, r6, #0
 80106d4:	f7f0 fcb4 	bl	8001040 <__aeabi_fmul>
 80106d8:	1c03      	adds	r3, r0, #0
 80106da:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80106e8:	68f9      	ldr	r1, [r7, #12]
 80106ea:	1c18      	adds	r0, r3, #0
 80106ec:	f7f0 fca8 	bl	8001040 <__aeabi_fmul>
 80106f0:	1c03      	adds	r3, r0, #0
 80106f2:	2182      	movs	r1, #130	@ 0x82
 80106f4:	05c9      	lsls	r1, r1, #23
 80106f6:	1c18      	adds	r0, r3, #0
 80106f8:	f7f0 fad4 	bl	8000ca4 <__aeabi_fdiv>
 80106fc:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 80106fe:	1c19      	adds	r1, r3, #0
 8010700:	1c20      	adds	r0, r4, #0
 8010702:	f7f0 f8dd 	bl	80008c0 <__aeabi_fadd>
 8010706:	1c03      	adds	r3, r0, #0
 8010708:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 801070e:	46c0      	nop			@ (mov r8, r8)
 8010710:	46bd      	mov	sp, r7
 8010712:	b007      	add	sp, #28
 8010714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010716:	46c0      	nop			@ (mov r8, r8)
 8010718:	42c80000 	.word	0x42c80000
 801071c:	c2c80000 	.word	0xc2c80000
 8010720:	44b40000 	.word	0x44b40000

08010724 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8010724:	b580      	push	{r7, lr}
 8010726:	b084      	sub	sp, #16
 8010728:	af00      	add	r7, sp, #0
 801072a:	60f8      	str	r0, [r7, #12]
 801072c:	60b9      	str	r1, [r7, #8]
 801072e:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	687a      	ldr	r2, [r7, #4]
 8010734:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	68ba      	ldr	r2, [r7, #8]
 801073a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801073c:	46c0      	nop			@ (mov r8, r8)
 801073e:	46bd      	mov	sp, r7
 8010740:	b004      	add	sp, #16
 8010742:	bd80      	pop	{r7, pc}

08010744 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8010744:	b590      	push	{r4, r7, lr}
 8010746:	b085      	sub	sp, #20
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010756:	1c19      	adds	r1, r3, #0
 8010758:	6838      	ldr	r0, [r7, #0]
 801075a:	f7f0 fdcb 	bl	80012f4 <__aeabi_fsub>
 801075e:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8010760:	1c19      	adds	r1, r3, #0
 8010762:	1c20      	adds	r0, r4, #0
 8010764:	f7f0 fc6c 	bl	8001040 <__aeabi_fmul>
 8010768:	1c03      	adds	r3, r0, #0
 801076a:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 801076c:	4912      	ldr	r1, [pc, #72]	@ (80107b8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 801076e:	68f8      	ldr	r0, [r7, #12]
 8010770:	f7ef fede 	bl	8000530 <__aeabi_fcmplt>
 8010774:	1e03      	subs	r3, r0, #0
 8010776:	d002      	beq.n	801077e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8010778:	23fe      	movs	r3, #254	@ 0xfe
 801077a:	059b      	lsls	r3, r3, #22
 801077c:	e018      	b.n	80107b0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 801077e:	490f      	ldr	r1, [pc, #60]	@ (80107bc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8010780:	68f8      	ldr	r0, [r7, #12]
 8010782:	f7ef fee9 	bl	8000558 <__aeabi_fcmpgt>
 8010786:	1e03      	subs	r3, r0, #0
 8010788:	d001      	beq.n	801078e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 801078a:	2300      	movs	r3, #0
 801078c:	e010      	b.n	80107b0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	1c18      	adds	r0, r3, #0
 8010792:	f018 fdcb 	bl	802932c <expf>
 8010796:	1c03      	adds	r3, r0, #0
 8010798:	21fe      	movs	r1, #254	@ 0xfe
 801079a:	0589      	lsls	r1, r1, #22
 801079c:	1c18      	adds	r0, r3, #0
 801079e:	f7f0 f88f 	bl	80008c0 <__aeabi_fadd>
 80107a2:	1c03      	adds	r3, r0, #0
 80107a4:	1c19      	adds	r1, r3, #0
 80107a6:	20fe      	movs	r0, #254	@ 0xfe
 80107a8:	0580      	lsls	r0, r0, #22
 80107aa:	f7f0 fa7b 	bl	8000ca4 <__aeabi_fdiv>
 80107ae:	1c03      	adds	r3, r0, #0
    }
}
 80107b0:	1c18      	adds	r0, r3, #0
 80107b2:	46bd      	mov	sp, r7
 80107b4:	b005      	add	sp, #20
 80107b6:	bd90      	pop	{r4, r7, pc}
 80107b8:	c2480000 	.word	0xc2480000
 80107bc:	42480000 	.word	0x42480000

080107c0 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b084      	sub	sp, #16
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	60f8      	str	r0, [r7, #12]
 80107c8:	60b9      	str	r1, [r7, #8]
 80107ca:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	68ba      	ldr	r2, [r7, #8]
 80107d0:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80107d8:	46c0      	nop			@ (mov r8, r8)
 80107da:	46bd      	mov	sp, r7
 80107dc:	b004      	add	sp, #16
 80107de:	bd80      	pop	{r7, pc}

080107e0 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 80107e0:	b590      	push	{r4, r7, lr}
 80107e2:	b083      	sub	sp, #12
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	2b01      	cmp	r3, #1
 80107f0:	d114      	bne.n	801081c <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80107f6:	1c19      	adds	r1, r3, #0
 80107f8:	6838      	ldr	r0, [r7, #0]
 80107fa:	f7f0 fd7b 	bl	80012f4 <__aeabi_fsub>
 80107fe:	1c03      	adds	r3, r0, #0
 8010800:	4918      	ldr	r1, [pc, #96]	@ (8010864 <GasIndexAlgorithm__mox_model__process+0x84>)
 8010802:	1c18      	adds	r0, r3, #0
 8010804:	f7f0 fa4e 	bl	8000ca4 <__aeabi_fdiv>
 8010808:	1c03      	adds	r3, r0, #0
 801080a:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8010810:	1c19      	adds	r1, r3, #0
 8010812:	1c10      	adds	r0, r2, #0
 8010814:	f7f0 fc14 	bl	8001040 <__aeabi_fmul>
 8010818:	1c03      	adds	r3, r0, #0
 801081a:	e01f      	b.n	801085c <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010820:	1c19      	adds	r1, r3, #0
 8010822:	6838      	ldr	r0, [r7, #0]
 8010824:	f7f0 fd66 	bl	80012f4 <__aeabi_fsub>
 8010828:	1c03      	adds	r3, r0, #0
 801082a:	1c1a      	adds	r2, r3, #0
 801082c:	2380      	movs	r3, #128	@ 0x80
 801082e:	061b      	lsls	r3, r3, #24
 8010830:	4053      	eors	r3, r2
 8010832:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010838:	490b      	ldr	r1, [pc, #44]	@ (8010868 <GasIndexAlgorithm__mox_model__process+0x88>)
 801083a:	1c18      	adds	r0, r3, #0
 801083c:	f7f0 f840 	bl	80008c0 <__aeabi_fadd>
 8010840:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8010842:	1c19      	adds	r1, r3, #0
 8010844:	1c20      	adds	r0, r4, #0
 8010846:	f7f0 fa2d 	bl	8000ca4 <__aeabi_fdiv>
 801084a:	1c03      	adds	r3, r0, #0
 801084c:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8010852:	1c19      	adds	r1, r3, #0
 8010854:	1c10      	adds	r0, r2, #0
 8010856:	f7f0 fbf3 	bl	8001040 <__aeabi_fmul>
 801085a:	1c03      	adds	r3, r0, #0
    }
}
 801085c:	1c18      	adds	r0, r3, #0
 801085e:	46bd      	mov	sp, r7
 8010860:	b003      	add	sp, #12
 8010862:	bd90      	pop	{r4, r7, pc}
 8010864:	44fa0000 	.word	0x44fa0000
 8010868:	435c0000 	.word	0x435c0000

0801086c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 801086c:	b580      	push	{r7, lr}
 801086e:	b084      	sub	sp, #16
 8010870:	af00      	add	r7, sp, #0
 8010872:	60f8      	str	r0, [r7, #12]
 8010874:	60b9      	str	r1, [r7, #8]
 8010876:	607a      	str	r2, [r7, #4]
 8010878:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2180      	movs	r1, #128	@ 0x80
 801087e:	687a      	ldr	r2, [r7, #4]
 8010880:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	2184      	movs	r1, #132	@ 0x84
 8010886:	68ba      	ldr	r2, [r7, #8]
 8010888:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	2188      	movs	r1, #136	@ 0x88
 801088e:	683a      	ldr	r2, [r7, #0]
 8010890:	505a      	str	r2, [r3, r1]
}
 8010892:	46c0      	nop			@ (mov r8, r8)
 8010894:	46bd      	mov	sp, r7
 8010896:	b004      	add	sp, #16
 8010898:	bd80      	pop	{r7, pc}
	...

0801089c <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 801089c:	b590      	push	{r4, r7, lr}
 801089e:	b085      	sub	sp, #20
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2280      	movs	r2, #128	@ 0x80
 80108aa:	589c      	ldr	r4, [r3, r2]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2284      	movs	r2, #132	@ 0x84
 80108b0:	589b      	ldr	r3, [r3, r2]
 80108b2:	1c19      	adds	r1, r3, #0
 80108b4:	6838      	ldr	r0, [r7, #0]
 80108b6:	f7f0 fd1d 	bl	80012f4 <__aeabi_fsub>
 80108ba:	1c03      	adds	r3, r0, #0
 80108bc:	1c19      	adds	r1, r3, #0
 80108be:	1c20      	adds	r0, r4, #0
 80108c0:	f7f0 fbbe 	bl	8001040 <__aeabi_fmul>
 80108c4:	1c03      	adds	r3, r0, #0
 80108c6:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 80108c8:	4940      	ldr	r1, [pc, #256]	@ (80109cc <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 80108ca:	68b8      	ldr	r0, [r7, #8]
 80108cc:	f7ef fe30 	bl	8000530 <__aeabi_fcmplt>
 80108d0:	1e03      	subs	r3, r0, #0
 80108d2:	d001      	beq.n	80108d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 80108d4:	4b3e      	ldr	r3, [pc, #248]	@ (80109d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80108d6:	e075      	b.n	80109c4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 80108d8:	493e      	ldr	r1, [pc, #248]	@ (80109d4 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 80108da:	68b8      	ldr	r0, [r7, #8]
 80108dc:	f7ef fe3c 	bl	8000558 <__aeabi_fcmpgt>
 80108e0:	1e03      	subs	r3, r0, #0
 80108e2:	d001      	beq.n	80108e8 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 80108e4:	2300      	movs	r3, #0
 80108e6:	e06d      	b.n	80109c4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 80108e8:	2100      	movs	r1, #0
 80108ea:	6838      	ldr	r0, [r7, #0]
 80108ec:	f7ef fe3e 	bl	800056c <__aeabi_fcmpge>
 80108f0:	1e03      	subs	r3, r0, #0
 80108f2:	d047      	beq.n	8010984 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2288      	movs	r2, #136	@ 0x88
 80108f8:	589b      	ldr	r3, [r3, r2]
 80108fa:	21fe      	movs	r1, #254	@ 0xfe
 80108fc:	0589      	lsls	r1, r1, #22
 80108fe:	1c18      	adds	r0, r3, #0
 8010900:	f7ef fe10 	bl	8000524 <__aeabi_fcmpeq>
 8010904:	1e03      	subs	r3, r0, #0
 8010906:	d00e      	beq.n	8010926 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	1c19      	adds	r1, r3, #0
 801090e:	20fe      	movs	r0, #254	@ 0xfe
 8010910:	0580      	lsls	r0, r0, #22
 8010912:	f7f0 fcef 	bl	80012f4 <__aeabi_fsub>
 8010916:	1c03      	adds	r3, r0, #0
 8010918:	492f      	ldr	r1, [pc, #188]	@ (80109d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 801091a:	1c18      	adds	r0, r3, #0
 801091c:	f7f0 fb90 	bl	8001040 <__aeabi_fmul>
 8010920:	1c03      	adds	r3, r0, #0
 8010922:	60fb      	str	r3, [r7, #12]
 8010924:	e012      	b.n	801094c <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	689b      	ldr	r3, [r3, #8]
 801092a:	492c      	ldr	r1, [pc, #176]	@ (80109dc <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 801092c:	1c18      	adds	r0, r3, #0
 801092e:	f7f0 fb87 	bl	8001040 <__aeabi_fmul>
 8010932:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8010934:	1c19      	adds	r1, r3, #0
 8010936:	4826      	ldr	r0, [pc, #152]	@ (80109d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8010938:	f7f0 fcdc 	bl	80012f4 <__aeabi_fsub>
 801093c:	1c03      	adds	r3, r0, #0
 801093e:	2181      	movs	r1, #129	@ 0x81
 8010940:	05c9      	lsls	r1, r1, #23
 8010942:	1c18      	adds	r0, r3, #0
 8010944:	f7f0 f9ae 	bl	8000ca4 <__aeabi_fdiv>
 8010948:	1c03      	adds	r3, r0, #0
 801094a:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 801094c:	4920      	ldr	r1, [pc, #128]	@ (80109d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 801094e:	68f8      	ldr	r0, [r7, #12]
 8010950:	f7ef ffb6 	bl	80008c0 <__aeabi_fadd>
 8010954:	1c03      	adds	r3, r0, #0
 8010956:	1c1c      	adds	r4, r3, #0
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	1c18      	adds	r0, r3, #0
 801095c:	f018 fce6 	bl	802932c <expf>
 8010960:	1c03      	adds	r3, r0, #0
 8010962:	21fe      	movs	r1, #254	@ 0xfe
 8010964:	0589      	lsls	r1, r1, #22
 8010966:	1c18      	adds	r0, r3, #0
 8010968:	f7ef ffaa 	bl	80008c0 <__aeabi_fadd>
 801096c:	1c03      	adds	r3, r0, #0
 801096e:	1c19      	adds	r1, r3, #0
 8010970:	1c20      	adds	r0, r4, #0
 8010972:	f7f0 f997 	bl	8000ca4 <__aeabi_fdiv>
 8010976:	1c03      	adds	r3, r0, #0
 8010978:	68f9      	ldr	r1, [r7, #12]
 801097a:	1c18      	adds	r0, r3, #0
 801097c:	f7f0 fcba 	bl	80012f4 <__aeabi_fsub>
 8010980:	1c03      	adds	r3, r0, #0
 8010982:	e01f      	b.n	80109c4 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2188      	movs	r1, #136	@ 0x88
 801098c:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 801098e:	1c19      	adds	r1, r3, #0
 8010990:	1c10      	adds	r0, r2, #0
 8010992:	f7f0 f987 	bl	8000ca4 <__aeabi_fdiv>
 8010996:	1c03      	adds	r3, r0, #0
 8010998:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	1c18      	adds	r0, r3, #0
 801099e:	f018 fcc5 	bl	802932c <expf>
 80109a2:	1c03      	adds	r3, r0, #0
 80109a4:	21fe      	movs	r1, #254	@ 0xfe
 80109a6:	0589      	lsls	r1, r1, #22
 80109a8:	1c18      	adds	r0, r3, #0
 80109aa:	f7ef ff89 	bl	80008c0 <__aeabi_fadd>
 80109ae:	1c03      	adds	r3, r0, #0
 80109b0:	1c19      	adds	r1, r3, #0
 80109b2:	4807      	ldr	r0, [pc, #28]	@ (80109d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80109b4:	f7f0 f976 	bl	8000ca4 <__aeabi_fdiv>
 80109b8:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 80109ba:	1c19      	adds	r1, r3, #0
 80109bc:	1c20      	adds	r0, r4, #0
 80109be:	f7f0 fb3f 	bl	8001040 <__aeabi_fmul>
 80109c2:	1c03      	adds	r3, r0, #0
        }
    }
}
 80109c4:	1c18      	adds	r0, r3, #0
 80109c6:	46bd      	mov	sp, r7
 80109c8:	b005      	add	sp, #20
 80109ca:	bd90      	pop	{r4, r7, pc}
 80109cc:	c2480000 	.word	0xc2480000
 80109d0:	43fa0000 	.word	0x43fa0000
 80109d4:	42480000 	.word	0x42480000
 80109d8:	3f8041ab 	.word	0x3f8041ab
 80109dc:	40a00000 	.word	0x40a00000

080109e0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 80109e0:	b590      	push	{r4, r7, lr}
 80109e2:	b083      	sub	sp, #12
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	4913      	ldr	r1, [pc, #76]	@ (8010a40 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 80109f2:	1c18      	adds	r0, r3, #0
 80109f4:	f7ef ff64 	bl	80008c0 <__aeabi_fadd>
 80109f8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80109fa:	1c19      	adds	r1, r3, #0
 80109fc:	1c20      	adds	r0, r4, #0
 80109fe:	f7f0 f951 	bl	8000ca4 <__aeabi_fdiv>
 8010a02:	1c03      	adds	r3, r0, #0
 8010a04:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	228c      	movs	r2, #140	@ 0x8c
 8010a0a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	685b      	ldr	r3, [r3, #4]
 8010a14:	490b      	ldr	r1, [pc, #44]	@ (8010a44 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8010a16:	1c18      	adds	r0, r3, #0
 8010a18:	f7ef ff52 	bl	80008c0 <__aeabi_fadd>
 8010a1c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8010a1e:	1c19      	adds	r1, r3, #0
 8010a20:	1c20      	adds	r0, r4, #0
 8010a22:	f7f0 f93f 	bl	8000ca4 <__aeabi_fdiv>
 8010a26:	1c03      	adds	r3, r0, #0
 8010a28:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2290      	movs	r2, #144	@ 0x90
 8010a2e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2294      	movs	r2, #148	@ 0x94
 8010a34:	2100      	movs	r1, #0
 8010a36:	5499      	strb	r1, [r3, r2]
}
 8010a38:	46c0      	nop			@ (mov r8, r8)
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	b003      	add	sp, #12
 8010a3e:	bd90      	pop	{r4, r7, pc}
 8010a40:	41a00000 	.word	0x41a00000
 8010a44:	43fa0000 	.word	0x43fa0000

08010a48 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8010a48:	b590      	push	{r4, r7, lr}
 8010a4a:	b087      	sub	sp, #28
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2294      	movs	r2, #148	@ 0x94
 8010a56:	5c9b      	ldrb	r3, [r3, r2]
 8010a58:	2201      	movs	r2, #1
 8010a5a:	4053      	eors	r3, r2
 8010a5c:	b2db      	uxtb	r3, r3
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d00f      	beq.n	8010a82 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2198      	movs	r1, #152	@ 0x98
 8010a66:	683a      	ldr	r2, [r7, #0]
 8010a68:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	219c      	movs	r1, #156	@ 0x9c
 8010a6e:	683a      	ldr	r2, [r7, #0]
 8010a70:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	21a0      	movs	r1, #160	@ 0xa0
 8010a76:	683a      	ldr	r2, [r7, #0]
 8010a78:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2294      	movs	r2, #148	@ 0x94
 8010a7e:	2101      	movs	r1, #1
 8010a80:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	228c      	movs	r2, #140	@ 0x8c
 8010a86:	589b      	ldr	r3, [r3, r2]
 8010a88:	1c19      	adds	r1, r3, #0
 8010a8a:	20fe      	movs	r0, #254	@ 0xfe
 8010a8c:	0580      	lsls	r0, r0, #22
 8010a8e:	f7f0 fc31 	bl	80012f4 <__aeabi_fsub>
 8010a92:	1c03      	adds	r3, r0, #0
 8010a94:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2298      	movs	r2, #152	@ 0x98
 8010a9a:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8010a9c:	1c19      	adds	r1, r3, #0
 8010a9e:	f7f0 facf 	bl	8001040 <__aeabi_fmul>
 8010aa2:	1c03      	adds	r3, r0, #0
 8010aa4:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	228c      	movs	r2, #140	@ 0x8c
 8010aaa:	589b      	ldr	r3, [r3, r2]
 8010aac:	6839      	ldr	r1, [r7, #0]
 8010aae:	1c18      	adds	r0, r3, #0
 8010ab0:	f7f0 fac6 	bl	8001040 <__aeabi_fmul>
 8010ab4:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8010ab6:	1c19      	adds	r1, r3, #0
 8010ab8:	1c20      	adds	r0, r4, #0
 8010aba:	f7ef ff01 	bl	80008c0 <__aeabi_fadd>
 8010abe:	1c03      	adds	r3, r0, #0
 8010ac0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2298      	movs	r2, #152	@ 0x98
 8010ac6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2290      	movs	r2, #144	@ 0x90
 8010acc:	589b      	ldr	r3, [r3, r2]
 8010ace:	1c19      	adds	r1, r3, #0
 8010ad0:	20fe      	movs	r0, #254	@ 0xfe
 8010ad2:	0580      	lsls	r0, r0, #22
 8010ad4:	f7f0 fc0e 	bl	80012f4 <__aeabi_fsub>
 8010ad8:	1c03      	adds	r3, r0, #0
 8010ada:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	229c      	movs	r2, #156	@ 0x9c
 8010ae0:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8010ae2:	1c19      	adds	r1, r3, #0
 8010ae4:	f7f0 faac 	bl	8001040 <__aeabi_fmul>
 8010ae8:	1c03      	adds	r3, r0, #0
 8010aea:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2290      	movs	r2, #144	@ 0x90
 8010af0:	589b      	ldr	r3, [r3, r2]
 8010af2:	6839      	ldr	r1, [r7, #0]
 8010af4:	1c18      	adds	r0, r3, #0
 8010af6:	f7f0 faa3 	bl	8001040 <__aeabi_fmul>
 8010afa:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8010afc:	1c19      	adds	r1, r3, #0
 8010afe:	1c20      	adds	r0, r4, #0
 8010b00:	f7ef fede 	bl	80008c0 <__aeabi_fadd>
 8010b04:	1c03      	adds	r3, r0, #0
 8010b06:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	229c      	movs	r2, #156	@ 0x9c
 8010b0c:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2298      	movs	r2, #152	@ 0x98
 8010b12:	589a      	ldr	r2, [r3, r2]
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	219c      	movs	r1, #156	@ 0x9c
 8010b18:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8010b1a:	1c19      	adds	r1, r3, #0
 8010b1c:	1c10      	adds	r0, r2, #0
 8010b1e:	f7f0 fbe9 	bl	80012f4 <__aeabi_fsub>
 8010b22:	1c03      	adds	r3, r0, #0
 8010b24:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8010b26:	2100      	movs	r1, #0
 8010b28:	6978      	ldr	r0, [r7, #20]
 8010b2a:	f7ef fd01 	bl	8000530 <__aeabi_fcmplt>
 8010b2e:	1e03      	subs	r3, r0, #0
 8010b30:	d004      	beq.n	8010b3c <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8010b32:	697b      	ldr	r3, [r7, #20]
 8010b34:	2280      	movs	r2, #128	@ 0x80
 8010b36:	0612      	lsls	r2, r2, #24
 8010b38:	4053      	eors	r3, r2
 8010b3a:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8010b3c:	4923      	ldr	r1, [pc, #140]	@ (8010bcc <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8010b3e:	6978      	ldr	r0, [r7, #20]
 8010b40:	f7f0 fa7e 	bl	8001040 <__aeabi_fmul>
 8010b44:	1c03      	adds	r3, r0, #0
 8010b46:	1c18      	adds	r0, r3, #0
 8010b48:	f018 fbf0 	bl	802932c <expf>
 8010b4c:	1c03      	adds	r3, r0, #0
 8010b4e:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8010b50:	491f      	ldr	r1, [pc, #124]	@ (8010bd0 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8010b52:	6938      	ldr	r0, [r7, #16]
 8010b54:	f7f0 fa74 	bl	8001040 <__aeabi_fmul>
 8010b58:	1c03      	adds	r3, r0, #0
 8010b5a:	491e      	ldr	r1, [pc, #120]	@ (8010bd4 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8010b5c:	1c18      	adds	r0, r3, #0
 8010b5e:	f7ef feaf 	bl	80008c0 <__aeabi_fadd>
 8010b62:	1c03      	adds	r3, r0, #0
 8010b64:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	685c      	ldr	r4, [r3, #4]
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	68f9      	ldr	r1, [r7, #12]
 8010b70:	1c18      	adds	r0, r3, #0
 8010b72:	f7ef fea5 	bl	80008c0 <__aeabi_fadd>
 8010b76:	1c03      	adds	r3, r0, #0
 8010b78:	1c19      	adds	r1, r3, #0
 8010b7a:	1c20      	adds	r0, r4, #0
 8010b7c:	f7f0 f892 	bl	8000ca4 <__aeabi_fdiv>
 8010b80:	1c03      	adds	r3, r0, #0
 8010b82:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8010b84:	68b9      	ldr	r1, [r7, #8]
 8010b86:	20fe      	movs	r0, #254	@ 0xfe
 8010b88:	0580      	lsls	r0, r0, #22
 8010b8a:	f7f0 fbb3 	bl	80012f4 <__aeabi_fsub>
 8010b8e:	1c03      	adds	r3, r0, #0
 8010b90:	1c18      	adds	r0, r3, #0
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	22a0      	movs	r2, #160	@ 0xa0
 8010b96:	589b      	ldr	r3, [r3, r2]
 8010b98:	1c19      	adds	r1, r3, #0
 8010b9a:	f7f0 fa51 	bl	8001040 <__aeabi_fmul>
 8010b9e:	1c03      	adds	r3, r0, #0
 8010ba0:	1c1c      	adds	r4, r3, #0
 8010ba2:	6839      	ldr	r1, [r7, #0]
 8010ba4:	68b8      	ldr	r0, [r7, #8]
 8010ba6:	f7f0 fa4b 	bl	8001040 <__aeabi_fmul>
 8010baa:	1c03      	adds	r3, r0, #0
 8010bac:	1c19      	adds	r1, r3, #0
 8010bae:	1c20      	adds	r0, r4, #0
 8010bb0:	f7ef fe86 	bl	80008c0 <__aeabi_fadd>
 8010bb4:	1c03      	adds	r3, r0, #0
 8010bb6:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	22a0      	movs	r2, #160	@ 0xa0
 8010bbc:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	22a0      	movs	r2, #160	@ 0xa0
 8010bc2:	589b      	ldr	r3, [r3, r2]
}
 8010bc4:	1c18      	adds	r0, r3, #0
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	b007      	add	sp, #28
 8010bca:	bd90      	pop	{r4, r7, pc}
 8010bcc:	be4ccccd 	.word	0xbe4ccccd
 8010bd0:	43f00000 	.word	0x43f00000
 8010bd4:	41a00000 	.word	0x41a00000

08010bd8 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b084      	sub	sp, #16
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	000a      	movs	r2, r1
 8010be2:	1cbb      	adds	r3, r7, #2
 8010be4:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8010be6:	230d      	movs	r3, #13
 8010be8:	18fb      	adds	r3, r7, r3
 8010bea:	22ff      	movs	r2, #255	@ 0xff
 8010bec:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010bee:	230e      	movs	r3, #14
 8010bf0:	18fb      	adds	r3, r7, r3
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	801a      	strh	r2, [r3, #0]
 8010bf6:	e038      	b.n	8010c6a <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 8010bf8:	230e      	movs	r3, #14
 8010bfa:	18fb      	adds	r3, r7, r3
 8010bfc:	881b      	ldrh	r3, [r3, #0]
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	18d3      	adds	r3, r2, r3
 8010c02:	7819      	ldrb	r1, [r3, #0]
 8010c04:	220d      	movs	r2, #13
 8010c06:	18bb      	adds	r3, r7, r2
 8010c08:	18ba      	adds	r2, r7, r2
 8010c0a:	7812      	ldrb	r2, [r2, #0]
 8010c0c:	404a      	eors	r2, r1
 8010c0e:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010c10:	230c      	movs	r3, #12
 8010c12:	18fb      	adds	r3, r7, r3
 8010c14:	2208      	movs	r2, #8
 8010c16:	701a      	strb	r2, [r3, #0]
 8010c18:	e01c      	b.n	8010c54 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 8010c1a:	210d      	movs	r1, #13
 8010c1c:	187b      	adds	r3, r7, r1
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	b25b      	sxtb	r3, r3
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	da0a      	bge.n	8010c3c <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8010c26:	187b      	adds	r3, r7, r1
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	b25b      	sxtb	r3, r3
 8010c2c:	18db      	adds	r3, r3, r3
 8010c2e:	b25b      	sxtb	r3, r3
 8010c30:	2231      	movs	r2, #49	@ 0x31
 8010c32:	4053      	eors	r3, r2
 8010c34:	b25a      	sxtb	r2, r3
 8010c36:	187b      	adds	r3, r7, r1
 8010c38:	701a      	strb	r2, [r3, #0]
 8010c3a:	e005      	b.n	8010c48 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8010c3c:	230d      	movs	r3, #13
 8010c3e:	18fa      	adds	r2, r7, r3
 8010c40:	18fb      	adds	r3, r7, r3
 8010c42:	781b      	ldrb	r3, [r3, #0]
 8010c44:	18db      	adds	r3, r3, r3
 8010c46:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8010c48:	220c      	movs	r2, #12
 8010c4a:	18bb      	adds	r3, r7, r2
 8010c4c:	18ba      	adds	r2, r7, r2
 8010c4e:	7812      	ldrb	r2, [r2, #0]
 8010c50:	3a01      	subs	r2, #1
 8010c52:	701a      	strb	r2, [r3, #0]
 8010c54:	230c      	movs	r3, #12
 8010c56:	18fb      	adds	r3, r7, r3
 8010c58:	781b      	ldrb	r3, [r3, #0]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d1dd      	bne.n	8010c1a <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8010c5e:	220e      	movs	r2, #14
 8010c60:	18bb      	adds	r3, r7, r2
 8010c62:	18ba      	adds	r2, r7, r2
 8010c64:	8812      	ldrh	r2, [r2, #0]
 8010c66:	3201      	adds	r2, #1
 8010c68:	801a      	strh	r2, [r3, #0]
 8010c6a:	230e      	movs	r3, #14
 8010c6c:	18fa      	adds	r2, r7, r3
 8010c6e:	1cbb      	adds	r3, r7, #2
 8010c70:	8812      	ldrh	r2, [r2, #0]
 8010c72:	881b      	ldrh	r3, [r3, #0]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d3bf      	bcc.n	8010bf8 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8010c78:	230d      	movs	r3, #13
 8010c7a:	18fb      	adds	r3, r7, r3
 8010c7c:	781b      	ldrb	r3, [r3, #0]
}
 8010c7e:	0018      	movs	r0, r3
 8010c80:	46bd      	mov	sp, r7
 8010c82:	b004      	add	sp, #16
 8010c84:	bd80      	pop	{r7, pc}

08010c86 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8010c86:	b580      	push	{r7, lr}
 8010c88:	b082      	sub	sp, #8
 8010c8a:	af00      	add	r7, sp, #0
 8010c8c:	6078      	str	r0, [r7, #4]
 8010c8e:	0008      	movs	r0, r1
 8010c90:	0011      	movs	r1, r2
 8010c92:	1cbb      	adds	r3, r7, #2
 8010c94:	1c02      	adds	r2, r0, #0
 8010c96:	801a      	strh	r2, [r3, #0]
 8010c98:	1c7b      	adds	r3, r7, #1
 8010c9a:	1c0a      	adds	r2, r1, #0
 8010c9c:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8010c9e:	1cbb      	adds	r3, r7, #2
 8010ca0:	881a      	ldrh	r2, [r3, #0]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	0011      	movs	r1, r2
 8010ca6:	0018      	movs	r0, r3
 8010ca8:	f7ff ff96 	bl	8010bd8 <sensirion_i2c_generate_crc>
 8010cac:	0003      	movs	r3, r0
 8010cae:	001a      	movs	r2, r3
 8010cb0:	1c7b      	adds	r3, r7, #1
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d001      	beq.n	8010cbc <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8010cb8:	2301      	movs	r3, #1
 8010cba:	e000      	b.n	8010cbe <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8010cbc:	2300      	movs	r3, #0
}
 8010cbe:	0018      	movs	r0, r3
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	b002      	add	sp, #8
 8010cc4:	bd80      	pop	{r7, pc}

08010cc6 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8010cc6:	b580      	push	{r7, lr}
 8010cc8:	b082      	sub	sp, #8
 8010cca:	af00      	add	r7, sp, #0
 8010ccc:	6078      	str	r0, [r7, #4]
 8010cce:	0008      	movs	r0, r1
 8010cd0:	0011      	movs	r1, r2
 8010cd2:	1cbb      	adds	r3, r7, #2
 8010cd4:	1c02      	adds	r2, r0, #0
 8010cd6:	801a      	strh	r2, [r3, #0]
 8010cd8:	003b      	movs	r3, r7
 8010cda:	1c0a      	adds	r2, r1, #0
 8010cdc:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8010cde:	003b      	movs	r3, r7
 8010ce0:	881b      	ldrh	r3, [r3, #0]
 8010ce2:	0a1b      	lsrs	r3, r3, #8
 8010ce4:	b299      	uxth	r1, r3
 8010ce6:	1cbb      	adds	r3, r7, #2
 8010ce8:	881b      	ldrh	r3, [r3, #0]
 8010cea:	1cba      	adds	r2, r7, #2
 8010cec:	1c58      	adds	r0, r3, #1
 8010cee:	8010      	strh	r0, [r2, #0]
 8010cf0:	001a      	movs	r2, r3
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	189b      	adds	r3, r3, r2
 8010cf6:	b2ca      	uxtb	r2, r1
 8010cf8:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8010cfa:	1cbb      	adds	r3, r7, #2
 8010cfc:	881b      	ldrh	r3, [r3, #0]
 8010cfe:	1cba      	adds	r2, r7, #2
 8010d00:	1c59      	adds	r1, r3, #1
 8010d02:	8011      	strh	r1, [r2, #0]
 8010d04:	001a      	movs	r2, r3
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	189b      	adds	r3, r3, r2
 8010d0a:	003a      	movs	r2, r7
 8010d0c:	8812      	ldrh	r2, [r2, #0]
 8010d0e:	b2d2      	uxtb	r2, r2
 8010d10:	701a      	strb	r2, [r3, #0]
    return offset;
 8010d12:	1cbb      	adds	r3, r7, #2
 8010d14:	881b      	ldrh	r3, [r3, #0]
}
 8010d16:	0018      	movs	r0, r3
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	b002      	add	sp, #8
 8010d1c:	bd80      	pop	{r7, pc}

08010d1e <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 8010d1e:	b590      	push	{r4, r7, lr}
 8010d20:	b083      	sub	sp, #12
 8010d22:	af00      	add	r7, sp, #0
 8010d24:	6078      	str	r0, [r7, #4]
 8010d26:	0008      	movs	r0, r1
 8010d28:	0011      	movs	r1, r2
 8010d2a:	1cbb      	adds	r3, r7, #2
 8010d2c:	1c02      	adds	r2, r0, #0
 8010d2e:	801a      	strh	r2, [r3, #0]
 8010d30:	003b      	movs	r3, r7
 8010d32:	1c0a      	adds	r2, r1, #0
 8010d34:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 8010d36:	003b      	movs	r3, r7
 8010d38:	881b      	ldrh	r3, [r3, #0]
 8010d3a:	0a1b      	lsrs	r3, r3, #8
 8010d3c:	b299      	uxth	r1, r3
 8010d3e:	1cbb      	adds	r3, r7, #2
 8010d40:	881b      	ldrh	r3, [r3, #0]
 8010d42:	1cba      	adds	r2, r7, #2
 8010d44:	1c58      	adds	r0, r3, #1
 8010d46:	8010      	strh	r0, [r2, #0]
 8010d48:	001a      	movs	r2, r3
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	189b      	adds	r3, r3, r2
 8010d4e:	b2ca      	uxtb	r2, r1
 8010d50:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 8010d52:	1cbb      	adds	r3, r7, #2
 8010d54:	881b      	ldrh	r3, [r3, #0]
 8010d56:	1cba      	adds	r2, r7, #2
 8010d58:	1c59      	adds	r1, r3, #1
 8010d5a:	8011      	strh	r1, [r2, #0]
 8010d5c:	001a      	movs	r2, r3
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	189b      	adds	r3, r3, r2
 8010d62:	003a      	movs	r2, r7
 8010d64:	8812      	ldrh	r2, [r2, #0]
 8010d66:	b2d2      	uxtb	r2, r2
 8010d68:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 8010d6a:	1cbb      	adds	r3, r7, #2
 8010d6c:	881b      	ldrh	r3, [r3, #0]
 8010d6e:	3b02      	subs	r3, #2
 8010d70:	687a      	ldr	r2, [r7, #4]
 8010d72:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 8010d74:	1cbb      	adds	r3, r7, #2
 8010d76:	881b      	ldrh	r3, [r3, #0]
 8010d78:	687a      	ldr	r2, [r7, #4]
 8010d7a:	18d4      	adds	r4, r2, r3
 8010d7c:	2102      	movs	r1, #2
 8010d7e:	f7ff ff2b 	bl	8010bd8 <sensirion_i2c_generate_crc>
 8010d82:	0003      	movs	r3, r0
 8010d84:	7023      	strb	r3, [r4, #0]
    offset++;
 8010d86:	1cbb      	adds	r3, r7, #2
 8010d88:	881a      	ldrh	r2, [r3, #0]
 8010d8a:	1cbb      	adds	r3, r7, #2
 8010d8c:	3201      	adds	r2, #1
 8010d8e:	801a      	strh	r2, [r3, #0]

    return offset;
 8010d90:	1cbb      	adds	r3, r7, #2
 8010d92:	881b      	ldrh	r3, [r3, #0]
}
 8010d94:	0018      	movs	r0, r3
 8010d96:	46bd      	mov	sp, r7
 8010d98:	b003      	add	sp, #12
 8010d9a:	bd90      	pop	{r4, r7, pc}

08010d9c <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b082      	sub	sp, #8
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
 8010da4:	0008      	movs	r0, r1
 8010da6:	0011      	movs	r1, r2
 8010da8:	1cbb      	adds	r3, r7, #2
 8010daa:	1c02      	adds	r2, r0, #0
 8010dac:	801a      	strh	r2, [r3, #0]
 8010dae:	003b      	movs	r3, r7
 8010db0:	1c0a      	adds	r2, r1, #0
 8010db2:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 8010db4:	003b      	movs	r3, r7
 8010db6:	881a      	ldrh	r2, [r3, #0]
 8010db8:	1cbb      	adds	r3, r7, #2
 8010dba:	8819      	ldrh	r1, [r3, #0]
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	0018      	movs	r0, r3
 8010dc0:	f7ff ffad 	bl	8010d1e <sensirion_i2c_add_uint16_t_to_buffer>
 8010dc4:	0003      	movs	r3, r0
}
 8010dc6:	0018      	movs	r0, r3
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	b002      	add	sp, #8
 8010dcc:	bd80      	pop	{r7, pc}

08010dce <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8010dce:	b580      	push	{r7, lr}
 8010dd0:	b082      	sub	sp, #8
 8010dd2:	af00      	add	r7, sp, #0
 8010dd4:	6039      	str	r1, [r7, #0]
 8010dd6:	0011      	movs	r1, r2
 8010dd8:	1dfb      	adds	r3, r7, #7
 8010dda:	1c02      	adds	r2, r0, #0
 8010ddc:	701a      	strb	r2, [r3, #0]
 8010dde:	1d3b      	adds	r3, r7, #4
 8010de0:	1c0a      	adds	r2, r1, #0
 8010de2:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8010de4:	1d3b      	adds	r3, r7, #4
 8010de6:	881a      	ldrh	r2, [r3, #0]
 8010de8:	6839      	ldr	r1, [r7, #0]
 8010dea:	1dfb      	adds	r3, r7, #7
 8010dec:	781b      	ldrb	r3, [r3, #0]
 8010dee:	0018      	movs	r0, r3
 8010df0:	f7fe f9b0 	bl	800f154 <sensirion_i2c_hal_write>
 8010df4:	0003      	movs	r3, r0
}
 8010df6:	0018      	movs	r0, r3
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	b002      	add	sp, #8
 8010dfc:	bd80      	pop	{r7, pc}

08010dfe <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8010dfe:	b5b0      	push	{r4, r5, r7, lr}
 8010e00:	b084      	sub	sp, #16
 8010e02:	af00      	add	r7, sp, #0
 8010e04:	6039      	str	r1, [r7, #0]
 8010e06:	0011      	movs	r1, r2
 8010e08:	1dfb      	adds	r3, r7, #7
 8010e0a:	1c02      	adds	r2, r0, #0
 8010e0c:	701a      	strb	r2, [r3, #0]
 8010e0e:	1d3b      	adds	r3, r7, #4
 8010e10:	1c0a      	adds	r2, r1, #0
 8010e12:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8010e14:	1d3b      	adds	r3, r7, #4
 8010e16:	881b      	ldrh	r3, [r3, #0]
 8010e18:	085b      	lsrs	r3, r3, #1
 8010e1a:	b29b      	uxth	r3, r3
 8010e1c:	220a      	movs	r2, #10
 8010e1e:	18ba      	adds	r2, r7, r2
 8010e20:	1c19      	adds	r1, r3, #0
 8010e22:	1c0b      	adds	r3, r1, #0
 8010e24:	18db      	adds	r3, r3, r3
 8010e26:	185b      	adds	r3, r3, r1
 8010e28:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8010e2a:	1d3b      	adds	r3, r7, #4
 8010e2c:	881b      	ldrh	r3, [r3, #0]
 8010e2e:	2201      	movs	r2, #1
 8010e30:	4013      	ands	r3, r2
 8010e32:	b29b      	uxth	r3, r3
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d001      	beq.n	8010e3c <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8010e38:	2304      	movs	r3, #4
 8010e3a:	e06b      	b.n	8010f14 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8010e3c:	230a      	movs	r3, #10
 8010e3e:	18fb      	adds	r3, r7, r3
 8010e40:	881a      	ldrh	r2, [r3, #0]
 8010e42:	6839      	ldr	r1, [r7, #0]
 8010e44:	1dfb      	adds	r3, r7, #7
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	0018      	movs	r0, r3
 8010e4a:	f7fe f963 	bl	800f114 <sensirion_i2c_hal_read>
 8010e4e:	0003      	movs	r3, r0
 8010e50:	001a      	movs	r2, r3
 8010e52:	2108      	movs	r1, #8
 8010e54:	187b      	adds	r3, r7, r1
 8010e56:	801a      	strh	r2, [r3, #0]
    if (error) {
 8010e58:	000a      	movs	r2, r1
 8010e5a:	18bb      	adds	r3, r7, r2
 8010e5c:	2100      	movs	r1, #0
 8010e5e:	5e5b      	ldrsh	r3, [r3, r1]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d003      	beq.n	8010e6c <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 8010e64:	18bb      	adds	r3, r7, r2
 8010e66:	2200      	movs	r2, #0
 8010e68:	5e9b      	ldrsh	r3, [r3, r2]
 8010e6a:	e053      	b.n	8010f14 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010e6c:	230e      	movs	r3, #14
 8010e6e:	18fb      	adds	r3, r7, r3
 8010e70:	2200      	movs	r2, #0
 8010e72:	801a      	strh	r2, [r3, #0]
 8010e74:	230c      	movs	r3, #12
 8010e76:	18fb      	adds	r3, r7, r3
 8010e78:	2200      	movs	r2, #0
 8010e7a:	801a      	strh	r2, [r3, #0]
 8010e7c:	e041      	b.n	8010f02 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010e7e:	210e      	movs	r1, #14
 8010e80:	187b      	adds	r3, r7, r1
 8010e82:	881b      	ldrh	r3, [r3, #0]
 8010e84:	683a      	ldr	r2, [r7, #0]
 8010e86:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8010e88:	187b      	adds	r3, r7, r1
 8010e8a:	881b      	ldrh	r3, [r3, #0]
 8010e8c:	3302      	adds	r3, #2
 8010e8e:	683a      	ldr	r2, [r7, #0]
 8010e90:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8010e92:	781b      	ldrb	r3, [r3, #0]
 8010e94:	001a      	movs	r2, r3
 8010e96:	2102      	movs	r1, #2
 8010e98:	f7ff fef5 	bl	8010c86 <sensirion_i2c_check_crc>
 8010e9c:	0003      	movs	r3, r0
 8010e9e:	001a      	movs	r2, r3
 8010ea0:	2108      	movs	r1, #8
 8010ea2:	187b      	adds	r3, r7, r1
 8010ea4:	801a      	strh	r2, [r3, #0]
        if (error) {
 8010ea6:	000a      	movs	r2, r1
 8010ea8:	18bb      	adds	r3, r7, r2
 8010eaa:	2100      	movs	r1, #0
 8010eac:	5e5b      	ldrsh	r3, [r3, r1]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d003      	beq.n	8010eba <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 8010eb2:	18bb      	adds	r3, r7, r2
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	5e9b      	ldrsh	r3, [r3, r2]
 8010eb8:	e02c      	b.n	8010f14 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 8010eba:	240e      	movs	r4, #14
 8010ebc:	193b      	adds	r3, r7, r4
 8010ebe:	881b      	ldrh	r3, [r3, #0]
 8010ec0:	683a      	ldr	r2, [r7, #0]
 8010ec2:	18d2      	adds	r2, r2, r3
 8010ec4:	250c      	movs	r5, #12
 8010ec6:	197b      	adds	r3, r7, r5
 8010ec8:	881b      	ldrh	r3, [r3, #0]
 8010eca:	1979      	adds	r1, r7, r5
 8010ecc:	1c58      	adds	r0, r3, #1
 8010ece:	8008      	strh	r0, [r1, #0]
 8010ed0:	0019      	movs	r1, r3
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	185b      	adds	r3, r3, r1
 8010ed6:	7812      	ldrb	r2, [r2, #0]
 8010ed8:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8010eda:	193b      	adds	r3, r7, r4
 8010edc:	881b      	ldrh	r3, [r3, #0]
 8010ede:	3301      	adds	r3, #1
 8010ee0:	683a      	ldr	r2, [r7, #0]
 8010ee2:	18d2      	adds	r2, r2, r3
 8010ee4:	197b      	adds	r3, r7, r5
 8010ee6:	881b      	ldrh	r3, [r3, #0]
 8010ee8:	1979      	adds	r1, r7, r5
 8010eea:	1c58      	adds	r0, r3, #1
 8010eec:	8008      	strh	r0, [r1, #0]
 8010eee:	0019      	movs	r1, r3
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	185b      	adds	r3, r3, r1
 8010ef4:	7812      	ldrb	r2, [r2, #0]
 8010ef6:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8010ef8:	193b      	adds	r3, r7, r4
 8010efa:	193a      	adds	r2, r7, r4
 8010efc:	8812      	ldrh	r2, [r2, #0]
 8010efe:	3203      	adds	r2, #3
 8010f00:	801a      	strh	r2, [r3, #0]
 8010f02:	230e      	movs	r3, #14
 8010f04:	18fa      	adds	r2, r7, r3
 8010f06:	230a      	movs	r3, #10
 8010f08:	18fb      	adds	r3, r7, r3
 8010f0a:	8812      	ldrh	r2, [r2, #0]
 8010f0c:	881b      	ldrh	r3, [r3, #0]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d3b5      	bcc.n	8010e7e <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 8010f12:	2300      	movs	r3, #0
}
 8010f14:	0018      	movs	r0, r3
 8010f16:	46bd      	mov	sp, r7
 8010f18:	b004      	add	sp, #16
 8010f1a:	bdb0      	pop	{r4, r5, r7, pc}

08010f1c <ReadRegister>:
static bool SGP_MsgSent = false;
static int32_t vocIndex;



static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010f1c:	b590      	push	{r4, r7, lr}
 8010f1e:	b083      	sub	sp, #12
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6039      	str	r1, [r7, #0]
 8010f24:	0011      	movs	r1, r2
 8010f26:	1dfb      	adds	r3, r7, #7
 8010f28:	1c02      	adds	r2, r0, #0
 8010f2a:	701a      	strb	r2, [r3, #0]
 8010f2c:	1dbb      	adds	r3, r7, #6
 8010f2e:	1c0a      	adds	r2, r1, #0
 8010f30:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8010f32:	4b08      	ldr	r3, [pc, #32]	@ (8010f54 <ReadRegister+0x38>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d008      	beq.n	8010f4c <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8010f3a:	4b06      	ldr	r3, [pc, #24]	@ (8010f54 <ReadRegister+0x38>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	1dba      	adds	r2, r7, #6
 8010f40:	7814      	ldrb	r4, [r2, #0]
 8010f42:	6839      	ldr	r1, [r7, #0]
 8010f44:	1dfa      	adds	r2, r7, #7
 8010f46:	7810      	ldrb	r0, [r2, #0]
 8010f48:	0022      	movs	r2, r4
 8010f4a:	4798      	blx	r3
  }
}
 8010f4c:	46c0      	nop			@ (mov r8, r8)
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	b003      	add	sp, #12
 8010f52:	bd90      	pop	{r4, r7, pc}
 8010f54:	20001198 	.word	0x20001198

08010f58 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8010f58:	b590      	push	{r4, r7, lr}
 8010f5a:	b083      	sub	sp, #12
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6039      	str	r1, [r7, #0]
 8010f60:	0011      	movs	r1, r2
 8010f62:	1dfb      	adds	r3, r7, #7
 8010f64:	1c02      	adds	r2, r0, #0
 8010f66:	701a      	strb	r2, [r3, #0]
 8010f68:	1dbb      	adds	r3, r7, #6
 8010f6a:	1c0a      	adds	r2, r1, #0
 8010f6c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8010f6e:	4b08      	ldr	r3, [pc, #32]	@ (8010f90 <WriteRegister+0x38>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d008      	beq.n	8010f88 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8010f76:	4b06      	ldr	r3, [pc, #24]	@ (8010f90 <WriteRegister+0x38>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	1dba      	adds	r2, r7, #6
 8010f7c:	7814      	ldrb	r4, [r2, #0]
 8010f7e:	6839      	ldr	r1, [r7, #0]
 8010f80:	1dfa      	adds	r2, r7, #7
 8010f82:	7810      	ldrb	r0, [r2, #0]
 8010f84:	0022      	movs	r2, r4
 8010f86:	4798      	blx	r3
  }
}
 8010f88:	46c0      	nop			@ (mov r8, r8)
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	b003      	add	sp, #12
 8010f8e:	bd90      	pop	{r4, r7, pc}
 8010f90:	2000119c 	.word	0x2000119c

08010f94 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b082      	sub	sp, #8
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 8010f9c:	f003 fdd2 	bl	8014b44 <HAL_GetTick>
 8010fa0:	0002      	movs	r2, r0
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	18d2      	adds	r2, r2, r3
 8010fa6:	4b03      	ldr	r3, [pc, #12]	@ (8010fb4 <setSGP40TimeStamp+0x20>)
 8010fa8:	601a      	str	r2, [r3, #0]
}
 8010faa:	46c0      	nop			@ (mov r8, r8)
 8010fac:	46bd      	mov	sp, r7
 8010fae:	b002      	add	sp, #8
 8010fb0:	bd80      	pop	{r7, pc}
 8010fb2:	46c0      	nop			@ (mov r8, r8)
 8010fb4:	200011ac 	.word	0x200011ac

08010fb8 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 8010fbc:	4b02      	ldr	r3, [pc, #8]	@ (8010fc8 <ResetSGP40samplecounter+0x10>)
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	701a      	strb	r2, [r3, #0]
}
 8010fc2:	46c0      	nop			@ (mov r8, r8)
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}
 8010fc8:	200011aa 	.word	0x200011aa

08010fcc <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
 8010fd4:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8010fd6:	4b07      	ldr	r3, [pc, #28]	@ (8010ff4 <SGP_Init+0x28>)
 8010fd8:	687a      	ldr	r2, [r7, #4]
 8010fda:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8010fdc:	4b06      	ldr	r3, [pc, #24]	@ (8010ff8 <SGP_Init+0x2c>)
 8010fde:	683a      	ldr	r2, [r7, #0]
 8010fe0:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8010fe2:	4b06      	ldr	r3, [pc, #24]	@ (8010ffc <SGP_Init+0x30>)
 8010fe4:	2100      	movs	r1, #0
 8010fe6:	0018      	movs	r0, r3
 8010fe8:	f7fe ff72 	bl	800fed0 <GasIndexAlgorithm_init>
}
 8010fec:	46c0      	nop			@ (mov r8, r8)
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	b002      	add	sp, #8
 8010ff2:	bd80      	pop	{r7, pc}
 8010ff4:	20001198 	.word	0x20001198
 8010ff8:	2000119c 	.word	0x2000119c
 8010ffc:	200011b4 	.word	0x200011b4

08011000 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 8011000:	b580      	push	{r7, lr}
 8011002:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 8011004:	4b07      	ldr	r3, [pc, #28]	@ (8011024 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d004      	beq.n	8011016 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 801100c:	4b06      	ldr	r3, [pc, #24]	@ (8011028 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 801100e:	22fe      	movs	r2, #254	@ 0xfe
 8011010:	0592      	lsls	r2, r2, #22
 8011012:	605a      	str	r2, [r3, #4]
    params.mSamplingInterval = 900.0f;
  }
//  float sampling_interval;
//  GasIndexAlgorithm_get_sampling_interval(&params, &sampling_interval);
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", sampling_interval);
}
 8011014:	e002      	b.n	801101c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 8011016:	4b04      	ldr	r3, [pc, #16]	@ (8011028 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 8011018:	4a04      	ldr	r2, [pc, #16]	@ (801102c <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 801101a:	605a      	str	r2, [r3, #4]
}
 801101c:	46c0      	nop			@ (mov r8, r8)
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}
 8011022:	46c0      	nop			@ (mov r8, r8)
 8011024:	20002101 	.word	0x20002101
 8011028:	200011b4 	.word	0x200011b4
 801102c:	44610000 	.word	0x44610000

08011030 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8011030:	b580      	push	{r7, lr}
 8011032:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8011034:	4b13      	ldr	r3, [pc, #76]	@ (8011084 <SGP_StartMeasurement+0x54>)
 8011036:	781b      	ldrb	r3, [r3, #0]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d00d      	beq.n	8011058 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 801103c:	4b12      	ldr	r3, [pc, #72]	@ (8011088 <SGP_StartMeasurement+0x58>)
 801103e:	2208      	movs	r2, #8
 8011040:	0019      	movs	r1, r3
 8011042:	2059      	movs	r0, #89	@ 0x59
 8011044:	f7ff ff88 	bl	8010f58 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8011048:	f003 fd7c 	bl	8014b44 <HAL_GetTick>
 801104c:	0003      	movs	r3, r0
 801104e:	331e      	adds	r3, #30
 8011050:	001a      	movs	r2, r3
 8011052:	4b0e      	ldr	r3, [pc, #56]	@ (801108c <SGP_StartMeasurement+0x5c>)
 8011054:	601a      	str	r2, [r3, #0]
 8011056:	e00c      	b.n	8011072 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8011058:	4b0d      	ldr	r3, [pc, #52]	@ (8011090 <SGP_StartMeasurement+0x60>)
 801105a:	2208      	movs	r2, #8
 801105c:	0019      	movs	r1, r3
 801105e:	2059      	movs	r0, #89	@ 0x59
 8011060:	f7ff ff7a 	bl	8010f58 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 8011064:	f003 fd6e 	bl	8014b44 <HAL_GetTick>
 8011068:	0003      	movs	r3, r0
 801106a:	33aa      	adds	r3, #170	@ 0xaa
 801106c:	001a      	movs	r2, r3
 801106e:	4b09      	ldr	r3, [pc, #36]	@ (8011094 <SGP_StartMeasurement+0x64>)
 8011070:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8011072:	4b09      	ldr	r3, [pc, #36]	@ (8011098 <SGP_StartMeasurement+0x68>)
 8011074:	2200      	movs	r2, #0
 8011076:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8011078:	4b08      	ldr	r3, [pc, #32]	@ (801109c <SGP_StartMeasurement+0x6c>)
 801107a:	2200      	movs	r2, #0
 801107c:	701a      	strb	r2, [r3, #0]
}
 801107e:	46c0      	nop			@ (mov r8, r8)
 8011080:	46bd      	mov	sp, r7
 8011082:	bd80      	pop	{r7, pc}
 8011084:	2000125c 	.word	0x2000125c
 8011088:	200000bc 	.word	0x200000bc
 801108c:	200000d0 	.word	0x200000d0
 8011090:	200000b4 	.word	0x200000b4
 8011094:	200000c8 	.word	0x200000c8
 8011098:	200011b0 	.word	0x200011b0
 801109c:	200011b1 	.word	0x200011b1

080110a0 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 80110a0:	b580      	push	{r7, lr}
 80110a2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 80110a4:	4b04      	ldr	r3, [pc, #16]	@ (80110b8 <SGP_HeatedUp+0x18>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	0018      	movs	r0, r3
 80110aa:	f002 ff7d 	bl	8013fa8 <TimestampIsReached>
 80110ae:	0003      	movs	r3, r0
}
 80110b0:	0018      	movs	r0, r3
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}
 80110b6:	46c0      	nop			@ (mov r8, r8)
 80110b8:	200000c8 	.word	0x200000c8

080110bc <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 80110bc:	b580      	push	{r7, lr}
 80110be:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 80110c0:	4b04      	ldr	r3, [pc, #16]	@ (80110d4 <SGP_MeasurementReady+0x18>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	0018      	movs	r0, r3
 80110c6:	f002 ff6f 	bl	8013fa8 <TimestampIsReached>
 80110ca:	0003      	movs	r3, r0
}
 80110cc:	0018      	movs	r0, r3
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	46c0      	nop			@ (mov r8, r8)
 80110d4:	200000d0 	.word	0x200000d0

080110d8 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 80110d8:	b580      	push	{r7, lr}
 80110da:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 80110dc:	4b04      	ldr	r3, [pc, #16]	@ (80110f0 <SGP_MeasurementDone+0x18>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	0018      	movs	r0, r3
 80110e2:	f002 ff61 	bl	8013fa8 <TimestampIsReached>
 80110e6:	0003      	movs	r3, r0
}
 80110e8:	0018      	movs	r0, r3
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}
 80110ee:	46c0      	nop			@ (mov r8, r8)
 80110f0:	200000cc 	.word	0x200000cc

080110f4 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 80110f4:	b580      	push	{r7, lr}
 80110f6:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80110f8:	4b04      	ldr	r3, [pc, #16]	@ (801110c <SGP_TurnHeaterOff+0x18>)
 80110fa:	2202      	movs	r2, #2
 80110fc:	0019      	movs	r1, r3
 80110fe:	2059      	movs	r0, #89	@ 0x59
 8011100:	f7ff ff2a 	bl	8010f58 <WriteRegister>
}
 8011104:	46c0      	nop			@ (mov r8, r8)
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	46c0      	nop			@ (mov r8, r8)
 801110c:	200000ac 	.word	0x200000ac

08011110 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8011110:	b590      	push	{r4, r7, lr}
 8011112:	b087      	sub	sp, #28
 8011114:	af02      	add	r7, sp, #8
 8011116:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8011118:	f7ff ffc2 	bl	80110a0 <SGP_HeatedUp>
 801111c:	1e03      	subs	r3, r0, #0
 801111e:	d032      	beq.n	8011186 <SGP_GetMeasurementValues+0x76>
 8011120:	4b80      	ldr	r3, [pc, #512]	@ (8011324 <SGP_GetMeasurementValues+0x214>)
 8011122:	781b      	ldrb	r3, [r3, #0]
 8011124:	2201      	movs	r2, #1
 8011126:	4053      	eors	r3, r2
 8011128:	b2db      	uxtb	r3, r3
 801112a:	2b00      	cmp	r3, #0
 801112c:	d02b      	beq.n	8011186 <SGP_GetMeasurementValues+0x76>
 801112e:	4b7e      	ldr	r3, [pc, #504]	@ (8011328 <SGP_GetMeasurementValues+0x218>)
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	2201      	movs	r2, #1
 8011134:	4053      	eors	r3, r2
 8011136:	b2db      	uxtb	r3, r3
 8011138:	2b00      	cmp	r3, #0
 801113a:	d024      	beq.n	8011186 <SGP_GetMeasurementValues+0x76>
    HeatUpIsDone = true;
 801113c:	4b79      	ldr	r3, [pc, #484]	@ (8011324 <SGP_GetMeasurementValues+0x214>)
 801113e:	2201      	movs	r2, #1
 8011140:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8011142:	4b7a      	ldr	r3, [pc, #488]	@ (801132c <SGP_GetMeasurementValues+0x21c>)
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d00d      	beq.n	8011166 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 801114a:	4b79      	ldr	r3, [pc, #484]	@ (8011330 <SGP_GetMeasurementValues+0x220>)
 801114c:	2208      	movs	r2, #8
 801114e:	0019      	movs	r1, r3
 8011150:	2059      	movs	r0, #89	@ 0x59
 8011152:	f7ff ff01 	bl	8010f58 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8011156:	f003 fcf5 	bl	8014b44 <HAL_GetTick>
 801115a:	0003      	movs	r3, r0
 801115c:	331e      	adds	r3, #30
 801115e:	001a      	movs	r2, r3
 8011160:	4b74      	ldr	r3, [pc, #464]	@ (8011334 <SGP_GetMeasurementValues+0x224>)
 8011162:	601a      	str	r2, [r3, #0]
 8011164:	e00c      	b.n	8011180 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8011166:	4b74      	ldr	r3, [pc, #464]	@ (8011338 <SGP_GetMeasurementValues+0x228>)
 8011168:	2208      	movs	r2, #8
 801116a:	0019      	movs	r1, r3
 801116c:	2059      	movs	r0, #89	@ 0x59
 801116e:	f7ff fef3 	bl	8010f58 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 8011172:	f003 fce7 	bl	8014b44 <HAL_GetTick>
 8011176:	0003      	movs	r3, r0
 8011178:	331e      	adds	r3, #30
 801117a:	001a      	movs	r2, r3
 801117c:	4b6d      	ldr	r3, [pc, #436]	@ (8011334 <SGP_GetMeasurementValues+0x224>)
 801117e:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8011180:	4b69      	ldr	r3, [pc, #420]	@ (8011328 <SGP_GetMeasurementValues+0x218>)
 8011182:	2201      	movs	r2, #1
 8011184:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8011186:	4b67      	ldr	r3, [pc, #412]	@ (8011324 <SGP_GetMeasurementValues+0x214>)
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d100      	bne.n	8011190 <SGP_GetMeasurementValues+0x80>
 801118e:	e0ac      	b.n	80112ea <SGP_GetMeasurementValues+0x1da>
 8011190:	f7ff ff94 	bl	80110bc <SGP_MeasurementReady>
 8011194:	1e03      	subs	r3, r0, #0
 8011196:	d100      	bne.n	801119a <SGP_GetMeasurementValues+0x8a>
 8011198:	e0a7      	b.n	80112ea <SGP_GetMeasurementValues+0x1da>
 801119a:	4b68      	ldr	r3, [pc, #416]	@ (801133c <SGP_GetMeasurementValues+0x22c>)
 801119c:	781b      	ldrb	r3, [r3, #0]
 801119e:	2201      	movs	r2, #1
 80111a0:	4053      	eors	r3, r2
 80111a2:	b2db      	uxtb	r3, r3
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d100      	bne.n	80111aa <SGP_GetMeasurementValues+0x9a>
 80111a8:	e09f      	b.n	80112ea <SGP_GetMeasurementValues+0x1da>
    MeasurementIsReady = true;
 80111aa:	4b64      	ldr	r3, [pc, #400]	@ (801133c <SGP_GetMeasurementValues+0x22c>)
 80111ac:	2201      	movs	r2, #1
 80111ae:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 80111b0:	4b63      	ldr	r3, [pc, #396]	@ (8011340 <SGP_GetMeasurementValues+0x230>)
 80111b2:	2203      	movs	r2, #3
 80111b4:	0019      	movs	r1, r3
 80111b6:	2059      	movs	r0, #89	@ 0x59
 80111b8:	f7ff feb0 	bl	8010f1c <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 80111bc:	4b60      	ldr	r3, [pc, #384]	@ (8011340 <SGP_GetMeasurementValues+0x230>)
 80111be:	2203      	movs	r2, #3
 80111c0:	2103      	movs	r1, #3
 80111c2:	0018      	movs	r0, r3
 80111c4:	f000 f91a 	bl	80113fc <CheckCRC>
 80111c8:	0003      	movs	r3, r0
 80111ca:	001a      	movs	r2, r3
 80111cc:	2301      	movs	r3, #1
 80111ce:	4053      	eors	r3, r2
 80111d0:	b2db      	uxtb	r3, r3
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d02a      	beq.n	801122c <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 80111d6:	4a5b      	ldr	r2, [pc, #364]	@ (8011344 <SGP_GetMeasurementValues+0x234>)
 80111d8:	4b5b      	ldr	r3, [pc, #364]	@ (8011348 <SGP_GetMeasurementValues+0x238>)
 80111da:	0019      	movs	r1, r3
 80111dc:	2001      	movs	r0, #1
 80111de:	f002 ff39 	bl	8014054 <CreateLine>
      Info("SGP_Measure buffer structure:");
 80111e2:	4a5a      	ldr	r2, [pc, #360]	@ (801134c <SGP_GetMeasurementValues+0x23c>)
 80111e4:	4b5a      	ldr	r3, [pc, #360]	@ (8011350 <SGP_GetMeasurementValues+0x240>)
 80111e6:	0019      	movs	r1, r3
 80111e8:	2002      	movs	r0, #2
 80111ea:	f002 ff33 	bl	8014054 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80111ee:	230f      	movs	r3, #15
 80111f0:	18fb      	adds	r3, r7, r3
 80111f2:	2200      	movs	r2, #0
 80111f4:	701a      	strb	r2, [r3, #0]
 80111f6:	e012      	b.n	801121e <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 80111f8:	240f      	movs	r4, #15
 80111fa:	193b      	adds	r3, r7, r4
 80111fc:	7818      	ldrb	r0, [r3, #0]
 80111fe:	193b      	adds	r3, r7, r4
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	4a4f      	ldr	r2, [pc, #316]	@ (8011340 <SGP_GetMeasurementValues+0x230>)
 8011204:	5cd3      	ldrb	r3, [r2, r3]
 8011206:	4a53      	ldr	r2, [pc, #332]	@ (8011354 <SGP_GetMeasurementValues+0x244>)
 8011208:	4953      	ldr	r1, [pc, #332]	@ (8011358 <SGP_GetMeasurementValues+0x248>)
 801120a:	9300      	str	r3, [sp, #0]
 801120c:	0003      	movs	r3, r0
 801120e:	2003      	movs	r0, #3
 8011210:	f002 ff20 	bl	8014054 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8011214:	193b      	adds	r3, r7, r4
 8011216:	781a      	ldrb	r2, [r3, #0]
 8011218:	193b      	adds	r3, r7, r4
 801121a:	3201      	adds	r2, #1
 801121c:	701a      	strb	r2, [r3, #0]
 801121e:	230f      	movs	r3, #15
 8011220:	18fb      	adds	r3, r7, r3
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	2b02      	cmp	r3, #2
 8011226:	d9e7      	bls.n	80111f8 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 8011228:	2300      	movs	r3, #0
 801122a:	e076      	b.n	801131a <SGP_GetMeasurementValues+0x20a>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 801122c:	f003 fc8a 	bl	8014b44 <HAL_GetTick>
 8011230:	0003      	movs	r3, r0
 8011232:	22fa      	movs	r2, #250	@ 0xfa
 8011234:	0092      	lsls	r2, r2, #2
 8011236:	189a      	adds	r2, r3, r2
 8011238:	4b48      	ldr	r3, [pc, #288]	@ (801135c <SGP_GetMeasurementValues+0x24c>)
 801123a:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 801123c:	f7ff ff5a 	bl	80110f4 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 8011240:	4b47      	ldr	r3, [pc, #284]	@ (8011360 <SGP_GetMeasurementValues+0x250>)
 8011242:	781b      	ldrb	r3, [r3, #0]
 8011244:	3301      	adds	r3, #1
 8011246:	b2da      	uxtb	r2, r3
 8011248:	4b45      	ldr	r3, [pc, #276]	@ (8011360 <SGP_GetMeasurementValues+0x250>)
 801124a:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 801124c:	4b44      	ldr	r3, [pc, #272]	@ (8011360 <SGP_GetMeasurementValues+0x250>)
 801124e:	781a      	ldrb	r2, [r3, #0]
 8011250:	4b44      	ldr	r3, [pc, #272]	@ (8011364 <SGP_GetMeasurementValues+0x254>)
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	429a      	cmp	r2, r3
 8011256:	d348      	bcc.n	80112ea <SGP_GetMeasurementValues+0x1da>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8011258:	4b39      	ldr	r3, [pc, #228]	@ (8011340 <SGP_GetMeasurementValues+0x230>)
 801125a:	785b      	ldrb	r3, [r3, #1]
 801125c:	b21b      	sxth	r3, r3
 801125e:	021b      	lsls	r3, r3, #8
 8011260:	b21a      	sxth	r2, r3
 8011262:	4b37      	ldr	r3, [pc, #220]	@ (8011340 <SGP_GetMeasurementValues+0x230>)
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	b21b      	sxth	r3, r3
 8011268:	4313      	orrs	r3, r2
 801126a:	b21a      	sxth	r2, r3
 801126c:	240c      	movs	r4, #12
 801126e:	193b      	adds	r3, r7, r4
 8011270:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 8011272:	2300      	movs	r3, #0
 8011274:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8011276:	193b      	adds	r3, r7, r4
 8011278:	8819      	ldrh	r1, [r3, #0]
 801127a:	2308      	movs	r3, #8
 801127c:	18fa      	adds	r2, r7, r3
 801127e:	4b3a      	ldr	r3, [pc, #232]	@ (8011368 <SGP_GetMeasurementValues+0x258>)
 8011280:	0018      	movs	r0, r3
 8011282:	f7fe fe87 	bl	800ff94 <GasIndexAlgorithm_process>
      *vocIndex = tempVocIndex;
 8011286:	68ba      	ldr	r2, [r7, #8]
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	601a      	str	r2, [r3, #0]
      sgp40samplecounter++;
 801128c:	4b37      	ldr	r3, [pc, #220]	@ (801136c <SGP_GetMeasurementValues+0x25c>)
 801128e:	781b      	ldrb	r3, [r3, #0]
 8011290:	3301      	adds	r3, #1
 8011292:	b2da      	uxtb	r2, r3
 8011294:	4b35      	ldr	r3, [pc, #212]	@ (801136c <SGP_GetMeasurementValues+0x25c>)
 8011296:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 8011298:	4b34      	ldr	r3, [pc, #208]	@ (801136c <SGP_GetMeasurementValues+0x25c>)
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	2b01      	cmp	r3, #1
 801129e:	d10d      	bne.n	80112bc <SGP_GetMeasurementValues+0x1ac>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 80112a0:	193b      	adds	r3, r7, r4
 80112a2:	881b      	ldrh	r3, [r3, #0]
 80112a4:	4a32      	ldr	r2, [pc, #200]	@ (8011370 <SGP_GetMeasurementValues+0x260>)
 80112a6:	492c      	ldr	r1, [pc, #176]	@ (8011358 <SGP_GetMeasurementValues+0x248>)
 80112a8:	2003      	movs	r0, #3
 80112aa:	f002 fed3 	bl	8014054 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	4a30      	ldr	r2, [pc, #192]	@ (8011374 <SGP_GetMeasurementValues+0x264>)
 80112b2:	4929      	ldr	r1, [pc, #164]	@ (8011358 <SGP_GetMeasurementValues+0x248>)
 80112b4:	2003      	movs	r0, #3
 80112b6:	f002 fecd 	bl	8014054 <CreateLine>
 80112ba:	e006      	b.n	80112ca <SGP_GetMeasurementValues+0x1ba>
      }
      else {
        if (sgp40samplecounter == 11) {
 80112bc:	4b2b      	ldr	r3, [pc, #172]	@ (801136c <SGP_GetMeasurementValues+0x25c>)
 80112be:	781b      	ldrb	r3, [r3, #0]
 80112c0:	2b0b      	cmp	r3, #11
 80112c2:	d102      	bne.n	80112ca <SGP_GetMeasurementValues+0x1ba>
          sgp40samplecounter = 0;
 80112c4:	4b29      	ldr	r3, [pc, #164]	@ (801136c <SGP_GetMeasurementValues+0x25c>)
 80112c6:	2200      	movs	r2, #0
 80112c8:	701a      	strb	r2, [r3, #0]
        }
      }
      SetVOCindicator(tempVocIndex);
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	0018      	movs	r0, r3
 80112d0:	f001 fe32 	bl	8012f38 <SetVOCindicator>
      SGP_AmountOfSamplesDone = 0;
 80112d4:	4b22      	ldr	r3, [pc, #136]	@ (8011360 <SGP_GetMeasurementValues+0x250>)
 80112d6:	2200      	movs	r2, #0
 80112d8:	701a      	strb	r2, [r3, #0]
      HT_MeasurementReceived = false;
 80112da:	4b14      	ldr	r3, [pc, #80]	@ (801132c <SGP_GetMeasurementValues+0x21c>)
 80112dc:	2200      	movs	r2, #0
 80112de:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 80112e0:	4b11      	ldr	r3, [pc, #68]	@ (8011328 <SGP_GetMeasurementValues+0x218>)
 80112e2:	2200      	movs	r2, #0
 80112e4:	701a      	strb	r2, [r3, #0]
      return true;
 80112e6:	2301      	movs	r3, #1
 80112e8:	e017      	b.n	801131a <SGP_GetMeasurementValues+0x20a>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 80112ea:	f7ff fef5 	bl	80110d8 <SGP_MeasurementDone>
 80112ee:	1e03      	subs	r3, r0, #0
 80112f0:	d012      	beq.n	8011318 <SGP_GetMeasurementValues+0x208>
 80112f2:	4b0c      	ldr	r3, [pc, #48]	@ (8011324 <SGP_GetMeasurementValues+0x214>)
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d00e      	beq.n	8011318 <SGP_GetMeasurementValues+0x208>
 80112fa:	4b10      	ldr	r3, [pc, #64]	@ (801133c <SGP_GetMeasurementValues+0x22c>)
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d00a      	beq.n	8011318 <SGP_GetMeasurementValues+0x208>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8011302:	4a1d      	ldr	r2, [pc, #116]	@ (8011378 <SGP_GetMeasurementValues+0x268>)
 8011304:	4b14      	ldr	r3, [pc, #80]	@ (8011358 <SGP_GetMeasurementValues+0x248>)
 8011306:	0019      	movs	r1, r3
 8011308:	2003      	movs	r0, #3
 801130a:	f002 fea3 	bl	8014054 <CreateLine>
    SGP_StartMeasurement();
 801130e:	f7ff fe8f 	bl	8011030 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8011312:	4b05      	ldr	r3, [pc, #20]	@ (8011328 <SGP_GetMeasurementValues+0x218>)
 8011314:	2200      	movs	r2, #0
 8011316:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8011318:	2300      	movs	r3, #0
}
 801131a:	0018      	movs	r0, r3
 801131c:	46bd      	mov	sp, r7
 801131e:	b005      	add	sp, #20
 8011320:	bd90      	pop	{r4, r7, pc}
 8011322:	46c0      	nop			@ (mov r8, r8)
 8011324:	200011b0 	.word	0x200011b0
 8011328:	2000125d 	.word	0x2000125d
 801132c:	2000125c 	.word	0x2000125c
 8011330:	200000bc 	.word	0x200000bc
 8011334:	200000d0 	.word	0x200000d0
 8011338:	200000b4 	.word	0x200000b4
 801133c:	200011b1 	.word	0x200011b1
 8011340:	200011a0 	.word	0x200011a0
 8011344:	0802de8c 	.word	0x0802de8c
 8011348:	0802deb4 	.word	0x0802deb4
 801134c:	0802deb8 	.word	0x0802deb8
 8011350:	0802ded8 	.word	0x0802ded8
 8011354:	0802dedc 	.word	0x0802dedc
 8011358:	0802defc 	.word	0x0802defc
 801135c:	200000cc 	.word	0x200000cc
 8011360:	200011a9 	.word	0x200011a9
 8011364:	200000c6 	.word	0x200000c6
 8011368:	200011b4 	.word	0x200011b4
 801136c:	200011aa 	.word	0x200011aa
 8011370:	0802df00 	.word	0x0802df00
 8011374:	0802df1c 	.word	0x0802df1c
 8011378:	0802df38 	.word	0x0802df38

0801137c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 801137c:	b580      	push	{r7, lr}
 801137e:	b084      	sub	sp, #16
 8011380:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8011382:	4b1a      	ldr	r3, [pc, #104]	@ (80113ec <SGP_DeviceConnected+0x70>)
 8011384:	2202      	movs	r2, #2
 8011386:	0019      	movs	r1, r3
 8011388:	2059      	movs	r0, #89	@ 0x59
 801138a:	f7ff fde5 	bl	8010f58 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 801138e:	2001      	movs	r0, #1
 8011390:	f003 fbe2 	bl	8014b58 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8011394:	4b16      	ldr	r3, [pc, #88]	@ (80113f0 <SGP_DeviceConnected+0x74>)
 8011396:	2209      	movs	r2, #9
 8011398:	0019      	movs	r1, r3
 801139a:	2059      	movs	r0, #89	@ 0x59
 801139c:	f7ff fdbe 	bl	8010f1c <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80113a0:	1dfb      	adds	r3, r7, #7
 80113a2:	2200      	movs	r2, #0
 80113a4:	701a      	strb	r2, [r3, #0]
 80113a6:	e011      	b.n	80113cc <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 80113a8:	1dfb      	adds	r3, r7, #7
 80113aa:	7818      	ldrb	r0, [r3, #0]
 80113ac:	1dfb      	adds	r3, r7, #7
 80113ae:	781b      	ldrb	r3, [r3, #0]
 80113b0:	4a0f      	ldr	r2, [pc, #60]	@ (80113f0 <SGP_DeviceConnected+0x74>)
 80113b2:	5cd3      	ldrb	r3, [r2, r3]
 80113b4:	4a0f      	ldr	r2, [pc, #60]	@ (80113f4 <SGP_DeviceConnected+0x78>)
 80113b6:	4910      	ldr	r1, [pc, #64]	@ (80113f8 <SGP_DeviceConnected+0x7c>)
 80113b8:	9300      	str	r3, [sp, #0]
 80113ba:	0003      	movs	r3, r0
 80113bc:	2002      	movs	r0, #2
 80113be:	f002 fe49 	bl	8014054 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80113c2:	1dfb      	adds	r3, r7, #7
 80113c4:	781a      	ldrb	r2, [r3, #0]
 80113c6:	1dfb      	adds	r3, r7, #7
 80113c8:	3201      	adds	r2, #1
 80113ca:	701a      	strb	r2, [r3, #0]
 80113cc:	1dfb      	adds	r3, r7, #7
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	2b08      	cmp	r3, #8
 80113d2:	d9e9      	bls.n	80113a8 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 80113d4:	4b06      	ldr	r3, [pc, #24]	@ (80113f0 <SGP_DeviceConnected+0x74>)
 80113d6:	2203      	movs	r2, #3
 80113d8:	2109      	movs	r1, #9
 80113da:	0018      	movs	r0, r3
 80113dc:	f000 f80e 	bl	80113fc <CheckCRC>
 80113e0:	0003      	movs	r3, r0
}
 80113e2:	0018      	movs	r0, r3
 80113e4:	46bd      	mov	sp, r7
 80113e6:	b002      	add	sp, #8
 80113e8:	bd80      	pop	{r7, pc}
 80113ea:	46c0      	nop			@ (mov r8, r8)
 80113ec:	200000b0 	.word	0x200000b0
 80113f0:	200011a0 	.word	0x200011a0
 80113f4:	0802df58 	.word	0x0802df58
 80113f8:	0802ded8 	.word	0x0802ded8

080113fc <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80113fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113fe:	b08f      	sub	sp, #60	@ 0x3c
 8011400:	af00      	add	r7, sp, #0
 8011402:	6278      	str	r0, [r7, #36]	@ 0x24
 8011404:	0008      	movs	r0, r1
 8011406:	0011      	movs	r1, r2
 8011408:	2323      	movs	r3, #35	@ 0x23
 801140a:	18fb      	adds	r3, r7, r3
 801140c:	1c02      	adds	r2, r0, #0
 801140e:	701a      	strb	r2, [r3, #0]
 8011410:	2322      	movs	r3, #34	@ 0x22
 8011412:	18fb      	adds	r3, r7, r3
 8011414:	1c0a      	adds	r2, r1, #0
 8011416:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8011418:	2317      	movs	r3, #23
 801141a:	2220      	movs	r2, #32
 801141c:	189b      	adds	r3, r3, r2
 801141e:	19db      	adds	r3, r3, r7
 8011420:	2200      	movs	r2, #0
 8011422:	701a      	strb	r2, [r3, #0]
 8011424:	e09f      	b.n	8011566 <CheckCRC+0x16a>
 8011426:	466b      	mov	r3, sp
 8011428:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 801142a:	2322      	movs	r3, #34	@ 0x22
 801142c:	18fb      	adds	r3, r7, r3
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	001a      	movs	r2, r3
 8011432:	3a01      	subs	r2, #1
 8011434:	633a      	str	r2, [r7, #48]	@ 0x30
 8011436:	60bb      	str	r3, [r7, #8]
 8011438:	2200      	movs	r2, #0
 801143a:	60fa      	str	r2, [r7, #12]
 801143c:	68b8      	ldr	r0, [r7, #8]
 801143e:	68f9      	ldr	r1, [r7, #12]
 8011440:	0002      	movs	r2, r0
 8011442:	0f52      	lsrs	r2, r2, #29
 8011444:	000c      	movs	r4, r1
 8011446:	00e4      	lsls	r4, r4, #3
 8011448:	61fc      	str	r4, [r7, #28]
 801144a:	69fc      	ldr	r4, [r7, #28]
 801144c:	4314      	orrs	r4, r2
 801144e:	61fc      	str	r4, [r7, #28]
 8011450:	0002      	movs	r2, r0
 8011452:	00d2      	lsls	r2, r2, #3
 8011454:	61ba      	str	r2, [r7, #24]
 8011456:	603b      	str	r3, [r7, #0]
 8011458:	2200      	movs	r2, #0
 801145a:	607a      	str	r2, [r7, #4]
 801145c:	6838      	ldr	r0, [r7, #0]
 801145e:	6879      	ldr	r1, [r7, #4]
 8011460:	0002      	movs	r2, r0
 8011462:	0f52      	lsrs	r2, r2, #29
 8011464:	000c      	movs	r4, r1
 8011466:	00e4      	lsls	r4, r4, #3
 8011468:	617c      	str	r4, [r7, #20]
 801146a:	697c      	ldr	r4, [r7, #20]
 801146c:	4314      	orrs	r4, r2
 801146e:	617c      	str	r4, [r7, #20]
 8011470:	0002      	movs	r2, r0
 8011472:	00d2      	lsls	r2, r2, #3
 8011474:	613a      	str	r2, [r7, #16]
 8011476:	3307      	adds	r3, #7
 8011478:	08db      	lsrs	r3, r3, #3
 801147a:	00db      	lsls	r3, r3, #3
 801147c:	466a      	mov	r2, sp
 801147e:	1ad3      	subs	r3, r2, r3
 8011480:	469d      	mov	sp, r3
 8011482:	466b      	mov	r3, sp
 8011484:	3300      	adds	r3, #0
 8011486:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8011488:	2316      	movs	r3, #22
 801148a:	2220      	movs	r2, #32
 801148c:	189b      	adds	r3, r3, r2
 801148e:	19db      	adds	r3, r3, r7
 8011490:	2200      	movs	r2, #0
 8011492:	701a      	strb	r2, [r3, #0]
 8011494:	e01e      	b.n	80114d4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8011496:	2317      	movs	r3, #23
 8011498:	2220      	movs	r2, #32
 801149a:	189b      	adds	r3, r3, r2
 801149c:	19db      	adds	r3, r3, r7
 801149e:	781a      	ldrb	r2, [r3, #0]
 80114a0:	2116      	movs	r1, #22
 80114a2:	2320      	movs	r3, #32
 80114a4:	18cb      	adds	r3, r1, r3
 80114a6:	19db      	adds	r3, r3, r7
 80114a8:	781b      	ldrb	r3, [r3, #0]
 80114aa:	18d3      	adds	r3, r2, r3
 80114ac:	001a      	movs	r2, r3
 80114ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114b0:	189a      	adds	r2, r3, r2
 80114b2:	0008      	movs	r0, r1
 80114b4:	2320      	movs	r3, #32
 80114b6:	18cb      	adds	r3, r1, r3
 80114b8:	19db      	adds	r3, r3, r7
 80114ba:	781b      	ldrb	r3, [r3, #0]
 80114bc:	7811      	ldrb	r1, [r2, #0]
 80114be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80114c0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 80114c2:	2320      	movs	r3, #32
 80114c4:	18c3      	adds	r3, r0, r3
 80114c6:	19db      	adds	r3, r3, r7
 80114c8:	781a      	ldrb	r2, [r3, #0]
 80114ca:	2320      	movs	r3, #32
 80114cc:	18c3      	adds	r3, r0, r3
 80114ce:	19db      	adds	r3, r3, r7
 80114d0:	3201      	adds	r2, #1
 80114d2:	701a      	strb	r2, [r3, #0]
 80114d4:	2316      	movs	r3, #22
 80114d6:	2220      	movs	r2, #32
 80114d8:	189b      	adds	r3, r3, r2
 80114da:	19da      	adds	r2, r3, r7
 80114dc:	2322      	movs	r3, #34	@ 0x22
 80114de:	18fb      	adds	r3, r7, r3
 80114e0:	7812      	ldrb	r2, [r2, #0]
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d3d6      	bcc.n	8011496 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80114e8:	2417      	movs	r4, #23
 80114ea:	2320      	movs	r3, #32
 80114ec:	18e3      	adds	r3, r4, r3
 80114ee:	19db      	adds	r3, r3, r7
 80114f0:	781a      	ldrb	r2, [r3, #0]
 80114f2:	2322      	movs	r3, #34	@ 0x22
 80114f4:	18fb      	adds	r3, r7, r3
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	18d3      	adds	r3, r2, r3
 80114fa:	3b01      	subs	r3, #1
 80114fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80114fe:	18d2      	adds	r2, r2, r3
 8011500:	250b      	movs	r5, #11
 8011502:	2320      	movs	r3, #32
 8011504:	18eb      	adds	r3, r5, r3
 8011506:	19db      	adds	r3, r3, r7
 8011508:	7812      	ldrb	r2, [r2, #0]
 801150a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 801150c:	2322      	movs	r3, #34	@ 0x22
 801150e:	18fb      	adds	r3, r7, r3
 8011510:	781b      	ldrb	r3, [r3, #0]
 8011512:	3b01      	subs	r3, #1
 8011514:	b2da      	uxtb	r2, r3
 8011516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011518:	0011      	movs	r1, r2
 801151a:	0018      	movs	r0, r3
 801151c:	f000 f838 	bl	8011590 <CalculateCRC>
 8011520:	0003      	movs	r3, r0
 8011522:	001a      	movs	r2, r3
 8011524:	2320      	movs	r3, #32
 8011526:	18eb      	adds	r3, r5, r3
 8011528:	19db      	adds	r3, r3, r7
 801152a:	781b      	ldrb	r3, [r3, #0]
 801152c:	4293      	cmp	r3, r2
 801152e:	d00c      	beq.n	801154a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8011530:	2320      	movs	r3, #32
 8011532:	18e3      	adds	r3, r4, r3
 8011534:	19db      	adds	r3, r3, r7
 8011536:	781b      	ldrb	r3, [r3, #0]
 8011538:	3301      	adds	r3, #1
 801153a:	4a13      	ldr	r2, [pc, #76]	@ (8011588 <CheckCRC+0x18c>)
 801153c:	4913      	ldr	r1, [pc, #76]	@ (801158c <CheckCRC+0x190>)
 801153e:	2001      	movs	r0, #1
 8011540:	f002 fd88 	bl	8014054 <CreateLine>
      return false;
 8011544:	2300      	movs	r3, #0
 8011546:	46b5      	mov	sp, r6
 8011548:	e019      	b.n	801157e <CheckCRC+0x182>
 801154a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 801154c:	2217      	movs	r2, #23
 801154e:	2320      	movs	r3, #32
 8011550:	18d3      	adds	r3, r2, r3
 8011552:	19db      	adds	r3, r3, r7
 8011554:	2120      	movs	r1, #32
 8011556:	1852      	adds	r2, r2, r1
 8011558:	19d1      	adds	r1, r2, r7
 801155a:	2222      	movs	r2, #34	@ 0x22
 801155c:	18ba      	adds	r2, r7, r2
 801155e:	7809      	ldrb	r1, [r1, #0]
 8011560:	7812      	ldrb	r2, [r2, #0]
 8011562:	188a      	adds	r2, r1, r2
 8011564:	701a      	strb	r2, [r3, #0]
 8011566:	2317      	movs	r3, #23
 8011568:	2220      	movs	r2, #32
 801156a:	189b      	adds	r3, r3, r2
 801156c:	19da      	adds	r2, r3, r7
 801156e:	2323      	movs	r3, #35	@ 0x23
 8011570:	18fb      	adds	r3, r7, r3
 8011572:	7812      	ldrb	r2, [r2, #0]
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	429a      	cmp	r2, r3
 8011578:	d200      	bcs.n	801157c <CheckCRC+0x180>
 801157a:	e754      	b.n	8011426 <CheckCRC+0x2a>
    }
  }
  return true;
 801157c:	2301      	movs	r3, #1
}
 801157e:	0018      	movs	r0, r3
 8011580:	46bd      	mov	sp, r7
 8011582:	b00f      	add	sp, #60	@ 0x3c
 8011584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011586:	46c0      	nop			@ (mov r8, r8)
 8011588:	0802df78 	.word	0x0802df78
 801158c:	0802deb4 	.word	0x0802deb4

08011590 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	000a      	movs	r2, r1
 801159a:	1cfb      	adds	r3, r7, #3
 801159c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 801159e:	230f      	movs	r3, #15
 80115a0:	18fb      	adds	r3, r7, r3
 80115a2:	22ff      	movs	r2, #255	@ 0xff
 80115a4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80115a6:	230e      	movs	r3, #14
 80115a8:	18fb      	adds	r3, r7, r3
 80115aa:	2200      	movs	r2, #0
 80115ac:	701a      	strb	r2, [r3, #0]
 80115ae:	e038      	b.n	8011622 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80115b0:	230e      	movs	r3, #14
 80115b2:	18fb      	adds	r3, r7, r3
 80115b4:	781b      	ldrb	r3, [r3, #0]
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	18d3      	adds	r3, r2, r3
 80115ba:	7819      	ldrb	r1, [r3, #0]
 80115bc:	220f      	movs	r2, #15
 80115be:	18bb      	adds	r3, r7, r2
 80115c0:	18ba      	adds	r2, r7, r2
 80115c2:	7812      	ldrb	r2, [r2, #0]
 80115c4:	404a      	eors	r2, r1
 80115c6:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80115c8:	230d      	movs	r3, #13
 80115ca:	18fb      	adds	r3, r7, r3
 80115cc:	2200      	movs	r2, #0
 80115ce:	701a      	strb	r2, [r3, #0]
 80115d0:	e01c      	b.n	801160c <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 80115d2:	210f      	movs	r1, #15
 80115d4:	187b      	adds	r3, r7, r1
 80115d6:	781b      	ldrb	r3, [r3, #0]
 80115d8:	b25b      	sxtb	r3, r3
 80115da:	2b00      	cmp	r3, #0
 80115dc:	da0a      	bge.n	80115f4 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80115de:	187b      	adds	r3, r7, r1
 80115e0:	781b      	ldrb	r3, [r3, #0]
 80115e2:	b25b      	sxtb	r3, r3
 80115e4:	18db      	adds	r3, r3, r3
 80115e6:	b25b      	sxtb	r3, r3
 80115e8:	2231      	movs	r2, #49	@ 0x31
 80115ea:	4053      	eors	r3, r2
 80115ec:	b25a      	sxtb	r2, r3
 80115ee:	187b      	adds	r3, r7, r1
 80115f0:	701a      	strb	r2, [r3, #0]
 80115f2:	e005      	b.n	8011600 <CalculateCRC+0x70>
      } else {
        crc <<= 1;
 80115f4:	230f      	movs	r3, #15
 80115f6:	18fa      	adds	r2, r7, r3
 80115f8:	18fb      	adds	r3, r7, r3
 80115fa:	781b      	ldrb	r3, [r3, #0]
 80115fc:	18db      	adds	r3, r3, r3
 80115fe:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8011600:	210d      	movs	r1, #13
 8011602:	187b      	adds	r3, r7, r1
 8011604:	781a      	ldrb	r2, [r3, #0]
 8011606:	187b      	adds	r3, r7, r1
 8011608:	3201      	adds	r2, #1
 801160a:	701a      	strb	r2, [r3, #0]
 801160c:	230d      	movs	r3, #13
 801160e:	18fb      	adds	r3, r7, r3
 8011610:	781b      	ldrb	r3, [r3, #0]
 8011612:	2b07      	cmp	r3, #7
 8011614:	d9dd      	bls.n	80115d2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8011616:	210e      	movs	r1, #14
 8011618:	187b      	adds	r3, r7, r1
 801161a:	781a      	ldrb	r2, [r3, #0]
 801161c:	187b      	adds	r3, r7, r1
 801161e:	3201      	adds	r2, #1
 8011620:	701a      	strb	r2, [r3, #0]
 8011622:	230e      	movs	r3, #14
 8011624:	18fa      	adds	r2, r7, r3
 8011626:	1cfb      	adds	r3, r7, #3
 8011628:	7812      	ldrb	r2, [r2, #0]
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	429a      	cmp	r2, r3
 801162e:	d3bf      	bcc.n	80115b0 <CalculateCRC+0x20>
      }
    }
  }
//    Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8011630:	230f      	movs	r3, #15
 8011632:	18fb      	adds	r3, r7, r3
 8011634:	781b      	ldrb	r3, [r3, #0]
}
 8011636:	0018      	movs	r0, r3
 8011638:	46bd      	mov	sp, r7
 801163a:	b004      	add	sp, #16
 801163c:	bd80      	pop	{r7, pc}
	...

08011640 <SGP_SetHT>:

void SGP_SetHT(float* temperature, float* humidity){
 8011640:	b580      	push	{r7, lr}
 8011642:	b084      	sub	sp, #16
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	4936      	ldr	r1, [pc, #216]	@ (8011728 <SGP_SetHT+0xe8>)
 8011650:	1c18      	adds	r0, r3, #0
 8011652:	f7ef f935 	bl	80008c0 <__aeabi_fadd>
 8011656:	1c03      	adds	r3, r0, #0
 8011658:	4934      	ldr	r1, [pc, #208]	@ (801172c <SGP_SetHT+0xec>)
 801165a:	1c18      	adds	r0, r3, #0
 801165c:	f7ef fb22 	bl	8000ca4 <__aeabi_fdiv>
 8011660:	1c03      	adds	r3, r0, #0
 8011662:	4933      	ldr	r1, [pc, #204]	@ (8011730 <SGP_SetHT+0xf0>)
 8011664:	1c18      	adds	r0, r3, #0
 8011666:	f7ef fceb 	bl	8001040 <__aeabi_fmul>
 801166a:	1c03      	adds	r3, r0, #0
 801166c:	1c18      	adds	r0, r3, #0
 801166e:	f7ee ffd5 	bl	800061c <__aeabi_f2uiz>
 8011672:	0003      	movs	r3, r0
 8011674:	b29a      	uxth	r2, r3
 8011676:	4b2f      	ldr	r3, [pc, #188]	@ (8011734 <SGP_SetHT+0xf4>)
 8011678:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 801167a:	683b      	ldr	r3, [r7, #0]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	492e      	ldr	r1, [pc, #184]	@ (8011738 <SGP_SetHT+0xf8>)
 8011680:	1c18      	adds	r0, r3, #0
 8011682:	f7ef fb0f 	bl	8000ca4 <__aeabi_fdiv>
 8011686:	1c03      	adds	r3, r0, #0
 8011688:	4929      	ldr	r1, [pc, #164]	@ (8011730 <SGP_SetHT+0xf0>)
 801168a:	1c18      	adds	r0, r3, #0
 801168c:	f7ef fcd8 	bl	8001040 <__aeabi_fmul>
 8011690:	1c03      	adds	r3, r0, #0
 8011692:	1c18      	adds	r0, r3, #0
 8011694:	f7ee ffc2 	bl	800061c <__aeabi_f2uiz>
 8011698:	0003      	movs	r3, r0
 801169a:	b29a      	uxth	r2, r3
 801169c:	4b27      	ldr	r3, [pc, #156]	@ (801173c <SGP_SetHT+0xfc>)
 801169e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 80116a0:	4b26      	ldr	r3, [pc, #152]	@ (801173c <SGP_SetHT+0xfc>)
 80116a2:	881b      	ldrh	r3, [r3, #0]
 80116a4:	0a1b      	lsrs	r3, r3, #8
 80116a6:	b29b      	uxth	r3, r3
 80116a8:	b2da      	uxtb	r2, r3
 80116aa:	4b25      	ldr	r3, [pc, #148]	@ (8011740 <SGP_SetHT+0x100>)
 80116ac:	709a      	strb	r2, [r3, #2]
 80116ae:	4b24      	ldr	r3, [pc, #144]	@ (8011740 <SGP_SetHT+0x100>)
 80116b0:	789a      	ldrb	r2, [r3, #2]
 80116b2:	210c      	movs	r1, #12
 80116b4:	187b      	adds	r3, r7, r1
 80116b6:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 80116b8:	4b20      	ldr	r3, [pc, #128]	@ (801173c <SGP_SetHT+0xfc>)
 80116ba:	881b      	ldrh	r3, [r3, #0]
 80116bc:	b2da      	uxtb	r2, r3
 80116be:	4b20      	ldr	r3, [pc, #128]	@ (8011740 <SGP_SetHT+0x100>)
 80116c0:	70da      	strb	r2, [r3, #3]
 80116c2:	4b1f      	ldr	r3, [pc, #124]	@ (8011740 <SGP_SetHT+0x100>)
 80116c4:	78da      	ldrb	r2, [r3, #3]
 80116c6:	187b      	adds	r3, r7, r1
 80116c8:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 80116ca:	187b      	adds	r3, r7, r1
 80116cc:	2102      	movs	r1, #2
 80116ce:	0018      	movs	r0, r3
 80116d0:	f7ff ff5e 	bl	8011590 <CalculateCRC>
 80116d4:	0003      	movs	r3, r0
 80116d6:	001a      	movs	r2, r3
 80116d8:	4b19      	ldr	r3, [pc, #100]	@ (8011740 <SGP_SetHT+0x100>)
 80116da:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 80116dc:	4b15      	ldr	r3, [pc, #84]	@ (8011734 <SGP_SetHT+0xf4>)
 80116de:	881b      	ldrh	r3, [r3, #0]
 80116e0:	0a1b      	lsrs	r3, r3, #8
 80116e2:	b29b      	uxth	r3, r3
 80116e4:	b2da      	uxtb	r2, r3
 80116e6:	4b16      	ldr	r3, [pc, #88]	@ (8011740 <SGP_SetHT+0x100>)
 80116e8:	715a      	strb	r2, [r3, #5]
 80116ea:	4b15      	ldr	r3, [pc, #84]	@ (8011740 <SGP_SetHT+0x100>)
 80116ec:	795a      	ldrb	r2, [r3, #5]
 80116ee:	2108      	movs	r1, #8
 80116f0:	187b      	adds	r3, r7, r1
 80116f2:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80116f4:	4b0f      	ldr	r3, [pc, #60]	@ (8011734 <SGP_SetHT+0xf4>)
 80116f6:	881b      	ldrh	r3, [r3, #0]
 80116f8:	b2da      	uxtb	r2, r3
 80116fa:	4b11      	ldr	r3, [pc, #68]	@ (8011740 <SGP_SetHT+0x100>)
 80116fc:	719a      	strb	r2, [r3, #6]
 80116fe:	4b10      	ldr	r3, [pc, #64]	@ (8011740 <SGP_SetHT+0x100>)
 8011700:	799a      	ldrb	r2, [r3, #6]
 8011702:	187b      	adds	r3, r7, r1
 8011704:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8011706:	187b      	adds	r3, r7, r1
 8011708:	2102      	movs	r1, #2
 801170a:	0018      	movs	r0, r3
 801170c:	f7ff ff40 	bl	8011590 <CalculateCRC>
 8011710:	0003      	movs	r3, r0
 8011712:	001a      	movs	r2, r3
 8011714:	4b0a      	ldr	r3, [pc, #40]	@ (8011740 <SGP_SetHT+0x100>)
 8011716:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8011718:	4b0a      	ldr	r3, [pc, #40]	@ (8011744 <SGP_SetHT+0x104>)
 801171a:	2201      	movs	r2, #1
 801171c:	701a      	strb	r2, [r3, #0]
}
 801171e:	46c0      	nop			@ (mov r8, r8)
 8011720:	46bd      	mov	sp, r7
 8011722:	b004      	add	sp, #16
 8011724:	bd80      	pop	{r7, pc}
 8011726:	46c0      	nop			@ (mov r8, r8)
 8011728:	42340000 	.word	0x42340000
 801172c:	432f0000 	.word	0x432f0000
 8011730:	477fff00 	.word	0x477fff00
 8011734:	2000125a 	.word	0x2000125a
 8011738:	42c80000 	.word	0x42c80000
 801173c:	20001258 	.word	0x20001258
 8011740:	200000bc 	.word	0x200000bc
 8011744:	2000125c 	.word	0x2000125c

08011748 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 8011748:	b580      	push	{r7, lr}
 801174a:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 801174c:	4a09      	ldr	r2, [pc, #36]	@ (8011774 <SGP_SoftReset+0x2c>)
 801174e:	4b0a      	ldr	r3, [pc, #40]	@ (8011778 <SGP_SoftReset+0x30>)
 8011750:	0019      	movs	r1, r3
 8011752:	2003      	movs	r0, #3
 8011754:	f002 fc7e 	bl	8014054 <CreateLine>
  SGP_TurnHeaterOff();
 8011758:	f7ff fccc 	bl	80110f4 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 801175c:	200a      	movs	r0, #10
 801175e:	f003 f9fb 	bl	8014b58 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8011762:	4b06      	ldr	r3, [pc, #24]	@ (801177c <SGP_SoftReset+0x34>)
 8011764:	2202      	movs	r2, #2
 8011766:	0019      	movs	r1, r3
 8011768:	2059      	movs	r0, #89	@ 0x59
 801176a:	f7ff fbf5 	bl	8010f58 <WriteRegister>
}
 801176e:	46c0      	nop			@ (mov r8, r8)
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}
 8011774:	0802e020 	.word	0x0802e020
 8011778:	0802defc 	.word	0x0802defc
 801177c:	200000c4 	.word	0x200000c4

08011780 <ResetVOCresult>:

void ResetVOCresult(void) {
 8011780:	b580      	push	{r7, lr}
 8011782:	af00      	add	r7, sp, #0
  vocIndex = 0;
 8011784:	4b02      	ldr	r3, [pc, #8]	@ (8011790 <ResetVOCresult+0x10>)
 8011786:	2200      	movs	r2, #0
 8011788:	601a      	str	r2, [r3, #0]
}
 801178a:	46c0      	nop			@ (mov r8, r8)
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}
 8011790:	20001260 	.word	0x20001260

08011794 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 8011794:	b580      	push	{r7, lr}
 8011796:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 8011798:	4b4b      	ldr	r3, [pc, #300]	@ (80118c8 <SGP_Upkeep+0x134>)
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	2b07      	cmp	r3, #7
 801179e:	d900      	bls.n	80117a2 <SGP_Upkeep+0xe>
 80117a0:	e07a      	b.n	8011898 <SGP_Upkeep+0x104>
 80117a2:	009a      	lsls	r2, r3, #2
 80117a4:	4b49      	ldr	r3, [pc, #292]	@ (80118cc <SGP_Upkeep+0x138>)
 80117a6:	18d3      	adds	r3, r2, r3
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 80117ac:	4a48      	ldr	r2, [pc, #288]	@ (80118d0 <SGP_Upkeep+0x13c>)
 80117ae:	4b49      	ldr	r3, [pc, #292]	@ (80118d4 <SGP_Upkeep+0x140>)
 80117b0:	0019      	movs	r1, r3
 80117b2:	2003      	movs	r0, #3
 80117b4:	f002 fc4e 	bl	8014054 <CreateLine>
    break;
 80117b8:	e081      	b.n	80118be <SGP_Upkeep+0x12a>

  case SGP_STATE_INIT:
    ResetVOCresult();
 80117ba:	f7ff ffe1 	bl	8011780 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 80117be:	4b42      	ldr	r3, [pc, #264]	@ (80118c8 <SGP_Upkeep+0x134>)
 80117c0:	2201      	movs	r2, #1
 80117c2:	701a      	strb	r2, [r3, #0]
    break;
 80117c4:	e07b      	b.n	80118be <SGP_Upkeep+0x12a>

  case SGP_STATE_START_MEASUREMENTS:
    if (getSensorLock() != FREE) {
 80117c6:	f7fc fc2b 	bl	800e020 <getSensorLock>
 80117ca:	1e03      	subs	r3, r0, #0
 80117cc:	d000      	beq.n	80117d0 <SGP_Upkeep+0x3c>
 80117ce:	e06f      	b.n	80118b0 <SGP_Upkeep+0x11c>
      break;
    }
    setSensorLock(SGP40);
 80117d0:	2005      	movs	r0, #5
 80117d2:	f7fc fc11 	bl	800dff8 <setSensorLock>
    SetMeasurementIndicator();
 80117d6:	f001 f98f 	bl	8012af8 <SetMeasurementIndicator>
    SGP_StartMeasurement();
 80117da:	f7ff fc29 	bl	8011030 <SGP_StartMeasurement>
    HAL_Delay(10); // wait for deferred DMA transfers
 80117de:	200a      	movs	r0, #10
 80117e0:	f003 f9ba 	bl	8014b58 <HAL_Delay>
    setSensorLock(FREE);
 80117e4:	2000      	movs	r0, #0
 80117e6:	f7fc fc07 	bl	800dff8 <setSensorLock>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 80117ea:	4b37      	ldr	r3, [pc, #220]	@ (80118c8 <SGP_Upkeep+0x134>)
 80117ec:	2202      	movs	r2, #2
 80117ee:	701a      	strb	r2, [r3, #0]
    break;
 80117f0:	e065      	b.n	80118be <SGP_Upkeep+0x12a>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if (getSensorLock() != FREE) {
 80117f2:	f7fc fc15 	bl	800e020 <getSensorLock>
 80117f6:	1e03      	subs	r3, r0, #0
 80117f8:	d15c      	bne.n	80118b4 <SGP_Upkeep+0x120>
      break;
    }
    setSensorLock(SGP40);
 80117fa:	2005      	movs	r0, #5
 80117fc:	f7fc fbfc 	bl	800dff8 <setSensorLock>
    if(SGP_GetMeasurementValues(&vocIndex)) {
 8011800:	4b35      	ldr	r3, [pc, #212]	@ (80118d8 <SGP_Upkeep+0x144>)
 8011802:	0018      	movs	r0, r3
 8011804:	f7ff fc84 	bl	8011110 <SGP_GetMeasurementValues>
 8011808:	1e03      	subs	r3, r0, #0
 801180a:	d002      	beq.n	8011812 <SGP_Upkeep+0x7e>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 801180c:	4b2e      	ldr	r3, [pc, #184]	@ (80118c8 <SGP_Upkeep+0x134>)
 801180e:	2203      	movs	r2, #3
 8011810:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10); // wait for deferred DMA transfers
 8011812:	200a      	movs	r0, #10
 8011814:	f003 f9a0 	bl	8014b58 <HAL_Delay>
    setSensorLock(FREE);
 8011818:	2000      	movs	r0, #0
 801181a:	f7fc fbed 	bl	800dff8 <setSensorLock>
    break;
 801181e:	e04e      	b.n	80118be <SGP_Upkeep+0x12a>

  case SGP_STATE_PROCESS_RESULTS:
    setVOC(vocIndex);
 8011820:	4b2d      	ldr	r3, [pc, #180]	@ (80118d8 <SGP_Upkeep+0x144>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	b29b      	uxth	r3, r3
 8011826:	0018      	movs	r0, r3
 8011828:	f7f3 f96c 	bl	8004b04 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 801182c:	4b26      	ldr	r3, [pc, #152]	@ (80118c8 <SGP_Upkeep+0x134>)
 801182e:	2206      	movs	r2, #6
 8011830:	701a      	strb	r2, [r3, #0]
    break;
 8011832:	e044      	b.n	80118be <SGP_Upkeep+0x12a>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 8011834:	4b24      	ldr	r3, [pc, #144]	@ (80118c8 <SGP_Upkeep+0x134>)
 8011836:	2207      	movs	r2, #7
 8011838:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter >= 4) && (!usbPluggedIn)) {
 801183a:	4b28      	ldr	r3, [pc, #160]	@ (80118dc <SGP_Upkeep+0x148>)
 801183c:	781b      	ldrb	r3, [r3, #0]
 801183e:	2b03      	cmp	r3, #3
 8011840:	d912      	bls.n	8011868 <SGP_Upkeep+0xd4>
 8011842:	4b27      	ldr	r3, [pc, #156]	@ (80118e0 <SGP_Upkeep+0x14c>)
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	2201      	movs	r2, #1
 8011848:	4053      	eors	r3, r2
 801184a:	b2db      	uxtb	r3, r3
 801184c:	2b00      	cmp	r3, #0
 801184e:	d00b      	beq.n	8011868 <SGP_Upkeep+0xd4>
      // During startup take 12 samples
      if (sgpinitdone) {
 8011850:	4b24      	ldr	r3, [pc, #144]	@ (80118e4 <SGP_Upkeep+0x150>)
 8011852:	781b      	ldrb	r3, [r3, #0]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d004      	beq.n	8011862 <SGP_Upkeep+0xce>
        SGP_SoftReset();
 8011858:	f7ff ff76 	bl	8011748 <SGP_SoftReset>
        SetVOCSensorStatus(false);
 801185c:	2000      	movs	r0, #0
 801185e:	f7fb ff73 	bl	800d748 <SetVOCSensorStatus>
      }
      sgpinitdone = true;
 8011862:	4b20      	ldr	r3, [pc, #128]	@ (80118e4 <SGP_Upkeep+0x150>)
 8011864:	2201      	movs	r2, #1
 8011866:	701a      	strb	r2, [r3, #0]
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 8011868:	f003 f96c 	bl	8014b44 <HAL_GetTick>
 801186c:	0003      	movs	r3, r0
 801186e:	22c8      	movs	r2, #200	@ 0xc8
 8011870:	0092      	lsls	r2, r2, #2
 8011872:	189a      	adds	r2, r3, r2
 8011874:	4b1c      	ldr	r3, [pc, #112]	@ (80118e8 <SGP_Upkeep+0x154>)
 8011876:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 8011878:	f001 f956 	bl	8012b28 <ResetMeasurementIndicator>
  break;
 801187c:	e01f      	b.n	80118be <SGP_Upkeep+0x12a>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 801187e:	4b1a      	ldr	r3, [pc, #104]	@ (80118e8 <SGP_Upkeep+0x154>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	0018      	movs	r0, r3
 8011884:	f002 fb90 	bl	8013fa8 <TimestampIsReached>
 8011888:	1e03      	subs	r3, r0, #0
 801188a:	d015      	beq.n	80118b8 <SGP_Upkeep+0x124>
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 801188c:	f7ff fbb8 	bl	8011000 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 8011890:	4b0d      	ldr	r3, [pc, #52]	@ (80118c8 <SGP_Upkeep+0x134>)
 8011892:	2200      	movs	r2, #0
 8011894:	701a      	strb	r2, [r3, #0]
    }
    break;
 8011896:	e00f      	b.n	80118b8 <SGP_Upkeep+0x124>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 8011898:	4b0b      	ldr	r3, [pc, #44]	@ (80118c8 <SGP_Upkeep+0x134>)
 801189a:	2200      	movs	r2, #0
 801189c:	701a      	strb	r2, [r3, #0]
    if (getSensorLock() == SGP40) {
 801189e:	f7fc fbbf 	bl	800e020 <getSensorLock>
 80118a2:	0003      	movs	r3, r0
 80118a4:	2b05      	cmp	r3, #5
 80118a6:	d109      	bne.n	80118bc <SGP_Upkeep+0x128>
      setSensorLock(FREE);
 80118a8:	2000      	movs	r0, #0
 80118aa:	f7fc fba5 	bl	800dff8 <setSensorLock>
    }
    break;
 80118ae:	e005      	b.n	80118bc <SGP_Upkeep+0x128>
      break;
 80118b0:	46c0      	nop			@ (mov r8, r8)
 80118b2:	e004      	b.n	80118be <SGP_Upkeep+0x12a>
      break;
 80118b4:	46c0      	nop			@ (mov r8, r8)
 80118b6:	e002      	b.n	80118be <SGP_Upkeep+0x12a>
    break;
 80118b8:	46c0      	nop			@ (mov r8, r8)
 80118ba:	e000      	b.n	80118be <SGP_Upkeep+0x12a>
    break;
 80118bc:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 80118be:	4b02      	ldr	r3, [pc, #8]	@ (80118c8 <SGP_Upkeep+0x134>)
 80118c0:	781b      	ldrb	r3, [r3, #0]
}
 80118c2:	0018      	movs	r0, r3
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	20001264 	.word	0x20001264
 80118cc:	0802e8c4 	.word	0x0802e8c4
 80118d0:	0802e038 	.word	0x0802e038
 80118d4:	0802defc 	.word	0x0802defc
 80118d8:	20001260 	.word	0x20001260
 80118dc:	200011aa 	.word	0x200011aa
 80118e0:	20002101 	.word	0x20002101
 80118e4:	20001194 	.word	0x20001194
 80118e8:	200011ac 	.word	0x200011ac

080118ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b082      	sub	sp, #8
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	0002      	movs	r2, r0
 80118f4:	1dfb      	adds	r3, r7, #7
 80118f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80118f8:	1dfb      	adds	r3, r7, #7
 80118fa:	781b      	ldrb	r3, [r3, #0]
 80118fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80118fe:	d809      	bhi.n	8011914 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011900:	1dfb      	adds	r3, r7, #7
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	001a      	movs	r2, r3
 8011906:	231f      	movs	r3, #31
 8011908:	401a      	ands	r2, r3
 801190a:	4b04      	ldr	r3, [pc, #16]	@ (801191c <__NVIC_EnableIRQ+0x30>)
 801190c:	2101      	movs	r1, #1
 801190e:	4091      	lsls	r1, r2
 8011910:	000a      	movs	r2, r1
 8011912:	601a      	str	r2, [r3, #0]
  }
}
 8011914:	46c0      	nop			@ (mov r8, r8)
 8011916:	46bd      	mov	sp, r7
 8011918:	b002      	add	sp, #8
 801191a:	bd80      	pop	{r7, pc}
 801191c:	e000e100 	.word	0xe000e100

08011920 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b082      	sub	sp, #8
 8011924:	af00      	add	r7, sp, #0
 8011926:	0002      	movs	r2, r0
 8011928:	1dfb      	adds	r3, r7, #7
 801192a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801192c:	1dfb      	adds	r3, r7, #7
 801192e:	781b      	ldrb	r3, [r3, #0]
 8011930:	2b7f      	cmp	r3, #127	@ 0x7f
 8011932:	d810      	bhi.n	8011956 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011934:	1dfb      	adds	r3, r7, #7
 8011936:	781b      	ldrb	r3, [r3, #0]
 8011938:	001a      	movs	r2, r3
 801193a:	231f      	movs	r3, #31
 801193c:	4013      	ands	r3, r2
 801193e:	4908      	ldr	r1, [pc, #32]	@ (8011960 <__NVIC_DisableIRQ+0x40>)
 8011940:	2201      	movs	r2, #1
 8011942:	409a      	lsls	r2, r3
 8011944:	0013      	movs	r3, r2
 8011946:	2280      	movs	r2, #128	@ 0x80
 8011948:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801194a:	f3bf 8f4f 	dsb	sy
}
 801194e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8011950:	f3bf 8f6f 	isb	sy
}
 8011954:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8011956:	46c0      	nop			@ (mov r8, r8)
 8011958:	46bd      	mov	sp, r7
 801195a:	b002      	add	sp, #8
 801195c:	bd80      	pop	{r7, pc}
 801195e:	46c0      	nop			@ (mov r8, r8)
 8011960:	e000e100 	.word	0xe000e100

08011964 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8011964:	b5b0      	push	{r4, r5, r7, lr}
 8011966:	b088      	sub	sp, #32
 8011968:	af02      	add	r7, sp, #8
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	0008      	movs	r0, r1
 801196e:	0011      	movs	r1, r2
 8011970:	1cfb      	adds	r3, r7, #3
 8011972:	1c02      	adds	r2, r0, #0
 8011974:	701a      	strb	r2, [r3, #0]
 8011976:	1cbb      	adds	r3, r7, #2
 8011978:	1c0a      	adds	r2, r1, #0
 801197a:	701a      	strb	r2, [r3, #0]
//	printf("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 801197c:	4b5b      	ldr	r3, [pc, #364]	@ (8011aec <getSoundData+0x188>)
 801197e:	781b      	ldrb	r3, [r3, #0]
 8011980:	b2db      	uxtb	r3, r3
 8011982:	2201      	movs	r2, #1
 8011984:	4053      	eors	r3, r2
 8011986:	b2db      	uxtb	r3, r3
 8011988:	2b00      	cmp	r3, #0
 801198a:	d107      	bne.n	801199c <getSoundData+0x38>
 801198c:	4b58      	ldr	r3, [pc, #352]	@ (8011af0 <getSoundData+0x18c>)
 801198e:	781b      	ldrb	r3, [r3, #0]
 8011990:	b2db      	uxtb	r3, r3
 8011992:	2201      	movs	r2, #1
 8011994:	4053      	eors	r3, r2
 8011996:	b2db      	uxtb	r3, r3
 8011998:	2b00      	cmp	r3, #0
 801199a:	d001      	beq.n	80119a0 <getSoundData+0x3c>
    {
        return false;
 801199c:	2300      	movs	r3, #0
 801199e:	e0a0      	b.n	8011ae2 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 80119a0:	4b54      	ldr	r3, [pc, #336]	@ (8011af4 <getSoundData+0x190>)
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	b2db      	uxtb	r3, r3
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d005      	beq.n	80119b6 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 80119aa:	4b53      	ldr	r3, [pc, #332]	@ (8011af8 <getSoundData+0x194>)
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	b25b      	sxtb	r3, r3
 80119b0:	0018      	movs	r0, r3
 80119b2:	f7ff ffb5 	bl	8011920 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 80119b6:	f3bf 8f4f 	dsb	sy
}
 80119ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80119bc:	f3bf 8f6f 	isb	sy
}
 80119c0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 80119c2:	1cfb      	adds	r3, r7, #3
 80119c4:	781b      	ldrb	r3, [r3, #0]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d04c      	beq.n	8011a64 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 80119ca:	4b4c      	ldr	r3, [pc, #304]	@ (8011afc <getSoundData+0x198>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d11b      	bne.n	8011a0a <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	2200      	movs	r2, #0
 80119d6:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2200      	movs	r2, #0
 80119dc:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80119de:	2300      	movs	r3, #0
 80119e0:	617b      	str	r3, [r7, #20]
 80119e2:	e00e      	b.n	8011a02 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 80119e4:	687a      	ldr	r2, [r7, #4]
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	18d3      	adds	r3, r2, r3
 80119ea:	3302      	adds	r3, #2
 80119ec:	2200      	movs	r2, #0
 80119ee:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 80119f0:	687a      	ldr	r2, [r7, #4]
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	18d3      	adds	r3, r2, r3
 80119f6:	3308      	adds	r3, #8
 80119f8:	2200      	movs	r2, #0
 80119fa:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	3301      	adds	r3, #1
 8011a00:	617b      	str	r3, [r7, #20]
 8011a02:	697b      	ldr	r3, [r7, #20]
 8011a04:	2b05      	cmp	r3, #5
 8011a06:	d9ed      	bls.n	80119e4 <getSoundData+0x80>
 8011a08:	e02c      	b.n	8011a64 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	1c59      	adds	r1, r3, #1
 8011a10:	4b3b      	ldr	r3, [pc, #236]	@ (8011b00 <getSoundData+0x19c>)
 8011a12:	681a      	ldr	r2, [r3, #0]
 8011a14:	4b3b      	ldr	r3, [pc, #236]	@ (8011b04 <getSoundData+0x1a0>)
 8011a16:	681c      	ldr	r4, [r3, #0]
 8011a18:	4b38      	ldr	r3, [pc, #224]	@ (8011afc <getSoundData+0x198>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	9300      	str	r3, [sp, #0]
 8011a1e:	0023      	movs	r3, r4
 8011a20:	f000 fde8 	bl	80125f4 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011a24:	2300      	movs	r3, #0
 8011a26:	613b      	str	r3, [r7, #16]
 8011a28:	e019      	b.n	8011a5e <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8011a2a:	687a      	ldr	r2, [r7, #4]
 8011a2c:	693b      	ldr	r3, [r7, #16]
 8011a2e:	18d3      	adds	r3, r2, r3
 8011a30:	1c98      	adds	r0, r3, #2
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	3308      	adds	r3, #8
 8011a36:	687a      	ldr	r2, [r7, #4]
 8011a38:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8011a3a:	4b33      	ldr	r3, [pc, #204]	@ (8011b08 <getSoundData+0x1a4>)
 8011a3c:	693a      	ldr	r2, [r7, #16]
 8011a3e:	0092      	lsls	r2, r2, #2
 8011a40:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 8011a42:	4b32      	ldr	r3, [pc, #200]	@ (8011b0c <getSoundData+0x1a8>)
 8011a44:	693a      	ldr	r2, [r7, #16]
 8011a46:	0092      	lsls	r2, r2, #2
 8011a48:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8011a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8011afc <getSoundData+0x198>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	9300      	str	r3, [sp, #0]
 8011a50:	0013      	movs	r3, r2
 8011a52:	0022      	movs	r2, r4
 8011a54:	f000 fdce 	bl	80125f4 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	3301      	adds	r3, #1
 8011a5c:	613b      	str	r3, [r7, #16]
 8011a5e:	693b      	ldr	r3, [r7, #16]
 8011a60:	2b05      	cmp	r3, #5
 8011a62:	d9e2      	bls.n	8011a2a <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8011a64:	1cbb      	adds	r3, r7, #2
 8011a66:	781b      	ldrb	r3, [r3, #0]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d028      	beq.n	8011abe <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8011a6c:	240e      	movs	r4, #14
 8011a6e:	193b      	adds	r3, r7, r4
 8011a70:	2200      	movs	r2, #0
 8011a72:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8011a74:	250d      	movs	r5, #13
 8011a76:	197b      	adds	r3, r7, r5
 8011a78:	2200      	movs	r2, #0
 8011a7a:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8011a7c:	4b24      	ldr	r3, [pc, #144]	@ (8011b10 <getSoundData+0x1ac>)
 8011a7e:	6818      	ldr	r0, [r3, #0]
 8011a80:	4924      	ldr	r1, [pc, #144]	@ (8011b14 <getSoundData+0x1b0>)
 8011a82:	197b      	adds	r3, r7, r5
 8011a84:	193a      	adds	r2, r7, r4
 8011a86:	f000 fe59 	bl	801273c <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8011a8a:	193b      	adds	r3, r7, r4
 8011a8c:	881a      	ldrh	r2, [r3, #0]
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	21ff      	movs	r1, #255	@ 0xff
 8011a92:	4011      	ands	r1, r2
 8011a94:	000c      	movs	r4, r1
 8011a96:	7b99      	ldrb	r1, [r3, #14]
 8011a98:	2000      	movs	r0, #0
 8011a9a:	4001      	ands	r1, r0
 8011a9c:	1c08      	adds	r0, r1, #0
 8011a9e:	1c21      	adds	r1, r4, #0
 8011aa0:	4301      	orrs	r1, r0
 8011aa2:	7399      	strb	r1, [r3, #14]
 8011aa4:	0a12      	lsrs	r2, r2, #8
 8011aa6:	b290      	uxth	r0, r2
 8011aa8:	7bda      	ldrb	r2, [r3, #15]
 8011aaa:	2100      	movs	r1, #0
 8011aac:	400a      	ands	r2, r1
 8011aae:	1c11      	adds	r1, r2, #0
 8011ab0:	1c02      	adds	r2, r0, #0
 8011ab2:	430a      	orrs	r2, r1
 8011ab4:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 8011ab6:	197b      	adds	r3, r7, r5
 8011ab8:	781a      	ldrb	r2, [r3, #0]
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8011abe:	f000 f86f 	bl	8011ba0 <micSettlingComplete>
 8011ac2:	0003      	movs	r3, r0
 8011ac4:	001a      	movs	r2, r3
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 8011aca:	4b0a      	ldr	r3, [pc, #40]	@ (8011af4 <getSoundData+0x190>)
 8011acc:	781b      	ldrb	r3, [r3, #0]
 8011ace:	b2db      	uxtb	r3, r3
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d005      	beq.n	8011ae0 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8011ad4:	4b08      	ldr	r3, [pc, #32]	@ (8011af8 <getSoundData+0x194>)
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	b25b      	sxtb	r3, r3
 8011ada:	0018      	movs	r0, r3
 8011adc:	f7ff ff06 	bl	80118ec <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8011ae0:	2301      	movs	r3, #1
}
 8011ae2:	0018      	movs	r0, r3
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	b006      	add	sp, #24
 8011ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8011aea:	46c0      	nop			@ (mov r8, r8)
 8011aec:	20001266 	.word	0x20001266
 8011af0:	20001269 	.word	0x20001269
 8011af4:	20001268 	.word	0x20001268
 8011af8:	20001cb8 	.word	0x20001cb8
 8011afc:	20001cf4 	.word	0x20001cf4
 8011b00:	20001cbc 	.word	0x20001cbc
 8011b04:	20001cc0 	.word	0x20001cc0
 8011b08:	20001cc4 	.word	0x20001cc4
 8011b0c:	20001cdc 	.word	0x20001cdc
 8011b10:	20001270 	.word	0x20001270
 8011b14:	3b5c7333 	.word	0x3b5c7333

08011b18 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b084      	sub	sp, #16
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	60f8      	str	r0, [r7, #12]
 8011b20:	60b9      	str	r1, [r7, #8]
 8011b22:	607a      	str	r2, [r7, #4]
 8011b24:	001a      	movs	r2, r3
 8011b26:	1cfb      	adds	r3, r7, #3
 8011b28:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 8011b2a:	4b09      	ldr	r3, [pc, #36]	@ (8011b50 <soundInit+0x38>)
 8011b2c:	68ba      	ldr	r2, [r7, #8]
 8011b2e:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 8011b30:	4b08      	ldr	r3, [pc, #32]	@ (8011b54 <soundInit+0x3c>)
 8011b32:	687a      	ldr	r2, [r7, #4]
 8011b34:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 8011b36:	4b08      	ldr	r3, [pc, #32]	@ (8011b58 <soundInit+0x40>)
 8011b38:	68fa      	ldr	r2, [r7, #12]
 8011b3a:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 8011b3c:	4b07      	ldr	r3, [pc, #28]	@ (8011b5c <soundInit+0x44>)
 8011b3e:	2200      	movs	r2, #0
 8011b40:	569a      	ldrsb	r2, [r3, r2]
 8011b42:	4b06      	ldr	r3, [pc, #24]	@ (8011b5c <soundInit+0x44>)
 8011b44:	701a      	strb	r2, [r3, #0]

    return true;
 8011b46:	2301      	movs	r3, #1
}
 8011b48:	0018      	movs	r0, r3
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	b004      	add	sp, #16
 8011b4e:	bd80      	pop	{r7, pc}
 8011b50:	20001cb0 	.word	0x20001cb0
 8011b54:	20001cac 	.word	0x20001cac
 8011b58:	20001cb4 	.word	0x20001cb4
 8011b5c:	20001cb8 	.word	0x20001cb8

08011b60 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8011b64:	4b02      	ldr	r3, [pc, #8]	@ (8011b70 <clearMaximumAmplitude+0x10>)
 8011b66:	2200      	movs	r2, #0
 8011b68:	601a      	str	r2, [r3, #0]
}
 8011b6a:	46c0      	nop			@ (mov r8, r8)
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	20001270 	.word	0x20001270

08011b74 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    printf("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 8011b78:	4b08      	ldr	r3, [pc, #32]	@ (8011b9c <startMicSettlingPeriod+0x28>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	2200      	movs	r2, #0
 8011b80:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8011b82:	4b06      	ldr	r3, [pc, #24]	@ (8011b9c <startMicSettlingPeriod+0x28>)
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	0018      	movs	r0, r3
 8011b88:	f00b f8ca 	bl	801cd20 <HAL_TIM_Base_Start>
 8011b8c:	1e03      	subs	r3, r0, #0
 8011b8e:	d001      	beq.n	8011b94 <startMicSettlingPeriod+0x20>
    {
        return false;
 8011b90:	2300      	movs	r3, #0
 8011b92:	e000      	b.n	8011b96 <startMicSettlingPeriod+0x22>
    }
    return true;
 8011b94:	2301      	movs	r3, #1
}
 8011b96:	0018      	movs	r0, r3
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}
 8011b9c:	20001cac 	.word	0x20001cac

08011ba0 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b082      	sub	sp, #8
 8011ba4:	af00      	add	r7, sp, #0
//   printf("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8011ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8011be0 <micSettlingComplete+0x40>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	691b      	ldr	r3, [r3, #16]
 8011bae:	2201      	movs	r2, #1
 8011bb0:	401a      	ands	r2, r3
 8011bb2:	1dfb      	adds	r3, r7, #7
 8011bb4:	3a01      	subs	r2, #1
 8011bb6:	4251      	negs	r1, r2
 8011bb8:	414a      	adcs	r2, r1
 8011bba:	701a      	strb	r2, [r3, #0]
    if (complete)
 8011bbc:	1dfb      	adds	r3, r7, #7
 8011bbe:	781b      	ldrb	r3, [r3, #0]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d007      	beq.n	8011bd4 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8011bc4:	4b06      	ldr	r3, [pc, #24]	@ (8011be0 <micSettlingComplete+0x40>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	0018      	movs	r0, r3
 8011bca:	f00b f8f3 	bl	801cdb4 <HAL_TIM_Base_Stop>
      DataReady = true;
 8011bce:	4b05      	ldr	r3, [pc, #20]	@ (8011be4 <micSettlingComplete+0x44>)
 8011bd0:	2201      	movs	r2, #1
 8011bd2:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8011bd4:	1dfb      	adds	r3, r7, #7
 8011bd6:	781b      	ldrb	r3, [r3, #0]
}
 8011bd8:	0018      	movs	r0, r3
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	b002      	add	sp, #8
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	20001cac 	.word	0x20001cac
 8011be4:	20001265 	.word	0x20001265

08011be8 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	0002      	movs	r2, r0
 8011bf0:	1dfb      	adds	r3, r7, #7
 8011bf2:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 8011bf4:	4b29      	ldr	r3, [pc, #164]	@ (8011c9c <enableMicrophone+0xb4>)
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	b2db      	uxtb	r3, r3
 8011bfa:	1dfa      	adds	r2, r7, #7
 8011bfc:	7812      	ldrb	r2, [r2, #0]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d101      	bne.n	8011c06 <enableMicrophone+0x1e>
    {
        return true;
 8011c02:	2301      	movs	r3, #1
 8011c04:	e045      	b.n	8011c92 <enableMicrophone+0xaa>
    }
    if (bEnable)
 8011c06:	1dfb      	adds	r3, r7, #7
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d025      	beq.n	8011c5a <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 8011c0e:	f7ff ffb1 	bl	8011b74 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 8011c12:	4b23      	ldr	r3, [pc, #140]	@ (8011ca0 <enableMicrophone+0xb8>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	2280      	movs	r2, #128	@ 0x80
 8011c18:	0092      	lsls	r2, r2, #2
 8011c1a:	4922      	ldr	r1, [pc, #136]	@ (8011ca4 <enableMicrophone+0xbc>)
 8011c1c:	0018      	movs	r0, r3
 8011c1e:	f007 facb 	bl	80191b8 <HAL_I2S_Receive_DMA>
 8011c22:	1e03      	subs	r3, r0, #0
 8011c24:	d001      	beq.n	8011c2a <enableMicrophone+0x42>
        {
            return false;
 8011c26:	2300      	movs	r3, #0
 8011c28:	e033      	b.n	8011c92 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8011c2a:	f7ff ff99 	bl	8011b60 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8011c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8011ca8 <enableMicrophone+0xc0>)
 8011c30:	2200      	movs	r2, #0
 8011c32:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8011c34:	4b1d      	ldr	r3, [pc, #116]	@ (8011cac <enableMicrophone+0xc4>)
 8011c36:	781b      	ldrb	r3, [r3, #0]
 8011c38:	b25b      	sxtb	r3, r3
 8011c3a:	0018      	movs	r0, r3
 8011c3c:	f7ff fe56 	bl	80118ec <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8011c40:	4b1b      	ldr	r3, [pc, #108]	@ (8011cb0 <enableMicrophone+0xc8>)
 8011c42:	2201      	movs	r2, #1
 8011c44:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8011c46:	4b15      	ldr	r3, [pc, #84]	@ (8011c9c <enableMicrophone+0xb4>)
 8011c48:	2201      	movs	r2, #1
 8011c4a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011c4c:	4b19      	ldr	r3, [pc, #100]	@ (8011cb4 <enableMicrophone+0xcc>)
 8011c4e:	2200      	movs	r2, #0
 8011c50:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011c52:	4b19      	ldr	r3, [pc, #100]	@ (8011cb8 <enableMicrophone+0xd0>)
 8011c54:	2200      	movs	r2, #0
 8011c56:	701a      	strb	r2, [r3, #0]
 8011c58:	e01a      	b.n	8011c90 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8011c5a:	4b14      	ldr	r3, [pc, #80]	@ (8011cac <enableMicrophone+0xc4>)
 8011c5c:	781b      	ldrb	r3, [r3, #0]
 8011c5e:	b25b      	sxtb	r3, r3
 8011c60:	0018      	movs	r0, r3
 8011c62:	f7ff fe5d 	bl	8011920 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8011c66:	4b12      	ldr	r3, [pc, #72]	@ (8011cb0 <enableMicrophone+0xc8>)
 8011c68:	2200      	movs	r2, #0
 8011c6a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8011c6c:	4b11      	ldr	r3, [pc, #68]	@ (8011cb4 <enableMicrophone+0xcc>)
 8011c6e:	2200      	movs	r2, #0
 8011c70:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8011c72:	4b11      	ldr	r3, [pc, #68]	@ (8011cb8 <enableMicrophone+0xd0>)
 8011c74:	2200      	movs	r2, #0
 8011c76:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8011c78:	4b09      	ldr	r3, [pc, #36]	@ (8011ca0 <enableMicrophone+0xb8>)
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	0018      	movs	r0, r3
 8011c7e:	f007 fb5d 	bl	801933c <HAL_I2S_DMAStop>
 8011c82:	1e03      	subs	r3, r0, #0
 8011c84:	d001      	beq.n	8011c8a <enableMicrophone+0xa2>
        {
            return false;
 8011c86:	2300      	movs	r3, #0
 8011c88:	e003      	b.n	8011c92 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8011c8a:	4b04      	ldr	r3, [pc, #16]	@ (8011c9c <enableMicrophone+0xb4>)
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8011c90:	2301      	movs	r3, #1
}
 8011c92:	0018      	movs	r0, r3
 8011c94:	46bd      	mov	sp, r7
 8011c96:	b002      	add	sp, #8
 8011c98:	bd80      	pop	{r7, pc}
 8011c9a:	46c0      	nop			@ (mov r8, r8)
 8011c9c:	20001266 	.word	0x20001266
 8011ca0:	20001cb0 	.word	0x20001cb0
 8011ca4:	200012ac 	.word	0x200012ac
 8011ca8:	2000126c 	.word	0x2000126c
 8011cac:	20001cb8 	.word	0x20001cb8
 8011cb0:	20001268 	.word	0x20001268
 8011cb4:	20001267 	.word	0x20001267
 8011cb8:	20001269 	.word	0x20001269

08011cbc <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8011cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8011cf4 <startSPLcalculation+0x38>)
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	b2db      	uxtb	r3, r3
 8011cc6:	2201      	movs	r2, #1
 8011cc8:	4053      	eors	r3, r2
 8011cca:	b2db      	uxtb	r3, r3
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d001      	beq.n	8011cd4 <startSPLcalculation+0x18>
    {
        return false;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	e00c      	b.n	8011cee <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8011cd4:	4b08      	ldr	r3, [pc, #32]	@ (8011cf8 <startSPLcalculation+0x3c>)
 8011cd6:	781b      	ldrb	r3, [r3, #0]
 8011cd8:	b2db      	uxtb	r3, r3
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d001      	beq.n	8011ce2 <startSPLcalculation+0x26>
    {
        return true;
 8011cde:	2301      	movs	r3, #1
 8011ce0:	e005      	b.n	8011cee <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8011ce2:	f000 fb63 	bl	80123ac <resetSPLstate>
    SPLcalcEnabled = true;
 8011ce6:	4b04      	ldr	r3, [pc, #16]	@ (8011cf8 <startSPLcalculation+0x3c>)
 8011ce8:	2201      	movs	r2, #1
 8011cea:	701a      	strb	r2, [r3, #0]
    return true;
 8011cec:	2301      	movs	r3, #1
}
 8011cee:	0018      	movs	r0, r3
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}
 8011cf4:	20001266 	.word	0x20001266
 8011cf8:	20001267 	.word	0x20001267

08011cfc <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b082      	sub	sp, #8
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011d04:	4b05      	ldr	r3, [pc, #20]	@ (8011d1c <HAL_I2S_RxHalfCpltCallback+0x20>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	687a      	ldr	r2, [r7, #4]
 8011d0a:	429a      	cmp	r2, r3
 8011d0c:	d102      	bne.n	8011d14 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8011d0e:	2000      	movs	r0, #0
 8011d10:	f000 f81a 	bl	8011d48 <processHalfDMAbuffer>
  }
}
 8011d14:	46c0      	nop			@ (mov r8, r8)
 8011d16:	46bd      	mov	sp, r7
 8011d18:	b002      	add	sp, #8
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	20001cb0 	.word	0x20001cb0

08011d20 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011d28:	4b06      	ldr	r3, [pc, #24]	@ (8011d44 <HAL_I2S_RxCpltCallback+0x24>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	687a      	ldr	r2, [r7, #4]
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d104      	bne.n	8011d3c <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8011d32:	2380      	movs	r3, #128	@ 0x80
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	0018      	movs	r0, r3
 8011d38:	f000 f806 	bl	8011d48 <processHalfDMAbuffer>
  }
}
 8011d3c:	46c0      	nop			@ (mov r8, r8)
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	b002      	add	sp, #8
 8011d42:	bd80      	pop	{r7, pc}
 8011d44:	20001cb0 	.word	0x20001cb0

08011d48 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	005a      	lsls	r2, r3, #1
 8011d54:	4b15      	ldr	r3, [pc, #84]	@ (8011dac <processHalfDMAbuffer+0x64>)
 8011d56:	18d3      	adds	r3, r2, r3
 8011d58:	4a15      	ldr	r2, [pc, #84]	@ (8011db0 <processHalfDMAbuffer+0x68>)
 8011d5a:	2180      	movs	r1, #128	@ 0x80
 8011d5c:	0089      	lsls	r1, r1, #2
 8011d5e:	0018      	movs	r0, r3
 8011d60:	f000 fd35 	bl	80127ce <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8011d64:	4b13      	ldr	r3, [pc, #76]	@ (8011db4 <processHalfDMAbuffer+0x6c>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	425a      	negs	r2, r3
 8011d6a:	4153      	adcs	r3, r2
 8011d6c:	b2da      	uxtb	r2, r3
 8011d6e:	4b11      	ldr	r3, [pc, #68]	@ (8011db4 <processHalfDMAbuffer+0x6c>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	2109      	movs	r1, #9
 8011d74:	4299      	cmp	r1, r3
 8011d76:	419b      	sbcs	r3, r3
 8011d78:	425b      	negs	r3, r3
 8011d7a:	b2db      	uxtb	r3, r3
 8011d7c:	480c      	ldr	r0, [pc, #48]	@ (8011db0 <processHalfDMAbuffer+0x68>)
 8011d7e:	2180      	movs	r1, #128	@ 0x80
 8011d80:	f000 fb46 	bl	8012410 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8011d84:	4b0b      	ldr	r3, [pc, #44]	@ (8011db4 <processHalfDMAbuffer+0x6c>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	2b09      	cmp	r3, #9
 8011d8a:	d804      	bhi.n	8011d96 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8011d8c:	4b09      	ldr	r3, [pc, #36]	@ (8011db4 <processHalfDMAbuffer+0x6c>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	1c5a      	adds	r2, r3, #1
 8011d92:	4b08      	ldr	r3, [pc, #32]	@ (8011db4 <processHalfDMAbuffer+0x6c>)
 8011d94:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8011d96:	4b08      	ldr	r3, [pc, #32]	@ (8011db8 <processHalfDMAbuffer+0x70>)
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	b2db      	uxtb	r3, r3
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d001      	beq.n	8011da4 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8011da0:	f000 f826 	bl	8011df0 <calculateSPLQ31>
    }
}
 8011da4:	46c0      	nop			@ (mov r8, r8)
 8011da6:	46bd      	mov	sp, r7
 8011da8:	b002      	add	sp, #8
 8011daa:	bd80      	pop	{r7, pc}
 8011dac:	200012ac 	.word	0x200012ac
 8011db0:	20001aac 	.word	0x20001aac
 8011db4:	2000126c 	.word	0x2000126c
 8011db8:	20001267 	.word	0x20001267

08011dbc <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b082      	sub	sp, #8
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8011dc4:	4b07      	ldr	r3, [pc, #28]	@ (8011de4 <HAL_I2S_ErrorCallback+0x28>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d106      	bne.n	8011ddc <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8011dce:	4a06      	ldr	r2, [pc, #24]	@ (8011de8 <HAL_I2S_ErrorCallback+0x2c>)
 8011dd0:	239e      	movs	r3, #158	@ 0x9e
 8011dd2:	0059      	lsls	r1, r3, #1
 8011dd4:	4b05      	ldr	r3, [pc, #20]	@ (8011dec <HAL_I2S_ErrorCallback+0x30>)
 8011dd6:	0018      	movs	r0, r3
 8011dd8:	f002 fa24 	bl	8014224 <errorHandler>
  }
}
 8011ddc:	46c0      	nop			@ (mov r8, r8)
 8011dde:	46bd      	mov	sp, r7
 8011de0:	b002      	add	sp, #8
 8011de2:	bd80      	pop	{r7, pc}
 8011de4:	20001cb0 	.word	0x20001cb0
 8011de8:	0802e060 	.word	0x0802e060
 8011dec:	0802e9b4 	.word	0x0802e9b4

08011df0 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8011df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011df2:	b0b3      	sub	sp, #204	@ 0xcc
 8011df4:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8011df6:	4ae2      	ldr	r2, [pc, #904]	@ (8012180 <calculateSPLQ31+0x390>)
 8011df8:	2338      	movs	r3, #56	@ 0x38
 8011dfa:	2030      	movs	r0, #48	@ 0x30
 8011dfc:	181b      	adds	r3, r3, r0
 8011dfe:	19d9      	adds	r1, r3, r7
 8011e00:	2334      	movs	r3, #52	@ 0x34
 8011e02:	181b      	adds	r3, r3, r0
 8011e04:	19d8      	adds	r0, r3, r7
 8011e06:	2380      	movs	r3, #128	@ 0x80
 8011e08:	f000 fc36 	bl	8012678 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8011e0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	da00      	bge.n	8011e14 <calculateSPLQ31+0x24>
 8011e12:	3301      	adds	r3, #1
 8011e14:	105b      	asrs	r3, r3, #1
 8011e16:	001a      	movs	r2, r3
 8011e18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	da00      	bge.n	8011e20 <calculateSPLQ31+0x30>
 8011e1e:	3301      	adds	r3, #1
 8011e20:	105b      	asrs	r3, r3, #1
 8011e22:	18d3      	adds	r3, r2, r3
 8011e24:	2188      	movs	r1, #136	@ 0x88
 8011e26:	187a      	adds	r2, r7, r1
 8011e28:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8011e2a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011e2c:	187b      	adds	r3, r7, r1
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	1ad3      	subs	r3, r2, r3
 8011e32:	3304      	adds	r3, #4
 8011e34:	2284      	movs	r2, #132	@ 0x84
 8011e36:	18b9      	adds	r1, r7, r2
 8011e38:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8011e3a:	18bb      	adds	r3, r7, r2
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	4ad1      	ldr	r2, [pc, #836]	@ (8012184 <calculateSPLQ31+0x394>)
 8011e40:	0019      	movs	r1, r3
 8011e42:	0010      	movs	r0, r2
 8011e44:	f000 fc58 	bl	80126f8 <getPo2factor>
 8011e48:	0003      	movs	r3, r0
 8011e4a:	2280      	movs	r2, #128	@ 0x80
 8011e4c:	18ba      	adds	r2, r7, r2
 8011e4e:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8011e50:	2300      	movs	r3, #0
 8011e52:	2284      	movs	r2, #132	@ 0x84
 8011e54:	2130      	movs	r1, #48	@ 0x30
 8011e56:	1852      	adds	r2, r2, r1
 8011e58:	19d2      	adds	r2, r2, r7
 8011e5a:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	2280      	movs	r2, #128	@ 0x80
 8011e60:	1852      	adds	r2, r2, r1
 8011e62:	19d2      	adds	r2, r2, r7
 8011e64:	6013      	str	r3, [r2, #0]
 8011e66:	e032      	b.n	8011ece <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8011e68:	4ac5      	ldr	r2, [pc, #788]	@ (8012180 <calculateSPLQ31+0x390>)
 8011e6a:	2680      	movs	r6, #128	@ 0x80
 8011e6c:	2330      	movs	r3, #48	@ 0x30
 8011e6e:	18f1      	adds	r1, r6, r3
 8011e70:	19cb      	adds	r3, r1, r7
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	009b      	lsls	r3, r3, #2
 8011e76:	589a      	ldr	r2, [r3, r2]
 8011e78:	2188      	movs	r1, #136	@ 0x88
 8011e7a:	1879      	adds	r1, r7, r1
 8011e7c:	680b      	ldr	r3, [r1, #0]
 8011e7e:	1ad2      	subs	r2, r2, r3
 8011e80:	2180      	movs	r1, #128	@ 0x80
 8011e82:	1879      	adds	r1, r7, r1
 8011e84:	680b      	ldr	r3, [r1, #0]
 8011e86:	409a      	lsls	r2, r3
 8011e88:	0011      	movs	r1, r2
 8011e8a:	4abf      	ldr	r2, [pc, #764]	@ (8012188 <calculateSPLQ31+0x398>)
 8011e8c:	2084      	movs	r0, #132	@ 0x84
 8011e8e:	2330      	movs	r3, #48	@ 0x30
 8011e90:	18c3      	adds	r3, r0, r3
 8011e92:	19db      	adds	r3, r3, r7
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	009b      	lsls	r3, r3, #2
 8011e98:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8011e9a:	2230      	movs	r2, #48	@ 0x30
 8011e9c:	1883      	adds	r3, r0, r2
 8011e9e:	19db      	adds	r3, r3, r7
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	3301      	adds	r3, #1
 8011ea4:	49b8      	ldr	r1, [pc, #736]	@ (8012188 <calculateSPLQ31+0x398>)
 8011ea6:	009a      	lsls	r2, r3, #2
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	5053      	str	r3, [r2, r1]
        count += 2;
 8011eac:	2230      	movs	r2, #48	@ 0x30
 8011eae:	1883      	adds	r3, r0, r2
 8011eb0:	19db      	adds	r3, r3, r7
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	3302      	adds	r3, #2
 8011eb6:	0011      	movs	r1, r2
 8011eb8:	1882      	adds	r2, r0, r2
 8011eba:	19d2      	adds	r2, r2, r7
 8011ebc:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8011ebe:	000a      	movs	r2, r1
 8011ec0:	18b3      	adds	r3, r6, r2
 8011ec2:	19db      	adds	r3, r3, r7
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	3301      	adds	r3, #1
 8011ec8:	18b2      	adds	r2, r6, r2
 8011eca:	19d2      	adds	r2, r2, r7
 8011ecc:	6013      	str	r3, [r2, #0]
 8011ece:	2380      	movs	r3, #128	@ 0x80
 8011ed0:	2630      	movs	r6, #48	@ 0x30
 8011ed2:	199b      	adds	r3, r3, r6
 8011ed4:	19db      	adds	r3, r3, r7
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	2b7f      	cmp	r3, #127	@ 0x7f
 8011eda:	d9c5      	bls.n	8011e68 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8011edc:	4bab      	ldr	r3, [pc, #684]	@ (801218c <calculateSPLQ31+0x39c>)
 8011ede:	6818      	ldr	r0, [r3, #0]
 8011ee0:	49a9      	ldr	r1, [pc, #676]	@ (8012188 <calculateSPLQ31+0x398>)
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	f011 ffef 	bl	8023ec8 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8011eea:	4aa9      	ldr	r2, [pc, #676]	@ (8012190 <calculateSPLQ31+0x3a0>)
 8011eec:	2338      	movs	r3, #56	@ 0x38
 8011eee:	199b      	adds	r3, r3, r6
 8011ef0:	19d9      	adds	r1, r3, r7
 8011ef2:	2334      	movs	r3, #52	@ 0x34
 8011ef4:	199b      	adds	r3, r3, r6
 8011ef6:	19d8      	adds	r0, r3, r7
 8011ef8:	237e      	movs	r3, #126	@ 0x7e
 8011efa:	f000 fbbd 	bl	8012678 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 8011efe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011f00:	2380      	movs	r3, #128	@ 0x80
 8011f02:	061b      	lsls	r3, r3, #24
 8011f04:	429a      	cmp	r2, r3
 8011f06:	d101      	bne.n	8011f0c <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8011f08:	4b9e      	ldr	r3, [pc, #632]	@ (8012184 <calculateSPLQ31+0x394>)
 8011f0a:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8011f0c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011f0e:	2380      	movs	r3, #128	@ 0x80
 8011f10:	061b      	lsls	r3, r3, #24
 8011f12:	429a      	cmp	r2, r3
 8011f14:	d101      	bne.n	8011f1a <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8011f16:	4b9b      	ldr	r3, [pc, #620]	@ (8012184 <calculateSPLQ31+0x394>)
 8011f18:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8011f1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011f1c:	17da      	asrs	r2, r3, #31
 8011f1e:	189b      	adds	r3, r3, r2
 8011f20:	4053      	eors	r3, r2
 8011f22:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8011f24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f26:	17da      	asrs	r2, r3, #31
 8011f28:	189b      	adds	r3, r3, r2
 8011f2a:	4053      	eors	r3, r2
 8011f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 8011f2e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011f30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f32:	429a      	cmp	r2, r3
 8011f34:	dd01      	ble.n	8011f3a <calculateSPLQ31+0x14a>
    {
        max = min;
 8011f36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011f38:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 8011f3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f3c:	3304      	adds	r3, #4
 8011f3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 8011f40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011f42:	4a90      	ldr	r2, [pc, #576]	@ (8012184 <calculateSPLQ31+0x394>)
 8011f44:	0019      	movs	r1, r3
 8011f46:	0010      	movs	r0, r2
 8011f48:	f000 fbd6 	bl	80126f8 <getPo2factor>
 8011f4c:	0003      	movs	r3, r0
 8011f4e:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8011f50:	2302      	movs	r3, #2
 8011f52:	22ac      	movs	r2, #172	@ 0xac
 8011f54:	18ba      	adds	r2, r7, r2
 8011f56:	6013      	str	r3, [r2, #0]
 8011f58:	e012      	b.n	8011f80 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 8011f5a:	4a8b      	ldr	r2, [pc, #556]	@ (8012188 <calculateSPLQ31+0x398>)
 8011f5c:	20ac      	movs	r0, #172	@ 0xac
 8011f5e:	183b      	adds	r3, r7, r0
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	009b      	lsls	r3, r3, #2
 8011f64:	589a      	ldr	r2, [r3, r2]
 8011f66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011f68:	409a      	lsls	r2, r3
 8011f6a:	0011      	movs	r1, r2
 8011f6c:	4a86      	ldr	r2, [pc, #536]	@ (8012188 <calculateSPLQ31+0x398>)
 8011f6e:	183b      	adds	r3, r7, r0
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	009b      	lsls	r3, r3, #2
 8011f74:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8011f76:	183b      	adds	r3, r7, r0
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	3301      	adds	r3, #1
 8011f7c:	183a      	adds	r2, r7, r0
 8011f7e:	6013      	str	r3, [r2, #0]
 8011f80:	23ac      	movs	r3, #172	@ 0xac
 8011f82:	18fb      	adds	r3, r7, r3
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	2b7f      	cmp	r3, #127	@ 0x7f
 8011f88:	d9e7      	bls.n	8011f5a <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8011f8a:	4b7d      	ldr	r3, [pc, #500]	@ (8012180 <calculateSPLQ31+0x390>)
 8011f8c:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8011f8e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8011f90:	4b7d      	ldr	r3, [pc, #500]	@ (8012188 <calculateSPLQ31+0x398>)
 8011f92:	2240      	movs	r2, #64	@ 0x40
 8011f94:	0018      	movs	r0, r3
 8011f96:	f012 fd41 	bl	8024a1c <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8011f9a:	2330      	movs	r3, #48	@ 0x30
 8011f9c:	18fb      	adds	r3, r7, r3
 8011f9e:	0018      	movs	r0, r3
 8011fa0:	2330      	movs	r3, #48	@ 0x30
 8011fa2:	001a      	movs	r2, r3
 8011fa4:	2100      	movs	r1, #0
 8011fa6:	f014 fb8d 	bl	80266c4 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8011faa:	2200      	movs	r2, #0
 8011fac:	2300      	movs	r3, #0
 8011fae:	21a0      	movs	r1, #160	@ 0xa0
 8011fb0:	1879      	adds	r1, r7, r1
 8011fb2:	600a      	str	r2, [r1, #0]
 8011fb4:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	229c      	movs	r2, #156	@ 0x9c
 8011fba:	18ba      	adds	r2, r7, r2
 8011fbc:	6013      	str	r3, [r2, #0]
 8011fbe:	e05b      	b.n	8012078 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8011fc0:	269c      	movs	r6, #156	@ 0x9c
 8011fc2:	19bb      	adds	r3, r7, r6
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	009a      	lsls	r2, r3, #2
 8011fc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011fca:	189b      	adds	r3, r3, r2
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	613b      	str	r3, [r7, #16]
 8011fd0:	17db      	asrs	r3, r3, #31
 8011fd2:	617b      	str	r3, [r7, #20]
 8011fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8012194 <calculateSPLQ31+0x3a4>)
 8011fd6:	681a      	ldr	r2, [r3, #0]
 8011fd8:	19bb      	adds	r3, r7, r6
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	005b      	lsls	r3, r3, #1
 8011fde:	18d3      	adds	r3, r2, r3
 8011fe0:	881b      	ldrh	r3, [r3, #0]
 8011fe2:	60bb      	str	r3, [r7, #8]
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	60fb      	str	r3, [r7, #12]
 8011fe8:	68ba      	ldr	r2, [r7, #8]
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	6938      	ldr	r0, [r7, #16]
 8011fee:	6979      	ldr	r1, [r7, #20]
 8011ff0:	f7ee fae6 	bl	80005c0 <__aeabi_lmul>
 8011ff4:	0002      	movs	r2, r0
 8011ff6:	000b      	movs	r3, r1
 8011ff8:	0010      	movs	r0, r2
 8011ffa:	0019      	movs	r1, r3
 8011ffc:	23a0      	movs	r3, #160	@ 0xa0
 8011ffe:	18fa      	adds	r2, r7, r3
 8012000:	6853      	ldr	r3, [r2, #4]
 8012002:	6812      	ldr	r2, [r2, #0]
 8012004:	1812      	adds	r2, r2, r0
 8012006:	414b      	adcs	r3, r1
 8012008:	21a0      	movs	r1, #160	@ 0xa0
 801200a:	1879      	adds	r1, r7, r1
 801200c:	600a      	str	r2, [r1, #0]
 801200e:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8012010:	4b61      	ldr	r3, [pc, #388]	@ (8012198 <calculateSPLQ31+0x3a8>)
 8012012:	681a      	ldr	r2, [r3, #0]
 8012014:	19bb      	adds	r3, r7, r6
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	18d3      	adds	r3, r2, r3
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	2b06      	cmp	r3, #6
 801201e:	d025      	beq.n	801206c <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8012020:	4b5d      	ldr	r3, [pc, #372]	@ (8012198 <calculateSPLQ31+0x3a8>)
 8012022:	681a      	ldr	r2, [r3, #0]
 8012024:	19bb      	adds	r3, r7, r6
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	18d3      	adds	r3, r2, r3
 801202a:	781b      	ldrb	r3, [r3, #0]
 801202c:	2230      	movs	r2, #48	@ 0x30
 801202e:	18ba      	adds	r2, r7, r2
 8012030:	00db      	lsls	r3, r3, #3
 8012032:	18d3      	adds	r3, r2, r3
 8012034:	6818      	ldr	r0, [r3, #0]
 8012036:	6859      	ldr	r1, [r3, #4]
 8012038:	19bb      	adds	r3, r7, r6
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	009a      	lsls	r2, r3, #2
 801203e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012040:	189b      	adds	r3, r3, r2
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	603b      	str	r3, [r7, #0]
 8012046:	17db      	asrs	r3, r3, #31
 8012048:	607b      	str	r3, [r7, #4]
 801204a:	4b53      	ldr	r3, [pc, #332]	@ (8012198 <calculateSPLQ31+0x3a8>)
 801204c:	681a      	ldr	r2, [r3, #0]
 801204e:	19be      	adds	r6, r7, r6
 8012050:	6833      	ldr	r3, [r6, #0]
 8012052:	18d3      	adds	r3, r2, r3
 8012054:	781b      	ldrb	r3, [r3, #0]
 8012056:	001e      	movs	r6, r3
 8012058:	683a      	ldr	r2, [r7, #0]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	1880      	adds	r0, r0, r2
 801205e:	4159      	adcs	r1, r3
 8012060:	2330      	movs	r3, #48	@ 0x30
 8012062:	18fa      	adds	r2, r7, r3
 8012064:	00f3      	lsls	r3, r6, #3
 8012066:	18d3      	adds	r3, r2, r3
 8012068:	6018      	str	r0, [r3, #0]
 801206a:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 801206c:	229c      	movs	r2, #156	@ 0x9c
 801206e:	18bb      	adds	r3, r7, r2
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	3301      	adds	r3, #1
 8012074:	18ba      	adds	r2, r7, r2
 8012076:	6013      	str	r3, [r2, #0]
 8012078:	239c      	movs	r3, #156	@ 0x9c
 801207a:	18fb      	adds	r3, r7, r3
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	2b3f      	cmp	r3, #63	@ 0x3f
 8012080:	d99e      	bls.n	8011fc0 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8012082:	2380      	movs	r3, #128	@ 0x80
 8012084:	18fb      	adds	r3, r7, r3
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	005b      	lsls	r3, r3, #1
 801208a:	001a      	movs	r2, r3
 801208c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801208e:	005b      	lsls	r3, r3, #1
 8012090:	18d3      	adds	r3, r2, r3
 8012092:	3b22      	subs	r3, #34	@ 0x22
 8012094:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8012096:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012098:	17da      	asrs	r2, r3, #31
 801209a:	189b      	adds	r3, r3, r2
 801209c:	4053      	eors	r3, r2
 801209e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 80120a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	da62      	bge.n	801216c <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 80120a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120a8:	3b20      	subs	r3, #32
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	db05      	blt.n	80120ba <calculateSPLQ31+0x2ca>
 80120ae:	22a0      	movs	r2, #160	@ 0xa0
 80120b0:	18ba      	adds	r2, r7, r2
 80120b2:	6812      	ldr	r2, [r2, #0]
 80120b4:	409a      	lsls	r2, r3
 80120b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80120b8:	e010      	b.n	80120dc <calculateSPLQ31+0x2ec>
 80120ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120bc:	2220      	movs	r2, #32
 80120be:	1ad3      	subs	r3, r2, r3
 80120c0:	22a0      	movs	r2, #160	@ 0xa0
 80120c2:	18ba      	adds	r2, r7, r2
 80120c4:	6812      	ldr	r2, [r2, #0]
 80120c6:	40da      	lsrs	r2, r3
 80120c8:	0013      	movs	r3, r2
 80120ca:	22a4      	movs	r2, #164	@ 0xa4
 80120cc:	18ba      	adds	r2, r7, r2
 80120ce:	6811      	ldr	r1, [r2, #0]
 80120d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80120d2:	4091      	lsls	r1, r2
 80120d4:	6279      	str	r1, [r7, #36]	@ 0x24
 80120d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120d8:	431a      	orrs	r2, r3
 80120da:	627a      	str	r2, [r7, #36]	@ 0x24
 80120dc:	21a0      	movs	r1, #160	@ 0xa0
 80120de:	187b      	adds	r3, r7, r1
 80120e0:	681a      	ldr	r2, [r3, #0]
 80120e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120e4:	409a      	lsls	r2, r3
 80120e6:	623a      	str	r2, [r7, #32]
 80120e8:	6a3b      	ldr	r3, [r7, #32]
 80120ea:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80120ec:	187a      	adds	r2, r7, r1
 80120ee:	6013      	str	r3, [r2, #0]
 80120f0:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80120f2:	2300      	movs	r3, #0
 80120f4:	2298      	movs	r2, #152	@ 0x98
 80120f6:	18ba      	adds	r2, r7, r2
 80120f8:	6013      	str	r3, [r2, #0]
 80120fa:	e031      	b.n	8012160 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 80120fc:	2330      	movs	r3, #48	@ 0x30
 80120fe:	18fa      	adds	r2, r7, r3
 8012100:	2398      	movs	r3, #152	@ 0x98
 8012102:	18fb      	adds	r3, r7, r3
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	00db      	lsls	r3, r3, #3
 8012108:	18d3      	adds	r3, r2, r3
 801210a:	681a      	ldr	r2, [r3, #0]
 801210c:	685b      	ldr	r3, [r3, #4]
 801210e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8012110:	3920      	subs	r1, #32
 8012112:	2900      	cmp	r1, #0
 8012114:	db03      	blt.n	801211e <calculateSPLQ31+0x32e>
 8012116:	0010      	movs	r0, r2
 8012118:	4088      	lsls	r0, r1
 801211a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801211c:	e00c      	b.n	8012138 <calculateSPLQ31+0x348>
 801211e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8012120:	2020      	movs	r0, #32
 8012122:	1a41      	subs	r1, r0, r1
 8012124:	0010      	movs	r0, r2
 8012126:	40c8      	lsrs	r0, r1
 8012128:	0001      	movs	r1, r0
 801212a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801212c:	001c      	movs	r4, r3
 801212e:	4084      	lsls	r4, r0
 8012130:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8012132:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012134:	4308      	orrs	r0, r1
 8012136:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8012138:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801213a:	0013      	movs	r3, r2
 801213c:	408b      	lsls	r3, r1
 801213e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012140:	2330      	movs	r3, #48	@ 0x30
 8012142:	18fa      	adds	r2, r7, r3
 8012144:	2098      	movs	r0, #152	@ 0x98
 8012146:	183b      	adds	r3, r7, r0
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	00db      	lsls	r3, r3, #3
 801214c:	18d3      	adds	r3, r2, r3
 801214e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012150:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012152:	6019      	str	r1, [r3, #0]
 8012154:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8012156:	183b      	adds	r3, r7, r0
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	3301      	adds	r3, #1
 801215c:	183a      	adds	r2, r7, r0
 801215e:	6013      	str	r3, [r2, #0]
 8012160:	2398      	movs	r3, #152	@ 0x98
 8012162:	18fb      	adds	r3, r7, r3
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	2b05      	cmp	r3, #5
 8012168:	d9c8      	bls.n	80120fc <calculateSPLQ31+0x30c>
 801216a:	e06b      	b.n	8012244 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 801216c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801216e:	3b20      	subs	r3, #32
 8012170:	2b00      	cmp	r3, #0
 8012172:	db13      	blt.n	801219c <calculateSPLQ31+0x3ac>
 8012174:	22a4      	movs	r2, #164	@ 0xa4
 8012176:	18ba      	adds	r2, r7, r2
 8012178:	6812      	ldr	r2, [r2, #0]
 801217a:	40da      	lsrs	r2, r3
 801217c:	61ba      	str	r2, [r7, #24]
 801217e:	e01e      	b.n	80121be <calculateSPLQ31+0x3ce>
 8012180:	20001aac 	.word	0x20001aac
 8012184:	7fffffff 	.word	0x7fffffff
 8012188:	20001cf8 	.word	0x20001cf8
 801218c:	200000d4 	.word	0x200000d4
 8012190:	20001d00 	.word	0x20001d00
 8012194:	200000d8 	.word	0x200000d8
 8012198:	200000e4 	.word	0x200000e4
 801219c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801219e:	2220      	movs	r2, #32
 80121a0:	1ad3      	subs	r3, r2, r3
 80121a2:	22a4      	movs	r2, #164	@ 0xa4
 80121a4:	18ba      	adds	r2, r7, r2
 80121a6:	6812      	ldr	r2, [r2, #0]
 80121a8:	409a      	lsls	r2, r3
 80121aa:	0013      	movs	r3, r2
 80121ac:	22a0      	movs	r2, #160	@ 0xa0
 80121ae:	18ba      	adds	r2, r7, r2
 80121b0:	6811      	ldr	r1, [r2, #0]
 80121b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80121b4:	40d1      	lsrs	r1, r2
 80121b6:	61b9      	str	r1, [r7, #24]
 80121b8:	69ba      	ldr	r2, [r7, #24]
 80121ba:	431a      	orrs	r2, r3
 80121bc:	61ba      	str	r2, [r7, #24]
 80121be:	23a4      	movs	r3, #164	@ 0xa4
 80121c0:	18fb      	adds	r3, r7, r3
 80121c2:	681a      	ldr	r2, [r3, #0]
 80121c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121c6:	40da      	lsrs	r2, r3
 80121c8:	61fa      	str	r2, [r7, #28]
 80121ca:	69ba      	ldr	r2, [r7, #24]
 80121cc:	69fb      	ldr	r3, [r7, #28]
 80121ce:	21a0      	movs	r1, #160	@ 0xa0
 80121d0:	1879      	adds	r1, r7, r1
 80121d2:	600a      	str	r2, [r1, #0]
 80121d4:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80121d6:	2300      	movs	r3, #0
 80121d8:	2294      	movs	r2, #148	@ 0x94
 80121da:	18ba      	adds	r2, r7, r2
 80121dc:	6013      	str	r3, [r2, #0]
 80121de:	e02c      	b.n	801223a <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 80121e0:	2330      	movs	r3, #48	@ 0x30
 80121e2:	18fa      	adds	r2, r7, r3
 80121e4:	2394      	movs	r3, #148	@ 0x94
 80121e6:	18fb      	adds	r3, r7, r3
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	00db      	lsls	r3, r3, #3
 80121ec:	18d3      	adds	r3, r2, r3
 80121ee:	681a      	ldr	r2, [r3, #0]
 80121f0:	685b      	ldr	r3, [r3, #4]
 80121f2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80121f4:	3920      	subs	r1, #32
 80121f6:	2900      	cmp	r1, #0
 80121f8:	db03      	blt.n	8012202 <calculateSPLQ31+0x412>
 80121fa:	0018      	movs	r0, r3
 80121fc:	40c8      	lsrs	r0, r1
 80121fe:	0004      	movs	r4, r0
 8012200:	e00a      	b.n	8012218 <calculateSPLQ31+0x428>
 8012202:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8012204:	2020      	movs	r0, #32
 8012206:	1a41      	subs	r1, r0, r1
 8012208:	0018      	movs	r0, r3
 801220a:	4088      	lsls	r0, r1
 801220c:	0001      	movs	r1, r0
 801220e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012210:	0016      	movs	r6, r2
 8012212:	40c6      	lsrs	r6, r0
 8012214:	0034      	movs	r4, r6
 8012216:	430c      	orrs	r4, r1
 8012218:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801221a:	40cb      	lsrs	r3, r1
 801221c:	001d      	movs	r5, r3
 801221e:	2330      	movs	r3, #48	@ 0x30
 8012220:	18fa      	adds	r2, r7, r3
 8012222:	2194      	movs	r1, #148	@ 0x94
 8012224:	187b      	adds	r3, r7, r1
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	00db      	lsls	r3, r3, #3
 801222a:	18d3      	adds	r3, r2, r3
 801222c:	601c      	str	r4, [r3, #0]
 801222e:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8012230:	187b      	adds	r3, r7, r1
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	3301      	adds	r3, #1
 8012236:	187a      	adds	r2, r7, r1
 8012238:	6013      	str	r3, [r2, #0]
 801223a:	2394      	movs	r3, #148	@ 0x94
 801223c:	18fb      	adds	r3, r7, r3
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	2b05      	cmp	r3, #5
 8012242:	d9cd      	bls.n	80121e0 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 8012244:	230f      	movs	r3, #15
 8012246:	425d      	negs	r5, r3
 8012248:	2305      	movs	r3, #5
 801224a:	425e      	negs	r6, r3
 801224c:	4b4a      	ldr	r3, [pc, #296]	@ (8012378 <calculateSPLQ31+0x588>)
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	4b4a      	ldr	r3, [pc, #296]	@ (801237c <calculateSPLQ31+0x58c>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	21a0      	movs	r1, #160	@ 0xa0
 801225a:	1879      	adds	r1, r7, r1
 801225c:	6808      	ldr	r0, [r1, #0]
 801225e:	6849      	ldr	r1, [r1, #4]
 8012260:	4c47      	ldr	r4, [pc, #284]	@ (8012380 <calculateSPLQ31+0x590>)
 8012262:	9403      	str	r4, [sp, #12]
 8012264:	4c47      	ldr	r4, [pc, #284]	@ (8012384 <calculateSPLQ31+0x594>)
 8012266:	9402      	str	r4, [sp, #8]
 8012268:	9301      	str	r3, [sp, #4]
 801226a:	9200      	str	r2, [sp, #0]
 801226c:	0033      	movs	r3, r6
 801226e:	002a      	movs	r2, r5
 8012270:	f000 fa86 	bl	8012780 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 8012274:	2300      	movs	r3, #0
 8012276:	2290      	movs	r2, #144	@ 0x90
 8012278:	18ba      	adds	r2, r7, r2
 801227a:	6013      	str	r3, [r2, #0]
 801227c:	e026      	b.n	80122cc <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 801227e:	2330      	movs	r3, #48	@ 0x30
 8012280:	18fa      	adds	r2, r7, r3
 8012282:	2490      	movs	r4, #144	@ 0x90
 8012284:	193b      	adds	r3, r7, r4
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	00db      	lsls	r3, r3, #3
 801228a:	18d3      	adds	r3, r2, r3
 801228c:	6818      	ldr	r0, [r3, #0]
 801228e:	6859      	ldr	r1, [r3, #4]
 8012290:	230f      	movs	r3, #15
 8012292:	425d      	negs	r5, r3
 8012294:	2305      	movs	r3, #5
 8012296:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 8012298:	193b      	adds	r3, r7, r4
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	009a      	lsls	r2, r3, #2
 801229e:	4b3a      	ldr	r3, [pc, #232]	@ (8012388 <calculateSPLQ31+0x598>)
 80122a0:	18d3      	adds	r3, r2, r3
 80122a2:	193a      	adds	r2, r7, r4
 80122a4:	6812      	ldr	r2, [r2, #0]
 80122a6:	0094      	lsls	r4, r2, #2
 80122a8:	4a38      	ldr	r2, [pc, #224]	@ (801238c <calculateSPLQ31+0x59c>)
 80122aa:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 80122ac:	9203      	str	r2, [sp, #12]
 80122ae:	9302      	str	r3, [sp, #8]
 80122b0:	2300      	movs	r3, #0
 80122b2:	9301      	str	r3, [sp, #4]
 80122b4:	2300      	movs	r3, #0
 80122b6:	9300      	str	r3, [sp, #0]
 80122b8:	0033      	movs	r3, r6
 80122ba:	002a      	movs	r2, r5
 80122bc:	f000 fa60 	bl	8012780 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80122c0:	2490      	movs	r4, #144	@ 0x90
 80122c2:	193b      	adds	r3, r7, r4
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	3301      	adds	r3, #1
 80122c8:	193a      	adds	r2, r7, r4
 80122ca:	6013      	str	r3, [r2, #0]
 80122cc:	2390      	movs	r3, #144	@ 0x90
 80122ce:	18fb      	adds	r3, r7, r3
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	2b05      	cmp	r3, #5
 80122d4:	d9d3      	bls.n	801227e <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 80122d6:	4b2b      	ldr	r3, [pc, #172]	@ (8012384 <calculateSPLQ31+0x594>)
 80122d8:	681a      	ldr	r2, [r3, #0]
 80122da:	4b2d      	ldr	r3, [pc, #180]	@ (8012390 <calculateSPLQ31+0x5a0>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	18d2      	adds	r2, r2, r3
 80122e0:	4b2b      	ldr	r3, [pc, #172]	@ (8012390 <calculateSPLQ31+0x5a0>)
 80122e2:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 80122e4:	4b26      	ldr	r3, [pc, #152]	@ (8012380 <calculateSPLQ31+0x590>)
 80122e6:	681a      	ldr	r2, [r3, #0]
 80122e8:	4b2a      	ldr	r3, [pc, #168]	@ (8012394 <calculateSPLQ31+0x5a4>)
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	18d2      	adds	r2, r2, r3
 80122ee:	4b29      	ldr	r3, [pc, #164]	@ (8012394 <calculateSPLQ31+0x5a4>)
 80122f0:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80122f2:	2300      	movs	r3, #0
 80122f4:	228c      	movs	r2, #140	@ 0x8c
 80122f6:	18ba      	adds	r2, r7, r2
 80122f8:	6013      	str	r3, [r2, #0]
 80122fa:	e025      	b.n	8012348 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 80122fc:	4b22      	ldr	r3, [pc, #136]	@ (8012388 <calculateSPLQ31+0x598>)
 80122fe:	208c      	movs	r0, #140	@ 0x8c
 8012300:	183a      	adds	r2, r7, r0
 8012302:	6812      	ldr	r2, [r2, #0]
 8012304:	0092      	lsls	r2, r2, #2
 8012306:	58d2      	ldr	r2, [r2, r3]
 8012308:	4b23      	ldr	r3, [pc, #140]	@ (8012398 <calculateSPLQ31+0x5a8>)
 801230a:	1839      	adds	r1, r7, r0
 801230c:	6809      	ldr	r1, [r1, #0]
 801230e:	0089      	lsls	r1, r1, #2
 8012310:	58cb      	ldr	r3, [r1, r3]
 8012312:	18d1      	adds	r1, r2, r3
 8012314:	4b20      	ldr	r3, [pc, #128]	@ (8012398 <calculateSPLQ31+0x5a8>)
 8012316:	183a      	adds	r2, r7, r0
 8012318:	6812      	ldr	r2, [r2, #0]
 801231a:	0092      	lsls	r2, r2, #2
 801231c:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 801231e:	4b1b      	ldr	r3, [pc, #108]	@ (801238c <calculateSPLQ31+0x59c>)
 8012320:	183a      	adds	r2, r7, r0
 8012322:	6812      	ldr	r2, [r2, #0]
 8012324:	0092      	lsls	r2, r2, #2
 8012326:	58d2      	ldr	r2, [r2, r3]
 8012328:	4b1c      	ldr	r3, [pc, #112]	@ (801239c <calculateSPLQ31+0x5ac>)
 801232a:	1839      	adds	r1, r7, r0
 801232c:	6809      	ldr	r1, [r1, #0]
 801232e:	0089      	lsls	r1, r1, #2
 8012330:	58cb      	ldr	r3, [r1, r3]
 8012332:	18d1      	adds	r1, r2, r3
 8012334:	4b19      	ldr	r3, [pc, #100]	@ (801239c <calculateSPLQ31+0x5ac>)
 8012336:	183a      	adds	r2, r7, r0
 8012338:	6812      	ldr	r2, [r2, #0]
 801233a:	0092      	lsls	r2, r2, #2
 801233c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 801233e:	183b      	adds	r3, r7, r0
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	3301      	adds	r3, #1
 8012344:	183a      	adds	r2, r7, r0
 8012346:	6013      	str	r3, [r2, #0]
 8012348:	238c      	movs	r3, #140	@ 0x8c
 801234a:	18fb      	adds	r3, r7, r3
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	2b05      	cmp	r3, #5
 8012350:	d9d4      	bls.n	80122fc <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 8012352:	4b13      	ldr	r3, [pc, #76]	@ (80123a0 <calculateSPLQ31+0x5b0>)
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	1c5a      	adds	r2, r3, #1
 8012358:	4b11      	ldr	r3, [pc, #68]	@ (80123a0 <calculateSPLQ31+0x5b0>)
 801235a:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 801235c:	4b10      	ldr	r3, [pc, #64]	@ (80123a0 <calculateSPLQ31+0x5b0>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	2b0f      	cmp	r3, #15
 8012362:	d905      	bls.n	8012370 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 8012364:	4b0f      	ldr	r3, [pc, #60]	@ (80123a4 <calculateSPLQ31+0x5b4>)
 8012366:	2201      	movs	r2, #1
 8012368:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 801236a:	4b0f      	ldr	r3, [pc, #60]	@ (80123a8 <calculateSPLQ31+0x5b8>)
 801236c:	2200      	movs	r2, #0
 801236e:	701a      	strb	r2, [r3, #0]
    }
}
 8012370:	46c0      	nop			@ (mov r8, r8)
 8012372:	46bd      	mov	sp, r7
 8012374:	b02f      	add	sp, #188	@ 0xbc
 8012376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012378:	200000dc 	.word	0x200000dc
 801237c:	200000e0 	.word	0x200000e0
 8012380:	20001278 	.word	0x20001278
 8012384:	20001274 	.word	0x20001274
 8012388:	2000127c 	.word	0x2000127c
 801238c:	20001294 	.word	0x20001294
 8012390:	20001cbc 	.word	0x20001cbc
 8012394:	20001cc0 	.word	0x20001cc0
 8012398:	20001cc4 	.word	0x20001cc4
 801239c:	20001cdc 	.word	0x20001cdc
 80123a0:	20001cf4 	.word	0x20001cf4
 80123a4:	20001269 	.word	0x20001269
 80123a8:	20001267 	.word	0x20001267

080123ac <resetSPLstate>:

static void resetSPLstate(void)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 80123b2:	4b11      	ldr	r3, [pc, #68]	@ (80123f8 <resetSPLstate+0x4c>)
 80123b4:	2200      	movs	r2, #0
 80123b6:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 80123b8:	4b10      	ldr	r3, [pc, #64]	@ (80123fc <resetSPLstate+0x50>)
 80123ba:	2200      	movs	r2, #0
 80123bc:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 80123be:	4b10      	ldr	r3, [pc, #64]	@ (8012400 <resetSPLstate+0x54>)
 80123c0:	2200      	movs	r2, #0
 80123c2:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80123c4:	2300      	movs	r3, #0
 80123c6:	607b      	str	r3, [r7, #4]
 80123c8:	e00c      	b.n	80123e4 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 80123ca:	4b0e      	ldr	r3, [pc, #56]	@ (8012404 <resetSPLstate+0x58>)
 80123cc:	687a      	ldr	r2, [r7, #4]
 80123ce:	0092      	lsls	r2, r2, #2
 80123d0:	2100      	movs	r1, #0
 80123d2:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 80123d4:	4b0c      	ldr	r3, [pc, #48]	@ (8012408 <resetSPLstate+0x5c>)
 80123d6:	687a      	ldr	r2, [r7, #4]
 80123d8:	0092      	lsls	r2, r2, #2
 80123da:	2100      	movs	r1, #0
 80123dc:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	3301      	adds	r3, #1
 80123e2:	607b      	str	r3, [r7, #4]
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2b05      	cmp	r3, #5
 80123e8:	d9ef      	bls.n	80123ca <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 80123ea:	4b08      	ldr	r3, [pc, #32]	@ (801240c <resetSPLstate+0x60>)
 80123ec:	2200      	movs	r2, #0
 80123ee:	701a      	strb	r2, [r3, #0]
}
 80123f0:	46c0      	nop			@ (mov r8, r8)
 80123f2:	46bd      	mov	sp, r7
 80123f4:	b002      	add	sp, #8
 80123f6:	bd80      	pop	{r7, pc}
 80123f8:	20001cbc 	.word	0x20001cbc
 80123fc:	20001cc0 	.word	0x20001cc0
 8012400:	20001cf4 	.word	0x20001cf4
 8012404:	20001cc4 	.word	0x20001cc4
 8012408:	20001cdc 	.word	0x20001cdc
 801240c:	20001269 	.word	0x20001269

08012410 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 8012410:	b5b0      	push	{r4, r5, r7, lr}
 8012412:	b090      	sub	sp, #64	@ 0x40
 8012414:	af00      	add	r7, sp, #0
 8012416:	60f8      	str	r0, [r7, #12]
 8012418:	60b9      	str	r1, [r7, #8]
 801241a:	0019      	movs	r1, r3
 801241c:	1dfb      	adds	r3, r7, #7
 801241e:	701a      	strb	r2, [r3, #0]
 8012420:	1dbb      	adds	r3, r7, #6
 8012422:	1c0a      	adds	r2, r1, #0
 8012424:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 8012426:	1dfb      	adds	r3, r7, #7
 8012428:	781b      	ldrb	r3, [r3, #0]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d005      	beq.n	801243a <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 801242e:	4b3b      	ldr	r3, [pc, #236]	@ (801251c <getFilteredMaxAmplitudeQ31+0x10c>)
 8012430:	2200      	movs	r2, #0
 8012432:	601a      	str	r2, [r3, #0]
        lastData = 0;
 8012434:	4b3a      	ldr	r3, [pc, #232]	@ (8012520 <getFilteredMaxAmplitudeQ31+0x110>)
 8012436:	2200      	movs	r2, #0
 8012438:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 801243a:	2300      	movs	r3, #0
 801243c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 801243e:	2300      	movs	r3, #0
 8012440:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 8012442:	2305      	movs	r3, #5
 8012444:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 8012446:	2300      	movs	r3, #0
 8012448:	637b      	str	r3, [r7, #52]	@ 0x34
 801244a:	e040      	b.n	80124ce <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 801244c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801244e:	009b      	lsls	r3, r3, #2
 8012450:	68fa      	ldr	r2, [r7, #12]
 8012452:	18d3      	adds	r3, r2, r3
 8012454:	681a      	ldr	r2, [r3, #0]
 8012456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012458:	409a      	lsls	r2, r3
 801245a:	0013      	movs	r3, r2
 801245c:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 801245e:	4b30      	ldr	r3, [pc, #192]	@ (8012520 <getFilteredMaxAmplitudeQ31+0x110>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	425a      	negs	r2, r3
 8012464:	4b2e      	ldr	r3, [pc, #184]	@ (8012520 <getFilteredMaxAmplitudeQ31+0x110>)
 8012466:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 8012468:	2418      	movs	r4, #24
 801246a:	193a      	adds	r2, r7, r4
 801246c:	492c      	ldr	r1, [pc, #176]	@ (8012520 <getFilteredMaxAmplitudeQ31+0x110>)
 801246e:	231c      	movs	r3, #28
 8012470:	18f8      	adds	r0, r7, r3
 8012472:	2301      	movs	r3, #1
 8012474:	f012 fb2a 	bl	8024acc <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 8012478:	2514      	movs	r5, #20
 801247a:	197a      	adds	r2, r7, r5
 801247c:	1939      	adds	r1, r7, r4
 801247e:	4829      	ldr	r0, [pc, #164]	@ (8012524 <getFilteredMaxAmplitudeQ31+0x114>)
 8012480:	2301      	movs	r3, #1
 8012482:	f012 faf1 	bl	8024a68 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 8012486:	2410      	movs	r4, #16
 8012488:	193a      	adds	r2, r7, r4
 801248a:	4924      	ldr	r1, [pc, #144]	@ (801251c <getFilteredMaxAmplitudeQ31+0x10c>)
 801248c:	4826      	ldr	r0, [pc, #152]	@ (8012528 <getFilteredMaxAmplitudeQ31+0x118>)
 801248e:	2301      	movs	r3, #1
 8012490:	f012 faea 	bl	8024a68 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 8012494:	4a21      	ldr	r2, [pc, #132]	@ (801251c <getFilteredMaxAmplitudeQ31+0x10c>)
 8012496:	1939      	adds	r1, r7, r4
 8012498:	1978      	adds	r0, r7, r5
 801249a:	2301      	movs	r3, #1
 801249c:	f012 fb16 	bl	8024acc <arm_add_q31>

        lastData = fx;
 80124a0:	69fa      	ldr	r2, [r7, #28]
 80124a2:	4b1f      	ldr	r3, [pc, #124]	@ (8012520 <getFilteredMaxAmplitudeQ31+0x110>)
 80124a4:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 80124a6:	4b1d      	ldr	r3, [pc, #116]	@ (801251c <getFilteredMaxAmplitudeQ31+0x10c>)
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80124ac:	429a      	cmp	r2, r3
 80124ae:	da03      	bge.n	80124b8 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 80124b0:	4b1a      	ldr	r3, [pc, #104]	@ (801251c <getFilteredMaxAmplitudeQ31+0x10c>)
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80124b6:	e007      	b.n	80124c8 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 80124b8:	4b18      	ldr	r3, [pc, #96]	@ (801251c <getFilteredMaxAmplitudeQ31+0x10c>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80124be:	429a      	cmp	r2, r3
 80124c0:	dd02      	ble.n	80124c8 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 80124c2:	4b16      	ldr	r3, [pc, #88]	@ (801251c <getFilteredMaxAmplitudeQ31+0x10c>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 80124c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124ca:	3301      	adds	r3, #1
 80124cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80124ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	429a      	cmp	r2, r3
 80124d4:	d3ba      	bcc.n	801244c <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 80124d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124d8:	17da      	asrs	r2, r3, #31
 80124da:	189b      	adds	r3, r3, r2
 80124dc:	4053      	eors	r3, r2
 80124de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 80124e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 80124e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80124e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124e8:	4293      	cmp	r3, r2
 80124ea:	d200      	bcs.n	80124ee <getFilteredMaxAmplitudeQ31+0xde>
 80124ec:	0013      	movs	r3, r2
 80124ee:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 80124f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124f4:	40da      	lsrs	r2, r3
 80124f6:	0013      	movs	r3, r2
 80124f8:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 80124fa:	1dbb      	adds	r3, r7, #6
 80124fc:	781b      	ldrb	r3, [r3, #0]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d007      	beq.n	8012512 <getFilteredMaxAmplitudeQ31+0x102>
 8012502:	4b0a      	ldr	r3, [pc, #40]	@ (801252c <getFilteredMaxAmplitudeQ31+0x11c>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	6a3a      	ldr	r2, [r7, #32]
 8012508:	429a      	cmp	r2, r3
 801250a:	d902      	bls.n	8012512 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 801250c:	4b07      	ldr	r3, [pc, #28]	@ (801252c <getFilteredMaxAmplitudeQ31+0x11c>)
 801250e:	6a3a      	ldr	r2, [r7, #32]
 8012510:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 8012512:	6a3b      	ldr	r3, [r7, #32]
}
 8012514:	0018      	movs	r0, r3
 8012516:	46bd      	mov	sp, r7
 8012518:	b010      	add	sp, #64	@ 0x40
 801251a:	bdb0      	pop	{r4, r5, r7, pc}
 801251c:	200020f8 	.word	0x200020f8
 8012520:	200020fc 	.word	0x200020fc
 8012524:	0802e9ac 	.word	0x0802e9ac
 8012528:	0802e9b0 	.word	0x0802e9b0
 801252c:	20001270 	.word	0x20001270

08012530 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b086      	sub	sp, #24
 8012534:	af00      	add	r7, sp, #0
 8012536:	60f8      	str	r0, [r7, #12]
 8012538:	60b9      	str	r1, [r7, #8]
 801253a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 801253c:	4913      	ldr	r1, [pc, #76]	@ (801258c <floatToIntAndFrac2dp+0x5c>)
 801253e:	68f8      	ldr	r0, [r7, #12]
 8012540:	f7ee fd7e 	bl	8001040 <__aeabi_fmul>
 8012544:	1c03      	adds	r3, r0, #0
 8012546:	1c18      	adds	r0, r3, #0
 8012548:	f016 ffba 	bl	80294c0 <roundf>
 801254c:	1c03      	adds	r3, r0, #0
 801254e:	1c18      	adds	r0, r3, #0
 8012550:	f7ee f864 	bl	800061c <__aeabi_f2uiz>
 8012554:	0003      	movs	r3, r0
 8012556:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 8012558:	697b      	ldr	r3, [r7, #20]
 801255a:	2164      	movs	r1, #100	@ 0x64
 801255c:	0018      	movs	r0, r3
 801255e:	f7ed fe21 	bl	80001a4 <__udivsi3>
 8012562:	0003      	movs	r3, r0
 8012564:	001a      	movs	r2, r3
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	b2da      	uxtb	r2, r3
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	b2db      	uxtb	r3, r3
 8012574:	2164      	movs	r1, #100	@ 0x64
 8012576:	434b      	muls	r3, r1
 8012578:	b2db      	uxtb	r3, r3
 801257a:	1ad3      	subs	r3, r2, r3
 801257c:	b2da      	uxtb	r2, r3
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	701a      	strb	r2, [r3, #0]
}
 8012582:	46c0      	nop			@ (mov r8, r8)
 8012584:	46bd      	mov	sp, r7
 8012586:	b006      	add	sp, #24
 8012588:	bd80      	pop	{r7, pc}
 801258a:	46c0      	nop			@ (mov r8, r8)
 801258c:	42c80000 	.word	0x42c80000

08012590 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b086      	sub	sp, #24
 8012594:	af00      	add	r7, sp, #0
 8012596:	60f8      	str	r0, [r7, #12]
 8012598:	60b9      	str	r1, [r7, #8]
 801259a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 801259c:	4914      	ldr	r1, [pc, #80]	@ (80125f0 <floatToIntAndFrac1dp+0x60>)
 801259e:	68f8      	ldr	r0, [r7, #12]
 80125a0:	f7ee fd4e 	bl	8001040 <__aeabi_fmul>
 80125a4:	1c03      	adds	r3, r0, #0
 80125a6:	1c18      	adds	r0, r3, #0
 80125a8:	f016 ff8a 	bl	80294c0 <roundf>
 80125ac:	1c03      	adds	r3, r0, #0
 80125ae:	1c18      	adds	r0, r3, #0
 80125b0:	f7ee f834 	bl	800061c <__aeabi_f2uiz>
 80125b4:	0003      	movs	r3, r0
 80125b6:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	210a      	movs	r1, #10
 80125bc:	0018      	movs	r0, r3
 80125be:	f7ed fdf1 	bl	80001a4 <__udivsi3>
 80125c2:	0003      	movs	r3, r0
 80125c4:	001a      	movs	r2, r3
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	b2da      	uxtb	r2, r3
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	b2db      	uxtb	r3, r3
 80125d4:	1c19      	adds	r1, r3, #0
 80125d6:	0089      	lsls	r1, r1, #2
 80125d8:	18cb      	adds	r3, r1, r3
 80125da:	18db      	adds	r3, r3, r3
 80125dc:	b2db      	uxtb	r3, r3
 80125de:	1ad3      	subs	r3, r2, r3
 80125e0:	b2da      	uxtb	r2, r3
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	701a      	strb	r2, [r3, #0]
}
 80125e6:	46c0      	nop			@ (mov r8, r8)
 80125e8:	46bd      	mov	sp, r7
 80125ea:	b006      	add	sp, #24
 80125ec:	bd80      	pop	{r7, pc}
 80125ee:	46c0      	nop			@ (mov r8, r8)
 80125f0:	41200000 	.word	0x41200000

080125f4 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 80125f4:	b590      	push	{r4, r7, lr}
 80125f6:	b087      	sub	sp, #28
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	60f8      	str	r0, [r7, #12]
 80125fc:	60b9      	str	r1, [r7, #8]
 80125fe:	607a      	str	r2, [r7, #4]
 8012600:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	f7ef f910 	bl	8001828 <__aeabi_i2f>
 8012608:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 801260a:	6838      	ldr	r0, [r7, #0]
 801260c:	f7ef f90c 	bl	8001828 <__aeabi_i2f>
 8012610:	1c03      	adds	r3, r0, #0
 8012612:	4918      	ldr	r1, [pc, #96]	@ (8012674 <sumToIntAverage+0x80>)
 8012614:	1c18      	adds	r0, r3, #0
 8012616:	f7ee fb45 	bl	8000ca4 <__aeabi_fdiv>
 801261a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 801261c:	1c19      	adds	r1, r3, #0
 801261e:	1c20      	adds	r0, r4, #0
 8012620:	f7ee f94e 	bl	80008c0 <__aeabi_fadd>
 8012624:	1c03      	adds	r3, r0, #0
 8012626:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 8012628:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801262a:	f7ef f94d 	bl	80018c8 <__aeabi_ui2f>
 801262e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 8012630:	1c19      	adds	r1, r3, #0
 8012632:	1c20      	adds	r0, r4, #0
 8012634:	f7ee fb36 	bl	8000ca4 <__aeabi_fdiv>
 8012638:	1c03      	adds	r3, r0, #0
 801263a:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 801263c:	2300      	movs	r3, #0
 801263e:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 8012640:	68ba      	ldr	r2, [r7, #8]
 8012642:	2310      	movs	r3, #16
 8012644:	18f9      	adds	r1, r7, r3
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	1c18      	adds	r0, r3, #0
 801264a:	f7ff ffa1 	bl	8012590 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 801264e:	693b      	ldr	r3, [r7, #16]
 8012650:	2bff      	cmp	r3, #255	@ 0xff
 8012652:	d906      	bls.n	8012662 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	22ff      	movs	r2, #255	@ 0xff
 8012658:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	2209      	movs	r2, #9
 801265e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 8012660:	e003      	b.n	801266a <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 8012662:	693b      	ldr	r3, [r7, #16]
 8012664:	b2da      	uxtb	r2, r3
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	701a      	strb	r2, [r3, #0]
}
 801266a:	46c0      	nop			@ (mov r8, r8)
 801266c:	46bd      	mov	sp, r7
 801266e:	b007      	add	sp, #28
 8012670:	bd90      	pop	{r4, r7, pc}
 8012672:	46c0      	nop			@ (mov r8, r8)
 8012674:	41200000 	.word	0x41200000

08012678 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b086      	sub	sp, #24
 801267c:	af00      	add	r7, sp, #0
 801267e:	60f8      	str	r0, [r7, #12]
 8012680:	60b9      	str	r1, [r7, #8]
 8012682:	607a      	str	r2, [r7, #4]
 8012684:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	2280      	movs	r2, #128	@ 0x80
 801268a:	0612      	lsls	r2, r2, #24
 801268c:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	4a18      	ldr	r2, [pc, #96]	@ (80126f4 <findMinMax+0x7c>)
 8012692:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 8012694:	2300      	movs	r3, #0
 8012696:	617b      	str	r3, [r7, #20]
 8012698:	e022      	b.n	80126e0 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 801269a:	697b      	ldr	r3, [r7, #20]
 801269c:	009b      	lsls	r3, r3, #2
 801269e:	687a      	ldr	r2, [r7, #4]
 80126a0:	18d3      	adds	r3, r2, r3
 80126a2:	681a      	ldr	r2, [r3, #0]
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	429a      	cmp	r2, r3
 80126aa:	da06      	bge.n	80126ba <findMinMax+0x42>
        {
            min[0] = array[i];
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	009b      	lsls	r3, r3, #2
 80126b0:	687a      	ldr	r2, [r7, #4]
 80126b2:	18d3      	adds	r3, r2, r3
 80126b4:	681a      	ldr	r2, [r3, #0]
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 80126ba:	697b      	ldr	r3, [r7, #20]
 80126bc:	009b      	lsls	r3, r3, #2
 80126be:	687a      	ldr	r2, [r7, #4]
 80126c0:	18d3      	adds	r3, r2, r3
 80126c2:	681a      	ldr	r2, [r3, #0]
 80126c4:	68bb      	ldr	r3, [r7, #8]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	429a      	cmp	r2, r3
 80126ca:	dd06      	ble.n	80126da <findMinMax+0x62>
        {
            max[0] = array[i];
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	009b      	lsls	r3, r3, #2
 80126d0:	687a      	ldr	r2, [r7, #4]
 80126d2:	18d3      	adds	r3, r2, r3
 80126d4:	681a      	ldr	r2, [r3, #0]
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 80126da:	697b      	ldr	r3, [r7, #20]
 80126dc:	3301      	adds	r3, #1
 80126de:	617b      	str	r3, [r7, #20]
 80126e0:	697a      	ldr	r2, [r7, #20]
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	429a      	cmp	r2, r3
 80126e6:	d3d8      	bcc.n	801269a <findMinMax+0x22>
        }
    }
}
 80126e8:	46c0      	nop			@ (mov r8, r8)
 80126ea:	46c0      	nop			@ (mov r8, r8)
 80126ec:	46bd      	mov	sp, r7
 80126ee:	b006      	add	sp, #24
 80126f0:	bd80      	pop	{r7, pc}
 80126f2:	46c0      	nop			@ (mov r8, r8)
 80126f4:	7fffffff 	.word	0x7fffffff

080126f8 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b084      	sub	sp, #16
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 8012702:	2300      	movs	r3, #0
 8012704:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 8012706:	687a      	ldr	r2, [r7, #4]
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	429a      	cmp	r2, r3
 801270c:	d302      	bcc.n	8012714 <getPo2factor+0x1c>
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d107      	bne.n	8012724 <getPo2factor+0x2c>
    {
        return 0;
 8012714:	2300      	movs	r3, #0
 8012716:	e00d      	b.n	8012734 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	085b      	lsrs	r3, r3, #1
 801271c:	607b      	str	r3, [r7, #4]
        bitShift++;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	3301      	adds	r3, #1
 8012722:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 8012724:	687a      	ldr	r2, [r7, #4]
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	429a      	cmp	r2, r3
 801272a:	d2f5      	bcs.n	8012718 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	3b01      	subs	r3, #1
 8012730:	60fb      	str	r3, [r7, #12]
    return bitShift;
 8012732:	68fb      	ldr	r3, [r7, #12]
}
 8012734:	0018      	movs	r0, r3
 8012736:	46bd      	mov	sp, r7
 8012738:	b004      	add	sp, #16
 801273a:	bd80      	pop	{r7, pc}

0801273c <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b086      	sub	sp, #24
 8012740:	af00      	add	r7, sp, #0
 8012742:	60f8      	str	r0, [r7, #12]
 8012744:	60b9      	str	r1, [r7, #8]
 8012746:	607a      	str	r2, [r7, #4]
 8012748:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 801274a:	68f8      	ldr	r0, [r7, #12]
 801274c:	f7ef f8bc 	bl	80018c8 <__aeabi_ui2f>
 8012750:	1c03      	adds	r3, r0, #0
 8012752:	1c19      	adds	r1, r3, #0
 8012754:	68b8      	ldr	r0, [r7, #8]
 8012756:	f7ee fc73 	bl	8001040 <__aeabi_fmul>
 801275a:	1c03      	adds	r3, r0, #0
 801275c:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 801275e:	2300      	movs	r3, #0
 8012760:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 8012762:	683a      	ldr	r2, [r7, #0]
 8012764:	2310      	movs	r3, #16
 8012766:	18f9      	adds	r1, r7, r3
 8012768:	697b      	ldr	r3, [r7, #20]
 801276a:	1c18      	adds	r0, r3, #0
 801276c:	f7ff fee0 	bl	8012530 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 8012770:	693b      	ldr	r3, [r7, #16]
 8012772:	b29a      	uxth	r2, r3
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	801a      	strh	r2, [r3, #0]
}
 8012778:	46c0      	nop			@ (mov r8, r8)
 801277a:	46bd      	mov	sp, r7
 801277c:	b006      	add	sp, #24
 801277e:	bd80      	pop	{r7, pc}

08012780 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b084      	sub	sp, #16
 8012784:	af00      	add	r7, sp, #0
 8012786:	60b8      	str	r0, [r7, #8]
 8012788:	60f9      	str	r1, [r7, #12]
 801278a:	607a      	str	r2, [r7, #4]
 801278c:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 801278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012790:	6a3a      	ldr	r2, [r7, #32]
 8012792:	68b8      	ldr	r0, [r7, #8]
 8012794:	68f9      	ldr	r1, [r7, #12]
 8012796:	f7f9 fe7d 	bl	800c494 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 801279a:	6a3b      	ldr	r3, [r7, #32]
 801279c:	681a      	ldr	r2, [r3, #0]
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	18d2      	adds	r2, r2, r3
 80127a2:	69bb      	ldr	r3, [r7, #24]
 80127a4:	18d2      	adds	r2, r2, r3
 80127a6:	6a3b      	ldr	r3, [r7, #32]
 80127a8:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 80127aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127ac:	681a      	ldr	r2, [r3, #0]
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	18d2      	adds	r2, r2, r3
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	18d2      	adds	r2, r2, r3
 80127b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127b8:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 80127ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127bc:	6a3b      	ldr	r3, [r7, #32]
 80127be:	0011      	movs	r1, r2
 80127c0:	0018      	movs	r0, r3
 80127c2:	f7f9 fef7 	bl	800c5b4 <correctIntFracNumber>
}
 80127c6:	46c0      	nop			@ (mov r8, r8)
 80127c8:	46bd      	mov	sp, r7
 80127ca:	b004      	add	sp, #16
 80127cc:	bd80      	pop	{r7, pc}

080127ce <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 80127ce:	b580      	push	{r7, lr}
 80127d0:	b086      	sub	sp, #24
 80127d2:	af00      	add	r7, sp, #0
 80127d4:	60f8      	str	r0, [r7, #12]
 80127d6:	60b9      	str	r1, [r7, #8]
 80127d8:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 80127da:	2300      	movs	r3, #0
 80127dc:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 80127de:	2300      	movs	r3, #0
 80127e0:	613b      	str	r3, [r7, #16]
 80127e2:	e019      	b.n	8012818 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80127e4:	693b      	ldr	r3, [r7, #16]
 80127e6:	005b      	lsls	r3, r3, #1
 80127e8:	68fa      	ldr	r2, [r7, #12]
 80127ea:	18d3      	adds	r3, r2, r3
 80127ec:	881b      	ldrh	r3, [r3, #0]
 80127ee:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 80127f0:	693a      	ldr	r2, [r7, #16]
 80127f2:	3201      	adds	r2, #1
 80127f4:	0052      	lsls	r2, r2, #1
 80127f6:	68f9      	ldr	r1, [r7, #12]
 80127f8:	188a      	adds	r2, r1, r2
 80127fa:	8812      	ldrh	r2, [r2, #0]
 80127fc:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 80127fe:	0019      	movs	r1, r3
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	009b      	lsls	r3, r3, #2
 8012804:	687a      	ldr	r2, [r7, #4]
 8012806:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 8012808:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 801280a:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 801280c:	697b      	ldr	r3, [r7, #20]
 801280e:	3301      	adds	r3, #1
 8012810:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 8012812:	693b      	ldr	r3, [r7, #16]
 8012814:	3304      	adds	r3, #4
 8012816:	613b      	str	r3, [r7, #16]
 8012818:	693a      	ldr	r2, [r7, #16]
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	429a      	cmp	r2, r3
 801281e:	d3e1      	bcc.n	80127e4 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 8012820:	46c0      	nop			@ (mov r8, r8)
 8012822:	46c0      	nop			@ (mov r8, r8)
 8012824:	46bd      	mov	sp, r7
 8012826:	b006      	add	sp, #24
 8012828:	bd80      	pop	{r7, pc}
	...

0801282c <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 801282c:	b580      	push	{r7, lr}
 801282e:	af00      	add	r7, sp, #0
  init = false;
 8012830:	4b02      	ldr	r3, [pc, #8]	@ (801283c <InitDone+0x10>)
 8012832:	2200      	movs	r2, #0
 8012834:	701a      	strb	r2, [r3, #0]
}
 8012836:	46c0      	nop			@ (mov r8, r8)
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}
 801283c:	200000e8 	.word	0x200000e8

08012840 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 8012840:	b580      	push	{r7, lr}
 8012842:	b082      	sub	sp, #8
 8012844:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 8012846:	f7f7 f8ef 	bl	8009a28 <ReadBatteryVoltage>
 801284a:	1c02      	adds	r2, r0, #0
 801284c:	4b28      	ldr	r3, [pc, #160]	@ (80128f0 <batteryChargeCheck+0xb0>)
 801284e:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.68){
 8012850:	4b27      	ldr	r3, [pc, #156]	@ (80128f0 <batteryChargeCheck+0xb0>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	1c18      	adds	r0, r3, #0
 8012856:	f7f1 f81d 	bl	8003894 <__aeabi_f2d>
 801285a:	4a26      	ldr	r2, [pc, #152]	@ (80128f4 <batteryChargeCheck+0xb4>)
 801285c:	4b26      	ldr	r3, [pc, #152]	@ (80128f8 <batteryChargeCheck+0xb8>)
 801285e:	f7ed fe2d 	bl	80004bc <__aeabi_dcmplt>
 8012862:	1e03      	subs	r3, r0, #0
 8012864:	d002      	beq.n	801286c <batteryChargeCheck+0x2c>
    status = BATTERY_CRITICAL;
 8012866:	1dfb      	adds	r3, r7, #7
 8012868:	2200      	movs	r2, #0
 801286a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.68 && batteryCharge < 3.74){
 801286c:	4b20      	ldr	r3, [pc, #128]	@ (80128f0 <batteryChargeCheck+0xb0>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	1c18      	adds	r0, r3, #0
 8012872:	f7f1 f80f 	bl	8003894 <__aeabi_f2d>
 8012876:	4a1f      	ldr	r2, [pc, #124]	@ (80128f4 <batteryChargeCheck+0xb4>)
 8012878:	4b1f      	ldr	r3, [pc, #124]	@ (80128f8 <batteryChargeCheck+0xb8>)
 801287a:	f7ed fe3d 	bl	80004f8 <__aeabi_dcmpge>
 801287e:	1e03      	subs	r3, r0, #0
 8012880:	d00d      	beq.n	801289e <batteryChargeCheck+0x5e>
 8012882:	4b1b      	ldr	r3, [pc, #108]	@ (80128f0 <batteryChargeCheck+0xb0>)
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	1c18      	adds	r0, r3, #0
 8012888:	f7f1 f804 	bl	8003894 <__aeabi_f2d>
 801288c:	4a1b      	ldr	r2, [pc, #108]	@ (80128fc <batteryChargeCheck+0xbc>)
 801288e:	4b1c      	ldr	r3, [pc, #112]	@ (8012900 <batteryChargeCheck+0xc0>)
 8012890:	f7ed fe14 	bl	80004bc <__aeabi_dcmplt>
 8012894:	1e03      	subs	r3, r0, #0
 8012896:	d002      	beq.n	801289e <batteryChargeCheck+0x5e>
    status = BATTERY_LOW;
 8012898:	1dfb      	adds	r3, r7, #7
 801289a:	2201      	movs	r2, #1
 801289c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 3.74 && batteryCharge < 4.00){
 801289e:	4b14      	ldr	r3, [pc, #80]	@ (80128f0 <batteryChargeCheck+0xb0>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	1c18      	adds	r0, r3, #0
 80128a4:	f7f0 fff6 	bl	8003894 <__aeabi_f2d>
 80128a8:	4a14      	ldr	r2, [pc, #80]	@ (80128fc <batteryChargeCheck+0xbc>)
 80128aa:	4b15      	ldr	r3, [pc, #84]	@ (8012900 <batteryChargeCheck+0xc0>)
 80128ac:	f7ed fe24 	bl	80004f8 <__aeabi_dcmpge>
 80128b0:	1e03      	subs	r3, r0, #0
 80128b2:	d00b      	beq.n	80128cc <batteryChargeCheck+0x8c>
 80128b4:	4b0e      	ldr	r3, [pc, #56]	@ (80128f0 <batteryChargeCheck+0xb0>)
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	2181      	movs	r1, #129	@ 0x81
 80128ba:	05c9      	lsls	r1, r1, #23
 80128bc:	1c18      	adds	r0, r3, #0
 80128be:	f7ed fe37 	bl	8000530 <__aeabi_fcmplt>
 80128c2:	1e03      	subs	r3, r0, #0
 80128c4:	d002      	beq.n	80128cc <batteryChargeCheck+0x8c>
    status = BATTERY_GOOD;
 80128c6:	1dfb      	adds	r3, r7, #7
 80128c8:	2202      	movs	r2, #2
 80128ca:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.00){
 80128cc:	4b08      	ldr	r3, [pc, #32]	@ (80128f0 <batteryChargeCheck+0xb0>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	2181      	movs	r1, #129	@ 0x81
 80128d2:	05c9      	lsls	r1, r1, #23
 80128d4:	1c18      	adds	r0, r3, #0
 80128d6:	f7ed fe49 	bl	800056c <__aeabi_fcmpge>
 80128da:	1e03      	subs	r3, r0, #0
 80128dc:	d002      	beq.n	80128e4 <batteryChargeCheck+0xa4>
    status = BATTERY_FULL;
 80128de:	1dfb      	adds	r3, r7, #7
 80128e0:	2203      	movs	r2, #3
 80128e2:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 80128e4:	1dfb      	adds	r3, r7, #7
 80128e6:	781b      	ldrb	r3, [r3, #0]
}
 80128e8:	0018      	movs	r0, r3
 80128ea:	46bd      	mov	sp, r7
 80128ec:	b002      	add	sp, #8
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	20002110 	.word	0x20002110
 80128f4:	d70a3d71 	.word	0xd70a3d71
 80128f8:	400d70a3 	.word	0x400d70a3
 80128fc:	1eb851ec 	.word	0x1eb851ec
 8012900:	400deb85 	.word	0x400deb85

08012904 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 8012904:	b5b0      	push	{r4, r5, r7, lr}
 8012906:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 8012908:	f7f7 f8f0 	bl	8009aec <ReadSolarVoltage>
 801290c:	0003      	movs	r3, r0
 801290e:	001a      	movs	r2, r3
 8012910:	4b1a      	ldr	r3, [pc, #104]	@ (801297c <Calculate_LED_ON+0x78>)
 8012912:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 8012914:	4b19      	ldr	r3, [pc, #100]	@ (801297c <Calculate_LED_ON+0x78>)
 8012916:	881b      	ldrh	r3, [r3, #0]
 8012918:	4a19      	ldr	r2, [pc, #100]	@ (8012980 <Calculate_LED_ON+0x7c>)
 801291a:	4293      	cmp	r3, r2
 801291c:	d802      	bhi.n	8012924 <Calculate_LED_ON+0x20>
    solmV = 2900;
 801291e:	4b17      	ldr	r3, [pc, #92]	@ (801297c <Calculate_LED_ON+0x78>)
 8012920:	4a18      	ldr	r2, [pc, #96]	@ (8012984 <Calculate_LED_ON+0x80>)
 8012922:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 8012924:	4b15      	ldr	r3, [pc, #84]	@ (801297c <Calculate_LED_ON+0x78>)
 8012926:	881b      	ldrh	r3, [r3, #0]
 8012928:	4a17      	ldr	r2, [pc, #92]	@ (8012988 <Calculate_LED_ON+0x84>)
 801292a:	4293      	cmp	r3, r2
 801292c:	d902      	bls.n	8012934 <Calculate_LED_ON+0x30>
    solmV = 4700;
 801292e:	4b13      	ldr	r3, [pc, #76]	@ (801297c <Calculate_LED_ON+0x78>)
 8012930:	4a15      	ldr	r2, [pc, #84]	@ (8012988 <Calculate_LED_ON+0x84>)
 8012932:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 8012934:	4b11      	ldr	r3, [pc, #68]	@ (801297c <Calculate_LED_ON+0x78>)
 8012936:	881b      	ldrh	r3, [r3, #0]
 8012938:	0018      	movs	r0, r3
 801293a:	f7f0 ff59 	bl	80037f0 <__aeabi_i2d>
 801293e:	0004      	movs	r4, r0
 8012940:	000d      	movs	r5, r1
 8012942:	4b0e      	ldr	r3, [pc, #56]	@ (801297c <Calculate_LED_ON+0x78>)
 8012944:	881b      	ldrh	r3, [r3, #0]
 8012946:	001a      	movs	r2, r3
 8012948:	4b10      	ldr	r3, [pc, #64]	@ (801298c <Calculate_LED_ON+0x88>)
 801294a:	1a9b      	subs	r3, r3, r2
 801294c:	0018      	movs	r0, r3
 801294e:	f7f0 ff4f 	bl	80037f0 <__aeabi_i2d>
 8012952:	2200      	movs	r2, #0
 8012954:	4b0e      	ldr	r3, [pc, #56]	@ (8012990 <Calculate_LED_ON+0x8c>)
 8012956:	f7ef fffd 	bl	8002954 <__aeabi_dmul>
 801295a:	0002      	movs	r2, r0
 801295c:	000b      	movs	r3, r1
 801295e:	0020      	movs	r0, r4
 8012960:	0029      	movs	r1, r5
 8012962:	f7ee fff7 	bl	8001954 <__aeabi_dadd>
 8012966:	0002      	movs	r2, r0
 8012968:	000b      	movs	r3, r1
 801296a:	0010      	movs	r0, r2
 801296c:	0019      	movs	r1, r3
 801296e:	f7ed fe6d 	bl	800064c <__aeabi_d2uiz>
 8012972:	0003      	movs	r3, r0
 8012974:	b29b      	uxth	r3, r3
}
 8012976:	0018      	movs	r0, r3
 8012978:	46bd      	mov	sp, r7
 801297a:	bdb0      	pop	{r4, r5, r7, pc}
 801297c:	20002114 	.word	0x20002114
 8012980:	00000b53 	.word	0x00000b53
 8012984:	00000b54 	.word	0x00000b54
 8012988:	0000125c 	.word	0x0000125c
 801298c:	00000dee 	.word	0x00000dee
 8012990:	3ff80000 	.word	0x3ff80000

08012994 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8012994:	b590      	push	{r4, r7, lr}
 8012996:	b083      	sub	sp, #12
 8012998:	af00      	add	r7, sp, #0
 801299a:	0004      	movs	r4, r0
 801299c:	0008      	movs	r0, r1
 801299e:	0011      	movs	r1, r2
 80129a0:	1dbb      	adds	r3, r7, #6
 80129a2:	1c22      	adds	r2, r4, #0
 80129a4:	801a      	strh	r2, [r3, #0]
 80129a6:	1d3b      	adds	r3, r7, #4
 80129a8:	1c02      	adds	r2, r0, #0
 80129aa:	801a      	strh	r2, [r3, #0]
 80129ac:	1cbb      	adds	r3, r7, #2
 80129ae:	1c0a      	adds	r2, r1, #0
 80129b0:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 80129b2:	4b0f      	ldr	r3, [pc, #60]	@ (80129f0 <SetStatusLED+0x5c>)
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d107      	bne.n	80129ca <SetStatusLED+0x36>
 80129ba:	4b0e      	ldr	r3, [pc, #56]	@ (80129f4 <SetStatusLED+0x60>)
 80129bc:	781b      	ldrb	r3, [r3, #0]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d103      	bne.n	80129ca <SetStatusLED+0x36>
 80129c2:	4b0d      	ldr	r3, [pc, #52]	@ (80129f8 <SetStatusLED+0x64>)
 80129c4:	781b      	ldrb	r3, [r3, #0]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d00e      	beq.n	80129e8 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 80129ca:	2380      	movs	r3, #128	@ 0x80
 80129cc:	05db      	lsls	r3, r3, #23
 80129ce:	1dba      	adds	r2, r7, #6
 80129d0:	8812      	ldrh	r2, [r2, #0]
 80129d2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 80129d4:	2380      	movs	r3, #128	@ 0x80
 80129d6:	05db      	lsls	r3, r3, #23
 80129d8:	1d3a      	adds	r2, r7, #4
 80129da:	8812      	ldrh	r2, [r2, #0]
 80129dc:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 80129de:	2380      	movs	r3, #128	@ 0x80
 80129e0:	05db      	lsls	r3, r3, #23
 80129e2:	1cba      	adds	r2, r7, #2
 80129e4:	8812      	ldrh	r2, [r2, #0]
 80129e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80129e8:	46c0      	nop			@ (mov r8, r8)
 80129ea:	46bd      	mov	sp, r7
 80129ec:	b003      	add	sp, #12
 80129ee:	bd90      	pop	{r4, r7, pc}
 80129f0:	20002101 	.word	0x20002101
 80129f4:	200000e8 	.word	0x200000e8
 80129f8:	20002102 	.word	0x20002102

080129fc <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 80129fc:	b590      	push	{r4, r7, lr}
 80129fe:	b083      	sub	sp, #12
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	0004      	movs	r4, r0
 8012a04:	0008      	movs	r0, r1
 8012a06:	0011      	movs	r1, r2
 8012a08:	1dfb      	adds	r3, r7, #7
 8012a0a:	1c22      	adds	r2, r4, #0
 8012a0c:	701a      	strb	r2, [r3, #0]
 8012a0e:	1dbb      	adds	r3, r7, #6
 8012a10:	1c02      	adds	r2, r0, #0
 8012a12:	701a      	strb	r2, [r3, #0]
 8012a14:	1d7b      	adds	r3, r7, #5
 8012a16:	1c0a      	adds	r2, r1, #0
 8012a18:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 8012a1a:	4b19      	ldr	r3, [pc, #100]	@ (8012a80 <SetDBLED+0x84>)
 8012a1c:	781b      	ldrb	r3, [r3, #0]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d107      	bne.n	8012a32 <SetDBLED+0x36>
 8012a22:	4b18      	ldr	r3, [pc, #96]	@ (8012a84 <SetDBLED+0x88>)
 8012a24:	781b      	ldrb	r3, [r3, #0]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d103      	bne.n	8012a32 <SetDBLED+0x36>
 8012a2a:	4b17      	ldr	r3, [pc, #92]	@ (8012a88 <SetDBLED+0x8c>)
 8012a2c:	781b      	ldrb	r3, [r3, #0]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d022      	beq.n	8012a78 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8012a32:	1dfb      	adds	r3, r7, #7
 8012a34:	781b      	ldrb	r3, [r3, #0]
 8012a36:	2201      	movs	r2, #1
 8012a38:	4053      	eors	r3, r2
 8012a3a:	b2db      	uxtb	r3, r3
 8012a3c:	001a      	movs	r2, r3
 8012a3e:	4b13      	ldr	r3, [pc, #76]	@ (8012a8c <SetDBLED+0x90>)
 8012a40:	2101      	movs	r1, #1
 8012a42:	0018      	movs	r0, r3
 8012a44:	f003 fb0f 	bl	8016066 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8012a48:	1dbb      	adds	r3, r7, #6
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	2201      	movs	r2, #1
 8012a4e:	4053      	eors	r3, r2
 8012a50:	b2db      	uxtb	r3, r3
 8012a52:	001a      	movs	r2, r3
 8012a54:	2380      	movs	r3, #128	@ 0x80
 8012a56:	005b      	lsls	r3, r3, #1
 8012a58:	480c      	ldr	r0, [pc, #48]	@ (8012a8c <SetDBLED+0x90>)
 8012a5a:	0019      	movs	r1, r3
 8012a5c:	f003 fb03 	bl	8016066 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8012a60:	1d7b      	adds	r3, r7, #5
 8012a62:	781b      	ldrb	r3, [r3, #0]
 8012a64:	2201      	movs	r2, #1
 8012a66:	4053      	eors	r3, r2
 8012a68:	b2db      	uxtb	r3, r3
 8012a6a:	001a      	movs	r2, r3
 8012a6c:	2380      	movs	r3, #128	@ 0x80
 8012a6e:	009b      	lsls	r3, r3, #2
 8012a70:	4806      	ldr	r0, [pc, #24]	@ (8012a8c <SetDBLED+0x90>)
 8012a72:	0019      	movs	r1, r3
 8012a74:	f003 faf7 	bl	8016066 <HAL_GPIO_WritePin>
  }
}
 8012a78:	46c0      	nop			@ (mov r8, r8)
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	b003      	add	sp, #12
 8012a7e:	bd90      	pop	{r4, r7, pc}
 8012a80:	20002101 	.word	0x20002101
 8012a84:	200000e8 	.word	0x200000e8
 8012a88:	20002102 	.word	0x20002102
 8012a8c:	50000400 	.word	0x50000400

08012a90 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8012a90:	b590      	push	{r4, r7, lr}
 8012a92:	b083      	sub	sp, #12
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	0004      	movs	r4, r0
 8012a98:	0008      	movs	r0, r1
 8012a9a:	0011      	movs	r1, r2
 8012a9c:	1dbb      	adds	r3, r7, #6
 8012a9e:	1c22      	adds	r2, r4, #0
 8012aa0:	801a      	strh	r2, [r3, #0]
 8012aa2:	1d3b      	adds	r3, r7, #4
 8012aa4:	1c02      	adds	r2, r0, #0
 8012aa6:	801a      	strh	r2, [r3, #0]
 8012aa8:	1cbb      	adds	r3, r7, #2
 8012aaa:	1c0a      	adds	r2, r1, #0
 8012aac:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8012aae:	4b0e      	ldr	r3, [pc, #56]	@ (8012ae8 <SetVocLED+0x58>)
 8012ab0:	781b      	ldrb	r3, [r3, #0]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d107      	bne.n	8012ac6 <SetVocLED+0x36>
 8012ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8012aec <SetVocLED+0x5c>)
 8012ab8:	781b      	ldrb	r3, [r3, #0]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d103      	bne.n	8012ac6 <SetVocLED+0x36>
 8012abe:	4b0c      	ldr	r3, [pc, #48]	@ (8012af0 <SetVocLED+0x60>)
 8012ac0:	781b      	ldrb	r3, [r3, #0]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d00b      	beq.n	8012ade <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 8012ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8012af4 <SetVocLED+0x64>)
 8012ac8:	1dba      	adds	r2, r7, #6
 8012aca:	8812      	ldrh	r2, [r2, #0]
 8012acc:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8012ace:	4b09      	ldr	r3, [pc, #36]	@ (8012af4 <SetVocLED+0x64>)
 8012ad0:	1d3a      	adds	r2, r7, #4
 8012ad2:	8812      	ldrh	r2, [r2, #0]
 8012ad4:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8012ad6:	4b07      	ldr	r3, [pc, #28]	@ (8012af4 <SetVocLED+0x64>)
 8012ad8:	1cba      	adds	r2, r7, #2
 8012ada:	8812      	ldrh	r2, [r2, #0]
 8012adc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012ade:	46c0      	nop			@ (mov r8, r8)
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	b003      	add	sp, #12
 8012ae4:	bd90      	pop	{r4, r7, pc}
 8012ae6:	46c0      	nop			@ (mov r8, r8)
 8012ae8:	20002101 	.word	0x20002101
 8012aec:	200000e8 	.word	0x200000e8
 8012af0:	20002102 	.word	0x20002102
 8012af4:	40000400 	.word	0x40000400

08012af8 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8012af8:	b580      	push	{r7, lr}
 8012afa:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012afc:	4b08      	ldr	r3, [pc, #32]	@ (8012b20 <SetMeasurementIndicator+0x28>)
 8012afe:	781b      	ldrb	r3, [r3, #0]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d103      	bne.n	8012b0c <SetMeasurementIndicator+0x14>
 8012b04:	4b07      	ldr	r3, [pc, #28]	@ (8012b24 <SetMeasurementIndicator+0x2c>)
 8012b06:	781b      	ldrb	r3, [r3, #0]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d006      	beq.n	8012b1a <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 8012b0c:	f7ff fefa 	bl	8012904 <Calculate_LED_ON>
 8012b10:	0003      	movs	r3, r0
 8012b12:	001a      	movs	r2, r3
 8012b14:	2380      	movs	r3, #128	@ 0x80
 8012b16:	05db      	lsls	r3, r3, #23
 8012b18:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012b1a:	46c0      	nop			@ (mov r8, r8)
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}
 8012b20:	20002101 	.word	0x20002101
 8012b24:	20002102 	.word	0x20002102

08012b28 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012b2c:	4b07      	ldr	r3, [pc, #28]	@ (8012b4c <ResetMeasurementIndicator+0x24>)
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d103      	bne.n	8012b3c <ResetMeasurementIndicator+0x14>
 8012b34:	4b06      	ldr	r3, [pc, #24]	@ (8012b50 <ResetMeasurementIndicator+0x28>)
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d004      	beq.n	8012b46 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 8012b3c:	2380      	movs	r3, #128	@ 0x80
 8012b3e:	05db      	lsls	r3, r3, #23
 8012b40:	22fa      	movs	r2, #250	@ 0xfa
 8012b42:	0112      	lsls	r2, r2, #4
 8012b44:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012b46:	46c0      	nop			@ (mov r8, r8)
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	20002101 	.word	0x20002101
 8012b50:	20002102 	.word	0x20002102

08012b54 <SetMICIndicator>:
void SetMICIndicator(){
 8012b54:	b580      	push	{r7, lr}
 8012b56:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012b58:	4b19      	ldr	r3, [pc, #100]	@ (8012bc0 <SetMICIndicator+0x6c>)
 8012b5a:	781b      	ldrb	r3, [r3, #0]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d103      	bne.n	8012b68 <SetMICIndicator+0x14>
 8012b60:	4b18      	ldr	r3, [pc, #96]	@ (8012bc4 <SetMICIndicator+0x70>)
 8012b62:	781b      	ldrb	r3, [r3, #0]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d007      	beq.n	8012b78 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 8012b68:	f7ff fecc 	bl	8012904 <Calculate_LED_ON>
 8012b6c:	0003      	movs	r3, r0
 8012b6e:	001a      	movs	r2, r3
 8012b70:	2380      	movs	r3, #128	@ 0x80
 8012b72:	05db      	lsls	r3, r3, #23
 8012b74:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
      usedMicLEDcolor = LED_RED;
    }
  }
}
 8012b76:	e01f      	b.n	8012bb8 <SetMICIndicator+0x64>
    if (batteryCharge > 3.7) {
 8012b78:	4b13      	ldr	r3, [pc, #76]	@ (8012bc8 <SetMICIndicator+0x74>)
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	1c18      	adds	r0, r3, #0
 8012b7e:	f7f0 fe89 	bl	8003894 <__aeabi_f2d>
 8012b82:	4a12      	ldr	r2, [pc, #72]	@ (8012bcc <SetMICIndicator+0x78>)
 8012b84:	4b12      	ldr	r3, [pc, #72]	@ (8012bd0 <SetMICIndicator+0x7c>)
 8012b86:	f7ed fcad 	bl	80004e4 <__aeabi_dcmpgt>
 8012b8a:	1e03      	subs	r3, r0, #0
 8012b8c:	d00a      	beq.n	8012ba4 <SetMICIndicator+0x50>
      TIM2 -> CCR3 = Calculate_LED_ON();
 8012b8e:	f7ff feb9 	bl	8012904 <Calculate_LED_ON>
 8012b92:	0003      	movs	r3, r0
 8012b94:	001a      	movs	r2, r3
 8012b96:	2380      	movs	r3, #128	@ 0x80
 8012b98:	05db      	lsls	r3, r3, #23
 8012b9a:	63da      	str	r2, [r3, #60]	@ 0x3c
      usedMicLEDcolor = LED_GREEN;
 8012b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8012bd4 <SetMICIndicator+0x80>)
 8012b9e:	2202      	movs	r2, #2
 8012ba0:	701a      	strb	r2, [r3, #0]
}
 8012ba2:	e009      	b.n	8012bb8 <SetMICIndicator+0x64>
      TIM2 -> CCR1 = Calculate_LED_ON();
 8012ba4:	f7ff feae 	bl	8012904 <Calculate_LED_ON>
 8012ba8:	0003      	movs	r3, r0
 8012baa:	001a      	movs	r2, r3
 8012bac:	2380      	movs	r3, #128	@ 0x80
 8012bae:	05db      	lsls	r3, r3, #23
 8012bb0:	635a      	str	r2, [r3, #52]	@ 0x34
      usedMicLEDcolor = LED_RED;
 8012bb2:	4b08      	ldr	r3, [pc, #32]	@ (8012bd4 <SetMICIndicator+0x80>)
 8012bb4:	2201      	movs	r2, #1
 8012bb6:	701a      	strb	r2, [r3, #0]
}
 8012bb8:	46c0      	nop			@ (mov r8, r8)
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	46c0      	nop			@ (mov r8, r8)
 8012bc0:	20002101 	.word	0x20002101
 8012bc4:	20002102 	.word	0x20002102
 8012bc8:	20002110 	.word	0x20002110
 8012bcc:	9999999a 	.word	0x9999999a
 8012bd0:	400d9999 	.word	0x400d9999
 8012bd4:	20002104 	.word	0x20002104

08012bd8 <ResetMICIndicator>:
void ResetMICIndicator(){
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8012c1c <ResetMICIndicator+0x44>)
 8012bde:	781b      	ldrb	r3, [r3, #0]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d103      	bne.n	8012bec <ResetMICIndicator+0x14>
 8012be4:	4b0e      	ldr	r3, [pc, #56]	@ (8012c20 <ResetMICIndicator+0x48>)
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d005      	beq.n	8012bf8 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 8012bec:	2380      	movs	r3, #128	@ 0x80
 8012bee:	05db      	lsls	r3, r3, #23
 8012bf0:	22fa      	movs	r2, #250	@ 0xfa
 8012bf2:	0112      	lsls	r2, r2, #4
 8012bf4:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 8012bf6:	e00e      	b.n	8012c16 <ResetMICIndicator+0x3e>
    if (usedMicLEDcolor == LED_GREEN) {
 8012bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8012c24 <ResetMICIndicator+0x4c>)
 8012bfa:	781b      	ldrb	r3, [r3, #0]
 8012bfc:	2b02      	cmp	r3, #2
 8012bfe:	d105      	bne.n	8012c0c <ResetMICIndicator+0x34>
      TIM2 -> CCR3 = LED_OFF;
 8012c00:	2380      	movs	r3, #128	@ 0x80
 8012c02:	05db      	lsls	r3, r3, #23
 8012c04:	22fa      	movs	r2, #250	@ 0xfa
 8012c06:	0112      	lsls	r2, r2, #4
 8012c08:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8012c0a:	e004      	b.n	8012c16 <ResetMICIndicator+0x3e>
      TIM2 -> CCR1 = LED_OFF;
 8012c0c:	2380      	movs	r3, #128	@ 0x80
 8012c0e:	05db      	lsls	r3, r3, #23
 8012c10:	22fa      	movs	r2, #250	@ 0xfa
 8012c12:	0112      	lsls	r2, r2, #4
 8012c14:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8012c16:	46c0      	nop			@ (mov r8, r8)
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	20002101 	.word	0x20002101
 8012c20:	20002102 	.word	0x20002102
 8012c24:	20002104 	.word	0x20002104

08012c28 <SetESPIndicator>:
void SetESPIndicator(){
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012c2c:	4b08      	ldr	r3, [pc, #32]	@ (8012c50 <SetESPIndicator+0x28>)
 8012c2e:	781b      	ldrb	r3, [r3, #0]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d103      	bne.n	8012c3c <SetESPIndicator+0x14>
 8012c34:	4b07      	ldr	r3, [pc, #28]	@ (8012c54 <SetESPIndicator+0x2c>)
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d006      	beq.n	8012c4a <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012c3c:	f7ff fe62 	bl	8012904 <Calculate_LED_ON>
 8012c40:	0003      	movs	r3, r0
 8012c42:	001a      	movs	r2, r3
 8012c44:	2380      	movs	r3, #128	@ 0x80
 8012c46:	05db      	lsls	r3, r3, #23
 8012c48:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8012c4a:	46c0      	nop			@ (mov r8, r8)
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bd80      	pop	{r7, pc}
 8012c50:	20002101 	.word	0x20002101
 8012c54:	20002102 	.word	0x20002102

08012c58 <ResetESPIndicator>:
void ResetESPIndicator(){
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012c5c:	4b07      	ldr	r3, [pc, #28]	@ (8012c7c <ResetESPIndicator+0x24>)
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d103      	bne.n	8012c6c <ResetESPIndicator+0x14>
 8012c64:	4b06      	ldr	r3, [pc, #24]	@ (8012c80 <ResetESPIndicator+0x28>)
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d004      	beq.n	8012c76 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 8012c6c:	2380      	movs	r3, #128	@ 0x80
 8012c6e:	05db      	lsls	r3, r3, #23
 8012c70:	22fa      	movs	r2, #250	@ 0xfa
 8012c72:	0112      	lsls	r2, r2, #4
 8012c74:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8012c76:	46c0      	nop			@ (mov r8, r8)
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}
 8012c7c:	20002101 	.word	0x20002101
 8012c80:	20002102 	.word	0x20002102

08012c84 <SetPMIndicator>:

void SetPMIndicator() {
 8012c84:	b580      	push	{r7, lr}
 8012c86:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012c88:	4b0f      	ldr	r3, [pc, #60]	@ (8012cc8 <SetPMIndicator+0x44>)
 8012c8a:	781b      	ldrb	r3, [r3, #0]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d103      	bne.n	8012c98 <SetPMIndicator+0x14>
 8012c90:	4b0e      	ldr	r3, [pc, #56]	@ (8012ccc <SetPMIndicator+0x48>)
 8012c92:	781b      	ldrb	r3, [r3, #0]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d014      	beq.n	8012cc2 <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 8012c98:	f7ff fe34 	bl	8012904 <Calculate_LED_ON>
 8012c9c:	0003      	movs	r3, r0
 8012c9e:	001a      	movs	r2, r3
 8012ca0:	2380      	movs	r3, #128	@ 0x80
 8012ca2:	05db      	lsls	r3, r3, #23
 8012ca4:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 8012ca6:	f7ff fe2d 	bl	8012904 <Calculate_LED_ON>
 8012caa:	0003      	movs	r3, r0
 8012cac:	001a      	movs	r2, r3
 8012cae:	2380      	movs	r3, #128	@ 0x80
 8012cb0:	05db      	lsls	r3, r3, #23
 8012cb2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 8012cb4:	f7ff fe26 	bl	8012904 <Calculate_LED_ON>
 8012cb8:	0003      	movs	r3, r0
 8012cba:	001a      	movs	r2, r3
 8012cbc:	2380      	movs	r3, #128	@ 0x80
 8012cbe:	05db      	lsls	r3, r3, #23
 8012cc0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012cc2:	46c0      	nop			@ (mov r8, r8)
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}
 8012cc8:	20002101 	.word	0x20002101
 8012ccc:	20002102 	.word	0x20002102

08012cd0 <ResetPMIndicator>:

void ResetPMIndicator() {
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8012cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8012d08 <ResetPMIndicator+0x38>)
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d103      	bne.n	8012ce4 <ResetPMIndicator+0x14>
 8012cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8012d0c <ResetPMIndicator+0x3c>)
 8012cde:	781b      	ldrb	r3, [r3, #0]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d00e      	beq.n	8012d02 <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 8012ce4:	2380      	movs	r3, #128	@ 0x80
 8012ce6:	05db      	lsls	r3, r3, #23
 8012ce8:	22fa      	movs	r2, #250	@ 0xfa
 8012cea:	0112      	lsls	r2, r2, #4
 8012cec:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 8012cee:	2380      	movs	r3, #128	@ 0x80
 8012cf0:	05db      	lsls	r3, r3, #23
 8012cf2:	22fa      	movs	r2, #250	@ 0xfa
 8012cf4:	0112      	lsls	r2, r2, #4
 8012cf6:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012cf8:	2380      	movs	r3, #128	@ 0x80
 8012cfa:	05db      	lsls	r3, r3, #23
 8012cfc:	22fa      	movs	r2, #250	@ 0xfa
 8012cfe:	0112      	lsls	r2, r2, #4
 8012d00:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8012d02:	46c0      	nop			@ (mov r8, r8)
 8012d04:	46bd      	mov	sp, r7
 8012d06:	bd80      	pop	{r7, pc}
 8012d08:	20002101 	.word	0x20002101
 8012d0c:	20002102 	.word	0x20002102

08012d10 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 8012d10:	b580      	push	{r7, lr}
 8012d12:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 8012d14:	23fa      	movs	r3, #250	@ 0xfa
 8012d16:	011a      	lsls	r2, r3, #4
 8012d18:	23fa      	movs	r3, #250	@ 0xfa
 8012d1a:	0119      	lsls	r1, r3, #4
 8012d1c:	23fa      	movs	r3, #250	@ 0xfa
 8012d1e:	011b      	lsls	r3, r3, #4
 8012d20:	0018      	movs	r0, r3
 8012d22:	f7ff fe37 	bl	8012994 <SetStatusLED>
  SetDBLED(false,false,false);
 8012d26:	2200      	movs	r2, #0
 8012d28:	2100      	movs	r1, #0
 8012d2a:	2000      	movs	r0, #0
 8012d2c:	f7ff fe66 	bl	80129fc <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 8012d30:	23fa      	movs	r3, #250	@ 0xfa
 8012d32:	011a      	lsls	r2, r3, #4
 8012d34:	23fa      	movs	r3, #250	@ 0xfa
 8012d36:	0119      	lsls	r1, r3, #4
 8012d38:	23fa      	movs	r3, #250	@ 0xfa
 8012d3a:	011b      	lsls	r3, r3, #4
 8012d3c:	0018      	movs	r0, r3
 8012d3e:	f7ff fea7 	bl	8012a90 <SetVocLED>
return;
 8012d42:	46c0      	nop			@ (mov r8, r8)
}
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}

08012d48 <SetAllREDLED>:

void SetAllREDLED() {
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	af00      	add	r7, sp, #0
// Fire all LEDs to red independent of usertoggle or power status and reboot
  TIM2 -> CCR1 = LED_ON;
 8012d4c:	2380      	movs	r3, #128	@ 0x80
 8012d4e:	05db      	lsls	r3, r3, #23
 8012d50:	4a1a      	ldr	r2, [pc, #104]	@ (8012dbc <SetAllREDLED+0x74>)
 8012d52:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012d54:	2380      	movs	r3, #128	@ 0x80
 8012d56:	05db      	lsls	r3, r3, #23
 8012d58:	22fa      	movs	r2, #250	@ 0xfa
 8012d5a:	0112      	lsls	r2, r2, #4
 8012d5c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012d5e:	2380      	movs	r3, #128	@ 0x80
 8012d60:	05db      	lsls	r3, r3, #23
 8012d62:	22fa      	movs	r2, #250	@ 0xfa
 8012d64:	0112      	lsls	r2, r2, #4
 8012d66:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = LED_ON;
 8012d68:	4b15      	ldr	r3, [pc, #84]	@ (8012dc0 <SetAllREDLED+0x78>)
 8012d6a:	4a14      	ldr	r2, [pc, #80]	@ (8012dbc <SetAllREDLED+0x74>)
 8012d6c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012d6e:	4b14      	ldr	r3, [pc, #80]	@ (8012dc0 <SetAllREDLED+0x78>)
 8012d70:	22fa      	movs	r2, #250	@ 0xfa
 8012d72:	0112      	lsls	r2, r2, #4
 8012d74:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012d76:	4b12      	ldr	r3, [pc, #72]	@ (8012dc0 <SetAllREDLED+0x78>)
 8012d78:	22fa      	movs	r2, #250	@ 0xfa
 8012d7a:	0112      	lsls	r2, r2, #4
 8012d7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012d7e:	4b11      	ldr	r3, [pc, #68]	@ (8012dc4 <SetAllREDLED+0x7c>)
 8012d80:	2200      	movs	r2, #0
 8012d82:	2101      	movs	r1, #1
 8012d84:	0018      	movs	r0, r3
 8012d86:	f003 f96e 	bl	8016066 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012d8a:	2380      	movs	r3, #128	@ 0x80
 8012d8c:	005b      	lsls	r3, r3, #1
 8012d8e:	480d      	ldr	r0, [pc, #52]	@ (8012dc4 <SetAllREDLED+0x7c>)
 8012d90:	2201      	movs	r2, #1
 8012d92:	0019      	movs	r1, r3
 8012d94:	f003 f967 	bl	8016066 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012d98:	2380      	movs	r3, #128	@ 0x80
 8012d9a:	009b      	lsls	r3, r3, #2
 8012d9c:	4809      	ldr	r0, [pc, #36]	@ (8012dc4 <SetAllREDLED+0x7c>)
 8012d9e:	2201      	movs	r2, #1
 8012da0:	0019      	movs	r1, r3
 8012da2:	f003 f960 	bl	8016066 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8012da6:	23fa      	movs	r3, #250	@ 0xfa
 8012da8:	005b      	lsls	r3, r3, #1
 8012daa:	0018      	movs	r0, r3
 8012dac:	f001 fed4 	bl	8014b58 <HAL_Delay>
  SetLEDsOff();
 8012db0:	f7ff ffae 	bl	8012d10 <SetLEDsOff>
}
 8012db4:	46c0      	nop			@ (mov r8, r8)
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
 8012dba:	46c0      	nop			@ (mov r8, r8)
 8012dbc:	00000bb8 	.word	0x00000bb8
 8012dc0:	40000400 	.word	0x40000400
 8012dc4:	50000400 	.word	0x50000400

08012dc8 <WalkAllRedLED>:

void WalkAllRedLED() {
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	af00      	add	r7, sp, #0
// Fire all LEDs sequential to red independent of usertoggle or power status and reboot
  SetLEDsOff();
 8012dcc:	f7ff ffa0 	bl	8012d10 <SetLEDsOff>
  HAL_Delay(250);
 8012dd0:	20fa      	movs	r0, #250	@ 0xfa
 8012dd2:	f001 fec1 	bl	8014b58 <HAL_Delay>
  TIM2 -> CCR1 = LED_ON;
 8012dd6:	2380      	movs	r3, #128	@ 0x80
 8012dd8:	05db      	lsls	r3, r3, #23
 8012dda:	4a23      	ldr	r2, [pc, #140]	@ (8012e68 <WalkAllRedLED+0xa0>)
 8012ddc:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = LED_OFF;
 8012dde:	2380      	movs	r3, #128	@ 0x80
 8012de0:	05db      	lsls	r3, r3, #23
 8012de2:	22fa      	movs	r2, #250	@ 0xfa
 8012de4:	0112      	lsls	r2, r2, #4
 8012de6:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = LED_OFF;
 8012de8:	2380      	movs	r3, #128	@ 0x80
 8012dea:	05db      	lsls	r3, r3, #23
 8012dec:	22fa      	movs	r2, #250	@ 0xfa
 8012dee:	0112      	lsls	r2, r2, #4
 8012df0:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_Delay(250);
 8012df2:	20fa      	movs	r0, #250	@ 0xfa
 8012df4:	f001 feb0 	bl	8014b58 <HAL_Delay>
  TIM2 -> CCR1 = LED_OFF;
 8012df8:	2380      	movs	r3, #128	@ 0x80
 8012dfa:	05db      	lsls	r3, r3, #23
 8012dfc:	22fa      	movs	r2, #250	@ 0xfa
 8012dfe:	0112      	lsls	r2, r2, #4
 8012e00:	635a      	str	r2, [r3, #52]	@ 0x34

  TIM3 -> CCR1 = LED_ON;
 8012e02:	4b1a      	ldr	r3, [pc, #104]	@ (8012e6c <WalkAllRedLED+0xa4>)
 8012e04:	4a18      	ldr	r2, [pc, #96]	@ (8012e68 <WalkAllRedLED+0xa0>)
 8012e06:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = LED_OFF;
 8012e08:	4b18      	ldr	r3, [pc, #96]	@ (8012e6c <WalkAllRedLED+0xa4>)
 8012e0a:	22fa      	movs	r2, #250	@ 0xfa
 8012e0c:	0112      	lsls	r2, r2, #4
 8012e0e:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = LED_OFF;
 8012e10:	4b16      	ldr	r3, [pc, #88]	@ (8012e6c <WalkAllRedLED+0xa4>)
 8012e12:	22fa      	movs	r2, #250	@ 0xfa
 8012e14:	0112      	lsls	r2, r2, #4
 8012e16:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(250);
 8012e18:	20fa      	movs	r0, #250	@ 0xfa
 8012e1a:	f001 fe9d 	bl	8014b58 <HAL_Delay>
  TIM3 -> CCR1 = LED_OFF;
 8012e1e:	4b13      	ldr	r3, [pc, #76]	@ (8012e6c <WalkAllRedLED+0xa4>)
 8012e20:	22fa      	movs	r2, #250	@ 0xfa
 8012e22:	0112      	lsls	r2, r2, #4
 8012e24:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false); //red on
 8012e26:	4b12      	ldr	r3, [pc, #72]	@ (8012e70 <WalkAllRedLED+0xa8>)
 8012e28:	2200      	movs	r2, #0
 8012e2a:	2101      	movs	r1, #1
 8012e2c:	0018      	movs	r0, r3
 8012e2e:	f003 f91a 	bl	8016066 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012e32:	2380      	movs	r3, #128	@ 0x80
 8012e34:	005b      	lsls	r3, r3, #1
 8012e36:	480e      	ldr	r0, [pc, #56]	@ (8012e70 <WalkAllRedLED+0xa8>)
 8012e38:	2201      	movs	r2, #1
 8012e3a:	0019      	movs	r1, r3
 8012e3c:	f003 f913 	bl	8016066 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);
 8012e40:	2380      	movs	r3, #128	@ 0x80
 8012e42:	009b      	lsls	r3, r3, #2
 8012e44:	480a      	ldr	r0, [pc, #40]	@ (8012e70 <WalkAllRedLED+0xa8>)
 8012e46:	2201      	movs	r2, #1
 8012e48:	0019      	movs	r1, r3
 8012e4a:	f003 f90c 	bl	8016066 <HAL_GPIO_WritePin>
  HAL_Delay(250);
 8012e4e:	20fa      	movs	r0, #250	@ 0xfa
 8012e50:	f001 fe82 	bl	8014b58 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true); //red off
 8012e54:	4b06      	ldr	r3, [pc, #24]	@ (8012e70 <WalkAllRedLED+0xa8>)
 8012e56:	2201      	movs	r2, #1
 8012e58:	2101      	movs	r1, #1
 8012e5a:	0018      	movs	r0, r3
 8012e5c:	f003 f903 	bl	8016066 <HAL_GPIO_WritePin>
}
 8012e60:	46c0      	nop			@ (mov r8, r8)
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bd80      	pop	{r7, pc}
 8012e66:	46c0      	nop			@ (mov r8, r8)
 8012e68:	00000bb8 	.word	0x00000bb8
 8012e6c:	40000400 	.word	0x40000400
 8012e70:	50000400 	.word	0x50000400

08012e74 <SetAllBlueLED>:

void SetAllBlueLED() {
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b082      	sub	sp, #8
 8012e78:	af00      	add	r7, sp, #0
// Fire all LEDs to blue indicating barometric sensor in error independent of usertoggle or power status and reboot
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012e7a:	1dfb      	adds	r3, r7, #7
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	701a      	strb	r2, [r3, #0]
 8012e80:	e04b      	b.n	8012f1a <SetAllBlueLED+0xa6>
    TIM2 -> CCR1 = LED_OFF;
 8012e82:	2380      	movs	r3, #128	@ 0x80
 8012e84:	05db      	lsls	r3, r3, #23
 8012e86:	22fa      	movs	r2, #250	@ 0xfa
 8012e88:	0112      	lsls	r2, r2, #4
 8012e8a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 8012e8c:	2380      	movs	r3, #128	@ 0x80
 8012e8e:	05db      	lsls	r3, r3, #23
 8012e90:	22fa      	movs	r2, #250	@ 0xfa
 8012e92:	0112      	lsls	r2, r2, #4
 8012e94:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = LED_ON;
 8012e96:	2380      	movs	r3, #128	@ 0x80
 8012e98:	05db      	lsls	r3, r3, #23
 8012e9a:	4a24      	ldr	r2, [pc, #144]	@ (8012f2c <SetAllBlueLED+0xb8>)
 8012e9c:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR1 = LED_OFF;
 8012e9e:	4b24      	ldr	r3, [pc, #144]	@ (8012f30 <SetAllBlueLED+0xbc>)
 8012ea0:	22fa      	movs	r2, #250	@ 0xfa
 8012ea2:	0112      	lsls	r2, r2, #4
 8012ea4:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = LED_OFF;
 8012ea6:	4b22      	ldr	r3, [pc, #136]	@ (8012f30 <SetAllBlueLED+0xbc>)
 8012ea8:	22fa      	movs	r2, #250	@ 0xfa
 8012eaa:	0112      	lsls	r2, r2, #4
 8012eac:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = LED_ON;
 8012eae:	4b20      	ldr	r3, [pc, #128]	@ (8012f30 <SetAllBlueLED+0xbc>)
 8012eb0:	4a1e      	ldr	r2, [pc, #120]	@ (8012f2c <SetAllBlueLED+0xb8>)
 8012eb2:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, true);   //red off
 8012eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8012f34 <SetAllBlueLED+0xc0>)
 8012eb6:	2201      	movs	r2, #1
 8012eb8:	2101      	movs	r1, #1
 8012eba:	0018      	movs	r0, r3
 8012ebc:	f003 f8d3 	bl	8016066 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, true);
 8012ec0:	2380      	movs	r3, #128	@ 0x80
 8012ec2:	005b      	lsls	r3, r3, #1
 8012ec4:	481b      	ldr	r0, [pc, #108]	@ (8012f34 <SetAllBlueLED+0xc0>)
 8012ec6:	2201      	movs	r2, #1
 8012ec8:	0019      	movs	r1, r3
 8012eca:	f003 f8cc 	bl	8016066 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, false);  // blue on
 8012ece:	2380      	movs	r3, #128	@ 0x80
 8012ed0:	009b      	lsls	r3, r3, #2
 8012ed2:	4818      	ldr	r0, [pc, #96]	@ (8012f34 <SetAllBlueLED+0xc0>)
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	0019      	movs	r1, r3
 8012ed8:	f003 f8c5 	bl	8016066 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8012edc:	23fa      	movs	r3, #250	@ 0xfa
 8012ede:	009b      	lsls	r3, r3, #2
 8012ee0:	0018      	movs	r0, r3
 8012ee2:	f001 fe39 	bl	8014b58 <HAL_Delay>
    TIM2 -> CCR4 = LED_OFF;
 8012ee6:	2380      	movs	r3, #128	@ 0x80
 8012ee8:	05db      	lsls	r3, r3, #23
 8012eea:	22fa      	movs	r2, #250	@ 0xfa
 8012eec:	0112      	lsls	r2, r2, #4
 8012eee:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3 -> CCR3 = LED_OFF;
 8012ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8012f30 <SetAllBlueLED+0xbc>)
 8012ef2:	22fa      	movs	r2, #250	@ 0xfa
 8012ef4:	0112      	lsls	r2, r2, #4
 8012ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, true);  // blue off
 8012ef8:	2380      	movs	r3, #128	@ 0x80
 8012efa:	009b      	lsls	r3, r3, #2
 8012efc:	480d      	ldr	r0, [pc, #52]	@ (8012f34 <SetAllBlueLED+0xc0>)
 8012efe:	2201      	movs	r2, #1
 8012f00:	0019      	movs	r1, r3
 8012f02:	f003 f8b0 	bl	8016066 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8012f06:	23fa      	movs	r3, #250	@ 0xfa
 8012f08:	005b      	lsls	r3, r3, #1
 8012f0a:	0018      	movs	r0, r3
 8012f0c:	f001 fe24 	bl	8014b58 <HAL_Delay>
  for (uint8_t bl = 0; bl < 3; bl++) {
 8012f10:	1dfb      	adds	r3, r7, #7
 8012f12:	781a      	ldrb	r2, [r3, #0]
 8012f14:	1dfb      	adds	r3, r7, #7
 8012f16:	3201      	adds	r2, #1
 8012f18:	701a      	strb	r2, [r3, #0]
 8012f1a:	1dfb      	adds	r3, r7, #7
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	2b02      	cmp	r3, #2
 8012f20:	d9af      	bls.n	8012e82 <SetAllBlueLED+0xe>
  }
}
 8012f22:	46c0      	nop			@ (mov r8, r8)
 8012f24:	46c0      	nop			@ (mov r8, r8)
 8012f26:	46bd      	mov	sp, r7
 8012f28:	b002      	add	sp, #8
 8012f2a:	bd80      	pop	{r7, pc}
 8012f2c:	00000bb8 	.word	0x00000bb8
 8012f30:	40000400 	.word	0x40000400
 8012f34:	50000400 	.word	0x50000400

08012f38 <SetVOCindicator>:

void SetVOCindicator(uint16_t VOCi) {
 8012f38:	b5b0      	push	{r4, r5, r7, lr}
 8012f3a:	b082      	sub	sp, #8
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	0002      	movs	r2, r0
 8012f40:	1dbb      	adds	r3, r7, #6
 8012f42:	801a      	strh	r2, [r3, #0]
//  if(*vocIndex > 0 && *vocIndex <= 100){
  static uint16_t Red;
  static uint16_t Blue;
  static uint16_t Green;
  static uint16_t TimeValue = 4000;
  if(VOCi > 0 && VOCi <= 100){
 8012f44:	1dbb      	adds	r3, r7, #6
 8012f46:	881b      	ldrh	r3, [r3, #0]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d05a      	beq.n	8013002 <SetVOCindicator+0xca>
 8012f4c:	1dbb      	adds	r3, r7, #6
 8012f4e:	881b      	ldrh	r3, [r3, #0]
 8012f50:	2b64      	cmp	r3, #100	@ 0x64
 8012f52:	d856      	bhi.n	8013002 <SetVOCindicator+0xca>
    Green = (1.0-(VOCi/100.0))*TimeValue;
 8012f54:	1dbb      	adds	r3, r7, #6
 8012f56:	881b      	ldrh	r3, [r3, #0]
 8012f58:	0018      	movs	r0, r3
 8012f5a:	f7f0 fc49 	bl	80037f0 <__aeabi_i2d>
 8012f5e:	2200      	movs	r2, #0
 8012f60:	4b5f      	ldr	r3, [pc, #380]	@ (80130e0 <SetVOCindicator+0x1a8>)
 8012f62:	f7ef f8bd 	bl	80020e0 <__aeabi_ddiv>
 8012f66:	0002      	movs	r2, r0
 8012f68:	000b      	movs	r3, r1
 8012f6a:	2000      	movs	r0, #0
 8012f6c:	495d      	ldr	r1, [pc, #372]	@ (80130e4 <SetVOCindicator+0x1ac>)
 8012f6e:	f7ef ffd7 	bl	8002f20 <__aeabi_dsub>
 8012f72:	0002      	movs	r2, r0
 8012f74:	000b      	movs	r3, r1
 8012f76:	0014      	movs	r4, r2
 8012f78:	001d      	movs	r5, r3
 8012f7a:	4b5b      	ldr	r3, [pc, #364]	@ (80130e8 <SetVOCindicator+0x1b0>)
 8012f7c:	881b      	ldrh	r3, [r3, #0]
 8012f7e:	0018      	movs	r0, r3
 8012f80:	f7f0 fc36 	bl	80037f0 <__aeabi_i2d>
 8012f84:	0002      	movs	r2, r0
 8012f86:	000b      	movs	r3, r1
 8012f88:	0020      	movs	r0, r4
 8012f8a:	0029      	movs	r1, r5
 8012f8c:	f7ef fce2 	bl	8002954 <__aeabi_dmul>
 8012f90:	0002      	movs	r2, r0
 8012f92:	000b      	movs	r3, r1
 8012f94:	0010      	movs	r0, r2
 8012f96:	0019      	movs	r1, r3
 8012f98:	f7ed fb58 	bl	800064c <__aeabi_d2uiz>
 8012f9c:	0003      	movs	r3, r0
 8012f9e:	b29a      	uxth	r2, r3
 8012fa0:	4b52      	ldr	r3, [pc, #328]	@ (80130ec <SetVOCindicator+0x1b4>)
 8012fa2:	801a      	strh	r2, [r3, #0]
    Blue = (VOCi/100.0)*TimeValue;
 8012fa4:	1dbb      	adds	r3, r7, #6
 8012fa6:	881b      	ldrh	r3, [r3, #0]
 8012fa8:	0018      	movs	r0, r3
 8012faa:	f7f0 fc21 	bl	80037f0 <__aeabi_i2d>
 8012fae:	2200      	movs	r2, #0
 8012fb0:	4b4b      	ldr	r3, [pc, #300]	@ (80130e0 <SetVOCindicator+0x1a8>)
 8012fb2:	f7ef f895 	bl	80020e0 <__aeabi_ddiv>
 8012fb6:	0002      	movs	r2, r0
 8012fb8:	000b      	movs	r3, r1
 8012fba:	0014      	movs	r4, r2
 8012fbc:	001d      	movs	r5, r3
 8012fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80130e8 <SetVOCindicator+0x1b0>)
 8012fc0:	881b      	ldrh	r3, [r3, #0]
 8012fc2:	0018      	movs	r0, r3
 8012fc4:	f7f0 fc14 	bl	80037f0 <__aeabi_i2d>
 8012fc8:	0002      	movs	r2, r0
 8012fca:	000b      	movs	r3, r1
 8012fcc:	0020      	movs	r0, r4
 8012fce:	0029      	movs	r1, r5
 8012fd0:	f7ef fcc0 	bl	8002954 <__aeabi_dmul>
 8012fd4:	0002      	movs	r2, r0
 8012fd6:	000b      	movs	r3, r1
 8012fd8:	0010      	movs	r0, r2
 8012fda:	0019      	movs	r1, r3
 8012fdc:	f7ed fb36 	bl	800064c <__aeabi_d2uiz>
 8012fe0:	0003      	movs	r3, r0
 8012fe2:	b29a      	uxth	r2, r3
 8012fe4:	4b42      	ldr	r3, [pc, #264]	@ (80130f0 <SetVOCindicator+0x1b8>)
 8012fe6:	801a      	strh	r2, [r3, #0]
    Red = TimeValue;
 8012fe8:	4b3f      	ldr	r3, [pc, #252]	@ (80130e8 <SetVOCindicator+0x1b0>)
 8012fea:	881a      	ldrh	r2, [r3, #0]
 8012fec:	4b41      	ldr	r3, [pc, #260]	@ (80130f4 <SetVOCindicator+0x1bc>)
 8012fee:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 8012ff0:	4b40      	ldr	r3, [pc, #256]	@ (80130f4 <SetVOCindicator+0x1bc>)
 8012ff2:	8818      	ldrh	r0, [r3, #0]
 8012ff4:	4b3d      	ldr	r3, [pc, #244]	@ (80130ec <SetVOCindicator+0x1b4>)
 8012ff6:	8819      	ldrh	r1, [r3, #0]
 8012ff8:	4b3d      	ldr	r3, [pc, #244]	@ (80130f0 <SetVOCindicator+0x1b8>)
 8012ffa:	881b      	ldrh	r3, [r3, #0]
 8012ffc:	001a      	movs	r2, r3
 8012ffe:	f7ff fd47 	bl	8012a90 <SetVocLED>
  }
  if(VOCi > 100){
 8013002:	1dbb      	adds	r3, r7, #6
 8013004:	881b      	ldrh	r3, [r3, #0]
 8013006:	2b64      	cmp	r3, #100	@ 0x64
 8013008:	d966      	bls.n	80130d8 <SetVOCindicator+0x1a0>
    Green = (((VOCi-100.0)/400.0))*TimeValue;
 801300a:	1dbb      	adds	r3, r7, #6
 801300c:	881b      	ldrh	r3, [r3, #0]
 801300e:	0018      	movs	r0, r3
 8013010:	f7f0 fbee 	bl	80037f0 <__aeabi_i2d>
 8013014:	2200      	movs	r2, #0
 8013016:	4b32      	ldr	r3, [pc, #200]	@ (80130e0 <SetVOCindicator+0x1a8>)
 8013018:	f7ef ff82 	bl	8002f20 <__aeabi_dsub>
 801301c:	0002      	movs	r2, r0
 801301e:	000b      	movs	r3, r1
 8013020:	0010      	movs	r0, r2
 8013022:	0019      	movs	r1, r3
 8013024:	2200      	movs	r2, #0
 8013026:	4b34      	ldr	r3, [pc, #208]	@ (80130f8 <SetVOCindicator+0x1c0>)
 8013028:	f7ef f85a 	bl	80020e0 <__aeabi_ddiv>
 801302c:	0002      	movs	r2, r0
 801302e:	000b      	movs	r3, r1
 8013030:	0014      	movs	r4, r2
 8013032:	001d      	movs	r5, r3
 8013034:	4b2c      	ldr	r3, [pc, #176]	@ (80130e8 <SetVOCindicator+0x1b0>)
 8013036:	881b      	ldrh	r3, [r3, #0]
 8013038:	0018      	movs	r0, r3
 801303a:	f7f0 fbd9 	bl	80037f0 <__aeabi_i2d>
 801303e:	0002      	movs	r2, r0
 8013040:	000b      	movs	r3, r1
 8013042:	0020      	movs	r0, r4
 8013044:	0029      	movs	r1, r5
 8013046:	f7ef fc85 	bl	8002954 <__aeabi_dmul>
 801304a:	0002      	movs	r2, r0
 801304c:	000b      	movs	r3, r1
 801304e:	0010      	movs	r0, r2
 8013050:	0019      	movs	r1, r3
 8013052:	f7ed fafb 	bl	800064c <__aeabi_d2uiz>
 8013056:	0003      	movs	r3, r0
 8013058:	b29a      	uxth	r2, r3
 801305a:	4b24      	ldr	r3, [pc, #144]	@ (80130ec <SetVOCindicator+0x1b4>)
 801305c:	801a      	strh	r2, [r3, #0]
    Red = (1.0-((VOCi-100.0)/400.0))*TimeValue;
 801305e:	1dbb      	adds	r3, r7, #6
 8013060:	881b      	ldrh	r3, [r3, #0]
 8013062:	0018      	movs	r0, r3
 8013064:	f7f0 fbc4 	bl	80037f0 <__aeabi_i2d>
 8013068:	2200      	movs	r2, #0
 801306a:	4b1d      	ldr	r3, [pc, #116]	@ (80130e0 <SetVOCindicator+0x1a8>)
 801306c:	f7ef ff58 	bl	8002f20 <__aeabi_dsub>
 8013070:	0002      	movs	r2, r0
 8013072:	000b      	movs	r3, r1
 8013074:	0010      	movs	r0, r2
 8013076:	0019      	movs	r1, r3
 8013078:	2200      	movs	r2, #0
 801307a:	4b1f      	ldr	r3, [pc, #124]	@ (80130f8 <SetVOCindicator+0x1c0>)
 801307c:	f7ef f830 	bl	80020e0 <__aeabi_ddiv>
 8013080:	0002      	movs	r2, r0
 8013082:	000b      	movs	r3, r1
 8013084:	2000      	movs	r0, #0
 8013086:	4917      	ldr	r1, [pc, #92]	@ (80130e4 <SetVOCindicator+0x1ac>)
 8013088:	f7ef ff4a 	bl	8002f20 <__aeabi_dsub>
 801308c:	0002      	movs	r2, r0
 801308e:	000b      	movs	r3, r1
 8013090:	0014      	movs	r4, r2
 8013092:	001d      	movs	r5, r3
 8013094:	4b14      	ldr	r3, [pc, #80]	@ (80130e8 <SetVOCindicator+0x1b0>)
 8013096:	881b      	ldrh	r3, [r3, #0]
 8013098:	0018      	movs	r0, r3
 801309a:	f7f0 fba9 	bl	80037f0 <__aeabi_i2d>
 801309e:	0002      	movs	r2, r0
 80130a0:	000b      	movs	r3, r1
 80130a2:	0020      	movs	r0, r4
 80130a4:	0029      	movs	r1, r5
 80130a6:	f7ef fc55 	bl	8002954 <__aeabi_dmul>
 80130aa:	0002      	movs	r2, r0
 80130ac:	000b      	movs	r3, r1
 80130ae:	0010      	movs	r0, r2
 80130b0:	0019      	movs	r1, r3
 80130b2:	f7ed facb 	bl	800064c <__aeabi_d2uiz>
 80130b6:	0003      	movs	r3, r0
 80130b8:	b29a      	uxth	r2, r3
 80130ba:	4b0e      	ldr	r3, [pc, #56]	@ (80130f4 <SetVOCindicator+0x1bc>)
 80130bc:	801a      	strh	r2, [r3, #0]
    Blue = TimeValue;
 80130be:	4b0a      	ldr	r3, [pc, #40]	@ (80130e8 <SetVOCindicator+0x1b0>)
 80130c0:	881a      	ldrh	r2, [r3, #0]
 80130c2:	4b0b      	ldr	r3, [pc, #44]	@ (80130f0 <SetVOCindicator+0x1b8>)
 80130c4:	801a      	strh	r2, [r3, #0]
    SetVocLED(Red, Green, Blue);
 80130c6:	4b0b      	ldr	r3, [pc, #44]	@ (80130f4 <SetVOCindicator+0x1bc>)
 80130c8:	8818      	ldrh	r0, [r3, #0]
 80130ca:	4b08      	ldr	r3, [pc, #32]	@ (80130ec <SetVOCindicator+0x1b4>)
 80130cc:	8819      	ldrh	r1, [r3, #0]
 80130ce:	4b08      	ldr	r3, [pc, #32]	@ (80130f0 <SetVOCindicator+0x1b8>)
 80130d0:	881b      	ldrh	r3, [r3, #0]
 80130d2:	001a      	movs	r2, r3
 80130d4:	f7ff fcdc 	bl	8012a90 <SetVocLED>
  }

}
 80130d8:	46c0      	nop			@ (mov r8, r8)
 80130da:	46bd      	mov	sp, r7
 80130dc:	b002      	add	sp, #8
 80130de:	bdb0      	pop	{r4, r5, r7, pc}
 80130e0:	40590000 	.word	0x40590000
 80130e4:	3ff00000 	.word	0x3ff00000
 80130e8:	200000ea 	.word	0x200000ea
 80130ec:	20002116 	.word	0x20002116
 80130f0:	20002118 	.word	0x20002118
 80130f4:	2000211a 	.word	0x2000211a
 80130f8:	40790000 	.word	0x40790000

080130fc <powerCheck>:

Battery_Status powerCheck(){
 80130fc:	b590      	push	{r4, r7, lr}
 80130fe:	b083      	sub	sp, #12
 8013100:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 8013102:	f7f6 fd47 	bl	8009b94 <Check_USB_PowerOn>
 8013106:	0003      	movs	r3, r0
 8013108:	001a      	movs	r2, r3
 801310a:	2301      	movs	r3, #1
 801310c:	4053      	eors	r3, r2
 801310e:	b2db      	uxtb	r3, r3
 8013110:	2b00      	cmp	r3, #0
 8013112:	d005      	beq.n	8013120 <powerCheck+0x24>
    status = batteryChargeCheck();
 8013114:	1dfc      	adds	r4, r7, #7
 8013116:	f7ff fb93 	bl	8012840 <batteryChargeCheck>
 801311a:	0003      	movs	r3, r0
 801311c:	7023      	strb	r3, [r4, #0]
 801311e:	e002      	b.n	8013126 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 8013120:	1dfb      	adds	r3, r7, #7
 8013122:	2204      	movs	r2, #4
 8013124:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8013126:	1dfb      	adds	r3, r7, #7
 8013128:	781b      	ldrb	r3, [r3, #0]
}
 801312a:	0018      	movs	r0, r3
 801312c:	46bd      	mov	sp, r7
 801312e:	b003      	add	sp, #12
 8013130:	bd90      	pop	{r4, r7, pc}
	...

08013134 <powerDisplay>:

void powerDisplay(Battery_Status status){
 8013134:	b5b0      	push	{r4, r5, r7, lr}
 8013136:	b086      	sub	sp, #24
 8013138:	af04      	add	r7, sp, #16
 801313a:	0002      	movs	r2, r0
 801313c:	1dfb      	adds	r3, r7, #7
 801313e:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 8013140:	1dfb      	adds	r3, r7, #7
 8013142:	781b      	ldrb	r3, [r3, #0]
 8013144:	2b04      	cmp	r3, #4
 8013146:	d114      	bne.n	8013172 <powerDisplay+0x3e>
    Debug("USB power detected, LED's are okay, battery: %fV, solar %dmV", ReadBatteryVoltage(), ReadSolarVoltage());
 8013148:	f7f6 fc6e 	bl	8009a28 <ReadBatteryVoltage>
 801314c:	1c03      	adds	r3, r0, #0
 801314e:	1c18      	adds	r0, r3, #0
 8013150:	f7f0 fba0 	bl	8003894 <__aeabi_f2d>
 8013154:	0004      	movs	r4, r0
 8013156:	000d      	movs	r5, r1
 8013158:	f7f6 fcc8 	bl	8009aec <ReadSolarVoltage>
 801315c:	0003      	movs	r3, r0
 801315e:	0019      	movs	r1, r3
 8013160:	4a2a      	ldr	r2, [pc, #168]	@ (801320c <powerDisplay+0xd8>)
 8013162:	4b2b      	ldr	r3, [pc, #172]	@ (8013210 <powerDisplay+0xdc>)
 8013164:	9102      	str	r1, [sp, #8]
 8013166:	9400      	str	r4, [sp, #0]
 8013168:	9501      	str	r5, [sp, #4]
 801316a:	0019      	movs	r1, r3
 801316c:	2003      	movs	r0, #3
 801316e:	f000 ff71 	bl	8014054 <CreateLine>
  }
  if(status == BATTERY_FULL){
 8013172:	1dfb      	adds	r3, r7, #7
 8013174:	781b      	ldrb	r3, [r3, #0]
 8013176:	2b03      	cmp	r3, #3
 8013178:	d105      	bne.n	8013186 <powerDisplay+0x52>
    Debug("Battery fully charged");
 801317a:	4a26      	ldr	r2, [pc, #152]	@ (8013214 <powerDisplay+0xe0>)
 801317c:	4b24      	ldr	r3, [pc, #144]	@ (8013210 <powerDisplay+0xdc>)
 801317e:	0019      	movs	r1, r3
 8013180:	2003      	movs	r0, #3
 8013182:	f000 ff67 	bl	8014054 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8013186:	1dfb      	adds	r3, r7, #7
 8013188:	781b      	ldrb	r3, [r3, #0]
 801318a:	2b02      	cmp	r3, #2
 801318c:	d105      	bne.n	801319a <powerDisplay+0x66>
    Debug("Battery charge is doing well");
 801318e:	4a22      	ldr	r2, [pc, #136]	@ (8013218 <powerDisplay+0xe4>)
 8013190:	4b1f      	ldr	r3, [pc, #124]	@ (8013210 <powerDisplay+0xdc>)
 8013192:	0019      	movs	r1, r3
 8013194:	2003      	movs	r0, #3
 8013196:	f000 ff5d 	bl	8014054 <CreateLine>
  }
  if(status == BATTERY_LOW){
 801319a:	1dfb      	adds	r3, r7, #7
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	2b01      	cmp	r3, #1
 80131a0:	d105      	bne.n	80131ae <powerDisplay+0x7a>
    Debug("Battery is getting low");
 80131a2:	4a1e      	ldr	r2, [pc, #120]	@ (801321c <powerDisplay+0xe8>)
 80131a4:	4b1a      	ldr	r3, [pc, #104]	@ (8013210 <powerDisplay+0xdc>)
 80131a6:	0019      	movs	r1, r3
 80131a8:	2003      	movs	r0, #3
 80131aa:	f000 ff53 	bl	8014054 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 80131ae:	1dfb      	adds	r3, r7, #7
 80131b0:	781b      	ldrb	r3, [r3, #0]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d105      	bne.n	80131c2 <powerDisplay+0x8e>
    Debug("Battery is critical, stop processes");
 80131b6:	4a1a      	ldr	r2, [pc, #104]	@ (8013220 <powerDisplay+0xec>)
 80131b8:	4b15      	ldr	r3, [pc, #84]	@ (8013210 <powerDisplay+0xdc>)
 80131ba:	0019      	movs	r1, r3
 80131bc:	2003      	movs	r0, #3
 80131be:	f000 ff49 	bl	8014054 <CreateLine>
  }
  switch (Read_Charge_Status()) {
 80131c2:	f7f6 fd01 	bl	8009bc8 <Read_Charge_Status>
 80131c6:	0003      	movs	r3, r0
 80131c8:	2b02      	cmp	r3, #2
 80131ca:	d013      	beq.n	80131f4 <powerDisplay+0xc0>
 80131cc:	dc19      	bgt.n	8013202 <powerDisplay+0xce>
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d002      	beq.n	80131d8 <powerDisplay+0xa4>
 80131d2:	2b01      	cmp	r3, #1
 80131d4:	d007      	beq.n	80131e6 <powerDisplay+0xb2>
  case CHARGING_FULL:
    Debug("Battery full, charging off");
    break;
  }

}
 80131d6:	e014      	b.n	8013202 <powerDisplay+0xce>
    Debug("Battery charging off");
 80131d8:	4a12      	ldr	r2, [pc, #72]	@ (8013224 <powerDisplay+0xf0>)
 80131da:	4b0d      	ldr	r3, [pc, #52]	@ (8013210 <powerDisplay+0xdc>)
 80131dc:	0019      	movs	r1, r3
 80131de:	2003      	movs	r0, #3
 80131e0:	f000 ff38 	bl	8014054 <CreateLine>
    break;
 80131e4:	e00d      	b.n	8013202 <powerDisplay+0xce>
    Debug("Battery is charging");
 80131e6:	4a10      	ldr	r2, [pc, #64]	@ (8013228 <powerDisplay+0xf4>)
 80131e8:	4b09      	ldr	r3, [pc, #36]	@ (8013210 <powerDisplay+0xdc>)
 80131ea:	0019      	movs	r1, r3
 80131ec:	2003      	movs	r0, #3
 80131ee:	f000 ff31 	bl	8014054 <CreateLine>
    break;
 80131f2:	e006      	b.n	8013202 <powerDisplay+0xce>
    Debug("Battery full, charging off");
 80131f4:	4a0d      	ldr	r2, [pc, #52]	@ (801322c <powerDisplay+0xf8>)
 80131f6:	4b06      	ldr	r3, [pc, #24]	@ (8013210 <powerDisplay+0xdc>)
 80131f8:	0019      	movs	r1, r3
 80131fa:	2003      	movs	r0, #3
 80131fc:	f000 ff2a 	bl	8014054 <CreateLine>
    break;
 8013200:	46c0      	nop			@ (mov r8, r8)
}
 8013202:	46c0      	nop			@ (mov r8, r8)
 8013204:	46bd      	mov	sp, r7
 8013206:	b002      	add	sp, #8
 8013208:	bdb0      	pop	{r4, r5, r7, pc}
 801320a:	46c0      	nop			@ (mov r8, r8)
 801320c:	0802e080 	.word	0x0802e080
 8013210:	0802e0c0 	.word	0x0802e0c0
 8013214:	0802e0c4 	.word	0x0802e0c4
 8013218:	0802e0dc 	.word	0x0802e0dc
 801321c:	0802e0fc 	.word	0x0802e0fc
 8013220:	0802e114 	.word	0x0802e114
 8013224:	0802e138 	.word	0x0802e138
 8013228:	0802e150 	.word	0x0802e150
 801322c:	0802e164 	.word	0x0802e164

08013230 <configCheck>:

void configCheck(){
 8013230:	b590      	push	{r4, r7, lr}
 8013232:	b083      	sub	sp, #12
 8013234:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8013236:	f7f6 fd23 	bl	8009c80 <BootButton_Pressed>
 801323a:	1e03      	subs	r3, r0, #0
 801323c:	d007      	beq.n	801324e <configCheck+0x1e>
 801323e:	f7f6 fd31 	bl	8009ca4 <UserButton_Pressed>
 8013242:	1e03      	subs	r3, r0, #0
 8013244:	d003      	beq.n	801324e <configCheck+0x1e>
    configSet = true;
 8013246:	4bb5      	ldr	r3, [pc, #724]	@ (801351c <configCheck+0x2ec>)
 8013248:	2201      	movs	r2, #1
 801324a:	701a      	strb	r2, [r3, #0]
 801324c:	e00a      	b.n	8013264 <configCheck+0x34>
  }
  else{
    configSet = false;
 801324e:	4bb3      	ldr	r3, [pc, #716]	@ (801351c <configCheck+0x2ec>)
 8013250:	2200      	movs	r2, #0
 8013252:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8013254:	f001 fc76 	bl	8014b44 <HAL_GetTick>
 8013258:	0003      	movs	r3, r0
 801325a:	22fa      	movs	r2, #250	@ 0xfa
 801325c:	00d2      	lsls	r2, r2, #3
 801325e:	189a      	adds	r2, r3, r2
 8013260:	4baf      	ldr	r3, [pc, #700]	@ (8013520 <configCheck+0x2f0>)
 8013262:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8013264:	4bad      	ldr	r3, [pc, #692]	@ (801351c <configCheck+0x2ec>)
 8013266:	781b      	ldrb	r3, [r3, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d00d      	beq.n	8013288 <configCheck+0x58>
 801326c:	4bac      	ldr	r3, [pc, #688]	@ (8013520 <configCheck+0x2f0>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	0018      	movs	r0, r3
 8013272:	f000 fe99 	bl	8013fa8 <TimestampIsReached>
 8013276:	1e03      	subs	r3, r0, #0
 8013278:	d006      	beq.n	8013288 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 801327a:	f7f1 fddd 	bl	8004e38 <SetConfigMode>
    SetDBLED(true, true, true);
 801327e:	2201      	movs	r2, #1
 8013280:	2101      	movs	r1, #1
 8013282:	2001      	movs	r0, #1
 8013284:	f7ff fbba 	bl	80129fc <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !userbuttonHeld && !GetReconfigMode()){
 8013288:	f7f6 fcfa 	bl	8009c80 <BootButton_Pressed>
 801328c:	0003      	movs	r3, r0
 801328e:	001a      	movs	r2, r3
 8013290:	2301      	movs	r3, #1
 8013292:	4053      	eors	r3, r2
 8013294:	b2db      	uxtb	r3, r3
 8013296:	2b00      	cmp	r3, #0
 8013298:	d05a      	beq.n	8013350 <configCheck+0x120>
 801329a:	f7f6 fd03 	bl	8009ca4 <UserButton_Pressed>
 801329e:	1e03      	subs	r3, r0, #0
 80132a0:	d056      	beq.n	8013350 <configCheck+0x120>
 80132a2:	4ba0      	ldr	r3, [pc, #640]	@ (8013524 <configCheck+0x2f4>)
 80132a4:	781b      	ldrb	r3, [r3, #0]
 80132a6:	2201      	movs	r2, #1
 80132a8:	4053      	eors	r3, r2
 80132aa:	b2db      	uxtb	r3, r3
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d04f      	beq.n	8013350 <configCheck+0x120>
 80132b0:	f7f1 fde2 	bl	8004e78 <GetReconfigMode>
 80132b4:	0003      	movs	r3, r0
 80132b6:	001a      	movs	r2, r3
 80132b8:	2301      	movs	r3, #1
 80132ba:	4053      	eors	r3, r2
 80132bc:	b2db      	uxtb	r3, r3
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d046      	beq.n	8013350 <configCheck+0x120>
    SetLEDsOff();
 80132c2:	f7ff fd25 	bl	8012d10 <SetLEDsOff>
    SetVocLED(LED_ON, LED_ON, LED_ON);
 80132c6:	4a98      	ldr	r2, [pc, #608]	@ (8013528 <configCheck+0x2f8>)
 80132c8:	4997      	ldr	r1, [pc, #604]	@ (8013528 <configCheck+0x2f8>)
 80132ca:	4b97      	ldr	r3, [pc, #604]	@ (8013528 <configCheck+0x2f8>)
 80132cc:	0018      	movs	r0, r3
 80132ce:	f7ff fbdf 	bl	8012a90 <SetVocLED>
    HAL_Delay(1500);
 80132d2:	4b96      	ldr	r3, [pc, #600]	@ (801352c <configCheck+0x2fc>)
 80132d4:	0018      	movs	r0, r3
 80132d6:	f001 fc3f 	bl	8014b58 <HAL_Delay>
    SetVocLED(LED_OFF, LED_OFF, LED_OFF);
 80132da:	23fa      	movs	r3, #250	@ 0xfa
 80132dc:	011a      	lsls	r2, r3, #4
 80132de:	23fa      	movs	r3, #250	@ 0xfa
 80132e0:	0119      	lsls	r1, r3, #4
 80132e2:	23fa      	movs	r3, #250	@ 0xfa
 80132e4:	011b      	lsls	r3, r3, #4
 80132e6:	0018      	movs	r0, r3
 80132e8:	f7ff fbd2 	bl	8012a90 <SetVocLED>
    userToggle = !userToggle;
 80132ec:	4b90      	ldr	r3, [pc, #576]	@ (8013530 <configCheck+0x300>)
 80132ee:	781b      	ldrb	r3, [r3, #0]
 80132f0:	1e5a      	subs	r2, r3, #1
 80132f2:	4193      	sbcs	r3, r2
 80132f4:	b2db      	uxtb	r3, r3
 80132f6:	2201      	movs	r2, #1
 80132f8:	4053      	eors	r3, r2
 80132fa:	b2db      	uxtb	r3, r3
 80132fc:	1c1a      	adds	r2, r3, #0
 80132fe:	2301      	movs	r3, #1
 8013300:	4013      	ands	r3, r2
 8013302:	b2da      	uxtb	r2, r3
 8013304:	4b8a      	ldr	r3, [pc, #552]	@ (8013530 <configCheck+0x300>)
 8013306:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 8013308:	4b89      	ldr	r3, [pc, #548]	@ (8013530 <configCheck+0x300>)
 801330a:	781b      	ldrb	r3, [r3, #0]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d002      	beq.n	8013316 <configCheck+0xe6>
      EnabledConnectedDevices();
 8013310:	f7fa fdc6 	bl	800dea0 <EnabledConnectedDevices>
 8013314:	e004      	b.n	8013320 <configCheck+0xf0>
    }
    else {
      deviceTimeOut = HAL_GetTick();
 8013316:	f001 fc15 	bl	8014b44 <HAL_GetTick>
 801331a:	0002      	movs	r2, r0
 801331c:	4b85      	ldr	r3, [pc, #532]	@ (8013534 <configCheck+0x304>)
 801331e:	601a      	str	r2, [r3, #0]
    }
    Debug("userToggle flipped to %sabled", userToggle?"en": "dis");
 8013320:	4b83      	ldr	r3, [pc, #524]	@ (8013530 <configCheck+0x300>)
 8013322:	781b      	ldrb	r3, [r3, #0]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d001      	beq.n	801332c <configCheck+0xfc>
 8013328:	4b83      	ldr	r3, [pc, #524]	@ (8013538 <configCheck+0x308>)
 801332a:	e000      	b.n	801332e <configCheck+0xfe>
 801332c:	4b83      	ldr	r3, [pc, #524]	@ (801353c <configCheck+0x30c>)
 801332e:	4a84      	ldr	r2, [pc, #528]	@ (8013540 <configCheck+0x310>)
 8013330:	4984      	ldr	r1, [pc, #528]	@ (8013544 <configCheck+0x314>)
 8013332:	2003      	movs	r0, #3
 8013334:	f000 fe8e 	bl	8014054 <CreateLine>
    userbuttonHeld = true;
 8013338:	4b7a      	ldr	r3, [pc, #488]	@ (8013524 <configCheck+0x2f4>)
 801333a:	2201      	movs	r2, #1
 801333c:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 801333e:	f001 fc01 	bl	8014b44 <HAL_GetTick>
 8013342:	0003      	movs	r3, r0
 8013344:	22fa      	movs	r2, #250	@ 0xfa
 8013346:	00d2      	lsls	r2, r2, #3
 8013348:	189a      	adds	r2, r3, r2
 801334a:	4b7f      	ldr	r3, [pc, #508]	@ (8013548 <configCheck+0x318>)
 801334c:	601a      	str	r2, [r3, #0]
 801334e:	e002      	b.n	8013356 <configCheck+0x126>
  }
  else {
    userbuttonHeld = false;
 8013350:	4b74      	ldr	r3, [pc, #464]	@ (8013524 <configCheck+0x2f4>)
 8013352:	2200      	movs	r2, #0
 8013354:	701a      	strb	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && userbuttonHeld && TimestampIsReached(UserbuttonStamp)) {
 8013356:	f7f6 fc93 	bl	8009c80 <BootButton_Pressed>
 801335a:	0003      	movs	r3, r0
 801335c:	001a      	movs	r2, r3
 801335e:	2301      	movs	r3, #1
 8013360:	4053      	eors	r3, r2
 8013362:	b2db      	uxtb	r3, r3
 8013364:	2b00      	cmp	r3, #0
 8013366:	d100      	bne.n	801336a <configCheck+0x13a>
 8013368:	e0a4      	b.n	80134b4 <configCheck+0x284>
 801336a:	4b6e      	ldr	r3, [pc, #440]	@ (8013524 <configCheck+0x2f4>)
 801336c:	781b      	ldrb	r3, [r3, #0]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d100      	bne.n	8013374 <configCheck+0x144>
 8013372:	e09f      	b.n	80134b4 <configCheck+0x284>
 8013374:	4b74      	ldr	r3, [pc, #464]	@ (8013548 <configCheck+0x318>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	0018      	movs	r0, r3
 801337a:	f000 fe15 	bl	8013fa8 <TimestampIsReached>
 801337e:	1e03      	subs	r3, r0, #0
 8013380:	d100      	bne.n	8013384 <configCheck+0x154>
 8013382:	e097      	b.n	80134b4 <configCheck+0x284>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8013384:	f7fa f970 	bl	800d668 <GetPMSensorPresence>
 8013388:	1e03      	subs	r3, r0, #0
 801338a:	d100      	bne.n	801338e <configCheck+0x15e>
 801338c:	e082      	b.n	8013494 <configCheck+0x264>
 801338e:	4b6f      	ldr	r3, [pc, #444]	@ (801354c <configCheck+0x31c>)
 8013390:	791b      	ldrb	r3, [r3, #4]
 8013392:	2b34      	cmp	r3, #52	@ 0x34
 8013394:	d004      	beq.n	80133a0 <configCheck+0x170>
 8013396:	4b6d      	ldr	r3, [pc, #436]	@ (801354c <configCheck+0x31c>)
 8013398:	791b      	ldrb	r3, [r3, #4]
 801339a:	2b35      	cmp	r3, #53	@ 0x35
 801339c:	d000      	beq.n	80133a0 <configCheck+0x170>
 801339e:	e079      	b.n	8013494 <configCheck+0x264>
      uint16_t color;
      VOCNOx = !VOCNOx;
 80133a0:	4b6b      	ldr	r3, [pc, #428]	@ (8013550 <configCheck+0x320>)
 80133a2:	781b      	ldrb	r3, [r3, #0]
 80133a4:	1e5a      	subs	r2, r3, #1
 80133a6:	4193      	sbcs	r3, r2
 80133a8:	b2db      	uxtb	r3, r3
 80133aa:	2201      	movs	r2, #1
 80133ac:	4053      	eors	r3, r2
 80133ae:	b2db      	uxtb	r3, r3
 80133b0:	1c1a      	adds	r2, r3, #0
 80133b2:	2301      	movs	r3, #1
 80133b4:	4013      	ands	r3, r2
 80133b6:	b2da      	uxtb	r2, r3
 80133b8:	4b65      	ldr	r3, [pc, #404]	@ (8013550 <configCheck+0x320>)
 80133ba:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 80133bc:	4b64      	ldr	r3, [pc, #400]	@ (8013550 <configCheck+0x320>)
 80133be:	781b      	ldrb	r3, [r3, #0]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d005      	beq.n	80133d0 <configCheck+0x1a0>
 80133c4:	1dbc      	adds	r4, r7, #6
 80133c6:	f7ff fa9d 	bl	8012904 <Calculate_LED_ON>
 80133ca:	0003      	movs	r3, r0
 80133cc:	8023      	strh	r3, [r4, #0]
 80133ce:	e003      	b.n	80133d8 <configCheck+0x1a8>
        else color = 4000;
 80133d0:	1dbb      	adds	r3, r7, #6
 80133d2:	22fa      	movs	r2, #250	@ 0xfa
 80133d4:	0112      	lsls	r2, r2, #4
 80133d6:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 80133d8:	4b5d      	ldr	r3, [pc, #372]	@ (8013550 <configCheck+0x320>)
 80133da:	781b      	ldrb	r3, [r3, #0]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d001      	beq.n	80133e4 <configCheck+0x1b4>
 80133e0:	4b5c      	ldr	r3, [pc, #368]	@ (8013554 <configCheck+0x324>)
 80133e2:	e000      	b.n	80133e6 <configCheck+0x1b6>
 80133e4:	4b5c      	ldr	r3, [pc, #368]	@ (8013558 <configCheck+0x328>)
 80133e6:	4a5d      	ldr	r2, [pc, #372]	@ (801355c <configCheck+0x32c>)
 80133e8:	495d      	ldr	r1, [pc, #372]	@ (8013560 <configCheck+0x330>)
 80133ea:	2002      	movs	r0, #2
 80133ec:	f000 fe32 	bl	8014054 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 80133f0:	1d7b      	adds	r3, r7, #5
 80133f2:	2200      	movs	r2, #0
 80133f4:	701a      	strb	r2, [r3, #0]
 80133f6:	e028      	b.n	801344a <configCheck+0x21a>
        TIM3 -> CCR1 = Calculate_LED_ON();
 80133f8:	f7ff fa84 	bl	8012904 <Calculate_LED_ON>
 80133fc:	0003      	movs	r3, r0
 80133fe:	001a      	movs	r2, r3
 8013400:	4b58      	ldr	r3, [pc, #352]	@ (8013564 <configCheck+0x334>)
 8013402:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 8013404:	4b57      	ldr	r3, [pc, #348]	@ (8013564 <configCheck+0x334>)
 8013406:	1dba      	adds	r2, r7, #6
 8013408:	8812      	ldrh	r2, [r2, #0]
 801340a:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 801340c:	4b55      	ldr	r3, [pc, #340]	@ (8013564 <configCheck+0x334>)
 801340e:	1dba      	adds	r2, r7, #6
 8013410:	8812      	ldrh	r2, [r2, #0]
 8013412:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8013414:	23c8      	movs	r3, #200	@ 0xc8
 8013416:	005b      	lsls	r3, r3, #1
 8013418:	0018      	movs	r0, r3
 801341a:	f001 fb9d 	bl	8014b58 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 801341e:	4b51      	ldr	r3, [pc, #324]	@ (8013564 <configCheck+0x334>)
 8013420:	22fa      	movs	r2, #250	@ 0xfa
 8013422:	0112      	lsls	r2, r2, #4
 8013424:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 8013426:	4b4f      	ldr	r3, [pc, #316]	@ (8013564 <configCheck+0x334>)
 8013428:	22fa      	movs	r2, #250	@ 0xfa
 801342a:	0112      	lsls	r2, r2, #4
 801342c:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 801342e:	4b4d      	ldr	r3, [pc, #308]	@ (8013564 <configCheck+0x334>)
 8013430:	22fa      	movs	r2, #250	@ 0xfa
 8013432:	0112      	lsls	r2, r2, #4
 8013434:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 8013436:	23c8      	movs	r3, #200	@ 0xc8
 8013438:	005b      	lsls	r3, r3, #1
 801343a:	0018      	movs	r0, r3
 801343c:	f001 fb8c 	bl	8014b58 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 8013440:	1d7b      	adds	r3, r7, #5
 8013442:	781a      	ldrb	r2, [r3, #0]
 8013444:	1d7b      	adds	r3, r7, #5
 8013446:	3201      	adds	r2, #1
 8013448:	701a      	strb	r2, [r3, #0]
 801344a:	1d7b      	adds	r3, r7, #5
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	2b01      	cmp	r3, #1
 8013450:	d9d2      	bls.n	80133f8 <configCheck+0x1c8>
      }
//      Debug("userToggle flipped back to prior status");
      userToggle = !userToggle;
 8013452:	4b37      	ldr	r3, [pc, #220]	@ (8013530 <configCheck+0x300>)
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	1e5a      	subs	r2, r3, #1
 8013458:	4193      	sbcs	r3, r2
 801345a:	b2db      	uxtb	r3, r3
 801345c:	2201      	movs	r2, #1
 801345e:	4053      	eors	r3, r2
 8013460:	b2db      	uxtb	r3, r3
 8013462:	1c1a      	adds	r2, r3, #0
 8013464:	2301      	movs	r3, #1
 8013466:	4013      	ands	r3, r2
 8013468:	b2da      	uxtb	r2, r3
 801346a:	4b31      	ldr	r3, [pc, #196]	@ (8013530 <configCheck+0x300>)
 801346c:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 801346e:	4b30      	ldr	r3, [pc, #192]	@ (8013530 <configCheck+0x300>)
 8013470:	781b      	ldrb	r3, [r3, #0]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d001      	beq.n	801347a <configCheck+0x24a>
 8013476:	4b37      	ldr	r3, [pc, #220]	@ (8013554 <configCheck+0x324>)
 8013478:	e000      	b.n	801347c <configCheck+0x24c>
 801347a:	4b37      	ldr	r3, [pc, #220]	@ (8013558 <configCheck+0x328>)
 801347c:	4a3a      	ldr	r2, [pc, #232]	@ (8013568 <configCheck+0x338>)
 801347e:	4938      	ldr	r1, [pc, #224]	@ (8013560 <configCheck+0x330>)
 8013480:	2002      	movs	r0, #2
 8013482:	f000 fde7 	bl	8014054 <CreateLine>
      if (usbPluggedIn) {
 8013486:	4b39      	ldr	r3, [pc, #228]	@ (801356c <configCheck+0x33c>)
 8013488:	781b      	ldrb	r3, [r3, #0]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d009      	beq.n	80134a2 <configCheck+0x272>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 801348e:	f7fb ff1b 	bl	800f2c8 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 8013492:	e006      	b.n	80134a2 <configCheck+0x272>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 8013494:	4a36      	ldr	r2, [pc, #216]	@ (8013570 <configCheck+0x340>)
 8013496:	4b32      	ldr	r3, [pc, #200]	@ (8013560 <configCheck+0x330>)
 8013498:	0019      	movs	r1, r3
 801349a:	2002      	movs	r0, #2
 801349c:	f000 fdda 	bl	8014054 <CreateLine>
 80134a0:	e000      	b.n	80134a4 <configCheck+0x274>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 80134a2:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 80134a4:	46c0      	nop			@ (mov r8, r8)
 80134a6:	f7f6 fbfd 	bl	8009ca4 <UserButton_Pressed>
 80134aa:	1e03      	subs	r3, r0, #0
 80134ac:	d1fb      	bne.n	80134a6 <configCheck+0x276>
    }
    userbuttonHeld = false;
 80134ae:	4b1d      	ldr	r3, [pc, #116]	@ (8013524 <configCheck+0x2f4>)
 80134b0:	2200      	movs	r2, #0
 80134b2:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 80134b4:	f7f6 fbe4 	bl	8009c80 <BootButton_Pressed>
 80134b8:	0003      	movs	r3, r0
 80134ba:	001a      	movs	r2, r3
 80134bc:	2301      	movs	r3, #1
 80134be:	4053      	eors	r3, r2
 80134c0:	b2db      	uxtb	r3, r3
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d00b      	beq.n	80134de <configCheck+0x2ae>
 80134c6:	f7f6 fbed 	bl	8009ca4 <UserButton_Pressed>
 80134ca:	0003      	movs	r3, r0
 80134cc:	001a      	movs	r2, r3
 80134ce:	2301      	movs	r3, #1
 80134d0:	4053      	eors	r3, r2
 80134d2:	b2db      	uxtb	r3, r3
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d002      	beq.n	80134de <configCheck+0x2ae>
    userbuttonHeld = false;
 80134d8:	4b12      	ldr	r3, [pc, #72]	@ (8013524 <configCheck+0x2f4>)
 80134da:	2200      	movs	r2, #0
 80134dc:	701a      	strb	r2, [r3, #0]
  }

  if(Check_USB_PowerOn()){
 80134de:	f7f6 fb59 	bl	8009b94 <Check_USB_PowerOn>
 80134e2:	1e03      	subs	r3, r0, #0
 80134e4:	d003      	beq.n	80134ee <configCheck+0x2be>
    usbPluggedIn = true;
 80134e6:	4b21      	ldr	r3, [pc, #132]	@ (801356c <configCheck+0x33c>)
 80134e8:	2201      	movs	r2, #1
 80134ea:	701a      	strb	r2, [r3, #0]
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }

}
 80134ec:	e012      	b.n	8013514 <configCheck+0x2e4>
    if(!userToggle && !init){
 80134ee:	4b10      	ldr	r3, [pc, #64]	@ (8013530 <configCheck+0x300>)
 80134f0:	781b      	ldrb	r3, [r3, #0]
 80134f2:	2201      	movs	r2, #1
 80134f4:	4053      	eors	r3, r2
 80134f6:	b2db      	uxtb	r3, r3
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d008      	beq.n	801350e <configCheck+0x2de>
 80134fc:	4b1d      	ldr	r3, [pc, #116]	@ (8013574 <configCheck+0x344>)
 80134fe:	781b      	ldrb	r3, [r3, #0]
 8013500:	2201      	movs	r2, #1
 8013502:	4053      	eors	r3, r2
 8013504:	b2db      	uxtb	r3, r3
 8013506:	2b00      	cmp	r3, #0
 8013508:	d001      	beq.n	801350e <configCheck+0x2de>
      SetLEDsOff();
 801350a:	f7ff fc01 	bl	8012d10 <SetLEDsOff>
    usbPluggedIn = false;
 801350e:	4b17      	ldr	r3, [pc, #92]	@ (801356c <configCheck+0x33c>)
 8013510:	2200      	movs	r2, #0
 8013512:	701a      	strb	r2, [r3, #0]
}
 8013514:	46c0      	nop			@ (mov r8, r8)
 8013516:	46bd      	mov	sp, r7
 8013518:	b003      	add	sp, #12
 801351a:	bd90      	pop	{r4, r7, pc}
 801351c:	20002100 	.word	0x20002100
 8013520:	20002108 	.word	0x20002108
 8013524:	20002103 	.word	0x20002103
 8013528:	00000bb8 	.word	0x00000bb8
 801352c:	000005dc 	.word	0x000005dc
 8013530:	20002102 	.word	0x20002102
 8013534:	200010c4 	.word	0x200010c4
 8013538:	0802e180 	.word	0x0802e180
 801353c:	0802e184 	.word	0x0802e184
 8013540:	0802e188 	.word	0x0802e188
 8013544:	0802e0c0 	.word	0x0802e0c0
 8013548:	2000210c 	.word	0x2000210c
 801354c:	20001174 	.word	0x20001174
 8013550:	20001172 	.word	0x20001172
 8013554:	0802e1a8 	.word	0x0802e1a8
 8013558:	0802e1b0 	.word	0x0802e1b0
 801355c:	0802e1bc 	.word	0x0802e1bc
 8013560:	0802e1dc 	.word	0x0802e1dc
 8013564:	40000400 	.word	0x40000400
 8013568:	0802e1e0 	.word	0x0802e1e0
 801356c:	20002101 	.word	0x20002101
 8013570:	0802e1f8 	.word	0x0802e1f8
 8013574:	200000e8 	.word	0x200000e8

08013578 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 8013578:	b590      	push	{r4, r7, lr}
 801357a:	b083      	sub	sp, #12
 801357c:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 801357e:	1dfc      	adds	r4, r7, #7
 8013580:	f7ff fdbc 	bl	80130fc <powerCheck>
 8013584:	0003      	movs	r3, r0
 8013586:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 8013588:	1dfb      	adds	r3, r7, #7
 801358a:	781b      	ldrb	r3, [r3, #0]
 801358c:	0018      	movs	r0, r3
 801358e:	f7ff fdd1 	bl	8013134 <powerDisplay>
  return status;
 8013592:	1dfb      	adds	r3, r7, #7
 8013594:	781b      	ldrb	r3, [r3, #0]
}
 8013596:	0018      	movs	r0, r3
 8013598:	46bd      	mov	sp, r7
 801359a:	b003      	add	sp, #12
 801359c:	bd90      	pop	{r4, r7, pc}
	...

080135a0 <setuserToggle>:

void setuserToggle(void) {
 80135a0:	b580      	push	{r7, lr}
 80135a2:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 80135a4:	f7ff fdaa 	bl	80130fc <powerCheck>
 80135a8:	0003      	movs	r3, r0
 80135aa:	2b04      	cmp	r3, #4
 80135ac:	d004      	beq.n	80135b8 <setuserToggle+0x18>
    userToggle = true;
 80135ae:	4b04      	ldr	r3, [pc, #16]	@ (80135c0 <setuserToggle+0x20>)
 80135b0:	2201      	movs	r2, #1
 80135b2:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 80135b4:	f7fa fc74 	bl	800dea0 <EnabledConnectedDevices>
  }
}
 80135b8:	46c0      	nop			@ (mov r8, r8)
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}
 80135be:	46c0      	nop			@ (mov r8, r8)
 80135c0:	20002102 	.word	0x20002102

080135c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80135c8:	4b07      	ldr	r3, [pc, #28]	@ (80135e8 <HAL_MspInit+0x24>)
 80135ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80135cc:	4b06      	ldr	r3, [pc, #24]	@ (80135e8 <HAL_MspInit+0x24>)
 80135ce:	2101      	movs	r1, #1
 80135d0:	430a      	orrs	r2, r1
 80135d2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80135d4:	4b04      	ldr	r3, [pc, #16]	@ (80135e8 <HAL_MspInit+0x24>)
 80135d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80135d8:	4b03      	ldr	r3, [pc, #12]	@ (80135e8 <HAL_MspInit+0x24>)
 80135da:	2180      	movs	r1, #128	@ 0x80
 80135dc:	0549      	lsls	r1, r1, #21
 80135de:	430a      	orrs	r2, r1
 80135e0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80135e2:	46c0      	nop			@ (mov r8, r8)
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}
 80135e8:	40021000 	.word	0x40021000

080135ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80135f0:	46c0      	nop			@ (mov r8, r8)
 80135f2:	e7fd      	b.n	80135f0 <NMI_Handler+0x4>

080135f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80135f8:	46c0      	nop			@ (mov r8, r8)
 80135fa:	e7fd      	b.n	80135f8 <HardFault_Handler+0x4>

080135fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8013600:	46c0      	nop			@ (mov r8, r8)
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}

08013606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8013606:	b580      	push	{r7, lr}
 8013608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801360a:	46c0      	nop			@ (mov r8, r8)
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}

08013610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8013614:	f001 fa84 	bl	8014b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8013618:	46c0      	nop			@ (mov r8, r8)
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}
	...

08013620 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8013624:	4b03      	ldr	r3, [pc, #12]	@ (8013634 <RTC_IRQHandler+0x14>)
 8013626:	0018      	movs	r0, r3
 8013628:	f009 fad4 	bl	801cbd4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 801362c:	46c0      	nop			@ (mov r8, r8)
 801362e:	46bd      	mov	sp, r7
 8013630:	bd80      	pop	{r7, pc}
 8013632:	46c0      	nop			@ (mov r8, r8)
 8013634:	2000114c 	.word	0x2000114c

08013638 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8013638:	b580      	push	{r7, lr}
 801363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 801363c:	2380      	movs	r3, #128	@ 0x80
 801363e:	021b      	lsls	r3, r3, #8
 8013640:	0018      	movs	r0, r3
 8013642:	f002 fd2d 	bl	80160a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8013646:	46c0      	nop			@ (mov r8, r8)
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}

0801364c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8013650:	4b05      	ldr	r3, [pc, #20]	@ (8013668 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8013652:	0018      	movs	r0, r3
 8013654:	f002 f8b5 	bl	80157c2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8013658:	4b04      	ldr	r3, [pc, #16]	@ (801366c <DMA1_Channel2_3_IRQHandler+0x20>)
 801365a:	0018      	movs	r0, r3
 801365c:	f002 f8b1 	bl	80157c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8013660:	46c0      	nop			@ (mov r8, r8)
 8013662:	46bd      	mov	sp, r7
 8013664:	bd80      	pop	{r7, pc}
 8013666:	46c0      	nop			@ (mov r8, r8)
 8013668:	20000fe0 	.word	0x20000fe0
 801366c:	20000f98 	.word	0x20000f98

08013670 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8013670:	b580      	push	{r7, lr}
 8013672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8013674:	4b07      	ldr	r3, [pc, #28]	@ (8013694 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8013676:	0018      	movs	r0, r3
 8013678:	f002 f8a3 	bl	80157c2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 801367c:	4b06      	ldr	r3, [pc, #24]	@ (8013698 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 801367e:	0018      	movs	r0, r3
 8013680:	f002 f89f 	bl	80157c2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8013684:	4b05      	ldr	r3, [pc, #20]	@ (801369c <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8013686:	0018      	movs	r0, r3
 8013688:	f002 f89b 	bl	80157c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 801368c:	46c0      	nop			@ (mov r8, r8)
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}
 8013692:	46c0      	nop			@ (mov r8, r8)
 8013694:	20001064 	.word	0x20001064
 8013698:	20002408 	.word	0x20002408
 801369c:	20002450 	.word	0x20002450

080136a0 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80136a4:	4b03      	ldr	r3, [pc, #12]	@ (80136b4 <USART4_5_IRQHandler+0x14>)
 80136a6:	0018      	movs	r0, r3
 80136a8:	f00a f98e 	bl	801d9c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80136ac:	46c0      	nop			@ (mov r8, r8)
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}
 80136b2:	46c0      	nop			@ (mov r8, r8)
 80136b4:	20002350 	.word	0x20002350

080136b8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 80136bc:	4b09      	ldr	r3, [pc, #36]	@ (80136e4 <I2C1_IRQHandler+0x2c>)
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	699a      	ldr	r2, [r3, #24]
 80136c2:	23e0      	movs	r3, #224	@ 0xe0
 80136c4:	00db      	lsls	r3, r3, #3
 80136c6:	4013      	ands	r3, r2
 80136c8:	d004      	beq.n	80136d4 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80136ca:	4b06      	ldr	r3, [pc, #24]	@ (80136e4 <I2C1_IRQHandler+0x2c>)
 80136cc:	0018      	movs	r0, r3
 80136ce:	f003 fc05 	bl	8016edc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80136d2:	e003      	b.n	80136dc <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80136d4:	4b03      	ldr	r3, [pc, #12]	@ (80136e4 <I2C1_IRQHandler+0x2c>)
 80136d6:	0018      	movs	r0, r3
 80136d8:	f003 fbe6 	bl	8016ea8 <HAL_I2C_EV_IRQHandler>
}
 80136dc:	46c0      	nop			@ (mov r8, r8)
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}
 80136e2:	46c0      	nop			@ (mov r8, r8)
 80136e4:	20000ef0 	.word	0x20000ef0

080136e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80136ec:	4b03      	ldr	r3, [pc, #12]	@ (80136fc <USART1_IRQHandler+0x14>)
 80136ee:	0018      	movs	r0, r3
 80136f0:	f00a f96a 	bl	801d9c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80136f4:	46c0      	nop			@ (mov r8, r8)
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}
 80136fa:	46c0      	nop			@ (mov r8, r8)
 80136fc:	20002298 	.word	0x20002298

08013700 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8013704:	4b03      	ldr	r3, [pc, #12]	@ (8013714 <USB_IRQHandler+0x14>)
 8013706:	0018      	movs	r0, r3
 8013708:	f006 f89c 	bl	8019844 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 801370c:	46c0      	nop			@ (mov r8, r8)
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}
 8013712:	46c0      	nop			@ (mov r8, r8)
 8013714:	2000326c 	.word	0x2000326c

08013718 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	af00      	add	r7, sp, #0
  return 1;
 801371c:	2301      	movs	r3, #1
}
 801371e:	0018      	movs	r0, r3
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}

08013724 <_kill>:

int _kill(int pid, int sig)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b082      	sub	sp, #8
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
 801372c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801372e:	f013 f86d 	bl	802680c <__errno>
 8013732:	0003      	movs	r3, r0
 8013734:	2216      	movs	r2, #22
 8013736:	601a      	str	r2, [r3, #0]
  return -1;
 8013738:	2301      	movs	r3, #1
 801373a:	425b      	negs	r3, r3
}
 801373c:	0018      	movs	r0, r3
 801373e:	46bd      	mov	sp, r7
 8013740:	b002      	add	sp, #8
 8013742:	bd80      	pop	{r7, pc}

08013744 <_exit>:

void _exit (int status)
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b082      	sub	sp, #8
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 801374c:	2301      	movs	r3, #1
 801374e:	425a      	negs	r2, r3
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	0011      	movs	r1, r2
 8013754:	0018      	movs	r0, r3
 8013756:	f7ff ffe5 	bl	8013724 <_kill>
  while (1) {}    /* Make sure we hang here */
 801375a:	46c0      	nop			@ (mov r8, r8)
 801375c:	e7fd      	b.n	801375a <_exit+0x16>

0801375e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801375e:	b580      	push	{r7, lr}
 8013760:	b086      	sub	sp, #24
 8013762:	af00      	add	r7, sp, #0
 8013764:	60f8      	str	r0, [r7, #12]
 8013766:	60b9      	str	r1, [r7, #8]
 8013768:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801376a:	2300      	movs	r3, #0
 801376c:	617b      	str	r3, [r7, #20]
 801376e:	e00a      	b.n	8013786 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8013770:	e000      	b.n	8013774 <_read+0x16>
 8013772:	bf00      	nop
 8013774:	0001      	movs	r1, r0
 8013776:	68bb      	ldr	r3, [r7, #8]
 8013778:	1c5a      	adds	r2, r3, #1
 801377a:	60ba      	str	r2, [r7, #8]
 801377c:	b2ca      	uxtb	r2, r1
 801377e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	3301      	adds	r3, #1
 8013784:	617b      	str	r3, [r7, #20]
 8013786:	697a      	ldr	r2, [r7, #20]
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	429a      	cmp	r2, r3
 801378c:	dbf0      	blt.n	8013770 <_read+0x12>
  }

  return len;
 801378e:	687b      	ldr	r3, [r7, #4]
}
 8013790:	0018      	movs	r0, r3
 8013792:	46bd      	mov	sp, r7
 8013794:	b006      	add	sp, #24
 8013796:	bd80      	pop	{r7, pc}

08013798 <_close>:
  }
  return len;
}

int _close(int file)
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b082      	sub	sp, #8
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80137a0:	2301      	movs	r3, #1
 80137a2:	425b      	negs	r3, r3
}
 80137a4:	0018      	movs	r0, r3
 80137a6:	46bd      	mov	sp, r7
 80137a8:	b002      	add	sp, #8
 80137aa:	bd80      	pop	{r7, pc}

080137ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b082      	sub	sp, #8
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
 80137b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	2280      	movs	r2, #128	@ 0x80
 80137ba:	0192      	lsls	r2, r2, #6
 80137bc:	605a      	str	r2, [r3, #4]
  return 0;
 80137be:	2300      	movs	r3, #0
}
 80137c0:	0018      	movs	r0, r3
 80137c2:	46bd      	mov	sp, r7
 80137c4:	b002      	add	sp, #8
 80137c6:	bd80      	pop	{r7, pc}

080137c8 <_isatty>:

int _isatty(int file)
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b082      	sub	sp, #8
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80137d0:	2301      	movs	r3, #1
}
 80137d2:	0018      	movs	r0, r3
 80137d4:	46bd      	mov	sp, r7
 80137d6:	b002      	add	sp, #8
 80137d8:	bd80      	pop	{r7, pc}

080137da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80137da:	b580      	push	{r7, lr}
 80137dc:	b084      	sub	sp, #16
 80137de:	af00      	add	r7, sp, #0
 80137e0:	60f8      	str	r0, [r7, #12]
 80137e2:	60b9      	str	r1, [r7, #8]
 80137e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80137e6:	2300      	movs	r3, #0
}
 80137e8:	0018      	movs	r0, r3
 80137ea:	46bd      	mov	sp, r7
 80137ec:	b004      	add	sp, #16
 80137ee:	bd80      	pop	{r7, pc}

080137f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b086      	sub	sp, #24
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80137f8:	4a14      	ldr	r2, [pc, #80]	@ (801384c <_sbrk+0x5c>)
 80137fa:	4b15      	ldr	r3, [pc, #84]	@ (8013850 <_sbrk+0x60>)
 80137fc:	1ad3      	subs	r3, r2, r3
 80137fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8013800:	697b      	ldr	r3, [r7, #20]
 8013802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8013804:	4b13      	ldr	r3, [pc, #76]	@ (8013854 <_sbrk+0x64>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d102      	bne.n	8013812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801380c:	4b11      	ldr	r3, [pc, #68]	@ (8013854 <_sbrk+0x64>)
 801380e:	4a12      	ldr	r2, [pc, #72]	@ (8013858 <_sbrk+0x68>)
 8013810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8013812:	4b10      	ldr	r3, [pc, #64]	@ (8013854 <_sbrk+0x64>)
 8013814:	681a      	ldr	r2, [r3, #0]
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	18d3      	adds	r3, r2, r3
 801381a:	693a      	ldr	r2, [r7, #16]
 801381c:	429a      	cmp	r2, r3
 801381e:	d207      	bcs.n	8013830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8013820:	f012 fff4 	bl	802680c <__errno>
 8013824:	0003      	movs	r3, r0
 8013826:	220c      	movs	r2, #12
 8013828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 801382a:	2301      	movs	r3, #1
 801382c:	425b      	negs	r3, r3
 801382e:	e009      	b.n	8013844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8013830:	4b08      	ldr	r3, [pc, #32]	@ (8013854 <_sbrk+0x64>)
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8013836:	4b07      	ldr	r3, [pc, #28]	@ (8013854 <_sbrk+0x64>)
 8013838:	681a      	ldr	r2, [r3, #0]
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	18d2      	adds	r2, r2, r3
 801383e:	4b05      	ldr	r3, [pc, #20]	@ (8013854 <_sbrk+0x64>)
 8013840:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8013842:	68fb      	ldr	r3, [r7, #12]
}
 8013844:	0018      	movs	r0, r3
 8013846:	46bd      	mov	sp, r7
 8013848:	b006      	add	sp, #24
 801384a:	bd80      	pop	{r7, pc}
 801384c:	20005000 	.word	0x20005000
 8013850:	00000400 	.word	0x00000400
 8013854:	2000211c 	.word	0x2000211c
 8013858:	200038d0 	.word	0x200038d0

0801385c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8013860:	46c0      	nop			@ (mov r8, r8)
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}
	...

08013868 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b086      	sub	sp, #24
 801386c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801386e:	2310      	movs	r3, #16
 8013870:	18fb      	adds	r3, r7, r3
 8013872:	0018      	movs	r0, r3
 8013874:	2308      	movs	r3, #8
 8013876:	001a      	movs	r2, r3
 8013878:	2100      	movs	r1, #0
 801387a:	f012 ff23 	bl	80266c4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 801387e:	003b      	movs	r3, r7
 8013880:	0018      	movs	r0, r3
 8013882:	2310      	movs	r3, #16
 8013884:	001a      	movs	r2, r3
 8013886:	2100      	movs	r1, #0
 8013888:	f012 ff1c 	bl	80266c4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 801388c:	4b2e      	ldr	r3, [pc, #184]	@ (8013948 <MX_TIM2_Init+0xe0>)
 801388e:	2280      	movs	r2, #128	@ 0x80
 8013890:	05d2      	lsls	r2, r2, #23
 8013892:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8013894:	4b2c      	ldr	r3, [pc, #176]	@ (8013948 <MX_TIM2_Init+0xe0>)
 8013896:	2200      	movs	r2, #0
 8013898:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801389a:	4b2b      	ldr	r3, [pc, #172]	@ (8013948 <MX_TIM2_Init+0xe0>)
 801389c:	2200      	movs	r2, #0
 801389e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80138a0:	4b29      	ldr	r3, [pc, #164]	@ (8013948 <MX_TIM2_Init+0xe0>)
 80138a2:	4a2a      	ldr	r2, [pc, #168]	@ (801394c <MX_TIM2_Init+0xe4>)
 80138a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80138a6:	4b28      	ldr	r3, [pc, #160]	@ (8013948 <MX_TIM2_Init+0xe0>)
 80138a8:	2200      	movs	r2, #0
 80138aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80138ac:	4b26      	ldr	r3, [pc, #152]	@ (8013948 <MX_TIM2_Init+0xe0>)
 80138ae:	2200      	movs	r2, #0
 80138b0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80138b2:	4b25      	ldr	r3, [pc, #148]	@ (8013948 <MX_TIM2_Init+0xe0>)
 80138b4:	0018      	movs	r0, r3
 80138b6:	f009 fa9b 	bl	801cdf0 <HAL_TIM_PWM_Init>
 80138ba:	1e03      	subs	r3, r0, #0
 80138bc:	d001      	beq.n	80138c2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80138be:	f7f9 fe81 	bl	800d5c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80138c2:	2110      	movs	r1, #16
 80138c4:	187b      	adds	r3, r7, r1
 80138c6:	2200      	movs	r2, #0
 80138c8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80138ca:	187b      	adds	r3, r7, r1
 80138cc:	2200      	movs	r2, #0
 80138ce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80138d0:	187a      	adds	r2, r7, r1
 80138d2:	4b1d      	ldr	r3, [pc, #116]	@ (8013948 <MX_TIM2_Init+0xe0>)
 80138d4:	0011      	movs	r1, r2
 80138d6:	0018      	movs	r0, r3
 80138d8:	f009 fda8 	bl	801d42c <HAL_TIMEx_MasterConfigSynchronization>
 80138dc:	1e03      	subs	r3, r0, #0
 80138de:	d001      	beq.n	80138e4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80138e0:	f7f9 fe70 	bl	800d5c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80138e4:	003b      	movs	r3, r7
 80138e6:	2260      	movs	r2, #96	@ 0x60
 80138e8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80138ea:	003b      	movs	r3, r7
 80138ec:	2200      	movs	r2, #0
 80138ee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80138f0:	003b      	movs	r3, r7
 80138f2:	2200      	movs	r2, #0
 80138f4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80138f6:	003b      	movs	r3, r7
 80138f8:	2200      	movs	r2, #0
 80138fa:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80138fc:	0039      	movs	r1, r7
 80138fe:	4b12      	ldr	r3, [pc, #72]	@ (8013948 <MX_TIM2_Init+0xe0>)
 8013900:	2200      	movs	r2, #0
 8013902:	0018      	movs	r0, r3
 8013904:	f009 fb46 	bl	801cf94 <HAL_TIM_PWM_ConfigChannel>
 8013908:	1e03      	subs	r3, r0, #0
 801390a:	d001      	beq.n	8013910 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 801390c:	f7f9 fe5a 	bl	800d5c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013910:	0039      	movs	r1, r7
 8013912:	4b0d      	ldr	r3, [pc, #52]	@ (8013948 <MX_TIM2_Init+0xe0>)
 8013914:	2208      	movs	r2, #8
 8013916:	0018      	movs	r0, r3
 8013918:	f009 fb3c 	bl	801cf94 <HAL_TIM_PWM_ConfigChannel>
 801391c:	1e03      	subs	r3, r0, #0
 801391e:	d001      	beq.n	8013924 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8013920:	f7f9 fe50 	bl	800d5c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8013924:	0039      	movs	r1, r7
 8013926:	4b08      	ldr	r3, [pc, #32]	@ (8013948 <MX_TIM2_Init+0xe0>)
 8013928:	220c      	movs	r2, #12
 801392a:	0018      	movs	r0, r3
 801392c:	f009 fb32 	bl	801cf94 <HAL_TIM_PWM_ConfigChannel>
 8013930:	1e03      	subs	r3, r0, #0
 8013932:	d001      	beq.n	8013938 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8013934:	f7f9 fe46 	bl	800d5c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8013938:	4b03      	ldr	r3, [pc, #12]	@ (8013948 <MX_TIM2_Init+0xe0>)
 801393a:	0018      	movs	r0, r3
 801393c:	f000 f8fe 	bl	8013b3c <HAL_TIM_MspPostInit>

}
 8013940:	46c0      	nop			@ (mov r8, r8)
 8013942:	46bd      	mov	sp, r7
 8013944:	b006      	add	sp, #24
 8013946:	bd80      	pop	{r7, pc}
 8013948:	20002120 	.word	0x20002120
 801394c:	0000ffff 	.word	0x0000ffff

08013950 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b086      	sub	sp, #24
 8013954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013956:	2310      	movs	r3, #16
 8013958:	18fb      	adds	r3, r7, r3
 801395a:	0018      	movs	r0, r3
 801395c:	2308      	movs	r3, #8
 801395e:	001a      	movs	r2, r3
 8013960:	2100      	movs	r1, #0
 8013962:	f012 feaf 	bl	80266c4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013966:	003b      	movs	r3, r7
 8013968:	0018      	movs	r0, r3
 801396a:	2310      	movs	r3, #16
 801396c:	001a      	movs	r2, r3
 801396e:	2100      	movs	r1, #0
 8013970:	f012 fea8 	bl	80266c4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8013974:	4b32      	ldr	r3, [pc, #200]	@ (8013a40 <MX_TIM3_Init+0xf0>)
 8013976:	4a33      	ldr	r2, [pc, #204]	@ (8013a44 <MX_TIM3_Init+0xf4>)
 8013978:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 801397a:	4b31      	ldr	r3, [pc, #196]	@ (8013a40 <MX_TIM3_Init+0xf0>)
 801397c:	2200      	movs	r2, #0
 801397e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013980:	4b2f      	ldr	r3, [pc, #188]	@ (8013a40 <MX_TIM3_Init+0xf0>)
 8013982:	2200      	movs	r2, #0
 8013984:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8013986:	4b2e      	ldr	r3, [pc, #184]	@ (8013a40 <MX_TIM3_Init+0xf0>)
 8013988:	4a2f      	ldr	r2, [pc, #188]	@ (8013a48 <MX_TIM3_Init+0xf8>)
 801398a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801398c:	4b2c      	ldr	r3, [pc, #176]	@ (8013a40 <MX_TIM3_Init+0xf0>)
 801398e:	2200      	movs	r2, #0
 8013990:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013992:	4b2b      	ldr	r3, [pc, #172]	@ (8013a40 <MX_TIM3_Init+0xf0>)
 8013994:	2200      	movs	r2, #0
 8013996:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8013998:	4b29      	ldr	r3, [pc, #164]	@ (8013a40 <MX_TIM3_Init+0xf0>)
 801399a:	0018      	movs	r0, r3
 801399c:	f009 fa28 	bl	801cdf0 <HAL_TIM_PWM_Init>
 80139a0:	1e03      	subs	r3, r0, #0
 80139a2:	d001      	beq.n	80139a8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80139a4:	f7f9 fe0e 	bl	800d5c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80139a8:	2110      	movs	r1, #16
 80139aa:	187b      	adds	r3, r7, r1
 80139ac:	2200      	movs	r2, #0
 80139ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80139b0:	187b      	adds	r3, r7, r1
 80139b2:	2200      	movs	r2, #0
 80139b4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80139b6:	187a      	adds	r2, r7, r1
 80139b8:	4b21      	ldr	r3, [pc, #132]	@ (8013a40 <MX_TIM3_Init+0xf0>)
 80139ba:	0011      	movs	r1, r2
 80139bc:	0018      	movs	r0, r3
 80139be:	f009 fd35 	bl	801d42c <HAL_TIMEx_MasterConfigSynchronization>
 80139c2:	1e03      	subs	r3, r0, #0
 80139c4:	d001      	beq.n	80139ca <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80139c6:	f7f9 fdfd 	bl	800d5c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80139ca:	003b      	movs	r3, r7
 80139cc:	2260      	movs	r2, #96	@ 0x60
 80139ce:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80139d0:	003b      	movs	r3, r7
 80139d2:	2200      	movs	r2, #0
 80139d4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80139d6:	003b      	movs	r3, r7
 80139d8:	2200      	movs	r2, #0
 80139da:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80139dc:	003b      	movs	r3, r7
 80139de:	2200      	movs	r2, #0
 80139e0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80139e2:	0039      	movs	r1, r7
 80139e4:	4b16      	ldr	r3, [pc, #88]	@ (8013a40 <MX_TIM3_Init+0xf0>)
 80139e6:	2200      	movs	r2, #0
 80139e8:	0018      	movs	r0, r3
 80139ea:	f009 fad3 	bl	801cf94 <HAL_TIM_PWM_ConfigChannel>
 80139ee:	1e03      	subs	r3, r0, #0
 80139f0:	d001      	beq.n	80139f6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80139f2:	f7f9 fde7 	bl	800d5c4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80139f6:	4b12      	ldr	r3, [pc, #72]	@ (8013a40 <MX_TIM3_Init+0xf0>)
 80139f8:	2104      	movs	r1, #4
 80139fa:	0018      	movs	r0, r3
 80139fc:	f009 fd74 	bl	801d4e8 <HAL_TIMEx_RemapConfig>
 8013a00:	1e03      	subs	r3, r0, #0
 8013a02:	d001      	beq.n	8013a08 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8013a04:	f7f9 fdde 	bl	800d5c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8013a08:	0039      	movs	r1, r7
 8013a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8013a40 <MX_TIM3_Init+0xf0>)
 8013a0c:	2204      	movs	r2, #4
 8013a0e:	0018      	movs	r0, r3
 8013a10:	f009 fac0 	bl	801cf94 <HAL_TIM_PWM_ConfigChannel>
 8013a14:	1e03      	subs	r3, r0, #0
 8013a16:	d001      	beq.n	8013a1c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8013a18:	f7f9 fdd4 	bl	800d5c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8013a1c:	0039      	movs	r1, r7
 8013a1e:	4b08      	ldr	r3, [pc, #32]	@ (8013a40 <MX_TIM3_Init+0xf0>)
 8013a20:	2208      	movs	r2, #8
 8013a22:	0018      	movs	r0, r3
 8013a24:	f009 fab6 	bl	801cf94 <HAL_TIM_PWM_ConfigChannel>
 8013a28:	1e03      	subs	r3, r0, #0
 8013a2a:	d001      	beq.n	8013a30 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8013a2c:	f7f9 fdca 	bl	800d5c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8013a30:	4b03      	ldr	r3, [pc, #12]	@ (8013a40 <MX_TIM3_Init+0xf0>)
 8013a32:	0018      	movs	r0, r3
 8013a34:	f000 f882 	bl	8013b3c <HAL_TIM_MspPostInit>

}
 8013a38:	46c0      	nop			@ (mov r8, r8)
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	b006      	add	sp, #24
 8013a3e:	bd80      	pop	{r7, pc}
 8013a40:	20002160 	.word	0x20002160
 8013a44:	40000400 	.word	0x40000400
 8013a48:	0000ffff 	.word	0x0000ffff

08013a4c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b082      	sub	sp, #8
 8013a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013a52:	003b      	movs	r3, r7
 8013a54:	0018      	movs	r0, r3
 8013a56:	2308      	movs	r3, #8
 8013a58:	001a      	movs	r2, r3
 8013a5a:	2100      	movs	r1, #0
 8013a5c:	f012 fe32 	bl	80266c4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8013a60:	4b15      	ldr	r3, [pc, #84]	@ (8013ab8 <MX_TIM6_Init+0x6c>)
 8013a62:	4a16      	ldr	r2, [pc, #88]	@ (8013abc <MX_TIM6_Init+0x70>)
 8013a64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 8013a66:	4b14      	ldr	r3, [pc, #80]	@ (8013ab8 <MX_TIM6_Init+0x6c>)
 8013a68:	220a      	movs	r2, #10
 8013a6a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013a6c:	4b12      	ldr	r3, [pc, #72]	@ (8013ab8 <MX_TIM6_Init+0x6c>)
 8013a6e:	2200      	movs	r2, #0
 8013a70:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8013a72:	4b11      	ldr	r3, [pc, #68]	@ (8013ab8 <MX_TIM6_Init+0x6c>)
 8013a74:	4a12      	ldr	r2, [pc, #72]	@ (8013ac0 <MX_TIM6_Init+0x74>)
 8013a76:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013a78:	4b0f      	ldr	r3, [pc, #60]	@ (8013ab8 <MX_TIM6_Init+0x6c>)
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8013a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8013ab8 <MX_TIM6_Init+0x6c>)
 8013a80:	0018      	movs	r0, r3
 8013a82:	f009 f90d 	bl	801cca0 <HAL_TIM_Base_Init>
 8013a86:	1e03      	subs	r3, r0, #0
 8013a88:	d001      	beq.n	8013a8e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8013a8a:	f7f9 fd9b 	bl	800d5c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013a8e:	003b      	movs	r3, r7
 8013a90:	2200      	movs	r2, #0
 8013a92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013a94:	003b      	movs	r3, r7
 8013a96:	2200      	movs	r2, #0
 8013a98:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8013a9a:	003a      	movs	r2, r7
 8013a9c:	4b06      	ldr	r3, [pc, #24]	@ (8013ab8 <MX_TIM6_Init+0x6c>)
 8013a9e:	0011      	movs	r1, r2
 8013aa0:	0018      	movs	r0, r3
 8013aa2:	f009 fcc3 	bl	801d42c <HAL_TIMEx_MasterConfigSynchronization>
 8013aa6:	1e03      	subs	r3, r0, #0
 8013aa8:	d001      	beq.n	8013aae <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8013aaa:	f7f9 fd8b 	bl	800d5c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8013aae:	46c0      	nop			@ (mov r8, r8)
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	b002      	add	sp, #8
 8013ab4:	bd80      	pop	{r7, pc}
 8013ab6:	46c0      	nop			@ (mov r8, r8)
 8013ab8:	200021a0 	.word	0x200021a0
 8013abc:	40001000 	.word	0x40001000
 8013ac0:	0000ffff 	.word	0x0000ffff

08013ac4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b082      	sub	sp, #8
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681a      	ldr	r2, [r3, #0]
 8013ad0:	2380      	movs	r3, #128	@ 0x80
 8013ad2:	05db      	lsls	r3, r3, #23
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d106      	bne.n	8013ae6 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8013ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8013b04 <HAL_TIM_PWM_MspInit+0x40>)
 8013ada:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013adc:	4b09      	ldr	r3, [pc, #36]	@ (8013b04 <HAL_TIM_PWM_MspInit+0x40>)
 8013ade:	2101      	movs	r1, #1
 8013ae0:	430a      	orrs	r2, r1
 8013ae2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8013ae4:	e00a      	b.n	8013afc <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	4a07      	ldr	r2, [pc, #28]	@ (8013b08 <HAL_TIM_PWM_MspInit+0x44>)
 8013aec:	4293      	cmp	r3, r2
 8013aee:	d105      	bne.n	8013afc <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8013af0:	4b04      	ldr	r3, [pc, #16]	@ (8013b04 <HAL_TIM_PWM_MspInit+0x40>)
 8013af2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013af4:	4b03      	ldr	r3, [pc, #12]	@ (8013b04 <HAL_TIM_PWM_MspInit+0x40>)
 8013af6:	2102      	movs	r1, #2
 8013af8:	430a      	orrs	r2, r1
 8013afa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8013afc:	46c0      	nop			@ (mov r8, r8)
 8013afe:	46bd      	mov	sp, r7
 8013b00:	b002      	add	sp, #8
 8013b02:	bd80      	pop	{r7, pc}
 8013b04:	40021000 	.word	0x40021000
 8013b08:	40000400 	.word	0x40000400

08013b0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b082      	sub	sp, #8
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	4a06      	ldr	r2, [pc, #24]	@ (8013b34 <HAL_TIM_Base_MspInit+0x28>)
 8013b1a:	4293      	cmp	r3, r2
 8013b1c:	d105      	bne.n	8013b2a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8013b1e:	4b06      	ldr	r3, [pc, #24]	@ (8013b38 <HAL_TIM_Base_MspInit+0x2c>)
 8013b20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013b22:	4b05      	ldr	r3, [pc, #20]	@ (8013b38 <HAL_TIM_Base_MspInit+0x2c>)
 8013b24:	2110      	movs	r1, #16
 8013b26:	430a      	orrs	r2, r1
 8013b28:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8013b2a:	46c0      	nop			@ (mov r8, r8)
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	b002      	add	sp, #8
 8013b30:	bd80      	pop	{r7, pc}
 8013b32:	46c0      	nop			@ (mov r8, r8)
 8013b34:	40001000 	.word	0x40001000
 8013b38:	40021000 	.word	0x40021000

08013b3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8013b3c:	b590      	push	{r4, r7, lr}
 8013b3e:	b08b      	sub	sp, #44	@ 0x2c
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013b44:	2414      	movs	r4, #20
 8013b46:	193b      	adds	r3, r7, r4
 8013b48:	0018      	movs	r0, r3
 8013b4a:	2314      	movs	r3, #20
 8013b4c:	001a      	movs	r2, r3
 8013b4e:	2100      	movs	r1, #0
 8013b50:	f012 fdb8 	bl	80266c4 <memset>
  if(timHandle->Instance==TIM2)
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	681a      	ldr	r2, [r3, #0]
 8013b58:	2380      	movs	r3, #128	@ 0x80
 8013b5a:	05db      	lsls	r3, r3, #23
 8013b5c:	429a      	cmp	r2, r3
 8013b5e:	d123      	bne.n	8013ba8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013b60:	4b27      	ldr	r3, [pc, #156]	@ (8013c00 <HAL_TIM_MspPostInit+0xc4>)
 8013b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b64:	4b26      	ldr	r3, [pc, #152]	@ (8013c00 <HAL_TIM_MspPostInit+0xc4>)
 8013b66:	2101      	movs	r1, #1
 8013b68:	430a      	orrs	r2, r1
 8013b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013b6c:	4b24      	ldr	r3, [pc, #144]	@ (8013c00 <HAL_TIM_MspPostInit+0xc4>)
 8013b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b70:	2201      	movs	r2, #1
 8013b72:	4013      	ands	r3, r2
 8013b74:	613b      	str	r3, [r7, #16]
 8013b76:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8013b78:	0021      	movs	r1, r4
 8013b7a:	187b      	adds	r3, r7, r1
 8013b7c:	220d      	movs	r2, #13
 8013b7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b80:	187b      	adds	r3, r7, r1
 8013b82:	2202      	movs	r2, #2
 8013b84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b86:	187b      	adds	r3, r7, r1
 8013b88:	2200      	movs	r2, #0
 8013b8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013b8c:	187b      	adds	r3, r7, r1
 8013b8e:	2200      	movs	r2, #0
 8013b90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8013b92:	187b      	adds	r3, r7, r1
 8013b94:	2202      	movs	r2, #2
 8013b96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013b98:	187a      	adds	r2, r7, r1
 8013b9a:	23a0      	movs	r3, #160	@ 0xa0
 8013b9c:	05db      	lsls	r3, r3, #23
 8013b9e:	0011      	movs	r1, r2
 8013ba0:	0018      	movs	r0, r3
 8013ba2:	f002 f8c5 	bl	8015d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8013ba6:	e027      	b.n	8013bf8 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	4a15      	ldr	r2, [pc, #84]	@ (8013c04 <HAL_TIM_MspPostInit+0xc8>)
 8013bae:	4293      	cmp	r3, r2
 8013bb0:	d122      	bne.n	8013bf8 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013bb2:	4b13      	ldr	r3, [pc, #76]	@ (8013c00 <HAL_TIM_MspPostInit+0xc4>)
 8013bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013bb6:	4b12      	ldr	r3, [pc, #72]	@ (8013c00 <HAL_TIM_MspPostInit+0xc4>)
 8013bb8:	2104      	movs	r1, #4
 8013bba:	430a      	orrs	r2, r1
 8013bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013bbe:	4b10      	ldr	r3, [pc, #64]	@ (8013c00 <HAL_TIM_MspPostInit+0xc4>)
 8013bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013bc2:	2204      	movs	r2, #4
 8013bc4:	4013      	ands	r3, r2
 8013bc6:	60fb      	str	r3, [r7, #12]
 8013bc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8013bca:	2114      	movs	r1, #20
 8013bcc:	187b      	adds	r3, r7, r1
 8013bce:	22e0      	movs	r2, #224	@ 0xe0
 8013bd0:	0052      	lsls	r2, r2, #1
 8013bd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013bd4:	187b      	adds	r3, r7, r1
 8013bd6:	2202      	movs	r2, #2
 8013bd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bda:	187b      	adds	r3, r7, r1
 8013bdc:	2200      	movs	r2, #0
 8013bde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013be0:	187b      	adds	r3, r7, r1
 8013be2:	2200      	movs	r2, #0
 8013be4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8013be6:	187b      	adds	r3, r7, r1
 8013be8:	2202      	movs	r2, #2
 8013bea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013bec:	187b      	adds	r3, r7, r1
 8013bee:	4a06      	ldr	r2, [pc, #24]	@ (8013c08 <HAL_TIM_MspPostInit+0xcc>)
 8013bf0:	0019      	movs	r1, r3
 8013bf2:	0010      	movs	r0, r2
 8013bf4:	f002 f89c 	bl	8015d30 <HAL_GPIO_Init>
}
 8013bf8:	46c0      	nop			@ (mov r8, r8)
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	b00b      	add	sp, #44	@ 0x2c
 8013bfe:	bd90      	pop	{r4, r7, pc}
 8013c00:	40021000 	.word	0x40021000
 8013c04:	40000400 	.word	0x40000400
 8013c08:	50000800 	.word	0x50000800

08013c0c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8013c10:	4b17      	ldr	r3, [pc, #92]	@ (8013c70 <MX_LPUART1_UART_Init+0x64>)
 8013c12:	4a18      	ldr	r2, [pc, #96]	@ (8013c74 <MX_LPUART1_UART_Init+0x68>)
 8013c14:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8013c16:	4b16      	ldr	r3, [pc, #88]	@ (8013c70 <MX_LPUART1_UART_Init+0x64>)
 8013c18:	22e1      	movs	r2, #225	@ 0xe1
 8013c1a:	0252      	lsls	r2, r2, #9
 8013c1c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013c1e:	4b14      	ldr	r3, [pc, #80]	@ (8013c70 <MX_LPUART1_UART_Init+0x64>)
 8013c20:	2200      	movs	r2, #0
 8013c22:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8013c24:	4b12      	ldr	r3, [pc, #72]	@ (8013c70 <MX_LPUART1_UART_Init+0x64>)
 8013c26:	2200      	movs	r2, #0
 8013c28:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8013c2a:	4b11      	ldr	r3, [pc, #68]	@ (8013c70 <MX_LPUART1_UART_Init+0x64>)
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8013c30:	4b0f      	ldr	r3, [pc, #60]	@ (8013c70 <MX_LPUART1_UART_Init+0x64>)
 8013c32:	220c      	movs	r2, #12
 8013c34:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013c36:	4b0e      	ldr	r3, [pc, #56]	@ (8013c70 <MX_LPUART1_UART_Init+0x64>)
 8013c38:	2200      	movs	r2, #0
 8013c3a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8013c70 <MX_LPUART1_UART_Init+0x64>)
 8013c3e:	2200      	movs	r2, #0
 8013c40:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8013c42:	4b0b      	ldr	r3, [pc, #44]	@ (8013c70 <MX_LPUART1_UART_Init+0x64>)
 8013c44:	2218      	movs	r2, #24
 8013c46:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8013c48:	4b09      	ldr	r3, [pc, #36]	@ (8013c70 <MX_LPUART1_UART_Init+0x64>)
 8013c4a:	2280      	movs	r2, #128	@ 0x80
 8013c4c:	0212      	lsls	r2, r2, #8
 8013c4e:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8013c50:	4b07      	ldr	r3, [pc, #28]	@ (8013c70 <MX_LPUART1_UART_Init+0x64>)
 8013c52:	2280      	movs	r2, #128	@ 0x80
 8013c54:	0152      	lsls	r2, r2, #5
 8013c56:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8013c58:	4b05      	ldr	r3, [pc, #20]	@ (8013c70 <MX_LPUART1_UART_Init+0x64>)
 8013c5a:	0018      	movs	r0, r3
 8013c5c:	f009 fc62 	bl	801d524 <HAL_UART_Init>
 8013c60:	1e03      	subs	r3, r0, #0
 8013c62:	d001      	beq.n	8013c68 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8013c64:	f7f9 fcae 	bl	800d5c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8013c68:	46c0      	nop			@ (mov r8, r8)
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}
 8013c6e:	46c0      	nop			@ (mov r8, r8)
 8013c70:	200021e0 	.word	0x200021e0
 8013c74:	40004800 	.word	0x40004800

08013c78 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8013c7c:	4b14      	ldr	r3, [pc, #80]	@ (8013cd0 <MX_USART1_UART_Init+0x58>)
 8013c7e:	4a15      	ldr	r2, [pc, #84]	@ (8013cd4 <MX_USART1_UART_Init+0x5c>)
 8013c80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8013c82:	4b13      	ldr	r3, [pc, #76]	@ (8013cd0 <MX_USART1_UART_Init+0x58>)
 8013c84:	22e1      	movs	r2, #225	@ 0xe1
 8013c86:	0252      	lsls	r2, r2, #9
 8013c88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013c8a:	4b11      	ldr	r3, [pc, #68]	@ (8013cd0 <MX_USART1_UART_Init+0x58>)
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8013c90:	4b0f      	ldr	r3, [pc, #60]	@ (8013cd0 <MX_USART1_UART_Init+0x58>)
 8013c92:	2200      	movs	r2, #0
 8013c94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8013c96:	4b0e      	ldr	r3, [pc, #56]	@ (8013cd0 <MX_USART1_UART_Init+0x58>)
 8013c98:	2200      	movs	r2, #0
 8013c9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8013c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8013cd0 <MX_USART1_UART_Init+0x58>)
 8013c9e:	220c      	movs	r2, #12
 8013ca0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8013cd0 <MX_USART1_UART_Init+0x58>)
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8013ca8:	4b09      	ldr	r3, [pc, #36]	@ (8013cd0 <MX_USART1_UART_Init+0x58>)
 8013caa:	2200      	movs	r2, #0
 8013cac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013cae:	4b08      	ldr	r3, [pc, #32]	@ (8013cd0 <MX_USART1_UART_Init+0x58>)
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013cb4:	4b06      	ldr	r3, [pc, #24]	@ (8013cd0 <MX_USART1_UART_Init+0x58>)
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8013cba:	4b05      	ldr	r3, [pc, #20]	@ (8013cd0 <MX_USART1_UART_Init+0x58>)
 8013cbc:	0018      	movs	r0, r3
 8013cbe:	f009 fc31 	bl	801d524 <HAL_UART_Init>
 8013cc2:	1e03      	subs	r3, r0, #0
 8013cc4:	d001      	beq.n	8013cca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8013cc6:	f7f9 fc7d 	bl	800d5c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8013cca:	46c0      	nop			@ (mov r8, r8)
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}
 8013cd0:	20002298 	.word	0x20002298
 8013cd4:	40013800 	.word	0x40013800

08013cd8 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8013cdc:	4b14      	ldr	r3, [pc, #80]	@ (8013d30 <MX_USART4_UART_Init+0x58>)
 8013cde:	4a15      	ldr	r2, [pc, #84]	@ (8013d34 <MX_USART4_UART_Init+0x5c>)
 8013ce0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8013ce2:	4b13      	ldr	r3, [pc, #76]	@ (8013d30 <MX_USART4_UART_Init+0x58>)
 8013ce4:	22e1      	movs	r2, #225	@ 0xe1
 8013ce6:	0252      	lsls	r2, r2, #9
 8013ce8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8013cea:	4b11      	ldr	r3, [pc, #68]	@ (8013d30 <MX_USART4_UART_Init+0x58>)
 8013cec:	2200      	movs	r2, #0
 8013cee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8013cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8013d30 <MX_USART4_UART_Init+0x58>)
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8013cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8013d30 <MX_USART4_UART_Init+0x58>)
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8013cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8013d30 <MX_USART4_UART_Init+0x58>)
 8013cfe:	220c      	movs	r2, #12
 8013d00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013d02:	4b0b      	ldr	r3, [pc, #44]	@ (8013d30 <MX_USART4_UART_Init+0x58>)
 8013d04:	2200      	movs	r2, #0
 8013d06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8013d08:	4b09      	ldr	r3, [pc, #36]	@ (8013d30 <MX_USART4_UART_Init+0x58>)
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013d0e:	4b08      	ldr	r3, [pc, #32]	@ (8013d30 <MX_USART4_UART_Init+0x58>)
 8013d10:	2200      	movs	r2, #0
 8013d12:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013d14:	4b06      	ldr	r3, [pc, #24]	@ (8013d30 <MX_USART4_UART_Init+0x58>)
 8013d16:	2200      	movs	r2, #0
 8013d18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8013d1a:	4b05      	ldr	r3, [pc, #20]	@ (8013d30 <MX_USART4_UART_Init+0x58>)
 8013d1c:	0018      	movs	r0, r3
 8013d1e:	f009 fc01 	bl	801d524 <HAL_UART_Init>
 8013d22:	1e03      	subs	r3, r0, #0
 8013d24:	d001      	beq.n	8013d2a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8013d26:	f7f9 fc4d 	bl	800d5c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8013d2a:	46c0      	nop			@ (mov r8, r8)
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}
 8013d30:	20002350 	.word	0x20002350
 8013d34:	40004c00 	.word	0x40004c00

08013d38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8013d38:	b590      	push	{r4, r7, lr}
 8013d3a:	b08d      	sub	sp, #52	@ 0x34
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013d40:	241c      	movs	r4, #28
 8013d42:	193b      	adds	r3, r7, r4
 8013d44:	0018      	movs	r0, r3
 8013d46:	2314      	movs	r3, #20
 8013d48:	001a      	movs	r2, r3
 8013d4a:	2100      	movs	r1, #0
 8013d4c:	f012 fcba 	bl	80266c4 <memset>
  if(uartHandle->Instance==LPUART1)
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	4a8b      	ldr	r2, [pc, #556]	@ (8013f84 <HAL_UART_MspInit+0x24c>)
 8013d56:	4293      	cmp	r3, r2
 8013d58:	d129      	bne.n	8013dae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8013d5a:	4b8b      	ldr	r3, [pc, #556]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013d5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013d5e:	4b8a      	ldr	r3, [pc, #552]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013d60:	2180      	movs	r1, #128	@ 0x80
 8013d62:	02c9      	lsls	r1, r1, #11
 8013d64:	430a      	orrs	r2, r1
 8013d66:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013d68:	4b87      	ldr	r3, [pc, #540]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d6c:	4b86      	ldr	r3, [pc, #536]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013d6e:	2104      	movs	r1, #4
 8013d70:	430a      	orrs	r2, r1
 8013d72:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013d74:	4b84      	ldr	r3, [pc, #528]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d78:	2204      	movs	r2, #4
 8013d7a:	4013      	ands	r3, r2
 8013d7c:	61bb      	str	r3, [r7, #24]
 8013d7e:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8013d80:	0021      	movs	r1, r4
 8013d82:	187b      	adds	r3, r7, r1
 8013d84:	2203      	movs	r2, #3
 8013d86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013d88:	187b      	adds	r3, r7, r1
 8013d8a:	2202      	movs	r2, #2
 8013d8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013d8e:	187b      	adds	r3, r7, r1
 8013d90:	2200      	movs	r2, #0
 8013d92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013d94:	187b      	adds	r3, r7, r1
 8013d96:	2203      	movs	r2, #3
 8013d98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8013d9a:	187b      	adds	r3, r7, r1
 8013d9c:	2206      	movs	r2, #6
 8013d9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013da0:	187b      	adds	r3, r7, r1
 8013da2:	4a7a      	ldr	r2, [pc, #488]	@ (8013f8c <HAL_UART_MspInit+0x254>)
 8013da4:	0019      	movs	r1, r3
 8013da6:	0010      	movs	r0, r2
 8013da8:	f001 ffc2 	bl	8015d30 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8013dac:	e0e5      	b.n	8013f7a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	4a77      	ldr	r2, [pc, #476]	@ (8013f90 <HAL_UART_MspInit+0x258>)
 8013db4:	4293      	cmp	r3, r2
 8013db6:	d133      	bne.n	8013e20 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8013db8:	4b73      	ldr	r3, [pc, #460]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013dba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013dbc:	4b72      	ldr	r3, [pc, #456]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013dbe:	2180      	movs	r1, #128	@ 0x80
 8013dc0:	01c9      	lsls	r1, r1, #7
 8013dc2:	430a      	orrs	r2, r1
 8013dc4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013dc6:	4b70      	ldr	r3, [pc, #448]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013dca:	4b6f      	ldr	r3, [pc, #444]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013dcc:	2101      	movs	r1, #1
 8013dce:	430a      	orrs	r2, r1
 8013dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013dd2:	4b6d      	ldr	r3, [pc, #436]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013dd6:	2201      	movs	r2, #1
 8013dd8:	4013      	ands	r3, r2
 8013dda:	617b      	str	r3, [r7, #20]
 8013ddc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8013dde:	211c      	movs	r1, #28
 8013de0:	187b      	adds	r3, r7, r1
 8013de2:	22c0      	movs	r2, #192	@ 0xc0
 8013de4:	00d2      	lsls	r2, r2, #3
 8013de6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013de8:	187b      	adds	r3, r7, r1
 8013dea:	2202      	movs	r2, #2
 8013dec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013dee:	187b      	adds	r3, r7, r1
 8013df0:	2200      	movs	r2, #0
 8013df2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013df4:	187b      	adds	r3, r7, r1
 8013df6:	2203      	movs	r2, #3
 8013df8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8013dfa:	187b      	adds	r3, r7, r1
 8013dfc:	2204      	movs	r2, #4
 8013dfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013e00:	187a      	adds	r2, r7, r1
 8013e02:	23a0      	movs	r3, #160	@ 0xa0
 8013e04:	05db      	lsls	r3, r3, #23
 8013e06:	0011      	movs	r1, r2
 8013e08:	0018      	movs	r0, r3
 8013e0a:	f001 ff91 	bl	8015d30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013e0e:	2200      	movs	r2, #0
 8013e10:	2100      	movs	r1, #0
 8013e12:	201b      	movs	r0, #27
 8013e14:	f001 fb3a 	bl	801548c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013e18:	201b      	movs	r0, #27
 8013e1a:	f001 fb4c 	bl	80154b6 <HAL_NVIC_EnableIRQ>
}
 8013e1e:	e0ac      	b.n	8013f7a <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	4a5b      	ldr	r2, [pc, #364]	@ (8013f94 <HAL_UART_MspInit+0x25c>)
 8013e26:	4293      	cmp	r3, r2
 8013e28:	d000      	beq.n	8013e2c <HAL_UART_MspInit+0xf4>
 8013e2a:	e0a6      	b.n	8013f7a <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 8013e2c:	4b56      	ldr	r3, [pc, #344]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013e2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013e30:	4b55      	ldr	r3, [pc, #340]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013e32:	2180      	movs	r1, #128	@ 0x80
 8013e34:	0309      	lsls	r1, r1, #12
 8013e36:	430a      	orrs	r2, r1
 8013e38:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013e3a:	4b53      	ldr	r3, [pc, #332]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e3e:	4b52      	ldr	r3, [pc, #328]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013e40:	2101      	movs	r1, #1
 8013e42:	430a      	orrs	r2, r1
 8013e44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013e46:	4b50      	ldr	r3, [pc, #320]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e4a:	2201      	movs	r2, #1
 8013e4c:	4013      	ands	r3, r2
 8013e4e:	613b      	str	r3, [r7, #16]
 8013e50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013e52:	4b4d      	ldr	r3, [pc, #308]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e56:	4b4c      	ldr	r3, [pc, #304]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013e58:	2104      	movs	r1, #4
 8013e5a:	430a      	orrs	r2, r1
 8013e5c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8013f88 <HAL_UART_MspInit+0x250>)
 8013e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e62:	2204      	movs	r2, #4
 8013e64:	4013      	ands	r3, r2
 8013e66:	60fb      	str	r3, [r7, #12]
 8013e68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8013e6a:	241c      	movs	r4, #28
 8013e6c:	193b      	adds	r3, r7, r4
 8013e6e:	2202      	movs	r2, #2
 8013e70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013e72:	193b      	adds	r3, r7, r4
 8013e74:	2202      	movs	r2, #2
 8013e76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013e78:	193b      	adds	r3, r7, r4
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013e7e:	193b      	adds	r3, r7, r4
 8013e80:	2203      	movs	r2, #3
 8013e82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8013e84:	193b      	adds	r3, r7, r4
 8013e86:	2206      	movs	r2, #6
 8013e88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013e8a:	193a      	adds	r2, r7, r4
 8013e8c:	23a0      	movs	r3, #160	@ 0xa0
 8013e8e:	05db      	lsls	r3, r3, #23
 8013e90:	0011      	movs	r1, r2
 8013e92:	0018      	movs	r0, r3
 8013e94:	f001 ff4c 	bl	8015d30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8013e98:	0021      	movs	r1, r4
 8013e9a:	187b      	adds	r3, r7, r1
 8013e9c:	2280      	movs	r2, #128	@ 0x80
 8013e9e:	00d2      	lsls	r2, r2, #3
 8013ea0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ea2:	187b      	adds	r3, r7, r1
 8013ea4:	2202      	movs	r2, #2
 8013ea6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ea8:	187b      	adds	r3, r7, r1
 8013eaa:	2200      	movs	r2, #0
 8013eac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013eae:	187b      	adds	r3, r7, r1
 8013eb0:	2203      	movs	r2, #3
 8013eb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8013eb4:	187b      	adds	r3, r7, r1
 8013eb6:	2206      	movs	r2, #6
 8013eb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013eba:	187b      	adds	r3, r7, r1
 8013ebc:	4a33      	ldr	r2, [pc, #204]	@ (8013f8c <HAL_UART_MspInit+0x254>)
 8013ebe:	0019      	movs	r1, r3
 8013ec0:	0010      	movs	r0, r2
 8013ec2:	f001 ff35 	bl	8015d30 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8013ec6:	4b34      	ldr	r3, [pc, #208]	@ (8013f98 <HAL_UART_MspInit+0x260>)
 8013ec8:	4a34      	ldr	r2, [pc, #208]	@ (8013f9c <HAL_UART_MspInit+0x264>)
 8013eca:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8013ecc:	4b32      	ldr	r3, [pc, #200]	@ (8013f98 <HAL_UART_MspInit+0x260>)
 8013ece:	220c      	movs	r2, #12
 8013ed0:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013ed2:	4b31      	ldr	r3, [pc, #196]	@ (8013f98 <HAL_UART_MspInit+0x260>)
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8013f98 <HAL_UART_MspInit+0x260>)
 8013eda:	2200      	movs	r2, #0
 8013edc:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013ede:	4b2e      	ldr	r3, [pc, #184]	@ (8013f98 <HAL_UART_MspInit+0x260>)
 8013ee0:	2280      	movs	r2, #128	@ 0x80
 8013ee2:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8013f98 <HAL_UART_MspInit+0x260>)
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013eea:	4b2b      	ldr	r3, [pc, #172]	@ (8013f98 <HAL_UART_MspInit+0x260>)
 8013eec:	2200      	movs	r2, #0
 8013eee:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8013ef0:	4b29      	ldr	r3, [pc, #164]	@ (8013f98 <HAL_UART_MspInit+0x260>)
 8013ef2:	2220      	movs	r2, #32
 8013ef4:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013ef6:	4b28      	ldr	r3, [pc, #160]	@ (8013f98 <HAL_UART_MspInit+0x260>)
 8013ef8:	2200      	movs	r2, #0
 8013efa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8013efc:	4b26      	ldr	r3, [pc, #152]	@ (8013f98 <HAL_UART_MspInit+0x260>)
 8013efe:	0018      	movs	r0, r3
 8013f00:	f001 fafa 	bl	80154f8 <HAL_DMA_Init>
 8013f04:	1e03      	subs	r3, r0, #0
 8013f06:	d001      	beq.n	8013f0c <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8013f08:	f7f9 fb5c 	bl	800d5c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	4a22      	ldr	r2, [pc, #136]	@ (8013f98 <HAL_UART_MspInit+0x260>)
 8013f10:	675a      	str	r2, [r3, #116]	@ 0x74
 8013f12:	4b21      	ldr	r3, [pc, #132]	@ (8013f98 <HAL_UART_MspInit+0x260>)
 8013f14:	687a      	ldr	r2, [r7, #4]
 8013f16:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8013f18:	4b21      	ldr	r3, [pc, #132]	@ (8013fa0 <HAL_UART_MspInit+0x268>)
 8013f1a:	4a22      	ldr	r2, [pc, #136]	@ (8013fa4 <HAL_UART_MspInit+0x26c>)
 8013f1c:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8013f1e:	4b20      	ldr	r3, [pc, #128]	@ (8013fa0 <HAL_UART_MspInit+0x268>)
 8013f20:	220c      	movs	r2, #12
 8013f22:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013f24:	4b1e      	ldr	r3, [pc, #120]	@ (8013fa0 <HAL_UART_MspInit+0x268>)
 8013f26:	2210      	movs	r2, #16
 8013f28:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8013fa0 <HAL_UART_MspInit+0x268>)
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013f30:	4b1b      	ldr	r3, [pc, #108]	@ (8013fa0 <HAL_UART_MspInit+0x268>)
 8013f32:	2280      	movs	r2, #128	@ 0x80
 8013f34:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013f36:	4b1a      	ldr	r3, [pc, #104]	@ (8013fa0 <HAL_UART_MspInit+0x268>)
 8013f38:	2200      	movs	r2, #0
 8013f3a:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013f3c:	4b18      	ldr	r3, [pc, #96]	@ (8013fa0 <HAL_UART_MspInit+0x268>)
 8013f3e:	2200      	movs	r2, #0
 8013f40:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8013f42:	4b17      	ldr	r3, [pc, #92]	@ (8013fa0 <HAL_UART_MspInit+0x268>)
 8013f44:	2200      	movs	r2, #0
 8013f46:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013f48:	4b15      	ldr	r3, [pc, #84]	@ (8013fa0 <HAL_UART_MspInit+0x268>)
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8013f4e:	4b14      	ldr	r3, [pc, #80]	@ (8013fa0 <HAL_UART_MspInit+0x268>)
 8013f50:	0018      	movs	r0, r3
 8013f52:	f001 fad1 	bl	80154f8 <HAL_DMA_Init>
 8013f56:	1e03      	subs	r3, r0, #0
 8013f58:	d001      	beq.n	8013f5e <HAL_UART_MspInit+0x226>
      Error_Handler();
 8013f5a:	f7f9 fb33 	bl	800d5c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	4a0f      	ldr	r2, [pc, #60]	@ (8013fa0 <HAL_UART_MspInit+0x268>)
 8013f62:	671a      	str	r2, [r3, #112]	@ 0x70
 8013f64:	4b0e      	ldr	r3, [pc, #56]	@ (8013fa0 <HAL_UART_MspInit+0x268>)
 8013f66:	687a      	ldr	r2, [r7, #4]
 8013f68:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	2100      	movs	r1, #0
 8013f6e:	200e      	movs	r0, #14
 8013f70:	f001 fa8c 	bl	801548c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8013f74:	200e      	movs	r0, #14
 8013f76:	f001 fa9e 	bl	80154b6 <HAL_NVIC_EnableIRQ>
}
 8013f7a:	46c0      	nop			@ (mov r8, r8)
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	b00d      	add	sp, #52	@ 0x34
 8013f80:	bd90      	pop	{r4, r7, pc}
 8013f82:	46c0      	nop			@ (mov r8, r8)
 8013f84:	40004800 	.word	0x40004800
 8013f88:	40021000 	.word	0x40021000
 8013f8c:	50000800 	.word	0x50000800
 8013f90:	40013800 	.word	0x40013800
 8013f94:	40004c00 	.word	0x40004c00
 8013f98:	20002408 	.word	0x20002408
 8013f9c:	4002006c 	.word	0x4002006c
 8013fa0:	20002450 	.word	0x20002450
 8013fa4:	40020080 	.word	0x40020080

08013fa8 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 192

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b086      	sub	sp, #24
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8013fb0:	f000 fdc8 	bl	8014b44 <HAL_GetTick>
 8013fb4:	0003      	movs	r3, r0
 8013fb6:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8013fb8:	4b1c      	ldr	r3, [pc, #112]	@ (801402c <TimestampIsReached+0x84>)
 8013fba:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8013fbc:	697a      	ldr	r2, [r7, #20]
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	d307      	bcc.n	8013fd4 <TimestampIsReached+0x2c>
 8013fc4:	697a      	ldr	r2, [r7, #20]
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	1ad3      	subs	r3, r2, r3
 8013fca:	693a      	ldr	r2, [r7, #16]
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	d901      	bls.n	8013fd4 <TimestampIsReached+0x2c>
 8013fd0:	2201      	movs	r2, #1
 8013fd2:	e000      	b.n	8013fd6 <TimestampIsReached+0x2e>
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	230f      	movs	r3, #15
 8013fd8:	18fb      	adds	r3, r7, r3
 8013fda:	701a      	strb	r2, [r3, #0]
 8013fdc:	781a      	ldrb	r2, [r3, #0]
 8013fde:	2101      	movs	r1, #1
 8013fe0:	400a      	ands	r2, r1
 8013fe2:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8013fe4:	697a      	ldr	r2, [r7, #20]
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	429a      	cmp	r2, r3
 8013fea:	d207      	bcs.n	8013ffc <TimestampIsReached+0x54>
 8013fec:	687a      	ldr	r2, [r7, #4]
 8013fee:	697b      	ldr	r3, [r7, #20]
 8013ff0:	1ad3      	subs	r3, r2, r3
 8013ff2:	693a      	ldr	r2, [r7, #16]
 8013ff4:	429a      	cmp	r2, r3
 8013ff6:	d201      	bcs.n	8013ffc <TimestampIsReached+0x54>
 8013ff8:	2201      	movs	r2, #1
 8013ffa:	e000      	b.n	8013ffe <TimestampIsReached+0x56>
 8013ffc:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8013ffe:	200e      	movs	r0, #14
 8014000:	183b      	adds	r3, r7, r0
 8014002:	701a      	strb	r2, [r3, #0]
 8014004:	781a      	ldrb	r2, [r3, #0]
 8014006:	2101      	movs	r1, #1
 8014008:	400a      	ands	r2, r1
 801400a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 801400c:	230f      	movs	r3, #15
 801400e:	18fb      	adds	r3, r7, r3
 8014010:	781b      	ldrb	r3, [r3, #0]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d103      	bne.n	801401e <TimestampIsReached+0x76>
 8014016:	183b      	adds	r3, r7, r0
 8014018:	781b      	ldrb	r3, [r3, #0]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d001      	beq.n	8014022 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 801401e:	2301      	movs	r3, #1
 8014020:	e000      	b.n	8014024 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8014022:	2300      	movs	r3, #0
}
 8014024:	0018      	movs	r0, r3
 8014026:	46bd      	mov	sp, r7
 8014028:	b006      	add	sp, #24
 801402a:	bd80      	pop	{r7, pc}
 801402c:	7fffffff 	.word	0x7fffffff

08014030 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8014030:	b580      	push	{r7, lr}
 8014032:	b082      	sub	sp, #8
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8014038:	f000 fd84 	bl	8014b44 <HAL_GetTick>
 801403c:	0002      	movs	r2, r0
 801403e:	4904      	ldr	r1, [pc, #16]	@ (8014050 <AddTimestamp+0x20>)
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	0018      	movs	r0, r3
 8014044:	f012 f9d4 	bl	80263f0 <siprintf>
}
 8014048:	46c0      	nop			@ (mov r8, r8)
 801404a:	46bd      	mov	sp, r7
 801404c:	b002      	add	sp, #8
 801404e:	bd80      	pop	{r7, pc}
 8014050:	0802e22c 	.word	0x0802e22c

08014054 <CreateLine>:


void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8014054:	b40c      	push	{r2, r3}
 8014056:	b5b0      	push	{r4, r5, r7, lr}
 8014058:	b0b4      	sub	sp, #208	@ 0xd0
 801405a:	af00      	add	r7, sp, #0
 801405c:	0002      	movs	r2, r0
 801405e:	6039      	str	r1, [r7, #0]
 8014060:	1dfb      	adds	r3, r7, #7
 8014062:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8014064:	4b2a      	ldr	r3, [pc, #168]	@ (8014110 <CreateLine+0xbc>)
 8014066:	781b      	ldrb	r3, [r3, #0]
 8014068:	1dfa      	adds	r2, r7, #7
 801406a:	7812      	ldrb	r2, [r2, #0]
 801406c:	429a      	cmp	r2, r3
 801406e:	d848      	bhi.n	8014102 <CreateLine+0xae>
  }

  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8014070:	683a      	ldr	r2, [r7, #0]
 8014072:	4928      	ldr	r1, [pc, #160]	@ (8014114 <CreateLine+0xc0>)
 8014074:	240c      	movs	r4, #12
 8014076:	193b      	adds	r3, r7, r4
 8014078:	0018      	movs	r0, r3
 801407a:	f012 f9b9 	bl	80263f0 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 801407e:	4b24      	ldr	r3, [pc, #144]	@ (8014110 <CreateLine+0xbc>)
 8014080:	781b      	ldrb	r3, [r3, #0]
 8014082:	2b01      	cmp	r3, #1
 8014084:	d909      	bls.n	801409a <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8014086:	193b      	adds	r3, r7, r4
 8014088:	0018      	movs	r0, r3
 801408a:	f7ec f86f 	bl	800016c <strlen>
 801408e:	0002      	movs	r2, r0
 8014090:	193b      	adds	r3, r7, r4
 8014092:	189b      	adds	r3, r3, r2
 8014094:	0018      	movs	r0, r3
 8014096:	f7ff ffcb 	bl	8014030 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 801409a:	240c      	movs	r4, #12
 801409c:	193b      	adds	r3, r7, r4
 801409e:	0018      	movs	r0, r3
 80140a0:	f7ec f864 	bl	800016c <strlen>
 80140a4:	0003      	movs	r3, r0
 80140a6:	21cc      	movs	r1, #204	@ 0xcc
 80140a8:	187a      	adds	r2, r7, r1
 80140aa:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 80140ac:	23dc      	movs	r3, #220	@ 0xdc
 80140ae:	2508      	movs	r5, #8
 80140b0:	195b      	adds	r3, r3, r5
 80140b2:	19db      	adds	r3, r3, r7
 80140b4:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 80140b6:	193a      	adds	r2, r7, r4
 80140b8:	187b      	adds	r3, r7, r1
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	18d0      	adds	r0, r2, r3
 80140be:	187b      	adds	r3, r7, r1
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	22c0      	movs	r2, #192	@ 0xc0
 80140c4:	1ad3      	subs	r3, r2, r3
 80140c6:	0019      	movs	r1, r3
 80140c8:	68bb      	ldr	r3, [r7, #8]
 80140ca:	22d8      	movs	r2, #216	@ 0xd8
 80140cc:	1952      	adds	r2, r2, r5
 80140ce:	19d2      	adds	r2, r2, r7
 80140d0:	6812      	ldr	r2, [r2, #0]
 80140d2:	f012 fa29 	bl	8026528 <vsniprintf>
  va_end(args);

  if (usblog && Check_USB_PowerOn()){
 80140d6:	4b10      	ldr	r3, [pc, #64]	@ (8014118 <CreateLine+0xc4>)
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d009      	beq.n	80140f2 <CreateLine+0x9e>
 80140de:	f7f5 fd59 	bl	8009b94 <Check_USB_PowerOn>
 80140e2:	1e03      	subs	r3, r0, #0
 80140e4:	d005      	beq.n	80140f2 <CreateLine+0x9e>
    printf_USB("%s\r\n", textBuffer);
 80140e6:	193a      	adds	r2, r7, r4
 80140e8:	4b0c      	ldr	r3, [pc, #48]	@ (801411c <CreateLine+0xc8>)
 80140ea:	0011      	movs	r1, r2
 80140ec:	0018      	movs	r0, r3
 80140ee:	f7f4 fcb5 	bl	8008a5c <printf_USB>
  }
  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 80140f2:	230c      	movs	r3, #12
 80140f4:	18fa      	adds	r2, r7, r3
 80140f6:	4b09      	ldr	r3, [pc, #36]	@ (801411c <CreateLine+0xc8>)
 80140f8:	0011      	movs	r1, r2
 80140fa:	0018      	movs	r0, r3
 80140fc:	f012 f908 	bl	8026310 <iprintf>
 8014100:	e000      	b.n	8014104 <CreateLine+0xb0>
    return;
 8014102:	46c0      	nop			@ (mov r8, r8)
}
 8014104:	46bd      	mov	sp, r7
 8014106:	b034      	add	sp, #208	@ 0xd0
 8014108:	bcb0      	pop	{r4, r5, r7}
 801410a:	bc08      	pop	{r3}
 801410c:	b002      	add	sp, #8
 801410e:	4718      	bx	r3
 8014110:	200000f0 	.word	0x200000f0
 8014114:	0802e238 	.word	0x0802e238
 8014118:	200027ac 	.word	0x200027ac
 801411c:	0802e23c 	.word	0x0802e23c

08014120 <_write>:

int _write(int fd, void *buf, size_t count) {
 8014120:	b580      	push	{r7, lr}
 8014122:	b084      	sub	sp, #16
 8014124:	af00      	add	r7, sp, #0
 8014126:	60f8      	str	r0, [r7, #12]
 8014128:	60b9      	str	r1, [r7, #8]
 801412a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	b29a      	uxth	r2, r3
 8014130:	68b9      	ldr	r1, [r7, #8]
 8014132:	4804      	ldr	r0, [pc, #16]	@ (8014144 <_write+0x24>)
 8014134:	2364      	movs	r3, #100	@ 0x64
 8014136:	f009 fa5b 	bl	801d5f0 <HAL_UART_Transmit>
  return count;
 801413a:	687b      	ldr	r3, [r7, #4]
}
 801413c:	0018      	movs	r0, r3
 801413e:	46bd      	mov	sp, r7
 8014140:	b004      	add	sp, #16
 8014142:	bd80      	pop	{r7, pc}
 8014144:	20002298 	.word	0x20002298

08014148 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 8014148:	b580      	push	{r7, lr}
 801414a:	b082      	sub	sp, #8
 801414c:	af00      	add	r7, sp, #0
 801414e:	0002      	movs	r2, r0
 8014150:	1dfb      	adds	r3, r7, #7
 8014152:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 8014154:	4b03      	ldr	r3, [pc, #12]	@ (8014164 <SetVerboseLevel+0x1c>)
 8014156:	1dfa      	adds	r2, r7, #7
 8014158:	7812      	ldrb	r2, [r2, #0]
 801415a:	701a      	strb	r2, [r3, #0]
}
 801415c:	46c0      	nop			@ (mov r8, r8)
 801415e:	46bd      	mov	sp, r7
 8014160:	b002      	add	sp, #8
 8014162:	bd80      	pop	{r7, pc}
 8014164:	200000f0 	.word	0x200000f0

08014168 <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 8014168:	b580      	push	{r7, lr}
 801416a:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 801416c:	4b02      	ldr	r3, [pc, #8]	@ (8014178 <GetVerboseLevel+0x10>)
 801416e:	781b      	ldrb	r3, [r3, #0]
 8014170:	0018      	movs	r0, r3
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}
 8014176:	46c0      	nop			@ (mov r8, r8)
 8014178:	200000f0 	.word	0x200000f0

0801417c <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 801417c:	b580      	push	{r7, lr}
 801417e:	b08c      	sub	sp, #48	@ 0x30
 8014180:	af00      	add	r7, sp, #0
  char msgout[41];
  sprintf(msgout,"Build on: %s at %s", __DATE__, __TIME__);
 8014182:	4b1e      	ldr	r3, [pc, #120]	@ (80141fc <BinaryReleaseInfo+0x80>)
 8014184:	4a1e      	ldr	r2, [pc, #120]	@ (8014200 <BinaryReleaseInfo+0x84>)
 8014186:	491f      	ldr	r1, [pc, #124]	@ (8014204 <BinaryReleaseInfo+0x88>)
 8014188:	1d38      	adds	r0, r7, #4
 801418a:	f012 f931 	bl	80263f0 <siprintf>
  if (!usblog) {
 801418e:	4b1e      	ldr	r3, [pc, #120]	@ (8014208 <BinaryReleaseInfo+0x8c>)
 8014190:	781b      	ldrb	r3, [r3, #0]
 8014192:	2201      	movs	r2, #1
 8014194:	4053      	eors	r3, r2
 8014196:	b2db      	uxtb	r3, r3
 8014198:	2b00      	cmp	r3, #0
 801419a:	d005      	beq.n	80141a8 <BinaryReleaseInfo+0x2c>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 801419c:	1d3a      	adds	r2, r7, #4
 801419e:	4b1b      	ldr	r3, [pc, #108]	@ (801420c <BinaryReleaseInfo+0x90>)
 80141a0:	0011      	movs	r1, r2
 80141a2:	0018      	movs	r0, r3
 80141a4:	f7f4 fc5a 	bl	8008a5c <printf_USB>
  }
  Info(msgout);
 80141a8:	1d3a      	adds	r2, r7, #4
 80141aa:	4b19      	ldr	r3, [pc, #100]	@ (8014210 <BinaryReleaseInfo+0x94>)
 80141ac:	0019      	movs	r1, r3
 80141ae:	2002      	movs	r0, #2
 80141b0:	f7ff ff50 	bl	8014054 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 80141b4:	4b17      	ldr	r3, [pc, #92]	@ (8014214 <BinaryReleaseInfo+0x98>)
 80141b6:	4a18      	ldr	r2, [pc, #96]	@ (8014218 <BinaryReleaseInfo+0x9c>)
 80141b8:	4915      	ldr	r1, [pc, #84]	@ (8014210 <BinaryReleaseInfo+0x94>)
 80141ba:	2002      	movs	r0, #2
 80141bc:	f7ff ff4a 	bl	8014054 <CreateLine>
#ifdef DEBUG
  sprintf(msgout,"Software version: %s, Debug build", SRC_VERSION);
 80141c0:	4a16      	ldr	r2, [pc, #88]	@ (801421c <BinaryReleaseInfo+0xa0>)
 80141c2:	4917      	ldr	r1, [pc, #92]	@ (8014220 <BinaryReleaseInfo+0xa4>)
 80141c4:	1d3b      	adds	r3, r7, #4
 80141c6:	0018      	movs	r0, r3
 80141c8:	f012 f912 	bl	80263f0 <siprintf>
#else
  sprintf(msgout,"Software version: %s, Release build", SRC_VERSION);
#endif
  if (!usblog) {
 80141cc:	4b0e      	ldr	r3, [pc, #56]	@ (8014208 <BinaryReleaseInfo+0x8c>)
 80141ce:	781b      	ldrb	r3, [r3, #0]
 80141d0:	2201      	movs	r2, #1
 80141d2:	4053      	eors	r3, r2
 80141d4:	b2db      	uxtb	r3, r3
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d005      	beq.n	80141e6 <BinaryReleaseInfo+0x6a>
    printf_USB("%s\r\n", msgout);  // alway forced shown even if usb logging is off
 80141da:	1d3a      	adds	r2, r7, #4
 80141dc:	4b0b      	ldr	r3, [pc, #44]	@ (801420c <BinaryReleaseInfo+0x90>)
 80141de:	0011      	movs	r1, r2
 80141e0:	0018      	movs	r0, r3
 80141e2:	f7f4 fc3b 	bl	8008a5c <printf_USB>
  }
  Info(msgout);
 80141e6:	1d3a      	adds	r2, r7, #4
 80141e8:	4b09      	ldr	r3, [pc, #36]	@ (8014210 <BinaryReleaseInfo+0x94>)
 80141ea:	0019      	movs	r1, r3
 80141ec:	2002      	movs	r0, #2
 80141ee:	f7ff ff31 	bl	8014054 <CreateLine>
}
 80141f2:	46c0      	nop			@ (mov r8, r8)
 80141f4:	46bd      	mov	sp, r7
 80141f6:	b00c      	add	sp, #48	@ 0x30
 80141f8:	bd80      	pop	{r7, pc}
 80141fa:	46c0      	nop			@ (mov r8, r8)
 80141fc:	0802e244 	.word	0x0802e244
 8014200:	0802e250 	.word	0x0802e250
 8014204:	0802e25c 	.word	0x0802e25c
 8014208:	200027ac 	.word	0x200027ac
 801420c:	0802e23c 	.word	0x0802e23c
 8014210:	0802e270 	.word	0x0802e270
 8014214:	0802e274 	.word	0x0802e274
 8014218:	0802e280 	.word	0x0802e280
 801421c:	0802e288 	.word	0x0802e288
 8014220:	0802e290 	.word	0x0802e290

08014224 <errorHandler>:

//
// Call this as: errorHandler(__func__, __LINE__, __FILE__);
//
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b086      	sub	sp, #24
 8014228:	af02      	add	r7, sp, #8
 801422a:	60f8      	str	r0, [r7, #12]
 801422c:	60b9      	str	r1, [r7, #8]
 801422e:	607a      	str	r2, [r7, #4]
    Error("Error in %s at line %lu in file: %s\r\n", func, line, file);
 8014230:	68f8      	ldr	r0, [r7, #12]
 8014232:	4a07      	ldr	r2, [pc, #28]	@ (8014250 <errorHandler+0x2c>)
 8014234:	4907      	ldr	r1, [pc, #28]	@ (8014254 <errorHandler+0x30>)
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	9301      	str	r3, [sp, #4]
 801423a:	68bb      	ldr	r3, [r7, #8]
 801423c:	9300      	str	r3, [sp, #0]
 801423e:	0003      	movs	r3, r0
 8014240:	2001      	movs	r0, #1
 8014242:	f7ff ff07 	bl	8014054 <CreateLine>
//    while (true)
//    {
//    }
}
 8014246:	46c0      	nop			@ (mov r8, r8)
 8014248:	46bd      	mov	sp, r7
 801424a:	b004      	add	sp, #16
 801424c:	bd80      	pop	{r7, pc}
 801424e:	46c0      	nop			@ (mov r8, r8)
 8014250:	0802e2b4 	.word	0x0802e2b4
 8014254:	0802e2dc 	.word	0x0802e2dc

08014258 <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8014258:	b590      	push	{r4, r7, lr}
 801425a:	b083      	sub	sp, #12
 801425c:	af00      	add	r7, sp, #0
 801425e:	6039      	str	r1, [r7, #0]
 8014260:	0011      	movs	r1, r2
 8014262:	1dfb      	adds	r3, r7, #7
 8014264:	1c02      	adds	r2, r0, #0
 8014266:	701a      	strb	r2, [r3, #0]
 8014268:	1dbb      	adds	r3, r7, #6
 801426a:	1c0a      	adds	r2, r1, #0
 801426c:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 801426e:	4b0a      	ldr	r3, [pc, #40]	@ (8014298 <ReadRegister+0x40>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d00a      	beq.n	801428c <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8014276:	4b08      	ldr	r3, [pc, #32]	@ (8014298 <ReadRegister+0x40>)
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	1dba      	adds	r2, r7, #6
 801427c:	7814      	ldrb	r4, [r2, #0]
 801427e:	6839      	ldr	r1, [r7, #0]
 8014280:	1dfa      	adds	r2, r7, #7
 8014282:	7810      	ldrb	r0, [r2, #0]
 8014284:	0022      	movs	r2, r4
 8014286:	4798      	blx	r3
 8014288:	0003      	movs	r3, r0
 801428a:	e000      	b.n	801428e <ReadRegister+0x36>
	}
	return false;
 801428c:	2300      	movs	r3, #0
}
 801428e:	0018      	movs	r0, r3
 8014290:	46bd      	mov	sp, r7
 8014292:	b003      	add	sp, #12
 8014294:	bd90      	pop	{r4, r7, pc}
 8014296:	46c0      	nop			@ (mov r8, r8)
 8014298:	200024a0 	.word	0x200024a0

0801429c <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 801429c:	b590      	push	{r4, r7, lr}
 801429e:	b083      	sub	sp, #12
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6039      	str	r1, [r7, #0]
 80142a4:	0011      	movs	r1, r2
 80142a6:	1dfb      	adds	r3, r7, #7
 80142a8:	1c02      	adds	r2, r0, #0
 80142aa:	701a      	strb	r2, [r3, #0]
 80142ac:	1dbb      	adds	r3, r7, #6
 80142ae:	1c0a      	adds	r2, r1, #0
 80142b0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80142b2:	4b0a      	ldr	r3, [pc, #40]	@ (80142dc <WriteRegister+0x40>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d00a      	beq.n	80142d0 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 80142ba:	4b08      	ldr	r3, [pc, #32]	@ (80142dc <WriteRegister+0x40>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	1dba      	adds	r2, r7, #6
 80142c0:	7814      	ldrb	r4, [r2, #0]
 80142c2:	6839      	ldr	r1, [r7, #0]
 80142c4:	1dfa      	adds	r2, r7, #7
 80142c6:	7810      	ldrb	r0, [r2, #0]
 80142c8:	0022      	movs	r2, r4
 80142ca:	4798      	blx	r3
 80142cc:	0003      	movs	r3, r0
 80142ce:	e000      	b.n	80142d2 <WriteRegister+0x36>
  }
  return false;
 80142d0:	2300      	movs	r3, #0
}
 80142d2:	0018      	movs	r0, r3
 80142d4:	46bd      	mov	sp, r7
 80142d6:	b003      	add	sp, #12
 80142d8:	bd90      	pop	{r4, r7, pc}
 80142da:	46c0      	nop			@ (mov r8, r8)
 80142dc:	200024a4 	.word	0x200024a4

080142e0 <CalculateCRC>:

uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b084      	sub	sp, #16
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
 80142e8:	000a      	movs	r2, r1
 80142ea:	1cfb      	adds	r3, r7, #3
 80142ec:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 80142ee:	230f      	movs	r3, #15
 80142f0:	18fb      	adds	r3, r7, r3
 80142f2:	22ff      	movs	r2, #255	@ 0xff
 80142f4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80142f6:	230e      	movs	r3, #14
 80142f8:	18fb      	adds	r3, r7, r3
 80142fa:	2200      	movs	r2, #0
 80142fc:	701a      	strb	r2, [r3, #0]
 80142fe:	e038      	b.n	8014372 <CalculateCRC+0x92>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8014300:	230e      	movs	r3, #14
 8014302:	18fb      	adds	r3, r7, r3
 8014304:	781b      	ldrb	r3, [r3, #0]
 8014306:	687a      	ldr	r2, [r7, #4]
 8014308:	18d3      	adds	r3, r2, r3
 801430a:	7819      	ldrb	r1, [r3, #0]
 801430c:	220f      	movs	r2, #15
 801430e:	18bb      	adds	r3, r7, r2
 8014310:	18ba      	adds	r2, r7, r2
 8014312:	7812      	ldrb	r2, [r2, #0]
 8014314:	404a      	eors	r2, r1
 8014316:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8014318:	230d      	movs	r3, #13
 801431a:	18fb      	adds	r3, r7, r3
 801431c:	2200      	movs	r2, #0
 801431e:	701a      	strb	r2, [r3, #0]
 8014320:	e01c      	b.n	801435c <CalculateCRC+0x7c>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8014322:	210f      	movs	r1, #15
 8014324:	187b      	adds	r3, r7, r1
 8014326:	781b      	ldrb	r3, [r3, #0]
 8014328:	b25b      	sxtb	r3, r3
 801432a:	2b00      	cmp	r3, #0
 801432c:	da0a      	bge.n	8014344 <CalculateCRC+0x64>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 801432e:	187b      	adds	r3, r7, r1
 8014330:	781b      	ldrb	r3, [r3, #0]
 8014332:	b25b      	sxtb	r3, r3
 8014334:	18db      	adds	r3, r3, r3
 8014336:	b25b      	sxtb	r3, r3
 8014338:	2231      	movs	r2, #49	@ 0x31
 801433a:	4053      	eors	r3, r2
 801433c:	b25a      	sxtb	r2, r3
 801433e:	187b      	adds	r3, r7, r1
 8014340:	701a      	strb	r2, [r3, #0]
 8014342:	e005      	b.n	8014350 <CalculateCRC+0x70>
      } else {
          crc <<= 1;
 8014344:	230f      	movs	r3, #15
 8014346:	18fa      	adds	r2, r7, r3
 8014348:	18fb      	adds	r3, r7, r3
 801434a:	781b      	ldrb	r3, [r3, #0]
 801434c:	18db      	adds	r3, r3, r3
 801434e:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8014350:	210d      	movs	r1, #13
 8014352:	187b      	adds	r3, r7, r1
 8014354:	781a      	ldrb	r2, [r3, #0]
 8014356:	187b      	adds	r3, r7, r1
 8014358:	3201      	adds	r2, #1
 801435a:	701a      	strb	r2, [r3, #0]
 801435c:	230d      	movs	r3, #13
 801435e:	18fb      	adds	r3, r7, r3
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	2b07      	cmp	r3, #7
 8014364:	d9dd      	bls.n	8014322 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8014366:	210e      	movs	r1, #14
 8014368:	187b      	adds	r3, r7, r1
 801436a:	781a      	ldrb	r2, [r3, #0]
 801436c:	187b      	adds	r3, r7, r1
 801436e:	3201      	adds	r2, #1
 8014370:	701a      	strb	r2, [r3, #0]
 8014372:	230e      	movs	r3, #14
 8014374:	18fa      	adds	r2, r7, r3
 8014376:	1cfb      	adds	r3, r7, #3
 8014378:	7812      	ldrb	r2, [r2, #0]
 801437a:	781b      	ldrb	r3, [r3, #0]
 801437c:	429a      	cmp	r2, r3
 801437e:	d3bf      	bcc.n	8014300 <CalculateCRC+0x20>
      }
    }
  }
//  Debug("HIDS CRC calculated value: 0x%X", crc);
  return crc;
 8014380:	230f      	movs	r3, #15
 8014382:	18fb      	adds	r3, r7, r3
 8014384:	781b      	ldrb	r3, [r3, #0]
}
 8014386:	0018      	movs	r0, r3
 8014388:	46bd      	mov	sp, r7
 801438a:	b004      	add	sp, #16
 801438c:	bd80      	pop	{r7, pc}
	...

08014390 <HIDS_DewPointCalculation>:

float HIDS_DewPointCalculation(float* humidity, float* temperature) {
 8014390:	b5b0      	push	{r4, r5, r7, lr}
 8014392:	b084      	sub	sp, #16
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
 8014398:	6039      	str	r1, [r7, #0]
  float lambda = (((17.27 * *temperature) / (237.7 + *temperature)) + log(*humidity/100.0));
 801439a:	683b      	ldr	r3, [r7, #0]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	1c18      	adds	r0, r3, #0
 80143a0:	f7ef fa78 	bl	8003894 <__aeabi_f2d>
 80143a4:	4a2e      	ldr	r2, [pc, #184]	@ (8014460 <HIDS_DewPointCalculation+0xd0>)
 80143a6:	4b2f      	ldr	r3, [pc, #188]	@ (8014464 <HIDS_DewPointCalculation+0xd4>)
 80143a8:	f7ee fad4 	bl	8002954 <__aeabi_dmul>
 80143ac:	0002      	movs	r2, r0
 80143ae:	000b      	movs	r3, r1
 80143b0:	0014      	movs	r4, r2
 80143b2:	001d      	movs	r5, r3
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	1c18      	adds	r0, r3, #0
 80143ba:	f7ef fa6b 	bl	8003894 <__aeabi_f2d>
 80143be:	4a2a      	ldr	r2, [pc, #168]	@ (8014468 <HIDS_DewPointCalculation+0xd8>)
 80143c0:	4b2a      	ldr	r3, [pc, #168]	@ (801446c <HIDS_DewPointCalculation+0xdc>)
 80143c2:	f7ed fac7 	bl	8001954 <__aeabi_dadd>
 80143c6:	0002      	movs	r2, r0
 80143c8:	000b      	movs	r3, r1
 80143ca:	0020      	movs	r0, r4
 80143cc:	0029      	movs	r1, r5
 80143ce:	f7ed fe87 	bl	80020e0 <__aeabi_ddiv>
 80143d2:	0002      	movs	r2, r0
 80143d4:	000b      	movs	r3, r1
 80143d6:	0014      	movs	r4, r2
 80143d8:	001d      	movs	r5, r3
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	1c18      	adds	r0, r3, #0
 80143e0:	f7ef fa58 	bl	8003894 <__aeabi_f2d>
 80143e4:	2200      	movs	r2, #0
 80143e6:	4b22      	ldr	r3, [pc, #136]	@ (8014470 <HIDS_DewPointCalculation+0xe0>)
 80143e8:	f7ed fe7a 	bl	80020e0 <__aeabi_ddiv>
 80143ec:	0002      	movs	r2, r0
 80143ee:	000b      	movs	r3, r1
 80143f0:	0010      	movs	r0, r2
 80143f2:	0019      	movs	r1, r3
 80143f4:	f014 fef6 	bl	80291e4 <log>
 80143f8:	0002      	movs	r2, r0
 80143fa:	000b      	movs	r3, r1
 80143fc:	0020      	movs	r0, r4
 80143fe:	0029      	movs	r1, r5
 8014400:	f7ed faa8 	bl	8001954 <__aeabi_dadd>
 8014404:	0002      	movs	r2, r0
 8014406:	000b      	movs	r3, r1
 8014408:	0010      	movs	r0, r2
 801440a:	0019      	movs	r1, r3
 801440c:	f7ef fa8a 	bl	8003924 <__aeabi_d2f>
 8014410:	1c03      	adds	r3, r0, #0
 8014412:	60fb      	str	r3, [r7, #12]
  return ((237.7 * lambda) / (17.27 - lambda));
 8014414:	68f8      	ldr	r0, [r7, #12]
 8014416:	f7ef fa3d 	bl	8003894 <__aeabi_f2d>
 801441a:	4a13      	ldr	r2, [pc, #76]	@ (8014468 <HIDS_DewPointCalculation+0xd8>)
 801441c:	4b13      	ldr	r3, [pc, #76]	@ (801446c <HIDS_DewPointCalculation+0xdc>)
 801441e:	f7ee fa99 	bl	8002954 <__aeabi_dmul>
 8014422:	0002      	movs	r2, r0
 8014424:	000b      	movs	r3, r1
 8014426:	0014      	movs	r4, r2
 8014428:	001d      	movs	r5, r3
 801442a:	68f8      	ldr	r0, [r7, #12]
 801442c:	f7ef fa32 	bl	8003894 <__aeabi_f2d>
 8014430:	0002      	movs	r2, r0
 8014432:	000b      	movs	r3, r1
 8014434:	480a      	ldr	r0, [pc, #40]	@ (8014460 <HIDS_DewPointCalculation+0xd0>)
 8014436:	490b      	ldr	r1, [pc, #44]	@ (8014464 <HIDS_DewPointCalculation+0xd4>)
 8014438:	f7ee fd72 	bl	8002f20 <__aeabi_dsub>
 801443c:	0002      	movs	r2, r0
 801443e:	000b      	movs	r3, r1
 8014440:	0020      	movs	r0, r4
 8014442:	0029      	movs	r1, r5
 8014444:	f7ed fe4c 	bl	80020e0 <__aeabi_ddiv>
 8014448:	0002      	movs	r2, r0
 801444a:	000b      	movs	r3, r1
 801444c:	0010      	movs	r0, r2
 801444e:	0019      	movs	r1, r3
 8014450:	f7ef fa68 	bl	8003924 <__aeabi_d2f>
 8014454:	1c03      	adds	r3, r0, #0
}
 8014456:	1c18      	adds	r0, r3, #0
 8014458:	46bd      	mov	sp, r7
 801445a:	b004      	add	sp, #16
 801445c:	bdb0      	pop	{r4, r5, r7, pc}
 801445e:	46c0      	nop			@ (mov r8, r8)
 8014460:	b851eb85 	.word	0xb851eb85
 8014464:	4031451e 	.word	0x4031451e
 8014468:	66666666 	.word	0x66666666
 801446c:	406db666 	.word	0x406db666
 8014470:	40590000 	.word	0x40590000

08014474 <HIDS_EnableHeater>:

void HIDS_EnableHeater(void) {
 8014474:	b580      	push	{r7, lr}
 8014476:	b082      	sub	sp, #8
 8014478:	af00      	add	r7, sp, #0
  // During heater operation, the sensor’s specifications are not valid.
  uint8_t heaterReg = HeaterMode;
 801447a:	4b0d      	ldr	r3, [pc, #52]	@ (80144b0 <HIDS_EnableHeater+0x3c>)
 801447c:	781a      	ldrb	r2, [r3, #0]
 801447e:	1dfb      	adds	r3, r7, #7
 8014480:	701a      	strb	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
 8014482:	1dfb      	adds	r3, r7, #7
 8014484:	2201      	movs	r2, #1
 8014486:	0019      	movs	r1, r3
 8014488:	2044      	movs	r0, #68	@ 0x44
 801448a:	f7ff ff07 	bl	801429c <WriteRegister>
  Info("Started the heater in mode: %d", heaterReg);
 801448e:	1dfb      	adds	r3, r7, #7
 8014490:	781b      	ldrb	r3, [r3, #0]
 8014492:	4a08      	ldr	r2, [pc, #32]	@ (80144b4 <HIDS_EnableHeater+0x40>)
 8014494:	4908      	ldr	r1, [pc, #32]	@ (80144b8 <HIDS_EnableHeater+0x44>)
 8014496:	2002      	movs	r0, #2
 8014498:	f7ff fddc 	bl	8014054 <CreateLine>
  HIDS_LastHeaterInRTC = getPosixTime();
 801449c:	f7f5 ffb8 	bl	800a410 <getPosixTime>
 80144a0:	0002      	movs	r2, r0
 80144a2:	4b06      	ldr	r3, [pc, #24]	@ (80144bc <HIDS_EnableHeater+0x48>)
 80144a4:	601a      	str	r2, [r3, #0]
}
 80144a6:	46c0      	nop			@ (mov r8, r8)
 80144a8:	46bd      	mov	sp, r7
 80144aa:	b002      	add	sp, #8
 80144ac:	bd80      	pop	{r7, pc}
 80144ae:	46c0      	nop			@ (mov r8, r8)
 80144b0:	200000f1 	.word	0x200000f1
 80144b4:	0802e2e0 	.word	0x0802e2e0
 80144b8:	0802e300 	.word	0x0802e300
 80144bc:	200024b8 	.word	0x200024b8

080144c0 <HIDS_Init>:

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b082      	sub	sp, #8
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
 80144c8:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 80144ca:	4b0a      	ldr	r3, [pc, #40]	@ (80144f4 <HIDS_Init+0x34>)
 80144cc:	687a      	ldr	r2, [r7, #4]
 80144ce:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 80144d0:	4b09      	ldr	r3, [pc, #36]	@ (80144f8 <HIDS_Init+0x38>)
 80144d2:	683a      	ldr	r2, [r7, #0]
 80144d4:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 80144d6:	4b09      	ldr	r3, [pc, #36]	@ (80144fc <HIDS_Init+0x3c>)
 80144d8:	781b      	ldrb	r3, [r3, #0]
 80144da:	0018      	movs	r0, r3
 80144dc:	f000 f840 	bl	8014560 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 80144e0:	4b07      	ldr	r3, [pc, #28]	@ (8014500 <HIDS_Init+0x40>)
 80144e2:	781b      	ldrb	r3, [r3, #0]
 80144e4:	0018      	movs	r0, r3
 80144e6:	f000 f82b 	bl	8014540 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 80144ea:	46c0      	nop			@ (mov r8, r8)
 80144ec:	46bd      	mov	sp, r7
 80144ee:	b002      	add	sp, #8
 80144f0:	bd80      	pop	{r7, pc}
 80144f2:	46c0      	nop			@ (mov r8, r8)
 80144f4:	200024a0 	.word	0x200024a0
 80144f8:	200024a4 	.word	0x200024a4
 80144fc:	200000f2 	.word	0x200000f2
 8014500:	200000f1 	.word	0x200000f1

08014504 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8014504:	b580      	push	{r7, lr}
 8014506:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 8014508:	f000 fb1c 	bl	8014b44 <HAL_GetTick>
 801450c:	0002      	movs	r2, r0
 801450e:	4b08      	ldr	r3, [pc, #32]	@ (8014530 <HIDS_StartMeasurement+0x2c>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	18d2      	adds	r2, r2, r3
 8014514:	4b07      	ldr	r3, [pc, #28]	@ (8014534 <HIDS_StartMeasurement+0x30>)
 8014516:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8014518:	4b07      	ldr	r3, [pc, #28]	@ (8014538 <HIDS_StartMeasurement+0x34>)
 801451a:	2201      	movs	r2, #1
 801451c:	0019      	movs	r1, r3
 801451e:	2044      	movs	r0, #68	@ 0x44
 8014520:	f7ff febc 	bl	801429c <WriteRegister>
  MeasurementDone = false;
 8014524:	4b05      	ldr	r3, [pc, #20]	@ (801453c <HIDS_StartMeasurement+0x38>)
 8014526:	2200      	movs	r2, #0
 8014528:	701a      	strb	r2, [r3, #0]
}
 801452a:	46c0      	nop			@ (mov r8, r8)
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}
 8014530:	200000f8 	.word	0x200000f8
 8014534:	200000f4 	.word	0x200000f4
 8014538:	200000f2 	.word	0x200000f2
 801453c:	200024bc 	.word	0x200024bc

08014540 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8014540:	b580      	push	{r7, lr}
 8014542:	b082      	sub	sp, #8
 8014544:	af00      	add	r7, sp, #0
 8014546:	0002      	movs	r2, r0
 8014548:	1dfb      	adds	r3, r7, #7
 801454a:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 801454c:	4b03      	ldr	r3, [pc, #12]	@ (801455c <HIDS_SetHeaterMode+0x1c>)
 801454e:	1dfa      	adds	r2, r7, #7
 8014550:	7812      	ldrb	r2, [r2, #0]
 8014552:	701a      	strb	r2, [r3, #0]
}
 8014554:	46c0      	nop			@ (mov r8, r8)
 8014556:	46bd      	mov	sp, r7
 8014558:	b002      	add	sp, #8
 801455a:	bd80      	pop	{r7, pc}
 801455c:	200000f1 	.word	0x200000f1

08014560 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8014560:	b580      	push	{r7, lr}
 8014562:	b082      	sub	sp, #8
 8014564:	af00      	add	r7, sp, #0
 8014566:	0002      	movs	r2, r0
 8014568:	1dfb      	adds	r3, r7, #7
 801456a:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 801456c:	4b03      	ldr	r3, [pc, #12]	@ (801457c <HIDS_SetMeasurementMode+0x1c>)
 801456e:	1dfa      	adds	r2, r7, #7
 8014570:	7812      	ldrb	r2, [r2, #0]
 8014572:	701a      	strb	r2, [r3, #0]
}
 8014574:	46c0      	nop			@ (mov r8, r8)
 8014576:	46bd      	mov	sp, r7
 8014578:	b002      	add	sp, #8
 801457a:	bd80      	pop	{r7, pc}
 801457c:	200000f2 	.word	0x200000f2

08014580 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 8014588:	f000 fadc 	bl	8014b44 <HAL_GetTick>
 801458c:	0002      	movs	r2, r0
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	18d2      	adds	r2, r2, r3
 8014592:	4b03      	ldr	r3, [pc, #12]	@ (80145a0 <setHIDSTimeStamp+0x20>)
 8014594:	601a      	str	r2, [r3, #0]
}
 8014596:	46c0      	nop			@ (mov r8, r8)
 8014598:	46bd      	mov	sp, r7
 801459a:	b002      	add	sp, #8
 801459c:	bd80      	pop	{r7, pc}
 801459e:	46c0      	nop			@ (mov r8, r8)
 80145a0:	200024c0 	.word	0x200024c0

080145a4 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 80145a4:	b590      	push	{r4, r7, lr}
 80145a6:	b085      	sub	sp, #20
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	781a      	ldrb	r2, [r3, #0]
 80145b0:	210c      	movs	r1, #12
 80145b2:	187b      	adds	r3, r7, r1
 80145b4:	701a      	strb	r2, [r3, #0]
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	785a      	ldrb	r2, [r3, #1]
 80145ba:	187b      	adds	r3, r7, r1
 80145bc:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 80145be:	240f      	movs	r4, #15
 80145c0:	193b      	adds	r3, r7, r4
 80145c2:	687a      	ldr	r2, [r7, #4]
 80145c4:	7892      	ldrb	r2, [r2, #2]
 80145c6:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 80145c8:	187b      	adds	r3, r7, r1
 80145ca:	2102      	movs	r1, #2
 80145cc:	0018      	movs	r0, r3
 80145ce:	f7ff fe87 	bl	80142e0 <CalculateCRC>
 80145d2:	0003      	movs	r3, r0
 80145d4:	001a      	movs	r2, r3
 80145d6:	193b      	adds	r3, r7, r4
 80145d8:	781b      	ldrb	r3, [r3, #0]
 80145da:	4293      	cmp	r3, r2
 80145dc:	d007      	beq.n	80145ee <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 80145de:	4a1a      	ldr	r2, [pc, #104]	@ (8014648 <CheckCRC+0xa4>)
 80145e0:	4b1a      	ldr	r3, [pc, #104]	@ (801464c <CheckCRC+0xa8>)
 80145e2:	0019      	movs	r1, r3
 80145e4:	2001      	movs	r0, #1
 80145e6:	f7ff fd35 	bl	8014054 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 80145ea:	2300      	movs	r3, #0
 80145ec:	e027      	b.n	801463e <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	78da      	ldrb	r2, [r3, #3]
 80145f2:	2108      	movs	r1, #8
 80145f4:	187b      	adds	r3, r7, r1
 80145f6:	701a      	strb	r2, [r3, #0]
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	791a      	ldrb	r2, [r3, #4]
 80145fc:	187b      	adds	r3, r7, r1
 80145fe:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8014600:	240e      	movs	r4, #14
 8014602:	193b      	adds	r3, r7, r4
 8014604:	687a      	ldr	r2, [r7, #4]
 8014606:	7952      	ldrb	r2, [r2, #5]
 8014608:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 801460a:	187b      	adds	r3, r7, r1
 801460c:	2102      	movs	r1, #2
 801460e:	0018      	movs	r0, r3
 8014610:	f7ff fe66 	bl	80142e0 <CalculateCRC>
 8014614:	0003      	movs	r3, r0
 8014616:	001a      	movs	r2, r3
 8014618:	193b      	adds	r3, r7, r4
 801461a:	781b      	ldrb	r3, [r3, #0]
 801461c:	4293      	cmp	r3, r2
 801461e:	d00d      	beq.n	801463c <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 8014620:	4a0b      	ldr	r2, [pc, #44]	@ (8014650 <CheckCRC+0xac>)
 8014622:	4b0a      	ldr	r3, [pc, #40]	@ (801464c <CheckCRC+0xa8>)
 8014624:	0019      	movs	r1, r3
 8014626:	2001      	movs	r0, #1
 8014628:	f7ff fd14 	bl	8014054 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 801462c:	4a09      	ldr	r2, [pc, #36]	@ (8014654 <CheckCRC+0xb0>)
 801462e:	4b0a      	ldr	r3, [pc, #40]	@ (8014658 <CheckCRC+0xb4>)
 8014630:	2185      	movs	r1, #133	@ 0x85
 8014632:	0018      	movs	r0, r3
 8014634:	f7ff fdf6 	bl	8014224 <errorHandler>
		return false;
 8014638:	2300      	movs	r3, #0
 801463a:	e000      	b.n	801463e <CheckCRC+0x9a>
	}
	return true;
 801463c:	2301      	movs	r3, #1
}
 801463e:	0018      	movs	r0, r3
 8014640:	46bd      	mov	sp, r7
 8014642:	b005      	add	sp, #20
 8014644:	bd90      	pop	{r4, r7, pc}
 8014646:	46c0      	nop			@ (mov r8, r8)
 8014648:	0802e304 	.word	0x0802e304
 801464c:	0802e32c 	.word	0x0802e32c
 8014650:	0802e330 	.word	0x0802e330
 8014654:	0802e35c 	.word	0x0802e35c
 8014658:	0802ea0c 	.word	0x0802ea0c

0801465c <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 801465c:	b580      	push	{r7, lr}
 801465e:	b084      	sub	sp, #16
 8014660:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8014662:	1dbb      	adds	r3, r7, #6
 8014664:	2289      	movs	r2, #137	@ 0x89
 8014666:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8014668:	1dbb      	adds	r3, r7, #6
 801466a:	2201      	movs	r2, #1
 801466c:	0019      	movs	r1, r3
 801466e:	2044      	movs	r0, #68	@ 0x44
 8014670:	f7ff fe14 	bl	801429c <WriteRegister>
	HAL_Delay(30);
 8014674:	201e      	movs	r0, #30
 8014676:	f000 fa6f 	bl	8014b58 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 801467a:	4b14      	ldr	r3, [pc, #80]	@ (80146cc <HIDS_DeviceConnected+0x70>)
 801467c:	2206      	movs	r2, #6
 801467e:	0019      	movs	r1, r3
 8014680:	2044      	movs	r0, #68	@ 0x44
 8014682:	f7ff fde9 	bl	8014258 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8014686:	1dfb      	adds	r3, r7, #7
 8014688:	2200      	movs	r2, #0
 801468a:	701a      	strb	r2, [r3, #0]
 801468c:	e011      	b.n	80146b2 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 801468e:	1dfb      	adds	r3, r7, #7
 8014690:	7818      	ldrb	r0, [r3, #0]
 8014692:	1dfb      	adds	r3, r7, #7
 8014694:	781b      	ldrb	r3, [r3, #0]
 8014696:	4a0d      	ldr	r2, [pc, #52]	@ (80146cc <HIDS_DeviceConnected+0x70>)
 8014698:	5cd3      	ldrb	r3, [r2, r3]
 801469a:	4a0d      	ldr	r2, [pc, #52]	@ (80146d0 <HIDS_DeviceConnected+0x74>)
 801469c:	490d      	ldr	r1, [pc, #52]	@ (80146d4 <HIDS_DeviceConnected+0x78>)
 801469e:	9300      	str	r3, [sp, #0]
 80146a0:	0003      	movs	r3, r0
 80146a2:	2002      	movs	r0, #2
 80146a4:	f7ff fcd6 	bl	8014054 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80146a8:	1dfb      	adds	r3, r7, #7
 80146aa:	781a      	ldrb	r2, [r3, #0]
 80146ac:	1dfb      	adds	r3, r7, #7
 80146ae:	3201      	adds	r2, #1
 80146b0:	701a      	strb	r2, [r3, #0]
 80146b2:	1dfb      	adds	r3, r7, #7
 80146b4:	781b      	ldrb	r3, [r3, #0]
 80146b6:	2b05      	cmp	r3, #5
 80146b8:	d9e9      	bls.n	801468e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 80146ba:	4b04      	ldr	r3, [pc, #16]	@ (80146cc <HIDS_DeviceConnected+0x70>)
 80146bc:	0018      	movs	r0, r3
 80146be:	f7ff ff71 	bl	80145a4 <CheckCRC>
 80146c2:	0003      	movs	r3, r0
}
 80146c4:	0018      	movs	r0, r3
 80146c6:	46bd      	mov	sp, r7
 80146c8:	b002      	add	sp, #8
 80146ca:	bd80      	pop	{r7, pc}
 80146cc:	200024a8 	.word	0x200024a8
 80146d0:	0802e374 	.word	0x0802e374
 80146d4:	0802e300 	.word	0x0802e300

080146d8 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 80146d8:	b580      	push	{r7, lr}
 80146da:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 80146dc:	4b04      	ldr	r3, [pc, #16]	@ (80146f0 <HIDS_MeasurementReady+0x18>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	0018      	movs	r0, r3
 80146e2:	f7ff fc61 	bl	8013fa8 <TimestampIsReached>
 80146e6:	0003      	movs	r3, r0
}
 80146e8:	0018      	movs	r0, r3
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}
 80146ee:	46c0      	nop			@ (mov r8, r8)
 80146f0:	200000f4 	.word	0x200000f4

080146f4 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b084      	sub	sp, #16
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
 80146fc:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for accurate sgp40 measurement.
  if(MeasurementDone) return true;
 80146fe:	4b41      	ldr	r3, [pc, #260]	@ (8014804 <HIDS_GetMeasurementValues+0x110>)
 8014700:	781b      	ldrb	r3, [r3, #0]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d001      	beq.n	801470a <HIDS_GetMeasurementValues+0x16>
 8014706:	2301      	movs	r3, #1
 8014708:	e077      	b.n	80147fa <HIDS_GetMeasurementValues+0x106>
  if(!HIDS_MeasurementReady()) return false;
 801470a:	f7ff ffe5 	bl	80146d8 <HIDS_MeasurementReady>
 801470e:	0003      	movs	r3, r0
 8014710:	001a      	movs	r2, r3
 8014712:	2301      	movs	r3, #1
 8014714:	4053      	eors	r3, r2
 8014716:	b2db      	uxtb	r3, r3
 8014718:	2b00      	cmp	r3, #0
 801471a:	d001      	beq.n	8014720 <HIDS_GetMeasurementValues+0x2c>
 801471c:	2300      	movs	r3, #0
 801471e:	e06c      	b.n	80147fa <HIDS_GetMeasurementValues+0x106>
  float currentTemperature;
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];
  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 8014720:	4b39      	ldr	r3, [pc, #228]	@ (8014808 <HIDS_GetMeasurementValues+0x114>)
 8014722:	2206      	movs	r2, #6
 8014724:	0019      	movs	r1, r3
 8014726:	2044      	movs	r0, #68	@ 0x44
 8014728:	f7ff fd96 	bl	8014258 <ReadRegister>
 801472c:	0003      	movs	r3, r0
 801472e:	001a      	movs	r2, r3
 8014730:	2301      	movs	r3, #1
 8014732:	4053      	eors	r3, r2
 8014734:	b2db      	uxtb	r3, r3
 8014736:	2b00      	cmp	r3, #0
 8014738:	d005      	beq.n	8014746 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 801473a:	4a34      	ldr	r2, [pc, #208]	@ (801480c <HIDS_GetMeasurementValues+0x118>)
 801473c:	4b34      	ldr	r3, [pc, #208]	@ (8014810 <HIDS_GetMeasurementValues+0x11c>)
 801473e:	0019      	movs	r1, r3
 8014740:	2001      	movs	r0, #1
 8014742:	f7ff fc87 	bl	8014054 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 8014746:	4b30      	ldr	r3, [pc, #192]	@ (8014808 <HIDS_GetMeasurementValues+0x114>)
 8014748:	0018      	movs	r0, r3
 801474a:	f7ff ff2b 	bl	80145a4 <CheckCRC>
 801474e:	0003      	movs	r3, r0
 8014750:	001a      	movs	r2, r3
 8014752:	2301      	movs	r3, #1
 8014754:	4053      	eors	r3, r2
 8014756:	b2db      	uxtb	r3, r3
 8014758:	2b00      	cmp	r3, #0
 801475a:	d001      	beq.n	8014760 <HIDS_GetMeasurementValues+0x6c>
		Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
*/
		return false;
 801475c:	2300      	movs	r3, #0
 801475e:	e04c      	b.n	80147fa <HIDS_GetMeasurementValues+0x106>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 8014760:	4b29      	ldr	r3, [pc, #164]	@ (8014808 <HIDS_GetMeasurementValues+0x114>)
 8014762:	781b      	ldrb	r3, [r3, #0]
 8014764:	021b      	lsls	r3, r3, #8
 8014766:	4a28      	ldr	r2, [pc, #160]	@ (8014808 <HIDS_GetMeasurementValues+0x114>)
 8014768:	7852      	ldrb	r2, [r2, #1]
 801476a:	4313      	orrs	r3, r2
 801476c:	22af      	movs	r2, #175	@ 0xaf
 801476e:	4353      	muls	r3, r2
 8014770:	0018      	movs	r0, r3
 8014772:	f7ef f83d 	bl	80037f0 <__aeabi_i2d>
 8014776:	2200      	movs	r2, #0
 8014778:	4b26      	ldr	r3, [pc, #152]	@ (8014814 <HIDS_GetMeasurementValues+0x120>)
 801477a:	f7ed fcb1 	bl	80020e0 <__aeabi_ddiv>
 801477e:	0002      	movs	r2, r0
 8014780:	000b      	movs	r3, r1
 8014782:	0010      	movs	r0, r2
 8014784:	0019      	movs	r1, r3
 8014786:	f7ef f8cd 	bl	8003924 <__aeabi_d2f>
 801478a:	1c03      	adds	r3, r0, #0
 801478c:	60fb      	str	r3, [r7, #12]
	currentTemperature -= 45;
 801478e:	4922      	ldr	r1, [pc, #136]	@ (8014818 <HIDS_GetMeasurementValues+0x124>)
 8014790:	68f8      	ldr	r0, [r7, #12]
 8014792:	f7ec fdaf 	bl	80012f4 <__aeabi_fsub>
 8014796:	1c03      	adds	r3, r0, #0
 8014798:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 801479a:	4b1b      	ldr	r3, [pc, #108]	@ (8014808 <HIDS_GetMeasurementValues+0x114>)
 801479c:	78db      	ldrb	r3, [r3, #3]
 801479e:	021b      	lsls	r3, r3, #8
 80147a0:	4a19      	ldr	r2, [pc, #100]	@ (8014808 <HIDS_GetMeasurementValues+0x114>)
 80147a2:	7912      	ldrb	r2, [r2, #4]
 80147a4:	431a      	orrs	r2, r3
 80147a6:	0013      	movs	r3, r2
 80147a8:	015b      	lsls	r3, r3, #5
 80147aa:	1a9b      	subs	r3, r3, r2
 80147ac:	009b      	lsls	r3, r3, #2
 80147ae:	189b      	adds	r3, r3, r2
 80147b0:	0018      	movs	r0, r3
 80147b2:	f7ef f81d 	bl	80037f0 <__aeabi_i2d>
 80147b6:	2200      	movs	r2, #0
 80147b8:	4b16      	ldr	r3, [pc, #88]	@ (8014814 <HIDS_GetMeasurementValues+0x120>)
 80147ba:	f7ed fc91 	bl	80020e0 <__aeabi_ddiv>
 80147be:	0002      	movs	r2, r0
 80147c0:	000b      	movs	r3, r1
 80147c2:	0010      	movs	r0, r2
 80147c4:	0019      	movs	r1, r3
 80147c6:	f7ef f8ad 	bl	8003924 <__aeabi_d2f>
 80147ca:	1c03      	adds	r3, r0, #0
 80147cc:	60bb      	str	r3, [r7, #8]
	currentHumidity -= 6;
 80147ce:	4913      	ldr	r1, [pc, #76]	@ (801481c <HIDS_GetMeasurementValues+0x128>)
 80147d0:	68b8      	ldr	r0, [r7, #8]
 80147d2:	f7ec fd8f 	bl	80012f4 <__aeabi_fsub>
 80147d6:	1c03      	adds	r3, r0, #0
 80147d8:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	68fa      	ldr	r2, [r7, #12]
 80147de:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	68ba      	ldr	r2, [r7, #8]
 80147e4:	601a      	str	r2, [r3, #0]

   SGP_SetHT(temperature, humidity);
 80147e6:	687a      	ldr	r2, [r7, #4]
 80147e8:	683b      	ldr	r3, [r7, #0]
 80147ea:	0011      	movs	r1, r2
 80147ec:	0018      	movs	r0, r3
 80147ee:	f7fc ff27 	bl	8011640 <SGP_SetHT>

//   measurements = 0;
   MeasurementDone = true;
 80147f2:	4b04      	ldr	r3, [pc, #16]	@ (8014804 <HIDS_GetMeasurementValues+0x110>)
 80147f4:	2201      	movs	r2, #1
 80147f6:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 80147f8:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 80147fa:	0018      	movs	r0, r3
 80147fc:	46bd      	mov	sp, r7
 80147fe:	b004      	add	sp, #16
 8014800:	bd80      	pop	{r7, pc}
 8014802:	46c0      	nop			@ (mov r8, r8)
 8014804:	200024bc 	.word	0x200024bc
 8014808:	200024b0 	.word	0x200024b0
 801480c:	0802e394 	.word	0x0802e394
 8014810:	0802e32c 	.word	0x0802e32c
 8014814:	40efffe0 	.word	0x40efffe0
 8014818:	42340000 	.word	0x42340000
 801481c:	40c00000 	.word	0x40c00000

08014820 <ResetHIDSresults>:

void ResetHIDSresults() {
 8014820:	b580      	push	{r7, lr}
 8014822:	af00      	add	r7, sp, #0
  humid = 0.0;
 8014824:	4b04      	ldr	r3, [pc, #16]	@ (8014838 <ResetHIDSresults+0x18>)
 8014826:	2200      	movs	r2, #0
 8014828:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 801482a:	4b04      	ldr	r3, [pc, #16]	@ (801483c <ResetHIDSresults+0x1c>)
 801482c:	2200      	movs	r2, #0
 801482e:	601a      	str	r2, [r3, #0]
}
 8014830:	46c0      	nop			@ (mov r8, r8)
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}
 8014836:	46c0      	nop			@ (mov r8, r8)
 8014838:	20002498 	.word	0x20002498
 801483c:	2000249c 	.word	0x2000249c

08014840 <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 8014840:	b5b0      	push	{r4, r5, r7, lr}
 8014842:	b084      	sub	sp, #16
 8014844:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 8014846:	4b69      	ldr	r3, [pc, #420]	@ (80149ec <HIDS_Upkeep+0x1ac>)
 8014848:	781b      	ldrb	r3, [r3, #0]
 801484a:	2b06      	cmp	r3, #6
 801484c:	d900      	bls.n	8014850 <HIDS_Upkeep+0x10>
 801484e:	e0bd      	b.n	80149cc <HIDS_Upkeep+0x18c>
 8014850:	009a      	lsls	r2, r3, #2
 8014852:	4b67      	ldr	r3, [pc, #412]	@ (80149f0 <HIDS_Upkeep+0x1b0>)
 8014854:	18d3      	adds	r3, r2, r3
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 801485a:	4a66      	ldr	r2, [pc, #408]	@ (80149f4 <HIDS_Upkeep+0x1b4>)
 801485c:	4b66      	ldr	r3, [pc, #408]	@ (80149f8 <HIDS_Upkeep+0x1b8>)
 801485e:	0019      	movs	r1, r3
 8014860:	2003      	movs	r0, #3
 8014862:	f7ff fbf7 	bl	8014054 <CreateLine>
      break;
 8014866:	e0bc      	b.n	80149e2 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_INIT:
      ResetHIDSresults();
 8014868:	f7ff ffda 	bl	8014820 <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 801486c:	4b5f      	ldr	r3, [pc, #380]	@ (80149ec <HIDS_Upkeep+0x1ac>)
 801486e:	2201      	movs	r2, #1
 8014870:	701a      	strb	r2, [r3, #0]
      break;
 8014872:	e0b6      	b.n	80149e2 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_START_MEASUREMENTS:
      if (getSensorLock() != FREE) {
 8014874:	f7f9 fbd4 	bl	800e020 <getSensorLock>
 8014878:	1e03      	subs	r3, r0, #0
 801487a:	d000      	beq.n	801487e <HIDS_Upkeep+0x3e>
 801487c:	e0aa      	b.n	80149d4 <HIDS_Upkeep+0x194>
        break;
      }
      setSensorLock(HIDS);
 801487e:	2001      	movs	r0, #1
 8014880:	f7f9 fbba 	bl	800dff8 <setSensorLock>
      SetMeasurementIndicator();
 8014884:	f7fe f938 	bl	8012af8 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 8014888:	f7ff fe3c 	bl	8014504 <HIDS_StartMeasurement>
      HAL_Delay(10); // wait for deferred DMA transfers
 801488c:	200a      	movs	r0, #10
 801488e:	f000 f963 	bl	8014b58 <HAL_Delay>
      setSensorLock(FREE);
 8014892:	2000      	movs	r0, #0
 8014894:	f7f9 fbb0 	bl	800dff8 <setSensorLock>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 8014898:	4b54      	ldr	r3, [pc, #336]	@ (80149ec <HIDS_Upkeep+0x1ac>)
 801489a:	2202      	movs	r2, #2
 801489c:	701a      	strb	r2, [r3, #0]
      break;
 801489e:	e0a0      	b.n	80149e2 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
      if (getSensorLock() != FREE) {
 80148a0:	f7f9 fbbe 	bl	800e020 <getSensorLock>
 80148a4:	1e03      	subs	r3, r0, #0
 80148a6:	d000      	beq.n	80148aa <HIDS_Upkeep+0x6a>
 80148a8:	e096      	b.n	80149d8 <HIDS_Upkeep+0x198>
        break;
      }
      setSensorLock(HIDS);
 80148aa:	2001      	movs	r0, #1
 80148ac:	f7f9 fba4 	bl	800dff8 <setSensorLock>
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 80148b0:	4a52      	ldr	r2, [pc, #328]	@ (80149fc <HIDS_Upkeep+0x1bc>)
 80148b2:	4b53      	ldr	r3, [pc, #332]	@ (8014a00 <HIDS_Upkeep+0x1c0>)
 80148b4:	0011      	movs	r1, r2
 80148b6:	0018      	movs	r0, r3
 80148b8:	f7ff ff1c 	bl	80146f4 <HIDS_GetMeasurementValues>
 80148bc:	1e03      	subs	r3, r0, #0
 80148be:	d002      	beq.n	80148c6 <HIDS_Upkeep+0x86>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 80148c0:	4b4a      	ldr	r3, [pc, #296]	@ (80149ec <HIDS_Upkeep+0x1ac>)
 80148c2:	2203      	movs	r2, #3
 80148c4:	701a      	strb	r2, [r3, #0]
      }
      HAL_Delay(10); // wait for deferred DMA transfers
 80148c6:	200a      	movs	r0, #10
 80148c8:	f000 f946 	bl	8014b58 <HAL_Delay>
      setSensorLock(FREE);
 80148cc:	2000      	movs	r0, #0
 80148ce:	f7f9 fb93 	bl	800dff8 <setSensorLock>
      break;
 80148d2:	e086      	b.n	80149e2 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_PROCESS_RESULTS:
      Info("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 80148d4:	4b4a      	ldr	r3, [pc, #296]	@ (8014a00 <HIDS_Upkeep+0x1c0>)
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	1c18      	adds	r0, r3, #0
 80148da:	f7ee ffdb 	bl	8003894 <__aeabi_f2d>
 80148de:	0004      	movs	r4, r0
 80148e0:	000d      	movs	r5, r1
 80148e2:	4b46      	ldr	r3, [pc, #280]	@ (80149fc <HIDS_Upkeep+0x1bc>)
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	1c18      	adds	r0, r3, #0
 80148e8:	f7ee ffd4 	bl	8003894 <__aeabi_f2d>
 80148ec:	0002      	movs	r2, r0
 80148ee:	000b      	movs	r3, r1
 80148f0:	4844      	ldr	r0, [pc, #272]	@ (8014a04 <HIDS_Upkeep+0x1c4>)
 80148f2:	4945      	ldr	r1, [pc, #276]	@ (8014a08 <HIDS_Upkeep+0x1c8>)
 80148f4:	9202      	str	r2, [sp, #8]
 80148f6:	9303      	str	r3, [sp, #12]
 80148f8:	9400      	str	r4, [sp, #0]
 80148fa:	9501      	str	r5, [sp, #4]
 80148fc:	0002      	movs	r2, r0
 80148fe:	2002      	movs	r0, #2
 8014900:	f7ff fba8 	bl	8014054 <CreateLine>
      setHIDS(temp, humid);
 8014904:	4b3d      	ldr	r3, [pc, #244]	@ (80149fc <HIDS_Upkeep+0x1bc>)
 8014906:	681a      	ldr	r2, [r3, #0]
 8014908:	4b3d      	ldr	r3, [pc, #244]	@ (8014a00 <HIDS_Upkeep+0x1c0>)
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	1c19      	adds	r1, r3, #0
 801490e:	1c10      	adds	r0, r2, #0
 8014910:	f7f0 f8e6 	bl	8004ae0 <setHIDS>
      ResetMeasurementIndicator();
 8014914:	f7fe f908 	bl	8012b28 <ResetMeasurementIndicator>
      if (((temp - HIDS_DewPointCalculation(&humid, &temp)) < 1.0) && ((getPosixTime() - HIDS_LastHeaterInRTC) > 900)) {
 8014918:	4b38      	ldr	r3, [pc, #224]	@ (80149fc <HIDS_Upkeep+0x1bc>)
 801491a:	681c      	ldr	r4, [r3, #0]
 801491c:	4a37      	ldr	r2, [pc, #220]	@ (80149fc <HIDS_Upkeep+0x1bc>)
 801491e:	4b38      	ldr	r3, [pc, #224]	@ (8014a00 <HIDS_Upkeep+0x1c0>)
 8014920:	0011      	movs	r1, r2
 8014922:	0018      	movs	r0, r3
 8014924:	f7ff fd34 	bl	8014390 <HIDS_DewPointCalculation>
 8014928:	1c03      	adds	r3, r0, #0
 801492a:	1c19      	adds	r1, r3, #0
 801492c:	1c20      	adds	r0, r4, #0
 801492e:	f7ec fce1 	bl	80012f4 <__aeabi_fsub>
 8014932:	1c03      	adds	r3, r0, #0
 8014934:	21fe      	movs	r1, #254	@ 0xfe
 8014936:	0589      	lsls	r1, r1, #22
 8014938:	1c18      	adds	r0, r3, #0
 801493a:	f7eb fdf9 	bl	8000530 <__aeabi_fcmplt>
 801493e:	1e03      	subs	r3, r0, #0
 8014940:	d023      	beq.n	801498a <HIDS_Upkeep+0x14a>
 8014942:	f7f5 fd65 	bl	800a410 <getPosixTime>
 8014946:	0002      	movs	r2, r0
 8014948:	4b30      	ldr	r3, [pc, #192]	@ (8014a0c <HIDS_Upkeep+0x1cc>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	1ad2      	subs	r2, r2, r3
 801494e:	23e1      	movs	r3, #225	@ 0xe1
 8014950:	009b      	lsls	r3, r3, #2
 8014952:	429a      	cmp	r2, r3
 8014954:	d919      	bls.n	801498a <HIDS_Upkeep+0x14a>
        Info("wsenHIDS The dew point is approaching, heater is started");
 8014956:	4a2e      	ldr	r2, [pc, #184]	@ (8014a10 <HIDS_Upkeep+0x1d0>)
 8014958:	4b2b      	ldr	r3, [pc, #172]	@ (8014a08 <HIDS_Upkeep+0x1c8>)
 801495a:	0019      	movs	r1, r3
 801495c:	2002      	movs	r0, #2
 801495e:	f7ff fb79 	bl	8014054 <CreateLine>
        if (getSensorLock() != FREE) {
 8014962:	f7f9 fb5d 	bl	800e020 <getSensorLock>
 8014966:	1e03      	subs	r3, r0, #0
 8014968:	d138      	bne.n	80149dc <HIDS_Upkeep+0x19c>
          break;
        }
        HIDS_EnableHeater();
 801496a:	f7ff fd83 	bl	8014474 <HIDS_EnableHeater>
        HAL_Delay(10); // wait for deferred DMA transfers
 801496e:	200a      	movs	r0, #10
 8014970:	f000 f8f2 	bl	8014b58 <HAL_Delay>
        setSensorLock(FREE);
 8014974:	2000      	movs	r0, #0
 8014976:	f7f9 fb3f 	bl	800dff8 <setSensorLock>
        HIDSTimeStamp = HAL_GetTick() + 12000;
 801497a:	f000 f8e3 	bl	8014b44 <HAL_GetTick>
 801497e:	0003      	movs	r3, r0
 8014980:	4a24      	ldr	r2, [pc, #144]	@ (8014a14 <HIDS_Upkeep+0x1d4>)
 8014982:	189a      	adds	r2, r3, r2
 8014984:	4b24      	ldr	r3, [pc, #144]	@ (8014a18 <HIDS_Upkeep+0x1d8>)
 8014986:	601a      	str	r2, [r3, #0]
 8014988:	e011      	b.n	80149ae <HIDS_Upkeep+0x16e>
      }
      else {
        HIDSTimeStamp = HAL_GetTick() + ((Check_USB_PowerOn() || userToggle)?10000:1000);  // about every ten seconds when power is plugged
 801498a:	f000 f8db 	bl	8014b44 <HAL_GetTick>
 801498e:	0004      	movs	r4, r0
 8014990:	f7f5 f900 	bl	8009b94 <Check_USB_PowerOn>
 8014994:	1e03      	subs	r3, r0, #0
 8014996:	d103      	bne.n	80149a0 <HIDS_Upkeep+0x160>
 8014998:	4b20      	ldr	r3, [pc, #128]	@ (8014a1c <HIDS_Upkeep+0x1dc>)
 801499a:	781b      	ldrb	r3, [r3, #0]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d001      	beq.n	80149a4 <HIDS_Upkeep+0x164>
 80149a0:	4b1f      	ldr	r3, [pc, #124]	@ (8014a20 <HIDS_Upkeep+0x1e0>)
 80149a2:	e001      	b.n	80149a8 <HIDS_Upkeep+0x168>
 80149a4:	23fa      	movs	r3, #250	@ 0xfa
 80149a6:	009b      	lsls	r3, r3, #2
 80149a8:	191a      	adds	r2, r3, r4
 80149aa:	4b1b      	ldr	r3, [pc, #108]	@ (8014a18 <HIDS_Upkeep+0x1d8>)
 80149ac:	601a      	str	r2, [r3, #0]
      }
      HIDSState = HIDS_STATE_WAIT;
 80149ae:	4b0f      	ldr	r3, [pc, #60]	@ (80149ec <HIDS_Upkeep+0x1ac>)
 80149b0:	2206      	movs	r2, #6
 80149b2:	701a      	strb	r2, [r3, #0]
      break;
 80149b4:	e015      	b.n	80149e2 <HIDS_Upkeep+0x1a2>

    case HIDS_STATE_WAIT:
      if(TimestampIsReached(HIDSTimeStamp)) {
 80149b6:	4b18      	ldr	r3, [pc, #96]	@ (8014a18 <HIDS_Upkeep+0x1d8>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	0018      	movs	r0, r3
 80149bc:	f7ff faf4 	bl	8013fa8 <TimestampIsReached>
 80149c0:	1e03      	subs	r3, r0, #0
 80149c2:	d00d      	beq.n	80149e0 <HIDS_Upkeep+0x1a0>
        HIDSState = HIDS_STATE_INIT;
 80149c4:	4b09      	ldr	r3, [pc, #36]	@ (80149ec <HIDS_Upkeep+0x1ac>)
 80149c6:	2200      	movs	r2, #0
 80149c8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80149ca:	e009      	b.n	80149e0 <HIDS_Upkeep+0x1a0>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 80149cc:	4b07      	ldr	r3, [pc, #28]	@ (80149ec <HIDS_Upkeep+0x1ac>)
 80149ce:	2200      	movs	r2, #0
 80149d0:	701a      	strb	r2, [r3, #0]
      break;
 80149d2:	e006      	b.n	80149e2 <HIDS_Upkeep+0x1a2>
        break;
 80149d4:	46c0      	nop			@ (mov r8, r8)
 80149d6:	e004      	b.n	80149e2 <HIDS_Upkeep+0x1a2>
        break;
 80149d8:	46c0      	nop			@ (mov r8, r8)
 80149da:	e002      	b.n	80149e2 <HIDS_Upkeep+0x1a2>
          break;
 80149dc:	46c0      	nop			@ (mov r8, r8)
 80149de:	e000      	b.n	80149e2 <HIDS_Upkeep+0x1a2>
      break;
 80149e0:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 80149e2:	4b02      	ldr	r3, [pc, #8]	@ (80149ec <HIDS_Upkeep+0x1ac>)
 80149e4:	781b      	ldrb	r3, [r3, #0]
}
 80149e6:	0018      	movs	r0, r3
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bdb0      	pop	{r4, r5, r7, pc}
 80149ec:	200024c4 	.word	0x200024c4
 80149f0:	0802e9f0 	.word	0x0802e9f0
 80149f4:	0802e3c8 	.word	0x0802e3c8
 80149f8:	0802e3fc 	.word	0x0802e3fc
 80149fc:	2000249c 	.word	0x2000249c
 8014a00:	20002498 	.word	0x20002498
 8014a04:	0802e400 	.word	0x0802e400
 8014a08:	0802e300 	.word	0x0802e300
 8014a0c:	200024b8 	.word	0x200024b8
 8014a10:	0802e434 	.word	0x0802e434
 8014a14:	00002ee0 	.word	0x00002ee0
 8014a18:	200024c0 	.word	0x200024c0
 8014a1c:	20002102 	.word	0x20002102
 8014a20:	00002710 	.word	0x00002710

08014a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8014a24:	480d      	ldr	r0, [pc, #52]	@ (8014a5c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8014a26:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8014a28:	f7fe ff18 	bl	801385c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8014a2c:	480c      	ldr	r0, [pc, #48]	@ (8014a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8014a2e:	490d      	ldr	r1, [pc, #52]	@ (8014a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8014a30:	4a0d      	ldr	r2, [pc, #52]	@ (8014a68 <LoopForever+0xe>)
  movs r3, #0
 8014a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8014a34:	e002      	b.n	8014a3c <LoopCopyDataInit>

08014a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8014a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8014a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8014a3a:	3304      	adds	r3, #4

08014a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8014a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8014a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8014a40:	d3f9      	bcc.n	8014a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8014a42:	4a0a      	ldr	r2, [pc, #40]	@ (8014a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8014a44:	4c0a      	ldr	r4, [pc, #40]	@ (8014a70 <LoopForever+0x16>)
  movs r3, #0
 8014a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014a48:	e001      	b.n	8014a4e <LoopFillZerobss>

08014a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8014a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8014a4c:	3204      	adds	r2, #4

08014a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8014a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8014a50:	d3fb      	bcc.n	8014a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8014a52:	f011 fee1 	bl	8026818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014a56:	f7f8 f9bf 	bl	800cdd8 <main>

08014a5a <LoopForever>:

LoopForever:
    b LoopForever
 8014a5a:	e7fe      	b.n	8014a5a <LoopForever>
   ldr   r0, =_estack
 8014a5c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8014a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8014a64:	2000043c 	.word	0x2000043c
  ldr r2, =_sidata
 8014a68:	0802f3d8 	.word	0x0802f3d8
  ldr r2, =_sbss
 8014a6c:	2000043c 	.word	0x2000043c
  ldr r4, =_ebss
 8014a70:	200038cc 	.word	0x200038cc

08014a74 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014a74:	e7fe      	b.n	8014a74 <ADC1_COMP_IRQHandler>
	...

08014a78 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b082      	sub	sp, #8
 8014a7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8014a7e:	1dfb      	adds	r3, r7, #7
 8014a80:	2200      	movs	r2, #0
 8014a82:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8014a84:	4b0b      	ldr	r3, [pc, #44]	@ (8014ab4 <HAL_Init+0x3c>)
 8014a86:	681a      	ldr	r2, [r3, #0]
 8014a88:	4b0a      	ldr	r3, [pc, #40]	@ (8014ab4 <HAL_Init+0x3c>)
 8014a8a:	2140      	movs	r1, #64	@ 0x40
 8014a8c:	430a      	orrs	r2, r1
 8014a8e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8014a90:	2003      	movs	r0, #3
 8014a92:	f000 f811 	bl	8014ab8 <HAL_InitTick>
 8014a96:	1e03      	subs	r3, r0, #0
 8014a98:	d003      	beq.n	8014aa2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8014a9a:	1dfb      	adds	r3, r7, #7
 8014a9c:	2201      	movs	r2, #1
 8014a9e:	701a      	strb	r2, [r3, #0]
 8014aa0:	e001      	b.n	8014aa6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8014aa2:	f7fe fd8f 	bl	80135c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8014aa6:	1dfb      	adds	r3, r7, #7
 8014aa8:	781b      	ldrb	r3, [r3, #0]
}
 8014aaa:	0018      	movs	r0, r3
 8014aac:	46bd      	mov	sp, r7
 8014aae:	b002      	add	sp, #8
 8014ab0:	bd80      	pop	{r7, pc}
 8014ab2:	46c0      	nop			@ (mov r8, r8)
 8014ab4:	40022000 	.word	0x40022000

08014ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8014ab8:	b590      	push	{r4, r7, lr}
 8014aba:	b083      	sub	sp, #12
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8014ac0:	4b14      	ldr	r3, [pc, #80]	@ (8014b14 <HAL_InitTick+0x5c>)
 8014ac2:	681c      	ldr	r4, [r3, #0]
 8014ac4:	4b14      	ldr	r3, [pc, #80]	@ (8014b18 <HAL_InitTick+0x60>)
 8014ac6:	781b      	ldrb	r3, [r3, #0]
 8014ac8:	0019      	movs	r1, r3
 8014aca:	23fa      	movs	r3, #250	@ 0xfa
 8014acc:	0098      	lsls	r0, r3, #2
 8014ace:	f7eb fb69 	bl	80001a4 <__udivsi3>
 8014ad2:	0003      	movs	r3, r0
 8014ad4:	0019      	movs	r1, r3
 8014ad6:	0020      	movs	r0, r4
 8014ad8:	f7eb fb64 	bl	80001a4 <__udivsi3>
 8014adc:	0003      	movs	r3, r0
 8014ade:	0018      	movs	r0, r3
 8014ae0:	f000 fcfd 	bl	80154de <HAL_SYSTICK_Config>
 8014ae4:	1e03      	subs	r3, r0, #0
 8014ae6:	d001      	beq.n	8014aec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8014ae8:	2301      	movs	r3, #1
 8014aea:	e00f      	b.n	8014b0c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	2b03      	cmp	r3, #3
 8014af0:	d80b      	bhi.n	8014b0a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8014af2:	6879      	ldr	r1, [r7, #4]
 8014af4:	2301      	movs	r3, #1
 8014af6:	425b      	negs	r3, r3
 8014af8:	2200      	movs	r2, #0
 8014afa:	0018      	movs	r0, r3
 8014afc:	f000 fcc6 	bl	801548c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8014b00:	4b06      	ldr	r3, [pc, #24]	@ (8014b1c <HAL_InitTick+0x64>)
 8014b02:	687a      	ldr	r2, [r7, #4]
 8014b04:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8014b06:	2300      	movs	r3, #0
 8014b08:	e000      	b.n	8014b0c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8014b0a:	2301      	movs	r3, #1
}
 8014b0c:	0018      	movs	r0, r3
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	b003      	add	sp, #12
 8014b12:	bd90      	pop	{r4, r7, pc}
 8014b14:	200000ec 	.word	0x200000ec
 8014b18:	20000100 	.word	0x20000100
 8014b1c:	200000fc 	.word	0x200000fc

08014b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8014b24:	4b05      	ldr	r3, [pc, #20]	@ (8014b3c <HAL_IncTick+0x1c>)
 8014b26:	781b      	ldrb	r3, [r3, #0]
 8014b28:	001a      	movs	r2, r3
 8014b2a:	4b05      	ldr	r3, [pc, #20]	@ (8014b40 <HAL_IncTick+0x20>)
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	18d2      	adds	r2, r2, r3
 8014b30:	4b03      	ldr	r3, [pc, #12]	@ (8014b40 <HAL_IncTick+0x20>)
 8014b32:	601a      	str	r2, [r3, #0]
}
 8014b34:	46c0      	nop			@ (mov r8, r8)
 8014b36:	46bd      	mov	sp, r7
 8014b38:	bd80      	pop	{r7, pc}
 8014b3a:	46c0      	nop			@ (mov r8, r8)
 8014b3c:	20000100 	.word	0x20000100
 8014b40:	200024c8 	.word	0x200024c8

08014b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	af00      	add	r7, sp, #0
  return uwTick;
 8014b48:	4b02      	ldr	r3, [pc, #8]	@ (8014b54 <HAL_GetTick+0x10>)
 8014b4a:	681b      	ldr	r3, [r3, #0]
}
 8014b4c:	0018      	movs	r0, r3
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}
 8014b52:	46c0      	nop			@ (mov r8, r8)
 8014b54:	200024c8 	.word	0x200024c8

08014b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b084      	sub	sp, #16
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8014b60:	f7ff fff0 	bl	8014b44 <HAL_GetTick>
 8014b64:	0003      	movs	r3, r0
 8014b66:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	3301      	adds	r3, #1
 8014b70:	d005      	beq.n	8014b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8014b72:	4b0a      	ldr	r3, [pc, #40]	@ (8014b9c <HAL_Delay+0x44>)
 8014b74:	781b      	ldrb	r3, [r3, #0]
 8014b76:	001a      	movs	r2, r3
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	189b      	adds	r3, r3, r2
 8014b7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8014b7e:	46c0      	nop			@ (mov r8, r8)
 8014b80:	f7ff ffe0 	bl	8014b44 <HAL_GetTick>
 8014b84:	0002      	movs	r2, r0
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	1ad3      	subs	r3, r2, r3
 8014b8a:	68fa      	ldr	r2, [r7, #12]
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	d8f7      	bhi.n	8014b80 <HAL_Delay+0x28>
  {
  }
}
 8014b90:	46c0      	nop			@ (mov r8, r8)
 8014b92:	46c0      	nop			@ (mov r8, r8)
 8014b94:	46bd      	mov	sp, r7
 8014b96:	b004      	add	sp, #16
 8014b98:	bd80      	pop	{r7, pc}
 8014b9a:	46c0      	nop			@ (mov r8, r8)
 8014b9c:	20000100 	.word	0x20000100

08014ba0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8014ba4:	4b04      	ldr	r3, [pc, #16]	@ (8014bb8 <HAL_SuspendTick+0x18>)
 8014ba6:	681a      	ldr	r2, [r3, #0]
 8014ba8:	4b03      	ldr	r3, [pc, #12]	@ (8014bb8 <HAL_SuspendTick+0x18>)
 8014baa:	2102      	movs	r1, #2
 8014bac:	438a      	bics	r2, r1
 8014bae:	601a      	str	r2, [r3, #0]
}
 8014bb0:	46c0      	nop			@ (mov r8, r8)
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}
 8014bb6:	46c0      	nop			@ (mov r8, r8)
 8014bb8:	e000e010 	.word	0xe000e010

08014bbc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8014bc0:	4b04      	ldr	r3, [pc, #16]	@ (8014bd4 <HAL_ResumeTick+0x18>)
 8014bc2:	681a      	ldr	r2, [r3, #0]
 8014bc4:	4b03      	ldr	r3, [pc, #12]	@ (8014bd4 <HAL_ResumeTick+0x18>)
 8014bc6:	2102      	movs	r1, #2
 8014bc8:	430a      	orrs	r2, r1
 8014bca:	601a      	str	r2, [r3, #0]
}
 8014bcc:	46c0      	nop			@ (mov r8, r8)
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}
 8014bd2:	46c0      	nop			@ (mov r8, r8)
 8014bd4:	e000e010 	.word	0xe000e010

08014bd8 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8014bdc:	4b02      	ldr	r3, [pc, #8]	@ (8014be8 <HAL_GetUIDw0+0x10>)
 8014bde:	681b      	ldr	r3, [r3, #0]
}
 8014be0:	0018      	movs	r0, r3
 8014be2:	46bd      	mov	sp, r7
 8014be4:	bd80      	pop	{r7, pc}
 8014be6:	46c0      	nop			@ (mov r8, r8)
 8014be8:	1ff80050 	.word	0x1ff80050

08014bec <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8014bf0:	4b02      	ldr	r3, [pc, #8]	@ (8014bfc <HAL_GetUIDw1+0x10>)
 8014bf2:	681b      	ldr	r3, [r3, #0]
}
 8014bf4:	0018      	movs	r0, r3
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}
 8014bfa:	46c0      	nop			@ (mov r8, r8)
 8014bfc:	1ff80054 	.word	0x1ff80054

08014c00 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8014c00:	b580      	push	{r7, lr}
 8014c02:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8014c04:	4b02      	ldr	r3, [pc, #8]	@ (8014c10 <HAL_GetUIDw2+0x10>)
 8014c06:	681b      	ldr	r3, [r3, #0]
}
 8014c08:	0018      	movs	r0, r3
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bd80      	pop	{r7, pc}
 8014c0e:	46c0      	nop			@ (mov r8, r8)
 8014c10:	1ff80064 	.word	0x1ff80064

08014c14 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b082      	sub	sp, #8
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d101      	bne.n	8014c26 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8014c22:	2301      	movs	r3, #1
 8014c24:	e159      	b.n	8014eda <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d10a      	bne.n	8014c44 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	2200      	movs	r2, #0
 8014c32:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2250      	movs	r2, #80	@ 0x50
 8014c38:	2100      	movs	r1, #0
 8014c3a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	0018      	movs	r0, r3
 8014c40:	f7f6 f800 	bl	800ac44 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c48:	2210      	movs	r2, #16
 8014c4a:	4013      	ands	r3, r2
 8014c4c:	2b10      	cmp	r3, #16
 8014c4e:	d005      	beq.n	8014c5c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	689b      	ldr	r3, [r3, #8]
 8014c56:	2204      	movs	r2, #4
 8014c58:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8014c5a:	d00b      	beq.n	8014c74 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c60:	2210      	movs	r2, #16
 8014c62:	431a      	orrs	r2, r3
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	2250      	movs	r2, #80	@ 0x50
 8014c6c:	2100      	movs	r1, #0
 8014c6e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8014c70:	2301      	movs	r3, #1
 8014c72:	e132      	b.n	8014eda <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c78:	4a9a      	ldr	r2, [pc, #616]	@ (8014ee4 <HAL_ADC_Init+0x2d0>)
 8014c7a:	4013      	ands	r3, r2
 8014c7c:	2202      	movs	r2, #2
 8014c7e:	431a      	orrs	r2, r3
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	689b      	ldr	r3, [r3, #8]
 8014c8a:	2203      	movs	r2, #3
 8014c8c:	4013      	ands	r3, r2
 8014c8e:	2b01      	cmp	r3, #1
 8014c90:	d108      	bne.n	8014ca4 <HAL_ADC_Init+0x90>
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	2201      	movs	r2, #1
 8014c9a:	4013      	ands	r3, r2
 8014c9c:	2b01      	cmp	r3, #1
 8014c9e:	d101      	bne.n	8014ca4 <HAL_ADC_Init+0x90>
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	e000      	b.n	8014ca6 <HAL_ADC_Init+0x92>
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d149      	bne.n	8014d3e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	685a      	ldr	r2, [r3, #4]
 8014cae:	23c0      	movs	r3, #192	@ 0xc0
 8014cb0:	061b      	lsls	r3, r3, #24
 8014cb2:	429a      	cmp	r2, r3
 8014cb4:	d00b      	beq.n	8014cce <HAL_ADC_Init+0xba>
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	685a      	ldr	r2, [r3, #4]
 8014cba:	2380      	movs	r3, #128	@ 0x80
 8014cbc:	05db      	lsls	r3, r3, #23
 8014cbe:	429a      	cmp	r2, r3
 8014cc0:	d005      	beq.n	8014cce <HAL_ADC_Init+0xba>
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	685a      	ldr	r2, [r3, #4]
 8014cc6:	2380      	movs	r3, #128	@ 0x80
 8014cc8:	061b      	lsls	r3, r3, #24
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d111      	bne.n	8014cf2 <HAL_ADC_Init+0xde>
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	691a      	ldr	r2, [r3, #16]
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	0092      	lsls	r2, r2, #2
 8014cda:	0892      	lsrs	r2, r2, #2
 8014cdc:	611a      	str	r2, [r3, #16]
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	6919      	ldr	r1, [r3, #16]
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	685a      	ldr	r2, [r3, #4]
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	430a      	orrs	r2, r1
 8014cee:	611a      	str	r2, [r3, #16]
 8014cf0:	e014      	b.n	8014d1c <HAL_ADC_Init+0x108>
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	691a      	ldr	r2, [r3, #16]
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	0092      	lsls	r2, r2, #2
 8014cfe:	0892      	lsrs	r2, r2, #2
 8014d00:	611a      	str	r2, [r3, #16]
 8014d02:	4b79      	ldr	r3, [pc, #484]	@ (8014ee8 <HAL_ADC_Init+0x2d4>)
 8014d04:	681a      	ldr	r2, [r3, #0]
 8014d06:	4b78      	ldr	r3, [pc, #480]	@ (8014ee8 <HAL_ADC_Init+0x2d4>)
 8014d08:	4978      	ldr	r1, [pc, #480]	@ (8014eec <HAL_ADC_Init+0x2d8>)
 8014d0a:	400a      	ands	r2, r1
 8014d0c:	601a      	str	r2, [r3, #0]
 8014d0e:	4b76      	ldr	r3, [pc, #472]	@ (8014ee8 <HAL_ADC_Init+0x2d4>)
 8014d10:	6819      	ldr	r1, [r3, #0]
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	685a      	ldr	r2, [r3, #4]
 8014d16:	4b74      	ldr	r3, [pc, #464]	@ (8014ee8 <HAL_ADC_Init+0x2d4>)
 8014d18:	430a      	orrs	r2, r1
 8014d1a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	68da      	ldr	r2, [r3, #12]
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	2118      	movs	r1, #24
 8014d28:	438a      	bics	r2, r1
 8014d2a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	68d9      	ldr	r1, [r3, #12]
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	689a      	ldr	r2, [r3, #8]
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	430a      	orrs	r2, r1
 8014d3c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8014d3e:	4b6a      	ldr	r3, [pc, #424]	@ (8014ee8 <HAL_ADC_Init+0x2d4>)
 8014d40:	681a      	ldr	r2, [r3, #0]
 8014d42:	4b69      	ldr	r3, [pc, #420]	@ (8014ee8 <HAL_ADC_Init+0x2d4>)
 8014d44:	496a      	ldr	r1, [pc, #424]	@ (8014ef0 <HAL_ADC_Init+0x2dc>)
 8014d46:	400a      	ands	r2, r1
 8014d48:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8014d4a:	4b67      	ldr	r3, [pc, #412]	@ (8014ee8 <HAL_ADC_Init+0x2d4>)
 8014d4c:	6819      	ldr	r1, [r3, #0]
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d52:	065a      	lsls	r2, r3, #25
 8014d54:	4b64      	ldr	r3, [pc, #400]	@ (8014ee8 <HAL_ADC_Init+0x2d4>)
 8014d56:	430a      	orrs	r2, r1
 8014d58:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	689a      	ldr	r2, [r3, #8]
 8014d60:	2380      	movs	r3, #128	@ 0x80
 8014d62:	055b      	lsls	r3, r3, #21
 8014d64:	4013      	ands	r3, r2
 8014d66:	d108      	bne.n	8014d7a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	689a      	ldr	r2, [r3, #8]
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	2180      	movs	r1, #128	@ 0x80
 8014d74:	0549      	lsls	r1, r1, #21
 8014d76:	430a      	orrs	r2, r1
 8014d78:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	68da      	ldr	r2, [r3, #12]
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	495b      	ldr	r1, [pc, #364]	@ (8014ef4 <HAL_ADC_Init+0x2e0>)
 8014d86:	400a      	ands	r2, r1
 8014d88:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	68d9      	ldr	r1, [r3, #12]
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	691b      	ldr	r3, [r3, #16]
 8014d98:	2b02      	cmp	r3, #2
 8014d9a:	d101      	bne.n	8014da0 <HAL_ADC_Init+0x18c>
 8014d9c:	2304      	movs	r3, #4
 8014d9e:	e000      	b.n	8014da2 <HAL_ADC_Init+0x18e>
 8014da0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014da2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	2020      	movs	r0, #32
 8014da8:	5c1b      	ldrb	r3, [r3, r0]
 8014daa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8014dac:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	202c      	movs	r0, #44	@ 0x2c
 8014db2:	5c1b      	ldrb	r3, [r3, r0]
 8014db4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8014db6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8014dbc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	699b      	ldr	r3, [r3, #24]
 8014dc2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8014dc4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	69db      	ldr	r3, [r3, #28]
 8014dca:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8014dcc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	430a      	orrs	r2, r1
 8014dd4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014dda:	23c2      	movs	r3, #194	@ 0xc2
 8014ddc:	33ff      	adds	r3, #255	@ 0xff
 8014dde:	429a      	cmp	r2, r3
 8014de0:	d00b      	beq.n	8014dfa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	68d9      	ldr	r1, [r3, #12]
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8014df0:	431a      	orrs	r2, r3
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	430a      	orrs	r2, r1
 8014df8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	2221      	movs	r2, #33	@ 0x21
 8014dfe:	5c9b      	ldrb	r3, [r3, r2]
 8014e00:	2b01      	cmp	r3, #1
 8014e02:	d11a      	bne.n	8014e3a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2220      	movs	r2, #32
 8014e08:	5c9b      	ldrb	r3, [r3, r2]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d109      	bne.n	8014e22 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	68da      	ldr	r2, [r3, #12]
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	2180      	movs	r1, #128	@ 0x80
 8014e1a:	0249      	lsls	r1, r1, #9
 8014e1c:	430a      	orrs	r2, r1
 8014e1e:	60da      	str	r2, [r3, #12]
 8014e20:	e00b      	b.n	8014e3a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e26:	2220      	movs	r2, #32
 8014e28:	431a      	orrs	r2, r3
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014e32:	2201      	movs	r2, #1
 8014e34:	431a      	orrs	r2, r3
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e3e:	2b01      	cmp	r3, #1
 8014e40:	d11f      	bne.n	8014e82 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	691a      	ldr	r2, [r3, #16]
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	492a      	ldr	r1, [pc, #168]	@ (8014ef8 <HAL_ADC_Init+0x2e4>)
 8014e4e:	400a      	ands	r2, r1
 8014e50:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	6919      	ldr	r1, [r3, #16]
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014e60:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8014e66:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	430a      	orrs	r2, r1
 8014e6e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	691a      	ldr	r2, [r3, #16]
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	2101      	movs	r1, #1
 8014e7c:	430a      	orrs	r2, r1
 8014e7e:	611a      	str	r2, [r3, #16]
 8014e80:	e00e      	b.n	8014ea0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	691b      	ldr	r3, [r3, #16]
 8014e88:	2201      	movs	r2, #1
 8014e8a:	4013      	ands	r3, r2
 8014e8c:	2b01      	cmp	r3, #1
 8014e8e:	d107      	bne.n	8014ea0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	691a      	ldr	r2, [r3, #16]
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	2101      	movs	r1, #1
 8014e9c:	438a      	bics	r2, r1
 8014e9e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	695a      	ldr	r2, [r3, #20]
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	2107      	movs	r1, #7
 8014eac:	438a      	bics	r2, r1
 8014eae:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	6959      	ldr	r1, [r3, #20]
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	430a      	orrs	r2, r1
 8014ec0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	2200      	movs	r2, #0
 8014ec6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014ecc:	2203      	movs	r2, #3
 8014ece:	4393      	bics	r3, r2
 8014ed0:	2201      	movs	r2, #1
 8014ed2:	431a      	orrs	r2, r3
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8014ed8:	2300      	movs	r3, #0
}
 8014eda:	0018      	movs	r0, r3
 8014edc:	46bd      	mov	sp, r7
 8014ede:	b002      	add	sp, #8
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	46c0      	nop			@ (mov r8, r8)
 8014ee4:	fffffefd 	.word	0xfffffefd
 8014ee8:	40012708 	.word	0x40012708
 8014eec:	ffc3ffff 	.word	0xffc3ffff
 8014ef0:	fdffffff 	.word	0xfdffffff
 8014ef4:	fffe0219 	.word	0xfffe0219
 8014ef8:	fffffc03 	.word	0xfffffc03

08014efc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8014efc:	b590      	push	{r4, r7, lr}
 8014efe:	b085      	sub	sp, #20
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8014f04:	230f      	movs	r3, #15
 8014f06:	18fb      	adds	r3, r7, r3
 8014f08:	2200      	movs	r2, #0
 8014f0a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	689b      	ldr	r3, [r3, #8]
 8014f12:	2204      	movs	r2, #4
 8014f14:	4013      	ands	r3, r2
 8014f16:	d138      	bne.n	8014f8a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	2250      	movs	r2, #80	@ 0x50
 8014f1c:	5c9b      	ldrb	r3, [r3, r2]
 8014f1e:	2b01      	cmp	r3, #1
 8014f20:	d101      	bne.n	8014f26 <HAL_ADC_Start+0x2a>
 8014f22:	2302      	movs	r3, #2
 8014f24:	e038      	b.n	8014f98 <HAL_ADC_Start+0x9c>
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	2250      	movs	r2, #80	@ 0x50
 8014f2a:	2101      	movs	r1, #1
 8014f2c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	69db      	ldr	r3, [r3, #28]
 8014f32:	2b01      	cmp	r3, #1
 8014f34:	d007      	beq.n	8014f46 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8014f36:	230f      	movs	r3, #15
 8014f38:	18fc      	adds	r4, r7, r3
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	0018      	movs	r0, r3
 8014f3e:	f000 f95f 	bl	8015200 <ADC_Enable>
 8014f42:	0003      	movs	r3, r0
 8014f44:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8014f46:	230f      	movs	r3, #15
 8014f48:	18fb      	adds	r3, r7, r3
 8014f4a:	781b      	ldrb	r3, [r3, #0]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d120      	bne.n	8014f92 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f54:	4a12      	ldr	r2, [pc, #72]	@ (8014fa0 <HAL_ADC_Start+0xa4>)
 8014f56:	4013      	ands	r3, r2
 8014f58:	2280      	movs	r2, #128	@ 0x80
 8014f5a:	0052      	lsls	r2, r2, #1
 8014f5c:	431a      	orrs	r2, r3
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	2200      	movs	r2, #0
 8014f66:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	2250      	movs	r2, #80	@ 0x50
 8014f6c:	2100      	movs	r1, #0
 8014f6e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	221c      	movs	r2, #28
 8014f76:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	689a      	ldr	r2, [r3, #8]
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	2104      	movs	r1, #4
 8014f84:	430a      	orrs	r2, r1
 8014f86:	609a      	str	r2, [r3, #8]
 8014f88:	e003      	b.n	8014f92 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8014f8a:	230f      	movs	r3, #15
 8014f8c:	18fb      	adds	r3, r7, r3
 8014f8e:	2202      	movs	r2, #2
 8014f90:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8014f92:	230f      	movs	r3, #15
 8014f94:	18fb      	adds	r3, r7, r3
 8014f96:	781b      	ldrb	r3, [r3, #0]
}
 8014f98:	0018      	movs	r0, r3
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	b005      	add	sp, #20
 8014f9e:	bd90      	pop	{r4, r7, pc}
 8014fa0:	fffff0fe 	.word	0xfffff0fe

08014fa4 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b084      	sub	sp, #16
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
 8014fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8014fae:	2300      	movs	r3, #0
 8014fb0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	695b      	ldr	r3, [r3, #20]
 8014fba:	2b08      	cmp	r3, #8
 8014fbc:	d102      	bne.n	8014fc4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8014fbe:	2308      	movs	r3, #8
 8014fc0:	60fb      	str	r3, [r7, #12]
 8014fc2:	e014      	b.n	8014fee <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	68db      	ldr	r3, [r3, #12]
 8014fca:	2201      	movs	r2, #1
 8014fcc:	4013      	ands	r3, r2
 8014fce:	2b01      	cmp	r3, #1
 8014fd0:	d10b      	bne.n	8014fea <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014fd6:	2220      	movs	r2, #32
 8014fd8:	431a      	orrs	r2, r3
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	2250      	movs	r2, #80	@ 0x50
 8014fe2:	2100      	movs	r1, #0
 8014fe4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	e072      	b.n	80150d0 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8014fea:	230c      	movs	r3, #12
 8014fec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8014fee:	f7ff fda9 	bl	8014b44 <HAL_GetTick>
 8014ff2:	0003      	movs	r3, r0
 8014ff4:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8014ff6:	e01f      	b.n	8015038 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8014ff8:	683b      	ldr	r3, [r7, #0]
 8014ffa:	3301      	adds	r3, #1
 8014ffc:	d01c      	beq.n	8015038 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8014ffe:	683b      	ldr	r3, [r7, #0]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d007      	beq.n	8015014 <HAL_ADC_PollForConversion+0x70>
 8015004:	f7ff fd9e 	bl	8014b44 <HAL_GetTick>
 8015008:	0002      	movs	r2, r0
 801500a:	68bb      	ldr	r3, [r7, #8]
 801500c:	1ad3      	subs	r3, r2, r3
 801500e:	683a      	ldr	r2, [r7, #0]
 8015010:	429a      	cmp	r2, r3
 8015012:	d211      	bcs.n	8015038 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	68fa      	ldr	r2, [r7, #12]
 801501c:	4013      	ands	r3, r2
 801501e:	d10b      	bne.n	8015038 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015024:	2204      	movs	r2, #4
 8015026:	431a      	orrs	r2, r3
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	2250      	movs	r2, #80	@ 0x50
 8015030:	2100      	movs	r1, #0
 8015032:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8015034:	2303      	movs	r3, #3
 8015036:	e04b      	b.n	80150d0 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	68fa      	ldr	r2, [r7, #12]
 8015040:	4013      	ands	r3, r2
 8015042:	d0d9      	beq.n	8014ff8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015048:	2280      	movs	r2, #128	@ 0x80
 801504a:	0092      	lsls	r2, r2, #2
 801504c:	431a      	orrs	r2, r3
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	68da      	ldr	r2, [r3, #12]
 8015058:	23c0      	movs	r3, #192	@ 0xc0
 801505a:	011b      	lsls	r3, r3, #4
 801505c:	4013      	ands	r3, r2
 801505e:	d12e      	bne.n	80150be <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	2220      	movs	r2, #32
 8015064:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8015066:	2b00      	cmp	r3, #0
 8015068:	d129      	bne.n	80150be <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	2208      	movs	r2, #8
 8015072:	4013      	ands	r3, r2
 8015074:	2b08      	cmp	r3, #8
 8015076:	d122      	bne.n	80150be <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	689b      	ldr	r3, [r3, #8]
 801507e:	2204      	movs	r2, #4
 8015080:	4013      	ands	r3, r2
 8015082:	d110      	bne.n	80150a6 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	685a      	ldr	r2, [r3, #4]
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	210c      	movs	r1, #12
 8015090:	438a      	bics	r2, r1
 8015092:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015098:	4a0f      	ldr	r2, [pc, #60]	@ (80150d8 <HAL_ADC_PollForConversion+0x134>)
 801509a:	4013      	ands	r3, r2
 801509c:	2201      	movs	r2, #1
 801509e:	431a      	orrs	r2, r3
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80150a4:	e00b      	b.n	80150be <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80150aa:	2220      	movs	r2, #32
 80150ac:	431a      	orrs	r2, r3
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80150b6:	2201      	movs	r2, #1
 80150b8:	431a      	orrs	r2, r3
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	699b      	ldr	r3, [r3, #24]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d103      	bne.n	80150ce <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	220c      	movs	r2, #12
 80150cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80150ce:	2300      	movs	r3, #0
}
 80150d0:	0018      	movs	r0, r3
 80150d2:	46bd      	mov	sp, r7
 80150d4:	b004      	add	sp, #16
 80150d6:	bd80      	pop	{r7, pc}
 80150d8:	fffffefe 	.word	0xfffffefe

080150dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80150ea:	0018      	movs	r0, r3
 80150ec:	46bd      	mov	sp, r7
 80150ee:	b002      	add	sp, #8
 80150f0:	bd80      	pop	{r7, pc}
	...

080150f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b082      	sub	sp, #8
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
 80150fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	2250      	movs	r2, #80	@ 0x50
 8015102:	5c9b      	ldrb	r3, [r3, r2]
 8015104:	2b01      	cmp	r3, #1
 8015106:	d101      	bne.n	801510c <HAL_ADC_ConfigChannel+0x18>
 8015108:	2302      	movs	r3, #2
 801510a:	e06c      	b.n	80151e6 <HAL_ADC_ConfigChannel+0xf2>
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	2250      	movs	r2, #80	@ 0x50
 8015110:	2101      	movs	r1, #1
 8015112:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	689b      	ldr	r3, [r3, #8]
 801511a:	2204      	movs	r2, #4
 801511c:	4013      	ands	r3, r2
 801511e:	d00b      	beq.n	8015138 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015124:	2220      	movs	r2, #32
 8015126:	431a      	orrs	r2, r3
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2250      	movs	r2, #80	@ 0x50
 8015130:	2100      	movs	r1, #0
 8015132:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8015134:	2301      	movs	r3, #1
 8015136:	e056      	b.n	80151e6 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8015138:	683b      	ldr	r3, [r7, #0]
 801513a:	685b      	ldr	r3, [r3, #4]
 801513c:	4a2c      	ldr	r2, [pc, #176]	@ (80151f0 <HAL_ADC_ConfigChannel+0xfc>)
 801513e:	4293      	cmp	r3, r2
 8015140:	d028      	beq.n	8015194 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	035b      	lsls	r3, r3, #13
 801514e:	0b5a      	lsrs	r2, r3, #13
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	430a      	orrs	r2, r1
 8015156:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8015158:	683b      	ldr	r3, [r7, #0]
 801515a:	681a      	ldr	r2, [r3, #0]
 801515c:	2380      	movs	r3, #128	@ 0x80
 801515e:	02db      	lsls	r3, r3, #11
 8015160:	4013      	ands	r3, r2
 8015162:	d009      	beq.n	8015178 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8015164:	4b23      	ldr	r3, [pc, #140]	@ (80151f4 <HAL_ADC_ConfigChannel+0x100>)
 8015166:	681a      	ldr	r2, [r3, #0]
 8015168:	4b22      	ldr	r3, [pc, #136]	@ (80151f4 <HAL_ADC_ConfigChannel+0x100>)
 801516a:	2180      	movs	r1, #128	@ 0x80
 801516c:	0409      	lsls	r1, r1, #16
 801516e:	430a      	orrs	r2, r1
 8015170:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8015172:	200a      	movs	r0, #10
 8015174:	f000 f8ac 	bl	80152d0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8015178:	683b      	ldr	r3, [r7, #0]
 801517a:	681a      	ldr	r2, [r3, #0]
 801517c:	2380      	movs	r3, #128	@ 0x80
 801517e:	029b      	lsls	r3, r3, #10
 8015180:	4013      	ands	r3, r2
 8015182:	d02b      	beq.n	80151dc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8015184:	4b1b      	ldr	r3, [pc, #108]	@ (80151f4 <HAL_ADC_ConfigChannel+0x100>)
 8015186:	681a      	ldr	r2, [r3, #0]
 8015188:	4b1a      	ldr	r3, [pc, #104]	@ (80151f4 <HAL_ADC_ConfigChannel+0x100>)
 801518a:	2180      	movs	r1, #128	@ 0x80
 801518c:	03c9      	lsls	r1, r1, #15
 801518e:	430a      	orrs	r2, r1
 8015190:	601a      	str	r2, [r3, #0]
 8015192:	e023      	b.n	80151dc <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801519a:	683b      	ldr	r3, [r7, #0]
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	035b      	lsls	r3, r3, #13
 80151a0:	0b5b      	lsrs	r3, r3, #13
 80151a2:	43d9      	mvns	r1, r3
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	400a      	ands	r2, r1
 80151aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	681a      	ldr	r2, [r3, #0]
 80151b0:	2380      	movs	r3, #128	@ 0x80
 80151b2:	02db      	lsls	r3, r3, #11
 80151b4:	4013      	ands	r3, r2
 80151b6:	d005      	beq.n	80151c4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80151b8:	4b0e      	ldr	r3, [pc, #56]	@ (80151f4 <HAL_ADC_ConfigChannel+0x100>)
 80151ba:	681a      	ldr	r2, [r3, #0]
 80151bc:	4b0d      	ldr	r3, [pc, #52]	@ (80151f4 <HAL_ADC_ConfigChannel+0x100>)
 80151be:	490e      	ldr	r1, [pc, #56]	@ (80151f8 <HAL_ADC_ConfigChannel+0x104>)
 80151c0:	400a      	ands	r2, r1
 80151c2:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	681a      	ldr	r2, [r3, #0]
 80151c8:	2380      	movs	r3, #128	@ 0x80
 80151ca:	029b      	lsls	r3, r3, #10
 80151cc:	4013      	ands	r3, r2
 80151ce:	d005      	beq.n	80151dc <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80151d0:	4b08      	ldr	r3, [pc, #32]	@ (80151f4 <HAL_ADC_ConfigChannel+0x100>)
 80151d2:	681a      	ldr	r2, [r3, #0]
 80151d4:	4b07      	ldr	r3, [pc, #28]	@ (80151f4 <HAL_ADC_ConfigChannel+0x100>)
 80151d6:	4909      	ldr	r1, [pc, #36]	@ (80151fc <HAL_ADC_ConfigChannel+0x108>)
 80151d8:	400a      	ands	r2, r1
 80151da:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	2250      	movs	r2, #80	@ 0x50
 80151e0:	2100      	movs	r1, #0
 80151e2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80151e4:	2300      	movs	r3, #0
}
 80151e6:	0018      	movs	r0, r3
 80151e8:	46bd      	mov	sp, r7
 80151ea:	b002      	add	sp, #8
 80151ec:	bd80      	pop	{r7, pc}
 80151ee:	46c0      	nop			@ (mov r8, r8)
 80151f0:	00001001 	.word	0x00001001
 80151f4:	40012708 	.word	0x40012708
 80151f8:	ff7fffff 	.word	0xff7fffff
 80151fc:	ffbfffff 	.word	0xffbfffff

08015200 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b084      	sub	sp, #16
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8015208:	2300      	movs	r3, #0
 801520a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	689b      	ldr	r3, [r3, #8]
 8015212:	2203      	movs	r2, #3
 8015214:	4013      	ands	r3, r2
 8015216:	2b01      	cmp	r3, #1
 8015218:	d108      	bne.n	801522c <ADC_Enable+0x2c>
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	2201      	movs	r2, #1
 8015222:	4013      	ands	r3, r2
 8015224:	2b01      	cmp	r3, #1
 8015226:	d101      	bne.n	801522c <ADC_Enable+0x2c>
 8015228:	2301      	movs	r3, #1
 801522a:	e000      	b.n	801522e <ADC_Enable+0x2e>
 801522c:	2300      	movs	r3, #0
 801522e:	2b00      	cmp	r3, #0
 8015230:	d146      	bne.n	80152c0 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	689b      	ldr	r3, [r3, #8]
 8015238:	4a24      	ldr	r2, [pc, #144]	@ (80152cc <ADC_Enable+0xcc>)
 801523a:	4013      	ands	r3, r2
 801523c:	d00d      	beq.n	801525a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015242:	2210      	movs	r2, #16
 8015244:	431a      	orrs	r2, r3
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801524e:	2201      	movs	r2, #1
 8015250:	431a      	orrs	r2, r3
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8015256:	2301      	movs	r3, #1
 8015258:	e033      	b.n	80152c2 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	689a      	ldr	r2, [r3, #8]
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	2101      	movs	r1, #1
 8015266:	430a      	orrs	r2, r1
 8015268:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 801526a:	2001      	movs	r0, #1
 801526c:	f000 f830 	bl	80152d0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8015270:	f7ff fc68 	bl	8014b44 <HAL_GetTick>
 8015274:	0003      	movs	r3, r0
 8015276:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8015278:	e01b      	b.n	80152b2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801527a:	f7ff fc63 	bl	8014b44 <HAL_GetTick>
 801527e:	0002      	movs	r2, r0
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	1ad3      	subs	r3, r2, r3
 8015284:	2b0a      	cmp	r3, #10
 8015286:	d914      	bls.n	80152b2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	2201      	movs	r2, #1
 8015290:	4013      	ands	r3, r2
 8015292:	2b01      	cmp	r3, #1
 8015294:	d00d      	beq.n	80152b2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801529a:	2210      	movs	r2, #16
 801529c:	431a      	orrs	r2, r3
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80152a6:	2201      	movs	r2, #1
 80152a8:	431a      	orrs	r2, r3
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80152ae:	2301      	movs	r3, #1
 80152b0:	e007      	b.n	80152c2 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	2201      	movs	r2, #1
 80152ba:	4013      	ands	r3, r2
 80152bc:	2b01      	cmp	r3, #1
 80152be:	d1dc      	bne.n	801527a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80152c0:	2300      	movs	r3, #0
}
 80152c2:	0018      	movs	r0, r3
 80152c4:	46bd      	mov	sp, r7
 80152c6:	b004      	add	sp, #16
 80152c8:	bd80      	pop	{r7, pc}
 80152ca:	46c0      	nop			@ (mov r8, r8)
 80152cc:	80000017 	.word	0x80000017

080152d0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b084      	sub	sp, #16
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80152d8:	4b0b      	ldr	r3, [pc, #44]	@ (8015308 <ADC_DelayMicroSecond+0x38>)
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	490b      	ldr	r1, [pc, #44]	@ (801530c <ADC_DelayMicroSecond+0x3c>)
 80152de:	0018      	movs	r0, r3
 80152e0:	f7ea ff60 	bl	80001a4 <__udivsi3>
 80152e4:	0003      	movs	r3, r0
 80152e6:	001a      	movs	r2, r3
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	4353      	muls	r3, r2
 80152ec:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80152ee:	e002      	b.n	80152f6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	3b01      	subs	r3, #1
 80152f4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d1f9      	bne.n	80152f0 <ADC_DelayMicroSecond+0x20>
  }
}
 80152fc:	46c0      	nop			@ (mov r8, r8)
 80152fe:	46c0      	nop			@ (mov r8, r8)
 8015300:	46bd      	mov	sp, r7
 8015302:	b004      	add	sp, #16
 8015304:	bd80      	pop	{r7, pc}
 8015306:	46c0      	nop			@ (mov r8, r8)
 8015308:	200000ec 	.word	0x200000ec
 801530c:	000f4240 	.word	0x000f4240

08015310 <__NVIC_EnableIRQ>:
{
 8015310:	b580      	push	{r7, lr}
 8015312:	b082      	sub	sp, #8
 8015314:	af00      	add	r7, sp, #0
 8015316:	0002      	movs	r2, r0
 8015318:	1dfb      	adds	r3, r7, #7
 801531a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 801531c:	1dfb      	adds	r3, r7, #7
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	2b7f      	cmp	r3, #127	@ 0x7f
 8015322:	d809      	bhi.n	8015338 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015324:	1dfb      	adds	r3, r7, #7
 8015326:	781b      	ldrb	r3, [r3, #0]
 8015328:	001a      	movs	r2, r3
 801532a:	231f      	movs	r3, #31
 801532c:	401a      	ands	r2, r3
 801532e:	4b04      	ldr	r3, [pc, #16]	@ (8015340 <__NVIC_EnableIRQ+0x30>)
 8015330:	2101      	movs	r1, #1
 8015332:	4091      	lsls	r1, r2
 8015334:	000a      	movs	r2, r1
 8015336:	601a      	str	r2, [r3, #0]
}
 8015338:	46c0      	nop			@ (mov r8, r8)
 801533a:	46bd      	mov	sp, r7
 801533c:	b002      	add	sp, #8
 801533e:	bd80      	pop	{r7, pc}
 8015340:	e000e100 	.word	0xe000e100

08015344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015344:	b590      	push	{r4, r7, lr}
 8015346:	b083      	sub	sp, #12
 8015348:	af00      	add	r7, sp, #0
 801534a:	0002      	movs	r2, r0
 801534c:	6039      	str	r1, [r7, #0]
 801534e:	1dfb      	adds	r3, r7, #7
 8015350:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8015352:	1dfb      	adds	r3, r7, #7
 8015354:	781b      	ldrb	r3, [r3, #0]
 8015356:	2b7f      	cmp	r3, #127	@ 0x7f
 8015358:	d828      	bhi.n	80153ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801535a:	4a2f      	ldr	r2, [pc, #188]	@ (8015418 <__NVIC_SetPriority+0xd4>)
 801535c:	1dfb      	adds	r3, r7, #7
 801535e:	781b      	ldrb	r3, [r3, #0]
 8015360:	b25b      	sxtb	r3, r3
 8015362:	089b      	lsrs	r3, r3, #2
 8015364:	33c0      	adds	r3, #192	@ 0xc0
 8015366:	009b      	lsls	r3, r3, #2
 8015368:	589b      	ldr	r3, [r3, r2]
 801536a:	1dfa      	adds	r2, r7, #7
 801536c:	7812      	ldrb	r2, [r2, #0]
 801536e:	0011      	movs	r1, r2
 8015370:	2203      	movs	r2, #3
 8015372:	400a      	ands	r2, r1
 8015374:	00d2      	lsls	r2, r2, #3
 8015376:	21ff      	movs	r1, #255	@ 0xff
 8015378:	4091      	lsls	r1, r2
 801537a:	000a      	movs	r2, r1
 801537c:	43d2      	mvns	r2, r2
 801537e:	401a      	ands	r2, r3
 8015380:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8015382:	683b      	ldr	r3, [r7, #0]
 8015384:	019b      	lsls	r3, r3, #6
 8015386:	22ff      	movs	r2, #255	@ 0xff
 8015388:	401a      	ands	r2, r3
 801538a:	1dfb      	adds	r3, r7, #7
 801538c:	781b      	ldrb	r3, [r3, #0]
 801538e:	0018      	movs	r0, r3
 8015390:	2303      	movs	r3, #3
 8015392:	4003      	ands	r3, r0
 8015394:	00db      	lsls	r3, r3, #3
 8015396:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8015398:	481f      	ldr	r0, [pc, #124]	@ (8015418 <__NVIC_SetPriority+0xd4>)
 801539a:	1dfb      	adds	r3, r7, #7
 801539c:	781b      	ldrb	r3, [r3, #0]
 801539e:	b25b      	sxtb	r3, r3
 80153a0:	089b      	lsrs	r3, r3, #2
 80153a2:	430a      	orrs	r2, r1
 80153a4:	33c0      	adds	r3, #192	@ 0xc0
 80153a6:	009b      	lsls	r3, r3, #2
 80153a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80153aa:	e031      	b.n	8015410 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80153ac:	4a1b      	ldr	r2, [pc, #108]	@ (801541c <__NVIC_SetPriority+0xd8>)
 80153ae:	1dfb      	adds	r3, r7, #7
 80153b0:	781b      	ldrb	r3, [r3, #0]
 80153b2:	0019      	movs	r1, r3
 80153b4:	230f      	movs	r3, #15
 80153b6:	400b      	ands	r3, r1
 80153b8:	3b08      	subs	r3, #8
 80153ba:	089b      	lsrs	r3, r3, #2
 80153bc:	3306      	adds	r3, #6
 80153be:	009b      	lsls	r3, r3, #2
 80153c0:	18d3      	adds	r3, r2, r3
 80153c2:	3304      	adds	r3, #4
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	1dfa      	adds	r2, r7, #7
 80153c8:	7812      	ldrb	r2, [r2, #0]
 80153ca:	0011      	movs	r1, r2
 80153cc:	2203      	movs	r2, #3
 80153ce:	400a      	ands	r2, r1
 80153d0:	00d2      	lsls	r2, r2, #3
 80153d2:	21ff      	movs	r1, #255	@ 0xff
 80153d4:	4091      	lsls	r1, r2
 80153d6:	000a      	movs	r2, r1
 80153d8:	43d2      	mvns	r2, r2
 80153da:	401a      	ands	r2, r3
 80153dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80153de:	683b      	ldr	r3, [r7, #0]
 80153e0:	019b      	lsls	r3, r3, #6
 80153e2:	22ff      	movs	r2, #255	@ 0xff
 80153e4:	401a      	ands	r2, r3
 80153e6:	1dfb      	adds	r3, r7, #7
 80153e8:	781b      	ldrb	r3, [r3, #0]
 80153ea:	0018      	movs	r0, r3
 80153ec:	2303      	movs	r3, #3
 80153ee:	4003      	ands	r3, r0
 80153f0:	00db      	lsls	r3, r3, #3
 80153f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80153f4:	4809      	ldr	r0, [pc, #36]	@ (801541c <__NVIC_SetPriority+0xd8>)
 80153f6:	1dfb      	adds	r3, r7, #7
 80153f8:	781b      	ldrb	r3, [r3, #0]
 80153fa:	001c      	movs	r4, r3
 80153fc:	230f      	movs	r3, #15
 80153fe:	4023      	ands	r3, r4
 8015400:	3b08      	subs	r3, #8
 8015402:	089b      	lsrs	r3, r3, #2
 8015404:	430a      	orrs	r2, r1
 8015406:	3306      	adds	r3, #6
 8015408:	009b      	lsls	r3, r3, #2
 801540a:	18c3      	adds	r3, r0, r3
 801540c:	3304      	adds	r3, #4
 801540e:	601a      	str	r2, [r3, #0]
}
 8015410:	46c0      	nop			@ (mov r8, r8)
 8015412:	46bd      	mov	sp, r7
 8015414:	b003      	add	sp, #12
 8015416:	bd90      	pop	{r4, r7, pc}
 8015418:	e000e100 	.word	0xe000e100
 801541c:	e000ed00 	.word	0xe000ed00

08015420 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8015424:	f3bf 8f4f 	dsb	sy
}
 8015428:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801542a:	4b04      	ldr	r3, [pc, #16]	@ (801543c <__NVIC_SystemReset+0x1c>)
 801542c:	4a04      	ldr	r2, [pc, #16]	@ (8015440 <__NVIC_SystemReset+0x20>)
 801542e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8015430:	f3bf 8f4f 	dsb	sy
}
 8015434:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8015436:	46c0      	nop			@ (mov r8, r8)
 8015438:	e7fd      	b.n	8015436 <__NVIC_SystemReset+0x16>
 801543a:	46c0      	nop			@ (mov r8, r8)
 801543c:	e000ed00 	.word	0xe000ed00
 8015440:	05fa0004 	.word	0x05fa0004

08015444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8015444:	b580      	push	{r7, lr}
 8015446:	b082      	sub	sp, #8
 8015448:	af00      	add	r7, sp, #0
 801544a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	1e5a      	subs	r2, r3, #1
 8015450:	2380      	movs	r3, #128	@ 0x80
 8015452:	045b      	lsls	r3, r3, #17
 8015454:	429a      	cmp	r2, r3
 8015456:	d301      	bcc.n	801545c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8015458:	2301      	movs	r3, #1
 801545a:	e010      	b.n	801547e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801545c:	4b0a      	ldr	r3, [pc, #40]	@ (8015488 <SysTick_Config+0x44>)
 801545e:	687a      	ldr	r2, [r7, #4]
 8015460:	3a01      	subs	r2, #1
 8015462:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8015464:	2301      	movs	r3, #1
 8015466:	425b      	negs	r3, r3
 8015468:	2103      	movs	r1, #3
 801546a:	0018      	movs	r0, r3
 801546c:	f7ff ff6a 	bl	8015344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8015470:	4b05      	ldr	r3, [pc, #20]	@ (8015488 <SysTick_Config+0x44>)
 8015472:	2200      	movs	r2, #0
 8015474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8015476:	4b04      	ldr	r3, [pc, #16]	@ (8015488 <SysTick_Config+0x44>)
 8015478:	2207      	movs	r2, #7
 801547a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801547c:	2300      	movs	r3, #0
}
 801547e:	0018      	movs	r0, r3
 8015480:	46bd      	mov	sp, r7
 8015482:	b002      	add	sp, #8
 8015484:	bd80      	pop	{r7, pc}
 8015486:	46c0      	nop			@ (mov r8, r8)
 8015488:	e000e010 	.word	0xe000e010

0801548c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801548c:	b580      	push	{r7, lr}
 801548e:	b084      	sub	sp, #16
 8015490:	af00      	add	r7, sp, #0
 8015492:	60b9      	str	r1, [r7, #8]
 8015494:	607a      	str	r2, [r7, #4]
 8015496:	210f      	movs	r1, #15
 8015498:	187b      	adds	r3, r7, r1
 801549a:	1c02      	adds	r2, r0, #0
 801549c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 801549e:	68ba      	ldr	r2, [r7, #8]
 80154a0:	187b      	adds	r3, r7, r1
 80154a2:	781b      	ldrb	r3, [r3, #0]
 80154a4:	b25b      	sxtb	r3, r3
 80154a6:	0011      	movs	r1, r2
 80154a8:	0018      	movs	r0, r3
 80154aa:	f7ff ff4b 	bl	8015344 <__NVIC_SetPriority>
}
 80154ae:	46c0      	nop			@ (mov r8, r8)
 80154b0:	46bd      	mov	sp, r7
 80154b2:	b004      	add	sp, #16
 80154b4:	bd80      	pop	{r7, pc}

080154b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80154b6:	b580      	push	{r7, lr}
 80154b8:	b082      	sub	sp, #8
 80154ba:	af00      	add	r7, sp, #0
 80154bc:	0002      	movs	r2, r0
 80154be:	1dfb      	adds	r3, r7, #7
 80154c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80154c2:	1dfb      	adds	r3, r7, #7
 80154c4:	781b      	ldrb	r3, [r3, #0]
 80154c6:	b25b      	sxtb	r3, r3
 80154c8:	0018      	movs	r0, r3
 80154ca:	f7ff ff21 	bl	8015310 <__NVIC_EnableIRQ>
}
 80154ce:	46c0      	nop			@ (mov r8, r8)
 80154d0:	46bd      	mov	sp, r7
 80154d2:	b002      	add	sp, #8
 80154d4:	bd80      	pop	{r7, pc}

080154d6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80154d6:	b580      	push	{r7, lr}
 80154d8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80154da:	f7ff ffa1 	bl	8015420 <__NVIC_SystemReset>

080154de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80154de:	b580      	push	{r7, lr}
 80154e0:	b082      	sub	sp, #8
 80154e2:	af00      	add	r7, sp, #0
 80154e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	0018      	movs	r0, r3
 80154ea:	f7ff ffab 	bl	8015444 <SysTick_Config>
 80154ee:	0003      	movs	r3, r0
}
 80154f0:	0018      	movs	r0, r3
 80154f2:	46bd      	mov	sp, r7
 80154f4:	b002      	add	sp, #8
 80154f6:	bd80      	pop	{r7, pc}

080154f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b084      	sub	sp, #16
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d101      	bne.n	801550a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8015506:	2301      	movs	r3, #1
 8015508:	e061      	b.n	80155ce <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	4a32      	ldr	r2, [pc, #200]	@ (80155d8 <HAL_DMA_Init+0xe0>)
 8015510:	4694      	mov	ip, r2
 8015512:	4463      	add	r3, ip
 8015514:	2114      	movs	r1, #20
 8015516:	0018      	movs	r0, r3
 8015518:	f7ea fe44 	bl	80001a4 <__udivsi3>
 801551c:	0003      	movs	r3, r0
 801551e:	009a      	lsls	r2, r3, #2
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	4a2d      	ldr	r2, [pc, #180]	@ (80155dc <HAL_DMA_Init+0xe4>)
 8015528:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	2225      	movs	r2, #37	@ 0x25
 801552e:	2102      	movs	r1, #2
 8015530:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	4a28      	ldr	r2, [pc, #160]	@ (80155e0 <HAL_DMA_Init+0xe8>)
 801553e:	4013      	ands	r3, r2
 8015540:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801554a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	691b      	ldr	r3, [r3, #16]
 8015550:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015556:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	699b      	ldr	r3, [r3, #24]
 801555c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015562:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	6a1b      	ldr	r3, [r3, #32]
 8015568:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801556a:	68fa      	ldr	r2, [r7, #12]
 801556c:	4313      	orrs	r3, r2
 801556e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	68fa      	ldr	r2, [r7, #12]
 8015576:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	689a      	ldr	r2, [r3, #8]
 801557c:	2380      	movs	r3, #128	@ 0x80
 801557e:	01db      	lsls	r3, r3, #7
 8015580:	429a      	cmp	r2, r3
 8015582:	d018      	beq.n	80155b6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8015584:	4b17      	ldr	r3, [pc, #92]	@ (80155e4 <HAL_DMA_Init+0xec>)
 8015586:	681a      	ldr	r2, [r3, #0]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801558c:	211c      	movs	r1, #28
 801558e:	400b      	ands	r3, r1
 8015590:	210f      	movs	r1, #15
 8015592:	4099      	lsls	r1, r3
 8015594:	000b      	movs	r3, r1
 8015596:	43d9      	mvns	r1, r3
 8015598:	4b12      	ldr	r3, [pc, #72]	@ (80155e4 <HAL_DMA_Init+0xec>)
 801559a:	400a      	ands	r2, r1
 801559c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 801559e:	4b11      	ldr	r3, [pc, #68]	@ (80155e4 <HAL_DMA_Init+0xec>)
 80155a0:	6819      	ldr	r1, [r3, #0]
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	685a      	ldr	r2, [r3, #4]
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80155aa:	201c      	movs	r0, #28
 80155ac:	4003      	ands	r3, r0
 80155ae:	409a      	lsls	r2, r3
 80155b0:	4b0c      	ldr	r3, [pc, #48]	@ (80155e4 <HAL_DMA_Init+0xec>)
 80155b2:	430a      	orrs	r2, r1
 80155b4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	2200      	movs	r2, #0
 80155ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	2225      	movs	r2, #37	@ 0x25
 80155c0:	2101      	movs	r1, #1
 80155c2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	2224      	movs	r2, #36	@ 0x24
 80155c8:	2100      	movs	r1, #0
 80155ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80155cc:	2300      	movs	r3, #0
}
 80155ce:	0018      	movs	r0, r3
 80155d0:	46bd      	mov	sp, r7
 80155d2:	b004      	add	sp, #16
 80155d4:	bd80      	pop	{r7, pc}
 80155d6:	46c0      	nop			@ (mov r8, r8)
 80155d8:	bffdfff8 	.word	0xbffdfff8
 80155dc:	40020000 	.word	0x40020000
 80155e0:	ffff800f 	.word	0xffff800f
 80155e4:	400200a8 	.word	0x400200a8

080155e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b086      	sub	sp, #24
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	60f8      	str	r0, [r7, #12]
 80155f0:	60b9      	str	r1, [r7, #8]
 80155f2:	607a      	str	r2, [r7, #4]
 80155f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80155f6:	2317      	movs	r3, #23
 80155f8:	18fb      	adds	r3, r7, r3
 80155fa:	2200      	movs	r2, #0
 80155fc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	2224      	movs	r2, #36	@ 0x24
 8015602:	5c9b      	ldrb	r3, [r3, r2]
 8015604:	2b01      	cmp	r3, #1
 8015606:	d101      	bne.n	801560c <HAL_DMA_Start_IT+0x24>
 8015608:	2302      	movs	r3, #2
 801560a:	e04f      	b.n	80156ac <HAL_DMA_Start_IT+0xc4>
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	2224      	movs	r2, #36	@ 0x24
 8015610:	2101      	movs	r1, #1
 8015612:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	2225      	movs	r2, #37	@ 0x25
 8015618:	5c9b      	ldrb	r3, [r3, r2]
 801561a:	b2db      	uxtb	r3, r3
 801561c:	2b01      	cmp	r3, #1
 801561e:	d13a      	bne.n	8015696 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	2225      	movs	r2, #37	@ 0x25
 8015624:	2102      	movs	r1, #2
 8015626:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	2200      	movs	r2, #0
 801562c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	681a      	ldr	r2, [r3, #0]
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	2101      	movs	r1, #1
 801563a:	438a      	bics	r2, r1
 801563c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	687a      	ldr	r2, [r7, #4]
 8015642:	68b9      	ldr	r1, [r7, #8]
 8015644:	68f8      	ldr	r0, [r7, #12]
 8015646:	f000 f976 	bl	8015936 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801564e:	2b00      	cmp	r3, #0
 8015650:	d008      	beq.n	8015664 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	681a      	ldr	r2, [r3, #0]
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	210e      	movs	r1, #14
 801565e:	430a      	orrs	r2, r1
 8015660:	601a      	str	r2, [r3, #0]
 8015662:	e00f      	b.n	8015684 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	681a      	ldr	r2, [r3, #0]
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	2104      	movs	r1, #4
 8015670:	438a      	bics	r2, r1
 8015672:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	681a      	ldr	r2, [r3, #0]
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	210a      	movs	r1, #10
 8015680:	430a      	orrs	r2, r1
 8015682:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	681a      	ldr	r2, [r3, #0]
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	2101      	movs	r1, #1
 8015690:	430a      	orrs	r2, r1
 8015692:	601a      	str	r2, [r3, #0]
 8015694:	e007      	b.n	80156a6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	2224      	movs	r2, #36	@ 0x24
 801569a:	2100      	movs	r1, #0
 801569c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 801569e:	2317      	movs	r3, #23
 80156a0:	18fb      	adds	r3, r7, r3
 80156a2:	2202      	movs	r2, #2
 80156a4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80156a6:	2317      	movs	r3, #23
 80156a8:	18fb      	adds	r3, r7, r3
 80156aa:	781b      	ldrb	r3, [r3, #0]
}
 80156ac:	0018      	movs	r0, r3
 80156ae:	46bd      	mov	sp, r7
 80156b0:	b006      	add	sp, #24
 80156b2:	bd80      	pop	{r7, pc}

080156b4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b084      	sub	sp, #16
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80156bc:	230f      	movs	r3, #15
 80156be:	18fb      	adds	r3, r7, r3
 80156c0:	2200      	movs	r2, #0
 80156c2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	2225      	movs	r2, #37	@ 0x25
 80156c8:	5c9b      	ldrb	r3, [r3, r2]
 80156ca:	b2db      	uxtb	r3, r3
 80156cc:	2b02      	cmp	r3, #2
 80156ce:	d008      	beq.n	80156e2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	2204      	movs	r2, #4
 80156d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	2224      	movs	r2, #36	@ 0x24
 80156da:	2100      	movs	r1, #0
 80156dc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80156de:	2301      	movs	r3, #1
 80156e0:	e024      	b.n	801572c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	681a      	ldr	r2, [r3, #0]
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	210e      	movs	r1, #14
 80156ee:	438a      	bics	r2, r1
 80156f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	681a      	ldr	r2, [r3, #0]
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	2101      	movs	r1, #1
 80156fe:	438a      	bics	r2, r1
 8015700:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015706:	221c      	movs	r2, #28
 8015708:	401a      	ands	r2, r3
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801570e:	2101      	movs	r1, #1
 8015710:	4091      	lsls	r1, r2
 8015712:	000a      	movs	r2, r1
 8015714:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	2225      	movs	r2, #37	@ 0x25
 801571a:	2101      	movs	r1, #1
 801571c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	2224      	movs	r2, #36	@ 0x24
 8015722:	2100      	movs	r1, #0
 8015724:	5499      	strb	r1, [r3, r2]

    return status;
 8015726:	230f      	movs	r3, #15
 8015728:	18fb      	adds	r3, r7, r3
 801572a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801572c:	0018      	movs	r0, r3
 801572e:	46bd      	mov	sp, r7
 8015730:	b004      	add	sp, #16
 8015732:	bd80      	pop	{r7, pc}

08015734 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b084      	sub	sp, #16
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801573c:	210f      	movs	r1, #15
 801573e:	187b      	adds	r3, r7, r1
 8015740:	2200      	movs	r2, #0
 8015742:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	2225      	movs	r2, #37	@ 0x25
 8015748:	5c9b      	ldrb	r3, [r3, r2]
 801574a:	b2db      	uxtb	r3, r3
 801574c:	2b02      	cmp	r3, #2
 801574e:	d006      	beq.n	801575e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	2204      	movs	r2, #4
 8015754:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8015756:	187b      	adds	r3, r7, r1
 8015758:	2201      	movs	r2, #1
 801575a:	701a      	strb	r2, [r3, #0]
 801575c:	e02a      	b.n	80157b4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	681a      	ldr	r2, [r3, #0]
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	210e      	movs	r1, #14
 801576a:	438a      	bics	r2, r1
 801576c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	681a      	ldr	r2, [r3, #0]
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	2101      	movs	r1, #1
 801577a:	438a      	bics	r2, r1
 801577c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015782:	221c      	movs	r2, #28
 8015784:	401a      	ands	r2, r3
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801578a:	2101      	movs	r1, #1
 801578c:	4091      	lsls	r1, r2
 801578e:	000a      	movs	r2, r1
 8015790:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	2225      	movs	r2, #37	@ 0x25
 8015796:	2101      	movs	r1, #1
 8015798:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	2224      	movs	r2, #36	@ 0x24
 801579e:	2100      	movs	r1, #0
 80157a0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d004      	beq.n	80157b4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157ae:	687a      	ldr	r2, [r7, #4]
 80157b0:	0010      	movs	r0, r2
 80157b2:	4798      	blx	r3
    }
  }
  return status;
 80157b4:	230f      	movs	r3, #15
 80157b6:	18fb      	adds	r3, r7, r3
 80157b8:	781b      	ldrb	r3, [r3, #0]
}
 80157ba:	0018      	movs	r0, r3
 80157bc:	46bd      	mov	sp, r7
 80157be:	b004      	add	sp, #16
 80157c0:	bd80      	pop	{r7, pc}

080157c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80157c2:	b580      	push	{r7, lr}
 80157c4:	b084      	sub	sp, #16
 80157c6:	af00      	add	r7, sp, #0
 80157c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80157de:	221c      	movs	r2, #28
 80157e0:	4013      	ands	r3, r2
 80157e2:	2204      	movs	r2, #4
 80157e4:	409a      	lsls	r2, r3
 80157e6:	0013      	movs	r3, r2
 80157e8:	68fa      	ldr	r2, [r7, #12]
 80157ea:	4013      	ands	r3, r2
 80157ec:	d026      	beq.n	801583c <HAL_DMA_IRQHandler+0x7a>
 80157ee:	68bb      	ldr	r3, [r7, #8]
 80157f0:	2204      	movs	r2, #4
 80157f2:	4013      	ands	r3, r2
 80157f4:	d022      	beq.n	801583c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	2220      	movs	r2, #32
 80157fe:	4013      	ands	r3, r2
 8015800:	d107      	bne.n	8015812 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	681a      	ldr	r2, [r3, #0]
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	2104      	movs	r1, #4
 801580e:	438a      	bics	r2, r1
 8015810:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015816:	221c      	movs	r2, #28
 8015818:	401a      	ands	r2, r3
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801581e:	2104      	movs	r1, #4
 8015820:	4091      	lsls	r1, r2
 8015822:	000a      	movs	r2, r1
 8015824:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801582a:	2b00      	cmp	r3, #0
 801582c:	d100      	bne.n	8015830 <HAL_DMA_IRQHandler+0x6e>
 801582e:	e071      	b.n	8015914 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015834:	687a      	ldr	r2, [r7, #4]
 8015836:	0010      	movs	r0, r2
 8015838:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 801583a:	e06b      	b.n	8015914 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015840:	221c      	movs	r2, #28
 8015842:	4013      	ands	r3, r2
 8015844:	2202      	movs	r2, #2
 8015846:	409a      	lsls	r2, r3
 8015848:	0013      	movs	r3, r2
 801584a:	68fa      	ldr	r2, [r7, #12]
 801584c:	4013      	ands	r3, r2
 801584e:	d02d      	beq.n	80158ac <HAL_DMA_IRQHandler+0xea>
 8015850:	68bb      	ldr	r3, [r7, #8]
 8015852:	2202      	movs	r2, #2
 8015854:	4013      	ands	r3, r2
 8015856:	d029      	beq.n	80158ac <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	2220      	movs	r2, #32
 8015860:	4013      	ands	r3, r2
 8015862:	d10b      	bne.n	801587c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	681a      	ldr	r2, [r3, #0]
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	210a      	movs	r1, #10
 8015870:	438a      	bics	r2, r1
 8015872:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	2225      	movs	r2, #37	@ 0x25
 8015878:	2101      	movs	r1, #1
 801587a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015880:	221c      	movs	r2, #28
 8015882:	401a      	ands	r2, r3
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015888:	2102      	movs	r1, #2
 801588a:	4091      	lsls	r1, r2
 801588c:	000a      	movs	r2, r1
 801588e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2224      	movs	r2, #36	@ 0x24
 8015894:	2100      	movs	r1, #0
 8015896:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801589c:	2b00      	cmp	r3, #0
 801589e:	d039      	beq.n	8015914 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158a4:	687a      	ldr	r2, [r7, #4]
 80158a6:	0010      	movs	r0, r2
 80158a8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80158aa:	e033      	b.n	8015914 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80158b0:	221c      	movs	r2, #28
 80158b2:	4013      	ands	r3, r2
 80158b4:	2208      	movs	r2, #8
 80158b6:	409a      	lsls	r2, r3
 80158b8:	0013      	movs	r3, r2
 80158ba:	68fa      	ldr	r2, [r7, #12]
 80158bc:	4013      	ands	r3, r2
 80158be:	d02a      	beq.n	8015916 <HAL_DMA_IRQHandler+0x154>
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	2208      	movs	r2, #8
 80158c4:	4013      	ands	r3, r2
 80158c6:	d026      	beq.n	8015916 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	681a      	ldr	r2, [r3, #0]
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	210e      	movs	r1, #14
 80158d4:	438a      	bics	r2, r1
 80158d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80158dc:	221c      	movs	r2, #28
 80158de:	401a      	ands	r2, r3
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80158e4:	2101      	movs	r1, #1
 80158e6:	4091      	lsls	r1, r2
 80158e8:	000a      	movs	r2, r1
 80158ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2201      	movs	r2, #1
 80158f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	2225      	movs	r2, #37	@ 0x25
 80158f6:	2101      	movs	r1, #1
 80158f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	2224      	movs	r2, #36	@ 0x24
 80158fe:	2100      	movs	r1, #0
 8015900:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015906:	2b00      	cmp	r3, #0
 8015908:	d005      	beq.n	8015916 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801590e:	687a      	ldr	r2, [r7, #4]
 8015910:	0010      	movs	r0, r2
 8015912:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8015914:	46c0      	nop			@ (mov r8, r8)
 8015916:	46c0      	nop			@ (mov r8, r8)
}
 8015918:	46bd      	mov	sp, r7
 801591a:	b004      	add	sp, #16
 801591c:	bd80      	pop	{r7, pc}

0801591e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 801591e:	b580      	push	{r7, lr}
 8015920:	b082      	sub	sp, #8
 8015922:	af00      	add	r7, sp, #0
 8015924:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	2225      	movs	r2, #37	@ 0x25
 801592a:	5c9b      	ldrb	r3, [r3, r2]
 801592c:	b2db      	uxtb	r3, r3
}
 801592e:	0018      	movs	r0, r3
 8015930:	46bd      	mov	sp, r7
 8015932:	b002      	add	sp, #8
 8015934:	bd80      	pop	{r7, pc}

08015936 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8015936:	b580      	push	{r7, lr}
 8015938:	b084      	sub	sp, #16
 801593a:	af00      	add	r7, sp, #0
 801593c:	60f8      	str	r0, [r7, #12]
 801593e:	60b9      	str	r1, [r7, #8]
 8015940:	607a      	str	r2, [r7, #4]
 8015942:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015948:	221c      	movs	r2, #28
 801594a:	401a      	ands	r2, r3
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015950:	2101      	movs	r1, #1
 8015952:	4091      	lsls	r1, r2
 8015954:	000a      	movs	r2, r1
 8015956:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	683a      	ldr	r2, [r7, #0]
 801595e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	689b      	ldr	r3, [r3, #8]
 8015964:	2b10      	cmp	r3, #16
 8015966:	d108      	bne.n	801597a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	687a      	ldr	r2, [r7, #4]
 801596e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	68ba      	ldr	r2, [r7, #8]
 8015976:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8015978:	e007      	b.n	801598a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	68ba      	ldr	r2, [r7, #8]
 8015980:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	687a      	ldr	r2, [r7, #4]
 8015988:	60da      	str	r2, [r3, #12]
}
 801598a:	46c0      	nop			@ (mov r8, r8)
 801598c:	46bd      	mov	sp, r7
 801598e:	b004      	add	sp, #16
 8015990:	bd80      	pop	{r7, pc}
	...

08015994 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b084      	sub	sp, #16
 8015998:	af00      	add	r7, sp, #0
 801599a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 801599c:	f7ff f8d2 	bl	8014b44 <HAL_GetTick>
 80159a0:	0003      	movs	r3, r0
 80159a2:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80159a4:	e00f      	b.n	80159c6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	3301      	adds	r3, #1
 80159aa:	d00c      	beq.n	80159c6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d007      	beq.n	80159c2 <FLASH_WaitForLastOperation+0x2e>
 80159b2:	f7ff f8c7 	bl	8014b44 <HAL_GetTick>
 80159b6:	0002      	movs	r2, r0
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	1ad3      	subs	r3, r2, r3
 80159bc:	687a      	ldr	r2, [r7, #4]
 80159be:	429a      	cmp	r2, r3
 80159c0:	d201      	bcs.n	80159c6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80159c2:	2303      	movs	r3, #3
 80159c4:	e052      	b.n	8015a6c <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80159c6:	4b2b      	ldr	r3, [pc, #172]	@ (8015a74 <FLASH_WaitForLastOperation+0xe0>)
 80159c8:	699b      	ldr	r3, [r3, #24]
 80159ca:	2201      	movs	r2, #1
 80159cc:	4013      	ands	r3, r2
 80159ce:	2b01      	cmp	r3, #1
 80159d0:	d0e9      	beq.n	80159a6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80159d2:	4b28      	ldr	r3, [pc, #160]	@ (8015a74 <FLASH_WaitForLastOperation+0xe0>)
 80159d4:	699b      	ldr	r3, [r3, #24]
 80159d6:	2202      	movs	r2, #2
 80159d8:	4013      	ands	r3, r2
 80159da:	2b02      	cmp	r3, #2
 80159dc:	d102      	bne.n	80159e4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80159de:	4b25      	ldr	r3, [pc, #148]	@ (8015a74 <FLASH_WaitForLastOperation+0xe0>)
 80159e0:	2202      	movs	r2, #2
 80159e2:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80159e4:	4b23      	ldr	r3, [pc, #140]	@ (8015a74 <FLASH_WaitForLastOperation+0xe0>)
 80159e6:	699a      	ldr	r2, [r3, #24]
 80159e8:	2380      	movs	r3, #128	@ 0x80
 80159ea:	005b      	lsls	r3, r3, #1
 80159ec:	401a      	ands	r2, r3
 80159ee:	2380      	movs	r3, #128	@ 0x80
 80159f0:	005b      	lsls	r3, r3, #1
 80159f2:	429a      	cmp	r2, r3
 80159f4:	d035      	beq.n	8015a62 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80159f6:	4b1f      	ldr	r3, [pc, #124]	@ (8015a74 <FLASH_WaitForLastOperation+0xe0>)
 80159f8:	699a      	ldr	r2, [r3, #24]
 80159fa:	2380      	movs	r3, #128	@ 0x80
 80159fc:	009b      	lsls	r3, r3, #2
 80159fe:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8015a00:	2380      	movs	r3, #128	@ 0x80
 8015a02:	009b      	lsls	r3, r3, #2
 8015a04:	429a      	cmp	r2, r3
 8015a06:	d02c      	beq.n	8015a62 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8015a08:	4b1a      	ldr	r3, [pc, #104]	@ (8015a74 <FLASH_WaitForLastOperation+0xe0>)
 8015a0a:	699a      	ldr	r2, [r3, #24]
 8015a0c:	2380      	movs	r3, #128	@ 0x80
 8015a0e:	00db      	lsls	r3, r3, #3
 8015a10:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8015a12:	2380      	movs	r3, #128	@ 0x80
 8015a14:	00db      	lsls	r3, r3, #3
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d023      	beq.n	8015a62 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8015a1a:	4b16      	ldr	r3, [pc, #88]	@ (8015a74 <FLASH_WaitForLastOperation+0xe0>)
 8015a1c:	699a      	ldr	r2, [r3, #24]
 8015a1e:	2380      	movs	r3, #128	@ 0x80
 8015a20:	011b      	lsls	r3, r3, #4
 8015a22:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8015a24:	2380      	movs	r3, #128	@ 0x80
 8015a26:	011b      	lsls	r3, r3, #4
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	d01a      	beq.n	8015a62 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8015a2c:	4b11      	ldr	r3, [pc, #68]	@ (8015a74 <FLASH_WaitForLastOperation+0xe0>)
 8015a2e:	699a      	ldr	r2, [r3, #24]
 8015a30:	2380      	movs	r3, #128	@ 0x80
 8015a32:	019b      	lsls	r3, r3, #6
 8015a34:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8015a36:	2380      	movs	r3, #128	@ 0x80
 8015a38:	019b      	lsls	r3, r3, #6
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d011      	beq.n	8015a62 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8015a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8015a74 <FLASH_WaitForLastOperation+0xe0>)
 8015a40:	699a      	ldr	r2, [r3, #24]
 8015a42:	2380      	movs	r3, #128	@ 0x80
 8015a44:	029b      	lsls	r3, r3, #10
 8015a46:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8015a48:	2380      	movs	r3, #128	@ 0x80
 8015a4a:	029b      	lsls	r3, r3, #10
 8015a4c:	429a      	cmp	r2, r3
 8015a4e:	d008      	beq.n	8015a62 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8015a50:	4b08      	ldr	r3, [pc, #32]	@ (8015a74 <FLASH_WaitForLastOperation+0xe0>)
 8015a52:	699a      	ldr	r2, [r3, #24]
 8015a54:	2380      	movs	r3, #128	@ 0x80
 8015a56:	025b      	lsls	r3, r3, #9
 8015a58:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8015a5a:	2380      	movs	r3, #128	@ 0x80
 8015a5c:	025b      	lsls	r3, r3, #9
 8015a5e:	429a      	cmp	r2, r3
 8015a60:	d103      	bne.n	8015a6a <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8015a62:	f000 f809 	bl	8015a78 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8015a66:	2301      	movs	r3, #1
 8015a68:	e000      	b.n	8015a6c <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8015a6a:	2300      	movs	r3, #0
}
 8015a6c:	0018      	movs	r0, r3
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	b004      	add	sp, #16
 8015a72:	bd80      	pop	{r7, pc}
 8015a74:	40022000 	.word	0x40022000

08015a78 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b082      	sub	sp, #8
 8015a7c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8015a82:	4b49      	ldr	r3, [pc, #292]	@ (8015ba8 <FLASH_SetErrorCode+0x130>)
 8015a84:	699a      	ldr	r2, [r3, #24]
 8015a86:	2380      	movs	r3, #128	@ 0x80
 8015a88:	005b      	lsls	r3, r3, #1
 8015a8a:	401a      	ands	r2, r3
 8015a8c:	2380      	movs	r3, #128	@ 0x80
 8015a8e:	005b      	lsls	r3, r3, #1
 8015a90:	429a      	cmp	r2, r3
 8015a92:	d10a      	bne.n	8015aaa <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8015a94:	4b45      	ldr	r3, [pc, #276]	@ (8015bac <FLASH_SetErrorCode+0x134>)
 8015a96:	695b      	ldr	r3, [r3, #20]
 8015a98:	2202      	movs	r2, #2
 8015a9a:	431a      	orrs	r2, r3
 8015a9c:	4b43      	ldr	r3, [pc, #268]	@ (8015bac <FLASH_SetErrorCode+0x134>)
 8015a9e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	2280      	movs	r2, #128	@ 0x80
 8015aa4:	0052      	lsls	r2, r2, #1
 8015aa6:	4313      	orrs	r3, r2
 8015aa8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8015aaa:	4b3f      	ldr	r3, [pc, #252]	@ (8015ba8 <FLASH_SetErrorCode+0x130>)
 8015aac:	699a      	ldr	r2, [r3, #24]
 8015aae:	2380      	movs	r3, #128	@ 0x80
 8015ab0:	009b      	lsls	r3, r3, #2
 8015ab2:	401a      	ands	r2, r3
 8015ab4:	2380      	movs	r3, #128	@ 0x80
 8015ab6:	009b      	lsls	r3, r3, #2
 8015ab8:	429a      	cmp	r2, r3
 8015aba:	d10a      	bne.n	8015ad2 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8015abc:	4b3b      	ldr	r3, [pc, #236]	@ (8015bac <FLASH_SetErrorCode+0x134>)
 8015abe:	695b      	ldr	r3, [r3, #20]
 8015ac0:	2201      	movs	r2, #1
 8015ac2:	431a      	orrs	r2, r3
 8015ac4:	4b39      	ldr	r3, [pc, #228]	@ (8015bac <FLASH_SetErrorCode+0x134>)
 8015ac6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	2280      	movs	r2, #128	@ 0x80
 8015acc:	0092      	lsls	r2, r2, #2
 8015ace:	4313      	orrs	r3, r2
 8015ad0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8015ad2:	4b35      	ldr	r3, [pc, #212]	@ (8015ba8 <FLASH_SetErrorCode+0x130>)
 8015ad4:	699a      	ldr	r2, [r3, #24]
 8015ad6:	2380      	movs	r3, #128	@ 0x80
 8015ad8:	00db      	lsls	r3, r3, #3
 8015ada:	401a      	ands	r2, r3
 8015adc:	2380      	movs	r3, #128	@ 0x80
 8015ade:	00db      	lsls	r3, r3, #3
 8015ae0:	429a      	cmp	r2, r3
 8015ae2:	d10a      	bne.n	8015afa <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8015ae4:	4b31      	ldr	r3, [pc, #196]	@ (8015bac <FLASH_SetErrorCode+0x134>)
 8015ae6:	695b      	ldr	r3, [r3, #20]
 8015ae8:	2208      	movs	r2, #8
 8015aea:	431a      	orrs	r2, r3
 8015aec:	4b2f      	ldr	r3, [pc, #188]	@ (8015bac <FLASH_SetErrorCode+0x134>)
 8015aee:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	2280      	movs	r2, #128	@ 0x80
 8015af4:	00d2      	lsls	r2, r2, #3
 8015af6:	4313      	orrs	r3, r2
 8015af8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8015afa:	4b2b      	ldr	r3, [pc, #172]	@ (8015ba8 <FLASH_SetErrorCode+0x130>)
 8015afc:	699a      	ldr	r2, [r3, #24]
 8015afe:	2380      	movs	r3, #128	@ 0x80
 8015b00:	011b      	lsls	r3, r3, #4
 8015b02:	401a      	ands	r2, r3
 8015b04:	2380      	movs	r3, #128	@ 0x80
 8015b06:	011b      	lsls	r3, r3, #4
 8015b08:	429a      	cmp	r2, r3
 8015b0a:	d10a      	bne.n	8015b22 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8015b0c:	4b27      	ldr	r3, [pc, #156]	@ (8015bac <FLASH_SetErrorCode+0x134>)
 8015b0e:	695b      	ldr	r3, [r3, #20]
 8015b10:	2204      	movs	r2, #4
 8015b12:	431a      	orrs	r2, r3
 8015b14:	4b25      	ldr	r3, [pc, #148]	@ (8015bac <FLASH_SetErrorCode+0x134>)
 8015b16:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	2280      	movs	r2, #128	@ 0x80
 8015b1c:	0112      	lsls	r2, r2, #4
 8015b1e:	4313      	orrs	r3, r2
 8015b20:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8015b22:	4b21      	ldr	r3, [pc, #132]	@ (8015ba8 <FLASH_SetErrorCode+0x130>)
 8015b24:	699a      	ldr	r2, [r3, #24]
 8015b26:	2380      	movs	r3, #128	@ 0x80
 8015b28:	019b      	lsls	r3, r3, #6
 8015b2a:	401a      	ands	r2, r3
 8015b2c:	2380      	movs	r3, #128	@ 0x80
 8015b2e:	019b      	lsls	r3, r3, #6
 8015b30:	429a      	cmp	r2, r3
 8015b32:	d10a      	bne.n	8015b4a <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8015b34:	4b1d      	ldr	r3, [pc, #116]	@ (8015bac <FLASH_SetErrorCode+0x134>)
 8015b36:	695b      	ldr	r3, [r3, #20]
 8015b38:	2210      	movs	r2, #16
 8015b3a:	431a      	orrs	r2, r3
 8015b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8015bac <FLASH_SetErrorCode+0x134>)
 8015b3e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	2280      	movs	r2, #128	@ 0x80
 8015b44:	0192      	lsls	r2, r2, #6
 8015b46:	4313      	orrs	r3, r2
 8015b48:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8015b4a:	4b17      	ldr	r3, [pc, #92]	@ (8015ba8 <FLASH_SetErrorCode+0x130>)
 8015b4c:	699a      	ldr	r2, [r3, #24]
 8015b4e:	2380      	movs	r3, #128	@ 0x80
 8015b50:	029b      	lsls	r3, r3, #10
 8015b52:	401a      	ands	r2, r3
 8015b54:	2380      	movs	r3, #128	@ 0x80
 8015b56:	029b      	lsls	r3, r3, #10
 8015b58:	429a      	cmp	r2, r3
 8015b5a:	d109      	bne.n	8015b70 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8015b5c:	4b13      	ldr	r3, [pc, #76]	@ (8015bac <FLASH_SetErrorCode+0x134>)
 8015b5e:	695b      	ldr	r3, [r3, #20]
 8015b60:	2220      	movs	r2, #32
 8015b62:	431a      	orrs	r2, r3
 8015b64:	4b11      	ldr	r3, [pc, #68]	@ (8015bac <FLASH_SetErrorCode+0x134>)
 8015b66:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	2220      	movs	r2, #32
 8015b6c:	4313      	orrs	r3, r2
 8015b6e:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8015b70:	4b0d      	ldr	r3, [pc, #52]	@ (8015ba8 <FLASH_SetErrorCode+0x130>)
 8015b72:	699a      	ldr	r2, [r3, #24]
 8015b74:	2380      	movs	r3, #128	@ 0x80
 8015b76:	025b      	lsls	r3, r3, #9
 8015b78:	401a      	ands	r2, r3
 8015b7a:	2380      	movs	r3, #128	@ 0x80
 8015b7c:	025b      	lsls	r3, r3, #9
 8015b7e:	429a      	cmp	r2, r3
 8015b80:	d10a      	bne.n	8015b98 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8015b82:	4b0a      	ldr	r3, [pc, #40]	@ (8015bac <FLASH_SetErrorCode+0x134>)
 8015b84:	695b      	ldr	r3, [r3, #20]
 8015b86:	2240      	movs	r2, #64	@ 0x40
 8015b88:	431a      	orrs	r2, r3
 8015b8a:	4b08      	ldr	r3, [pc, #32]	@ (8015bac <FLASH_SetErrorCode+0x134>)
 8015b8c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	2280      	movs	r2, #128	@ 0x80
 8015b92:	0252      	lsls	r2, r2, #9
 8015b94:	4313      	orrs	r3, r2
 8015b96:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8015b98:	4b03      	ldr	r3, [pc, #12]	@ (8015ba8 <FLASH_SetErrorCode+0x130>)
 8015b9a:	687a      	ldr	r2, [r7, #4]
 8015b9c:	619a      	str	r2, [r3, #24]
}  
 8015b9e:	46c0      	nop			@ (mov r8, r8)
 8015ba0:	46bd      	mov	sp, r7
 8015ba2:	b002      	add	sp, #8
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	46c0      	nop			@ (mov r8, r8)
 8015ba8:	40022000 	.word	0x40022000
 8015bac:	200024cc 	.word	0x200024cc

08015bb0 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b084      	sub	sp, #16
 8015bb4:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8015bb6:	4b12      	ldr	r3, [pc, #72]	@ (8015c00 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015bb8:	685b      	ldr	r3, [r3, #4]
 8015bba:	2201      	movs	r2, #1
 8015bbc:	4013      	ands	r3, r2
 8015bbe:	d019      	beq.n	8015bf4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8015bc4:	607b      	str	r3, [r7, #4]
  return(result);
 8015bc6:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8015bc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8015bca:	b672      	cpsid	i
}
 8015bcc:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8015bce:	4b0c      	ldr	r3, [pc, #48]	@ (8015c00 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8015c04 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8015bd2:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8015bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8015c00 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8015c08 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8015bd8:	60da      	str	r2, [r3, #12]
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015bde:	68bb      	ldr	r3, [r7, #8]
 8015be0:	f383 8810 	msr	PRIMASK, r3
}
 8015be4:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8015be6:	4b06      	ldr	r3, [pc, #24]	@ (8015c00 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8015be8:	685b      	ldr	r3, [r3, #4]
 8015bea:	2201      	movs	r2, #1
 8015bec:	4013      	ands	r3, r2
 8015bee:	d001      	beq.n	8015bf4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8015bf0:	2301      	movs	r3, #1
 8015bf2:	e000      	b.n	8015bf6 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8015bf4:	2300      	movs	r3, #0
}
 8015bf6:	0018      	movs	r0, r3
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	b004      	add	sp, #16
 8015bfc:	bd80      	pop	{r7, pc}
 8015bfe:	46c0      	nop			@ (mov r8, r8)
 8015c00:	40022000 	.word	0x40022000
 8015c04:	89abcdef 	.word	0x89abcdef
 8015c08:	02030405 	.word	0x02030405

08015c0c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8015c10:	4b04      	ldr	r3, [pc, #16]	@ (8015c24 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8015c12:	685a      	ldr	r2, [r3, #4]
 8015c14:	4b03      	ldr	r3, [pc, #12]	@ (8015c24 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8015c16:	2101      	movs	r1, #1
 8015c18:	430a      	orrs	r2, r1
 8015c1a:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8015c1c:	2300      	movs	r3, #0
}
 8015c1e:	0018      	movs	r0, r3
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd80      	pop	{r7, pc}
 8015c24:	40022000 	.word	0x40022000

08015c28 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8015c28:	b5b0      	push	{r4, r5, r7, lr}
 8015c2a:	b084      	sub	sp, #16
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015c30:	250f      	movs	r5, #15
 8015c32:	197b      	adds	r3, r7, r5
 8015c34:	2200      	movs	r2, #0
 8015c36:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015c38:	197c      	adds	r4, r7, r5
 8015c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8015c78 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8015c3c:	0018      	movs	r0, r3
 8015c3e:	f7ff fea9 	bl	8015994 <FLASH_WaitForLastOperation>
 8015c42:	0003      	movs	r3, r0
 8015c44:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8015c46:	0029      	movs	r1, r5
 8015c48:	187b      	adds	r3, r7, r1
 8015c4a:	781b      	ldrb	r3, [r3, #0]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d10c      	bne.n	8015c6a <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015c50:	4b0a      	ldr	r3, [pc, #40]	@ (8015c7c <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 8015c52:	2200      	movs	r2, #0
 8015c54:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	2200      	movs	r2, #0
 8015c5a:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015c5c:	187c      	adds	r4, r7, r1
 8015c5e:	4b06      	ldr	r3, [pc, #24]	@ (8015c78 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8015c60:	0018      	movs	r0, r3
 8015c62:	f7ff fe97 	bl	8015994 <FLASH_WaitForLastOperation>
 8015c66:	0003      	movs	r3, r0
 8015c68:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 8015c6a:	230f      	movs	r3, #15
 8015c6c:	18fb      	adds	r3, r7, r3
 8015c6e:	781b      	ldrb	r3, [r3, #0]
}  
 8015c70:	0018      	movs	r0, r3
 8015c72:	46bd      	mov	sp, r7
 8015c74:	b004      	add	sp, #16
 8015c76:	bdb0      	pop	{r4, r5, r7, pc}
 8015c78:	0000c350 	.word	0x0000c350
 8015c7c:	200024cc 	.word	0x200024cc

08015c80 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8015c80:	b5b0      	push	{r4, r5, r7, lr}
 8015c82:	b086      	sub	sp, #24
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	60f8      	str	r0, [r7, #12]
 8015c88:	60b9      	str	r1, [r7, #8]
 8015c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015c8c:	2317      	movs	r3, #23
 8015c8e:	18fb      	adds	r3, r7, r3
 8015c90:	2201      	movs	r2, #1
 8015c92:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8015c94:	4b24      	ldr	r3, [pc, #144]	@ (8015d28 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015c96:	7c1b      	ldrb	r3, [r3, #16]
 8015c98:	2b01      	cmp	r3, #1
 8015c9a:	d101      	bne.n	8015ca0 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8015c9c:	2302      	movs	r3, #2
 8015c9e:	e03e      	b.n	8015d1e <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8015ca0:	4b21      	ldr	r3, [pc, #132]	@ (8015d28 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015ca2:	2201      	movs	r2, #1
 8015ca4:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015ca6:	2517      	movs	r5, #23
 8015ca8:	197c      	adds	r4, r7, r5
 8015caa:	4b20      	ldr	r3, [pc, #128]	@ (8015d2c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8015cac:	0018      	movs	r0, r3
 8015cae:	f7ff fe71 	bl	8015994 <FLASH_WaitForLastOperation>
 8015cb2:	0003      	movs	r3, r0
 8015cb4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8015cb6:	197b      	adds	r3, r7, r5
 8015cb8:	781b      	ldrb	r3, [r3, #0]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d129      	bne.n	8015d12 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8015d28 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015cc0:	2200      	movs	r2, #0
 8015cc2:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	2b02      	cmp	r3, #2
 8015cc8:	d103      	bne.n	8015cd2 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8015cca:	68bb      	ldr	r3, [r7, #8]
 8015ccc:	687a      	ldr	r2, [r7, #4]
 8015cce:	601a      	str	r2, [r3, #0]
 8015cd0:	e013      	b.n	8015cfa <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	2b01      	cmp	r3, #1
 8015cd6:	d104      	bne.n	8015ce2 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8015cd8:	68bb      	ldr	r3, [r7, #8]
 8015cda:	687a      	ldr	r2, [r7, #4]
 8015cdc:	b292      	uxth	r2, r2
 8015cde:	801a      	strh	r2, [r3, #0]
 8015ce0:	e00b      	b.n	8015cfa <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d104      	bne.n	8015cf2 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8015ce8:	68bb      	ldr	r3, [r7, #8]
 8015cea:	687a      	ldr	r2, [r7, #4]
 8015cec:	b2d2      	uxtb	r2, r2
 8015cee:	701a      	strb	r2, [r3, #0]
 8015cf0:	e003      	b.n	8015cfa <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8015cf2:	2317      	movs	r3, #23
 8015cf4:	18fb      	adds	r3, r7, r3
 8015cf6:	2201      	movs	r2, #1
 8015cf8:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8015cfa:	2217      	movs	r2, #23
 8015cfc:	18bb      	adds	r3, r7, r2
 8015cfe:	781b      	ldrb	r3, [r3, #0]
 8015d00:	2b00      	cmp	r3, #0
 8015d02:	d106      	bne.n	8015d12 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8015d04:	18bc      	adds	r4, r7, r2
 8015d06:	4b09      	ldr	r3, [pc, #36]	@ (8015d2c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8015d08:	0018      	movs	r0, r3
 8015d0a:	f7ff fe43 	bl	8015994 <FLASH_WaitForLastOperation>
 8015d0e:	0003      	movs	r3, r0
 8015d10:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8015d12:	4b05      	ldr	r3, [pc, #20]	@ (8015d28 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8015d14:	2200      	movs	r2, #0
 8015d16:	741a      	strb	r2, [r3, #16]

  return status;
 8015d18:	2317      	movs	r3, #23
 8015d1a:	18fb      	adds	r3, r7, r3
 8015d1c:	781b      	ldrb	r3, [r3, #0]
}
 8015d1e:	0018      	movs	r0, r3
 8015d20:	46bd      	mov	sp, r7
 8015d22:	b006      	add	sp, #24
 8015d24:	bdb0      	pop	{r4, r5, r7, pc}
 8015d26:	46c0      	nop			@ (mov r8, r8)
 8015d28:	200024cc 	.word	0x200024cc
 8015d2c:	0000c350 	.word	0x0000c350

08015d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b086      	sub	sp, #24
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
 8015d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015d3e:	2300      	movs	r3, #0
 8015d40:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8015d42:	2300      	movs	r3, #0
 8015d44:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8015d46:	e155      	b.n	8015ff4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	2101      	movs	r1, #1
 8015d4e:	697a      	ldr	r2, [r7, #20]
 8015d50:	4091      	lsls	r1, r2
 8015d52:	000a      	movs	r2, r1
 8015d54:	4013      	ands	r3, r2
 8015d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d100      	bne.n	8015d60 <HAL_GPIO_Init+0x30>
 8015d5e:	e146      	b.n	8015fee <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015d60:	683b      	ldr	r3, [r7, #0]
 8015d62:	685b      	ldr	r3, [r3, #4]
 8015d64:	2203      	movs	r2, #3
 8015d66:	4013      	ands	r3, r2
 8015d68:	2b01      	cmp	r3, #1
 8015d6a:	d005      	beq.n	8015d78 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015d6c:	683b      	ldr	r3, [r7, #0]
 8015d6e:	685b      	ldr	r3, [r3, #4]
 8015d70:	2203      	movs	r2, #3
 8015d72:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8015d74:	2b02      	cmp	r3, #2
 8015d76:	d130      	bne.n	8015dda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	689b      	ldr	r3, [r3, #8]
 8015d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8015d7e:	697b      	ldr	r3, [r7, #20]
 8015d80:	005b      	lsls	r3, r3, #1
 8015d82:	2203      	movs	r2, #3
 8015d84:	409a      	lsls	r2, r3
 8015d86:	0013      	movs	r3, r2
 8015d88:	43da      	mvns	r2, r3
 8015d8a:	693b      	ldr	r3, [r7, #16]
 8015d8c:	4013      	ands	r3, r2
 8015d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015d90:	683b      	ldr	r3, [r7, #0]
 8015d92:	68da      	ldr	r2, [r3, #12]
 8015d94:	697b      	ldr	r3, [r7, #20]
 8015d96:	005b      	lsls	r3, r3, #1
 8015d98:	409a      	lsls	r2, r3
 8015d9a:	0013      	movs	r3, r2
 8015d9c:	693a      	ldr	r2, [r7, #16]
 8015d9e:	4313      	orrs	r3, r2
 8015da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	693a      	ldr	r2, [r7, #16]
 8015da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	685b      	ldr	r3, [r3, #4]
 8015dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015dae:	2201      	movs	r2, #1
 8015db0:	697b      	ldr	r3, [r7, #20]
 8015db2:	409a      	lsls	r2, r3
 8015db4:	0013      	movs	r3, r2
 8015db6:	43da      	mvns	r2, r3
 8015db8:	693b      	ldr	r3, [r7, #16]
 8015dba:	4013      	ands	r3, r2
 8015dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015dbe:	683b      	ldr	r3, [r7, #0]
 8015dc0:	685b      	ldr	r3, [r3, #4]
 8015dc2:	091b      	lsrs	r3, r3, #4
 8015dc4:	2201      	movs	r2, #1
 8015dc6:	401a      	ands	r2, r3
 8015dc8:	697b      	ldr	r3, [r7, #20]
 8015dca:	409a      	lsls	r2, r3
 8015dcc:	0013      	movs	r3, r2
 8015dce:	693a      	ldr	r2, [r7, #16]
 8015dd0:	4313      	orrs	r3, r2
 8015dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	693a      	ldr	r2, [r7, #16]
 8015dd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015dda:	683b      	ldr	r3, [r7, #0]
 8015ddc:	685b      	ldr	r3, [r3, #4]
 8015dde:	2203      	movs	r2, #3
 8015de0:	4013      	ands	r3, r2
 8015de2:	2b03      	cmp	r3, #3
 8015de4:	d017      	beq.n	8015e16 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	68db      	ldr	r3, [r3, #12]
 8015dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8015dec:	697b      	ldr	r3, [r7, #20]
 8015dee:	005b      	lsls	r3, r3, #1
 8015df0:	2203      	movs	r2, #3
 8015df2:	409a      	lsls	r2, r3
 8015df4:	0013      	movs	r3, r2
 8015df6:	43da      	mvns	r2, r3
 8015df8:	693b      	ldr	r3, [r7, #16]
 8015dfa:	4013      	ands	r3, r2
 8015dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015dfe:	683b      	ldr	r3, [r7, #0]
 8015e00:	689a      	ldr	r2, [r3, #8]
 8015e02:	697b      	ldr	r3, [r7, #20]
 8015e04:	005b      	lsls	r3, r3, #1
 8015e06:	409a      	lsls	r2, r3
 8015e08:	0013      	movs	r3, r2
 8015e0a:	693a      	ldr	r2, [r7, #16]
 8015e0c:	4313      	orrs	r3, r2
 8015e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	693a      	ldr	r2, [r7, #16]
 8015e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	685b      	ldr	r3, [r3, #4]
 8015e1a:	2203      	movs	r2, #3
 8015e1c:	4013      	ands	r3, r2
 8015e1e:	2b02      	cmp	r3, #2
 8015e20:	d123      	bne.n	8015e6a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015e22:	697b      	ldr	r3, [r7, #20]
 8015e24:	08da      	lsrs	r2, r3, #3
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	3208      	adds	r2, #8
 8015e2a:	0092      	lsls	r2, r2, #2
 8015e2c:	58d3      	ldr	r3, [r2, r3]
 8015e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8015e30:	697b      	ldr	r3, [r7, #20]
 8015e32:	2207      	movs	r2, #7
 8015e34:	4013      	ands	r3, r2
 8015e36:	009b      	lsls	r3, r3, #2
 8015e38:	220f      	movs	r2, #15
 8015e3a:	409a      	lsls	r2, r3
 8015e3c:	0013      	movs	r3, r2
 8015e3e:	43da      	mvns	r2, r3
 8015e40:	693b      	ldr	r3, [r7, #16]
 8015e42:	4013      	ands	r3, r2
 8015e44:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8015e46:	683b      	ldr	r3, [r7, #0]
 8015e48:	691a      	ldr	r2, [r3, #16]
 8015e4a:	697b      	ldr	r3, [r7, #20]
 8015e4c:	2107      	movs	r1, #7
 8015e4e:	400b      	ands	r3, r1
 8015e50:	009b      	lsls	r3, r3, #2
 8015e52:	409a      	lsls	r2, r3
 8015e54:	0013      	movs	r3, r2
 8015e56:	693a      	ldr	r2, [r7, #16]
 8015e58:	4313      	orrs	r3, r2
 8015e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8015e5c:	697b      	ldr	r3, [r7, #20]
 8015e5e:	08da      	lsrs	r2, r3, #3
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	3208      	adds	r2, #8
 8015e64:	0092      	lsls	r2, r2, #2
 8015e66:	6939      	ldr	r1, [r7, #16]
 8015e68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8015e70:	697b      	ldr	r3, [r7, #20]
 8015e72:	005b      	lsls	r3, r3, #1
 8015e74:	2203      	movs	r2, #3
 8015e76:	409a      	lsls	r2, r3
 8015e78:	0013      	movs	r3, r2
 8015e7a:	43da      	mvns	r2, r3
 8015e7c:	693b      	ldr	r3, [r7, #16]
 8015e7e:	4013      	ands	r3, r2
 8015e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	685b      	ldr	r3, [r3, #4]
 8015e86:	2203      	movs	r2, #3
 8015e88:	401a      	ands	r2, r3
 8015e8a:	697b      	ldr	r3, [r7, #20]
 8015e8c:	005b      	lsls	r3, r3, #1
 8015e8e:	409a      	lsls	r2, r3
 8015e90:	0013      	movs	r3, r2
 8015e92:	693a      	ldr	r2, [r7, #16]
 8015e94:	4313      	orrs	r3, r2
 8015e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	693a      	ldr	r2, [r7, #16]
 8015e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015e9e:	683b      	ldr	r3, [r7, #0]
 8015ea0:	685a      	ldr	r2, [r3, #4]
 8015ea2:	23c0      	movs	r3, #192	@ 0xc0
 8015ea4:	029b      	lsls	r3, r3, #10
 8015ea6:	4013      	ands	r3, r2
 8015ea8:	d100      	bne.n	8015eac <HAL_GPIO_Init+0x17c>
 8015eaa:	e0a0      	b.n	8015fee <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015eac:	4b57      	ldr	r3, [pc, #348]	@ (801600c <HAL_GPIO_Init+0x2dc>)
 8015eae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015eb0:	4b56      	ldr	r3, [pc, #344]	@ (801600c <HAL_GPIO_Init+0x2dc>)
 8015eb2:	2101      	movs	r1, #1
 8015eb4:	430a      	orrs	r2, r1
 8015eb6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8015eb8:	4a55      	ldr	r2, [pc, #340]	@ (8016010 <HAL_GPIO_Init+0x2e0>)
 8015eba:	697b      	ldr	r3, [r7, #20]
 8015ebc:	089b      	lsrs	r3, r3, #2
 8015ebe:	3302      	adds	r3, #2
 8015ec0:	009b      	lsls	r3, r3, #2
 8015ec2:	589b      	ldr	r3, [r3, r2]
 8015ec4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8015ec6:	697b      	ldr	r3, [r7, #20]
 8015ec8:	2203      	movs	r2, #3
 8015eca:	4013      	ands	r3, r2
 8015ecc:	009b      	lsls	r3, r3, #2
 8015ece:	220f      	movs	r2, #15
 8015ed0:	409a      	lsls	r2, r3
 8015ed2:	0013      	movs	r3, r2
 8015ed4:	43da      	mvns	r2, r3
 8015ed6:	693b      	ldr	r3, [r7, #16]
 8015ed8:	4013      	ands	r3, r2
 8015eda:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8015edc:	687a      	ldr	r2, [r7, #4]
 8015ede:	23a0      	movs	r3, #160	@ 0xa0
 8015ee0:	05db      	lsls	r3, r3, #23
 8015ee2:	429a      	cmp	r2, r3
 8015ee4:	d01f      	beq.n	8015f26 <HAL_GPIO_Init+0x1f6>
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	4a4a      	ldr	r2, [pc, #296]	@ (8016014 <HAL_GPIO_Init+0x2e4>)
 8015eea:	4293      	cmp	r3, r2
 8015eec:	d019      	beq.n	8015f22 <HAL_GPIO_Init+0x1f2>
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	4a49      	ldr	r2, [pc, #292]	@ (8016018 <HAL_GPIO_Init+0x2e8>)
 8015ef2:	4293      	cmp	r3, r2
 8015ef4:	d013      	beq.n	8015f1e <HAL_GPIO_Init+0x1ee>
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	4a48      	ldr	r2, [pc, #288]	@ (801601c <HAL_GPIO_Init+0x2ec>)
 8015efa:	4293      	cmp	r3, r2
 8015efc:	d00d      	beq.n	8015f1a <HAL_GPIO_Init+0x1ea>
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	4a47      	ldr	r2, [pc, #284]	@ (8016020 <HAL_GPIO_Init+0x2f0>)
 8015f02:	4293      	cmp	r3, r2
 8015f04:	d007      	beq.n	8015f16 <HAL_GPIO_Init+0x1e6>
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	4a46      	ldr	r2, [pc, #280]	@ (8016024 <HAL_GPIO_Init+0x2f4>)
 8015f0a:	4293      	cmp	r3, r2
 8015f0c:	d101      	bne.n	8015f12 <HAL_GPIO_Init+0x1e2>
 8015f0e:	2305      	movs	r3, #5
 8015f10:	e00a      	b.n	8015f28 <HAL_GPIO_Init+0x1f8>
 8015f12:	2306      	movs	r3, #6
 8015f14:	e008      	b.n	8015f28 <HAL_GPIO_Init+0x1f8>
 8015f16:	2304      	movs	r3, #4
 8015f18:	e006      	b.n	8015f28 <HAL_GPIO_Init+0x1f8>
 8015f1a:	2303      	movs	r3, #3
 8015f1c:	e004      	b.n	8015f28 <HAL_GPIO_Init+0x1f8>
 8015f1e:	2302      	movs	r3, #2
 8015f20:	e002      	b.n	8015f28 <HAL_GPIO_Init+0x1f8>
 8015f22:	2301      	movs	r3, #1
 8015f24:	e000      	b.n	8015f28 <HAL_GPIO_Init+0x1f8>
 8015f26:	2300      	movs	r3, #0
 8015f28:	697a      	ldr	r2, [r7, #20]
 8015f2a:	2103      	movs	r1, #3
 8015f2c:	400a      	ands	r2, r1
 8015f2e:	0092      	lsls	r2, r2, #2
 8015f30:	4093      	lsls	r3, r2
 8015f32:	693a      	ldr	r2, [r7, #16]
 8015f34:	4313      	orrs	r3, r2
 8015f36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015f38:	4935      	ldr	r1, [pc, #212]	@ (8016010 <HAL_GPIO_Init+0x2e0>)
 8015f3a:	697b      	ldr	r3, [r7, #20]
 8015f3c:	089b      	lsrs	r3, r3, #2
 8015f3e:	3302      	adds	r3, #2
 8015f40:	009b      	lsls	r3, r3, #2
 8015f42:	693a      	ldr	r2, [r7, #16]
 8015f44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015f46:	4b38      	ldr	r3, [pc, #224]	@ (8016028 <HAL_GPIO_Init+0x2f8>)
 8015f48:	689b      	ldr	r3, [r3, #8]
 8015f4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	43da      	mvns	r2, r3
 8015f50:	693b      	ldr	r3, [r7, #16]
 8015f52:	4013      	ands	r3, r2
 8015f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015f56:	683b      	ldr	r3, [r7, #0]
 8015f58:	685a      	ldr	r2, [r3, #4]
 8015f5a:	2380      	movs	r3, #128	@ 0x80
 8015f5c:	035b      	lsls	r3, r3, #13
 8015f5e:	4013      	ands	r3, r2
 8015f60:	d003      	beq.n	8015f6a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8015f62:	693a      	ldr	r2, [r7, #16]
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	4313      	orrs	r3, r2
 8015f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8015f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8016028 <HAL_GPIO_Init+0x2f8>)
 8015f6c:	693a      	ldr	r2, [r7, #16]
 8015f6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8015f70:	4b2d      	ldr	r3, [pc, #180]	@ (8016028 <HAL_GPIO_Init+0x2f8>)
 8015f72:	68db      	ldr	r3, [r3, #12]
 8015f74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	43da      	mvns	r2, r3
 8015f7a:	693b      	ldr	r3, [r7, #16]
 8015f7c:	4013      	ands	r3, r2
 8015f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015f80:	683b      	ldr	r3, [r7, #0]
 8015f82:	685a      	ldr	r2, [r3, #4]
 8015f84:	2380      	movs	r3, #128	@ 0x80
 8015f86:	039b      	lsls	r3, r3, #14
 8015f88:	4013      	ands	r3, r2
 8015f8a:	d003      	beq.n	8015f94 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8015f8c:	693a      	ldr	r2, [r7, #16]
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	4313      	orrs	r3, r2
 8015f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8015f94:	4b24      	ldr	r3, [pc, #144]	@ (8016028 <HAL_GPIO_Init+0x2f8>)
 8015f96:	693a      	ldr	r2, [r7, #16]
 8015f98:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8015f9a:	4b23      	ldr	r3, [pc, #140]	@ (8016028 <HAL_GPIO_Init+0x2f8>)
 8015f9c:	685b      	ldr	r3, [r3, #4]
 8015f9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	43da      	mvns	r2, r3
 8015fa4:	693b      	ldr	r3, [r7, #16]
 8015fa6:	4013      	ands	r3, r2
 8015fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015faa:	683b      	ldr	r3, [r7, #0]
 8015fac:	685a      	ldr	r2, [r3, #4]
 8015fae:	2380      	movs	r3, #128	@ 0x80
 8015fb0:	029b      	lsls	r3, r3, #10
 8015fb2:	4013      	ands	r3, r2
 8015fb4:	d003      	beq.n	8015fbe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8015fb6:	693a      	ldr	r2, [r7, #16]
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	4313      	orrs	r3, r2
 8015fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8015fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8016028 <HAL_GPIO_Init+0x2f8>)
 8015fc0:	693a      	ldr	r2, [r7, #16]
 8015fc2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015fc4:	4b18      	ldr	r3, [pc, #96]	@ (8016028 <HAL_GPIO_Init+0x2f8>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	43da      	mvns	r2, r3
 8015fce:	693b      	ldr	r3, [r7, #16]
 8015fd0:	4013      	ands	r3, r2
 8015fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015fd4:	683b      	ldr	r3, [r7, #0]
 8015fd6:	685a      	ldr	r2, [r3, #4]
 8015fd8:	2380      	movs	r3, #128	@ 0x80
 8015fda:	025b      	lsls	r3, r3, #9
 8015fdc:	4013      	ands	r3, r2
 8015fde:	d003      	beq.n	8015fe8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8015fe0:	693a      	ldr	r2, [r7, #16]
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	4313      	orrs	r3, r2
 8015fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8015fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8016028 <HAL_GPIO_Init+0x2f8>)
 8015fea:	693a      	ldr	r2, [r7, #16]
 8015fec:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8015fee:	697b      	ldr	r3, [r7, #20]
 8015ff0:	3301      	adds	r3, #1
 8015ff2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8015ff4:	683b      	ldr	r3, [r7, #0]
 8015ff6:	681a      	ldr	r2, [r3, #0]
 8015ff8:	697b      	ldr	r3, [r7, #20]
 8015ffa:	40da      	lsrs	r2, r3
 8015ffc:	1e13      	subs	r3, r2, #0
 8015ffe:	d000      	beq.n	8016002 <HAL_GPIO_Init+0x2d2>
 8016000:	e6a2      	b.n	8015d48 <HAL_GPIO_Init+0x18>
  }
}
 8016002:	46c0      	nop			@ (mov r8, r8)
 8016004:	46c0      	nop			@ (mov r8, r8)
 8016006:	46bd      	mov	sp, r7
 8016008:	b006      	add	sp, #24
 801600a:	bd80      	pop	{r7, pc}
 801600c:	40021000 	.word	0x40021000
 8016010:	40010000 	.word	0x40010000
 8016014:	50000400 	.word	0x50000400
 8016018:	50000800 	.word	0x50000800
 801601c:	50000c00 	.word	0x50000c00
 8016020:	50001000 	.word	0x50001000
 8016024:	50001c00 	.word	0x50001c00
 8016028:	40010400 	.word	0x40010400

0801602c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b084      	sub	sp, #16
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
 8016034:	000a      	movs	r2, r1
 8016036:	1cbb      	adds	r3, r7, #2
 8016038:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	691b      	ldr	r3, [r3, #16]
 801603e:	1cba      	adds	r2, r7, #2
 8016040:	8812      	ldrh	r2, [r2, #0]
 8016042:	4013      	ands	r3, r2
 8016044:	d004      	beq.n	8016050 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8016046:	230f      	movs	r3, #15
 8016048:	18fb      	adds	r3, r7, r3
 801604a:	2201      	movs	r2, #1
 801604c:	701a      	strb	r2, [r3, #0]
 801604e:	e003      	b.n	8016058 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8016050:	230f      	movs	r3, #15
 8016052:	18fb      	adds	r3, r7, r3
 8016054:	2200      	movs	r2, #0
 8016056:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8016058:	230f      	movs	r3, #15
 801605a:	18fb      	adds	r3, r7, r3
 801605c:	781b      	ldrb	r3, [r3, #0]
}
 801605e:	0018      	movs	r0, r3
 8016060:	46bd      	mov	sp, r7
 8016062:	b004      	add	sp, #16
 8016064:	bd80      	pop	{r7, pc}

08016066 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8016066:	b580      	push	{r7, lr}
 8016068:	b082      	sub	sp, #8
 801606a:	af00      	add	r7, sp, #0
 801606c:	6078      	str	r0, [r7, #4]
 801606e:	0008      	movs	r0, r1
 8016070:	0011      	movs	r1, r2
 8016072:	1cbb      	adds	r3, r7, #2
 8016074:	1c02      	adds	r2, r0, #0
 8016076:	801a      	strh	r2, [r3, #0]
 8016078:	1c7b      	adds	r3, r7, #1
 801607a:	1c0a      	adds	r2, r1, #0
 801607c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801607e:	1c7b      	adds	r3, r7, #1
 8016080:	781b      	ldrb	r3, [r3, #0]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d004      	beq.n	8016090 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8016086:	1cbb      	adds	r3, r7, #2
 8016088:	881a      	ldrh	r2, [r3, #0]
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 801608e:	e003      	b.n	8016098 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8016090:	1cbb      	adds	r3, r7, #2
 8016092:	881a      	ldrh	r2, [r3, #0]
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8016098:	46c0      	nop			@ (mov r8, r8)
 801609a:	46bd      	mov	sp, r7
 801609c:	b002      	add	sp, #8
 801609e:	bd80      	pop	{r7, pc}

080160a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b082      	sub	sp, #8
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	0002      	movs	r2, r0
 80160a8:	1dbb      	adds	r3, r7, #6
 80160aa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80160ac:	4b09      	ldr	r3, [pc, #36]	@ (80160d4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80160ae:	695b      	ldr	r3, [r3, #20]
 80160b0:	1dba      	adds	r2, r7, #6
 80160b2:	8812      	ldrh	r2, [r2, #0]
 80160b4:	4013      	ands	r3, r2
 80160b6:	d008      	beq.n	80160ca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80160b8:	4b06      	ldr	r3, [pc, #24]	@ (80160d4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80160ba:	1dba      	adds	r2, r7, #6
 80160bc:	8812      	ldrh	r2, [r2, #0]
 80160be:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80160c0:	1dbb      	adds	r3, r7, #6
 80160c2:	881b      	ldrh	r3, [r3, #0]
 80160c4:	0018      	movs	r0, r3
 80160c6:	f7f7 fa5f 	bl	800d588 <HAL_GPIO_EXTI_Callback>
  }
}
 80160ca:	46c0      	nop			@ (mov r8, r8)
 80160cc:	46bd      	mov	sp, r7
 80160ce:	b002      	add	sp, #8
 80160d0:	bd80      	pop	{r7, pc}
 80160d2:	46c0      	nop			@ (mov r8, r8)
 80160d4:	40010400 	.word	0x40010400

080160d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b082      	sub	sp, #8
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d101      	bne.n	80160ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80160e6:	2301      	movs	r3, #1
 80160e8:	e082      	b.n	80161f0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	2241      	movs	r2, #65	@ 0x41
 80160ee:	5c9b      	ldrb	r3, [r3, r2]
 80160f0:	b2db      	uxtb	r3, r3
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d107      	bne.n	8016106 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	2240      	movs	r2, #64	@ 0x40
 80160fa:	2100      	movs	r1, #0
 80160fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	0018      	movs	r0, r3
 8016102:	f7f6 fcc3 	bl	800ca8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	2241      	movs	r2, #65	@ 0x41
 801610a:	2124      	movs	r1, #36	@ 0x24
 801610c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	681a      	ldr	r2, [r3, #0]
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	2101      	movs	r1, #1
 801611a:	438a      	bics	r2, r1
 801611c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	685a      	ldr	r2, [r3, #4]
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	4934      	ldr	r1, [pc, #208]	@ (80161f8 <HAL_I2C_Init+0x120>)
 8016128:	400a      	ands	r2, r1
 801612a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	689a      	ldr	r2, [r3, #8]
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	4931      	ldr	r1, [pc, #196]	@ (80161fc <HAL_I2C_Init+0x124>)
 8016138:	400a      	ands	r2, r1
 801613a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	68db      	ldr	r3, [r3, #12]
 8016140:	2b01      	cmp	r3, #1
 8016142:	d108      	bne.n	8016156 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	689a      	ldr	r2, [r3, #8]
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	2180      	movs	r1, #128	@ 0x80
 801614e:	0209      	lsls	r1, r1, #8
 8016150:	430a      	orrs	r2, r1
 8016152:	609a      	str	r2, [r3, #8]
 8016154:	e007      	b.n	8016166 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	689a      	ldr	r2, [r3, #8]
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	2184      	movs	r1, #132	@ 0x84
 8016160:	0209      	lsls	r1, r1, #8
 8016162:	430a      	orrs	r2, r1
 8016164:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	68db      	ldr	r3, [r3, #12]
 801616a:	2b02      	cmp	r3, #2
 801616c:	d104      	bne.n	8016178 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	2280      	movs	r2, #128	@ 0x80
 8016174:	0112      	lsls	r2, r2, #4
 8016176:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	685a      	ldr	r2, [r3, #4]
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	491f      	ldr	r1, [pc, #124]	@ (8016200 <HAL_I2C_Init+0x128>)
 8016184:	430a      	orrs	r2, r1
 8016186:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	68da      	ldr	r2, [r3, #12]
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	491a      	ldr	r1, [pc, #104]	@ (80161fc <HAL_I2C_Init+0x124>)
 8016194:	400a      	ands	r2, r1
 8016196:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	691a      	ldr	r2, [r3, #16]
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	695b      	ldr	r3, [r3, #20]
 80161a0:	431a      	orrs	r2, r3
 80161a2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	699b      	ldr	r3, [r3, #24]
 80161a8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	430a      	orrs	r2, r1
 80161b0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	69d9      	ldr	r1, [r3, #28]
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	6a1a      	ldr	r2, [r3, #32]
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	430a      	orrs	r2, r1
 80161c0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	681b      	ldr	r3, [r3, #0]
 80161c6:	681a      	ldr	r2, [r3, #0]
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	2101      	movs	r1, #1
 80161ce:	430a      	orrs	r2, r1
 80161d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	2200      	movs	r2, #0
 80161d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	2241      	movs	r2, #65	@ 0x41
 80161dc:	2120      	movs	r1, #32
 80161de:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	2200      	movs	r2, #0
 80161e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	2242      	movs	r2, #66	@ 0x42
 80161ea:	2100      	movs	r1, #0
 80161ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80161ee:	2300      	movs	r3, #0
}
 80161f0:	0018      	movs	r0, r3
 80161f2:	46bd      	mov	sp, r7
 80161f4:	b002      	add	sp, #8
 80161f6:	bd80      	pop	{r7, pc}
 80161f8:	f0ffffff 	.word	0xf0ffffff
 80161fc:	ffff7fff 	.word	0xffff7fff
 8016200:	02008000 	.word	0x02008000

08016204 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8016204:	b590      	push	{r4, r7, lr}
 8016206:	b089      	sub	sp, #36	@ 0x24
 8016208:	af02      	add	r7, sp, #8
 801620a:	60f8      	str	r0, [r7, #12]
 801620c:	0008      	movs	r0, r1
 801620e:	607a      	str	r2, [r7, #4]
 8016210:	0019      	movs	r1, r3
 8016212:	230a      	movs	r3, #10
 8016214:	18fb      	adds	r3, r7, r3
 8016216:	1c02      	adds	r2, r0, #0
 8016218:	801a      	strh	r2, [r3, #0]
 801621a:	2308      	movs	r3, #8
 801621c:	18fb      	adds	r3, r7, r3
 801621e:	1c0a      	adds	r2, r1, #0
 8016220:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	2241      	movs	r2, #65	@ 0x41
 8016226:	5c9b      	ldrb	r3, [r3, r2]
 8016228:	b2db      	uxtb	r3, r3
 801622a:	2b20      	cmp	r3, #32
 801622c:	d000      	beq.n	8016230 <HAL_I2C_Master_Transmit+0x2c>
 801622e:	e0e7      	b.n	8016400 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	2240      	movs	r2, #64	@ 0x40
 8016234:	5c9b      	ldrb	r3, [r3, r2]
 8016236:	2b01      	cmp	r3, #1
 8016238:	d101      	bne.n	801623e <HAL_I2C_Master_Transmit+0x3a>
 801623a:	2302      	movs	r3, #2
 801623c:	e0e1      	b.n	8016402 <HAL_I2C_Master_Transmit+0x1fe>
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	2240      	movs	r2, #64	@ 0x40
 8016242:	2101      	movs	r1, #1
 8016244:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016246:	f7fe fc7d 	bl	8014b44 <HAL_GetTick>
 801624a:	0003      	movs	r3, r0
 801624c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801624e:	2380      	movs	r3, #128	@ 0x80
 8016250:	0219      	lsls	r1, r3, #8
 8016252:	68f8      	ldr	r0, [r7, #12]
 8016254:	697b      	ldr	r3, [r7, #20]
 8016256:	9300      	str	r3, [sp, #0]
 8016258:	2319      	movs	r3, #25
 801625a:	2201      	movs	r2, #1
 801625c:	f002 faa4 	bl	80187a8 <I2C_WaitOnFlagUntilTimeout>
 8016260:	1e03      	subs	r3, r0, #0
 8016262:	d001      	beq.n	8016268 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8016264:	2301      	movs	r3, #1
 8016266:	e0cc      	b.n	8016402 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	2241      	movs	r2, #65	@ 0x41
 801626c:	2121      	movs	r1, #33	@ 0x21
 801626e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	2242      	movs	r2, #66	@ 0x42
 8016274:	2110      	movs	r1, #16
 8016276:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	2200      	movs	r2, #0
 801627c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	687a      	ldr	r2, [r7, #4]
 8016282:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	2208      	movs	r2, #8
 8016288:	18ba      	adds	r2, r7, r2
 801628a:	8812      	ldrh	r2, [r2, #0]
 801628c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	2200      	movs	r2, #0
 8016292:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016298:	b29b      	uxth	r3, r3
 801629a:	2bff      	cmp	r3, #255	@ 0xff
 801629c:	d911      	bls.n	80162c2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	22ff      	movs	r2, #255	@ 0xff
 80162a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162a8:	b2da      	uxtb	r2, r3
 80162aa:	2380      	movs	r3, #128	@ 0x80
 80162ac:	045c      	lsls	r4, r3, #17
 80162ae:	230a      	movs	r3, #10
 80162b0:	18fb      	adds	r3, r7, r3
 80162b2:	8819      	ldrh	r1, [r3, #0]
 80162b4:	68f8      	ldr	r0, [r7, #12]
 80162b6:	4b55      	ldr	r3, [pc, #340]	@ (801640c <HAL_I2C_Master_Transmit+0x208>)
 80162b8:	9300      	str	r3, [sp, #0]
 80162ba:	0023      	movs	r3, r4
 80162bc:	f002 fcc6 	bl	8018c4c <I2C_TransferConfig>
 80162c0:	e075      	b.n	80163ae <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80162c6:	b29a      	uxth	r2, r3
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162d0:	b2da      	uxtb	r2, r3
 80162d2:	2380      	movs	r3, #128	@ 0x80
 80162d4:	049c      	lsls	r4, r3, #18
 80162d6:	230a      	movs	r3, #10
 80162d8:	18fb      	adds	r3, r7, r3
 80162da:	8819      	ldrh	r1, [r3, #0]
 80162dc:	68f8      	ldr	r0, [r7, #12]
 80162de:	4b4b      	ldr	r3, [pc, #300]	@ (801640c <HAL_I2C_Master_Transmit+0x208>)
 80162e0:	9300      	str	r3, [sp, #0]
 80162e2:	0023      	movs	r3, r4
 80162e4:	f002 fcb2 	bl	8018c4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80162e8:	e061      	b.n	80163ae <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80162ea:	697a      	ldr	r2, [r7, #20]
 80162ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	0018      	movs	r0, r3
 80162f2:	f002 faa7 	bl	8018844 <I2C_WaitOnTXISFlagUntilTimeout>
 80162f6:	1e03      	subs	r3, r0, #0
 80162f8:	d001      	beq.n	80162fe <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80162fa:	2301      	movs	r3, #1
 80162fc:	e081      	b.n	8016402 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016302:	781a      	ldrb	r2, [r3, #0]
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801630e:	1c5a      	adds	r2, r3, #1
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016318:	b29b      	uxth	r3, r3
 801631a:	3b01      	subs	r3, #1
 801631c:	b29a      	uxth	r2, r3
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016326:	3b01      	subs	r3, #1
 8016328:	b29a      	uxth	r2, r3
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016332:	b29b      	uxth	r3, r3
 8016334:	2b00      	cmp	r3, #0
 8016336:	d03a      	beq.n	80163ae <HAL_I2C_Master_Transmit+0x1aa>
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801633c:	2b00      	cmp	r3, #0
 801633e:	d136      	bne.n	80163ae <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016342:	68f8      	ldr	r0, [r7, #12]
 8016344:	697b      	ldr	r3, [r7, #20]
 8016346:	9300      	str	r3, [sp, #0]
 8016348:	0013      	movs	r3, r2
 801634a:	2200      	movs	r2, #0
 801634c:	2180      	movs	r1, #128	@ 0x80
 801634e:	f002 fa2b 	bl	80187a8 <I2C_WaitOnFlagUntilTimeout>
 8016352:	1e03      	subs	r3, r0, #0
 8016354:	d001      	beq.n	801635a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8016356:	2301      	movs	r3, #1
 8016358:	e053      	b.n	8016402 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801635e:	b29b      	uxth	r3, r3
 8016360:	2bff      	cmp	r3, #255	@ 0xff
 8016362:	d911      	bls.n	8016388 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	22ff      	movs	r2, #255	@ 0xff
 8016368:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801636e:	b2da      	uxtb	r2, r3
 8016370:	2380      	movs	r3, #128	@ 0x80
 8016372:	045c      	lsls	r4, r3, #17
 8016374:	230a      	movs	r3, #10
 8016376:	18fb      	adds	r3, r7, r3
 8016378:	8819      	ldrh	r1, [r3, #0]
 801637a:	68f8      	ldr	r0, [r7, #12]
 801637c:	2300      	movs	r3, #0
 801637e:	9300      	str	r3, [sp, #0]
 8016380:	0023      	movs	r3, r4
 8016382:	f002 fc63 	bl	8018c4c <I2C_TransferConfig>
 8016386:	e012      	b.n	80163ae <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801638c:	b29a      	uxth	r2, r3
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016396:	b2da      	uxtb	r2, r3
 8016398:	2380      	movs	r3, #128	@ 0x80
 801639a:	049c      	lsls	r4, r3, #18
 801639c:	230a      	movs	r3, #10
 801639e:	18fb      	adds	r3, r7, r3
 80163a0:	8819      	ldrh	r1, [r3, #0]
 80163a2:	68f8      	ldr	r0, [r7, #12]
 80163a4:	2300      	movs	r3, #0
 80163a6:	9300      	str	r3, [sp, #0]
 80163a8:	0023      	movs	r3, r4
 80163aa:	f002 fc4f 	bl	8018c4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80163b2:	b29b      	uxth	r3, r3
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d198      	bne.n	80162ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80163b8:	697a      	ldr	r2, [r7, #20]
 80163ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	0018      	movs	r0, r3
 80163c0:	f002 fa86 	bl	80188d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80163c4:	1e03      	subs	r3, r0, #0
 80163c6:	d001      	beq.n	80163cc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80163c8:	2301      	movs	r3, #1
 80163ca:	e01a      	b.n	8016402 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	2220      	movs	r2, #32
 80163d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	685a      	ldr	r2, [r3, #4]
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	490c      	ldr	r1, [pc, #48]	@ (8016410 <HAL_I2C_Master_Transmit+0x20c>)
 80163e0:	400a      	ands	r2, r1
 80163e2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	2241      	movs	r2, #65	@ 0x41
 80163e8:	2120      	movs	r1, #32
 80163ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	2242      	movs	r2, #66	@ 0x42
 80163f0:	2100      	movs	r1, #0
 80163f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	2240      	movs	r2, #64	@ 0x40
 80163f8:	2100      	movs	r1, #0
 80163fa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80163fc:	2300      	movs	r3, #0
 80163fe:	e000      	b.n	8016402 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8016400:	2302      	movs	r3, #2
  }
}
 8016402:	0018      	movs	r0, r3
 8016404:	46bd      	mov	sp, r7
 8016406:	b007      	add	sp, #28
 8016408:	bd90      	pop	{r4, r7, pc}
 801640a:	46c0      	nop			@ (mov r8, r8)
 801640c:	80002000 	.word	0x80002000
 8016410:	fe00e800 	.word	0xfe00e800

08016414 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8016414:	b590      	push	{r4, r7, lr}
 8016416:	b089      	sub	sp, #36	@ 0x24
 8016418:	af02      	add	r7, sp, #8
 801641a:	60f8      	str	r0, [r7, #12]
 801641c:	0008      	movs	r0, r1
 801641e:	607a      	str	r2, [r7, #4]
 8016420:	0019      	movs	r1, r3
 8016422:	230a      	movs	r3, #10
 8016424:	18fb      	adds	r3, r7, r3
 8016426:	1c02      	adds	r2, r0, #0
 8016428:	801a      	strh	r2, [r3, #0]
 801642a:	2308      	movs	r3, #8
 801642c:	18fb      	adds	r3, r7, r3
 801642e:	1c0a      	adds	r2, r1, #0
 8016430:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	2241      	movs	r2, #65	@ 0x41
 8016436:	5c9b      	ldrb	r3, [r3, r2]
 8016438:	b2db      	uxtb	r3, r3
 801643a:	2b20      	cmp	r3, #32
 801643c:	d000      	beq.n	8016440 <HAL_I2C_Master_Receive+0x2c>
 801643e:	e0e8      	b.n	8016612 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	2240      	movs	r2, #64	@ 0x40
 8016444:	5c9b      	ldrb	r3, [r3, r2]
 8016446:	2b01      	cmp	r3, #1
 8016448:	d101      	bne.n	801644e <HAL_I2C_Master_Receive+0x3a>
 801644a:	2302      	movs	r3, #2
 801644c:	e0e2      	b.n	8016614 <HAL_I2C_Master_Receive+0x200>
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	2240      	movs	r2, #64	@ 0x40
 8016452:	2101      	movs	r1, #1
 8016454:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016456:	f7fe fb75 	bl	8014b44 <HAL_GetTick>
 801645a:	0003      	movs	r3, r0
 801645c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801645e:	2380      	movs	r3, #128	@ 0x80
 8016460:	0219      	lsls	r1, r3, #8
 8016462:	68f8      	ldr	r0, [r7, #12]
 8016464:	697b      	ldr	r3, [r7, #20]
 8016466:	9300      	str	r3, [sp, #0]
 8016468:	2319      	movs	r3, #25
 801646a:	2201      	movs	r2, #1
 801646c:	f002 f99c 	bl	80187a8 <I2C_WaitOnFlagUntilTimeout>
 8016470:	1e03      	subs	r3, r0, #0
 8016472:	d001      	beq.n	8016478 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8016474:	2301      	movs	r3, #1
 8016476:	e0cd      	b.n	8016614 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	2241      	movs	r2, #65	@ 0x41
 801647c:	2122      	movs	r1, #34	@ 0x22
 801647e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	2242      	movs	r2, #66	@ 0x42
 8016484:	2110      	movs	r1, #16
 8016486:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	2200      	movs	r2, #0
 801648c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	687a      	ldr	r2, [r7, #4]
 8016492:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	2208      	movs	r2, #8
 8016498:	18ba      	adds	r2, r7, r2
 801649a:	8812      	ldrh	r2, [r2, #0]
 801649c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	2200      	movs	r2, #0
 80164a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164a8:	b29b      	uxth	r3, r3
 80164aa:	2bff      	cmp	r3, #255	@ 0xff
 80164ac:	d911      	bls.n	80164d2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	22ff      	movs	r2, #255	@ 0xff
 80164b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80164b8:	b2da      	uxtb	r2, r3
 80164ba:	2380      	movs	r3, #128	@ 0x80
 80164bc:	045c      	lsls	r4, r3, #17
 80164be:	230a      	movs	r3, #10
 80164c0:	18fb      	adds	r3, r7, r3
 80164c2:	8819      	ldrh	r1, [r3, #0]
 80164c4:	68f8      	ldr	r0, [r7, #12]
 80164c6:	4b55      	ldr	r3, [pc, #340]	@ (801661c <HAL_I2C_Master_Receive+0x208>)
 80164c8:	9300      	str	r3, [sp, #0]
 80164ca:	0023      	movs	r3, r4
 80164cc:	f002 fbbe 	bl	8018c4c <I2C_TransferConfig>
 80164d0:	e076      	b.n	80165c0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80164d6:	b29a      	uxth	r2, r3
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80164e0:	b2da      	uxtb	r2, r3
 80164e2:	2380      	movs	r3, #128	@ 0x80
 80164e4:	049c      	lsls	r4, r3, #18
 80164e6:	230a      	movs	r3, #10
 80164e8:	18fb      	adds	r3, r7, r3
 80164ea:	8819      	ldrh	r1, [r3, #0]
 80164ec:	68f8      	ldr	r0, [r7, #12]
 80164ee:	4b4b      	ldr	r3, [pc, #300]	@ (801661c <HAL_I2C_Master_Receive+0x208>)
 80164f0:	9300      	str	r3, [sp, #0]
 80164f2:	0023      	movs	r3, r4
 80164f4:	f002 fbaa 	bl	8018c4c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80164f8:	e062      	b.n	80165c0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80164fa:	697a      	ldr	r2, [r7, #20]
 80164fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	0018      	movs	r0, r3
 8016502:	f002 fa29 	bl	8018958 <I2C_WaitOnRXNEFlagUntilTimeout>
 8016506:	1e03      	subs	r3, r0, #0
 8016508:	d001      	beq.n	801650e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 801650a:	2301      	movs	r3, #1
 801650c:	e082      	b.n	8016614 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016518:	b2d2      	uxtb	r2, r2
 801651a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016520:	1c5a      	adds	r2, r3, #1
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801652a:	3b01      	subs	r3, #1
 801652c:	b29a      	uxth	r2, r3
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016536:	b29b      	uxth	r3, r3
 8016538:	3b01      	subs	r3, #1
 801653a:	b29a      	uxth	r2, r3
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016544:	b29b      	uxth	r3, r3
 8016546:	2b00      	cmp	r3, #0
 8016548:	d03a      	beq.n	80165c0 <HAL_I2C_Master_Receive+0x1ac>
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801654e:	2b00      	cmp	r3, #0
 8016550:	d136      	bne.n	80165c0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016552:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016554:	68f8      	ldr	r0, [r7, #12]
 8016556:	697b      	ldr	r3, [r7, #20]
 8016558:	9300      	str	r3, [sp, #0]
 801655a:	0013      	movs	r3, r2
 801655c:	2200      	movs	r2, #0
 801655e:	2180      	movs	r1, #128	@ 0x80
 8016560:	f002 f922 	bl	80187a8 <I2C_WaitOnFlagUntilTimeout>
 8016564:	1e03      	subs	r3, r0, #0
 8016566:	d001      	beq.n	801656c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8016568:	2301      	movs	r3, #1
 801656a:	e053      	b.n	8016614 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016570:	b29b      	uxth	r3, r3
 8016572:	2bff      	cmp	r3, #255	@ 0xff
 8016574:	d911      	bls.n	801659a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	22ff      	movs	r2, #255	@ 0xff
 801657a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016580:	b2da      	uxtb	r2, r3
 8016582:	2380      	movs	r3, #128	@ 0x80
 8016584:	045c      	lsls	r4, r3, #17
 8016586:	230a      	movs	r3, #10
 8016588:	18fb      	adds	r3, r7, r3
 801658a:	8819      	ldrh	r1, [r3, #0]
 801658c:	68f8      	ldr	r0, [r7, #12]
 801658e:	2300      	movs	r3, #0
 8016590:	9300      	str	r3, [sp, #0]
 8016592:	0023      	movs	r3, r4
 8016594:	f002 fb5a 	bl	8018c4c <I2C_TransferConfig>
 8016598:	e012      	b.n	80165c0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801659e:	b29a      	uxth	r2, r3
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80165a8:	b2da      	uxtb	r2, r3
 80165aa:	2380      	movs	r3, #128	@ 0x80
 80165ac:	049c      	lsls	r4, r3, #18
 80165ae:	230a      	movs	r3, #10
 80165b0:	18fb      	adds	r3, r7, r3
 80165b2:	8819      	ldrh	r1, [r3, #0]
 80165b4:	68f8      	ldr	r0, [r7, #12]
 80165b6:	2300      	movs	r3, #0
 80165b8:	9300      	str	r3, [sp, #0]
 80165ba:	0023      	movs	r3, r4
 80165bc:	f002 fb46 	bl	8018c4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80165c4:	b29b      	uxth	r3, r3
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d197      	bne.n	80164fa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80165ca:	697a      	ldr	r2, [r7, #20]
 80165cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	0018      	movs	r0, r3
 80165d2:	f002 f97d 	bl	80188d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80165d6:	1e03      	subs	r3, r0, #0
 80165d8:	d001      	beq.n	80165de <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80165da:	2301      	movs	r3, #1
 80165dc:	e01a      	b.n	8016614 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	2220      	movs	r2, #32
 80165e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	685a      	ldr	r2, [r3, #4]
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	490b      	ldr	r1, [pc, #44]	@ (8016620 <HAL_I2C_Master_Receive+0x20c>)
 80165f2:	400a      	ands	r2, r1
 80165f4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	2241      	movs	r2, #65	@ 0x41
 80165fa:	2120      	movs	r1, #32
 80165fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	2242      	movs	r2, #66	@ 0x42
 8016602:	2100      	movs	r1, #0
 8016604:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	2240      	movs	r2, #64	@ 0x40
 801660a:	2100      	movs	r1, #0
 801660c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801660e:	2300      	movs	r3, #0
 8016610:	e000      	b.n	8016614 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8016612:	2302      	movs	r3, #2
  }
}
 8016614:	0018      	movs	r0, r3
 8016616:	46bd      	mov	sp, r7
 8016618:	b007      	add	sp, #28
 801661a:	bd90      	pop	{r4, r7, pc}
 801661c:	80002400 	.word	0x80002400
 8016620:	fe00e800 	.word	0xfe00e800

08016624 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8016624:	b5b0      	push	{r4, r5, r7, lr}
 8016626:	b088      	sub	sp, #32
 8016628:	af02      	add	r7, sp, #8
 801662a:	60f8      	str	r0, [r7, #12]
 801662c:	0008      	movs	r0, r1
 801662e:	607a      	str	r2, [r7, #4]
 8016630:	0019      	movs	r1, r3
 8016632:	230a      	movs	r3, #10
 8016634:	18fb      	adds	r3, r7, r3
 8016636:	1c02      	adds	r2, r0, #0
 8016638:	801a      	strh	r2, [r3, #0]
 801663a:	2308      	movs	r3, #8
 801663c:	18fb      	adds	r3, r7, r3
 801663e:	1c0a      	adds	r2, r1, #0
 8016640:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	2241      	movs	r2, #65	@ 0x41
 8016646:	5c9b      	ldrb	r3, [r3, r2]
 8016648:	b2db      	uxtb	r3, r3
 801664a:	2b20      	cmp	r3, #32
 801664c:	d000      	beq.n	8016650 <HAL_I2C_Master_Transmit_DMA+0x2c>
 801664e:	e0dd      	b.n	801680c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	699a      	ldr	r2, [r3, #24]
 8016656:	2380      	movs	r3, #128	@ 0x80
 8016658:	021b      	lsls	r3, r3, #8
 801665a:	401a      	ands	r2, r3
 801665c:	2380      	movs	r3, #128	@ 0x80
 801665e:	021b      	lsls	r3, r3, #8
 8016660:	429a      	cmp	r2, r3
 8016662:	d101      	bne.n	8016668 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8016664:	2302      	movs	r3, #2
 8016666:	e0d2      	b.n	801680e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	2240      	movs	r2, #64	@ 0x40
 801666c:	5c9b      	ldrb	r3, [r3, r2]
 801666e:	2b01      	cmp	r3, #1
 8016670:	d101      	bne.n	8016676 <HAL_I2C_Master_Transmit_DMA+0x52>
 8016672:	2302      	movs	r3, #2
 8016674:	e0cb      	b.n	801680e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	2240      	movs	r2, #64	@ 0x40
 801667a:	2101      	movs	r1, #1
 801667c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	2241      	movs	r2, #65	@ 0x41
 8016682:	2121      	movs	r1, #33	@ 0x21
 8016684:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	2242      	movs	r2, #66	@ 0x42
 801668a:	2110      	movs	r1, #16
 801668c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	2200      	movs	r2, #0
 8016692:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	687a      	ldr	r2, [r7, #4]
 8016698:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	2208      	movs	r2, #8
 801669e:	18ba      	adds	r2, r7, r2
 80166a0:	8812      	ldrh	r2, [r2, #0]
 80166a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	4a5c      	ldr	r2, [pc, #368]	@ (8016818 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 80166a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	4a5b      	ldr	r2, [pc, #364]	@ (801681c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 80166ae:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166b4:	b29b      	uxth	r3, r3
 80166b6:	2bff      	cmp	r3, #255	@ 0xff
 80166b8:	d906      	bls.n	80166c8 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	22ff      	movs	r2, #255	@ 0xff
 80166be:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80166c0:	2380      	movs	r3, #128	@ 0x80
 80166c2:	045b      	lsls	r3, r3, #17
 80166c4:	617b      	str	r3, [r7, #20]
 80166c6:	e007      	b.n	80166d8 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166cc:	b29a      	uxth	r2, r3
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80166d2:	2380      	movs	r3, #128	@ 0x80
 80166d4:	049b      	lsls	r3, r3, #18
 80166d6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d100      	bne.n	80166e2 <HAL_I2C_Master_Transmit_DMA+0xbe>
 80166e0:	e078      	b.n	80167d4 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d023      	beq.n	8016732 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80166ee:	4a4c      	ldr	r2, [pc, #304]	@ (8016820 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 80166f0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80166f6:	4a4b      	ldr	r2, [pc, #300]	@ (8016824 <HAL_I2C_Master_Transmit_DMA+0x200>)
 80166f8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80166fe:	2200      	movs	r2, #0
 8016700:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016706:	2200      	movs	r2, #0
 8016708:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801670e:	6879      	ldr	r1, [r7, #4]
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	3328      	adds	r3, #40	@ 0x28
 8016716:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801671c:	2513      	movs	r5, #19
 801671e:	197c      	adds	r4, r7, r5
 8016720:	f7fe ff62 	bl	80155e8 <HAL_DMA_Start_IT>
 8016724:	0003      	movs	r3, r0
 8016726:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8016728:	197b      	adds	r3, r7, r5
 801672a:	781b      	ldrb	r3, [r3, #0]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d13d      	bne.n	80167ac <HAL_I2C_Master_Transmit_DMA+0x188>
 8016730:	e013      	b.n	801675a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	2241      	movs	r2, #65	@ 0x41
 8016736:	2120      	movs	r1, #32
 8016738:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	2242      	movs	r2, #66	@ 0x42
 801673e:	2100      	movs	r1, #0
 8016740:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016746:	2280      	movs	r2, #128	@ 0x80
 8016748:	431a      	orrs	r2, r3
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	2240      	movs	r2, #64	@ 0x40
 8016752:	2100      	movs	r1, #0
 8016754:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8016756:	2301      	movs	r3, #1
 8016758:	e059      	b.n	801680e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801675e:	b2da      	uxtb	r2, r3
 8016760:	697c      	ldr	r4, [r7, #20]
 8016762:	230a      	movs	r3, #10
 8016764:	18fb      	adds	r3, r7, r3
 8016766:	8819      	ldrh	r1, [r3, #0]
 8016768:	68f8      	ldr	r0, [r7, #12]
 801676a:	4b2f      	ldr	r3, [pc, #188]	@ (8016828 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801676c:	9300      	str	r3, [sp, #0]
 801676e:	0023      	movs	r3, r4
 8016770:	f002 fa6c 	bl	8018c4c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016778:	b29a      	uxth	r2, r3
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801677e:	1ad3      	subs	r3, r2, r3
 8016780:	b29a      	uxth	r2, r3
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	2240      	movs	r2, #64	@ 0x40
 801678a:	2100      	movs	r1, #0
 801678c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	2110      	movs	r1, #16
 8016792:	0018      	movs	r0, r3
 8016794:	f002 fa94 	bl	8018cc0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	681a      	ldr	r2, [r3, #0]
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	2180      	movs	r1, #128	@ 0x80
 80167a4:	01c9      	lsls	r1, r1, #7
 80167a6:	430a      	orrs	r2, r1
 80167a8:	601a      	str	r2, [r3, #0]
 80167aa:	e02d      	b.n	8016808 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	2241      	movs	r2, #65	@ 0x41
 80167b0:	2120      	movs	r1, #32
 80167b2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	2242      	movs	r2, #66	@ 0x42
 80167b8:	2100      	movs	r1, #0
 80167ba:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80167c0:	2210      	movs	r2, #16
 80167c2:	431a      	orrs	r2, r3
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	2240      	movs	r2, #64	@ 0x40
 80167cc:	2100      	movs	r1, #0
 80167ce:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80167d0:	2301      	movs	r3, #1
 80167d2:	e01c      	b.n	801680e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	4a15      	ldr	r2, [pc, #84]	@ (801682c <HAL_I2C_Master_Transmit_DMA+0x208>)
 80167d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80167de:	b2da      	uxtb	r2, r3
 80167e0:	2380      	movs	r3, #128	@ 0x80
 80167e2:	049c      	lsls	r4, r3, #18
 80167e4:	230a      	movs	r3, #10
 80167e6:	18fb      	adds	r3, r7, r3
 80167e8:	8819      	ldrh	r1, [r3, #0]
 80167ea:	68f8      	ldr	r0, [r7, #12]
 80167ec:	4b0e      	ldr	r3, [pc, #56]	@ (8016828 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80167ee:	9300      	str	r3, [sp, #0]
 80167f0:	0023      	movs	r3, r4
 80167f2:	f002 fa2b 	bl	8018c4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	2240      	movs	r2, #64	@ 0x40
 80167fa:	2100      	movs	r1, #0
 80167fc:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	2101      	movs	r1, #1
 8016802:	0018      	movs	r0, r3
 8016804:	f002 fa5c 	bl	8018cc0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8016808:	2300      	movs	r3, #0
 801680a:	e000      	b.n	801680e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801680c:	2302      	movs	r3, #2
  }
}
 801680e:	0018      	movs	r0, r3
 8016810:	46bd      	mov	sp, r7
 8016812:	b006      	add	sp, #24
 8016814:	bdb0      	pop	{r4, r5, r7, pc}
 8016816:	46c0      	nop			@ (mov r8, r8)
 8016818:	ffff0000 	.word	0xffff0000
 801681c:	080174fd 	.word	0x080174fd
 8016820:	080185f9 	.word	0x080185f9
 8016824:	08018739 	.word	0x08018739
 8016828:	80002000 	.word	0x80002000
 801682c:	08017051 	.word	0x08017051

08016830 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8016830:	b5b0      	push	{r4, r5, r7, lr}
 8016832:	b088      	sub	sp, #32
 8016834:	af02      	add	r7, sp, #8
 8016836:	60f8      	str	r0, [r7, #12]
 8016838:	0008      	movs	r0, r1
 801683a:	607a      	str	r2, [r7, #4]
 801683c:	0019      	movs	r1, r3
 801683e:	230a      	movs	r3, #10
 8016840:	18fb      	adds	r3, r7, r3
 8016842:	1c02      	adds	r2, r0, #0
 8016844:	801a      	strh	r2, [r3, #0]
 8016846:	2308      	movs	r3, #8
 8016848:	18fb      	adds	r3, r7, r3
 801684a:	1c0a      	adds	r2, r1, #0
 801684c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	2241      	movs	r2, #65	@ 0x41
 8016852:	5c9b      	ldrb	r3, [r3, r2]
 8016854:	b2db      	uxtb	r3, r3
 8016856:	2b20      	cmp	r3, #32
 8016858:	d000      	beq.n	801685c <HAL_I2C_Master_Receive_DMA+0x2c>
 801685a:	e0dd      	b.n	8016a18 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	699a      	ldr	r2, [r3, #24]
 8016862:	2380      	movs	r3, #128	@ 0x80
 8016864:	021b      	lsls	r3, r3, #8
 8016866:	401a      	ands	r2, r3
 8016868:	2380      	movs	r3, #128	@ 0x80
 801686a:	021b      	lsls	r3, r3, #8
 801686c:	429a      	cmp	r2, r3
 801686e:	d101      	bne.n	8016874 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8016870:	2302      	movs	r3, #2
 8016872:	e0d2      	b.n	8016a1a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	2240      	movs	r2, #64	@ 0x40
 8016878:	5c9b      	ldrb	r3, [r3, r2]
 801687a:	2b01      	cmp	r3, #1
 801687c:	d101      	bne.n	8016882 <HAL_I2C_Master_Receive_DMA+0x52>
 801687e:	2302      	movs	r3, #2
 8016880:	e0cb      	b.n	8016a1a <HAL_I2C_Master_Receive_DMA+0x1ea>
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	2240      	movs	r2, #64	@ 0x40
 8016886:	2101      	movs	r1, #1
 8016888:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	2241      	movs	r2, #65	@ 0x41
 801688e:	2122      	movs	r1, #34	@ 0x22
 8016890:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	2242      	movs	r2, #66	@ 0x42
 8016896:	2110      	movs	r1, #16
 8016898:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	2200      	movs	r2, #0
 801689e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	687a      	ldr	r2, [r7, #4]
 80168a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	2208      	movs	r2, #8
 80168aa:	18ba      	adds	r2, r7, r2
 80168ac:	8812      	ldrh	r2, [r2, #0]
 80168ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	4a5c      	ldr	r2, [pc, #368]	@ (8016a24 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 80168b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	4a5b      	ldr	r2, [pc, #364]	@ (8016a28 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 80168ba:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168c0:	b29b      	uxth	r3, r3
 80168c2:	2bff      	cmp	r3, #255	@ 0xff
 80168c4:	d906      	bls.n	80168d4 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	22ff      	movs	r2, #255	@ 0xff
 80168ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80168cc:	2380      	movs	r3, #128	@ 0x80
 80168ce:	045b      	lsls	r3, r3, #17
 80168d0:	617b      	str	r3, [r7, #20]
 80168d2:	e007      	b.n	80168e4 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80168d8:	b29a      	uxth	r2, r3
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80168de:	2380      	movs	r3, #128	@ 0x80
 80168e0:	049b      	lsls	r3, r3, #18
 80168e2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d100      	bne.n	80168ee <HAL_I2C_Master_Receive_DMA+0xbe>
 80168ec:	e078      	b.n	80169e0 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d023      	beq.n	801693e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80168fa:	4a4c      	ldr	r2, [pc, #304]	@ (8016a2c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80168fc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016902:	4a4b      	ldr	r2, [pc, #300]	@ (8016a30 <HAL_I2C_Master_Receive_DMA+0x200>)
 8016904:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801690a:	2200      	movs	r2, #0
 801690c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016912:	2200      	movs	r2, #0
 8016914:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	3324      	adds	r3, #36	@ 0x24
 8016920:	0019      	movs	r1, r3
 8016922:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8016928:	2513      	movs	r5, #19
 801692a:	197c      	adds	r4, r7, r5
 801692c:	f7fe fe5c 	bl	80155e8 <HAL_DMA_Start_IT>
 8016930:	0003      	movs	r3, r0
 8016932:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8016934:	197b      	adds	r3, r7, r5
 8016936:	781b      	ldrb	r3, [r3, #0]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d13d      	bne.n	80169b8 <HAL_I2C_Master_Receive_DMA+0x188>
 801693c:	e013      	b.n	8016966 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	2241      	movs	r2, #65	@ 0x41
 8016942:	2120      	movs	r1, #32
 8016944:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	2242      	movs	r2, #66	@ 0x42
 801694a:	2100      	movs	r1, #0
 801694c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016952:	2280      	movs	r2, #128	@ 0x80
 8016954:	431a      	orrs	r2, r3
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	2240      	movs	r2, #64	@ 0x40
 801695e:	2100      	movs	r1, #0
 8016960:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8016962:	2301      	movs	r3, #1
 8016964:	e059      	b.n	8016a1a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801696a:	b2da      	uxtb	r2, r3
 801696c:	697c      	ldr	r4, [r7, #20]
 801696e:	230a      	movs	r3, #10
 8016970:	18fb      	adds	r3, r7, r3
 8016972:	8819      	ldrh	r1, [r3, #0]
 8016974:	68f8      	ldr	r0, [r7, #12]
 8016976:	4b2f      	ldr	r3, [pc, #188]	@ (8016a34 <HAL_I2C_Master_Receive_DMA+0x204>)
 8016978:	9300      	str	r3, [sp, #0]
 801697a:	0023      	movs	r3, r4
 801697c:	f002 f966 	bl	8018c4c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016984:	b29a      	uxth	r2, r3
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801698a:	1ad3      	subs	r3, r2, r3
 801698c:	b29a      	uxth	r2, r3
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	2240      	movs	r2, #64	@ 0x40
 8016996:	2100      	movs	r1, #0
 8016998:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	2110      	movs	r1, #16
 801699e:	0018      	movs	r0, r3
 80169a0:	f002 f98e 	bl	8018cc0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	681a      	ldr	r2, [r3, #0]
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	2180      	movs	r1, #128	@ 0x80
 80169b0:	0209      	lsls	r1, r1, #8
 80169b2:	430a      	orrs	r2, r1
 80169b4:	601a      	str	r2, [r3, #0]
 80169b6:	e02d      	b.n	8016a14 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	2241      	movs	r2, #65	@ 0x41
 80169bc:	2120      	movs	r1, #32
 80169be:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	2242      	movs	r2, #66	@ 0x42
 80169c4:	2100      	movs	r1, #0
 80169c6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80169cc:	2210      	movs	r2, #16
 80169ce:	431a      	orrs	r2, r3
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	2240      	movs	r2, #64	@ 0x40
 80169d8:	2100      	movs	r1, #0
 80169da:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80169dc:	2301      	movs	r3, #1
 80169de:	e01c      	b.n	8016a1a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	4a15      	ldr	r2, [pc, #84]	@ (8016a38 <HAL_I2C_Master_Receive_DMA+0x208>)
 80169e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80169ea:	b2da      	uxtb	r2, r3
 80169ec:	2380      	movs	r3, #128	@ 0x80
 80169ee:	049c      	lsls	r4, r3, #18
 80169f0:	230a      	movs	r3, #10
 80169f2:	18fb      	adds	r3, r7, r3
 80169f4:	8819      	ldrh	r1, [r3, #0]
 80169f6:	68f8      	ldr	r0, [r7, #12]
 80169f8:	4b0e      	ldr	r3, [pc, #56]	@ (8016a34 <HAL_I2C_Master_Receive_DMA+0x204>)
 80169fa:	9300      	str	r3, [sp, #0]
 80169fc:	0023      	movs	r3, r4
 80169fe:	f002 f925 	bl	8018c4c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	2240      	movs	r2, #64	@ 0x40
 8016a06:	2100      	movs	r1, #0
 8016a08:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	2101      	movs	r1, #1
 8016a0e:	0018      	movs	r0, r3
 8016a10:	f002 f956 	bl	8018cc0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8016a14:	2300      	movs	r3, #0
 8016a16:	e000      	b.n	8016a1a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8016a18:	2302      	movs	r3, #2
  }
}
 8016a1a:	0018      	movs	r0, r3
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	b006      	add	sp, #24
 8016a20:	bdb0      	pop	{r4, r5, r7, pc}
 8016a22:	46c0      	nop			@ (mov r8, r8)
 8016a24:	ffff0000 	.word	0xffff0000
 8016a28:	080174fd 	.word	0x080174fd
 8016a2c:	08018699 	.word	0x08018699
 8016a30:	08018739 	.word	0x08018739
 8016a34:	80002400 	.word	0x80002400
 8016a38:	08017051 	.word	0x08017051

08016a3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016a3c:	b590      	push	{r4, r7, lr}
 8016a3e:	b089      	sub	sp, #36	@ 0x24
 8016a40:	af02      	add	r7, sp, #8
 8016a42:	60f8      	str	r0, [r7, #12]
 8016a44:	000c      	movs	r4, r1
 8016a46:	0010      	movs	r0, r2
 8016a48:	0019      	movs	r1, r3
 8016a4a:	230a      	movs	r3, #10
 8016a4c:	18fb      	adds	r3, r7, r3
 8016a4e:	1c22      	adds	r2, r4, #0
 8016a50:	801a      	strh	r2, [r3, #0]
 8016a52:	2308      	movs	r3, #8
 8016a54:	18fb      	adds	r3, r7, r3
 8016a56:	1c02      	adds	r2, r0, #0
 8016a58:	801a      	strh	r2, [r3, #0]
 8016a5a:	1dbb      	adds	r3, r7, #6
 8016a5c:	1c0a      	adds	r2, r1, #0
 8016a5e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	2241      	movs	r2, #65	@ 0x41
 8016a64:	5c9b      	ldrb	r3, [r3, r2]
 8016a66:	b2db      	uxtb	r3, r3
 8016a68:	2b20      	cmp	r3, #32
 8016a6a:	d000      	beq.n	8016a6e <HAL_I2C_Mem_Read+0x32>
 8016a6c:	e110      	b.n	8016c90 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8016a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d004      	beq.n	8016a7e <HAL_I2C_Mem_Read+0x42>
 8016a74:	232c      	movs	r3, #44	@ 0x2c
 8016a76:	18fb      	adds	r3, r7, r3
 8016a78:	881b      	ldrh	r3, [r3, #0]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d105      	bne.n	8016a8a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	2280      	movs	r2, #128	@ 0x80
 8016a82:	0092      	lsls	r2, r2, #2
 8016a84:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8016a86:	2301      	movs	r3, #1
 8016a88:	e103      	b.n	8016c92 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	2240      	movs	r2, #64	@ 0x40
 8016a8e:	5c9b      	ldrb	r3, [r3, r2]
 8016a90:	2b01      	cmp	r3, #1
 8016a92:	d101      	bne.n	8016a98 <HAL_I2C_Mem_Read+0x5c>
 8016a94:	2302      	movs	r3, #2
 8016a96:	e0fc      	b.n	8016c92 <HAL_I2C_Mem_Read+0x256>
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	2240      	movs	r2, #64	@ 0x40
 8016a9c:	2101      	movs	r1, #1
 8016a9e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8016aa0:	f7fe f850 	bl	8014b44 <HAL_GetTick>
 8016aa4:	0003      	movs	r3, r0
 8016aa6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8016aa8:	2380      	movs	r3, #128	@ 0x80
 8016aaa:	0219      	lsls	r1, r3, #8
 8016aac:	68f8      	ldr	r0, [r7, #12]
 8016aae:	697b      	ldr	r3, [r7, #20]
 8016ab0:	9300      	str	r3, [sp, #0]
 8016ab2:	2319      	movs	r3, #25
 8016ab4:	2201      	movs	r2, #1
 8016ab6:	f001 fe77 	bl	80187a8 <I2C_WaitOnFlagUntilTimeout>
 8016aba:	1e03      	subs	r3, r0, #0
 8016abc:	d001      	beq.n	8016ac2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8016abe:	2301      	movs	r3, #1
 8016ac0:	e0e7      	b.n	8016c92 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	2241      	movs	r2, #65	@ 0x41
 8016ac6:	2122      	movs	r1, #34	@ 0x22
 8016ac8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	2242      	movs	r2, #66	@ 0x42
 8016ace:	2140      	movs	r1, #64	@ 0x40
 8016ad0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	2200      	movs	r2, #0
 8016ad6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016adc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	222c      	movs	r2, #44	@ 0x2c
 8016ae2:	18ba      	adds	r2, r7, r2
 8016ae4:	8812      	ldrh	r2, [r2, #0]
 8016ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	2200      	movs	r2, #0
 8016aec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8016aee:	1dbb      	adds	r3, r7, #6
 8016af0:	881c      	ldrh	r4, [r3, #0]
 8016af2:	2308      	movs	r3, #8
 8016af4:	18fb      	adds	r3, r7, r3
 8016af6:	881a      	ldrh	r2, [r3, #0]
 8016af8:	230a      	movs	r3, #10
 8016afa:	18fb      	adds	r3, r7, r3
 8016afc:	8819      	ldrh	r1, [r3, #0]
 8016afe:	68f8      	ldr	r0, [r7, #12]
 8016b00:	697b      	ldr	r3, [r7, #20]
 8016b02:	9301      	str	r3, [sp, #4]
 8016b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b06:	9300      	str	r3, [sp, #0]
 8016b08:	0023      	movs	r3, r4
 8016b0a:	f001 f829 	bl	8017b60 <I2C_RequestMemoryRead>
 8016b0e:	1e03      	subs	r3, r0, #0
 8016b10:	d005      	beq.n	8016b1e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	2240      	movs	r2, #64	@ 0x40
 8016b16:	2100      	movs	r1, #0
 8016b18:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	e0b9      	b.n	8016c92 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b22:	b29b      	uxth	r3, r3
 8016b24:	2bff      	cmp	r3, #255	@ 0xff
 8016b26:	d911      	bls.n	8016b4c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	22ff      	movs	r2, #255	@ 0xff
 8016b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b32:	b2da      	uxtb	r2, r3
 8016b34:	2380      	movs	r3, #128	@ 0x80
 8016b36:	045c      	lsls	r4, r3, #17
 8016b38:	230a      	movs	r3, #10
 8016b3a:	18fb      	adds	r3, r7, r3
 8016b3c:	8819      	ldrh	r1, [r3, #0]
 8016b3e:	68f8      	ldr	r0, [r7, #12]
 8016b40:	4b56      	ldr	r3, [pc, #344]	@ (8016c9c <HAL_I2C_Mem_Read+0x260>)
 8016b42:	9300      	str	r3, [sp, #0]
 8016b44:	0023      	movs	r3, r4
 8016b46:	f002 f881 	bl	8018c4c <I2C_TransferConfig>
 8016b4a:	e012      	b.n	8016b72 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016b50:	b29a      	uxth	r2, r3
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b5a:	b2da      	uxtb	r2, r3
 8016b5c:	2380      	movs	r3, #128	@ 0x80
 8016b5e:	049c      	lsls	r4, r3, #18
 8016b60:	230a      	movs	r3, #10
 8016b62:	18fb      	adds	r3, r7, r3
 8016b64:	8819      	ldrh	r1, [r3, #0]
 8016b66:	68f8      	ldr	r0, [r7, #12]
 8016b68:	4b4c      	ldr	r3, [pc, #304]	@ (8016c9c <HAL_I2C_Mem_Read+0x260>)
 8016b6a:	9300      	str	r3, [sp, #0]
 8016b6c:	0023      	movs	r3, r4
 8016b6e:	f002 f86d 	bl	8018c4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8016b72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016b74:	68f8      	ldr	r0, [r7, #12]
 8016b76:	697b      	ldr	r3, [r7, #20]
 8016b78:	9300      	str	r3, [sp, #0]
 8016b7a:	0013      	movs	r3, r2
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	2104      	movs	r1, #4
 8016b80:	f001 fe12 	bl	80187a8 <I2C_WaitOnFlagUntilTimeout>
 8016b84:	1e03      	subs	r3, r0, #0
 8016b86:	d001      	beq.n	8016b8c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8016b88:	2301      	movs	r3, #1
 8016b8a:	e082      	b.n	8016c92 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b96:	b2d2      	uxtb	r2, r2
 8016b98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b9e:	1c5a      	adds	r2, r3, #1
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ba8:	3b01      	subs	r3, #1
 8016baa:	b29a      	uxth	r2, r3
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bb4:	b29b      	uxth	r3, r3
 8016bb6:	3b01      	subs	r3, #1
 8016bb8:	b29a      	uxth	r2, r3
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bc2:	b29b      	uxth	r3, r3
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d03a      	beq.n	8016c3e <HAL_I2C_Mem_Read+0x202>
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d136      	bne.n	8016c3e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8016bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016bd2:	68f8      	ldr	r0, [r7, #12]
 8016bd4:	697b      	ldr	r3, [r7, #20]
 8016bd6:	9300      	str	r3, [sp, #0]
 8016bd8:	0013      	movs	r3, r2
 8016bda:	2200      	movs	r2, #0
 8016bdc:	2180      	movs	r1, #128	@ 0x80
 8016bde:	f001 fde3 	bl	80187a8 <I2C_WaitOnFlagUntilTimeout>
 8016be2:	1e03      	subs	r3, r0, #0
 8016be4:	d001      	beq.n	8016bea <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8016be6:	2301      	movs	r3, #1
 8016be8:	e053      	b.n	8016c92 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016bee:	b29b      	uxth	r3, r3
 8016bf0:	2bff      	cmp	r3, #255	@ 0xff
 8016bf2:	d911      	bls.n	8016c18 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	22ff      	movs	r2, #255	@ 0xff
 8016bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016bfe:	b2da      	uxtb	r2, r3
 8016c00:	2380      	movs	r3, #128	@ 0x80
 8016c02:	045c      	lsls	r4, r3, #17
 8016c04:	230a      	movs	r3, #10
 8016c06:	18fb      	adds	r3, r7, r3
 8016c08:	8819      	ldrh	r1, [r3, #0]
 8016c0a:	68f8      	ldr	r0, [r7, #12]
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	9300      	str	r3, [sp, #0]
 8016c10:	0023      	movs	r3, r4
 8016c12:	f002 f81b 	bl	8018c4c <I2C_TransferConfig>
 8016c16:	e012      	b.n	8016c3e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c1c:	b29a      	uxth	r2, r3
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016c26:	b2da      	uxtb	r2, r3
 8016c28:	2380      	movs	r3, #128	@ 0x80
 8016c2a:	049c      	lsls	r4, r3, #18
 8016c2c:	230a      	movs	r3, #10
 8016c2e:	18fb      	adds	r3, r7, r3
 8016c30:	8819      	ldrh	r1, [r3, #0]
 8016c32:	68f8      	ldr	r0, [r7, #12]
 8016c34:	2300      	movs	r3, #0
 8016c36:	9300      	str	r3, [sp, #0]
 8016c38:	0023      	movs	r3, r4
 8016c3a:	f002 f807 	bl	8018c4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c42:	b29b      	uxth	r3, r3
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d194      	bne.n	8016b72 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8016c48:	697a      	ldr	r2, [r7, #20]
 8016c4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	0018      	movs	r0, r3
 8016c50:	f001 fe3e 	bl	80188d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8016c54:	1e03      	subs	r3, r0, #0
 8016c56:	d001      	beq.n	8016c5c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8016c58:	2301      	movs	r3, #1
 8016c5a:	e01a      	b.n	8016c92 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	2220      	movs	r2, #32
 8016c62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	685a      	ldr	r2, [r3, #4]
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	490c      	ldr	r1, [pc, #48]	@ (8016ca0 <HAL_I2C_Mem_Read+0x264>)
 8016c70:	400a      	ands	r2, r1
 8016c72:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	2241      	movs	r2, #65	@ 0x41
 8016c78:	2120      	movs	r1, #32
 8016c7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	2242      	movs	r2, #66	@ 0x42
 8016c80:	2100      	movs	r1, #0
 8016c82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	2240      	movs	r2, #64	@ 0x40
 8016c88:	2100      	movs	r1, #0
 8016c8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	e000      	b.n	8016c92 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8016c90:	2302      	movs	r3, #2
  }
}
 8016c92:	0018      	movs	r0, r3
 8016c94:	46bd      	mov	sp, r7
 8016c96:	b007      	add	sp, #28
 8016c98:	bd90      	pop	{r4, r7, pc}
 8016c9a:	46c0      	nop			@ (mov r8, r8)
 8016c9c:	80002400 	.word	0x80002400
 8016ca0:	fe00e800 	.word	0xfe00e800

08016ca4 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8016ca4:	b5b0      	push	{r4, r5, r7, lr}
 8016ca6:	b088      	sub	sp, #32
 8016ca8:	af02      	add	r7, sp, #8
 8016caa:	60f8      	str	r0, [r7, #12]
 8016cac:	000c      	movs	r4, r1
 8016cae:	0010      	movs	r0, r2
 8016cb0:	0019      	movs	r1, r3
 8016cb2:	230a      	movs	r3, #10
 8016cb4:	18fb      	adds	r3, r7, r3
 8016cb6:	1c22      	adds	r2, r4, #0
 8016cb8:	801a      	strh	r2, [r3, #0]
 8016cba:	2308      	movs	r3, #8
 8016cbc:	18fb      	adds	r3, r7, r3
 8016cbe:	1c02      	adds	r2, r0, #0
 8016cc0:	801a      	strh	r2, [r3, #0]
 8016cc2:	1dbb      	adds	r3, r7, #6
 8016cc4:	1c0a      	adds	r2, r1, #0
 8016cc6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	2241      	movs	r2, #65	@ 0x41
 8016ccc:	5c9b      	ldrb	r3, [r3, r2]
 8016cce:	b2db      	uxtb	r3, r3
 8016cd0:	2b20      	cmp	r3, #32
 8016cd2:	d000      	beq.n	8016cd6 <HAL_I2C_Mem_Write_DMA+0x32>
 8016cd4:	e0d8      	b.n	8016e88 <HAL_I2C_Mem_Write_DMA+0x1e4>
  {
    if ((pData == NULL) || (Size == 0U))
 8016cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d004      	beq.n	8016ce6 <HAL_I2C_Mem_Write_DMA+0x42>
 8016cdc:	232c      	movs	r3, #44	@ 0x2c
 8016cde:	18fb      	adds	r3, r7, r3
 8016ce0:	881b      	ldrh	r3, [r3, #0]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d105      	bne.n	8016cf2 <HAL_I2C_Mem_Write_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	2280      	movs	r2, #128	@ 0x80
 8016cea:	0092      	lsls	r2, r2, #2
 8016cec:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8016cee:	2301      	movs	r3, #1
 8016cf0:	e0cb      	b.n	8016e8a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	699a      	ldr	r2, [r3, #24]
 8016cf8:	2380      	movs	r3, #128	@ 0x80
 8016cfa:	021b      	lsls	r3, r3, #8
 8016cfc:	401a      	ands	r2, r3
 8016cfe:	2380      	movs	r3, #128	@ 0x80
 8016d00:	021b      	lsls	r3, r3, #8
 8016d02:	429a      	cmp	r2, r3
 8016d04:	d101      	bne.n	8016d0a <HAL_I2C_Mem_Write_DMA+0x66>
    {
      return HAL_BUSY;
 8016d06:	2302      	movs	r3, #2
 8016d08:	e0bf      	b.n	8016e8a <HAL_I2C_Mem_Write_DMA+0x1e6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	2240      	movs	r2, #64	@ 0x40
 8016d0e:	5c9b      	ldrb	r3, [r3, r2]
 8016d10:	2b01      	cmp	r3, #1
 8016d12:	d101      	bne.n	8016d18 <HAL_I2C_Mem_Write_DMA+0x74>
 8016d14:	2302      	movs	r3, #2
 8016d16:	e0b8      	b.n	8016e8a <HAL_I2C_Mem_Write_DMA+0x1e6>
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	2240      	movs	r2, #64	@ 0x40
 8016d1c:	2101      	movs	r1, #1
 8016d1e:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	2241      	movs	r2, #65	@ 0x41
 8016d24:	2121      	movs	r1, #33	@ 0x21
 8016d26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	2242      	movs	r2, #66	@ 0x42
 8016d2c:	2140      	movs	r1, #64	@ 0x40
 8016d2e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	2200      	movs	r2, #0
 8016d34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016d3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	222c      	movs	r2, #44	@ 0x2c
 8016d40:	18ba      	adds	r2, r7, r2
 8016d42:	8812      	ldrh	r2, [r2, #0]
 8016d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	4a52      	ldr	r2, [pc, #328]	@ (8016e94 <HAL_I2C_Mem_Write_DMA+0x1f0>)
 8016d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	4a52      	ldr	r2, [pc, #328]	@ (8016e98 <HAL_I2C_Mem_Write_DMA+0x1f4>)
 8016d50:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8016d52:	230a      	movs	r3, #10
 8016d54:	18fb      	adds	r3, r7, r3
 8016d56:	881a      	ldrh	r2, [r3, #0]
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016d60:	b29b      	uxth	r3, r3
 8016d62:	2bff      	cmp	r3, #255	@ 0xff
 8016d64:	d903      	bls.n	8016d6e <HAL_I2C_Mem_Write_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	22ff      	movs	r2, #255	@ 0xff
 8016d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016d6c:	e004      	b.n	8016d78 <HAL_I2C_Mem_Write_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016d72:	b29a      	uxth	r2, r3
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8016d78:	1dbb      	adds	r3, r7, #6
 8016d7a:	881b      	ldrh	r3, [r3, #0]
 8016d7c:	2b01      	cmp	r3, #1
 8016d7e:	d10b      	bne.n	8016d98 <HAL_I2C_Mem_Write_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8016d80:	2308      	movs	r3, #8
 8016d82:	18fb      	adds	r3, r7, r3
 8016d84:	881b      	ldrh	r3, [r3, #0]
 8016d86:	b2da      	uxtb	r2, r3
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	2201      	movs	r2, #1
 8016d92:	4252      	negs	r2, r2
 8016d94:	651a      	str	r2, [r3, #80]	@ 0x50
 8016d96:	e00e      	b.n	8016db6 <HAL_I2C_Mem_Write_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8016d98:	2108      	movs	r1, #8
 8016d9a:	187b      	adds	r3, r7, r1
 8016d9c:	881b      	ldrh	r3, [r3, #0]
 8016d9e:	0a1b      	lsrs	r3, r3, #8
 8016da0:	b29b      	uxth	r3, r3
 8016da2:	b2da      	uxtb	r2, r3
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8016daa:	187b      	adds	r3, r7, r1
 8016dac:	881b      	ldrh	r3, [r3, #0]
 8016dae:	b2db      	uxtb	r3, r3
 8016db0:	001a      	movs	r2, r3
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmatx != NULL)
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d023      	beq.n	8016e06 <HAL_I2C_Mem_Write_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016dc2:	4a36      	ldr	r2, [pc, #216]	@ (8016e9c <HAL_I2C_Mem_Write_DMA+0x1f8>)
 8016dc4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016dca:	4a35      	ldr	r2, [pc, #212]	@ (8016ea0 <HAL_I2C_Mem_Write_DMA+0x1fc>)
 8016dcc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016dd2:	2200      	movs	r2, #0
 8016dd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016dda:	2200      	movs	r2, #0
 8016ddc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8016de2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	3328      	adds	r3, #40	@ 0x28
 8016dea:	001a      	movs	r2, r3
                                       hi2c->XferSize);
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8016df0:	2517      	movs	r5, #23
 8016df2:	197c      	adds	r4, r7, r5
 8016df4:	f7fe fbf8 	bl	80155e8 <HAL_DMA_Start_IT>
 8016df8:	0003      	movs	r3, r0
 8016dfa:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8016dfc:	197b      	adds	r3, r7, r5
 8016dfe:	781b      	ldrb	r3, [r3, #0]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d12d      	bne.n	8016e60 <HAL_I2C_Mem_Write_DMA+0x1bc>
 8016e04:	e013      	b.n	8016e2e <HAL_I2C_Mem_Write_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	2241      	movs	r2, #65	@ 0x41
 8016e0a:	2120      	movs	r1, #32
 8016e0c:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	2242      	movs	r2, #66	@ 0x42
 8016e12:	2100      	movs	r1, #0
 8016e14:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e1a:	2280      	movs	r2, #128	@ 0x80
 8016e1c:	431a      	orrs	r2, r3
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	2240      	movs	r2, #64	@ 0x40
 8016e26:	2100      	movs	r1, #0
 8016e28:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8016e2a:	2301      	movs	r3, #1
 8016e2c:	e02d      	b.n	8016e8a <HAL_I2C_Mem_Write_DMA+0x1e6>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8016e2e:	1dbb      	adds	r3, r7, #6
 8016e30:	881b      	ldrh	r3, [r3, #0]
 8016e32:	b2da      	uxtb	r2, r3
 8016e34:	2380      	movs	r3, #128	@ 0x80
 8016e36:	045c      	lsls	r4, r3, #17
 8016e38:	230a      	movs	r3, #10
 8016e3a:	18fb      	adds	r3, r7, r3
 8016e3c:	8819      	ldrh	r1, [r3, #0]
 8016e3e:	68f8      	ldr	r0, [r7, #12]
 8016e40:	4b18      	ldr	r3, [pc, #96]	@ (8016ea4 <HAL_I2C_Mem_Write_DMA+0x200>)
 8016e42:	9300      	str	r3, [sp, #0]
 8016e44:	0023      	movs	r3, r4
 8016e46:	f001 ff01 	bl	8018c4c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	2240      	movs	r2, #64	@ 0x40
 8016e4e:	2100      	movs	r1, #0
 8016e50:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	2101      	movs	r1, #1
 8016e56:	0018      	movs	r0, r3
 8016e58:	f001 ff32 	bl	8018cc0 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	e014      	b.n	8016e8a <HAL_I2C_Mem_Write_DMA+0x1e6>
      hi2c->State     = HAL_I2C_STATE_READY;
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	2241      	movs	r2, #65	@ 0x41
 8016e64:	2120      	movs	r1, #32
 8016e66:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	2242      	movs	r2, #66	@ 0x42
 8016e6c:	2100      	movs	r1, #0
 8016e6e:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e74:	2210      	movs	r2, #16
 8016e76:	431a      	orrs	r2, r3
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	2240      	movs	r2, #64	@ 0x40
 8016e80:	2100      	movs	r1, #0
 8016e82:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8016e84:	2301      	movs	r3, #1
 8016e86:	e000      	b.n	8016e8a <HAL_I2C_Mem_Write_DMA+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 8016e88:	2302      	movs	r3, #2
  }
}
 8016e8a:	0018      	movs	r0, r3
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	b006      	add	sp, #24
 8016e90:	bdb0      	pop	{r4, r5, r7, pc}
 8016e92:	46c0      	nop			@ (mov r8, r8)
 8016e94:	ffff0000 	.word	0xffff0000
 8016e98:	08017715 	.word	0x08017715
 8016e9c:	080185f9 	.word	0x080185f9
 8016ea0:	08018739 	.word	0x08018739
 8016ea4:	80002000 	.word	0x80002000

08016ea8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b084      	sub	sp, #16
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	699b      	ldr	r3, [r3, #24]
 8016eb6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d005      	beq.n	8016ed4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016ecc:	68ba      	ldr	r2, [r7, #8]
 8016ece:	68f9      	ldr	r1, [r7, #12]
 8016ed0:	6878      	ldr	r0, [r7, #4]
 8016ed2:	4798      	blx	r3
  }
}
 8016ed4:	46c0      	nop			@ (mov r8, r8)
 8016ed6:	46bd      	mov	sp, r7
 8016ed8:	b004      	add	sp, #16
 8016eda:	bd80      	pop	{r7, pc}

08016edc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b086      	sub	sp, #24
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	699b      	ldr	r3, [r3, #24]
 8016eea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016ef4:	697b      	ldr	r3, [r7, #20]
 8016ef6:	0a1b      	lsrs	r3, r3, #8
 8016ef8:	001a      	movs	r2, r3
 8016efa:	2301      	movs	r3, #1
 8016efc:	4013      	ands	r3, r2
 8016efe:	d010      	beq.n	8016f22 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016f00:	693b      	ldr	r3, [r7, #16]
 8016f02:	09db      	lsrs	r3, r3, #7
 8016f04:	001a      	movs	r2, r3
 8016f06:	2301      	movs	r3, #1
 8016f08:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8016f0a:	d00a      	beq.n	8016f22 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f10:	2201      	movs	r2, #1
 8016f12:	431a      	orrs	r2, r3
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	2280      	movs	r2, #128	@ 0x80
 8016f1e:	0052      	lsls	r2, r2, #1
 8016f20:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016f22:	697b      	ldr	r3, [r7, #20]
 8016f24:	0a9b      	lsrs	r3, r3, #10
 8016f26:	001a      	movs	r2, r3
 8016f28:	2301      	movs	r3, #1
 8016f2a:	4013      	ands	r3, r2
 8016f2c:	d010      	beq.n	8016f50 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016f2e:	693b      	ldr	r3, [r7, #16]
 8016f30:	09db      	lsrs	r3, r3, #7
 8016f32:	001a      	movs	r2, r3
 8016f34:	2301      	movs	r3, #1
 8016f36:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8016f38:	d00a      	beq.n	8016f50 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f3e:	2208      	movs	r2, #8
 8016f40:	431a      	orrs	r2, r3
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	2280      	movs	r2, #128	@ 0x80
 8016f4c:	00d2      	lsls	r2, r2, #3
 8016f4e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016f50:	697b      	ldr	r3, [r7, #20]
 8016f52:	0a5b      	lsrs	r3, r3, #9
 8016f54:	001a      	movs	r2, r3
 8016f56:	2301      	movs	r3, #1
 8016f58:	4013      	ands	r3, r2
 8016f5a:	d010      	beq.n	8016f7e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8016f5c:	693b      	ldr	r3, [r7, #16]
 8016f5e:	09db      	lsrs	r3, r3, #7
 8016f60:	001a      	movs	r2, r3
 8016f62:	2301      	movs	r3, #1
 8016f64:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8016f66:	d00a      	beq.n	8016f7e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f6c:	2202      	movs	r2, #2
 8016f6e:	431a      	orrs	r2, r3
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	2280      	movs	r2, #128	@ 0x80
 8016f7a:	0092      	lsls	r2, r2, #2
 8016f7c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f82:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	220b      	movs	r2, #11
 8016f88:	4013      	ands	r3, r2
 8016f8a:	d005      	beq.n	8016f98 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8016f8c:	68fa      	ldr	r2, [r7, #12]
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	0011      	movs	r1, r2
 8016f92:	0018      	movs	r0, r3
 8016f94:	f001 f9e2 	bl	801835c <I2C_ITError>
  }
}
 8016f98:	46c0      	nop			@ (mov r8, r8)
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	b006      	add	sp, #24
 8016f9e:	bd80      	pop	{r7, pc}

08016fa0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b082      	sub	sp, #8
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8016fa8:	46c0      	nop			@ (mov r8, r8)
 8016faa:	46bd      	mov	sp, r7
 8016fac:	b002      	add	sp, #8
 8016fae:	bd80      	pop	{r7, pc}

08016fb0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b082      	sub	sp, #8
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8016fb8:	46c0      	nop			@ (mov r8, r8)
 8016fba:	46bd      	mov	sp, r7
 8016fbc:	b002      	add	sp, #8
 8016fbe:	bd80      	pop	{r7, pc}

08016fc0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b082      	sub	sp, #8
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8016fc8:	46c0      	nop			@ (mov r8, r8)
 8016fca:	46bd      	mov	sp, r7
 8016fcc:	b002      	add	sp, #8
 8016fce:	bd80      	pop	{r7, pc}

08016fd0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016fd0:	b580      	push	{r7, lr}
 8016fd2:	b082      	sub	sp, #8
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8016fd8:	46c0      	nop			@ (mov r8, r8)
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	b002      	add	sp, #8
 8016fde:	bd80      	pop	{r7, pc}

08016fe0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	b082      	sub	sp, #8
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	6078      	str	r0, [r7, #4]
 8016fe8:	0008      	movs	r0, r1
 8016fea:	0011      	movs	r1, r2
 8016fec:	1cfb      	adds	r3, r7, #3
 8016fee:	1c02      	adds	r2, r0, #0
 8016ff0:	701a      	strb	r2, [r3, #0]
 8016ff2:	003b      	movs	r3, r7
 8016ff4:	1c0a      	adds	r2, r1, #0
 8016ff6:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8016ff8:	46c0      	nop			@ (mov r8, r8)
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	b002      	add	sp, #8
 8016ffe:	bd80      	pop	{r7, pc}

08017000 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017000:	b580      	push	{r7, lr}
 8017002:	b082      	sub	sp, #8
 8017004:	af00      	add	r7, sp, #0
 8017006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8017008:	46c0      	nop			@ (mov r8, r8)
 801700a:	46bd      	mov	sp, r7
 801700c:	b002      	add	sp, #8
 801700e:	bd80      	pop	{r7, pc}

08017010 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017010:	b580      	push	{r7, lr}
 8017012:	b082      	sub	sp, #8
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8017018:	46c0      	nop			@ (mov r8, r8)
 801701a:	46bd      	mov	sp, r7
 801701c:	b002      	add	sp, #8
 801701e:	bd80      	pop	{r7, pc}

08017020 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017020:	b580      	push	{r7, lr}
 8017022:	b082      	sub	sp, #8
 8017024:	af00      	add	r7, sp, #0
 8017026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8017028:	46c0      	nop			@ (mov r8, r8)
 801702a:	46bd      	mov	sp, r7
 801702c:	b002      	add	sp, #8
 801702e:	bd80      	pop	{r7, pc}

08017030 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8017030:	b580      	push	{r7, lr}
 8017032:	b082      	sub	sp, #8
 8017034:	af00      	add	r7, sp, #0
 8017036:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8017038:	46c0      	nop			@ (mov r8, r8)
 801703a:	46bd      	mov	sp, r7
 801703c:	b002      	add	sp, #8
 801703e:	bd80      	pop	{r7, pc}

08017040 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b082      	sub	sp, #8
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8017048:	46c0      	nop			@ (mov r8, r8)
 801704a:	46bd      	mov	sp, r7
 801704c:	b002      	add	sp, #8
 801704e:	bd80      	pop	{r7, pc}

08017050 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8017050:	b590      	push	{r4, r7, lr}
 8017052:	b089      	sub	sp, #36	@ 0x24
 8017054:	af02      	add	r7, sp, #8
 8017056:	60f8      	str	r0, [r7, #12]
 8017058:	60b9      	str	r1, [r7, #8]
 801705a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 801705c:	68bb      	ldr	r3, [r7, #8]
 801705e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	2240      	movs	r2, #64	@ 0x40
 8017064:	5c9b      	ldrb	r3, [r3, r2]
 8017066:	2b01      	cmp	r3, #1
 8017068:	d101      	bne.n	801706e <I2C_Master_ISR_IT+0x1e>
 801706a:	2302      	movs	r3, #2
 801706c:	e12b      	b.n	80172c6 <I2C_Master_ISR_IT+0x276>
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	2240      	movs	r2, #64	@ 0x40
 8017072:	2101      	movs	r1, #1
 8017074:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8017076:	697b      	ldr	r3, [r7, #20]
 8017078:	091b      	lsrs	r3, r3, #4
 801707a:	001a      	movs	r2, r3
 801707c:	2301      	movs	r3, #1
 801707e:	4013      	ands	r3, r2
 8017080:	d014      	beq.n	80170ac <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	091b      	lsrs	r3, r3, #4
 8017086:	001a      	movs	r2, r3
 8017088:	2301      	movs	r3, #1
 801708a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801708c:	d00e      	beq.n	80170ac <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	2210      	movs	r2, #16
 8017094:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801709a:	2204      	movs	r2, #4
 801709c:	431a      	orrs	r2, r3
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	0018      	movs	r0, r3
 80170a6:	f001 fa84 	bl	80185b2 <I2C_Flush_TXDR>
 80170aa:	e0f5      	b.n	8017298 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80170ac:	697b      	ldr	r3, [r7, #20]
 80170ae:	089b      	lsrs	r3, r3, #2
 80170b0:	001a      	movs	r2, r3
 80170b2:	2301      	movs	r3, #1
 80170b4:	4013      	ands	r3, r2
 80170b6:	d023      	beq.n	8017100 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	089b      	lsrs	r3, r3, #2
 80170bc:	001a      	movs	r2, r3
 80170be:	2301      	movs	r3, #1
 80170c0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80170c2:	d01d      	beq.n	8017100 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80170c4:	697b      	ldr	r3, [r7, #20]
 80170c6:	2204      	movs	r2, #4
 80170c8:	4393      	bics	r3, r2
 80170ca:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170d6:	b2d2      	uxtb	r2, r2
 80170d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170de:	1c5a      	adds	r2, r3, #1
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80170e8:	3b01      	subs	r3, #1
 80170ea:	b29a      	uxth	r2, r3
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80170f4:	b29b      	uxth	r3, r3
 80170f6:	3b01      	subs	r3, #1
 80170f8:	b29a      	uxth	r2, r3
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80170fe:	e0cb      	b.n	8017298 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017100:	697b      	ldr	r3, [r7, #20]
 8017102:	085b      	lsrs	r3, r3, #1
 8017104:	001a      	movs	r2, r3
 8017106:	2301      	movs	r3, #1
 8017108:	4013      	ands	r3, r2
 801710a:	d01e      	beq.n	801714a <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	085b      	lsrs	r3, r3, #1
 8017110:	001a      	movs	r2, r3
 8017112:	2301      	movs	r3, #1
 8017114:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017116:	d018      	beq.n	801714a <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801711c:	781a      	ldrb	r2, [r3, #0]
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017128:	1c5a      	adds	r2, r3, #1
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017132:	3b01      	subs	r3, #1
 8017134:	b29a      	uxth	r2, r3
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801713e:	b29b      	uxth	r3, r3
 8017140:	3b01      	subs	r3, #1
 8017142:	b29a      	uxth	r2, r3
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8017148:	e0a6      	b.n	8017298 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 801714a:	697b      	ldr	r3, [r7, #20]
 801714c:	09db      	lsrs	r3, r3, #7
 801714e:	001a      	movs	r2, r3
 8017150:	2301      	movs	r3, #1
 8017152:	4013      	ands	r3, r2
 8017154:	d100      	bne.n	8017158 <I2C_Master_ISR_IT+0x108>
 8017156:	e06b      	b.n	8017230 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	099b      	lsrs	r3, r3, #6
 801715c:	001a      	movs	r2, r3
 801715e:	2301      	movs	r3, #1
 8017160:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8017162:	d065      	beq.n	8017230 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017168:	b29b      	uxth	r3, r3
 801716a:	2b00      	cmp	r3, #0
 801716c:	d04a      	beq.n	8017204 <I2C_Master_ISR_IT+0x1b4>
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017172:	2b00      	cmp	r3, #0
 8017174:	d146      	bne.n	8017204 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	685b      	ldr	r3, [r3, #4]
 801717c:	b29a      	uxth	r2, r3
 801717e:	2112      	movs	r1, #18
 8017180:	187b      	adds	r3, r7, r1
 8017182:	0592      	lsls	r2, r2, #22
 8017184:	0d92      	lsrs	r2, r2, #22
 8017186:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801718c:	b29b      	uxth	r3, r3
 801718e:	2bff      	cmp	r3, #255	@ 0xff
 8017190:	d910      	bls.n	80171b4 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	22ff      	movs	r2, #255	@ 0xff
 8017196:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801719c:	b2da      	uxtb	r2, r3
 801719e:	2380      	movs	r3, #128	@ 0x80
 80171a0:	045c      	lsls	r4, r3, #17
 80171a2:	187b      	adds	r3, r7, r1
 80171a4:	8819      	ldrh	r1, [r3, #0]
 80171a6:	68f8      	ldr	r0, [r7, #12]
 80171a8:	2300      	movs	r3, #0
 80171aa:	9300      	str	r3, [sp, #0]
 80171ac:	0023      	movs	r3, r4
 80171ae:	f001 fd4d 	bl	8018c4c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80171b2:	e03c      	b.n	801722e <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80171b8:	b29a      	uxth	r2, r3
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171c2:	4a43      	ldr	r2, [pc, #268]	@ (80172d0 <I2C_Master_ISR_IT+0x280>)
 80171c4:	4293      	cmp	r3, r2
 80171c6:	d00e      	beq.n	80171e6 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80171cc:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80171d2:	2312      	movs	r3, #18
 80171d4:	18fb      	adds	r3, r7, r3
 80171d6:	8819      	ldrh	r1, [r3, #0]
 80171d8:	68f8      	ldr	r0, [r7, #12]
 80171da:	2300      	movs	r3, #0
 80171dc:	9300      	str	r3, [sp, #0]
 80171de:	0023      	movs	r3, r4
 80171e0:	f001 fd34 	bl	8018c4c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80171e4:	e023      	b.n	801722e <I2C_Master_ISR_IT+0x1de>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80171ea:	b2da      	uxtb	r2, r3
 80171ec:	2380      	movs	r3, #128	@ 0x80
 80171ee:	049c      	lsls	r4, r3, #18
 80171f0:	2312      	movs	r3, #18
 80171f2:	18fb      	adds	r3, r7, r3
 80171f4:	8819      	ldrh	r1, [r3, #0]
 80171f6:	68f8      	ldr	r0, [r7, #12]
 80171f8:	2300      	movs	r3, #0
 80171fa:	9300      	str	r3, [sp, #0]
 80171fc:	0023      	movs	r3, r4
 80171fe:	f001 fd25 	bl	8018c4c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017202:	e014      	b.n	801722e <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	685a      	ldr	r2, [r3, #4]
 801720a:	2380      	movs	r3, #128	@ 0x80
 801720c:	049b      	lsls	r3, r3, #18
 801720e:	401a      	ands	r2, r3
 8017210:	2380      	movs	r3, #128	@ 0x80
 8017212:	049b      	lsls	r3, r3, #18
 8017214:	429a      	cmp	r2, r3
 8017216:	d004      	beq.n	8017222 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	0018      	movs	r0, r3
 801721c:	f000 fda6 	bl	8017d6c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8017220:	e03a      	b.n	8017298 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	2140      	movs	r1, #64	@ 0x40
 8017226:	0018      	movs	r0, r3
 8017228:	f001 f898 	bl	801835c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801722c:	e034      	b.n	8017298 <I2C_Master_ISR_IT+0x248>
 801722e:	e033      	b.n	8017298 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8017230:	697b      	ldr	r3, [r7, #20]
 8017232:	099b      	lsrs	r3, r3, #6
 8017234:	001a      	movs	r2, r3
 8017236:	2301      	movs	r3, #1
 8017238:	4013      	ands	r3, r2
 801723a:	d02d      	beq.n	8017298 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	099b      	lsrs	r3, r3, #6
 8017240:	001a      	movs	r2, r3
 8017242:	2301      	movs	r3, #1
 8017244:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8017246:	d027      	beq.n	8017298 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801724c:	b29b      	uxth	r3, r3
 801724e:	2b00      	cmp	r3, #0
 8017250:	d11d      	bne.n	801728e <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	685a      	ldr	r2, [r3, #4]
 8017258:	2380      	movs	r3, #128	@ 0x80
 801725a:	049b      	lsls	r3, r3, #18
 801725c:	401a      	ands	r2, r3
 801725e:	2380      	movs	r3, #128	@ 0x80
 8017260:	049b      	lsls	r3, r3, #18
 8017262:	429a      	cmp	r2, r3
 8017264:	d018      	beq.n	8017298 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801726a:	4a19      	ldr	r2, [pc, #100]	@ (80172d0 <I2C_Master_ISR_IT+0x280>)
 801726c:	4293      	cmp	r3, r2
 801726e:	d109      	bne.n	8017284 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	685a      	ldr	r2, [r3, #4]
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	2180      	movs	r1, #128	@ 0x80
 801727c:	01c9      	lsls	r1, r1, #7
 801727e:	430a      	orrs	r2, r1
 8017280:	605a      	str	r2, [r3, #4]
 8017282:	e009      	b.n	8017298 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	0018      	movs	r0, r3
 8017288:	f000 fd70 	bl	8017d6c <I2C_ITMasterSeqCplt>
 801728c:	e004      	b.n	8017298 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	2140      	movs	r1, #64	@ 0x40
 8017292:	0018      	movs	r0, r3
 8017294:	f001 f862 	bl	801835c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017298:	697b      	ldr	r3, [r7, #20]
 801729a:	095b      	lsrs	r3, r3, #5
 801729c:	001a      	movs	r2, r3
 801729e:	2301      	movs	r3, #1
 80172a0:	4013      	ands	r3, r2
 80172a2:	d00b      	beq.n	80172bc <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	095b      	lsrs	r3, r3, #5
 80172a8:	001a      	movs	r2, r3
 80172aa:	2301      	movs	r3, #1
 80172ac:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80172ae:	d005      	beq.n	80172bc <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80172b0:	697a      	ldr	r2, [r7, #20]
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	0011      	movs	r1, r2
 80172b6:	0018      	movs	r0, r3
 80172b8:	f000 fe00 	bl	8017ebc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	2240      	movs	r2, #64	@ 0x40
 80172c0:	2100      	movs	r1, #0
 80172c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80172c4:	2300      	movs	r3, #0
}
 80172c6:	0018      	movs	r0, r3
 80172c8:	46bd      	mov	sp, r7
 80172ca:	b007      	add	sp, #28
 80172cc:	bd90      	pop	{r4, r7, pc}
 80172ce:	46c0      	nop			@ (mov r8, r8)
 80172d0:	ffff0000 	.word	0xffff0000

080172d4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b086      	sub	sp, #24
 80172d8:	af00      	add	r7, sp, #0
 80172da:	60f8      	str	r0, [r7, #12]
 80172dc:	60b9      	str	r1, [r7, #8]
 80172de:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80172e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80172e6:	68bb      	ldr	r3, [r7, #8]
 80172e8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	2240      	movs	r2, #64	@ 0x40
 80172ee:	5c9b      	ldrb	r3, [r3, r2]
 80172f0:	2b01      	cmp	r3, #1
 80172f2:	d101      	bne.n	80172f8 <I2C_Slave_ISR_IT+0x24>
 80172f4:	2302      	movs	r3, #2
 80172f6:	e0fa      	b.n	80174ee <I2C_Slave_ISR_IT+0x21a>
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	2240      	movs	r2, #64	@ 0x40
 80172fc:	2101      	movs	r1, #1
 80172fe:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017300:	693b      	ldr	r3, [r7, #16]
 8017302:	095b      	lsrs	r3, r3, #5
 8017304:	001a      	movs	r2, r3
 8017306:	2301      	movs	r3, #1
 8017308:	4013      	ands	r3, r2
 801730a:	d00b      	beq.n	8017324 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	095b      	lsrs	r3, r3, #5
 8017310:	001a      	movs	r2, r3
 8017312:	2301      	movs	r3, #1
 8017314:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017316:	d005      	beq.n	8017324 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8017318:	693a      	ldr	r2, [r7, #16]
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	0011      	movs	r1, r2
 801731e:	0018      	movs	r0, r3
 8017320:	f000 fe9e 	bl	8018060 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8017324:	693b      	ldr	r3, [r7, #16]
 8017326:	091b      	lsrs	r3, r3, #4
 8017328:	001a      	movs	r2, r3
 801732a:	2301      	movs	r3, #1
 801732c:	4013      	ands	r3, r2
 801732e:	d054      	beq.n	80173da <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	091b      	lsrs	r3, r3, #4
 8017334:	001a      	movs	r2, r3
 8017336:	2301      	movs	r3, #1
 8017338:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 801733a:	d04e      	beq.n	80173da <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017340:	b29b      	uxth	r3, r3
 8017342:	2b00      	cmp	r3, #0
 8017344:	d12d      	bne.n	80173a2 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	2241      	movs	r2, #65	@ 0x41
 801734a:	5c9b      	ldrb	r3, [r3, r2]
 801734c:	b2db      	uxtb	r3, r3
 801734e:	2b28      	cmp	r3, #40	@ 0x28
 8017350:	d10b      	bne.n	801736a <I2C_Slave_ISR_IT+0x96>
 8017352:	697a      	ldr	r2, [r7, #20]
 8017354:	2380      	movs	r3, #128	@ 0x80
 8017356:	049b      	lsls	r3, r3, #18
 8017358:	429a      	cmp	r2, r3
 801735a:	d106      	bne.n	801736a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 801735c:	693a      	ldr	r2, [r7, #16]
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	0011      	movs	r1, r2
 8017362:	0018      	movs	r0, r3
 8017364:	f000 ffa0 	bl	80182a8 <I2C_ITListenCplt>
 8017368:	e036      	b.n	80173d8 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	2241      	movs	r2, #65	@ 0x41
 801736e:	5c9b      	ldrb	r3, [r3, r2]
 8017370:	b2db      	uxtb	r3, r3
 8017372:	2b29      	cmp	r3, #41	@ 0x29
 8017374:	d110      	bne.n	8017398 <I2C_Slave_ISR_IT+0xc4>
 8017376:	697b      	ldr	r3, [r7, #20]
 8017378:	4a5f      	ldr	r2, [pc, #380]	@ (80174f8 <I2C_Slave_ISR_IT+0x224>)
 801737a:	4293      	cmp	r3, r2
 801737c:	d00c      	beq.n	8017398 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	2210      	movs	r2, #16
 8017384:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	0018      	movs	r0, r3
 801738a:	f001 f912 	bl	80185b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	0018      	movs	r0, r3
 8017392:	f000 fd2d 	bl	8017df0 <I2C_ITSlaveSeqCplt>
 8017396:	e01f      	b.n	80173d8 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	2210      	movs	r2, #16
 801739e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80173a0:	e09d      	b.n	80174de <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	2210      	movs	r2, #16
 80173a8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80173ae:	2204      	movs	r2, #4
 80173b0:	431a      	orrs	r2, r3
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80173b6:	697b      	ldr	r3, [r7, #20]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d005      	beq.n	80173c8 <I2C_Slave_ISR_IT+0xf4>
 80173bc:	697a      	ldr	r2, [r7, #20]
 80173be:	2380      	movs	r3, #128	@ 0x80
 80173c0:	045b      	lsls	r3, r3, #17
 80173c2:	429a      	cmp	r2, r3
 80173c4:	d000      	beq.n	80173c8 <I2C_Slave_ISR_IT+0xf4>
 80173c6:	e08a      	b.n	80174de <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	0011      	movs	r1, r2
 80173d0:	0018      	movs	r0, r3
 80173d2:	f000 ffc3 	bl	801835c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80173d6:	e082      	b.n	80174de <I2C_Slave_ISR_IT+0x20a>
 80173d8:	e081      	b.n	80174de <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80173da:	693b      	ldr	r3, [r7, #16]
 80173dc:	089b      	lsrs	r3, r3, #2
 80173de:	001a      	movs	r2, r3
 80173e0:	2301      	movs	r3, #1
 80173e2:	4013      	ands	r3, r2
 80173e4:	d031      	beq.n	801744a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	089b      	lsrs	r3, r3, #2
 80173ea:	001a      	movs	r2, r3
 80173ec:	2301      	movs	r3, #1
 80173ee:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80173f0:	d02b      	beq.n	801744a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80173f6:	b29b      	uxth	r3, r3
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d018      	beq.n	801742e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017406:	b2d2      	uxtb	r2, r2
 8017408:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801740e:	1c5a      	adds	r2, r3, #1
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017418:	3b01      	subs	r3, #1
 801741a:	b29a      	uxth	r2, r3
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017424:	b29b      	uxth	r3, r3
 8017426:	3b01      	subs	r3, #1
 8017428:	b29a      	uxth	r2, r3
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017432:	b29b      	uxth	r3, r3
 8017434:	2b00      	cmp	r3, #0
 8017436:	d154      	bne.n	80174e2 <I2C_Slave_ISR_IT+0x20e>
 8017438:	697b      	ldr	r3, [r7, #20]
 801743a:	4a2f      	ldr	r2, [pc, #188]	@ (80174f8 <I2C_Slave_ISR_IT+0x224>)
 801743c:	4293      	cmp	r3, r2
 801743e:	d050      	beq.n	80174e2 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	0018      	movs	r0, r3
 8017444:	f000 fcd4 	bl	8017df0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8017448:	e04b      	b.n	80174e2 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 801744a:	693b      	ldr	r3, [r7, #16]
 801744c:	08db      	lsrs	r3, r3, #3
 801744e:	001a      	movs	r2, r3
 8017450:	2301      	movs	r3, #1
 8017452:	4013      	ands	r3, r2
 8017454:	d00c      	beq.n	8017470 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	08db      	lsrs	r3, r3, #3
 801745a:	001a      	movs	r2, r3
 801745c:	2301      	movs	r3, #1
 801745e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8017460:	d006      	beq.n	8017470 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8017462:	693a      	ldr	r2, [r7, #16]
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	0011      	movs	r1, r2
 8017468:	0018      	movs	r0, r3
 801746a:	f000 fbdb 	bl	8017c24 <I2C_ITAddrCplt>
 801746e:	e039      	b.n	80174e4 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017470:	693b      	ldr	r3, [r7, #16]
 8017472:	085b      	lsrs	r3, r3, #1
 8017474:	001a      	movs	r2, r3
 8017476:	2301      	movs	r3, #1
 8017478:	4013      	ands	r3, r2
 801747a:	d033      	beq.n	80174e4 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	085b      	lsrs	r3, r3, #1
 8017480:	001a      	movs	r2, r3
 8017482:	2301      	movs	r3, #1
 8017484:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017486:	d02d      	beq.n	80174e4 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801748c:	b29b      	uxth	r3, r3
 801748e:	2b00      	cmp	r3, #0
 8017490:	d018      	beq.n	80174c4 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017496:	781a      	ldrb	r2, [r3, #0]
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174a2:	1c5a      	adds	r2, r3, #1
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80174ac:	b29b      	uxth	r3, r3
 80174ae:	3b01      	subs	r3, #1
 80174b0:	b29a      	uxth	r2, r3
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80174ba:	3b01      	subs	r3, #1
 80174bc:	b29a      	uxth	r2, r3
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80174c2:	e00f      	b.n	80174e4 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80174c4:	697a      	ldr	r2, [r7, #20]
 80174c6:	2380      	movs	r3, #128	@ 0x80
 80174c8:	045b      	lsls	r3, r3, #17
 80174ca:	429a      	cmp	r2, r3
 80174cc:	d002      	beq.n	80174d4 <I2C_Slave_ISR_IT+0x200>
 80174ce:	697b      	ldr	r3, [r7, #20]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d107      	bne.n	80174e4 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	0018      	movs	r0, r3
 80174d8:	f000 fc8a 	bl	8017df0 <I2C_ITSlaveSeqCplt>
 80174dc:	e002      	b.n	80174e4 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80174de:	46c0      	nop			@ (mov r8, r8)
 80174e0:	e000      	b.n	80174e4 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80174e2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	2240      	movs	r2, #64	@ 0x40
 80174e8:	2100      	movs	r1, #0
 80174ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80174ec:	2300      	movs	r3, #0
}
 80174ee:	0018      	movs	r0, r3
 80174f0:	46bd      	mov	sp, r7
 80174f2:	b006      	add	sp, #24
 80174f4:	bd80      	pop	{r7, pc}
 80174f6:	46c0      	nop			@ (mov r8, r8)
 80174f8:	ffff0000 	.word	0xffff0000

080174fc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80174fc:	b590      	push	{r4, r7, lr}
 80174fe:	b089      	sub	sp, #36	@ 0x24
 8017500:	af02      	add	r7, sp, #8
 8017502:	60f8      	str	r0, [r7, #12]
 8017504:	60b9      	str	r1, [r7, #8]
 8017506:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	2240      	movs	r2, #64	@ 0x40
 801750c:	5c9b      	ldrb	r3, [r3, r2]
 801750e:	2b01      	cmp	r3, #1
 8017510:	d101      	bne.n	8017516 <I2C_Master_ISR_DMA+0x1a>
 8017512:	2302      	movs	r3, #2
 8017514:	e0f7      	b.n	8017706 <I2C_Master_ISR_DMA+0x20a>
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	2240      	movs	r2, #64	@ 0x40
 801751a:	2101      	movs	r1, #1
 801751c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801751e:	68bb      	ldr	r3, [r7, #8]
 8017520:	091b      	lsrs	r3, r3, #4
 8017522:	001a      	movs	r2, r3
 8017524:	2301      	movs	r3, #1
 8017526:	4013      	ands	r3, r2
 8017528:	d019      	beq.n	801755e <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	091b      	lsrs	r3, r3, #4
 801752e:	001a      	movs	r2, r3
 8017530:	2301      	movs	r3, #1
 8017532:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017534:	d013      	beq.n	801755e <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	2210      	movs	r2, #16
 801753c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017542:	2204      	movs	r2, #4
 8017544:	431a      	orrs	r2, r3
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	2120      	movs	r1, #32
 801754e:	0018      	movs	r0, r3
 8017550:	f001 fbb6 	bl	8018cc0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	0018      	movs	r0, r3
 8017558:	f001 f82b 	bl	80185b2 <I2C_Flush_TXDR>
 801755c:	e0ce      	b.n	80176fc <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 801755e:	68bb      	ldr	r3, [r7, #8]
 8017560:	09db      	lsrs	r3, r3, #7
 8017562:	001a      	movs	r2, r3
 8017564:	2301      	movs	r3, #1
 8017566:	4013      	ands	r3, r2
 8017568:	d100      	bne.n	801756c <I2C_Master_ISR_DMA+0x70>
 801756a:	e07e      	b.n	801766a <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	099b      	lsrs	r3, r3, #6
 8017570:	001a      	movs	r2, r3
 8017572:	2301      	movs	r3, #1
 8017574:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8017576:	d100      	bne.n	801757a <I2C_Master_ISR_DMA+0x7e>
 8017578:	e077      	b.n	801766a <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 801757a:	68fb      	ldr	r3, [r7, #12]
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	681a      	ldr	r2, [r3, #0]
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	2140      	movs	r1, #64	@ 0x40
 8017586:	438a      	bics	r2, r1
 8017588:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801758e:	b29b      	uxth	r3, r3
 8017590:	2b00      	cmp	r3, #0
 8017592:	d055      	beq.n	8017640 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	685b      	ldr	r3, [r3, #4]
 801759a:	b29a      	uxth	r2, r3
 801759c:	2312      	movs	r3, #18
 801759e:	18fb      	adds	r3, r7, r3
 80175a0:	0592      	lsls	r2, r2, #22
 80175a2:	0d92      	lsrs	r2, r2, #22
 80175a4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175aa:	b29b      	uxth	r3, r3
 80175ac:	2bff      	cmp	r3, #255	@ 0xff
 80175ae:	d906      	bls.n	80175be <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	22ff      	movs	r2, #255	@ 0xff
 80175b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80175b6:	2380      	movs	r3, #128	@ 0x80
 80175b8:	045b      	lsls	r3, r3, #17
 80175ba:	617b      	str	r3, [r7, #20]
 80175bc:	e010      	b.n	80175e0 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175c2:	b29a      	uxth	r2, r3
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80175cc:	4a50      	ldr	r2, [pc, #320]	@ (8017710 <I2C_Master_ISR_DMA+0x214>)
 80175ce:	4293      	cmp	r3, r2
 80175d0:	d003      	beq.n	80175da <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80175d6:	617b      	str	r3, [r7, #20]
 80175d8:	e002      	b.n	80175e0 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80175da:	2380      	movs	r3, #128	@ 0x80
 80175dc:	049b      	lsls	r3, r3, #18
 80175de:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80175e4:	b2da      	uxtb	r2, r3
 80175e6:	697c      	ldr	r4, [r7, #20]
 80175e8:	2312      	movs	r3, #18
 80175ea:	18fb      	adds	r3, r7, r3
 80175ec:	8819      	ldrh	r1, [r3, #0]
 80175ee:	68f8      	ldr	r0, [r7, #12]
 80175f0:	2300      	movs	r3, #0
 80175f2:	9300      	str	r3, [sp, #0]
 80175f4:	0023      	movs	r3, r4
 80175f6:	f001 fb29 	bl	8018c4c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80175fe:	b29a      	uxth	r2, r3
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017604:	1ad3      	subs	r3, r2, r3
 8017606:	b29a      	uxth	r2, r3
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	2241      	movs	r2, #65	@ 0x41
 8017610:	5c9b      	ldrb	r3, [r3, r2]
 8017612:	b2db      	uxtb	r3, r3
 8017614:	2b22      	cmp	r3, #34	@ 0x22
 8017616:	d109      	bne.n	801762c <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	681a      	ldr	r2, [r3, #0]
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	2180      	movs	r1, #128	@ 0x80
 8017624:	0209      	lsls	r1, r1, #8
 8017626:	430a      	orrs	r2, r1
 8017628:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801762a:	e067      	b.n	80176fc <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	681a      	ldr	r2, [r3, #0]
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	2180      	movs	r1, #128	@ 0x80
 8017638:	01c9      	lsls	r1, r1, #7
 801763a:	430a      	orrs	r2, r1
 801763c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801763e:	e05d      	b.n	80176fc <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	685a      	ldr	r2, [r3, #4]
 8017646:	2380      	movs	r3, #128	@ 0x80
 8017648:	049b      	lsls	r3, r3, #18
 801764a:	401a      	ands	r2, r3
 801764c:	2380      	movs	r3, #128	@ 0x80
 801764e:	049b      	lsls	r3, r3, #18
 8017650:	429a      	cmp	r2, r3
 8017652:	d004      	beq.n	801765e <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	0018      	movs	r0, r3
 8017658:	f000 fb88 	bl	8017d6c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 801765c:	e04e      	b.n	80176fc <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	2140      	movs	r1, #64	@ 0x40
 8017662:	0018      	movs	r0, r3
 8017664:	f000 fe7a 	bl	801835c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8017668:	e048      	b.n	80176fc <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801766a:	68bb      	ldr	r3, [r7, #8]
 801766c:	099b      	lsrs	r3, r3, #6
 801766e:	001a      	movs	r2, r3
 8017670:	2301      	movs	r3, #1
 8017672:	4013      	ands	r3, r2
 8017674:	d02e      	beq.n	80176d4 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	099b      	lsrs	r3, r3, #6
 801767a:	001a      	movs	r2, r3
 801767c:	2301      	movs	r3, #1
 801767e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017680:	d028      	beq.n	80176d4 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017686:	b29b      	uxth	r3, r3
 8017688:	2b00      	cmp	r3, #0
 801768a:	d11d      	bne.n	80176c8 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	685a      	ldr	r2, [r3, #4]
 8017692:	2380      	movs	r3, #128	@ 0x80
 8017694:	049b      	lsls	r3, r3, #18
 8017696:	401a      	ands	r2, r3
 8017698:	2380      	movs	r3, #128	@ 0x80
 801769a:	049b      	lsls	r3, r3, #18
 801769c:	429a      	cmp	r2, r3
 801769e:	d02c      	beq.n	80176fa <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80176a4:	4a1a      	ldr	r2, [pc, #104]	@ (8017710 <I2C_Master_ISR_DMA+0x214>)
 80176a6:	4293      	cmp	r3, r2
 80176a8:	d109      	bne.n	80176be <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	685a      	ldr	r2, [r3, #4]
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	2180      	movs	r1, #128	@ 0x80
 80176b6:	01c9      	lsls	r1, r1, #7
 80176b8:	430a      	orrs	r2, r1
 80176ba:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80176bc:	e01d      	b.n	80176fa <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	0018      	movs	r0, r3
 80176c2:	f000 fb53 	bl	8017d6c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80176c6:	e018      	b.n	80176fa <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	2140      	movs	r1, #64	@ 0x40
 80176cc:	0018      	movs	r0, r3
 80176ce:	f000 fe45 	bl	801835c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80176d2:	e012      	b.n	80176fa <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80176d4:	68bb      	ldr	r3, [r7, #8]
 80176d6:	095b      	lsrs	r3, r3, #5
 80176d8:	001a      	movs	r2, r3
 80176da:	2301      	movs	r3, #1
 80176dc:	4013      	ands	r3, r2
 80176de:	d00d      	beq.n	80176fc <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	095b      	lsrs	r3, r3, #5
 80176e4:	001a      	movs	r2, r3
 80176e6:	2301      	movs	r3, #1
 80176e8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80176ea:	d007      	beq.n	80176fc <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80176ec:	68ba      	ldr	r2, [r7, #8]
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	0011      	movs	r1, r2
 80176f2:	0018      	movs	r0, r3
 80176f4:	f000 fbe2 	bl	8017ebc <I2C_ITMasterCplt>
 80176f8:	e000      	b.n	80176fc <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80176fa:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	2240      	movs	r2, #64	@ 0x40
 8017700:	2100      	movs	r1, #0
 8017702:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017704:	2300      	movs	r3, #0
}
 8017706:	0018      	movs	r0, r3
 8017708:	46bd      	mov	sp, r7
 801770a:	b007      	add	sp, #28
 801770c:	bd90      	pop	{r4, r7, pc}
 801770e:	46c0      	nop			@ (mov r8, r8)
 8017710:	ffff0000 	.word	0xffff0000

08017714 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8017714:	b590      	push	{r4, r7, lr}
 8017716:	b089      	sub	sp, #36	@ 0x24
 8017718:	af02      	add	r7, sp, #8
 801771a:	60f8      	str	r0, [r7, #12]
 801771c:	60b9      	str	r1, [r7, #8]
 801771e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8017720:	4b92      	ldr	r3, [pc, #584]	@ (801796c <I2C_Mem_ISR_DMA+0x258>)
 8017722:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	2240      	movs	r2, #64	@ 0x40
 8017728:	5c9b      	ldrb	r3, [r3, r2]
 801772a:	2b01      	cmp	r3, #1
 801772c:	d101      	bne.n	8017732 <I2C_Mem_ISR_DMA+0x1e>
 801772e:	2302      	movs	r3, #2
 8017730:	e118      	b.n	8017964 <I2C_Mem_ISR_DMA+0x250>
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	2240      	movs	r2, #64	@ 0x40
 8017736:	2101      	movs	r1, #1
 8017738:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801773a:	68bb      	ldr	r3, [r7, #8]
 801773c:	091b      	lsrs	r3, r3, #4
 801773e:	001a      	movs	r2, r3
 8017740:	2301      	movs	r3, #1
 8017742:	4013      	ands	r3, r2
 8017744:	d019      	beq.n	801777a <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	091b      	lsrs	r3, r3, #4
 801774a:	001a      	movs	r2, r3
 801774c:	2301      	movs	r3, #1
 801774e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8017750:	d013      	beq.n	801777a <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	2210      	movs	r2, #16
 8017758:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801775e:	2204      	movs	r2, #4
 8017760:	431a      	orrs	r2, r3
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	2120      	movs	r1, #32
 801776a:	0018      	movs	r0, r3
 801776c:	f001 faa8 	bl	8018cc0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	0018      	movs	r0, r3
 8017774:	f000 ff1d 	bl	80185b2 <I2C_Flush_TXDR>
 8017778:	e0ef      	b.n	801795a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 801777a:	68bb      	ldr	r3, [r7, #8]
 801777c:	085b      	lsrs	r3, r3, #1
 801777e:	001a      	movs	r2, r3
 8017780:	2301      	movs	r3, #1
 8017782:	4013      	ands	r3, r2
 8017784:	d00f      	beq.n	80177a6 <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	085b      	lsrs	r3, r3, #1
 801778a:	001a      	movs	r2, r3
 801778c:	2301      	movs	r3, #1
 801778e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8017790:	d009      	beq.n	80177a6 <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	68fa      	ldr	r2, [r7, #12]
 8017798:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801779a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	2201      	movs	r2, #1
 80177a0:	4252      	negs	r2, r2
 80177a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80177a4:	e0d9      	b.n	801795a <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80177a6:	68bb      	ldr	r3, [r7, #8]
 80177a8:	09db      	lsrs	r3, r3, #7
 80177aa:	001a      	movs	r2, r3
 80177ac:	2301      	movs	r3, #1
 80177ae:	4013      	ands	r3, r2
 80177b0:	d060      	beq.n	8017874 <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	099b      	lsrs	r3, r3, #6
 80177b6:	001a      	movs	r2, r3
 80177b8:	2301      	movs	r3, #1
 80177ba:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80177bc:	d05a      	beq.n	8017874 <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	2110      	movs	r1, #16
 80177c2:	0018      	movs	r0, r3
 80177c4:	f001 fa7c 	bl	8018cc0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80177cc:	b29b      	uxth	r3, r3
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d04a      	beq.n	8017868 <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80177d6:	b29b      	uxth	r3, r3
 80177d8:	2bff      	cmp	r3, #255	@ 0xff
 80177da:	d910      	bls.n	80177fe <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	22ff      	movs	r2, #255	@ 0xff
 80177e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80177e6:	b299      	uxth	r1, r3
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80177ec:	b2da      	uxtb	r2, r3
 80177ee:	2380      	movs	r3, #128	@ 0x80
 80177f0:	045b      	lsls	r3, r3, #17
 80177f2:	68f8      	ldr	r0, [r7, #12]
 80177f4:	2400      	movs	r4, #0
 80177f6:	9400      	str	r4, [sp, #0]
 80177f8:	f001 fa28 	bl	8018c4c <I2C_TransferConfig>
 80177fc:	e011      	b.n	8017822 <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017802:	b29a      	uxth	r2, r3
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801780c:	b299      	uxth	r1, r3
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017812:	b2da      	uxtb	r2, r3
 8017814:	2380      	movs	r3, #128	@ 0x80
 8017816:	049b      	lsls	r3, r3, #18
 8017818:	68f8      	ldr	r0, [r7, #12]
 801781a:	2400      	movs	r4, #0
 801781c:	9400      	str	r4, [sp, #0]
 801781e:	f001 fa15 	bl	8018c4c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8017822:	68fb      	ldr	r3, [r7, #12]
 8017824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017826:	b29a      	uxth	r2, r3
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801782c:	1ad3      	subs	r3, r2, r3
 801782e:	b29a      	uxth	r2, r3
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	2241      	movs	r2, #65	@ 0x41
 8017838:	5c9b      	ldrb	r3, [r3, r2]
 801783a:	b2db      	uxtb	r3, r3
 801783c:	2b22      	cmp	r3, #34	@ 0x22
 801783e:	d109      	bne.n	8017854 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	681a      	ldr	r2, [r3, #0]
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	2180      	movs	r1, #128	@ 0x80
 801784c:	0209      	lsls	r1, r1, #8
 801784e:	430a      	orrs	r2, r1
 8017850:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8017852:	e082      	b.n	801795a <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	681a      	ldr	r2, [r3, #0]
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	2180      	movs	r1, #128	@ 0x80
 8017860:	01c9      	lsls	r1, r1, #7
 8017862:	430a      	orrs	r2, r1
 8017864:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8017866:	e078      	b.n	801795a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	2140      	movs	r1, #64	@ 0x40
 801786c:	0018      	movs	r0, r3
 801786e:	f000 fd75 	bl	801835c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8017872:	e072      	b.n	801795a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8017874:	68bb      	ldr	r3, [r7, #8]
 8017876:	099b      	lsrs	r3, r3, #6
 8017878:	001a      	movs	r2, r3
 801787a:	2301      	movs	r3, #1
 801787c:	4013      	ands	r3, r2
 801787e:	d05a      	beq.n	8017936 <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	099b      	lsrs	r3, r3, #6
 8017884:	001a      	movs	r2, r3
 8017886:	2301      	movs	r3, #1
 8017888:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801788a:	d054      	beq.n	8017936 <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	2241      	movs	r2, #65	@ 0x41
 8017890:	5c9b      	ldrb	r3, [r3, r2]
 8017892:	b2db      	uxtb	r3, r3
 8017894:	2b22      	cmp	r3, #34	@ 0x22
 8017896:	d101      	bne.n	801789c <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 8017898:	4b35      	ldr	r3, [pc, #212]	@ (8017970 <I2C_Mem_ISR_DMA+0x25c>)
 801789a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80178a0:	b29b      	uxth	r3, r3
 80178a2:	2bff      	cmp	r3, #255	@ 0xff
 80178a4:	d911      	bls.n	80178ca <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	22ff      	movs	r2, #255	@ 0xff
 80178aa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80178b0:	b299      	uxth	r1, r3
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80178b6:	b2da      	uxtb	r2, r3
 80178b8:	2380      	movs	r3, #128	@ 0x80
 80178ba:	045c      	lsls	r4, r3, #17
 80178bc:	68f8      	ldr	r0, [r7, #12]
 80178be:	697b      	ldr	r3, [r7, #20]
 80178c0:	9300      	str	r3, [sp, #0]
 80178c2:	0023      	movs	r3, r4
 80178c4:	f001 f9c2 	bl	8018c4c <I2C_TransferConfig>
 80178c8:	e012      	b.n	80178f0 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80178ce:	b29a      	uxth	r2, r3
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80178d8:	b299      	uxth	r1, r3
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80178de:	b2da      	uxtb	r2, r3
 80178e0:	2380      	movs	r3, #128	@ 0x80
 80178e2:	049c      	lsls	r4, r3, #18
 80178e4:	68f8      	ldr	r0, [r7, #12]
 80178e6:	697b      	ldr	r3, [r7, #20]
 80178e8:	9300      	str	r3, [sp, #0]
 80178ea:	0023      	movs	r3, r4
 80178ec:	f001 f9ae 	bl	8018c4c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80178f4:	b29a      	uxth	r2, r3
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80178fa:	1ad3      	subs	r3, r2, r3
 80178fc:	b29a      	uxth	r2, r3
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	2241      	movs	r2, #65	@ 0x41
 8017906:	5c9b      	ldrb	r3, [r3, r2]
 8017908:	b2db      	uxtb	r3, r3
 801790a:	2b22      	cmp	r3, #34	@ 0x22
 801790c:	d109      	bne.n	8017922 <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	681a      	ldr	r2, [r3, #0]
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	681b      	ldr	r3, [r3, #0]
 8017918:	2180      	movs	r1, #128	@ 0x80
 801791a:	0209      	lsls	r1, r1, #8
 801791c:	430a      	orrs	r2, r1
 801791e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017920:	e01b      	b.n	801795a <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	681a      	ldr	r2, [r3, #0]
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	681b      	ldr	r3, [r3, #0]
 801792c:	2180      	movs	r1, #128	@ 0x80
 801792e:	01c9      	lsls	r1, r1, #7
 8017930:	430a      	orrs	r2, r1
 8017932:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017934:	e011      	b.n	801795a <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8017936:	68bb      	ldr	r3, [r7, #8]
 8017938:	095b      	lsrs	r3, r3, #5
 801793a:	001a      	movs	r2, r3
 801793c:	2301      	movs	r3, #1
 801793e:	4013      	ands	r3, r2
 8017940:	d00b      	beq.n	801795a <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	095b      	lsrs	r3, r3, #5
 8017946:	001a      	movs	r2, r3
 8017948:	2301      	movs	r3, #1
 801794a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801794c:	d005      	beq.n	801795a <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801794e:	68ba      	ldr	r2, [r7, #8]
 8017950:	68fb      	ldr	r3, [r7, #12]
 8017952:	0011      	movs	r1, r2
 8017954:	0018      	movs	r0, r3
 8017956:	f000 fab1 	bl	8017ebc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	2240      	movs	r2, #64	@ 0x40
 801795e:	2100      	movs	r1, #0
 8017960:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017962:	2300      	movs	r3, #0
}
 8017964:	0018      	movs	r0, r3
 8017966:	46bd      	mov	sp, r7
 8017968:	b007      	add	sp, #28
 801796a:	bd90      	pop	{r4, r7, pc}
 801796c:	80002000 	.word	0x80002000
 8017970:	80002400 	.word	0x80002400

08017974 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b088      	sub	sp, #32
 8017978:	af00      	add	r7, sp, #0
 801797a:	60f8      	str	r0, [r7, #12]
 801797c:	60b9      	str	r1, [r7, #8]
 801797e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017984:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8017986:	2300      	movs	r3, #0
 8017988:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 801798a:	68fb      	ldr	r3, [r7, #12]
 801798c:	2240      	movs	r2, #64	@ 0x40
 801798e:	5c9b      	ldrb	r3, [r3, r2]
 8017990:	2b01      	cmp	r3, #1
 8017992:	d101      	bne.n	8017998 <I2C_Slave_ISR_DMA+0x24>
 8017994:	2302      	movs	r3, #2
 8017996:	e0dd      	b.n	8017b54 <I2C_Slave_ISR_DMA+0x1e0>
 8017998:	68fb      	ldr	r3, [r7, #12]
 801799a:	2240      	movs	r2, #64	@ 0x40
 801799c:	2101      	movs	r1, #1
 801799e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80179a0:	68bb      	ldr	r3, [r7, #8]
 80179a2:	095b      	lsrs	r3, r3, #5
 80179a4:	001a      	movs	r2, r3
 80179a6:	2301      	movs	r3, #1
 80179a8:	4013      	ands	r3, r2
 80179aa:	d00b      	beq.n	80179c4 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	095b      	lsrs	r3, r3, #5
 80179b0:	001a      	movs	r2, r3
 80179b2:	2301      	movs	r3, #1
 80179b4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80179b6:	d005      	beq.n	80179c4 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80179b8:	68ba      	ldr	r2, [r7, #8]
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	0011      	movs	r1, r2
 80179be:	0018      	movs	r0, r3
 80179c0:	f000 fb4e 	bl	8018060 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80179c4:	68bb      	ldr	r3, [r7, #8]
 80179c6:	091b      	lsrs	r3, r3, #4
 80179c8:	001a      	movs	r2, r3
 80179ca:	2301      	movs	r3, #1
 80179cc:	4013      	ands	r3, r2
 80179ce:	d100      	bne.n	80179d2 <I2C_Slave_ISR_DMA+0x5e>
 80179d0:	e0a9      	b.n	8017b26 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	091b      	lsrs	r3, r3, #4
 80179d6:	001a      	movs	r2, r3
 80179d8:	2301      	movs	r3, #1
 80179da:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80179dc:	d100      	bne.n	80179e0 <I2C_Slave_ISR_DMA+0x6c>
 80179de:	e0a2      	b.n	8017b26 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	0b9b      	lsrs	r3, r3, #14
 80179e4:	001a      	movs	r2, r3
 80179e6:	2301      	movs	r3, #1
 80179e8:	4013      	ands	r3, r2
 80179ea:	d106      	bne.n	80179fa <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	0bdb      	lsrs	r3, r3, #15
 80179f0:	001a      	movs	r2, r3
 80179f2:	2301      	movs	r3, #1
 80179f4:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80179f6:	d100      	bne.n	80179fa <I2C_Slave_ISR_DMA+0x86>
 80179f8:	e08e      	b.n	8017b18 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d00d      	beq.n	8017a1e <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	0bdb      	lsrs	r3, r3, #15
 8017a06:	001a      	movs	r2, r3
 8017a08:	2301      	movs	r3, #1
 8017a0a:	4013      	ands	r3, r2
 8017a0c:	d007      	beq.n	8017a1e <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	685b      	ldr	r3, [r3, #4]
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d101      	bne.n	8017a1e <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8017a1a:	2301      	movs	r3, #1
 8017a1c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d00d      	beq.n	8017a42 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	0b9b      	lsrs	r3, r3, #14
 8017a2a:	001a      	movs	r2, r3
 8017a2c:	2301      	movs	r3, #1
 8017a2e:	4013      	ands	r3, r2
 8017a30:	d007      	beq.n	8017a42 <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	685b      	ldr	r3, [r3, #4]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d101      	bne.n	8017a42 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8017a3e:	2301      	movs	r3, #1
 8017a40:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8017a42:	69fb      	ldr	r3, [r7, #28]
 8017a44:	2b01      	cmp	r3, #1
 8017a46:	d12d      	bne.n	8017aa4 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	2241      	movs	r2, #65	@ 0x41
 8017a4c:	5c9b      	ldrb	r3, [r3, r2]
 8017a4e:	b2db      	uxtb	r3, r3
 8017a50:	2b28      	cmp	r3, #40	@ 0x28
 8017a52:	d10b      	bne.n	8017a6c <I2C_Slave_ISR_DMA+0xf8>
 8017a54:	69ba      	ldr	r2, [r7, #24]
 8017a56:	2380      	movs	r3, #128	@ 0x80
 8017a58:	049b      	lsls	r3, r3, #18
 8017a5a:	429a      	cmp	r2, r3
 8017a5c:	d106      	bne.n	8017a6c <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8017a5e:	68ba      	ldr	r2, [r7, #8]
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	0011      	movs	r1, r2
 8017a64:	0018      	movs	r0, r3
 8017a66:	f000 fc1f 	bl	80182a8 <I2C_ITListenCplt>
 8017a6a:	e054      	b.n	8017b16 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	2241      	movs	r2, #65	@ 0x41
 8017a70:	5c9b      	ldrb	r3, [r3, r2]
 8017a72:	b2db      	uxtb	r3, r3
 8017a74:	2b29      	cmp	r3, #41	@ 0x29
 8017a76:	d110      	bne.n	8017a9a <I2C_Slave_ISR_DMA+0x126>
 8017a78:	69bb      	ldr	r3, [r7, #24]
 8017a7a:	4a38      	ldr	r2, [pc, #224]	@ (8017b5c <I2C_Slave_ISR_DMA+0x1e8>)
 8017a7c:	4293      	cmp	r3, r2
 8017a7e:	d00c      	beq.n	8017a9a <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	2210      	movs	r2, #16
 8017a86:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	0018      	movs	r0, r3
 8017a8c:	f000 fd91 	bl	80185b2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	0018      	movs	r0, r3
 8017a94:	f000 f9ac 	bl	8017df0 <I2C_ITSlaveSeqCplt>
 8017a98:	e03d      	b.n	8017b16 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	2210      	movs	r2, #16
 8017aa0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8017aa2:	e03e      	b.n	8017b22 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	2210      	movs	r2, #16
 8017aaa:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017ab0:	2204      	movs	r2, #4
 8017ab2:	431a      	orrs	r2, r3
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8017ab8:	2317      	movs	r3, #23
 8017aba:	18fb      	adds	r3, r7, r3
 8017abc:	68fa      	ldr	r2, [r7, #12]
 8017abe:	2141      	movs	r1, #65	@ 0x41
 8017ac0:	5c52      	ldrb	r2, [r2, r1]
 8017ac2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8017ac4:	69bb      	ldr	r3, [r7, #24]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d004      	beq.n	8017ad4 <I2C_Slave_ISR_DMA+0x160>
 8017aca:	69ba      	ldr	r2, [r7, #24]
 8017acc:	2380      	movs	r3, #128	@ 0x80
 8017ace:	045b      	lsls	r3, r3, #17
 8017ad0:	429a      	cmp	r2, r3
 8017ad2:	d126      	bne.n	8017b22 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8017ad4:	2217      	movs	r2, #23
 8017ad6:	18bb      	adds	r3, r7, r2
 8017ad8:	781b      	ldrb	r3, [r3, #0]
 8017ada:	2b21      	cmp	r3, #33	@ 0x21
 8017adc:	d003      	beq.n	8017ae6 <I2C_Slave_ISR_DMA+0x172>
 8017ade:	18bb      	adds	r3, r7, r2
 8017ae0:	781b      	ldrb	r3, [r3, #0]
 8017ae2:	2b29      	cmp	r3, #41	@ 0x29
 8017ae4:	d103      	bne.n	8017aee <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	2221      	movs	r2, #33	@ 0x21
 8017aea:	631a      	str	r2, [r3, #48]	@ 0x30
 8017aec:	e00b      	b.n	8017b06 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8017aee:	2217      	movs	r2, #23
 8017af0:	18bb      	adds	r3, r7, r2
 8017af2:	781b      	ldrb	r3, [r3, #0]
 8017af4:	2b22      	cmp	r3, #34	@ 0x22
 8017af6:	d003      	beq.n	8017b00 <I2C_Slave_ISR_DMA+0x18c>
 8017af8:	18bb      	adds	r3, r7, r2
 8017afa:	781b      	ldrb	r3, [r3, #0]
 8017afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8017afe:	d102      	bne.n	8017b06 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	2222      	movs	r2, #34	@ 0x22
 8017b04:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	0011      	movs	r1, r2
 8017b0e:	0018      	movs	r0, r3
 8017b10:	f000 fc24 	bl	801835c <I2C_ITError>
      if (treatdmanack == 1U)
 8017b14:	e005      	b.n	8017b22 <I2C_Slave_ISR_DMA+0x1ae>
 8017b16:	e004      	b.n	8017b22 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	2210      	movs	r2, #16
 8017b1e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017b20:	e013      	b.n	8017b4a <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8017b22:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8017b24:	e011      	b.n	8017b4a <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8017b26:	68bb      	ldr	r3, [r7, #8]
 8017b28:	08db      	lsrs	r3, r3, #3
 8017b2a:	001a      	movs	r2, r3
 8017b2c:	2301      	movs	r3, #1
 8017b2e:	4013      	ands	r3, r2
 8017b30:	d00b      	beq.n	8017b4a <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	08db      	lsrs	r3, r3, #3
 8017b36:	001a      	movs	r2, r3
 8017b38:	2301      	movs	r3, #1
 8017b3a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8017b3c:	d005      	beq.n	8017b4a <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8017b3e:	68ba      	ldr	r2, [r7, #8]
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	0011      	movs	r1, r2
 8017b44:	0018      	movs	r0, r3
 8017b46:	f000 f86d 	bl	8017c24 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	2240      	movs	r2, #64	@ 0x40
 8017b4e:	2100      	movs	r1, #0
 8017b50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017b52:	2300      	movs	r3, #0
}
 8017b54:	0018      	movs	r0, r3
 8017b56:	46bd      	mov	sp, r7
 8017b58:	b008      	add	sp, #32
 8017b5a:	bd80      	pop	{r7, pc}
 8017b5c:	ffff0000 	.word	0xffff0000

08017b60 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8017b60:	b5b0      	push	{r4, r5, r7, lr}
 8017b62:	b086      	sub	sp, #24
 8017b64:	af02      	add	r7, sp, #8
 8017b66:	60f8      	str	r0, [r7, #12]
 8017b68:	000c      	movs	r4, r1
 8017b6a:	0010      	movs	r0, r2
 8017b6c:	0019      	movs	r1, r3
 8017b6e:	250a      	movs	r5, #10
 8017b70:	197b      	adds	r3, r7, r5
 8017b72:	1c22      	adds	r2, r4, #0
 8017b74:	801a      	strh	r2, [r3, #0]
 8017b76:	2308      	movs	r3, #8
 8017b78:	18fb      	adds	r3, r7, r3
 8017b7a:	1c02      	adds	r2, r0, #0
 8017b7c:	801a      	strh	r2, [r3, #0]
 8017b7e:	1dbb      	adds	r3, r7, #6
 8017b80:	1c0a      	adds	r2, r1, #0
 8017b82:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8017b84:	1dbb      	adds	r3, r7, #6
 8017b86:	881b      	ldrh	r3, [r3, #0]
 8017b88:	b2da      	uxtb	r2, r3
 8017b8a:	197b      	adds	r3, r7, r5
 8017b8c:	8819      	ldrh	r1, [r3, #0]
 8017b8e:	68f8      	ldr	r0, [r7, #12]
 8017b90:	4b23      	ldr	r3, [pc, #140]	@ (8017c20 <I2C_RequestMemoryRead+0xc0>)
 8017b92:	9300      	str	r3, [sp, #0]
 8017b94:	2300      	movs	r3, #0
 8017b96:	f001 f859 	bl	8018c4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017b9c:	6a39      	ldr	r1, [r7, #32]
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	0018      	movs	r0, r3
 8017ba2:	f000 fe4f 	bl	8018844 <I2C_WaitOnTXISFlagUntilTimeout>
 8017ba6:	1e03      	subs	r3, r0, #0
 8017ba8:	d001      	beq.n	8017bae <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8017baa:	2301      	movs	r3, #1
 8017bac:	e033      	b.n	8017c16 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8017bae:	1dbb      	adds	r3, r7, #6
 8017bb0:	881b      	ldrh	r3, [r3, #0]
 8017bb2:	2b01      	cmp	r3, #1
 8017bb4:	d107      	bne.n	8017bc6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017bb6:	2308      	movs	r3, #8
 8017bb8:	18fb      	adds	r3, r7, r3
 8017bba:	881b      	ldrh	r3, [r3, #0]
 8017bbc:	b2da      	uxtb	r2, r3
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8017bc4:	e019      	b.n	8017bfa <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8017bc6:	2308      	movs	r3, #8
 8017bc8:	18fb      	adds	r3, r7, r3
 8017bca:	881b      	ldrh	r3, [r3, #0]
 8017bcc:	0a1b      	lsrs	r3, r3, #8
 8017bce:	b29b      	uxth	r3, r3
 8017bd0:	b2da      	uxtb	r2, r3
 8017bd2:	68fb      	ldr	r3, [r7, #12]
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8017bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017bda:	6a39      	ldr	r1, [r7, #32]
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	0018      	movs	r0, r3
 8017be0:	f000 fe30 	bl	8018844 <I2C_WaitOnTXISFlagUntilTimeout>
 8017be4:	1e03      	subs	r3, r0, #0
 8017be6:	d001      	beq.n	8017bec <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8017be8:	2301      	movs	r3, #1
 8017bea:	e014      	b.n	8017c16 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8017bec:	2308      	movs	r3, #8
 8017bee:	18fb      	adds	r3, r7, r3
 8017bf0:	881b      	ldrh	r3, [r3, #0]
 8017bf2:	b2da      	uxtb	r2, r3
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8017bfa:	6a3a      	ldr	r2, [r7, #32]
 8017bfc:	68f8      	ldr	r0, [r7, #12]
 8017bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c00:	9300      	str	r3, [sp, #0]
 8017c02:	0013      	movs	r3, r2
 8017c04:	2200      	movs	r2, #0
 8017c06:	2140      	movs	r1, #64	@ 0x40
 8017c08:	f000 fdce 	bl	80187a8 <I2C_WaitOnFlagUntilTimeout>
 8017c0c:	1e03      	subs	r3, r0, #0
 8017c0e:	d001      	beq.n	8017c14 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8017c10:	2301      	movs	r3, #1
 8017c12:	e000      	b.n	8017c16 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8017c14:	2300      	movs	r3, #0
}
 8017c16:	0018      	movs	r0, r3
 8017c18:	46bd      	mov	sp, r7
 8017c1a:	b004      	add	sp, #16
 8017c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8017c1e:	46c0      	nop			@ (mov r8, r8)
 8017c20:	80002000 	.word	0x80002000

08017c24 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017c24:	b5b0      	push	{r4, r5, r7, lr}
 8017c26:	b084      	sub	sp, #16
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]
 8017c2c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	2241      	movs	r2, #65	@ 0x41
 8017c32:	5c9b      	ldrb	r3, [r3, r2]
 8017c34:	b2db      	uxtb	r3, r3
 8017c36:	001a      	movs	r2, r3
 8017c38:	2328      	movs	r3, #40	@ 0x28
 8017c3a:	4013      	ands	r3, r2
 8017c3c:	2b28      	cmp	r3, #40	@ 0x28
 8017c3e:	d000      	beq.n	8017c42 <I2C_ITAddrCplt+0x1e>
 8017c40:	e088      	b.n	8017d54 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	699b      	ldr	r3, [r3, #24]
 8017c48:	0c1b      	lsrs	r3, r3, #16
 8017c4a:	b2da      	uxtb	r2, r3
 8017c4c:	250f      	movs	r5, #15
 8017c4e:	197b      	adds	r3, r7, r5
 8017c50:	2101      	movs	r1, #1
 8017c52:	400a      	ands	r2, r1
 8017c54:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	699b      	ldr	r3, [r3, #24]
 8017c5c:	0c1b      	lsrs	r3, r3, #16
 8017c5e:	b29a      	uxth	r2, r3
 8017c60:	200c      	movs	r0, #12
 8017c62:	183b      	adds	r3, r7, r0
 8017c64:	21fe      	movs	r1, #254	@ 0xfe
 8017c66:	400a      	ands	r2, r1
 8017c68:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	689b      	ldr	r3, [r3, #8]
 8017c70:	b29a      	uxth	r2, r3
 8017c72:	240a      	movs	r4, #10
 8017c74:	193b      	adds	r3, r7, r4
 8017c76:	0592      	lsls	r2, r2, #22
 8017c78:	0d92      	lsrs	r2, r2, #22
 8017c7a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	68db      	ldr	r3, [r3, #12]
 8017c82:	b29a      	uxth	r2, r3
 8017c84:	2308      	movs	r3, #8
 8017c86:	18fb      	adds	r3, r7, r3
 8017c88:	21fe      	movs	r1, #254	@ 0xfe
 8017c8a:	400a      	ands	r2, r1
 8017c8c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	68db      	ldr	r3, [r3, #12]
 8017c92:	2b02      	cmp	r3, #2
 8017c94:	d148      	bne.n	8017d28 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8017c96:	0021      	movs	r1, r4
 8017c98:	187b      	adds	r3, r7, r1
 8017c9a:	881b      	ldrh	r3, [r3, #0]
 8017c9c:	09db      	lsrs	r3, r3, #7
 8017c9e:	b29a      	uxth	r2, r3
 8017ca0:	183b      	adds	r3, r7, r0
 8017ca2:	881b      	ldrh	r3, [r3, #0]
 8017ca4:	4053      	eors	r3, r2
 8017ca6:	b29b      	uxth	r3, r3
 8017ca8:	001a      	movs	r2, r3
 8017caa:	2306      	movs	r3, #6
 8017cac:	4013      	ands	r3, r2
 8017cae:	d120      	bne.n	8017cf2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8017cb0:	183b      	adds	r3, r7, r0
 8017cb2:	187a      	adds	r2, r7, r1
 8017cb4:	8812      	ldrh	r2, [r2, #0]
 8017cb6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017cbc:	1c5a      	adds	r2, r3, #1
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017cc6:	2b02      	cmp	r3, #2
 8017cc8:	d14c      	bne.n	8017d64 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	2200      	movs	r2, #0
 8017cce:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	2208      	movs	r2, #8
 8017cd6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	2240      	movs	r2, #64	@ 0x40
 8017cdc:	2100      	movs	r1, #0
 8017cde:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017ce0:	183b      	adds	r3, r7, r0
 8017ce2:	881a      	ldrh	r2, [r3, #0]
 8017ce4:	197b      	adds	r3, r7, r5
 8017ce6:	7819      	ldrb	r1, [r3, #0]
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	0018      	movs	r0, r3
 8017cec:	f7ff f978 	bl	8016fe0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8017cf0:	e038      	b.n	8017d64 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8017cf2:	240c      	movs	r4, #12
 8017cf4:	193b      	adds	r3, r7, r4
 8017cf6:	2208      	movs	r2, #8
 8017cf8:	18ba      	adds	r2, r7, r2
 8017cfa:	8812      	ldrh	r2, [r2, #0]
 8017cfc:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017cfe:	2380      	movs	r3, #128	@ 0x80
 8017d00:	021a      	lsls	r2, r3, #8
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	0011      	movs	r1, r2
 8017d06:	0018      	movs	r0, r3
 8017d08:	f001 f868 	bl	8018ddc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	2240      	movs	r2, #64	@ 0x40
 8017d10:	2100      	movs	r1, #0
 8017d12:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017d14:	193b      	adds	r3, r7, r4
 8017d16:	881a      	ldrh	r2, [r3, #0]
 8017d18:	230f      	movs	r3, #15
 8017d1a:	18fb      	adds	r3, r7, r3
 8017d1c:	7819      	ldrb	r1, [r3, #0]
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	0018      	movs	r0, r3
 8017d22:	f7ff f95d 	bl	8016fe0 <HAL_I2C_AddrCallback>
}
 8017d26:	e01d      	b.n	8017d64 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8017d28:	2380      	movs	r3, #128	@ 0x80
 8017d2a:	021a      	lsls	r2, r3, #8
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	0011      	movs	r1, r2
 8017d30:	0018      	movs	r0, r3
 8017d32:	f001 f853 	bl	8018ddc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	2240      	movs	r2, #64	@ 0x40
 8017d3a:	2100      	movs	r1, #0
 8017d3c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8017d3e:	230c      	movs	r3, #12
 8017d40:	18fb      	adds	r3, r7, r3
 8017d42:	881a      	ldrh	r2, [r3, #0]
 8017d44:	230f      	movs	r3, #15
 8017d46:	18fb      	adds	r3, r7, r3
 8017d48:	7819      	ldrb	r1, [r3, #0]
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	0018      	movs	r0, r3
 8017d4e:	f7ff f947 	bl	8016fe0 <HAL_I2C_AddrCallback>
}
 8017d52:	e007      	b.n	8017d64 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	2208      	movs	r2, #8
 8017d5a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	2240      	movs	r2, #64	@ 0x40
 8017d60:	2100      	movs	r1, #0
 8017d62:	5499      	strb	r1, [r3, r2]
}
 8017d64:	46c0      	nop			@ (mov r8, r8)
 8017d66:	46bd      	mov	sp, r7
 8017d68:	b004      	add	sp, #16
 8017d6a:	bdb0      	pop	{r4, r5, r7, pc}

08017d6c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017d6c:	b580      	push	{r7, lr}
 8017d6e:	b082      	sub	sp, #8
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	2242      	movs	r2, #66	@ 0x42
 8017d78:	2100      	movs	r1, #0
 8017d7a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	2241      	movs	r2, #65	@ 0x41
 8017d80:	5c9b      	ldrb	r3, [r3, r2]
 8017d82:	b2db      	uxtb	r3, r3
 8017d84:	2b21      	cmp	r3, #33	@ 0x21
 8017d86:	d117      	bne.n	8017db8 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	2241      	movs	r2, #65	@ 0x41
 8017d8c:	2120      	movs	r1, #32
 8017d8e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	2211      	movs	r2, #17
 8017d94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	2200      	movs	r2, #0
 8017d9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	2101      	movs	r1, #1
 8017da0:	0018      	movs	r0, r3
 8017da2:	f001 f81b 	bl	8018ddc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	2240      	movs	r2, #64	@ 0x40
 8017daa:	2100      	movs	r1, #0
 8017dac:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	0018      	movs	r0, r3
 8017db2:	f7ff f8f5 	bl	8016fa0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8017db6:	e016      	b.n	8017de6 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	2241      	movs	r2, #65	@ 0x41
 8017dbc:	2120      	movs	r1, #32
 8017dbe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	2212      	movs	r2, #18
 8017dc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	2200      	movs	r2, #0
 8017dca:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	2102      	movs	r1, #2
 8017dd0:	0018      	movs	r0, r3
 8017dd2:	f001 f803 	bl	8018ddc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	2240      	movs	r2, #64	@ 0x40
 8017dda:	2100      	movs	r1, #0
 8017ddc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	0018      	movs	r0, r3
 8017de2:	f7ff f8e5 	bl	8016fb0 <HAL_I2C_MasterRxCpltCallback>
}
 8017de6:	46c0      	nop			@ (mov r8, r8)
 8017de8:	46bd      	mov	sp, r7
 8017dea:	b002      	add	sp, #8
 8017dec:	bd80      	pop	{r7, pc}
	...

08017df0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8017df0:	b580      	push	{r7, lr}
 8017df2:	b084      	sub	sp, #16
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	2242      	movs	r2, #66	@ 0x42
 8017e04:	2100      	movs	r1, #0
 8017e06:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	0b9b      	lsrs	r3, r3, #14
 8017e0c:	001a      	movs	r2, r3
 8017e0e:	2301      	movs	r3, #1
 8017e10:	4013      	ands	r3, r2
 8017e12:	d008      	beq.n	8017e26 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	681a      	ldr	r2, [r3, #0]
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	4925      	ldr	r1, [pc, #148]	@ (8017eb4 <I2C_ITSlaveSeqCplt+0xc4>)
 8017e20:	400a      	ands	r2, r1
 8017e22:	601a      	str	r2, [r3, #0]
 8017e24:	e00d      	b.n	8017e42 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	0bdb      	lsrs	r3, r3, #15
 8017e2a:	001a      	movs	r2, r3
 8017e2c:	2301      	movs	r3, #1
 8017e2e:	4013      	ands	r3, r2
 8017e30:	d007      	beq.n	8017e42 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	681a      	ldr	r2, [r3, #0]
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	491e      	ldr	r1, [pc, #120]	@ (8017eb8 <I2C_ITSlaveSeqCplt+0xc8>)
 8017e3e:	400a      	ands	r2, r1
 8017e40:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	2241      	movs	r2, #65	@ 0x41
 8017e46:	5c9b      	ldrb	r3, [r3, r2]
 8017e48:	b2db      	uxtb	r3, r3
 8017e4a:	2b29      	cmp	r3, #41	@ 0x29
 8017e4c:	d114      	bne.n	8017e78 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	2241      	movs	r2, #65	@ 0x41
 8017e52:	2128      	movs	r1, #40	@ 0x28
 8017e54:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	2221      	movs	r2, #33	@ 0x21
 8017e5a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	2101      	movs	r1, #1
 8017e60:	0018      	movs	r0, r3
 8017e62:	f000 ffbb 	bl	8018ddc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	2240      	movs	r2, #64	@ 0x40
 8017e6a:	2100      	movs	r1, #0
 8017e6c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	0018      	movs	r0, r3
 8017e72:	f7ff f8a5 	bl	8016fc0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017e76:	e019      	b.n	8017eac <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	2241      	movs	r2, #65	@ 0x41
 8017e7c:	5c9b      	ldrb	r3, [r3, r2]
 8017e7e:	b2db      	uxtb	r3, r3
 8017e80:	2b2a      	cmp	r3, #42	@ 0x2a
 8017e82:	d113      	bne.n	8017eac <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	2241      	movs	r2, #65	@ 0x41
 8017e88:	2128      	movs	r1, #40	@ 0x28
 8017e8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	2222      	movs	r2, #34	@ 0x22
 8017e90:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	2102      	movs	r1, #2
 8017e96:	0018      	movs	r0, r3
 8017e98:	f000 ffa0 	bl	8018ddc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	2240      	movs	r2, #64	@ 0x40
 8017ea0:	2100      	movs	r1, #0
 8017ea2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	0018      	movs	r0, r3
 8017ea8:	f7ff f892 	bl	8016fd0 <HAL_I2C_SlaveRxCpltCallback>
}
 8017eac:	46c0      	nop			@ (mov r8, r8)
 8017eae:	46bd      	mov	sp, r7
 8017eb0:	b004      	add	sp, #16
 8017eb2:	bd80      	pop	{r7, pc}
 8017eb4:	ffffbfff 	.word	0xffffbfff
 8017eb8:	ffff7fff 	.word	0xffff7fff

08017ebc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8017ebc:	b580      	push	{r7, lr}
 8017ebe:	b086      	sub	sp, #24
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	6078      	str	r0, [r7, #4]
 8017ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8017ec6:	683b      	ldr	r3, [r7, #0]
 8017ec8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	2220      	movs	r2, #32
 8017ed0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	2241      	movs	r2, #65	@ 0x41
 8017ed6:	5c9b      	ldrb	r3, [r3, r2]
 8017ed8:	b2db      	uxtb	r3, r3
 8017eda:	2b21      	cmp	r3, #33	@ 0x21
 8017edc:	d108      	bne.n	8017ef0 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	2101      	movs	r1, #1
 8017ee2:	0018      	movs	r0, r3
 8017ee4:	f000 ff7a 	bl	8018ddc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	2211      	movs	r2, #17
 8017eec:	631a      	str	r2, [r3, #48]	@ 0x30
 8017eee:	e00d      	b.n	8017f0c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	2241      	movs	r2, #65	@ 0x41
 8017ef4:	5c9b      	ldrb	r3, [r3, r2]
 8017ef6:	b2db      	uxtb	r3, r3
 8017ef8:	2b22      	cmp	r3, #34	@ 0x22
 8017efa:	d107      	bne.n	8017f0c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	2102      	movs	r1, #2
 8017f00:	0018      	movs	r0, r3
 8017f02:	f000 ff6b 	bl	8018ddc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	2212      	movs	r2, #18
 8017f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	685a      	ldr	r2, [r3, #4]
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	4950      	ldr	r1, [pc, #320]	@ (8018058 <I2C_ITMasterCplt+0x19c>)
 8017f18:	400a      	ands	r2, r1
 8017f1a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	2200      	movs	r2, #0
 8017f20:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	4a4d      	ldr	r2, [pc, #308]	@ (801805c <I2C_ITMasterCplt+0x1a0>)
 8017f26:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8017f28:	697b      	ldr	r3, [r7, #20]
 8017f2a:	091b      	lsrs	r3, r3, #4
 8017f2c:	001a      	movs	r2, r3
 8017f2e:	2301      	movs	r3, #1
 8017f30:	4013      	ands	r3, r2
 8017f32:	d009      	beq.n	8017f48 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	2210      	movs	r2, #16
 8017f3a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017f40:	2204      	movs	r2, #4
 8017f42:	431a      	orrs	r2, r3
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	2241      	movs	r2, #65	@ 0x41
 8017f4c:	5c9b      	ldrb	r3, [r3, r2]
 8017f4e:	b2db      	uxtb	r3, r3
 8017f50:	2b60      	cmp	r3, #96	@ 0x60
 8017f52:	d10b      	bne.n	8017f6c <I2C_ITMasterCplt+0xb0>
 8017f54:	697b      	ldr	r3, [r7, #20]
 8017f56:	089b      	lsrs	r3, r3, #2
 8017f58:	001a      	movs	r2, r3
 8017f5a:	2301      	movs	r3, #1
 8017f5c:	4013      	ands	r3, r2
 8017f5e:	d005      	beq.n	8017f6c <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f66:	b2db      	uxtb	r3, r3
 8017f68:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8017f6a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	0018      	movs	r0, r3
 8017f70:	f000 fb1f 	bl	80185b2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017f78:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	2241      	movs	r2, #65	@ 0x41
 8017f7e:	5c9b      	ldrb	r3, [r3, r2]
 8017f80:	b2db      	uxtb	r3, r3
 8017f82:	2b60      	cmp	r3, #96	@ 0x60
 8017f84:	d002      	beq.n	8017f8c <I2C_ITMasterCplt+0xd0>
 8017f86:	693b      	ldr	r3, [r7, #16]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d007      	beq.n	8017f9c <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	0011      	movs	r1, r2
 8017f94:	0018      	movs	r0, r3
 8017f96:	f000 f9e1 	bl	801835c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8017f9a:	e058      	b.n	801804e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	2241      	movs	r2, #65	@ 0x41
 8017fa0:	5c9b      	ldrb	r3, [r3, r2]
 8017fa2:	b2db      	uxtb	r3, r3
 8017fa4:	2b21      	cmp	r3, #33	@ 0x21
 8017fa6:	d126      	bne.n	8017ff6 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	2241      	movs	r2, #65	@ 0x41
 8017fac:	2120      	movs	r1, #32
 8017fae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	2242      	movs	r2, #66	@ 0x42
 8017fba:	5c9b      	ldrb	r3, [r3, r2]
 8017fbc:	b2db      	uxtb	r3, r3
 8017fbe:	2b40      	cmp	r3, #64	@ 0x40
 8017fc0:	d10c      	bne.n	8017fdc <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	2242      	movs	r2, #66	@ 0x42
 8017fc6:	2100      	movs	r1, #0
 8017fc8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	2240      	movs	r2, #64	@ 0x40
 8017fce:	2100      	movs	r1, #0
 8017fd0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	0018      	movs	r0, r3
 8017fd6:	f7ff f81b 	bl	8017010 <HAL_I2C_MemTxCpltCallback>
}
 8017fda:	e038      	b.n	801804e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	2242      	movs	r2, #66	@ 0x42
 8017fe0:	2100      	movs	r1, #0
 8017fe2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	2240      	movs	r2, #64	@ 0x40
 8017fe8:	2100      	movs	r1, #0
 8017fea:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	0018      	movs	r0, r3
 8017ff0:	f7fe ffd6 	bl	8016fa0 <HAL_I2C_MasterTxCpltCallback>
}
 8017ff4:	e02b      	b.n	801804e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	2241      	movs	r2, #65	@ 0x41
 8017ffa:	5c9b      	ldrb	r3, [r3, r2]
 8017ffc:	b2db      	uxtb	r3, r3
 8017ffe:	2b22      	cmp	r3, #34	@ 0x22
 8018000:	d125      	bne.n	801804e <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	2241      	movs	r2, #65	@ 0x41
 8018006:	2120      	movs	r1, #32
 8018008:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	2200      	movs	r2, #0
 801800e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	2242      	movs	r2, #66	@ 0x42
 8018014:	5c9b      	ldrb	r3, [r3, r2]
 8018016:	b2db      	uxtb	r3, r3
 8018018:	2b40      	cmp	r3, #64	@ 0x40
 801801a:	d10c      	bne.n	8018036 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	2242      	movs	r2, #66	@ 0x42
 8018020:	2100      	movs	r1, #0
 8018022:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	2240      	movs	r2, #64	@ 0x40
 8018028:	2100      	movs	r1, #0
 801802a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	0018      	movs	r0, r3
 8018030:	f7fe fff6 	bl	8017020 <HAL_I2C_MemRxCpltCallback>
}
 8018034:	e00b      	b.n	801804e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	2242      	movs	r2, #66	@ 0x42
 801803a:	2100      	movs	r1, #0
 801803c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	2240      	movs	r2, #64	@ 0x40
 8018042:	2100      	movs	r1, #0
 8018044:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	0018      	movs	r0, r3
 801804a:	f7fe ffb1 	bl	8016fb0 <HAL_I2C_MasterRxCpltCallback>
}
 801804e:	46c0      	nop			@ (mov r8, r8)
 8018050:	46bd      	mov	sp, r7
 8018052:	b006      	add	sp, #24
 8018054:	bd80      	pop	{r7, pc}
 8018056:	46c0      	nop			@ (mov r8, r8)
 8018058:	fe00e800 	.word	0xfe00e800
 801805c:	ffff0000 	.word	0xffff0000

08018060 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8018060:	b580      	push	{r7, lr}
 8018062:	b086      	sub	sp, #24
 8018064:	af00      	add	r7, sp, #0
 8018066:	6078      	str	r0, [r7, #4]
 8018068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8018072:	683b      	ldr	r3, [r7, #0]
 8018074:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8018076:	200f      	movs	r0, #15
 8018078:	183b      	adds	r3, r7, r0
 801807a:	687a      	ldr	r2, [r7, #4]
 801807c:	2141      	movs	r1, #65	@ 0x41
 801807e:	5c52      	ldrb	r2, [r2, r1]
 8018080:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	2220      	movs	r2, #32
 8018088:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801808a:	183b      	adds	r3, r7, r0
 801808c:	781b      	ldrb	r3, [r3, #0]
 801808e:	2b21      	cmp	r3, #33	@ 0x21
 8018090:	d003      	beq.n	801809a <I2C_ITSlaveCplt+0x3a>
 8018092:	183b      	adds	r3, r7, r0
 8018094:	781b      	ldrb	r3, [r3, #0]
 8018096:	2b29      	cmp	r3, #41	@ 0x29
 8018098:	d109      	bne.n	80180ae <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 801809a:	4a7d      	ldr	r2, [pc, #500]	@ (8018290 <I2C_ITSlaveCplt+0x230>)
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	0011      	movs	r1, r2
 80180a0:	0018      	movs	r0, r3
 80180a2:	f000 fe9b 	bl	8018ddc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	2221      	movs	r2, #33	@ 0x21
 80180aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80180ac:	e011      	b.n	80180d2 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80180ae:	220f      	movs	r2, #15
 80180b0:	18bb      	adds	r3, r7, r2
 80180b2:	781b      	ldrb	r3, [r3, #0]
 80180b4:	2b22      	cmp	r3, #34	@ 0x22
 80180b6:	d003      	beq.n	80180c0 <I2C_ITSlaveCplt+0x60>
 80180b8:	18bb      	adds	r3, r7, r2
 80180ba:	781b      	ldrb	r3, [r3, #0]
 80180bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80180be:	d108      	bne.n	80180d2 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80180c0:	4a74      	ldr	r2, [pc, #464]	@ (8018294 <I2C_ITSlaveCplt+0x234>)
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	0011      	movs	r1, r2
 80180c6:	0018      	movs	r0, r3
 80180c8:	f000 fe88 	bl	8018ddc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	2222      	movs	r2, #34	@ 0x22
 80180d0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	685a      	ldr	r2, [r3, #4]
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	2180      	movs	r1, #128	@ 0x80
 80180de:	0209      	lsls	r1, r1, #8
 80180e0:	430a      	orrs	r2, r1
 80180e2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	685a      	ldr	r2, [r3, #4]
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	496a      	ldr	r1, [pc, #424]	@ (8018298 <I2C_ITSlaveCplt+0x238>)
 80180f0:	400a      	ands	r2, r1
 80180f2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	0018      	movs	r0, r3
 80180f8:	f000 fa5b 	bl	80185b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80180fc:	693b      	ldr	r3, [r7, #16]
 80180fe:	0b9b      	lsrs	r3, r3, #14
 8018100:	001a      	movs	r2, r3
 8018102:	2301      	movs	r3, #1
 8018104:	4013      	ands	r3, r2
 8018106:	d013      	beq.n	8018130 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	681a      	ldr	r2, [r3, #0]
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	4962      	ldr	r1, [pc, #392]	@ (801829c <I2C_ITSlaveCplt+0x23c>)
 8018114:	400a      	ands	r2, r1
 8018116:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801811c:	2b00      	cmp	r3, #0
 801811e:	d020      	beq.n	8018162 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	685b      	ldr	r3, [r3, #4]
 8018128:	b29a      	uxth	r2, r3
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801812e:	e018      	b.n	8018162 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8018130:	693b      	ldr	r3, [r7, #16]
 8018132:	0bdb      	lsrs	r3, r3, #15
 8018134:	001a      	movs	r2, r3
 8018136:	2301      	movs	r3, #1
 8018138:	4013      	ands	r3, r2
 801813a:	d012      	beq.n	8018162 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	681a      	ldr	r2, [r3, #0]
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	4956      	ldr	r1, [pc, #344]	@ (80182a0 <I2C_ITSlaveCplt+0x240>)
 8018148:	400a      	ands	r2, r1
 801814a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018150:	2b00      	cmp	r3, #0
 8018152:	d006      	beq.n	8018162 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	685b      	ldr	r3, [r3, #4]
 801815c:	b29a      	uxth	r2, r3
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8018162:	697b      	ldr	r3, [r7, #20]
 8018164:	089b      	lsrs	r3, r3, #2
 8018166:	001a      	movs	r2, r3
 8018168:	2301      	movs	r3, #1
 801816a:	4013      	ands	r3, r2
 801816c:	d020      	beq.n	80181b0 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801816e:	697b      	ldr	r3, [r7, #20]
 8018170:	2204      	movs	r2, #4
 8018172:	4393      	bics	r3, r2
 8018174:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018180:	b2d2      	uxtb	r2, r2
 8018182:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018188:	1c5a      	adds	r2, r3, #1
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018192:	2b00      	cmp	r3, #0
 8018194:	d00c      	beq.n	80181b0 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801819a:	3b01      	subs	r3, #1
 801819c:	b29a      	uxth	r2, r3
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80181a6:	b29b      	uxth	r3, r3
 80181a8:	3b01      	subs	r3, #1
 80181aa:	b29a      	uxth	r2, r3
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80181b4:	b29b      	uxth	r3, r3
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d005      	beq.n	80181c6 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80181be:	2204      	movs	r2, #4
 80181c0:	431a      	orrs	r2, r3
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	2242      	movs	r2, #66	@ 0x42
 80181ca:	2100      	movs	r1, #0
 80181cc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	2200      	movs	r2, #0
 80181d2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d013      	beq.n	8018204 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	0011      	movs	r1, r2
 80181e4:	0018      	movs	r0, r3
 80181e6:	f000 f8b9 	bl	801835c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	2241      	movs	r2, #65	@ 0x41
 80181ee:	5c9b      	ldrb	r3, [r3, r2]
 80181f0:	b2db      	uxtb	r3, r3
 80181f2:	2b28      	cmp	r3, #40	@ 0x28
 80181f4:	d147      	bne.n	8018286 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80181f6:	697a      	ldr	r2, [r7, #20]
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	0011      	movs	r1, r2
 80181fc:	0018      	movs	r0, r3
 80181fe:	f000 f853 	bl	80182a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8018202:	e040      	b.n	8018286 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018208:	4a26      	ldr	r2, [pc, #152]	@ (80182a4 <I2C_ITSlaveCplt+0x244>)
 801820a:	4293      	cmp	r3, r2
 801820c:	d016      	beq.n	801823c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	0018      	movs	r0, r3
 8018212:	f7ff fded 	bl	8017df0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	4a22      	ldr	r2, [pc, #136]	@ (80182a4 <I2C_ITSlaveCplt+0x244>)
 801821a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	2241      	movs	r2, #65	@ 0x41
 8018220:	2120      	movs	r1, #32
 8018222:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	2200      	movs	r2, #0
 8018228:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	2240      	movs	r2, #64	@ 0x40
 801822e:	2100      	movs	r1, #0
 8018230:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	0018      	movs	r0, r3
 8018236:	f7fe fee3 	bl	8017000 <HAL_I2C_ListenCpltCallback>
}
 801823a:	e024      	b.n	8018286 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	2241      	movs	r2, #65	@ 0x41
 8018240:	5c9b      	ldrb	r3, [r3, r2]
 8018242:	b2db      	uxtb	r3, r3
 8018244:	2b22      	cmp	r3, #34	@ 0x22
 8018246:	d10f      	bne.n	8018268 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	2241      	movs	r2, #65	@ 0x41
 801824c:	2120      	movs	r1, #32
 801824e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	2200      	movs	r2, #0
 8018254:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	2240      	movs	r2, #64	@ 0x40
 801825a:	2100      	movs	r1, #0
 801825c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	0018      	movs	r0, r3
 8018262:	f7fe feb5 	bl	8016fd0 <HAL_I2C_SlaveRxCpltCallback>
}
 8018266:	e00e      	b.n	8018286 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	2241      	movs	r2, #65	@ 0x41
 801826c:	2120      	movs	r1, #32
 801826e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	2200      	movs	r2, #0
 8018274:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	2240      	movs	r2, #64	@ 0x40
 801827a:	2100      	movs	r1, #0
 801827c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	0018      	movs	r0, r3
 8018282:	f7fe fe9d 	bl	8016fc0 <HAL_I2C_SlaveTxCpltCallback>
}
 8018286:	46c0      	nop			@ (mov r8, r8)
 8018288:	46bd      	mov	sp, r7
 801828a:	b006      	add	sp, #24
 801828c:	bd80      	pop	{r7, pc}
 801828e:	46c0      	nop			@ (mov r8, r8)
 8018290:	00008001 	.word	0x00008001
 8018294:	00008002 	.word	0x00008002
 8018298:	fe00e800 	.word	0xfe00e800
 801829c:	ffffbfff 	.word	0xffffbfff
 80182a0:	ffff7fff 	.word	0xffff7fff
 80182a4:	ffff0000 	.word	0xffff0000

080182a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80182a8:	b580      	push	{r7, lr}
 80182aa:	b082      	sub	sp, #8
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	6078      	str	r0, [r7, #4]
 80182b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	4a27      	ldr	r2, [pc, #156]	@ (8018354 <I2C_ITListenCplt+0xac>)
 80182b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	2200      	movs	r2, #0
 80182bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	2241      	movs	r2, #65	@ 0x41
 80182c2:	2120      	movs	r1, #32
 80182c4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	2242      	movs	r2, #66	@ 0x42
 80182ca:	2100      	movs	r1, #0
 80182cc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	2200      	movs	r2, #0
 80182d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80182d4:	683b      	ldr	r3, [r7, #0]
 80182d6:	089b      	lsrs	r3, r3, #2
 80182d8:	001a      	movs	r2, r3
 80182da:	2301      	movs	r3, #1
 80182dc:	4013      	ands	r3, r2
 80182de:	d022      	beq.n	8018326 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182ea:	b2d2      	uxtb	r2, r2
 80182ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182f2:	1c5a      	adds	r2, r3, #1
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d012      	beq.n	8018326 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018304:	3b01      	subs	r3, #1
 8018306:	b29a      	uxth	r2, r3
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018310:	b29b      	uxth	r3, r3
 8018312:	3b01      	subs	r3, #1
 8018314:	b29a      	uxth	r2, r3
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801831e:	2204      	movs	r2, #4
 8018320:	431a      	orrs	r2, r3
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8018326:	4a0c      	ldr	r2, [pc, #48]	@ (8018358 <I2C_ITListenCplt+0xb0>)
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	0011      	movs	r1, r2
 801832c:	0018      	movs	r0, r3
 801832e:	f000 fd55 	bl	8018ddc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	2210      	movs	r2, #16
 8018338:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	2240      	movs	r2, #64	@ 0x40
 801833e:	2100      	movs	r1, #0
 8018340:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	0018      	movs	r0, r3
 8018346:	f7fe fe5b 	bl	8017000 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 801834a:	46c0      	nop			@ (mov r8, r8)
 801834c:	46bd      	mov	sp, r7
 801834e:	b002      	add	sp, #8
 8018350:	bd80      	pop	{r7, pc}
 8018352:	46c0      	nop			@ (mov r8, r8)
 8018354:	ffff0000 	.word	0xffff0000
 8018358:	00008003 	.word	0x00008003

0801835c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 801835c:	b580      	push	{r7, lr}
 801835e:	b084      	sub	sp, #16
 8018360:	af00      	add	r7, sp, #0
 8018362:	6078      	str	r0, [r7, #4]
 8018364:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8018366:	200f      	movs	r0, #15
 8018368:	183b      	adds	r3, r7, r0
 801836a:	687a      	ldr	r2, [r7, #4]
 801836c:	2141      	movs	r1, #65	@ 0x41
 801836e:	5c52      	ldrb	r2, [r2, r1]
 8018370:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	2242      	movs	r2, #66	@ 0x42
 8018376:	2100      	movs	r1, #0
 8018378:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	4a72      	ldr	r2, [pc, #456]	@ (8018548 <I2C_ITError+0x1ec>)
 801837e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	2200      	movs	r2, #0
 8018384:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801838a:	683b      	ldr	r3, [r7, #0]
 801838c:	431a      	orrs	r2, r3
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8018392:	183b      	adds	r3, r7, r0
 8018394:	781b      	ldrb	r3, [r3, #0]
 8018396:	2b28      	cmp	r3, #40	@ 0x28
 8018398:	d007      	beq.n	80183aa <I2C_ITError+0x4e>
 801839a:	183b      	adds	r3, r7, r0
 801839c:	781b      	ldrb	r3, [r3, #0]
 801839e:	2b29      	cmp	r3, #41	@ 0x29
 80183a0:	d003      	beq.n	80183aa <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80183a2:	183b      	adds	r3, r7, r0
 80183a4:	781b      	ldrb	r3, [r3, #0]
 80183a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80183a8:	d10c      	bne.n	80183c4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	2103      	movs	r1, #3
 80183ae:	0018      	movs	r0, r3
 80183b0:	f000 fd14 	bl	8018ddc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	2241      	movs	r2, #65	@ 0x41
 80183b8:	2128      	movs	r1, #40	@ 0x28
 80183ba:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	4a63      	ldr	r2, [pc, #396]	@ (801854c <I2C_ITError+0x1f0>)
 80183c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80183c2:	e032      	b.n	801842a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80183c4:	4a62      	ldr	r2, [pc, #392]	@ (8018550 <I2C_ITError+0x1f4>)
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	0011      	movs	r1, r2
 80183ca:	0018      	movs	r0, r3
 80183cc:	f000 fd06 	bl	8018ddc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	0018      	movs	r0, r3
 80183d4:	f000 f8ed 	bl	80185b2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	2241      	movs	r2, #65	@ 0x41
 80183dc:	5c9b      	ldrb	r3, [r3, r2]
 80183de:	b2db      	uxtb	r3, r3
 80183e0:	2b60      	cmp	r3, #96	@ 0x60
 80183e2:	d01f      	beq.n	8018424 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	2241      	movs	r2, #65	@ 0x41
 80183e8:	2120      	movs	r1, #32
 80183ea:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	699b      	ldr	r3, [r3, #24]
 80183f2:	2220      	movs	r2, #32
 80183f4:	4013      	ands	r3, r2
 80183f6:	2b20      	cmp	r3, #32
 80183f8:	d114      	bne.n	8018424 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	699b      	ldr	r3, [r3, #24]
 8018400:	2210      	movs	r2, #16
 8018402:	4013      	ands	r3, r2
 8018404:	2b10      	cmp	r3, #16
 8018406:	d109      	bne.n	801841c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	2210      	movs	r2, #16
 801840e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018414:	2204      	movs	r2, #4
 8018416:	431a      	orrs	r2, r3
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	2220      	movs	r2, #32
 8018422:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	2200      	movs	r2, #0
 8018428:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801842e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018434:	2b00      	cmp	r3, #0
 8018436:	d03b      	beq.n	80184b0 <I2C_ITError+0x154>
 8018438:	68bb      	ldr	r3, [r7, #8]
 801843a:	2b11      	cmp	r3, #17
 801843c:	d002      	beq.n	8018444 <I2C_ITError+0xe8>
 801843e:	68bb      	ldr	r3, [r7, #8]
 8018440:	2b21      	cmp	r3, #33	@ 0x21
 8018442:	d135      	bne.n	80184b0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	681a      	ldr	r2, [r3, #0]
 801844a:	2380      	movs	r3, #128	@ 0x80
 801844c:	01db      	lsls	r3, r3, #7
 801844e:	401a      	ands	r2, r3
 8018450:	2380      	movs	r3, #128	@ 0x80
 8018452:	01db      	lsls	r3, r3, #7
 8018454:	429a      	cmp	r2, r3
 8018456:	d107      	bne.n	8018468 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	681a      	ldr	r2, [r3, #0]
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	493c      	ldr	r1, [pc, #240]	@ (8018554 <I2C_ITError+0x1f8>)
 8018464:	400a      	ands	r2, r1
 8018466:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801846c:	0018      	movs	r0, r3
 801846e:	f7fd fa56 	bl	801591e <HAL_DMA_GetState>
 8018472:	0003      	movs	r3, r0
 8018474:	2b01      	cmp	r3, #1
 8018476:	d016      	beq.n	80184a6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801847c:	4a36      	ldr	r2, [pc, #216]	@ (8018558 <I2C_ITError+0x1fc>)
 801847e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	2240      	movs	r2, #64	@ 0x40
 8018484:	2100      	movs	r1, #0
 8018486:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801848c:	0018      	movs	r0, r3
 801848e:	f7fd f951 	bl	8015734 <HAL_DMA_Abort_IT>
 8018492:	1e03      	subs	r3, r0, #0
 8018494:	d051      	beq.n	801853a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801849a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80184a0:	0018      	movs	r0, r3
 80184a2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80184a4:	e049      	b.n	801853a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	0018      	movs	r0, r3
 80184aa:	f000 f859 	bl	8018560 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80184ae:	e044      	b.n	801853a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d03b      	beq.n	8018530 <I2C_ITError+0x1d4>
 80184b8:	68bb      	ldr	r3, [r7, #8]
 80184ba:	2b12      	cmp	r3, #18
 80184bc:	d002      	beq.n	80184c4 <I2C_ITError+0x168>
 80184be:	68bb      	ldr	r3, [r7, #8]
 80184c0:	2b22      	cmp	r3, #34	@ 0x22
 80184c2:	d135      	bne.n	8018530 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	681a      	ldr	r2, [r3, #0]
 80184ca:	2380      	movs	r3, #128	@ 0x80
 80184cc:	021b      	lsls	r3, r3, #8
 80184ce:	401a      	ands	r2, r3
 80184d0:	2380      	movs	r3, #128	@ 0x80
 80184d2:	021b      	lsls	r3, r3, #8
 80184d4:	429a      	cmp	r2, r3
 80184d6:	d107      	bne.n	80184e8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	681a      	ldr	r2, [r3, #0]
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	491e      	ldr	r1, [pc, #120]	@ (801855c <I2C_ITError+0x200>)
 80184e4:	400a      	ands	r2, r1
 80184e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80184ec:	0018      	movs	r0, r3
 80184ee:	f7fd fa16 	bl	801591e <HAL_DMA_GetState>
 80184f2:	0003      	movs	r3, r0
 80184f4:	2b01      	cmp	r3, #1
 80184f6:	d016      	beq.n	8018526 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80184fc:	4a16      	ldr	r2, [pc, #88]	@ (8018558 <I2C_ITError+0x1fc>)
 80184fe:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	2240      	movs	r2, #64	@ 0x40
 8018504:	2100      	movs	r1, #0
 8018506:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801850c:	0018      	movs	r0, r3
 801850e:	f7fd f911 	bl	8015734 <HAL_DMA_Abort_IT>
 8018512:	1e03      	subs	r3, r0, #0
 8018514:	d013      	beq.n	801853e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801851a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018520:	0018      	movs	r0, r3
 8018522:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8018524:	e00b      	b.n	801853e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	0018      	movs	r0, r3
 801852a:	f000 f819 	bl	8018560 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801852e:	e006      	b.n	801853e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	0018      	movs	r0, r3
 8018534:	f000 f814 	bl	8018560 <I2C_TreatErrorCallback>
  }
}
 8018538:	e002      	b.n	8018540 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801853a:	46c0      	nop			@ (mov r8, r8)
 801853c:	e000      	b.n	8018540 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801853e:	46c0      	nop			@ (mov r8, r8)
}
 8018540:	46c0      	nop			@ (mov r8, r8)
 8018542:	46bd      	mov	sp, r7
 8018544:	b004      	add	sp, #16
 8018546:	bd80      	pop	{r7, pc}
 8018548:	ffff0000 	.word	0xffff0000
 801854c:	080172d5 	.word	0x080172d5
 8018550:	00008003 	.word	0x00008003
 8018554:	ffffbfff 	.word	0xffffbfff
 8018558:	0801876b 	.word	0x0801876b
 801855c:	ffff7fff 	.word	0xffff7fff

08018560 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8018560:	b580      	push	{r7, lr}
 8018562:	b082      	sub	sp, #8
 8018564:	af00      	add	r7, sp, #0
 8018566:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	2241      	movs	r2, #65	@ 0x41
 801856c:	5c9b      	ldrb	r3, [r3, r2]
 801856e:	b2db      	uxtb	r3, r3
 8018570:	2b60      	cmp	r3, #96	@ 0x60
 8018572:	d10f      	bne.n	8018594 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	2241      	movs	r2, #65	@ 0x41
 8018578:	2120      	movs	r1, #32
 801857a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	2200      	movs	r2, #0
 8018580:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	2240      	movs	r2, #64	@ 0x40
 8018586:	2100      	movs	r1, #0
 8018588:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	0018      	movs	r0, r3
 801858e:	f7fe fd57 	bl	8017040 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8018592:	e00a      	b.n	80185aa <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	2200      	movs	r2, #0
 8018598:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	2240      	movs	r2, #64	@ 0x40
 801859e:	2100      	movs	r1, #0
 80185a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	0018      	movs	r0, r3
 80185a6:	f7fe fd43 	bl	8017030 <HAL_I2C_ErrorCallback>
}
 80185aa:	46c0      	nop			@ (mov r8, r8)
 80185ac:	46bd      	mov	sp, r7
 80185ae:	b002      	add	sp, #8
 80185b0:	bd80      	pop	{r7, pc}

080185b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80185b2:	b580      	push	{r7, lr}
 80185b4:	b082      	sub	sp, #8
 80185b6:	af00      	add	r7, sp, #0
 80185b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	699b      	ldr	r3, [r3, #24]
 80185c0:	2202      	movs	r2, #2
 80185c2:	4013      	ands	r3, r2
 80185c4:	2b02      	cmp	r3, #2
 80185c6:	d103      	bne.n	80185d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	2200      	movs	r2, #0
 80185ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	699b      	ldr	r3, [r3, #24]
 80185d6:	2201      	movs	r2, #1
 80185d8:	4013      	ands	r3, r2
 80185da:	2b01      	cmp	r3, #1
 80185dc:	d007      	beq.n	80185ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	699a      	ldr	r2, [r3, #24]
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	2101      	movs	r1, #1
 80185ea:	430a      	orrs	r2, r1
 80185ec:	619a      	str	r2, [r3, #24]
  }
}
 80185ee:	46c0      	nop			@ (mov r8, r8)
 80185f0:	46bd      	mov	sp, r7
 80185f2:	b002      	add	sp, #8
 80185f4:	bd80      	pop	{r7, pc}
	...

080185f8 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b084      	sub	sp, #16
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018604:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	681a      	ldr	r2, [r3, #0]
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	4920      	ldr	r1, [pc, #128]	@ (8018694 <I2C_DMAMasterTransmitCplt+0x9c>)
 8018612:	400a      	ands	r2, r1
 8018614:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801861a:	b29b      	uxth	r3, r3
 801861c:	2b00      	cmp	r3, #0
 801861e:	d105      	bne.n	801862c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	2120      	movs	r1, #32
 8018624:	0018      	movs	r0, r3
 8018626:	f000 fb4b 	bl	8018cc0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801862a:	e02e      	b.n	801868a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018630:	68fa      	ldr	r2, [r7, #12]
 8018632:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8018634:	189a      	adds	r2, r3, r2
 8018636:	68fb      	ldr	r3, [r7, #12]
 8018638:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801863e:	b29b      	uxth	r3, r3
 8018640:	2bff      	cmp	r3, #255	@ 0xff
 8018642:	d903      	bls.n	801864c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	22ff      	movs	r2, #255	@ 0xff
 8018648:	851a      	strh	r2, [r3, #40]	@ 0x28
 801864a:	e004      	b.n	8018656 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018650:	b29a      	uxth	r2, r3
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801865e:	0019      	movs	r1, r3
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	3328      	adds	r3, #40	@ 0x28
 8018666:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801866c:	f7fc ffbc 	bl	80155e8 <HAL_DMA_Start_IT>
 8018670:	1e03      	subs	r3, r0, #0
 8018672:	d005      	beq.n	8018680 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	2110      	movs	r1, #16
 8018678:	0018      	movs	r0, r3
 801867a:	f7ff fe6f 	bl	801835c <I2C_ITError>
}
 801867e:	e004      	b.n	801868a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	2140      	movs	r1, #64	@ 0x40
 8018684:	0018      	movs	r0, r3
 8018686:	f000 fb1b 	bl	8018cc0 <I2C_Enable_IRQ>
}
 801868a:	46c0      	nop			@ (mov r8, r8)
 801868c:	46bd      	mov	sp, r7
 801868e:	b004      	add	sp, #16
 8018690:	bd80      	pop	{r7, pc}
 8018692:	46c0      	nop			@ (mov r8, r8)
 8018694:	ffffbfff 	.word	0xffffbfff

08018698 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018698:	b580      	push	{r7, lr}
 801869a:	b084      	sub	sp, #16
 801869c:	af00      	add	r7, sp, #0
 801869e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80186a4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	681a      	ldr	r2, [r3, #0]
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	4920      	ldr	r1, [pc, #128]	@ (8018734 <I2C_DMAMasterReceiveCplt+0x9c>)
 80186b2:	400a      	ands	r2, r1
 80186b4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80186ba:	b29b      	uxth	r3, r3
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d105      	bne.n	80186cc <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	2120      	movs	r1, #32
 80186c4:	0018      	movs	r0, r3
 80186c6:	f000 fafb 	bl	8018cc0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80186ca:	e02e      	b.n	801872a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80186cc:	68fb      	ldr	r3, [r7, #12]
 80186ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80186d0:	68fa      	ldr	r2, [r7, #12]
 80186d2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80186d4:	189a      	adds	r2, r3, r2
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80186de:	b29b      	uxth	r3, r3
 80186e0:	2bff      	cmp	r3, #255	@ 0xff
 80186e2:	d903      	bls.n	80186ec <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	22ff      	movs	r2, #255	@ 0xff
 80186e8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80186ea:	e004      	b.n	80186f6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80186f0:	b29a      	uxth	r2, r3
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	3324      	adds	r3, #36	@ 0x24
 8018700:	0019      	movs	r1, r3
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018706:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8018708:	68fb      	ldr	r3, [r7, #12]
 801870a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801870c:	f7fc ff6c 	bl	80155e8 <HAL_DMA_Start_IT>
 8018710:	1e03      	subs	r3, r0, #0
 8018712:	d005      	beq.n	8018720 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	2110      	movs	r1, #16
 8018718:	0018      	movs	r0, r3
 801871a:	f7ff fe1f 	bl	801835c <I2C_ITError>
}
 801871e:	e004      	b.n	801872a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	2140      	movs	r1, #64	@ 0x40
 8018724:	0018      	movs	r0, r3
 8018726:	f000 facb 	bl	8018cc0 <I2C_Enable_IRQ>
}
 801872a:	46c0      	nop			@ (mov r8, r8)
 801872c:	46bd      	mov	sp, r7
 801872e:	b004      	add	sp, #16
 8018730:	bd80      	pop	{r7, pc}
 8018732:	46c0      	nop			@ (mov r8, r8)
 8018734:	ffff7fff 	.word	0xffff7fff

08018738 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b084      	sub	sp, #16
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018744:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	685a      	ldr	r2, [r3, #4]
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	2180      	movs	r1, #128	@ 0x80
 8018752:	0209      	lsls	r1, r1, #8
 8018754:	430a      	orrs	r2, r1
 8018756:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	2110      	movs	r1, #16
 801875c:	0018      	movs	r0, r3
 801875e:	f7ff fdfd 	bl	801835c <I2C_ITError>
}
 8018762:	46c0      	nop			@ (mov r8, r8)
 8018764:	46bd      	mov	sp, r7
 8018766:	b004      	add	sp, #16
 8018768:	bd80      	pop	{r7, pc}

0801876a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801876a:	b580      	push	{r7, lr}
 801876c:	b084      	sub	sp, #16
 801876e:	af00      	add	r7, sp, #0
 8018770:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018776:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801877c:	2b00      	cmp	r3, #0
 801877e:	d003      	beq.n	8018788 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018784:	2200      	movs	r2, #0
 8018786:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801878c:	2b00      	cmp	r3, #0
 801878e:	d003      	beq.n	8018798 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018794:	2200      	movs	r2, #0
 8018796:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	0018      	movs	r0, r3
 801879c:	f7ff fee0 	bl	8018560 <I2C_TreatErrorCallback>
}
 80187a0:	46c0      	nop			@ (mov r8, r8)
 80187a2:	46bd      	mov	sp, r7
 80187a4:	b004      	add	sp, #16
 80187a6:	bd80      	pop	{r7, pc}

080187a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b084      	sub	sp, #16
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	60f8      	str	r0, [r7, #12]
 80187b0:	60b9      	str	r1, [r7, #8]
 80187b2:	603b      	str	r3, [r7, #0]
 80187b4:	1dfb      	adds	r3, r7, #7
 80187b6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80187b8:	e030      	b.n	801881c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80187ba:	683b      	ldr	r3, [r7, #0]
 80187bc:	3301      	adds	r3, #1
 80187be:	d02d      	beq.n	801881c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80187c0:	f7fc f9c0 	bl	8014b44 <HAL_GetTick>
 80187c4:	0002      	movs	r2, r0
 80187c6:	69bb      	ldr	r3, [r7, #24]
 80187c8:	1ad3      	subs	r3, r2, r3
 80187ca:	683a      	ldr	r2, [r7, #0]
 80187cc:	429a      	cmp	r2, r3
 80187ce:	d302      	bcc.n	80187d6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80187d0:	683b      	ldr	r3, [r7, #0]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d122      	bne.n	801881c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80187d6:	68fb      	ldr	r3, [r7, #12]
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	699b      	ldr	r3, [r3, #24]
 80187dc:	68ba      	ldr	r2, [r7, #8]
 80187de:	4013      	ands	r3, r2
 80187e0:	68ba      	ldr	r2, [r7, #8]
 80187e2:	1ad3      	subs	r3, r2, r3
 80187e4:	425a      	negs	r2, r3
 80187e6:	4153      	adcs	r3, r2
 80187e8:	b2db      	uxtb	r3, r3
 80187ea:	001a      	movs	r2, r3
 80187ec:	1dfb      	adds	r3, r7, #7
 80187ee:	781b      	ldrb	r3, [r3, #0]
 80187f0:	429a      	cmp	r2, r3
 80187f2:	d113      	bne.n	801881c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80187f8:	2220      	movs	r2, #32
 80187fa:	431a      	orrs	r2, r3
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	2241      	movs	r2, #65	@ 0x41
 8018804:	2120      	movs	r1, #32
 8018806:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	2242      	movs	r2, #66	@ 0x42
 801880c:	2100      	movs	r1, #0
 801880e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	2240      	movs	r2, #64	@ 0x40
 8018814:	2100      	movs	r1, #0
 8018816:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8018818:	2301      	movs	r3, #1
 801881a:	e00f      	b.n	801883c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	699b      	ldr	r3, [r3, #24]
 8018822:	68ba      	ldr	r2, [r7, #8]
 8018824:	4013      	ands	r3, r2
 8018826:	68ba      	ldr	r2, [r7, #8]
 8018828:	1ad3      	subs	r3, r2, r3
 801882a:	425a      	negs	r2, r3
 801882c:	4153      	adcs	r3, r2
 801882e:	b2db      	uxtb	r3, r3
 8018830:	001a      	movs	r2, r3
 8018832:	1dfb      	adds	r3, r7, #7
 8018834:	781b      	ldrb	r3, [r3, #0]
 8018836:	429a      	cmp	r2, r3
 8018838:	d0bf      	beq.n	80187ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801883a:	2300      	movs	r3, #0
}
 801883c:	0018      	movs	r0, r3
 801883e:	46bd      	mov	sp, r7
 8018840:	b004      	add	sp, #16
 8018842:	bd80      	pop	{r7, pc}

08018844 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018844:	b580      	push	{r7, lr}
 8018846:	b084      	sub	sp, #16
 8018848:	af00      	add	r7, sp, #0
 801884a:	60f8      	str	r0, [r7, #12]
 801884c:	60b9      	str	r1, [r7, #8]
 801884e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018850:	e032      	b.n	80188b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018852:	687a      	ldr	r2, [r7, #4]
 8018854:	68b9      	ldr	r1, [r7, #8]
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	0018      	movs	r0, r3
 801885a:	f000 f8ff 	bl	8018a5c <I2C_IsErrorOccurred>
 801885e:	1e03      	subs	r3, r0, #0
 8018860:	d001      	beq.n	8018866 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018862:	2301      	movs	r3, #1
 8018864:	e030      	b.n	80188c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018866:	68bb      	ldr	r3, [r7, #8]
 8018868:	3301      	adds	r3, #1
 801886a:	d025      	beq.n	80188b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801886c:	f7fc f96a 	bl	8014b44 <HAL_GetTick>
 8018870:	0002      	movs	r2, r0
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	1ad3      	subs	r3, r2, r3
 8018876:	68ba      	ldr	r2, [r7, #8]
 8018878:	429a      	cmp	r2, r3
 801887a:	d302      	bcc.n	8018882 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 801887c:	68bb      	ldr	r3, [r7, #8]
 801887e:	2b00      	cmp	r3, #0
 8018880:	d11a      	bne.n	80188b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	699b      	ldr	r3, [r3, #24]
 8018888:	2202      	movs	r2, #2
 801888a:	4013      	ands	r3, r2
 801888c:	2b02      	cmp	r3, #2
 801888e:	d013      	beq.n	80188b8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018894:	2220      	movs	r2, #32
 8018896:	431a      	orrs	r2, r3
 8018898:	68fb      	ldr	r3, [r7, #12]
 801889a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	2241      	movs	r2, #65	@ 0x41
 80188a0:	2120      	movs	r1, #32
 80188a2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	2242      	movs	r2, #66	@ 0x42
 80188a8:	2100      	movs	r1, #0
 80188aa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	2240      	movs	r2, #64	@ 0x40
 80188b0:	2100      	movs	r1, #0
 80188b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80188b4:	2301      	movs	r3, #1
 80188b6:	e007      	b.n	80188c8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80188b8:	68fb      	ldr	r3, [r7, #12]
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	699b      	ldr	r3, [r3, #24]
 80188be:	2202      	movs	r2, #2
 80188c0:	4013      	ands	r3, r2
 80188c2:	2b02      	cmp	r3, #2
 80188c4:	d1c5      	bne.n	8018852 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80188c6:	2300      	movs	r3, #0
}
 80188c8:	0018      	movs	r0, r3
 80188ca:	46bd      	mov	sp, r7
 80188cc:	b004      	add	sp, #16
 80188ce:	bd80      	pop	{r7, pc}

080188d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b084      	sub	sp, #16
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	60f8      	str	r0, [r7, #12]
 80188d8:	60b9      	str	r1, [r7, #8]
 80188da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80188dc:	e02f      	b.n	801893e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80188de:	687a      	ldr	r2, [r7, #4]
 80188e0:	68b9      	ldr	r1, [r7, #8]
 80188e2:	68fb      	ldr	r3, [r7, #12]
 80188e4:	0018      	movs	r0, r3
 80188e6:	f000 f8b9 	bl	8018a5c <I2C_IsErrorOccurred>
 80188ea:	1e03      	subs	r3, r0, #0
 80188ec:	d001      	beq.n	80188f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80188ee:	2301      	movs	r3, #1
 80188f0:	e02d      	b.n	801894e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80188f2:	f7fc f927 	bl	8014b44 <HAL_GetTick>
 80188f6:	0002      	movs	r2, r0
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	1ad3      	subs	r3, r2, r3
 80188fc:	68ba      	ldr	r2, [r7, #8]
 80188fe:	429a      	cmp	r2, r3
 8018900:	d302      	bcc.n	8018908 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8018902:	68bb      	ldr	r3, [r7, #8]
 8018904:	2b00      	cmp	r3, #0
 8018906:	d11a      	bne.n	801893e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	699b      	ldr	r3, [r3, #24]
 801890e:	2220      	movs	r2, #32
 8018910:	4013      	ands	r3, r2
 8018912:	2b20      	cmp	r3, #32
 8018914:	d013      	beq.n	801893e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801891a:	2220      	movs	r2, #32
 801891c:	431a      	orrs	r2, r3
 801891e:	68fb      	ldr	r3, [r7, #12]
 8018920:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	2241      	movs	r2, #65	@ 0x41
 8018926:	2120      	movs	r1, #32
 8018928:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	2242      	movs	r2, #66	@ 0x42
 801892e:	2100      	movs	r1, #0
 8018930:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	2240      	movs	r2, #64	@ 0x40
 8018936:	2100      	movs	r1, #0
 8018938:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801893a:	2301      	movs	r3, #1
 801893c:	e007      	b.n	801894e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	699b      	ldr	r3, [r3, #24]
 8018944:	2220      	movs	r2, #32
 8018946:	4013      	ands	r3, r2
 8018948:	2b20      	cmp	r3, #32
 801894a:	d1c8      	bne.n	80188de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801894c:	2300      	movs	r3, #0
}
 801894e:	0018      	movs	r0, r3
 8018950:	46bd      	mov	sp, r7
 8018952:	b004      	add	sp, #16
 8018954:	bd80      	pop	{r7, pc}
	...

08018958 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b084      	sub	sp, #16
 801895c:	af00      	add	r7, sp, #0
 801895e:	60f8      	str	r0, [r7, #12]
 8018960:	60b9      	str	r1, [r7, #8]
 8018962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8018964:	e06b      	b.n	8018a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018966:	687a      	ldr	r2, [r7, #4]
 8018968:	68b9      	ldr	r1, [r7, #8]
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	0018      	movs	r0, r3
 801896e:	f000 f875 	bl	8018a5c <I2C_IsErrorOccurred>
 8018972:	1e03      	subs	r3, r0, #0
 8018974:	d001      	beq.n	801897a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018976:	2301      	movs	r3, #1
 8018978:	e069      	b.n	8018a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	699b      	ldr	r3, [r3, #24]
 8018980:	2220      	movs	r2, #32
 8018982:	4013      	ands	r3, r2
 8018984:	2b20      	cmp	r3, #32
 8018986:	d138      	bne.n	80189fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	699b      	ldr	r3, [r3, #24]
 801898e:	2204      	movs	r2, #4
 8018990:	4013      	ands	r3, r2
 8018992:	2b04      	cmp	r3, #4
 8018994:	d105      	bne.n	80189a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801899a:	2b00      	cmp	r3, #0
 801899c:	d001      	beq.n	80189a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 801899e:	2300      	movs	r3, #0
 80189a0:	e055      	b.n	8018a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	699b      	ldr	r3, [r3, #24]
 80189a8:	2210      	movs	r2, #16
 80189aa:	4013      	ands	r3, r2
 80189ac:	2b10      	cmp	r3, #16
 80189ae:	d107      	bne.n	80189c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	2210      	movs	r2, #16
 80189b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	2204      	movs	r2, #4
 80189bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80189be:	e002      	b.n	80189c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	2200      	movs	r2, #0
 80189c4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	2220      	movs	r2, #32
 80189cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	685a      	ldr	r2, [r3, #4]
 80189d4:	68fb      	ldr	r3, [r7, #12]
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	491f      	ldr	r1, [pc, #124]	@ (8018a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80189da:	400a      	ands	r2, r1
 80189dc:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	2241      	movs	r2, #65	@ 0x41
 80189e2:	2120      	movs	r1, #32
 80189e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	2242      	movs	r2, #66	@ 0x42
 80189ea:	2100      	movs	r1, #0
 80189ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	2240      	movs	r2, #64	@ 0x40
 80189f2:	2100      	movs	r1, #0
 80189f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80189f6:	2301      	movs	r3, #1
 80189f8:	e029      	b.n	8018a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80189fa:	f7fc f8a3 	bl	8014b44 <HAL_GetTick>
 80189fe:	0002      	movs	r2, r0
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	1ad3      	subs	r3, r2, r3
 8018a04:	68ba      	ldr	r2, [r7, #8]
 8018a06:	429a      	cmp	r2, r3
 8018a08:	d302      	bcc.n	8018a10 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8018a0a:	68bb      	ldr	r3, [r7, #8]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d116      	bne.n	8018a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	699b      	ldr	r3, [r3, #24]
 8018a16:	2204      	movs	r2, #4
 8018a18:	4013      	ands	r3, r2
 8018a1a:	2b04      	cmp	r3, #4
 8018a1c:	d00f      	beq.n	8018a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018a22:	2220      	movs	r2, #32
 8018a24:	431a      	orrs	r2, r3
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	2241      	movs	r2, #65	@ 0x41
 8018a2e:	2120      	movs	r1, #32
 8018a30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	2240      	movs	r2, #64	@ 0x40
 8018a36:	2100      	movs	r1, #0
 8018a38:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8018a3a:	2301      	movs	r3, #1
 8018a3c:	e007      	b.n	8018a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8018a3e:	68fb      	ldr	r3, [r7, #12]
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	699b      	ldr	r3, [r3, #24]
 8018a44:	2204      	movs	r2, #4
 8018a46:	4013      	ands	r3, r2
 8018a48:	2b04      	cmp	r3, #4
 8018a4a:	d18c      	bne.n	8018966 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018a4c:	2300      	movs	r3, #0
}
 8018a4e:	0018      	movs	r0, r3
 8018a50:	46bd      	mov	sp, r7
 8018a52:	b004      	add	sp, #16
 8018a54:	bd80      	pop	{r7, pc}
 8018a56:	46c0      	nop			@ (mov r8, r8)
 8018a58:	fe00e800 	.word	0xfe00e800

08018a5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018a5c:	b580      	push	{r7, lr}
 8018a5e:	b08a      	sub	sp, #40	@ 0x28
 8018a60:	af00      	add	r7, sp, #0
 8018a62:	60f8      	str	r0, [r7, #12]
 8018a64:	60b9      	str	r1, [r7, #8]
 8018a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018a68:	2327      	movs	r3, #39	@ 0x27
 8018a6a:	18fb      	adds	r3, r7, r3
 8018a6c:	2200      	movs	r2, #0
 8018a6e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	699b      	ldr	r3, [r3, #24]
 8018a76:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8018a78:	2300      	movs	r3, #0
 8018a7a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8018a80:	69bb      	ldr	r3, [r7, #24]
 8018a82:	2210      	movs	r2, #16
 8018a84:	4013      	ands	r3, r2
 8018a86:	d100      	bne.n	8018a8a <I2C_IsErrorOccurred+0x2e>
 8018a88:	e079      	b.n	8018b7e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	2210      	movs	r2, #16
 8018a90:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018a92:	e057      	b.n	8018b44 <I2C_IsErrorOccurred+0xe8>
 8018a94:	2227      	movs	r2, #39	@ 0x27
 8018a96:	18bb      	adds	r3, r7, r2
 8018a98:	18ba      	adds	r2, r7, r2
 8018a9a:	7812      	ldrb	r2, [r2, #0]
 8018a9c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8018a9e:	68bb      	ldr	r3, [r7, #8]
 8018aa0:	3301      	adds	r3, #1
 8018aa2:	d04f      	beq.n	8018b44 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8018aa4:	f7fc f84e 	bl	8014b44 <HAL_GetTick>
 8018aa8:	0002      	movs	r2, r0
 8018aaa:	69fb      	ldr	r3, [r7, #28]
 8018aac:	1ad3      	subs	r3, r2, r3
 8018aae:	68ba      	ldr	r2, [r7, #8]
 8018ab0:	429a      	cmp	r2, r3
 8018ab2:	d302      	bcc.n	8018aba <I2C_IsErrorOccurred+0x5e>
 8018ab4:	68bb      	ldr	r3, [r7, #8]
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d144      	bne.n	8018b44 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	685a      	ldr	r2, [r3, #4]
 8018ac0:	2380      	movs	r3, #128	@ 0x80
 8018ac2:	01db      	lsls	r3, r3, #7
 8018ac4:	4013      	ands	r3, r2
 8018ac6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8018ac8:	2013      	movs	r0, #19
 8018aca:	183b      	adds	r3, r7, r0
 8018acc:	68fa      	ldr	r2, [r7, #12]
 8018ace:	2142      	movs	r1, #66	@ 0x42
 8018ad0:	5c52      	ldrb	r2, [r2, r1]
 8018ad2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	699a      	ldr	r2, [r3, #24]
 8018ada:	2380      	movs	r3, #128	@ 0x80
 8018adc:	021b      	lsls	r3, r3, #8
 8018ade:	401a      	ands	r2, r3
 8018ae0:	2380      	movs	r3, #128	@ 0x80
 8018ae2:	021b      	lsls	r3, r3, #8
 8018ae4:	429a      	cmp	r2, r3
 8018ae6:	d126      	bne.n	8018b36 <I2C_IsErrorOccurred+0xda>
 8018ae8:	697a      	ldr	r2, [r7, #20]
 8018aea:	2380      	movs	r3, #128	@ 0x80
 8018aec:	01db      	lsls	r3, r3, #7
 8018aee:	429a      	cmp	r2, r3
 8018af0:	d021      	beq.n	8018b36 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8018af2:	183b      	adds	r3, r7, r0
 8018af4:	781b      	ldrb	r3, [r3, #0]
 8018af6:	2b20      	cmp	r3, #32
 8018af8:	d01d      	beq.n	8018b36 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	685a      	ldr	r2, [r3, #4]
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	2180      	movs	r1, #128	@ 0x80
 8018b06:	01c9      	lsls	r1, r1, #7
 8018b08:	430a      	orrs	r2, r1
 8018b0a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8018b0c:	f7fc f81a 	bl	8014b44 <HAL_GetTick>
 8018b10:	0003      	movs	r3, r0
 8018b12:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018b14:	e00f      	b.n	8018b36 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8018b16:	f7fc f815 	bl	8014b44 <HAL_GetTick>
 8018b1a:	0002      	movs	r2, r0
 8018b1c:	69fb      	ldr	r3, [r7, #28]
 8018b1e:	1ad3      	subs	r3, r2, r3
 8018b20:	2b19      	cmp	r3, #25
 8018b22:	d908      	bls.n	8018b36 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8018b24:	6a3b      	ldr	r3, [r7, #32]
 8018b26:	2220      	movs	r2, #32
 8018b28:	4313      	orrs	r3, r2
 8018b2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8018b2c:	2327      	movs	r3, #39	@ 0x27
 8018b2e:	18fb      	adds	r3, r7, r3
 8018b30:	2201      	movs	r2, #1
 8018b32:	701a      	strb	r2, [r3, #0]

              break;
 8018b34:	e006      	b.n	8018b44 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	699b      	ldr	r3, [r3, #24]
 8018b3c:	2220      	movs	r2, #32
 8018b3e:	4013      	ands	r3, r2
 8018b40:	2b20      	cmp	r3, #32
 8018b42:	d1e8      	bne.n	8018b16 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	699b      	ldr	r3, [r3, #24]
 8018b4a:	2220      	movs	r2, #32
 8018b4c:	4013      	ands	r3, r2
 8018b4e:	2b20      	cmp	r3, #32
 8018b50:	d004      	beq.n	8018b5c <I2C_IsErrorOccurred+0x100>
 8018b52:	2327      	movs	r3, #39	@ 0x27
 8018b54:	18fb      	adds	r3, r7, r3
 8018b56:	781b      	ldrb	r3, [r3, #0]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d09b      	beq.n	8018a94 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8018b5c:	2327      	movs	r3, #39	@ 0x27
 8018b5e:	18fb      	adds	r3, r7, r3
 8018b60:	781b      	ldrb	r3, [r3, #0]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d103      	bne.n	8018b6e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	2220      	movs	r2, #32
 8018b6c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8018b6e:	6a3b      	ldr	r3, [r7, #32]
 8018b70:	2204      	movs	r2, #4
 8018b72:	4313      	orrs	r3, r2
 8018b74:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8018b76:	2327      	movs	r3, #39	@ 0x27
 8018b78:	18fb      	adds	r3, r7, r3
 8018b7a:	2201      	movs	r2, #1
 8018b7c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	699b      	ldr	r3, [r3, #24]
 8018b84:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8018b86:	69ba      	ldr	r2, [r7, #24]
 8018b88:	2380      	movs	r3, #128	@ 0x80
 8018b8a:	005b      	lsls	r3, r3, #1
 8018b8c:	4013      	ands	r3, r2
 8018b8e:	d00c      	beq.n	8018baa <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8018b90:	6a3b      	ldr	r3, [r7, #32]
 8018b92:	2201      	movs	r2, #1
 8018b94:	4313      	orrs	r3, r2
 8018b96:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	2280      	movs	r2, #128	@ 0x80
 8018b9e:	0052      	lsls	r2, r2, #1
 8018ba0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018ba2:	2327      	movs	r3, #39	@ 0x27
 8018ba4:	18fb      	adds	r3, r7, r3
 8018ba6:	2201      	movs	r2, #1
 8018ba8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8018baa:	69ba      	ldr	r2, [r7, #24]
 8018bac:	2380      	movs	r3, #128	@ 0x80
 8018bae:	00db      	lsls	r3, r3, #3
 8018bb0:	4013      	ands	r3, r2
 8018bb2:	d00c      	beq.n	8018bce <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8018bb4:	6a3b      	ldr	r3, [r7, #32]
 8018bb6:	2208      	movs	r2, #8
 8018bb8:	4313      	orrs	r3, r2
 8018bba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	2280      	movs	r2, #128	@ 0x80
 8018bc2:	00d2      	lsls	r2, r2, #3
 8018bc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018bc6:	2327      	movs	r3, #39	@ 0x27
 8018bc8:	18fb      	adds	r3, r7, r3
 8018bca:	2201      	movs	r2, #1
 8018bcc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8018bce:	69ba      	ldr	r2, [r7, #24]
 8018bd0:	2380      	movs	r3, #128	@ 0x80
 8018bd2:	009b      	lsls	r3, r3, #2
 8018bd4:	4013      	ands	r3, r2
 8018bd6:	d00c      	beq.n	8018bf2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8018bd8:	6a3b      	ldr	r3, [r7, #32]
 8018bda:	2202      	movs	r2, #2
 8018bdc:	4313      	orrs	r3, r2
 8018bde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	2280      	movs	r2, #128	@ 0x80
 8018be6:	0092      	lsls	r2, r2, #2
 8018be8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018bea:	2327      	movs	r3, #39	@ 0x27
 8018bec:	18fb      	adds	r3, r7, r3
 8018bee:	2201      	movs	r2, #1
 8018bf0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8018bf2:	2327      	movs	r3, #39	@ 0x27
 8018bf4:	18fb      	adds	r3, r7, r3
 8018bf6:	781b      	ldrb	r3, [r3, #0]
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d01d      	beq.n	8018c38 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	0018      	movs	r0, r3
 8018c00:	f7ff fcd7 	bl	80185b2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	685a      	ldr	r2, [r3, #4]
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	490e      	ldr	r1, [pc, #56]	@ (8018c48 <I2C_IsErrorOccurred+0x1ec>)
 8018c10:	400a      	ands	r2, r1
 8018c12:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018c18:	6a3b      	ldr	r3, [r7, #32]
 8018c1a:	431a      	orrs	r2, r3
 8018c1c:	68fb      	ldr	r3, [r7, #12]
 8018c1e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	2241      	movs	r2, #65	@ 0x41
 8018c24:	2120      	movs	r1, #32
 8018c26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	2242      	movs	r2, #66	@ 0x42
 8018c2c:	2100      	movs	r1, #0
 8018c2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	2240      	movs	r2, #64	@ 0x40
 8018c34:	2100      	movs	r1, #0
 8018c36:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8018c38:	2327      	movs	r3, #39	@ 0x27
 8018c3a:	18fb      	adds	r3, r7, r3
 8018c3c:	781b      	ldrb	r3, [r3, #0]
}
 8018c3e:	0018      	movs	r0, r3
 8018c40:	46bd      	mov	sp, r7
 8018c42:	b00a      	add	sp, #40	@ 0x28
 8018c44:	bd80      	pop	{r7, pc}
 8018c46:	46c0      	nop			@ (mov r8, r8)
 8018c48:	fe00e800 	.word	0xfe00e800

08018c4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8018c4c:	b590      	push	{r4, r7, lr}
 8018c4e:	b087      	sub	sp, #28
 8018c50:	af00      	add	r7, sp, #0
 8018c52:	60f8      	str	r0, [r7, #12]
 8018c54:	0008      	movs	r0, r1
 8018c56:	0011      	movs	r1, r2
 8018c58:	607b      	str	r3, [r7, #4]
 8018c5a:	240a      	movs	r4, #10
 8018c5c:	193b      	adds	r3, r7, r4
 8018c5e:	1c02      	adds	r2, r0, #0
 8018c60:	801a      	strh	r2, [r3, #0]
 8018c62:	2009      	movs	r0, #9
 8018c64:	183b      	adds	r3, r7, r0
 8018c66:	1c0a      	adds	r2, r1, #0
 8018c68:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018c6a:	193b      	adds	r3, r7, r4
 8018c6c:	881b      	ldrh	r3, [r3, #0]
 8018c6e:	059b      	lsls	r3, r3, #22
 8018c70:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018c72:	183b      	adds	r3, r7, r0
 8018c74:	781b      	ldrb	r3, [r3, #0]
 8018c76:	0419      	lsls	r1, r3, #16
 8018c78:	23ff      	movs	r3, #255	@ 0xff
 8018c7a:	041b      	lsls	r3, r3, #16
 8018c7c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018c7e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c86:	4313      	orrs	r3, r2
 8018c88:	005b      	lsls	r3, r3, #1
 8018c8a:	085b      	lsrs	r3, r3, #1
 8018c8c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	685b      	ldr	r3, [r3, #4]
 8018c94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018c96:	0d51      	lsrs	r1, r2, #21
 8018c98:	2280      	movs	r2, #128	@ 0x80
 8018c9a:	00d2      	lsls	r2, r2, #3
 8018c9c:	400a      	ands	r2, r1
 8018c9e:	4907      	ldr	r1, [pc, #28]	@ (8018cbc <I2C_TransferConfig+0x70>)
 8018ca0:	430a      	orrs	r2, r1
 8018ca2:	43d2      	mvns	r2, r2
 8018ca4:	401a      	ands	r2, r3
 8018ca6:	0011      	movs	r1, r2
 8018ca8:	68fb      	ldr	r3, [r7, #12]
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	697a      	ldr	r2, [r7, #20]
 8018cae:	430a      	orrs	r2, r1
 8018cb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018cb2:	46c0      	nop			@ (mov r8, r8)
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	b007      	add	sp, #28
 8018cb8:	bd90      	pop	{r4, r7, pc}
 8018cba:	46c0      	nop			@ (mov r8, r8)
 8018cbc:	03ff63ff 	.word	0x03ff63ff

08018cc0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018cc0:	b580      	push	{r7, lr}
 8018cc2:	b084      	sub	sp, #16
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	6078      	str	r0, [r7, #4]
 8018cc8:	000a      	movs	r2, r1
 8018cca:	1cbb      	adds	r3, r7, #2
 8018ccc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018cce:	2300      	movs	r3, #0
 8018cd0:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8018dd0 <I2C_Enable_IRQ+0x110>)
 8018cd8:	429a      	cmp	r2, r3
 8018cda:	d035      	beq.n	8018d48 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8018ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8018dd4 <I2C_Enable_IRQ+0x114>)
 8018ce2:	429a      	cmp	r2, r3
 8018ce4:	d030      	beq.n	8018d48 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8018cea:	4b3b      	ldr	r3, [pc, #236]	@ (8018dd8 <I2C_Enable_IRQ+0x118>)
 8018cec:	429a      	cmp	r2, r3
 8018cee:	d02b      	beq.n	8018d48 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018cf0:	1cbb      	adds	r3, r7, #2
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	5e9b      	ldrsh	r3, [r3, r2]
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	da03      	bge.n	8018d02 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018cfa:	68fb      	ldr	r3, [r7, #12]
 8018cfc:	22b8      	movs	r2, #184	@ 0xb8
 8018cfe:	4313      	orrs	r3, r2
 8018d00:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018d02:	1cbb      	adds	r3, r7, #2
 8018d04:	881b      	ldrh	r3, [r3, #0]
 8018d06:	2201      	movs	r2, #1
 8018d08:	4013      	ands	r3, r2
 8018d0a:	d003      	beq.n	8018d14 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	22f2      	movs	r2, #242	@ 0xf2
 8018d10:	4313      	orrs	r3, r2
 8018d12:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018d14:	1cbb      	adds	r3, r7, #2
 8018d16:	881b      	ldrh	r3, [r3, #0]
 8018d18:	2202      	movs	r2, #2
 8018d1a:	4013      	ands	r3, r2
 8018d1c:	d003      	beq.n	8018d26 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	22f4      	movs	r2, #244	@ 0xf4
 8018d22:	4313      	orrs	r3, r2
 8018d24:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018d26:	1cbb      	adds	r3, r7, #2
 8018d28:	881b      	ldrh	r3, [r3, #0]
 8018d2a:	2b10      	cmp	r3, #16
 8018d2c:	d103      	bne.n	8018d36 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	2290      	movs	r2, #144	@ 0x90
 8018d32:	4313      	orrs	r3, r2
 8018d34:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018d36:	1cbb      	adds	r3, r7, #2
 8018d38:	881b      	ldrh	r3, [r3, #0]
 8018d3a:	2b20      	cmp	r3, #32
 8018d3c:	d13c      	bne.n	8018db8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	2220      	movs	r2, #32
 8018d42:	4313      	orrs	r3, r2
 8018d44:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018d46:	e037      	b.n	8018db8 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018d48:	1cbb      	adds	r3, r7, #2
 8018d4a:	2200      	movs	r2, #0
 8018d4c:	5e9b      	ldrsh	r3, [r3, r2]
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	da03      	bge.n	8018d5a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	22b8      	movs	r2, #184	@ 0xb8
 8018d56:	4313      	orrs	r3, r2
 8018d58:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018d5a:	1cbb      	adds	r3, r7, #2
 8018d5c:	881b      	ldrh	r3, [r3, #0]
 8018d5e:	2201      	movs	r2, #1
 8018d60:	4013      	ands	r3, r2
 8018d62:	d003      	beq.n	8018d6c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	22f2      	movs	r2, #242	@ 0xf2
 8018d68:	4313      	orrs	r3, r2
 8018d6a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018d6c:	1cbb      	adds	r3, r7, #2
 8018d6e:	881b      	ldrh	r3, [r3, #0]
 8018d70:	2202      	movs	r2, #2
 8018d72:	4013      	ands	r3, r2
 8018d74:	d003      	beq.n	8018d7e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	22f4      	movs	r2, #244	@ 0xf4
 8018d7a:	4313      	orrs	r3, r2
 8018d7c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018d7e:	1cbb      	adds	r3, r7, #2
 8018d80:	881b      	ldrh	r3, [r3, #0]
 8018d82:	2b10      	cmp	r3, #16
 8018d84:	d103      	bne.n	8018d8e <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	2290      	movs	r2, #144	@ 0x90
 8018d8a:	4313      	orrs	r3, r2
 8018d8c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018d8e:	1cbb      	adds	r3, r7, #2
 8018d90:	881b      	ldrh	r3, [r3, #0]
 8018d92:	2b20      	cmp	r3, #32
 8018d94:	d103      	bne.n	8018d9e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	2260      	movs	r2, #96	@ 0x60
 8018d9a:	4313      	orrs	r3, r2
 8018d9c:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018da2:	4b0d      	ldr	r3, [pc, #52]	@ (8018dd8 <I2C_Enable_IRQ+0x118>)
 8018da4:	429a      	cmp	r2, r3
 8018da6:	d007      	beq.n	8018db8 <I2C_Enable_IRQ+0xf8>
 8018da8:	1cbb      	adds	r3, r7, #2
 8018daa:	881b      	ldrh	r3, [r3, #0]
 8018dac:	2b40      	cmp	r3, #64	@ 0x40
 8018dae:	d103      	bne.n	8018db8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	2240      	movs	r2, #64	@ 0x40
 8018db4:	4313      	orrs	r3, r2
 8018db6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	6819      	ldr	r1, [r3, #0]
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	68fa      	ldr	r2, [r7, #12]
 8018dc4:	430a      	orrs	r2, r1
 8018dc6:	601a      	str	r2, [r3, #0]
}
 8018dc8:	46c0      	nop			@ (mov r8, r8)
 8018dca:	46bd      	mov	sp, r7
 8018dcc:	b004      	add	sp, #16
 8018dce:	bd80      	pop	{r7, pc}
 8018dd0:	080174fd 	.word	0x080174fd
 8018dd4:	08017975 	.word	0x08017975
 8018dd8:	08017715 	.word	0x08017715

08018ddc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8018ddc:	b580      	push	{r7, lr}
 8018dde:	b084      	sub	sp, #16
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	6078      	str	r0, [r7, #4]
 8018de4:	000a      	movs	r2, r1
 8018de6:	1cbb      	adds	r3, r7, #2
 8018de8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8018dea:	2300      	movs	r3, #0
 8018dec:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8018dee:	1cbb      	adds	r3, r7, #2
 8018df0:	881b      	ldrh	r3, [r3, #0]
 8018df2:	2201      	movs	r2, #1
 8018df4:	4013      	ands	r3, r2
 8018df6:	d010      	beq.n	8018e1a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	2242      	movs	r2, #66	@ 0x42
 8018dfc:	4313      	orrs	r3, r2
 8018dfe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	2241      	movs	r2, #65	@ 0x41
 8018e04:	5c9b      	ldrb	r3, [r3, r2]
 8018e06:	b2db      	uxtb	r3, r3
 8018e08:	001a      	movs	r2, r3
 8018e0a:	2328      	movs	r3, #40	@ 0x28
 8018e0c:	4013      	ands	r3, r2
 8018e0e:	2b28      	cmp	r3, #40	@ 0x28
 8018e10:	d003      	beq.n	8018e1a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	22b0      	movs	r2, #176	@ 0xb0
 8018e16:	4313      	orrs	r3, r2
 8018e18:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8018e1a:	1cbb      	adds	r3, r7, #2
 8018e1c:	881b      	ldrh	r3, [r3, #0]
 8018e1e:	2202      	movs	r2, #2
 8018e20:	4013      	ands	r3, r2
 8018e22:	d010      	beq.n	8018e46 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	2244      	movs	r2, #68	@ 0x44
 8018e28:	4313      	orrs	r3, r2
 8018e2a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	2241      	movs	r2, #65	@ 0x41
 8018e30:	5c9b      	ldrb	r3, [r3, r2]
 8018e32:	b2db      	uxtb	r3, r3
 8018e34:	001a      	movs	r2, r3
 8018e36:	2328      	movs	r3, #40	@ 0x28
 8018e38:	4013      	ands	r3, r2
 8018e3a:	2b28      	cmp	r3, #40	@ 0x28
 8018e3c:	d003      	beq.n	8018e46 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	22b0      	movs	r2, #176	@ 0xb0
 8018e42:	4313      	orrs	r3, r2
 8018e44:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8018e46:	1cbb      	adds	r3, r7, #2
 8018e48:	2200      	movs	r2, #0
 8018e4a:	5e9b      	ldrsh	r3, [r3, r2]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	da03      	bge.n	8018e58 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	22b8      	movs	r2, #184	@ 0xb8
 8018e54:	4313      	orrs	r3, r2
 8018e56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8018e58:	1cbb      	adds	r3, r7, #2
 8018e5a:	881b      	ldrh	r3, [r3, #0]
 8018e5c:	2b10      	cmp	r3, #16
 8018e5e:	d103      	bne.n	8018e68 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	2290      	movs	r2, #144	@ 0x90
 8018e64:	4313      	orrs	r3, r2
 8018e66:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8018e68:	1cbb      	adds	r3, r7, #2
 8018e6a:	881b      	ldrh	r3, [r3, #0]
 8018e6c:	2b20      	cmp	r3, #32
 8018e6e:	d103      	bne.n	8018e78 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8018e70:	68fb      	ldr	r3, [r7, #12]
 8018e72:	2220      	movs	r2, #32
 8018e74:	4313      	orrs	r3, r2
 8018e76:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8018e78:	1cbb      	adds	r3, r7, #2
 8018e7a:	881b      	ldrh	r3, [r3, #0]
 8018e7c:	2b40      	cmp	r3, #64	@ 0x40
 8018e7e:	d103      	bne.n	8018e88 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	2240      	movs	r2, #64	@ 0x40
 8018e84:	4313      	orrs	r3, r2
 8018e86:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	681a      	ldr	r2, [r3, #0]
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	43d9      	mvns	r1, r3
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	400a      	ands	r2, r1
 8018e98:	601a      	str	r2, [r3, #0]
}
 8018e9a:	46c0      	nop			@ (mov r8, r8)
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	b004      	add	sp, #16
 8018ea0:	bd80      	pop	{r7, pc}
	...

08018ea4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b082      	sub	sp, #8
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
 8018eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	2241      	movs	r2, #65	@ 0x41
 8018eb2:	5c9b      	ldrb	r3, [r3, r2]
 8018eb4:	b2db      	uxtb	r3, r3
 8018eb6:	2b20      	cmp	r3, #32
 8018eb8:	d138      	bne.n	8018f2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	2240      	movs	r2, #64	@ 0x40
 8018ebe:	5c9b      	ldrb	r3, [r3, r2]
 8018ec0:	2b01      	cmp	r3, #1
 8018ec2:	d101      	bne.n	8018ec8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8018ec4:	2302      	movs	r3, #2
 8018ec6:	e032      	b.n	8018f2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	2240      	movs	r2, #64	@ 0x40
 8018ecc:	2101      	movs	r1, #1
 8018ece:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	2241      	movs	r2, #65	@ 0x41
 8018ed4:	2124      	movs	r1, #36	@ 0x24
 8018ed6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	681a      	ldr	r2, [r3, #0]
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	2101      	movs	r1, #1
 8018ee4:	438a      	bics	r2, r1
 8018ee6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	681a      	ldr	r2, [r3, #0]
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	4911      	ldr	r1, [pc, #68]	@ (8018f38 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8018ef4:	400a      	ands	r2, r1
 8018ef6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	6819      	ldr	r1, [r3, #0]
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	683a      	ldr	r2, [r7, #0]
 8018f04:	430a      	orrs	r2, r1
 8018f06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	681a      	ldr	r2, [r3, #0]
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	2101      	movs	r1, #1
 8018f14:	430a      	orrs	r2, r1
 8018f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	2241      	movs	r2, #65	@ 0x41
 8018f1c:	2120      	movs	r1, #32
 8018f1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	2240      	movs	r2, #64	@ 0x40
 8018f24:	2100      	movs	r1, #0
 8018f26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018f28:	2300      	movs	r3, #0
 8018f2a:	e000      	b.n	8018f2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018f2c:	2302      	movs	r3, #2
  }
}
 8018f2e:	0018      	movs	r0, r3
 8018f30:	46bd      	mov	sp, r7
 8018f32:	b002      	add	sp, #8
 8018f34:	bd80      	pop	{r7, pc}
 8018f36:	46c0      	nop			@ (mov r8, r8)
 8018f38:	ffffefff 	.word	0xffffefff

08018f3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	b084      	sub	sp, #16
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	6078      	str	r0, [r7, #4]
 8018f44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	2241      	movs	r2, #65	@ 0x41
 8018f4a:	5c9b      	ldrb	r3, [r3, r2]
 8018f4c:	b2db      	uxtb	r3, r3
 8018f4e:	2b20      	cmp	r3, #32
 8018f50:	d139      	bne.n	8018fc6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	2240      	movs	r2, #64	@ 0x40
 8018f56:	5c9b      	ldrb	r3, [r3, r2]
 8018f58:	2b01      	cmp	r3, #1
 8018f5a:	d101      	bne.n	8018f60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8018f5c:	2302      	movs	r3, #2
 8018f5e:	e033      	b.n	8018fc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	2240      	movs	r2, #64	@ 0x40
 8018f64:	2101      	movs	r1, #1
 8018f66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	2241      	movs	r2, #65	@ 0x41
 8018f6c:	2124      	movs	r1, #36	@ 0x24
 8018f6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	681a      	ldr	r2, [r3, #0]
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	2101      	movs	r1, #1
 8018f7c:	438a      	bics	r2, r1
 8018f7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8018f88:	68fb      	ldr	r3, [r7, #12]
 8018f8a:	4a11      	ldr	r2, [pc, #68]	@ (8018fd0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8018f8c:	4013      	ands	r3, r2
 8018f8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018f90:	683b      	ldr	r3, [r7, #0]
 8018f92:	021b      	lsls	r3, r3, #8
 8018f94:	68fa      	ldr	r2, [r7, #12]
 8018f96:	4313      	orrs	r3, r2
 8018f98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	68fa      	ldr	r2, [r7, #12]
 8018fa0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	681a      	ldr	r2, [r3, #0]
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	2101      	movs	r1, #1
 8018fae:	430a      	orrs	r2, r1
 8018fb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	2241      	movs	r2, #65	@ 0x41
 8018fb6:	2120      	movs	r1, #32
 8018fb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	2240      	movs	r2, #64	@ 0x40
 8018fbe:	2100      	movs	r1, #0
 8018fc0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	e000      	b.n	8018fc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8018fc6:	2302      	movs	r3, #2
  }
}
 8018fc8:	0018      	movs	r0, r3
 8018fca:	46bd      	mov	sp, r7
 8018fcc:	b004      	add	sp, #16
 8018fce:	bd80      	pop	{r7, pc}
 8018fd0:	fffff0ff 	.word	0xfffff0ff

08018fd4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8018fd4:	b580      	push	{r7, lr}
 8018fd6:	b088      	sub	sp, #32
 8018fd8:	af00      	add	r7, sp, #0
 8018fda:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d101      	bne.n	8018fe6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8018fe2:	2301      	movs	r3, #1
 8018fe4:	e0e1      	b.n	80191aa <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	2235      	movs	r2, #53	@ 0x35
 8018fea:	5c9b      	ldrb	r3, [r3, r2]
 8018fec:	b2db      	uxtb	r3, r3
 8018fee:	2b00      	cmp	r3, #0
 8018ff0:	d107      	bne.n	8019002 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	2234      	movs	r2, #52	@ 0x34
 8018ff6:	2100      	movs	r1, #0
 8018ff8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	0018      	movs	r0, r3
 8018ffe:	f7f3 fe47 	bl	800cc90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	2235      	movs	r2, #53	@ 0x35
 8019006:	2102      	movs	r1, #2
 8019008:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	69da      	ldr	r2, [r3, #28]
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	4967      	ldr	r1, [pc, #412]	@ (80191b4 <HAL_I2S_Init+0x1e0>)
 8019016:	400a      	ands	r2, r1
 8019018:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	681b      	ldr	r3, [r3, #0]
 801901e:	2202      	movs	r2, #2
 8019020:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	695b      	ldr	r3, [r3, #20]
 8019026:	2b02      	cmp	r3, #2
 8019028:	d073      	beq.n	8019112 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	68db      	ldr	r3, [r3, #12]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d102      	bne.n	8019038 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8019032:	2310      	movs	r3, #16
 8019034:	617b      	str	r3, [r7, #20]
 8019036:	e001      	b.n	801903c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8019038:	2320      	movs	r3, #32
 801903a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	689b      	ldr	r3, [r3, #8]
 8019040:	2b20      	cmp	r3, #32
 8019042:	d802      	bhi.n	801904a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8019044:	697b      	ldr	r3, [r7, #20]
 8019046:	005b      	lsls	r3, r3, #1
 8019048:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 801904a:	f002 fed3 	bl	801bdf4 <HAL_RCC_GetSysClockFreq>
 801904e:	0003      	movs	r3, r0
 8019050:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	691a      	ldr	r2, [r3, #16]
 8019056:	2380      	movs	r3, #128	@ 0x80
 8019058:	009b      	lsls	r3, r3, #2
 801905a:	429a      	cmp	r2, r3
 801905c:	d131      	bne.n	80190c2 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	68db      	ldr	r3, [r3, #12]
 8019062:	2b00      	cmp	r3, #0
 8019064:	d016      	beq.n	8019094 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8019066:	697b      	ldr	r3, [r7, #20]
 8019068:	009b      	lsls	r3, r3, #2
 801906a:	0019      	movs	r1, r3
 801906c:	68f8      	ldr	r0, [r7, #12]
 801906e:	f7e7 f899 	bl	80001a4 <__udivsi3>
 8019072:	0003      	movs	r3, r0
 8019074:	001a      	movs	r2, r3
 8019076:	0013      	movs	r3, r2
 8019078:	009b      	lsls	r3, r3, #2
 801907a:	189b      	adds	r3, r3, r2
 801907c:	005b      	lsls	r3, r3, #1
 801907e:	001a      	movs	r2, r3
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	695b      	ldr	r3, [r3, #20]
 8019084:	0019      	movs	r1, r3
 8019086:	0010      	movs	r0, r2
 8019088:	f7e7 f88c 	bl	80001a4 <__udivsi3>
 801908c:	0003      	movs	r3, r0
 801908e:	3305      	adds	r3, #5
 8019090:	613b      	str	r3, [r7, #16]
 8019092:	e02a      	b.n	80190ea <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8019094:	697b      	ldr	r3, [r7, #20]
 8019096:	00db      	lsls	r3, r3, #3
 8019098:	0019      	movs	r1, r3
 801909a:	68f8      	ldr	r0, [r7, #12]
 801909c:	f7e7 f882 	bl	80001a4 <__udivsi3>
 80190a0:	0003      	movs	r3, r0
 80190a2:	001a      	movs	r2, r3
 80190a4:	0013      	movs	r3, r2
 80190a6:	009b      	lsls	r3, r3, #2
 80190a8:	189b      	adds	r3, r3, r2
 80190aa:	005b      	lsls	r3, r3, #1
 80190ac:	001a      	movs	r2, r3
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	695b      	ldr	r3, [r3, #20]
 80190b2:	0019      	movs	r1, r3
 80190b4:	0010      	movs	r0, r2
 80190b6:	f7e7 f875 	bl	80001a4 <__udivsi3>
 80190ba:	0003      	movs	r3, r0
 80190bc:	3305      	adds	r3, #5
 80190be:	613b      	str	r3, [r7, #16]
 80190c0:	e013      	b.n	80190ea <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80190c2:	6979      	ldr	r1, [r7, #20]
 80190c4:	68f8      	ldr	r0, [r7, #12]
 80190c6:	f7e7 f86d 	bl	80001a4 <__udivsi3>
 80190ca:	0003      	movs	r3, r0
 80190cc:	001a      	movs	r2, r3
 80190ce:	0013      	movs	r3, r2
 80190d0:	009b      	lsls	r3, r3, #2
 80190d2:	189b      	adds	r3, r3, r2
 80190d4:	005b      	lsls	r3, r3, #1
 80190d6:	001a      	movs	r2, r3
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	695b      	ldr	r3, [r3, #20]
 80190dc:	0019      	movs	r1, r3
 80190de:	0010      	movs	r0, r2
 80190e0:	f7e7 f860 	bl	80001a4 <__udivsi3>
 80190e4:	0003      	movs	r3, r0
 80190e6:	3305      	adds	r3, #5
 80190e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80190ea:	693b      	ldr	r3, [r7, #16]
 80190ec:	210a      	movs	r1, #10
 80190ee:	0018      	movs	r0, r3
 80190f0:	f7e7 f858 	bl	80001a4 <__udivsi3>
 80190f4:	0003      	movs	r3, r0
 80190f6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80190f8:	693b      	ldr	r3, [r7, #16]
 80190fa:	2201      	movs	r2, #1
 80190fc:	4013      	ands	r3, r2
 80190fe:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8019100:	693a      	ldr	r2, [r7, #16]
 8019102:	69bb      	ldr	r3, [r7, #24]
 8019104:	1ad3      	subs	r3, r2, r3
 8019106:	085b      	lsrs	r3, r3, #1
 8019108:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 801910a:	69bb      	ldr	r3, [r7, #24]
 801910c:	021b      	lsls	r3, r3, #8
 801910e:	61bb      	str	r3, [r7, #24]
 8019110:	e003      	b.n	801911a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8019112:	2302      	movs	r3, #2
 8019114:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8019116:	2300      	movs	r3, #0
 8019118:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 801911a:	69fb      	ldr	r3, [r7, #28]
 801911c:	2b01      	cmp	r3, #1
 801911e:	d902      	bls.n	8019126 <HAL_I2S_Init+0x152>
 8019120:	69fb      	ldr	r3, [r7, #28]
 8019122:	2bff      	cmp	r3, #255	@ 0xff
 8019124:	d907      	bls.n	8019136 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801912a:	2210      	movs	r2, #16
 801912c:	431a      	orrs	r2, r3
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8019132:	2301      	movs	r3, #1
 8019134:	e039      	b.n	80191aa <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	691a      	ldr	r2, [r3, #16]
 801913a:	69bb      	ldr	r3, [r7, #24]
 801913c:	431a      	orrs	r2, r3
 801913e:	0011      	movs	r1, r2
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	69fa      	ldr	r2, [r7, #28]
 8019146:	430a      	orrs	r2, r1
 8019148:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	69db      	ldr	r3, [r3, #28]
 8019150:	4a18      	ldr	r2, [pc, #96]	@ (80191b4 <HAL_I2S_Init+0x1e0>)
 8019152:	401a      	ands	r2, r3
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	6859      	ldr	r1, [r3, #4]
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	689b      	ldr	r3, [r3, #8]
 801915c:	4319      	orrs	r1, r3
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	68db      	ldr	r3, [r3, #12]
 8019162:	4319      	orrs	r1, r3
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	699b      	ldr	r3, [r3, #24]
 8019168:	430b      	orrs	r3, r1
 801916a:	431a      	orrs	r2, r3
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	2180      	movs	r1, #128	@ 0x80
 8019172:	0109      	lsls	r1, r1, #4
 8019174:	430a      	orrs	r2, r1
 8019176:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	689b      	ldr	r3, [r3, #8]
 801917c:	2b30      	cmp	r3, #48	@ 0x30
 801917e:	d003      	beq.n	8019188 <HAL_I2S_Init+0x1b4>
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	689b      	ldr	r3, [r3, #8]
 8019184:	2bb0      	cmp	r3, #176	@ 0xb0
 8019186:	d108      	bne.n	801919a <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	681b      	ldr	r3, [r3, #0]
 801918c:	69da      	ldr	r2, [r3, #28]
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	2180      	movs	r1, #128	@ 0x80
 8019194:	0149      	lsls	r1, r1, #5
 8019196:	430a      	orrs	r2, r1
 8019198:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	2200      	movs	r2, #0
 801919e:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	2235      	movs	r2, #53	@ 0x35
 80191a4:	2101      	movs	r1, #1
 80191a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80191a8:	2300      	movs	r3, #0
}
 80191aa:	0018      	movs	r0, r3
 80191ac:	46bd      	mov	sp, r7
 80191ae:	b008      	add	sp, #32
 80191b0:	bd80      	pop	{r7, pc}
 80191b2:	46c0      	nop			@ (mov r8, r8)
 80191b4:	fffff040 	.word	0xfffff040

080191b8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80191b8:	b580      	push	{r7, lr}
 80191ba:	b086      	sub	sp, #24
 80191bc:	af00      	add	r7, sp, #0
 80191be:	60f8      	str	r0, [r7, #12]
 80191c0:	60b9      	str	r1, [r7, #8]
 80191c2:	1dbb      	adds	r3, r7, #6
 80191c4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80191c6:	68bb      	ldr	r3, [r7, #8]
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d003      	beq.n	80191d4 <HAL_I2S_Receive_DMA+0x1c>
 80191cc:	1dbb      	adds	r3, r7, #6
 80191ce:	881b      	ldrh	r3, [r3, #0]
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d101      	bne.n	80191d8 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80191d4:	2301      	movs	r3, #1
 80191d6:	e0a6      	b.n	8019326 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80191d8:	68fb      	ldr	r3, [r7, #12]
 80191da:	2234      	movs	r2, #52	@ 0x34
 80191dc:	5c9b      	ldrb	r3, [r3, r2]
 80191de:	b2db      	uxtb	r3, r3
 80191e0:	2b01      	cmp	r3, #1
 80191e2:	d101      	bne.n	80191e8 <HAL_I2S_Receive_DMA+0x30>
 80191e4:	2302      	movs	r3, #2
 80191e6:	e09e      	b.n	8019326 <HAL_I2S_Receive_DMA+0x16e>
 80191e8:	68fb      	ldr	r3, [r7, #12]
 80191ea:	2234      	movs	r2, #52	@ 0x34
 80191ec:	2101      	movs	r1, #1
 80191ee:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	2235      	movs	r2, #53	@ 0x35
 80191f4:	5c9b      	ldrb	r3, [r3, r2]
 80191f6:	b2db      	uxtb	r3, r3
 80191f8:	2b01      	cmp	r3, #1
 80191fa:	d005      	beq.n	8019208 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	2234      	movs	r2, #52	@ 0x34
 8019200:	2100      	movs	r1, #0
 8019202:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8019204:	2302      	movs	r3, #2
 8019206:	e08e      	b.n	8019326 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	2235      	movs	r2, #53	@ 0x35
 801920c:	2104      	movs	r1, #4
 801920e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	2200      	movs	r2, #0
 8019214:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	68ba      	ldr	r2, [r7, #8]
 801921a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	69db      	ldr	r3, [r3, #28]
 8019222:	2207      	movs	r2, #7
 8019224:	4013      	ands	r3, r2
 8019226:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8019228:	697b      	ldr	r3, [r7, #20]
 801922a:	2b03      	cmp	r3, #3
 801922c:	d002      	beq.n	8019234 <HAL_I2S_Receive_DMA+0x7c>
 801922e:	697b      	ldr	r3, [r7, #20]
 8019230:	2b05      	cmp	r3, #5
 8019232:	d10c      	bne.n	801924e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8019234:	1dbb      	adds	r3, r7, #6
 8019236:	881b      	ldrh	r3, [r3, #0]
 8019238:	18db      	adds	r3, r3, r3
 801923a:	b29a      	uxth	r2, r3
 801923c:	68fb      	ldr	r3, [r7, #12]
 801923e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8019240:	1dbb      	adds	r3, r7, #6
 8019242:	881b      	ldrh	r3, [r3, #0]
 8019244:	18db      	adds	r3, r3, r3
 8019246:	b29a      	uxth	r2, r3
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 801924c:	e007      	b.n	801925e <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	1dba      	adds	r2, r7, #6
 8019252:	8812      	ldrh	r2, [r2, #0]
 8019254:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	1dba      	adds	r2, r7, #6
 801925a:	8812      	ldrh	r2, [r2, #0]
 801925c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019262:	4a33      	ldr	r2, [pc, #204]	@ (8019330 <HAL_I2S_Receive_DMA+0x178>)
 8019264:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801926a:	4a32      	ldr	r2, [pc, #200]	@ (8019334 <HAL_I2S_Receive_DMA+0x17c>)
 801926c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019272:	4a31      	ldr	r2, [pc, #196]	@ (8019338 <HAL_I2S_Receive_DMA+0x180>)
 8019274:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	69da      	ldr	r2, [r3, #28]
 801927c:	23c0      	movs	r3, #192	@ 0xc0
 801927e:	009b      	lsls	r3, r3, #2
 8019280:	401a      	ands	r2, r3
 8019282:	23c0      	movs	r3, #192	@ 0xc0
 8019284:	009b      	lsls	r3, r3, #2
 8019286:	429a      	cmp	r2, r3
 8019288:	d10a      	bne.n	80192a0 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 801928a:	2300      	movs	r3, #0
 801928c:	613b      	str	r3, [r7, #16]
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	68db      	ldr	r3, [r3, #12]
 8019294:	613b      	str	r3, [r7, #16]
 8019296:	68fb      	ldr	r3, [r7, #12]
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	689b      	ldr	r3, [r3, #8]
 801929c:	613b      	str	r3, [r7, #16]
 801929e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80192a0:	68fb      	ldr	r3, [r7, #12]
 80192a2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	330c      	adds	r3, #12
 80192aa:	0019      	movs	r1, r3
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192b0:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80192b6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80192b8:	f7fc f996 	bl	80155e8 <HAL_DMA_Start_IT>
 80192bc:	1e03      	subs	r3, r0, #0
 80192be:	d00f      	beq.n	80192e0 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80192c0:	68fb      	ldr	r3, [r7, #12]
 80192c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192c4:	2208      	movs	r2, #8
 80192c6:	431a      	orrs	r2, r3
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	2235      	movs	r2, #53	@ 0x35
 80192d0:	2101      	movs	r1, #1
 80192d2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80192d4:	68fb      	ldr	r3, [r7, #12]
 80192d6:	2234      	movs	r2, #52	@ 0x34
 80192d8:	2100      	movs	r1, #0
 80192da:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80192dc:	2301      	movs	r3, #1
 80192de:	e022      	b.n	8019326 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	69da      	ldr	r2, [r3, #28]
 80192e6:	2380      	movs	r3, #128	@ 0x80
 80192e8:	00db      	lsls	r3, r3, #3
 80192ea:	4013      	ands	r3, r2
 80192ec:	d108      	bne.n	8019300 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	69da      	ldr	r2, [r3, #28]
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	2180      	movs	r1, #128	@ 0x80
 80192fa:	00c9      	lsls	r1, r1, #3
 80192fc:	430a      	orrs	r2, r1
 80192fe:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	685b      	ldr	r3, [r3, #4]
 8019306:	2201      	movs	r2, #1
 8019308:	4013      	ands	r3, r2
 801930a:	d107      	bne.n	801931c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	685a      	ldr	r2, [r3, #4]
 8019312:	68fb      	ldr	r3, [r7, #12]
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	2101      	movs	r1, #1
 8019318:	430a      	orrs	r2, r1
 801931a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	2234      	movs	r2, #52	@ 0x34
 8019320:	2100      	movs	r1, #0
 8019322:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8019324:	2300      	movs	r3, #0
}
 8019326:	0018      	movs	r0, r3
 8019328:	46bd      	mov	sp, r7
 801932a:	b006      	add	sp, #24
 801932c:	bd80      	pop	{r7, pc}
 801932e:	46c0      	nop			@ (mov r8, r8)
 8019330:	08019519 	.word	0x08019519
 8019334:	080194d5 	.word	0x080194d5
 8019338:	08019537 	.word	0x08019537

0801933c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 801933c:	b580      	push	{r7, lr}
 801933e:	b086      	sub	sp, #24
 8019340:	af00      	add	r7, sp, #0
 8019342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8019344:	2317      	movs	r3, #23
 8019346:	18fb      	adds	r3, r7, r3
 8019348:	2200      	movs	r2, #0
 801934a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	685a      	ldr	r2, [r3, #4]
 8019350:	2380      	movs	r3, #128	@ 0x80
 8019352:	009b      	lsls	r3, r3, #2
 8019354:	429a      	cmp	r2, r3
 8019356:	d003      	beq.n	8019360 <HAL_I2S_DMAStop+0x24>
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	685b      	ldr	r3, [r3, #4]
 801935c:	2b00      	cmp	r3, #0
 801935e:	d158      	bne.n	8019412 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019364:	2b00      	cmp	r3, #0
 8019366:	d010      	beq.n	801938a <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801936c:	0018      	movs	r0, r3
 801936e:	f7fc f9a1 	bl	80156b4 <HAL_DMA_Abort>
 8019372:	1e03      	subs	r3, r0, #0
 8019374:	d009      	beq.n	801938a <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801937a:	2208      	movs	r2, #8
 801937c:	431a      	orrs	r2, r3
 801937e:	687b      	ldr	r3, [r7, #4]
 8019380:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8019382:	2317      	movs	r3, #23
 8019384:	18fb      	adds	r3, r7, r3
 8019386:	2201      	movs	r2, #1
 8019388:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 801938a:	6878      	ldr	r0, [r7, #4]
 801938c:	2364      	movs	r3, #100	@ 0x64
 801938e:	2201      	movs	r2, #1
 8019390:	2102      	movs	r1, #2
 8019392:	f000 f8f7 	bl	8019584 <I2S_WaitFlagStateUntilTimeout>
 8019396:	1e03      	subs	r3, r0, #0
 8019398:	d00d      	beq.n	80193b6 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801939e:	2201      	movs	r2, #1
 80193a0:	431a      	orrs	r2, r3
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	2235      	movs	r2, #53	@ 0x35
 80193aa:	2101      	movs	r1, #1
 80193ac:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80193ae:	2317      	movs	r3, #23
 80193b0:	18fb      	adds	r3, r7, r3
 80193b2:	2201      	movs	r2, #1
 80193b4:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80193b6:	6878      	ldr	r0, [r7, #4]
 80193b8:	2364      	movs	r3, #100	@ 0x64
 80193ba:	2200      	movs	r2, #0
 80193bc:	2180      	movs	r1, #128	@ 0x80
 80193be:	f000 f8e1 	bl	8019584 <I2S_WaitFlagStateUntilTimeout>
 80193c2:	1e03      	subs	r3, r0, #0
 80193c4:	d00d      	beq.n	80193e2 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80193ca:	2201      	movs	r2, #1
 80193cc:	431a      	orrs	r2, r3
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	2235      	movs	r2, #53	@ 0x35
 80193d6:	2101      	movs	r1, #1
 80193d8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80193da:	2317      	movs	r3, #23
 80193dc:	18fb      	adds	r3, r7, r3
 80193de:	2201      	movs	r2, #1
 80193e0:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	69da      	ldr	r2, [r3, #28]
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	4938      	ldr	r1, [pc, #224]	@ (80194d0 <HAL_I2S_DMAStop+0x194>)
 80193ee:	400a      	ands	r2, r1
 80193f0:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80193f2:	2300      	movs	r3, #0
 80193f4:	613b      	str	r3, [r7, #16]
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	689b      	ldr	r3, [r3, #8]
 80193fc:	613b      	str	r3, [r7, #16]
 80193fe:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	685a      	ldr	r2, [r3, #4]
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	2102      	movs	r1, #2
 801940c:	438a      	bics	r2, r1
 801940e:	605a      	str	r2, [r3, #4]
 8019410:	e053      	b.n	80194ba <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	685a      	ldr	r2, [r3, #4]
 8019416:	23c0      	movs	r3, #192	@ 0xc0
 8019418:	009b      	lsls	r3, r3, #2
 801941a:	429a      	cmp	r2, r3
 801941c:	d005      	beq.n	801942a <HAL_I2S_DMAStop+0xee>
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	685a      	ldr	r2, [r3, #4]
 8019422:	2380      	movs	r3, #128	@ 0x80
 8019424:	005b      	lsls	r3, r3, #1
 8019426:	429a      	cmp	r2, r3
 8019428:	d147      	bne.n	80194ba <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801942e:	2b00      	cmp	r3, #0
 8019430:	d010      	beq.n	8019454 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019436:	0018      	movs	r0, r3
 8019438:	f7fc f93c 	bl	80156b4 <HAL_DMA_Abort>
 801943c:	1e03      	subs	r3, r0, #0
 801943e:	d009      	beq.n	8019454 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019444:	2208      	movs	r2, #8
 8019446:	431a      	orrs	r2, r3
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801944c:	2317      	movs	r3, #23
 801944e:	18fb      	adds	r3, r7, r3
 8019450:	2201      	movs	r2, #1
 8019452:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	69da      	ldr	r2, [r3, #28]
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	491c      	ldr	r1, [pc, #112]	@ (80194d0 <HAL_I2S_DMAStop+0x194>)
 8019460:	400a      	ands	r2, r1
 8019462:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8019464:	2300      	movs	r3, #0
 8019466:	60fb      	str	r3, [r7, #12]
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	68db      	ldr	r3, [r3, #12]
 801946e:	60fb      	str	r3, [r7, #12]
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	681b      	ldr	r3, [r3, #0]
 8019474:	689b      	ldr	r3, [r3, #8]
 8019476:	60fb      	str	r3, [r7, #12]
 8019478:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	685a      	ldr	r2, [r3, #4]
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	2101      	movs	r1, #1
 8019486:	438a      	bics	r2, r1
 8019488:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	685a      	ldr	r2, [r3, #4]
 801948e:	2380      	movs	r3, #128	@ 0x80
 8019490:	005b      	lsls	r3, r3, #1
 8019492:	429a      	cmp	r2, r3
 8019494:	d10e      	bne.n	80194b4 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801949a:	2240      	movs	r2, #64	@ 0x40
 801949c:	431a      	orrs	r2, r3
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	2235      	movs	r2, #53	@ 0x35
 80194a6:	2101      	movs	r1, #1
 80194a8:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80194aa:	2317      	movs	r3, #23
 80194ac:	18fb      	adds	r3, r7, r3
 80194ae:	2201      	movs	r2, #1
 80194b0:	701a      	strb	r2, [r3, #0]
 80194b2:	e002      	b.n	80194ba <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	2235      	movs	r2, #53	@ 0x35
 80194be:	2101      	movs	r1, #1
 80194c0:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80194c2:	2317      	movs	r3, #23
 80194c4:	18fb      	adds	r3, r7, r3
 80194c6:	781b      	ldrb	r3, [r3, #0]
}
 80194c8:	0018      	movs	r0, r3
 80194ca:	46bd      	mov	sp, r7
 80194cc:	b006      	add	sp, #24
 80194ce:	bd80      	pop	{r7, pc}
 80194d0:	fffffbff 	.word	0xfffffbff

080194d4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80194d4:	b580      	push	{r7, lr}
 80194d6:	b084      	sub	sp, #16
 80194d8:	af00      	add	r7, sp, #0
 80194da:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80194e0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	69db      	ldr	r3, [r3, #28]
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d10e      	bne.n	8019508 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80194ea:	68fb      	ldr	r3, [r7, #12]
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	685a      	ldr	r2, [r3, #4]
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	2101      	movs	r1, #1
 80194f6:	438a      	bics	r2, r1
 80194f8:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	2200      	movs	r2, #0
 80194fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8019500:	68fb      	ldr	r3, [r7, #12]
 8019502:	2235      	movs	r2, #53	@ 0x35
 8019504:	2101      	movs	r1, #1
 8019506:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8019508:	68fb      	ldr	r3, [r7, #12]
 801950a:	0018      	movs	r0, r3
 801950c:	f7f8 fc08 	bl	8011d20 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8019510:	46c0      	nop			@ (mov r8, r8)
 8019512:	46bd      	mov	sp, r7
 8019514:	b004      	add	sp, #16
 8019516:	bd80      	pop	{r7, pc}

08019518 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8019518:	b580      	push	{r7, lr}
 801951a:	b084      	sub	sp, #16
 801951c:	af00      	add	r7, sp, #0
 801951e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019524:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	0018      	movs	r0, r3
 801952a:	f7f8 fbe7 	bl	8011cfc <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801952e:	46c0      	nop			@ (mov r8, r8)
 8019530:	46bd      	mov	sp, r7
 8019532:	b004      	add	sp, #16
 8019534:	bd80      	pop	{r7, pc}

08019536 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8019536:	b580      	push	{r7, lr}
 8019538:	b084      	sub	sp, #16
 801953a:	af00      	add	r7, sp, #0
 801953c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019542:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8019544:	68fb      	ldr	r3, [r7, #12]
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	685a      	ldr	r2, [r3, #4]
 801954a:	68fb      	ldr	r3, [r7, #12]
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	2103      	movs	r1, #3
 8019550:	438a      	bics	r2, r1
 8019552:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	2200      	movs	r2, #0
 8019558:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	2200      	movs	r2, #0
 801955e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	2235      	movs	r2, #53	@ 0x35
 8019564:	2101      	movs	r1, #1
 8019566:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801956c:	2208      	movs	r2, #8
 801956e:	431a      	orrs	r2, r3
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	0018      	movs	r0, r3
 8019578:	f7f8 fc20 	bl	8011dbc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801957c:	46c0      	nop			@ (mov r8, r8)
 801957e:	46bd      	mov	sp, r7
 8019580:	b004      	add	sp, #16
 8019582:	bd80      	pop	{r7, pc}

08019584 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8019584:	b580      	push	{r7, lr}
 8019586:	b086      	sub	sp, #24
 8019588:	af00      	add	r7, sp, #0
 801958a:	60f8      	str	r0, [r7, #12]
 801958c:	60b9      	str	r1, [r7, #8]
 801958e:	603b      	str	r3, [r7, #0]
 8019590:	1dfb      	adds	r3, r7, #7
 8019592:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8019594:	f7fb fad6 	bl	8014b44 <HAL_GetTick>
 8019598:	0003      	movs	r3, r0
 801959a:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 801959c:	e017      	b.n	80195ce <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 801959e:	683b      	ldr	r3, [r7, #0]
 80195a0:	3301      	adds	r3, #1
 80195a2:	d014      	beq.n	80195ce <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80195a4:	f7fb face 	bl	8014b44 <HAL_GetTick>
 80195a8:	0002      	movs	r2, r0
 80195aa:	697b      	ldr	r3, [r7, #20]
 80195ac:	1ad3      	subs	r3, r2, r3
 80195ae:	683a      	ldr	r2, [r7, #0]
 80195b0:	429a      	cmp	r2, r3
 80195b2:	d902      	bls.n	80195ba <I2S_WaitFlagStateUntilTimeout+0x36>
 80195b4:	683b      	ldr	r3, [r7, #0]
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d109      	bne.n	80195ce <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80195ba:	68fb      	ldr	r3, [r7, #12]
 80195bc:	2235      	movs	r2, #53	@ 0x35
 80195be:	2101      	movs	r1, #1
 80195c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	2234      	movs	r2, #52	@ 0x34
 80195c6:	2100      	movs	r1, #0
 80195c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80195ca:	2303      	movs	r3, #3
 80195cc:	e00f      	b.n	80195ee <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	689b      	ldr	r3, [r3, #8]
 80195d4:	68ba      	ldr	r2, [r7, #8]
 80195d6:	4013      	ands	r3, r2
 80195d8:	68ba      	ldr	r2, [r7, #8]
 80195da:	1ad3      	subs	r3, r2, r3
 80195dc:	425a      	negs	r2, r3
 80195de:	4153      	adcs	r3, r2
 80195e0:	b2db      	uxtb	r3, r3
 80195e2:	001a      	movs	r2, r3
 80195e4:	1dfb      	adds	r3, r7, #7
 80195e6:	781b      	ldrb	r3, [r3, #0]
 80195e8:	429a      	cmp	r2, r3
 80195ea:	d1d8      	bne.n	801959e <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80195ec:	2300      	movs	r3, #0
}
 80195ee:	0018      	movs	r0, r3
 80195f0:	46bd      	mov	sp, r7
 80195f2:	b006      	add	sp, #24
 80195f4:	bd80      	pop	{r7, pc}
	...

080195f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80195f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195fa:	b08b      	sub	sp, #44	@ 0x2c
 80195fc:	af06      	add	r7, sp, #24
 80195fe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	2b00      	cmp	r3, #0
 8019604:	d101      	bne.n	801960a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8019606:	2301      	movs	r3, #1
 8019608:	e0f0      	b.n	80197ec <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	4a79      	ldr	r2, [pc, #484]	@ (80197f4 <HAL_PCD_Init+0x1fc>)
 801960e:	5c9b      	ldrb	r3, [r3, r2]
 8019610:	b2db      	uxtb	r3, r3
 8019612:	2b00      	cmp	r3, #0
 8019614:	d108      	bne.n	8019628 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8019616:	687a      	ldr	r2, [r7, #4]
 8019618:	23aa      	movs	r3, #170	@ 0xaa
 801961a:	009b      	lsls	r3, r3, #2
 801961c:	2100      	movs	r1, #0
 801961e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	0018      	movs	r0, r3
 8019624:	f009 ff76 	bl	8023514 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	4a72      	ldr	r2, [pc, #456]	@ (80197f4 <HAL_PCD_Init+0x1fc>)
 801962c:	2103      	movs	r1, #3
 801962e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	0018      	movs	r0, r3
 8019636:	f005 ff1b 	bl	801f470 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801963a:	230f      	movs	r3, #15
 801963c:	18fb      	adds	r3, r7, r3
 801963e:	2200      	movs	r2, #0
 8019640:	701a      	strb	r2, [r3, #0]
 8019642:	e049      	b.n	80196d8 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8019644:	200f      	movs	r0, #15
 8019646:	183b      	adds	r3, r7, r0
 8019648:	781b      	ldrb	r3, [r3, #0]
 801964a:	6879      	ldr	r1, [r7, #4]
 801964c:	1c5a      	adds	r2, r3, #1
 801964e:	0013      	movs	r3, r2
 8019650:	009b      	lsls	r3, r3, #2
 8019652:	189b      	adds	r3, r3, r2
 8019654:	00db      	lsls	r3, r3, #3
 8019656:	18cb      	adds	r3, r1, r3
 8019658:	3301      	adds	r3, #1
 801965a:	2201      	movs	r2, #1
 801965c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801965e:	183b      	adds	r3, r7, r0
 8019660:	781b      	ldrb	r3, [r3, #0]
 8019662:	6879      	ldr	r1, [r7, #4]
 8019664:	1c5a      	adds	r2, r3, #1
 8019666:	0013      	movs	r3, r2
 8019668:	009b      	lsls	r3, r3, #2
 801966a:	189b      	adds	r3, r3, r2
 801966c:	00db      	lsls	r3, r3, #3
 801966e:	183a      	adds	r2, r7, r0
 8019670:	7812      	ldrb	r2, [r2, #0]
 8019672:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8019674:	183b      	adds	r3, r7, r0
 8019676:	781b      	ldrb	r3, [r3, #0]
 8019678:	6879      	ldr	r1, [r7, #4]
 801967a:	1c5a      	adds	r2, r3, #1
 801967c:	0013      	movs	r3, r2
 801967e:	009b      	lsls	r3, r3, #2
 8019680:	189b      	adds	r3, r3, r2
 8019682:	00db      	lsls	r3, r3, #3
 8019684:	18cb      	adds	r3, r1, r3
 8019686:	3303      	adds	r3, #3
 8019688:	2200      	movs	r2, #0
 801968a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801968c:	183b      	adds	r3, r7, r0
 801968e:	781a      	ldrb	r2, [r3, #0]
 8019690:	6879      	ldr	r1, [r7, #4]
 8019692:	0013      	movs	r3, r2
 8019694:	009b      	lsls	r3, r3, #2
 8019696:	189b      	adds	r3, r3, r2
 8019698:	00db      	lsls	r3, r3, #3
 801969a:	18cb      	adds	r3, r1, r3
 801969c:	3338      	adds	r3, #56	@ 0x38
 801969e:	2200      	movs	r2, #0
 80196a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80196a2:	183b      	adds	r3, r7, r0
 80196a4:	781a      	ldrb	r2, [r3, #0]
 80196a6:	6879      	ldr	r1, [r7, #4]
 80196a8:	0013      	movs	r3, r2
 80196aa:	009b      	lsls	r3, r3, #2
 80196ac:	189b      	adds	r3, r3, r2
 80196ae:	00db      	lsls	r3, r3, #3
 80196b0:	18cb      	adds	r3, r1, r3
 80196b2:	333c      	adds	r3, #60	@ 0x3c
 80196b4:	2200      	movs	r2, #0
 80196b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80196b8:	183b      	adds	r3, r7, r0
 80196ba:	781a      	ldrb	r2, [r3, #0]
 80196bc:	6879      	ldr	r1, [r7, #4]
 80196be:	0013      	movs	r3, r2
 80196c0:	009b      	lsls	r3, r3, #2
 80196c2:	189b      	adds	r3, r3, r2
 80196c4:	00db      	lsls	r3, r3, #3
 80196c6:	18cb      	adds	r3, r1, r3
 80196c8:	3340      	adds	r3, #64	@ 0x40
 80196ca:	2200      	movs	r2, #0
 80196cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80196ce:	183b      	adds	r3, r7, r0
 80196d0:	781a      	ldrb	r2, [r3, #0]
 80196d2:	183b      	adds	r3, r7, r0
 80196d4:	3201      	adds	r2, #1
 80196d6:	701a      	strb	r2, [r3, #0]
 80196d8:	210f      	movs	r1, #15
 80196da:	187b      	adds	r3, r7, r1
 80196dc:	781a      	ldrb	r2, [r3, #0]
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	685b      	ldr	r3, [r3, #4]
 80196e2:	429a      	cmp	r2, r3
 80196e4:	d3ae      	bcc.n	8019644 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80196e6:	187b      	adds	r3, r7, r1
 80196e8:	2200      	movs	r2, #0
 80196ea:	701a      	strb	r2, [r3, #0]
 80196ec:	e056      	b.n	801979c <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80196ee:	240f      	movs	r4, #15
 80196f0:	193b      	adds	r3, r7, r4
 80196f2:	781a      	ldrb	r2, [r3, #0]
 80196f4:	6878      	ldr	r0, [r7, #4]
 80196f6:	236a      	movs	r3, #106	@ 0x6a
 80196f8:	33ff      	adds	r3, #255	@ 0xff
 80196fa:	0019      	movs	r1, r3
 80196fc:	0013      	movs	r3, r2
 80196fe:	009b      	lsls	r3, r3, #2
 8019700:	189b      	adds	r3, r3, r2
 8019702:	00db      	lsls	r3, r3, #3
 8019704:	18c3      	adds	r3, r0, r3
 8019706:	185b      	adds	r3, r3, r1
 8019708:	2200      	movs	r2, #0
 801970a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801970c:	193b      	adds	r3, r7, r4
 801970e:	781a      	ldrb	r2, [r3, #0]
 8019710:	6878      	ldr	r0, [r7, #4]
 8019712:	23b4      	movs	r3, #180	@ 0xb4
 8019714:	0059      	lsls	r1, r3, #1
 8019716:	0013      	movs	r3, r2
 8019718:	009b      	lsls	r3, r3, #2
 801971a:	189b      	adds	r3, r3, r2
 801971c:	00db      	lsls	r3, r3, #3
 801971e:	18c3      	adds	r3, r0, r3
 8019720:	185b      	adds	r3, r3, r1
 8019722:	193a      	adds	r2, r7, r4
 8019724:	7812      	ldrb	r2, [r2, #0]
 8019726:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8019728:	193b      	adds	r3, r7, r4
 801972a:	781a      	ldrb	r2, [r3, #0]
 801972c:	6878      	ldr	r0, [r7, #4]
 801972e:	236c      	movs	r3, #108	@ 0x6c
 8019730:	33ff      	adds	r3, #255	@ 0xff
 8019732:	0019      	movs	r1, r3
 8019734:	0013      	movs	r3, r2
 8019736:	009b      	lsls	r3, r3, #2
 8019738:	189b      	adds	r3, r3, r2
 801973a:	00db      	lsls	r3, r3, #3
 801973c:	18c3      	adds	r3, r0, r3
 801973e:	185b      	adds	r3, r3, r1
 8019740:	2200      	movs	r2, #0
 8019742:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8019744:	193b      	adds	r3, r7, r4
 8019746:	781a      	ldrb	r2, [r3, #0]
 8019748:	6878      	ldr	r0, [r7, #4]
 801974a:	23bc      	movs	r3, #188	@ 0xbc
 801974c:	0059      	lsls	r1, r3, #1
 801974e:	0013      	movs	r3, r2
 8019750:	009b      	lsls	r3, r3, #2
 8019752:	189b      	adds	r3, r3, r2
 8019754:	00db      	lsls	r3, r3, #3
 8019756:	18c3      	adds	r3, r0, r3
 8019758:	185b      	adds	r3, r3, r1
 801975a:	2200      	movs	r2, #0
 801975c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801975e:	193b      	adds	r3, r7, r4
 8019760:	781a      	ldrb	r2, [r3, #0]
 8019762:	6878      	ldr	r0, [r7, #4]
 8019764:	23be      	movs	r3, #190	@ 0xbe
 8019766:	0059      	lsls	r1, r3, #1
 8019768:	0013      	movs	r3, r2
 801976a:	009b      	lsls	r3, r3, #2
 801976c:	189b      	adds	r3, r3, r2
 801976e:	00db      	lsls	r3, r3, #3
 8019770:	18c3      	adds	r3, r0, r3
 8019772:	185b      	adds	r3, r3, r1
 8019774:	2200      	movs	r2, #0
 8019776:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8019778:	193b      	adds	r3, r7, r4
 801977a:	781a      	ldrb	r2, [r3, #0]
 801977c:	6878      	ldr	r0, [r7, #4]
 801977e:	23c0      	movs	r3, #192	@ 0xc0
 8019780:	0059      	lsls	r1, r3, #1
 8019782:	0013      	movs	r3, r2
 8019784:	009b      	lsls	r3, r3, #2
 8019786:	189b      	adds	r3, r3, r2
 8019788:	00db      	lsls	r3, r3, #3
 801978a:	18c3      	adds	r3, r0, r3
 801978c:	185b      	adds	r3, r3, r1
 801978e:	2200      	movs	r2, #0
 8019790:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8019792:	193b      	adds	r3, r7, r4
 8019794:	781a      	ldrb	r2, [r3, #0]
 8019796:	193b      	adds	r3, r7, r4
 8019798:	3201      	adds	r2, #1
 801979a:	701a      	strb	r2, [r3, #0]
 801979c:	230f      	movs	r3, #15
 801979e:	18fb      	adds	r3, r7, r3
 80197a0:	781a      	ldrb	r2, [r3, #0]
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	685b      	ldr	r3, [r3, #4]
 80197a6:	429a      	cmp	r2, r3
 80197a8:	d3a1      	bcc.n	80196ee <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	6818      	ldr	r0, [r3, #0]
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	466a      	mov	r2, sp
 80197b2:	0011      	movs	r1, r2
 80197b4:	001a      	movs	r2, r3
 80197b6:	3210      	adds	r2, #16
 80197b8:	ca70      	ldmia	r2!, {r4, r5, r6}
 80197ba:	c170      	stmia	r1!, {r4, r5, r6}
 80197bc:	ca30      	ldmia	r2!, {r4, r5}
 80197be:	c130      	stmia	r1!, {r4, r5}
 80197c0:	6859      	ldr	r1, [r3, #4]
 80197c2:	689a      	ldr	r2, [r3, #8]
 80197c4:	68db      	ldr	r3, [r3, #12]
 80197c6:	f005 fe6d 	bl	801f4a4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	2224      	movs	r2, #36	@ 0x24
 80197ce:	2100      	movs	r1, #0
 80197d0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	4a07      	ldr	r2, [pc, #28]	@ (80197f4 <HAL_PCD_Init+0x1fc>)
 80197d6:	2101      	movs	r1, #1
 80197d8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	69db      	ldr	r3, [r3, #28]
 80197de:	2b01      	cmp	r3, #1
 80197e0:	d103      	bne.n	80197ea <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	0018      	movs	r0, r3
 80197e6:	f001 fd23 	bl	801b230 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80197ea:	2300      	movs	r3, #0
}
 80197ec:	0018      	movs	r0, r3
 80197ee:	46bd      	mov	sp, r7
 80197f0:	b005      	add	sp, #20
 80197f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197f4:	000002a9 	.word	0x000002a9

080197f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80197f8:	b580      	push	{r7, lr}
 80197fa:	b082      	sub	sp, #8
 80197fc:	af00      	add	r7, sp, #0
 80197fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8019800:	687a      	ldr	r2, [r7, #4]
 8019802:	23aa      	movs	r3, #170	@ 0xaa
 8019804:	009b      	lsls	r3, r3, #2
 8019806:	5cd3      	ldrb	r3, [r2, r3]
 8019808:	2b01      	cmp	r3, #1
 801980a:	d101      	bne.n	8019810 <HAL_PCD_Start+0x18>
 801980c:	2302      	movs	r3, #2
 801980e:	e014      	b.n	801983a <HAL_PCD_Start+0x42>
 8019810:	687a      	ldr	r2, [r7, #4]
 8019812:	23aa      	movs	r3, #170	@ 0xaa
 8019814:	009b      	lsls	r3, r3, #2
 8019816:	2101      	movs	r1, #1
 8019818:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	0018      	movs	r0, r3
 8019820:	f005 fe10 	bl	801f444 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	681b      	ldr	r3, [r3, #0]
 8019828:	0018      	movs	r0, r3
 801982a:	f007 fe13 	bl	8021454 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801982e:	687a      	ldr	r2, [r7, #4]
 8019830:	23aa      	movs	r3, #170	@ 0xaa
 8019832:	009b      	lsls	r3, r3, #2
 8019834:	2100      	movs	r1, #0
 8019836:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019838:	2300      	movs	r3, #0
}
 801983a:	0018      	movs	r0, r3
 801983c:	46bd      	mov	sp, r7
 801983e:	b002      	add	sp, #8
 8019840:	bd80      	pop	{r7, pc}
	...

08019844 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8019844:	b580      	push	{r7, lr}
 8019846:	b084      	sub	sp, #16
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	0018      	movs	r0, r3
 8019852:	f007 fe15 	bl	8021480 <USB_ReadInterrupts>
 8019856:	0003      	movs	r3, r0
 8019858:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 801985a:	68fa      	ldr	r2, [r7, #12]
 801985c:	2380      	movs	r3, #128	@ 0x80
 801985e:	021b      	lsls	r3, r3, #8
 8019860:	4013      	ands	r3, r2
 8019862:	d004      	beq.n	801986e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	0018      	movs	r0, r3
 8019868:	f000 fb62 	bl	8019f30 <PCD_EP_ISR_Handler>

    return;
 801986c:	e11d      	b.n	8019aaa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 801986e:	68fa      	ldr	r2, [r7, #12]
 8019870:	2380      	movs	r3, #128	@ 0x80
 8019872:	00db      	lsls	r3, r3, #3
 8019874:	4013      	ands	r3, r2
 8019876:	d015      	beq.n	80198a4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	2244      	movs	r2, #68	@ 0x44
 801987e:	5a9b      	ldrh	r3, [r3, r2]
 8019880:	b29a      	uxth	r2, r3
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	498a      	ldr	r1, [pc, #552]	@ (8019ab0 <HAL_PCD_IRQHandler+0x26c>)
 8019888:	400a      	ands	r2, r1
 801988a:	b291      	uxth	r1, r2
 801988c:	2244      	movs	r2, #68	@ 0x44
 801988e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	0018      	movs	r0, r3
 8019894:	f009 fec1 	bl	802361a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	2100      	movs	r1, #0
 801989c:	0018      	movs	r0, r3
 801989e:	f000 f915 	bl	8019acc <HAL_PCD_SetAddress>

    return;
 80198a2:	e102      	b.n	8019aaa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80198a4:	68fa      	ldr	r2, [r7, #12]
 80198a6:	2380      	movs	r3, #128	@ 0x80
 80198a8:	01db      	lsls	r3, r3, #7
 80198aa:	4013      	ands	r3, r2
 80198ac:	d00c      	beq.n	80198c8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	2244      	movs	r2, #68	@ 0x44
 80198b4:	5a9b      	ldrh	r3, [r3, r2]
 80198b6:	b29a      	uxth	r2, r3
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	497d      	ldr	r1, [pc, #500]	@ (8019ab4 <HAL_PCD_IRQHandler+0x270>)
 80198be:	400a      	ands	r2, r1
 80198c0:	b291      	uxth	r1, r2
 80198c2:	2244      	movs	r2, #68	@ 0x44
 80198c4:	5299      	strh	r1, [r3, r2]

    return;
 80198c6:	e0f0      	b.n	8019aaa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80198c8:	68fa      	ldr	r2, [r7, #12]
 80198ca:	2380      	movs	r3, #128	@ 0x80
 80198cc:	019b      	lsls	r3, r3, #6
 80198ce:	4013      	ands	r3, r2
 80198d0:	d00c      	beq.n	80198ec <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	2244      	movs	r2, #68	@ 0x44
 80198d8:	5a9b      	ldrh	r3, [r3, r2]
 80198da:	b29a      	uxth	r2, r3
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	4975      	ldr	r1, [pc, #468]	@ (8019ab8 <HAL_PCD_IRQHandler+0x274>)
 80198e2:	400a      	ands	r2, r1
 80198e4:	b291      	uxth	r1, r2
 80198e6:	2244      	movs	r2, #68	@ 0x44
 80198e8:	5299      	strh	r1, [r3, r2]

    return;
 80198ea:	e0de      	b.n	8019aaa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80198ec:	68fa      	ldr	r2, [r7, #12]
 80198ee:	2380      	movs	r3, #128	@ 0x80
 80198f0:	015b      	lsls	r3, r3, #5
 80198f2:	4013      	ands	r3, r2
 80198f4:	d038      	beq.n	8019968 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	2240      	movs	r2, #64	@ 0x40
 80198fc:	5a9b      	ldrh	r3, [r3, r2]
 80198fe:	b29a      	uxth	r2, r3
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	2104      	movs	r1, #4
 8019906:	438a      	bics	r2, r1
 8019908:	b291      	uxth	r1, r2
 801990a:	2240      	movs	r2, #64	@ 0x40
 801990c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	681b      	ldr	r3, [r3, #0]
 8019912:	2240      	movs	r2, #64	@ 0x40
 8019914:	5a9b      	ldrh	r3, [r3, r2]
 8019916:	b29a      	uxth	r2, r3
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	681b      	ldr	r3, [r3, #0]
 801991c:	2108      	movs	r1, #8
 801991e:	438a      	bics	r2, r1
 8019920:	b291      	uxth	r1, r2
 8019922:	2240      	movs	r2, #64	@ 0x40
 8019924:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8019926:	687a      	ldr	r2, [r7, #4]
 8019928:	23b8      	movs	r3, #184	@ 0xb8
 801992a:	009b      	lsls	r3, r3, #2
 801992c:	5cd3      	ldrb	r3, [r2, r3]
 801992e:	2b01      	cmp	r3, #1
 8019930:	d109      	bne.n	8019946 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8019932:	687a      	ldr	r2, [r7, #4]
 8019934:	23b8      	movs	r3, #184	@ 0xb8
 8019936:	009b      	lsls	r3, r3, #2
 8019938:	2100      	movs	r1, #0
 801993a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	2100      	movs	r1, #0
 8019940:	0018      	movs	r0, r3
 8019942:	f001 fc9f 	bl	801b284 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	0018      	movs	r0, r3
 801994a:	f009 fea7 	bl	802369c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	2244      	movs	r2, #68	@ 0x44
 8019954:	5a9b      	ldrh	r3, [r3, r2]
 8019956:	b29a      	uxth	r2, r3
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	4957      	ldr	r1, [pc, #348]	@ (8019abc <HAL_PCD_IRQHandler+0x278>)
 801995e:	400a      	ands	r2, r1
 8019960:	b291      	uxth	r1, r2
 8019962:	2244      	movs	r2, #68	@ 0x44
 8019964:	5299      	strh	r1, [r3, r2]

    return;
 8019966:	e0a0      	b.n	8019aaa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8019968:	68fa      	ldr	r2, [r7, #12]
 801996a:	2380      	movs	r3, #128	@ 0x80
 801996c:	011b      	lsls	r3, r3, #4
 801996e:	4013      	ands	r3, r2
 8019970:	d028      	beq.n	80199c4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	2240      	movs	r2, #64	@ 0x40
 8019978:	5a9b      	ldrh	r3, [r3, r2]
 801997a:	b29a      	uxth	r2, r3
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	2108      	movs	r1, #8
 8019982:	430a      	orrs	r2, r1
 8019984:	b291      	uxth	r1, r2
 8019986:	2240      	movs	r2, #64	@ 0x40
 8019988:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	2244      	movs	r2, #68	@ 0x44
 8019990:	5a9b      	ldrh	r3, [r3, r2]
 8019992:	b29a      	uxth	r2, r3
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	4949      	ldr	r1, [pc, #292]	@ (8019ac0 <HAL_PCD_IRQHandler+0x27c>)
 801999a:	400a      	ands	r2, r1
 801999c:	b291      	uxth	r1, r2
 801999e:	2244      	movs	r2, #68	@ 0x44
 80199a0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	2240      	movs	r2, #64	@ 0x40
 80199a8:	5a9b      	ldrh	r3, [r3, r2]
 80199aa:	b29a      	uxth	r2, r3
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	2104      	movs	r1, #4
 80199b2:	430a      	orrs	r2, r1
 80199b4:	b291      	uxth	r1, r2
 80199b6:	2240      	movs	r2, #64	@ 0x40
 80199b8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	0018      	movs	r0, r3
 80199be:	f009 fe51 	bl	8023664 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80199c2:	e072      	b.n	8019aaa <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	2280      	movs	r2, #128	@ 0x80
 80199c8:	4013      	ands	r3, r2
 80199ca:	d046      	beq.n	8019a5a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	2244      	movs	r2, #68	@ 0x44
 80199d2:	5a9b      	ldrh	r3, [r3, r2]
 80199d4:	b29a      	uxth	r2, r3
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	2180      	movs	r1, #128	@ 0x80
 80199dc:	438a      	bics	r2, r1
 80199de:	b291      	uxth	r1, r2
 80199e0:	2244      	movs	r2, #68	@ 0x44
 80199e2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80199e4:	687a      	ldr	r2, [r7, #4]
 80199e6:	23b8      	movs	r3, #184	@ 0xb8
 80199e8:	009b      	lsls	r3, r3, #2
 80199ea:	5cd3      	ldrb	r3, [r2, r3]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d12f      	bne.n	8019a50 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	2240      	movs	r2, #64	@ 0x40
 80199f6:	5a9b      	ldrh	r3, [r3, r2]
 80199f8:	b29a      	uxth	r2, r3
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	681b      	ldr	r3, [r3, #0]
 80199fe:	2104      	movs	r1, #4
 8019a00:	430a      	orrs	r2, r1
 8019a02:	b291      	uxth	r1, r2
 8019a04:	2240      	movs	r2, #64	@ 0x40
 8019a06:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	2240      	movs	r2, #64	@ 0x40
 8019a0e:	5a9b      	ldrh	r3, [r3, r2]
 8019a10:	b29a      	uxth	r2, r3
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	2108      	movs	r1, #8
 8019a18:	430a      	orrs	r2, r1
 8019a1a:	b291      	uxth	r1, r2
 8019a1c:	2240      	movs	r2, #64	@ 0x40
 8019a1e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8019a20:	687a      	ldr	r2, [r7, #4]
 8019a22:	23b8      	movs	r3, #184	@ 0xb8
 8019a24:	009b      	lsls	r3, r3, #2
 8019a26:	2101      	movs	r1, #1
 8019a28:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8019a2a:	687b      	ldr	r3, [r7, #4]
 8019a2c:	681b      	ldr	r3, [r3, #0]
 8019a2e:	2254      	movs	r2, #84	@ 0x54
 8019a30:	5a9b      	ldrh	r3, [r3, r2]
 8019a32:	b29b      	uxth	r3, r3
 8019a34:	089b      	lsrs	r3, r3, #2
 8019a36:	223c      	movs	r2, #60	@ 0x3c
 8019a38:	4013      	ands	r3, r2
 8019a3a:	0019      	movs	r1, r3
 8019a3c:	687a      	ldr	r2, [r7, #4]
 8019a3e:	23b9      	movs	r3, #185	@ 0xb9
 8019a40:	009b      	lsls	r3, r3, #2
 8019a42:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	2101      	movs	r1, #1
 8019a48:	0018      	movs	r0, r3
 8019a4a:	f001 fc1b 	bl	801b284 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8019a4e:	e02c      	b.n	8019aaa <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	0018      	movs	r0, r3
 8019a54:	f009 fe06 	bl	8023664 <HAL_PCD_SuspendCallback>
    return;
 8019a58:	e027      	b.n	8019aaa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8019a5a:	68fa      	ldr	r2, [r7, #12]
 8019a5c:	2380      	movs	r3, #128	@ 0x80
 8019a5e:	009b      	lsls	r3, r3, #2
 8019a60:	4013      	ands	r3, r2
 8019a62:	d010      	beq.n	8019a86 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	2244      	movs	r2, #68	@ 0x44
 8019a6a:	5a9b      	ldrh	r3, [r3, r2]
 8019a6c:	b29a      	uxth	r2, r3
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	4914      	ldr	r1, [pc, #80]	@ (8019ac4 <HAL_PCD_IRQHandler+0x280>)
 8019a74:	400a      	ands	r2, r1
 8019a76:	b291      	uxth	r1, r2
 8019a78:	2244      	movs	r2, #68	@ 0x44
 8019a7a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	0018      	movs	r0, r3
 8019a80:	f009 fdbc 	bl	80235fc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8019a84:	e011      	b.n	8019aaa <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8019a86:	68fa      	ldr	r2, [r7, #12]
 8019a88:	2380      	movs	r3, #128	@ 0x80
 8019a8a:	005b      	lsls	r3, r3, #1
 8019a8c:	4013      	ands	r3, r2
 8019a8e:	d00c      	beq.n	8019aaa <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	2244      	movs	r2, #68	@ 0x44
 8019a96:	5a9b      	ldrh	r3, [r3, r2]
 8019a98:	b29a      	uxth	r2, r3
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	490a      	ldr	r1, [pc, #40]	@ (8019ac8 <HAL_PCD_IRQHandler+0x284>)
 8019aa0:	400a      	ands	r2, r1
 8019aa2:	b291      	uxth	r1, r2
 8019aa4:	2244      	movs	r2, #68	@ 0x44
 8019aa6:	5299      	strh	r1, [r3, r2]

    return;
 8019aa8:	46c0      	nop			@ (mov r8, r8)
  }
}
 8019aaa:	46bd      	mov	sp, r7
 8019aac:	b004      	add	sp, #16
 8019aae:	bd80      	pop	{r7, pc}
 8019ab0:	fffffbff 	.word	0xfffffbff
 8019ab4:	ffffbfff 	.word	0xffffbfff
 8019ab8:	ffffdfff 	.word	0xffffdfff
 8019abc:	ffffefff 	.word	0xffffefff
 8019ac0:	fffff7ff 	.word	0xfffff7ff
 8019ac4:	fffffdff 	.word	0xfffffdff
 8019ac8:	fffffeff 	.word	0xfffffeff

08019acc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b082      	sub	sp, #8
 8019ad0:	af00      	add	r7, sp, #0
 8019ad2:	6078      	str	r0, [r7, #4]
 8019ad4:	000a      	movs	r2, r1
 8019ad6:	1cfb      	adds	r3, r7, #3
 8019ad8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8019ada:	687a      	ldr	r2, [r7, #4]
 8019adc:	23aa      	movs	r3, #170	@ 0xaa
 8019ade:	009b      	lsls	r3, r3, #2
 8019ae0:	5cd3      	ldrb	r3, [r2, r3]
 8019ae2:	2b01      	cmp	r3, #1
 8019ae4:	d101      	bne.n	8019aea <HAL_PCD_SetAddress+0x1e>
 8019ae6:	2302      	movs	r3, #2
 8019ae8:	e017      	b.n	8019b1a <HAL_PCD_SetAddress+0x4e>
 8019aea:	687a      	ldr	r2, [r7, #4]
 8019aec:	23aa      	movs	r3, #170	@ 0xaa
 8019aee:	009b      	lsls	r3, r3, #2
 8019af0:	2101      	movs	r1, #1
 8019af2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	1cfa      	adds	r2, r7, #3
 8019af8:	2124      	movs	r1, #36	@ 0x24
 8019afa:	7812      	ldrb	r2, [r2, #0]
 8019afc:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	681a      	ldr	r2, [r3, #0]
 8019b02:	1cfb      	adds	r3, r7, #3
 8019b04:	781b      	ldrb	r3, [r3, #0]
 8019b06:	0019      	movs	r1, r3
 8019b08:	0010      	movs	r0, r2
 8019b0a:	f007 fc8f 	bl	802142c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8019b0e:	687a      	ldr	r2, [r7, #4]
 8019b10:	23aa      	movs	r3, #170	@ 0xaa
 8019b12:	009b      	lsls	r3, r3, #2
 8019b14:	2100      	movs	r1, #0
 8019b16:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019b18:	2300      	movs	r3, #0
}
 8019b1a:	0018      	movs	r0, r3
 8019b1c:	46bd      	mov	sp, r7
 8019b1e:	b002      	add	sp, #8
 8019b20:	bd80      	pop	{r7, pc}

08019b22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8019b22:	b590      	push	{r4, r7, lr}
 8019b24:	b085      	sub	sp, #20
 8019b26:	af00      	add	r7, sp, #0
 8019b28:	6078      	str	r0, [r7, #4]
 8019b2a:	000c      	movs	r4, r1
 8019b2c:	0010      	movs	r0, r2
 8019b2e:	0019      	movs	r1, r3
 8019b30:	1cfb      	adds	r3, r7, #3
 8019b32:	1c22      	adds	r2, r4, #0
 8019b34:	701a      	strb	r2, [r3, #0]
 8019b36:	003b      	movs	r3, r7
 8019b38:	1c02      	adds	r2, r0, #0
 8019b3a:	801a      	strh	r2, [r3, #0]
 8019b3c:	1cbb      	adds	r3, r7, #2
 8019b3e:	1c0a      	adds	r2, r1, #0
 8019b40:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8019b42:	230b      	movs	r3, #11
 8019b44:	18fb      	adds	r3, r7, r3
 8019b46:	2200      	movs	r2, #0
 8019b48:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019b4a:	1cfb      	adds	r3, r7, #3
 8019b4c:	781b      	ldrb	r3, [r3, #0]
 8019b4e:	b25b      	sxtb	r3, r3
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	da0f      	bge.n	8019b74 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019b54:	1cfb      	adds	r3, r7, #3
 8019b56:	781b      	ldrb	r3, [r3, #0]
 8019b58:	2207      	movs	r2, #7
 8019b5a:	4013      	ands	r3, r2
 8019b5c:	1c5a      	adds	r2, r3, #1
 8019b5e:	0013      	movs	r3, r2
 8019b60:	009b      	lsls	r3, r3, #2
 8019b62:	189b      	adds	r3, r3, r2
 8019b64:	00db      	lsls	r3, r3, #3
 8019b66:	687a      	ldr	r2, [r7, #4]
 8019b68:	18d3      	adds	r3, r2, r3
 8019b6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	2201      	movs	r2, #1
 8019b70:	705a      	strb	r2, [r3, #1]
 8019b72:	e00f      	b.n	8019b94 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019b74:	1cfb      	adds	r3, r7, #3
 8019b76:	781b      	ldrb	r3, [r3, #0]
 8019b78:	2207      	movs	r2, #7
 8019b7a:	401a      	ands	r2, r3
 8019b7c:	0013      	movs	r3, r2
 8019b7e:	009b      	lsls	r3, r3, #2
 8019b80:	189b      	adds	r3, r3, r2
 8019b82:	00db      	lsls	r3, r3, #3
 8019b84:	3369      	adds	r3, #105	@ 0x69
 8019b86:	33ff      	adds	r3, #255	@ 0xff
 8019b88:	687a      	ldr	r2, [r7, #4]
 8019b8a:	18d3      	adds	r3, r2, r3
 8019b8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	2200      	movs	r2, #0
 8019b92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8019b94:	1cfb      	adds	r3, r7, #3
 8019b96:	781b      	ldrb	r3, [r3, #0]
 8019b98:	2207      	movs	r2, #7
 8019b9a:	4013      	ands	r3, r2
 8019b9c:	b2da      	uxtb	r2, r3
 8019b9e:	68fb      	ldr	r3, [r7, #12]
 8019ba0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8019ba2:	003b      	movs	r3, r7
 8019ba4:	881a      	ldrh	r2, [r3, #0]
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	1cba      	adds	r2, r7, #2
 8019bae:	7812      	ldrb	r2, [r2, #0]
 8019bb0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8019bb2:	1cbb      	adds	r3, r7, #2
 8019bb4:	781b      	ldrb	r3, [r3, #0]
 8019bb6:	2b02      	cmp	r3, #2
 8019bb8:	d102      	bne.n	8019bc0 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	2200      	movs	r2, #0
 8019bbe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8019bc0:	687a      	ldr	r2, [r7, #4]
 8019bc2:	23aa      	movs	r3, #170	@ 0xaa
 8019bc4:	009b      	lsls	r3, r3, #2
 8019bc6:	5cd3      	ldrb	r3, [r2, r3]
 8019bc8:	2b01      	cmp	r3, #1
 8019bca:	d101      	bne.n	8019bd0 <HAL_PCD_EP_Open+0xae>
 8019bcc:	2302      	movs	r3, #2
 8019bce:	e013      	b.n	8019bf8 <HAL_PCD_EP_Open+0xd6>
 8019bd0:	687a      	ldr	r2, [r7, #4]
 8019bd2:	23aa      	movs	r3, #170	@ 0xaa
 8019bd4:	009b      	lsls	r3, r3, #2
 8019bd6:	2101      	movs	r1, #1
 8019bd8:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	68fa      	ldr	r2, [r7, #12]
 8019be0:	0011      	movs	r1, r2
 8019be2:	0018      	movs	r0, r3
 8019be4:	f005 fc86 	bl	801f4f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019be8:	687a      	ldr	r2, [r7, #4]
 8019bea:	23aa      	movs	r3, #170	@ 0xaa
 8019bec:	009b      	lsls	r3, r3, #2
 8019bee:	2100      	movs	r1, #0
 8019bf0:	54d1      	strb	r1, [r2, r3]

  return ret;
 8019bf2:	230b      	movs	r3, #11
 8019bf4:	18fb      	adds	r3, r7, r3
 8019bf6:	781b      	ldrb	r3, [r3, #0]
}
 8019bf8:	0018      	movs	r0, r3
 8019bfa:	46bd      	mov	sp, r7
 8019bfc:	b005      	add	sp, #20
 8019bfe:	bd90      	pop	{r4, r7, pc}

08019c00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019c00:	b580      	push	{r7, lr}
 8019c02:	b084      	sub	sp, #16
 8019c04:	af00      	add	r7, sp, #0
 8019c06:	6078      	str	r0, [r7, #4]
 8019c08:	000a      	movs	r2, r1
 8019c0a:	1cfb      	adds	r3, r7, #3
 8019c0c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8019c0e:	1cfb      	adds	r3, r7, #3
 8019c10:	781b      	ldrb	r3, [r3, #0]
 8019c12:	b25b      	sxtb	r3, r3
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	da0f      	bge.n	8019c38 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019c18:	1cfb      	adds	r3, r7, #3
 8019c1a:	781b      	ldrb	r3, [r3, #0]
 8019c1c:	2207      	movs	r2, #7
 8019c1e:	4013      	ands	r3, r2
 8019c20:	1c5a      	adds	r2, r3, #1
 8019c22:	0013      	movs	r3, r2
 8019c24:	009b      	lsls	r3, r3, #2
 8019c26:	189b      	adds	r3, r3, r2
 8019c28:	00db      	lsls	r3, r3, #3
 8019c2a:	687a      	ldr	r2, [r7, #4]
 8019c2c:	18d3      	adds	r3, r2, r3
 8019c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019c30:	68fb      	ldr	r3, [r7, #12]
 8019c32:	2201      	movs	r2, #1
 8019c34:	705a      	strb	r2, [r3, #1]
 8019c36:	e00f      	b.n	8019c58 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019c38:	1cfb      	adds	r3, r7, #3
 8019c3a:	781b      	ldrb	r3, [r3, #0]
 8019c3c:	2207      	movs	r2, #7
 8019c3e:	401a      	ands	r2, r3
 8019c40:	0013      	movs	r3, r2
 8019c42:	009b      	lsls	r3, r3, #2
 8019c44:	189b      	adds	r3, r3, r2
 8019c46:	00db      	lsls	r3, r3, #3
 8019c48:	3369      	adds	r3, #105	@ 0x69
 8019c4a:	33ff      	adds	r3, #255	@ 0xff
 8019c4c:	687a      	ldr	r2, [r7, #4]
 8019c4e:	18d3      	adds	r3, r2, r3
 8019c50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	2200      	movs	r2, #0
 8019c56:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8019c58:	1cfb      	adds	r3, r7, #3
 8019c5a:	781b      	ldrb	r3, [r3, #0]
 8019c5c:	2207      	movs	r2, #7
 8019c5e:	4013      	ands	r3, r2
 8019c60:	b2da      	uxtb	r2, r3
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019c66:	687a      	ldr	r2, [r7, #4]
 8019c68:	23aa      	movs	r3, #170	@ 0xaa
 8019c6a:	009b      	lsls	r3, r3, #2
 8019c6c:	5cd3      	ldrb	r3, [r2, r3]
 8019c6e:	2b01      	cmp	r3, #1
 8019c70:	d101      	bne.n	8019c76 <HAL_PCD_EP_Close+0x76>
 8019c72:	2302      	movs	r3, #2
 8019c74:	e011      	b.n	8019c9a <HAL_PCD_EP_Close+0x9a>
 8019c76:	687a      	ldr	r2, [r7, #4]
 8019c78:	23aa      	movs	r3, #170	@ 0xaa
 8019c7a:	009b      	lsls	r3, r3, #2
 8019c7c:	2101      	movs	r1, #1
 8019c7e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	68fa      	ldr	r2, [r7, #12]
 8019c86:	0011      	movs	r1, r2
 8019c88:	0018      	movs	r0, r3
 8019c8a:	f005 ffd5 	bl	801fc38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8019c8e:	687a      	ldr	r2, [r7, #4]
 8019c90:	23aa      	movs	r3, #170	@ 0xaa
 8019c92:	009b      	lsls	r3, r3, #2
 8019c94:	2100      	movs	r1, #0
 8019c96:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8019c98:	2300      	movs	r3, #0
}
 8019c9a:	0018      	movs	r0, r3
 8019c9c:	46bd      	mov	sp, r7
 8019c9e:	b004      	add	sp, #16
 8019ca0:	bd80      	pop	{r7, pc}

08019ca2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019ca2:	b580      	push	{r7, lr}
 8019ca4:	b086      	sub	sp, #24
 8019ca6:	af00      	add	r7, sp, #0
 8019ca8:	60f8      	str	r0, [r7, #12]
 8019caa:	607a      	str	r2, [r7, #4]
 8019cac:	603b      	str	r3, [r7, #0]
 8019cae:	200b      	movs	r0, #11
 8019cb0:	183b      	adds	r3, r7, r0
 8019cb2:	1c0a      	adds	r2, r1, #0
 8019cb4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019cb6:	0001      	movs	r1, r0
 8019cb8:	187b      	adds	r3, r7, r1
 8019cba:	781b      	ldrb	r3, [r3, #0]
 8019cbc:	2207      	movs	r2, #7
 8019cbe:	401a      	ands	r2, r3
 8019cc0:	0013      	movs	r3, r2
 8019cc2:	009b      	lsls	r3, r3, #2
 8019cc4:	189b      	adds	r3, r3, r2
 8019cc6:	00db      	lsls	r3, r3, #3
 8019cc8:	3369      	adds	r3, #105	@ 0x69
 8019cca:	33ff      	adds	r3, #255	@ 0xff
 8019ccc:	68fa      	ldr	r2, [r7, #12]
 8019cce:	18d3      	adds	r3, r2, r3
 8019cd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019cd2:	697b      	ldr	r3, [r7, #20]
 8019cd4:	687a      	ldr	r2, [r7, #4]
 8019cd6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019cd8:	697b      	ldr	r3, [r7, #20]
 8019cda:	683a      	ldr	r2, [r7, #0]
 8019cdc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8019cde:	697b      	ldr	r3, [r7, #20]
 8019ce0:	2200      	movs	r2, #0
 8019ce2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8019ce4:	697b      	ldr	r3, [r7, #20]
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019cea:	187b      	adds	r3, r7, r1
 8019cec:	781b      	ldrb	r3, [r3, #0]
 8019cee:	2207      	movs	r2, #7
 8019cf0:	4013      	ands	r3, r2
 8019cf2:	b2da      	uxtb	r2, r3
 8019cf4:	697b      	ldr	r3, [r7, #20]
 8019cf6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019cf8:	68fb      	ldr	r3, [r7, #12]
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	697a      	ldr	r2, [r7, #20]
 8019cfe:	0011      	movs	r1, r2
 8019d00:	0018      	movs	r0, r3
 8019d02:	f006 f959 	bl	801ffb8 <USB_EPStartXfer>

  return HAL_OK;
 8019d06:	2300      	movs	r3, #0
}
 8019d08:	0018      	movs	r0, r3
 8019d0a:	46bd      	mov	sp, r7
 8019d0c:	b006      	add	sp, #24
 8019d0e:	bd80      	pop	{r7, pc}

08019d10 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019d10:	b580      	push	{r7, lr}
 8019d12:	b082      	sub	sp, #8
 8019d14:	af00      	add	r7, sp, #0
 8019d16:	6078      	str	r0, [r7, #4]
 8019d18:	000a      	movs	r2, r1
 8019d1a:	1cfb      	adds	r3, r7, #3
 8019d1c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8019d1e:	1cfb      	adds	r3, r7, #3
 8019d20:	781b      	ldrb	r3, [r3, #0]
 8019d22:	2207      	movs	r2, #7
 8019d24:	401a      	ands	r2, r3
 8019d26:	6878      	ldr	r0, [r7, #4]
 8019d28:	23c2      	movs	r3, #194	@ 0xc2
 8019d2a:	0059      	lsls	r1, r3, #1
 8019d2c:	0013      	movs	r3, r2
 8019d2e:	009b      	lsls	r3, r3, #2
 8019d30:	189b      	adds	r3, r3, r2
 8019d32:	00db      	lsls	r3, r3, #3
 8019d34:	18c3      	adds	r3, r0, r3
 8019d36:	185b      	adds	r3, r3, r1
 8019d38:	681b      	ldr	r3, [r3, #0]
}
 8019d3a:	0018      	movs	r0, r3
 8019d3c:	46bd      	mov	sp, r7
 8019d3e:	b002      	add	sp, #8
 8019d40:	bd80      	pop	{r7, pc}

08019d42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8019d42:	b580      	push	{r7, lr}
 8019d44:	b086      	sub	sp, #24
 8019d46:	af00      	add	r7, sp, #0
 8019d48:	60f8      	str	r0, [r7, #12]
 8019d4a:	607a      	str	r2, [r7, #4]
 8019d4c:	603b      	str	r3, [r7, #0]
 8019d4e:	200b      	movs	r0, #11
 8019d50:	183b      	adds	r3, r7, r0
 8019d52:	1c0a      	adds	r2, r1, #0
 8019d54:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019d56:	183b      	adds	r3, r7, r0
 8019d58:	781b      	ldrb	r3, [r3, #0]
 8019d5a:	2207      	movs	r2, #7
 8019d5c:	4013      	ands	r3, r2
 8019d5e:	1c5a      	adds	r2, r3, #1
 8019d60:	0013      	movs	r3, r2
 8019d62:	009b      	lsls	r3, r3, #2
 8019d64:	189b      	adds	r3, r3, r2
 8019d66:	00db      	lsls	r3, r3, #3
 8019d68:	68fa      	ldr	r2, [r7, #12]
 8019d6a:	18d3      	adds	r3, r2, r3
 8019d6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8019d6e:	697b      	ldr	r3, [r7, #20]
 8019d70:	687a      	ldr	r2, [r7, #4]
 8019d72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8019d74:	697b      	ldr	r3, [r7, #20]
 8019d76:	683a      	ldr	r2, [r7, #0]
 8019d78:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8019d7a:	697b      	ldr	r3, [r7, #20]
 8019d7c:	2224      	movs	r2, #36	@ 0x24
 8019d7e:	2101      	movs	r1, #1
 8019d80:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8019d82:	697b      	ldr	r3, [r7, #20]
 8019d84:	683a      	ldr	r2, [r7, #0]
 8019d86:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8019d88:	697b      	ldr	r3, [r7, #20]
 8019d8a:	2200      	movs	r2, #0
 8019d8c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8019d8e:	697b      	ldr	r3, [r7, #20]
 8019d90:	2201      	movs	r2, #1
 8019d92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019d94:	183b      	adds	r3, r7, r0
 8019d96:	781b      	ldrb	r3, [r3, #0]
 8019d98:	2207      	movs	r2, #7
 8019d9a:	4013      	ands	r3, r2
 8019d9c:	b2da      	uxtb	r2, r3
 8019d9e:	697b      	ldr	r3, [r7, #20]
 8019da0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	681b      	ldr	r3, [r3, #0]
 8019da6:	697a      	ldr	r2, [r7, #20]
 8019da8:	0011      	movs	r1, r2
 8019daa:	0018      	movs	r0, r3
 8019dac:	f006 f904 	bl	801ffb8 <USB_EPStartXfer>

  return HAL_OK;
 8019db0:	2300      	movs	r3, #0
}
 8019db2:	0018      	movs	r0, r3
 8019db4:	46bd      	mov	sp, r7
 8019db6:	b006      	add	sp, #24
 8019db8:	bd80      	pop	{r7, pc}

08019dba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019dba:	b580      	push	{r7, lr}
 8019dbc:	b084      	sub	sp, #16
 8019dbe:	af00      	add	r7, sp, #0
 8019dc0:	6078      	str	r0, [r7, #4]
 8019dc2:	000a      	movs	r2, r1
 8019dc4:	1cfb      	adds	r3, r7, #3
 8019dc6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8019dc8:	1cfb      	adds	r3, r7, #3
 8019dca:	781b      	ldrb	r3, [r3, #0]
 8019dcc:	2207      	movs	r2, #7
 8019dce:	401a      	ands	r2, r3
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	685b      	ldr	r3, [r3, #4]
 8019dd4:	429a      	cmp	r2, r3
 8019dd6:	d901      	bls.n	8019ddc <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8019dd8:	2301      	movs	r3, #1
 8019dda:	e046      	b.n	8019e6a <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019ddc:	1cfb      	adds	r3, r7, #3
 8019dde:	781b      	ldrb	r3, [r3, #0]
 8019de0:	b25b      	sxtb	r3, r3
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	da0f      	bge.n	8019e06 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019de6:	1cfb      	adds	r3, r7, #3
 8019de8:	781b      	ldrb	r3, [r3, #0]
 8019dea:	2207      	movs	r2, #7
 8019dec:	4013      	ands	r3, r2
 8019dee:	1c5a      	adds	r2, r3, #1
 8019df0:	0013      	movs	r3, r2
 8019df2:	009b      	lsls	r3, r3, #2
 8019df4:	189b      	adds	r3, r3, r2
 8019df6:	00db      	lsls	r3, r3, #3
 8019df8:	687a      	ldr	r2, [r7, #4]
 8019dfa:	18d3      	adds	r3, r2, r3
 8019dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019dfe:	68fb      	ldr	r3, [r7, #12]
 8019e00:	2201      	movs	r2, #1
 8019e02:	705a      	strb	r2, [r3, #1]
 8019e04:	e00d      	b.n	8019e22 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8019e06:	1cfb      	adds	r3, r7, #3
 8019e08:	781a      	ldrb	r2, [r3, #0]
 8019e0a:	0013      	movs	r3, r2
 8019e0c:	009b      	lsls	r3, r3, #2
 8019e0e:	189b      	adds	r3, r3, r2
 8019e10:	00db      	lsls	r3, r3, #3
 8019e12:	3369      	adds	r3, #105	@ 0x69
 8019e14:	33ff      	adds	r3, #255	@ 0xff
 8019e16:	687a      	ldr	r2, [r7, #4]
 8019e18:	18d3      	adds	r3, r2, r3
 8019e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	2200      	movs	r2, #0
 8019e20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	2201      	movs	r2, #1
 8019e26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019e28:	1cfb      	adds	r3, r7, #3
 8019e2a:	781b      	ldrb	r3, [r3, #0]
 8019e2c:	2207      	movs	r2, #7
 8019e2e:	4013      	ands	r3, r2
 8019e30:	b2da      	uxtb	r2, r3
 8019e32:	68fb      	ldr	r3, [r7, #12]
 8019e34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019e36:	687a      	ldr	r2, [r7, #4]
 8019e38:	23aa      	movs	r3, #170	@ 0xaa
 8019e3a:	009b      	lsls	r3, r3, #2
 8019e3c:	5cd3      	ldrb	r3, [r2, r3]
 8019e3e:	2b01      	cmp	r3, #1
 8019e40:	d101      	bne.n	8019e46 <HAL_PCD_EP_SetStall+0x8c>
 8019e42:	2302      	movs	r3, #2
 8019e44:	e011      	b.n	8019e6a <HAL_PCD_EP_SetStall+0xb0>
 8019e46:	687a      	ldr	r2, [r7, #4]
 8019e48:	23aa      	movs	r3, #170	@ 0xaa
 8019e4a:	009b      	lsls	r3, r3, #2
 8019e4c:	2101      	movs	r1, #1
 8019e4e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	68fa      	ldr	r2, [r7, #12]
 8019e56:	0011      	movs	r1, r2
 8019e58:	0018      	movs	r0, r3
 8019e5a:	f007 f9e5 	bl	8021228 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8019e5e:	687a      	ldr	r2, [r7, #4]
 8019e60:	23aa      	movs	r3, #170	@ 0xaa
 8019e62:	009b      	lsls	r3, r3, #2
 8019e64:	2100      	movs	r1, #0
 8019e66:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019e68:	2300      	movs	r3, #0
}
 8019e6a:	0018      	movs	r0, r3
 8019e6c:	46bd      	mov	sp, r7
 8019e6e:	b004      	add	sp, #16
 8019e70:	bd80      	pop	{r7, pc}

08019e72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8019e72:	b580      	push	{r7, lr}
 8019e74:	b084      	sub	sp, #16
 8019e76:	af00      	add	r7, sp, #0
 8019e78:	6078      	str	r0, [r7, #4]
 8019e7a:	000a      	movs	r2, r1
 8019e7c:	1cfb      	adds	r3, r7, #3
 8019e7e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8019e80:	1cfb      	adds	r3, r7, #3
 8019e82:	781b      	ldrb	r3, [r3, #0]
 8019e84:	220f      	movs	r2, #15
 8019e86:	401a      	ands	r2, r3
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	685b      	ldr	r3, [r3, #4]
 8019e8c:	429a      	cmp	r2, r3
 8019e8e:	d901      	bls.n	8019e94 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8019e90:	2301      	movs	r3, #1
 8019e92:	e048      	b.n	8019f26 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8019e94:	1cfb      	adds	r3, r7, #3
 8019e96:	781b      	ldrb	r3, [r3, #0]
 8019e98:	b25b      	sxtb	r3, r3
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	da0f      	bge.n	8019ebe <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8019e9e:	1cfb      	adds	r3, r7, #3
 8019ea0:	781b      	ldrb	r3, [r3, #0]
 8019ea2:	2207      	movs	r2, #7
 8019ea4:	4013      	ands	r3, r2
 8019ea6:	1c5a      	adds	r2, r3, #1
 8019ea8:	0013      	movs	r3, r2
 8019eaa:	009b      	lsls	r3, r3, #2
 8019eac:	189b      	adds	r3, r3, r2
 8019eae:	00db      	lsls	r3, r3, #3
 8019eb0:	687a      	ldr	r2, [r7, #4]
 8019eb2:	18d3      	adds	r3, r2, r3
 8019eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8019eb6:	68fb      	ldr	r3, [r7, #12]
 8019eb8:	2201      	movs	r2, #1
 8019eba:	705a      	strb	r2, [r3, #1]
 8019ebc:	e00f      	b.n	8019ede <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8019ebe:	1cfb      	adds	r3, r7, #3
 8019ec0:	781b      	ldrb	r3, [r3, #0]
 8019ec2:	2207      	movs	r2, #7
 8019ec4:	401a      	ands	r2, r3
 8019ec6:	0013      	movs	r3, r2
 8019ec8:	009b      	lsls	r3, r3, #2
 8019eca:	189b      	adds	r3, r3, r2
 8019ecc:	00db      	lsls	r3, r3, #3
 8019ece:	3369      	adds	r3, #105	@ 0x69
 8019ed0:	33ff      	adds	r3, #255	@ 0xff
 8019ed2:	687a      	ldr	r2, [r7, #4]
 8019ed4:	18d3      	adds	r3, r2, r3
 8019ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	2200      	movs	r2, #0
 8019edc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	2200      	movs	r2, #0
 8019ee2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8019ee4:	1cfb      	adds	r3, r7, #3
 8019ee6:	781b      	ldrb	r3, [r3, #0]
 8019ee8:	2207      	movs	r2, #7
 8019eea:	4013      	ands	r3, r2
 8019eec:	b2da      	uxtb	r2, r3
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8019ef2:	687a      	ldr	r2, [r7, #4]
 8019ef4:	23aa      	movs	r3, #170	@ 0xaa
 8019ef6:	009b      	lsls	r3, r3, #2
 8019ef8:	5cd3      	ldrb	r3, [r2, r3]
 8019efa:	2b01      	cmp	r3, #1
 8019efc:	d101      	bne.n	8019f02 <HAL_PCD_EP_ClrStall+0x90>
 8019efe:	2302      	movs	r3, #2
 8019f00:	e011      	b.n	8019f26 <HAL_PCD_EP_ClrStall+0xb4>
 8019f02:	687a      	ldr	r2, [r7, #4]
 8019f04:	23aa      	movs	r3, #170	@ 0xaa
 8019f06:	009b      	lsls	r3, r3, #2
 8019f08:	2101      	movs	r1, #1
 8019f0a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	68fa      	ldr	r2, [r7, #12]
 8019f12:	0011      	movs	r1, r2
 8019f14:	0018      	movs	r0, r3
 8019f16:	f007 f9d7 	bl	80212c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8019f1a:	687a      	ldr	r2, [r7, #4]
 8019f1c:	23aa      	movs	r3, #170	@ 0xaa
 8019f1e:	009b      	lsls	r3, r3, #2
 8019f20:	2100      	movs	r1, #0
 8019f22:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8019f24:	2300      	movs	r3, #0
}
 8019f26:	0018      	movs	r0, r3
 8019f28:	46bd      	mov	sp, r7
 8019f2a:	b004      	add	sp, #16
 8019f2c:	bd80      	pop	{r7, pc}
	...

08019f30 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8019f30:	b5b0      	push	{r4, r5, r7, lr}
 8019f32:	b096      	sub	sp, #88	@ 0x58
 8019f34:	af00      	add	r7, sp, #0
 8019f36:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8019f38:	f000 fbec 	bl	801a714 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	681a      	ldr	r2, [r3, #0]
 8019f40:	204e      	movs	r0, #78	@ 0x4e
 8019f42:	183b      	adds	r3, r7, r0
 8019f44:	2144      	movs	r1, #68	@ 0x44
 8019f46:	5a52      	ldrh	r2, [r2, r1]
 8019f48:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8019f4a:	183b      	adds	r3, r7, r0
 8019f4c:	881b      	ldrh	r3, [r3, #0]
 8019f4e:	b2da      	uxtb	r2, r3
 8019f50:	244d      	movs	r4, #77	@ 0x4d
 8019f52:	193b      	adds	r3, r7, r4
 8019f54:	210f      	movs	r1, #15
 8019f56:	400a      	ands	r2, r1
 8019f58:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8019f5a:	193b      	adds	r3, r7, r4
 8019f5c:	781b      	ldrb	r3, [r3, #0]
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d000      	beq.n	8019f64 <PCD_EP_ISR_Handler+0x34>
 8019f62:	e18f      	b.n	801a284 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8019f64:	183b      	adds	r3, r7, r0
 8019f66:	881b      	ldrh	r3, [r3, #0]
 8019f68:	2210      	movs	r2, #16
 8019f6a:	4013      	ands	r3, r2
 8019f6c:	d155      	bne.n	801a01a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	881b      	ldrh	r3, [r3, #0]
 8019f74:	b29a      	uxth	r2, r3
 8019f76:	200e      	movs	r0, #14
 8019f78:	183b      	adds	r3, r7, r0
 8019f7a:	49bb      	ldr	r1, [pc, #748]	@ (801a268 <PCD_EP_ISR_Handler+0x338>)
 8019f7c:	400a      	ands	r2, r1
 8019f7e:	801a      	strh	r2, [r3, #0]
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	183a      	adds	r2, r7, r0
 8019f86:	8812      	ldrh	r2, [r2, #0]
 8019f88:	49b8      	ldr	r1, [pc, #736]	@ (801a26c <PCD_EP_ISR_Handler+0x33c>)
 8019f8a:	430a      	orrs	r2, r1
 8019f8c:	b292      	uxth	r2, r2
 8019f8e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	3328      	adds	r3, #40	@ 0x28
 8019f94:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	2250      	movs	r2, #80	@ 0x50
 8019f9c:	5a9b      	ldrh	r3, [r3, r2]
 8019f9e:	b29b      	uxth	r3, r3
 8019fa0:	001a      	movs	r2, r3
 8019fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fa4:	781b      	ldrb	r3, [r3, #0]
 8019fa6:	00db      	lsls	r3, r3, #3
 8019fa8:	18d2      	adds	r2, r2, r3
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	18d3      	adds	r3, r2, r3
 8019fb0:	4aaf      	ldr	r2, [pc, #700]	@ (801a270 <PCD_EP_ISR_Handler+0x340>)
 8019fb2:	4694      	mov	ip, r2
 8019fb4:	4463      	add	r3, ip
 8019fb6:	881b      	ldrh	r3, [r3, #0]
 8019fb8:	059b      	lsls	r3, r3, #22
 8019fba:	0d9a      	lsrs	r2, r3, #22
 8019fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fbe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8019fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fc2:	695a      	ldr	r2, [r3, #20]
 8019fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fc6:	69db      	ldr	r3, [r3, #28]
 8019fc8:	18d2      	adds	r2, r2, r3
 8019fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fcc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	2100      	movs	r1, #0
 8019fd2:	0018      	movs	r0, r3
 8019fd4:	f009 faf4 	bl	80235c0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	2224      	movs	r2, #36	@ 0x24
 8019fdc:	5c9b      	ldrb	r3, [r3, r2]
 8019fde:	b2db      	uxtb	r3, r3
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d101      	bne.n	8019fe8 <PCD_EP_ISR_Handler+0xb8>
 8019fe4:	f000 fb96 	bl	801a714 <PCD_EP_ISR_Handler+0x7e4>
 8019fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fea:	699b      	ldr	r3, [r3, #24]
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d001      	beq.n	8019ff4 <PCD_EP_ISR_Handler+0xc4>
 8019ff0:	f000 fb90 	bl	801a714 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	2224      	movs	r2, #36	@ 0x24
 8019ff8:	5c9b      	ldrb	r3, [r3, r2]
 8019ffa:	b2db      	uxtb	r3, r3
 8019ffc:	2280      	movs	r2, #128	@ 0x80
 8019ffe:	4252      	negs	r2, r2
 801a000:	4313      	orrs	r3, r2
 801a002:	b2da      	uxtb	r2, r3
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	0011      	movs	r1, r2
 801a00a:	224c      	movs	r2, #76	@ 0x4c
 801a00c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	2224      	movs	r2, #36	@ 0x24
 801a012:	2100      	movs	r1, #0
 801a014:	5499      	strb	r1, [r3, r2]
 801a016:	f000 fb7d 	bl	801a714 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	3369      	adds	r3, #105	@ 0x69
 801a01e:	33ff      	adds	r3, #255	@ 0xff
 801a020:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	681a      	ldr	r2, [r3, #0]
 801a026:	214a      	movs	r1, #74	@ 0x4a
 801a028:	187b      	adds	r3, r7, r1
 801a02a:	8812      	ldrh	r2, [r2, #0]
 801a02c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801a02e:	187b      	adds	r3, r7, r1
 801a030:	881a      	ldrh	r2, [r3, #0]
 801a032:	2380      	movs	r3, #128	@ 0x80
 801a034:	011b      	lsls	r3, r3, #4
 801a036:	4013      	ands	r3, r2
 801a038:	d037      	beq.n	801a0aa <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	2250      	movs	r2, #80	@ 0x50
 801a040:	5a9b      	ldrh	r3, [r3, r2]
 801a042:	b29b      	uxth	r3, r3
 801a044:	001a      	movs	r2, r3
 801a046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a048:	781b      	ldrb	r3, [r3, #0]
 801a04a:	00db      	lsls	r3, r3, #3
 801a04c:	18d2      	adds	r2, r2, r3
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	681b      	ldr	r3, [r3, #0]
 801a052:	18d3      	adds	r3, r2, r3
 801a054:	4a87      	ldr	r2, [pc, #540]	@ (801a274 <PCD_EP_ISR_Handler+0x344>)
 801a056:	4694      	mov	ip, r2
 801a058:	4463      	add	r3, ip
 801a05a:	881b      	ldrh	r3, [r3, #0]
 801a05c:	059b      	lsls	r3, r3, #22
 801a05e:	0d9a      	lsrs	r2, r3, #22
 801a060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a062:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	6818      	ldr	r0, [r3, #0]
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	22ac      	movs	r2, #172	@ 0xac
 801a06c:	0092      	lsls	r2, r2, #2
 801a06e:	1899      	adds	r1, r3, r2
 801a070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a072:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 801a074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a076:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 801a078:	b29b      	uxth	r3, r3
 801a07a:	f007 fa59 	bl	8021530 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	881b      	ldrh	r3, [r3, #0]
 801a084:	b29a      	uxth	r2, r3
 801a086:	2010      	movs	r0, #16
 801a088:	183b      	adds	r3, r7, r0
 801a08a:	497b      	ldr	r1, [pc, #492]	@ (801a278 <PCD_EP_ISR_Handler+0x348>)
 801a08c:	400a      	ands	r2, r1
 801a08e:	801a      	strh	r2, [r3, #0]
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	183a      	adds	r2, r7, r0
 801a096:	8812      	ldrh	r2, [r2, #0]
 801a098:	2180      	movs	r1, #128	@ 0x80
 801a09a:	430a      	orrs	r2, r1
 801a09c:	b292      	uxth	r2, r2
 801a09e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	0018      	movs	r0, r3
 801a0a4:	f009 fa56 	bl	8023554 <HAL_PCD_SetupStageCallback>
 801a0a8:	e334      	b.n	801a714 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801a0aa:	234a      	movs	r3, #74	@ 0x4a
 801a0ac:	18fb      	adds	r3, r7, r3
 801a0ae:	2200      	movs	r2, #0
 801a0b0:	5e9b      	ldrsh	r3, [r3, r2]
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	db00      	blt.n	801a0b8 <PCD_EP_ISR_Handler+0x188>
 801a0b6:	e32d      	b.n	801a714 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	881b      	ldrh	r3, [r3, #0]
 801a0be:	b29a      	uxth	r2, r3
 801a0c0:	201e      	movs	r0, #30
 801a0c2:	183b      	adds	r3, r7, r0
 801a0c4:	496c      	ldr	r1, [pc, #432]	@ (801a278 <PCD_EP_ISR_Handler+0x348>)
 801a0c6:	400a      	ands	r2, r1
 801a0c8:	801a      	strh	r2, [r3, #0]
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	183a      	adds	r2, r7, r0
 801a0d0:	8812      	ldrh	r2, [r2, #0]
 801a0d2:	2180      	movs	r1, #128	@ 0x80
 801a0d4:	430a      	orrs	r2, r1
 801a0d6:	b292      	uxth	r2, r2
 801a0d8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	2250      	movs	r2, #80	@ 0x50
 801a0e0:	5a9b      	ldrh	r3, [r3, r2]
 801a0e2:	b29b      	uxth	r3, r3
 801a0e4:	001a      	movs	r2, r3
 801a0e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a0e8:	781b      	ldrb	r3, [r3, #0]
 801a0ea:	00db      	lsls	r3, r3, #3
 801a0ec:	18d2      	adds	r2, r2, r3
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	18d3      	adds	r3, r2, r3
 801a0f4:	4a5f      	ldr	r2, [pc, #380]	@ (801a274 <PCD_EP_ISR_Handler+0x344>)
 801a0f6:	4694      	mov	ip, r2
 801a0f8:	4463      	add	r3, ip
 801a0fa:	881b      	ldrh	r3, [r3, #0]
 801a0fc:	059b      	lsls	r3, r3, #22
 801a0fe:	0d9a      	lsrs	r2, r3, #22
 801a100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a102:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 801a104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a106:	69db      	ldr	r3, [r3, #28]
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d01a      	beq.n	801a142 <PCD_EP_ISR_Handler+0x212>
 801a10c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a10e:	695b      	ldr	r3, [r3, #20]
 801a110:	2b00      	cmp	r3, #0
 801a112:	d016      	beq.n	801a142 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	6818      	ldr	r0, [r3, #0]
 801a118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a11a:	6959      	ldr	r1, [r3, #20]
 801a11c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a11e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 801a120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a122:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 801a124:	b29b      	uxth	r3, r3
 801a126:	f007 fa03 	bl	8021530 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 801a12a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a12c:	695a      	ldr	r2, [r3, #20]
 801a12e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a130:	69db      	ldr	r3, [r3, #28]
 801a132:	18d2      	adds	r2, r2, r3
 801a134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a136:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	2100      	movs	r1, #0
 801a13c:	0018      	movs	r0, r3
 801a13e:	f009 fa1e 	bl	802357e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	681a      	ldr	r2, [r3, #0]
 801a146:	214a      	movs	r1, #74	@ 0x4a
 801a148:	187b      	adds	r3, r7, r1
 801a14a:	8812      	ldrh	r2, [r2, #0]
 801a14c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801a14e:	187b      	adds	r3, r7, r1
 801a150:	881a      	ldrh	r2, [r3, #0]
 801a152:	2380      	movs	r3, #128	@ 0x80
 801a154:	011b      	lsls	r3, r3, #4
 801a156:	4013      	ands	r3, r2
 801a158:	d000      	beq.n	801a15c <PCD_EP_ISR_Handler+0x22c>
 801a15a:	e2db      	b.n	801a714 <PCD_EP_ISR_Handler+0x7e4>
 801a15c:	187b      	adds	r3, r7, r1
 801a15e:	881a      	ldrh	r2, [r3, #0]
 801a160:	23c0      	movs	r3, #192	@ 0xc0
 801a162:	019b      	lsls	r3, r3, #6
 801a164:	401a      	ands	r2, r3
 801a166:	23c0      	movs	r3, #192	@ 0xc0
 801a168:	019b      	lsls	r3, r3, #6
 801a16a:	429a      	cmp	r2, r3
 801a16c:	d100      	bne.n	801a170 <PCD_EP_ISR_Handler+0x240>
 801a16e:	e2d1      	b.n	801a714 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	61bb      	str	r3, [r7, #24]
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	2250      	movs	r2, #80	@ 0x50
 801a17c:	5a9b      	ldrh	r3, [r3, r2]
 801a17e:	b29b      	uxth	r3, r3
 801a180:	001a      	movs	r2, r3
 801a182:	69bb      	ldr	r3, [r7, #24]
 801a184:	189b      	adds	r3, r3, r2
 801a186:	61bb      	str	r3, [r7, #24]
 801a188:	69bb      	ldr	r3, [r7, #24]
 801a18a:	4a3a      	ldr	r2, [pc, #232]	@ (801a274 <PCD_EP_ISR_Handler+0x344>)
 801a18c:	4694      	mov	ip, r2
 801a18e:	4463      	add	r3, ip
 801a190:	617b      	str	r3, [r7, #20]
 801a192:	697b      	ldr	r3, [r7, #20]
 801a194:	881b      	ldrh	r3, [r3, #0]
 801a196:	b29b      	uxth	r3, r3
 801a198:	059b      	lsls	r3, r3, #22
 801a19a:	0d9b      	lsrs	r3, r3, #22
 801a19c:	b29a      	uxth	r2, r3
 801a19e:	697b      	ldr	r3, [r7, #20]
 801a1a0:	801a      	strh	r2, [r3, #0]
 801a1a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1a4:	691b      	ldr	r3, [r3, #16]
 801a1a6:	2b3e      	cmp	r3, #62	@ 0x3e
 801a1a8:	d91a      	bls.n	801a1e0 <PCD_EP_ISR_Handler+0x2b0>
 801a1aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1ac:	691b      	ldr	r3, [r3, #16]
 801a1ae:	095b      	lsrs	r3, r3, #5
 801a1b0:	647b      	str	r3, [r7, #68]	@ 0x44
 801a1b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1b4:	691b      	ldr	r3, [r3, #16]
 801a1b6:	221f      	movs	r2, #31
 801a1b8:	4013      	ands	r3, r2
 801a1ba:	d102      	bne.n	801a1c2 <PCD_EP_ISR_Handler+0x292>
 801a1bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a1be:	3b01      	subs	r3, #1
 801a1c0:	647b      	str	r3, [r7, #68]	@ 0x44
 801a1c2:	697b      	ldr	r3, [r7, #20]
 801a1c4:	881b      	ldrh	r3, [r3, #0]
 801a1c6:	b29a      	uxth	r2, r3
 801a1c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a1ca:	b29b      	uxth	r3, r3
 801a1cc:	029b      	lsls	r3, r3, #10
 801a1ce:	b29b      	uxth	r3, r3
 801a1d0:	4313      	orrs	r3, r2
 801a1d2:	b29b      	uxth	r3, r3
 801a1d4:	4a25      	ldr	r2, [pc, #148]	@ (801a26c <PCD_EP_ISR_Handler+0x33c>)
 801a1d6:	4313      	orrs	r3, r2
 801a1d8:	b29a      	uxth	r2, r3
 801a1da:	697b      	ldr	r3, [r7, #20]
 801a1dc:	801a      	strh	r2, [r3, #0]
 801a1de:	e023      	b.n	801a228 <PCD_EP_ISR_Handler+0x2f8>
 801a1e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1e2:	691b      	ldr	r3, [r3, #16]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d108      	bne.n	801a1fa <PCD_EP_ISR_Handler+0x2ca>
 801a1e8:	697b      	ldr	r3, [r7, #20]
 801a1ea:	881b      	ldrh	r3, [r3, #0]
 801a1ec:	b29b      	uxth	r3, r3
 801a1ee:	4a1f      	ldr	r2, [pc, #124]	@ (801a26c <PCD_EP_ISR_Handler+0x33c>)
 801a1f0:	4313      	orrs	r3, r2
 801a1f2:	b29a      	uxth	r2, r3
 801a1f4:	697b      	ldr	r3, [r7, #20]
 801a1f6:	801a      	strh	r2, [r3, #0]
 801a1f8:	e016      	b.n	801a228 <PCD_EP_ISR_Handler+0x2f8>
 801a1fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a1fc:	691b      	ldr	r3, [r3, #16]
 801a1fe:	085b      	lsrs	r3, r3, #1
 801a200:	647b      	str	r3, [r7, #68]	@ 0x44
 801a202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a204:	691b      	ldr	r3, [r3, #16]
 801a206:	2201      	movs	r2, #1
 801a208:	4013      	ands	r3, r2
 801a20a:	d002      	beq.n	801a212 <PCD_EP_ISR_Handler+0x2e2>
 801a20c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a20e:	3301      	adds	r3, #1
 801a210:	647b      	str	r3, [r7, #68]	@ 0x44
 801a212:	697b      	ldr	r3, [r7, #20]
 801a214:	881b      	ldrh	r3, [r3, #0]
 801a216:	b29a      	uxth	r2, r3
 801a218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a21a:	b29b      	uxth	r3, r3
 801a21c:	029b      	lsls	r3, r3, #10
 801a21e:	b29b      	uxth	r3, r3
 801a220:	4313      	orrs	r3, r2
 801a222:	b29a      	uxth	r2, r3
 801a224:	697b      	ldr	r3, [r7, #20]
 801a226:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	881b      	ldrh	r3, [r3, #0]
 801a22e:	b29a      	uxth	r2, r3
 801a230:	2012      	movs	r0, #18
 801a232:	183b      	adds	r3, r7, r0
 801a234:	4911      	ldr	r1, [pc, #68]	@ (801a27c <PCD_EP_ISR_Handler+0x34c>)
 801a236:	400a      	ands	r2, r1
 801a238:	801a      	strh	r2, [r3, #0]
 801a23a:	183b      	adds	r3, r7, r0
 801a23c:	183a      	adds	r2, r7, r0
 801a23e:	8812      	ldrh	r2, [r2, #0]
 801a240:	2180      	movs	r1, #128	@ 0x80
 801a242:	0149      	lsls	r1, r1, #5
 801a244:	404a      	eors	r2, r1
 801a246:	801a      	strh	r2, [r3, #0]
 801a248:	183b      	adds	r3, r7, r0
 801a24a:	183a      	adds	r2, r7, r0
 801a24c:	8812      	ldrh	r2, [r2, #0]
 801a24e:	2180      	movs	r1, #128	@ 0x80
 801a250:	0189      	lsls	r1, r1, #6
 801a252:	404a      	eors	r2, r1
 801a254:	801a      	strh	r2, [r3, #0]
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	183a      	adds	r2, r7, r0
 801a25c:	8812      	ldrh	r2, [r2, #0]
 801a25e:	4908      	ldr	r1, [pc, #32]	@ (801a280 <PCD_EP_ISR_Handler+0x350>)
 801a260:	430a      	orrs	r2, r1
 801a262:	b292      	uxth	r2, r2
 801a264:	801a      	strh	r2, [r3, #0]
 801a266:	e255      	b.n	801a714 <PCD_EP_ISR_Handler+0x7e4>
 801a268:	ffff8f0f 	.word	0xffff8f0f
 801a26c:	ffff8000 	.word	0xffff8000
 801a270:	00000402 	.word	0x00000402
 801a274:	00000406 	.word	0x00000406
 801a278:	00000f8f 	.word	0x00000f8f
 801a27c:	ffffbf8f 	.word	0xffffbf8f
 801a280:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	001a      	movs	r2, r3
 801a28a:	204d      	movs	r0, #77	@ 0x4d
 801a28c:	183b      	adds	r3, r7, r0
 801a28e:	781b      	ldrb	r3, [r3, #0]
 801a290:	009b      	lsls	r3, r3, #2
 801a292:	18d2      	adds	r2, r2, r3
 801a294:	214a      	movs	r1, #74	@ 0x4a
 801a296:	187b      	adds	r3, r7, r1
 801a298:	8812      	ldrh	r2, [r2, #0]
 801a29a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 801a29c:	187b      	adds	r3, r7, r1
 801a29e:	2200      	movs	r2, #0
 801a2a0:	5e9b      	ldrsh	r3, [r3, r2]
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	db00      	blt.n	801a2a8 <PCD_EP_ISR_Handler+0x378>
 801a2a6:	e0fa      	b.n	801a49e <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	001a      	movs	r2, r3
 801a2ae:	183b      	adds	r3, r7, r0
 801a2b0:	781b      	ldrb	r3, [r3, #0]
 801a2b2:	009b      	lsls	r3, r3, #2
 801a2b4:	18d3      	adds	r3, r2, r3
 801a2b6:	881b      	ldrh	r3, [r3, #0]
 801a2b8:	b29a      	uxth	r2, r3
 801a2ba:	2448      	movs	r4, #72	@ 0x48
 801a2bc:	193b      	adds	r3, r7, r4
 801a2be:	49d1      	ldr	r1, [pc, #836]	@ (801a604 <PCD_EP_ISR_Handler+0x6d4>)
 801a2c0:	400a      	ands	r2, r1
 801a2c2:	801a      	strh	r2, [r3, #0]
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	001a      	movs	r2, r3
 801a2ca:	183b      	adds	r3, r7, r0
 801a2cc:	781b      	ldrb	r3, [r3, #0]
 801a2ce:	009b      	lsls	r3, r3, #2
 801a2d0:	18d3      	adds	r3, r2, r3
 801a2d2:	193a      	adds	r2, r7, r4
 801a2d4:	8812      	ldrh	r2, [r2, #0]
 801a2d6:	2180      	movs	r1, #128	@ 0x80
 801a2d8:	430a      	orrs	r2, r1
 801a2da:	b292      	uxth	r2, r2
 801a2dc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801a2de:	183b      	adds	r3, r7, r0
 801a2e0:	781a      	ldrb	r2, [r3, #0]
 801a2e2:	0013      	movs	r3, r2
 801a2e4:	009b      	lsls	r3, r3, #2
 801a2e6:	189b      	adds	r3, r3, r2
 801a2e8:	00db      	lsls	r3, r3, #3
 801a2ea:	3369      	adds	r3, #105	@ 0x69
 801a2ec:	33ff      	adds	r3, #255	@ 0xff
 801a2ee:	687a      	ldr	r2, [r7, #4]
 801a2f0:	18d3      	adds	r3, r2, r3
 801a2f2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801a2f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2f6:	7b1b      	ldrb	r3, [r3, #12]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d125      	bne.n	801a348 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	2250      	movs	r2, #80	@ 0x50
 801a302:	5a9b      	ldrh	r3, [r3, r2]
 801a304:	b29b      	uxth	r3, r3
 801a306:	001a      	movs	r2, r3
 801a308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a30a:	781b      	ldrb	r3, [r3, #0]
 801a30c:	00db      	lsls	r3, r3, #3
 801a30e:	18d2      	adds	r2, r2, r3
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	681b      	ldr	r3, [r3, #0]
 801a314:	18d3      	adds	r3, r2, r3
 801a316:	4abc      	ldr	r2, [pc, #752]	@ (801a608 <PCD_EP_ISR_Handler+0x6d8>)
 801a318:	4694      	mov	ip, r2
 801a31a:	4463      	add	r3, ip
 801a31c:	881a      	ldrh	r2, [r3, #0]
 801a31e:	2450      	movs	r4, #80	@ 0x50
 801a320:	193b      	adds	r3, r7, r4
 801a322:	0592      	lsls	r2, r2, #22
 801a324:	0d92      	lsrs	r2, r2, #22
 801a326:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 801a328:	193b      	adds	r3, r7, r4
 801a32a:	881b      	ldrh	r3, [r3, #0]
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d100      	bne.n	801a332 <PCD_EP_ISR_Handler+0x402>
 801a330:	e08d      	b.n	801a44e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	6818      	ldr	r0, [r3, #0]
 801a336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a338:	6959      	ldr	r1, [r3, #20]
 801a33a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a33c:	88da      	ldrh	r2, [r3, #6]
 801a33e:	193b      	adds	r3, r7, r4
 801a340:	881b      	ldrh	r3, [r3, #0]
 801a342:	f007 f8f5 	bl	8021530 <USB_ReadPMA>
 801a346:	e082      	b.n	801a44e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 801a348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a34a:	78db      	ldrb	r3, [r3, #3]
 801a34c:	2b02      	cmp	r3, #2
 801a34e:	d10c      	bne.n	801a36a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 801a350:	2350      	movs	r3, #80	@ 0x50
 801a352:	18fc      	adds	r4, r7, r3
 801a354:	234a      	movs	r3, #74	@ 0x4a
 801a356:	18fb      	adds	r3, r7, r3
 801a358:	881a      	ldrh	r2, [r3, #0]
 801a35a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	0018      	movs	r0, r3
 801a360:	f000 f9ec 	bl	801a73c <HAL_PCD_EP_DB_Receive>
 801a364:	0003      	movs	r3, r0
 801a366:	8023      	strh	r3, [r4, #0]
 801a368:	e071      	b.n	801a44e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	681b      	ldr	r3, [r3, #0]
 801a36e:	001a      	movs	r2, r3
 801a370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a372:	781b      	ldrb	r3, [r3, #0]
 801a374:	009b      	lsls	r3, r3, #2
 801a376:	18d3      	adds	r3, r2, r3
 801a378:	881b      	ldrh	r3, [r3, #0]
 801a37a:	b29a      	uxth	r2, r3
 801a37c:	2052      	movs	r0, #82	@ 0x52
 801a37e:	183b      	adds	r3, r7, r0
 801a380:	49a2      	ldr	r1, [pc, #648]	@ (801a60c <PCD_EP_ISR_Handler+0x6dc>)
 801a382:	400a      	ands	r2, r1
 801a384:	801a      	strh	r2, [r3, #0]
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	681b      	ldr	r3, [r3, #0]
 801a38a:	001a      	movs	r2, r3
 801a38c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a38e:	781b      	ldrb	r3, [r3, #0]
 801a390:	009b      	lsls	r3, r3, #2
 801a392:	18d3      	adds	r3, r2, r3
 801a394:	183a      	adds	r2, r7, r0
 801a396:	8812      	ldrh	r2, [r2, #0]
 801a398:	499d      	ldr	r1, [pc, #628]	@ (801a610 <PCD_EP_ISR_Handler+0x6e0>)
 801a39a:	430a      	orrs	r2, r1
 801a39c:	b292      	uxth	r2, r2
 801a39e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	681b      	ldr	r3, [r3, #0]
 801a3a4:	001a      	movs	r2, r3
 801a3a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3a8:	781b      	ldrb	r3, [r3, #0]
 801a3aa:	009b      	lsls	r3, r3, #2
 801a3ac:	18d3      	adds	r3, r2, r3
 801a3ae:	881b      	ldrh	r3, [r3, #0]
 801a3b0:	b29b      	uxth	r3, r3
 801a3b2:	001a      	movs	r2, r3
 801a3b4:	2380      	movs	r3, #128	@ 0x80
 801a3b6:	01db      	lsls	r3, r3, #7
 801a3b8:	4013      	ands	r3, r2
 801a3ba:	d024      	beq.n	801a406 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	2250      	movs	r2, #80	@ 0x50
 801a3c2:	5a9b      	ldrh	r3, [r3, r2]
 801a3c4:	b29b      	uxth	r3, r3
 801a3c6:	001a      	movs	r2, r3
 801a3c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3ca:	781b      	ldrb	r3, [r3, #0]
 801a3cc:	00db      	lsls	r3, r3, #3
 801a3ce:	18d2      	adds	r2, r2, r3
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	18d3      	adds	r3, r2, r3
 801a3d6:	4a8f      	ldr	r2, [pc, #572]	@ (801a614 <PCD_EP_ISR_Handler+0x6e4>)
 801a3d8:	4694      	mov	ip, r2
 801a3da:	4463      	add	r3, ip
 801a3dc:	881a      	ldrh	r2, [r3, #0]
 801a3de:	2450      	movs	r4, #80	@ 0x50
 801a3e0:	193b      	adds	r3, r7, r4
 801a3e2:	0592      	lsls	r2, r2, #22
 801a3e4:	0d92      	lsrs	r2, r2, #22
 801a3e6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a3e8:	193b      	adds	r3, r7, r4
 801a3ea:	881b      	ldrh	r3, [r3, #0]
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d02e      	beq.n	801a44e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	6818      	ldr	r0, [r3, #0]
 801a3f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3f6:	6959      	ldr	r1, [r3, #20]
 801a3f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3fa:	891a      	ldrh	r2, [r3, #8]
 801a3fc:	193b      	adds	r3, r7, r4
 801a3fe:	881b      	ldrh	r3, [r3, #0]
 801a400:	f007 f896 	bl	8021530 <USB_ReadPMA>
 801a404:	e023      	b.n	801a44e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	2250      	movs	r2, #80	@ 0x50
 801a40c:	5a9b      	ldrh	r3, [r3, r2]
 801a40e:	b29b      	uxth	r3, r3
 801a410:	001a      	movs	r2, r3
 801a412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a414:	781b      	ldrb	r3, [r3, #0]
 801a416:	00db      	lsls	r3, r3, #3
 801a418:	18d2      	adds	r2, r2, r3
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	18d3      	adds	r3, r2, r3
 801a420:	4a79      	ldr	r2, [pc, #484]	@ (801a608 <PCD_EP_ISR_Handler+0x6d8>)
 801a422:	4694      	mov	ip, r2
 801a424:	4463      	add	r3, ip
 801a426:	881a      	ldrh	r2, [r3, #0]
 801a428:	2450      	movs	r4, #80	@ 0x50
 801a42a:	193b      	adds	r3, r7, r4
 801a42c:	0592      	lsls	r2, r2, #22
 801a42e:	0d92      	lsrs	r2, r2, #22
 801a430:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801a432:	193b      	adds	r3, r7, r4
 801a434:	881b      	ldrh	r3, [r3, #0]
 801a436:	2b00      	cmp	r3, #0
 801a438:	d009      	beq.n	801a44e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	6818      	ldr	r0, [r3, #0]
 801a43e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a440:	6959      	ldr	r1, [r3, #20]
 801a442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a444:	895a      	ldrh	r2, [r3, #10]
 801a446:	193b      	adds	r3, r7, r4
 801a448:	881b      	ldrh	r3, [r3, #0]
 801a44a:	f007 f871 	bl	8021530 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801a44e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a450:	69da      	ldr	r2, [r3, #28]
 801a452:	2150      	movs	r1, #80	@ 0x50
 801a454:	187b      	adds	r3, r7, r1
 801a456:	881b      	ldrh	r3, [r3, #0]
 801a458:	18d2      	adds	r2, r2, r3
 801a45a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a45c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801a45e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a460:	695a      	ldr	r2, [r3, #20]
 801a462:	187b      	adds	r3, r7, r1
 801a464:	881b      	ldrh	r3, [r3, #0]
 801a466:	18d2      	adds	r2, r2, r3
 801a468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a46a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 801a46c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a46e:	699b      	ldr	r3, [r3, #24]
 801a470:	2b00      	cmp	r3, #0
 801a472:	d005      	beq.n	801a480 <PCD_EP_ISR_Handler+0x550>
 801a474:	187b      	adds	r3, r7, r1
 801a476:	881a      	ldrh	r2, [r3, #0]
 801a478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a47a:	691b      	ldr	r3, [r3, #16]
 801a47c:	429a      	cmp	r2, r3
 801a47e:	d207      	bcs.n	801a490 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801a480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a482:	781a      	ldrb	r2, [r3, #0]
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	0011      	movs	r1, r2
 801a488:	0018      	movs	r0, r3
 801a48a:	f009 f878 	bl	802357e <HAL_PCD_DataOutStageCallback>
 801a48e:	e006      	b.n	801a49e <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a496:	0011      	movs	r1, r2
 801a498:	0018      	movs	r0, r3
 801a49a:	f005 fd8d 	bl	801ffb8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801a49e:	244a      	movs	r4, #74	@ 0x4a
 801a4a0:	193b      	adds	r3, r7, r4
 801a4a2:	881b      	ldrh	r3, [r3, #0]
 801a4a4:	2280      	movs	r2, #128	@ 0x80
 801a4a6:	4013      	ands	r3, r2
 801a4a8:	d100      	bne.n	801a4ac <PCD_EP_ISR_Handler+0x57c>
 801a4aa:	e133      	b.n	801a714 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 801a4ac:	204d      	movs	r0, #77	@ 0x4d
 801a4ae:	183b      	adds	r3, r7, r0
 801a4b0:	781b      	ldrb	r3, [r3, #0]
 801a4b2:	1c5a      	adds	r2, r3, #1
 801a4b4:	0013      	movs	r3, r2
 801a4b6:	009b      	lsls	r3, r3, #2
 801a4b8:	189b      	adds	r3, r3, r2
 801a4ba:	00db      	lsls	r3, r3, #3
 801a4bc:	687a      	ldr	r2, [r7, #4]
 801a4be:	18d3      	adds	r3, r2, r3
 801a4c0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	001a      	movs	r2, r3
 801a4c8:	183b      	adds	r3, r7, r0
 801a4ca:	781b      	ldrb	r3, [r3, #0]
 801a4cc:	009b      	lsls	r3, r3, #2
 801a4ce:	18d3      	adds	r3, r2, r3
 801a4d0:	881b      	ldrh	r3, [r3, #0]
 801a4d2:	b29a      	uxth	r2, r3
 801a4d4:	2542      	movs	r5, #66	@ 0x42
 801a4d6:	197b      	adds	r3, r7, r5
 801a4d8:	494f      	ldr	r1, [pc, #316]	@ (801a618 <PCD_EP_ISR_Handler+0x6e8>)
 801a4da:	400a      	ands	r2, r1
 801a4dc:	801a      	strh	r2, [r3, #0]
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	001a      	movs	r2, r3
 801a4e4:	183b      	adds	r3, r7, r0
 801a4e6:	781b      	ldrb	r3, [r3, #0]
 801a4e8:	009b      	lsls	r3, r3, #2
 801a4ea:	18d3      	adds	r3, r2, r3
 801a4ec:	197a      	adds	r2, r7, r5
 801a4ee:	8812      	ldrh	r2, [r2, #0]
 801a4f0:	494a      	ldr	r1, [pc, #296]	@ (801a61c <PCD_EP_ISR_Handler+0x6ec>)
 801a4f2:	430a      	orrs	r2, r1
 801a4f4:	b292      	uxth	r2, r2
 801a4f6:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 801a4f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4fa:	78db      	ldrb	r3, [r3, #3]
 801a4fc:	2b01      	cmp	r3, #1
 801a4fe:	d000      	beq.n	801a502 <PCD_EP_ISR_Handler+0x5d2>
 801a500:	e0af      	b.n	801a662 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801a502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a504:	2200      	movs	r2, #0
 801a506:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 801a508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a50a:	7b1b      	ldrb	r3, [r3, #12]
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d100      	bne.n	801a512 <PCD_EP_ISR_Handler+0x5e2>
 801a510:	e09f      	b.n	801a652 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a512:	193b      	adds	r3, r7, r4
 801a514:	881b      	ldrh	r3, [r3, #0]
 801a516:	2240      	movs	r2, #64	@ 0x40
 801a518:	4013      	ands	r3, r2
 801a51a:	d046      	beq.n	801a5aa <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a51c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a51e:	785b      	ldrb	r3, [r3, #1]
 801a520:	2b00      	cmp	r3, #0
 801a522:	d125      	bne.n	801a570 <PCD_EP_ISR_Handler+0x640>
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	627b      	str	r3, [r7, #36]	@ 0x24
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	2250      	movs	r2, #80	@ 0x50
 801a530:	5a9b      	ldrh	r3, [r3, r2]
 801a532:	b29b      	uxth	r3, r3
 801a534:	001a      	movs	r2, r3
 801a536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a538:	189b      	adds	r3, r3, r2
 801a53a:	627b      	str	r3, [r7, #36]	@ 0x24
 801a53c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a53e:	781b      	ldrb	r3, [r3, #0]
 801a540:	00da      	lsls	r2, r3, #3
 801a542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a544:	18d3      	adds	r3, r2, r3
 801a546:	4a33      	ldr	r2, [pc, #204]	@ (801a614 <PCD_EP_ISR_Handler+0x6e4>)
 801a548:	4694      	mov	ip, r2
 801a54a:	4463      	add	r3, ip
 801a54c:	623b      	str	r3, [r7, #32]
 801a54e:	6a3b      	ldr	r3, [r7, #32]
 801a550:	881b      	ldrh	r3, [r3, #0]
 801a552:	b29b      	uxth	r3, r3
 801a554:	059b      	lsls	r3, r3, #22
 801a556:	0d9b      	lsrs	r3, r3, #22
 801a558:	b29a      	uxth	r2, r3
 801a55a:	6a3b      	ldr	r3, [r7, #32]
 801a55c:	801a      	strh	r2, [r3, #0]
 801a55e:	6a3b      	ldr	r3, [r7, #32]
 801a560:	881b      	ldrh	r3, [r3, #0]
 801a562:	b29b      	uxth	r3, r3
 801a564:	4a2d      	ldr	r2, [pc, #180]	@ (801a61c <PCD_EP_ISR_Handler+0x6ec>)
 801a566:	4313      	orrs	r3, r2
 801a568:	b29a      	uxth	r2, r3
 801a56a:	6a3b      	ldr	r3, [r7, #32]
 801a56c:	801a      	strh	r2, [r3, #0]
 801a56e:	e070      	b.n	801a652 <PCD_EP_ISR_Handler+0x722>
 801a570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a572:	785b      	ldrb	r3, [r3, #1]
 801a574:	2b01      	cmp	r3, #1
 801a576:	d16c      	bne.n	801a652 <PCD_EP_ISR_Handler+0x722>
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	681b      	ldr	r3, [r3, #0]
 801a582:	2250      	movs	r2, #80	@ 0x50
 801a584:	5a9b      	ldrh	r3, [r3, r2]
 801a586:	b29b      	uxth	r3, r3
 801a588:	001a      	movs	r2, r3
 801a58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a58c:	189b      	adds	r3, r3, r2
 801a58e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a592:	781b      	ldrb	r3, [r3, #0]
 801a594:	00da      	lsls	r2, r3, #3
 801a596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a598:	18d3      	adds	r3, r2, r3
 801a59a:	4a1e      	ldr	r2, [pc, #120]	@ (801a614 <PCD_EP_ISR_Handler+0x6e4>)
 801a59c:	4694      	mov	ip, r2
 801a59e:	4463      	add	r3, ip
 801a5a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5a4:	2200      	movs	r2, #0
 801a5a6:	801a      	strh	r2, [r3, #0]
 801a5a8:	e053      	b.n	801a652 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a5b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5b2:	785b      	ldrb	r3, [r3, #1]
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d133      	bne.n	801a620 <PCD_EP_ISR_Handler+0x6f0>
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	637b      	str	r3, [r7, #52]	@ 0x34
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	681b      	ldr	r3, [r3, #0]
 801a5c2:	2250      	movs	r2, #80	@ 0x50
 801a5c4:	5a9b      	ldrh	r3, [r3, r2]
 801a5c6:	b29b      	uxth	r3, r3
 801a5c8:	001a      	movs	r2, r3
 801a5ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5cc:	189b      	adds	r3, r3, r2
 801a5ce:	637b      	str	r3, [r7, #52]	@ 0x34
 801a5d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a5d2:	781b      	ldrb	r3, [r3, #0]
 801a5d4:	00da      	lsls	r2, r3, #3
 801a5d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5d8:	18d3      	adds	r3, r2, r3
 801a5da:	4a0b      	ldr	r2, [pc, #44]	@ (801a608 <PCD_EP_ISR_Handler+0x6d8>)
 801a5dc:	4694      	mov	ip, r2
 801a5de:	4463      	add	r3, ip
 801a5e0:	633b      	str	r3, [r7, #48]	@ 0x30
 801a5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5e4:	881b      	ldrh	r3, [r3, #0]
 801a5e6:	b29b      	uxth	r3, r3
 801a5e8:	059b      	lsls	r3, r3, #22
 801a5ea:	0d9b      	lsrs	r3, r3, #22
 801a5ec:	b29a      	uxth	r2, r3
 801a5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5f0:	801a      	strh	r2, [r3, #0]
 801a5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a5f4:	881b      	ldrh	r3, [r3, #0]
 801a5f6:	b29b      	uxth	r3, r3
 801a5f8:	4a08      	ldr	r2, [pc, #32]	@ (801a61c <PCD_EP_ISR_Handler+0x6ec>)
 801a5fa:	4313      	orrs	r3, r2
 801a5fc:	b29a      	uxth	r2, r3
 801a5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a600:	801a      	strh	r2, [r3, #0]
 801a602:	e026      	b.n	801a652 <PCD_EP_ISR_Handler+0x722>
 801a604:	00000f8f 	.word	0x00000f8f
 801a608:	00000406 	.word	0x00000406
 801a60c:	ffff8f8f 	.word	0xffff8f8f
 801a610:	ffff80c0 	.word	0xffff80c0
 801a614:	00000402 	.word	0x00000402
 801a618:	ffff8f0f 	.word	0xffff8f0f
 801a61c:	ffff8000 	.word	0xffff8000
 801a620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a622:	785b      	ldrb	r3, [r3, #1]
 801a624:	2b01      	cmp	r3, #1
 801a626:	d114      	bne.n	801a652 <PCD_EP_ISR_Handler+0x722>
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	2250      	movs	r2, #80	@ 0x50
 801a62e:	5a9b      	ldrh	r3, [r3, r2]
 801a630:	b29b      	uxth	r3, r3
 801a632:	001a      	movs	r2, r3
 801a634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a636:	189b      	adds	r3, r3, r2
 801a638:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a63a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a63c:	781b      	ldrb	r3, [r3, #0]
 801a63e:	00da      	lsls	r2, r3, #3
 801a640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a642:	18d3      	adds	r3, r2, r3
 801a644:	4a3b      	ldr	r2, [pc, #236]	@ (801a734 <PCD_EP_ISR_Handler+0x804>)
 801a646:	4694      	mov	ip, r2
 801a648:	4463      	add	r3, ip
 801a64a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a64e:	2200      	movs	r2, #0
 801a650:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a654:	781a      	ldrb	r2, [r3, #0]
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	0011      	movs	r1, r2
 801a65a:	0018      	movs	r0, r3
 801a65c:	f008 ffb0 	bl	80235c0 <HAL_PCD_DataInStageCallback>
 801a660:	e058      	b.n	801a714 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 801a662:	234a      	movs	r3, #74	@ 0x4a
 801a664:	18fb      	adds	r3, r7, r3
 801a666:	881a      	ldrh	r2, [r3, #0]
 801a668:	2380      	movs	r3, #128	@ 0x80
 801a66a:	005b      	lsls	r3, r3, #1
 801a66c:	4013      	ands	r3, r2
 801a66e:	d149      	bne.n	801a704 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	681b      	ldr	r3, [r3, #0]
 801a674:	2250      	movs	r2, #80	@ 0x50
 801a676:	5a9b      	ldrh	r3, [r3, r2]
 801a678:	b29b      	uxth	r3, r3
 801a67a:	001a      	movs	r2, r3
 801a67c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a67e:	781b      	ldrb	r3, [r3, #0]
 801a680:	00db      	lsls	r3, r3, #3
 801a682:	18d2      	adds	r2, r2, r3
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	18d3      	adds	r3, r2, r3
 801a68a:	4a2b      	ldr	r2, [pc, #172]	@ (801a738 <PCD_EP_ISR_Handler+0x808>)
 801a68c:	4694      	mov	ip, r2
 801a68e:	4463      	add	r3, ip
 801a690:	881a      	ldrh	r2, [r3, #0]
 801a692:	2140      	movs	r1, #64	@ 0x40
 801a694:	187b      	adds	r3, r7, r1
 801a696:	0592      	lsls	r2, r2, #22
 801a698:	0d92      	lsrs	r2, r2, #22
 801a69a:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 801a69c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a69e:	699a      	ldr	r2, [r3, #24]
 801a6a0:	187b      	adds	r3, r7, r1
 801a6a2:	881b      	ldrh	r3, [r3, #0]
 801a6a4:	429a      	cmp	r2, r3
 801a6a6:	d907      	bls.n	801a6b8 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 801a6a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6aa:	699a      	ldr	r2, [r3, #24]
 801a6ac:	187b      	adds	r3, r7, r1
 801a6ae:	881b      	ldrh	r3, [r3, #0]
 801a6b0:	1ad2      	subs	r2, r2, r3
 801a6b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6b4:	619a      	str	r2, [r3, #24]
 801a6b6:	e002      	b.n	801a6be <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 801a6b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6ba:	2200      	movs	r2, #0
 801a6bc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 801a6be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6c0:	699b      	ldr	r3, [r3, #24]
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d107      	bne.n	801a6d6 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801a6c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6c8:	781a      	ldrb	r2, [r3, #0]
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	0011      	movs	r1, r2
 801a6ce:	0018      	movs	r0, r3
 801a6d0:	f008 ff76 	bl	80235c0 <HAL_PCD_DataInStageCallback>
 801a6d4:	e01e      	b.n	801a714 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801a6d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6d8:	695a      	ldr	r2, [r3, #20]
 801a6da:	2140      	movs	r1, #64	@ 0x40
 801a6dc:	187b      	adds	r3, r7, r1
 801a6de:	881b      	ldrh	r3, [r3, #0]
 801a6e0:	18d2      	adds	r2, r2, r3
 801a6e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6e4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801a6e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6e8:	69da      	ldr	r2, [r3, #28]
 801a6ea:	187b      	adds	r3, r7, r1
 801a6ec:	881b      	ldrh	r3, [r3, #0]
 801a6ee:	18d2      	adds	r2, r2, r3
 801a6f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a6f2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	681b      	ldr	r3, [r3, #0]
 801a6f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a6fa:	0011      	movs	r1, r2
 801a6fc:	0018      	movs	r0, r3
 801a6fe:	f005 fc5b 	bl	801ffb8 <USB_EPStartXfer>
 801a702:	e007      	b.n	801a714 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801a704:	234a      	movs	r3, #74	@ 0x4a
 801a706:	18fb      	adds	r3, r7, r3
 801a708:	881a      	ldrh	r2, [r3, #0]
 801a70a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	0018      	movs	r0, r3
 801a710:	f000 f930 	bl	801a974 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	2244      	movs	r2, #68	@ 0x44
 801a71a:	5a9b      	ldrh	r3, [r3, r2]
 801a71c:	b29b      	uxth	r3, r3
 801a71e:	b21b      	sxth	r3, r3
 801a720:	2b00      	cmp	r3, #0
 801a722:	da01      	bge.n	801a728 <PCD_EP_ISR_Handler+0x7f8>
 801a724:	f7ff fc0a 	bl	8019f3c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 801a728:	2300      	movs	r3, #0
}
 801a72a:	0018      	movs	r0, r3
 801a72c:	46bd      	mov	sp, r7
 801a72e:	b016      	add	sp, #88	@ 0x58
 801a730:	bdb0      	pop	{r4, r5, r7, pc}
 801a732:	46c0      	nop			@ (mov r8, r8)
 801a734:	00000406 	.word	0x00000406
 801a738:	00000402 	.word	0x00000402

0801a73c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a73c:	b590      	push	{r4, r7, lr}
 801a73e:	b089      	sub	sp, #36	@ 0x24
 801a740:	af00      	add	r7, sp, #0
 801a742:	60f8      	str	r0, [r7, #12]
 801a744:	60b9      	str	r1, [r7, #8]
 801a746:	1dbb      	adds	r3, r7, #6
 801a748:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801a74a:	1dbb      	adds	r3, r7, #6
 801a74c:	881a      	ldrh	r2, [r3, #0]
 801a74e:	2380      	movs	r3, #128	@ 0x80
 801a750:	01db      	lsls	r3, r3, #7
 801a752:	4013      	ands	r3, r2
 801a754:	d100      	bne.n	801a758 <HAL_PCD_EP_DB_Receive+0x1c>
 801a756:	e07d      	b.n	801a854 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	2250      	movs	r2, #80	@ 0x50
 801a75e:	5a9b      	ldrh	r3, [r3, r2]
 801a760:	b29b      	uxth	r3, r3
 801a762:	001a      	movs	r2, r3
 801a764:	68bb      	ldr	r3, [r7, #8]
 801a766:	781b      	ldrb	r3, [r3, #0]
 801a768:	00db      	lsls	r3, r3, #3
 801a76a:	18d2      	adds	r2, r2, r3
 801a76c:	68fb      	ldr	r3, [r7, #12]
 801a76e:	681b      	ldr	r3, [r3, #0]
 801a770:	18d3      	adds	r3, r2, r3
 801a772:	4a7a      	ldr	r2, [pc, #488]	@ (801a95c <HAL_PCD_EP_DB_Receive+0x220>)
 801a774:	4694      	mov	ip, r2
 801a776:	4463      	add	r3, ip
 801a778:	881a      	ldrh	r2, [r3, #0]
 801a77a:	211a      	movs	r1, #26
 801a77c:	187b      	adds	r3, r7, r1
 801a77e:	0592      	lsls	r2, r2, #22
 801a780:	0d92      	lsrs	r2, r2, #22
 801a782:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a784:	68bb      	ldr	r3, [r7, #8]
 801a786:	699a      	ldr	r2, [r3, #24]
 801a788:	187b      	adds	r3, r7, r1
 801a78a:	881b      	ldrh	r3, [r3, #0]
 801a78c:	429a      	cmp	r2, r3
 801a78e:	d307      	bcc.n	801a7a0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 801a790:	68bb      	ldr	r3, [r7, #8]
 801a792:	699a      	ldr	r2, [r3, #24]
 801a794:	187b      	adds	r3, r7, r1
 801a796:	881b      	ldrh	r3, [r3, #0]
 801a798:	1ad2      	subs	r2, r2, r3
 801a79a:	68bb      	ldr	r3, [r7, #8]
 801a79c:	619a      	str	r2, [r3, #24]
 801a79e:	e002      	b.n	801a7a6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 801a7a0:	68bb      	ldr	r3, [r7, #8]
 801a7a2:	2200      	movs	r2, #0
 801a7a4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a7a6:	68bb      	ldr	r3, [r7, #8]
 801a7a8:	699b      	ldr	r3, [r3, #24]
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d121      	bne.n	801a7f2 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a7ae:	68fb      	ldr	r3, [r7, #12]
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	001a      	movs	r2, r3
 801a7b4:	68bb      	ldr	r3, [r7, #8]
 801a7b6:	781b      	ldrb	r3, [r3, #0]
 801a7b8:	009b      	lsls	r3, r3, #2
 801a7ba:	18d3      	adds	r3, r2, r3
 801a7bc:	881b      	ldrh	r3, [r3, #0]
 801a7be:	b29a      	uxth	r2, r3
 801a7c0:	2018      	movs	r0, #24
 801a7c2:	183b      	adds	r3, r7, r0
 801a7c4:	4966      	ldr	r1, [pc, #408]	@ (801a960 <HAL_PCD_EP_DB_Receive+0x224>)
 801a7c6:	400a      	ands	r2, r1
 801a7c8:	801a      	strh	r2, [r3, #0]
 801a7ca:	183b      	adds	r3, r7, r0
 801a7cc:	183a      	adds	r2, r7, r0
 801a7ce:	8812      	ldrh	r2, [r2, #0]
 801a7d0:	2180      	movs	r1, #128	@ 0x80
 801a7d2:	0189      	lsls	r1, r1, #6
 801a7d4:	404a      	eors	r2, r1
 801a7d6:	801a      	strh	r2, [r3, #0]
 801a7d8:	68fb      	ldr	r3, [r7, #12]
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	001a      	movs	r2, r3
 801a7de:	68bb      	ldr	r3, [r7, #8]
 801a7e0:	781b      	ldrb	r3, [r3, #0]
 801a7e2:	009b      	lsls	r3, r3, #2
 801a7e4:	18d3      	adds	r3, r2, r3
 801a7e6:	183a      	adds	r2, r7, r0
 801a7e8:	8812      	ldrh	r2, [r2, #0]
 801a7ea:	495e      	ldr	r1, [pc, #376]	@ (801a964 <HAL_PCD_EP_DB_Receive+0x228>)
 801a7ec:	430a      	orrs	r2, r1
 801a7ee:	b292      	uxth	r2, r2
 801a7f0:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a7f2:	1dbb      	adds	r3, r7, #6
 801a7f4:	881b      	ldrh	r3, [r3, #0]
 801a7f6:	2240      	movs	r2, #64	@ 0x40
 801a7f8:	4013      	ands	r3, r2
 801a7fa:	d01a      	beq.n	801a832 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a7fc:	68fb      	ldr	r3, [r7, #12]
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	001a      	movs	r2, r3
 801a802:	68bb      	ldr	r3, [r7, #8]
 801a804:	781b      	ldrb	r3, [r3, #0]
 801a806:	009b      	lsls	r3, r3, #2
 801a808:	18d3      	adds	r3, r2, r3
 801a80a:	881b      	ldrh	r3, [r3, #0]
 801a80c:	b29a      	uxth	r2, r3
 801a80e:	2016      	movs	r0, #22
 801a810:	183b      	adds	r3, r7, r0
 801a812:	4955      	ldr	r1, [pc, #340]	@ (801a968 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a814:	400a      	ands	r2, r1
 801a816:	801a      	strh	r2, [r3, #0]
 801a818:	68fb      	ldr	r3, [r7, #12]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	001a      	movs	r2, r3
 801a81e:	68bb      	ldr	r3, [r7, #8]
 801a820:	781b      	ldrb	r3, [r3, #0]
 801a822:	009b      	lsls	r3, r3, #2
 801a824:	18d3      	adds	r3, r2, r3
 801a826:	183a      	adds	r2, r7, r0
 801a828:	8812      	ldrh	r2, [r2, #0]
 801a82a:	4950      	ldr	r1, [pc, #320]	@ (801a96c <HAL_PCD_EP_DB_Receive+0x230>)
 801a82c:	430a      	orrs	r2, r1
 801a82e:	b292      	uxth	r2, r2
 801a830:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a832:	241a      	movs	r4, #26
 801a834:	193b      	adds	r3, r7, r4
 801a836:	881b      	ldrh	r3, [r3, #0]
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d100      	bne.n	801a83e <HAL_PCD_EP_DB_Receive+0x102>
 801a83c:	e086      	b.n	801a94c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801a83e:	68fb      	ldr	r3, [r7, #12]
 801a840:	6818      	ldr	r0, [r3, #0]
 801a842:	68bb      	ldr	r3, [r7, #8]
 801a844:	6959      	ldr	r1, [r3, #20]
 801a846:	68bb      	ldr	r3, [r7, #8]
 801a848:	891a      	ldrh	r2, [r3, #8]
 801a84a:	193b      	adds	r3, r7, r4
 801a84c:	881b      	ldrh	r3, [r3, #0]
 801a84e:	f006 fe6f 	bl	8021530 <USB_ReadPMA>
 801a852:	e07b      	b.n	801a94c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801a854:	68fb      	ldr	r3, [r7, #12]
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	2250      	movs	r2, #80	@ 0x50
 801a85a:	5a9b      	ldrh	r3, [r3, r2]
 801a85c:	b29b      	uxth	r3, r3
 801a85e:	001a      	movs	r2, r3
 801a860:	68bb      	ldr	r3, [r7, #8]
 801a862:	781b      	ldrb	r3, [r3, #0]
 801a864:	00db      	lsls	r3, r3, #3
 801a866:	18d2      	adds	r2, r2, r3
 801a868:	68fb      	ldr	r3, [r7, #12]
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	18d3      	adds	r3, r2, r3
 801a86e:	4a40      	ldr	r2, [pc, #256]	@ (801a970 <HAL_PCD_EP_DB_Receive+0x234>)
 801a870:	4694      	mov	ip, r2
 801a872:	4463      	add	r3, ip
 801a874:	881a      	ldrh	r2, [r3, #0]
 801a876:	211a      	movs	r1, #26
 801a878:	187b      	adds	r3, r7, r1
 801a87a:	0592      	lsls	r2, r2, #22
 801a87c:	0d92      	lsrs	r2, r2, #22
 801a87e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 801a880:	68bb      	ldr	r3, [r7, #8]
 801a882:	699a      	ldr	r2, [r3, #24]
 801a884:	187b      	adds	r3, r7, r1
 801a886:	881b      	ldrh	r3, [r3, #0]
 801a888:	429a      	cmp	r2, r3
 801a88a:	d307      	bcc.n	801a89c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 801a88c:	68bb      	ldr	r3, [r7, #8]
 801a88e:	699a      	ldr	r2, [r3, #24]
 801a890:	187b      	adds	r3, r7, r1
 801a892:	881b      	ldrh	r3, [r3, #0]
 801a894:	1ad2      	subs	r2, r2, r3
 801a896:	68bb      	ldr	r3, [r7, #8]
 801a898:	619a      	str	r2, [r3, #24]
 801a89a:	e002      	b.n	801a8a2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 801a89c:	68bb      	ldr	r3, [r7, #8]
 801a89e:	2200      	movs	r2, #0
 801a8a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 801a8a2:	68bb      	ldr	r3, [r7, #8]
 801a8a4:	699b      	ldr	r3, [r3, #24]
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d121      	bne.n	801a8ee <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 801a8aa:	68fb      	ldr	r3, [r7, #12]
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	001a      	movs	r2, r3
 801a8b0:	68bb      	ldr	r3, [r7, #8]
 801a8b2:	781b      	ldrb	r3, [r3, #0]
 801a8b4:	009b      	lsls	r3, r3, #2
 801a8b6:	18d3      	adds	r3, r2, r3
 801a8b8:	881b      	ldrh	r3, [r3, #0]
 801a8ba:	b29a      	uxth	r2, r3
 801a8bc:	201e      	movs	r0, #30
 801a8be:	183b      	adds	r3, r7, r0
 801a8c0:	4927      	ldr	r1, [pc, #156]	@ (801a960 <HAL_PCD_EP_DB_Receive+0x224>)
 801a8c2:	400a      	ands	r2, r1
 801a8c4:	801a      	strh	r2, [r3, #0]
 801a8c6:	183b      	adds	r3, r7, r0
 801a8c8:	183a      	adds	r2, r7, r0
 801a8ca:	8812      	ldrh	r2, [r2, #0]
 801a8cc:	2180      	movs	r1, #128	@ 0x80
 801a8ce:	0189      	lsls	r1, r1, #6
 801a8d0:	404a      	eors	r2, r1
 801a8d2:	801a      	strh	r2, [r3, #0]
 801a8d4:	68fb      	ldr	r3, [r7, #12]
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	001a      	movs	r2, r3
 801a8da:	68bb      	ldr	r3, [r7, #8]
 801a8dc:	781b      	ldrb	r3, [r3, #0]
 801a8de:	009b      	lsls	r3, r3, #2
 801a8e0:	18d3      	adds	r3, r2, r3
 801a8e2:	183a      	adds	r2, r7, r0
 801a8e4:	8812      	ldrh	r2, [r2, #0]
 801a8e6:	491f      	ldr	r1, [pc, #124]	@ (801a964 <HAL_PCD_EP_DB_Receive+0x228>)
 801a8e8:	430a      	orrs	r2, r1
 801a8ea:	b292      	uxth	r2, r2
 801a8ec:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 801a8ee:	1dbb      	adds	r3, r7, #6
 801a8f0:	881b      	ldrh	r3, [r3, #0]
 801a8f2:	2240      	movs	r2, #64	@ 0x40
 801a8f4:	4013      	ands	r3, r2
 801a8f6:	d11a      	bne.n	801a92e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	001a      	movs	r2, r3
 801a8fe:	68bb      	ldr	r3, [r7, #8]
 801a900:	781b      	ldrb	r3, [r3, #0]
 801a902:	009b      	lsls	r3, r3, #2
 801a904:	18d3      	adds	r3, r2, r3
 801a906:	881b      	ldrh	r3, [r3, #0]
 801a908:	b29a      	uxth	r2, r3
 801a90a:	201c      	movs	r0, #28
 801a90c:	183b      	adds	r3, r7, r0
 801a90e:	4916      	ldr	r1, [pc, #88]	@ (801a968 <HAL_PCD_EP_DB_Receive+0x22c>)
 801a910:	400a      	ands	r2, r1
 801a912:	801a      	strh	r2, [r3, #0]
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	001a      	movs	r2, r3
 801a91a:	68bb      	ldr	r3, [r7, #8]
 801a91c:	781b      	ldrb	r3, [r3, #0]
 801a91e:	009b      	lsls	r3, r3, #2
 801a920:	18d3      	adds	r3, r2, r3
 801a922:	183a      	adds	r2, r7, r0
 801a924:	8812      	ldrh	r2, [r2, #0]
 801a926:	4911      	ldr	r1, [pc, #68]	@ (801a96c <HAL_PCD_EP_DB_Receive+0x230>)
 801a928:	430a      	orrs	r2, r1
 801a92a:	b292      	uxth	r2, r2
 801a92c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801a92e:	241a      	movs	r4, #26
 801a930:	193b      	adds	r3, r7, r4
 801a932:	881b      	ldrh	r3, [r3, #0]
 801a934:	2b00      	cmp	r3, #0
 801a936:	d009      	beq.n	801a94c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 801a938:	68fb      	ldr	r3, [r7, #12]
 801a93a:	6818      	ldr	r0, [r3, #0]
 801a93c:	68bb      	ldr	r3, [r7, #8]
 801a93e:	6959      	ldr	r1, [r3, #20]
 801a940:	68bb      	ldr	r3, [r7, #8]
 801a942:	895a      	ldrh	r2, [r3, #10]
 801a944:	193b      	adds	r3, r7, r4
 801a946:	881b      	ldrh	r3, [r3, #0]
 801a948:	f006 fdf2 	bl	8021530 <USB_ReadPMA>
    }
  }

  return count;
 801a94c:	231a      	movs	r3, #26
 801a94e:	18fb      	adds	r3, r7, r3
 801a950:	881b      	ldrh	r3, [r3, #0]
}
 801a952:	0018      	movs	r0, r3
 801a954:	46bd      	mov	sp, r7
 801a956:	b009      	add	sp, #36	@ 0x24
 801a958:	bd90      	pop	{r4, r7, pc}
 801a95a:	46c0      	nop			@ (mov r8, r8)
 801a95c:	00000402 	.word	0x00000402
 801a960:	ffffbf8f 	.word	0xffffbf8f
 801a964:	ffff8080 	.word	0xffff8080
 801a968:	ffff8f8f 	.word	0xffff8f8f
 801a96c:	ffff80c0 	.word	0xffff80c0
 801a970:	00000406 	.word	0x00000406

0801a974 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801a974:	b580      	push	{r7, lr}
 801a976:	b0a4      	sub	sp, #144	@ 0x90
 801a978:	af00      	add	r7, sp, #0
 801a97a:	60f8      	str	r0, [r7, #12]
 801a97c:	60b9      	str	r1, [r7, #8]
 801a97e:	1dbb      	adds	r3, r7, #6
 801a980:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801a982:	1dbb      	adds	r3, r7, #6
 801a984:	881b      	ldrh	r3, [r3, #0]
 801a986:	2240      	movs	r2, #64	@ 0x40
 801a988:	4013      	ands	r3, r2
 801a98a:	d100      	bne.n	801a98e <HAL_PCD_EP_DB_Transmit+0x1a>
 801a98c:	e1e4      	b.n	801ad58 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801a98e:	68fb      	ldr	r3, [r7, #12]
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	2250      	movs	r2, #80	@ 0x50
 801a994:	5a9b      	ldrh	r3, [r3, r2]
 801a996:	b29b      	uxth	r3, r3
 801a998:	001a      	movs	r2, r3
 801a99a:	68bb      	ldr	r3, [r7, #8]
 801a99c:	781b      	ldrb	r3, [r3, #0]
 801a99e:	00db      	lsls	r3, r3, #3
 801a9a0:	18d2      	adds	r2, r2, r3
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	18d3      	adds	r3, r2, r3
 801a9a8:	4ad0      	ldr	r2, [pc, #832]	@ (801acec <HAL_PCD_EP_DB_Transmit+0x378>)
 801a9aa:	4694      	mov	ip, r2
 801a9ac:	4463      	add	r3, ip
 801a9ae:	881a      	ldrh	r2, [r3, #0]
 801a9b0:	2186      	movs	r1, #134	@ 0x86
 801a9b2:	187b      	adds	r3, r7, r1
 801a9b4:	0592      	lsls	r2, r2, #22
 801a9b6:	0d92      	lsrs	r2, r2, #22
 801a9b8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 801a9ba:	68bb      	ldr	r3, [r7, #8]
 801a9bc:	699a      	ldr	r2, [r3, #24]
 801a9be:	187b      	adds	r3, r7, r1
 801a9c0:	881b      	ldrh	r3, [r3, #0]
 801a9c2:	429a      	cmp	r2, r3
 801a9c4:	d907      	bls.n	801a9d6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801a9c6:	68bb      	ldr	r3, [r7, #8]
 801a9c8:	699a      	ldr	r2, [r3, #24]
 801a9ca:	187b      	adds	r3, r7, r1
 801a9cc:	881b      	ldrh	r3, [r3, #0]
 801a9ce:	1ad2      	subs	r2, r2, r3
 801a9d0:	68bb      	ldr	r3, [r7, #8]
 801a9d2:	619a      	str	r2, [r3, #24]
 801a9d4:	e002      	b.n	801a9dc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801a9d6:	68bb      	ldr	r3, [r7, #8]
 801a9d8:	2200      	movs	r2, #0
 801a9da:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801a9dc:	68bb      	ldr	r3, [r7, #8]
 801a9de:	699b      	ldr	r3, [r3, #24]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	d000      	beq.n	801a9e6 <HAL_PCD_EP_DB_Transmit+0x72>
 801a9e4:	e0b5      	b.n	801ab52 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801a9e6:	68bb      	ldr	r3, [r7, #8]
 801a9e8:	785b      	ldrb	r3, [r3, #1]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d125      	bne.n	801aa3a <HAL_PCD_EP_DB_Transmit+0xc6>
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a9f4:	68fb      	ldr	r3, [r7, #12]
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	2250      	movs	r2, #80	@ 0x50
 801a9fa:	5a9b      	ldrh	r3, [r3, r2]
 801a9fc:	b29b      	uxth	r3, r3
 801a9fe:	001a      	movs	r2, r3
 801aa00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aa02:	189b      	adds	r3, r3, r2
 801aa04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801aa06:	68bb      	ldr	r3, [r7, #8]
 801aa08:	781b      	ldrb	r3, [r3, #0]
 801aa0a:	00da      	lsls	r2, r3, #3
 801aa0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aa0e:	18d3      	adds	r3, r2, r3
 801aa10:	4ab6      	ldr	r2, [pc, #728]	@ (801acec <HAL_PCD_EP_DB_Transmit+0x378>)
 801aa12:	4694      	mov	ip, r2
 801aa14:	4463      	add	r3, ip
 801aa16:	62bb      	str	r3, [r7, #40]	@ 0x28
 801aa18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa1a:	881b      	ldrh	r3, [r3, #0]
 801aa1c:	b29b      	uxth	r3, r3
 801aa1e:	059b      	lsls	r3, r3, #22
 801aa20:	0d9b      	lsrs	r3, r3, #22
 801aa22:	b29a      	uxth	r2, r3
 801aa24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa26:	801a      	strh	r2, [r3, #0]
 801aa28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa2a:	881b      	ldrh	r3, [r3, #0]
 801aa2c:	b29b      	uxth	r3, r3
 801aa2e:	4ab0      	ldr	r2, [pc, #704]	@ (801acf0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801aa30:	4313      	orrs	r3, r2
 801aa32:	b29a      	uxth	r2, r3
 801aa34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa36:	801a      	strh	r2, [r3, #0]
 801aa38:	e01b      	b.n	801aa72 <HAL_PCD_EP_DB_Transmit+0xfe>
 801aa3a:	68bb      	ldr	r3, [r7, #8]
 801aa3c:	785b      	ldrb	r3, [r3, #1]
 801aa3e:	2b01      	cmp	r3, #1
 801aa40:	d117      	bne.n	801aa72 <HAL_PCD_EP_DB_Transmit+0xfe>
 801aa42:	68fb      	ldr	r3, [r7, #12]
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	637b      	str	r3, [r7, #52]	@ 0x34
 801aa48:	68fb      	ldr	r3, [r7, #12]
 801aa4a:	681b      	ldr	r3, [r3, #0]
 801aa4c:	2250      	movs	r2, #80	@ 0x50
 801aa4e:	5a9b      	ldrh	r3, [r3, r2]
 801aa50:	b29b      	uxth	r3, r3
 801aa52:	001a      	movs	r2, r3
 801aa54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa56:	189b      	adds	r3, r3, r2
 801aa58:	637b      	str	r3, [r7, #52]	@ 0x34
 801aa5a:	68bb      	ldr	r3, [r7, #8]
 801aa5c:	781b      	ldrb	r3, [r3, #0]
 801aa5e:	00da      	lsls	r2, r3, #3
 801aa60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa62:	18d3      	adds	r3, r2, r3
 801aa64:	4aa1      	ldr	r2, [pc, #644]	@ (801acec <HAL_PCD_EP_DB_Transmit+0x378>)
 801aa66:	4694      	mov	ip, r2
 801aa68:	4463      	add	r3, ip
 801aa6a:	633b      	str	r3, [r7, #48]	@ 0x30
 801aa6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa6e:	2200      	movs	r2, #0
 801aa70:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	627b      	str	r3, [r7, #36]	@ 0x24
 801aa78:	68bb      	ldr	r3, [r7, #8]
 801aa7a:	785b      	ldrb	r3, [r3, #1]
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	d125      	bne.n	801aacc <HAL_PCD_EP_DB_Transmit+0x158>
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	61fb      	str	r3, [r7, #28]
 801aa86:	68fb      	ldr	r3, [r7, #12]
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	2250      	movs	r2, #80	@ 0x50
 801aa8c:	5a9b      	ldrh	r3, [r3, r2]
 801aa8e:	b29b      	uxth	r3, r3
 801aa90:	001a      	movs	r2, r3
 801aa92:	69fb      	ldr	r3, [r7, #28]
 801aa94:	189b      	adds	r3, r3, r2
 801aa96:	61fb      	str	r3, [r7, #28]
 801aa98:	68bb      	ldr	r3, [r7, #8]
 801aa9a:	781b      	ldrb	r3, [r3, #0]
 801aa9c:	00da      	lsls	r2, r3, #3
 801aa9e:	69fb      	ldr	r3, [r7, #28]
 801aaa0:	18d3      	adds	r3, r2, r3
 801aaa2:	4a94      	ldr	r2, [pc, #592]	@ (801acf4 <HAL_PCD_EP_DB_Transmit+0x380>)
 801aaa4:	4694      	mov	ip, r2
 801aaa6:	4463      	add	r3, ip
 801aaa8:	61bb      	str	r3, [r7, #24]
 801aaaa:	69bb      	ldr	r3, [r7, #24]
 801aaac:	881b      	ldrh	r3, [r3, #0]
 801aaae:	b29b      	uxth	r3, r3
 801aab0:	059b      	lsls	r3, r3, #22
 801aab2:	0d9b      	lsrs	r3, r3, #22
 801aab4:	b29a      	uxth	r2, r3
 801aab6:	69bb      	ldr	r3, [r7, #24]
 801aab8:	801a      	strh	r2, [r3, #0]
 801aaba:	69bb      	ldr	r3, [r7, #24]
 801aabc:	881b      	ldrh	r3, [r3, #0]
 801aabe:	b29b      	uxth	r3, r3
 801aac0:	4a8b      	ldr	r2, [pc, #556]	@ (801acf0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801aac2:	4313      	orrs	r3, r2
 801aac4:	b29a      	uxth	r2, r3
 801aac6:	69bb      	ldr	r3, [r7, #24]
 801aac8:	801a      	strh	r2, [r3, #0]
 801aaca:	e018      	b.n	801aafe <HAL_PCD_EP_DB_Transmit+0x18a>
 801aacc:	68bb      	ldr	r3, [r7, #8]
 801aace:	785b      	ldrb	r3, [r3, #1]
 801aad0:	2b01      	cmp	r3, #1
 801aad2:	d114      	bne.n	801aafe <HAL_PCD_EP_DB_Transmit+0x18a>
 801aad4:	68fb      	ldr	r3, [r7, #12]
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	2250      	movs	r2, #80	@ 0x50
 801aada:	5a9b      	ldrh	r3, [r3, r2]
 801aadc:	b29b      	uxth	r3, r3
 801aade:	001a      	movs	r2, r3
 801aae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aae2:	189b      	adds	r3, r3, r2
 801aae4:	627b      	str	r3, [r7, #36]	@ 0x24
 801aae6:	68bb      	ldr	r3, [r7, #8]
 801aae8:	781b      	ldrb	r3, [r3, #0]
 801aaea:	00da      	lsls	r2, r3, #3
 801aaec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aaee:	18d3      	adds	r3, r2, r3
 801aaf0:	4a80      	ldr	r2, [pc, #512]	@ (801acf4 <HAL_PCD_EP_DB_Transmit+0x380>)
 801aaf2:	4694      	mov	ip, r2
 801aaf4:	4463      	add	r3, ip
 801aaf6:	623b      	str	r3, [r7, #32]
 801aaf8:	6a3b      	ldr	r3, [r7, #32]
 801aafa:	2200      	movs	r2, #0
 801aafc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801aafe:	68bb      	ldr	r3, [r7, #8]
 801ab00:	781a      	ldrb	r2, [r3, #0]
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	0011      	movs	r1, r2
 801ab06:	0018      	movs	r0, r3
 801ab08:	f008 fd5a 	bl	80235c0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801ab0c:	1dbb      	adds	r3, r7, #6
 801ab0e:	881a      	ldrh	r2, [r3, #0]
 801ab10:	2380      	movs	r3, #128	@ 0x80
 801ab12:	01db      	lsls	r3, r3, #7
 801ab14:	4013      	ands	r3, r2
 801ab16:	d100      	bne.n	801ab1a <HAL_PCD_EP_DB_Transmit+0x1a6>
 801ab18:	e309      	b.n	801b12e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	001a      	movs	r2, r3
 801ab20:	68bb      	ldr	r3, [r7, #8]
 801ab22:	781b      	ldrb	r3, [r3, #0]
 801ab24:	009b      	lsls	r3, r3, #2
 801ab26:	18d3      	adds	r3, r2, r3
 801ab28:	881b      	ldrh	r3, [r3, #0]
 801ab2a:	b29a      	uxth	r2, r3
 801ab2c:	2016      	movs	r0, #22
 801ab2e:	183b      	adds	r3, r7, r0
 801ab30:	4971      	ldr	r1, [pc, #452]	@ (801acf8 <HAL_PCD_EP_DB_Transmit+0x384>)
 801ab32:	400a      	ands	r2, r1
 801ab34:	801a      	strh	r2, [r3, #0]
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	001a      	movs	r2, r3
 801ab3c:	68bb      	ldr	r3, [r7, #8]
 801ab3e:	781b      	ldrb	r3, [r3, #0]
 801ab40:	009b      	lsls	r3, r3, #2
 801ab42:	18d3      	adds	r3, r2, r3
 801ab44:	183a      	adds	r2, r7, r0
 801ab46:	8812      	ldrh	r2, [r2, #0]
 801ab48:	496c      	ldr	r1, [pc, #432]	@ (801acfc <HAL_PCD_EP_DB_Transmit+0x388>)
 801ab4a:	430a      	orrs	r2, r1
 801ab4c:	b292      	uxth	r2, r2
 801ab4e:	801a      	strh	r2, [r3, #0]
 801ab50:	e2ed      	b.n	801b12e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801ab52:	1dbb      	adds	r3, r7, #6
 801ab54:	881a      	ldrh	r2, [r3, #0]
 801ab56:	2380      	movs	r3, #128	@ 0x80
 801ab58:	01db      	lsls	r3, r3, #7
 801ab5a:	4013      	ands	r3, r2
 801ab5c:	d01a      	beq.n	801ab94 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	001a      	movs	r2, r3
 801ab64:	68bb      	ldr	r3, [r7, #8]
 801ab66:	781b      	ldrb	r3, [r3, #0]
 801ab68:	009b      	lsls	r3, r3, #2
 801ab6a:	18d3      	adds	r3, r2, r3
 801ab6c:	881b      	ldrh	r3, [r3, #0]
 801ab6e:	b29a      	uxth	r2, r3
 801ab70:	208a      	movs	r0, #138	@ 0x8a
 801ab72:	183b      	adds	r3, r7, r0
 801ab74:	4960      	ldr	r1, [pc, #384]	@ (801acf8 <HAL_PCD_EP_DB_Transmit+0x384>)
 801ab76:	400a      	ands	r2, r1
 801ab78:	801a      	strh	r2, [r3, #0]
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	001a      	movs	r2, r3
 801ab80:	68bb      	ldr	r3, [r7, #8]
 801ab82:	781b      	ldrb	r3, [r3, #0]
 801ab84:	009b      	lsls	r3, r3, #2
 801ab86:	18d3      	adds	r3, r2, r3
 801ab88:	183a      	adds	r2, r7, r0
 801ab8a:	8812      	ldrh	r2, [r2, #0]
 801ab8c:	495b      	ldr	r1, [pc, #364]	@ (801acfc <HAL_PCD_EP_DB_Transmit+0x388>)
 801ab8e:	430a      	orrs	r2, r1
 801ab90:	b292      	uxth	r2, r2
 801ab92:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801ab94:	68bb      	ldr	r3, [r7, #8]
 801ab96:	2224      	movs	r2, #36	@ 0x24
 801ab98:	5c9b      	ldrb	r3, [r3, r2]
 801ab9a:	2b01      	cmp	r3, #1
 801ab9c:	d000      	beq.n	801aba0 <HAL_PCD_EP_DB_Transmit+0x22c>
 801ab9e:	e2c6      	b.n	801b12e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801aba0:	68bb      	ldr	r3, [r7, #8]
 801aba2:	695a      	ldr	r2, [r3, #20]
 801aba4:	2186      	movs	r1, #134	@ 0x86
 801aba6:	187b      	adds	r3, r7, r1
 801aba8:	881b      	ldrh	r3, [r3, #0]
 801abaa:	18d2      	adds	r2, r2, r3
 801abac:	68bb      	ldr	r3, [r7, #8]
 801abae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801abb0:	68bb      	ldr	r3, [r7, #8]
 801abb2:	69da      	ldr	r2, [r3, #28]
 801abb4:	187b      	adds	r3, r7, r1
 801abb6:	881b      	ldrh	r3, [r3, #0]
 801abb8:	18d2      	adds	r2, r2, r3
 801abba:	68bb      	ldr	r3, [r7, #8]
 801abbc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801abbe:	68bb      	ldr	r3, [r7, #8]
 801abc0:	6a1a      	ldr	r2, [r3, #32]
 801abc2:	68bb      	ldr	r3, [r7, #8]
 801abc4:	691b      	ldr	r3, [r3, #16]
 801abc6:	429a      	cmp	r2, r3
 801abc8:	d30c      	bcc.n	801abe4 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 801abca:	68bb      	ldr	r3, [r7, #8]
 801abcc:	691b      	ldr	r3, [r3, #16]
 801abce:	218c      	movs	r1, #140	@ 0x8c
 801abd0:	187a      	adds	r2, r7, r1
 801abd2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801abd4:	68bb      	ldr	r3, [r7, #8]
 801abd6:	6a1a      	ldr	r2, [r3, #32]
 801abd8:	187b      	adds	r3, r7, r1
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	1ad2      	subs	r2, r2, r3
 801abde:	68bb      	ldr	r3, [r7, #8]
 801abe0:	621a      	str	r2, [r3, #32]
 801abe2:	e01a      	b.n	801ac1a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 801abe4:	68bb      	ldr	r3, [r7, #8]
 801abe6:	6a1b      	ldr	r3, [r3, #32]
 801abe8:	2b00      	cmp	r3, #0
 801abea:	d10a      	bne.n	801ac02 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 801abec:	2386      	movs	r3, #134	@ 0x86
 801abee:	18fb      	adds	r3, r7, r3
 801abf0:	881b      	ldrh	r3, [r3, #0]
 801abf2:	228c      	movs	r2, #140	@ 0x8c
 801abf4:	18ba      	adds	r2, r7, r2
 801abf6:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801abf8:	68bb      	ldr	r3, [r7, #8]
 801abfa:	2224      	movs	r2, #36	@ 0x24
 801abfc:	2100      	movs	r1, #0
 801abfe:	5499      	strb	r1, [r3, r2]
 801ac00:	e00b      	b.n	801ac1a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801ac02:	68bb      	ldr	r3, [r7, #8]
 801ac04:	2224      	movs	r2, #36	@ 0x24
 801ac06:	2100      	movs	r1, #0
 801ac08:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801ac0a:	68bb      	ldr	r3, [r7, #8]
 801ac0c:	6a1b      	ldr	r3, [r3, #32]
 801ac0e:	228c      	movs	r2, #140	@ 0x8c
 801ac10:	18ba      	adds	r2, r7, r2
 801ac12:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801ac14:	68bb      	ldr	r3, [r7, #8]
 801ac16:	2200      	movs	r2, #0
 801ac18:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801ac1a:	68bb      	ldr	r3, [r7, #8]
 801ac1c:	785b      	ldrb	r3, [r3, #1]
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d000      	beq.n	801ac24 <HAL_PCD_EP_DB_Transmit+0x2b0>
 801ac22:	e06d      	b.n	801ad00 <HAL_PCD_EP_DB_Transmit+0x38c>
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	681b      	ldr	r3, [r3, #0]
 801ac28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	2250      	movs	r2, #80	@ 0x50
 801ac30:	5a9b      	ldrh	r3, [r3, r2]
 801ac32:	b29b      	uxth	r3, r3
 801ac34:	001a      	movs	r2, r3
 801ac36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ac38:	189b      	adds	r3, r3, r2
 801ac3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ac3c:	68bb      	ldr	r3, [r7, #8]
 801ac3e:	781b      	ldrb	r3, [r3, #0]
 801ac40:	00da      	lsls	r2, r3, #3
 801ac42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ac44:	18d3      	adds	r3, r2, r3
 801ac46:	4a29      	ldr	r2, [pc, #164]	@ (801acec <HAL_PCD_EP_DB_Transmit+0x378>)
 801ac48:	4694      	mov	ip, r2
 801ac4a:	4463      	add	r3, ip
 801ac4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ac4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac50:	881b      	ldrh	r3, [r3, #0]
 801ac52:	b29b      	uxth	r3, r3
 801ac54:	059b      	lsls	r3, r3, #22
 801ac56:	0d9b      	lsrs	r3, r3, #22
 801ac58:	b29a      	uxth	r2, r3
 801ac5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac5c:	801a      	strh	r2, [r3, #0]
 801ac5e:	228c      	movs	r2, #140	@ 0x8c
 801ac60:	18bb      	adds	r3, r7, r2
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	2b3e      	cmp	r3, #62	@ 0x3e
 801ac66:	d91a      	bls.n	801ac9e <HAL_PCD_EP_DB_Transmit+0x32a>
 801ac68:	18bb      	adds	r3, r7, r2
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	095b      	lsrs	r3, r3, #5
 801ac6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ac70:	18bb      	adds	r3, r7, r2
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	221f      	movs	r2, #31
 801ac76:	4013      	ands	r3, r2
 801ac78:	d102      	bne.n	801ac80 <HAL_PCD_EP_DB_Transmit+0x30c>
 801ac7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ac7c:	3b01      	subs	r3, #1
 801ac7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ac80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac82:	881b      	ldrh	r3, [r3, #0]
 801ac84:	b29a      	uxth	r2, r3
 801ac86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ac88:	b29b      	uxth	r3, r3
 801ac8a:	029b      	lsls	r3, r3, #10
 801ac8c:	b29b      	uxth	r3, r3
 801ac8e:	4313      	orrs	r3, r2
 801ac90:	b29b      	uxth	r3, r3
 801ac92:	4a17      	ldr	r2, [pc, #92]	@ (801acf0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801ac94:	4313      	orrs	r3, r2
 801ac96:	b29a      	uxth	r2, r3
 801ac98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac9a:	801a      	strh	r2, [r3, #0]
 801ac9c:	e04f      	b.n	801ad3e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ac9e:	238c      	movs	r3, #140	@ 0x8c
 801aca0:	18fb      	adds	r3, r7, r3
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	2b00      	cmp	r3, #0
 801aca6:	d108      	bne.n	801acba <HAL_PCD_EP_DB_Transmit+0x346>
 801aca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801acaa:	881b      	ldrh	r3, [r3, #0]
 801acac:	b29b      	uxth	r3, r3
 801acae:	4a10      	ldr	r2, [pc, #64]	@ (801acf0 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801acb0:	4313      	orrs	r3, r2
 801acb2:	b29a      	uxth	r2, r3
 801acb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801acb6:	801a      	strh	r2, [r3, #0]
 801acb8:	e041      	b.n	801ad3e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801acba:	228c      	movs	r2, #140	@ 0x8c
 801acbc:	18bb      	adds	r3, r7, r2
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	085b      	lsrs	r3, r3, #1
 801acc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 801acc4:	18bb      	adds	r3, r7, r2
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	2201      	movs	r2, #1
 801acca:	4013      	ands	r3, r2
 801accc:	d002      	beq.n	801acd4 <HAL_PCD_EP_DB_Transmit+0x360>
 801acce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801acd0:	3301      	adds	r3, #1
 801acd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 801acd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801acd6:	881b      	ldrh	r3, [r3, #0]
 801acd8:	b29a      	uxth	r2, r3
 801acda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801acdc:	b29b      	uxth	r3, r3
 801acde:	029b      	lsls	r3, r3, #10
 801ace0:	b29b      	uxth	r3, r3
 801ace2:	4313      	orrs	r3, r2
 801ace4:	b29a      	uxth	r2, r3
 801ace6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ace8:	801a      	strh	r2, [r3, #0]
 801acea:	e028      	b.n	801ad3e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801acec:	00000402 	.word	0x00000402
 801acf0:	ffff8000 	.word	0xffff8000
 801acf4:	00000406 	.word	0x00000406
 801acf8:	ffff8f8f 	.word	0xffff8f8f
 801acfc:	ffffc080 	.word	0xffffc080
 801ad00:	68bb      	ldr	r3, [r7, #8]
 801ad02:	785b      	ldrb	r3, [r3, #1]
 801ad04:	2b01      	cmp	r3, #1
 801ad06:	d11a      	bne.n	801ad3e <HAL_PCD_EP_DB_Transmit+0x3ca>
 801ad08:	68fb      	ldr	r3, [r7, #12]
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	647b      	str	r3, [r7, #68]	@ 0x44
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	2250      	movs	r2, #80	@ 0x50
 801ad14:	5a9b      	ldrh	r3, [r3, r2]
 801ad16:	b29b      	uxth	r3, r3
 801ad18:	001a      	movs	r2, r3
 801ad1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ad1c:	189b      	adds	r3, r3, r2
 801ad1e:	647b      	str	r3, [r7, #68]	@ 0x44
 801ad20:	68bb      	ldr	r3, [r7, #8]
 801ad22:	781b      	ldrb	r3, [r3, #0]
 801ad24:	00da      	lsls	r2, r3, #3
 801ad26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ad28:	18d3      	adds	r3, r2, r3
 801ad2a:	4adb      	ldr	r2, [pc, #876]	@ (801b098 <HAL_PCD_EP_DB_Transmit+0x724>)
 801ad2c:	4694      	mov	ip, r2
 801ad2e:	4463      	add	r3, ip
 801ad30:	643b      	str	r3, [r7, #64]	@ 0x40
 801ad32:	238c      	movs	r3, #140	@ 0x8c
 801ad34:	18fb      	adds	r3, r7, r3
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	b29a      	uxth	r2, r3
 801ad3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ad3c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801ad3e:	68fb      	ldr	r3, [r7, #12]
 801ad40:	6818      	ldr	r0, [r3, #0]
 801ad42:	68bb      	ldr	r3, [r7, #8]
 801ad44:	6959      	ldr	r1, [r3, #20]
 801ad46:	68bb      	ldr	r3, [r7, #8]
 801ad48:	891a      	ldrh	r2, [r3, #8]
 801ad4a:	238c      	movs	r3, #140	@ 0x8c
 801ad4c:	18fb      	adds	r3, r7, r3
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	b29b      	uxth	r3, r3
 801ad52:	f006 fba3 	bl	802149c <USB_WritePMA>
 801ad56:	e1ea      	b.n	801b12e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	2250      	movs	r2, #80	@ 0x50
 801ad5e:	5a9b      	ldrh	r3, [r3, r2]
 801ad60:	b29b      	uxth	r3, r3
 801ad62:	001a      	movs	r2, r3
 801ad64:	68bb      	ldr	r3, [r7, #8]
 801ad66:	781b      	ldrb	r3, [r3, #0]
 801ad68:	00db      	lsls	r3, r3, #3
 801ad6a:	18d2      	adds	r2, r2, r3
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	18d3      	adds	r3, r2, r3
 801ad72:	4aca      	ldr	r2, [pc, #808]	@ (801b09c <HAL_PCD_EP_DB_Transmit+0x728>)
 801ad74:	4694      	mov	ip, r2
 801ad76:	4463      	add	r3, ip
 801ad78:	881a      	ldrh	r2, [r3, #0]
 801ad7a:	2186      	movs	r1, #134	@ 0x86
 801ad7c:	187b      	adds	r3, r7, r1
 801ad7e:	0592      	lsls	r2, r2, #22
 801ad80:	0d92      	lsrs	r2, r2, #22
 801ad82:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801ad84:	68bb      	ldr	r3, [r7, #8]
 801ad86:	699a      	ldr	r2, [r3, #24]
 801ad88:	187b      	adds	r3, r7, r1
 801ad8a:	881b      	ldrh	r3, [r3, #0]
 801ad8c:	429a      	cmp	r2, r3
 801ad8e:	d307      	bcc.n	801ada0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801ad90:	68bb      	ldr	r3, [r7, #8]
 801ad92:	699a      	ldr	r2, [r3, #24]
 801ad94:	187b      	adds	r3, r7, r1
 801ad96:	881b      	ldrh	r3, [r3, #0]
 801ad98:	1ad2      	subs	r2, r2, r3
 801ad9a:	68bb      	ldr	r3, [r7, #8]
 801ad9c:	619a      	str	r2, [r3, #24]
 801ad9e:	e002      	b.n	801ada6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 801ada0:	68bb      	ldr	r3, [r7, #8]
 801ada2:	2200      	movs	r2, #0
 801ada4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801ada6:	68bb      	ldr	r3, [r7, #8]
 801ada8:	699b      	ldr	r3, [r3, #24]
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d000      	beq.n	801adb0 <HAL_PCD_EP_DB_Transmit+0x43c>
 801adae:	e0bb      	b.n	801af28 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801adb0:	68bb      	ldr	r3, [r7, #8]
 801adb2:	785b      	ldrb	r3, [r3, #1]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d125      	bne.n	801ae04 <HAL_PCD_EP_DB_Transmit+0x490>
 801adb8:	68fb      	ldr	r3, [r7, #12]
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801adbe:	68fb      	ldr	r3, [r7, #12]
 801adc0:	681b      	ldr	r3, [r3, #0]
 801adc2:	2250      	movs	r2, #80	@ 0x50
 801adc4:	5a9b      	ldrh	r3, [r3, r2]
 801adc6:	b29b      	uxth	r3, r3
 801adc8:	001a      	movs	r2, r3
 801adca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801adcc:	189b      	adds	r3, r3, r2
 801adce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801add0:	68bb      	ldr	r3, [r7, #8]
 801add2:	781b      	ldrb	r3, [r3, #0]
 801add4:	00da      	lsls	r2, r3, #3
 801add6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801add8:	18d3      	adds	r3, r2, r3
 801adda:	4aaf      	ldr	r2, [pc, #700]	@ (801b098 <HAL_PCD_EP_DB_Transmit+0x724>)
 801addc:	4694      	mov	ip, r2
 801adde:	4463      	add	r3, ip
 801ade0:	67bb      	str	r3, [r7, #120]	@ 0x78
 801ade2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ade4:	881b      	ldrh	r3, [r3, #0]
 801ade6:	b29b      	uxth	r3, r3
 801ade8:	059b      	lsls	r3, r3, #22
 801adea:	0d9b      	lsrs	r3, r3, #22
 801adec:	b29a      	uxth	r2, r3
 801adee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801adf0:	801a      	strh	r2, [r3, #0]
 801adf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801adf4:	881b      	ldrh	r3, [r3, #0]
 801adf6:	b29b      	uxth	r3, r3
 801adf8:	4aa9      	ldr	r2, [pc, #676]	@ (801b0a0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801adfa:	4313      	orrs	r3, r2
 801adfc:	b29a      	uxth	r2, r3
 801adfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ae00:	801a      	strh	r2, [r3, #0]
 801ae02:	e01b      	b.n	801ae3c <HAL_PCD_EP_DB_Transmit+0x4c8>
 801ae04:	68bb      	ldr	r3, [r7, #8]
 801ae06:	785b      	ldrb	r3, [r3, #1]
 801ae08:	2b01      	cmp	r3, #1
 801ae0a:	d117      	bne.n	801ae3c <HAL_PCD_EP_DB_Transmit+0x4c8>
 801ae0c:	68fb      	ldr	r3, [r7, #12]
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	667b      	str	r3, [r7, #100]	@ 0x64
 801ae12:	68fb      	ldr	r3, [r7, #12]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	2250      	movs	r2, #80	@ 0x50
 801ae18:	5a9b      	ldrh	r3, [r3, r2]
 801ae1a:	b29b      	uxth	r3, r3
 801ae1c:	001a      	movs	r2, r3
 801ae1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ae20:	189b      	adds	r3, r3, r2
 801ae22:	667b      	str	r3, [r7, #100]	@ 0x64
 801ae24:	68bb      	ldr	r3, [r7, #8]
 801ae26:	781b      	ldrb	r3, [r3, #0]
 801ae28:	00da      	lsls	r2, r3, #3
 801ae2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ae2c:	18d3      	adds	r3, r2, r3
 801ae2e:	4a9a      	ldr	r2, [pc, #616]	@ (801b098 <HAL_PCD_EP_DB_Transmit+0x724>)
 801ae30:	4694      	mov	ip, r2
 801ae32:	4463      	add	r3, ip
 801ae34:	663b      	str	r3, [r7, #96]	@ 0x60
 801ae36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ae38:	2200      	movs	r2, #0
 801ae3a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801ae3c:	68fb      	ldr	r3, [r7, #12]
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	677b      	str	r3, [r7, #116]	@ 0x74
 801ae42:	68bb      	ldr	r3, [r7, #8]
 801ae44:	785b      	ldrb	r3, [r3, #1]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d12b      	bne.n	801aea2 <HAL_PCD_EP_DB_Transmit+0x52e>
 801ae4a:	68fb      	ldr	r3, [r7, #12]
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	2250      	movs	r2, #80	@ 0x50
 801ae56:	5a9b      	ldrh	r3, [r3, r2]
 801ae58:	b29b      	uxth	r3, r3
 801ae5a:	001a      	movs	r2, r3
 801ae5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ae5e:	189b      	adds	r3, r3, r2
 801ae60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ae62:	68bb      	ldr	r3, [r7, #8]
 801ae64:	781b      	ldrb	r3, [r3, #0]
 801ae66:	00da      	lsls	r2, r3, #3
 801ae68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ae6a:	18d3      	adds	r3, r2, r3
 801ae6c:	4a8b      	ldr	r2, [pc, #556]	@ (801b09c <HAL_PCD_EP_DB_Transmit+0x728>)
 801ae6e:	4694      	mov	ip, r2
 801ae70:	4463      	add	r3, ip
 801ae72:	2180      	movs	r1, #128	@ 0x80
 801ae74:	187a      	adds	r2, r7, r1
 801ae76:	6013      	str	r3, [r2, #0]
 801ae78:	187b      	adds	r3, r7, r1
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	881b      	ldrh	r3, [r3, #0]
 801ae7e:	b29b      	uxth	r3, r3
 801ae80:	059b      	lsls	r3, r3, #22
 801ae82:	0d9b      	lsrs	r3, r3, #22
 801ae84:	b29a      	uxth	r2, r3
 801ae86:	187b      	adds	r3, r7, r1
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	801a      	strh	r2, [r3, #0]
 801ae8c:	187b      	adds	r3, r7, r1
 801ae8e:	681b      	ldr	r3, [r3, #0]
 801ae90:	881b      	ldrh	r3, [r3, #0]
 801ae92:	b29b      	uxth	r3, r3
 801ae94:	4a82      	ldr	r2, [pc, #520]	@ (801b0a0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801ae96:	4313      	orrs	r3, r2
 801ae98:	b29a      	uxth	r2, r3
 801ae9a:	187b      	adds	r3, r7, r1
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	801a      	strh	r2, [r3, #0]
 801aea0:	e018      	b.n	801aed4 <HAL_PCD_EP_DB_Transmit+0x560>
 801aea2:	68bb      	ldr	r3, [r7, #8]
 801aea4:	785b      	ldrb	r3, [r3, #1]
 801aea6:	2b01      	cmp	r3, #1
 801aea8:	d114      	bne.n	801aed4 <HAL_PCD_EP_DB_Transmit+0x560>
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	2250      	movs	r2, #80	@ 0x50
 801aeb0:	5a9b      	ldrh	r3, [r3, r2]
 801aeb2:	b29b      	uxth	r3, r3
 801aeb4:	001a      	movs	r2, r3
 801aeb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801aeb8:	189b      	adds	r3, r3, r2
 801aeba:	677b      	str	r3, [r7, #116]	@ 0x74
 801aebc:	68bb      	ldr	r3, [r7, #8]
 801aebe:	781b      	ldrb	r3, [r3, #0]
 801aec0:	00da      	lsls	r2, r3, #3
 801aec2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801aec4:	18d3      	adds	r3, r2, r3
 801aec6:	4a75      	ldr	r2, [pc, #468]	@ (801b09c <HAL_PCD_EP_DB_Transmit+0x728>)
 801aec8:	4694      	mov	ip, r2
 801aeca:	4463      	add	r3, ip
 801aecc:	673b      	str	r3, [r7, #112]	@ 0x70
 801aece:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801aed0:	2200      	movs	r2, #0
 801aed2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801aed4:	68bb      	ldr	r3, [r7, #8]
 801aed6:	781a      	ldrb	r2, [r3, #0]
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	0011      	movs	r1, r2
 801aedc:	0018      	movs	r0, r3
 801aede:	f008 fb6f 	bl	80235c0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801aee2:	1dbb      	adds	r3, r7, #6
 801aee4:	881a      	ldrh	r2, [r3, #0]
 801aee6:	2380      	movs	r3, #128	@ 0x80
 801aee8:	01db      	lsls	r3, r3, #7
 801aeea:	4013      	ands	r3, r2
 801aeec:	d000      	beq.n	801aef0 <HAL_PCD_EP_DB_Transmit+0x57c>
 801aeee:	e11e      	b.n	801b12e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801aef0:	68fb      	ldr	r3, [r7, #12]
 801aef2:	681b      	ldr	r3, [r3, #0]
 801aef4:	001a      	movs	r2, r3
 801aef6:	68bb      	ldr	r3, [r7, #8]
 801aef8:	781b      	ldrb	r3, [r3, #0]
 801aefa:	009b      	lsls	r3, r3, #2
 801aefc:	18d3      	adds	r3, r2, r3
 801aefe:	881b      	ldrh	r3, [r3, #0]
 801af00:	b29a      	uxth	r2, r3
 801af02:	2088      	movs	r0, #136	@ 0x88
 801af04:	183b      	adds	r3, r7, r0
 801af06:	4967      	ldr	r1, [pc, #412]	@ (801b0a4 <HAL_PCD_EP_DB_Transmit+0x730>)
 801af08:	400a      	ands	r2, r1
 801af0a:	801a      	strh	r2, [r3, #0]
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	681b      	ldr	r3, [r3, #0]
 801af10:	001a      	movs	r2, r3
 801af12:	68bb      	ldr	r3, [r7, #8]
 801af14:	781b      	ldrb	r3, [r3, #0]
 801af16:	009b      	lsls	r3, r3, #2
 801af18:	18d3      	adds	r3, r2, r3
 801af1a:	183a      	adds	r2, r7, r0
 801af1c:	8812      	ldrh	r2, [r2, #0]
 801af1e:	4962      	ldr	r1, [pc, #392]	@ (801b0a8 <HAL_PCD_EP_DB_Transmit+0x734>)
 801af20:	430a      	orrs	r2, r1
 801af22:	b292      	uxth	r2, r2
 801af24:	801a      	strh	r2, [r3, #0]
 801af26:	e102      	b.n	801b12e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801af28:	1dbb      	adds	r3, r7, #6
 801af2a:	881a      	ldrh	r2, [r3, #0]
 801af2c:	2380      	movs	r3, #128	@ 0x80
 801af2e:	01db      	lsls	r3, r3, #7
 801af30:	4013      	ands	r3, r2
 801af32:	d11a      	bne.n	801af6a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801af34:	68fb      	ldr	r3, [r7, #12]
 801af36:	681b      	ldr	r3, [r3, #0]
 801af38:	001a      	movs	r2, r3
 801af3a:	68bb      	ldr	r3, [r7, #8]
 801af3c:	781b      	ldrb	r3, [r3, #0]
 801af3e:	009b      	lsls	r3, r3, #2
 801af40:	18d3      	adds	r3, r2, r3
 801af42:	881b      	ldrh	r3, [r3, #0]
 801af44:	b29a      	uxth	r2, r3
 801af46:	204e      	movs	r0, #78	@ 0x4e
 801af48:	183b      	adds	r3, r7, r0
 801af4a:	4956      	ldr	r1, [pc, #344]	@ (801b0a4 <HAL_PCD_EP_DB_Transmit+0x730>)
 801af4c:	400a      	ands	r2, r1
 801af4e:	801a      	strh	r2, [r3, #0]
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	001a      	movs	r2, r3
 801af56:	68bb      	ldr	r3, [r7, #8]
 801af58:	781b      	ldrb	r3, [r3, #0]
 801af5a:	009b      	lsls	r3, r3, #2
 801af5c:	18d3      	adds	r3, r2, r3
 801af5e:	183a      	adds	r2, r7, r0
 801af60:	8812      	ldrh	r2, [r2, #0]
 801af62:	4951      	ldr	r1, [pc, #324]	@ (801b0a8 <HAL_PCD_EP_DB_Transmit+0x734>)
 801af64:	430a      	orrs	r2, r1
 801af66:	b292      	uxth	r2, r2
 801af68:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801af6a:	68bb      	ldr	r3, [r7, #8]
 801af6c:	2224      	movs	r2, #36	@ 0x24
 801af6e:	5c9b      	ldrb	r3, [r3, r2]
 801af70:	2b01      	cmp	r3, #1
 801af72:	d000      	beq.n	801af76 <HAL_PCD_EP_DB_Transmit+0x602>
 801af74:	e0db      	b.n	801b12e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801af76:	68bb      	ldr	r3, [r7, #8]
 801af78:	695a      	ldr	r2, [r3, #20]
 801af7a:	2186      	movs	r1, #134	@ 0x86
 801af7c:	187b      	adds	r3, r7, r1
 801af7e:	881b      	ldrh	r3, [r3, #0]
 801af80:	18d2      	adds	r2, r2, r3
 801af82:	68bb      	ldr	r3, [r7, #8]
 801af84:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801af86:	68bb      	ldr	r3, [r7, #8]
 801af88:	69da      	ldr	r2, [r3, #28]
 801af8a:	187b      	adds	r3, r7, r1
 801af8c:	881b      	ldrh	r3, [r3, #0]
 801af8e:	18d2      	adds	r2, r2, r3
 801af90:	68bb      	ldr	r3, [r7, #8]
 801af92:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801af94:	68bb      	ldr	r3, [r7, #8]
 801af96:	6a1a      	ldr	r2, [r3, #32]
 801af98:	68bb      	ldr	r3, [r7, #8]
 801af9a:	691b      	ldr	r3, [r3, #16]
 801af9c:	429a      	cmp	r2, r3
 801af9e:	d30c      	bcc.n	801afba <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801afa0:	68bb      	ldr	r3, [r7, #8]
 801afa2:	691b      	ldr	r3, [r3, #16]
 801afa4:	218c      	movs	r1, #140	@ 0x8c
 801afa6:	187a      	adds	r2, r7, r1
 801afa8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801afaa:	68bb      	ldr	r3, [r7, #8]
 801afac:	6a1a      	ldr	r2, [r3, #32]
 801afae:	187b      	adds	r3, r7, r1
 801afb0:	681b      	ldr	r3, [r3, #0]
 801afb2:	1ad2      	subs	r2, r2, r3
 801afb4:	68bb      	ldr	r3, [r7, #8]
 801afb6:	621a      	str	r2, [r3, #32]
 801afb8:	e01a      	b.n	801aff0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 801afba:	68bb      	ldr	r3, [r7, #8]
 801afbc:	6a1b      	ldr	r3, [r3, #32]
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	d10a      	bne.n	801afd8 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801afc2:	2386      	movs	r3, #134	@ 0x86
 801afc4:	18fb      	adds	r3, r7, r3
 801afc6:	881b      	ldrh	r3, [r3, #0]
 801afc8:	228c      	movs	r2, #140	@ 0x8c
 801afca:	18ba      	adds	r2, r7, r2
 801afcc:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801afce:	68bb      	ldr	r3, [r7, #8]
 801afd0:	2224      	movs	r2, #36	@ 0x24
 801afd2:	2100      	movs	r1, #0
 801afd4:	5499      	strb	r1, [r3, r2]
 801afd6:	e00b      	b.n	801aff0 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 801afd8:	68bb      	ldr	r3, [r7, #8]
 801afda:	6a1b      	ldr	r3, [r3, #32]
 801afdc:	228c      	movs	r2, #140	@ 0x8c
 801afde:	18ba      	adds	r2, r7, r2
 801afe0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801afe2:	68bb      	ldr	r3, [r7, #8]
 801afe4:	2200      	movs	r2, #0
 801afe6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 801afe8:	68bb      	ldr	r3, [r7, #8]
 801afea:	2224      	movs	r2, #36	@ 0x24
 801afec:	2100      	movs	r1, #0
 801afee:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801aff0:	68fb      	ldr	r3, [r7, #12]
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	657b      	str	r3, [r7, #84]	@ 0x54
 801aff6:	68bb      	ldr	r3, [r7, #8]
 801aff8:	785b      	ldrb	r3, [r3, #1]
 801affa:	2b00      	cmp	r3, #0
 801affc:	d000      	beq.n	801b000 <HAL_PCD_EP_DB_Transmit+0x68c>
 801affe:	e06e      	b.n	801b0de <HAL_PCD_EP_DB_Transmit+0x76a>
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	681b      	ldr	r3, [r3, #0]
 801b004:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b006:	68fb      	ldr	r3, [r7, #12]
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	2250      	movs	r2, #80	@ 0x50
 801b00c:	5a9b      	ldrh	r3, [r3, r2]
 801b00e:	b29b      	uxth	r3, r3
 801b010:	001a      	movs	r2, r3
 801b012:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b014:	189b      	adds	r3, r3, r2
 801b016:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b018:	68bb      	ldr	r3, [r7, #8]
 801b01a:	781b      	ldrb	r3, [r3, #0]
 801b01c:	00da      	lsls	r2, r3, #3
 801b01e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b020:	18d3      	adds	r3, r2, r3
 801b022:	4a1e      	ldr	r2, [pc, #120]	@ (801b09c <HAL_PCD_EP_DB_Transmit+0x728>)
 801b024:	4694      	mov	ip, r2
 801b026:	4463      	add	r3, ip
 801b028:	65bb      	str	r3, [r7, #88]	@ 0x58
 801b02a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b02c:	881b      	ldrh	r3, [r3, #0]
 801b02e:	b29b      	uxth	r3, r3
 801b030:	059b      	lsls	r3, r3, #22
 801b032:	0d9b      	lsrs	r3, r3, #22
 801b034:	b29a      	uxth	r2, r3
 801b036:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b038:	801a      	strh	r2, [r3, #0]
 801b03a:	228c      	movs	r2, #140	@ 0x8c
 801b03c:	18bb      	adds	r3, r7, r2
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	2b3e      	cmp	r3, #62	@ 0x3e
 801b042:	d91a      	bls.n	801b07a <HAL_PCD_EP_DB_Transmit+0x706>
 801b044:	18bb      	adds	r3, r7, r2
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	095b      	lsrs	r3, r3, #5
 801b04a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b04c:	18bb      	adds	r3, r7, r2
 801b04e:	681b      	ldr	r3, [r3, #0]
 801b050:	221f      	movs	r2, #31
 801b052:	4013      	ands	r3, r2
 801b054:	d102      	bne.n	801b05c <HAL_PCD_EP_DB_Transmit+0x6e8>
 801b056:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b058:	3b01      	subs	r3, #1
 801b05a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b05c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b05e:	881b      	ldrh	r3, [r3, #0]
 801b060:	b29a      	uxth	r2, r3
 801b062:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b064:	b29b      	uxth	r3, r3
 801b066:	029b      	lsls	r3, r3, #10
 801b068:	b29b      	uxth	r3, r3
 801b06a:	4313      	orrs	r3, r2
 801b06c:	b29b      	uxth	r3, r3
 801b06e:	4a0c      	ldr	r2, [pc, #48]	@ (801b0a0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801b070:	4313      	orrs	r3, r2
 801b072:	b29a      	uxth	r2, r3
 801b074:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b076:	801a      	strh	r2, [r3, #0]
 801b078:	e04d      	b.n	801b116 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801b07a:	238c      	movs	r3, #140	@ 0x8c
 801b07c:	18fb      	adds	r3, r7, r3
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	2b00      	cmp	r3, #0
 801b082:	d113      	bne.n	801b0ac <HAL_PCD_EP_DB_Transmit+0x738>
 801b084:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b086:	881b      	ldrh	r3, [r3, #0]
 801b088:	b29b      	uxth	r3, r3
 801b08a:	4a05      	ldr	r2, [pc, #20]	@ (801b0a0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801b08c:	4313      	orrs	r3, r2
 801b08e:	b29a      	uxth	r2, r3
 801b090:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b092:	801a      	strh	r2, [r3, #0]
 801b094:	e03f      	b.n	801b116 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801b096:	46c0      	nop			@ (mov r8, r8)
 801b098:	00000402 	.word	0x00000402
 801b09c:	00000406 	.word	0x00000406
 801b0a0:	ffff8000 	.word	0xffff8000
 801b0a4:	ffff8f8f 	.word	0xffff8f8f
 801b0a8:	ffffc080 	.word	0xffffc080
 801b0ac:	228c      	movs	r2, #140	@ 0x8c
 801b0ae:	18bb      	adds	r3, r7, r2
 801b0b0:	681b      	ldr	r3, [r3, #0]
 801b0b2:	085b      	lsrs	r3, r3, #1
 801b0b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b0b6:	18bb      	adds	r3, r7, r2
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	2201      	movs	r2, #1
 801b0bc:	4013      	ands	r3, r2
 801b0be:	d002      	beq.n	801b0c6 <HAL_PCD_EP_DB_Transmit+0x752>
 801b0c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b0c2:	3301      	adds	r3, #1
 801b0c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b0c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b0c8:	881b      	ldrh	r3, [r3, #0]
 801b0ca:	b29a      	uxth	r2, r3
 801b0cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b0ce:	b29b      	uxth	r3, r3
 801b0d0:	029b      	lsls	r3, r3, #10
 801b0d2:	b29b      	uxth	r3, r3
 801b0d4:	4313      	orrs	r3, r2
 801b0d6:	b29a      	uxth	r2, r3
 801b0d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b0da:	801a      	strh	r2, [r3, #0]
 801b0dc:	e01b      	b.n	801b116 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801b0de:	68bb      	ldr	r3, [r7, #8]
 801b0e0:	785b      	ldrb	r3, [r3, #1]
 801b0e2:	2b01      	cmp	r3, #1
 801b0e4:	d117      	bne.n	801b116 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	2250      	movs	r2, #80	@ 0x50
 801b0ec:	5a9b      	ldrh	r3, [r3, r2]
 801b0ee:	b29b      	uxth	r3, r3
 801b0f0:	001a      	movs	r2, r3
 801b0f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b0f4:	189b      	adds	r3, r3, r2
 801b0f6:	657b      	str	r3, [r7, #84]	@ 0x54
 801b0f8:	68bb      	ldr	r3, [r7, #8]
 801b0fa:	781b      	ldrb	r3, [r3, #0]
 801b0fc:	00da      	lsls	r2, r3, #3
 801b0fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b100:	18d3      	adds	r3, r2, r3
 801b102:	4a21      	ldr	r2, [pc, #132]	@ (801b188 <HAL_PCD_EP_DB_Transmit+0x814>)
 801b104:	4694      	mov	ip, r2
 801b106:	4463      	add	r3, ip
 801b108:	653b      	str	r3, [r7, #80]	@ 0x50
 801b10a:	238c      	movs	r3, #140	@ 0x8c
 801b10c:	18fb      	adds	r3, r7, r3
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	b29a      	uxth	r2, r3
 801b112:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b114:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801b116:	68fb      	ldr	r3, [r7, #12]
 801b118:	6818      	ldr	r0, [r3, #0]
 801b11a:	68bb      	ldr	r3, [r7, #8]
 801b11c:	6959      	ldr	r1, [r3, #20]
 801b11e:	68bb      	ldr	r3, [r7, #8]
 801b120:	895a      	ldrh	r2, [r3, #10]
 801b122:	238c      	movs	r3, #140	@ 0x8c
 801b124:	18fb      	adds	r3, r7, r3
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	b29b      	uxth	r3, r3
 801b12a:	f006 f9b7 	bl	802149c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	681b      	ldr	r3, [r3, #0]
 801b132:	001a      	movs	r2, r3
 801b134:	68bb      	ldr	r3, [r7, #8]
 801b136:	781b      	ldrb	r3, [r3, #0]
 801b138:	009b      	lsls	r3, r3, #2
 801b13a:	18d3      	adds	r3, r2, r3
 801b13c:	881b      	ldrh	r3, [r3, #0]
 801b13e:	b29a      	uxth	r2, r3
 801b140:	2014      	movs	r0, #20
 801b142:	183b      	adds	r3, r7, r0
 801b144:	4911      	ldr	r1, [pc, #68]	@ (801b18c <HAL_PCD_EP_DB_Transmit+0x818>)
 801b146:	400a      	ands	r2, r1
 801b148:	801a      	strh	r2, [r3, #0]
 801b14a:	183b      	adds	r3, r7, r0
 801b14c:	183a      	adds	r2, r7, r0
 801b14e:	8812      	ldrh	r2, [r2, #0]
 801b150:	2110      	movs	r1, #16
 801b152:	404a      	eors	r2, r1
 801b154:	801a      	strh	r2, [r3, #0]
 801b156:	183b      	adds	r3, r7, r0
 801b158:	183a      	adds	r2, r7, r0
 801b15a:	8812      	ldrh	r2, [r2, #0]
 801b15c:	2120      	movs	r1, #32
 801b15e:	404a      	eors	r2, r1
 801b160:	801a      	strh	r2, [r3, #0]
 801b162:	68fb      	ldr	r3, [r7, #12]
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	001a      	movs	r2, r3
 801b168:	68bb      	ldr	r3, [r7, #8]
 801b16a:	781b      	ldrb	r3, [r3, #0]
 801b16c:	009b      	lsls	r3, r3, #2
 801b16e:	18d3      	adds	r3, r2, r3
 801b170:	183a      	adds	r2, r7, r0
 801b172:	8812      	ldrh	r2, [r2, #0]
 801b174:	4906      	ldr	r1, [pc, #24]	@ (801b190 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801b176:	430a      	orrs	r2, r1
 801b178:	b292      	uxth	r2, r2
 801b17a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 801b17c:	2300      	movs	r3, #0
}
 801b17e:	0018      	movs	r0, r3
 801b180:	46bd      	mov	sp, r7
 801b182:	b024      	add	sp, #144	@ 0x90
 801b184:	bd80      	pop	{r7, pc}
 801b186:	46c0      	nop			@ (mov r8, r8)
 801b188:	00000406 	.word	0x00000406
 801b18c:	ffff8fbf 	.word	0xffff8fbf
 801b190:	ffff8080 	.word	0xffff8080

0801b194 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801b194:	b590      	push	{r4, r7, lr}
 801b196:	b087      	sub	sp, #28
 801b198:	af00      	add	r7, sp, #0
 801b19a:	60f8      	str	r0, [r7, #12]
 801b19c:	0008      	movs	r0, r1
 801b19e:	0011      	movs	r1, r2
 801b1a0:	607b      	str	r3, [r7, #4]
 801b1a2:	240a      	movs	r4, #10
 801b1a4:	193b      	adds	r3, r7, r4
 801b1a6:	1c02      	adds	r2, r0, #0
 801b1a8:	801a      	strh	r2, [r3, #0]
 801b1aa:	2308      	movs	r3, #8
 801b1ac:	18fb      	adds	r3, r7, r3
 801b1ae:	1c0a      	adds	r2, r1, #0
 801b1b0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801b1b2:	0021      	movs	r1, r4
 801b1b4:	187b      	adds	r3, r7, r1
 801b1b6:	881b      	ldrh	r3, [r3, #0]
 801b1b8:	2280      	movs	r2, #128	@ 0x80
 801b1ba:	4013      	ands	r3, r2
 801b1bc:	b29b      	uxth	r3, r3
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d00c      	beq.n	801b1dc <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801b1c2:	187b      	adds	r3, r7, r1
 801b1c4:	881b      	ldrh	r3, [r3, #0]
 801b1c6:	2207      	movs	r2, #7
 801b1c8:	4013      	ands	r3, r2
 801b1ca:	1c5a      	adds	r2, r3, #1
 801b1cc:	0013      	movs	r3, r2
 801b1ce:	009b      	lsls	r3, r3, #2
 801b1d0:	189b      	adds	r3, r3, r2
 801b1d2:	00db      	lsls	r3, r3, #3
 801b1d4:	68fa      	ldr	r2, [r7, #12]
 801b1d6:	18d3      	adds	r3, r2, r3
 801b1d8:	617b      	str	r3, [r7, #20]
 801b1da:	e00b      	b.n	801b1f4 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801b1dc:	230a      	movs	r3, #10
 801b1de:	18fb      	adds	r3, r7, r3
 801b1e0:	881a      	ldrh	r2, [r3, #0]
 801b1e2:	0013      	movs	r3, r2
 801b1e4:	009b      	lsls	r3, r3, #2
 801b1e6:	189b      	adds	r3, r3, r2
 801b1e8:	00db      	lsls	r3, r3, #3
 801b1ea:	3369      	adds	r3, #105	@ 0x69
 801b1ec:	33ff      	adds	r3, #255	@ 0xff
 801b1ee:	68fa      	ldr	r2, [r7, #12]
 801b1f0:	18d3      	adds	r3, r2, r3
 801b1f2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801b1f4:	2308      	movs	r3, #8
 801b1f6:	18fb      	adds	r3, r7, r3
 801b1f8:	881b      	ldrh	r3, [r3, #0]
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d107      	bne.n	801b20e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801b1fe:	697b      	ldr	r3, [r7, #20]
 801b200:	2200      	movs	r2, #0
 801b202:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	b29a      	uxth	r2, r3
 801b208:	697b      	ldr	r3, [r7, #20]
 801b20a:	80da      	strh	r2, [r3, #6]
 801b20c:	e00b      	b.n	801b226 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801b20e:	697b      	ldr	r3, [r7, #20]
 801b210:	2201      	movs	r2, #1
 801b212:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	b29a      	uxth	r2, r3
 801b218:	697b      	ldr	r3, [r7, #20]
 801b21a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	0c1b      	lsrs	r3, r3, #16
 801b220:	b29a      	uxth	r2, r3
 801b222:	697b      	ldr	r3, [r7, #20]
 801b224:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801b226:	2300      	movs	r3, #0
}
 801b228:	0018      	movs	r0, r3
 801b22a:	46bd      	mov	sp, r7
 801b22c:	b007      	add	sp, #28
 801b22e:	bd90      	pop	{r4, r7, pc}

0801b230 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801b230:	b580      	push	{r7, lr}
 801b232:	b084      	sub	sp, #16
 801b234:	af00      	add	r7, sp, #0
 801b236:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801b23e:	687a      	ldr	r2, [r7, #4]
 801b240:	23ba      	movs	r3, #186	@ 0xba
 801b242:	009b      	lsls	r3, r3, #2
 801b244:	2101      	movs	r1, #1
 801b246:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 801b248:	687a      	ldr	r2, [r7, #4]
 801b24a:	23b8      	movs	r3, #184	@ 0xb8
 801b24c:	009b      	lsls	r3, r3, #2
 801b24e:	2100      	movs	r1, #0
 801b250:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	2254      	movs	r2, #84	@ 0x54
 801b256:	5a9b      	ldrh	r3, [r3, r2]
 801b258:	b29b      	uxth	r3, r3
 801b25a:	2201      	movs	r2, #1
 801b25c:	4313      	orrs	r3, r2
 801b25e:	b299      	uxth	r1, r3
 801b260:	68fb      	ldr	r3, [r7, #12]
 801b262:	2254      	movs	r2, #84	@ 0x54
 801b264:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 801b266:	68fb      	ldr	r3, [r7, #12]
 801b268:	2254      	movs	r2, #84	@ 0x54
 801b26a:	5a9b      	ldrh	r3, [r3, r2]
 801b26c:	b29b      	uxth	r3, r3
 801b26e:	2202      	movs	r2, #2
 801b270:	4313      	orrs	r3, r2
 801b272:	b299      	uxth	r1, r3
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	2254      	movs	r2, #84	@ 0x54
 801b278:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801b27a:	2300      	movs	r3, #0
}
 801b27c:	0018      	movs	r0, r3
 801b27e:	46bd      	mov	sp, r7
 801b280:	b004      	add	sp, #16
 801b282:	bd80      	pop	{r7, pc}

0801b284 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801b284:	b580      	push	{r7, lr}
 801b286:	b082      	sub	sp, #8
 801b288:	af00      	add	r7, sp, #0
 801b28a:	6078      	str	r0, [r7, #4]
 801b28c:	000a      	movs	r2, r1
 801b28e:	1cfb      	adds	r3, r7, #3
 801b290:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801b292:	46c0      	nop			@ (mov r8, r8)
 801b294:	46bd      	mov	sp, r7
 801b296:	b002      	add	sp, #8
 801b298:	bd80      	pop	{r7, pc}
	...

0801b29c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 801b29c:	b580      	push	{r7, lr}
 801b29e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801b2a0:	4b04      	ldr	r3, [pc, #16]	@ (801b2b4 <HAL_PWR_EnableBkUpAccess+0x18>)
 801b2a2:	681a      	ldr	r2, [r3, #0]
 801b2a4:	4b03      	ldr	r3, [pc, #12]	@ (801b2b4 <HAL_PWR_EnableBkUpAccess+0x18>)
 801b2a6:	2180      	movs	r1, #128	@ 0x80
 801b2a8:	0049      	lsls	r1, r1, #1
 801b2aa:	430a      	orrs	r2, r1
 801b2ac:	601a      	str	r2, [r3, #0]
}
 801b2ae:	46c0      	nop			@ (mov r8, r8)
 801b2b0:	46bd      	mov	sp, r7
 801b2b2:	bd80      	pop	{r7, pc}
 801b2b4:	40007000 	.word	0x40007000

0801b2b8 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 801b2b8:	b580      	push	{r7, lr}
 801b2ba:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 801b2bc:	4b04      	ldr	r3, [pc, #16]	@ (801b2d0 <HAL_PWR_DisableBkUpAccess+0x18>)
 801b2be:	681a      	ldr	r2, [r3, #0]
 801b2c0:	4b03      	ldr	r3, [pc, #12]	@ (801b2d0 <HAL_PWR_DisableBkUpAccess+0x18>)
 801b2c2:	4904      	ldr	r1, [pc, #16]	@ (801b2d4 <HAL_PWR_DisableBkUpAccess+0x1c>)
 801b2c4:	400a      	ands	r2, r1
 801b2c6:	601a      	str	r2, [r3, #0]
}
 801b2c8:	46c0      	nop			@ (mov r8, r8)
 801b2ca:	46bd      	mov	sp, r7
 801b2cc:	bd80      	pop	{r7, pc}
 801b2ce:	46c0      	nop			@ (mov r8, r8)
 801b2d0:	40007000 	.word	0x40007000
 801b2d4:	fffffeff 	.word	0xfffffeff

0801b2d8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 801b2d8:	b580      	push	{r7, lr}
 801b2da:	b086      	sub	sp, #24
 801b2dc:	af00      	add	r7, sp, #0
 801b2de:	6078      	str	r0, [r7, #4]
 801b2e0:	000a      	movs	r2, r1
 801b2e2:	1cfb      	adds	r3, r7, #3
 801b2e4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 801b2ea:	4b25      	ldr	r3, [pc, #148]	@ (801b380 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b2ec:	681a      	ldr	r2, [r3, #0]
 801b2ee:	2380      	movs	r3, #128	@ 0x80
 801b2f0:	009b      	lsls	r3, r3, #2
 801b2f2:	4013      	ands	r3, r2
 801b2f4:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 801b2f6:	4b23      	ldr	r3, [pc, #140]	@ (801b384 <HAL_PWR_EnterSTOPMode+0xac>)
 801b2f8:	6a1b      	ldr	r3, [r3, #32]
 801b2fa:	2201      	movs	r2, #1
 801b2fc:	4013      	ands	r3, r2
 801b2fe:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 801b300:	693b      	ldr	r3, [r7, #16]
 801b302:	2b00      	cmp	r3, #0
 801b304:	d008      	beq.n	801b318 <HAL_PWR_EnterSTOPMode+0x40>
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	2b00      	cmp	r3, #0
 801b30a:	d005      	beq.n	801b318 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 801b30c:	4b1c      	ldr	r3, [pc, #112]	@ (801b380 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b30e:	681a      	ldr	r2, [r3, #0]
 801b310:	4b1b      	ldr	r3, [pc, #108]	@ (801b380 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b312:	491d      	ldr	r1, [pc, #116]	@ (801b388 <HAL_PWR_EnterSTOPMode+0xb0>)
 801b314:	400a      	ands	r2, r1
 801b316:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 801b318:	4b19      	ldr	r3, [pc, #100]	@ (801b380 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 801b31e:	697b      	ldr	r3, [r7, #20]
 801b320:	2203      	movs	r2, #3
 801b322:	4393      	bics	r3, r2
 801b324:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 801b326:	697a      	ldr	r2, [r7, #20]
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	4313      	orrs	r3, r2
 801b32c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 801b32e:	4b14      	ldr	r3, [pc, #80]	@ (801b380 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b330:	697a      	ldr	r2, [r7, #20]
 801b332:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b334:	4b15      	ldr	r3, [pc, #84]	@ (801b38c <HAL_PWR_EnterSTOPMode+0xb4>)
 801b336:	691a      	ldr	r2, [r3, #16]
 801b338:	4b14      	ldr	r3, [pc, #80]	@ (801b38c <HAL_PWR_EnterSTOPMode+0xb4>)
 801b33a:	2104      	movs	r1, #4
 801b33c:	430a      	orrs	r2, r1
 801b33e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801b340:	1cfb      	adds	r3, r7, #3
 801b342:	781b      	ldrb	r3, [r3, #0]
 801b344:	2b01      	cmp	r3, #1
 801b346:	d101      	bne.n	801b34c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 801b348:	bf30      	wfi
 801b34a:	e002      	b.n	801b352 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 801b34c:	bf40      	sev
    __WFE();
 801b34e:	bf20      	wfe
    __WFE();
 801b350:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b352:	4b0e      	ldr	r3, [pc, #56]	@ (801b38c <HAL_PWR_EnterSTOPMode+0xb4>)
 801b354:	691a      	ldr	r2, [r3, #16]
 801b356:	4b0d      	ldr	r3, [pc, #52]	@ (801b38c <HAL_PWR_EnterSTOPMode+0xb4>)
 801b358:	2104      	movs	r1, #4
 801b35a:	438a      	bics	r2, r1
 801b35c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 801b35e:	693b      	ldr	r3, [r7, #16]
 801b360:	2b00      	cmp	r3, #0
 801b362:	d009      	beq.n	801b378 <HAL_PWR_EnterSTOPMode+0xa0>
 801b364:	68fb      	ldr	r3, [r7, #12]
 801b366:	2b00      	cmp	r3, #0
 801b368:	d006      	beq.n	801b378 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 801b36a:	4b05      	ldr	r3, [pc, #20]	@ (801b380 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b36c:	681a      	ldr	r2, [r3, #0]
 801b36e:	4b04      	ldr	r3, [pc, #16]	@ (801b380 <HAL_PWR_EnterSTOPMode+0xa8>)
 801b370:	2180      	movs	r1, #128	@ 0x80
 801b372:	0089      	lsls	r1, r1, #2
 801b374:	430a      	orrs	r2, r1
 801b376:	601a      	str	r2, [r3, #0]
  }
}
 801b378:	46c0      	nop			@ (mov r8, r8)
 801b37a:	46bd      	mov	sp, r7
 801b37c:	b006      	add	sp, #24
 801b37e:	bd80      	pop	{r7, pc}
 801b380:	40007000 	.word	0x40007000
 801b384:	40010000 	.word	0x40010000
 801b388:	fffffdff 	.word	0xfffffdff
 801b38c:	e000ed00 	.word	0xe000ed00

0801b390 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 801b390:	b580      	push	{r7, lr}
 801b392:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 801b394:	4b07      	ldr	r3, [pc, #28]	@ (801b3b4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801b396:	681a      	ldr	r2, [r3, #0]
 801b398:	4b06      	ldr	r3, [pc, #24]	@ (801b3b4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 801b39a:	2102      	movs	r1, #2
 801b39c:	430a      	orrs	r2, r1
 801b39e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 801b3a0:	4b05      	ldr	r3, [pc, #20]	@ (801b3b8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801b3a2:	691a      	ldr	r2, [r3, #16]
 801b3a4:	4b04      	ldr	r3, [pc, #16]	@ (801b3b8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 801b3a6:	2104      	movs	r1, #4
 801b3a8:	430a      	orrs	r2, r1
 801b3aa:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 801b3ac:	bf30      	wfi
}
 801b3ae:	46c0      	nop			@ (mov r8, r8)
 801b3b0:	46bd      	mov	sp, r7
 801b3b2:	bd80      	pop	{r7, pc}
 801b3b4:	40007000 	.word	0x40007000
 801b3b8:	e000ed00 	.word	0xe000ed00

0801b3bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b3bc:	b5b0      	push	{r4, r5, r7, lr}
 801b3be:	b08a      	sub	sp, #40	@ 0x28
 801b3c0:	af00      	add	r7, sp, #0
 801b3c2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d102      	bne.n	801b3d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801b3ca:	2301      	movs	r3, #1
 801b3cc:	f000 fbbf 	bl	801bb4e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b3d0:	4bc9      	ldr	r3, [pc, #804]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b3d2:	68db      	ldr	r3, [r3, #12]
 801b3d4:	220c      	movs	r2, #12
 801b3d6:	4013      	ands	r3, r2
 801b3d8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801b3da:	4bc7      	ldr	r3, [pc, #796]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b3dc:	68da      	ldr	r2, [r3, #12]
 801b3de:	2380      	movs	r3, #128	@ 0x80
 801b3e0:	025b      	lsls	r3, r3, #9
 801b3e2:	4013      	ands	r3, r2
 801b3e4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	2201      	movs	r2, #1
 801b3ec:	4013      	ands	r3, r2
 801b3ee:	d100      	bne.n	801b3f2 <HAL_RCC_OscConfig+0x36>
 801b3f0:	e07e      	b.n	801b4f0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801b3f2:	69fb      	ldr	r3, [r7, #28]
 801b3f4:	2b08      	cmp	r3, #8
 801b3f6:	d007      	beq.n	801b408 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801b3f8:	69fb      	ldr	r3, [r7, #28]
 801b3fa:	2b0c      	cmp	r3, #12
 801b3fc:	d112      	bne.n	801b424 <HAL_RCC_OscConfig+0x68>
 801b3fe:	69ba      	ldr	r2, [r7, #24]
 801b400:	2380      	movs	r3, #128	@ 0x80
 801b402:	025b      	lsls	r3, r3, #9
 801b404:	429a      	cmp	r2, r3
 801b406:	d10d      	bne.n	801b424 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b408:	4bbb      	ldr	r3, [pc, #748]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b40a:	681a      	ldr	r2, [r3, #0]
 801b40c:	2380      	movs	r3, #128	@ 0x80
 801b40e:	029b      	lsls	r3, r3, #10
 801b410:	4013      	ands	r3, r2
 801b412:	d100      	bne.n	801b416 <HAL_RCC_OscConfig+0x5a>
 801b414:	e06b      	b.n	801b4ee <HAL_RCC_OscConfig+0x132>
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	685b      	ldr	r3, [r3, #4]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d167      	bne.n	801b4ee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 801b41e:	2301      	movs	r3, #1
 801b420:	f000 fb95 	bl	801bb4e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	685a      	ldr	r2, [r3, #4]
 801b428:	2380      	movs	r3, #128	@ 0x80
 801b42a:	025b      	lsls	r3, r3, #9
 801b42c:	429a      	cmp	r2, r3
 801b42e:	d107      	bne.n	801b440 <HAL_RCC_OscConfig+0x84>
 801b430:	4bb1      	ldr	r3, [pc, #708]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b432:	681a      	ldr	r2, [r3, #0]
 801b434:	4bb0      	ldr	r3, [pc, #704]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b436:	2180      	movs	r1, #128	@ 0x80
 801b438:	0249      	lsls	r1, r1, #9
 801b43a:	430a      	orrs	r2, r1
 801b43c:	601a      	str	r2, [r3, #0]
 801b43e:	e027      	b.n	801b490 <HAL_RCC_OscConfig+0xd4>
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	685a      	ldr	r2, [r3, #4]
 801b444:	23a0      	movs	r3, #160	@ 0xa0
 801b446:	02db      	lsls	r3, r3, #11
 801b448:	429a      	cmp	r2, r3
 801b44a:	d10e      	bne.n	801b46a <HAL_RCC_OscConfig+0xae>
 801b44c:	4baa      	ldr	r3, [pc, #680]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b44e:	681a      	ldr	r2, [r3, #0]
 801b450:	4ba9      	ldr	r3, [pc, #676]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b452:	2180      	movs	r1, #128	@ 0x80
 801b454:	02c9      	lsls	r1, r1, #11
 801b456:	430a      	orrs	r2, r1
 801b458:	601a      	str	r2, [r3, #0]
 801b45a:	4ba7      	ldr	r3, [pc, #668]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b45c:	681a      	ldr	r2, [r3, #0]
 801b45e:	4ba6      	ldr	r3, [pc, #664]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b460:	2180      	movs	r1, #128	@ 0x80
 801b462:	0249      	lsls	r1, r1, #9
 801b464:	430a      	orrs	r2, r1
 801b466:	601a      	str	r2, [r3, #0]
 801b468:	e012      	b.n	801b490 <HAL_RCC_OscConfig+0xd4>
 801b46a:	4ba3      	ldr	r3, [pc, #652]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b46c:	681a      	ldr	r2, [r3, #0]
 801b46e:	4ba2      	ldr	r3, [pc, #648]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b470:	49a2      	ldr	r1, [pc, #648]	@ (801b6fc <HAL_RCC_OscConfig+0x340>)
 801b472:	400a      	ands	r2, r1
 801b474:	601a      	str	r2, [r3, #0]
 801b476:	4ba0      	ldr	r3, [pc, #640]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b478:	681a      	ldr	r2, [r3, #0]
 801b47a:	2380      	movs	r3, #128	@ 0x80
 801b47c:	025b      	lsls	r3, r3, #9
 801b47e:	4013      	ands	r3, r2
 801b480:	60fb      	str	r3, [r7, #12]
 801b482:	68fb      	ldr	r3, [r7, #12]
 801b484:	4b9c      	ldr	r3, [pc, #624]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b486:	681a      	ldr	r2, [r3, #0]
 801b488:	4b9b      	ldr	r3, [pc, #620]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b48a:	499d      	ldr	r1, [pc, #628]	@ (801b700 <HAL_RCC_OscConfig+0x344>)
 801b48c:	400a      	ands	r2, r1
 801b48e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	685b      	ldr	r3, [r3, #4]
 801b494:	2b00      	cmp	r3, #0
 801b496:	d015      	beq.n	801b4c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b498:	f7f9 fb54 	bl	8014b44 <HAL_GetTick>
 801b49c:	0003      	movs	r3, r0
 801b49e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b4a0:	e009      	b.n	801b4b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b4a2:	f7f9 fb4f 	bl	8014b44 <HAL_GetTick>
 801b4a6:	0002      	movs	r2, r0
 801b4a8:	697b      	ldr	r3, [r7, #20]
 801b4aa:	1ad3      	subs	r3, r2, r3
 801b4ac:	2b64      	cmp	r3, #100	@ 0x64
 801b4ae:	d902      	bls.n	801b4b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b4b0:	2303      	movs	r3, #3
 801b4b2:	f000 fb4c 	bl	801bb4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b4b6:	4b90      	ldr	r3, [pc, #576]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b4b8:	681a      	ldr	r2, [r3, #0]
 801b4ba:	2380      	movs	r3, #128	@ 0x80
 801b4bc:	029b      	lsls	r3, r3, #10
 801b4be:	4013      	ands	r3, r2
 801b4c0:	d0ef      	beq.n	801b4a2 <HAL_RCC_OscConfig+0xe6>
 801b4c2:	e015      	b.n	801b4f0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b4c4:	f7f9 fb3e 	bl	8014b44 <HAL_GetTick>
 801b4c8:	0003      	movs	r3, r0
 801b4ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b4cc:	e008      	b.n	801b4e0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801b4ce:	f7f9 fb39 	bl	8014b44 <HAL_GetTick>
 801b4d2:	0002      	movs	r2, r0
 801b4d4:	697b      	ldr	r3, [r7, #20]
 801b4d6:	1ad3      	subs	r3, r2, r3
 801b4d8:	2b64      	cmp	r3, #100	@ 0x64
 801b4da:	d901      	bls.n	801b4e0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 801b4dc:	2303      	movs	r3, #3
 801b4de:	e336      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b4e0:	4b85      	ldr	r3, [pc, #532]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b4e2:	681a      	ldr	r2, [r3, #0]
 801b4e4:	2380      	movs	r3, #128	@ 0x80
 801b4e6:	029b      	lsls	r3, r3, #10
 801b4e8:	4013      	ands	r3, r2
 801b4ea:	d1f0      	bne.n	801b4ce <HAL_RCC_OscConfig+0x112>
 801b4ec:	e000      	b.n	801b4f0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b4ee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	2202      	movs	r2, #2
 801b4f6:	4013      	ands	r3, r2
 801b4f8:	d100      	bne.n	801b4fc <HAL_RCC_OscConfig+0x140>
 801b4fa:	e099      	b.n	801b630 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	68db      	ldr	r3, [r3, #12]
 801b500:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801b502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b504:	2220      	movs	r2, #32
 801b506:	4013      	ands	r3, r2
 801b508:	d009      	beq.n	801b51e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801b50a:	4b7b      	ldr	r3, [pc, #492]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b50c:	681a      	ldr	r2, [r3, #0]
 801b50e:	4b7a      	ldr	r3, [pc, #488]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b510:	2120      	movs	r1, #32
 801b512:	430a      	orrs	r2, r1
 801b514:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801b516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b518:	2220      	movs	r2, #32
 801b51a:	4393      	bics	r3, r2
 801b51c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 801b51e:	69fb      	ldr	r3, [r7, #28]
 801b520:	2b04      	cmp	r3, #4
 801b522:	d005      	beq.n	801b530 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801b524:	69fb      	ldr	r3, [r7, #28]
 801b526:	2b0c      	cmp	r3, #12
 801b528:	d13e      	bne.n	801b5a8 <HAL_RCC_OscConfig+0x1ec>
 801b52a:	69bb      	ldr	r3, [r7, #24]
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	d13b      	bne.n	801b5a8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 801b530:	4b71      	ldr	r3, [pc, #452]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	2204      	movs	r2, #4
 801b536:	4013      	ands	r3, r2
 801b538:	d004      	beq.n	801b544 <HAL_RCC_OscConfig+0x188>
 801b53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d101      	bne.n	801b544 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 801b540:	2301      	movs	r3, #1
 801b542:	e304      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b544:	4b6c      	ldr	r3, [pc, #432]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b546:	685b      	ldr	r3, [r3, #4]
 801b548:	4a6e      	ldr	r2, [pc, #440]	@ (801b704 <HAL_RCC_OscConfig+0x348>)
 801b54a:	4013      	ands	r3, r2
 801b54c:	0019      	movs	r1, r3
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	691b      	ldr	r3, [r3, #16]
 801b552:	021a      	lsls	r2, r3, #8
 801b554:	4b68      	ldr	r3, [pc, #416]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b556:	430a      	orrs	r2, r1
 801b558:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b55a:	4b67      	ldr	r3, [pc, #412]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b55c:	681b      	ldr	r3, [r3, #0]
 801b55e:	2209      	movs	r2, #9
 801b560:	4393      	bics	r3, r2
 801b562:	0019      	movs	r1, r3
 801b564:	4b64      	ldr	r3, [pc, #400]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b568:	430a      	orrs	r2, r1
 801b56a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801b56c:	f000 fc42 	bl	801bdf4 <HAL_RCC_GetSysClockFreq>
 801b570:	0001      	movs	r1, r0
 801b572:	4b61      	ldr	r3, [pc, #388]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b574:	68db      	ldr	r3, [r3, #12]
 801b576:	091b      	lsrs	r3, r3, #4
 801b578:	220f      	movs	r2, #15
 801b57a:	4013      	ands	r3, r2
 801b57c:	4a62      	ldr	r2, [pc, #392]	@ (801b708 <HAL_RCC_OscConfig+0x34c>)
 801b57e:	5cd3      	ldrb	r3, [r2, r3]
 801b580:	000a      	movs	r2, r1
 801b582:	40da      	lsrs	r2, r3
 801b584:	4b61      	ldr	r3, [pc, #388]	@ (801b70c <HAL_RCC_OscConfig+0x350>)
 801b586:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801b588:	4b61      	ldr	r3, [pc, #388]	@ (801b710 <HAL_RCC_OscConfig+0x354>)
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	2513      	movs	r5, #19
 801b58e:	197c      	adds	r4, r7, r5
 801b590:	0018      	movs	r0, r3
 801b592:	f7f9 fa91 	bl	8014ab8 <HAL_InitTick>
 801b596:	0003      	movs	r3, r0
 801b598:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801b59a:	197b      	adds	r3, r7, r5
 801b59c:	781b      	ldrb	r3, [r3, #0]
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	d046      	beq.n	801b630 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801b5a2:	197b      	adds	r3, r7, r5
 801b5a4:	781b      	ldrb	r3, [r3, #0]
 801b5a6:	e2d2      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801b5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d027      	beq.n	801b5fe <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 801b5ae:	4b52      	ldr	r3, [pc, #328]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	2209      	movs	r2, #9
 801b5b4:	4393      	bics	r3, r2
 801b5b6:	0019      	movs	r1, r3
 801b5b8:	4b4f      	ldr	r3, [pc, #316]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b5ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b5bc:	430a      	orrs	r2, r1
 801b5be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b5c0:	f7f9 fac0 	bl	8014b44 <HAL_GetTick>
 801b5c4:	0003      	movs	r3, r0
 801b5c6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b5c8:	e008      	b.n	801b5dc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b5ca:	f7f9 fabb 	bl	8014b44 <HAL_GetTick>
 801b5ce:	0002      	movs	r2, r0
 801b5d0:	697b      	ldr	r3, [r7, #20]
 801b5d2:	1ad3      	subs	r3, r2, r3
 801b5d4:	2b02      	cmp	r3, #2
 801b5d6:	d901      	bls.n	801b5dc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801b5d8:	2303      	movs	r3, #3
 801b5da:	e2b8      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b5dc:	4b46      	ldr	r3, [pc, #280]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b5de:	681b      	ldr	r3, [r3, #0]
 801b5e0:	2204      	movs	r2, #4
 801b5e2:	4013      	ands	r3, r2
 801b5e4:	d0f1      	beq.n	801b5ca <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b5e6:	4b44      	ldr	r3, [pc, #272]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b5e8:	685b      	ldr	r3, [r3, #4]
 801b5ea:	4a46      	ldr	r2, [pc, #280]	@ (801b704 <HAL_RCC_OscConfig+0x348>)
 801b5ec:	4013      	ands	r3, r2
 801b5ee:	0019      	movs	r1, r3
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	691b      	ldr	r3, [r3, #16]
 801b5f4:	021a      	lsls	r2, r3, #8
 801b5f6:	4b40      	ldr	r3, [pc, #256]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b5f8:	430a      	orrs	r2, r1
 801b5fa:	605a      	str	r2, [r3, #4]
 801b5fc:	e018      	b.n	801b630 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b5fe:	4b3e      	ldr	r3, [pc, #248]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b600:	681a      	ldr	r2, [r3, #0]
 801b602:	4b3d      	ldr	r3, [pc, #244]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b604:	2101      	movs	r1, #1
 801b606:	438a      	bics	r2, r1
 801b608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b60a:	f7f9 fa9b 	bl	8014b44 <HAL_GetTick>
 801b60e:	0003      	movs	r3, r0
 801b610:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b612:	e008      	b.n	801b626 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801b614:	f7f9 fa96 	bl	8014b44 <HAL_GetTick>
 801b618:	0002      	movs	r2, r0
 801b61a:	697b      	ldr	r3, [r7, #20]
 801b61c:	1ad3      	subs	r3, r2, r3
 801b61e:	2b02      	cmp	r3, #2
 801b620:	d901      	bls.n	801b626 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801b622:	2303      	movs	r3, #3
 801b624:	e293      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b626:	4b34      	ldr	r3, [pc, #208]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	2204      	movs	r2, #4
 801b62c:	4013      	ands	r3, r2
 801b62e:	d1f1      	bne.n	801b614 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	681b      	ldr	r3, [r3, #0]
 801b634:	2210      	movs	r2, #16
 801b636:	4013      	ands	r3, r2
 801b638:	d100      	bne.n	801b63c <HAL_RCC_OscConfig+0x280>
 801b63a:	e0a2      	b.n	801b782 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801b63c:	69fb      	ldr	r3, [r7, #28]
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d140      	bne.n	801b6c4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801b642:	4b2d      	ldr	r3, [pc, #180]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b644:	681a      	ldr	r2, [r3, #0]
 801b646:	2380      	movs	r3, #128	@ 0x80
 801b648:	009b      	lsls	r3, r3, #2
 801b64a:	4013      	ands	r3, r2
 801b64c:	d005      	beq.n	801b65a <HAL_RCC_OscConfig+0x29e>
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	69db      	ldr	r3, [r3, #28]
 801b652:	2b00      	cmp	r3, #0
 801b654:	d101      	bne.n	801b65a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801b656:	2301      	movs	r3, #1
 801b658:	e279      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b65a:	4b27      	ldr	r3, [pc, #156]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b65c:	685b      	ldr	r3, [r3, #4]
 801b65e:	4a2d      	ldr	r2, [pc, #180]	@ (801b714 <HAL_RCC_OscConfig+0x358>)
 801b660:	4013      	ands	r3, r2
 801b662:	0019      	movs	r1, r3
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b668:	4b23      	ldr	r3, [pc, #140]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b66a:	430a      	orrs	r2, r1
 801b66c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b66e:	4b22      	ldr	r3, [pc, #136]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b670:	685b      	ldr	r3, [r3, #4]
 801b672:	021b      	lsls	r3, r3, #8
 801b674:	0a19      	lsrs	r1, r3, #8
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	6a1b      	ldr	r3, [r3, #32]
 801b67a:	061a      	lsls	r2, r3, #24
 801b67c:	4b1e      	ldr	r3, [pc, #120]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b67e:	430a      	orrs	r2, r1
 801b680:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b686:	0b5b      	lsrs	r3, r3, #13
 801b688:	3301      	adds	r3, #1
 801b68a:	2280      	movs	r2, #128	@ 0x80
 801b68c:	0212      	lsls	r2, r2, #8
 801b68e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 801b690:	4b19      	ldr	r3, [pc, #100]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b692:	68db      	ldr	r3, [r3, #12]
 801b694:	091b      	lsrs	r3, r3, #4
 801b696:	210f      	movs	r1, #15
 801b698:	400b      	ands	r3, r1
 801b69a:	491b      	ldr	r1, [pc, #108]	@ (801b708 <HAL_RCC_OscConfig+0x34c>)
 801b69c:	5ccb      	ldrb	r3, [r1, r3]
 801b69e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801b6a0:	4b1a      	ldr	r3, [pc, #104]	@ (801b70c <HAL_RCC_OscConfig+0x350>)
 801b6a2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801b6a4:	4b1a      	ldr	r3, [pc, #104]	@ (801b710 <HAL_RCC_OscConfig+0x354>)
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	2513      	movs	r5, #19
 801b6aa:	197c      	adds	r4, r7, r5
 801b6ac:	0018      	movs	r0, r3
 801b6ae:	f7f9 fa03 	bl	8014ab8 <HAL_InitTick>
 801b6b2:	0003      	movs	r3, r0
 801b6b4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801b6b6:	197b      	adds	r3, r7, r5
 801b6b8:	781b      	ldrb	r3, [r3, #0]
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d061      	beq.n	801b782 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801b6be:	197b      	adds	r3, r7, r5
 801b6c0:	781b      	ldrb	r3, [r3, #0]
 801b6c2:	e244      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	69db      	ldr	r3, [r3, #28]
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d040      	beq.n	801b74e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801b6cc:	4b0a      	ldr	r3, [pc, #40]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b6ce:	681a      	ldr	r2, [r3, #0]
 801b6d0:	4b09      	ldr	r3, [pc, #36]	@ (801b6f8 <HAL_RCC_OscConfig+0x33c>)
 801b6d2:	2180      	movs	r1, #128	@ 0x80
 801b6d4:	0049      	lsls	r1, r1, #1
 801b6d6:	430a      	orrs	r2, r1
 801b6d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b6da:	f7f9 fa33 	bl	8014b44 <HAL_GetTick>
 801b6de:	0003      	movs	r3, r0
 801b6e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b6e2:	e019      	b.n	801b718 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b6e4:	f7f9 fa2e 	bl	8014b44 <HAL_GetTick>
 801b6e8:	0002      	movs	r2, r0
 801b6ea:	697b      	ldr	r3, [r7, #20]
 801b6ec:	1ad3      	subs	r3, r2, r3
 801b6ee:	2b02      	cmp	r3, #2
 801b6f0:	d912      	bls.n	801b718 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801b6f2:	2303      	movs	r3, #3
 801b6f4:	e22b      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
 801b6f6:	46c0      	nop			@ (mov r8, r8)
 801b6f8:	40021000 	.word	0x40021000
 801b6fc:	fffeffff 	.word	0xfffeffff
 801b700:	fffbffff 	.word	0xfffbffff
 801b704:	ffffe0ff 	.word	0xffffe0ff
 801b708:	0802e9cc 	.word	0x0802e9cc
 801b70c:	200000ec 	.word	0x200000ec
 801b710:	200000fc 	.word	0x200000fc
 801b714:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801b718:	4bca      	ldr	r3, [pc, #808]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b71a:	681a      	ldr	r2, [r3, #0]
 801b71c:	2380      	movs	r3, #128	@ 0x80
 801b71e:	009b      	lsls	r3, r3, #2
 801b720:	4013      	ands	r3, r2
 801b722:	d0df      	beq.n	801b6e4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801b724:	4bc7      	ldr	r3, [pc, #796]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b726:	685b      	ldr	r3, [r3, #4]
 801b728:	4ac7      	ldr	r2, [pc, #796]	@ (801ba48 <HAL_RCC_OscConfig+0x68c>)
 801b72a:	4013      	ands	r3, r2
 801b72c:	0019      	movs	r1, r3
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b732:	4bc4      	ldr	r3, [pc, #784]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b734:	430a      	orrs	r2, r1
 801b736:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801b738:	4bc2      	ldr	r3, [pc, #776]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b73a:	685b      	ldr	r3, [r3, #4]
 801b73c:	021b      	lsls	r3, r3, #8
 801b73e:	0a19      	lsrs	r1, r3, #8
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	6a1b      	ldr	r3, [r3, #32]
 801b744:	061a      	lsls	r2, r3, #24
 801b746:	4bbf      	ldr	r3, [pc, #764]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b748:	430a      	orrs	r2, r1
 801b74a:	605a      	str	r2, [r3, #4]
 801b74c:	e019      	b.n	801b782 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801b74e:	4bbd      	ldr	r3, [pc, #756]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b750:	681a      	ldr	r2, [r3, #0]
 801b752:	4bbc      	ldr	r3, [pc, #752]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b754:	49bd      	ldr	r1, [pc, #756]	@ (801ba4c <HAL_RCC_OscConfig+0x690>)
 801b756:	400a      	ands	r2, r1
 801b758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b75a:	f7f9 f9f3 	bl	8014b44 <HAL_GetTick>
 801b75e:	0003      	movs	r3, r0
 801b760:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b762:	e008      	b.n	801b776 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801b764:	f7f9 f9ee 	bl	8014b44 <HAL_GetTick>
 801b768:	0002      	movs	r2, r0
 801b76a:	697b      	ldr	r3, [r7, #20]
 801b76c:	1ad3      	subs	r3, r2, r3
 801b76e:	2b02      	cmp	r3, #2
 801b770:	d901      	bls.n	801b776 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 801b772:	2303      	movs	r3, #3
 801b774:	e1eb      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 801b776:	4bb3      	ldr	r3, [pc, #716]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b778:	681a      	ldr	r2, [r3, #0]
 801b77a:	2380      	movs	r3, #128	@ 0x80
 801b77c:	009b      	lsls	r3, r3, #2
 801b77e:	4013      	ands	r3, r2
 801b780:	d1f0      	bne.n	801b764 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	681b      	ldr	r3, [r3, #0]
 801b786:	2208      	movs	r2, #8
 801b788:	4013      	ands	r3, r2
 801b78a:	d036      	beq.n	801b7fa <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	695b      	ldr	r3, [r3, #20]
 801b790:	2b00      	cmp	r3, #0
 801b792:	d019      	beq.n	801b7c8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b794:	4bab      	ldr	r3, [pc, #684]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b796:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b798:	4baa      	ldr	r3, [pc, #680]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b79a:	2101      	movs	r1, #1
 801b79c:	430a      	orrs	r2, r1
 801b79e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b7a0:	f7f9 f9d0 	bl	8014b44 <HAL_GetTick>
 801b7a4:	0003      	movs	r3, r0
 801b7a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b7a8:	e008      	b.n	801b7bc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b7aa:	f7f9 f9cb 	bl	8014b44 <HAL_GetTick>
 801b7ae:	0002      	movs	r2, r0
 801b7b0:	697b      	ldr	r3, [r7, #20]
 801b7b2:	1ad3      	subs	r3, r2, r3
 801b7b4:	2b02      	cmp	r3, #2
 801b7b6:	d901      	bls.n	801b7bc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 801b7b8:	2303      	movs	r3, #3
 801b7ba:	e1c8      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b7bc:	4ba1      	ldr	r3, [pc, #644]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b7be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b7c0:	2202      	movs	r2, #2
 801b7c2:	4013      	ands	r3, r2
 801b7c4:	d0f1      	beq.n	801b7aa <HAL_RCC_OscConfig+0x3ee>
 801b7c6:	e018      	b.n	801b7fa <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b7c8:	4b9e      	ldr	r3, [pc, #632]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b7ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b7cc:	4b9d      	ldr	r3, [pc, #628]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b7ce:	2101      	movs	r1, #1
 801b7d0:	438a      	bics	r2, r1
 801b7d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b7d4:	f7f9 f9b6 	bl	8014b44 <HAL_GetTick>
 801b7d8:	0003      	movs	r3, r0
 801b7da:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b7dc:	e008      	b.n	801b7f0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801b7de:	f7f9 f9b1 	bl	8014b44 <HAL_GetTick>
 801b7e2:	0002      	movs	r2, r0
 801b7e4:	697b      	ldr	r3, [r7, #20]
 801b7e6:	1ad3      	subs	r3, r2, r3
 801b7e8:	2b02      	cmp	r3, #2
 801b7ea:	d901      	bls.n	801b7f0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801b7ec:	2303      	movs	r3, #3
 801b7ee:	e1ae      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b7f0:	4b94      	ldr	r3, [pc, #592]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b7f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b7f4:	2202      	movs	r2, #2
 801b7f6:	4013      	ands	r3, r2
 801b7f8:	d1f1      	bne.n	801b7de <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	681b      	ldr	r3, [r3, #0]
 801b7fe:	2204      	movs	r2, #4
 801b800:	4013      	ands	r3, r2
 801b802:	d100      	bne.n	801b806 <HAL_RCC_OscConfig+0x44a>
 801b804:	e0ae      	b.n	801b964 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b806:	2023      	movs	r0, #35	@ 0x23
 801b808:	183b      	adds	r3, r7, r0
 801b80a:	2200      	movs	r2, #0
 801b80c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b80e:	4b8d      	ldr	r3, [pc, #564]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b810:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b812:	2380      	movs	r3, #128	@ 0x80
 801b814:	055b      	lsls	r3, r3, #21
 801b816:	4013      	ands	r3, r2
 801b818:	d109      	bne.n	801b82e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b81a:	4b8a      	ldr	r3, [pc, #552]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b81c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b81e:	4b89      	ldr	r3, [pc, #548]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b820:	2180      	movs	r1, #128	@ 0x80
 801b822:	0549      	lsls	r1, r1, #21
 801b824:	430a      	orrs	r2, r1
 801b826:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801b828:	183b      	adds	r3, r7, r0
 801b82a:	2201      	movs	r2, #1
 801b82c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b82e:	4b88      	ldr	r3, [pc, #544]	@ (801ba50 <HAL_RCC_OscConfig+0x694>)
 801b830:	681a      	ldr	r2, [r3, #0]
 801b832:	2380      	movs	r3, #128	@ 0x80
 801b834:	005b      	lsls	r3, r3, #1
 801b836:	4013      	ands	r3, r2
 801b838:	d11a      	bne.n	801b870 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801b83a:	4b85      	ldr	r3, [pc, #532]	@ (801ba50 <HAL_RCC_OscConfig+0x694>)
 801b83c:	681a      	ldr	r2, [r3, #0]
 801b83e:	4b84      	ldr	r3, [pc, #528]	@ (801ba50 <HAL_RCC_OscConfig+0x694>)
 801b840:	2180      	movs	r1, #128	@ 0x80
 801b842:	0049      	lsls	r1, r1, #1
 801b844:	430a      	orrs	r2, r1
 801b846:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b848:	f7f9 f97c 	bl	8014b44 <HAL_GetTick>
 801b84c:	0003      	movs	r3, r0
 801b84e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b850:	e008      	b.n	801b864 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b852:	f7f9 f977 	bl	8014b44 <HAL_GetTick>
 801b856:	0002      	movs	r2, r0
 801b858:	697b      	ldr	r3, [r7, #20]
 801b85a:	1ad3      	subs	r3, r2, r3
 801b85c:	2b64      	cmp	r3, #100	@ 0x64
 801b85e:	d901      	bls.n	801b864 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 801b860:	2303      	movs	r3, #3
 801b862:	e174      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801b864:	4b7a      	ldr	r3, [pc, #488]	@ (801ba50 <HAL_RCC_OscConfig+0x694>)
 801b866:	681a      	ldr	r2, [r3, #0]
 801b868:	2380      	movs	r3, #128	@ 0x80
 801b86a:	005b      	lsls	r3, r3, #1
 801b86c:	4013      	ands	r3, r2
 801b86e:	d0f0      	beq.n	801b852 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	689a      	ldr	r2, [r3, #8]
 801b874:	2380      	movs	r3, #128	@ 0x80
 801b876:	005b      	lsls	r3, r3, #1
 801b878:	429a      	cmp	r2, r3
 801b87a:	d107      	bne.n	801b88c <HAL_RCC_OscConfig+0x4d0>
 801b87c:	4b71      	ldr	r3, [pc, #452]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b87e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b880:	4b70      	ldr	r3, [pc, #448]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b882:	2180      	movs	r1, #128	@ 0x80
 801b884:	0049      	lsls	r1, r1, #1
 801b886:	430a      	orrs	r2, r1
 801b888:	651a      	str	r2, [r3, #80]	@ 0x50
 801b88a:	e031      	b.n	801b8f0 <HAL_RCC_OscConfig+0x534>
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	689b      	ldr	r3, [r3, #8]
 801b890:	2b00      	cmp	r3, #0
 801b892:	d10c      	bne.n	801b8ae <HAL_RCC_OscConfig+0x4f2>
 801b894:	4b6b      	ldr	r3, [pc, #428]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b896:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b898:	4b6a      	ldr	r3, [pc, #424]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b89a:	496c      	ldr	r1, [pc, #432]	@ (801ba4c <HAL_RCC_OscConfig+0x690>)
 801b89c:	400a      	ands	r2, r1
 801b89e:	651a      	str	r2, [r3, #80]	@ 0x50
 801b8a0:	4b68      	ldr	r3, [pc, #416]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b8a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b8a4:	4b67      	ldr	r3, [pc, #412]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b8a6:	496b      	ldr	r1, [pc, #428]	@ (801ba54 <HAL_RCC_OscConfig+0x698>)
 801b8a8:	400a      	ands	r2, r1
 801b8aa:	651a      	str	r2, [r3, #80]	@ 0x50
 801b8ac:	e020      	b.n	801b8f0 <HAL_RCC_OscConfig+0x534>
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	689a      	ldr	r2, [r3, #8]
 801b8b2:	23a0      	movs	r3, #160	@ 0xa0
 801b8b4:	00db      	lsls	r3, r3, #3
 801b8b6:	429a      	cmp	r2, r3
 801b8b8:	d10e      	bne.n	801b8d8 <HAL_RCC_OscConfig+0x51c>
 801b8ba:	4b62      	ldr	r3, [pc, #392]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b8bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b8be:	4b61      	ldr	r3, [pc, #388]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b8c0:	2180      	movs	r1, #128	@ 0x80
 801b8c2:	00c9      	lsls	r1, r1, #3
 801b8c4:	430a      	orrs	r2, r1
 801b8c6:	651a      	str	r2, [r3, #80]	@ 0x50
 801b8c8:	4b5e      	ldr	r3, [pc, #376]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b8ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b8cc:	4b5d      	ldr	r3, [pc, #372]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b8ce:	2180      	movs	r1, #128	@ 0x80
 801b8d0:	0049      	lsls	r1, r1, #1
 801b8d2:	430a      	orrs	r2, r1
 801b8d4:	651a      	str	r2, [r3, #80]	@ 0x50
 801b8d6:	e00b      	b.n	801b8f0 <HAL_RCC_OscConfig+0x534>
 801b8d8:	4b5a      	ldr	r3, [pc, #360]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b8da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b8dc:	4b59      	ldr	r3, [pc, #356]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b8de:	495b      	ldr	r1, [pc, #364]	@ (801ba4c <HAL_RCC_OscConfig+0x690>)
 801b8e0:	400a      	ands	r2, r1
 801b8e2:	651a      	str	r2, [r3, #80]	@ 0x50
 801b8e4:	4b57      	ldr	r3, [pc, #348]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b8e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b8e8:	4b56      	ldr	r3, [pc, #344]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b8ea:	495a      	ldr	r1, [pc, #360]	@ (801ba54 <HAL_RCC_OscConfig+0x698>)
 801b8ec:	400a      	ands	r2, r1
 801b8ee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	689b      	ldr	r3, [r3, #8]
 801b8f4:	2b00      	cmp	r3, #0
 801b8f6:	d015      	beq.n	801b924 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b8f8:	f7f9 f924 	bl	8014b44 <HAL_GetTick>
 801b8fc:	0003      	movs	r3, r0
 801b8fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b900:	e009      	b.n	801b916 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b902:	f7f9 f91f 	bl	8014b44 <HAL_GetTick>
 801b906:	0002      	movs	r2, r0
 801b908:	697b      	ldr	r3, [r7, #20]
 801b90a:	1ad3      	subs	r3, r2, r3
 801b90c:	4a52      	ldr	r2, [pc, #328]	@ (801ba58 <HAL_RCC_OscConfig+0x69c>)
 801b90e:	4293      	cmp	r3, r2
 801b910:	d901      	bls.n	801b916 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801b912:	2303      	movs	r3, #3
 801b914:	e11b      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b916:	4b4b      	ldr	r3, [pc, #300]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b918:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b91a:	2380      	movs	r3, #128	@ 0x80
 801b91c:	009b      	lsls	r3, r3, #2
 801b91e:	4013      	ands	r3, r2
 801b920:	d0ef      	beq.n	801b902 <HAL_RCC_OscConfig+0x546>
 801b922:	e014      	b.n	801b94e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801b924:	f7f9 f90e 	bl	8014b44 <HAL_GetTick>
 801b928:	0003      	movs	r3, r0
 801b92a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b92c:	e009      	b.n	801b942 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801b92e:	f7f9 f909 	bl	8014b44 <HAL_GetTick>
 801b932:	0002      	movs	r2, r0
 801b934:	697b      	ldr	r3, [r7, #20]
 801b936:	1ad3      	subs	r3, r2, r3
 801b938:	4a47      	ldr	r2, [pc, #284]	@ (801ba58 <HAL_RCC_OscConfig+0x69c>)
 801b93a:	4293      	cmp	r3, r2
 801b93c:	d901      	bls.n	801b942 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801b93e:	2303      	movs	r3, #3
 801b940:	e105      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b942:	4b40      	ldr	r3, [pc, #256]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b944:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b946:	2380      	movs	r3, #128	@ 0x80
 801b948:	009b      	lsls	r3, r3, #2
 801b94a:	4013      	ands	r3, r2
 801b94c:	d1ef      	bne.n	801b92e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801b94e:	2323      	movs	r3, #35	@ 0x23
 801b950:	18fb      	adds	r3, r7, r3
 801b952:	781b      	ldrb	r3, [r3, #0]
 801b954:	2b01      	cmp	r3, #1
 801b956:	d105      	bne.n	801b964 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b958:	4b3a      	ldr	r3, [pc, #232]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b95a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b95c:	4b39      	ldr	r3, [pc, #228]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b95e:	493f      	ldr	r1, [pc, #252]	@ (801ba5c <HAL_RCC_OscConfig+0x6a0>)
 801b960:	400a      	ands	r2, r1
 801b962:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	681b      	ldr	r3, [r3, #0]
 801b968:	2220      	movs	r2, #32
 801b96a:	4013      	ands	r3, r2
 801b96c:	d049      	beq.n	801ba02 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	699b      	ldr	r3, [r3, #24]
 801b972:	2b00      	cmp	r3, #0
 801b974:	d026      	beq.n	801b9c4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 801b976:	4b33      	ldr	r3, [pc, #204]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b978:	689a      	ldr	r2, [r3, #8]
 801b97a:	4b32      	ldr	r3, [pc, #200]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b97c:	2101      	movs	r1, #1
 801b97e:	430a      	orrs	r2, r1
 801b980:	609a      	str	r2, [r3, #8]
 801b982:	4b30      	ldr	r3, [pc, #192]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801b986:	4b2f      	ldr	r3, [pc, #188]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b988:	2101      	movs	r1, #1
 801b98a:	430a      	orrs	r2, r1
 801b98c:	635a      	str	r2, [r3, #52]	@ 0x34
 801b98e:	4b34      	ldr	r3, [pc, #208]	@ (801ba60 <HAL_RCC_OscConfig+0x6a4>)
 801b990:	6a1a      	ldr	r2, [r3, #32]
 801b992:	4b33      	ldr	r3, [pc, #204]	@ (801ba60 <HAL_RCC_OscConfig+0x6a4>)
 801b994:	2180      	movs	r1, #128	@ 0x80
 801b996:	0189      	lsls	r1, r1, #6
 801b998:	430a      	orrs	r2, r1
 801b99a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b99c:	f7f9 f8d2 	bl	8014b44 <HAL_GetTick>
 801b9a0:	0003      	movs	r3, r0
 801b9a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b9a4:	e008      	b.n	801b9b8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b9a6:	f7f9 f8cd 	bl	8014b44 <HAL_GetTick>
 801b9aa:	0002      	movs	r2, r0
 801b9ac:	697b      	ldr	r3, [r7, #20]
 801b9ae:	1ad3      	subs	r3, r2, r3
 801b9b0:	2b02      	cmp	r3, #2
 801b9b2:	d901      	bls.n	801b9b8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 801b9b4:	2303      	movs	r3, #3
 801b9b6:	e0ca      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b9b8:	4b22      	ldr	r3, [pc, #136]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b9ba:	689b      	ldr	r3, [r3, #8]
 801b9bc:	2202      	movs	r2, #2
 801b9be:	4013      	ands	r3, r2
 801b9c0:	d0f1      	beq.n	801b9a6 <HAL_RCC_OscConfig+0x5ea>
 801b9c2:	e01e      	b.n	801ba02 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801b9c4:	4b1f      	ldr	r3, [pc, #124]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b9c6:	689a      	ldr	r2, [r3, #8]
 801b9c8:	4b1e      	ldr	r3, [pc, #120]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b9ca:	2101      	movs	r1, #1
 801b9cc:	438a      	bics	r2, r1
 801b9ce:	609a      	str	r2, [r3, #8]
 801b9d0:	4b23      	ldr	r3, [pc, #140]	@ (801ba60 <HAL_RCC_OscConfig+0x6a4>)
 801b9d2:	6a1a      	ldr	r2, [r3, #32]
 801b9d4:	4b22      	ldr	r3, [pc, #136]	@ (801ba60 <HAL_RCC_OscConfig+0x6a4>)
 801b9d6:	4923      	ldr	r1, [pc, #140]	@ (801ba64 <HAL_RCC_OscConfig+0x6a8>)
 801b9d8:	400a      	ands	r2, r1
 801b9da:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801b9dc:	f7f9 f8b2 	bl	8014b44 <HAL_GetTick>
 801b9e0:	0003      	movs	r3, r0
 801b9e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b9e4:	e008      	b.n	801b9f8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b9e6:	f7f9 f8ad 	bl	8014b44 <HAL_GetTick>
 801b9ea:	0002      	movs	r2, r0
 801b9ec:	697b      	ldr	r3, [r7, #20]
 801b9ee:	1ad3      	subs	r3, r2, r3
 801b9f0:	2b02      	cmp	r3, #2
 801b9f2:	d901      	bls.n	801b9f8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801b9f4:	2303      	movs	r3, #3
 801b9f6:	e0aa      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b9f8:	4b12      	ldr	r3, [pc, #72]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801b9fa:	689b      	ldr	r3, [r3, #8]
 801b9fc:	2202      	movs	r2, #2
 801b9fe:	4013      	ands	r3, r2
 801ba00:	d1f1      	bne.n	801b9e6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801ba02:	687b      	ldr	r3, [r7, #4]
 801ba04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	d100      	bne.n	801ba0c <HAL_RCC_OscConfig+0x650>
 801ba0a:	e09f      	b.n	801bb4c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801ba0c:	69fb      	ldr	r3, [r7, #28]
 801ba0e:	2b0c      	cmp	r3, #12
 801ba10:	d100      	bne.n	801ba14 <HAL_RCC_OscConfig+0x658>
 801ba12:	e078      	b.n	801bb06 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba18:	2b02      	cmp	r3, #2
 801ba1a:	d159      	bne.n	801bad0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801ba1c:	4b09      	ldr	r3, [pc, #36]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801ba1e:	681a      	ldr	r2, [r3, #0]
 801ba20:	4b08      	ldr	r3, [pc, #32]	@ (801ba44 <HAL_RCC_OscConfig+0x688>)
 801ba22:	4911      	ldr	r1, [pc, #68]	@ (801ba68 <HAL_RCC_OscConfig+0x6ac>)
 801ba24:	400a      	ands	r2, r1
 801ba26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ba28:	f7f9 f88c 	bl	8014b44 <HAL_GetTick>
 801ba2c:	0003      	movs	r3, r0
 801ba2e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801ba30:	e01c      	b.n	801ba6c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801ba32:	f7f9 f887 	bl	8014b44 <HAL_GetTick>
 801ba36:	0002      	movs	r2, r0
 801ba38:	697b      	ldr	r3, [r7, #20]
 801ba3a:	1ad3      	subs	r3, r2, r3
 801ba3c:	2b02      	cmp	r3, #2
 801ba3e:	d915      	bls.n	801ba6c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 801ba40:	2303      	movs	r3, #3
 801ba42:	e084      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
 801ba44:	40021000 	.word	0x40021000
 801ba48:	ffff1fff 	.word	0xffff1fff
 801ba4c:	fffffeff 	.word	0xfffffeff
 801ba50:	40007000 	.word	0x40007000
 801ba54:	fffffbff 	.word	0xfffffbff
 801ba58:	00001388 	.word	0x00001388
 801ba5c:	efffffff 	.word	0xefffffff
 801ba60:	40010000 	.word	0x40010000
 801ba64:	ffffdfff 	.word	0xffffdfff
 801ba68:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801ba6c:	4b3a      	ldr	r3, [pc, #232]	@ (801bb58 <HAL_RCC_OscConfig+0x79c>)
 801ba6e:	681a      	ldr	r2, [r3, #0]
 801ba70:	2380      	movs	r3, #128	@ 0x80
 801ba72:	049b      	lsls	r3, r3, #18
 801ba74:	4013      	ands	r3, r2
 801ba76:	d1dc      	bne.n	801ba32 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801ba78:	4b37      	ldr	r3, [pc, #220]	@ (801bb58 <HAL_RCC_OscConfig+0x79c>)
 801ba7a:	68db      	ldr	r3, [r3, #12]
 801ba7c:	4a37      	ldr	r2, [pc, #220]	@ (801bb5c <HAL_RCC_OscConfig+0x7a0>)
 801ba7e:	4013      	ands	r3, r2
 801ba80:	0019      	movs	r1, r3
 801ba82:	687b      	ldr	r3, [r7, #4]
 801ba84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ba8a:	431a      	orrs	r2, r3
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ba90:	431a      	orrs	r2, r3
 801ba92:	4b31      	ldr	r3, [pc, #196]	@ (801bb58 <HAL_RCC_OscConfig+0x79c>)
 801ba94:	430a      	orrs	r2, r1
 801ba96:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801ba98:	4b2f      	ldr	r3, [pc, #188]	@ (801bb58 <HAL_RCC_OscConfig+0x79c>)
 801ba9a:	681a      	ldr	r2, [r3, #0]
 801ba9c:	4b2e      	ldr	r3, [pc, #184]	@ (801bb58 <HAL_RCC_OscConfig+0x79c>)
 801ba9e:	2180      	movs	r1, #128	@ 0x80
 801baa0:	0449      	lsls	r1, r1, #17
 801baa2:	430a      	orrs	r2, r1
 801baa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801baa6:	f7f9 f84d 	bl	8014b44 <HAL_GetTick>
 801baaa:	0003      	movs	r3, r0
 801baac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801baae:	e008      	b.n	801bac2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bab0:	f7f9 f848 	bl	8014b44 <HAL_GetTick>
 801bab4:	0002      	movs	r2, r0
 801bab6:	697b      	ldr	r3, [r7, #20]
 801bab8:	1ad3      	subs	r3, r2, r3
 801baba:	2b02      	cmp	r3, #2
 801babc:	d901      	bls.n	801bac2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801babe:	2303      	movs	r3, #3
 801bac0:	e045      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801bac2:	4b25      	ldr	r3, [pc, #148]	@ (801bb58 <HAL_RCC_OscConfig+0x79c>)
 801bac4:	681a      	ldr	r2, [r3, #0]
 801bac6:	2380      	movs	r3, #128	@ 0x80
 801bac8:	049b      	lsls	r3, r3, #18
 801baca:	4013      	ands	r3, r2
 801bacc:	d0f0      	beq.n	801bab0 <HAL_RCC_OscConfig+0x6f4>
 801bace:	e03d      	b.n	801bb4c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bad0:	4b21      	ldr	r3, [pc, #132]	@ (801bb58 <HAL_RCC_OscConfig+0x79c>)
 801bad2:	681a      	ldr	r2, [r3, #0]
 801bad4:	4b20      	ldr	r3, [pc, #128]	@ (801bb58 <HAL_RCC_OscConfig+0x79c>)
 801bad6:	4922      	ldr	r1, [pc, #136]	@ (801bb60 <HAL_RCC_OscConfig+0x7a4>)
 801bad8:	400a      	ands	r2, r1
 801bada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801badc:	f7f9 f832 	bl	8014b44 <HAL_GetTick>
 801bae0:	0003      	movs	r3, r0
 801bae2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801bae4:	e008      	b.n	801baf8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801bae6:	f7f9 f82d 	bl	8014b44 <HAL_GetTick>
 801baea:	0002      	movs	r2, r0
 801baec:	697b      	ldr	r3, [r7, #20]
 801baee:	1ad3      	subs	r3, r2, r3
 801baf0:	2b02      	cmp	r3, #2
 801baf2:	d901      	bls.n	801baf8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801baf4:	2303      	movs	r3, #3
 801baf6:	e02a      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801baf8:	4b17      	ldr	r3, [pc, #92]	@ (801bb58 <HAL_RCC_OscConfig+0x79c>)
 801bafa:	681a      	ldr	r2, [r3, #0]
 801bafc:	2380      	movs	r3, #128	@ 0x80
 801bafe:	049b      	lsls	r3, r3, #18
 801bb00:	4013      	ands	r3, r2
 801bb02:	d1f0      	bne.n	801bae6 <HAL_RCC_OscConfig+0x72a>
 801bb04:	e022      	b.n	801bb4c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bb0a:	2b01      	cmp	r3, #1
 801bb0c:	d101      	bne.n	801bb12 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801bb0e:	2301      	movs	r3, #1
 801bb10:	e01d      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801bb12:	4b11      	ldr	r3, [pc, #68]	@ (801bb58 <HAL_RCC_OscConfig+0x79c>)
 801bb14:	68db      	ldr	r3, [r3, #12]
 801bb16:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bb18:	69ba      	ldr	r2, [r7, #24]
 801bb1a:	2380      	movs	r3, #128	@ 0x80
 801bb1c:	025b      	lsls	r3, r3, #9
 801bb1e:	401a      	ands	r2, r3
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bb24:	429a      	cmp	r2, r3
 801bb26:	d10f      	bne.n	801bb48 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801bb28:	69ba      	ldr	r2, [r7, #24]
 801bb2a:	23f0      	movs	r3, #240	@ 0xf0
 801bb2c:	039b      	lsls	r3, r3, #14
 801bb2e:	401a      	ands	r2, r3
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801bb34:	429a      	cmp	r2, r3
 801bb36:	d107      	bne.n	801bb48 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 801bb38:	69ba      	ldr	r2, [r7, #24]
 801bb3a:	23c0      	movs	r3, #192	@ 0xc0
 801bb3c:	041b      	lsls	r3, r3, #16
 801bb3e:	401a      	ands	r2, r3
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801bb44:	429a      	cmp	r2, r3
 801bb46:	d001      	beq.n	801bb4c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 801bb48:	2301      	movs	r3, #1
 801bb4a:	e000      	b.n	801bb4e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801bb4c:	2300      	movs	r3, #0
}
 801bb4e:	0018      	movs	r0, r3
 801bb50:	46bd      	mov	sp, r7
 801bb52:	b00a      	add	sp, #40	@ 0x28
 801bb54:	bdb0      	pop	{r4, r5, r7, pc}
 801bb56:	46c0      	nop			@ (mov r8, r8)
 801bb58:	40021000 	.word	0x40021000
 801bb5c:	ff02ffff 	.word	0xff02ffff
 801bb60:	feffffff 	.word	0xfeffffff

0801bb64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801bb64:	b5b0      	push	{r4, r5, r7, lr}
 801bb66:	b084      	sub	sp, #16
 801bb68:	af00      	add	r7, sp, #0
 801bb6a:	6078      	str	r0, [r7, #4]
 801bb6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	2b00      	cmp	r3, #0
 801bb72:	d101      	bne.n	801bb78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801bb74:	2301      	movs	r3, #1
 801bb76:	e128      	b.n	801bdca <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801bb78:	4b96      	ldr	r3, [pc, #600]	@ (801bdd4 <HAL_RCC_ClockConfig+0x270>)
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	2201      	movs	r2, #1
 801bb7e:	4013      	ands	r3, r2
 801bb80:	683a      	ldr	r2, [r7, #0]
 801bb82:	429a      	cmp	r2, r3
 801bb84:	d91e      	bls.n	801bbc4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bb86:	4b93      	ldr	r3, [pc, #588]	@ (801bdd4 <HAL_RCC_ClockConfig+0x270>)
 801bb88:	681b      	ldr	r3, [r3, #0]
 801bb8a:	2201      	movs	r2, #1
 801bb8c:	4393      	bics	r3, r2
 801bb8e:	0019      	movs	r1, r3
 801bb90:	4b90      	ldr	r3, [pc, #576]	@ (801bdd4 <HAL_RCC_ClockConfig+0x270>)
 801bb92:	683a      	ldr	r2, [r7, #0]
 801bb94:	430a      	orrs	r2, r1
 801bb96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801bb98:	f7f8 ffd4 	bl	8014b44 <HAL_GetTick>
 801bb9c:	0003      	movs	r3, r0
 801bb9e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bba0:	e009      	b.n	801bbb6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bba2:	f7f8 ffcf 	bl	8014b44 <HAL_GetTick>
 801bba6:	0002      	movs	r2, r0
 801bba8:	68fb      	ldr	r3, [r7, #12]
 801bbaa:	1ad3      	subs	r3, r2, r3
 801bbac:	4a8a      	ldr	r2, [pc, #552]	@ (801bdd8 <HAL_RCC_ClockConfig+0x274>)
 801bbae:	4293      	cmp	r3, r2
 801bbb0:	d901      	bls.n	801bbb6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801bbb2:	2303      	movs	r3, #3
 801bbb4:	e109      	b.n	801bdca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bbb6:	4b87      	ldr	r3, [pc, #540]	@ (801bdd4 <HAL_RCC_ClockConfig+0x270>)
 801bbb8:	681b      	ldr	r3, [r3, #0]
 801bbba:	2201      	movs	r2, #1
 801bbbc:	4013      	ands	r3, r2
 801bbbe:	683a      	ldr	r2, [r7, #0]
 801bbc0:	429a      	cmp	r2, r3
 801bbc2:	d1ee      	bne.n	801bba2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	681b      	ldr	r3, [r3, #0]
 801bbc8:	2202      	movs	r2, #2
 801bbca:	4013      	ands	r3, r2
 801bbcc:	d009      	beq.n	801bbe2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801bbce:	4b83      	ldr	r3, [pc, #524]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bbd0:	68db      	ldr	r3, [r3, #12]
 801bbd2:	22f0      	movs	r2, #240	@ 0xf0
 801bbd4:	4393      	bics	r3, r2
 801bbd6:	0019      	movs	r1, r3
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	689a      	ldr	r2, [r3, #8]
 801bbdc:	4b7f      	ldr	r3, [pc, #508]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bbde:	430a      	orrs	r2, r1
 801bbe0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	681b      	ldr	r3, [r3, #0]
 801bbe6:	2201      	movs	r2, #1
 801bbe8:	4013      	ands	r3, r2
 801bbea:	d100      	bne.n	801bbee <HAL_RCC_ClockConfig+0x8a>
 801bbec:	e089      	b.n	801bd02 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	685b      	ldr	r3, [r3, #4]
 801bbf2:	2b02      	cmp	r3, #2
 801bbf4:	d107      	bne.n	801bc06 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801bbf6:	4b79      	ldr	r3, [pc, #484]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bbf8:	681a      	ldr	r2, [r3, #0]
 801bbfa:	2380      	movs	r3, #128	@ 0x80
 801bbfc:	029b      	lsls	r3, r3, #10
 801bbfe:	4013      	ands	r3, r2
 801bc00:	d120      	bne.n	801bc44 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bc02:	2301      	movs	r3, #1
 801bc04:	e0e1      	b.n	801bdca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	685b      	ldr	r3, [r3, #4]
 801bc0a:	2b03      	cmp	r3, #3
 801bc0c:	d107      	bne.n	801bc1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801bc0e:	4b73      	ldr	r3, [pc, #460]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bc10:	681a      	ldr	r2, [r3, #0]
 801bc12:	2380      	movs	r3, #128	@ 0x80
 801bc14:	049b      	lsls	r3, r3, #18
 801bc16:	4013      	ands	r3, r2
 801bc18:	d114      	bne.n	801bc44 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bc1a:	2301      	movs	r3, #1
 801bc1c:	e0d5      	b.n	801bdca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	685b      	ldr	r3, [r3, #4]
 801bc22:	2b01      	cmp	r3, #1
 801bc24:	d106      	bne.n	801bc34 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bc26:	4b6d      	ldr	r3, [pc, #436]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bc28:	681b      	ldr	r3, [r3, #0]
 801bc2a:	2204      	movs	r2, #4
 801bc2c:	4013      	ands	r3, r2
 801bc2e:	d109      	bne.n	801bc44 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bc30:	2301      	movs	r3, #1
 801bc32:	e0ca      	b.n	801bdca <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801bc34:	4b69      	ldr	r3, [pc, #420]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bc36:	681a      	ldr	r2, [r3, #0]
 801bc38:	2380      	movs	r3, #128	@ 0x80
 801bc3a:	009b      	lsls	r3, r3, #2
 801bc3c:	4013      	ands	r3, r2
 801bc3e:	d101      	bne.n	801bc44 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801bc40:	2301      	movs	r3, #1
 801bc42:	e0c2      	b.n	801bdca <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801bc44:	4b65      	ldr	r3, [pc, #404]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bc46:	68db      	ldr	r3, [r3, #12]
 801bc48:	2203      	movs	r2, #3
 801bc4a:	4393      	bics	r3, r2
 801bc4c:	0019      	movs	r1, r3
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	685a      	ldr	r2, [r3, #4]
 801bc52:	4b62      	ldr	r3, [pc, #392]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bc54:	430a      	orrs	r2, r1
 801bc56:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801bc58:	f7f8 ff74 	bl	8014b44 <HAL_GetTick>
 801bc5c:	0003      	movs	r3, r0
 801bc5e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	685b      	ldr	r3, [r3, #4]
 801bc64:	2b02      	cmp	r3, #2
 801bc66:	d111      	bne.n	801bc8c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801bc68:	e009      	b.n	801bc7e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bc6a:	f7f8 ff6b 	bl	8014b44 <HAL_GetTick>
 801bc6e:	0002      	movs	r2, r0
 801bc70:	68fb      	ldr	r3, [r7, #12]
 801bc72:	1ad3      	subs	r3, r2, r3
 801bc74:	4a58      	ldr	r2, [pc, #352]	@ (801bdd8 <HAL_RCC_ClockConfig+0x274>)
 801bc76:	4293      	cmp	r3, r2
 801bc78:	d901      	bls.n	801bc7e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801bc7a:	2303      	movs	r3, #3
 801bc7c:	e0a5      	b.n	801bdca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801bc7e:	4b57      	ldr	r3, [pc, #348]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bc80:	68db      	ldr	r3, [r3, #12]
 801bc82:	220c      	movs	r2, #12
 801bc84:	4013      	ands	r3, r2
 801bc86:	2b08      	cmp	r3, #8
 801bc88:	d1ef      	bne.n	801bc6a <HAL_RCC_ClockConfig+0x106>
 801bc8a:	e03a      	b.n	801bd02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	685b      	ldr	r3, [r3, #4]
 801bc90:	2b03      	cmp	r3, #3
 801bc92:	d111      	bne.n	801bcb8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bc94:	e009      	b.n	801bcaa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bc96:	f7f8 ff55 	bl	8014b44 <HAL_GetTick>
 801bc9a:	0002      	movs	r2, r0
 801bc9c:	68fb      	ldr	r3, [r7, #12]
 801bc9e:	1ad3      	subs	r3, r2, r3
 801bca0:	4a4d      	ldr	r2, [pc, #308]	@ (801bdd8 <HAL_RCC_ClockConfig+0x274>)
 801bca2:	4293      	cmp	r3, r2
 801bca4:	d901      	bls.n	801bcaa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 801bca6:	2303      	movs	r3, #3
 801bca8:	e08f      	b.n	801bdca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801bcaa:	4b4c      	ldr	r3, [pc, #304]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bcac:	68db      	ldr	r3, [r3, #12]
 801bcae:	220c      	movs	r2, #12
 801bcb0:	4013      	ands	r3, r2
 801bcb2:	2b0c      	cmp	r3, #12
 801bcb4:	d1ef      	bne.n	801bc96 <HAL_RCC_ClockConfig+0x132>
 801bcb6:	e024      	b.n	801bd02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	685b      	ldr	r3, [r3, #4]
 801bcbc:	2b01      	cmp	r3, #1
 801bcbe:	d11b      	bne.n	801bcf8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801bcc0:	e009      	b.n	801bcd6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bcc2:	f7f8 ff3f 	bl	8014b44 <HAL_GetTick>
 801bcc6:	0002      	movs	r2, r0
 801bcc8:	68fb      	ldr	r3, [r7, #12]
 801bcca:	1ad3      	subs	r3, r2, r3
 801bccc:	4a42      	ldr	r2, [pc, #264]	@ (801bdd8 <HAL_RCC_ClockConfig+0x274>)
 801bcce:	4293      	cmp	r3, r2
 801bcd0:	d901      	bls.n	801bcd6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801bcd2:	2303      	movs	r3, #3
 801bcd4:	e079      	b.n	801bdca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801bcd6:	4b41      	ldr	r3, [pc, #260]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bcd8:	68db      	ldr	r3, [r3, #12]
 801bcda:	220c      	movs	r2, #12
 801bcdc:	4013      	ands	r3, r2
 801bcde:	2b04      	cmp	r3, #4
 801bce0:	d1ef      	bne.n	801bcc2 <HAL_RCC_ClockConfig+0x15e>
 801bce2:	e00e      	b.n	801bd02 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bce4:	f7f8 ff2e 	bl	8014b44 <HAL_GetTick>
 801bce8:	0002      	movs	r2, r0
 801bcea:	68fb      	ldr	r3, [r7, #12]
 801bcec:	1ad3      	subs	r3, r2, r3
 801bcee:	4a3a      	ldr	r2, [pc, #232]	@ (801bdd8 <HAL_RCC_ClockConfig+0x274>)
 801bcf0:	4293      	cmp	r3, r2
 801bcf2:	d901      	bls.n	801bcf8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801bcf4:	2303      	movs	r3, #3
 801bcf6:	e068      	b.n	801bdca <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 801bcf8:	4b38      	ldr	r3, [pc, #224]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bcfa:	68db      	ldr	r3, [r3, #12]
 801bcfc:	220c      	movs	r2, #12
 801bcfe:	4013      	ands	r3, r2
 801bd00:	d1f0      	bne.n	801bce4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801bd02:	4b34      	ldr	r3, [pc, #208]	@ (801bdd4 <HAL_RCC_ClockConfig+0x270>)
 801bd04:	681b      	ldr	r3, [r3, #0]
 801bd06:	2201      	movs	r2, #1
 801bd08:	4013      	ands	r3, r2
 801bd0a:	683a      	ldr	r2, [r7, #0]
 801bd0c:	429a      	cmp	r2, r3
 801bd0e:	d21e      	bcs.n	801bd4e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bd10:	4b30      	ldr	r3, [pc, #192]	@ (801bdd4 <HAL_RCC_ClockConfig+0x270>)
 801bd12:	681b      	ldr	r3, [r3, #0]
 801bd14:	2201      	movs	r2, #1
 801bd16:	4393      	bics	r3, r2
 801bd18:	0019      	movs	r1, r3
 801bd1a:	4b2e      	ldr	r3, [pc, #184]	@ (801bdd4 <HAL_RCC_ClockConfig+0x270>)
 801bd1c:	683a      	ldr	r2, [r7, #0]
 801bd1e:	430a      	orrs	r2, r1
 801bd20:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801bd22:	f7f8 ff0f 	bl	8014b44 <HAL_GetTick>
 801bd26:	0003      	movs	r3, r0
 801bd28:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bd2a:	e009      	b.n	801bd40 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801bd2c:	f7f8 ff0a 	bl	8014b44 <HAL_GetTick>
 801bd30:	0002      	movs	r2, r0
 801bd32:	68fb      	ldr	r3, [r7, #12]
 801bd34:	1ad3      	subs	r3, r2, r3
 801bd36:	4a28      	ldr	r2, [pc, #160]	@ (801bdd8 <HAL_RCC_ClockConfig+0x274>)
 801bd38:	4293      	cmp	r3, r2
 801bd3a:	d901      	bls.n	801bd40 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801bd3c:	2303      	movs	r3, #3
 801bd3e:	e044      	b.n	801bdca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bd40:	4b24      	ldr	r3, [pc, #144]	@ (801bdd4 <HAL_RCC_ClockConfig+0x270>)
 801bd42:	681b      	ldr	r3, [r3, #0]
 801bd44:	2201      	movs	r2, #1
 801bd46:	4013      	ands	r3, r2
 801bd48:	683a      	ldr	r2, [r7, #0]
 801bd4a:	429a      	cmp	r2, r3
 801bd4c:	d1ee      	bne.n	801bd2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	2204      	movs	r2, #4
 801bd54:	4013      	ands	r3, r2
 801bd56:	d009      	beq.n	801bd6c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801bd58:	4b20      	ldr	r3, [pc, #128]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bd5a:	68db      	ldr	r3, [r3, #12]
 801bd5c:	4a20      	ldr	r2, [pc, #128]	@ (801bde0 <HAL_RCC_ClockConfig+0x27c>)
 801bd5e:	4013      	ands	r3, r2
 801bd60:	0019      	movs	r1, r3
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	68da      	ldr	r2, [r3, #12]
 801bd66:	4b1d      	ldr	r3, [pc, #116]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bd68:	430a      	orrs	r2, r1
 801bd6a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	2208      	movs	r2, #8
 801bd72:	4013      	ands	r3, r2
 801bd74:	d00a      	beq.n	801bd8c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801bd76:	4b19      	ldr	r3, [pc, #100]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bd78:	68db      	ldr	r3, [r3, #12]
 801bd7a:	4a1a      	ldr	r2, [pc, #104]	@ (801bde4 <HAL_RCC_ClockConfig+0x280>)
 801bd7c:	4013      	ands	r3, r2
 801bd7e:	0019      	movs	r1, r3
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	691b      	ldr	r3, [r3, #16]
 801bd84:	00da      	lsls	r2, r3, #3
 801bd86:	4b15      	ldr	r3, [pc, #84]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bd88:	430a      	orrs	r2, r1
 801bd8a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801bd8c:	f000 f832 	bl	801bdf4 <HAL_RCC_GetSysClockFreq>
 801bd90:	0001      	movs	r1, r0
 801bd92:	4b12      	ldr	r3, [pc, #72]	@ (801bddc <HAL_RCC_ClockConfig+0x278>)
 801bd94:	68db      	ldr	r3, [r3, #12]
 801bd96:	091b      	lsrs	r3, r3, #4
 801bd98:	220f      	movs	r2, #15
 801bd9a:	4013      	ands	r3, r2
 801bd9c:	4a12      	ldr	r2, [pc, #72]	@ (801bde8 <HAL_RCC_ClockConfig+0x284>)
 801bd9e:	5cd3      	ldrb	r3, [r2, r3]
 801bda0:	000a      	movs	r2, r1
 801bda2:	40da      	lsrs	r2, r3
 801bda4:	4b11      	ldr	r3, [pc, #68]	@ (801bdec <HAL_RCC_ClockConfig+0x288>)
 801bda6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801bda8:	4b11      	ldr	r3, [pc, #68]	@ (801bdf0 <HAL_RCC_ClockConfig+0x28c>)
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	250b      	movs	r5, #11
 801bdae:	197c      	adds	r4, r7, r5
 801bdb0:	0018      	movs	r0, r3
 801bdb2:	f7f8 fe81 	bl	8014ab8 <HAL_InitTick>
 801bdb6:	0003      	movs	r3, r0
 801bdb8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801bdba:	197b      	adds	r3, r7, r5
 801bdbc:	781b      	ldrb	r3, [r3, #0]
 801bdbe:	2b00      	cmp	r3, #0
 801bdc0:	d002      	beq.n	801bdc8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801bdc2:	197b      	adds	r3, r7, r5
 801bdc4:	781b      	ldrb	r3, [r3, #0]
 801bdc6:	e000      	b.n	801bdca <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801bdc8:	2300      	movs	r3, #0
}
 801bdca:	0018      	movs	r0, r3
 801bdcc:	46bd      	mov	sp, r7
 801bdce:	b004      	add	sp, #16
 801bdd0:	bdb0      	pop	{r4, r5, r7, pc}
 801bdd2:	46c0      	nop			@ (mov r8, r8)
 801bdd4:	40022000 	.word	0x40022000
 801bdd8:	00001388 	.word	0x00001388
 801bddc:	40021000 	.word	0x40021000
 801bde0:	fffff8ff 	.word	0xfffff8ff
 801bde4:	ffffc7ff 	.word	0xffffc7ff
 801bde8:	0802e9cc 	.word	0x0802e9cc
 801bdec:	200000ec 	.word	0x200000ec
 801bdf0:	200000fc 	.word	0x200000fc

0801bdf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801bdf4:	b5b0      	push	{r4, r5, r7, lr}
 801bdf6:	b08e      	sub	sp, #56	@ 0x38
 801bdf8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801bdfa:	4b4c      	ldr	r3, [pc, #304]	@ (801bf2c <HAL_RCC_GetSysClockFreq+0x138>)
 801bdfc:	68db      	ldr	r3, [r3, #12]
 801bdfe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801be00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801be02:	230c      	movs	r3, #12
 801be04:	4013      	ands	r3, r2
 801be06:	2b0c      	cmp	r3, #12
 801be08:	d014      	beq.n	801be34 <HAL_RCC_GetSysClockFreq+0x40>
 801be0a:	d900      	bls.n	801be0e <HAL_RCC_GetSysClockFreq+0x1a>
 801be0c:	e07b      	b.n	801bf06 <HAL_RCC_GetSysClockFreq+0x112>
 801be0e:	2b04      	cmp	r3, #4
 801be10:	d002      	beq.n	801be18 <HAL_RCC_GetSysClockFreq+0x24>
 801be12:	2b08      	cmp	r3, #8
 801be14:	d00b      	beq.n	801be2e <HAL_RCC_GetSysClockFreq+0x3a>
 801be16:	e076      	b.n	801bf06 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801be18:	4b44      	ldr	r3, [pc, #272]	@ (801bf2c <HAL_RCC_GetSysClockFreq+0x138>)
 801be1a:	681b      	ldr	r3, [r3, #0]
 801be1c:	2210      	movs	r2, #16
 801be1e:	4013      	ands	r3, r2
 801be20:	d002      	beq.n	801be28 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801be22:	4b43      	ldr	r3, [pc, #268]	@ (801bf30 <HAL_RCC_GetSysClockFreq+0x13c>)
 801be24:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801be26:	e07c      	b.n	801bf22 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 801be28:	4b42      	ldr	r3, [pc, #264]	@ (801bf34 <HAL_RCC_GetSysClockFreq+0x140>)
 801be2a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801be2c:	e079      	b.n	801bf22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801be2e:	4b42      	ldr	r3, [pc, #264]	@ (801bf38 <HAL_RCC_GetSysClockFreq+0x144>)
 801be30:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801be32:	e076      	b.n	801bf22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801be34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be36:	0c9a      	lsrs	r2, r3, #18
 801be38:	230f      	movs	r3, #15
 801be3a:	401a      	ands	r2, r3
 801be3c:	4b3f      	ldr	r3, [pc, #252]	@ (801bf3c <HAL_RCC_GetSysClockFreq+0x148>)
 801be3e:	5c9b      	ldrb	r3, [r3, r2]
 801be40:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801be42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801be44:	0d9a      	lsrs	r2, r3, #22
 801be46:	2303      	movs	r3, #3
 801be48:	4013      	ands	r3, r2
 801be4a:	3301      	adds	r3, #1
 801be4c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801be4e:	4b37      	ldr	r3, [pc, #220]	@ (801bf2c <HAL_RCC_GetSysClockFreq+0x138>)
 801be50:	68da      	ldr	r2, [r3, #12]
 801be52:	2380      	movs	r3, #128	@ 0x80
 801be54:	025b      	lsls	r3, r3, #9
 801be56:	4013      	ands	r3, r2
 801be58:	d01a      	beq.n	801be90 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801be5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be5c:	61bb      	str	r3, [r7, #24]
 801be5e:	2300      	movs	r3, #0
 801be60:	61fb      	str	r3, [r7, #28]
 801be62:	4a35      	ldr	r2, [pc, #212]	@ (801bf38 <HAL_RCC_GetSysClockFreq+0x144>)
 801be64:	2300      	movs	r3, #0
 801be66:	69b8      	ldr	r0, [r7, #24]
 801be68:	69f9      	ldr	r1, [r7, #28]
 801be6a:	f7e4 fba9 	bl	80005c0 <__aeabi_lmul>
 801be6e:	0002      	movs	r2, r0
 801be70:	000b      	movs	r3, r1
 801be72:	0010      	movs	r0, r2
 801be74:	0019      	movs	r1, r3
 801be76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be78:	613b      	str	r3, [r7, #16]
 801be7a:	2300      	movs	r3, #0
 801be7c:	617b      	str	r3, [r7, #20]
 801be7e:	693a      	ldr	r2, [r7, #16]
 801be80:	697b      	ldr	r3, [r7, #20]
 801be82:	f7e4 fb7d 	bl	8000580 <__aeabi_uldivmod>
 801be86:	0002      	movs	r2, r0
 801be88:	000b      	movs	r3, r1
 801be8a:	0013      	movs	r3, r2
 801be8c:	637b      	str	r3, [r7, #52]	@ 0x34
 801be8e:	e037      	b.n	801bf00 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 801be90:	4b26      	ldr	r3, [pc, #152]	@ (801bf2c <HAL_RCC_GetSysClockFreq+0x138>)
 801be92:	681b      	ldr	r3, [r3, #0]
 801be94:	2210      	movs	r2, #16
 801be96:	4013      	ands	r3, r2
 801be98:	d01a      	beq.n	801bed0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801be9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be9c:	60bb      	str	r3, [r7, #8]
 801be9e:	2300      	movs	r3, #0
 801bea0:	60fb      	str	r3, [r7, #12]
 801bea2:	4a23      	ldr	r2, [pc, #140]	@ (801bf30 <HAL_RCC_GetSysClockFreq+0x13c>)
 801bea4:	2300      	movs	r3, #0
 801bea6:	68b8      	ldr	r0, [r7, #8]
 801bea8:	68f9      	ldr	r1, [r7, #12]
 801beaa:	f7e4 fb89 	bl	80005c0 <__aeabi_lmul>
 801beae:	0002      	movs	r2, r0
 801beb0:	000b      	movs	r3, r1
 801beb2:	0010      	movs	r0, r2
 801beb4:	0019      	movs	r1, r3
 801beb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801beb8:	603b      	str	r3, [r7, #0]
 801beba:	2300      	movs	r3, #0
 801bebc:	607b      	str	r3, [r7, #4]
 801bebe:	683a      	ldr	r2, [r7, #0]
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	f7e4 fb5d 	bl	8000580 <__aeabi_uldivmod>
 801bec6:	0002      	movs	r2, r0
 801bec8:	000b      	movs	r3, r1
 801beca:	0013      	movs	r3, r2
 801becc:	637b      	str	r3, [r7, #52]	@ 0x34
 801bece:	e017      	b.n	801bf00 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801bed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bed2:	0018      	movs	r0, r3
 801bed4:	2300      	movs	r3, #0
 801bed6:	0019      	movs	r1, r3
 801bed8:	4a16      	ldr	r2, [pc, #88]	@ (801bf34 <HAL_RCC_GetSysClockFreq+0x140>)
 801beda:	2300      	movs	r3, #0
 801bedc:	f7e4 fb70 	bl	80005c0 <__aeabi_lmul>
 801bee0:	0002      	movs	r2, r0
 801bee2:	000b      	movs	r3, r1
 801bee4:	0010      	movs	r0, r2
 801bee6:	0019      	movs	r1, r3
 801bee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801beea:	001c      	movs	r4, r3
 801beec:	2300      	movs	r3, #0
 801beee:	001d      	movs	r5, r3
 801bef0:	0022      	movs	r2, r4
 801bef2:	002b      	movs	r3, r5
 801bef4:	f7e4 fb44 	bl	8000580 <__aeabi_uldivmod>
 801bef8:	0002      	movs	r2, r0
 801befa:	000b      	movs	r3, r1
 801befc:	0013      	movs	r3, r2
 801befe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 801bf00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bf02:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bf04:	e00d      	b.n	801bf22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801bf06:	4b09      	ldr	r3, [pc, #36]	@ (801bf2c <HAL_RCC_GetSysClockFreq+0x138>)
 801bf08:	685b      	ldr	r3, [r3, #4]
 801bf0a:	0b5b      	lsrs	r3, r3, #13
 801bf0c:	2207      	movs	r2, #7
 801bf0e:	4013      	ands	r3, r2
 801bf10:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801bf12:	6a3b      	ldr	r3, [r7, #32]
 801bf14:	3301      	adds	r3, #1
 801bf16:	2280      	movs	r2, #128	@ 0x80
 801bf18:	0212      	lsls	r2, r2, #8
 801bf1a:	409a      	lsls	r2, r3
 801bf1c:	0013      	movs	r3, r2
 801bf1e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801bf20:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801bf22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801bf24:	0018      	movs	r0, r3
 801bf26:	46bd      	mov	sp, r7
 801bf28:	b00e      	add	sp, #56	@ 0x38
 801bf2a:	bdb0      	pop	{r4, r5, r7, pc}
 801bf2c:	40021000 	.word	0x40021000
 801bf30:	003d0900 	.word	0x003d0900
 801bf34:	00f42400 	.word	0x00f42400
 801bf38:	007a1200 	.word	0x007a1200
 801bf3c:	0802e9e4 	.word	0x0802e9e4

0801bf40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801bf40:	b580      	push	{r7, lr}
 801bf42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801bf44:	4b02      	ldr	r3, [pc, #8]	@ (801bf50 <HAL_RCC_GetHCLKFreq+0x10>)
 801bf46:	681b      	ldr	r3, [r3, #0]
}
 801bf48:	0018      	movs	r0, r3
 801bf4a:	46bd      	mov	sp, r7
 801bf4c:	bd80      	pop	{r7, pc}
 801bf4e:	46c0      	nop			@ (mov r8, r8)
 801bf50:	200000ec 	.word	0x200000ec

0801bf54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801bf54:	b580      	push	{r7, lr}
 801bf56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801bf58:	f7ff fff2 	bl	801bf40 <HAL_RCC_GetHCLKFreq>
 801bf5c:	0001      	movs	r1, r0
 801bf5e:	4b06      	ldr	r3, [pc, #24]	@ (801bf78 <HAL_RCC_GetPCLK1Freq+0x24>)
 801bf60:	68db      	ldr	r3, [r3, #12]
 801bf62:	0a1b      	lsrs	r3, r3, #8
 801bf64:	2207      	movs	r2, #7
 801bf66:	4013      	ands	r3, r2
 801bf68:	4a04      	ldr	r2, [pc, #16]	@ (801bf7c <HAL_RCC_GetPCLK1Freq+0x28>)
 801bf6a:	5cd3      	ldrb	r3, [r2, r3]
 801bf6c:	40d9      	lsrs	r1, r3
 801bf6e:	000b      	movs	r3, r1
}
 801bf70:	0018      	movs	r0, r3
 801bf72:	46bd      	mov	sp, r7
 801bf74:	bd80      	pop	{r7, pc}
 801bf76:	46c0      	nop			@ (mov r8, r8)
 801bf78:	40021000 	.word	0x40021000
 801bf7c:	0802e9dc 	.word	0x0802e9dc

0801bf80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801bf80:	b580      	push	{r7, lr}
 801bf82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801bf84:	f7ff ffdc 	bl	801bf40 <HAL_RCC_GetHCLKFreq>
 801bf88:	0001      	movs	r1, r0
 801bf8a:	4b06      	ldr	r3, [pc, #24]	@ (801bfa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 801bf8c:	68db      	ldr	r3, [r3, #12]
 801bf8e:	0adb      	lsrs	r3, r3, #11
 801bf90:	2207      	movs	r2, #7
 801bf92:	4013      	ands	r3, r2
 801bf94:	4a04      	ldr	r2, [pc, #16]	@ (801bfa8 <HAL_RCC_GetPCLK2Freq+0x28>)
 801bf96:	5cd3      	ldrb	r3, [r2, r3]
 801bf98:	40d9      	lsrs	r1, r3
 801bf9a:	000b      	movs	r3, r1
}
 801bf9c:	0018      	movs	r0, r3
 801bf9e:	46bd      	mov	sp, r7
 801bfa0:	bd80      	pop	{r7, pc}
 801bfa2:	46c0      	nop			@ (mov r8, r8)
 801bfa4:	40021000 	.word	0x40021000
 801bfa8:	0802e9dc 	.word	0x0802e9dc

0801bfac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801bfac:	b580      	push	{r7, lr}
 801bfae:	b086      	sub	sp, #24
 801bfb0:	af00      	add	r7, sp, #0
 801bfb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801bfb4:	2017      	movs	r0, #23
 801bfb6:	183b      	adds	r3, r7, r0
 801bfb8:	2200      	movs	r2, #0
 801bfba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	681b      	ldr	r3, [r3, #0]
 801bfc0:	2220      	movs	r2, #32
 801bfc2:	4013      	ands	r3, r2
 801bfc4:	d100      	bne.n	801bfc8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801bfc6:	e0c7      	b.n	801c158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801bfc8:	4b9b      	ldr	r3, [pc, #620]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bfcc:	2380      	movs	r3, #128	@ 0x80
 801bfce:	055b      	lsls	r3, r3, #21
 801bfd0:	4013      	ands	r3, r2
 801bfd2:	d109      	bne.n	801bfe8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801bfd4:	4b98      	ldr	r3, [pc, #608]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801bfd8:	4b97      	ldr	r3, [pc, #604]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801bfda:	2180      	movs	r1, #128	@ 0x80
 801bfdc:	0549      	lsls	r1, r1, #21
 801bfde:	430a      	orrs	r2, r1
 801bfe0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801bfe2:	183b      	adds	r3, r7, r0
 801bfe4:	2201      	movs	r2, #1
 801bfe6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801bfe8:	4b94      	ldr	r3, [pc, #592]	@ (801c23c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801bfea:	681a      	ldr	r2, [r3, #0]
 801bfec:	2380      	movs	r3, #128	@ 0x80
 801bfee:	005b      	lsls	r3, r3, #1
 801bff0:	4013      	ands	r3, r2
 801bff2:	d11a      	bne.n	801c02a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801bff4:	4b91      	ldr	r3, [pc, #580]	@ (801c23c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801bff6:	681a      	ldr	r2, [r3, #0]
 801bff8:	4b90      	ldr	r3, [pc, #576]	@ (801c23c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801bffa:	2180      	movs	r1, #128	@ 0x80
 801bffc:	0049      	lsls	r1, r1, #1
 801bffe:	430a      	orrs	r2, r1
 801c000:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c002:	f7f8 fd9f 	bl	8014b44 <HAL_GetTick>
 801c006:	0003      	movs	r3, r0
 801c008:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801c00a:	e008      	b.n	801c01e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c00c:	f7f8 fd9a 	bl	8014b44 <HAL_GetTick>
 801c010:	0002      	movs	r2, r0
 801c012:	693b      	ldr	r3, [r7, #16]
 801c014:	1ad3      	subs	r3, r2, r3
 801c016:	2b64      	cmp	r3, #100	@ 0x64
 801c018:	d901      	bls.n	801c01e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801c01a:	2303      	movs	r3, #3
 801c01c:	e107      	b.n	801c22e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801c01e:	4b87      	ldr	r3, [pc, #540]	@ (801c23c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801c020:	681a      	ldr	r2, [r3, #0]
 801c022:	2380      	movs	r3, #128	@ 0x80
 801c024:	005b      	lsls	r3, r3, #1
 801c026:	4013      	ands	r3, r2
 801c028:	d0f0      	beq.n	801c00c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801c02a:	4b83      	ldr	r3, [pc, #524]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c02c:	681a      	ldr	r2, [r3, #0]
 801c02e:	23c0      	movs	r3, #192	@ 0xc0
 801c030:	039b      	lsls	r3, r3, #14
 801c032:	4013      	ands	r3, r2
 801c034:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	685a      	ldr	r2, [r3, #4]
 801c03a:	23c0      	movs	r3, #192	@ 0xc0
 801c03c:	039b      	lsls	r3, r3, #14
 801c03e:	4013      	ands	r3, r2
 801c040:	68fa      	ldr	r2, [r7, #12]
 801c042:	429a      	cmp	r2, r3
 801c044:	d013      	beq.n	801c06e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	685a      	ldr	r2, [r3, #4]
 801c04a:	23c0      	movs	r3, #192	@ 0xc0
 801c04c:	029b      	lsls	r3, r3, #10
 801c04e:	401a      	ands	r2, r3
 801c050:	23c0      	movs	r3, #192	@ 0xc0
 801c052:	029b      	lsls	r3, r3, #10
 801c054:	429a      	cmp	r2, r3
 801c056:	d10a      	bne.n	801c06e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801c058:	4b77      	ldr	r3, [pc, #476]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c05a:	681a      	ldr	r2, [r3, #0]
 801c05c:	2380      	movs	r3, #128	@ 0x80
 801c05e:	029b      	lsls	r3, r3, #10
 801c060:	401a      	ands	r2, r3
 801c062:	2380      	movs	r3, #128	@ 0x80
 801c064:	029b      	lsls	r3, r3, #10
 801c066:	429a      	cmp	r2, r3
 801c068:	d101      	bne.n	801c06e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 801c06a:	2301      	movs	r3, #1
 801c06c:	e0df      	b.n	801c22e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 801c06e:	4b72      	ldr	r3, [pc, #456]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c070:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801c072:	23c0      	movs	r3, #192	@ 0xc0
 801c074:	029b      	lsls	r3, r3, #10
 801c076:	4013      	ands	r3, r2
 801c078:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801c07a:	68fb      	ldr	r3, [r7, #12]
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	d03b      	beq.n	801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	685a      	ldr	r2, [r3, #4]
 801c084:	23c0      	movs	r3, #192	@ 0xc0
 801c086:	029b      	lsls	r3, r3, #10
 801c088:	4013      	ands	r3, r2
 801c08a:	68fa      	ldr	r2, [r7, #12]
 801c08c:	429a      	cmp	r2, r3
 801c08e:	d033      	beq.n	801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	681b      	ldr	r3, [r3, #0]
 801c094:	2220      	movs	r2, #32
 801c096:	4013      	ands	r3, r2
 801c098:	d02e      	beq.n	801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801c09a:	4b67      	ldr	r3, [pc, #412]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c09c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c09e:	4a68      	ldr	r2, [pc, #416]	@ (801c240 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801c0a0:	4013      	ands	r3, r2
 801c0a2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801c0a4:	4b64      	ldr	r3, [pc, #400]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801c0a8:	4b63      	ldr	r3, [pc, #396]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0aa:	2180      	movs	r1, #128	@ 0x80
 801c0ac:	0309      	lsls	r1, r1, #12
 801c0ae:	430a      	orrs	r2, r1
 801c0b0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801c0b2:	4b61      	ldr	r3, [pc, #388]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801c0b6:	4b60      	ldr	r3, [pc, #384]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0b8:	4962      	ldr	r1, [pc, #392]	@ (801c244 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801c0ba:	400a      	ands	r2, r1
 801c0bc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 801c0be:	4b5e      	ldr	r3, [pc, #376]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0c0:	68fa      	ldr	r2, [r7, #12]
 801c0c2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801c0c4:	68fa      	ldr	r2, [r7, #12]
 801c0c6:	2380      	movs	r3, #128	@ 0x80
 801c0c8:	005b      	lsls	r3, r3, #1
 801c0ca:	4013      	ands	r3, r2
 801c0cc:	d014      	beq.n	801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801c0ce:	f7f8 fd39 	bl	8014b44 <HAL_GetTick>
 801c0d2:	0003      	movs	r3, r0
 801c0d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c0d6:	e009      	b.n	801c0ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801c0d8:	f7f8 fd34 	bl	8014b44 <HAL_GetTick>
 801c0dc:	0002      	movs	r2, r0
 801c0de:	693b      	ldr	r3, [r7, #16]
 801c0e0:	1ad3      	subs	r3, r2, r3
 801c0e2:	4a59      	ldr	r2, [pc, #356]	@ (801c248 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801c0e4:	4293      	cmp	r3, r2
 801c0e6:	d901      	bls.n	801c0ec <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801c0e8:	2303      	movs	r3, #3
 801c0ea:	e0a0      	b.n	801c22e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c0ec:	4b52      	ldr	r3, [pc, #328]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c0ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801c0f0:	2380      	movs	r3, #128	@ 0x80
 801c0f2:	009b      	lsls	r3, r3, #2
 801c0f4:	4013      	ands	r3, r2
 801c0f6:	d0ef      	beq.n	801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	2220      	movs	r2, #32
 801c0fe:	4013      	ands	r3, r2
 801c100:	d01f      	beq.n	801c142 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	685a      	ldr	r2, [r3, #4]
 801c106:	23c0      	movs	r3, #192	@ 0xc0
 801c108:	029b      	lsls	r3, r3, #10
 801c10a:	401a      	ands	r2, r3
 801c10c:	23c0      	movs	r3, #192	@ 0xc0
 801c10e:	029b      	lsls	r3, r3, #10
 801c110:	429a      	cmp	r2, r3
 801c112:	d10c      	bne.n	801c12e <HAL_RCCEx_PeriphCLKConfig+0x182>
 801c114:	4b48      	ldr	r3, [pc, #288]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c116:	681b      	ldr	r3, [r3, #0]
 801c118:	4a4c      	ldr	r2, [pc, #304]	@ (801c24c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 801c11a:	4013      	ands	r3, r2
 801c11c:	0019      	movs	r1, r3
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	685a      	ldr	r2, [r3, #4]
 801c122:	23c0      	movs	r3, #192	@ 0xc0
 801c124:	039b      	lsls	r3, r3, #14
 801c126:	401a      	ands	r2, r3
 801c128:	4b43      	ldr	r3, [pc, #268]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c12a:	430a      	orrs	r2, r1
 801c12c:	601a      	str	r2, [r3, #0]
 801c12e:	4b42      	ldr	r3, [pc, #264]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c130:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801c132:	687b      	ldr	r3, [r7, #4]
 801c134:	685a      	ldr	r2, [r3, #4]
 801c136:	23c0      	movs	r3, #192	@ 0xc0
 801c138:	029b      	lsls	r3, r3, #10
 801c13a:	401a      	ands	r2, r3
 801c13c:	4b3e      	ldr	r3, [pc, #248]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c13e:	430a      	orrs	r2, r1
 801c140:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801c142:	2317      	movs	r3, #23
 801c144:	18fb      	adds	r3, r7, r3
 801c146:	781b      	ldrb	r3, [r3, #0]
 801c148:	2b01      	cmp	r3, #1
 801c14a:	d105      	bne.n	801c158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c14c:	4b3a      	ldr	r3, [pc, #232]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c14e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c150:	4b39      	ldr	r3, [pc, #228]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c152:	493f      	ldr	r1, [pc, #252]	@ (801c250 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801c154:	400a      	ands	r2, r1
 801c156:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	2201      	movs	r2, #1
 801c15e:	4013      	ands	r3, r2
 801c160:	d009      	beq.n	801c176 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801c162:	4b35      	ldr	r3, [pc, #212]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c166:	2203      	movs	r2, #3
 801c168:	4393      	bics	r3, r2
 801c16a:	0019      	movs	r1, r3
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	689a      	ldr	r2, [r3, #8]
 801c170:	4b31      	ldr	r3, [pc, #196]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c172:	430a      	orrs	r2, r1
 801c174:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801c176:	687b      	ldr	r3, [r7, #4]
 801c178:	681b      	ldr	r3, [r3, #0]
 801c17a:	2202      	movs	r2, #2
 801c17c:	4013      	ands	r3, r2
 801c17e:	d009      	beq.n	801c194 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801c180:	4b2d      	ldr	r3, [pc, #180]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c184:	220c      	movs	r2, #12
 801c186:	4393      	bics	r3, r2
 801c188:	0019      	movs	r1, r3
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	68da      	ldr	r2, [r3, #12]
 801c18e:	4b2a      	ldr	r3, [pc, #168]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c190:	430a      	orrs	r2, r1
 801c192:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	681b      	ldr	r3, [r3, #0]
 801c198:	2204      	movs	r2, #4
 801c19a:	4013      	ands	r3, r2
 801c19c:	d009      	beq.n	801c1b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c19e:	4b26      	ldr	r3, [pc, #152]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c1a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c1a2:	4a2c      	ldr	r2, [pc, #176]	@ (801c254 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801c1a4:	4013      	ands	r3, r2
 801c1a6:	0019      	movs	r1, r3
 801c1a8:	687b      	ldr	r3, [r7, #4]
 801c1aa:	691a      	ldr	r2, [r3, #16]
 801c1ac:	4b22      	ldr	r3, [pc, #136]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c1ae:	430a      	orrs	r2, r1
 801c1b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	681b      	ldr	r3, [r3, #0]
 801c1b6:	2208      	movs	r2, #8
 801c1b8:	4013      	ands	r3, r2
 801c1ba:	d009      	beq.n	801c1d0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801c1bc:	4b1e      	ldr	r3, [pc, #120]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c1be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c1c0:	4a25      	ldr	r2, [pc, #148]	@ (801c258 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801c1c2:	4013      	ands	r3, r2
 801c1c4:	0019      	movs	r1, r3
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	695a      	ldr	r2, [r3, #20]
 801c1ca:	4b1b      	ldr	r3, [pc, #108]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c1cc:	430a      	orrs	r2, r1
 801c1ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	681a      	ldr	r2, [r3, #0]
 801c1d4:	2380      	movs	r3, #128	@ 0x80
 801c1d6:	005b      	lsls	r3, r3, #1
 801c1d8:	4013      	ands	r3, r2
 801c1da:	d009      	beq.n	801c1f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801c1dc:	4b16      	ldr	r3, [pc, #88]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c1de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c1e0:	4a17      	ldr	r2, [pc, #92]	@ (801c240 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801c1e2:	4013      	ands	r3, r2
 801c1e4:	0019      	movs	r1, r3
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	699a      	ldr	r2, [r3, #24]
 801c1ea:	4b13      	ldr	r3, [pc, #76]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c1ec:	430a      	orrs	r2, r1
 801c1ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	681b      	ldr	r3, [r3, #0]
 801c1f4:	2240      	movs	r2, #64	@ 0x40
 801c1f6:	4013      	ands	r3, r2
 801c1f8:	d009      	beq.n	801c20e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801c1fa:	4b0f      	ldr	r3, [pc, #60]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c1fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c1fe:	4a17      	ldr	r2, [pc, #92]	@ (801c25c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 801c200:	4013      	ands	r3, r2
 801c202:	0019      	movs	r1, r3
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	6a1a      	ldr	r2, [r3, #32]
 801c208:	4b0b      	ldr	r3, [pc, #44]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c20a:	430a      	orrs	r2, r1
 801c20c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	2280      	movs	r2, #128	@ 0x80
 801c214:	4013      	ands	r3, r2
 801c216:	d009      	beq.n	801c22c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 801c218:	4b07      	ldr	r3, [pc, #28]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c21a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c21c:	4a10      	ldr	r2, [pc, #64]	@ (801c260 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 801c21e:	4013      	ands	r3, r2
 801c220:	0019      	movs	r1, r3
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	69da      	ldr	r2, [r3, #28]
 801c226:	4b04      	ldr	r3, [pc, #16]	@ (801c238 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801c228:	430a      	orrs	r2, r1
 801c22a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 801c22c:	2300      	movs	r3, #0
}
 801c22e:	0018      	movs	r0, r3
 801c230:	46bd      	mov	sp, r7
 801c232:	b006      	add	sp, #24
 801c234:	bd80      	pop	{r7, pc}
 801c236:	46c0      	nop			@ (mov r8, r8)
 801c238:	40021000 	.word	0x40021000
 801c23c:	40007000 	.word	0x40007000
 801c240:	fffcffff 	.word	0xfffcffff
 801c244:	fff7ffff 	.word	0xfff7ffff
 801c248:	00001388 	.word	0x00001388
 801c24c:	ffcfffff 	.word	0xffcfffff
 801c250:	efffffff 	.word	0xefffffff
 801c254:	fffff3ff 	.word	0xfffff3ff
 801c258:	ffffcfff 	.word	0xffffcfff
 801c25c:	fbffffff 	.word	0xfbffffff
 801c260:	fff3ffff 	.word	0xfff3ffff

0801c264 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801c264:	b5b0      	push	{r4, r5, r7, lr}
 801c266:	b084      	sub	sp, #16
 801c268:	af00      	add	r7, sp, #0
 801c26a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 801c26c:	230f      	movs	r3, #15
 801c26e:	18fb      	adds	r3, r7, r3
 801c270:	2201      	movs	r2, #1
 801c272:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	2b00      	cmp	r3, #0
 801c278:	d101      	bne.n	801c27e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801c27a:	2301      	movs	r3, #1
 801c27c:	e088      	b.n	801c390 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	2221      	movs	r2, #33	@ 0x21
 801c282:	5c9b      	ldrb	r3, [r3, r2]
 801c284:	b2db      	uxtb	r3, r3
 801c286:	2b00      	cmp	r3, #0
 801c288:	d107      	bne.n	801c29a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	2220      	movs	r2, #32
 801c28e:	2100      	movs	r1, #0
 801c290:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	0018      	movs	r0, r3
 801c296:	f7f2 fa5f 	bl	800e758 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	2221      	movs	r2, #33	@ 0x21
 801c29e:	2102      	movs	r1, #2
 801c2a0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	68db      	ldr	r3, [r3, #12]
 801c2a8:	2210      	movs	r2, #16
 801c2aa:	4013      	ands	r3, r2
 801c2ac:	2b10      	cmp	r3, #16
 801c2ae:	d05f      	beq.n	801c370 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	681b      	ldr	r3, [r3, #0]
 801c2b4:	22ca      	movs	r2, #202	@ 0xca
 801c2b6:	625a      	str	r2, [r3, #36]	@ 0x24
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	681b      	ldr	r3, [r3, #0]
 801c2bc:	2253      	movs	r2, #83	@ 0x53
 801c2be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 801c2c0:	250f      	movs	r5, #15
 801c2c2:	197c      	adds	r4, r7, r5
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	0018      	movs	r0, r3
 801c2c8:	f000 fa99 	bl	801c7fe <RTC_EnterInitMode>
 801c2cc:	0003      	movs	r3, r0
 801c2ce:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 801c2d0:	0028      	movs	r0, r5
 801c2d2:	183b      	adds	r3, r7, r0
 801c2d4:	781b      	ldrb	r3, [r3, #0]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d12c      	bne.n	801c334 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	689a      	ldr	r2, [r3, #8]
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	492c      	ldr	r1, [pc, #176]	@ (801c398 <HAL_RTC_Init+0x134>)
 801c2e6:	400a      	ands	r2, r1
 801c2e8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801c2ea:	687b      	ldr	r3, [r7, #4]
 801c2ec:	681b      	ldr	r3, [r3, #0]
 801c2ee:	6899      	ldr	r1, [r3, #8]
 801c2f0:	687b      	ldr	r3, [r7, #4]
 801c2f2:	685a      	ldr	r2, [r3, #4]
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	691b      	ldr	r3, [r3, #16]
 801c2f8:	431a      	orrs	r2, r3
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	699b      	ldr	r3, [r3, #24]
 801c2fe:	431a      	orrs	r2, r3
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	430a      	orrs	r2, r1
 801c306:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	681b      	ldr	r3, [r3, #0]
 801c30c:	687a      	ldr	r2, [r7, #4]
 801c30e:	68d2      	ldr	r2, [r2, #12]
 801c310:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	681b      	ldr	r3, [r3, #0]
 801c316:	6919      	ldr	r1, [r3, #16]
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	689b      	ldr	r3, [r3, #8]
 801c31c:	041a      	lsls	r2, r3, #16
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	681b      	ldr	r3, [r3, #0]
 801c322:	430a      	orrs	r2, r1
 801c324:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801c326:	183c      	adds	r4, r7, r0
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	0018      	movs	r0, r3
 801c32c:	f000 faab 	bl	801c886 <RTC_ExitInitMode>
 801c330:	0003      	movs	r3, r0
 801c332:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801c334:	230f      	movs	r3, #15
 801c336:	18fb      	adds	r3, r7, r3
 801c338:	781b      	ldrb	r3, [r3, #0]
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d113      	bne.n	801c366 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	681b      	ldr	r3, [r3, #0]
 801c342:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	681b      	ldr	r3, [r3, #0]
 801c348:	2103      	movs	r1, #3
 801c34a:	438a      	bics	r2, r1
 801c34c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	681b      	ldr	r3, [r3, #0]
 801c352:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	69da      	ldr	r2, [r3, #28]
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	695b      	ldr	r3, [r3, #20]
 801c35c:	431a      	orrs	r2, r3
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	681b      	ldr	r3, [r3, #0]
 801c362:	430a      	orrs	r2, r1
 801c364:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	22ff      	movs	r2, #255	@ 0xff
 801c36c:	625a      	str	r2, [r3, #36]	@ 0x24
 801c36e:	e003      	b.n	801c378 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 801c370:	230f      	movs	r3, #15
 801c372:	18fb      	adds	r3, r7, r3
 801c374:	2200      	movs	r2, #0
 801c376:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801c378:	230f      	movs	r3, #15
 801c37a:	18fb      	adds	r3, r7, r3
 801c37c:	781b      	ldrb	r3, [r3, #0]
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d103      	bne.n	801c38a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	2221      	movs	r2, #33	@ 0x21
 801c386:	2101      	movs	r1, #1
 801c388:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801c38a:	230f      	movs	r3, #15
 801c38c:	18fb      	adds	r3, r7, r3
 801c38e:	781b      	ldrb	r3, [r3, #0]
}
 801c390:	0018      	movs	r0, r3
 801c392:	46bd      	mov	sp, r7
 801c394:	b004      	add	sp, #16
 801c396:	bdb0      	pop	{r4, r5, r7, pc}
 801c398:	ff8fffbf 	.word	0xff8fffbf

0801c39c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c39c:	b5b0      	push	{r4, r5, r7, lr}
 801c39e:	b086      	sub	sp, #24
 801c3a0:	af00      	add	r7, sp, #0
 801c3a2:	60f8      	str	r0, [r7, #12]
 801c3a4:	60b9      	str	r1, [r7, #8]
 801c3a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c3a8:	2300      	movs	r3, #0
 801c3aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c3ac:	68fb      	ldr	r3, [r7, #12]
 801c3ae:	2220      	movs	r2, #32
 801c3b0:	5c9b      	ldrb	r3, [r3, r2]
 801c3b2:	2b01      	cmp	r3, #1
 801c3b4:	d101      	bne.n	801c3ba <HAL_RTC_SetTime+0x1e>
 801c3b6:	2302      	movs	r3, #2
 801c3b8:	e092      	b.n	801c4e0 <HAL_RTC_SetTime+0x144>
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	2220      	movs	r2, #32
 801c3be:	2101      	movs	r1, #1
 801c3c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c3c2:	68fb      	ldr	r3, [r7, #12]
 801c3c4:	2221      	movs	r2, #33	@ 0x21
 801c3c6:	2102      	movs	r1, #2
 801c3c8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d125      	bne.n	801c41c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c3d0:	68fb      	ldr	r3, [r7, #12]
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	689b      	ldr	r3, [r3, #8]
 801c3d6:	2240      	movs	r2, #64	@ 0x40
 801c3d8:	4013      	ands	r3, r2
 801c3da:	d102      	bne.n	801c3e2 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c3dc:	68bb      	ldr	r3, [r7, #8]
 801c3de:	2200      	movs	r2, #0
 801c3e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c3e2:	68bb      	ldr	r3, [r7, #8]
 801c3e4:	781b      	ldrb	r3, [r3, #0]
 801c3e6:	0018      	movs	r0, r3
 801c3e8:	f000 fa77 	bl	801c8da <RTC_ByteToBcd2>
 801c3ec:	0003      	movs	r3, r0
 801c3ee:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c3f0:	68bb      	ldr	r3, [r7, #8]
 801c3f2:	785b      	ldrb	r3, [r3, #1]
 801c3f4:	0018      	movs	r0, r3
 801c3f6:	f000 fa70 	bl	801c8da <RTC_ByteToBcd2>
 801c3fa:	0003      	movs	r3, r0
 801c3fc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c3fe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 801c400:	68bb      	ldr	r3, [r7, #8]
 801c402:	789b      	ldrb	r3, [r3, #2]
 801c404:	0018      	movs	r0, r3
 801c406:	f000 fa68 	bl	801c8da <RTC_ByteToBcd2>
 801c40a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801c40c:	0022      	movs	r2, r4
 801c40e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 801c410:	68bb      	ldr	r3, [r7, #8]
 801c412:	78db      	ldrb	r3, [r3, #3]
 801c414:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801c416:	4313      	orrs	r3, r2
 801c418:	617b      	str	r3, [r7, #20]
 801c41a:	e017      	b.n	801c44c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801c41c:	68fb      	ldr	r3, [r7, #12]
 801c41e:	681b      	ldr	r3, [r3, #0]
 801c420:	689b      	ldr	r3, [r3, #8]
 801c422:	2240      	movs	r2, #64	@ 0x40
 801c424:	4013      	ands	r3, r2
 801c426:	d102      	bne.n	801c42e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801c428:	68bb      	ldr	r3, [r7, #8]
 801c42a:	2200      	movs	r2, #0
 801c42c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c42e:	68bb      	ldr	r3, [r7, #8]
 801c430:	781b      	ldrb	r3, [r3, #0]
 801c432:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c434:	68bb      	ldr	r3, [r7, #8]
 801c436:	785b      	ldrb	r3, [r3, #1]
 801c438:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c43a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 801c43c:	68ba      	ldr	r2, [r7, #8]
 801c43e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801c440:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801c442:	68bb      	ldr	r3, [r7, #8]
 801c444:	78db      	ldrb	r3, [r3, #3]
 801c446:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 801c448:	4313      	orrs	r3, r2
 801c44a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c44c:	68fb      	ldr	r3, [r7, #12]
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	22ca      	movs	r2, #202	@ 0xca
 801c452:	625a      	str	r2, [r3, #36]	@ 0x24
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	2253      	movs	r2, #83	@ 0x53
 801c45a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c45c:	2513      	movs	r5, #19
 801c45e:	197c      	adds	r4, r7, r5
 801c460:	68fb      	ldr	r3, [r7, #12]
 801c462:	0018      	movs	r0, r3
 801c464:	f000 f9cb 	bl	801c7fe <RTC_EnterInitMode>
 801c468:	0003      	movs	r3, r0
 801c46a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c46c:	0028      	movs	r0, r5
 801c46e:	183b      	adds	r3, r7, r0
 801c470:	781b      	ldrb	r3, [r3, #0]
 801c472:	2b00      	cmp	r3, #0
 801c474:	d120      	bne.n	801c4b8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801c476:	68fb      	ldr	r3, [r7, #12]
 801c478:	681b      	ldr	r3, [r3, #0]
 801c47a:	697a      	ldr	r2, [r7, #20]
 801c47c:	491a      	ldr	r1, [pc, #104]	@ (801c4e8 <HAL_RTC_SetTime+0x14c>)
 801c47e:	400a      	ands	r2, r1
 801c480:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801c482:	68fb      	ldr	r3, [r7, #12]
 801c484:	681b      	ldr	r3, [r3, #0]
 801c486:	689a      	ldr	r2, [r3, #8]
 801c488:	68fb      	ldr	r3, [r7, #12]
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	4917      	ldr	r1, [pc, #92]	@ (801c4ec <HAL_RTC_SetTime+0x150>)
 801c48e:	400a      	ands	r2, r1
 801c490:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	6899      	ldr	r1, [r3, #8]
 801c498:	68bb      	ldr	r3, [r7, #8]
 801c49a:	68da      	ldr	r2, [r3, #12]
 801c49c:	68bb      	ldr	r3, [r7, #8]
 801c49e:	691b      	ldr	r3, [r3, #16]
 801c4a0:	431a      	orrs	r2, r3
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	430a      	orrs	r2, r1
 801c4a8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c4aa:	183c      	adds	r4, r7, r0
 801c4ac:	68fb      	ldr	r3, [r7, #12]
 801c4ae:	0018      	movs	r0, r3
 801c4b0:	f000 f9e9 	bl	801c886 <RTC_ExitInitMode>
 801c4b4:	0003      	movs	r3, r0
 801c4b6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c4b8:	2313      	movs	r3, #19
 801c4ba:	18fb      	adds	r3, r7, r3
 801c4bc:	781b      	ldrb	r3, [r3, #0]
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d103      	bne.n	801c4ca <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c4c2:	68fb      	ldr	r3, [r7, #12]
 801c4c4:	2221      	movs	r2, #33	@ 0x21
 801c4c6:	2101      	movs	r1, #1
 801c4c8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c4ca:	68fb      	ldr	r3, [r7, #12]
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	22ff      	movs	r2, #255	@ 0xff
 801c4d0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c4d2:	68fb      	ldr	r3, [r7, #12]
 801c4d4:	2220      	movs	r2, #32
 801c4d6:	2100      	movs	r1, #0
 801c4d8:	5499      	strb	r1, [r3, r2]

  return status;
 801c4da:	2313      	movs	r3, #19
 801c4dc:	18fb      	adds	r3, r7, r3
 801c4de:	781b      	ldrb	r3, [r3, #0]
}
 801c4e0:	0018      	movs	r0, r3
 801c4e2:	46bd      	mov	sp, r7
 801c4e4:	b006      	add	sp, #24
 801c4e6:	bdb0      	pop	{r4, r5, r7, pc}
 801c4e8:	007f7f7f 	.word	0x007f7f7f
 801c4ec:	fffbffff 	.word	0xfffbffff

0801c4f0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 801c4f0:	b580      	push	{r7, lr}
 801c4f2:	b086      	sub	sp, #24
 801c4f4:	af00      	add	r7, sp, #0
 801c4f6:	60f8      	str	r0, [r7, #12]
 801c4f8:	60b9      	str	r1, [r7, #8]
 801c4fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c506:	68bb      	ldr	r3, [r7, #8]
 801c508:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	691b      	ldr	r3, [r3, #16]
 801c510:	045b      	lsls	r3, r3, #17
 801c512:	0c5a      	lsrs	r2, r3, #17
 801c514:	68bb      	ldr	r3, [r7, #8]
 801c516:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	681b      	ldr	r3, [r3, #0]
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	4a22      	ldr	r2, [pc, #136]	@ (801c5a8 <HAL_RTC_GetTime+0xb8>)
 801c520:	4013      	ands	r3, r2
 801c522:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801c524:	697b      	ldr	r3, [r7, #20]
 801c526:	0c1b      	lsrs	r3, r3, #16
 801c528:	b2db      	uxtb	r3, r3
 801c52a:	223f      	movs	r2, #63	@ 0x3f
 801c52c:	4013      	ands	r3, r2
 801c52e:	b2da      	uxtb	r2, r3
 801c530:	68bb      	ldr	r3, [r7, #8]
 801c532:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801c534:	697b      	ldr	r3, [r7, #20]
 801c536:	0a1b      	lsrs	r3, r3, #8
 801c538:	b2db      	uxtb	r3, r3
 801c53a:	227f      	movs	r2, #127	@ 0x7f
 801c53c:	4013      	ands	r3, r2
 801c53e:	b2da      	uxtb	r2, r3
 801c540:	68bb      	ldr	r3, [r7, #8]
 801c542:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801c544:	697b      	ldr	r3, [r7, #20]
 801c546:	b2db      	uxtb	r3, r3
 801c548:	227f      	movs	r2, #127	@ 0x7f
 801c54a:	4013      	ands	r3, r2
 801c54c:	b2da      	uxtb	r2, r3
 801c54e:	68bb      	ldr	r3, [r7, #8]
 801c550:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801c552:	697b      	ldr	r3, [r7, #20]
 801c554:	0d9b      	lsrs	r3, r3, #22
 801c556:	b2db      	uxtb	r3, r3
 801c558:	2201      	movs	r2, #1
 801c55a:	4013      	ands	r3, r2
 801c55c:	b2da      	uxtb	r2, r3
 801c55e:	68bb      	ldr	r3, [r7, #8]
 801c560:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	2b00      	cmp	r3, #0
 801c566:	d11a      	bne.n	801c59e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801c568:	68bb      	ldr	r3, [r7, #8]
 801c56a:	781b      	ldrb	r3, [r3, #0]
 801c56c:	0018      	movs	r0, r3
 801c56e:	f000 f9d5 	bl	801c91c <RTC_Bcd2ToByte>
 801c572:	0003      	movs	r3, r0
 801c574:	001a      	movs	r2, r3
 801c576:	68bb      	ldr	r3, [r7, #8]
 801c578:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801c57a:	68bb      	ldr	r3, [r7, #8]
 801c57c:	785b      	ldrb	r3, [r3, #1]
 801c57e:	0018      	movs	r0, r3
 801c580:	f000 f9cc 	bl	801c91c <RTC_Bcd2ToByte>
 801c584:	0003      	movs	r3, r0
 801c586:	001a      	movs	r2, r3
 801c588:	68bb      	ldr	r3, [r7, #8]
 801c58a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801c58c:	68bb      	ldr	r3, [r7, #8]
 801c58e:	789b      	ldrb	r3, [r3, #2]
 801c590:	0018      	movs	r0, r3
 801c592:	f000 f9c3 	bl	801c91c <RTC_Bcd2ToByte>
 801c596:	0003      	movs	r3, r0
 801c598:	001a      	movs	r2, r3
 801c59a:	68bb      	ldr	r3, [r7, #8]
 801c59c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801c59e:	2300      	movs	r3, #0
}
 801c5a0:	0018      	movs	r0, r3
 801c5a2:	46bd      	mov	sp, r7
 801c5a4:	b006      	add	sp, #24
 801c5a6:	bd80      	pop	{r7, pc}
 801c5a8:	007f7f7f 	.word	0x007f7f7f

0801c5ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c5ac:	b5b0      	push	{r4, r5, r7, lr}
 801c5ae:	b086      	sub	sp, #24
 801c5b0:	af00      	add	r7, sp, #0
 801c5b2:	60f8      	str	r0, [r7, #12]
 801c5b4:	60b9      	str	r1, [r7, #8]
 801c5b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c5b8:	2300      	movs	r3, #0
 801c5ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	2220      	movs	r2, #32
 801c5c0:	5c9b      	ldrb	r3, [r3, r2]
 801c5c2:	2b01      	cmp	r3, #1
 801c5c4:	d101      	bne.n	801c5ca <HAL_RTC_SetDate+0x1e>
 801c5c6:	2302      	movs	r3, #2
 801c5c8:	e07e      	b.n	801c6c8 <HAL_RTC_SetDate+0x11c>
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	2220      	movs	r2, #32
 801c5ce:	2101      	movs	r1, #1
 801c5d0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	2221      	movs	r2, #33	@ 0x21
 801c5d6:	2102      	movs	r1, #2
 801c5d8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d10e      	bne.n	801c5fe <HAL_RTC_SetDate+0x52>
 801c5e0:	68bb      	ldr	r3, [r7, #8]
 801c5e2:	785b      	ldrb	r3, [r3, #1]
 801c5e4:	001a      	movs	r2, r3
 801c5e6:	2310      	movs	r3, #16
 801c5e8:	4013      	ands	r3, r2
 801c5ea:	d008      	beq.n	801c5fe <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 801c5ec:	68bb      	ldr	r3, [r7, #8]
 801c5ee:	785b      	ldrb	r3, [r3, #1]
 801c5f0:	2210      	movs	r2, #16
 801c5f2:	4393      	bics	r3, r2
 801c5f4:	b2db      	uxtb	r3, r3
 801c5f6:	330a      	adds	r3, #10
 801c5f8:	b2da      	uxtb	r2, r3
 801c5fa:	68bb      	ldr	r3, [r7, #8]
 801c5fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801c5fe:	687b      	ldr	r3, [r7, #4]
 801c600:	2b00      	cmp	r3, #0
 801c602:	d11c      	bne.n	801c63e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c604:	68bb      	ldr	r3, [r7, #8]
 801c606:	78db      	ldrb	r3, [r3, #3]
 801c608:	0018      	movs	r0, r3
 801c60a:	f000 f966 	bl	801c8da <RTC_ByteToBcd2>
 801c60e:	0003      	movs	r3, r0
 801c610:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c612:	68bb      	ldr	r3, [r7, #8]
 801c614:	785b      	ldrb	r3, [r3, #1]
 801c616:	0018      	movs	r0, r3
 801c618:	f000 f95f 	bl	801c8da <RTC_ByteToBcd2>
 801c61c:	0003      	movs	r3, r0
 801c61e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c620:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801c622:	68bb      	ldr	r3, [r7, #8]
 801c624:	789b      	ldrb	r3, [r3, #2]
 801c626:	0018      	movs	r0, r3
 801c628:	f000 f957 	bl	801c8da <RTC_ByteToBcd2>
 801c62c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801c62e:	0022      	movs	r2, r4
 801c630:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801c632:	68bb      	ldr	r3, [r7, #8]
 801c634:	781b      	ldrb	r3, [r3, #0]
 801c636:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801c638:	4313      	orrs	r3, r2
 801c63a:	617b      	str	r3, [r7, #20]
 801c63c:	e00e      	b.n	801c65c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c63e:	68bb      	ldr	r3, [r7, #8]
 801c640:	78db      	ldrb	r3, [r3, #3]
 801c642:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c644:	68bb      	ldr	r3, [r7, #8]
 801c646:	785b      	ldrb	r3, [r3, #1]
 801c648:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c64a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801c64c:	68ba      	ldr	r2, [r7, #8]
 801c64e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801c650:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801c652:	68bb      	ldr	r3, [r7, #8]
 801c654:	781b      	ldrb	r3, [r3, #0]
 801c656:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801c658:	4313      	orrs	r3, r2
 801c65a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	681b      	ldr	r3, [r3, #0]
 801c660:	22ca      	movs	r2, #202	@ 0xca
 801c662:	625a      	str	r2, [r3, #36]	@ 0x24
 801c664:	68fb      	ldr	r3, [r7, #12]
 801c666:	681b      	ldr	r3, [r3, #0]
 801c668:	2253      	movs	r2, #83	@ 0x53
 801c66a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801c66c:	2513      	movs	r5, #19
 801c66e:	197c      	adds	r4, r7, r5
 801c670:	68fb      	ldr	r3, [r7, #12]
 801c672:	0018      	movs	r0, r3
 801c674:	f000 f8c3 	bl	801c7fe <RTC_EnterInitMode>
 801c678:	0003      	movs	r3, r0
 801c67a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801c67c:	0028      	movs	r0, r5
 801c67e:	183b      	adds	r3, r7, r0
 801c680:	781b      	ldrb	r3, [r3, #0]
 801c682:	2b00      	cmp	r3, #0
 801c684:	d10c      	bne.n	801c6a0 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	681b      	ldr	r3, [r3, #0]
 801c68a:	697a      	ldr	r2, [r7, #20]
 801c68c:	4910      	ldr	r1, [pc, #64]	@ (801c6d0 <HAL_RTC_SetDate+0x124>)
 801c68e:	400a      	ands	r2, r1
 801c690:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801c692:	183c      	adds	r4, r7, r0
 801c694:	68fb      	ldr	r3, [r7, #12]
 801c696:	0018      	movs	r0, r3
 801c698:	f000 f8f5 	bl	801c886 <RTC_ExitInitMode>
 801c69c:	0003      	movs	r3, r0
 801c69e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801c6a0:	2313      	movs	r3, #19
 801c6a2:	18fb      	adds	r3, r7, r3
 801c6a4:	781b      	ldrb	r3, [r3, #0]
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d103      	bne.n	801c6b2 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	2221      	movs	r2, #33	@ 0x21
 801c6ae:	2101      	movs	r1, #1
 801c6b0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c6b2:	68fb      	ldr	r3, [r7, #12]
 801c6b4:	681b      	ldr	r3, [r3, #0]
 801c6b6:	22ff      	movs	r2, #255	@ 0xff
 801c6b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801c6ba:	68fb      	ldr	r3, [r7, #12]
 801c6bc:	2220      	movs	r2, #32
 801c6be:	2100      	movs	r1, #0
 801c6c0:	5499      	strb	r1, [r3, r2]

  return status;
 801c6c2:	2313      	movs	r3, #19
 801c6c4:	18fb      	adds	r3, r7, r3
 801c6c6:	781b      	ldrb	r3, [r3, #0]
}
 801c6c8:	0018      	movs	r0, r3
 801c6ca:	46bd      	mov	sp, r7
 801c6cc:	b006      	add	sp, #24
 801c6ce:	bdb0      	pop	{r4, r5, r7, pc}
 801c6d0:	00ffff3f 	.word	0x00ffff3f

0801c6d4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801c6d4:	b580      	push	{r7, lr}
 801c6d6:	b086      	sub	sp, #24
 801c6d8:	af00      	add	r7, sp, #0
 801c6da:	60f8      	str	r0, [r7, #12]
 801c6dc:	60b9      	str	r1, [r7, #8]
 801c6de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801c6e0:	2300      	movs	r3, #0
 801c6e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801c6e4:	68fb      	ldr	r3, [r7, #12]
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	685b      	ldr	r3, [r3, #4]
 801c6ea:	4a21      	ldr	r2, [pc, #132]	@ (801c770 <HAL_RTC_GetDate+0x9c>)
 801c6ec:	4013      	ands	r3, r2
 801c6ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 801c6f0:	697b      	ldr	r3, [r7, #20]
 801c6f2:	0c1b      	lsrs	r3, r3, #16
 801c6f4:	b2da      	uxtb	r2, r3
 801c6f6:	68bb      	ldr	r3, [r7, #8]
 801c6f8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801c6fa:	697b      	ldr	r3, [r7, #20]
 801c6fc:	0a1b      	lsrs	r3, r3, #8
 801c6fe:	b2db      	uxtb	r3, r3
 801c700:	221f      	movs	r2, #31
 801c702:	4013      	ands	r3, r2
 801c704:	b2da      	uxtb	r2, r3
 801c706:	68bb      	ldr	r3, [r7, #8]
 801c708:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801c70a:	697b      	ldr	r3, [r7, #20]
 801c70c:	b2db      	uxtb	r3, r3
 801c70e:	223f      	movs	r2, #63	@ 0x3f
 801c710:	4013      	ands	r3, r2
 801c712:	b2da      	uxtb	r2, r3
 801c714:	68bb      	ldr	r3, [r7, #8]
 801c716:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 801c718:	697b      	ldr	r3, [r7, #20]
 801c71a:	0b5b      	lsrs	r3, r3, #13
 801c71c:	b2db      	uxtb	r3, r3
 801c71e:	2207      	movs	r2, #7
 801c720:	4013      	ands	r3, r2
 801c722:	b2da      	uxtb	r2, r3
 801c724:	68bb      	ldr	r3, [r7, #8]
 801c726:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801c728:	687b      	ldr	r3, [r7, #4]
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d11a      	bne.n	801c764 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801c72e:	68bb      	ldr	r3, [r7, #8]
 801c730:	78db      	ldrb	r3, [r3, #3]
 801c732:	0018      	movs	r0, r3
 801c734:	f000 f8f2 	bl	801c91c <RTC_Bcd2ToByte>
 801c738:	0003      	movs	r3, r0
 801c73a:	001a      	movs	r2, r3
 801c73c:	68bb      	ldr	r3, [r7, #8]
 801c73e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801c740:	68bb      	ldr	r3, [r7, #8]
 801c742:	785b      	ldrb	r3, [r3, #1]
 801c744:	0018      	movs	r0, r3
 801c746:	f000 f8e9 	bl	801c91c <RTC_Bcd2ToByte>
 801c74a:	0003      	movs	r3, r0
 801c74c:	001a      	movs	r2, r3
 801c74e:	68bb      	ldr	r3, [r7, #8]
 801c750:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801c752:	68bb      	ldr	r3, [r7, #8]
 801c754:	789b      	ldrb	r3, [r3, #2]
 801c756:	0018      	movs	r0, r3
 801c758:	f000 f8e0 	bl	801c91c <RTC_Bcd2ToByte>
 801c75c:	0003      	movs	r3, r0
 801c75e:	001a      	movs	r2, r3
 801c760:	68bb      	ldr	r3, [r7, #8]
 801c762:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801c764:	2300      	movs	r3, #0
}
 801c766:	0018      	movs	r0, r3
 801c768:	46bd      	mov	sp, r7
 801c76a:	b006      	add	sp, #24
 801c76c:	bd80      	pop	{r7, pc}
 801c76e:	46c0      	nop			@ (mov r8, r8)
 801c770:	00ffff3f 	.word	0x00ffff3f

0801c774 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 801c774:	b580      	push	{r7, lr}
 801c776:	b084      	sub	sp, #16
 801c778:	af00      	add	r7, sp, #0
 801c77a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c77c:	2300      	movs	r3, #0
 801c77e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	681b      	ldr	r3, [r3, #0]
 801c784:	4a0e      	ldr	r2, [pc, #56]	@ (801c7c0 <HAL_RTC_WaitForSynchro+0x4c>)
 801c786:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 801c788:	f7f8 f9dc 	bl	8014b44 <HAL_GetTick>
 801c78c:	0003      	movs	r3, r0
 801c78e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c790:	e00a      	b.n	801c7a8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c792:	f7f8 f9d7 	bl	8014b44 <HAL_GetTick>
 801c796:	0002      	movs	r2, r0
 801c798:	68fb      	ldr	r3, [r7, #12]
 801c79a:	1ad2      	subs	r2, r2, r3
 801c79c:	23fa      	movs	r3, #250	@ 0xfa
 801c79e:	009b      	lsls	r3, r3, #2
 801c7a0:	429a      	cmp	r2, r3
 801c7a2:	d901      	bls.n	801c7a8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 801c7a4:	2303      	movs	r3, #3
 801c7a6:	e006      	b.n	801c7b6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	681b      	ldr	r3, [r3, #0]
 801c7ac:	68db      	ldr	r3, [r3, #12]
 801c7ae:	2220      	movs	r2, #32
 801c7b0:	4013      	ands	r3, r2
 801c7b2:	d0ee      	beq.n	801c792 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 801c7b4:	2300      	movs	r3, #0
}
 801c7b6:	0018      	movs	r0, r3
 801c7b8:	46bd      	mov	sp, r7
 801c7ba:	b004      	add	sp, #16
 801c7bc:	bd80      	pop	{r7, pc}
 801c7be:	46c0      	nop			@ (mov r8, r8)
 801c7c0:	0001ff5f 	.word	0x0001ff5f

0801c7c4 <HAL_RTC_DST_Add1Hour>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_DST_Add1Hour(RTC_HandleTypeDef *hrtc)
{
 801c7c4:	b580      	push	{r7, lr}
 801c7c6:	b082      	sub	sp, #8
 801c7c8:	af00      	add	r7, sp, #0
 801c7ca:	6078      	str	r0, [r7, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	681b      	ldr	r3, [r3, #0]
 801c7d0:	22ca      	movs	r2, #202	@ 0xca
 801c7d2:	625a      	str	r2, [r3, #36]	@ 0x24
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	2253      	movs	r2, #83	@ 0x53
 801c7da:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(hrtc->Instance->CR, RTC_CR_ADD1H);
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	689a      	ldr	r2, [r3, #8]
 801c7e2:	687b      	ldr	r3, [r7, #4]
 801c7e4:	681b      	ldr	r3, [r3, #0]
 801c7e6:	2180      	movs	r1, #128	@ 0x80
 801c7e8:	0249      	lsls	r1, r1, #9
 801c7ea:	430a      	orrs	r2, r1
 801c7ec:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	681b      	ldr	r3, [r3, #0]
 801c7f2:	22ff      	movs	r2, #255	@ 0xff
 801c7f4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801c7f6:	46c0      	nop			@ (mov r8, r8)
 801c7f8:	46bd      	mov	sp, r7
 801c7fa:	b002      	add	sp, #8
 801c7fc:	bd80      	pop	{r7, pc}

0801c7fe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801c7fe:	b580      	push	{r7, lr}
 801c800:	b084      	sub	sp, #16
 801c802:	af00      	add	r7, sp, #0
 801c804:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801c806:	2300      	movs	r3, #0
 801c808:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 801c80a:	230f      	movs	r3, #15
 801c80c:	18fb      	adds	r3, r7, r3
 801c80e:	2200      	movs	r2, #0
 801c810:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 801c812:	687b      	ldr	r3, [r7, #4]
 801c814:	681b      	ldr	r3, [r3, #0]
 801c816:	68db      	ldr	r3, [r3, #12]
 801c818:	2240      	movs	r2, #64	@ 0x40
 801c81a:	4013      	ands	r3, r2
 801c81c:	d12c      	bne.n	801c878 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	681b      	ldr	r3, [r3, #0]
 801c822:	68da      	ldr	r2, [r3, #12]
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	681b      	ldr	r3, [r3, #0]
 801c828:	2180      	movs	r1, #128	@ 0x80
 801c82a:	430a      	orrs	r2, r1
 801c82c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801c82e:	f7f8 f989 	bl	8014b44 <HAL_GetTick>
 801c832:	0003      	movs	r3, r0
 801c834:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c836:	e014      	b.n	801c862 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801c838:	f7f8 f984 	bl	8014b44 <HAL_GetTick>
 801c83c:	0002      	movs	r2, r0
 801c83e:	68bb      	ldr	r3, [r7, #8]
 801c840:	1ad2      	subs	r2, r2, r3
 801c842:	200f      	movs	r0, #15
 801c844:	183b      	adds	r3, r7, r0
 801c846:	1839      	adds	r1, r7, r0
 801c848:	7809      	ldrb	r1, [r1, #0]
 801c84a:	7019      	strb	r1, [r3, #0]
 801c84c:	23fa      	movs	r3, #250	@ 0xfa
 801c84e:	009b      	lsls	r3, r3, #2
 801c850:	429a      	cmp	r2, r3
 801c852:	d906      	bls.n	801c862 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801c854:	687b      	ldr	r3, [r7, #4]
 801c856:	2221      	movs	r2, #33	@ 0x21
 801c858:	2104      	movs	r1, #4
 801c85a:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801c85c:	183b      	adds	r3, r7, r0
 801c85e:	2201      	movs	r2, #1
 801c860:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801c862:	687b      	ldr	r3, [r7, #4]
 801c864:	681b      	ldr	r3, [r3, #0]
 801c866:	68db      	ldr	r3, [r3, #12]
 801c868:	2240      	movs	r2, #64	@ 0x40
 801c86a:	4013      	ands	r3, r2
 801c86c:	d104      	bne.n	801c878 <RTC_EnterInitMode+0x7a>
 801c86e:	230f      	movs	r3, #15
 801c870:	18fb      	adds	r3, r7, r3
 801c872:	781b      	ldrb	r3, [r3, #0]
 801c874:	2b01      	cmp	r3, #1
 801c876:	d1df      	bne.n	801c838 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801c878:	230f      	movs	r3, #15
 801c87a:	18fb      	adds	r3, r7, r3
 801c87c:	781b      	ldrb	r3, [r3, #0]
}
 801c87e:	0018      	movs	r0, r3
 801c880:	46bd      	mov	sp, r7
 801c882:	b004      	add	sp, #16
 801c884:	bd80      	pop	{r7, pc}

0801c886 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801c886:	b590      	push	{r4, r7, lr}
 801c888:	b085      	sub	sp, #20
 801c88a:	af00      	add	r7, sp, #0
 801c88c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c88e:	240f      	movs	r4, #15
 801c890:	193b      	adds	r3, r7, r4
 801c892:	2200      	movs	r2, #0
 801c894:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801c896:	687b      	ldr	r3, [r7, #4]
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	68da      	ldr	r2, [r3, #12]
 801c89c:	687b      	ldr	r3, [r7, #4]
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	2180      	movs	r1, #128	@ 0x80
 801c8a2:	438a      	bics	r2, r1
 801c8a4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	681b      	ldr	r3, [r3, #0]
 801c8aa:	689b      	ldr	r3, [r3, #8]
 801c8ac:	2220      	movs	r2, #32
 801c8ae:	4013      	ands	r3, r2
 801c8b0:	d10c      	bne.n	801c8cc <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	0018      	movs	r0, r3
 801c8b6:	f7ff ff5d 	bl	801c774 <HAL_RTC_WaitForSynchro>
 801c8ba:	1e03      	subs	r3, r0, #0
 801c8bc:	d006      	beq.n	801c8cc <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	2221      	movs	r2, #33	@ 0x21
 801c8c2:	2104      	movs	r1, #4
 801c8c4:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801c8c6:	193b      	adds	r3, r7, r4
 801c8c8:	2201      	movs	r2, #1
 801c8ca:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 801c8cc:	230f      	movs	r3, #15
 801c8ce:	18fb      	adds	r3, r7, r3
 801c8d0:	781b      	ldrb	r3, [r3, #0]
}
 801c8d2:	0018      	movs	r0, r3
 801c8d4:	46bd      	mov	sp, r7
 801c8d6:	b005      	add	sp, #20
 801c8d8:	bd90      	pop	{r4, r7, pc}

0801c8da <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 801c8da:	b580      	push	{r7, lr}
 801c8dc:	b084      	sub	sp, #16
 801c8de:	af00      	add	r7, sp, #0
 801c8e0:	0002      	movs	r2, r0
 801c8e2:	1dfb      	adds	r3, r7, #7
 801c8e4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801c8e6:	2300      	movs	r3, #0
 801c8e8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 801c8ea:	e007      	b.n	801c8fc <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	3301      	adds	r3, #1
 801c8f0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 801c8f2:	1dfb      	adds	r3, r7, #7
 801c8f4:	1dfa      	adds	r2, r7, #7
 801c8f6:	7812      	ldrb	r2, [r2, #0]
 801c8f8:	3a0a      	subs	r2, #10
 801c8fa:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801c8fc:	1dfb      	adds	r3, r7, #7
 801c8fe:	781b      	ldrb	r3, [r3, #0]
 801c900:	2b09      	cmp	r3, #9
 801c902:	d8f3      	bhi.n	801c8ec <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	b2db      	uxtb	r3, r3
 801c908:	011b      	lsls	r3, r3, #4
 801c90a:	b2da      	uxtb	r2, r3
 801c90c:	1dfb      	adds	r3, r7, #7
 801c90e:	781b      	ldrb	r3, [r3, #0]
 801c910:	4313      	orrs	r3, r2
 801c912:	b2db      	uxtb	r3, r3
}
 801c914:	0018      	movs	r0, r3
 801c916:	46bd      	mov	sp, r7
 801c918:	b004      	add	sp, #16
 801c91a:	bd80      	pop	{r7, pc}

0801c91c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801c91c:	b580      	push	{r7, lr}
 801c91e:	b084      	sub	sp, #16
 801c920:	af00      	add	r7, sp, #0
 801c922:	0002      	movs	r2, r0
 801c924:	1dfb      	adds	r3, r7, #7
 801c926:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 801c928:	2300      	movs	r3, #0
 801c92a:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801c92c:	1dfb      	adds	r3, r7, #7
 801c92e:	781b      	ldrb	r3, [r3, #0]
 801c930:	091b      	lsrs	r3, r3, #4
 801c932:	b2db      	uxtb	r3, r3
 801c934:	001a      	movs	r2, r3
 801c936:	0013      	movs	r3, r2
 801c938:	009b      	lsls	r3, r3, #2
 801c93a:	189b      	adds	r3, r3, r2
 801c93c:	005b      	lsls	r3, r3, #1
 801c93e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801c940:	68fb      	ldr	r3, [r7, #12]
 801c942:	b2da      	uxtb	r2, r3
 801c944:	1dfb      	adds	r3, r7, #7
 801c946:	781b      	ldrb	r3, [r3, #0]
 801c948:	210f      	movs	r1, #15
 801c94a:	400b      	ands	r3, r1
 801c94c:	b2db      	uxtb	r3, r3
 801c94e:	18d3      	adds	r3, r2, r3
 801c950:	b2db      	uxtb	r3, r3
}
 801c952:	0018      	movs	r0, r3
 801c954:	46bd      	mov	sp, r7
 801c956:	b004      	add	sp, #16
 801c958:	bd80      	pop	{r7, pc}
	...

0801c95c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 801c95c:	b580      	push	{r7, lr}
 801c95e:	b086      	sub	sp, #24
 801c960:	af00      	add	r7, sp, #0
 801c962:	60f8      	str	r0, [r7, #12]
 801c964:	60b9      	str	r1, [r7, #8]
 801c966:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801c968:	4b64      	ldr	r3, [pc, #400]	@ (801cafc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	22fa      	movs	r2, #250	@ 0xfa
 801c96e:	01d1      	lsls	r1, r2, #7
 801c970:	0018      	movs	r0, r3
 801c972:	f7e3 fc17 	bl	80001a4 <__udivsi3>
 801c976:	0003      	movs	r3, r0
 801c978:	001a      	movs	r2, r3
 801c97a:	0013      	movs	r3, r2
 801c97c:	015b      	lsls	r3, r3, #5
 801c97e:	1a9b      	subs	r3, r3, r2
 801c980:	009b      	lsls	r3, r3, #2
 801c982:	189b      	adds	r3, r3, r2
 801c984:	00db      	lsls	r3, r3, #3
 801c986:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	2220      	movs	r2, #32
 801c98c:	5c9b      	ldrb	r3, [r3, r2]
 801c98e:	2b01      	cmp	r3, #1
 801c990:	d101      	bne.n	801c996 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801c992:	2302      	movs	r3, #2
 801c994:	e0ad      	b.n	801caf2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801c996:	68fb      	ldr	r3, [r7, #12]
 801c998:	2220      	movs	r2, #32
 801c99a:	2101      	movs	r1, #1
 801c99c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801c99e:	68fb      	ldr	r3, [r7, #12]
 801c9a0:	2221      	movs	r2, #33	@ 0x21
 801c9a2:	2102      	movs	r1, #2
 801c9a4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801c9a6:	68fb      	ldr	r3, [r7, #12]
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	22ca      	movs	r2, #202	@ 0xca
 801c9ac:	625a      	str	r2, [r3, #36]	@ 0x24
 801c9ae:	68fb      	ldr	r3, [r7, #12]
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	2253      	movs	r2, #83	@ 0x53
 801c9b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801c9b6:	68fb      	ldr	r3, [r7, #12]
 801c9b8:	681b      	ldr	r3, [r3, #0]
 801c9ba:	689a      	ldr	r2, [r3, #8]
 801c9bc:	2380      	movs	r3, #128	@ 0x80
 801c9be:	00db      	lsls	r3, r3, #3
 801c9c0:	4013      	ands	r3, r2
 801c9c2:	d019      	beq.n	801c9f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 801c9c4:	697b      	ldr	r3, [r7, #20]
 801c9c6:	3b01      	subs	r3, #1
 801c9c8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801c9ca:	697b      	ldr	r3, [r7, #20]
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	d10d      	bne.n	801c9ec <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801c9d0:	68fb      	ldr	r3, [r7, #12]
 801c9d2:	681b      	ldr	r3, [r3, #0]
 801c9d4:	22ff      	movs	r2, #255	@ 0xff
 801c9d6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	2221      	movs	r2, #33	@ 0x21
 801c9dc:	2103      	movs	r1, #3
 801c9de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801c9e0:	68fb      	ldr	r3, [r7, #12]
 801c9e2:	2220      	movs	r2, #32
 801c9e4:	2100      	movs	r1, #0
 801c9e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801c9e8:	2303      	movs	r3, #3
 801c9ea:	e082      	b.n	801caf2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 801c9ec:	68fb      	ldr	r3, [r7, #12]
 801c9ee:	681b      	ldr	r3, [r3, #0]
 801c9f0:	68db      	ldr	r3, [r3, #12]
 801c9f2:	2204      	movs	r2, #4
 801c9f4:	4013      	ands	r3, r2
 801c9f6:	d1e5      	bne.n	801c9c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	689a      	ldr	r2, [r3, #8]
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	493f      	ldr	r1, [pc, #252]	@ (801cb00 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 801ca04:	400a      	ands	r2, r1
 801ca06:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801ca08:	68fb      	ldr	r3, [r7, #12]
 801ca0a:	681b      	ldr	r3, [r3, #0]
 801ca0c:	68db      	ldr	r3, [r3, #12]
 801ca0e:	22ff      	movs	r2, #255	@ 0xff
 801ca10:	401a      	ands	r2, r3
 801ca12:	68fb      	ldr	r3, [r7, #12]
 801ca14:	681b      	ldr	r3, [r3, #0]
 801ca16:	493b      	ldr	r1, [pc, #236]	@ (801cb04 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 801ca18:	430a      	orrs	r2, r1
 801ca1a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801ca1c:	4b37      	ldr	r3, [pc, #220]	@ (801cafc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	22fa      	movs	r2, #250	@ 0xfa
 801ca22:	01d1      	lsls	r1, r2, #7
 801ca24:	0018      	movs	r0, r3
 801ca26:	f7e3 fbbd 	bl	80001a4 <__udivsi3>
 801ca2a:	0003      	movs	r3, r0
 801ca2c:	001a      	movs	r2, r3
 801ca2e:	0013      	movs	r3, r2
 801ca30:	015b      	lsls	r3, r3, #5
 801ca32:	1a9b      	subs	r3, r3, r2
 801ca34:	009b      	lsls	r3, r3, #2
 801ca36:	189b      	adds	r3, r3, r2
 801ca38:	00db      	lsls	r3, r3, #3
 801ca3a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 801ca3c:	697b      	ldr	r3, [r7, #20]
 801ca3e:	3b01      	subs	r3, #1
 801ca40:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801ca42:	697b      	ldr	r3, [r7, #20]
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d10d      	bne.n	801ca64 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801ca48:	68fb      	ldr	r3, [r7, #12]
 801ca4a:	681b      	ldr	r3, [r3, #0]
 801ca4c:	22ff      	movs	r2, #255	@ 0xff
 801ca4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801ca50:	68fb      	ldr	r3, [r7, #12]
 801ca52:	2221      	movs	r2, #33	@ 0x21
 801ca54:	2103      	movs	r1, #3
 801ca56:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801ca58:	68fb      	ldr	r3, [r7, #12]
 801ca5a:	2220      	movs	r2, #32
 801ca5c:	2100      	movs	r1, #0
 801ca5e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801ca60:	2303      	movs	r3, #3
 801ca62:	e046      	b.n	801caf2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 801ca64:	68fb      	ldr	r3, [r7, #12]
 801ca66:	681b      	ldr	r3, [r3, #0]
 801ca68:	68db      	ldr	r3, [r3, #12]
 801ca6a:	2204      	movs	r2, #4
 801ca6c:	4013      	ands	r3, r2
 801ca6e:	d0e5      	beq.n	801ca3c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801ca70:	68fb      	ldr	r3, [r7, #12]
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	689a      	ldr	r2, [r3, #8]
 801ca76:	68fb      	ldr	r3, [r7, #12]
 801ca78:	681b      	ldr	r3, [r3, #0]
 801ca7a:	2107      	movs	r1, #7
 801ca7c:	438a      	bics	r2, r1
 801ca7e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801ca80:	68fb      	ldr	r3, [r7, #12]
 801ca82:	681b      	ldr	r3, [r3, #0]
 801ca84:	6899      	ldr	r1, [r3, #8]
 801ca86:	68fb      	ldr	r3, [r7, #12]
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	687a      	ldr	r2, [r7, #4]
 801ca8c:	430a      	orrs	r2, r1
 801ca8e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801ca90:	68fb      	ldr	r3, [r7, #12]
 801ca92:	681b      	ldr	r3, [r3, #0]
 801ca94:	68ba      	ldr	r2, [r7, #8]
 801ca96:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801ca98:	4b1b      	ldr	r3, [pc, #108]	@ (801cb08 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801ca9a:	681a      	ldr	r2, [r3, #0]
 801ca9c:	4b1a      	ldr	r3, [pc, #104]	@ (801cb08 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801ca9e:	2180      	movs	r1, #128	@ 0x80
 801caa0:	0349      	lsls	r1, r1, #13
 801caa2:	430a      	orrs	r2, r1
 801caa4:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801caa6:	4b18      	ldr	r3, [pc, #96]	@ (801cb08 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801caa8:	689a      	ldr	r2, [r3, #8]
 801caaa:	4b17      	ldr	r3, [pc, #92]	@ (801cb08 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801caac:	2180      	movs	r1, #128	@ 0x80
 801caae:	0349      	lsls	r1, r1, #13
 801cab0:	430a      	orrs	r2, r1
 801cab2:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	681b      	ldr	r3, [r3, #0]
 801cab8:	689a      	ldr	r2, [r3, #8]
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	2180      	movs	r1, #128	@ 0x80
 801cac0:	01c9      	lsls	r1, r1, #7
 801cac2:	430a      	orrs	r2, r1
 801cac4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801cac6:	68fb      	ldr	r3, [r7, #12]
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	689a      	ldr	r2, [r3, #8]
 801cacc:	68fb      	ldr	r3, [r7, #12]
 801cace:	681b      	ldr	r3, [r3, #0]
 801cad0:	2180      	movs	r1, #128	@ 0x80
 801cad2:	00c9      	lsls	r1, r1, #3
 801cad4:	430a      	orrs	r2, r1
 801cad6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801cad8:	68fb      	ldr	r3, [r7, #12]
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	22ff      	movs	r2, #255	@ 0xff
 801cade:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801cae0:	68fb      	ldr	r3, [r7, #12]
 801cae2:	2221      	movs	r2, #33	@ 0x21
 801cae4:	2101      	movs	r1, #1
 801cae6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801cae8:	68fb      	ldr	r3, [r7, #12]
 801caea:	2220      	movs	r2, #32
 801caec:	2100      	movs	r1, #0
 801caee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801caf0:	2300      	movs	r3, #0
}
 801caf2:	0018      	movs	r0, r3
 801caf4:	46bd      	mov	sp, r7
 801caf6:	b006      	add	sp, #24
 801caf8:	bd80      	pop	{r7, pc}
 801cafa:	46c0      	nop			@ (mov r8, r8)
 801cafc:	200000ec 	.word	0x200000ec
 801cb00:	fffffbff 	.word	0xfffffbff
 801cb04:	fffffb7f 	.word	0xfffffb7f
 801cb08:	40010400 	.word	0x40010400

0801cb0c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 801cb0c:	b580      	push	{r7, lr}
 801cb0e:	b084      	sub	sp, #16
 801cb10:	af00      	add	r7, sp, #0
 801cb12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801cb14:	2300      	movs	r3, #0
 801cb16:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	2220      	movs	r2, #32
 801cb1c:	5c9b      	ldrb	r3, [r3, r2]
 801cb1e:	2b01      	cmp	r3, #1
 801cb20:	d101      	bne.n	801cb26 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801cb22:	2302      	movs	r3, #2
 801cb24:	e04e      	b.n	801cbc4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	2220      	movs	r2, #32
 801cb2a:	2101      	movs	r1, #1
 801cb2c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	2221      	movs	r2, #33	@ 0x21
 801cb32:	2102      	movs	r1, #2
 801cb34:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	681b      	ldr	r3, [r3, #0]
 801cb3a:	22ca      	movs	r2, #202	@ 0xca
 801cb3c:	625a      	str	r2, [r3, #36]	@ 0x24
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	2253      	movs	r2, #83	@ 0x53
 801cb44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	681b      	ldr	r3, [r3, #0]
 801cb4a:	689a      	ldr	r2, [r3, #8]
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	681b      	ldr	r3, [r3, #0]
 801cb50:	491e      	ldr	r1, [pc, #120]	@ (801cbcc <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801cb52:	400a      	ands	r2, r1
 801cb54:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	681b      	ldr	r3, [r3, #0]
 801cb5a:	689a      	ldr	r2, [r3, #8]
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	681b      	ldr	r3, [r3, #0]
 801cb60:	491b      	ldr	r1, [pc, #108]	@ (801cbd0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801cb62:	400a      	ands	r2, r1
 801cb64:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801cb66:	f7f7 ffed 	bl	8014b44 <HAL_GetTick>
 801cb6a:	0003      	movs	r3, r0
 801cb6c:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801cb6e:	e016      	b.n	801cb9e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801cb70:	f7f7 ffe8 	bl	8014b44 <HAL_GetTick>
 801cb74:	0002      	movs	r2, r0
 801cb76:	68fb      	ldr	r3, [r7, #12]
 801cb78:	1ad2      	subs	r2, r2, r3
 801cb7a:	23fa      	movs	r3, #250	@ 0xfa
 801cb7c:	009b      	lsls	r3, r3, #2
 801cb7e:	429a      	cmp	r2, r3
 801cb80:	d90d      	bls.n	801cb9e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	681b      	ldr	r3, [r3, #0]
 801cb86:	22ff      	movs	r2, #255	@ 0xff
 801cb88:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801cb8a:	687b      	ldr	r3, [r7, #4]
 801cb8c:	2221      	movs	r2, #33	@ 0x21
 801cb8e:	2103      	movs	r1, #3
 801cb90:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	2220      	movs	r2, #32
 801cb96:	2100      	movs	r1, #0
 801cb98:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801cb9a:	2303      	movs	r3, #3
 801cb9c:	e012      	b.n	801cbc4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	681b      	ldr	r3, [r3, #0]
 801cba2:	68db      	ldr	r3, [r3, #12]
 801cba4:	2204      	movs	r2, #4
 801cba6:	4013      	ands	r3, r2
 801cba8:	d0e2      	beq.n	801cb70 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	681b      	ldr	r3, [r3, #0]
 801cbae:	22ff      	movs	r2, #255	@ 0xff
 801cbb0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	2221      	movs	r2, #33	@ 0x21
 801cbb6:	2101      	movs	r1, #1
 801cbb8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	2220      	movs	r2, #32
 801cbbe:	2100      	movs	r1, #0
 801cbc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cbc2:	2300      	movs	r3, #0
}
 801cbc4:	0018      	movs	r0, r3
 801cbc6:	46bd      	mov	sp, r7
 801cbc8:	b004      	add	sp, #16
 801cbca:	bd80      	pop	{r7, pc}
 801cbcc:	fffffbff 	.word	0xfffffbff
 801cbd0:	ffffbfff 	.word	0xffffbfff

0801cbd4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 801cbd4:	b580      	push	{r7, lr}
 801cbd6:	b082      	sub	sp, #8
 801cbd8:	af00      	add	r7, sp, #0
 801cbda:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 801cbdc:	4b13      	ldr	r3, [pc, #76]	@ (801cc2c <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 801cbde:	2280      	movs	r2, #128	@ 0x80
 801cbe0:	0352      	lsls	r2, r2, #13
 801cbe2:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 801cbe4:	687b      	ldr	r3, [r7, #4]
 801cbe6:	681b      	ldr	r3, [r3, #0]
 801cbe8:	689a      	ldr	r2, [r3, #8]
 801cbea:	2380      	movs	r3, #128	@ 0x80
 801cbec:	01db      	lsls	r3, r3, #7
 801cbee:	4013      	ands	r3, r2
 801cbf0:	d014      	beq.n	801cc1c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	681b      	ldr	r3, [r3, #0]
 801cbf6:	68da      	ldr	r2, [r3, #12]
 801cbf8:	2380      	movs	r3, #128	@ 0x80
 801cbfa:	00db      	lsls	r3, r3, #3
 801cbfc:	4013      	ands	r3, r2
 801cbfe:	d00d      	beq.n	801cc1c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	681b      	ldr	r3, [r3, #0]
 801cc04:	68db      	ldr	r3, [r3, #12]
 801cc06:	22ff      	movs	r2, #255	@ 0xff
 801cc08:	401a      	ands	r2, r3
 801cc0a:	687b      	ldr	r3, [r7, #4]
 801cc0c:	681b      	ldr	r3, [r3, #0]
 801cc0e:	4908      	ldr	r1, [pc, #32]	@ (801cc30 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801cc10:	430a      	orrs	r2, r1
 801cc12:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 801cc14:	687b      	ldr	r3, [r7, #4]
 801cc16:	0018      	movs	r0, r3
 801cc18:	f000 f80c 	bl	801cc34 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 801cc1c:	687b      	ldr	r3, [r7, #4]
 801cc1e:	2221      	movs	r2, #33	@ 0x21
 801cc20:	2101      	movs	r1, #1
 801cc22:	5499      	strb	r1, [r3, r2]
}
 801cc24:	46c0      	nop			@ (mov r8, r8)
 801cc26:	46bd      	mov	sp, r7
 801cc28:	b002      	add	sp, #8
 801cc2a:	bd80      	pop	{r7, pc}
 801cc2c:	40010400 	.word	0x40010400
 801cc30:	fffffb7f 	.word	0xfffffb7f

0801cc34 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 801cc34:	b580      	push	{r7, lr}
 801cc36:	b082      	sub	sp, #8
 801cc38:	af00      	add	r7, sp, #0
 801cc3a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 801cc3c:	46c0      	nop			@ (mov r8, r8)
 801cc3e:	46bd      	mov	sp, r7
 801cc40:	b002      	add	sp, #8
 801cc42:	bd80      	pop	{r7, pc}

0801cc44 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801cc44:	b580      	push	{r7, lr}
 801cc46:	b086      	sub	sp, #24
 801cc48:	af00      	add	r7, sp, #0
 801cc4a:	60f8      	str	r0, [r7, #12]
 801cc4c:	60b9      	str	r1, [r7, #8]
 801cc4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801cc50:	2300      	movs	r3, #0
 801cc52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801cc54:	68fb      	ldr	r3, [r7, #12]
 801cc56:	681b      	ldr	r3, [r3, #0]
 801cc58:	3350      	adds	r3, #80	@ 0x50
 801cc5a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801cc5c:	68bb      	ldr	r3, [r7, #8]
 801cc5e:	009b      	lsls	r3, r3, #2
 801cc60:	697a      	ldr	r2, [r7, #20]
 801cc62:	18d3      	adds	r3, r2, r3
 801cc64:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801cc66:	697b      	ldr	r3, [r7, #20]
 801cc68:	687a      	ldr	r2, [r7, #4]
 801cc6a:	601a      	str	r2, [r3, #0]
}
 801cc6c:	46c0      	nop			@ (mov r8, r8)
 801cc6e:	46bd      	mov	sp, r7
 801cc70:	b006      	add	sp, #24
 801cc72:	bd80      	pop	{r7, pc}

0801cc74 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 801cc74:	b580      	push	{r7, lr}
 801cc76:	b084      	sub	sp, #16
 801cc78:	af00      	add	r7, sp, #0
 801cc7a:	6078      	str	r0, [r7, #4]
 801cc7c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801cc7e:	2300      	movs	r3, #0
 801cc80:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	681b      	ldr	r3, [r3, #0]
 801cc86:	3350      	adds	r3, #80	@ 0x50
 801cc88:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 801cc8a:	683b      	ldr	r3, [r7, #0]
 801cc8c:	009b      	lsls	r3, r3, #2
 801cc8e:	68fa      	ldr	r2, [r7, #12]
 801cc90:	18d3      	adds	r3, r2, r3
 801cc92:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801cc94:	68fb      	ldr	r3, [r7, #12]
 801cc96:	681b      	ldr	r3, [r3, #0]
}
 801cc98:	0018      	movs	r0, r3
 801cc9a:	46bd      	mov	sp, r7
 801cc9c:	b004      	add	sp, #16
 801cc9e:	bd80      	pop	{r7, pc}

0801cca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801cca0:	b580      	push	{r7, lr}
 801cca2:	b082      	sub	sp, #8
 801cca4:	af00      	add	r7, sp, #0
 801cca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d101      	bne.n	801ccb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801ccae:	2301      	movs	r3, #1
 801ccb0:	e032      	b.n	801cd18 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ccb2:	687b      	ldr	r3, [r7, #4]
 801ccb4:	2239      	movs	r2, #57	@ 0x39
 801ccb6:	5c9b      	ldrb	r3, [r3, r2]
 801ccb8:	b2db      	uxtb	r3, r3
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d107      	bne.n	801ccce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	2238      	movs	r2, #56	@ 0x38
 801ccc2:	2100      	movs	r1, #0
 801ccc4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	0018      	movs	r0, r3
 801ccca:	f7f6 ff1f 	bl	8013b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	2239      	movs	r2, #57	@ 0x39
 801ccd2:	2102      	movs	r1, #2
 801ccd4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	681a      	ldr	r2, [r3, #0]
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	3304      	adds	r3, #4
 801ccde:	0019      	movs	r1, r3
 801cce0:	0010      	movs	r0, r2
 801cce2:	f000 fa1d 	bl	801d120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	223e      	movs	r2, #62	@ 0x3e
 801ccea:	2101      	movs	r1, #1
 801ccec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	223a      	movs	r2, #58	@ 0x3a
 801ccf2:	2101      	movs	r1, #1
 801ccf4:	5499      	strb	r1, [r3, r2]
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	223b      	movs	r2, #59	@ 0x3b
 801ccfa:	2101      	movs	r1, #1
 801ccfc:	5499      	strb	r1, [r3, r2]
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	223c      	movs	r2, #60	@ 0x3c
 801cd02:	2101      	movs	r1, #1
 801cd04:	5499      	strb	r1, [r3, r2]
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	223d      	movs	r2, #61	@ 0x3d
 801cd0a:	2101      	movs	r1, #1
 801cd0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	2239      	movs	r2, #57	@ 0x39
 801cd12:	2101      	movs	r1, #1
 801cd14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801cd16:	2300      	movs	r3, #0
}
 801cd18:	0018      	movs	r0, r3
 801cd1a:	46bd      	mov	sp, r7
 801cd1c:	b002      	add	sp, #8
 801cd1e:	bd80      	pop	{r7, pc}

0801cd20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801cd20:	b580      	push	{r7, lr}
 801cd22:	b084      	sub	sp, #16
 801cd24:	af00      	add	r7, sp, #0
 801cd26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cd28:	687b      	ldr	r3, [r7, #4]
 801cd2a:	2239      	movs	r2, #57	@ 0x39
 801cd2c:	5c9b      	ldrb	r3, [r3, r2]
 801cd2e:	b2db      	uxtb	r3, r3
 801cd30:	2b01      	cmp	r3, #1
 801cd32:	d001      	beq.n	801cd38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801cd34:	2301      	movs	r3, #1
 801cd36:	e033      	b.n	801cda0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cd38:	687b      	ldr	r3, [r7, #4]
 801cd3a:	2239      	movs	r2, #57	@ 0x39
 801cd3c:	2102      	movs	r1, #2
 801cd3e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cd40:	687b      	ldr	r3, [r7, #4]
 801cd42:	681a      	ldr	r2, [r3, #0]
 801cd44:	2380      	movs	r3, #128	@ 0x80
 801cd46:	05db      	lsls	r3, r3, #23
 801cd48:	429a      	cmp	r2, r3
 801cd4a:	d00e      	beq.n	801cd6a <HAL_TIM_Base_Start+0x4a>
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	681b      	ldr	r3, [r3, #0]
 801cd50:	4a15      	ldr	r2, [pc, #84]	@ (801cda8 <HAL_TIM_Base_Start+0x88>)
 801cd52:	4293      	cmp	r3, r2
 801cd54:	d009      	beq.n	801cd6a <HAL_TIM_Base_Start+0x4a>
 801cd56:	687b      	ldr	r3, [r7, #4]
 801cd58:	681b      	ldr	r3, [r3, #0]
 801cd5a:	4a14      	ldr	r2, [pc, #80]	@ (801cdac <HAL_TIM_Base_Start+0x8c>)
 801cd5c:	4293      	cmp	r3, r2
 801cd5e:	d004      	beq.n	801cd6a <HAL_TIM_Base_Start+0x4a>
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	681b      	ldr	r3, [r3, #0]
 801cd64:	4a12      	ldr	r2, [pc, #72]	@ (801cdb0 <HAL_TIM_Base_Start+0x90>)
 801cd66:	4293      	cmp	r3, r2
 801cd68:	d111      	bne.n	801cd8e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	681b      	ldr	r3, [r3, #0]
 801cd6e:	689b      	ldr	r3, [r3, #8]
 801cd70:	2207      	movs	r2, #7
 801cd72:	4013      	ands	r3, r2
 801cd74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cd76:	68fb      	ldr	r3, [r7, #12]
 801cd78:	2b06      	cmp	r3, #6
 801cd7a:	d010      	beq.n	801cd9e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 801cd7c:	687b      	ldr	r3, [r7, #4]
 801cd7e:	681b      	ldr	r3, [r3, #0]
 801cd80:	681a      	ldr	r2, [r3, #0]
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	681b      	ldr	r3, [r3, #0]
 801cd86:	2101      	movs	r1, #1
 801cd88:	430a      	orrs	r2, r1
 801cd8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cd8c:	e007      	b.n	801cd9e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cd8e:	687b      	ldr	r3, [r7, #4]
 801cd90:	681b      	ldr	r3, [r3, #0]
 801cd92:	681a      	ldr	r2, [r3, #0]
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	681b      	ldr	r3, [r3, #0]
 801cd98:	2101      	movs	r1, #1
 801cd9a:	430a      	orrs	r2, r1
 801cd9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cd9e:	2300      	movs	r3, #0
}
 801cda0:	0018      	movs	r0, r3
 801cda2:	46bd      	mov	sp, r7
 801cda4:	b004      	add	sp, #16
 801cda6:	bd80      	pop	{r7, pc}
 801cda8:	40000400 	.word	0x40000400
 801cdac:	40010800 	.word	0x40010800
 801cdb0:	40011400 	.word	0x40011400

0801cdb4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801cdb4:	b580      	push	{r7, lr}
 801cdb6:	b082      	sub	sp, #8
 801cdb8:	af00      	add	r7, sp, #0
 801cdba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	681b      	ldr	r3, [r3, #0]
 801cdc0:	6a1b      	ldr	r3, [r3, #32]
 801cdc2:	4a0a      	ldr	r2, [pc, #40]	@ (801cdec <HAL_TIM_Base_Stop+0x38>)
 801cdc4:	4013      	ands	r3, r2
 801cdc6:	d107      	bne.n	801cdd8 <HAL_TIM_Base_Stop+0x24>
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	681b      	ldr	r3, [r3, #0]
 801cdcc:	681a      	ldr	r2, [r3, #0]
 801cdce:	687b      	ldr	r3, [r7, #4]
 801cdd0:	681b      	ldr	r3, [r3, #0]
 801cdd2:	2101      	movs	r1, #1
 801cdd4:	438a      	bics	r2, r1
 801cdd6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	2239      	movs	r2, #57	@ 0x39
 801cddc:	2101      	movs	r1, #1
 801cdde:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 801cde0:	2300      	movs	r3, #0
}
 801cde2:	0018      	movs	r0, r3
 801cde4:	46bd      	mov	sp, r7
 801cde6:	b002      	add	sp, #8
 801cde8:	bd80      	pop	{r7, pc}
 801cdea:	46c0      	nop			@ (mov r8, r8)
 801cdec:	00001111 	.word	0x00001111

0801cdf0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801cdf0:	b580      	push	{r7, lr}
 801cdf2:	b082      	sub	sp, #8
 801cdf4:	af00      	add	r7, sp, #0
 801cdf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cdf8:	687b      	ldr	r3, [r7, #4]
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d101      	bne.n	801ce02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801cdfe:	2301      	movs	r3, #1
 801ce00:	e032      	b.n	801ce68 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ce02:	687b      	ldr	r3, [r7, #4]
 801ce04:	2239      	movs	r2, #57	@ 0x39
 801ce06:	5c9b      	ldrb	r3, [r3, r2]
 801ce08:	b2db      	uxtb	r3, r3
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	d107      	bne.n	801ce1e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ce0e:	687b      	ldr	r3, [r7, #4]
 801ce10:	2238      	movs	r2, #56	@ 0x38
 801ce12:	2100      	movs	r1, #0
 801ce14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801ce16:	687b      	ldr	r3, [r7, #4]
 801ce18:	0018      	movs	r0, r3
 801ce1a:	f7f6 fe53 	bl	8013ac4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	2239      	movs	r2, #57	@ 0x39
 801ce22:	2102      	movs	r1, #2
 801ce24:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	681a      	ldr	r2, [r3, #0]
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	3304      	adds	r3, #4
 801ce2e:	0019      	movs	r1, r3
 801ce30:	0010      	movs	r0, r2
 801ce32:	f000 f975 	bl	801d120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ce36:	687b      	ldr	r3, [r7, #4]
 801ce38:	223e      	movs	r2, #62	@ 0x3e
 801ce3a:	2101      	movs	r1, #1
 801ce3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	223a      	movs	r2, #58	@ 0x3a
 801ce42:	2101      	movs	r1, #1
 801ce44:	5499      	strb	r1, [r3, r2]
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	223b      	movs	r2, #59	@ 0x3b
 801ce4a:	2101      	movs	r1, #1
 801ce4c:	5499      	strb	r1, [r3, r2]
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	223c      	movs	r2, #60	@ 0x3c
 801ce52:	2101      	movs	r1, #1
 801ce54:	5499      	strb	r1, [r3, r2]
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	223d      	movs	r2, #61	@ 0x3d
 801ce5a:	2101      	movs	r1, #1
 801ce5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	2239      	movs	r2, #57	@ 0x39
 801ce62:	2101      	movs	r1, #1
 801ce64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801ce66:	2300      	movs	r3, #0
}
 801ce68:	0018      	movs	r0, r3
 801ce6a:	46bd      	mov	sp, r7
 801ce6c:	b002      	add	sp, #8
 801ce6e:	bd80      	pop	{r7, pc}

0801ce70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ce70:	b580      	push	{r7, lr}
 801ce72:	b084      	sub	sp, #16
 801ce74:	af00      	add	r7, sp, #0
 801ce76:	6078      	str	r0, [r7, #4]
 801ce78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801ce7a:	683b      	ldr	r3, [r7, #0]
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d108      	bne.n	801ce92 <HAL_TIM_PWM_Start+0x22>
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	223a      	movs	r2, #58	@ 0x3a
 801ce84:	5c9b      	ldrb	r3, [r3, r2]
 801ce86:	b2db      	uxtb	r3, r3
 801ce88:	3b01      	subs	r3, #1
 801ce8a:	1e5a      	subs	r2, r3, #1
 801ce8c:	4193      	sbcs	r3, r2
 801ce8e:	b2db      	uxtb	r3, r3
 801ce90:	e01f      	b.n	801ced2 <HAL_TIM_PWM_Start+0x62>
 801ce92:	683b      	ldr	r3, [r7, #0]
 801ce94:	2b04      	cmp	r3, #4
 801ce96:	d108      	bne.n	801ceaa <HAL_TIM_PWM_Start+0x3a>
 801ce98:	687b      	ldr	r3, [r7, #4]
 801ce9a:	223b      	movs	r2, #59	@ 0x3b
 801ce9c:	5c9b      	ldrb	r3, [r3, r2]
 801ce9e:	b2db      	uxtb	r3, r3
 801cea0:	3b01      	subs	r3, #1
 801cea2:	1e5a      	subs	r2, r3, #1
 801cea4:	4193      	sbcs	r3, r2
 801cea6:	b2db      	uxtb	r3, r3
 801cea8:	e013      	b.n	801ced2 <HAL_TIM_PWM_Start+0x62>
 801ceaa:	683b      	ldr	r3, [r7, #0]
 801ceac:	2b08      	cmp	r3, #8
 801ceae:	d108      	bne.n	801cec2 <HAL_TIM_PWM_Start+0x52>
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	223c      	movs	r2, #60	@ 0x3c
 801ceb4:	5c9b      	ldrb	r3, [r3, r2]
 801ceb6:	b2db      	uxtb	r3, r3
 801ceb8:	3b01      	subs	r3, #1
 801ceba:	1e5a      	subs	r2, r3, #1
 801cebc:	4193      	sbcs	r3, r2
 801cebe:	b2db      	uxtb	r3, r3
 801cec0:	e007      	b.n	801ced2 <HAL_TIM_PWM_Start+0x62>
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	223d      	movs	r2, #61	@ 0x3d
 801cec6:	5c9b      	ldrb	r3, [r3, r2]
 801cec8:	b2db      	uxtb	r3, r3
 801ceca:	3b01      	subs	r3, #1
 801cecc:	1e5a      	subs	r2, r3, #1
 801cece:	4193      	sbcs	r3, r2
 801ced0:	b2db      	uxtb	r3, r3
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	d001      	beq.n	801ceda <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801ced6:	2301      	movs	r3, #1
 801ced8:	e052      	b.n	801cf80 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ceda:	683b      	ldr	r3, [r7, #0]
 801cedc:	2b00      	cmp	r3, #0
 801cede:	d104      	bne.n	801ceea <HAL_TIM_PWM_Start+0x7a>
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	223a      	movs	r2, #58	@ 0x3a
 801cee4:	2102      	movs	r1, #2
 801cee6:	5499      	strb	r1, [r3, r2]
 801cee8:	e013      	b.n	801cf12 <HAL_TIM_PWM_Start+0xa2>
 801ceea:	683b      	ldr	r3, [r7, #0]
 801ceec:	2b04      	cmp	r3, #4
 801ceee:	d104      	bne.n	801cefa <HAL_TIM_PWM_Start+0x8a>
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	223b      	movs	r2, #59	@ 0x3b
 801cef4:	2102      	movs	r1, #2
 801cef6:	5499      	strb	r1, [r3, r2]
 801cef8:	e00b      	b.n	801cf12 <HAL_TIM_PWM_Start+0xa2>
 801cefa:	683b      	ldr	r3, [r7, #0]
 801cefc:	2b08      	cmp	r3, #8
 801cefe:	d104      	bne.n	801cf0a <HAL_TIM_PWM_Start+0x9a>
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	223c      	movs	r2, #60	@ 0x3c
 801cf04:	2102      	movs	r1, #2
 801cf06:	5499      	strb	r1, [r3, r2]
 801cf08:	e003      	b.n	801cf12 <HAL_TIM_PWM_Start+0xa2>
 801cf0a:	687b      	ldr	r3, [r7, #4]
 801cf0c:	223d      	movs	r2, #61	@ 0x3d
 801cf0e:	2102      	movs	r1, #2
 801cf10:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	6839      	ldr	r1, [r7, #0]
 801cf18:	2201      	movs	r2, #1
 801cf1a:	0018      	movs	r0, r3
 801cf1c:	f000 fa62 	bl	801d3e4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	681a      	ldr	r2, [r3, #0]
 801cf24:	2380      	movs	r3, #128	@ 0x80
 801cf26:	05db      	lsls	r3, r3, #23
 801cf28:	429a      	cmp	r2, r3
 801cf2a:	d00e      	beq.n	801cf4a <HAL_TIM_PWM_Start+0xda>
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	4a15      	ldr	r2, [pc, #84]	@ (801cf88 <HAL_TIM_PWM_Start+0x118>)
 801cf32:	4293      	cmp	r3, r2
 801cf34:	d009      	beq.n	801cf4a <HAL_TIM_PWM_Start+0xda>
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	4a14      	ldr	r2, [pc, #80]	@ (801cf8c <HAL_TIM_PWM_Start+0x11c>)
 801cf3c:	4293      	cmp	r3, r2
 801cf3e:	d004      	beq.n	801cf4a <HAL_TIM_PWM_Start+0xda>
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	681b      	ldr	r3, [r3, #0]
 801cf44:	4a12      	ldr	r2, [pc, #72]	@ (801cf90 <HAL_TIM_PWM_Start+0x120>)
 801cf46:	4293      	cmp	r3, r2
 801cf48:	d111      	bne.n	801cf6e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cf4a:	687b      	ldr	r3, [r7, #4]
 801cf4c:	681b      	ldr	r3, [r3, #0]
 801cf4e:	689b      	ldr	r3, [r3, #8]
 801cf50:	2207      	movs	r2, #7
 801cf52:	4013      	ands	r3, r2
 801cf54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cf56:	68fb      	ldr	r3, [r7, #12]
 801cf58:	2b06      	cmp	r3, #6
 801cf5a:	d010      	beq.n	801cf7e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	681b      	ldr	r3, [r3, #0]
 801cf60:	681a      	ldr	r2, [r3, #0]
 801cf62:	687b      	ldr	r3, [r7, #4]
 801cf64:	681b      	ldr	r3, [r3, #0]
 801cf66:	2101      	movs	r1, #1
 801cf68:	430a      	orrs	r2, r1
 801cf6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cf6c:	e007      	b.n	801cf7e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	681b      	ldr	r3, [r3, #0]
 801cf72:	681a      	ldr	r2, [r3, #0]
 801cf74:	687b      	ldr	r3, [r7, #4]
 801cf76:	681b      	ldr	r3, [r3, #0]
 801cf78:	2101      	movs	r1, #1
 801cf7a:	430a      	orrs	r2, r1
 801cf7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801cf7e:	2300      	movs	r3, #0
}
 801cf80:	0018      	movs	r0, r3
 801cf82:	46bd      	mov	sp, r7
 801cf84:	b004      	add	sp, #16
 801cf86:	bd80      	pop	{r7, pc}
 801cf88:	40000400 	.word	0x40000400
 801cf8c:	40010800 	.word	0x40010800
 801cf90:	40011400 	.word	0x40011400

0801cf94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801cf94:	b580      	push	{r7, lr}
 801cf96:	b086      	sub	sp, #24
 801cf98:	af00      	add	r7, sp, #0
 801cf9a:	60f8      	str	r0, [r7, #12]
 801cf9c:	60b9      	str	r1, [r7, #8]
 801cf9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801cfa0:	2317      	movs	r3, #23
 801cfa2:	18fb      	adds	r3, r7, r3
 801cfa4:	2200      	movs	r2, #0
 801cfa6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	2238      	movs	r2, #56	@ 0x38
 801cfac:	5c9b      	ldrb	r3, [r3, r2]
 801cfae:	2b01      	cmp	r3, #1
 801cfb0:	d101      	bne.n	801cfb6 <HAL_TIM_PWM_ConfigChannel+0x22>
 801cfb2:	2302      	movs	r3, #2
 801cfb4:	e0ad      	b.n	801d112 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801cfb6:	68fb      	ldr	r3, [r7, #12]
 801cfb8:	2238      	movs	r2, #56	@ 0x38
 801cfba:	2101      	movs	r1, #1
 801cfbc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	2b0c      	cmp	r3, #12
 801cfc2:	d100      	bne.n	801cfc6 <HAL_TIM_PWM_ConfigChannel+0x32>
 801cfc4:	e076      	b.n	801d0b4 <HAL_TIM_PWM_ConfigChannel+0x120>
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	2b0c      	cmp	r3, #12
 801cfca:	d900      	bls.n	801cfce <HAL_TIM_PWM_ConfigChannel+0x3a>
 801cfcc:	e095      	b.n	801d0fa <HAL_TIM_PWM_ConfigChannel+0x166>
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	2b08      	cmp	r3, #8
 801cfd2:	d04e      	beq.n	801d072 <HAL_TIM_PWM_ConfigChannel+0xde>
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	2b08      	cmp	r3, #8
 801cfd8:	d900      	bls.n	801cfdc <HAL_TIM_PWM_ConfigChannel+0x48>
 801cfda:	e08e      	b.n	801d0fa <HAL_TIM_PWM_ConfigChannel+0x166>
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	2b00      	cmp	r3, #0
 801cfe0:	d003      	beq.n	801cfea <HAL_TIM_PWM_ConfigChannel+0x56>
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	2b04      	cmp	r3, #4
 801cfe6:	d021      	beq.n	801d02c <HAL_TIM_PWM_ConfigChannel+0x98>
 801cfe8:	e087      	b.n	801d0fa <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801cfea:	68fb      	ldr	r3, [r7, #12]
 801cfec:	681b      	ldr	r3, [r3, #0]
 801cfee:	68ba      	ldr	r2, [r7, #8]
 801cff0:	0011      	movs	r1, r2
 801cff2:	0018      	movs	r0, r3
 801cff4:	f000 f8f2 	bl	801d1dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801cff8:	68fb      	ldr	r3, [r7, #12]
 801cffa:	681b      	ldr	r3, [r3, #0]
 801cffc:	699a      	ldr	r2, [r3, #24]
 801cffe:	68fb      	ldr	r3, [r7, #12]
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	2108      	movs	r1, #8
 801d004:	430a      	orrs	r2, r1
 801d006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801d008:	68fb      	ldr	r3, [r7, #12]
 801d00a:	681b      	ldr	r3, [r3, #0]
 801d00c:	699a      	ldr	r2, [r3, #24]
 801d00e:	68fb      	ldr	r3, [r7, #12]
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	2104      	movs	r1, #4
 801d014:	438a      	bics	r2, r1
 801d016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801d018:	68fb      	ldr	r3, [r7, #12]
 801d01a:	681b      	ldr	r3, [r3, #0]
 801d01c:	6999      	ldr	r1, [r3, #24]
 801d01e:	68bb      	ldr	r3, [r7, #8]
 801d020:	68da      	ldr	r2, [r3, #12]
 801d022:	68fb      	ldr	r3, [r7, #12]
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	430a      	orrs	r2, r1
 801d028:	619a      	str	r2, [r3, #24]
      break;
 801d02a:	e06b      	b.n	801d104 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d02c:	68fb      	ldr	r3, [r7, #12]
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	68ba      	ldr	r2, [r7, #8]
 801d032:	0011      	movs	r1, r2
 801d034:	0018      	movs	r0, r3
 801d036:	f000 f90d 	bl	801d254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801d03a:	68fb      	ldr	r3, [r7, #12]
 801d03c:	681b      	ldr	r3, [r3, #0]
 801d03e:	699a      	ldr	r2, [r3, #24]
 801d040:	68fb      	ldr	r3, [r7, #12]
 801d042:	681b      	ldr	r3, [r3, #0]
 801d044:	2180      	movs	r1, #128	@ 0x80
 801d046:	0109      	lsls	r1, r1, #4
 801d048:	430a      	orrs	r2, r1
 801d04a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801d04c:	68fb      	ldr	r3, [r7, #12]
 801d04e:	681b      	ldr	r3, [r3, #0]
 801d050:	699a      	ldr	r2, [r3, #24]
 801d052:	68fb      	ldr	r3, [r7, #12]
 801d054:	681b      	ldr	r3, [r3, #0]
 801d056:	4931      	ldr	r1, [pc, #196]	@ (801d11c <HAL_TIM_PWM_ConfigChannel+0x188>)
 801d058:	400a      	ands	r2, r1
 801d05a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801d05c:	68fb      	ldr	r3, [r7, #12]
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	6999      	ldr	r1, [r3, #24]
 801d062:	68bb      	ldr	r3, [r7, #8]
 801d064:	68db      	ldr	r3, [r3, #12]
 801d066:	021a      	lsls	r2, r3, #8
 801d068:	68fb      	ldr	r3, [r7, #12]
 801d06a:	681b      	ldr	r3, [r3, #0]
 801d06c:	430a      	orrs	r2, r1
 801d06e:	619a      	str	r2, [r3, #24]
      break;
 801d070:	e048      	b.n	801d104 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d072:	68fb      	ldr	r3, [r7, #12]
 801d074:	681b      	ldr	r3, [r3, #0]
 801d076:	68ba      	ldr	r2, [r7, #8]
 801d078:	0011      	movs	r1, r2
 801d07a:	0018      	movs	r0, r3
 801d07c:	f000 f92c 	bl	801d2d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801d080:	68fb      	ldr	r3, [r7, #12]
 801d082:	681b      	ldr	r3, [r3, #0]
 801d084:	69da      	ldr	r2, [r3, #28]
 801d086:	68fb      	ldr	r3, [r7, #12]
 801d088:	681b      	ldr	r3, [r3, #0]
 801d08a:	2108      	movs	r1, #8
 801d08c:	430a      	orrs	r2, r1
 801d08e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801d090:	68fb      	ldr	r3, [r7, #12]
 801d092:	681b      	ldr	r3, [r3, #0]
 801d094:	69da      	ldr	r2, [r3, #28]
 801d096:	68fb      	ldr	r3, [r7, #12]
 801d098:	681b      	ldr	r3, [r3, #0]
 801d09a:	2104      	movs	r1, #4
 801d09c:	438a      	bics	r2, r1
 801d09e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801d0a0:	68fb      	ldr	r3, [r7, #12]
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	69d9      	ldr	r1, [r3, #28]
 801d0a6:	68bb      	ldr	r3, [r7, #8]
 801d0a8:	68da      	ldr	r2, [r3, #12]
 801d0aa:	68fb      	ldr	r3, [r7, #12]
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	430a      	orrs	r2, r1
 801d0b0:	61da      	str	r2, [r3, #28]
      break;
 801d0b2:	e027      	b.n	801d104 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d0b4:	68fb      	ldr	r3, [r7, #12]
 801d0b6:	681b      	ldr	r3, [r3, #0]
 801d0b8:	68ba      	ldr	r2, [r7, #8]
 801d0ba:	0011      	movs	r1, r2
 801d0bc:	0018      	movs	r0, r3
 801d0be:	f000 f94b 	bl	801d358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801d0c2:	68fb      	ldr	r3, [r7, #12]
 801d0c4:	681b      	ldr	r3, [r3, #0]
 801d0c6:	69da      	ldr	r2, [r3, #28]
 801d0c8:	68fb      	ldr	r3, [r7, #12]
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	2180      	movs	r1, #128	@ 0x80
 801d0ce:	0109      	lsls	r1, r1, #4
 801d0d0:	430a      	orrs	r2, r1
 801d0d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801d0d4:	68fb      	ldr	r3, [r7, #12]
 801d0d6:	681b      	ldr	r3, [r3, #0]
 801d0d8:	69da      	ldr	r2, [r3, #28]
 801d0da:	68fb      	ldr	r3, [r7, #12]
 801d0dc:	681b      	ldr	r3, [r3, #0]
 801d0de:	490f      	ldr	r1, [pc, #60]	@ (801d11c <HAL_TIM_PWM_ConfigChannel+0x188>)
 801d0e0:	400a      	ands	r2, r1
 801d0e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801d0e4:	68fb      	ldr	r3, [r7, #12]
 801d0e6:	681b      	ldr	r3, [r3, #0]
 801d0e8:	69d9      	ldr	r1, [r3, #28]
 801d0ea:	68bb      	ldr	r3, [r7, #8]
 801d0ec:	68db      	ldr	r3, [r3, #12]
 801d0ee:	021a      	lsls	r2, r3, #8
 801d0f0:	68fb      	ldr	r3, [r7, #12]
 801d0f2:	681b      	ldr	r3, [r3, #0]
 801d0f4:	430a      	orrs	r2, r1
 801d0f6:	61da      	str	r2, [r3, #28]
      break;
 801d0f8:	e004      	b.n	801d104 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801d0fa:	2317      	movs	r3, #23
 801d0fc:	18fb      	adds	r3, r7, r3
 801d0fe:	2201      	movs	r2, #1
 801d100:	701a      	strb	r2, [r3, #0]
      break;
 801d102:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 801d104:	68fb      	ldr	r3, [r7, #12]
 801d106:	2238      	movs	r2, #56	@ 0x38
 801d108:	2100      	movs	r1, #0
 801d10a:	5499      	strb	r1, [r3, r2]

  return status;
 801d10c:	2317      	movs	r3, #23
 801d10e:	18fb      	adds	r3, r7, r3
 801d110:	781b      	ldrb	r3, [r3, #0]
}
 801d112:	0018      	movs	r0, r3
 801d114:	46bd      	mov	sp, r7
 801d116:	b006      	add	sp, #24
 801d118:	bd80      	pop	{r7, pc}
 801d11a:	46c0      	nop			@ (mov r8, r8)
 801d11c:	fffffbff 	.word	0xfffffbff

0801d120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801d120:	b580      	push	{r7, lr}
 801d122:	b084      	sub	sp, #16
 801d124:	af00      	add	r7, sp, #0
 801d126:	6078      	str	r0, [r7, #4]
 801d128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d12a:	687b      	ldr	r3, [r7, #4]
 801d12c:	681b      	ldr	r3, [r3, #0]
 801d12e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d130:	687a      	ldr	r2, [r7, #4]
 801d132:	2380      	movs	r3, #128	@ 0x80
 801d134:	05db      	lsls	r3, r3, #23
 801d136:	429a      	cmp	r2, r3
 801d138:	d00b      	beq.n	801d152 <TIM_Base_SetConfig+0x32>
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	4a23      	ldr	r2, [pc, #140]	@ (801d1cc <TIM_Base_SetConfig+0xac>)
 801d13e:	4293      	cmp	r3, r2
 801d140:	d007      	beq.n	801d152 <TIM_Base_SetConfig+0x32>
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	4a22      	ldr	r2, [pc, #136]	@ (801d1d0 <TIM_Base_SetConfig+0xb0>)
 801d146:	4293      	cmp	r3, r2
 801d148:	d003      	beq.n	801d152 <TIM_Base_SetConfig+0x32>
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	4a21      	ldr	r2, [pc, #132]	@ (801d1d4 <TIM_Base_SetConfig+0xb4>)
 801d14e:	4293      	cmp	r3, r2
 801d150:	d108      	bne.n	801d164 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d152:	68fb      	ldr	r3, [r7, #12]
 801d154:	2270      	movs	r2, #112	@ 0x70
 801d156:	4393      	bics	r3, r2
 801d158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d15a:	683b      	ldr	r3, [r7, #0]
 801d15c:	685b      	ldr	r3, [r3, #4]
 801d15e:	68fa      	ldr	r2, [r7, #12]
 801d160:	4313      	orrs	r3, r2
 801d162:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d164:	687a      	ldr	r2, [r7, #4]
 801d166:	2380      	movs	r3, #128	@ 0x80
 801d168:	05db      	lsls	r3, r3, #23
 801d16a:	429a      	cmp	r2, r3
 801d16c:	d00b      	beq.n	801d186 <TIM_Base_SetConfig+0x66>
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	4a16      	ldr	r2, [pc, #88]	@ (801d1cc <TIM_Base_SetConfig+0xac>)
 801d172:	4293      	cmp	r3, r2
 801d174:	d007      	beq.n	801d186 <TIM_Base_SetConfig+0x66>
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	4a15      	ldr	r2, [pc, #84]	@ (801d1d0 <TIM_Base_SetConfig+0xb0>)
 801d17a:	4293      	cmp	r3, r2
 801d17c:	d003      	beq.n	801d186 <TIM_Base_SetConfig+0x66>
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	4a14      	ldr	r2, [pc, #80]	@ (801d1d4 <TIM_Base_SetConfig+0xb4>)
 801d182:	4293      	cmp	r3, r2
 801d184:	d108      	bne.n	801d198 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d186:	68fb      	ldr	r3, [r7, #12]
 801d188:	4a13      	ldr	r2, [pc, #76]	@ (801d1d8 <TIM_Base_SetConfig+0xb8>)
 801d18a:	4013      	ands	r3, r2
 801d18c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d18e:	683b      	ldr	r3, [r7, #0]
 801d190:	68db      	ldr	r3, [r3, #12]
 801d192:	68fa      	ldr	r2, [r7, #12]
 801d194:	4313      	orrs	r3, r2
 801d196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d198:	68fb      	ldr	r3, [r7, #12]
 801d19a:	2280      	movs	r2, #128	@ 0x80
 801d19c:	4393      	bics	r3, r2
 801d19e:	001a      	movs	r2, r3
 801d1a0:	683b      	ldr	r3, [r7, #0]
 801d1a2:	691b      	ldr	r3, [r3, #16]
 801d1a4:	4313      	orrs	r3, r2
 801d1a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	68fa      	ldr	r2, [r7, #12]
 801d1ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d1ae:	683b      	ldr	r3, [r7, #0]
 801d1b0:	689a      	ldr	r2, [r3, #8]
 801d1b2:	687b      	ldr	r3, [r7, #4]
 801d1b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d1b6:	683b      	ldr	r3, [r7, #0]
 801d1b8:	681a      	ldr	r2, [r3, #0]
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	2201      	movs	r2, #1
 801d1c2:	615a      	str	r2, [r3, #20]
}
 801d1c4:	46c0      	nop			@ (mov r8, r8)
 801d1c6:	46bd      	mov	sp, r7
 801d1c8:	b004      	add	sp, #16
 801d1ca:	bd80      	pop	{r7, pc}
 801d1cc:	40000400 	.word	0x40000400
 801d1d0:	40010800 	.word	0x40010800
 801d1d4:	40011400 	.word	0x40011400
 801d1d8:	fffffcff 	.word	0xfffffcff

0801d1dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d1dc:	b580      	push	{r7, lr}
 801d1de:	b086      	sub	sp, #24
 801d1e0:	af00      	add	r7, sp, #0
 801d1e2:	6078      	str	r0, [r7, #4]
 801d1e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d1e6:	687b      	ldr	r3, [r7, #4]
 801d1e8:	6a1b      	ldr	r3, [r3, #32]
 801d1ea:	2201      	movs	r2, #1
 801d1ec:	4393      	bics	r3, r2
 801d1ee:	001a      	movs	r2, r3
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	6a1b      	ldr	r3, [r3, #32]
 801d1f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	685b      	ldr	r3, [r3, #4]
 801d1fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	699b      	ldr	r3, [r3, #24]
 801d204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d206:	68fb      	ldr	r3, [r7, #12]
 801d208:	2270      	movs	r2, #112	@ 0x70
 801d20a:	4393      	bics	r3, r2
 801d20c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d20e:	68fb      	ldr	r3, [r7, #12]
 801d210:	2203      	movs	r2, #3
 801d212:	4393      	bics	r3, r2
 801d214:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d216:	683b      	ldr	r3, [r7, #0]
 801d218:	681b      	ldr	r3, [r3, #0]
 801d21a:	68fa      	ldr	r2, [r7, #12]
 801d21c:	4313      	orrs	r3, r2
 801d21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d220:	697b      	ldr	r3, [r7, #20]
 801d222:	2202      	movs	r2, #2
 801d224:	4393      	bics	r3, r2
 801d226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d228:	683b      	ldr	r3, [r7, #0]
 801d22a:	689b      	ldr	r3, [r3, #8]
 801d22c:	697a      	ldr	r2, [r7, #20]
 801d22e:	4313      	orrs	r3, r2
 801d230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	693a      	ldr	r2, [r7, #16]
 801d236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	68fa      	ldr	r2, [r7, #12]
 801d23c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d23e:	683b      	ldr	r3, [r7, #0]
 801d240:	685a      	ldr	r2, [r3, #4]
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	697a      	ldr	r2, [r7, #20]
 801d24a:	621a      	str	r2, [r3, #32]
}
 801d24c:	46c0      	nop			@ (mov r8, r8)
 801d24e:	46bd      	mov	sp, r7
 801d250:	b006      	add	sp, #24
 801d252:	bd80      	pop	{r7, pc}

0801d254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d254:	b580      	push	{r7, lr}
 801d256:	b086      	sub	sp, #24
 801d258:	af00      	add	r7, sp, #0
 801d25a:	6078      	str	r0, [r7, #4]
 801d25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	6a1b      	ldr	r3, [r3, #32]
 801d262:	2210      	movs	r2, #16
 801d264:	4393      	bics	r3, r2
 801d266:	001a      	movs	r2, r3
 801d268:	687b      	ldr	r3, [r7, #4]
 801d26a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	6a1b      	ldr	r3, [r3, #32]
 801d270:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	685b      	ldr	r3, [r3, #4]
 801d276:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	699b      	ldr	r3, [r3, #24]
 801d27c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d27e:	68fb      	ldr	r3, [r7, #12]
 801d280:	4a13      	ldr	r2, [pc, #76]	@ (801d2d0 <TIM_OC2_SetConfig+0x7c>)
 801d282:	4013      	ands	r3, r2
 801d284:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d286:	68fb      	ldr	r3, [r7, #12]
 801d288:	4a12      	ldr	r2, [pc, #72]	@ (801d2d4 <TIM_OC2_SetConfig+0x80>)
 801d28a:	4013      	ands	r3, r2
 801d28c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d28e:	683b      	ldr	r3, [r7, #0]
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	021b      	lsls	r3, r3, #8
 801d294:	68fa      	ldr	r2, [r7, #12]
 801d296:	4313      	orrs	r3, r2
 801d298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d29a:	697b      	ldr	r3, [r7, #20]
 801d29c:	2220      	movs	r2, #32
 801d29e:	4393      	bics	r3, r2
 801d2a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d2a2:	683b      	ldr	r3, [r7, #0]
 801d2a4:	689b      	ldr	r3, [r3, #8]
 801d2a6:	011b      	lsls	r3, r3, #4
 801d2a8:	697a      	ldr	r2, [r7, #20]
 801d2aa:	4313      	orrs	r3, r2
 801d2ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d2ae:	687b      	ldr	r3, [r7, #4]
 801d2b0:	693a      	ldr	r2, [r7, #16]
 801d2b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	68fa      	ldr	r2, [r7, #12]
 801d2b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d2ba:	683b      	ldr	r3, [r7, #0]
 801d2bc:	685a      	ldr	r2, [r3, #4]
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	697a      	ldr	r2, [r7, #20]
 801d2c6:	621a      	str	r2, [r3, #32]
}
 801d2c8:	46c0      	nop			@ (mov r8, r8)
 801d2ca:	46bd      	mov	sp, r7
 801d2cc:	b006      	add	sp, #24
 801d2ce:	bd80      	pop	{r7, pc}
 801d2d0:	ffff8fff 	.word	0xffff8fff
 801d2d4:	fffffcff 	.word	0xfffffcff

0801d2d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d2d8:	b580      	push	{r7, lr}
 801d2da:	b086      	sub	sp, #24
 801d2dc:	af00      	add	r7, sp, #0
 801d2de:	6078      	str	r0, [r7, #4]
 801d2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d2e2:	687b      	ldr	r3, [r7, #4]
 801d2e4:	6a1b      	ldr	r3, [r3, #32]
 801d2e6:	4a1a      	ldr	r2, [pc, #104]	@ (801d350 <TIM_OC3_SetConfig+0x78>)
 801d2e8:	401a      	ands	r2, r3
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d2ee:	687b      	ldr	r3, [r7, #4]
 801d2f0:	6a1b      	ldr	r3, [r3, #32]
 801d2f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d2f4:	687b      	ldr	r3, [r7, #4]
 801d2f6:	685b      	ldr	r3, [r3, #4]
 801d2f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d2fa:	687b      	ldr	r3, [r7, #4]
 801d2fc:	69db      	ldr	r3, [r3, #28]
 801d2fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d300:	68fb      	ldr	r3, [r7, #12]
 801d302:	2270      	movs	r2, #112	@ 0x70
 801d304:	4393      	bics	r3, r2
 801d306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d308:	68fb      	ldr	r3, [r7, #12]
 801d30a:	2203      	movs	r2, #3
 801d30c:	4393      	bics	r3, r2
 801d30e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d310:	683b      	ldr	r3, [r7, #0]
 801d312:	681b      	ldr	r3, [r3, #0]
 801d314:	68fa      	ldr	r2, [r7, #12]
 801d316:	4313      	orrs	r3, r2
 801d318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d31a:	697b      	ldr	r3, [r7, #20]
 801d31c:	4a0d      	ldr	r2, [pc, #52]	@ (801d354 <TIM_OC3_SetConfig+0x7c>)
 801d31e:	4013      	ands	r3, r2
 801d320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d322:	683b      	ldr	r3, [r7, #0]
 801d324:	689b      	ldr	r3, [r3, #8]
 801d326:	021b      	lsls	r3, r3, #8
 801d328:	697a      	ldr	r2, [r7, #20]
 801d32a:	4313      	orrs	r3, r2
 801d32c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	693a      	ldr	r2, [r7, #16]
 801d332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	68fa      	ldr	r2, [r7, #12]
 801d338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801d33a:	683b      	ldr	r3, [r7, #0]
 801d33c:	685a      	ldr	r2, [r3, #4]
 801d33e:	687b      	ldr	r3, [r7, #4]
 801d340:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	697a      	ldr	r2, [r7, #20]
 801d346:	621a      	str	r2, [r3, #32]
}
 801d348:	46c0      	nop			@ (mov r8, r8)
 801d34a:	46bd      	mov	sp, r7
 801d34c:	b006      	add	sp, #24
 801d34e:	bd80      	pop	{r7, pc}
 801d350:	fffffeff 	.word	0xfffffeff
 801d354:	fffffdff 	.word	0xfffffdff

0801d358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801d358:	b580      	push	{r7, lr}
 801d35a:	b086      	sub	sp, #24
 801d35c:	af00      	add	r7, sp, #0
 801d35e:	6078      	str	r0, [r7, #4]
 801d360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	6a1b      	ldr	r3, [r3, #32]
 801d366:	4a1b      	ldr	r2, [pc, #108]	@ (801d3d4 <TIM_OC4_SetConfig+0x7c>)
 801d368:	401a      	ands	r2, r3
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	6a1b      	ldr	r3, [r3, #32]
 801d372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	685b      	ldr	r3, [r3, #4]
 801d378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	69db      	ldr	r3, [r3, #28]
 801d37e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801d380:	68fb      	ldr	r3, [r7, #12]
 801d382:	4a15      	ldr	r2, [pc, #84]	@ (801d3d8 <TIM_OC4_SetConfig+0x80>)
 801d384:	4013      	ands	r3, r2
 801d386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801d388:	68fb      	ldr	r3, [r7, #12]
 801d38a:	4a14      	ldr	r2, [pc, #80]	@ (801d3dc <TIM_OC4_SetConfig+0x84>)
 801d38c:	4013      	ands	r3, r2
 801d38e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d390:	683b      	ldr	r3, [r7, #0]
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	021b      	lsls	r3, r3, #8
 801d396:	68fa      	ldr	r2, [r7, #12]
 801d398:	4313      	orrs	r3, r2
 801d39a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801d39c:	697b      	ldr	r3, [r7, #20]
 801d39e:	4a10      	ldr	r2, [pc, #64]	@ (801d3e0 <TIM_OC4_SetConfig+0x88>)
 801d3a0:	4013      	ands	r3, r2
 801d3a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801d3a4:	683b      	ldr	r3, [r7, #0]
 801d3a6:	689b      	ldr	r3, [r3, #8]
 801d3a8:	031b      	lsls	r3, r3, #12
 801d3aa:	697a      	ldr	r2, [r7, #20]
 801d3ac:	4313      	orrs	r3, r2
 801d3ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	693a      	ldr	r2, [r7, #16]
 801d3b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801d3b6:	687b      	ldr	r3, [r7, #4]
 801d3b8:	68fa      	ldr	r2, [r7, #12]
 801d3ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801d3bc:	683b      	ldr	r3, [r7, #0]
 801d3be:	685a      	ldr	r2, [r3, #4]
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	697a      	ldr	r2, [r7, #20]
 801d3c8:	621a      	str	r2, [r3, #32]
}
 801d3ca:	46c0      	nop			@ (mov r8, r8)
 801d3cc:	46bd      	mov	sp, r7
 801d3ce:	b006      	add	sp, #24
 801d3d0:	bd80      	pop	{r7, pc}
 801d3d2:	46c0      	nop			@ (mov r8, r8)
 801d3d4:	ffffefff 	.word	0xffffefff
 801d3d8:	ffff8fff 	.word	0xffff8fff
 801d3dc:	fffffcff 	.word	0xfffffcff
 801d3e0:	ffffdfff 	.word	0xffffdfff

0801d3e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801d3e4:	b580      	push	{r7, lr}
 801d3e6:	b086      	sub	sp, #24
 801d3e8:	af00      	add	r7, sp, #0
 801d3ea:	60f8      	str	r0, [r7, #12]
 801d3ec:	60b9      	str	r1, [r7, #8]
 801d3ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801d3f0:	68bb      	ldr	r3, [r7, #8]
 801d3f2:	221f      	movs	r2, #31
 801d3f4:	4013      	ands	r3, r2
 801d3f6:	2201      	movs	r2, #1
 801d3f8:	409a      	lsls	r2, r3
 801d3fa:	0013      	movs	r3, r2
 801d3fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801d3fe:	68fb      	ldr	r3, [r7, #12]
 801d400:	6a1b      	ldr	r3, [r3, #32]
 801d402:	697a      	ldr	r2, [r7, #20]
 801d404:	43d2      	mvns	r2, r2
 801d406:	401a      	ands	r2, r3
 801d408:	68fb      	ldr	r3, [r7, #12]
 801d40a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	6a1a      	ldr	r2, [r3, #32]
 801d410:	68bb      	ldr	r3, [r7, #8]
 801d412:	211f      	movs	r1, #31
 801d414:	400b      	ands	r3, r1
 801d416:	6879      	ldr	r1, [r7, #4]
 801d418:	4099      	lsls	r1, r3
 801d41a:	000b      	movs	r3, r1
 801d41c:	431a      	orrs	r2, r3
 801d41e:	68fb      	ldr	r3, [r7, #12]
 801d420:	621a      	str	r2, [r3, #32]
}
 801d422:	46c0      	nop			@ (mov r8, r8)
 801d424:	46bd      	mov	sp, r7
 801d426:	b006      	add	sp, #24
 801d428:	bd80      	pop	{r7, pc}
	...

0801d42c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801d42c:	b580      	push	{r7, lr}
 801d42e:	b084      	sub	sp, #16
 801d430:	af00      	add	r7, sp, #0
 801d432:	6078      	str	r0, [r7, #4]
 801d434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	2238      	movs	r2, #56	@ 0x38
 801d43a:	5c9b      	ldrb	r3, [r3, r2]
 801d43c:	2b01      	cmp	r3, #1
 801d43e:	d101      	bne.n	801d444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801d440:	2302      	movs	r3, #2
 801d442:	e047      	b.n	801d4d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 801d444:	687b      	ldr	r3, [r7, #4]
 801d446:	2238      	movs	r2, #56	@ 0x38
 801d448:	2101      	movs	r1, #1
 801d44a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	2239      	movs	r2, #57	@ 0x39
 801d450:	2102      	movs	r1, #2
 801d452:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	681b      	ldr	r3, [r3, #0]
 801d458:	685b      	ldr	r3, [r3, #4]
 801d45a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801d45c:	687b      	ldr	r3, [r7, #4]
 801d45e:	681b      	ldr	r3, [r3, #0]
 801d460:	689b      	ldr	r3, [r3, #8]
 801d462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801d464:	68fb      	ldr	r3, [r7, #12]
 801d466:	2270      	movs	r2, #112	@ 0x70
 801d468:	4393      	bics	r3, r2
 801d46a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801d46c:	683b      	ldr	r3, [r7, #0]
 801d46e:	681b      	ldr	r3, [r3, #0]
 801d470:	68fa      	ldr	r2, [r7, #12]
 801d472:	4313      	orrs	r3, r2
 801d474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	681b      	ldr	r3, [r3, #0]
 801d47a:	68fa      	ldr	r2, [r7, #12]
 801d47c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	681a      	ldr	r2, [r3, #0]
 801d482:	2380      	movs	r3, #128	@ 0x80
 801d484:	05db      	lsls	r3, r3, #23
 801d486:	429a      	cmp	r2, r3
 801d488:	d00e      	beq.n	801d4a8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d48a:	687b      	ldr	r3, [r7, #4]
 801d48c:	681b      	ldr	r3, [r3, #0]
 801d48e:	4a13      	ldr	r2, [pc, #76]	@ (801d4dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 801d490:	4293      	cmp	r3, r2
 801d492:	d009      	beq.n	801d4a8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	4a11      	ldr	r2, [pc, #68]	@ (801d4e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801d49a:	4293      	cmp	r3, r2
 801d49c:	d004      	beq.n	801d4a8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	4a10      	ldr	r2, [pc, #64]	@ (801d4e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 801d4a4:	4293      	cmp	r3, r2
 801d4a6:	d10c      	bne.n	801d4c2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801d4a8:	68bb      	ldr	r3, [r7, #8]
 801d4aa:	2280      	movs	r2, #128	@ 0x80
 801d4ac:	4393      	bics	r3, r2
 801d4ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801d4b0:	683b      	ldr	r3, [r7, #0]
 801d4b2:	685b      	ldr	r3, [r3, #4]
 801d4b4:	68ba      	ldr	r2, [r7, #8]
 801d4b6:	4313      	orrs	r3, r2
 801d4b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	681b      	ldr	r3, [r3, #0]
 801d4be:	68ba      	ldr	r2, [r7, #8]
 801d4c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	2239      	movs	r2, #57	@ 0x39
 801d4c6:	2101      	movs	r1, #1
 801d4c8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801d4ca:	687b      	ldr	r3, [r7, #4]
 801d4cc:	2238      	movs	r2, #56	@ 0x38
 801d4ce:	2100      	movs	r1, #0
 801d4d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d4d2:	2300      	movs	r3, #0
}
 801d4d4:	0018      	movs	r0, r3
 801d4d6:	46bd      	mov	sp, r7
 801d4d8:	b004      	add	sp, #16
 801d4da:	bd80      	pop	{r7, pc}
 801d4dc:	40000400 	.word	0x40000400
 801d4e0:	40010800 	.word	0x40010800
 801d4e4:	40011400 	.word	0x40011400

0801d4e8 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801d4e8:	b580      	push	{r7, lr}
 801d4ea:	b082      	sub	sp, #8
 801d4ec:	af00      	add	r7, sp, #0
 801d4ee:	6078      	str	r0, [r7, #4]
 801d4f0:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801d4f2:	687b      	ldr	r3, [r7, #4]
 801d4f4:	2238      	movs	r2, #56	@ 0x38
 801d4f6:	5c9b      	ldrb	r3, [r3, r2]
 801d4f8:	2b01      	cmp	r3, #1
 801d4fa:	d101      	bne.n	801d500 <HAL_TIMEx_RemapConfig+0x18>
 801d4fc:	2302      	movs	r3, #2
 801d4fe:	e00c      	b.n	801d51a <HAL_TIMEx_RemapConfig+0x32>
 801d500:	687b      	ldr	r3, [r7, #4]
 801d502:	2238      	movs	r2, #56	@ 0x38
 801d504:	2101      	movs	r1, #1
 801d506:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	681b      	ldr	r3, [r3, #0]
 801d50c:	683a      	ldr	r2, [r7, #0]
 801d50e:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801d510:	687b      	ldr	r3, [r7, #4]
 801d512:	2238      	movs	r2, #56	@ 0x38
 801d514:	2100      	movs	r1, #0
 801d516:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801d518:	2300      	movs	r3, #0
}
 801d51a:	0018      	movs	r0, r3
 801d51c:	46bd      	mov	sp, r7
 801d51e:	b002      	add	sp, #8
 801d520:	bd80      	pop	{r7, pc}
	...

0801d524 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801d524:	b580      	push	{r7, lr}
 801d526:	b082      	sub	sp, #8
 801d528:	af00      	add	r7, sp, #0
 801d52a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	2b00      	cmp	r3, #0
 801d530:	d101      	bne.n	801d536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801d532:	2301      	movs	r3, #1
 801d534:	e053      	b.n	801d5de <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801d536:	687b      	ldr	r3, [r7, #4]
 801d538:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d53a:	2b00      	cmp	r3, #0
 801d53c:	d116      	bne.n	801d56c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	2278      	movs	r2, #120	@ 0x78
 801d542:	2100      	movs	r1, #0
 801d544:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	0018      	movs	r0, r3
 801d54a:	f000 fd65 	bl	801e018 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	22b0      	movs	r2, #176	@ 0xb0
 801d552:	589b      	ldr	r3, [r3, r2]
 801d554:	2b00      	cmp	r3, #0
 801d556:	d103      	bne.n	801d560 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801d558:	687b      	ldr	r3, [r7, #4]
 801d55a:	21b0      	movs	r1, #176	@ 0xb0
 801d55c:	4a22      	ldr	r2, [pc, #136]	@ (801d5e8 <HAL_UART_Init+0xc4>)
 801d55e:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	22b0      	movs	r2, #176	@ 0xb0
 801d564:	589b      	ldr	r3, [r3, r2]
 801d566:	687a      	ldr	r2, [r7, #4]
 801d568:	0010      	movs	r0, r2
 801d56a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801d56c:	687b      	ldr	r3, [r7, #4]
 801d56e:	2224      	movs	r2, #36	@ 0x24
 801d570:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	681b      	ldr	r3, [r3, #0]
 801d576:	681a      	ldr	r2, [r3, #0]
 801d578:	687b      	ldr	r3, [r7, #4]
 801d57a:	681b      	ldr	r3, [r3, #0]
 801d57c:	2101      	movs	r1, #1
 801d57e:	438a      	bics	r2, r1
 801d580:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801d582:	687b      	ldr	r3, [r7, #4]
 801d584:	0018      	movs	r0, r3
 801d586:	f000 fd8b 	bl	801e0a0 <UART_SetConfig>
 801d58a:	0003      	movs	r3, r0
 801d58c:	2b01      	cmp	r3, #1
 801d58e:	d101      	bne.n	801d594 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801d590:	2301      	movs	r3, #1
 801d592:	e024      	b.n	801d5de <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d003      	beq.n	801d5a4 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	0018      	movs	r0, r3
 801d5a0:	f001 f81c 	bl	801e5dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801d5a4:	687b      	ldr	r3, [r7, #4]
 801d5a6:	681b      	ldr	r3, [r3, #0]
 801d5a8:	685a      	ldr	r2, [r3, #4]
 801d5aa:	687b      	ldr	r3, [r7, #4]
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	490f      	ldr	r1, [pc, #60]	@ (801d5ec <HAL_UART_Init+0xc8>)
 801d5b0:	400a      	ands	r2, r1
 801d5b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	681b      	ldr	r3, [r3, #0]
 801d5b8:	689a      	ldr	r2, [r3, #8]
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	681b      	ldr	r3, [r3, #0]
 801d5be:	212a      	movs	r1, #42	@ 0x2a
 801d5c0:	438a      	bics	r2, r1
 801d5c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801d5c4:	687b      	ldr	r3, [r7, #4]
 801d5c6:	681b      	ldr	r3, [r3, #0]
 801d5c8:	681a      	ldr	r2, [r3, #0]
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	681b      	ldr	r3, [r3, #0]
 801d5ce:	2101      	movs	r1, #1
 801d5d0:	430a      	orrs	r2, r1
 801d5d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801d5d4:	687b      	ldr	r3, [r7, #4]
 801d5d6:	0018      	movs	r0, r3
 801d5d8:	f001 f8b4 	bl	801e744 <UART_CheckIdleState>
 801d5dc:	0003      	movs	r3, r0
}
 801d5de:	0018      	movs	r0, r3
 801d5e0:	46bd      	mov	sp, r7
 801d5e2:	b002      	add	sp, #8
 801d5e4:	bd80      	pop	{r7, pc}
 801d5e6:	46c0      	nop			@ (mov r8, r8)
 801d5e8:	08013d39 	.word	0x08013d39
 801d5ec:	ffffb7ff 	.word	0xffffb7ff

0801d5f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d5f0:	b580      	push	{r7, lr}
 801d5f2:	b08a      	sub	sp, #40	@ 0x28
 801d5f4:	af02      	add	r7, sp, #8
 801d5f6:	60f8      	str	r0, [r7, #12]
 801d5f8:	60b9      	str	r1, [r7, #8]
 801d5fa:	603b      	str	r3, [r7, #0]
 801d5fc:	1dbb      	adds	r3, r7, #6
 801d5fe:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d600:	68fb      	ldr	r3, [r7, #12]
 801d602:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d604:	2b20      	cmp	r3, #32
 801d606:	d000      	beq.n	801d60a <HAL_UART_Transmit+0x1a>
 801d608:	e08c      	b.n	801d724 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801d60a:	68bb      	ldr	r3, [r7, #8]
 801d60c:	2b00      	cmp	r3, #0
 801d60e:	d003      	beq.n	801d618 <HAL_UART_Transmit+0x28>
 801d610:	1dbb      	adds	r3, r7, #6
 801d612:	881b      	ldrh	r3, [r3, #0]
 801d614:	2b00      	cmp	r3, #0
 801d616:	d101      	bne.n	801d61c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801d618:	2301      	movs	r3, #1
 801d61a:	e084      	b.n	801d726 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d61c:	68fb      	ldr	r3, [r7, #12]
 801d61e:	689a      	ldr	r2, [r3, #8]
 801d620:	2380      	movs	r3, #128	@ 0x80
 801d622:	015b      	lsls	r3, r3, #5
 801d624:	429a      	cmp	r2, r3
 801d626:	d109      	bne.n	801d63c <HAL_UART_Transmit+0x4c>
 801d628:	68fb      	ldr	r3, [r7, #12]
 801d62a:	691b      	ldr	r3, [r3, #16]
 801d62c:	2b00      	cmp	r3, #0
 801d62e:	d105      	bne.n	801d63c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d630:	68bb      	ldr	r3, [r7, #8]
 801d632:	2201      	movs	r2, #1
 801d634:	4013      	ands	r3, r2
 801d636:	d001      	beq.n	801d63c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801d638:	2301      	movs	r3, #1
 801d63a:	e074      	b.n	801d726 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d63c:	68fb      	ldr	r3, [r7, #12]
 801d63e:	2284      	movs	r2, #132	@ 0x84
 801d640:	2100      	movs	r1, #0
 801d642:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d644:	68fb      	ldr	r3, [r7, #12]
 801d646:	2221      	movs	r2, #33	@ 0x21
 801d648:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801d64a:	f7f7 fa7b 	bl	8014b44 <HAL_GetTick>
 801d64e:	0003      	movs	r3, r0
 801d650:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	1dba      	adds	r2, r7, #6
 801d656:	2150      	movs	r1, #80	@ 0x50
 801d658:	8812      	ldrh	r2, [r2, #0]
 801d65a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d65c:	68fb      	ldr	r3, [r7, #12]
 801d65e:	1dba      	adds	r2, r7, #6
 801d660:	2152      	movs	r1, #82	@ 0x52
 801d662:	8812      	ldrh	r2, [r2, #0]
 801d664:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d666:	68fb      	ldr	r3, [r7, #12]
 801d668:	689a      	ldr	r2, [r3, #8]
 801d66a:	2380      	movs	r3, #128	@ 0x80
 801d66c:	015b      	lsls	r3, r3, #5
 801d66e:	429a      	cmp	r2, r3
 801d670:	d108      	bne.n	801d684 <HAL_UART_Transmit+0x94>
 801d672:	68fb      	ldr	r3, [r7, #12]
 801d674:	691b      	ldr	r3, [r3, #16]
 801d676:	2b00      	cmp	r3, #0
 801d678:	d104      	bne.n	801d684 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801d67a:	2300      	movs	r3, #0
 801d67c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801d67e:	68bb      	ldr	r3, [r7, #8]
 801d680:	61bb      	str	r3, [r7, #24]
 801d682:	e003      	b.n	801d68c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 801d684:	68bb      	ldr	r3, [r7, #8]
 801d686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801d688:	2300      	movs	r3, #0
 801d68a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801d68c:	e02f      	b.n	801d6ee <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801d68e:	697a      	ldr	r2, [r7, #20]
 801d690:	68f8      	ldr	r0, [r7, #12]
 801d692:	683b      	ldr	r3, [r7, #0]
 801d694:	9300      	str	r3, [sp, #0]
 801d696:	0013      	movs	r3, r2
 801d698:	2200      	movs	r2, #0
 801d69a:	2180      	movs	r1, #128	@ 0x80
 801d69c:	f001 f8fa 	bl	801e894 <UART_WaitOnFlagUntilTimeout>
 801d6a0:	1e03      	subs	r3, r0, #0
 801d6a2:	d004      	beq.n	801d6ae <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 801d6a4:	68fb      	ldr	r3, [r7, #12]
 801d6a6:	2220      	movs	r2, #32
 801d6a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801d6aa:	2303      	movs	r3, #3
 801d6ac:	e03b      	b.n	801d726 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801d6ae:	69fb      	ldr	r3, [r7, #28]
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	d10b      	bne.n	801d6cc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801d6b4:	69bb      	ldr	r3, [r7, #24]
 801d6b6:	881b      	ldrh	r3, [r3, #0]
 801d6b8:	001a      	movs	r2, r3
 801d6ba:	68fb      	ldr	r3, [r7, #12]
 801d6bc:	681b      	ldr	r3, [r3, #0]
 801d6be:	05d2      	lsls	r2, r2, #23
 801d6c0:	0dd2      	lsrs	r2, r2, #23
 801d6c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801d6c4:	69bb      	ldr	r3, [r7, #24]
 801d6c6:	3302      	adds	r3, #2
 801d6c8:	61bb      	str	r3, [r7, #24]
 801d6ca:	e007      	b.n	801d6dc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801d6cc:	69fb      	ldr	r3, [r7, #28]
 801d6ce:	781a      	ldrb	r2, [r3, #0]
 801d6d0:	68fb      	ldr	r3, [r7, #12]
 801d6d2:	681b      	ldr	r3, [r3, #0]
 801d6d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801d6d6:	69fb      	ldr	r3, [r7, #28]
 801d6d8:	3301      	adds	r3, #1
 801d6da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801d6dc:	68fb      	ldr	r3, [r7, #12]
 801d6de:	2252      	movs	r2, #82	@ 0x52
 801d6e0:	5a9b      	ldrh	r3, [r3, r2]
 801d6e2:	b29b      	uxth	r3, r3
 801d6e4:	3b01      	subs	r3, #1
 801d6e6:	b299      	uxth	r1, r3
 801d6e8:	68fb      	ldr	r3, [r7, #12]
 801d6ea:	2252      	movs	r2, #82	@ 0x52
 801d6ec:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801d6ee:	68fb      	ldr	r3, [r7, #12]
 801d6f0:	2252      	movs	r2, #82	@ 0x52
 801d6f2:	5a9b      	ldrh	r3, [r3, r2]
 801d6f4:	b29b      	uxth	r3, r3
 801d6f6:	2b00      	cmp	r3, #0
 801d6f8:	d1c9      	bne.n	801d68e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801d6fa:	697a      	ldr	r2, [r7, #20]
 801d6fc:	68f8      	ldr	r0, [r7, #12]
 801d6fe:	683b      	ldr	r3, [r7, #0]
 801d700:	9300      	str	r3, [sp, #0]
 801d702:	0013      	movs	r3, r2
 801d704:	2200      	movs	r2, #0
 801d706:	2140      	movs	r1, #64	@ 0x40
 801d708:	f001 f8c4 	bl	801e894 <UART_WaitOnFlagUntilTimeout>
 801d70c:	1e03      	subs	r3, r0, #0
 801d70e:	d004      	beq.n	801d71a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	2220      	movs	r2, #32
 801d714:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801d716:	2303      	movs	r3, #3
 801d718:	e005      	b.n	801d726 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801d71a:	68fb      	ldr	r3, [r7, #12]
 801d71c:	2220      	movs	r2, #32
 801d71e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801d720:	2300      	movs	r3, #0
 801d722:	e000      	b.n	801d726 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801d724:	2302      	movs	r3, #2
  }
}
 801d726:	0018      	movs	r0, r3
 801d728:	46bd      	mov	sp, r7
 801d72a:	b008      	add	sp, #32
 801d72c:	bd80      	pop	{r7, pc}
	...

0801d730 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d730:	b580      	push	{r7, lr}
 801d732:	b088      	sub	sp, #32
 801d734:	af00      	add	r7, sp, #0
 801d736:	60f8      	str	r0, [r7, #12]
 801d738:	60b9      	str	r1, [r7, #8]
 801d73a:	1dbb      	adds	r3, r7, #6
 801d73c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d73e:	68fb      	ldr	r3, [r7, #12]
 801d740:	2280      	movs	r2, #128	@ 0x80
 801d742:	589b      	ldr	r3, [r3, r2]
 801d744:	2b20      	cmp	r3, #32
 801d746:	d14a      	bne.n	801d7de <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d748:	68bb      	ldr	r3, [r7, #8]
 801d74a:	2b00      	cmp	r3, #0
 801d74c:	d003      	beq.n	801d756 <HAL_UART_Receive_IT+0x26>
 801d74e:	1dbb      	adds	r3, r7, #6
 801d750:	881b      	ldrh	r3, [r3, #0]
 801d752:	2b00      	cmp	r3, #0
 801d754:	d101      	bne.n	801d75a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801d756:	2301      	movs	r3, #1
 801d758:	e042      	b.n	801d7e0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d75a:	68fb      	ldr	r3, [r7, #12]
 801d75c:	689a      	ldr	r2, [r3, #8]
 801d75e:	2380      	movs	r3, #128	@ 0x80
 801d760:	015b      	lsls	r3, r3, #5
 801d762:	429a      	cmp	r2, r3
 801d764:	d109      	bne.n	801d77a <HAL_UART_Receive_IT+0x4a>
 801d766:	68fb      	ldr	r3, [r7, #12]
 801d768:	691b      	ldr	r3, [r3, #16]
 801d76a:	2b00      	cmp	r3, #0
 801d76c:	d105      	bne.n	801d77a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d76e:	68bb      	ldr	r3, [r7, #8]
 801d770:	2201      	movs	r2, #1
 801d772:	4013      	ands	r3, r2
 801d774:	d001      	beq.n	801d77a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801d776:	2301      	movs	r3, #1
 801d778:	e032      	b.n	801d7e0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d77a:	68fb      	ldr	r3, [r7, #12]
 801d77c:	2200      	movs	r2, #0
 801d77e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d780:	68fb      	ldr	r3, [r7, #12]
 801d782:	681b      	ldr	r3, [r3, #0]
 801d784:	4a18      	ldr	r2, [pc, #96]	@ (801d7e8 <HAL_UART_Receive_IT+0xb8>)
 801d786:	4293      	cmp	r3, r2
 801d788:	d020      	beq.n	801d7cc <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d78a:	68fb      	ldr	r3, [r7, #12]
 801d78c:	681b      	ldr	r3, [r3, #0]
 801d78e:	685a      	ldr	r2, [r3, #4]
 801d790:	2380      	movs	r3, #128	@ 0x80
 801d792:	041b      	lsls	r3, r3, #16
 801d794:	4013      	ands	r3, r2
 801d796:	d019      	beq.n	801d7cc <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d798:	f3ef 8310 	mrs	r3, PRIMASK
 801d79c:	613b      	str	r3, [r7, #16]
  return(result);
 801d79e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d7a0:	61fb      	str	r3, [r7, #28]
 801d7a2:	2301      	movs	r3, #1
 801d7a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7a6:	697b      	ldr	r3, [r7, #20]
 801d7a8:	f383 8810 	msr	PRIMASK, r3
}
 801d7ac:	46c0      	nop			@ (mov r8, r8)
 801d7ae:	68fb      	ldr	r3, [r7, #12]
 801d7b0:	681b      	ldr	r3, [r3, #0]
 801d7b2:	681a      	ldr	r2, [r3, #0]
 801d7b4:	68fb      	ldr	r3, [r7, #12]
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	2180      	movs	r1, #128	@ 0x80
 801d7ba:	04c9      	lsls	r1, r1, #19
 801d7bc:	430a      	orrs	r2, r1
 801d7be:	601a      	str	r2, [r3, #0]
 801d7c0:	69fb      	ldr	r3, [r7, #28]
 801d7c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7c4:	69bb      	ldr	r3, [r7, #24]
 801d7c6:	f383 8810 	msr	PRIMASK, r3
}
 801d7ca:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801d7cc:	1dbb      	adds	r3, r7, #6
 801d7ce:	881a      	ldrh	r2, [r3, #0]
 801d7d0:	68b9      	ldr	r1, [r7, #8]
 801d7d2:	68fb      	ldr	r3, [r7, #12]
 801d7d4:	0018      	movs	r0, r3
 801d7d6:	f001 f8c7 	bl	801e968 <UART_Start_Receive_IT>
 801d7da:	0003      	movs	r3, r0
 801d7dc:	e000      	b.n	801d7e0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d7de:	2302      	movs	r3, #2
  }
}
 801d7e0:	0018      	movs	r0, r3
 801d7e2:	46bd      	mov	sp, r7
 801d7e4:	b008      	add	sp, #32
 801d7e6:	bd80      	pop	{r7, pc}
 801d7e8:	40004800 	.word	0x40004800

0801d7ec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801d7ec:	b580      	push	{r7, lr}
 801d7ee:	b088      	sub	sp, #32
 801d7f0:	af00      	add	r7, sp, #0
 801d7f2:	60f8      	str	r0, [r7, #12]
 801d7f4:	60b9      	str	r1, [r7, #8]
 801d7f6:	1dbb      	adds	r3, r7, #6
 801d7f8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801d7fa:	68fb      	ldr	r3, [r7, #12]
 801d7fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d7fe:	2b20      	cmp	r3, #32
 801d800:	d000      	beq.n	801d804 <HAL_UART_Transmit_DMA+0x18>
 801d802:	e077      	b.n	801d8f4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801d804:	68bb      	ldr	r3, [r7, #8]
 801d806:	2b00      	cmp	r3, #0
 801d808:	d003      	beq.n	801d812 <HAL_UART_Transmit_DMA+0x26>
 801d80a:	1dbb      	adds	r3, r7, #6
 801d80c:	881b      	ldrh	r3, [r3, #0]
 801d80e:	2b00      	cmp	r3, #0
 801d810:	d101      	bne.n	801d816 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801d812:	2301      	movs	r3, #1
 801d814:	e06f      	b.n	801d8f6 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d816:	68fb      	ldr	r3, [r7, #12]
 801d818:	689a      	ldr	r2, [r3, #8]
 801d81a:	2380      	movs	r3, #128	@ 0x80
 801d81c:	015b      	lsls	r3, r3, #5
 801d81e:	429a      	cmp	r2, r3
 801d820:	d109      	bne.n	801d836 <HAL_UART_Transmit_DMA+0x4a>
 801d822:	68fb      	ldr	r3, [r7, #12]
 801d824:	691b      	ldr	r3, [r3, #16]
 801d826:	2b00      	cmp	r3, #0
 801d828:	d105      	bne.n	801d836 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d82a:	68bb      	ldr	r3, [r7, #8]
 801d82c:	2201      	movs	r2, #1
 801d82e:	4013      	ands	r3, r2
 801d830:	d001      	beq.n	801d836 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d832:	2301      	movs	r3, #1
 801d834:	e05f      	b.n	801d8f6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801d836:	68fb      	ldr	r3, [r7, #12]
 801d838:	68ba      	ldr	r2, [r7, #8]
 801d83a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 801d83c:	68fb      	ldr	r3, [r7, #12]
 801d83e:	1dba      	adds	r2, r7, #6
 801d840:	2150      	movs	r1, #80	@ 0x50
 801d842:	8812      	ldrh	r2, [r2, #0]
 801d844:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801d846:	68fb      	ldr	r3, [r7, #12]
 801d848:	1dba      	adds	r2, r7, #6
 801d84a:	2152      	movs	r1, #82	@ 0x52
 801d84c:	8812      	ldrh	r2, [r2, #0]
 801d84e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801d850:	68fb      	ldr	r3, [r7, #12]
 801d852:	2284      	movs	r2, #132	@ 0x84
 801d854:	2100      	movs	r1, #0
 801d856:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801d858:	68fb      	ldr	r3, [r7, #12]
 801d85a:	2221      	movs	r2, #33	@ 0x21
 801d85c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801d85e:	68fb      	ldr	r3, [r7, #12]
 801d860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d862:	2b00      	cmp	r3, #0
 801d864:	d027      	beq.n	801d8b6 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801d866:	68fb      	ldr	r3, [r7, #12]
 801d868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d86a:	4a25      	ldr	r2, [pc, #148]	@ (801d900 <HAL_UART_Transmit_DMA+0x114>)
 801d86c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801d86e:	68fb      	ldr	r3, [r7, #12]
 801d870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d872:	4a24      	ldr	r2, [pc, #144]	@ (801d904 <HAL_UART_Transmit_DMA+0x118>)
 801d874:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801d876:	68fb      	ldr	r3, [r7, #12]
 801d878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d87a:	4a23      	ldr	r2, [pc, #140]	@ (801d908 <HAL_UART_Transmit_DMA+0x11c>)
 801d87c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801d87e:	68fb      	ldr	r3, [r7, #12]
 801d880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d882:	2200      	movs	r2, #0
 801d884:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801d886:	68fb      	ldr	r3, [r7, #12]
 801d888:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801d88a:	68fb      	ldr	r3, [r7, #12]
 801d88c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d88e:	0019      	movs	r1, r3
 801d890:	68fb      	ldr	r3, [r7, #12]
 801d892:	681b      	ldr	r3, [r3, #0]
 801d894:	3328      	adds	r3, #40	@ 0x28
 801d896:	001a      	movs	r2, r3
 801d898:	1dbb      	adds	r3, r7, #6
 801d89a:	881b      	ldrh	r3, [r3, #0]
 801d89c:	f7f7 fea4 	bl	80155e8 <HAL_DMA_Start_IT>
 801d8a0:	1e03      	subs	r3, r0, #0
 801d8a2:	d008      	beq.n	801d8b6 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801d8a4:	68fb      	ldr	r3, [r7, #12]
 801d8a6:	2284      	movs	r2, #132	@ 0x84
 801d8a8:	2110      	movs	r1, #16
 801d8aa:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801d8ac:	68fb      	ldr	r3, [r7, #12]
 801d8ae:	2220      	movs	r2, #32
 801d8b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801d8b2:	2301      	movs	r3, #1
 801d8b4:	e01f      	b.n	801d8f6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801d8b6:	68fb      	ldr	r3, [r7, #12]
 801d8b8:	681b      	ldr	r3, [r3, #0]
 801d8ba:	2240      	movs	r2, #64	@ 0x40
 801d8bc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d8be:	f3ef 8310 	mrs	r3, PRIMASK
 801d8c2:	613b      	str	r3, [r7, #16]
  return(result);
 801d8c4:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801d8c6:	61fb      	str	r3, [r7, #28]
 801d8c8:	2301      	movs	r3, #1
 801d8ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8cc:	697b      	ldr	r3, [r7, #20]
 801d8ce:	f383 8810 	msr	PRIMASK, r3
}
 801d8d2:	46c0      	nop			@ (mov r8, r8)
 801d8d4:	68fb      	ldr	r3, [r7, #12]
 801d8d6:	681b      	ldr	r3, [r3, #0]
 801d8d8:	689a      	ldr	r2, [r3, #8]
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	2180      	movs	r1, #128	@ 0x80
 801d8e0:	430a      	orrs	r2, r1
 801d8e2:	609a      	str	r2, [r3, #8]
 801d8e4:	69fb      	ldr	r3, [r7, #28]
 801d8e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d8e8:	69bb      	ldr	r3, [r7, #24]
 801d8ea:	f383 8810 	msr	PRIMASK, r3
}
 801d8ee:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801d8f0:	2300      	movs	r3, #0
 801d8f2:	e000      	b.n	801d8f6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801d8f4:	2302      	movs	r3, #2
  }
}
 801d8f6:	0018      	movs	r0, r3
 801d8f8:	46bd      	mov	sp, r7
 801d8fa:	b008      	add	sp, #32
 801d8fc:	bd80      	pop	{r7, pc}
 801d8fe:	46c0      	nop			@ (mov r8, r8)
 801d900:	0801ed4d 	.word	0x0801ed4d
 801d904:	0801ede9 	.word	0x0801ede9
 801d908:	0801ef89 	.word	0x0801ef89

0801d90c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801d90c:	b580      	push	{r7, lr}
 801d90e:	b088      	sub	sp, #32
 801d910:	af00      	add	r7, sp, #0
 801d912:	60f8      	str	r0, [r7, #12]
 801d914:	60b9      	str	r1, [r7, #8]
 801d916:	1dbb      	adds	r3, r7, #6
 801d918:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	2280      	movs	r2, #128	@ 0x80
 801d91e:	589b      	ldr	r3, [r3, r2]
 801d920:	2b20      	cmp	r3, #32
 801d922:	d14a      	bne.n	801d9ba <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801d924:	68bb      	ldr	r3, [r7, #8]
 801d926:	2b00      	cmp	r3, #0
 801d928:	d003      	beq.n	801d932 <HAL_UART_Receive_DMA+0x26>
 801d92a:	1dbb      	adds	r3, r7, #6
 801d92c:	881b      	ldrh	r3, [r3, #0]
 801d92e:	2b00      	cmp	r3, #0
 801d930:	d101      	bne.n	801d936 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801d932:	2301      	movs	r3, #1
 801d934:	e042      	b.n	801d9bc <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	689a      	ldr	r2, [r3, #8]
 801d93a:	2380      	movs	r3, #128	@ 0x80
 801d93c:	015b      	lsls	r3, r3, #5
 801d93e:	429a      	cmp	r2, r3
 801d940:	d109      	bne.n	801d956 <HAL_UART_Receive_DMA+0x4a>
 801d942:	68fb      	ldr	r3, [r7, #12]
 801d944:	691b      	ldr	r3, [r3, #16]
 801d946:	2b00      	cmp	r3, #0
 801d948:	d105      	bne.n	801d956 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801d94a:	68bb      	ldr	r3, [r7, #8]
 801d94c:	2201      	movs	r2, #1
 801d94e:	4013      	ands	r3, r2
 801d950:	d001      	beq.n	801d956 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801d952:	2301      	movs	r3, #1
 801d954:	e032      	b.n	801d9bc <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801d956:	68fb      	ldr	r3, [r7, #12]
 801d958:	2200      	movs	r2, #0
 801d95a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801d95c:	68fb      	ldr	r3, [r7, #12]
 801d95e:	681b      	ldr	r3, [r3, #0]
 801d960:	4a18      	ldr	r2, [pc, #96]	@ (801d9c4 <HAL_UART_Receive_DMA+0xb8>)
 801d962:	4293      	cmp	r3, r2
 801d964:	d020      	beq.n	801d9a8 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801d966:	68fb      	ldr	r3, [r7, #12]
 801d968:	681b      	ldr	r3, [r3, #0]
 801d96a:	685a      	ldr	r2, [r3, #4]
 801d96c:	2380      	movs	r3, #128	@ 0x80
 801d96e:	041b      	lsls	r3, r3, #16
 801d970:	4013      	ands	r3, r2
 801d972:	d019      	beq.n	801d9a8 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d974:	f3ef 8310 	mrs	r3, PRIMASK
 801d978:	613b      	str	r3, [r7, #16]
  return(result);
 801d97a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801d97c:	61fb      	str	r3, [r7, #28]
 801d97e:	2301      	movs	r3, #1
 801d980:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d982:	697b      	ldr	r3, [r7, #20]
 801d984:	f383 8810 	msr	PRIMASK, r3
}
 801d988:	46c0      	nop			@ (mov r8, r8)
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	681b      	ldr	r3, [r3, #0]
 801d98e:	681a      	ldr	r2, [r3, #0]
 801d990:	68fb      	ldr	r3, [r7, #12]
 801d992:	681b      	ldr	r3, [r3, #0]
 801d994:	2180      	movs	r1, #128	@ 0x80
 801d996:	04c9      	lsls	r1, r1, #19
 801d998:	430a      	orrs	r2, r1
 801d99a:	601a      	str	r2, [r3, #0]
 801d99c:	69fb      	ldr	r3, [r7, #28]
 801d99e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d9a0:	69bb      	ldr	r3, [r7, #24]
 801d9a2:	f383 8810 	msr	PRIMASK, r3
}
 801d9a6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801d9a8:	1dbb      	adds	r3, r7, #6
 801d9aa:	881a      	ldrh	r2, [r3, #0]
 801d9ac:	68b9      	ldr	r1, [r7, #8]
 801d9ae:	68fb      	ldr	r3, [r7, #12]
 801d9b0:	0018      	movs	r0, r3
 801d9b2:	f001 f8a3 	bl	801eafc <UART_Start_Receive_DMA>
 801d9b6:	0003      	movs	r3, r0
 801d9b8:	e000      	b.n	801d9bc <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801d9ba:	2302      	movs	r3, #2
  }
}
 801d9bc:	0018      	movs	r0, r3
 801d9be:	46bd      	mov	sp, r7
 801d9c0:	b008      	add	sp, #32
 801d9c2:	bd80      	pop	{r7, pc}
 801d9c4:	40004800 	.word	0x40004800

0801d9c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801d9c8:	b590      	push	{r4, r7, lr}
 801d9ca:	b0ab      	sub	sp, #172	@ 0xac
 801d9cc:	af00      	add	r7, sp, #0
 801d9ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801d9d0:	687b      	ldr	r3, [r7, #4]
 801d9d2:	681b      	ldr	r3, [r3, #0]
 801d9d4:	69db      	ldr	r3, [r3, #28]
 801d9d6:	22a4      	movs	r2, #164	@ 0xa4
 801d9d8:	18b9      	adds	r1, r7, r2
 801d9da:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801d9dc:	687b      	ldr	r3, [r7, #4]
 801d9de:	681b      	ldr	r3, [r3, #0]
 801d9e0:	681b      	ldr	r3, [r3, #0]
 801d9e2:	20a0      	movs	r0, #160	@ 0xa0
 801d9e4:	1839      	adds	r1, r7, r0
 801d9e6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	681b      	ldr	r3, [r3, #0]
 801d9ec:	689b      	ldr	r3, [r3, #8]
 801d9ee:	219c      	movs	r1, #156	@ 0x9c
 801d9f0:	1879      	adds	r1, r7, r1
 801d9f2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801d9f4:	0011      	movs	r1, r2
 801d9f6:	18bb      	adds	r3, r7, r2
 801d9f8:	681b      	ldr	r3, [r3, #0]
 801d9fa:	4a9c      	ldr	r2, [pc, #624]	@ (801dc6c <HAL_UART_IRQHandler+0x2a4>)
 801d9fc:	4013      	ands	r3, r2
 801d9fe:	2298      	movs	r2, #152	@ 0x98
 801da00:	18bc      	adds	r4, r7, r2
 801da02:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801da04:	18bb      	adds	r3, r7, r2
 801da06:	681b      	ldr	r3, [r3, #0]
 801da08:	2b00      	cmp	r3, #0
 801da0a:	d114      	bne.n	801da36 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801da0c:	187b      	adds	r3, r7, r1
 801da0e:	681b      	ldr	r3, [r3, #0]
 801da10:	2220      	movs	r2, #32
 801da12:	4013      	ands	r3, r2
 801da14:	d00f      	beq.n	801da36 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801da16:	183b      	adds	r3, r7, r0
 801da18:	681b      	ldr	r3, [r3, #0]
 801da1a:	2220      	movs	r2, #32
 801da1c:	4013      	ands	r3, r2
 801da1e:	d00a      	beq.n	801da36 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801da24:	2b00      	cmp	r3, #0
 801da26:	d100      	bne.n	801da2a <HAL_UART_IRQHandler+0x62>
 801da28:	e2aa      	b.n	801df80 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801da2a:	687b      	ldr	r3, [r7, #4]
 801da2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801da2e:	687a      	ldr	r2, [r7, #4]
 801da30:	0010      	movs	r0, r2
 801da32:	4798      	blx	r3
      }
      return;
 801da34:	e2a4      	b.n	801df80 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801da36:	2398      	movs	r3, #152	@ 0x98
 801da38:	18fb      	adds	r3, r7, r3
 801da3a:	681b      	ldr	r3, [r3, #0]
 801da3c:	2b00      	cmp	r3, #0
 801da3e:	d100      	bne.n	801da42 <HAL_UART_IRQHandler+0x7a>
 801da40:	e11a      	b.n	801dc78 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801da42:	239c      	movs	r3, #156	@ 0x9c
 801da44:	18fb      	adds	r3, r7, r3
 801da46:	681b      	ldr	r3, [r3, #0]
 801da48:	2201      	movs	r2, #1
 801da4a:	4013      	ands	r3, r2
 801da4c:	d106      	bne.n	801da5c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801da4e:	23a0      	movs	r3, #160	@ 0xa0
 801da50:	18fb      	adds	r3, r7, r3
 801da52:	681b      	ldr	r3, [r3, #0]
 801da54:	4a86      	ldr	r2, [pc, #536]	@ (801dc70 <HAL_UART_IRQHandler+0x2a8>)
 801da56:	4013      	ands	r3, r2
 801da58:	d100      	bne.n	801da5c <HAL_UART_IRQHandler+0x94>
 801da5a:	e10d      	b.n	801dc78 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801da5c:	23a4      	movs	r3, #164	@ 0xa4
 801da5e:	18fb      	adds	r3, r7, r3
 801da60:	681b      	ldr	r3, [r3, #0]
 801da62:	2201      	movs	r2, #1
 801da64:	4013      	ands	r3, r2
 801da66:	d012      	beq.n	801da8e <HAL_UART_IRQHandler+0xc6>
 801da68:	23a0      	movs	r3, #160	@ 0xa0
 801da6a:	18fb      	adds	r3, r7, r3
 801da6c:	681a      	ldr	r2, [r3, #0]
 801da6e:	2380      	movs	r3, #128	@ 0x80
 801da70:	005b      	lsls	r3, r3, #1
 801da72:	4013      	ands	r3, r2
 801da74:	d00b      	beq.n	801da8e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	681b      	ldr	r3, [r3, #0]
 801da7a:	2201      	movs	r2, #1
 801da7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	2284      	movs	r2, #132	@ 0x84
 801da82:	589b      	ldr	r3, [r3, r2]
 801da84:	2201      	movs	r2, #1
 801da86:	431a      	orrs	r2, r3
 801da88:	687b      	ldr	r3, [r7, #4]
 801da8a:	2184      	movs	r1, #132	@ 0x84
 801da8c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801da8e:	23a4      	movs	r3, #164	@ 0xa4
 801da90:	18fb      	adds	r3, r7, r3
 801da92:	681b      	ldr	r3, [r3, #0]
 801da94:	2202      	movs	r2, #2
 801da96:	4013      	ands	r3, r2
 801da98:	d011      	beq.n	801dabe <HAL_UART_IRQHandler+0xf6>
 801da9a:	239c      	movs	r3, #156	@ 0x9c
 801da9c:	18fb      	adds	r3, r7, r3
 801da9e:	681b      	ldr	r3, [r3, #0]
 801daa0:	2201      	movs	r2, #1
 801daa2:	4013      	ands	r3, r2
 801daa4:	d00b      	beq.n	801dabe <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801daa6:	687b      	ldr	r3, [r7, #4]
 801daa8:	681b      	ldr	r3, [r3, #0]
 801daaa:	2202      	movs	r2, #2
 801daac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801daae:	687b      	ldr	r3, [r7, #4]
 801dab0:	2284      	movs	r2, #132	@ 0x84
 801dab2:	589b      	ldr	r3, [r3, r2]
 801dab4:	2204      	movs	r2, #4
 801dab6:	431a      	orrs	r2, r3
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	2184      	movs	r1, #132	@ 0x84
 801dabc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801dabe:	23a4      	movs	r3, #164	@ 0xa4
 801dac0:	18fb      	adds	r3, r7, r3
 801dac2:	681b      	ldr	r3, [r3, #0]
 801dac4:	2204      	movs	r2, #4
 801dac6:	4013      	ands	r3, r2
 801dac8:	d011      	beq.n	801daee <HAL_UART_IRQHandler+0x126>
 801daca:	239c      	movs	r3, #156	@ 0x9c
 801dacc:	18fb      	adds	r3, r7, r3
 801dace:	681b      	ldr	r3, [r3, #0]
 801dad0:	2201      	movs	r2, #1
 801dad2:	4013      	ands	r3, r2
 801dad4:	d00b      	beq.n	801daee <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801dad6:	687b      	ldr	r3, [r7, #4]
 801dad8:	681b      	ldr	r3, [r3, #0]
 801dada:	2204      	movs	r2, #4
 801dadc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	2284      	movs	r2, #132	@ 0x84
 801dae2:	589b      	ldr	r3, [r3, r2]
 801dae4:	2202      	movs	r2, #2
 801dae6:	431a      	orrs	r2, r3
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	2184      	movs	r1, #132	@ 0x84
 801daec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801daee:	23a4      	movs	r3, #164	@ 0xa4
 801daf0:	18fb      	adds	r3, r7, r3
 801daf2:	681b      	ldr	r3, [r3, #0]
 801daf4:	2208      	movs	r2, #8
 801daf6:	4013      	ands	r3, r2
 801daf8:	d017      	beq.n	801db2a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801dafa:	23a0      	movs	r3, #160	@ 0xa0
 801dafc:	18fb      	adds	r3, r7, r3
 801dafe:	681b      	ldr	r3, [r3, #0]
 801db00:	2220      	movs	r2, #32
 801db02:	4013      	ands	r3, r2
 801db04:	d105      	bne.n	801db12 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801db06:	239c      	movs	r3, #156	@ 0x9c
 801db08:	18fb      	adds	r3, r7, r3
 801db0a:	681b      	ldr	r3, [r3, #0]
 801db0c:	2201      	movs	r2, #1
 801db0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801db10:	d00b      	beq.n	801db2a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801db12:	687b      	ldr	r3, [r7, #4]
 801db14:	681b      	ldr	r3, [r3, #0]
 801db16:	2208      	movs	r2, #8
 801db18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801db1a:	687b      	ldr	r3, [r7, #4]
 801db1c:	2284      	movs	r2, #132	@ 0x84
 801db1e:	589b      	ldr	r3, [r3, r2]
 801db20:	2208      	movs	r2, #8
 801db22:	431a      	orrs	r2, r3
 801db24:	687b      	ldr	r3, [r7, #4]
 801db26:	2184      	movs	r1, #132	@ 0x84
 801db28:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801db2a:	23a4      	movs	r3, #164	@ 0xa4
 801db2c:	18fb      	adds	r3, r7, r3
 801db2e:	681a      	ldr	r2, [r3, #0]
 801db30:	2380      	movs	r3, #128	@ 0x80
 801db32:	011b      	lsls	r3, r3, #4
 801db34:	4013      	ands	r3, r2
 801db36:	d013      	beq.n	801db60 <HAL_UART_IRQHandler+0x198>
 801db38:	23a0      	movs	r3, #160	@ 0xa0
 801db3a:	18fb      	adds	r3, r7, r3
 801db3c:	681a      	ldr	r2, [r3, #0]
 801db3e:	2380      	movs	r3, #128	@ 0x80
 801db40:	04db      	lsls	r3, r3, #19
 801db42:	4013      	ands	r3, r2
 801db44:	d00c      	beq.n	801db60 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	681b      	ldr	r3, [r3, #0]
 801db4a:	2280      	movs	r2, #128	@ 0x80
 801db4c:	0112      	lsls	r2, r2, #4
 801db4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	2284      	movs	r2, #132	@ 0x84
 801db54:	589b      	ldr	r3, [r3, r2]
 801db56:	2220      	movs	r2, #32
 801db58:	431a      	orrs	r2, r3
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	2184      	movs	r1, #132	@ 0x84
 801db5e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	2284      	movs	r2, #132	@ 0x84
 801db64:	589b      	ldr	r3, [r3, r2]
 801db66:	2b00      	cmp	r3, #0
 801db68:	d100      	bne.n	801db6c <HAL_UART_IRQHandler+0x1a4>
 801db6a:	e20b      	b.n	801df84 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801db6c:	23a4      	movs	r3, #164	@ 0xa4
 801db6e:	18fb      	adds	r3, r7, r3
 801db70:	681b      	ldr	r3, [r3, #0]
 801db72:	2220      	movs	r2, #32
 801db74:	4013      	ands	r3, r2
 801db76:	d00e      	beq.n	801db96 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801db78:	23a0      	movs	r3, #160	@ 0xa0
 801db7a:	18fb      	adds	r3, r7, r3
 801db7c:	681b      	ldr	r3, [r3, #0]
 801db7e:	2220      	movs	r2, #32
 801db80:	4013      	ands	r3, r2
 801db82:	d008      	beq.n	801db96 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 801db84:	687b      	ldr	r3, [r7, #4]
 801db86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801db88:	2b00      	cmp	r3, #0
 801db8a:	d004      	beq.n	801db96 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801db90:	687a      	ldr	r2, [r7, #4]
 801db92:	0010      	movs	r0, r2
 801db94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	2284      	movs	r2, #132	@ 0x84
 801db9a:	589b      	ldr	r3, [r3, r2]
 801db9c:	2194      	movs	r1, #148	@ 0x94
 801db9e:	187a      	adds	r2, r7, r1
 801dba0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	681b      	ldr	r3, [r3, #0]
 801dba6:	689b      	ldr	r3, [r3, #8]
 801dba8:	2240      	movs	r2, #64	@ 0x40
 801dbaa:	4013      	ands	r3, r2
 801dbac:	2b40      	cmp	r3, #64	@ 0x40
 801dbae:	d004      	beq.n	801dbba <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801dbb0:	187b      	adds	r3, r7, r1
 801dbb2:	681b      	ldr	r3, [r3, #0]
 801dbb4:	2228      	movs	r2, #40	@ 0x28
 801dbb6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801dbb8:	d04b      	beq.n	801dc52 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801dbba:	687b      	ldr	r3, [r7, #4]
 801dbbc:	0018      	movs	r0, r3
 801dbbe:	f001 f861 	bl	801ec84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dbc2:	687b      	ldr	r3, [r7, #4]
 801dbc4:	681b      	ldr	r3, [r3, #0]
 801dbc6:	689b      	ldr	r3, [r3, #8]
 801dbc8:	2240      	movs	r2, #64	@ 0x40
 801dbca:	4013      	ands	r3, r2
 801dbcc:	2b40      	cmp	r3, #64	@ 0x40
 801dbce:	d139      	bne.n	801dc44 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbd0:	f3ef 8310 	mrs	r3, PRIMASK
 801dbd4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801dbd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801dbd8:	2090      	movs	r0, #144	@ 0x90
 801dbda:	183a      	adds	r2, r7, r0
 801dbdc:	6013      	str	r3, [r2, #0]
 801dbde:	2301      	movs	r3, #1
 801dbe0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dbe2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801dbe4:	f383 8810 	msr	PRIMASK, r3
}
 801dbe8:	46c0      	nop			@ (mov r8, r8)
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	681b      	ldr	r3, [r3, #0]
 801dbee:	689a      	ldr	r2, [r3, #8]
 801dbf0:	687b      	ldr	r3, [r7, #4]
 801dbf2:	681b      	ldr	r3, [r3, #0]
 801dbf4:	2140      	movs	r1, #64	@ 0x40
 801dbf6:	438a      	bics	r2, r1
 801dbf8:	609a      	str	r2, [r3, #8]
 801dbfa:	183b      	adds	r3, r7, r0
 801dbfc:	681b      	ldr	r3, [r3, #0]
 801dbfe:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801dc02:	f383 8810 	msr	PRIMASK, r3
}
 801dc06:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc0c:	2b00      	cmp	r3, #0
 801dc0e:	d012      	beq.n	801dc36 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc14:	4a17      	ldr	r2, [pc, #92]	@ (801dc74 <HAL_UART_IRQHandler+0x2ac>)
 801dc16:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801dc18:	687b      	ldr	r3, [r7, #4]
 801dc1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc1c:	0018      	movs	r0, r3
 801dc1e:	f7f7 fd89 	bl	8015734 <HAL_DMA_Abort_IT>
 801dc22:	1e03      	subs	r3, r0, #0
 801dc24:	d020      	beq.n	801dc68 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801dc2c:	687b      	ldr	r3, [r7, #4]
 801dc2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dc30:	0018      	movs	r0, r3
 801dc32:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dc34:	e018      	b.n	801dc68 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	2298      	movs	r2, #152	@ 0x98
 801dc3a:	589b      	ldr	r3, [r3, r2]
 801dc3c:	687a      	ldr	r2, [r7, #4]
 801dc3e:	0010      	movs	r0, r2
 801dc40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dc42:	e011      	b.n	801dc68 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	2298      	movs	r2, #152	@ 0x98
 801dc48:	589b      	ldr	r3, [r3, r2]
 801dc4a:	687a      	ldr	r2, [r7, #4]
 801dc4c:	0010      	movs	r0, r2
 801dc4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dc50:	e00a      	b.n	801dc68 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801dc52:	687b      	ldr	r3, [r7, #4]
 801dc54:	2298      	movs	r2, #152	@ 0x98
 801dc56:	589b      	ldr	r3, [r3, r2]
 801dc58:	687a      	ldr	r2, [r7, #4]
 801dc5a:	0010      	movs	r0, r2
 801dc5c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	2284      	movs	r2, #132	@ 0x84
 801dc62:	2100      	movs	r1, #0
 801dc64:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801dc66:	e18d      	b.n	801df84 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dc68:	46c0      	nop			@ (mov r8, r8)
    return;
 801dc6a:	e18b      	b.n	801df84 <HAL_UART_IRQHandler+0x5bc>
 801dc6c:	0000080f 	.word	0x0000080f
 801dc70:	04000120 	.word	0x04000120
 801dc74:	0801f011 	.word	0x0801f011

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dc7c:	2b01      	cmp	r3, #1
 801dc7e:	d000      	beq.n	801dc82 <HAL_UART_IRQHandler+0x2ba>
 801dc80:	e13d      	b.n	801defe <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801dc82:	23a4      	movs	r3, #164	@ 0xa4
 801dc84:	18fb      	adds	r3, r7, r3
 801dc86:	681b      	ldr	r3, [r3, #0]
 801dc88:	2210      	movs	r2, #16
 801dc8a:	4013      	ands	r3, r2
 801dc8c:	d100      	bne.n	801dc90 <HAL_UART_IRQHandler+0x2c8>
 801dc8e:	e136      	b.n	801defe <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801dc90:	23a0      	movs	r3, #160	@ 0xa0
 801dc92:	18fb      	adds	r3, r7, r3
 801dc94:	681b      	ldr	r3, [r3, #0]
 801dc96:	2210      	movs	r2, #16
 801dc98:	4013      	ands	r3, r2
 801dc9a:	d100      	bne.n	801dc9e <HAL_UART_IRQHandler+0x2d6>
 801dc9c:	e12f      	b.n	801defe <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801dc9e:	687b      	ldr	r3, [r7, #4]
 801dca0:	681b      	ldr	r3, [r3, #0]
 801dca2:	2210      	movs	r2, #16
 801dca4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	689b      	ldr	r3, [r3, #8]
 801dcac:	2240      	movs	r2, #64	@ 0x40
 801dcae:	4013      	ands	r3, r2
 801dcb0:	2b40      	cmp	r3, #64	@ 0x40
 801dcb2:	d000      	beq.n	801dcb6 <HAL_UART_IRQHandler+0x2ee>
 801dcb4:	e0a2      	b.n	801ddfc <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dcba:	681b      	ldr	r3, [r3, #0]
 801dcbc:	685a      	ldr	r2, [r3, #4]
 801dcbe:	217e      	movs	r1, #126	@ 0x7e
 801dcc0:	187b      	adds	r3, r7, r1
 801dcc2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801dcc4:	187b      	adds	r3, r7, r1
 801dcc6:	881b      	ldrh	r3, [r3, #0]
 801dcc8:	2b00      	cmp	r3, #0
 801dcca:	d100      	bne.n	801dcce <HAL_UART_IRQHandler+0x306>
 801dccc:	e15c      	b.n	801df88 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801dcce:	687b      	ldr	r3, [r7, #4]
 801dcd0:	2258      	movs	r2, #88	@ 0x58
 801dcd2:	5a9b      	ldrh	r3, [r3, r2]
 801dcd4:	187a      	adds	r2, r7, r1
 801dcd6:	8812      	ldrh	r2, [r2, #0]
 801dcd8:	429a      	cmp	r2, r3
 801dcda:	d300      	bcc.n	801dcde <HAL_UART_IRQHandler+0x316>
 801dcdc:	e154      	b.n	801df88 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801dcde:	687b      	ldr	r3, [r7, #4]
 801dce0:	187a      	adds	r2, r7, r1
 801dce2:	215a      	movs	r1, #90	@ 0x5a
 801dce4:	8812      	ldrh	r2, [r2, #0]
 801dce6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801dcec:	681b      	ldr	r3, [r3, #0]
 801dcee:	681b      	ldr	r3, [r3, #0]
 801dcf0:	2220      	movs	r2, #32
 801dcf2:	4013      	ands	r3, r2
 801dcf4:	d16f      	bne.n	801ddd6 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dcf6:	f3ef 8310 	mrs	r3, PRIMASK
 801dcfa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801dcfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801dcfe:	67bb      	str	r3, [r7, #120]	@ 0x78
 801dd00:	2301      	movs	r3, #1
 801dd02:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801dd06:	f383 8810 	msr	PRIMASK, r3
}
 801dd0a:	46c0      	nop			@ (mov r8, r8)
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	681b      	ldr	r3, [r3, #0]
 801dd10:	681a      	ldr	r2, [r3, #0]
 801dd12:	687b      	ldr	r3, [r7, #4]
 801dd14:	681b      	ldr	r3, [r3, #0]
 801dd16:	49a0      	ldr	r1, [pc, #640]	@ (801df98 <HAL_UART_IRQHandler+0x5d0>)
 801dd18:	400a      	ands	r2, r1
 801dd1a:	601a      	str	r2, [r3, #0]
 801dd1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801dd1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dd22:	f383 8810 	msr	PRIMASK, r3
}
 801dd26:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd28:	f3ef 8310 	mrs	r3, PRIMASK
 801dd2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801dd2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801dd30:	677b      	str	r3, [r7, #116]	@ 0x74
 801dd32:	2301      	movs	r3, #1
 801dd34:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801dd38:	f383 8810 	msr	PRIMASK, r3
}
 801dd3c:	46c0      	nop			@ (mov r8, r8)
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	681b      	ldr	r3, [r3, #0]
 801dd42:	689a      	ldr	r2, [r3, #8]
 801dd44:	687b      	ldr	r3, [r7, #4]
 801dd46:	681b      	ldr	r3, [r3, #0]
 801dd48:	2101      	movs	r1, #1
 801dd4a:	438a      	bics	r2, r1
 801dd4c:	609a      	str	r2, [r3, #8]
 801dd4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801dd50:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801dd54:	f383 8810 	msr	PRIMASK, r3
}
 801dd58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd5a:	f3ef 8310 	mrs	r3, PRIMASK
 801dd5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801dd60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801dd62:	673b      	str	r3, [r7, #112]	@ 0x70
 801dd64:	2301      	movs	r3, #1
 801dd66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801dd6a:	f383 8810 	msr	PRIMASK, r3
}
 801dd6e:	46c0      	nop			@ (mov r8, r8)
 801dd70:	687b      	ldr	r3, [r7, #4]
 801dd72:	681b      	ldr	r3, [r3, #0]
 801dd74:	689a      	ldr	r2, [r3, #8]
 801dd76:	687b      	ldr	r3, [r7, #4]
 801dd78:	681b      	ldr	r3, [r3, #0]
 801dd7a:	2140      	movs	r1, #64	@ 0x40
 801dd7c:	438a      	bics	r2, r1
 801dd7e:	609a      	str	r2, [r3, #8]
 801dd80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801dd82:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dd84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801dd86:	f383 8810 	msr	PRIMASK, r3
}
 801dd8a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	2280      	movs	r2, #128	@ 0x80
 801dd90:	2120      	movs	r1, #32
 801dd92:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	2200      	movs	r2, #0
 801dd98:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd9a:	f3ef 8310 	mrs	r3, PRIMASK
 801dd9e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 801dda0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801dda2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801dda4:	2301      	movs	r3, #1
 801dda6:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dda8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801ddaa:	f383 8810 	msr	PRIMASK, r3
}
 801ddae:	46c0      	nop			@ (mov r8, r8)
 801ddb0:	687b      	ldr	r3, [r7, #4]
 801ddb2:	681b      	ldr	r3, [r3, #0]
 801ddb4:	681a      	ldr	r2, [r3, #0]
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	681b      	ldr	r3, [r3, #0]
 801ddba:	2110      	movs	r1, #16
 801ddbc:	438a      	bics	r2, r1
 801ddbe:	601a      	str	r2, [r3, #0]
 801ddc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ddc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ddc6:	f383 8810 	msr	PRIMASK, r3
}
 801ddca:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ddd0:	0018      	movs	r0, r3
 801ddd2:	f7f7 fc6f 	bl	80156b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	2202      	movs	r2, #2
 801ddda:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	22ac      	movs	r2, #172	@ 0xac
 801dde0:	589b      	ldr	r3, [r3, r2]
 801dde2:	687a      	ldr	r2, [r7, #4]
 801dde4:	2158      	movs	r1, #88	@ 0x58
 801dde6:	5a51      	ldrh	r1, [r2, r1]
 801dde8:	687a      	ldr	r2, [r7, #4]
 801ddea:	205a      	movs	r0, #90	@ 0x5a
 801ddec:	5a12      	ldrh	r2, [r2, r0]
 801ddee:	b292      	uxth	r2, r2
 801ddf0:	1a8a      	subs	r2, r1, r2
 801ddf2:	b291      	uxth	r1, r2
 801ddf4:	687a      	ldr	r2, [r7, #4]
 801ddf6:	0010      	movs	r0, r2
 801ddf8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801ddfa:	e0c5      	b.n	801df88 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801ddfc:	687b      	ldr	r3, [r7, #4]
 801ddfe:	2258      	movs	r2, #88	@ 0x58
 801de00:	5a99      	ldrh	r1, [r3, r2]
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	225a      	movs	r2, #90	@ 0x5a
 801de06:	5a9b      	ldrh	r3, [r3, r2]
 801de08:	b29a      	uxth	r2, r3
 801de0a:	208e      	movs	r0, #142	@ 0x8e
 801de0c:	183b      	adds	r3, r7, r0
 801de0e:	1a8a      	subs	r2, r1, r2
 801de10:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801de12:	687b      	ldr	r3, [r7, #4]
 801de14:	225a      	movs	r2, #90	@ 0x5a
 801de16:	5a9b      	ldrh	r3, [r3, r2]
 801de18:	b29b      	uxth	r3, r3
 801de1a:	2b00      	cmp	r3, #0
 801de1c:	d100      	bne.n	801de20 <HAL_UART_IRQHandler+0x458>
 801de1e:	e0b5      	b.n	801df8c <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801de20:	183b      	adds	r3, r7, r0
 801de22:	881b      	ldrh	r3, [r3, #0]
 801de24:	2b00      	cmp	r3, #0
 801de26:	d100      	bne.n	801de2a <HAL_UART_IRQHandler+0x462>
 801de28:	e0b0      	b.n	801df8c <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de2a:	f3ef 8310 	mrs	r3, PRIMASK
 801de2e:	60fb      	str	r3, [r7, #12]
  return(result);
 801de30:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801de32:	2488      	movs	r4, #136	@ 0x88
 801de34:	193a      	adds	r2, r7, r4
 801de36:	6013      	str	r3, [r2, #0]
 801de38:	2301      	movs	r3, #1
 801de3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de3c:	693b      	ldr	r3, [r7, #16]
 801de3e:	f383 8810 	msr	PRIMASK, r3
}
 801de42:	46c0      	nop			@ (mov r8, r8)
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	681b      	ldr	r3, [r3, #0]
 801de48:	681a      	ldr	r2, [r3, #0]
 801de4a:	687b      	ldr	r3, [r7, #4]
 801de4c:	681b      	ldr	r3, [r3, #0]
 801de4e:	4953      	ldr	r1, [pc, #332]	@ (801df9c <HAL_UART_IRQHandler+0x5d4>)
 801de50:	400a      	ands	r2, r1
 801de52:	601a      	str	r2, [r3, #0]
 801de54:	193b      	adds	r3, r7, r4
 801de56:	681b      	ldr	r3, [r3, #0]
 801de58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de5a:	697b      	ldr	r3, [r7, #20]
 801de5c:	f383 8810 	msr	PRIMASK, r3
}
 801de60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de62:	f3ef 8310 	mrs	r3, PRIMASK
 801de66:	61bb      	str	r3, [r7, #24]
  return(result);
 801de68:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801de6a:	2484      	movs	r4, #132	@ 0x84
 801de6c:	193a      	adds	r2, r7, r4
 801de6e:	6013      	str	r3, [r2, #0]
 801de70:	2301      	movs	r3, #1
 801de72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de74:	69fb      	ldr	r3, [r7, #28]
 801de76:	f383 8810 	msr	PRIMASK, r3
}
 801de7a:	46c0      	nop			@ (mov r8, r8)
 801de7c:	687b      	ldr	r3, [r7, #4]
 801de7e:	681b      	ldr	r3, [r3, #0]
 801de80:	689a      	ldr	r2, [r3, #8]
 801de82:	687b      	ldr	r3, [r7, #4]
 801de84:	681b      	ldr	r3, [r3, #0]
 801de86:	2101      	movs	r1, #1
 801de88:	438a      	bics	r2, r1
 801de8a:	609a      	str	r2, [r3, #8]
 801de8c:	193b      	adds	r3, r7, r4
 801de8e:	681b      	ldr	r3, [r3, #0]
 801de90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de92:	6a3b      	ldr	r3, [r7, #32]
 801de94:	f383 8810 	msr	PRIMASK, r3
}
 801de98:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801de9a:	687b      	ldr	r3, [r7, #4]
 801de9c:	2280      	movs	r2, #128	@ 0x80
 801de9e:	2120      	movs	r1, #32
 801dea0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801dea2:	687b      	ldr	r3, [r7, #4]
 801dea4:	2200      	movs	r2, #0
 801dea6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	2200      	movs	r2, #0
 801deac:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801deae:	f3ef 8310 	mrs	r3, PRIMASK
 801deb2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801deb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801deb6:	2480      	movs	r4, #128	@ 0x80
 801deb8:	193a      	adds	r2, r7, r4
 801deba:	6013      	str	r3, [r2, #0]
 801debc:	2301      	movs	r3, #1
 801debe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dec2:	f383 8810 	msr	PRIMASK, r3
}
 801dec6:	46c0      	nop			@ (mov r8, r8)
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	681b      	ldr	r3, [r3, #0]
 801decc:	681a      	ldr	r2, [r3, #0]
 801dece:	687b      	ldr	r3, [r7, #4]
 801ded0:	681b      	ldr	r3, [r3, #0]
 801ded2:	2110      	movs	r1, #16
 801ded4:	438a      	bics	r2, r1
 801ded6:	601a      	str	r2, [r3, #0]
 801ded8:	193b      	adds	r3, r7, r4
 801deda:	681b      	ldr	r3, [r3, #0]
 801dedc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dee0:	f383 8810 	msr	PRIMASK, r3
}
 801dee4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801dee6:	687b      	ldr	r3, [r7, #4]
 801dee8:	2202      	movs	r2, #2
 801deea:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801deec:	687b      	ldr	r3, [r7, #4]
 801deee:	22ac      	movs	r2, #172	@ 0xac
 801def0:	589b      	ldr	r3, [r3, r2]
 801def2:	183a      	adds	r2, r7, r0
 801def4:	8811      	ldrh	r1, [r2, #0]
 801def6:	687a      	ldr	r2, [r7, #4]
 801def8:	0010      	movs	r0, r2
 801defa:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801defc:	e046      	b.n	801df8c <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801defe:	23a4      	movs	r3, #164	@ 0xa4
 801df00:	18fb      	adds	r3, r7, r3
 801df02:	681a      	ldr	r2, [r3, #0]
 801df04:	2380      	movs	r3, #128	@ 0x80
 801df06:	035b      	lsls	r3, r3, #13
 801df08:	4013      	ands	r3, r2
 801df0a:	d012      	beq.n	801df32 <HAL_UART_IRQHandler+0x56a>
 801df0c:	239c      	movs	r3, #156	@ 0x9c
 801df0e:	18fb      	adds	r3, r7, r3
 801df10:	681a      	ldr	r2, [r3, #0]
 801df12:	2380      	movs	r3, #128	@ 0x80
 801df14:	03db      	lsls	r3, r3, #15
 801df16:	4013      	ands	r3, r2
 801df18:	d00b      	beq.n	801df32 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801df1a:	687b      	ldr	r3, [r7, #4]
 801df1c:	681b      	ldr	r3, [r3, #0]
 801df1e:	2280      	movs	r2, #128	@ 0x80
 801df20:	0352      	lsls	r2, r2, #13
 801df22:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801df24:	687b      	ldr	r3, [r7, #4]
 801df26:	22a8      	movs	r2, #168	@ 0xa8
 801df28:	589b      	ldr	r3, [r3, r2]
 801df2a:	687a      	ldr	r2, [r7, #4]
 801df2c:	0010      	movs	r0, r2
 801df2e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801df30:	e02f      	b.n	801df92 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801df32:	23a4      	movs	r3, #164	@ 0xa4
 801df34:	18fb      	adds	r3, r7, r3
 801df36:	681b      	ldr	r3, [r3, #0]
 801df38:	2280      	movs	r2, #128	@ 0x80
 801df3a:	4013      	ands	r3, r2
 801df3c:	d00f      	beq.n	801df5e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801df3e:	23a0      	movs	r3, #160	@ 0xa0
 801df40:	18fb      	adds	r3, r7, r3
 801df42:	681b      	ldr	r3, [r3, #0]
 801df44:	2280      	movs	r2, #128	@ 0x80
 801df46:	4013      	ands	r3, r2
 801df48:	d009      	beq.n	801df5e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801df4e:	2b00      	cmp	r3, #0
 801df50:	d01e      	beq.n	801df90 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801df52:	687b      	ldr	r3, [r7, #4]
 801df54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801df56:	687a      	ldr	r2, [r7, #4]
 801df58:	0010      	movs	r0, r2
 801df5a:	4798      	blx	r3
    }
    return;
 801df5c:	e018      	b.n	801df90 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801df5e:	23a4      	movs	r3, #164	@ 0xa4
 801df60:	18fb      	adds	r3, r7, r3
 801df62:	681b      	ldr	r3, [r3, #0]
 801df64:	2240      	movs	r2, #64	@ 0x40
 801df66:	4013      	ands	r3, r2
 801df68:	d013      	beq.n	801df92 <HAL_UART_IRQHandler+0x5ca>
 801df6a:	23a0      	movs	r3, #160	@ 0xa0
 801df6c:	18fb      	adds	r3, r7, r3
 801df6e:	681b      	ldr	r3, [r3, #0]
 801df70:	2240      	movs	r2, #64	@ 0x40
 801df72:	4013      	ands	r3, r2
 801df74:	d00d      	beq.n	801df92 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801df76:	687b      	ldr	r3, [r7, #4]
 801df78:	0018      	movs	r0, r3
 801df7a:	f001 f862 	bl	801f042 <UART_EndTransmit_IT>
    return;
 801df7e:	e008      	b.n	801df92 <HAL_UART_IRQHandler+0x5ca>
      return;
 801df80:	46c0      	nop			@ (mov r8, r8)
 801df82:	e006      	b.n	801df92 <HAL_UART_IRQHandler+0x5ca>
    return;
 801df84:	46c0      	nop			@ (mov r8, r8)
 801df86:	e004      	b.n	801df92 <HAL_UART_IRQHandler+0x5ca>
      return;
 801df88:	46c0      	nop			@ (mov r8, r8)
 801df8a:	e002      	b.n	801df92 <HAL_UART_IRQHandler+0x5ca>
      return;
 801df8c:	46c0      	nop			@ (mov r8, r8)
 801df8e:	e000      	b.n	801df92 <HAL_UART_IRQHandler+0x5ca>
    return;
 801df90:	46c0      	nop			@ (mov r8, r8)
  }

}
 801df92:	46bd      	mov	sp, r7
 801df94:	b02b      	add	sp, #172	@ 0xac
 801df96:	bd90      	pop	{r4, r7, pc}
 801df98:	fffffeff 	.word	0xfffffeff
 801df9c:	fffffedf 	.word	0xfffffedf

0801dfa0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801dfa0:	b580      	push	{r7, lr}
 801dfa2:	b082      	sub	sp, #8
 801dfa4:	af00      	add	r7, sp, #0
 801dfa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801dfa8:	46c0      	nop			@ (mov r8, r8)
 801dfaa:	46bd      	mov	sp, r7
 801dfac:	b002      	add	sp, #8
 801dfae:	bd80      	pop	{r7, pc}

0801dfb0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801dfb0:	b580      	push	{r7, lr}
 801dfb2:	b082      	sub	sp, #8
 801dfb4:	af00      	add	r7, sp, #0
 801dfb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801dfb8:	46c0      	nop			@ (mov r8, r8)
 801dfba:	46bd      	mov	sp, r7
 801dfbc:	b002      	add	sp, #8
 801dfbe:	bd80      	pop	{r7, pc}

0801dfc0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801dfc0:	b580      	push	{r7, lr}
 801dfc2:	b082      	sub	sp, #8
 801dfc4:	af00      	add	r7, sp, #0
 801dfc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801dfc8:	46c0      	nop			@ (mov r8, r8)
 801dfca:	46bd      	mov	sp, r7
 801dfcc:	b002      	add	sp, #8
 801dfce:	bd80      	pop	{r7, pc}

0801dfd0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801dfd0:	b580      	push	{r7, lr}
 801dfd2:	b082      	sub	sp, #8
 801dfd4:	af00      	add	r7, sp, #0
 801dfd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801dfd8:	46c0      	nop			@ (mov r8, r8)
 801dfda:	46bd      	mov	sp, r7
 801dfdc:	b002      	add	sp, #8
 801dfde:	bd80      	pop	{r7, pc}

0801dfe0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801dfe0:	b580      	push	{r7, lr}
 801dfe2:	b082      	sub	sp, #8
 801dfe4:	af00      	add	r7, sp, #0
 801dfe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801dfe8:	46c0      	nop			@ (mov r8, r8)
 801dfea:	46bd      	mov	sp, r7
 801dfec:	b002      	add	sp, #8
 801dfee:	bd80      	pop	{r7, pc}

0801dff0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801dff0:	b580      	push	{r7, lr}
 801dff2:	b082      	sub	sp, #8
 801dff4:	af00      	add	r7, sp, #0
 801dff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801dff8:	46c0      	nop			@ (mov r8, r8)
 801dffa:	46bd      	mov	sp, r7
 801dffc:	b002      	add	sp, #8
 801dffe:	bd80      	pop	{r7, pc}

0801e000 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801e000:	b580      	push	{r7, lr}
 801e002:	b082      	sub	sp, #8
 801e004:	af00      	add	r7, sp, #0
 801e006:	6078      	str	r0, [r7, #4]
 801e008:	000a      	movs	r2, r1
 801e00a:	1cbb      	adds	r3, r7, #2
 801e00c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801e00e:	46c0      	nop			@ (mov r8, r8)
 801e010:	46bd      	mov	sp, r7
 801e012:	b002      	add	sp, #8
 801e014:	bd80      	pop	{r7, pc}
	...

0801e018 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801e018:	b580      	push	{r7, lr}
 801e01a:	b082      	sub	sp, #8
 801e01c:	af00      	add	r7, sp, #0
 801e01e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	2188      	movs	r1, #136	@ 0x88
 801e024:	4a14      	ldr	r2, [pc, #80]	@ (801e078 <UART_InitCallbacksToDefault+0x60>)
 801e026:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	218c      	movs	r1, #140	@ 0x8c
 801e02c:	4a13      	ldr	r2, [pc, #76]	@ (801e07c <UART_InitCallbacksToDefault+0x64>)
 801e02e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	2190      	movs	r1, #144	@ 0x90
 801e034:	4a12      	ldr	r2, [pc, #72]	@ (801e080 <UART_InitCallbacksToDefault+0x68>)
 801e036:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	2194      	movs	r1, #148	@ 0x94
 801e03c:	4a11      	ldr	r2, [pc, #68]	@ (801e084 <UART_InitCallbacksToDefault+0x6c>)
 801e03e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	2198      	movs	r1, #152	@ 0x98
 801e044:	4a10      	ldr	r2, [pc, #64]	@ (801e088 <UART_InitCallbacksToDefault+0x70>)
 801e046:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	219c      	movs	r1, #156	@ 0x9c
 801e04c:	4a0f      	ldr	r2, [pc, #60]	@ (801e08c <UART_InitCallbacksToDefault+0x74>)
 801e04e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	21a0      	movs	r1, #160	@ 0xa0
 801e054:	4a0e      	ldr	r2, [pc, #56]	@ (801e090 <UART_InitCallbacksToDefault+0x78>)
 801e056:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	21a4      	movs	r1, #164	@ 0xa4
 801e05c:	4a0d      	ldr	r2, [pc, #52]	@ (801e094 <UART_InitCallbacksToDefault+0x7c>)
 801e05e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	21a8      	movs	r1, #168	@ 0xa8
 801e064:	4a0c      	ldr	r2, [pc, #48]	@ (801e098 <UART_InitCallbacksToDefault+0x80>)
 801e066:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801e068:	687b      	ldr	r3, [r7, #4]
 801e06a:	21ac      	movs	r1, #172	@ 0xac
 801e06c:	4a0b      	ldr	r2, [pc, #44]	@ (801e09c <UART_InitCallbacksToDefault+0x84>)
 801e06e:	505a      	str	r2, [r3, r1]

}
 801e070:	46c0      	nop			@ (mov r8, r8)
 801e072:	46bd      	mov	sp, r7
 801e074:	b002      	add	sp, #8
 801e076:	bd80      	pop	{r7, pc}
 801e078:	0801dfb1 	.word	0x0801dfb1
 801e07c:	0801dfa1 	.word	0x0801dfa1
 801e080:	0801dfc1 	.word	0x0801dfc1
 801e084:	0800d559 	.word	0x0800d559
 801e088:	080050fd 	.word	0x080050fd
 801e08c:	0801dfd1 	.word	0x0801dfd1
 801e090:	0801dfe1 	.word	0x0801dfe1
 801e094:	0801dff1 	.word	0x0801dff1
 801e098:	0801f435 	.word	0x0801f435
 801e09c:	0801e001 	.word	0x0801e001

0801e0a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801e0a0:	b5b0      	push	{r4, r5, r7, lr}
 801e0a2:	b08e      	sub	sp, #56	@ 0x38
 801e0a4:	af00      	add	r7, sp, #0
 801e0a6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801e0a8:	231a      	movs	r3, #26
 801e0aa:	2218      	movs	r2, #24
 801e0ac:	189b      	adds	r3, r3, r2
 801e0ae:	19db      	adds	r3, r3, r7
 801e0b0:	2200      	movs	r2, #0
 801e0b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801e0b4:	69fb      	ldr	r3, [r7, #28]
 801e0b6:	689a      	ldr	r2, [r3, #8]
 801e0b8:	69fb      	ldr	r3, [r7, #28]
 801e0ba:	691b      	ldr	r3, [r3, #16]
 801e0bc:	431a      	orrs	r2, r3
 801e0be:	69fb      	ldr	r3, [r7, #28]
 801e0c0:	695b      	ldr	r3, [r3, #20]
 801e0c2:	431a      	orrs	r2, r3
 801e0c4:	69fb      	ldr	r3, [r7, #28]
 801e0c6:	69db      	ldr	r3, [r3, #28]
 801e0c8:	4313      	orrs	r3, r2
 801e0ca:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801e0cc:	69fb      	ldr	r3, [r7, #28]
 801e0ce:	681b      	ldr	r3, [r3, #0]
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	4ac3      	ldr	r2, [pc, #780]	@ (801e3e0 <UART_SetConfig+0x340>)
 801e0d4:	4013      	ands	r3, r2
 801e0d6:	0019      	movs	r1, r3
 801e0d8:	69fb      	ldr	r3, [r7, #28]
 801e0da:	681b      	ldr	r3, [r3, #0]
 801e0dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e0de:	430a      	orrs	r2, r1
 801e0e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801e0e2:	69fb      	ldr	r3, [r7, #28]
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	685b      	ldr	r3, [r3, #4]
 801e0e8:	4abe      	ldr	r2, [pc, #760]	@ (801e3e4 <UART_SetConfig+0x344>)
 801e0ea:	4013      	ands	r3, r2
 801e0ec:	0019      	movs	r1, r3
 801e0ee:	69fb      	ldr	r3, [r7, #28]
 801e0f0:	68da      	ldr	r2, [r3, #12]
 801e0f2:	69fb      	ldr	r3, [r7, #28]
 801e0f4:	681b      	ldr	r3, [r3, #0]
 801e0f6:	430a      	orrs	r2, r1
 801e0f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801e0fa:	69fb      	ldr	r3, [r7, #28]
 801e0fc:	699b      	ldr	r3, [r3, #24]
 801e0fe:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801e100:	69fb      	ldr	r3, [r7, #28]
 801e102:	681b      	ldr	r3, [r3, #0]
 801e104:	4ab8      	ldr	r2, [pc, #736]	@ (801e3e8 <UART_SetConfig+0x348>)
 801e106:	4293      	cmp	r3, r2
 801e108:	d004      	beq.n	801e114 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801e10a:	69fb      	ldr	r3, [r7, #28]
 801e10c:	6a1b      	ldr	r3, [r3, #32]
 801e10e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e110:	4313      	orrs	r3, r2
 801e112:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801e114:	69fb      	ldr	r3, [r7, #28]
 801e116:	681b      	ldr	r3, [r3, #0]
 801e118:	689b      	ldr	r3, [r3, #8]
 801e11a:	4ab4      	ldr	r2, [pc, #720]	@ (801e3ec <UART_SetConfig+0x34c>)
 801e11c:	4013      	ands	r3, r2
 801e11e:	0019      	movs	r1, r3
 801e120:	69fb      	ldr	r3, [r7, #28]
 801e122:	681b      	ldr	r3, [r3, #0]
 801e124:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801e126:	430a      	orrs	r2, r1
 801e128:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801e12a:	69fb      	ldr	r3, [r7, #28]
 801e12c:	681b      	ldr	r3, [r3, #0]
 801e12e:	4ab0      	ldr	r2, [pc, #704]	@ (801e3f0 <UART_SetConfig+0x350>)
 801e130:	4293      	cmp	r3, r2
 801e132:	d131      	bne.n	801e198 <UART_SetConfig+0xf8>
 801e134:	4baf      	ldr	r3, [pc, #700]	@ (801e3f4 <UART_SetConfig+0x354>)
 801e136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e138:	2203      	movs	r2, #3
 801e13a:	4013      	ands	r3, r2
 801e13c:	2b03      	cmp	r3, #3
 801e13e:	d01d      	beq.n	801e17c <UART_SetConfig+0xdc>
 801e140:	d823      	bhi.n	801e18a <UART_SetConfig+0xea>
 801e142:	2b02      	cmp	r3, #2
 801e144:	d00c      	beq.n	801e160 <UART_SetConfig+0xc0>
 801e146:	d820      	bhi.n	801e18a <UART_SetConfig+0xea>
 801e148:	2b00      	cmp	r3, #0
 801e14a:	d002      	beq.n	801e152 <UART_SetConfig+0xb2>
 801e14c:	2b01      	cmp	r3, #1
 801e14e:	d00e      	beq.n	801e16e <UART_SetConfig+0xce>
 801e150:	e01b      	b.n	801e18a <UART_SetConfig+0xea>
 801e152:	231b      	movs	r3, #27
 801e154:	2218      	movs	r2, #24
 801e156:	189b      	adds	r3, r3, r2
 801e158:	19db      	adds	r3, r3, r7
 801e15a:	2201      	movs	r2, #1
 801e15c:	701a      	strb	r2, [r3, #0]
 801e15e:	e0b4      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e160:	231b      	movs	r3, #27
 801e162:	2218      	movs	r2, #24
 801e164:	189b      	adds	r3, r3, r2
 801e166:	19db      	adds	r3, r3, r7
 801e168:	2202      	movs	r2, #2
 801e16a:	701a      	strb	r2, [r3, #0]
 801e16c:	e0ad      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e16e:	231b      	movs	r3, #27
 801e170:	2218      	movs	r2, #24
 801e172:	189b      	adds	r3, r3, r2
 801e174:	19db      	adds	r3, r3, r7
 801e176:	2204      	movs	r2, #4
 801e178:	701a      	strb	r2, [r3, #0]
 801e17a:	e0a6      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e17c:	231b      	movs	r3, #27
 801e17e:	2218      	movs	r2, #24
 801e180:	189b      	adds	r3, r3, r2
 801e182:	19db      	adds	r3, r3, r7
 801e184:	2208      	movs	r2, #8
 801e186:	701a      	strb	r2, [r3, #0]
 801e188:	e09f      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e18a:	231b      	movs	r3, #27
 801e18c:	2218      	movs	r2, #24
 801e18e:	189b      	adds	r3, r3, r2
 801e190:	19db      	adds	r3, r3, r7
 801e192:	2210      	movs	r2, #16
 801e194:	701a      	strb	r2, [r3, #0]
 801e196:	e098      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e198:	69fb      	ldr	r3, [r7, #28]
 801e19a:	681b      	ldr	r3, [r3, #0]
 801e19c:	4a96      	ldr	r2, [pc, #600]	@ (801e3f8 <UART_SetConfig+0x358>)
 801e19e:	4293      	cmp	r3, r2
 801e1a0:	d131      	bne.n	801e206 <UART_SetConfig+0x166>
 801e1a2:	4b94      	ldr	r3, [pc, #592]	@ (801e3f4 <UART_SetConfig+0x354>)
 801e1a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e1a6:	220c      	movs	r2, #12
 801e1a8:	4013      	ands	r3, r2
 801e1aa:	2b0c      	cmp	r3, #12
 801e1ac:	d01d      	beq.n	801e1ea <UART_SetConfig+0x14a>
 801e1ae:	d823      	bhi.n	801e1f8 <UART_SetConfig+0x158>
 801e1b0:	2b08      	cmp	r3, #8
 801e1b2:	d00c      	beq.n	801e1ce <UART_SetConfig+0x12e>
 801e1b4:	d820      	bhi.n	801e1f8 <UART_SetConfig+0x158>
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	d002      	beq.n	801e1c0 <UART_SetConfig+0x120>
 801e1ba:	2b04      	cmp	r3, #4
 801e1bc:	d00e      	beq.n	801e1dc <UART_SetConfig+0x13c>
 801e1be:	e01b      	b.n	801e1f8 <UART_SetConfig+0x158>
 801e1c0:	231b      	movs	r3, #27
 801e1c2:	2218      	movs	r2, #24
 801e1c4:	189b      	adds	r3, r3, r2
 801e1c6:	19db      	adds	r3, r3, r7
 801e1c8:	2200      	movs	r2, #0
 801e1ca:	701a      	strb	r2, [r3, #0]
 801e1cc:	e07d      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e1ce:	231b      	movs	r3, #27
 801e1d0:	2218      	movs	r2, #24
 801e1d2:	189b      	adds	r3, r3, r2
 801e1d4:	19db      	adds	r3, r3, r7
 801e1d6:	2202      	movs	r2, #2
 801e1d8:	701a      	strb	r2, [r3, #0]
 801e1da:	e076      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e1dc:	231b      	movs	r3, #27
 801e1de:	2218      	movs	r2, #24
 801e1e0:	189b      	adds	r3, r3, r2
 801e1e2:	19db      	adds	r3, r3, r7
 801e1e4:	2204      	movs	r2, #4
 801e1e6:	701a      	strb	r2, [r3, #0]
 801e1e8:	e06f      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e1ea:	231b      	movs	r3, #27
 801e1ec:	2218      	movs	r2, #24
 801e1ee:	189b      	adds	r3, r3, r2
 801e1f0:	19db      	adds	r3, r3, r7
 801e1f2:	2208      	movs	r2, #8
 801e1f4:	701a      	strb	r2, [r3, #0]
 801e1f6:	e068      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e1f8:	231b      	movs	r3, #27
 801e1fa:	2218      	movs	r2, #24
 801e1fc:	189b      	adds	r3, r3, r2
 801e1fe:	19db      	adds	r3, r3, r7
 801e200:	2210      	movs	r2, #16
 801e202:	701a      	strb	r2, [r3, #0]
 801e204:	e061      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e206:	69fb      	ldr	r3, [r7, #28]
 801e208:	681b      	ldr	r3, [r3, #0]
 801e20a:	4a7c      	ldr	r2, [pc, #496]	@ (801e3fc <UART_SetConfig+0x35c>)
 801e20c:	4293      	cmp	r3, r2
 801e20e:	d106      	bne.n	801e21e <UART_SetConfig+0x17e>
 801e210:	231b      	movs	r3, #27
 801e212:	2218      	movs	r2, #24
 801e214:	189b      	adds	r3, r3, r2
 801e216:	19db      	adds	r3, r3, r7
 801e218:	2200      	movs	r2, #0
 801e21a:	701a      	strb	r2, [r3, #0]
 801e21c:	e055      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e21e:	69fb      	ldr	r3, [r7, #28]
 801e220:	681b      	ldr	r3, [r3, #0]
 801e222:	4a77      	ldr	r2, [pc, #476]	@ (801e400 <UART_SetConfig+0x360>)
 801e224:	4293      	cmp	r3, r2
 801e226:	d106      	bne.n	801e236 <UART_SetConfig+0x196>
 801e228:	231b      	movs	r3, #27
 801e22a:	2218      	movs	r2, #24
 801e22c:	189b      	adds	r3, r3, r2
 801e22e:	19db      	adds	r3, r3, r7
 801e230:	2200      	movs	r2, #0
 801e232:	701a      	strb	r2, [r3, #0]
 801e234:	e049      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e236:	69fb      	ldr	r3, [r7, #28]
 801e238:	681b      	ldr	r3, [r3, #0]
 801e23a:	4a6b      	ldr	r2, [pc, #428]	@ (801e3e8 <UART_SetConfig+0x348>)
 801e23c:	4293      	cmp	r3, r2
 801e23e:	d13e      	bne.n	801e2be <UART_SetConfig+0x21e>
 801e240:	4b6c      	ldr	r3, [pc, #432]	@ (801e3f4 <UART_SetConfig+0x354>)
 801e242:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801e244:	23c0      	movs	r3, #192	@ 0xc0
 801e246:	011b      	lsls	r3, r3, #4
 801e248:	4013      	ands	r3, r2
 801e24a:	22c0      	movs	r2, #192	@ 0xc0
 801e24c:	0112      	lsls	r2, r2, #4
 801e24e:	4293      	cmp	r3, r2
 801e250:	d027      	beq.n	801e2a2 <UART_SetConfig+0x202>
 801e252:	22c0      	movs	r2, #192	@ 0xc0
 801e254:	0112      	lsls	r2, r2, #4
 801e256:	4293      	cmp	r3, r2
 801e258:	d82a      	bhi.n	801e2b0 <UART_SetConfig+0x210>
 801e25a:	2280      	movs	r2, #128	@ 0x80
 801e25c:	0112      	lsls	r2, r2, #4
 801e25e:	4293      	cmp	r3, r2
 801e260:	d011      	beq.n	801e286 <UART_SetConfig+0x1e6>
 801e262:	2280      	movs	r2, #128	@ 0x80
 801e264:	0112      	lsls	r2, r2, #4
 801e266:	4293      	cmp	r3, r2
 801e268:	d822      	bhi.n	801e2b0 <UART_SetConfig+0x210>
 801e26a:	2b00      	cmp	r3, #0
 801e26c:	d004      	beq.n	801e278 <UART_SetConfig+0x1d8>
 801e26e:	2280      	movs	r2, #128	@ 0x80
 801e270:	00d2      	lsls	r2, r2, #3
 801e272:	4293      	cmp	r3, r2
 801e274:	d00e      	beq.n	801e294 <UART_SetConfig+0x1f4>
 801e276:	e01b      	b.n	801e2b0 <UART_SetConfig+0x210>
 801e278:	231b      	movs	r3, #27
 801e27a:	2218      	movs	r2, #24
 801e27c:	189b      	adds	r3, r3, r2
 801e27e:	19db      	adds	r3, r3, r7
 801e280:	2200      	movs	r2, #0
 801e282:	701a      	strb	r2, [r3, #0]
 801e284:	e021      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e286:	231b      	movs	r3, #27
 801e288:	2218      	movs	r2, #24
 801e28a:	189b      	adds	r3, r3, r2
 801e28c:	19db      	adds	r3, r3, r7
 801e28e:	2202      	movs	r2, #2
 801e290:	701a      	strb	r2, [r3, #0]
 801e292:	e01a      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e294:	231b      	movs	r3, #27
 801e296:	2218      	movs	r2, #24
 801e298:	189b      	adds	r3, r3, r2
 801e29a:	19db      	adds	r3, r3, r7
 801e29c:	2204      	movs	r2, #4
 801e29e:	701a      	strb	r2, [r3, #0]
 801e2a0:	e013      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e2a2:	231b      	movs	r3, #27
 801e2a4:	2218      	movs	r2, #24
 801e2a6:	189b      	adds	r3, r3, r2
 801e2a8:	19db      	adds	r3, r3, r7
 801e2aa:	2208      	movs	r2, #8
 801e2ac:	701a      	strb	r2, [r3, #0]
 801e2ae:	e00c      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e2b0:	231b      	movs	r3, #27
 801e2b2:	2218      	movs	r2, #24
 801e2b4:	189b      	adds	r3, r3, r2
 801e2b6:	19db      	adds	r3, r3, r7
 801e2b8:	2210      	movs	r2, #16
 801e2ba:	701a      	strb	r2, [r3, #0]
 801e2bc:	e005      	b.n	801e2ca <UART_SetConfig+0x22a>
 801e2be:	231b      	movs	r3, #27
 801e2c0:	2218      	movs	r2, #24
 801e2c2:	189b      	adds	r3, r3, r2
 801e2c4:	19db      	adds	r3, r3, r7
 801e2c6:	2210      	movs	r2, #16
 801e2c8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801e2ca:	69fb      	ldr	r3, [r7, #28]
 801e2cc:	681b      	ldr	r3, [r3, #0]
 801e2ce:	4a46      	ldr	r2, [pc, #280]	@ (801e3e8 <UART_SetConfig+0x348>)
 801e2d0:	4293      	cmp	r3, r2
 801e2d2:	d000      	beq.n	801e2d6 <UART_SetConfig+0x236>
 801e2d4:	e09a      	b.n	801e40c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801e2d6:	231b      	movs	r3, #27
 801e2d8:	2218      	movs	r2, #24
 801e2da:	189b      	adds	r3, r3, r2
 801e2dc:	19db      	adds	r3, r3, r7
 801e2de:	781b      	ldrb	r3, [r3, #0]
 801e2e0:	2b08      	cmp	r3, #8
 801e2e2:	d01d      	beq.n	801e320 <UART_SetConfig+0x280>
 801e2e4:	dc20      	bgt.n	801e328 <UART_SetConfig+0x288>
 801e2e6:	2b04      	cmp	r3, #4
 801e2e8:	d015      	beq.n	801e316 <UART_SetConfig+0x276>
 801e2ea:	dc1d      	bgt.n	801e328 <UART_SetConfig+0x288>
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	d002      	beq.n	801e2f6 <UART_SetConfig+0x256>
 801e2f0:	2b02      	cmp	r3, #2
 801e2f2:	d005      	beq.n	801e300 <UART_SetConfig+0x260>
 801e2f4:	e018      	b.n	801e328 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e2f6:	f7fd fe2d 	bl	801bf54 <HAL_RCC_GetPCLK1Freq>
 801e2fa:	0003      	movs	r3, r0
 801e2fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e2fe:	e01c      	b.n	801e33a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e300:	4b3c      	ldr	r3, [pc, #240]	@ (801e3f4 <UART_SetConfig+0x354>)
 801e302:	681b      	ldr	r3, [r3, #0]
 801e304:	2210      	movs	r2, #16
 801e306:	4013      	ands	r3, r2
 801e308:	d002      	beq.n	801e310 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e30a:	4b3e      	ldr	r3, [pc, #248]	@ (801e404 <UART_SetConfig+0x364>)
 801e30c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e30e:	e014      	b.n	801e33a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 801e310:	4b3d      	ldr	r3, [pc, #244]	@ (801e408 <UART_SetConfig+0x368>)
 801e312:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e314:	e011      	b.n	801e33a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e316:	f7fd fd6d 	bl	801bdf4 <HAL_RCC_GetSysClockFreq>
 801e31a:	0003      	movs	r3, r0
 801e31c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e31e:	e00c      	b.n	801e33a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e320:	2380      	movs	r3, #128	@ 0x80
 801e322:	021b      	lsls	r3, r3, #8
 801e324:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e326:	e008      	b.n	801e33a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801e328:	2300      	movs	r3, #0
 801e32a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e32c:	231a      	movs	r3, #26
 801e32e:	2218      	movs	r2, #24
 801e330:	189b      	adds	r3, r3, r2
 801e332:	19db      	adds	r3, r3, r7
 801e334:	2201      	movs	r2, #1
 801e336:	701a      	strb	r2, [r3, #0]
        break;
 801e338:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801e33a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e33c:	2b00      	cmp	r3, #0
 801e33e:	d100      	bne.n	801e342 <UART_SetConfig+0x2a2>
 801e340:	e133      	b.n	801e5aa <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e342:	69fb      	ldr	r3, [r7, #28]
 801e344:	685a      	ldr	r2, [r3, #4]
 801e346:	0013      	movs	r3, r2
 801e348:	005b      	lsls	r3, r3, #1
 801e34a:	189b      	adds	r3, r3, r2
 801e34c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e34e:	429a      	cmp	r2, r3
 801e350:	d305      	bcc.n	801e35e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 801e352:	69fb      	ldr	r3, [r7, #28]
 801e354:	685b      	ldr	r3, [r3, #4]
 801e356:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801e358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e35a:	429a      	cmp	r2, r3
 801e35c:	d906      	bls.n	801e36c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 801e35e:	231a      	movs	r3, #26
 801e360:	2218      	movs	r2, #24
 801e362:	189b      	adds	r3, r3, r2
 801e364:	19db      	adds	r3, r3, r7
 801e366:	2201      	movs	r2, #1
 801e368:	701a      	strb	r2, [r3, #0]
 801e36a:	e11e      	b.n	801e5aa <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 801e36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e36e:	613b      	str	r3, [r7, #16]
 801e370:	2300      	movs	r3, #0
 801e372:	617b      	str	r3, [r7, #20]
 801e374:	6939      	ldr	r1, [r7, #16]
 801e376:	697a      	ldr	r2, [r7, #20]
 801e378:	000b      	movs	r3, r1
 801e37a:	0e1b      	lsrs	r3, r3, #24
 801e37c:	0010      	movs	r0, r2
 801e37e:	0205      	lsls	r5, r0, #8
 801e380:	431d      	orrs	r5, r3
 801e382:	000b      	movs	r3, r1
 801e384:	021c      	lsls	r4, r3, #8
 801e386:	69fb      	ldr	r3, [r7, #28]
 801e388:	685b      	ldr	r3, [r3, #4]
 801e38a:	085b      	lsrs	r3, r3, #1
 801e38c:	60bb      	str	r3, [r7, #8]
 801e38e:	2300      	movs	r3, #0
 801e390:	60fb      	str	r3, [r7, #12]
 801e392:	68b8      	ldr	r0, [r7, #8]
 801e394:	68f9      	ldr	r1, [r7, #12]
 801e396:	1900      	adds	r0, r0, r4
 801e398:	4169      	adcs	r1, r5
 801e39a:	69fb      	ldr	r3, [r7, #28]
 801e39c:	685b      	ldr	r3, [r3, #4]
 801e39e:	603b      	str	r3, [r7, #0]
 801e3a0:	2300      	movs	r3, #0
 801e3a2:	607b      	str	r3, [r7, #4]
 801e3a4:	683a      	ldr	r2, [r7, #0]
 801e3a6:	687b      	ldr	r3, [r7, #4]
 801e3a8:	f7e2 f8ea 	bl	8000580 <__aeabi_uldivmod>
 801e3ac:	0002      	movs	r2, r0
 801e3ae:	000b      	movs	r3, r1
 801e3b0:	0013      	movs	r3, r2
 801e3b2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801e3b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e3b6:	23c0      	movs	r3, #192	@ 0xc0
 801e3b8:	009b      	lsls	r3, r3, #2
 801e3ba:	429a      	cmp	r2, r3
 801e3bc:	d309      	bcc.n	801e3d2 <UART_SetConfig+0x332>
 801e3be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e3c0:	2380      	movs	r3, #128	@ 0x80
 801e3c2:	035b      	lsls	r3, r3, #13
 801e3c4:	429a      	cmp	r2, r3
 801e3c6:	d204      	bcs.n	801e3d2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801e3c8:	69fb      	ldr	r3, [r7, #28]
 801e3ca:	681b      	ldr	r3, [r3, #0]
 801e3cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e3ce:	60da      	str	r2, [r3, #12]
 801e3d0:	e0eb      	b.n	801e5aa <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 801e3d2:	231a      	movs	r3, #26
 801e3d4:	2218      	movs	r2, #24
 801e3d6:	189b      	adds	r3, r3, r2
 801e3d8:	19db      	adds	r3, r3, r7
 801e3da:	2201      	movs	r2, #1
 801e3dc:	701a      	strb	r2, [r3, #0]
 801e3de:	e0e4      	b.n	801e5aa <UART_SetConfig+0x50a>
 801e3e0:	efff69f3 	.word	0xefff69f3
 801e3e4:	ffffcfff 	.word	0xffffcfff
 801e3e8:	40004800 	.word	0x40004800
 801e3ec:	fffff4ff 	.word	0xfffff4ff
 801e3f0:	40013800 	.word	0x40013800
 801e3f4:	40021000 	.word	0x40021000
 801e3f8:	40004400 	.word	0x40004400
 801e3fc:	40004c00 	.word	0x40004c00
 801e400:	40005000 	.word	0x40005000
 801e404:	003d0900 	.word	0x003d0900
 801e408:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e40c:	69fb      	ldr	r3, [r7, #28]
 801e40e:	69da      	ldr	r2, [r3, #28]
 801e410:	2380      	movs	r3, #128	@ 0x80
 801e412:	021b      	lsls	r3, r3, #8
 801e414:	429a      	cmp	r2, r3
 801e416:	d000      	beq.n	801e41a <UART_SetConfig+0x37a>
 801e418:	e070      	b.n	801e4fc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801e41a:	231b      	movs	r3, #27
 801e41c:	2218      	movs	r2, #24
 801e41e:	189b      	adds	r3, r3, r2
 801e420:	19db      	adds	r3, r3, r7
 801e422:	781b      	ldrb	r3, [r3, #0]
 801e424:	2b08      	cmp	r3, #8
 801e426:	d822      	bhi.n	801e46e <UART_SetConfig+0x3ce>
 801e428:	009a      	lsls	r2, r3, #2
 801e42a:	4b67      	ldr	r3, [pc, #412]	@ (801e5c8 <UART_SetConfig+0x528>)
 801e42c:	18d3      	adds	r3, r2, r3
 801e42e:	681b      	ldr	r3, [r3, #0]
 801e430:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e432:	f7fd fd8f 	bl	801bf54 <HAL_RCC_GetPCLK1Freq>
 801e436:	0003      	movs	r3, r0
 801e438:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e43a:	e021      	b.n	801e480 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e43c:	f7fd fda0 	bl	801bf80 <HAL_RCC_GetPCLK2Freq>
 801e440:	0003      	movs	r3, r0
 801e442:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e444:	e01c      	b.n	801e480 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e446:	4b61      	ldr	r3, [pc, #388]	@ (801e5cc <UART_SetConfig+0x52c>)
 801e448:	681b      	ldr	r3, [r3, #0]
 801e44a:	2210      	movs	r2, #16
 801e44c:	4013      	ands	r3, r2
 801e44e:	d002      	beq.n	801e456 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e450:	4b5f      	ldr	r3, [pc, #380]	@ (801e5d0 <UART_SetConfig+0x530>)
 801e452:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e454:	e014      	b.n	801e480 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801e456:	4b5f      	ldr	r3, [pc, #380]	@ (801e5d4 <UART_SetConfig+0x534>)
 801e458:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e45a:	e011      	b.n	801e480 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e45c:	f7fd fcca 	bl	801bdf4 <HAL_RCC_GetSysClockFreq>
 801e460:	0003      	movs	r3, r0
 801e462:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e464:	e00c      	b.n	801e480 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e466:	2380      	movs	r3, #128	@ 0x80
 801e468:	021b      	lsls	r3, r3, #8
 801e46a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e46c:	e008      	b.n	801e480 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 801e46e:	2300      	movs	r3, #0
 801e470:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e472:	231a      	movs	r3, #26
 801e474:	2218      	movs	r2, #24
 801e476:	189b      	adds	r3, r3, r2
 801e478:	19db      	adds	r3, r3, r7
 801e47a:	2201      	movs	r2, #1
 801e47c:	701a      	strb	r2, [r3, #0]
        break;
 801e47e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e482:	2b00      	cmp	r3, #0
 801e484:	d100      	bne.n	801e488 <UART_SetConfig+0x3e8>
 801e486:	e090      	b.n	801e5aa <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801e488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e48a:	005a      	lsls	r2, r3, #1
 801e48c:	69fb      	ldr	r3, [r7, #28]
 801e48e:	685b      	ldr	r3, [r3, #4]
 801e490:	085b      	lsrs	r3, r3, #1
 801e492:	18d2      	adds	r2, r2, r3
 801e494:	69fb      	ldr	r3, [r7, #28]
 801e496:	685b      	ldr	r3, [r3, #4]
 801e498:	0019      	movs	r1, r3
 801e49a:	0010      	movs	r0, r2
 801e49c:	f7e1 fe82 	bl	80001a4 <__udivsi3>
 801e4a0:	0003      	movs	r3, r0
 801e4a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e4a6:	2b0f      	cmp	r3, #15
 801e4a8:	d921      	bls.n	801e4ee <UART_SetConfig+0x44e>
 801e4aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e4ac:	2380      	movs	r3, #128	@ 0x80
 801e4ae:	025b      	lsls	r3, r3, #9
 801e4b0:	429a      	cmp	r2, r3
 801e4b2:	d21c      	bcs.n	801e4ee <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e4b6:	b29a      	uxth	r2, r3
 801e4b8:	200e      	movs	r0, #14
 801e4ba:	2418      	movs	r4, #24
 801e4bc:	1903      	adds	r3, r0, r4
 801e4be:	19db      	adds	r3, r3, r7
 801e4c0:	210f      	movs	r1, #15
 801e4c2:	438a      	bics	r2, r1
 801e4c4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e4c8:	085b      	lsrs	r3, r3, #1
 801e4ca:	b29b      	uxth	r3, r3
 801e4cc:	2207      	movs	r2, #7
 801e4ce:	4013      	ands	r3, r2
 801e4d0:	b299      	uxth	r1, r3
 801e4d2:	1903      	adds	r3, r0, r4
 801e4d4:	19db      	adds	r3, r3, r7
 801e4d6:	1902      	adds	r2, r0, r4
 801e4d8:	19d2      	adds	r2, r2, r7
 801e4da:	8812      	ldrh	r2, [r2, #0]
 801e4dc:	430a      	orrs	r2, r1
 801e4de:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 801e4e0:	69fb      	ldr	r3, [r7, #28]
 801e4e2:	681b      	ldr	r3, [r3, #0]
 801e4e4:	1902      	adds	r2, r0, r4
 801e4e6:	19d2      	adds	r2, r2, r7
 801e4e8:	8812      	ldrh	r2, [r2, #0]
 801e4ea:	60da      	str	r2, [r3, #12]
 801e4ec:	e05d      	b.n	801e5aa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e4ee:	231a      	movs	r3, #26
 801e4f0:	2218      	movs	r2, #24
 801e4f2:	189b      	adds	r3, r3, r2
 801e4f4:	19db      	adds	r3, r3, r7
 801e4f6:	2201      	movs	r2, #1
 801e4f8:	701a      	strb	r2, [r3, #0]
 801e4fa:	e056      	b.n	801e5aa <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e4fc:	231b      	movs	r3, #27
 801e4fe:	2218      	movs	r2, #24
 801e500:	189b      	adds	r3, r3, r2
 801e502:	19db      	adds	r3, r3, r7
 801e504:	781b      	ldrb	r3, [r3, #0]
 801e506:	2b08      	cmp	r3, #8
 801e508:	d822      	bhi.n	801e550 <UART_SetConfig+0x4b0>
 801e50a:	009a      	lsls	r2, r3, #2
 801e50c:	4b32      	ldr	r3, [pc, #200]	@ (801e5d8 <UART_SetConfig+0x538>)
 801e50e:	18d3      	adds	r3, r2, r3
 801e510:	681b      	ldr	r3, [r3, #0]
 801e512:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e514:	f7fd fd1e 	bl	801bf54 <HAL_RCC_GetPCLK1Freq>
 801e518:	0003      	movs	r3, r0
 801e51a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e51c:	e021      	b.n	801e562 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e51e:	f7fd fd2f 	bl	801bf80 <HAL_RCC_GetPCLK2Freq>
 801e522:	0003      	movs	r3, r0
 801e524:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e526:	e01c      	b.n	801e562 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e528:	4b28      	ldr	r3, [pc, #160]	@ (801e5cc <UART_SetConfig+0x52c>)
 801e52a:	681b      	ldr	r3, [r3, #0]
 801e52c:	2210      	movs	r2, #16
 801e52e:	4013      	ands	r3, r2
 801e530:	d002      	beq.n	801e538 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801e532:	4b27      	ldr	r3, [pc, #156]	@ (801e5d0 <UART_SetConfig+0x530>)
 801e534:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801e536:	e014      	b.n	801e562 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801e538:	4b26      	ldr	r3, [pc, #152]	@ (801e5d4 <UART_SetConfig+0x534>)
 801e53a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e53c:	e011      	b.n	801e562 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e53e:	f7fd fc59 	bl	801bdf4 <HAL_RCC_GetSysClockFreq>
 801e542:	0003      	movs	r3, r0
 801e544:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e546:	e00c      	b.n	801e562 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e548:	2380      	movs	r3, #128	@ 0x80
 801e54a:	021b      	lsls	r3, r3, #8
 801e54c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801e54e:	e008      	b.n	801e562 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801e550:	2300      	movs	r3, #0
 801e552:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801e554:	231a      	movs	r3, #26
 801e556:	2218      	movs	r2, #24
 801e558:	189b      	adds	r3, r3, r2
 801e55a:	19db      	adds	r3, r3, r7
 801e55c:	2201      	movs	r2, #1
 801e55e:	701a      	strb	r2, [r3, #0]
        break;
 801e560:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801e562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e564:	2b00      	cmp	r3, #0
 801e566:	d020      	beq.n	801e5aa <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801e568:	69fb      	ldr	r3, [r7, #28]
 801e56a:	685b      	ldr	r3, [r3, #4]
 801e56c:	085a      	lsrs	r2, r3, #1
 801e56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e570:	18d2      	adds	r2, r2, r3
 801e572:	69fb      	ldr	r3, [r7, #28]
 801e574:	685b      	ldr	r3, [r3, #4]
 801e576:	0019      	movs	r1, r3
 801e578:	0010      	movs	r0, r2
 801e57a:	f7e1 fe13 	bl	80001a4 <__udivsi3>
 801e57e:	0003      	movs	r3, r0
 801e580:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e584:	2b0f      	cmp	r3, #15
 801e586:	d90a      	bls.n	801e59e <UART_SetConfig+0x4fe>
 801e588:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e58a:	2380      	movs	r3, #128	@ 0x80
 801e58c:	025b      	lsls	r3, r3, #9
 801e58e:	429a      	cmp	r2, r3
 801e590:	d205      	bcs.n	801e59e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801e592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e594:	b29a      	uxth	r2, r3
 801e596:	69fb      	ldr	r3, [r7, #28]
 801e598:	681b      	ldr	r3, [r3, #0]
 801e59a:	60da      	str	r2, [r3, #12]
 801e59c:	e005      	b.n	801e5aa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801e59e:	231a      	movs	r3, #26
 801e5a0:	2218      	movs	r2, #24
 801e5a2:	189b      	adds	r3, r3, r2
 801e5a4:	19db      	adds	r3, r3, r7
 801e5a6:	2201      	movs	r2, #1
 801e5a8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e5aa:	69fb      	ldr	r3, [r7, #28]
 801e5ac:	2200      	movs	r2, #0
 801e5ae:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 801e5b0:	69fb      	ldr	r3, [r7, #28]
 801e5b2:	2200      	movs	r2, #0
 801e5b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801e5b6:	231a      	movs	r3, #26
 801e5b8:	2218      	movs	r2, #24
 801e5ba:	189b      	adds	r3, r3, r2
 801e5bc:	19db      	adds	r3, r3, r7
 801e5be:	781b      	ldrb	r3, [r3, #0]
}
 801e5c0:	0018      	movs	r0, r3
 801e5c2:	46bd      	mov	sp, r7
 801e5c4:	b00e      	add	sp, #56	@ 0x38
 801e5c6:	bdb0      	pop	{r4, r5, r7, pc}
 801e5c8:	0802ea18 	.word	0x0802ea18
 801e5cc:	40021000 	.word	0x40021000
 801e5d0:	003d0900 	.word	0x003d0900
 801e5d4:	00f42400 	.word	0x00f42400
 801e5d8:	0802ea3c 	.word	0x0802ea3c

0801e5dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801e5dc:	b580      	push	{r7, lr}
 801e5de:	b082      	sub	sp, #8
 801e5e0:	af00      	add	r7, sp, #0
 801e5e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e5e8:	2201      	movs	r2, #1
 801e5ea:	4013      	ands	r3, r2
 801e5ec:	d00b      	beq.n	801e606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801e5ee:	687b      	ldr	r3, [r7, #4]
 801e5f0:	681b      	ldr	r3, [r3, #0]
 801e5f2:	685b      	ldr	r3, [r3, #4]
 801e5f4:	4a4a      	ldr	r2, [pc, #296]	@ (801e720 <UART_AdvFeatureConfig+0x144>)
 801e5f6:	4013      	ands	r3, r2
 801e5f8:	0019      	movs	r1, r3
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801e5fe:	687b      	ldr	r3, [r7, #4]
 801e600:	681b      	ldr	r3, [r3, #0]
 801e602:	430a      	orrs	r2, r1
 801e604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e606:	687b      	ldr	r3, [r7, #4]
 801e608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e60a:	2202      	movs	r2, #2
 801e60c:	4013      	ands	r3, r2
 801e60e:	d00b      	beq.n	801e628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	685b      	ldr	r3, [r3, #4]
 801e616:	4a43      	ldr	r2, [pc, #268]	@ (801e724 <UART_AdvFeatureConfig+0x148>)
 801e618:	4013      	ands	r3, r2
 801e61a:	0019      	movs	r1, r3
 801e61c:	687b      	ldr	r3, [r7, #4]
 801e61e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	681b      	ldr	r3, [r3, #0]
 801e624:	430a      	orrs	r2, r1
 801e626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e628:	687b      	ldr	r3, [r7, #4]
 801e62a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e62c:	2204      	movs	r2, #4
 801e62e:	4013      	ands	r3, r2
 801e630:	d00b      	beq.n	801e64a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e632:	687b      	ldr	r3, [r7, #4]
 801e634:	681b      	ldr	r3, [r3, #0]
 801e636:	685b      	ldr	r3, [r3, #4]
 801e638:	4a3b      	ldr	r2, [pc, #236]	@ (801e728 <UART_AdvFeatureConfig+0x14c>)
 801e63a:	4013      	ands	r3, r2
 801e63c:	0019      	movs	r1, r3
 801e63e:	687b      	ldr	r3, [r7, #4]
 801e640:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	681b      	ldr	r3, [r3, #0]
 801e646:	430a      	orrs	r2, r1
 801e648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e64a:	687b      	ldr	r3, [r7, #4]
 801e64c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e64e:	2208      	movs	r2, #8
 801e650:	4013      	ands	r3, r2
 801e652:	d00b      	beq.n	801e66c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	681b      	ldr	r3, [r3, #0]
 801e658:	685b      	ldr	r3, [r3, #4]
 801e65a:	4a34      	ldr	r2, [pc, #208]	@ (801e72c <UART_AdvFeatureConfig+0x150>)
 801e65c:	4013      	ands	r3, r2
 801e65e:	0019      	movs	r1, r3
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	681b      	ldr	r3, [r3, #0]
 801e668:	430a      	orrs	r2, r1
 801e66a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e66c:	687b      	ldr	r3, [r7, #4]
 801e66e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e670:	2210      	movs	r2, #16
 801e672:	4013      	ands	r3, r2
 801e674:	d00b      	beq.n	801e68e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e676:	687b      	ldr	r3, [r7, #4]
 801e678:	681b      	ldr	r3, [r3, #0]
 801e67a:	689b      	ldr	r3, [r3, #8]
 801e67c:	4a2c      	ldr	r2, [pc, #176]	@ (801e730 <UART_AdvFeatureConfig+0x154>)
 801e67e:	4013      	ands	r3, r2
 801e680:	0019      	movs	r1, r3
 801e682:	687b      	ldr	r3, [r7, #4]
 801e684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801e686:	687b      	ldr	r3, [r7, #4]
 801e688:	681b      	ldr	r3, [r3, #0]
 801e68a:	430a      	orrs	r2, r1
 801e68c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e68e:	687b      	ldr	r3, [r7, #4]
 801e690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e692:	2220      	movs	r2, #32
 801e694:	4013      	ands	r3, r2
 801e696:	d00b      	beq.n	801e6b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e698:	687b      	ldr	r3, [r7, #4]
 801e69a:	681b      	ldr	r3, [r3, #0]
 801e69c:	689b      	ldr	r3, [r3, #8]
 801e69e:	4a25      	ldr	r2, [pc, #148]	@ (801e734 <UART_AdvFeatureConfig+0x158>)
 801e6a0:	4013      	ands	r3, r2
 801e6a2:	0019      	movs	r1, r3
 801e6a4:	687b      	ldr	r3, [r7, #4]
 801e6a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	681b      	ldr	r3, [r3, #0]
 801e6ac:	430a      	orrs	r2, r1
 801e6ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e6b4:	2240      	movs	r2, #64	@ 0x40
 801e6b6:	4013      	ands	r3, r2
 801e6b8:	d01d      	beq.n	801e6f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e6ba:	687b      	ldr	r3, [r7, #4]
 801e6bc:	681b      	ldr	r3, [r3, #0]
 801e6be:	685b      	ldr	r3, [r3, #4]
 801e6c0:	4a1d      	ldr	r2, [pc, #116]	@ (801e738 <UART_AdvFeatureConfig+0x15c>)
 801e6c2:	4013      	ands	r3, r2
 801e6c4:	0019      	movs	r1, r3
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e6ca:	687b      	ldr	r3, [r7, #4]
 801e6cc:	681b      	ldr	r3, [r3, #0]
 801e6ce:	430a      	orrs	r2, r1
 801e6d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e6d2:	687b      	ldr	r3, [r7, #4]
 801e6d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801e6d6:	2380      	movs	r3, #128	@ 0x80
 801e6d8:	035b      	lsls	r3, r3, #13
 801e6da:	429a      	cmp	r2, r3
 801e6dc:	d10b      	bne.n	801e6f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e6de:	687b      	ldr	r3, [r7, #4]
 801e6e0:	681b      	ldr	r3, [r3, #0]
 801e6e2:	685b      	ldr	r3, [r3, #4]
 801e6e4:	4a15      	ldr	r2, [pc, #84]	@ (801e73c <UART_AdvFeatureConfig+0x160>)
 801e6e6:	4013      	ands	r3, r2
 801e6e8:	0019      	movs	r1, r3
 801e6ea:	687b      	ldr	r3, [r7, #4]
 801e6ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	681b      	ldr	r3, [r3, #0]
 801e6f2:	430a      	orrs	r2, r1
 801e6f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e6fa:	2280      	movs	r2, #128	@ 0x80
 801e6fc:	4013      	ands	r3, r2
 801e6fe:	d00b      	beq.n	801e718 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e700:	687b      	ldr	r3, [r7, #4]
 801e702:	681b      	ldr	r3, [r3, #0]
 801e704:	685b      	ldr	r3, [r3, #4]
 801e706:	4a0e      	ldr	r2, [pc, #56]	@ (801e740 <UART_AdvFeatureConfig+0x164>)
 801e708:	4013      	ands	r3, r2
 801e70a:	0019      	movs	r1, r3
 801e70c:	687b      	ldr	r3, [r7, #4]
 801e70e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801e710:	687b      	ldr	r3, [r7, #4]
 801e712:	681b      	ldr	r3, [r3, #0]
 801e714:	430a      	orrs	r2, r1
 801e716:	605a      	str	r2, [r3, #4]
  }
}
 801e718:	46c0      	nop			@ (mov r8, r8)
 801e71a:	46bd      	mov	sp, r7
 801e71c:	b002      	add	sp, #8
 801e71e:	bd80      	pop	{r7, pc}
 801e720:	fffdffff 	.word	0xfffdffff
 801e724:	fffeffff 	.word	0xfffeffff
 801e728:	fffbffff 	.word	0xfffbffff
 801e72c:	ffff7fff 	.word	0xffff7fff
 801e730:	ffffefff 	.word	0xffffefff
 801e734:	ffffdfff 	.word	0xffffdfff
 801e738:	ffefffff 	.word	0xffefffff
 801e73c:	ff9fffff 	.word	0xff9fffff
 801e740:	fff7ffff 	.word	0xfff7ffff

0801e744 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801e744:	b580      	push	{r7, lr}
 801e746:	b092      	sub	sp, #72	@ 0x48
 801e748:	af02      	add	r7, sp, #8
 801e74a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	2284      	movs	r2, #132	@ 0x84
 801e750:	2100      	movs	r1, #0
 801e752:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801e754:	f7f6 f9f6 	bl	8014b44 <HAL_GetTick>
 801e758:	0003      	movs	r3, r0
 801e75a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e75c:	687b      	ldr	r3, [r7, #4]
 801e75e:	681b      	ldr	r3, [r3, #0]
 801e760:	681b      	ldr	r3, [r3, #0]
 801e762:	2208      	movs	r2, #8
 801e764:	4013      	ands	r3, r2
 801e766:	2b08      	cmp	r3, #8
 801e768:	d12c      	bne.n	801e7c4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e76a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e76c:	2280      	movs	r2, #128	@ 0x80
 801e76e:	0391      	lsls	r1, r2, #14
 801e770:	6878      	ldr	r0, [r7, #4]
 801e772:	4a46      	ldr	r2, [pc, #280]	@ (801e88c <UART_CheckIdleState+0x148>)
 801e774:	9200      	str	r2, [sp, #0]
 801e776:	2200      	movs	r2, #0
 801e778:	f000 f88c 	bl	801e894 <UART_WaitOnFlagUntilTimeout>
 801e77c:	1e03      	subs	r3, r0, #0
 801e77e:	d021      	beq.n	801e7c4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e780:	f3ef 8310 	mrs	r3, PRIMASK
 801e784:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801e786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801e788:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e78a:	2301      	movs	r3, #1
 801e78c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e790:	f383 8810 	msr	PRIMASK, r3
}
 801e794:	46c0      	nop			@ (mov r8, r8)
 801e796:	687b      	ldr	r3, [r7, #4]
 801e798:	681b      	ldr	r3, [r3, #0]
 801e79a:	681a      	ldr	r2, [r3, #0]
 801e79c:	687b      	ldr	r3, [r7, #4]
 801e79e:	681b      	ldr	r3, [r3, #0]
 801e7a0:	2180      	movs	r1, #128	@ 0x80
 801e7a2:	438a      	bics	r2, r1
 801e7a4:	601a      	str	r2, [r3, #0]
 801e7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801e7a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e7ac:	f383 8810 	msr	PRIMASK, r3
}
 801e7b0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	2220      	movs	r2, #32
 801e7b6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801e7b8:	687b      	ldr	r3, [r7, #4]
 801e7ba:	2278      	movs	r2, #120	@ 0x78
 801e7bc:	2100      	movs	r1, #0
 801e7be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e7c0:	2303      	movs	r3, #3
 801e7c2:	e05f      	b.n	801e884 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e7c4:	687b      	ldr	r3, [r7, #4]
 801e7c6:	681b      	ldr	r3, [r3, #0]
 801e7c8:	681b      	ldr	r3, [r3, #0]
 801e7ca:	2204      	movs	r2, #4
 801e7cc:	4013      	ands	r3, r2
 801e7ce:	2b04      	cmp	r3, #4
 801e7d0:	d146      	bne.n	801e860 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e7d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801e7d4:	2280      	movs	r2, #128	@ 0x80
 801e7d6:	03d1      	lsls	r1, r2, #15
 801e7d8:	6878      	ldr	r0, [r7, #4]
 801e7da:	4a2c      	ldr	r2, [pc, #176]	@ (801e88c <UART_CheckIdleState+0x148>)
 801e7dc:	9200      	str	r2, [sp, #0]
 801e7de:	2200      	movs	r2, #0
 801e7e0:	f000 f858 	bl	801e894 <UART_WaitOnFlagUntilTimeout>
 801e7e4:	1e03      	subs	r3, r0, #0
 801e7e6:	d03b      	beq.n	801e860 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7e8:	f3ef 8310 	mrs	r3, PRIMASK
 801e7ec:	60fb      	str	r3, [r7, #12]
  return(result);
 801e7ee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801e7f0:	637b      	str	r3, [r7, #52]	@ 0x34
 801e7f2:	2301      	movs	r3, #1
 801e7f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7f6:	693b      	ldr	r3, [r7, #16]
 801e7f8:	f383 8810 	msr	PRIMASK, r3
}
 801e7fc:	46c0      	nop			@ (mov r8, r8)
 801e7fe:	687b      	ldr	r3, [r7, #4]
 801e800:	681b      	ldr	r3, [r3, #0]
 801e802:	681a      	ldr	r2, [r3, #0]
 801e804:	687b      	ldr	r3, [r7, #4]
 801e806:	681b      	ldr	r3, [r3, #0]
 801e808:	4921      	ldr	r1, [pc, #132]	@ (801e890 <UART_CheckIdleState+0x14c>)
 801e80a:	400a      	ands	r2, r1
 801e80c:	601a      	str	r2, [r3, #0]
 801e80e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e810:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e812:	697b      	ldr	r3, [r7, #20]
 801e814:	f383 8810 	msr	PRIMASK, r3
}
 801e818:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e81a:	f3ef 8310 	mrs	r3, PRIMASK
 801e81e:	61bb      	str	r3, [r7, #24]
  return(result);
 801e820:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801e822:	633b      	str	r3, [r7, #48]	@ 0x30
 801e824:	2301      	movs	r3, #1
 801e826:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e828:	69fb      	ldr	r3, [r7, #28]
 801e82a:	f383 8810 	msr	PRIMASK, r3
}
 801e82e:	46c0      	nop			@ (mov r8, r8)
 801e830:	687b      	ldr	r3, [r7, #4]
 801e832:	681b      	ldr	r3, [r3, #0]
 801e834:	689a      	ldr	r2, [r3, #8]
 801e836:	687b      	ldr	r3, [r7, #4]
 801e838:	681b      	ldr	r3, [r3, #0]
 801e83a:	2101      	movs	r1, #1
 801e83c:	438a      	bics	r2, r1
 801e83e:	609a      	str	r2, [r3, #8]
 801e840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e842:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e844:	6a3b      	ldr	r3, [r7, #32]
 801e846:	f383 8810 	msr	PRIMASK, r3
}
 801e84a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 801e84c:	687b      	ldr	r3, [r7, #4]
 801e84e:	2280      	movs	r2, #128	@ 0x80
 801e850:	2120      	movs	r1, #32
 801e852:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 801e854:	687b      	ldr	r3, [r7, #4]
 801e856:	2278      	movs	r2, #120	@ 0x78
 801e858:	2100      	movs	r1, #0
 801e85a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e85c:	2303      	movs	r3, #3
 801e85e:	e011      	b.n	801e884 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801e860:	687b      	ldr	r3, [r7, #4]
 801e862:	2220      	movs	r2, #32
 801e864:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801e866:	687b      	ldr	r3, [r7, #4]
 801e868:	2280      	movs	r2, #128	@ 0x80
 801e86a:	2120      	movs	r1, #32
 801e86c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	2200      	movs	r2, #0
 801e872:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801e874:	687b      	ldr	r3, [r7, #4]
 801e876:	2200      	movs	r2, #0
 801e878:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	2278      	movs	r2, #120	@ 0x78
 801e87e:	2100      	movs	r1, #0
 801e880:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801e882:	2300      	movs	r3, #0
}
 801e884:	0018      	movs	r0, r3
 801e886:	46bd      	mov	sp, r7
 801e888:	b010      	add	sp, #64	@ 0x40
 801e88a:	bd80      	pop	{r7, pc}
 801e88c:	01ffffff 	.word	0x01ffffff
 801e890:	fffffedf 	.word	0xfffffedf

0801e894 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801e894:	b580      	push	{r7, lr}
 801e896:	b084      	sub	sp, #16
 801e898:	af00      	add	r7, sp, #0
 801e89a:	60f8      	str	r0, [r7, #12]
 801e89c:	60b9      	str	r1, [r7, #8]
 801e89e:	603b      	str	r3, [r7, #0]
 801e8a0:	1dfb      	adds	r3, r7, #7
 801e8a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e8a4:	e04b      	b.n	801e93e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801e8a6:	69bb      	ldr	r3, [r7, #24]
 801e8a8:	3301      	adds	r3, #1
 801e8aa:	d048      	beq.n	801e93e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801e8ac:	f7f6 f94a 	bl	8014b44 <HAL_GetTick>
 801e8b0:	0002      	movs	r2, r0
 801e8b2:	683b      	ldr	r3, [r7, #0]
 801e8b4:	1ad3      	subs	r3, r2, r3
 801e8b6:	69ba      	ldr	r2, [r7, #24]
 801e8b8:	429a      	cmp	r2, r3
 801e8ba:	d302      	bcc.n	801e8c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 801e8bc:	69bb      	ldr	r3, [r7, #24]
 801e8be:	2b00      	cmp	r3, #0
 801e8c0:	d101      	bne.n	801e8c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801e8c2:	2303      	movs	r3, #3
 801e8c4:	e04b      	b.n	801e95e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801e8c6:	68fb      	ldr	r3, [r7, #12]
 801e8c8:	681b      	ldr	r3, [r3, #0]
 801e8ca:	681b      	ldr	r3, [r3, #0]
 801e8cc:	2204      	movs	r2, #4
 801e8ce:	4013      	ands	r3, r2
 801e8d0:	d035      	beq.n	801e93e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801e8d2:	68fb      	ldr	r3, [r7, #12]
 801e8d4:	681b      	ldr	r3, [r3, #0]
 801e8d6:	69db      	ldr	r3, [r3, #28]
 801e8d8:	2208      	movs	r2, #8
 801e8da:	4013      	ands	r3, r2
 801e8dc:	2b08      	cmp	r3, #8
 801e8de:	d111      	bne.n	801e904 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801e8e0:	68fb      	ldr	r3, [r7, #12]
 801e8e2:	681b      	ldr	r3, [r3, #0]
 801e8e4:	2208      	movs	r2, #8
 801e8e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801e8e8:	68fb      	ldr	r3, [r7, #12]
 801e8ea:	0018      	movs	r0, r3
 801e8ec:	f000 f9ca 	bl	801ec84 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801e8f0:	68fb      	ldr	r3, [r7, #12]
 801e8f2:	2284      	movs	r2, #132	@ 0x84
 801e8f4:	2108      	movs	r1, #8
 801e8f6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801e8f8:	68fb      	ldr	r3, [r7, #12]
 801e8fa:	2278      	movs	r2, #120	@ 0x78
 801e8fc:	2100      	movs	r1, #0
 801e8fe:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801e900:	2301      	movs	r3, #1
 801e902:	e02c      	b.n	801e95e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801e904:	68fb      	ldr	r3, [r7, #12]
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	69da      	ldr	r2, [r3, #28]
 801e90a:	2380      	movs	r3, #128	@ 0x80
 801e90c:	011b      	lsls	r3, r3, #4
 801e90e:	401a      	ands	r2, r3
 801e910:	2380      	movs	r3, #128	@ 0x80
 801e912:	011b      	lsls	r3, r3, #4
 801e914:	429a      	cmp	r2, r3
 801e916:	d112      	bne.n	801e93e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801e918:	68fb      	ldr	r3, [r7, #12]
 801e91a:	681b      	ldr	r3, [r3, #0]
 801e91c:	2280      	movs	r2, #128	@ 0x80
 801e91e:	0112      	lsls	r2, r2, #4
 801e920:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801e922:	68fb      	ldr	r3, [r7, #12]
 801e924:	0018      	movs	r0, r3
 801e926:	f000 f9ad 	bl	801ec84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801e92a:	68fb      	ldr	r3, [r7, #12]
 801e92c:	2284      	movs	r2, #132	@ 0x84
 801e92e:	2120      	movs	r1, #32
 801e930:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801e932:	68fb      	ldr	r3, [r7, #12]
 801e934:	2278      	movs	r2, #120	@ 0x78
 801e936:	2100      	movs	r1, #0
 801e938:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801e93a:	2303      	movs	r3, #3
 801e93c:	e00f      	b.n	801e95e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801e93e:	68fb      	ldr	r3, [r7, #12]
 801e940:	681b      	ldr	r3, [r3, #0]
 801e942:	69db      	ldr	r3, [r3, #28]
 801e944:	68ba      	ldr	r2, [r7, #8]
 801e946:	4013      	ands	r3, r2
 801e948:	68ba      	ldr	r2, [r7, #8]
 801e94a:	1ad3      	subs	r3, r2, r3
 801e94c:	425a      	negs	r2, r3
 801e94e:	4153      	adcs	r3, r2
 801e950:	b2db      	uxtb	r3, r3
 801e952:	001a      	movs	r2, r3
 801e954:	1dfb      	adds	r3, r7, #7
 801e956:	781b      	ldrb	r3, [r3, #0]
 801e958:	429a      	cmp	r2, r3
 801e95a:	d0a4      	beq.n	801e8a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801e95c:	2300      	movs	r3, #0
}
 801e95e:	0018      	movs	r0, r3
 801e960:	46bd      	mov	sp, r7
 801e962:	b004      	add	sp, #16
 801e964:	bd80      	pop	{r7, pc}
	...

0801e968 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801e968:	b580      	push	{r7, lr}
 801e96a:	b090      	sub	sp, #64	@ 0x40
 801e96c:	af00      	add	r7, sp, #0
 801e96e:	60f8      	str	r0, [r7, #12]
 801e970:	60b9      	str	r1, [r7, #8]
 801e972:	1dbb      	adds	r3, r7, #6
 801e974:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 801e976:	68fb      	ldr	r3, [r7, #12]
 801e978:	68ba      	ldr	r2, [r7, #8]
 801e97a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 801e97c:	68fb      	ldr	r3, [r7, #12]
 801e97e:	1dba      	adds	r2, r7, #6
 801e980:	2158      	movs	r1, #88	@ 0x58
 801e982:	8812      	ldrh	r2, [r2, #0]
 801e984:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 801e986:	68fb      	ldr	r3, [r7, #12]
 801e988:	1dba      	adds	r2, r7, #6
 801e98a:	215a      	movs	r1, #90	@ 0x5a
 801e98c:	8812      	ldrh	r2, [r2, #0]
 801e98e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801e990:	68fb      	ldr	r3, [r7, #12]
 801e992:	2200      	movs	r2, #0
 801e994:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801e996:	68fb      	ldr	r3, [r7, #12]
 801e998:	689a      	ldr	r2, [r3, #8]
 801e99a:	2380      	movs	r3, #128	@ 0x80
 801e99c:	015b      	lsls	r3, r3, #5
 801e99e:	429a      	cmp	r2, r3
 801e9a0:	d10d      	bne.n	801e9be <UART_Start_Receive_IT+0x56>
 801e9a2:	68fb      	ldr	r3, [r7, #12]
 801e9a4:	691b      	ldr	r3, [r3, #16]
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	d104      	bne.n	801e9b4 <UART_Start_Receive_IT+0x4c>
 801e9aa:	68fb      	ldr	r3, [r7, #12]
 801e9ac:	225c      	movs	r2, #92	@ 0x5c
 801e9ae:	4950      	ldr	r1, [pc, #320]	@ (801eaf0 <UART_Start_Receive_IT+0x188>)
 801e9b0:	5299      	strh	r1, [r3, r2]
 801e9b2:	e02e      	b.n	801ea12 <UART_Start_Receive_IT+0xaa>
 801e9b4:	68fb      	ldr	r3, [r7, #12]
 801e9b6:	225c      	movs	r2, #92	@ 0x5c
 801e9b8:	21ff      	movs	r1, #255	@ 0xff
 801e9ba:	5299      	strh	r1, [r3, r2]
 801e9bc:	e029      	b.n	801ea12 <UART_Start_Receive_IT+0xaa>
 801e9be:	68fb      	ldr	r3, [r7, #12]
 801e9c0:	689b      	ldr	r3, [r3, #8]
 801e9c2:	2b00      	cmp	r3, #0
 801e9c4:	d10d      	bne.n	801e9e2 <UART_Start_Receive_IT+0x7a>
 801e9c6:	68fb      	ldr	r3, [r7, #12]
 801e9c8:	691b      	ldr	r3, [r3, #16]
 801e9ca:	2b00      	cmp	r3, #0
 801e9cc:	d104      	bne.n	801e9d8 <UART_Start_Receive_IT+0x70>
 801e9ce:	68fb      	ldr	r3, [r7, #12]
 801e9d0:	225c      	movs	r2, #92	@ 0x5c
 801e9d2:	21ff      	movs	r1, #255	@ 0xff
 801e9d4:	5299      	strh	r1, [r3, r2]
 801e9d6:	e01c      	b.n	801ea12 <UART_Start_Receive_IT+0xaa>
 801e9d8:	68fb      	ldr	r3, [r7, #12]
 801e9da:	225c      	movs	r2, #92	@ 0x5c
 801e9dc:	217f      	movs	r1, #127	@ 0x7f
 801e9de:	5299      	strh	r1, [r3, r2]
 801e9e0:	e017      	b.n	801ea12 <UART_Start_Receive_IT+0xaa>
 801e9e2:	68fb      	ldr	r3, [r7, #12]
 801e9e4:	689a      	ldr	r2, [r3, #8]
 801e9e6:	2380      	movs	r3, #128	@ 0x80
 801e9e8:	055b      	lsls	r3, r3, #21
 801e9ea:	429a      	cmp	r2, r3
 801e9ec:	d10d      	bne.n	801ea0a <UART_Start_Receive_IT+0xa2>
 801e9ee:	68fb      	ldr	r3, [r7, #12]
 801e9f0:	691b      	ldr	r3, [r3, #16]
 801e9f2:	2b00      	cmp	r3, #0
 801e9f4:	d104      	bne.n	801ea00 <UART_Start_Receive_IT+0x98>
 801e9f6:	68fb      	ldr	r3, [r7, #12]
 801e9f8:	225c      	movs	r2, #92	@ 0x5c
 801e9fa:	217f      	movs	r1, #127	@ 0x7f
 801e9fc:	5299      	strh	r1, [r3, r2]
 801e9fe:	e008      	b.n	801ea12 <UART_Start_Receive_IT+0xaa>
 801ea00:	68fb      	ldr	r3, [r7, #12]
 801ea02:	225c      	movs	r2, #92	@ 0x5c
 801ea04:	213f      	movs	r1, #63	@ 0x3f
 801ea06:	5299      	strh	r1, [r3, r2]
 801ea08:	e003      	b.n	801ea12 <UART_Start_Receive_IT+0xaa>
 801ea0a:	68fb      	ldr	r3, [r7, #12]
 801ea0c:	225c      	movs	r2, #92	@ 0x5c
 801ea0e:	2100      	movs	r1, #0
 801ea10:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ea12:	68fb      	ldr	r3, [r7, #12]
 801ea14:	2284      	movs	r2, #132	@ 0x84
 801ea16:	2100      	movs	r1, #0
 801ea18:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801ea1a:	68fb      	ldr	r3, [r7, #12]
 801ea1c:	2280      	movs	r2, #128	@ 0x80
 801ea1e:	2122      	movs	r1, #34	@ 0x22
 801ea20:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea22:	f3ef 8310 	mrs	r3, PRIMASK
 801ea26:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801ea28:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ea2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ea2c:	2301      	movs	r3, #1
 801ea2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ea32:	f383 8810 	msr	PRIMASK, r3
}
 801ea36:	46c0      	nop			@ (mov r8, r8)
 801ea38:	68fb      	ldr	r3, [r7, #12]
 801ea3a:	681b      	ldr	r3, [r3, #0]
 801ea3c:	689a      	ldr	r2, [r3, #8]
 801ea3e:	68fb      	ldr	r3, [r7, #12]
 801ea40:	681b      	ldr	r3, [r3, #0]
 801ea42:	2101      	movs	r1, #1
 801ea44:	430a      	orrs	r2, r1
 801ea46:	609a      	str	r2, [r3, #8]
 801ea48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ea4a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ea4e:	f383 8810 	msr	PRIMASK, r3
}
 801ea52:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ea54:	68fb      	ldr	r3, [r7, #12]
 801ea56:	689a      	ldr	r2, [r3, #8]
 801ea58:	2380      	movs	r3, #128	@ 0x80
 801ea5a:	015b      	lsls	r3, r3, #5
 801ea5c:	429a      	cmp	r2, r3
 801ea5e:	d107      	bne.n	801ea70 <UART_Start_Receive_IT+0x108>
 801ea60:	68fb      	ldr	r3, [r7, #12]
 801ea62:	691b      	ldr	r3, [r3, #16]
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	d103      	bne.n	801ea70 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801ea68:	68fb      	ldr	r3, [r7, #12]
 801ea6a:	4a22      	ldr	r2, [pc, #136]	@ (801eaf4 <UART_Start_Receive_IT+0x18c>)
 801ea6c:	669a      	str	r2, [r3, #104]	@ 0x68
 801ea6e:	e002      	b.n	801ea76 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801ea70:	68fb      	ldr	r3, [r7, #12]
 801ea72:	4a21      	ldr	r2, [pc, #132]	@ (801eaf8 <UART_Start_Receive_IT+0x190>)
 801ea74:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801ea76:	68fb      	ldr	r3, [r7, #12]
 801ea78:	691b      	ldr	r3, [r3, #16]
 801ea7a:	2b00      	cmp	r3, #0
 801ea7c:	d019      	beq.n	801eab2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea7e:	f3ef 8310 	mrs	r3, PRIMASK
 801ea82:	61fb      	str	r3, [r7, #28]
  return(result);
 801ea84:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801ea86:	637b      	str	r3, [r7, #52]	@ 0x34
 801ea88:	2301      	movs	r3, #1
 801ea8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea8c:	6a3b      	ldr	r3, [r7, #32]
 801ea8e:	f383 8810 	msr	PRIMASK, r3
}
 801ea92:	46c0      	nop			@ (mov r8, r8)
 801ea94:	68fb      	ldr	r3, [r7, #12]
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	681a      	ldr	r2, [r3, #0]
 801ea9a:	68fb      	ldr	r3, [r7, #12]
 801ea9c:	681b      	ldr	r3, [r3, #0]
 801ea9e:	2190      	movs	r1, #144	@ 0x90
 801eaa0:	0049      	lsls	r1, r1, #1
 801eaa2:	430a      	orrs	r2, r1
 801eaa4:	601a      	str	r2, [r3, #0]
 801eaa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eaa8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eaaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eaac:	f383 8810 	msr	PRIMASK, r3
}
 801eab0:	e018      	b.n	801eae4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eab2:	f3ef 8310 	mrs	r3, PRIMASK
 801eab6:	613b      	str	r3, [r7, #16]
  return(result);
 801eab8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801eaba:	63bb      	str	r3, [r7, #56]	@ 0x38
 801eabc:	2301      	movs	r3, #1
 801eabe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eac0:	697b      	ldr	r3, [r7, #20]
 801eac2:	f383 8810 	msr	PRIMASK, r3
}
 801eac6:	46c0      	nop			@ (mov r8, r8)
 801eac8:	68fb      	ldr	r3, [r7, #12]
 801eaca:	681b      	ldr	r3, [r3, #0]
 801eacc:	681a      	ldr	r2, [r3, #0]
 801eace:	68fb      	ldr	r3, [r7, #12]
 801ead0:	681b      	ldr	r3, [r3, #0]
 801ead2:	2120      	movs	r1, #32
 801ead4:	430a      	orrs	r2, r1
 801ead6:	601a      	str	r2, [r3, #0]
 801ead8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eada:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eadc:	69bb      	ldr	r3, [r7, #24]
 801eade:	f383 8810 	msr	PRIMASK, r3
}
 801eae2:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801eae4:	2300      	movs	r3, #0
}
 801eae6:	0018      	movs	r0, r3
 801eae8:	46bd      	mov	sp, r7
 801eaea:	b010      	add	sp, #64	@ 0x40
 801eaec:	bd80      	pop	{r7, pc}
 801eaee:	46c0      	nop			@ (mov r8, r8)
 801eaf0:	000001ff 	.word	0x000001ff
 801eaf4:	0801f269 	.word	0x0801f269
 801eaf8:	0801f09d 	.word	0x0801f09d

0801eafc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801eafc:	b580      	push	{r7, lr}
 801eafe:	b090      	sub	sp, #64	@ 0x40
 801eb00:	af00      	add	r7, sp, #0
 801eb02:	60f8      	str	r0, [r7, #12]
 801eb04:	60b9      	str	r1, [r7, #8]
 801eb06:	1dbb      	adds	r3, r7, #6
 801eb08:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801eb0a:	68fb      	ldr	r3, [r7, #12]
 801eb0c:	68ba      	ldr	r2, [r7, #8]
 801eb0e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801eb10:	68fb      	ldr	r3, [r7, #12]
 801eb12:	1dba      	adds	r2, r7, #6
 801eb14:	2158      	movs	r1, #88	@ 0x58
 801eb16:	8812      	ldrh	r2, [r2, #0]
 801eb18:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801eb1a:	68fb      	ldr	r3, [r7, #12]
 801eb1c:	2284      	movs	r2, #132	@ 0x84
 801eb1e:	2100      	movs	r1, #0
 801eb20:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801eb22:	68fb      	ldr	r3, [r7, #12]
 801eb24:	2280      	movs	r2, #128	@ 0x80
 801eb26:	2122      	movs	r1, #34	@ 0x22
 801eb28:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801eb2a:	68fb      	ldr	r3, [r7, #12]
 801eb2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801eb2e:	2b00      	cmp	r3, #0
 801eb30:	d028      	beq.n	801eb84 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801eb32:	68fb      	ldr	r3, [r7, #12]
 801eb34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801eb36:	4a3e      	ldr	r2, [pc, #248]	@ (801ec30 <UART_Start_Receive_DMA+0x134>)
 801eb38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801eb3a:	68fb      	ldr	r3, [r7, #12]
 801eb3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801eb3e:	4a3d      	ldr	r2, [pc, #244]	@ (801ec34 <UART_Start_Receive_DMA+0x138>)
 801eb40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801eb42:	68fb      	ldr	r3, [r7, #12]
 801eb44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801eb46:	4a3c      	ldr	r2, [pc, #240]	@ (801ec38 <UART_Start_Receive_DMA+0x13c>)
 801eb48:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801eb4a:	68fb      	ldr	r3, [r7, #12]
 801eb4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801eb4e:	2200      	movs	r2, #0
 801eb50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801eb52:	68fb      	ldr	r3, [r7, #12]
 801eb54:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801eb56:	68fb      	ldr	r3, [r7, #12]
 801eb58:	681b      	ldr	r3, [r3, #0]
 801eb5a:	3324      	adds	r3, #36	@ 0x24
 801eb5c:	0019      	movs	r1, r3
 801eb5e:	68fb      	ldr	r3, [r7, #12]
 801eb60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801eb62:	001a      	movs	r2, r3
 801eb64:	1dbb      	adds	r3, r7, #6
 801eb66:	881b      	ldrh	r3, [r3, #0]
 801eb68:	f7f6 fd3e 	bl	80155e8 <HAL_DMA_Start_IT>
 801eb6c:	1e03      	subs	r3, r0, #0
 801eb6e:	d009      	beq.n	801eb84 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801eb70:	68fb      	ldr	r3, [r7, #12]
 801eb72:	2284      	movs	r2, #132	@ 0x84
 801eb74:	2110      	movs	r1, #16
 801eb76:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801eb78:	68fb      	ldr	r3, [r7, #12]
 801eb7a:	2280      	movs	r2, #128	@ 0x80
 801eb7c:	2120      	movs	r1, #32
 801eb7e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801eb80:	2301      	movs	r3, #1
 801eb82:	e050      	b.n	801ec26 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801eb84:	68fb      	ldr	r3, [r7, #12]
 801eb86:	691b      	ldr	r3, [r3, #16]
 801eb88:	2b00      	cmp	r3, #0
 801eb8a:	d019      	beq.n	801ebc0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eb8c:	f3ef 8310 	mrs	r3, PRIMASK
 801eb90:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801eb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801eb94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801eb96:	2301      	movs	r3, #1
 801eb98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eb9c:	f383 8810 	msr	PRIMASK, r3
}
 801eba0:	46c0      	nop			@ (mov r8, r8)
 801eba2:	68fb      	ldr	r3, [r7, #12]
 801eba4:	681b      	ldr	r3, [r3, #0]
 801eba6:	681a      	ldr	r2, [r3, #0]
 801eba8:	68fb      	ldr	r3, [r7, #12]
 801ebaa:	681b      	ldr	r3, [r3, #0]
 801ebac:	2180      	movs	r1, #128	@ 0x80
 801ebae:	0049      	lsls	r1, r1, #1
 801ebb0:	430a      	orrs	r2, r1
 801ebb2:	601a      	str	r2, [r3, #0]
 801ebb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ebb6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ebba:	f383 8810 	msr	PRIMASK, r3
}
 801ebbe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ebc0:	f3ef 8310 	mrs	r3, PRIMASK
 801ebc4:	613b      	str	r3, [r7, #16]
  return(result);
 801ebc6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ebc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ebca:	2301      	movs	r3, #1
 801ebcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebce:	697b      	ldr	r3, [r7, #20]
 801ebd0:	f383 8810 	msr	PRIMASK, r3
}
 801ebd4:	46c0      	nop			@ (mov r8, r8)
 801ebd6:	68fb      	ldr	r3, [r7, #12]
 801ebd8:	681b      	ldr	r3, [r3, #0]
 801ebda:	689a      	ldr	r2, [r3, #8]
 801ebdc:	68fb      	ldr	r3, [r7, #12]
 801ebde:	681b      	ldr	r3, [r3, #0]
 801ebe0:	2101      	movs	r1, #1
 801ebe2:	430a      	orrs	r2, r1
 801ebe4:	609a      	str	r2, [r3, #8]
 801ebe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ebe8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebea:	69bb      	ldr	r3, [r7, #24]
 801ebec:	f383 8810 	msr	PRIMASK, r3
}
 801ebf0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ebf2:	f3ef 8310 	mrs	r3, PRIMASK
 801ebf6:	61fb      	str	r3, [r7, #28]
  return(result);
 801ebf8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ebfa:	637b      	str	r3, [r7, #52]	@ 0x34
 801ebfc:	2301      	movs	r3, #1
 801ebfe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec00:	6a3b      	ldr	r3, [r7, #32]
 801ec02:	f383 8810 	msr	PRIMASK, r3
}
 801ec06:	46c0      	nop			@ (mov r8, r8)
 801ec08:	68fb      	ldr	r3, [r7, #12]
 801ec0a:	681b      	ldr	r3, [r3, #0]
 801ec0c:	689a      	ldr	r2, [r3, #8]
 801ec0e:	68fb      	ldr	r3, [r7, #12]
 801ec10:	681b      	ldr	r3, [r3, #0]
 801ec12:	2140      	movs	r1, #64	@ 0x40
 801ec14:	430a      	orrs	r2, r1
 801ec16:	609a      	str	r2, [r3, #8]
 801ec18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ec1a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec1e:	f383 8810 	msr	PRIMASK, r3
}
 801ec22:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801ec24:	2300      	movs	r3, #0
}
 801ec26:	0018      	movs	r0, r3
 801ec28:	46bd      	mov	sp, r7
 801ec2a:	b010      	add	sp, #64	@ 0x40
 801ec2c:	bd80      	pop	{r7, pc}
 801ec2e:	46c0      	nop			@ (mov r8, r8)
 801ec30:	0801ee0d 	.word	0x0801ee0d
 801ec34:	0801ef41 	.word	0x0801ef41
 801ec38:	0801ef89 	.word	0x0801ef89

0801ec3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801ec3c:	b580      	push	{r7, lr}
 801ec3e:	b086      	sub	sp, #24
 801ec40:	af00      	add	r7, sp, #0
 801ec42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec44:	f3ef 8310 	mrs	r3, PRIMASK
 801ec48:	60bb      	str	r3, [r7, #8]
  return(result);
 801ec4a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801ec4c:	617b      	str	r3, [r7, #20]
 801ec4e:	2301      	movs	r3, #1
 801ec50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec52:	68fb      	ldr	r3, [r7, #12]
 801ec54:	f383 8810 	msr	PRIMASK, r3
}
 801ec58:	46c0      	nop			@ (mov r8, r8)
 801ec5a:	687b      	ldr	r3, [r7, #4]
 801ec5c:	681b      	ldr	r3, [r3, #0]
 801ec5e:	681a      	ldr	r2, [r3, #0]
 801ec60:	687b      	ldr	r3, [r7, #4]
 801ec62:	681b      	ldr	r3, [r3, #0]
 801ec64:	21c0      	movs	r1, #192	@ 0xc0
 801ec66:	438a      	bics	r2, r1
 801ec68:	601a      	str	r2, [r3, #0]
 801ec6a:	697b      	ldr	r3, [r7, #20]
 801ec6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec6e:	693b      	ldr	r3, [r7, #16]
 801ec70:	f383 8810 	msr	PRIMASK, r3
}
 801ec74:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ec76:	687b      	ldr	r3, [r7, #4]
 801ec78:	2220      	movs	r2, #32
 801ec7a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801ec7c:	46c0      	nop			@ (mov r8, r8)
 801ec7e:	46bd      	mov	sp, r7
 801ec80:	b006      	add	sp, #24
 801ec82:	bd80      	pop	{r7, pc}

0801ec84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801ec84:	b580      	push	{r7, lr}
 801ec86:	b08e      	sub	sp, #56	@ 0x38
 801ec88:	af00      	add	r7, sp, #0
 801ec8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ec8c:	f3ef 8310 	mrs	r3, PRIMASK
 801ec90:	617b      	str	r3, [r7, #20]
  return(result);
 801ec92:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ec94:	637b      	str	r3, [r7, #52]	@ 0x34
 801ec96:	2301      	movs	r3, #1
 801ec98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ec9a:	69bb      	ldr	r3, [r7, #24]
 801ec9c:	f383 8810 	msr	PRIMASK, r3
}
 801eca0:	46c0      	nop			@ (mov r8, r8)
 801eca2:	687b      	ldr	r3, [r7, #4]
 801eca4:	681b      	ldr	r3, [r3, #0]
 801eca6:	681a      	ldr	r2, [r3, #0]
 801eca8:	687b      	ldr	r3, [r7, #4]
 801ecaa:	681b      	ldr	r3, [r3, #0]
 801ecac:	4926      	ldr	r1, [pc, #152]	@ (801ed48 <UART_EndRxTransfer+0xc4>)
 801ecae:	400a      	ands	r2, r1
 801ecb0:	601a      	str	r2, [r3, #0]
 801ecb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ecb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecb6:	69fb      	ldr	r3, [r7, #28]
 801ecb8:	f383 8810 	msr	PRIMASK, r3
}
 801ecbc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ecbe:	f3ef 8310 	mrs	r3, PRIMASK
 801ecc2:	623b      	str	r3, [r7, #32]
  return(result);
 801ecc4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ecc6:	633b      	str	r3, [r7, #48]	@ 0x30
 801ecc8:	2301      	movs	r3, #1
 801ecca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecce:	f383 8810 	msr	PRIMASK, r3
}
 801ecd2:	46c0      	nop			@ (mov r8, r8)
 801ecd4:	687b      	ldr	r3, [r7, #4]
 801ecd6:	681b      	ldr	r3, [r3, #0]
 801ecd8:	689a      	ldr	r2, [r3, #8]
 801ecda:	687b      	ldr	r3, [r7, #4]
 801ecdc:	681b      	ldr	r3, [r3, #0]
 801ecde:	2101      	movs	r1, #1
 801ece0:	438a      	bics	r2, r1
 801ece2:	609a      	str	r2, [r3, #8]
 801ece4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ece6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ece8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ecea:	f383 8810 	msr	PRIMASK, r3
}
 801ecee:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ecf4:	2b01      	cmp	r3, #1
 801ecf6:	d118      	bne.n	801ed2a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ecf8:	f3ef 8310 	mrs	r3, PRIMASK
 801ecfc:	60bb      	str	r3, [r7, #8]
  return(result);
 801ecfe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ed00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ed02:	2301      	movs	r3, #1
 801ed04:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed06:	68fb      	ldr	r3, [r7, #12]
 801ed08:	f383 8810 	msr	PRIMASK, r3
}
 801ed0c:	46c0      	nop			@ (mov r8, r8)
 801ed0e:	687b      	ldr	r3, [r7, #4]
 801ed10:	681b      	ldr	r3, [r3, #0]
 801ed12:	681a      	ldr	r2, [r3, #0]
 801ed14:	687b      	ldr	r3, [r7, #4]
 801ed16:	681b      	ldr	r3, [r3, #0]
 801ed18:	2110      	movs	r1, #16
 801ed1a:	438a      	bics	r2, r1
 801ed1c:	601a      	str	r2, [r3, #0]
 801ed1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed22:	693b      	ldr	r3, [r7, #16]
 801ed24:	f383 8810 	msr	PRIMASK, r3
}
 801ed28:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ed2a:	687b      	ldr	r3, [r7, #4]
 801ed2c:	2280      	movs	r2, #128	@ 0x80
 801ed2e:	2120      	movs	r1, #32
 801ed30:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ed32:	687b      	ldr	r3, [r7, #4]
 801ed34:	2200      	movs	r2, #0
 801ed36:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801ed38:	687b      	ldr	r3, [r7, #4]
 801ed3a:	2200      	movs	r2, #0
 801ed3c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801ed3e:	46c0      	nop			@ (mov r8, r8)
 801ed40:	46bd      	mov	sp, r7
 801ed42:	b00e      	add	sp, #56	@ 0x38
 801ed44:	bd80      	pop	{r7, pc}
 801ed46:	46c0      	nop			@ (mov r8, r8)
 801ed48:	fffffedf 	.word	0xfffffedf

0801ed4c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801ed4c:	b580      	push	{r7, lr}
 801ed4e:	b08c      	sub	sp, #48	@ 0x30
 801ed50:	af00      	add	r7, sp, #0
 801ed52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ed54:	687b      	ldr	r3, [r7, #4]
 801ed56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed58:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801ed5a:	687b      	ldr	r3, [r7, #4]
 801ed5c:	681b      	ldr	r3, [r3, #0]
 801ed5e:	681b      	ldr	r3, [r3, #0]
 801ed60:	2220      	movs	r2, #32
 801ed62:	4013      	ands	r3, r2
 801ed64:	d135      	bne.n	801edd2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 801ed66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed68:	2252      	movs	r2, #82	@ 0x52
 801ed6a:	2100      	movs	r1, #0
 801ed6c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed6e:	f3ef 8310 	mrs	r3, PRIMASK
 801ed72:	60fb      	str	r3, [r7, #12]
  return(result);
 801ed74:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801ed76:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ed78:	2301      	movs	r3, #1
 801ed7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed7c:	693b      	ldr	r3, [r7, #16]
 801ed7e:	f383 8810 	msr	PRIMASK, r3
}
 801ed82:	46c0      	nop			@ (mov r8, r8)
 801ed84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed86:	681b      	ldr	r3, [r3, #0]
 801ed88:	689a      	ldr	r2, [r3, #8]
 801ed8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed8c:	681b      	ldr	r3, [r3, #0]
 801ed8e:	2180      	movs	r1, #128	@ 0x80
 801ed90:	438a      	bics	r2, r1
 801ed92:	609a      	str	r2, [r3, #8]
 801ed94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed98:	697b      	ldr	r3, [r7, #20]
 801ed9a:	f383 8810 	msr	PRIMASK, r3
}
 801ed9e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eda0:	f3ef 8310 	mrs	r3, PRIMASK
 801eda4:	61bb      	str	r3, [r7, #24]
  return(result);
 801eda6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801eda8:	627b      	str	r3, [r7, #36]	@ 0x24
 801edaa:	2301      	movs	r3, #1
 801edac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801edae:	69fb      	ldr	r3, [r7, #28]
 801edb0:	f383 8810 	msr	PRIMASK, r3
}
 801edb4:	46c0      	nop			@ (mov r8, r8)
 801edb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801edb8:	681b      	ldr	r3, [r3, #0]
 801edba:	681a      	ldr	r2, [r3, #0]
 801edbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801edbe:	681b      	ldr	r3, [r3, #0]
 801edc0:	2140      	movs	r1, #64	@ 0x40
 801edc2:	430a      	orrs	r2, r1
 801edc4:	601a      	str	r2, [r3, #0]
 801edc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801edc8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801edca:	6a3b      	ldr	r3, [r7, #32]
 801edcc:	f383 8810 	msr	PRIMASK, r3
}
 801edd0:	e006      	b.n	801ede0 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801edd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801edd4:	228c      	movs	r2, #140	@ 0x8c
 801edd6:	589b      	ldr	r3, [r3, r2]
 801edd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801edda:	0010      	movs	r0, r2
 801eddc:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801edde:	46c0      	nop			@ (mov r8, r8)
 801ede0:	46c0      	nop			@ (mov r8, r8)
 801ede2:	46bd      	mov	sp, r7
 801ede4:	b00c      	add	sp, #48	@ 0x30
 801ede6:	bd80      	pop	{r7, pc}

0801ede8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801ede8:	b580      	push	{r7, lr}
 801edea:	b084      	sub	sp, #16
 801edec:	af00      	add	r7, sp, #0
 801edee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801edf4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801edf6:	68fb      	ldr	r3, [r7, #12]
 801edf8:	2288      	movs	r2, #136	@ 0x88
 801edfa:	589b      	ldr	r3, [r3, r2]
 801edfc:	68fa      	ldr	r2, [r7, #12]
 801edfe:	0010      	movs	r0, r2
 801ee00:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ee02:	46c0      	nop			@ (mov r8, r8)
 801ee04:	46bd      	mov	sp, r7
 801ee06:	b004      	add	sp, #16
 801ee08:	bd80      	pop	{r7, pc}
	...

0801ee0c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801ee0c:	b580      	push	{r7, lr}
 801ee0e:	b094      	sub	sp, #80	@ 0x50
 801ee10:	af00      	add	r7, sp, #0
 801ee12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ee14:	687b      	ldr	r3, [r7, #4]
 801ee16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ee18:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801ee1a:	687b      	ldr	r3, [r7, #4]
 801ee1c:	681b      	ldr	r3, [r3, #0]
 801ee1e:	681b      	ldr	r3, [r3, #0]
 801ee20:	2220      	movs	r2, #32
 801ee22:	4013      	ands	r3, r2
 801ee24:	d16f      	bne.n	801ef06 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801ee26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee28:	225a      	movs	r2, #90	@ 0x5a
 801ee2a:	2100      	movs	r1, #0
 801ee2c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee2e:	f3ef 8310 	mrs	r3, PRIMASK
 801ee32:	61bb      	str	r3, [r7, #24]
  return(result);
 801ee34:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ee36:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ee38:	2301      	movs	r3, #1
 801ee3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee3c:	69fb      	ldr	r3, [r7, #28]
 801ee3e:	f383 8810 	msr	PRIMASK, r3
}
 801ee42:	46c0      	nop			@ (mov r8, r8)
 801ee44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee46:	681b      	ldr	r3, [r3, #0]
 801ee48:	681a      	ldr	r2, [r3, #0]
 801ee4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee4c:	681b      	ldr	r3, [r3, #0]
 801ee4e:	493b      	ldr	r1, [pc, #236]	@ (801ef3c <UART_DMAReceiveCplt+0x130>)
 801ee50:	400a      	ands	r2, r1
 801ee52:	601a      	str	r2, [r3, #0]
 801ee54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ee56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee58:	6a3b      	ldr	r3, [r7, #32]
 801ee5a:	f383 8810 	msr	PRIMASK, r3
}
 801ee5e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee60:	f3ef 8310 	mrs	r3, PRIMASK
 801ee64:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801ee66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ee68:	647b      	str	r3, [r7, #68]	@ 0x44
 801ee6a:	2301      	movs	r3, #1
 801ee6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee70:	f383 8810 	msr	PRIMASK, r3
}
 801ee74:	46c0      	nop			@ (mov r8, r8)
 801ee76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee78:	681b      	ldr	r3, [r3, #0]
 801ee7a:	689a      	ldr	r2, [r3, #8]
 801ee7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee7e:	681b      	ldr	r3, [r3, #0]
 801ee80:	2101      	movs	r1, #1
 801ee82:	438a      	bics	r2, r1
 801ee84:	609a      	str	r2, [r3, #8]
 801ee86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ee88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee8c:	f383 8810 	msr	PRIMASK, r3
}
 801ee90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ee92:	f3ef 8310 	mrs	r3, PRIMASK
 801ee96:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801ee98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ee9a:	643b      	str	r3, [r7, #64]	@ 0x40
 801ee9c:	2301      	movs	r3, #1
 801ee9e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eea2:	f383 8810 	msr	PRIMASK, r3
}
 801eea6:	46c0      	nop			@ (mov r8, r8)
 801eea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eeaa:	681b      	ldr	r3, [r3, #0]
 801eeac:	689a      	ldr	r2, [r3, #8]
 801eeae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eeb0:	681b      	ldr	r3, [r3, #0]
 801eeb2:	2140      	movs	r1, #64	@ 0x40
 801eeb4:	438a      	bics	r2, r1
 801eeb6:	609a      	str	r2, [r3, #8]
 801eeb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801eeba:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eebe:	f383 8810 	msr	PRIMASK, r3
}
 801eec2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801eec4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eec6:	2280      	movs	r2, #128	@ 0x80
 801eec8:	2120      	movs	r1, #32
 801eeca:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801eecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801eed0:	2b01      	cmp	r3, #1
 801eed2:	d118      	bne.n	801ef06 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eed4:	f3ef 8310 	mrs	r3, PRIMASK
 801eed8:	60fb      	str	r3, [r7, #12]
  return(result);
 801eeda:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801eedc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801eede:	2301      	movs	r3, #1
 801eee0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eee2:	693b      	ldr	r3, [r7, #16]
 801eee4:	f383 8810 	msr	PRIMASK, r3
}
 801eee8:	46c0      	nop			@ (mov r8, r8)
 801eeea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eeec:	681b      	ldr	r3, [r3, #0]
 801eeee:	681a      	ldr	r2, [r3, #0]
 801eef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eef2:	681b      	ldr	r3, [r3, #0]
 801eef4:	2110      	movs	r1, #16
 801eef6:	438a      	bics	r2, r1
 801eef8:	601a      	str	r2, [r3, #0]
 801eefa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801eefc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eefe:	697b      	ldr	r3, [r7, #20]
 801ef00:	f383 8810 	msr	PRIMASK, r3
}
 801ef04:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ef06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef08:	2200      	movs	r2, #0
 801ef0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ef0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ef10:	2b01      	cmp	r3, #1
 801ef12:	d109      	bne.n	801ef28 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801ef14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef16:	22ac      	movs	r2, #172	@ 0xac
 801ef18:	589b      	ldr	r3, [r3, r2]
 801ef1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ef1c:	2158      	movs	r1, #88	@ 0x58
 801ef1e:	5a51      	ldrh	r1, [r2, r1]
 801ef20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ef22:	0010      	movs	r0, r2
 801ef24:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ef26:	e005      	b.n	801ef34 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801ef28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef2a:	2294      	movs	r2, #148	@ 0x94
 801ef2c:	589b      	ldr	r3, [r3, r2]
 801ef2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ef30:	0010      	movs	r0, r2
 801ef32:	4798      	blx	r3
}
 801ef34:	46c0      	nop			@ (mov r8, r8)
 801ef36:	46bd      	mov	sp, r7
 801ef38:	b014      	add	sp, #80	@ 0x50
 801ef3a:	bd80      	pop	{r7, pc}
 801ef3c:	fffffeff 	.word	0xfffffeff

0801ef40 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801ef40:	b580      	push	{r7, lr}
 801ef42:	b084      	sub	sp, #16
 801ef44:	af00      	add	r7, sp, #0
 801ef46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ef48:	687b      	ldr	r3, [r7, #4]
 801ef4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef4c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801ef4e:	68fb      	ldr	r3, [r7, #12]
 801ef50:	2201      	movs	r2, #1
 801ef52:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ef54:	68fb      	ldr	r3, [r7, #12]
 801ef56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ef58:	2b01      	cmp	r3, #1
 801ef5a:	d10b      	bne.n	801ef74 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801ef5c:	68fb      	ldr	r3, [r7, #12]
 801ef5e:	22ac      	movs	r2, #172	@ 0xac
 801ef60:	589b      	ldr	r3, [r3, r2]
 801ef62:	68fa      	ldr	r2, [r7, #12]
 801ef64:	2158      	movs	r1, #88	@ 0x58
 801ef66:	5a52      	ldrh	r2, [r2, r1]
 801ef68:	0852      	lsrs	r2, r2, #1
 801ef6a:	b291      	uxth	r1, r2
 801ef6c:	68fa      	ldr	r2, [r7, #12]
 801ef6e:	0010      	movs	r0, r2
 801ef70:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801ef72:	e005      	b.n	801ef80 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801ef74:	68fb      	ldr	r3, [r7, #12]
 801ef76:	2290      	movs	r2, #144	@ 0x90
 801ef78:	589b      	ldr	r3, [r3, r2]
 801ef7a:	68fa      	ldr	r2, [r7, #12]
 801ef7c:	0010      	movs	r0, r2
 801ef7e:	4798      	blx	r3
}
 801ef80:	46c0      	nop			@ (mov r8, r8)
 801ef82:	46bd      	mov	sp, r7
 801ef84:	b004      	add	sp, #16
 801ef86:	bd80      	pop	{r7, pc}

0801ef88 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801ef88:	b580      	push	{r7, lr}
 801ef8a:	b086      	sub	sp, #24
 801ef8c:	af00      	add	r7, sp, #0
 801ef8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ef90:	687b      	ldr	r3, [r7, #4]
 801ef92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ef94:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801ef96:	697b      	ldr	r3, [r7, #20]
 801ef98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801ef9a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801ef9c:	697b      	ldr	r3, [r7, #20]
 801ef9e:	2280      	movs	r2, #128	@ 0x80
 801efa0:	589b      	ldr	r3, [r3, r2]
 801efa2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801efa4:	697b      	ldr	r3, [r7, #20]
 801efa6:	681b      	ldr	r3, [r3, #0]
 801efa8:	689b      	ldr	r3, [r3, #8]
 801efaa:	2280      	movs	r2, #128	@ 0x80
 801efac:	4013      	ands	r3, r2
 801efae:	2b80      	cmp	r3, #128	@ 0x80
 801efb0:	d10a      	bne.n	801efc8 <UART_DMAError+0x40>
 801efb2:	693b      	ldr	r3, [r7, #16]
 801efb4:	2b21      	cmp	r3, #33	@ 0x21
 801efb6:	d107      	bne.n	801efc8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801efb8:	697b      	ldr	r3, [r7, #20]
 801efba:	2252      	movs	r2, #82	@ 0x52
 801efbc:	2100      	movs	r1, #0
 801efbe:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 801efc0:	697b      	ldr	r3, [r7, #20]
 801efc2:	0018      	movs	r0, r3
 801efc4:	f7ff fe3a 	bl	801ec3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801efc8:	697b      	ldr	r3, [r7, #20]
 801efca:	681b      	ldr	r3, [r3, #0]
 801efcc:	689b      	ldr	r3, [r3, #8]
 801efce:	2240      	movs	r2, #64	@ 0x40
 801efd0:	4013      	ands	r3, r2
 801efd2:	2b40      	cmp	r3, #64	@ 0x40
 801efd4:	d10a      	bne.n	801efec <UART_DMAError+0x64>
 801efd6:	68fb      	ldr	r3, [r7, #12]
 801efd8:	2b22      	cmp	r3, #34	@ 0x22
 801efda:	d107      	bne.n	801efec <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801efdc:	697b      	ldr	r3, [r7, #20]
 801efde:	225a      	movs	r2, #90	@ 0x5a
 801efe0:	2100      	movs	r1, #0
 801efe2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801efe4:	697b      	ldr	r3, [r7, #20]
 801efe6:	0018      	movs	r0, r3
 801efe8:	f7ff fe4c 	bl	801ec84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801efec:	697b      	ldr	r3, [r7, #20]
 801efee:	2284      	movs	r2, #132	@ 0x84
 801eff0:	589b      	ldr	r3, [r3, r2]
 801eff2:	2210      	movs	r2, #16
 801eff4:	431a      	orrs	r2, r3
 801eff6:	697b      	ldr	r3, [r7, #20]
 801eff8:	2184      	movs	r1, #132	@ 0x84
 801effa:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801effc:	697b      	ldr	r3, [r7, #20]
 801effe:	2298      	movs	r2, #152	@ 0x98
 801f000:	589b      	ldr	r3, [r3, r2]
 801f002:	697a      	ldr	r2, [r7, #20]
 801f004:	0010      	movs	r0, r2
 801f006:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f008:	46c0      	nop			@ (mov r8, r8)
 801f00a:	46bd      	mov	sp, r7
 801f00c:	b006      	add	sp, #24
 801f00e:	bd80      	pop	{r7, pc}

0801f010 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801f010:	b580      	push	{r7, lr}
 801f012:	b084      	sub	sp, #16
 801f014:	af00      	add	r7, sp, #0
 801f016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f018:	687b      	ldr	r3, [r7, #4]
 801f01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f01c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801f01e:	68fb      	ldr	r3, [r7, #12]
 801f020:	225a      	movs	r2, #90	@ 0x5a
 801f022:	2100      	movs	r1, #0
 801f024:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801f026:	68fb      	ldr	r3, [r7, #12]
 801f028:	2252      	movs	r2, #82	@ 0x52
 801f02a:	2100      	movs	r1, #0
 801f02c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801f02e:	68fb      	ldr	r3, [r7, #12]
 801f030:	2298      	movs	r2, #152	@ 0x98
 801f032:	589b      	ldr	r3, [r3, r2]
 801f034:	68fa      	ldr	r2, [r7, #12]
 801f036:	0010      	movs	r0, r2
 801f038:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f03a:	46c0      	nop			@ (mov r8, r8)
 801f03c:	46bd      	mov	sp, r7
 801f03e:	b004      	add	sp, #16
 801f040:	bd80      	pop	{r7, pc}

0801f042 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801f042:	b580      	push	{r7, lr}
 801f044:	b086      	sub	sp, #24
 801f046:	af00      	add	r7, sp, #0
 801f048:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f04a:	f3ef 8310 	mrs	r3, PRIMASK
 801f04e:	60bb      	str	r3, [r7, #8]
  return(result);
 801f050:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801f052:	617b      	str	r3, [r7, #20]
 801f054:	2301      	movs	r3, #1
 801f056:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f058:	68fb      	ldr	r3, [r7, #12]
 801f05a:	f383 8810 	msr	PRIMASK, r3
}
 801f05e:	46c0      	nop			@ (mov r8, r8)
 801f060:	687b      	ldr	r3, [r7, #4]
 801f062:	681b      	ldr	r3, [r3, #0]
 801f064:	681a      	ldr	r2, [r3, #0]
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	681b      	ldr	r3, [r3, #0]
 801f06a:	2140      	movs	r1, #64	@ 0x40
 801f06c:	438a      	bics	r2, r1
 801f06e:	601a      	str	r2, [r3, #0]
 801f070:	697b      	ldr	r3, [r7, #20]
 801f072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f074:	693b      	ldr	r3, [r7, #16]
 801f076:	f383 8810 	msr	PRIMASK, r3
}
 801f07a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	2220      	movs	r2, #32
 801f080:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801f082:	687b      	ldr	r3, [r7, #4]
 801f084:	2200      	movs	r2, #0
 801f086:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801f088:	687b      	ldr	r3, [r7, #4]
 801f08a:	228c      	movs	r2, #140	@ 0x8c
 801f08c:	589b      	ldr	r3, [r3, r2]
 801f08e:	687a      	ldr	r2, [r7, #4]
 801f090:	0010      	movs	r0, r2
 801f092:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f094:	46c0      	nop			@ (mov r8, r8)
 801f096:	46bd      	mov	sp, r7
 801f098:	b006      	add	sp, #24
 801f09a:	bd80      	pop	{r7, pc}

0801f09c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801f09c:	b580      	push	{r7, lr}
 801f09e:	b094      	sub	sp, #80	@ 0x50
 801f0a0:	af00      	add	r7, sp, #0
 801f0a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801f0a4:	204e      	movs	r0, #78	@ 0x4e
 801f0a6:	183b      	adds	r3, r7, r0
 801f0a8:	687a      	ldr	r2, [r7, #4]
 801f0aa:	215c      	movs	r1, #92	@ 0x5c
 801f0ac:	5a52      	ldrh	r2, [r2, r1]
 801f0ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f0b0:	687b      	ldr	r3, [r7, #4]
 801f0b2:	2280      	movs	r2, #128	@ 0x80
 801f0b4:	589b      	ldr	r3, [r3, r2]
 801f0b6:	2b22      	cmp	r3, #34	@ 0x22
 801f0b8:	d000      	beq.n	801f0bc <UART_RxISR_8BIT+0x20>
 801f0ba:	e0c2      	b.n	801f242 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f0bc:	687b      	ldr	r3, [r7, #4]
 801f0be:	681b      	ldr	r3, [r3, #0]
 801f0c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f0c2:	214c      	movs	r1, #76	@ 0x4c
 801f0c4:	187b      	adds	r3, r7, r1
 801f0c6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801f0c8:	187b      	adds	r3, r7, r1
 801f0ca:	881b      	ldrh	r3, [r3, #0]
 801f0cc:	b2da      	uxtb	r2, r3
 801f0ce:	183b      	adds	r3, r7, r0
 801f0d0:	881b      	ldrh	r3, [r3, #0]
 801f0d2:	b2d9      	uxtb	r1, r3
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f0d8:	400a      	ands	r2, r1
 801f0da:	b2d2      	uxtb	r2, r2
 801f0dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f0e2:	1c5a      	adds	r2, r3, #1
 801f0e4:	687b      	ldr	r3, [r7, #4]
 801f0e6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	225a      	movs	r2, #90	@ 0x5a
 801f0ec:	5a9b      	ldrh	r3, [r3, r2]
 801f0ee:	b29b      	uxth	r3, r3
 801f0f0:	3b01      	subs	r3, #1
 801f0f2:	b299      	uxth	r1, r3
 801f0f4:	687b      	ldr	r3, [r7, #4]
 801f0f6:	225a      	movs	r2, #90	@ 0x5a
 801f0f8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801f0fa:	687b      	ldr	r3, [r7, #4]
 801f0fc:	225a      	movs	r2, #90	@ 0x5a
 801f0fe:	5a9b      	ldrh	r3, [r3, r2]
 801f100:	b29b      	uxth	r3, r3
 801f102:	2b00      	cmp	r3, #0
 801f104:	d000      	beq.n	801f108 <UART_RxISR_8BIT+0x6c>
 801f106:	e0a4      	b.n	801f252 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f108:	f3ef 8310 	mrs	r3, PRIMASK
 801f10c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801f10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f110:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f112:	2301      	movs	r3, #1
 801f114:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f118:	f383 8810 	msr	PRIMASK, r3
}
 801f11c:	46c0      	nop			@ (mov r8, r8)
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	681a      	ldr	r2, [r3, #0]
 801f124:	687b      	ldr	r3, [r7, #4]
 801f126:	681b      	ldr	r3, [r3, #0]
 801f128:	494c      	ldr	r1, [pc, #304]	@ (801f25c <UART_RxISR_8BIT+0x1c0>)
 801f12a:	400a      	ands	r2, r1
 801f12c:	601a      	str	r2, [r3, #0]
 801f12e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f134:	f383 8810 	msr	PRIMASK, r3
}
 801f138:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f13a:	f3ef 8310 	mrs	r3, PRIMASK
 801f13e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 801f140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f142:	647b      	str	r3, [r7, #68]	@ 0x44
 801f144:	2301      	movs	r3, #1
 801f146:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f14a:	f383 8810 	msr	PRIMASK, r3
}
 801f14e:	46c0      	nop			@ (mov r8, r8)
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	681b      	ldr	r3, [r3, #0]
 801f154:	689a      	ldr	r2, [r3, #8]
 801f156:	687b      	ldr	r3, [r7, #4]
 801f158:	681b      	ldr	r3, [r3, #0]
 801f15a:	2101      	movs	r1, #1
 801f15c:	438a      	bics	r2, r1
 801f15e:	609a      	str	r2, [r3, #8]
 801f160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f162:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f166:	f383 8810 	msr	PRIMASK, r3
}
 801f16a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f16c:	687b      	ldr	r3, [r7, #4]
 801f16e:	2280      	movs	r2, #128	@ 0x80
 801f170:	2120      	movs	r1, #32
 801f172:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f174:	687b      	ldr	r3, [r7, #4]
 801f176:	2200      	movs	r2, #0
 801f178:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	2200      	movs	r2, #0
 801f17e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f180:	687b      	ldr	r3, [r7, #4]
 801f182:	681b      	ldr	r3, [r3, #0]
 801f184:	4a36      	ldr	r2, [pc, #216]	@ (801f260 <UART_RxISR_8BIT+0x1c4>)
 801f186:	4293      	cmp	r3, r2
 801f188:	d01f      	beq.n	801f1ca <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f18a:	687b      	ldr	r3, [r7, #4]
 801f18c:	681b      	ldr	r3, [r3, #0]
 801f18e:	685a      	ldr	r2, [r3, #4]
 801f190:	2380      	movs	r3, #128	@ 0x80
 801f192:	041b      	lsls	r3, r3, #16
 801f194:	4013      	ands	r3, r2
 801f196:	d018      	beq.n	801f1ca <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f198:	f3ef 8310 	mrs	r3, PRIMASK
 801f19c:	61bb      	str	r3, [r7, #24]
  return(result);
 801f19e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f1a0:	643b      	str	r3, [r7, #64]	@ 0x40
 801f1a2:	2301      	movs	r3, #1
 801f1a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1a6:	69fb      	ldr	r3, [r7, #28]
 801f1a8:	f383 8810 	msr	PRIMASK, r3
}
 801f1ac:	46c0      	nop			@ (mov r8, r8)
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	681b      	ldr	r3, [r3, #0]
 801f1b2:	681a      	ldr	r2, [r3, #0]
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	681b      	ldr	r3, [r3, #0]
 801f1b8:	492a      	ldr	r1, [pc, #168]	@ (801f264 <UART_RxISR_8BIT+0x1c8>)
 801f1ba:	400a      	ands	r2, r1
 801f1bc:	601a      	str	r2, [r3, #0]
 801f1be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f1c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1c2:	6a3b      	ldr	r3, [r7, #32]
 801f1c4:	f383 8810 	msr	PRIMASK, r3
}
 801f1c8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f1ce:	2b01      	cmp	r3, #1
 801f1d0:	d130      	bne.n	801f234 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	2200      	movs	r2, #0
 801f1d6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f1d8:	f3ef 8310 	mrs	r3, PRIMASK
 801f1dc:	60fb      	str	r3, [r7, #12]
  return(result);
 801f1de:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f1e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f1e2:	2301      	movs	r3, #1
 801f1e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f1e6:	693b      	ldr	r3, [r7, #16]
 801f1e8:	f383 8810 	msr	PRIMASK, r3
}
 801f1ec:	46c0      	nop			@ (mov r8, r8)
 801f1ee:	687b      	ldr	r3, [r7, #4]
 801f1f0:	681b      	ldr	r3, [r3, #0]
 801f1f2:	681a      	ldr	r2, [r3, #0]
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	681b      	ldr	r3, [r3, #0]
 801f1f8:	2110      	movs	r1, #16
 801f1fa:	438a      	bics	r2, r1
 801f1fc:	601a      	str	r2, [r3, #0]
 801f1fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f200:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f202:	697b      	ldr	r3, [r7, #20]
 801f204:	f383 8810 	msr	PRIMASK, r3
}
 801f208:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f20a:	687b      	ldr	r3, [r7, #4]
 801f20c:	681b      	ldr	r3, [r3, #0]
 801f20e:	69db      	ldr	r3, [r3, #28]
 801f210:	2210      	movs	r2, #16
 801f212:	4013      	ands	r3, r2
 801f214:	2b10      	cmp	r3, #16
 801f216:	d103      	bne.n	801f220 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f218:	687b      	ldr	r3, [r7, #4]
 801f21a:	681b      	ldr	r3, [r3, #0]
 801f21c:	2210      	movs	r2, #16
 801f21e:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	22ac      	movs	r2, #172	@ 0xac
 801f224:	589b      	ldr	r3, [r3, r2]
 801f226:	687a      	ldr	r2, [r7, #4]
 801f228:	2158      	movs	r1, #88	@ 0x58
 801f22a:	5a51      	ldrh	r1, [r2, r1]
 801f22c:	687a      	ldr	r2, [r7, #4]
 801f22e:	0010      	movs	r0, r2
 801f230:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f232:	e00e      	b.n	801f252 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f234:	687b      	ldr	r3, [r7, #4]
 801f236:	2294      	movs	r2, #148	@ 0x94
 801f238:	589b      	ldr	r3, [r3, r2]
 801f23a:	687a      	ldr	r2, [r7, #4]
 801f23c:	0010      	movs	r0, r2
 801f23e:	4798      	blx	r3
}
 801f240:	e007      	b.n	801f252 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f242:	687b      	ldr	r3, [r7, #4]
 801f244:	681b      	ldr	r3, [r3, #0]
 801f246:	699a      	ldr	r2, [r3, #24]
 801f248:	687b      	ldr	r3, [r7, #4]
 801f24a:	681b      	ldr	r3, [r3, #0]
 801f24c:	2108      	movs	r1, #8
 801f24e:	430a      	orrs	r2, r1
 801f250:	619a      	str	r2, [r3, #24]
}
 801f252:	46c0      	nop			@ (mov r8, r8)
 801f254:	46bd      	mov	sp, r7
 801f256:	b014      	add	sp, #80	@ 0x50
 801f258:	bd80      	pop	{r7, pc}
 801f25a:	46c0      	nop			@ (mov r8, r8)
 801f25c:	fffffedf 	.word	0xfffffedf
 801f260:	40004800 	.word	0x40004800
 801f264:	fbffffff 	.word	0xfbffffff

0801f268 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801f268:	b580      	push	{r7, lr}
 801f26a:	b094      	sub	sp, #80	@ 0x50
 801f26c:	af00      	add	r7, sp, #0
 801f26e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801f270:	204e      	movs	r0, #78	@ 0x4e
 801f272:	183b      	adds	r3, r7, r0
 801f274:	687a      	ldr	r2, [r7, #4]
 801f276:	215c      	movs	r1, #92	@ 0x5c
 801f278:	5a52      	ldrh	r2, [r2, r1]
 801f27a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f27c:	687b      	ldr	r3, [r7, #4]
 801f27e:	2280      	movs	r2, #128	@ 0x80
 801f280:	589b      	ldr	r3, [r3, r2]
 801f282:	2b22      	cmp	r3, #34	@ 0x22
 801f284:	d000      	beq.n	801f288 <UART_RxISR_16BIT+0x20>
 801f286:	e0c2      	b.n	801f40e <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f288:	687b      	ldr	r3, [r7, #4]
 801f28a:	681b      	ldr	r3, [r3, #0]
 801f28c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f28e:	214c      	movs	r1, #76	@ 0x4c
 801f290:	187b      	adds	r3, r7, r1
 801f292:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801f294:	687b      	ldr	r3, [r7, #4]
 801f296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f298:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801f29a:	187b      	adds	r3, r7, r1
 801f29c:	183a      	adds	r2, r7, r0
 801f29e:	881b      	ldrh	r3, [r3, #0]
 801f2a0:	8812      	ldrh	r2, [r2, #0]
 801f2a2:	4013      	ands	r3, r2
 801f2a4:	b29a      	uxth	r2, r3
 801f2a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801f2a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801f2aa:	687b      	ldr	r3, [r7, #4]
 801f2ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f2ae:	1c9a      	adds	r2, r3, #2
 801f2b0:	687b      	ldr	r3, [r7, #4]
 801f2b2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801f2b4:	687b      	ldr	r3, [r7, #4]
 801f2b6:	225a      	movs	r2, #90	@ 0x5a
 801f2b8:	5a9b      	ldrh	r3, [r3, r2]
 801f2ba:	b29b      	uxth	r3, r3
 801f2bc:	3b01      	subs	r3, #1
 801f2be:	b299      	uxth	r1, r3
 801f2c0:	687b      	ldr	r3, [r7, #4]
 801f2c2:	225a      	movs	r2, #90	@ 0x5a
 801f2c4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801f2c6:	687b      	ldr	r3, [r7, #4]
 801f2c8:	225a      	movs	r2, #90	@ 0x5a
 801f2ca:	5a9b      	ldrh	r3, [r3, r2]
 801f2cc:	b29b      	uxth	r3, r3
 801f2ce:	2b00      	cmp	r3, #0
 801f2d0:	d000      	beq.n	801f2d4 <UART_RxISR_16BIT+0x6c>
 801f2d2:	e0a4      	b.n	801f41e <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f2d4:	f3ef 8310 	mrs	r3, PRIMASK
 801f2d8:	623b      	str	r3, [r7, #32]
  return(result);
 801f2da:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f2dc:	647b      	str	r3, [r7, #68]	@ 0x44
 801f2de:	2301      	movs	r3, #1
 801f2e0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2e4:	f383 8810 	msr	PRIMASK, r3
}
 801f2e8:	46c0      	nop			@ (mov r8, r8)
 801f2ea:	687b      	ldr	r3, [r7, #4]
 801f2ec:	681b      	ldr	r3, [r3, #0]
 801f2ee:	681a      	ldr	r2, [r3, #0]
 801f2f0:	687b      	ldr	r3, [r7, #4]
 801f2f2:	681b      	ldr	r3, [r3, #0]
 801f2f4:	494c      	ldr	r1, [pc, #304]	@ (801f428 <UART_RxISR_16BIT+0x1c0>)
 801f2f6:	400a      	ands	r2, r1
 801f2f8:	601a      	str	r2, [r3, #0]
 801f2fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f2fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f300:	f383 8810 	msr	PRIMASK, r3
}
 801f304:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f306:	f3ef 8310 	mrs	r3, PRIMASK
 801f30a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801f30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f30e:	643b      	str	r3, [r7, #64]	@ 0x40
 801f310:	2301      	movs	r3, #1
 801f312:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f316:	f383 8810 	msr	PRIMASK, r3
}
 801f31a:	46c0      	nop			@ (mov r8, r8)
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	689a      	ldr	r2, [r3, #8]
 801f322:	687b      	ldr	r3, [r7, #4]
 801f324:	681b      	ldr	r3, [r3, #0]
 801f326:	2101      	movs	r1, #1
 801f328:	438a      	bics	r2, r1
 801f32a:	609a      	str	r2, [r3, #8]
 801f32c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f32e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f332:	f383 8810 	msr	PRIMASK, r3
}
 801f336:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f338:	687b      	ldr	r3, [r7, #4]
 801f33a:	2280      	movs	r2, #128	@ 0x80
 801f33c:	2120      	movs	r1, #32
 801f33e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f340:	687b      	ldr	r3, [r7, #4]
 801f342:	2200      	movs	r2, #0
 801f344:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f346:	687b      	ldr	r3, [r7, #4]
 801f348:	2200      	movs	r2, #0
 801f34a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801f34c:	687b      	ldr	r3, [r7, #4]
 801f34e:	681b      	ldr	r3, [r3, #0]
 801f350:	4a36      	ldr	r2, [pc, #216]	@ (801f42c <UART_RxISR_16BIT+0x1c4>)
 801f352:	4293      	cmp	r3, r2
 801f354:	d01f      	beq.n	801f396 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801f356:	687b      	ldr	r3, [r7, #4]
 801f358:	681b      	ldr	r3, [r3, #0]
 801f35a:	685a      	ldr	r2, [r3, #4]
 801f35c:	2380      	movs	r3, #128	@ 0x80
 801f35e:	041b      	lsls	r3, r3, #16
 801f360:	4013      	ands	r3, r2
 801f362:	d018      	beq.n	801f396 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f364:	f3ef 8310 	mrs	r3, PRIMASK
 801f368:	617b      	str	r3, [r7, #20]
  return(result);
 801f36a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801f36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f36e:	2301      	movs	r3, #1
 801f370:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f372:	69bb      	ldr	r3, [r7, #24]
 801f374:	f383 8810 	msr	PRIMASK, r3
}
 801f378:	46c0      	nop			@ (mov r8, r8)
 801f37a:	687b      	ldr	r3, [r7, #4]
 801f37c:	681b      	ldr	r3, [r3, #0]
 801f37e:	681a      	ldr	r2, [r3, #0]
 801f380:	687b      	ldr	r3, [r7, #4]
 801f382:	681b      	ldr	r3, [r3, #0]
 801f384:	492a      	ldr	r1, [pc, #168]	@ (801f430 <UART_RxISR_16BIT+0x1c8>)
 801f386:	400a      	ands	r2, r1
 801f388:	601a      	str	r2, [r3, #0]
 801f38a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f38c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f38e:	69fb      	ldr	r3, [r7, #28]
 801f390:	f383 8810 	msr	PRIMASK, r3
}
 801f394:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f396:	687b      	ldr	r3, [r7, #4]
 801f398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f39a:	2b01      	cmp	r3, #1
 801f39c:	d130      	bne.n	801f400 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f39e:	687b      	ldr	r3, [r7, #4]
 801f3a0:	2200      	movs	r2, #0
 801f3a2:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f3a4:	f3ef 8310 	mrs	r3, PRIMASK
 801f3a8:	60bb      	str	r3, [r7, #8]
  return(result);
 801f3aa:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f3ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f3ae:	2301      	movs	r3, #1
 801f3b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f3b2:	68fb      	ldr	r3, [r7, #12]
 801f3b4:	f383 8810 	msr	PRIMASK, r3
}
 801f3b8:	46c0      	nop			@ (mov r8, r8)
 801f3ba:	687b      	ldr	r3, [r7, #4]
 801f3bc:	681b      	ldr	r3, [r3, #0]
 801f3be:	681a      	ldr	r2, [r3, #0]
 801f3c0:	687b      	ldr	r3, [r7, #4]
 801f3c2:	681b      	ldr	r3, [r3, #0]
 801f3c4:	2110      	movs	r1, #16
 801f3c6:	438a      	bics	r2, r1
 801f3c8:	601a      	str	r2, [r3, #0]
 801f3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f3cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f3ce:	693b      	ldr	r3, [r7, #16]
 801f3d0:	f383 8810 	msr	PRIMASK, r3
}
 801f3d4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801f3d6:	687b      	ldr	r3, [r7, #4]
 801f3d8:	681b      	ldr	r3, [r3, #0]
 801f3da:	69db      	ldr	r3, [r3, #28]
 801f3dc:	2210      	movs	r2, #16
 801f3de:	4013      	ands	r3, r2
 801f3e0:	2b10      	cmp	r3, #16
 801f3e2:	d103      	bne.n	801f3ec <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801f3e4:	687b      	ldr	r3, [r7, #4]
 801f3e6:	681b      	ldr	r3, [r3, #0]
 801f3e8:	2210      	movs	r2, #16
 801f3ea:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801f3ec:	687b      	ldr	r3, [r7, #4]
 801f3ee:	22ac      	movs	r2, #172	@ 0xac
 801f3f0:	589b      	ldr	r3, [r3, r2]
 801f3f2:	687a      	ldr	r2, [r7, #4]
 801f3f4:	2158      	movs	r1, #88	@ 0x58
 801f3f6:	5a51      	ldrh	r1, [r2, r1]
 801f3f8:	687a      	ldr	r2, [r7, #4]
 801f3fa:	0010      	movs	r0, r2
 801f3fc:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801f3fe:	e00e      	b.n	801f41e <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 801f400:	687b      	ldr	r3, [r7, #4]
 801f402:	2294      	movs	r2, #148	@ 0x94
 801f404:	589b      	ldr	r3, [r3, r2]
 801f406:	687a      	ldr	r2, [r7, #4]
 801f408:	0010      	movs	r0, r2
 801f40a:	4798      	blx	r3
}
 801f40c:	e007      	b.n	801f41e <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801f40e:	687b      	ldr	r3, [r7, #4]
 801f410:	681b      	ldr	r3, [r3, #0]
 801f412:	699a      	ldr	r2, [r3, #24]
 801f414:	687b      	ldr	r3, [r7, #4]
 801f416:	681b      	ldr	r3, [r3, #0]
 801f418:	2108      	movs	r1, #8
 801f41a:	430a      	orrs	r2, r1
 801f41c:	619a      	str	r2, [r3, #24]
}
 801f41e:	46c0      	nop			@ (mov r8, r8)
 801f420:	46bd      	mov	sp, r7
 801f422:	b014      	add	sp, #80	@ 0x50
 801f424:	bd80      	pop	{r7, pc}
 801f426:	46c0      	nop			@ (mov r8, r8)
 801f428:	fffffedf 	.word	0xfffffedf
 801f42c:	40004800 	.word	0x40004800
 801f430:	fbffffff 	.word	0xfbffffff

0801f434 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801f434:	b580      	push	{r7, lr}
 801f436:	b082      	sub	sp, #8
 801f438:	af00      	add	r7, sp, #0
 801f43a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801f43c:	46c0      	nop			@ (mov r8, r8)
 801f43e:	46bd      	mov	sp, r7
 801f440:	b002      	add	sp, #8
 801f442:	bd80      	pop	{r7, pc}

0801f444 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801f444:	b580      	push	{r7, lr}
 801f446:	b084      	sub	sp, #16
 801f448:	af00      	add	r7, sp, #0
 801f44a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f44c:	687b      	ldr	r3, [r7, #4]
 801f44e:	2244      	movs	r2, #68	@ 0x44
 801f450:	2100      	movs	r1, #0
 801f452:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f454:	4b05      	ldr	r3, [pc, #20]	@ (801f46c <USB_EnableGlobalInt+0x28>)
 801f456:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801f458:	68fb      	ldr	r3, [r7, #12]
 801f45a:	b299      	uxth	r1, r3
 801f45c:	687b      	ldr	r3, [r7, #4]
 801f45e:	2240      	movs	r2, #64	@ 0x40
 801f460:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f462:	2300      	movs	r3, #0
}
 801f464:	0018      	movs	r0, r3
 801f466:	46bd      	mov	sp, r7
 801f468:	b004      	add	sp, #16
 801f46a:	bd80      	pop	{r7, pc}
 801f46c:	0000bf80 	.word	0x0000bf80

0801f470 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801f470:	b580      	push	{r7, lr}
 801f472:	b084      	sub	sp, #16
 801f474:	af00      	add	r7, sp, #0
 801f476:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801f478:	4b09      	ldr	r3, [pc, #36]	@ (801f4a0 <USB_DisableGlobalInt+0x30>)
 801f47a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801f47c:	687b      	ldr	r3, [r7, #4]
 801f47e:	2240      	movs	r2, #64	@ 0x40
 801f480:	5a9b      	ldrh	r3, [r3, r2]
 801f482:	b29b      	uxth	r3, r3
 801f484:	68fa      	ldr	r2, [r7, #12]
 801f486:	b292      	uxth	r2, r2
 801f488:	43d2      	mvns	r2, r2
 801f48a:	b292      	uxth	r2, r2
 801f48c:	4013      	ands	r3, r2
 801f48e:	b299      	uxth	r1, r3
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	2240      	movs	r2, #64	@ 0x40
 801f494:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f496:	2300      	movs	r3, #0
}
 801f498:	0018      	movs	r0, r3
 801f49a:	46bd      	mov	sp, r7
 801f49c:	b004      	add	sp, #16
 801f49e:	bd80      	pop	{r7, pc}
 801f4a0:	0000bf80 	.word	0x0000bf80

0801f4a4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801f4a4:	b084      	sub	sp, #16
 801f4a6:	b590      	push	{r4, r7, lr}
 801f4a8:	b083      	sub	sp, #12
 801f4aa:	af00      	add	r7, sp, #0
 801f4ac:	6078      	str	r0, [r7, #4]
 801f4ae:	2004      	movs	r0, #4
 801f4b0:	2410      	movs	r4, #16
 801f4b2:	1900      	adds	r0, r0, r4
 801f4b4:	2408      	movs	r4, #8
 801f4b6:	46a4      	mov	ip, r4
 801f4b8:	44bc      	add	ip, r7
 801f4ba:	4460      	add	r0, ip
 801f4bc:	6001      	str	r1, [r0, #0]
 801f4be:	6042      	str	r2, [r0, #4]
 801f4c0:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801f4c2:	687b      	ldr	r3, [r7, #4]
 801f4c4:	2240      	movs	r2, #64	@ 0x40
 801f4c6:	2101      	movs	r1, #1
 801f4c8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	2240      	movs	r2, #64	@ 0x40
 801f4ce:	2100      	movs	r1, #0
 801f4d0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801f4d2:	687b      	ldr	r3, [r7, #4]
 801f4d4:	2244      	movs	r2, #68	@ 0x44
 801f4d6:	2100      	movs	r1, #0
 801f4d8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801f4da:	687b      	ldr	r3, [r7, #4]
 801f4dc:	2250      	movs	r2, #80	@ 0x50
 801f4de:	2100      	movs	r1, #0
 801f4e0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801f4e2:	2300      	movs	r3, #0
}
 801f4e4:	0018      	movs	r0, r3
 801f4e6:	46bd      	mov	sp, r7
 801f4e8:	b003      	add	sp, #12
 801f4ea:	bc90      	pop	{r4, r7}
 801f4ec:	bc08      	pop	{r3}
 801f4ee:	b004      	add	sp, #16
 801f4f0:	4718      	bx	r3
	...

0801f4f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801f4f4:	b580      	push	{r7, lr}
 801f4f6:	b09c      	sub	sp, #112	@ 0x70
 801f4f8:	af00      	add	r7, sp, #0
 801f4fa:	6078      	str	r0, [r7, #4]
 801f4fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801f4fe:	236f      	movs	r3, #111	@ 0x6f
 801f500:	18fb      	adds	r3, r7, r3
 801f502:	2200      	movs	r2, #0
 801f504:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801f506:	687a      	ldr	r2, [r7, #4]
 801f508:	683b      	ldr	r3, [r7, #0]
 801f50a:	781b      	ldrb	r3, [r3, #0]
 801f50c:	009b      	lsls	r3, r3, #2
 801f50e:	18d3      	adds	r3, r2, r3
 801f510:	881b      	ldrh	r3, [r3, #0]
 801f512:	b29a      	uxth	r2, r3
 801f514:	236c      	movs	r3, #108	@ 0x6c
 801f516:	18fb      	adds	r3, r7, r3
 801f518:	49a3      	ldr	r1, [pc, #652]	@ (801f7a8 <USB_ActivateEndpoint+0x2b4>)
 801f51a:	400a      	ands	r2, r1
 801f51c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801f51e:	683b      	ldr	r3, [r7, #0]
 801f520:	78db      	ldrb	r3, [r3, #3]
 801f522:	2b03      	cmp	r3, #3
 801f524:	d017      	beq.n	801f556 <USB_ActivateEndpoint+0x62>
 801f526:	dc28      	bgt.n	801f57a <USB_ActivateEndpoint+0x86>
 801f528:	2b02      	cmp	r3, #2
 801f52a:	d00e      	beq.n	801f54a <USB_ActivateEndpoint+0x56>
 801f52c:	dc25      	bgt.n	801f57a <USB_ActivateEndpoint+0x86>
 801f52e:	2b00      	cmp	r3, #0
 801f530:	d002      	beq.n	801f538 <USB_ActivateEndpoint+0x44>
 801f532:	2b01      	cmp	r3, #1
 801f534:	d018      	beq.n	801f568 <USB_ActivateEndpoint+0x74>
 801f536:	e020      	b.n	801f57a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801f538:	226c      	movs	r2, #108	@ 0x6c
 801f53a:	18bb      	adds	r3, r7, r2
 801f53c:	18ba      	adds	r2, r7, r2
 801f53e:	8812      	ldrh	r2, [r2, #0]
 801f540:	2180      	movs	r1, #128	@ 0x80
 801f542:	0089      	lsls	r1, r1, #2
 801f544:	430a      	orrs	r2, r1
 801f546:	801a      	strh	r2, [r3, #0]
      break;
 801f548:	e01c      	b.n	801f584 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801f54a:	226c      	movs	r2, #108	@ 0x6c
 801f54c:	18bb      	adds	r3, r7, r2
 801f54e:	18ba      	adds	r2, r7, r2
 801f550:	8812      	ldrh	r2, [r2, #0]
 801f552:	801a      	strh	r2, [r3, #0]
      break;
 801f554:	e016      	b.n	801f584 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801f556:	226c      	movs	r2, #108	@ 0x6c
 801f558:	18bb      	adds	r3, r7, r2
 801f55a:	18ba      	adds	r2, r7, r2
 801f55c:	8812      	ldrh	r2, [r2, #0]
 801f55e:	21c0      	movs	r1, #192	@ 0xc0
 801f560:	00c9      	lsls	r1, r1, #3
 801f562:	430a      	orrs	r2, r1
 801f564:	801a      	strh	r2, [r3, #0]
      break;
 801f566:	e00d      	b.n	801f584 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801f568:	226c      	movs	r2, #108	@ 0x6c
 801f56a:	18bb      	adds	r3, r7, r2
 801f56c:	18ba      	adds	r2, r7, r2
 801f56e:	8812      	ldrh	r2, [r2, #0]
 801f570:	2180      	movs	r1, #128	@ 0x80
 801f572:	00c9      	lsls	r1, r1, #3
 801f574:	430a      	orrs	r2, r1
 801f576:	801a      	strh	r2, [r3, #0]
      break;
 801f578:	e004      	b.n	801f584 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801f57a:	236f      	movs	r3, #111	@ 0x6f
 801f57c:	18fb      	adds	r3, r7, r3
 801f57e:	2201      	movs	r2, #1
 801f580:	701a      	strb	r2, [r3, #0]
      break;
 801f582:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801f584:	687a      	ldr	r2, [r7, #4]
 801f586:	683b      	ldr	r3, [r7, #0]
 801f588:	781b      	ldrb	r3, [r3, #0]
 801f58a:	009b      	lsls	r3, r3, #2
 801f58c:	18d3      	adds	r3, r2, r3
 801f58e:	226c      	movs	r2, #108	@ 0x6c
 801f590:	18ba      	adds	r2, r7, r2
 801f592:	8812      	ldrh	r2, [r2, #0]
 801f594:	4985      	ldr	r1, [pc, #532]	@ (801f7ac <USB_ActivateEndpoint+0x2b8>)
 801f596:	430a      	orrs	r2, r1
 801f598:	b292      	uxth	r2, r2
 801f59a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801f59c:	687a      	ldr	r2, [r7, #4]
 801f59e:	683b      	ldr	r3, [r7, #0]
 801f5a0:	781b      	ldrb	r3, [r3, #0]
 801f5a2:	009b      	lsls	r3, r3, #2
 801f5a4:	18d3      	adds	r3, r2, r3
 801f5a6:	881b      	ldrh	r3, [r3, #0]
 801f5a8:	b29b      	uxth	r3, r3
 801f5aa:	b21b      	sxth	r3, r3
 801f5ac:	4a80      	ldr	r2, [pc, #512]	@ (801f7b0 <USB_ActivateEndpoint+0x2bc>)
 801f5ae:	4013      	ands	r3, r2
 801f5b0:	b21a      	sxth	r2, r3
 801f5b2:	683b      	ldr	r3, [r7, #0]
 801f5b4:	781b      	ldrb	r3, [r3, #0]
 801f5b6:	b21b      	sxth	r3, r3
 801f5b8:	4313      	orrs	r3, r2
 801f5ba:	b21a      	sxth	r2, r3
 801f5bc:	2166      	movs	r1, #102	@ 0x66
 801f5be:	187b      	adds	r3, r7, r1
 801f5c0:	801a      	strh	r2, [r3, #0]
 801f5c2:	687a      	ldr	r2, [r7, #4]
 801f5c4:	683b      	ldr	r3, [r7, #0]
 801f5c6:	781b      	ldrb	r3, [r3, #0]
 801f5c8:	009b      	lsls	r3, r3, #2
 801f5ca:	18d3      	adds	r3, r2, r3
 801f5cc:	187a      	adds	r2, r7, r1
 801f5ce:	8812      	ldrh	r2, [r2, #0]
 801f5d0:	4976      	ldr	r1, [pc, #472]	@ (801f7ac <USB_ActivateEndpoint+0x2b8>)
 801f5d2:	430a      	orrs	r2, r1
 801f5d4:	b292      	uxth	r2, r2
 801f5d6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801f5d8:	683b      	ldr	r3, [r7, #0]
 801f5da:	7b1b      	ldrb	r3, [r3, #12]
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	d000      	beq.n	801f5e2 <USB_ActivateEndpoint+0xee>
 801f5e0:	e178      	b.n	801f8d4 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 801f5e2:	683b      	ldr	r3, [r7, #0]
 801f5e4:	785b      	ldrb	r3, [r3, #1]
 801f5e6:	2b00      	cmp	r3, #0
 801f5e8:	d100      	bne.n	801f5ec <USB_ActivateEndpoint+0xf8>
 801f5ea:	e07a      	b.n	801f6e2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	61bb      	str	r3, [r7, #24]
 801f5f0:	687b      	ldr	r3, [r7, #4]
 801f5f2:	2250      	movs	r2, #80	@ 0x50
 801f5f4:	5a9b      	ldrh	r3, [r3, r2]
 801f5f6:	b29b      	uxth	r3, r3
 801f5f8:	001a      	movs	r2, r3
 801f5fa:	69bb      	ldr	r3, [r7, #24]
 801f5fc:	189b      	adds	r3, r3, r2
 801f5fe:	61bb      	str	r3, [r7, #24]
 801f600:	683b      	ldr	r3, [r7, #0]
 801f602:	781b      	ldrb	r3, [r3, #0]
 801f604:	00da      	lsls	r2, r3, #3
 801f606:	69bb      	ldr	r3, [r7, #24]
 801f608:	18d3      	adds	r3, r2, r3
 801f60a:	2280      	movs	r2, #128	@ 0x80
 801f60c:	00d2      	lsls	r2, r2, #3
 801f60e:	4694      	mov	ip, r2
 801f610:	4463      	add	r3, ip
 801f612:	617b      	str	r3, [r7, #20]
 801f614:	683b      	ldr	r3, [r7, #0]
 801f616:	88db      	ldrh	r3, [r3, #6]
 801f618:	085b      	lsrs	r3, r3, #1
 801f61a:	b29b      	uxth	r3, r3
 801f61c:	18db      	adds	r3, r3, r3
 801f61e:	b29a      	uxth	r2, r3
 801f620:	697b      	ldr	r3, [r7, #20]
 801f622:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f624:	687a      	ldr	r2, [r7, #4]
 801f626:	683b      	ldr	r3, [r7, #0]
 801f628:	781b      	ldrb	r3, [r3, #0]
 801f62a:	009b      	lsls	r3, r3, #2
 801f62c:	18d2      	adds	r2, r2, r3
 801f62e:	2112      	movs	r1, #18
 801f630:	187b      	adds	r3, r7, r1
 801f632:	8812      	ldrh	r2, [r2, #0]
 801f634:	801a      	strh	r2, [r3, #0]
 801f636:	187b      	adds	r3, r7, r1
 801f638:	881b      	ldrh	r3, [r3, #0]
 801f63a:	2240      	movs	r2, #64	@ 0x40
 801f63c:	4013      	ands	r3, r2
 801f63e:	d016      	beq.n	801f66e <USB_ActivateEndpoint+0x17a>
 801f640:	687a      	ldr	r2, [r7, #4]
 801f642:	683b      	ldr	r3, [r7, #0]
 801f644:	781b      	ldrb	r3, [r3, #0]
 801f646:	009b      	lsls	r3, r3, #2
 801f648:	18d3      	adds	r3, r2, r3
 801f64a:	881b      	ldrh	r3, [r3, #0]
 801f64c:	b29a      	uxth	r2, r3
 801f64e:	2010      	movs	r0, #16
 801f650:	183b      	adds	r3, r7, r0
 801f652:	4957      	ldr	r1, [pc, #348]	@ (801f7b0 <USB_ActivateEndpoint+0x2bc>)
 801f654:	400a      	ands	r2, r1
 801f656:	801a      	strh	r2, [r3, #0]
 801f658:	687a      	ldr	r2, [r7, #4]
 801f65a:	683b      	ldr	r3, [r7, #0]
 801f65c:	781b      	ldrb	r3, [r3, #0]
 801f65e:	009b      	lsls	r3, r3, #2
 801f660:	18d3      	adds	r3, r2, r3
 801f662:	183a      	adds	r2, r7, r0
 801f664:	8812      	ldrh	r2, [r2, #0]
 801f666:	4953      	ldr	r1, [pc, #332]	@ (801f7b4 <USB_ActivateEndpoint+0x2c0>)
 801f668:	430a      	orrs	r2, r1
 801f66a:	b292      	uxth	r2, r2
 801f66c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801f66e:	683b      	ldr	r3, [r7, #0]
 801f670:	78db      	ldrb	r3, [r3, #3]
 801f672:	2b01      	cmp	r3, #1
 801f674:	d01d      	beq.n	801f6b2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801f676:	687a      	ldr	r2, [r7, #4]
 801f678:	683b      	ldr	r3, [r7, #0]
 801f67a:	781b      	ldrb	r3, [r3, #0]
 801f67c:	009b      	lsls	r3, r3, #2
 801f67e:	18d3      	adds	r3, r2, r3
 801f680:	881b      	ldrh	r3, [r3, #0]
 801f682:	b29a      	uxth	r2, r3
 801f684:	200c      	movs	r0, #12
 801f686:	183b      	adds	r3, r7, r0
 801f688:	494b      	ldr	r1, [pc, #300]	@ (801f7b8 <USB_ActivateEndpoint+0x2c4>)
 801f68a:	400a      	ands	r2, r1
 801f68c:	801a      	strh	r2, [r3, #0]
 801f68e:	183b      	adds	r3, r7, r0
 801f690:	183a      	adds	r2, r7, r0
 801f692:	8812      	ldrh	r2, [r2, #0]
 801f694:	2120      	movs	r1, #32
 801f696:	404a      	eors	r2, r1
 801f698:	801a      	strh	r2, [r3, #0]
 801f69a:	687a      	ldr	r2, [r7, #4]
 801f69c:	683b      	ldr	r3, [r7, #0]
 801f69e:	781b      	ldrb	r3, [r3, #0]
 801f6a0:	009b      	lsls	r3, r3, #2
 801f6a2:	18d3      	adds	r3, r2, r3
 801f6a4:	183a      	adds	r2, r7, r0
 801f6a6:	8812      	ldrh	r2, [r2, #0]
 801f6a8:	4940      	ldr	r1, [pc, #256]	@ (801f7ac <USB_ActivateEndpoint+0x2b8>)
 801f6aa:	430a      	orrs	r2, r1
 801f6ac:	b292      	uxth	r2, r2
 801f6ae:	801a      	strh	r2, [r3, #0]
 801f6b0:	e2b4      	b.n	801fc1c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801f6b2:	687a      	ldr	r2, [r7, #4]
 801f6b4:	683b      	ldr	r3, [r7, #0]
 801f6b6:	781b      	ldrb	r3, [r3, #0]
 801f6b8:	009b      	lsls	r3, r3, #2
 801f6ba:	18d3      	adds	r3, r2, r3
 801f6bc:	881b      	ldrh	r3, [r3, #0]
 801f6be:	b29a      	uxth	r2, r3
 801f6c0:	200e      	movs	r0, #14
 801f6c2:	183b      	adds	r3, r7, r0
 801f6c4:	493c      	ldr	r1, [pc, #240]	@ (801f7b8 <USB_ActivateEndpoint+0x2c4>)
 801f6c6:	400a      	ands	r2, r1
 801f6c8:	801a      	strh	r2, [r3, #0]
 801f6ca:	687a      	ldr	r2, [r7, #4]
 801f6cc:	683b      	ldr	r3, [r7, #0]
 801f6ce:	781b      	ldrb	r3, [r3, #0]
 801f6d0:	009b      	lsls	r3, r3, #2
 801f6d2:	18d3      	adds	r3, r2, r3
 801f6d4:	183a      	adds	r2, r7, r0
 801f6d6:	8812      	ldrh	r2, [r2, #0]
 801f6d8:	4934      	ldr	r1, [pc, #208]	@ (801f7ac <USB_ActivateEndpoint+0x2b8>)
 801f6da:	430a      	orrs	r2, r1
 801f6dc:	b292      	uxth	r2, r2
 801f6de:	801a      	strh	r2, [r3, #0]
 801f6e0:	e29c      	b.n	801fc1c <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	633b      	str	r3, [r7, #48]	@ 0x30
 801f6e6:	687b      	ldr	r3, [r7, #4]
 801f6e8:	2250      	movs	r2, #80	@ 0x50
 801f6ea:	5a9b      	ldrh	r3, [r3, r2]
 801f6ec:	b29b      	uxth	r3, r3
 801f6ee:	001a      	movs	r2, r3
 801f6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f6f2:	189b      	adds	r3, r3, r2
 801f6f4:	633b      	str	r3, [r7, #48]	@ 0x30
 801f6f6:	683b      	ldr	r3, [r7, #0]
 801f6f8:	781b      	ldrb	r3, [r3, #0]
 801f6fa:	00da      	lsls	r2, r3, #3
 801f6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f6fe:	18d3      	adds	r3, r2, r3
 801f700:	4a2e      	ldr	r2, [pc, #184]	@ (801f7bc <USB_ActivateEndpoint+0x2c8>)
 801f702:	4694      	mov	ip, r2
 801f704:	4463      	add	r3, ip
 801f706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f708:	683b      	ldr	r3, [r7, #0]
 801f70a:	88db      	ldrh	r3, [r3, #6]
 801f70c:	085b      	lsrs	r3, r3, #1
 801f70e:	b29b      	uxth	r3, r3
 801f710:	18db      	adds	r3, r3, r3
 801f712:	b29a      	uxth	r2, r3
 801f714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f716:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801f718:	687b      	ldr	r3, [r7, #4]
 801f71a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f71c:	687b      	ldr	r3, [r7, #4]
 801f71e:	2250      	movs	r2, #80	@ 0x50
 801f720:	5a9b      	ldrh	r3, [r3, r2]
 801f722:	b29b      	uxth	r3, r3
 801f724:	001a      	movs	r2, r3
 801f726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f728:	189b      	adds	r3, r3, r2
 801f72a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801f72c:	683b      	ldr	r3, [r7, #0]
 801f72e:	781b      	ldrb	r3, [r3, #0]
 801f730:	00da      	lsls	r2, r3, #3
 801f732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f734:	18d3      	adds	r3, r2, r3
 801f736:	4a22      	ldr	r2, [pc, #136]	@ (801f7c0 <USB_ActivateEndpoint+0x2cc>)
 801f738:	4694      	mov	ip, r2
 801f73a:	4463      	add	r3, ip
 801f73c:	627b      	str	r3, [r7, #36]	@ 0x24
 801f73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f740:	881b      	ldrh	r3, [r3, #0]
 801f742:	b29b      	uxth	r3, r3
 801f744:	059b      	lsls	r3, r3, #22
 801f746:	0d9b      	lsrs	r3, r3, #22
 801f748:	b29a      	uxth	r2, r3
 801f74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f74c:	801a      	strh	r2, [r3, #0]
 801f74e:	683b      	ldr	r3, [r7, #0]
 801f750:	691b      	ldr	r3, [r3, #16]
 801f752:	2b3e      	cmp	r3, #62	@ 0x3e
 801f754:	d91a      	bls.n	801f78c <USB_ActivateEndpoint+0x298>
 801f756:	683b      	ldr	r3, [r7, #0]
 801f758:	691b      	ldr	r3, [r3, #16]
 801f75a:	095b      	lsrs	r3, r3, #5
 801f75c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f75e:	683b      	ldr	r3, [r7, #0]
 801f760:	691b      	ldr	r3, [r3, #16]
 801f762:	221f      	movs	r2, #31
 801f764:	4013      	ands	r3, r2
 801f766:	d102      	bne.n	801f76e <USB_ActivateEndpoint+0x27a>
 801f768:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f76a:	3b01      	subs	r3, #1
 801f76c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f770:	881b      	ldrh	r3, [r3, #0]
 801f772:	b29a      	uxth	r2, r3
 801f774:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f776:	b29b      	uxth	r3, r3
 801f778:	029b      	lsls	r3, r3, #10
 801f77a:	b29b      	uxth	r3, r3
 801f77c:	4313      	orrs	r3, r2
 801f77e:	b29b      	uxth	r3, r3
 801f780:	4a10      	ldr	r2, [pc, #64]	@ (801f7c4 <USB_ActivateEndpoint+0x2d0>)
 801f782:	4313      	orrs	r3, r2
 801f784:	b29a      	uxth	r2, r3
 801f786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f788:	801a      	strh	r2, [r3, #0]
 801f78a:	e034      	b.n	801f7f6 <USB_ActivateEndpoint+0x302>
 801f78c:	683b      	ldr	r3, [r7, #0]
 801f78e:	691b      	ldr	r3, [r3, #16]
 801f790:	2b00      	cmp	r3, #0
 801f792:	d119      	bne.n	801f7c8 <USB_ActivateEndpoint+0x2d4>
 801f794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f796:	881b      	ldrh	r3, [r3, #0]
 801f798:	b29b      	uxth	r3, r3
 801f79a:	4a0a      	ldr	r2, [pc, #40]	@ (801f7c4 <USB_ActivateEndpoint+0x2d0>)
 801f79c:	4313      	orrs	r3, r2
 801f79e:	b29a      	uxth	r2, r3
 801f7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f7a2:	801a      	strh	r2, [r3, #0]
 801f7a4:	e027      	b.n	801f7f6 <USB_ActivateEndpoint+0x302>
 801f7a6:	46c0      	nop			@ (mov r8, r8)
 801f7a8:	ffff898f 	.word	0xffff898f
 801f7ac:	ffff8080 	.word	0xffff8080
 801f7b0:	ffff8f8f 	.word	0xffff8f8f
 801f7b4:	ffff80c0 	.word	0xffff80c0
 801f7b8:	ffff8fbf 	.word	0xffff8fbf
 801f7bc:	00000404 	.word	0x00000404
 801f7c0:	00000406 	.word	0x00000406
 801f7c4:	ffff8000 	.word	0xffff8000
 801f7c8:	683b      	ldr	r3, [r7, #0]
 801f7ca:	691b      	ldr	r3, [r3, #16]
 801f7cc:	085b      	lsrs	r3, r3, #1
 801f7ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f7d0:	683b      	ldr	r3, [r7, #0]
 801f7d2:	691b      	ldr	r3, [r3, #16]
 801f7d4:	2201      	movs	r2, #1
 801f7d6:	4013      	ands	r3, r2
 801f7d8:	d002      	beq.n	801f7e0 <USB_ActivateEndpoint+0x2ec>
 801f7da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f7dc:	3301      	adds	r3, #1
 801f7de:	66bb      	str	r3, [r7, #104]	@ 0x68
 801f7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f7e2:	881b      	ldrh	r3, [r3, #0]
 801f7e4:	b29a      	uxth	r2, r3
 801f7e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801f7e8:	b29b      	uxth	r3, r3
 801f7ea:	029b      	lsls	r3, r3, #10
 801f7ec:	b29b      	uxth	r3, r3
 801f7ee:	4313      	orrs	r3, r2
 801f7f0:	b29a      	uxth	r2, r3
 801f7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f7f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f7f6:	687a      	ldr	r2, [r7, #4]
 801f7f8:	683b      	ldr	r3, [r7, #0]
 801f7fa:	781b      	ldrb	r3, [r3, #0]
 801f7fc:	009b      	lsls	r3, r3, #2
 801f7fe:	18d2      	adds	r2, r2, r3
 801f800:	2122      	movs	r1, #34	@ 0x22
 801f802:	187b      	adds	r3, r7, r1
 801f804:	8812      	ldrh	r2, [r2, #0]
 801f806:	801a      	strh	r2, [r3, #0]
 801f808:	187b      	adds	r3, r7, r1
 801f80a:	881a      	ldrh	r2, [r3, #0]
 801f80c:	2380      	movs	r3, #128	@ 0x80
 801f80e:	01db      	lsls	r3, r3, #7
 801f810:	4013      	ands	r3, r2
 801f812:	d016      	beq.n	801f842 <USB_ActivateEndpoint+0x34e>
 801f814:	687a      	ldr	r2, [r7, #4]
 801f816:	683b      	ldr	r3, [r7, #0]
 801f818:	781b      	ldrb	r3, [r3, #0]
 801f81a:	009b      	lsls	r3, r3, #2
 801f81c:	18d3      	adds	r3, r2, r3
 801f81e:	881b      	ldrh	r3, [r3, #0]
 801f820:	b29a      	uxth	r2, r3
 801f822:	2020      	movs	r0, #32
 801f824:	183b      	adds	r3, r7, r0
 801f826:	49dd      	ldr	r1, [pc, #884]	@ (801fb9c <USB_ActivateEndpoint+0x6a8>)
 801f828:	400a      	ands	r2, r1
 801f82a:	801a      	strh	r2, [r3, #0]
 801f82c:	687a      	ldr	r2, [r7, #4]
 801f82e:	683b      	ldr	r3, [r7, #0]
 801f830:	781b      	ldrb	r3, [r3, #0]
 801f832:	009b      	lsls	r3, r3, #2
 801f834:	18d3      	adds	r3, r2, r3
 801f836:	183a      	adds	r2, r7, r0
 801f838:	8812      	ldrh	r2, [r2, #0]
 801f83a:	49d9      	ldr	r1, [pc, #868]	@ (801fba0 <USB_ActivateEndpoint+0x6ac>)
 801f83c:	430a      	orrs	r2, r1
 801f83e:	b292      	uxth	r2, r2
 801f840:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801f842:	683b      	ldr	r3, [r7, #0]
 801f844:	781b      	ldrb	r3, [r3, #0]
 801f846:	2b00      	cmp	r3, #0
 801f848:	d125      	bne.n	801f896 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801f84a:	687a      	ldr	r2, [r7, #4]
 801f84c:	683b      	ldr	r3, [r7, #0]
 801f84e:	781b      	ldrb	r3, [r3, #0]
 801f850:	009b      	lsls	r3, r3, #2
 801f852:	18d3      	adds	r3, r2, r3
 801f854:	881b      	ldrh	r3, [r3, #0]
 801f856:	b29a      	uxth	r2, r3
 801f858:	201c      	movs	r0, #28
 801f85a:	183b      	adds	r3, r7, r0
 801f85c:	49d1      	ldr	r1, [pc, #836]	@ (801fba4 <USB_ActivateEndpoint+0x6b0>)
 801f85e:	400a      	ands	r2, r1
 801f860:	801a      	strh	r2, [r3, #0]
 801f862:	183b      	adds	r3, r7, r0
 801f864:	183a      	adds	r2, r7, r0
 801f866:	8812      	ldrh	r2, [r2, #0]
 801f868:	2180      	movs	r1, #128	@ 0x80
 801f86a:	0149      	lsls	r1, r1, #5
 801f86c:	404a      	eors	r2, r1
 801f86e:	801a      	strh	r2, [r3, #0]
 801f870:	183b      	adds	r3, r7, r0
 801f872:	183a      	adds	r2, r7, r0
 801f874:	8812      	ldrh	r2, [r2, #0]
 801f876:	2180      	movs	r1, #128	@ 0x80
 801f878:	0189      	lsls	r1, r1, #6
 801f87a:	404a      	eors	r2, r1
 801f87c:	801a      	strh	r2, [r3, #0]
 801f87e:	687a      	ldr	r2, [r7, #4]
 801f880:	683b      	ldr	r3, [r7, #0]
 801f882:	781b      	ldrb	r3, [r3, #0]
 801f884:	009b      	lsls	r3, r3, #2
 801f886:	18d3      	adds	r3, r2, r3
 801f888:	183a      	adds	r2, r7, r0
 801f88a:	8812      	ldrh	r2, [r2, #0]
 801f88c:	49c6      	ldr	r1, [pc, #792]	@ (801fba8 <USB_ActivateEndpoint+0x6b4>)
 801f88e:	430a      	orrs	r2, r1
 801f890:	b292      	uxth	r2, r2
 801f892:	801a      	strh	r2, [r3, #0]
 801f894:	e1c2      	b.n	801fc1c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801f896:	687a      	ldr	r2, [r7, #4]
 801f898:	683b      	ldr	r3, [r7, #0]
 801f89a:	781b      	ldrb	r3, [r3, #0]
 801f89c:	009b      	lsls	r3, r3, #2
 801f89e:	18d3      	adds	r3, r2, r3
 801f8a0:	881b      	ldrh	r3, [r3, #0]
 801f8a2:	b29a      	uxth	r2, r3
 801f8a4:	201e      	movs	r0, #30
 801f8a6:	183b      	adds	r3, r7, r0
 801f8a8:	49be      	ldr	r1, [pc, #760]	@ (801fba4 <USB_ActivateEndpoint+0x6b0>)
 801f8aa:	400a      	ands	r2, r1
 801f8ac:	801a      	strh	r2, [r3, #0]
 801f8ae:	183b      	adds	r3, r7, r0
 801f8b0:	183a      	adds	r2, r7, r0
 801f8b2:	8812      	ldrh	r2, [r2, #0]
 801f8b4:	2180      	movs	r1, #128	@ 0x80
 801f8b6:	0189      	lsls	r1, r1, #6
 801f8b8:	404a      	eors	r2, r1
 801f8ba:	801a      	strh	r2, [r3, #0]
 801f8bc:	687a      	ldr	r2, [r7, #4]
 801f8be:	683b      	ldr	r3, [r7, #0]
 801f8c0:	781b      	ldrb	r3, [r3, #0]
 801f8c2:	009b      	lsls	r3, r3, #2
 801f8c4:	18d3      	adds	r3, r2, r3
 801f8c6:	183a      	adds	r2, r7, r0
 801f8c8:	8812      	ldrh	r2, [r2, #0]
 801f8ca:	49b7      	ldr	r1, [pc, #732]	@ (801fba8 <USB_ActivateEndpoint+0x6b4>)
 801f8cc:	430a      	orrs	r2, r1
 801f8ce:	b292      	uxth	r2, r2
 801f8d0:	801a      	strh	r2, [r3, #0]
 801f8d2:	e1a3      	b.n	801fc1c <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801f8d4:	683b      	ldr	r3, [r7, #0]
 801f8d6:	78db      	ldrb	r3, [r3, #3]
 801f8d8:	2b02      	cmp	r3, #2
 801f8da:	d117      	bne.n	801f90c <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801f8dc:	687a      	ldr	r2, [r7, #4]
 801f8de:	683b      	ldr	r3, [r7, #0]
 801f8e0:	781b      	ldrb	r3, [r3, #0]
 801f8e2:	009b      	lsls	r3, r3, #2
 801f8e4:	18d3      	adds	r3, r2, r3
 801f8e6:	881b      	ldrh	r3, [r3, #0]
 801f8e8:	b29a      	uxth	r2, r3
 801f8ea:	2062      	movs	r0, #98	@ 0x62
 801f8ec:	183b      	adds	r3, r7, r0
 801f8ee:	49ab      	ldr	r1, [pc, #684]	@ (801fb9c <USB_ActivateEndpoint+0x6a8>)
 801f8f0:	400a      	ands	r2, r1
 801f8f2:	801a      	strh	r2, [r3, #0]
 801f8f4:	687a      	ldr	r2, [r7, #4]
 801f8f6:	683b      	ldr	r3, [r7, #0]
 801f8f8:	781b      	ldrb	r3, [r3, #0]
 801f8fa:	009b      	lsls	r3, r3, #2
 801f8fc:	18d3      	adds	r3, r2, r3
 801f8fe:	183a      	adds	r2, r7, r0
 801f900:	8812      	ldrh	r2, [r2, #0]
 801f902:	49aa      	ldr	r1, [pc, #680]	@ (801fbac <USB_ActivateEndpoint+0x6b8>)
 801f904:	430a      	orrs	r2, r1
 801f906:	b292      	uxth	r2, r2
 801f908:	801a      	strh	r2, [r3, #0]
 801f90a:	e016      	b.n	801f93a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801f90c:	687a      	ldr	r2, [r7, #4]
 801f90e:	683b      	ldr	r3, [r7, #0]
 801f910:	781b      	ldrb	r3, [r3, #0]
 801f912:	009b      	lsls	r3, r3, #2
 801f914:	18d3      	adds	r3, r2, r3
 801f916:	881b      	ldrh	r3, [r3, #0]
 801f918:	b29a      	uxth	r2, r3
 801f91a:	2064      	movs	r0, #100	@ 0x64
 801f91c:	183b      	adds	r3, r7, r0
 801f91e:	49a4      	ldr	r1, [pc, #656]	@ (801fbb0 <USB_ActivateEndpoint+0x6bc>)
 801f920:	400a      	ands	r2, r1
 801f922:	801a      	strh	r2, [r3, #0]
 801f924:	687a      	ldr	r2, [r7, #4]
 801f926:	683b      	ldr	r3, [r7, #0]
 801f928:	781b      	ldrb	r3, [r3, #0]
 801f92a:	009b      	lsls	r3, r3, #2
 801f92c:	18d3      	adds	r3, r2, r3
 801f92e:	183a      	adds	r2, r7, r0
 801f930:	8812      	ldrh	r2, [r2, #0]
 801f932:	499d      	ldr	r1, [pc, #628]	@ (801fba8 <USB_ActivateEndpoint+0x6b4>)
 801f934:	430a      	orrs	r2, r1
 801f936:	b292      	uxth	r2, r2
 801f938:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801f93a:	687b      	ldr	r3, [r7, #4]
 801f93c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f93e:	687b      	ldr	r3, [r7, #4]
 801f940:	2250      	movs	r2, #80	@ 0x50
 801f942:	5a9b      	ldrh	r3, [r3, r2]
 801f944:	b29b      	uxth	r3, r3
 801f946:	001a      	movs	r2, r3
 801f948:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f94a:	189b      	adds	r3, r3, r2
 801f94c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f94e:	683b      	ldr	r3, [r7, #0]
 801f950:	781b      	ldrb	r3, [r3, #0]
 801f952:	00da      	lsls	r2, r3, #3
 801f954:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801f956:	18d3      	adds	r3, r2, r3
 801f958:	2280      	movs	r2, #128	@ 0x80
 801f95a:	00d2      	lsls	r2, r2, #3
 801f95c:	4694      	mov	ip, r2
 801f95e:	4463      	add	r3, ip
 801f960:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f962:	683b      	ldr	r3, [r7, #0]
 801f964:	891b      	ldrh	r3, [r3, #8]
 801f966:	085b      	lsrs	r3, r3, #1
 801f968:	b29b      	uxth	r3, r3
 801f96a:	18db      	adds	r3, r3, r3
 801f96c:	b29a      	uxth	r2, r3
 801f96e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801f970:	801a      	strh	r2, [r3, #0]
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	657b      	str	r3, [r7, #84]	@ 0x54
 801f976:	687b      	ldr	r3, [r7, #4]
 801f978:	2250      	movs	r2, #80	@ 0x50
 801f97a:	5a9b      	ldrh	r3, [r3, r2]
 801f97c:	b29b      	uxth	r3, r3
 801f97e:	001a      	movs	r2, r3
 801f980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f982:	189b      	adds	r3, r3, r2
 801f984:	657b      	str	r3, [r7, #84]	@ 0x54
 801f986:	683b      	ldr	r3, [r7, #0]
 801f988:	781b      	ldrb	r3, [r3, #0]
 801f98a:	00da      	lsls	r2, r3, #3
 801f98c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801f98e:	18d3      	adds	r3, r2, r3
 801f990:	4a88      	ldr	r2, [pc, #544]	@ (801fbb4 <USB_ActivateEndpoint+0x6c0>)
 801f992:	4694      	mov	ip, r2
 801f994:	4463      	add	r3, ip
 801f996:	653b      	str	r3, [r7, #80]	@ 0x50
 801f998:	683b      	ldr	r3, [r7, #0]
 801f99a:	895b      	ldrh	r3, [r3, #10]
 801f99c:	085b      	lsrs	r3, r3, #1
 801f99e:	b29b      	uxth	r3, r3
 801f9a0:	18db      	adds	r3, r3, r3
 801f9a2:	b29a      	uxth	r2, r3
 801f9a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f9a6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801f9a8:	683b      	ldr	r3, [r7, #0]
 801f9aa:	785b      	ldrb	r3, [r3, #1]
 801f9ac:	2b00      	cmp	r3, #0
 801f9ae:	d000      	beq.n	801f9b2 <USB_ActivateEndpoint+0x4be>
 801f9b0:	e087      	b.n	801fac2 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801f9b2:	687a      	ldr	r2, [r7, #4]
 801f9b4:	683b      	ldr	r3, [r7, #0]
 801f9b6:	781b      	ldrb	r3, [r3, #0]
 801f9b8:	009b      	lsls	r3, r3, #2
 801f9ba:	18d2      	adds	r2, r2, r3
 801f9bc:	2140      	movs	r1, #64	@ 0x40
 801f9be:	187b      	adds	r3, r7, r1
 801f9c0:	8812      	ldrh	r2, [r2, #0]
 801f9c2:	801a      	strh	r2, [r3, #0]
 801f9c4:	187b      	adds	r3, r7, r1
 801f9c6:	881a      	ldrh	r2, [r3, #0]
 801f9c8:	2380      	movs	r3, #128	@ 0x80
 801f9ca:	01db      	lsls	r3, r3, #7
 801f9cc:	4013      	ands	r3, r2
 801f9ce:	d016      	beq.n	801f9fe <USB_ActivateEndpoint+0x50a>
 801f9d0:	687a      	ldr	r2, [r7, #4]
 801f9d2:	683b      	ldr	r3, [r7, #0]
 801f9d4:	781b      	ldrb	r3, [r3, #0]
 801f9d6:	009b      	lsls	r3, r3, #2
 801f9d8:	18d3      	adds	r3, r2, r3
 801f9da:	881b      	ldrh	r3, [r3, #0]
 801f9dc:	b29a      	uxth	r2, r3
 801f9de:	203e      	movs	r0, #62	@ 0x3e
 801f9e0:	183b      	adds	r3, r7, r0
 801f9e2:	496e      	ldr	r1, [pc, #440]	@ (801fb9c <USB_ActivateEndpoint+0x6a8>)
 801f9e4:	400a      	ands	r2, r1
 801f9e6:	801a      	strh	r2, [r3, #0]
 801f9e8:	687a      	ldr	r2, [r7, #4]
 801f9ea:	683b      	ldr	r3, [r7, #0]
 801f9ec:	781b      	ldrb	r3, [r3, #0]
 801f9ee:	009b      	lsls	r3, r3, #2
 801f9f0:	18d3      	adds	r3, r2, r3
 801f9f2:	183a      	adds	r2, r7, r0
 801f9f4:	8812      	ldrh	r2, [r2, #0]
 801f9f6:	496a      	ldr	r1, [pc, #424]	@ (801fba0 <USB_ActivateEndpoint+0x6ac>)
 801f9f8:	430a      	orrs	r2, r1
 801f9fa:	b292      	uxth	r2, r2
 801f9fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801f9fe:	687a      	ldr	r2, [r7, #4]
 801fa00:	683b      	ldr	r3, [r7, #0]
 801fa02:	781b      	ldrb	r3, [r3, #0]
 801fa04:	009b      	lsls	r3, r3, #2
 801fa06:	18d2      	adds	r2, r2, r3
 801fa08:	213c      	movs	r1, #60	@ 0x3c
 801fa0a:	187b      	adds	r3, r7, r1
 801fa0c:	8812      	ldrh	r2, [r2, #0]
 801fa0e:	801a      	strh	r2, [r3, #0]
 801fa10:	187b      	adds	r3, r7, r1
 801fa12:	881b      	ldrh	r3, [r3, #0]
 801fa14:	2240      	movs	r2, #64	@ 0x40
 801fa16:	4013      	ands	r3, r2
 801fa18:	d016      	beq.n	801fa48 <USB_ActivateEndpoint+0x554>
 801fa1a:	687a      	ldr	r2, [r7, #4]
 801fa1c:	683b      	ldr	r3, [r7, #0]
 801fa1e:	781b      	ldrb	r3, [r3, #0]
 801fa20:	009b      	lsls	r3, r3, #2
 801fa22:	18d3      	adds	r3, r2, r3
 801fa24:	881b      	ldrh	r3, [r3, #0]
 801fa26:	b29a      	uxth	r2, r3
 801fa28:	203a      	movs	r0, #58	@ 0x3a
 801fa2a:	183b      	adds	r3, r7, r0
 801fa2c:	495b      	ldr	r1, [pc, #364]	@ (801fb9c <USB_ActivateEndpoint+0x6a8>)
 801fa2e:	400a      	ands	r2, r1
 801fa30:	801a      	strh	r2, [r3, #0]
 801fa32:	687a      	ldr	r2, [r7, #4]
 801fa34:	683b      	ldr	r3, [r7, #0]
 801fa36:	781b      	ldrb	r3, [r3, #0]
 801fa38:	009b      	lsls	r3, r3, #2
 801fa3a:	18d3      	adds	r3, r2, r3
 801fa3c:	183a      	adds	r2, r7, r0
 801fa3e:	8812      	ldrh	r2, [r2, #0]
 801fa40:	495d      	ldr	r1, [pc, #372]	@ (801fbb8 <USB_ActivateEndpoint+0x6c4>)
 801fa42:	430a      	orrs	r2, r1
 801fa44:	b292      	uxth	r2, r2
 801fa46:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801fa48:	687a      	ldr	r2, [r7, #4]
 801fa4a:	683b      	ldr	r3, [r7, #0]
 801fa4c:	781b      	ldrb	r3, [r3, #0]
 801fa4e:	009b      	lsls	r3, r3, #2
 801fa50:	18d3      	adds	r3, r2, r3
 801fa52:	881b      	ldrh	r3, [r3, #0]
 801fa54:	b29a      	uxth	r2, r3
 801fa56:	2038      	movs	r0, #56	@ 0x38
 801fa58:	183b      	adds	r3, r7, r0
 801fa5a:	4952      	ldr	r1, [pc, #328]	@ (801fba4 <USB_ActivateEndpoint+0x6b0>)
 801fa5c:	400a      	ands	r2, r1
 801fa5e:	801a      	strh	r2, [r3, #0]
 801fa60:	183b      	adds	r3, r7, r0
 801fa62:	183a      	adds	r2, r7, r0
 801fa64:	8812      	ldrh	r2, [r2, #0]
 801fa66:	2180      	movs	r1, #128	@ 0x80
 801fa68:	0149      	lsls	r1, r1, #5
 801fa6a:	404a      	eors	r2, r1
 801fa6c:	801a      	strh	r2, [r3, #0]
 801fa6e:	183b      	adds	r3, r7, r0
 801fa70:	183a      	adds	r2, r7, r0
 801fa72:	8812      	ldrh	r2, [r2, #0]
 801fa74:	2180      	movs	r1, #128	@ 0x80
 801fa76:	0189      	lsls	r1, r1, #6
 801fa78:	404a      	eors	r2, r1
 801fa7a:	801a      	strh	r2, [r3, #0]
 801fa7c:	687a      	ldr	r2, [r7, #4]
 801fa7e:	683b      	ldr	r3, [r7, #0]
 801fa80:	781b      	ldrb	r3, [r3, #0]
 801fa82:	009b      	lsls	r3, r3, #2
 801fa84:	18d3      	adds	r3, r2, r3
 801fa86:	183a      	adds	r2, r7, r0
 801fa88:	8812      	ldrh	r2, [r2, #0]
 801fa8a:	4947      	ldr	r1, [pc, #284]	@ (801fba8 <USB_ActivateEndpoint+0x6b4>)
 801fa8c:	430a      	orrs	r2, r1
 801fa8e:	b292      	uxth	r2, r2
 801fa90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fa92:	687a      	ldr	r2, [r7, #4]
 801fa94:	683b      	ldr	r3, [r7, #0]
 801fa96:	781b      	ldrb	r3, [r3, #0]
 801fa98:	009b      	lsls	r3, r3, #2
 801fa9a:	18d3      	adds	r3, r2, r3
 801fa9c:	881b      	ldrh	r3, [r3, #0]
 801fa9e:	b29a      	uxth	r2, r3
 801faa0:	2036      	movs	r0, #54	@ 0x36
 801faa2:	183b      	adds	r3, r7, r0
 801faa4:	4945      	ldr	r1, [pc, #276]	@ (801fbbc <USB_ActivateEndpoint+0x6c8>)
 801faa6:	400a      	ands	r2, r1
 801faa8:	801a      	strh	r2, [r3, #0]
 801faaa:	687a      	ldr	r2, [r7, #4]
 801faac:	683b      	ldr	r3, [r7, #0]
 801faae:	781b      	ldrb	r3, [r3, #0]
 801fab0:	009b      	lsls	r3, r3, #2
 801fab2:	18d3      	adds	r3, r2, r3
 801fab4:	183a      	adds	r2, r7, r0
 801fab6:	8812      	ldrh	r2, [r2, #0]
 801fab8:	493b      	ldr	r1, [pc, #236]	@ (801fba8 <USB_ActivateEndpoint+0x6b4>)
 801faba:	430a      	orrs	r2, r1
 801fabc:	b292      	uxth	r2, r2
 801fabe:	801a      	strh	r2, [r3, #0]
 801fac0:	e0ac      	b.n	801fc1c <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fac2:	687a      	ldr	r2, [r7, #4]
 801fac4:	683b      	ldr	r3, [r7, #0]
 801fac6:	781b      	ldrb	r3, [r3, #0]
 801fac8:	009b      	lsls	r3, r3, #2
 801faca:	18d2      	adds	r2, r2, r3
 801facc:	214e      	movs	r1, #78	@ 0x4e
 801face:	187b      	adds	r3, r7, r1
 801fad0:	8812      	ldrh	r2, [r2, #0]
 801fad2:	801a      	strh	r2, [r3, #0]
 801fad4:	187b      	adds	r3, r7, r1
 801fad6:	881a      	ldrh	r2, [r3, #0]
 801fad8:	2380      	movs	r3, #128	@ 0x80
 801fada:	01db      	lsls	r3, r3, #7
 801fadc:	4013      	ands	r3, r2
 801fade:	d016      	beq.n	801fb0e <USB_ActivateEndpoint+0x61a>
 801fae0:	687a      	ldr	r2, [r7, #4]
 801fae2:	683b      	ldr	r3, [r7, #0]
 801fae4:	781b      	ldrb	r3, [r3, #0]
 801fae6:	009b      	lsls	r3, r3, #2
 801fae8:	18d3      	adds	r3, r2, r3
 801faea:	881b      	ldrh	r3, [r3, #0]
 801faec:	b29a      	uxth	r2, r3
 801faee:	204c      	movs	r0, #76	@ 0x4c
 801faf0:	183b      	adds	r3, r7, r0
 801faf2:	492a      	ldr	r1, [pc, #168]	@ (801fb9c <USB_ActivateEndpoint+0x6a8>)
 801faf4:	400a      	ands	r2, r1
 801faf6:	801a      	strh	r2, [r3, #0]
 801faf8:	687a      	ldr	r2, [r7, #4]
 801fafa:	683b      	ldr	r3, [r7, #0]
 801fafc:	781b      	ldrb	r3, [r3, #0]
 801fafe:	009b      	lsls	r3, r3, #2
 801fb00:	18d3      	adds	r3, r2, r3
 801fb02:	183a      	adds	r2, r7, r0
 801fb04:	8812      	ldrh	r2, [r2, #0]
 801fb06:	4926      	ldr	r1, [pc, #152]	@ (801fba0 <USB_ActivateEndpoint+0x6ac>)
 801fb08:	430a      	orrs	r2, r1
 801fb0a:	b292      	uxth	r2, r2
 801fb0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fb0e:	687a      	ldr	r2, [r7, #4]
 801fb10:	683b      	ldr	r3, [r7, #0]
 801fb12:	781b      	ldrb	r3, [r3, #0]
 801fb14:	009b      	lsls	r3, r3, #2
 801fb16:	18d2      	adds	r2, r2, r3
 801fb18:	214a      	movs	r1, #74	@ 0x4a
 801fb1a:	187b      	adds	r3, r7, r1
 801fb1c:	8812      	ldrh	r2, [r2, #0]
 801fb1e:	801a      	strh	r2, [r3, #0]
 801fb20:	187b      	adds	r3, r7, r1
 801fb22:	881b      	ldrh	r3, [r3, #0]
 801fb24:	2240      	movs	r2, #64	@ 0x40
 801fb26:	4013      	ands	r3, r2
 801fb28:	d016      	beq.n	801fb58 <USB_ActivateEndpoint+0x664>
 801fb2a:	687a      	ldr	r2, [r7, #4]
 801fb2c:	683b      	ldr	r3, [r7, #0]
 801fb2e:	781b      	ldrb	r3, [r3, #0]
 801fb30:	009b      	lsls	r3, r3, #2
 801fb32:	18d3      	adds	r3, r2, r3
 801fb34:	881b      	ldrh	r3, [r3, #0]
 801fb36:	b29a      	uxth	r2, r3
 801fb38:	2048      	movs	r0, #72	@ 0x48
 801fb3a:	183b      	adds	r3, r7, r0
 801fb3c:	4917      	ldr	r1, [pc, #92]	@ (801fb9c <USB_ActivateEndpoint+0x6a8>)
 801fb3e:	400a      	ands	r2, r1
 801fb40:	801a      	strh	r2, [r3, #0]
 801fb42:	687a      	ldr	r2, [r7, #4]
 801fb44:	683b      	ldr	r3, [r7, #0]
 801fb46:	781b      	ldrb	r3, [r3, #0]
 801fb48:	009b      	lsls	r3, r3, #2
 801fb4a:	18d3      	adds	r3, r2, r3
 801fb4c:	183a      	adds	r2, r7, r0
 801fb4e:	8812      	ldrh	r2, [r2, #0]
 801fb50:	4919      	ldr	r1, [pc, #100]	@ (801fbb8 <USB_ActivateEndpoint+0x6c4>)
 801fb52:	430a      	orrs	r2, r1
 801fb54:	b292      	uxth	r2, r2
 801fb56:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801fb58:	683b      	ldr	r3, [r7, #0]
 801fb5a:	78db      	ldrb	r3, [r3, #3]
 801fb5c:	2b01      	cmp	r3, #1
 801fb5e:	d02f      	beq.n	801fbc0 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801fb60:	687a      	ldr	r2, [r7, #4]
 801fb62:	683b      	ldr	r3, [r7, #0]
 801fb64:	781b      	ldrb	r3, [r3, #0]
 801fb66:	009b      	lsls	r3, r3, #2
 801fb68:	18d3      	adds	r3, r2, r3
 801fb6a:	881b      	ldrh	r3, [r3, #0]
 801fb6c:	b29a      	uxth	r2, r3
 801fb6e:	2044      	movs	r0, #68	@ 0x44
 801fb70:	183b      	adds	r3, r7, r0
 801fb72:	4912      	ldr	r1, [pc, #72]	@ (801fbbc <USB_ActivateEndpoint+0x6c8>)
 801fb74:	400a      	ands	r2, r1
 801fb76:	801a      	strh	r2, [r3, #0]
 801fb78:	183b      	adds	r3, r7, r0
 801fb7a:	183a      	adds	r2, r7, r0
 801fb7c:	8812      	ldrh	r2, [r2, #0]
 801fb7e:	2120      	movs	r1, #32
 801fb80:	404a      	eors	r2, r1
 801fb82:	801a      	strh	r2, [r3, #0]
 801fb84:	687a      	ldr	r2, [r7, #4]
 801fb86:	683b      	ldr	r3, [r7, #0]
 801fb88:	781b      	ldrb	r3, [r3, #0]
 801fb8a:	009b      	lsls	r3, r3, #2
 801fb8c:	18d3      	adds	r3, r2, r3
 801fb8e:	183a      	adds	r2, r7, r0
 801fb90:	8812      	ldrh	r2, [r2, #0]
 801fb92:	4905      	ldr	r1, [pc, #20]	@ (801fba8 <USB_ActivateEndpoint+0x6b4>)
 801fb94:	430a      	orrs	r2, r1
 801fb96:	b292      	uxth	r2, r2
 801fb98:	801a      	strh	r2, [r3, #0]
 801fb9a:	e028      	b.n	801fbee <USB_ActivateEndpoint+0x6fa>
 801fb9c:	ffff8f8f 	.word	0xffff8f8f
 801fba0:	ffffc080 	.word	0xffffc080
 801fba4:	ffffbf8f 	.word	0xffffbf8f
 801fba8:	ffff8080 	.word	0xffff8080
 801fbac:	ffff8180 	.word	0xffff8180
 801fbb0:	ffff8e8f 	.word	0xffff8e8f
 801fbb4:	00000404 	.word	0x00000404
 801fbb8:	ffff80c0 	.word	0xffff80c0
 801fbbc:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fbc0:	687a      	ldr	r2, [r7, #4]
 801fbc2:	683b      	ldr	r3, [r7, #0]
 801fbc4:	781b      	ldrb	r3, [r3, #0]
 801fbc6:	009b      	lsls	r3, r3, #2
 801fbc8:	18d3      	adds	r3, r2, r3
 801fbca:	881b      	ldrh	r3, [r3, #0]
 801fbcc:	b29a      	uxth	r2, r3
 801fbce:	2046      	movs	r0, #70	@ 0x46
 801fbd0:	183b      	adds	r3, r7, r0
 801fbd2:	4916      	ldr	r1, [pc, #88]	@ (801fc2c <USB_ActivateEndpoint+0x738>)
 801fbd4:	400a      	ands	r2, r1
 801fbd6:	801a      	strh	r2, [r3, #0]
 801fbd8:	687a      	ldr	r2, [r7, #4]
 801fbda:	683b      	ldr	r3, [r7, #0]
 801fbdc:	781b      	ldrb	r3, [r3, #0]
 801fbde:	009b      	lsls	r3, r3, #2
 801fbe0:	18d3      	adds	r3, r2, r3
 801fbe2:	183a      	adds	r2, r7, r0
 801fbe4:	8812      	ldrh	r2, [r2, #0]
 801fbe6:	4912      	ldr	r1, [pc, #72]	@ (801fc30 <USB_ActivateEndpoint+0x73c>)
 801fbe8:	430a      	orrs	r2, r1
 801fbea:	b292      	uxth	r2, r2
 801fbec:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fbee:	687a      	ldr	r2, [r7, #4]
 801fbf0:	683b      	ldr	r3, [r7, #0]
 801fbf2:	781b      	ldrb	r3, [r3, #0]
 801fbf4:	009b      	lsls	r3, r3, #2
 801fbf6:	18d3      	adds	r3, r2, r3
 801fbf8:	881b      	ldrh	r3, [r3, #0]
 801fbfa:	b29a      	uxth	r2, r3
 801fbfc:	2042      	movs	r0, #66	@ 0x42
 801fbfe:	183b      	adds	r3, r7, r0
 801fc00:	490c      	ldr	r1, [pc, #48]	@ (801fc34 <USB_ActivateEndpoint+0x740>)
 801fc02:	400a      	ands	r2, r1
 801fc04:	801a      	strh	r2, [r3, #0]
 801fc06:	687a      	ldr	r2, [r7, #4]
 801fc08:	683b      	ldr	r3, [r7, #0]
 801fc0a:	781b      	ldrb	r3, [r3, #0]
 801fc0c:	009b      	lsls	r3, r3, #2
 801fc0e:	18d3      	adds	r3, r2, r3
 801fc10:	183a      	adds	r2, r7, r0
 801fc12:	8812      	ldrh	r2, [r2, #0]
 801fc14:	4906      	ldr	r1, [pc, #24]	@ (801fc30 <USB_ActivateEndpoint+0x73c>)
 801fc16:	430a      	orrs	r2, r1
 801fc18:	b292      	uxth	r2, r2
 801fc1a:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801fc1c:	236f      	movs	r3, #111	@ 0x6f
 801fc1e:	18fb      	adds	r3, r7, r3
 801fc20:	781b      	ldrb	r3, [r3, #0]
}
 801fc22:	0018      	movs	r0, r3
 801fc24:	46bd      	mov	sp, r7
 801fc26:	b01c      	add	sp, #112	@ 0x70
 801fc28:	bd80      	pop	{r7, pc}
 801fc2a:	46c0      	nop			@ (mov r8, r8)
 801fc2c:	ffff8fbf 	.word	0xffff8fbf
 801fc30:	ffff8080 	.word	0xffff8080
 801fc34:	ffffbf8f 	.word	0xffffbf8f

0801fc38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801fc38:	b580      	push	{r7, lr}
 801fc3a:	b08c      	sub	sp, #48	@ 0x30
 801fc3c:	af00      	add	r7, sp, #0
 801fc3e:	6078      	str	r0, [r7, #4]
 801fc40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801fc42:	683b      	ldr	r3, [r7, #0]
 801fc44:	7b1b      	ldrb	r3, [r3, #12]
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	d000      	beq.n	801fc4c <USB_DeactivateEndpoint+0x14>
 801fc4a:	e07e      	b.n	801fd4a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 801fc4c:	683b      	ldr	r3, [r7, #0]
 801fc4e:	785b      	ldrb	r3, [r3, #1]
 801fc50:	2b00      	cmp	r3, #0
 801fc52:	d03c      	beq.n	801fcce <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fc54:	687a      	ldr	r2, [r7, #4]
 801fc56:	683b      	ldr	r3, [r7, #0]
 801fc58:	781b      	ldrb	r3, [r3, #0]
 801fc5a:	009b      	lsls	r3, r3, #2
 801fc5c:	18d2      	adds	r2, r2, r3
 801fc5e:	210c      	movs	r1, #12
 801fc60:	187b      	adds	r3, r7, r1
 801fc62:	8812      	ldrh	r2, [r2, #0]
 801fc64:	801a      	strh	r2, [r3, #0]
 801fc66:	187b      	adds	r3, r7, r1
 801fc68:	881b      	ldrh	r3, [r3, #0]
 801fc6a:	2240      	movs	r2, #64	@ 0x40
 801fc6c:	4013      	ands	r3, r2
 801fc6e:	d016      	beq.n	801fc9e <USB_DeactivateEndpoint+0x66>
 801fc70:	687a      	ldr	r2, [r7, #4]
 801fc72:	683b      	ldr	r3, [r7, #0]
 801fc74:	781b      	ldrb	r3, [r3, #0]
 801fc76:	009b      	lsls	r3, r3, #2
 801fc78:	18d3      	adds	r3, r2, r3
 801fc7a:	881b      	ldrh	r3, [r3, #0]
 801fc7c:	b29a      	uxth	r2, r3
 801fc7e:	200a      	movs	r0, #10
 801fc80:	183b      	adds	r3, r7, r0
 801fc82:	49c7      	ldr	r1, [pc, #796]	@ (801ffa0 <USB_DeactivateEndpoint+0x368>)
 801fc84:	400a      	ands	r2, r1
 801fc86:	801a      	strh	r2, [r3, #0]
 801fc88:	687a      	ldr	r2, [r7, #4]
 801fc8a:	683b      	ldr	r3, [r7, #0]
 801fc8c:	781b      	ldrb	r3, [r3, #0]
 801fc8e:	009b      	lsls	r3, r3, #2
 801fc90:	18d3      	adds	r3, r2, r3
 801fc92:	183a      	adds	r2, r7, r0
 801fc94:	8812      	ldrh	r2, [r2, #0]
 801fc96:	49c3      	ldr	r1, [pc, #780]	@ (801ffa4 <USB_DeactivateEndpoint+0x36c>)
 801fc98:	430a      	orrs	r2, r1
 801fc9a:	b292      	uxth	r2, r2
 801fc9c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fc9e:	687a      	ldr	r2, [r7, #4]
 801fca0:	683b      	ldr	r3, [r7, #0]
 801fca2:	781b      	ldrb	r3, [r3, #0]
 801fca4:	009b      	lsls	r3, r3, #2
 801fca6:	18d3      	adds	r3, r2, r3
 801fca8:	881b      	ldrh	r3, [r3, #0]
 801fcaa:	b29a      	uxth	r2, r3
 801fcac:	2008      	movs	r0, #8
 801fcae:	183b      	adds	r3, r7, r0
 801fcb0:	49bd      	ldr	r1, [pc, #756]	@ (801ffa8 <USB_DeactivateEndpoint+0x370>)
 801fcb2:	400a      	ands	r2, r1
 801fcb4:	801a      	strh	r2, [r3, #0]
 801fcb6:	687a      	ldr	r2, [r7, #4]
 801fcb8:	683b      	ldr	r3, [r7, #0]
 801fcba:	781b      	ldrb	r3, [r3, #0]
 801fcbc:	009b      	lsls	r3, r3, #2
 801fcbe:	18d3      	adds	r3, r2, r3
 801fcc0:	183a      	adds	r2, r7, r0
 801fcc2:	8812      	ldrh	r2, [r2, #0]
 801fcc4:	49b9      	ldr	r1, [pc, #740]	@ (801ffac <USB_DeactivateEndpoint+0x374>)
 801fcc6:	430a      	orrs	r2, r1
 801fcc8:	b292      	uxth	r2, r2
 801fcca:	801a      	strh	r2, [r3, #0]
 801fccc:	e163      	b.n	801ff96 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fcce:	687a      	ldr	r2, [r7, #4]
 801fcd0:	683b      	ldr	r3, [r7, #0]
 801fcd2:	781b      	ldrb	r3, [r3, #0]
 801fcd4:	009b      	lsls	r3, r3, #2
 801fcd6:	18d2      	adds	r2, r2, r3
 801fcd8:	2112      	movs	r1, #18
 801fcda:	187b      	adds	r3, r7, r1
 801fcdc:	8812      	ldrh	r2, [r2, #0]
 801fcde:	801a      	strh	r2, [r3, #0]
 801fce0:	187b      	adds	r3, r7, r1
 801fce2:	881a      	ldrh	r2, [r3, #0]
 801fce4:	2380      	movs	r3, #128	@ 0x80
 801fce6:	01db      	lsls	r3, r3, #7
 801fce8:	4013      	ands	r3, r2
 801fcea:	d016      	beq.n	801fd1a <USB_DeactivateEndpoint+0xe2>
 801fcec:	687a      	ldr	r2, [r7, #4]
 801fcee:	683b      	ldr	r3, [r7, #0]
 801fcf0:	781b      	ldrb	r3, [r3, #0]
 801fcf2:	009b      	lsls	r3, r3, #2
 801fcf4:	18d3      	adds	r3, r2, r3
 801fcf6:	881b      	ldrh	r3, [r3, #0]
 801fcf8:	b29a      	uxth	r2, r3
 801fcfa:	2010      	movs	r0, #16
 801fcfc:	183b      	adds	r3, r7, r0
 801fcfe:	49a8      	ldr	r1, [pc, #672]	@ (801ffa0 <USB_DeactivateEndpoint+0x368>)
 801fd00:	400a      	ands	r2, r1
 801fd02:	801a      	strh	r2, [r3, #0]
 801fd04:	687a      	ldr	r2, [r7, #4]
 801fd06:	683b      	ldr	r3, [r7, #0]
 801fd08:	781b      	ldrb	r3, [r3, #0]
 801fd0a:	009b      	lsls	r3, r3, #2
 801fd0c:	18d3      	adds	r3, r2, r3
 801fd0e:	183a      	adds	r2, r7, r0
 801fd10:	8812      	ldrh	r2, [r2, #0]
 801fd12:	49a7      	ldr	r1, [pc, #668]	@ (801ffb0 <USB_DeactivateEndpoint+0x378>)
 801fd14:	430a      	orrs	r2, r1
 801fd16:	b292      	uxth	r2, r2
 801fd18:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fd1a:	687a      	ldr	r2, [r7, #4]
 801fd1c:	683b      	ldr	r3, [r7, #0]
 801fd1e:	781b      	ldrb	r3, [r3, #0]
 801fd20:	009b      	lsls	r3, r3, #2
 801fd22:	18d3      	adds	r3, r2, r3
 801fd24:	881b      	ldrh	r3, [r3, #0]
 801fd26:	b29a      	uxth	r2, r3
 801fd28:	200e      	movs	r0, #14
 801fd2a:	183b      	adds	r3, r7, r0
 801fd2c:	49a1      	ldr	r1, [pc, #644]	@ (801ffb4 <USB_DeactivateEndpoint+0x37c>)
 801fd2e:	400a      	ands	r2, r1
 801fd30:	801a      	strh	r2, [r3, #0]
 801fd32:	687a      	ldr	r2, [r7, #4]
 801fd34:	683b      	ldr	r3, [r7, #0]
 801fd36:	781b      	ldrb	r3, [r3, #0]
 801fd38:	009b      	lsls	r3, r3, #2
 801fd3a:	18d3      	adds	r3, r2, r3
 801fd3c:	183a      	adds	r2, r7, r0
 801fd3e:	8812      	ldrh	r2, [r2, #0]
 801fd40:	499a      	ldr	r1, [pc, #616]	@ (801ffac <USB_DeactivateEndpoint+0x374>)
 801fd42:	430a      	orrs	r2, r1
 801fd44:	b292      	uxth	r2, r2
 801fd46:	801a      	strh	r2, [r3, #0]
 801fd48:	e125      	b.n	801ff96 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801fd4a:	683b      	ldr	r3, [r7, #0]
 801fd4c:	785b      	ldrb	r3, [r3, #1]
 801fd4e:	2b00      	cmp	r3, #0
 801fd50:	d000      	beq.n	801fd54 <USB_DeactivateEndpoint+0x11c>
 801fd52:	e090      	b.n	801fe76 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fd54:	687a      	ldr	r2, [r7, #4]
 801fd56:	683b      	ldr	r3, [r7, #0]
 801fd58:	781b      	ldrb	r3, [r3, #0]
 801fd5a:	009b      	lsls	r3, r3, #2
 801fd5c:	18d2      	adds	r2, r2, r3
 801fd5e:	2120      	movs	r1, #32
 801fd60:	187b      	adds	r3, r7, r1
 801fd62:	8812      	ldrh	r2, [r2, #0]
 801fd64:	801a      	strh	r2, [r3, #0]
 801fd66:	187b      	adds	r3, r7, r1
 801fd68:	881a      	ldrh	r2, [r3, #0]
 801fd6a:	2380      	movs	r3, #128	@ 0x80
 801fd6c:	01db      	lsls	r3, r3, #7
 801fd6e:	4013      	ands	r3, r2
 801fd70:	d016      	beq.n	801fda0 <USB_DeactivateEndpoint+0x168>
 801fd72:	687a      	ldr	r2, [r7, #4]
 801fd74:	683b      	ldr	r3, [r7, #0]
 801fd76:	781b      	ldrb	r3, [r3, #0]
 801fd78:	009b      	lsls	r3, r3, #2
 801fd7a:	18d3      	adds	r3, r2, r3
 801fd7c:	881b      	ldrh	r3, [r3, #0]
 801fd7e:	b29a      	uxth	r2, r3
 801fd80:	201e      	movs	r0, #30
 801fd82:	183b      	adds	r3, r7, r0
 801fd84:	4986      	ldr	r1, [pc, #536]	@ (801ffa0 <USB_DeactivateEndpoint+0x368>)
 801fd86:	400a      	ands	r2, r1
 801fd88:	801a      	strh	r2, [r3, #0]
 801fd8a:	687a      	ldr	r2, [r7, #4]
 801fd8c:	683b      	ldr	r3, [r7, #0]
 801fd8e:	781b      	ldrb	r3, [r3, #0]
 801fd90:	009b      	lsls	r3, r3, #2
 801fd92:	18d3      	adds	r3, r2, r3
 801fd94:	183a      	adds	r2, r7, r0
 801fd96:	8812      	ldrh	r2, [r2, #0]
 801fd98:	4985      	ldr	r1, [pc, #532]	@ (801ffb0 <USB_DeactivateEndpoint+0x378>)
 801fd9a:	430a      	orrs	r2, r1
 801fd9c:	b292      	uxth	r2, r2
 801fd9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fda0:	687a      	ldr	r2, [r7, #4]
 801fda2:	683b      	ldr	r3, [r7, #0]
 801fda4:	781b      	ldrb	r3, [r3, #0]
 801fda6:	009b      	lsls	r3, r3, #2
 801fda8:	18d2      	adds	r2, r2, r3
 801fdaa:	211c      	movs	r1, #28
 801fdac:	187b      	adds	r3, r7, r1
 801fdae:	8812      	ldrh	r2, [r2, #0]
 801fdb0:	801a      	strh	r2, [r3, #0]
 801fdb2:	187b      	adds	r3, r7, r1
 801fdb4:	881b      	ldrh	r3, [r3, #0]
 801fdb6:	2240      	movs	r2, #64	@ 0x40
 801fdb8:	4013      	ands	r3, r2
 801fdba:	d016      	beq.n	801fdea <USB_DeactivateEndpoint+0x1b2>
 801fdbc:	687a      	ldr	r2, [r7, #4]
 801fdbe:	683b      	ldr	r3, [r7, #0]
 801fdc0:	781b      	ldrb	r3, [r3, #0]
 801fdc2:	009b      	lsls	r3, r3, #2
 801fdc4:	18d3      	adds	r3, r2, r3
 801fdc6:	881b      	ldrh	r3, [r3, #0]
 801fdc8:	b29a      	uxth	r2, r3
 801fdca:	201a      	movs	r0, #26
 801fdcc:	183b      	adds	r3, r7, r0
 801fdce:	4974      	ldr	r1, [pc, #464]	@ (801ffa0 <USB_DeactivateEndpoint+0x368>)
 801fdd0:	400a      	ands	r2, r1
 801fdd2:	801a      	strh	r2, [r3, #0]
 801fdd4:	687a      	ldr	r2, [r7, #4]
 801fdd6:	683b      	ldr	r3, [r7, #0]
 801fdd8:	781b      	ldrb	r3, [r3, #0]
 801fdda:	009b      	lsls	r3, r3, #2
 801fddc:	18d3      	adds	r3, r2, r3
 801fdde:	183a      	adds	r2, r7, r0
 801fde0:	8812      	ldrh	r2, [r2, #0]
 801fde2:	4970      	ldr	r1, [pc, #448]	@ (801ffa4 <USB_DeactivateEndpoint+0x36c>)
 801fde4:	430a      	orrs	r2, r1
 801fde6:	b292      	uxth	r2, r2
 801fde8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801fdea:	687a      	ldr	r2, [r7, #4]
 801fdec:	683b      	ldr	r3, [r7, #0]
 801fdee:	781b      	ldrb	r3, [r3, #0]
 801fdf0:	009b      	lsls	r3, r3, #2
 801fdf2:	18d3      	adds	r3, r2, r3
 801fdf4:	881b      	ldrh	r3, [r3, #0]
 801fdf6:	b29a      	uxth	r2, r3
 801fdf8:	2018      	movs	r0, #24
 801fdfa:	183b      	adds	r3, r7, r0
 801fdfc:	4968      	ldr	r1, [pc, #416]	@ (801ffa0 <USB_DeactivateEndpoint+0x368>)
 801fdfe:	400a      	ands	r2, r1
 801fe00:	801a      	strh	r2, [r3, #0]
 801fe02:	687a      	ldr	r2, [r7, #4]
 801fe04:	683b      	ldr	r3, [r7, #0]
 801fe06:	781b      	ldrb	r3, [r3, #0]
 801fe08:	009b      	lsls	r3, r3, #2
 801fe0a:	18d3      	adds	r3, r2, r3
 801fe0c:	183a      	adds	r2, r7, r0
 801fe0e:	8812      	ldrh	r2, [r2, #0]
 801fe10:	4964      	ldr	r1, [pc, #400]	@ (801ffa4 <USB_DeactivateEndpoint+0x36c>)
 801fe12:	430a      	orrs	r2, r1
 801fe14:	b292      	uxth	r2, r2
 801fe16:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801fe18:	687a      	ldr	r2, [r7, #4]
 801fe1a:	683b      	ldr	r3, [r7, #0]
 801fe1c:	781b      	ldrb	r3, [r3, #0]
 801fe1e:	009b      	lsls	r3, r3, #2
 801fe20:	18d3      	adds	r3, r2, r3
 801fe22:	881b      	ldrh	r3, [r3, #0]
 801fe24:	b29a      	uxth	r2, r3
 801fe26:	2016      	movs	r0, #22
 801fe28:	183b      	adds	r3, r7, r0
 801fe2a:	4962      	ldr	r1, [pc, #392]	@ (801ffb4 <USB_DeactivateEndpoint+0x37c>)
 801fe2c:	400a      	ands	r2, r1
 801fe2e:	801a      	strh	r2, [r3, #0]
 801fe30:	687a      	ldr	r2, [r7, #4]
 801fe32:	683b      	ldr	r3, [r7, #0]
 801fe34:	781b      	ldrb	r3, [r3, #0]
 801fe36:	009b      	lsls	r3, r3, #2
 801fe38:	18d3      	adds	r3, r2, r3
 801fe3a:	183a      	adds	r2, r7, r0
 801fe3c:	8812      	ldrh	r2, [r2, #0]
 801fe3e:	495b      	ldr	r1, [pc, #364]	@ (801ffac <USB_DeactivateEndpoint+0x374>)
 801fe40:	430a      	orrs	r2, r1
 801fe42:	b292      	uxth	r2, r2
 801fe44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801fe46:	687a      	ldr	r2, [r7, #4]
 801fe48:	683b      	ldr	r3, [r7, #0]
 801fe4a:	781b      	ldrb	r3, [r3, #0]
 801fe4c:	009b      	lsls	r3, r3, #2
 801fe4e:	18d3      	adds	r3, r2, r3
 801fe50:	881b      	ldrh	r3, [r3, #0]
 801fe52:	b29a      	uxth	r2, r3
 801fe54:	2014      	movs	r0, #20
 801fe56:	183b      	adds	r3, r7, r0
 801fe58:	4953      	ldr	r1, [pc, #332]	@ (801ffa8 <USB_DeactivateEndpoint+0x370>)
 801fe5a:	400a      	ands	r2, r1
 801fe5c:	801a      	strh	r2, [r3, #0]
 801fe5e:	687a      	ldr	r2, [r7, #4]
 801fe60:	683b      	ldr	r3, [r7, #0]
 801fe62:	781b      	ldrb	r3, [r3, #0]
 801fe64:	009b      	lsls	r3, r3, #2
 801fe66:	18d3      	adds	r3, r2, r3
 801fe68:	183a      	adds	r2, r7, r0
 801fe6a:	8812      	ldrh	r2, [r2, #0]
 801fe6c:	494f      	ldr	r1, [pc, #316]	@ (801ffac <USB_DeactivateEndpoint+0x374>)
 801fe6e:	430a      	orrs	r2, r1
 801fe70:	b292      	uxth	r2, r2
 801fe72:	801a      	strh	r2, [r3, #0]
 801fe74:	e08f      	b.n	801ff96 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801fe76:	687a      	ldr	r2, [r7, #4]
 801fe78:	683b      	ldr	r3, [r7, #0]
 801fe7a:	781b      	ldrb	r3, [r3, #0]
 801fe7c:	009b      	lsls	r3, r3, #2
 801fe7e:	18d2      	adds	r2, r2, r3
 801fe80:	212e      	movs	r1, #46	@ 0x2e
 801fe82:	187b      	adds	r3, r7, r1
 801fe84:	8812      	ldrh	r2, [r2, #0]
 801fe86:	801a      	strh	r2, [r3, #0]
 801fe88:	187b      	adds	r3, r7, r1
 801fe8a:	881a      	ldrh	r2, [r3, #0]
 801fe8c:	2380      	movs	r3, #128	@ 0x80
 801fe8e:	01db      	lsls	r3, r3, #7
 801fe90:	4013      	ands	r3, r2
 801fe92:	d016      	beq.n	801fec2 <USB_DeactivateEndpoint+0x28a>
 801fe94:	687a      	ldr	r2, [r7, #4]
 801fe96:	683b      	ldr	r3, [r7, #0]
 801fe98:	781b      	ldrb	r3, [r3, #0]
 801fe9a:	009b      	lsls	r3, r3, #2
 801fe9c:	18d3      	adds	r3, r2, r3
 801fe9e:	881b      	ldrh	r3, [r3, #0]
 801fea0:	b29a      	uxth	r2, r3
 801fea2:	202c      	movs	r0, #44	@ 0x2c
 801fea4:	183b      	adds	r3, r7, r0
 801fea6:	493e      	ldr	r1, [pc, #248]	@ (801ffa0 <USB_DeactivateEndpoint+0x368>)
 801fea8:	400a      	ands	r2, r1
 801feaa:	801a      	strh	r2, [r3, #0]
 801feac:	687a      	ldr	r2, [r7, #4]
 801feae:	683b      	ldr	r3, [r7, #0]
 801feb0:	781b      	ldrb	r3, [r3, #0]
 801feb2:	009b      	lsls	r3, r3, #2
 801feb4:	18d3      	adds	r3, r2, r3
 801feb6:	183a      	adds	r2, r7, r0
 801feb8:	8812      	ldrh	r2, [r2, #0]
 801feba:	493d      	ldr	r1, [pc, #244]	@ (801ffb0 <USB_DeactivateEndpoint+0x378>)
 801febc:	430a      	orrs	r2, r1
 801febe:	b292      	uxth	r2, r2
 801fec0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801fec2:	687a      	ldr	r2, [r7, #4]
 801fec4:	683b      	ldr	r3, [r7, #0]
 801fec6:	781b      	ldrb	r3, [r3, #0]
 801fec8:	009b      	lsls	r3, r3, #2
 801feca:	18d2      	adds	r2, r2, r3
 801fecc:	212a      	movs	r1, #42	@ 0x2a
 801fece:	187b      	adds	r3, r7, r1
 801fed0:	8812      	ldrh	r2, [r2, #0]
 801fed2:	801a      	strh	r2, [r3, #0]
 801fed4:	187b      	adds	r3, r7, r1
 801fed6:	881b      	ldrh	r3, [r3, #0]
 801fed8:	2240      	movs	r2, #64	@ 0x40
 801feda:	4013      	ands	r3, r2
 801fedc:	d016      	beq.n	801ff0c <USB_DeactivateEndpoint+0x2d4>
 801fede:	687a      	ldr	r2, [r7, #4]
 801fee0:	683b      	ldr	r3, [r7, #0]
 801fee2:	781b      	ldrb	r3, [r3, #0]
 801fee4:	009b      	lsls	r3, r3, #2
 801fee6:	18d3      	adds	r3, r2, r3
 801fee8:	881b      	ldrh	r3, [r3, #0]
 801feea:	b29a      	uxth	r2, r3
 801feec:	2028      	movs	r0, #40	@ 0x28
 801feee:	183b      	adds	r3, r7, r0
 801fef0:	492b      	ldr	r1, [pc, #172]	@ (801ffa0 <USB_DeactivateEndpoint+0x368>)
 801fef2:	400a      	ands	r2, r1
 801fef4:	801a      	strh	r2, [r3, #0]
 801fef6:	687a      	ldr	r2, [r7, #4]
 801fef8:	683b      	ldr	r3, [r7, #0]
 801fefa:	781b      	ldrb	r3, [r3, #0]
 801fefc:	009b      	lsls	r3, r3, #2
 801fefe:	18d3      	adds	r3, r2, r3
 801ff00:	183a      	adds	r2, r7, r0
 801ff02:	8812      	ldrh	r2, [r2, #0]
 801ff04:	4927      	ldr	r1, [pc, #156]	@ (801ffa4 <USB_DeactivateEndpoint+0x36c>)
 801ff06:	430a      	orrs	r2, r1
 801ff08:	b292      	uxth	r2, r2
 801ff0a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801ff0c:	687a      	ldr	r2, [r7, #4]
 801ff0e:	683b      	ldr	r3, [r7, #0]
 801ff10:	781b      	ldrb	r3, [r3, #0]
 801ff12:	009b      	lsls	r3, r3, #2
 801ff14:	18d3      	adds	r3, r2, r3
 801ff16:	881b      	ldrh	r3, [r3, #0]
 801ff18:	b29a      	uxth	r2, r3
 801ff1a:	2026      	movs	r0, #38	@ 0x26
 801ff1c:	183b      	adds	r3, r7, r0
 801ff1e:	4920      	ldr	r1, [pc, #128]	@ (801ffa0 <USB_DeactivateEndpoint+0x368>)
 801ff20:	400a      	ands	r2, r1
 801ff22:	801a      	strh	r2, [r3, #0]
 801ff24:	687a      	ldr	r2, [r7, #4]
 801ff26:	683b      	ldr	r3, [r7, #0]
 801ff28:	781b      	ldrb	r3, [r3, #0]
 801ff2a:	009b      	lsls	r3, r3, #2
 801ff2c:	18d3      	adds	r3, r2, r3
 801ff2e:	183a      	adds	r2, r7, r0
 801ff30:	8812      	ldrh	r2, [r2, #0]
 801ff32:	491f      	ldr	r1, [pc, #124]	@ (801ffb0 <USB_DeactivateEndpoint+0x378>)
 801ff34:	430a      	orrs	r2, r1
 801ff36:	b292      	uxth	r2, r2
 801ff38:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801ff3a:	687a      	ldr	r2, [r7, #4]
 801ff3c:	683b      	ldr	r3, [r7, #0]
 801ff3e:	781b      	ldrb	r3, [r3, #0]
 801ff40:	009b      	lsls	r3, r3, #2
 801ff42:	18d3      	adds	r3, r2, r3
 801ff44:	881b      	ldrh	r3, [r3, #0]
 801ff46:	b29a      	uxth	r2, r3
 801ff48:	2024      	movs	r0, #36	@ 0x24
 801ff4a:	183b      	adds	r3, r7, r0
 801ff4c:	4916      	ldr	r1, [pc, #88]	@ (801ffa8 <USB_DeactivateEndpoint+0x370>)
 801ff4e:	400a      	ands	r2, r1
 801ff50:	801a      	strh	r2, [r3, #0]
 801ff52:	687a      	ldr	r2, [r7, #4]
 801ff54:	683b      	ldr	r3, [r7, #0]
 801ff56:	781b      	ldrb	r3, [r3, #0]
 801ff58:	009b      	lsls	r3, r3, #2
 801ff5a:	18d3      	adds	r3, r2, r3
 801ff5c:	183a      	adds	r2, r7, r0
 801ff5e:	8812      	ldrh	r2, [r2, #0]
 801ff60:	4912      	ldr	r1, [pc, #72]	@ (801ffac <USB_DeactivateEndpoint+0x374>)
 801ff62:	430a      	orrs	r2, r1
 801ff64:	b292      	uxth	r2, r2
 801ff66:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801ff68:	687a      	ldr	r2, [r7, #4]
 801ff6a:	683b      	ldr	r3, [r7, #0]
 801ff6c:	781b      	ldrb	r3, [r3, #0]
 801ff6e:	009b      	lsls	r3, r3, #2
 801ff70:	18d3      	adds	r3, r2, r3
 801ff72:	881b      	ldrh	r3, [r3, #0]
 801ff74:	b29a      	uxth	r2, r3
 801ff76:	2022      	movs	r0, #34	@ 0x22
 801ff78:	183b      	adds	r3, r7, r0
 801ff7a:	490e      	ldr	r1, [pc, #56]	@ (801ffb4 <USB_DeactivateEndpoint+0x37c>)
 801ff7c:	400a      	ands	r2, r1
 801ff7e:	801a      	strh	r2, [r3, #0]
 801ff80:	687a      	ldr	r2, [r7, #4]
 801ff82:	683b      	ldr	r3, [r7, #0]
 801ff84:	781b      	ldrb	r3, [r3, #0]
 801ff86:	009b      	lsls	r3, r3, #2
 801ff88:	18d3      	adds	r3, r2, r3
 801ff8a:	183a      	adds	r2, r7, r0
 801ff8c:	8812      	ldrh	r2, [r2, #0]
 801ff8e:	4907      	ldr	r1, [pc, #28]	@ (801ffac <USB_DeactivateEndpoint+0x374>)
 801ff90:	430a      	orrs	r2, r1
 801ff92:	b292      	uxth	r2, r2
 801ff94:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801ff96:	2300      	movs	r3, #0
}
 801ff98:	0018      	movs	r0, r3
 801ff9a:	46bd      	mov	sp, r7
 801ff9c:	b00c      	add	sp, #48	@ 0x30
 801ff9e:	bd80      	pop	{r7, pc}
 801ffa0:	ffff8f8f 	.word	0xffff8f8f
 801ffa4:	ffff80c0 	.word	0xffff80c0
 801ffa8:	ffff8fbf 	.word	0xffff8fbf
 801ffac:	ffff8080 	.word	0xffff8080
 801ffb0:	ffffc080 	.word	0xffffc080
 801ffb4:	ffffbf8f 	.word	0xffffbf8f

0801ffb8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ffb8:	b590      	push	{r4, r7, lr}
 801ffba:	b0c3      	sub	sp, #268	@ 0x10c
 801ffbc:	af00      	add	r7, sp, #0
 801ffbe:	6078      	str	r0, [r7, #4]
 801ffc0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801ffc2:	683b      	ldr	r3, [r7, #0]
 801ffc4:	785b      	ldrb	r3, [r3, #1]
 801ffc6:	2b01      	cmp	r3, #1
 801ffc8:	d001      	beq.n	801ffce <USB_EPStartXfer+0x16>
 801ffca:	f000 fd2d 	bl	8020a28 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801ffce:	683b      	ldr	r3, [r7, #0]
 801ffd0:	699a      	ldr	r2, [r3, #24]
 801ffd2:	683b      	ldr	r3, [r7, #0]
 801ffd4:	691b      	ldr	r3, [r3, #16]
 801ffd6:	429a      	cmp	r2, r3
 801ffd8:	d905      	bls.n	801ffe6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801ffda:	683b      	ldr	r3, [r7, #0]
 801ffdc:	691b      	ldr	r3, [r3, #16]
 801ffde:	1d7a      	adds	r2, r7, #5
 801ffe0:	32ff      	adds	r2, #255	@ 0xff
 801ffe2:	6013      	str	r3, [r2, #0]
 801ffe4:	e004      	b.n	801fff0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801ffe6:	683b      	ldr	r3, [r7, #0]
 801ffe8:	699b      	ldr	r3, [r3, #24]
 801ffea:	1d7a      	adds	r2, r7, #5
 801ffec:	32ff      	adds	r2, #255	@ 0xff
 801ffee:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801fff0:	683b      	ldr	r3, [r7, #0]
 801fff2:	7b1b      	ldrb	r3, [r3, #12]
 801fff4:	2b00      	cmp	r3, #0
 801fff6:	d125      	bne.n	8020044 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801fff8:	683b      	ldr	r3, [r7, #0]
 801fffa:	6959      	ldr	r1, [r3, #20]
 801fffc:	683b      	ldr	r3, [r7, #0]
 801fffe:	88da      	ldrh	r2, [r3, #6]
 8020000:	1d7b      	adds	r3, r7, #5
 8020002:	33ff      	adds	r3, #255	@ 0xff
 8020004:	681b      	ldr	r3, [r3, #0]
 8020006:	b29b      	uxth	r3, r3
 8020008:	6878      	ldr	r0, [r7, #4]
 802000a:	f001 fa47 	bl	802149c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 802000e:	687b      	ldr	r3, [r7, #4]
 8020010:	613b      	str	r3, [r7, #16]
 8020012:	687b      	ldr	r3, [r7, #4]
 8020014:	2250      	movs	r2, #80	@ 0x50
 8020016:	5a9b      	ldrh	r3, [r3, r2]
 8020018:	b29b      	uxth	r3, r3
 802001a:	001a      	movs	r2, r3
 802001c:	693b      	ldr	r3, [r7, #16]
 802001e:	189b      	adds	r3, r3, r2
 8020020:	613b      	str	r3, [r7, #16]
 8020022:	683b      	ldr	r3, [r7, #0]
 8020024:	781b      	ldrb	r3, [r3, #0]
 8020026:	00da      	lsls	r2, r3, #3
 8020028:	693b      	ldr	r3, [r7, #16]
 802002a:	18d3      	adds	r3, r2, r3
 802002c:	4ad7      	ldr	r2, [pc, #860]	@ (802038c <USB_EPStartXfer+0x3d4>)
 802002e:	4694      	mov	ip, r2
 8020030:	4463      	add	r3, ip
 8020032:	60fb      	str	r3, [r7, #12]
 8020034:	1d7b      	adds	r3, r7, #5
 8020036:	33ff      	adds	r3, #255	@ 0xff
 8020038:	681b      	ldr	r3, [r3, #0]
 802003a:	b29a      	uxth	r2, r3
 802003c:	68fb      	ldr	r3, [r7, #12]
 802003e:	801a      	strh	r2, [r3, #0]
 8020040:	f000 fccd 	bl	80209de <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8020044:	683b      	ldr	r3, [r7, #0]
 8020046:	78db      	ldrb	r3, [r3, #3]
 8020048:	2b02      	cmp	r3, #2
 802004a:	d000      	beq.n	802004e <USB_EPStartXfer+0x96>
 802004c:	e362      	b.n	8020714 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 802004e:	683b      	ldr	r3, [r7, #0]
 8020050:	6a1a      	ldr	r2, [r3, #32]
 8020052:	683b      	ldr	r3, [r7, #0]
 8020054:	691b      	ldr	r3, [r3, #16]
 8020056:	429a      	cmp	r2, r3
 8020058:	d800      	bhi.n	802005c <USB_EPStartXfer+0xa4>
 802005a:	e309      	b.n	8020670 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 802005c:	687a      	ldr	r2, [r7, #4]
 802005e:	683b      	ldr	r3, [r7, #0]
 8020060:	781b      	ldrb	r3, [r3, #0]
 8020062:	009b      	lsls	r3, r3, #2
 8020064:	18d3      	adds	r3, r2, r3
 8020066:	881b      	ldrh	r3, [r3, #0]
 8020068:	b29a      	uxth	r2, r3
 802006a:	2056      	movs	r0, #86	@ 0x56
 802006c:	183b      	adds	r3, r7, r0
 802006e:	49c8      	ldr	r1, [pc, #800]	@ (8020390 <USB_EPStartXfer+0x3d8>)
 8020070:	400a      	ands	r2, r1
 8020072:	801a      	strh	r2, [r3, #0]
 8020074:	687a      	ldr	r2, [r7, #4]
 8020076:	683b      	ldr	r3, [r7, #0]
 8020078:	781b      	ldrb	r3, [r3, #0]
 802007a:	009b      	lsls	r3, r3, #2
 802007c:	18d3      	adds	r3, r2, r3
 802007e:	183a      	adds	r2, r7, r0
 8020080:	8812      	ldrh	r2, [r2, #0]
 8020082:	49c4      	ldr	r1, [pc, #784]	@ (8020394 <USB_EPStartXfer+0x3dc>)
 8020084:	430a      	orrs	r2, r1
 8020086:	b292      	uxth	r2, r2
 8020088:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 802008a:	683b      	ldr	r3, [r7, #0]
 802008c:	6a1a      	ldr	r2, [r3, #32]
 802008e:	1d7b      	adds	r3, r7, #5
 8020090:	33ff      	adds	r3, #255	@ 0xff
 8020092:	681b      	ldr	r3, [r3, #0]
 8020094:	1ad2      	subs	r2, r2, r3
 8020096:	683b      	ldr	r3, [r7, #0]
 8020098:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 802009a:	687a      	ldr	r2, [r7, #4]
 802009c:	683b      	ldr	r3, [r7, #0]
 802009e:	781b      	ldrb	r3, [r3, #0]
 80200a0:	009b      	lsls	r3, r3, #2
 80200a2:	18d3      	adds	r3, r2, r3
 80200a4:	881b      	ldrh	r3, [r3, #0]
 80200a6:	b29b      	uxth	r3, r3
 80200a8:	001a      	movs	r2, r3
 80200aa:	2340      	movs	r3, #64	@ 0x40
 80200ac:	4013      	ands	r3, r2
 80200ae:	d100      	bne.n	80200b2 <USB_EPStartXfer+0xfa>
 80200b0:	e176      	b.n	80203a0 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80200b2:	687b      	ldr	r3, [r7, #4]
 80200b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80200b6:	683b      	ldr	r3, [r7, #0]
 80200b8:	785b      	ldrb	r3, [r3, #1]
 80200ba:	2b00      	cmp	r3, #0
 80200bc:	d000      	beq.n	80200c0 <USB_EPStartXfer+0x108>
 80200be:	e074      	b.n	80201aa <USB_EPStartXfer+0x1f2>
 80200c0:	687b      	ldr	r3, [r7, #4]
 80200c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80200c4:	687b      	ldr	r3, [r7, #4]
 80200c6:	2250      	movs	r2, #80	@ 0x50
 80200c8:	5a9b      	ldrh	r3, [r3, r2]
 80200ca:	b29b      	uxth	r3, r3
 80200cc:	001a      	movs	r2, r3
 80200ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80200d0:	189b      	adds	r3, r3, r2
 80200d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80200d4:	683b      	ldr	r3, [r7, #0]
 80200d6:	781b      	ldrb	r3, [r3, #0]
 80200d8:	00da      	lsls	r2, r3, #3
 80200da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80200dc:	18d3      	adds	r3, r2, r3
 80200de:	4aae      	ldr	r2, [pc, #696]	@ (8020398 <USB_EPStartXfer+0x3e0>)
 80200e0:	4694      	mov	ip, r2
 80200e2:	4463      	add	r3, ip
 80200e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80200e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80200e8:	881b      	ldrh	r3, [r3, #0]
 80200ea:	b29b      	uxth	r3, r3
 80200ec:	059b      	lsls	r3, r3, #22
 80200ee:	0d9b      	lsrs	r3, r3, #22
 80200f0:	b29a      	uxth	r2, r3
 80200f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80200f4:	801a      	strh	r2, [r3, #0]
 80200f6:	1d7b      	adds	r3, r7, #5
 80200f8:	33ff      	adds	r3, #255	@ 0xff
 80200fa:	681b      	ldr	r3, [r3, #0]
 80200fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80200fe:	d924      	bls.n	802014a <USB_EPStartXfer+0x192>
 8020100:	1d7b      	adds	r3, r7, #5
 8020102:	33ff      	adds	r3, #255	@ 0xff
 8020104:	681b      	ldr	r3, [r3, #0]
 8020106:	095b      	lsrs	r3, r3, #5
 8020108:	1c7a      	adds	r2, r7, #1
 802010a:	32ff      	adds	r2, #255	@ 0xff
 802010c:	6013      	str	r3, [r2, #0]
 802010e:	1d7b      	adds	r3, r7, #5
 8020110:	33ff      	adds	r3, #255	@ 0xff
 8020112:	681b      	ldr	r3, [r3, #0]
 8020114:	221f      	movs	r2, #31
 8020116:	4013      	ands	r3, r2
 8020118:	d106      	bne.n	8020128 <USB_EPStartXfer+0x170>
 802011a:	1c7b      	adds	r3, r7, #1
 802011c:	33ff      	adds	r3, #255	@ 0xff
 802011e:	681b      	ldr	r3, [r3, #0]
 8020120:	3b01      	subs	r3, #1
 8020122:	1c7a      	adds	r2, r7, #1
 8020124:	32ff      	adds	r2, #255	@ 0xff
 8020126:	6013      	str	r3, [r2, #0]
 8020128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802012a:	881b      	ldrh	r3, [r3, #0]
 802012c:	b29a      	uxth	r2, r3
 802012e:	1c7b      	adds	r3, r7, #1
 8020130:	33ff      	adds	r3, #255	@ 0xff
 8020132:	681b      	ldr	r3, [r3, #0]
 8020134:	b29b      	uxth	r3, r3
 8020136:	029b      	lsls	r3, r3, #10
 8020138:	b29b      	uxth	r3, r3
 802013a:	4313      	orrs	r3, r2
 802013c:	b29b      	uxth	r3, r3
 802013e:	4a97      	ldr	r2, [pc, #604]	@ (802039c <USB_EPStartXfer+0x3e4>)
 8020140:	4313      	orrs	r3, r2
 8020142:	b29a      	uxth	r2, r3
 8020144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020146:	801a      	strh	r2, [r3, #0]
 8020148:	e04a      	b.n	80201e0 <USB_EPStartXfer+0x228>
 802014a:	1d7b      	adds	r3, r7, #5
 802014c:	33ff      	adds	r3, #255	@ 0xff
 802014e:	681b      	ldr	r3, [r3, #0]
 8020150:	2b00      	cmp	r3, #0
 8020152:	d108      	bne.n	8020166 <USB_EPStartXfer+0x1ae>
 8020154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020156:	881b      	ldrh	r3, [r3, #0]
 8020158:	b29b      	uxth	r3, r3
 802015a:	4a90      	ldr	r2, [pc, #576]	@ (802039c <USB_EPStartXfer+0x3e4>)
 802015c:	4313      	orrs	r3, r2
 802015e:	b29a      	uxth	r2, r3
 8020160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020162:	801a      	strh	r2, [r3, #0]
 8020164:	e03c      	b.n	80201e0 <USB_EPStartXfer+0x228>
 8020166:	1d7b      	adds	r3, r7, #5
 8020168:	33ff      	adds	r3, #255	@ 0xff
 802016a:	681b      	ldr	r3, [r3, #0]
 802016c:	085b      	lsrs	r3, r3, #1
 802016e:	1c7a      	adds	r2, r7, #1
 8020170:	32ff      	adds	r2, #255	@ 0xff
 8020172:	6013      	str	r3, [r2, #0]
 8020174:	1d7b      	adds	r3, r7, #5
 8020176:	33ff      	adds	r3, #255	@ 0xff
 8020178:	681b      	ldr	r3, [r3, #0]
 802017a:	2201      	movs	r2, #1
 802017c:	4013      	ands	r3, r2
 802017e:	d006      	beq.n	802018e <USB_EPStartXfer+0x1d6>
 8020180:	1c7b      	adds	r3, r7, #1
 8020182:	33ff      	adds	r3, #255	@ 0xff
 8020184:	681b      	ldr	r3, [r3, #0]
 8020186:	3301      	adds	r3, #1
 8020188:	1c7a      	adds	r2, r7, #1
 802018a:	32ff      	adds	r2, #255	@ 0xff
 802018c:	6013      	str	r3, [r2, #0]
 802018e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020190:	881b      	ldrh	r3, [r3, #0]
 8020192:	b29a      	uxth	r2, r3
 8020194:	1c7b      	adds	r3, r7, #1
 8020196:	33ff      	adds	r3, #255	@ 0xff
 8020198:	681b      	ldr	r3, [r3, #0]
 802019a:	b29b      	uxth	r3, r3
 802019c:	029b      	lsls	r3, r3, #10
 802019e:	b29b      	uxth	r3, r3
 80201a0:	4313      	orrs	r3, r2
 80201a2:	b29a      	uxth	r2, r3
 80201a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80201a6:	801a      	strh	r2, [r3, #0]
 80201a8:	e01a      	b.n	80201e0 <USB_EPStartXfer+0x228>
 80201aa:	683b      	ldr	r3, [r7, #0]
 80201ac:	785b      	ldrb	r3, [r3, #1]
 80201ae:	2b01      	cmp	r3, #1
 80201b0:	d116      	bne.n	80201e0 <USB_EPStartXfer+0x228>
 80201b2:	687b      	ldr	r3, [r7, #4]
 80201b4:	2250      	movs	r2, #80	@ 0x50
 80201b6:	5a9b      	ldrh	r3, [r3, r2]
 80201b8:	b29b      	uxth	r3, r3
 80201ba:	001a      	movs	r2, r3
 80201bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80201be:	189b      	adds	r3, r3, r2
 80201c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80201c2:	683b      	ldr	r3, [r7, #0]
 80201c4:	781b      	ldrb	r3, [r3, #0]
 80201c6:	00da      	lsls	r2, r3, #3
 80201c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80201ca:	18d3      	adds	r3, r2, r3
 80201cc:	4a72      	ldr	r2, [pc, #456]	@ (8020398 <USB_EPStartXfer+0x3e0>)
 80201ce:	4694      	mov	ip, r2
 80201d0:	4463      	add	r3, ip
 80201d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80201d4:	1d7b      	adds	r3, r7, #5
 80201d6:	33ff      	adds	r3, #255	@ 0xff
 80201d8:	681b      	ldr	r3, [r3, #0]
 80201da:	b29a      	uxth	r2, r3
 80201dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80201de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80201e0:	2076      	movs	r0, #118	@ 0x76
 80201e2:	183b      	adds	r3, r7, r0
 80201e4:	683a      	ldr	r2, [r7, #0]
 80201e6:	8952      	ldrh	r2, [r2, #10]
 80201e8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80201ea:	683b      	ldr	r3, [r7, #0]
 80201ec:	6959      	ldr	r1, [r3, #20]
 80201ee:	1d7b      	adds	r3, r7, #5
 80201f0:	33ff      	adds	r3, #255	@ 0xff
 80201f2:	681b      	ldr	r3, [r3, #0]
 80201f4:	b29c      	uxth	r4, r3
 80201f6:	183b      	adds	r3, r7, r0
 80201f8:	881a      	ldrh	r2, [r3, #0]
 80201fa:	6878      	ldr	r0, [r7, #4]
 80201fc:	0023      	movs	r3, r4
 80201fe:	f001 f94d 	bl	802149c <USB_WritePMA>
            ep->xfer_buff += len;
 8020202:	683b      	ldr	r3, [r7, #0]
 8020204:	695a      	ldr	r2, [r3, #20]
 8020206:	1d7b      	adds	r3, r7, #5
 8020208:	33ff      	adds	r3, #255	@ 0xff
 802020a:	681b      	ldr	r3, [r3, #0]
 802020c:	18d2      	adds	r2, r2, r3
 802020e:	683b      	ldr	r3, [r7, #0]
 8020210:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8020212:	683b      	ldr	r3, [r7, #0]
 8020214:	6a1a      	ldr	r2, [r3, #32]
 8020216:	683b      	ldr	r3, [r7, #0]
 8020218:	691b      	ldr	r3, [r3, #16]
 802021a:	429a      	cmp	r2, r3
 802021c:	d908      	bls.n	8020230 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 802021e:	683b      	ldr	r3, [r7, #0]
 8020220:	6a1a      	ldr	r2, [r3, #32]
 8020222:	1d7b      	adds	r3, r7, #5
 8020224:	33ff      	adds	r3, #255	@ 0xff
 8020226:	681b      	ldr	r3, [r3, #0]
 8020228:	1ad2      	subs	r2, r2, r3
 802022a:	683b      	ldr	r3, [r7, #0]
 802022c:	621a      	str	r2, [r3, #32]
 802022e:	e007      	b.n	8020240 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8020230:	683b      	ldr	r3, [r7, #0]
 8020232:	6a1b      	ldr	r3, [r3, #32]
 8020234:	1d7a      	adds	r2, r7, #5
 8020236:	32ff      	adds	r2, #255	@ 0xff
 8020238:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 802023a:	683b      	ldr	r3, [r7, #0]
 802023c:	2200      	movs	r2, #0
 802023e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8020240:	683b      	ldr	r3, [r7, #0]
 8020242:	785b      	ldrb	r3, [r3, #1]
 8020244:	2b00      	cmp	r3, #0
 8020246:	d000      	beq.n	802024a <USB_EPStartXfer+0x292>
 8020248:	e070      	b.n	802032c <USB_EPStartXfer+0x374>
 802024a:	687b      	ldr	r3, [r7, #4]
 802024c:	61bb      	str	r3, [r7, #24]
 802024e:	687b      	ldr	r3, [r7, #4]
 8020250:	2250      	movs	r2, #80	@ 0x50
 8020252:	5a9b      	ldrh	r3, [r3, r2]
 8020254:	b29b      	uxth	r3, r3
 8020256:	001a      	movs	r2, r3
 8020258:	69bb      	ldr	r3, [r7, #24]
 802025a:	189b      	adds	r3, r3, r2
 802025c:	61bb      	str	r3, [r7, #24]
 802025e:	683b      	ldr	r3, [r7, #0]
 8020260:	781b      	ldrb	r3, [r3, #0]
 8020262:	00da      	lsls	r2, r3, #3
 8020264:	69bb      	ldr	r3, [r7, #24]
 8020266:	18d3      	adds	r3, r2, r3
 8020268:	4a48      	ldr	r2, [pc, #288]	@ (802038c <USB_EPStartXfer+0x3d4>)
 802026a:	4694      	mov	ip, r2
 802026c:	4463      	add	r3, ip
 802026e:	617b      	str	r3, [r7, #20]
 8020270:	697b      	ldr	r3, [r7, #20]
 8020272:	881b      	ldrh	r3, [r3, #0]
 8020274:	b29b      	uxth	r3, r3
 8020276:	059b      	lsls	r3, r3, #22
 8020278:	0d9b      	lsrs	r3, r3, #22
 802027a:	b29a      	uxth	r2, r3
 802027c:	697b      	ldr	r3, [r7, #20]
 802027e:	801a      	strh	r2, [r3, #0]
 8020280:	1d7b      	adds	r3, r7, #5
 8020282:	33ff      	adds	r3, #255	@ 0xff
 8020284:	681b      	ldr	r3, [r3, #0]
 8020286:	2b3e      	cmp	r3, #62	@ 0x3e
 8020288:	d922      	bls.n	80202d0 <USB_EPStartXfer+0x318>
 802028a:	1d7b      	adds	r3, r7, #5
 802028c:	33ff      	adds	r3, #255	@ 0xff
 802028e:	681b      	ldr	r3, [r3, #0]
 8020290:	095b      	lsrs	r3, r3, #5
 8020292:	21fc      	movs	r1, #252	@ 0xfc
 8020294:	187a      	adds	r2, r7, r1
 8020296:	6013      	str	r3, [r2, #0]
 8020298:	1d7b      	adds	r3, r7, #5
 802029a:	33ff      	adds	r3, #255	@ 0xff
 802029c:	681b      	ldr	r3, [r3, #0]
 802029e:	221f      	movs	r2, #31
 80202a0:	4013      	ands	r3, r2
 80202a2:	d104      	bne.n	80202ae <USB_EPStartXfer+0x2f6>
 80202a4:	187b      	adds	r3, r7, r1
 80202a6:	681b      	ldr	r3, [r3, #0]
 80202a8:	3b01      	subs	r3, #1
 80202aa:	187a      	adds	r2, r7, r1
 80202ac:	6013      	str	r3, [r2, #0]
 80202ae:	697b      	ldr	r3, [r7, #20]
 80202b0:	881b      	ldrh	r3, [r3, #0]
 80202b2:	b29a      	uxth	r2, r3
 80202b4:	23fc      	movs	r3, #252	@ 0xfc
 80202b6:	18fb      	adds	r3, r7, r3
 80202b8:	681b      	ldr	r3, [r3, #0]
 80202ba:	b29b      	uxth	r3, r3
 80202bc:	029b      	lsls	r3, r3, #10
 80202be:	b29b      	uxth	r3, r3
 80202c0:	4313      	orrs	r3, r2
 80202c2:	b29b      	uxth	r3, r3
 80202c4:	4a35      	ldr	r2, [pc, #212]	@ (802039c <USB_EPStartXfer+0x3e4>)
 80202c6:	4313      	orrs	r3, r2
 80202c8:	b29a      	uxth	r2, r3
 80202ca:	697b      	ldr	r3, [r7, #20]
 80202cc:	801a      	strh	r2, [r3, #0]
 80202ce:	e04a      	b.n	8020366 <USB_EPStartXfer+0x3ae>
 80202d0:	1d7b      	adds	r3, r7, #5
 80202d2:	33ff      	adds	r3, #255	@ 0xff
 80202d4:	681b      	ldr	r3, [r3, #0]
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	d108      	bne.n	80202ec <USB_EPStartXfer+0x334>
 80202da:	697b      	ldr	r3, [r7, #20]
 80202dc:	881b      	ldrh	r3, [r3, #0]
 80202de:	b29b      	uxth	r3, r3
 80202e0:	4a2e      	ldr	r2, [pc, #184]	@ (802039c <USB_EPStartXfer+0x3e4>)
 80202e2:	4313      	orrs	r3, r2
 80202e4:	b29a      	uxth	r2, r3
 80202e6:	697b      	ldr	r3, [r7, #20]
 80202e8:	801a      	strh	r2, [r3, #0]
 80202ea:	e03c      	b.n	8020366 <USB_EPStartXfer+0x3ae>
 80202ec:	1d7b      	adds	r3, r7, #5
 80202ee:	33ff      	adds	r3, #255	@ 0xff
 80202f0:	681b      	ldr	r3, [r3, #0]
 80202f2:	085b      	lsrs	r3, r3, #1
 80202f4:	21fc      	movs	r1, #252	@ 0xfc
 80202f6:	187a      	adds	r2, r7, r1
 80202f8:	6013      	str	r3, [r2, #0]
 80202fa:	1d7b      	adds	r3, r7, #5
 80202fc:	33ff      	adds	r3, #255	@ 0xff
 80202fe:	681b      	ldr	r3, [r3, #0]
 8020300:	2201      	movs	r2, #1
 8020302:	4013      	ands	r3, r2
 8020304:	d004      	beq.n	8020310 <USB_EPStartXfer+0x358>
 8020306:	187b      	adds	r3, r7, r1
 8020308:	681b      	ldr	r3, [r3, #0]
 802030a:	3301      	adds	r3, #1
 802030c:	187a      	adds	r2, r7, r1
 802030e:	6013      	str	r3, [r2, #0]
 8020310:	697b      	ldr	r3, [r7, #20]
 8020312:	881b      	ldrh	r3, [r3, #0]
 8020314:	b29a      	uxth	r2, r3
 8020316:	23fc      	movs	r3, #252	@ 0xfc
 8020318:	18fb      	adds	r3, r7, r3
 802031a:	681b      	ldr	r3, [r3, #0]
 802031c:	b29b      	uxth	r3, r3
 802031e:	029b      	lsls	r3, r3, #10
 8020320:	b29b      	uxth	r3, r3
 8020322:	4313      	orrs	r3, r2
 8020324:	b29a      	uxth	r2, r3
 8020326:	697b      	ldr	r3, [r7, #20]
 8020328:	801a      	strh	r2, [r3, #0]
 802032a:	e01c      	b.n	8020366 <USB_EPStartXfer+0x3ae>
 802032c:	683b      	ldr	r3, [r7, #0]
 802032e:	785b      	ldrb	r3, [r3, #1]
 8020330:	2b01      	cmp	r3, #1
 8020332:	d118      	bne.n	8020366 <USB_EPStartXfer+0x3ae>
 8020334:	687b      	ldr	r3, [r7, #4]
 8020336:	623b      	str	r3, [r7, #32]
 8020338:	687b      	ldr	r3, [r7, #4]
 802033a:	2250      	movs	r2, #80	@ 0x50
 802033c:	5a9b      	ldrh	r3, [r3, r2]
 802033e:	b29b      	uxth	r3, r3
 8020340:	001a      	movs	r2, r3
 8020342:	6a3b      	ldr	r3, [r7, #32]
 8020344:	189b      	adds	r3, r3, r2
 8020346:	623b      	str	r3, [r7, #32]
 8020348:	683b      	ldr	r3, [r7, #0]
 802034a:	781b      	ldrb	r3, [r3, #0]
 802034c:	00da      	lsls	r2, r3, #3
 802034e:	6a3b      	ldr	r3, [r7, #32]
 8020350:	18d3      	adds	r3, r2, r3
 8020352:	4a0e      	ldr	r2, [pc, #56]	@ (802038c <USB_EPStartXfer+0x3d4>)
 8020354:	4694      	mov	ip, r2
 8020356:	4463      	add	r3, ip
 8020358:	61fb      	str	r3, [r7, #28]
 802035a:	1d7b      	adds	r3, r7, #5
 802035c:	33ff      	adds	r3, #255	@ 0xff
 802035e:	681b      	ldr	r3, [r3, #0]
 8020360:	b29a      	uxth	r2, r3
 8020362:	69fb      	ldr	r3, [r7, #28]
 8020364:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8020366:	2076      	movs	r0, #118	@ 0x76
 8020368:	183b      	adds	r3, r7, r0
 802036a:	683a      	ldr	r2, [r7, #0]
 802036c:	8912      	ldrh	r2, [r2, #8]
 802036e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020370:	683b      	ldr	r3, [r7, #0]
 8020372:	6959      	ldr	r1, [r3, #20]
 8020374:	1d7b      	adds	r3, r7, #5
 8020376:	33ff      	adds	r3, #255	@ 0xff
 8020378:	681b      	ldr	r3, [r3, #0]
 802037a:	b29c      	uxth	r4, r3
 802037c:	183b      	adds	r3, r7, r0
 802037e:	881a      	ldrh	r2, [r3, #0]
 8020380:	6878      	ldr	r0, [r7, #4]
 8020382:	0023      	movs	r3, r4
 8020384:	f001 f88a 	bl	802149c <USB_WritePMA>
 8020388:	e329      	b.n	80209de <USB_EPStartXfer+0xa26>
 802038a:	46c0      	nop			@ (mov r8, r8)
 802038c:	00000402 	.word	0x00000402
 8020390:	ffff8f8f 	.word	0xffff8f8f
 8020394:	ffff8180 	.word	0xffff8180
 8020398:	00000406 	.word	0x00000406
 802039c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80203a0:	683b      	ldr	r3, [r7, #0]
 80203a2:	785b      	ldrb	r3, [r3, #1]
 80203a4:	2b00      	cmp	r3, #0
 80203a6:	d000      	beq.n	80203aa <USB_EPStartXfer+0x3f2>
 80203a8:	e070      	b.n	802048c <USB_EPStartXfer+0x4d4>
 80203aa:	687b      	ldr	r3, [r7, #4]
 80203ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	2250      	movs	r2, #80	@ 0x50
 80203b2:	5a9b      	ldrh	r3, [r3, r2]
 80203b4:	b29b      	uxth	r3, r3
 80203b6:	001a      	movs	r2, r3
 80203b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80203ba:	189b      	adds	r3, r3, r2
 80203bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80203be:	683b      	ldr	r3, [r7, #0]
 80203c0:	781b      	ldrb	r3, [r3, #0]
 80203c2:	00da      	lsls	r2, r3, #3
 80203c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80203c6:	18d3      	adds	r3, r2, r3
 80203c8:	4acd      	ldr	r2, [pc, #820]	@ (8020700 <USB_EPStartXfer+0x748>)
 80203ca:	4694      	mov	ip, r2
 80203cc:	4463      	add	r3, ip
 80203ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80203d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80203d2:	881b      	ldrh	r3, [r3, #0]
 80203d4:	b29b      	uxth	r3, r3
 80203d6:	059b      	lsls	r3, r3, #22
 80203d8:	0d9b      	lsrs	r3, r3, #22
 80203da:	b29a      	uxth	r2, r3
 80203dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80203de:	801a      	strh	r2, [r3, #0]
 80203e0:	1d7b      	adds	r3, r7, #5
 80203e2:	33ff      	adds	r3, #255	@ 0xff
 80203e4:	681b      	ldr	r3, [r3, #0]
 80203e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80203e8:	d922      	bls.n	8020430 <USB_EPStartXfer+0x478>
 80203ea:	1d7b      	adds	r3, r7, #5
 80203ec:	33ff      	adds	r3, #255	@ 0xff
 80203ee:	681b      	ldr	r3, [r3, #0]
 80203f0:	095b      	lsrs	r3, r3, #5
 80203f2:	21f8      	movs	r1, #248	@ 0xf8
 80203f4:	187a      	adds	r2, r7, r1
 80203f6:	6013      	str	r3, [r2, #0]
 80203f8:	1d7b      	adds	r3, r7, #5
 80203fa:	33ff      	adds	r3, #255	@ 0xff
 80203fc:	681b      	ldr	r3, [r3, #0]
 80203fe:	221f      	movs	r2, #31
 8020400:	4013      	ands	r3, r2
 8020402:	d104      	bne.n	802040e <USB_EPStartXfer+0x456>
 8020404:	187b      	adds	r3, r7, r1
 8020406:	681b      	ldr	r3, [r3, #0]
 8020408:	3b01      	subs	r3, #1
 802040a:	187a      	adds	r2, r7, r1
 802040c:	6013      	str	r3, [r2, #0]
 802040e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020410:	881b      	ldrh	r3, [r3, #0]
 8020412:	b29a      	uxth	r2, r3
 8020414:	23f8      	movs	r3, #248	@ 0xf8
 8020416:	18fb      	adds	r3, r7, r3
 8020418:	681b      	ldr	r3, [r3, #0]
 802041a:	b29b      	uxth	r3, r3
 802041c:	029b      	lsls	r3, r3, #10
 802041e:	b29b      	uxth	r3, r3
 8020420:	4313      	orrs	r3, r2
 8020422:	b29b      	uxth	r3, r3
 8020424:	4ab7      	ldr	r2, [pc, #732]	@ (8020704 <USB_EPStartXfer+0x74c>)
 8020426:	4313      	orrs	r3, r2
 8020428:	b29a      	uxth	r2, r3
 802042a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802042c:	801a      	strh	r2, [r3, #0]
 802042e:	e04a      	b.n	80204c6 <USB_EPStartXfer+0x50e>
 8020430:	1d7b      	adds	r3, r7, #5
 8020432:	33ff      	adds	r3, #255	@ 0xff
 8020434:	681b      	ldr	r3, [r3, #0]
 8020436:	2b00      	cmp	r3, #0
 8020438:	d108      	bne.n	802044c <USB_EPStartXfer+0x494>
 802043a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802043c:	881b      	ldrh	r3, [r3, #0]
 802043e:	b29b      	uxth	r3, r3
 8020440:	4ab0      	ldr	r2, [pc, #704]	@ (8020704 <USB_EPStartXfer+0x74c>)
 8020442:	4313      	orrs	r3, r2
 8020444:	b29a      	uxth	r2, r3
 8020446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020448:	801a      	strh	r2, [r3, #0]
 802044a:	e03c      	b.n	80204c6 <USB_EPStartXfer+0x50e>
 802044c:	1d7b      	adds	r3, r7, #5
 802044e:	33ff      	adds	r3, #255	@ 0xff
 8020450:	681b      	ldr	r3, [r3, #0]
 8020452:	085b      	lsrs	r3, r3, #1
 8020454:	21f8      	movs	r1, #248	@ 0xf8
 8020456:	187a      	adds	r2, r7, r1
 8020458:	6013      	str	r3, [r2, #0]
 802045a:	1d7b      	adds	r3, r7, #5
 802045c:	33ff      	adds	r3, #255	@ 0xff
 802045e:	681b      	ldr	r3, [r3, #0]
 8020460:	2201      	movs	r2, #1
 8020462:	4013      	ands	r3, r2
 8020464:	d004      	beq.n	8020470 <USB_EPStartXfer+0x4b8>
 8020466:	187b      	adds	r3, r7, r1
 8020468:	681b      	ldr	r3, [r3, #0]
 802046a:	3301      	adds	r3, #1
 802046c:	187a      	adds	r2, r7, r1
 802046e:	6013      	str	r3, [r2, #0]
 8020470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020472:	881b      	ldrh	r3, [r3, #0]
 8020474:	b29a      	uxth	r2, r3
 8020476:	23f8      	movs	r3, #248	@ 0xf8
 8020478:	18fb      	adds	r3, r7, r3
 802047a:	681b      	ldr	r3, [r3, #0]
 802047c:	b29b      	uxth	r3, r3
 802047e:	029b      	lsls	r3, r3, #10
 8020480:	b29b      	uxth	r3, r3
 8020482:	4313      	orrs	r3, r2
 8020484:	b29a      	uxth	r2, r3
 8020486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020488:	801a      	strh	r2, [r3, #0]
 802048a:	e01c      	b.n	80204c6 <USB_EPStartXfer+0x50e>
 802048c:	683b      	ldr	r3, [r7, #0]
 802048e:	785b      	ldrb	r3, [r3, #1]
 8020490:	2b01      	cmp	r3, #1
 8020492:	d118      	bne.n	80204c6 <USB_EPStartXfer+0x50e>
 8020494:	687b      	ldr	r3, [r7, #4]
 8020496:	653b      	str	r3, [r7, #80]	@ 0x50
 8020498:	687b      	ldr	r3, [r7, #4]
 802049a:	2250      	movs	r2, #80	@ 0x50
 802049c:	5a9b      	ldrh	r3, [r3, r2]
 802049e:	b29b      	uxth	r3, r3
 80204a0:	001a      	movs	r2, r3
 80204a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80204a4:	189b      	adds	r3, r3, r2
 80204a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80204a8:	683b      	ldr	r3, [r7, #0]
 80204aa:	781b      	ldrb	r3, [r3, #0]
 80204ac:	00da      	lsls	r2, r3, #3
 80204ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80204b0:	18d3      	adds	r3, r2, r3
 80204b2:	4a93      	ldr	r2, [pc, #588]	@ (8020700 <USB_EPStartXfer+0x748>)
 80204b4:	4694      	mov	ip, r2
 80204b6:	4463      	add	r3, ip
 80204b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80204ba:	1d7b      	adds	r3, r7, #5
 80204bc:	33ff      	adds	r3, #255	@ 0xff
 80204be:	681b      	ldr	r3, [r3, #0]
 80204c0:	b29a      	uxth	r2, r3
 80204c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80204c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80204c6:	2076      	movs	r0, #118	@ 0x76
 80204c8:	183b      	adds	r3, r7, r0
 80204ca:	683a      	ldr	r2, [r7, #0]
 80204cc:	8912      	ldrh	r2, [r2, #8]
 80204ce:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80204d0:	683b      	ldr	r3, [r7, #0]
 80204d2:	6959      	ldr	r1, [r3, #20]
 80204d4:	1d7b      	adds	r3, r7, #5
 80204d6:	33ff      	adds	r3, #255	@ 0xff
 80204d8:	681b      	ldr	r3, [r3, #0]
 80204da:	b29c      	uxth	r4, r3
 80204dc:	183b      	adds	r3, r7, r0
 80204de:	881a      	ldrh	r2, [r3, #0]
 80204e0:	6878      	ldr	r0, [r7, #4]
 80204e2:	0023      	movs	r3, r4
 80204e4:	f000 ffda 	bl	802149c <USB_WritePMA>
            ep->xfer_buff += len;
 80204e8:	683b      	ldr	r3, [r7, #0]
 80204ea:	695a      	ldr	r2, [r3, #20]
 80204ec:	1d7b      	adds	r3, r7, #5
 80204ee:	33ff      	adds	r3, #255	@ 0xff
 80204f0:	681b      	ldr	r3, [r3, #0]
 80204f2:	18d2      	adds	r2, r2, r3
 80204f4:	683b      	ldr	r3, [r7, #0]
 80204f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80204f8:	683b      	ldr	r3, [r7, #0]
 80204fa:	6a1a      	ldr	r2, [r3, #32]
 80204fc:	683b      	ldr	r3, [r7, #0]
 80204fe:	691b      	ldr	r3, [r3, #16]
 8020500:	429a      	cmp	r2, r3
 8020502:	d908      	bls.n	8020516 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8020504:	683b      	ldr	r3, [r7, #0]
 8020506:	6a1a      	ldr	r2, [r3, #32]
 8020508:	1d7b      	adds	r3, r7, #5
 802050a:	33ff      	adds	r3, #255	@ 0xff
 802050c:	681b      	ldr	r3, [r3, #0]
 802050e:	1ad2      	subs	r2, r2, r3
 8020510:	683b      	ldr	r3, [r7, #0]
 8020512:	621a      	str	r2, [r3, #32]
 8020514:	e007      	b.n	8020526 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8020516:	683b      	ldr	r3, [r7, #0]
 8020518:	6a1b      	ldr	r3, [r3, #32]
 802051a:	1d7a      	adds	r2, r7, #5
 802051c:	32ff      	adds	r2, #255	@ 0xff
 802051e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8020520:	683b      	ldr	r3, [r7, #0]
 8020522:	2200      	movs	r2, #0
 8020524:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8020526:	687b      	ldr	r3, [r7, #4]
 8020528:	643b      	str	r3, [r7, #64]	@ 0x40
 802052a:	683b      	ldr	r3, [r7, #0]
 802052c:	785b      	ldrb	r3, [r3, #1]
 802052e:	2b00      	cmp	r3, #0
 8020530:	d000      	beq.n	8020534 <USB_EPStartXfer+0x57c>
 8020532:	e070      	b.n	8020616 <USB_EPStartXfer+0x65e>
 8020534:	687b      	ldr	r3, [r7, #4]
 8020536:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020538:	687b      	ldr	r3, [r7, #4]
 802053a:	2250      	movs	r2, #80	@ 0x50
 802053c:	5a9b      	ldrh	r3, [r3, r2]
 802053e:	b29b      	uxth	r3, r3
 8020540:	001a      	movs	r2, r3
 8020542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020544:	189b      	adds	r3, r3, r2
 8020546:	63bb      	str	r3, [r7, #56]	@ 0x38
 8020548:	683b      	ldr	r3, [r7, #0]
 802054a:	781b      	ldrb	r3, [r3, #0]
 802054c:	00da      	lsls	r2, r3, #3
 802054e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020550:	18d3      	adds	r3, r2, r3
 8020552:	4a6d      	ldr	r2, [pc, #436]	@ (8020708 <USB_EPStartXfer+0x750>)
 8020554:	4694      	mov	ip, r2
 8020556:	4463      	add	r3, ip
 8020558:	637b      	str	r3, [r7, #52]	@ 0x34
 802055a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802055c:	881b      	ldrh	r3, [r3, #0]
 802055e:	b29b      	uxth	r3, r3
 8020560:	059b      	lsls	r3, r3, #22
 8020562:	0d9b      	lsrs	r3, r3, #22
 8020564:	b29a      	uxth	r2, r3
 8020566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020568:	801a      	strh	r2, [r3, #0]
 802056a:	1d7b      	adds	r3, r7, #5
 802056c:	33ff      	adds	r3, #255	@ 0xff
 802056e:	681b      	ldr	r3, [r3, #0]
 8020570:	2b3e      	cmp	r3, #62	@ 0x3e
 8020572:	d922      	bls.n	80205ba <USB_EPStartXfer+0x602>
 8020574:	1d7b      	adds	r3, r7, #5
 8020576:	33ff      	adds	r3, #255	@ 0xff
 8020578:	681b      	ldr	r3, [r3, #0]
 802057a:	095b      	lsrs	r3, r3, #5
 802057c:	21f4      	movs	r1, #244	@ 0xf4
 802057e:	187a      	adds	r2, r7, r1
 8020580:	6013      	str	r3, [r2, #0]
 8020582:	1d7b      	adds	r3, r7, #5
 8020584:	33ff      	adds	r3, #255	@ 0xff
 8020586:	681b      	ldr	r3, [r3, #0]
 8020588:	221f      	movs	r2, #31
 802058a:	4013      	ands	r3, r2
 802058c:	d104      	bne.n	8020598 <USB_EPStartXfer+0x5e0>
 802058e:	187b      	adds	r3, r7, r1
 8020590:	681b      	ldr	r3, [r3, #0]
 8020592:	3b01      	subs	r3, #1
 8020594:	187a      	adds	r2, r7, r1
 8020596:	6013      	str	r3, [r2, #0]
 8020598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802059a:	881b      	ldrh	r3, [r3, #0]
 802059c:	b29a      	uxth	r2, r3
 802059e:	23f4      	movs	r3, #244	@ 0xf4
 80205a0:	18fb      	adds	r3, r7, r3
 80205a2:	681b      	ldr	r3, [r3, #0]
 80205a4:	b29b      	uxth	r3, r3
 80205a6:	029b      	lsls	r3, r3, #10
 80205a8:	b29b      	uxth	r3, r3
 80205aa:	4313      	orrs	r3, r2
 80205ac:	b29b      	uxth	r3, r3
 80205ae:	4a55      	ldr	r2, [pc, #340]	@ (8020704 <USB_EPStartXfer+0x74c>)
 80205b0:	4313      	orrs	r3, r2
 80205b2:	b29a      	uxth	r2, r3
 80205b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80205b6:	801a      	strh	r2, [r3, #0]
 80205b8:	e048      	b.n	802064c <USB_EPStartXfer+0x694>
 80205ba:	1d7b      	adds	r3, r7, #5
 80205bc:	33ff      	adds	r3, #255	@ 0xff
 80205be:	681b      	ldr	r3, [r3, #0]
 80205c0:	2b00      	cmp	r3, #0
 80205c2:	d108      	bne.n	80205d6 <USB_EPStartXfer+0x61e>
 80205c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80205c6:	881b      	ldrh	r3, [r3, #0]
 80205c8:	b29b      	uxth	r3, r3
 80205ca:	4a4e      	ldr	r2, [pc, #312]	@ (8020704 <USB_EPStartXfer+0x74c>)
 80205cc:	4313      	orrs	r3, r2
 80205ce:	b29a      	uxth	r2, r3
 80205d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80205d2:	801a      	strh	r2, [r3, #0]
 80205d4:	e03a      	b.n	802064c <USB_EPStartXfer+0x694>
 80205d6:	1d7b      	adds	r3, r7, #5
 80205d8:	33ff      	adds	r3, #255	@ 0xff
 80205da:	681b      	ldr	r3, [r3, #0]
 80205dc:	085b      	lsrs	r3, r3, #1
 80205de:	21f4      	movs	r1, #244	@ 0xf4
 80205e0:	187a      	adds	r2, r7, r1
 80205e2:	6013      	str	r3, [r2, #0]
 80205e4:	1d7b      	adds	r3, r7, #5
 80205e6:	33ff      	adds	r3, #255	@ 0xff
 80205e8:	681b      	ldr	r3, [r3, #0]
 80205ea:	2201      	movs	r2, #1
 80205ec:	4013      	ands	r3, r2
 80205ee:	d004      	beq.n	80205fa <USB_EPStartXfer+0x642>
 80205f0:	187b      	adds	r3, r7, r1
 80205f2:	681b      	ldr	r3, [r3, #0]
 80205f4:	3301      	adds	r3, #1
 80205f6:	187a      	adds	r2, r7, r1
 80205f8:	6013      	str	r3, [r2, #0]
 80205fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80205fc:	881b      	ldrh	r3, [r3, #0]
 80205fe:	b29a      	uxth	r2, r3
 8020600:	23f4      	movs	r3, #244	@ 0xf4
 8020602:	18fb      	adds	r3, r7, r3
 8020604:	681b      	ldr	r3, [r3, #0]
 8020606:	b29b      	uxth	r3, r3
 8020608:	029b      	lsls	r3, r3, #10
 802060a:	b29b      	uxth	r3, r3
 802060c:	4313      	orrs	r3, r2
 802060e:	b29a      	uxth	r2, r3
 8020610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020612:	801a      	strh	r2, [r3, #0]
 8020614:	e01a      	b.n	802064c <USB_EPStartXfer+0x694>
 8020616:	683b      	ldr	r3, [r7, #0]
 8020618:	785b      	ldrb	r3, [r3, #1]
 802061a:	2b01      	cmp	r3, #1
 802061c:	d116      	bne.n	802064c <USB_EPStartXfer+0x694>
 802061e:	687b      	ldr	r3, [r7, #4]
 8020620:	2250      	movs	r2, #80	@ 0x50
 8020622:	5a9b      	ldrh	r3, [r3, r2]
 8020624:	b29b      	uxth	r3, r3
 8020626:	001a      	movs	r2, r3
 8020628:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802062a:	189b      	adds	r3, r3, r2
 802062c:	643b      	str	r3, [r7, #64]	@ 0x40
 802062e:	683b      	ldr	r3, [r7, #0]
 8020630:	781b      	ldrb	r3, [r3, #0]
 8020632:	00da      	lsls	r2, r3, #3
 8020634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020636:	18d3      	adds	r3, r2, r3
 8020638:	4a33      	ldr	r2, [pc, #204]	@ (8020708 <USB_EPStartXfer+0x750>)
 802063a:	4694      	mov	ip, r2
 802063c:	4463      	add	r3, ip
 802063e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020640:	1d7b      	adds	r3, r7, #5
 8020642:	33ff      	adds	r3, #255	@ 0xff
 8020644:	681b      	ldr	r3, [r3, #0]
 8020646:	b29a      	uxth	r2, r3
 8020648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802064a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 802064c:	2076      	movs	r0, #118	@ 0x76
 802064e:	183b      	adds	r3, r7, r0
 8020650:	683a      	ldr	r2, [r7, #0]
 8020652:	8952      	ldrh	r2, [r2, #10]
 8020654:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8020656:	683b      	ldr	r3, [r7, #0]
 8020658:	6959      	ldr	r1, [r3, #20]
 802065a:	1d7b      	adds	r3, r7, #5
 802065c:	33ff      	adds	r3, #255	@ 0xff
 802065e:	681b      	ldr	r3, [r3, #0]
 8020660:	b29c      	uxth	r4, r3
 8020662:	183b      	adds	r3, r7, r0
 8020664:	881a      	ldrh	r2, [r3, #0]
 8020666:	6878      	ldr	r0, [r7, #4]
 8020668:	0023      	movs	r3, r4
 802066a:	f000 ff17 	bl	802149c <USB_WritePMA>
 802066e:	e1b6      	b.n	80209de <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8020670:	683b      	ldr	r3, [r7, #0]
 8020672:	6a1b      	ldr	r3, [r3, #32]
 8020674:	1d7a      	adds	r2, r7, #5
 8020676:	32ff      	adds	r2, #255	@ 0xff
 8020678:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 802067a:	687a      	ldr	r2, [r7, #4]
 802067c:	683b      	ldr	r3, [r7, #0]
 802067e:	781b      	ldrb	r3, [r3, #0]
 8020680:	009b      	lsls	r3, r3, #2
 8020682:	18d3      	adds	r3, r2, r3
 8020684:	881b      	ldrh	r3, [r3, #0]
 8020686:	b29a      	uxth	r2, r3
 8020688:	2062      	movs	r0, #98	@ 0x62
 802068a:	183b      	adds	r3, r7, r0
 802068c:	491f      	ldr	r1, [pc, #124]	@ (802070c <USB_EPStartXfer+0x754>)
 802068e:	400a      	ands	r2, r1
 8020690:	801a      	strh	r2, [r3, #0]
 8020692:	687a      	ldr	r2, [r7, #4]
 8020694:	683b      	ldr	r3, [r7, #0]
 8020696:	781b      	ldrb	r3, [r3, #0]
 8020698:	009b      	lsls	r3, r3, #2
 802069a:	18d3      	adds	r3, r2, r3
 802069c:	183a      	adds	r2, r7, r0
 802069e:	8812      	ldrh	r2, [r2, #0]
 80206a0:	491b      	ldr	r1, [pc, #108]	@ (8020710 <USB_EPStartXfer+0x758>)
 80206a2:	430a      	orrs	r2, r1
 80206a4:	b292      	uxth	r2, r2
 80206a6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80206a8:	687b      	ldr	r3, [r7, #4]
 80206aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80206ac:	687b      	ldr	r3, [r7, #4]
 80206ae:	2250      	movs	r2, #80	@ 0x50
 80206b0:	5a9b      	ldrh	r3, [r3, r2]
 80206b2:	b29b      	uxth	r3, r3
 80206b4:	001a      	movs	r2, r3
 80206b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80206b8:	189b      	adds	r3, r3, r2
 80206ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80206bc:	683b      	ldr	r3, [r7, #0]
 80206be:	781b      	ldrb	r3, [r3, #0]
 80206c0:	00da      	lsls	r2, r3, #3
 80206c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80206c4:	18d3      	adds	r3, r2, r3
 80206c6:	4a0e      	ldr	r2, [pc, #56]	@ (8020700 <USB_EPStartXfer+0x748>)
 80206c8:	4694      	mov	ip, r2
 80206ca:	4463      	add	r3, ip
 80206cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80206ce:	1d7b      	adds	r3, r7, #5
 80206d0:	33ff      	adds	r3, #255	@ 0xff
 80206d2:	681b      	ldr	r3, [r3, #0]
 80206d4:	b29a      	uxth	r2, r3
 80206d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80206d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80206da:	2076      	movs	r0, #118	@ 0x76
 80206dc:	183b      	adds	r3, r7, r0
 80206de:	683a      	ldr	r2, [r7, #0]
 80206e0:	8912      	ldrh	r2, [r2, #8]
 80206e2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80206e4:	683b      	ldr	r3, [r7, #0]
 80206e6:	6959      	ldr	r1, [r3, #20]
 80206e8:	1d7b      	adds	r3, r7, #5
 80206ea:	33ff      	adds	r3, #255	@ 0xff
 80206ec:	681b      	ldr	r3, [r3, #0]
 80206ee:	b29c      	uxth	r4, r3
 80206f0:	183b      	adds	r3, r7, r0
 80206f2:	881a      	ldrh	r2, [r3, #0]
 80206f4:	6878      	ldr	r0, [r7, #4]
 80206f6:	0023      	movs	r3, r4
 80206f8:	f000 fed0 	bl	802149c <USB_WritePMA>
 80206fc:	e16f      	b.n	80209de <USB_EPStartXfer+0xa26>
 80206fe:	46c0      	nop			@ (mov r8, r8)
 8020700:	00000402 	.word	0x00000402
 8020704:	ffff8000 	.word	0xffff8000
 8020708:	00000406 	.word	0x00000406
 802070c:	ffff8e8f 	.word	0xffff8e8f
 8020710:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8020714:	683b      	ldr	r3, [r7, #0]
 8020716:	6a1a      	ldr	r2, [r3, #32]
 8020718:	1d7b      	adds	r3, r7, #5
 802071a:	33ff      	adds	r3, #255	@ 0xff
 802071c:	681b      	ldr	r3, [r3, #0]
 802071e:	1ad2      	subs	r2, r2, r3
 8020720:	683b      	ldr	r3, [r7, #0]
 8020722:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8020724:	687a      	ldr	r2, [r7, #4]
 8020726:	683b      	ldr	r3, [r7, #0]
 8020728:	781b      	ldrb	r3, [r3, #0]
 802072a:	009b      	lsls	r3, r3, #2
 802072c:	18d3      	adds	r3, r2, r3
 802072e:	881b      	ldrh	r3, [r3, #0]
 8020730:	b29b      	uxth	r3, r3
 8020732:	001a      	movs	r2, r3
 8020734:	2340      	movs	r3, #64	@ 0x40
 8020736:	4013      	ands	r3, r2
 8020738:	d100      	bne.n	802073c <USB_EPStartXfer+0x784>
 802073a:	e0a4      	b.n	8020886 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 802073c:	687b      	ldr	r3, [r7, #4]
 802073e:	673b      	str	r3, [r7, #112]	@ 0x70
 8020740:	683b      	ldr	r3, [r7, #0]
 8020742:	785b      	ldrb	r3, [r3, #1]
 8020744:	2b00      	cmp	r3, #0
 8020746:	d000      	beq.n	802074a <USB_EPStartXfer+0x792>
 8020748:	e070      	b.n	802082c <USB_EPStartXfer+0x874>
 802074a:	687b      	ldr	r3, [r7, #4]
 802074c:	66bb      	str	r3, [r7, #104]	@ 0x68
 802074e:	687b      	ldr	r3, [r7, #4]
 8020750:	2250      	movs	r2, #80	@ 0x50
 8020752:	5a9b      	ldrh	r3, [r3, r2]
 8020754:	b29b      	uxth	r3, r3
 8020756:	001a      	movs	r2, r3
 8020758:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 802075a:	189b      	adds	r3, r3, r2
 802075c:	66bb      	str	r3, [r7, #104]	@ 0x68
 802075e:	683b      	ldr	r3, [r7, #0]
 8020760:	781b      	ldrb	r3, [r3, #0]
 8020762:	00da      	lsls	r2, r3, #3
 8020764:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8020766:	18d3      	adds	r3, r2, r3
 8020768:	4abc      	ldr	r2, [pc, #752]	@ (8020a5c <USB_EPStartXfer+0xaa4>)
 802076a:	4694      	mov	ip, r2
 802076c:	4463      	add	r3, ip
 802076e:	667b      	str	r3, [r7, #100]	@ 0x64
 8020770:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020772:	881b      	ldrh	r3, [r3, #0]
 8020774:	b29b      	uxth	r3, r3
 8020776:	059b      	lsls	r3, r3, #22
 8020778:	0d9b      	lsrs	r3, r3, #22
 802077a:	b29a      	uxth	r2, r3
 802077c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 802077e:	801a      	strh	r2, [r3, #0]
 8020780:	1d7b      	adds	r3, r7, #5
 8020782:	33ff      	adds	r3, #255	@ 0xff
 8020784:	681b      	ldr	r3, [r3, #0]
 8020786:	2b3e      	cmp	r3, #62	@ 0x3e
 8020788:	d922      	bls.n	80207d0 <USB_EPStartXfer+0x818>
 802078a:	1d7b      	adds	r3, r7, #5
 802078c:	33ff      	adds	r3, #255	@ 0xff
 802078e:	681b      	ldr	r3, [r3, #0]
 8020790:	095b      	lsrs	r3, r3, #5
 8020792:	21f0      	movs	r1, #240	@ 0xf0
 8020794:	187a      	adds	r2, r7, r1
 8020796:	6013      	str	r3, [r2, #0]
 8020798:	1d7b      	adds	r3, r7, #5
 802079a:	33ff      	adds	r3, #255	@ 0xff
 802079c:	681b      	ldr	r3, [r3, #0]
 802079e:	221f      	movs	r2, #31
 80207a0:	4013      	ands	r3, r2
 80207a2:	d104      	bne.n	80207ae <USB_EPStartXfer+0x7f6>
 80207a4:	187b      	adds	r3, r7, r1
 80207a6:	681b      	ldr	r3, [r3, #0]
 80207a8:	3b01      	subs	r3, #1
 80207aa:	187a      	adds	r2, r7, r1
 80207ac:	6013      	str	r3, [r2, #0]
 80207ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80207b0:	881b      	ldrh	r3, [r3, #0]
 80207b2:	b29a      	uxth	r2, r3
 80207b4:	23f0      	movs	r3, #240	@ 0xf0
 80207b6:	18fb      	adds	r3, r7, r3
 80207b8:	681b      	ldr	r3, [r3, #0]
 80207ba:	b29b      	uxth	r3, r3
 80207bc:	029b      	lsls	r3, r3, #10
 80207be:	b29b      	uxth	r3, r3
 80207c0:	4313      	orrs	r3, r2
 80207c2:	b29b      	uxth	r3, r3
 80207c4:	4aa6      	ldr	r2, [pc, #664]	@ (8020a60 <USB_EPStartXfer+0xaa8>)
 80207c6:	4313      	orrs	r3, r2
 80207c8:	b29a      	uxth	r2, r3
 80207ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80207cc:	801a      	strh	r2, [r3, #0]
 80207ce:	e048      	b.n	8020862 <USB_EPStartXfer+0x8aa>
 80207d0:	1d7b      	adds	r3, r7, #5
 80207d2:	33ff      	adds	r3, #255	@ 0xff
 80207d4:	681b      	ldr	r3, [r3, #0]
 80207d6:	2b00      	cmp	r3, #0
 80207d8:	d108      	bne.n	80207ec <USB_EPStartXfer+0x834>
 80207da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80207dc:	881b      	ldrh	r3, [r3, #0]
 80207de:	b29b      	uxth	r3, r3
 80207e0:	4a9f      	ldr	r2, [pc, #636]	@ (8020a60 <USB_EPStartXfer+0xaa8>)
 80207e2:	4313      	orrs	r3, r2
 80207e4:	b29a      	uxth	r2, r3
 80207e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80207e8:	801a      	strh	r2, [r3, #0]
 80207ea:	e03a      	b.n	8020862 <USB_EPStartXfer+0x8aa>
 80207ec:	1d7b      	adds	r3, r7, #5
 80207ee:	33ff      	adds	r3, #255	@ 0xff
 80207f0:	681b      	ldr	r3, [r3, #0]
 80207f2:	085b      	lsrs	r3, r3, #1
 80207f4:	21f0      	movs	r1, #240	@ 0xf0
 80207f6:	187a      	adds	r2, r7, r1
 80207f8:	6013      	str	r3, [r2, #0]
 80207fa:	1d7b      	adds	r3, r7, #5
 80207fc:	33ff      	adds	r3, #255	@ 0xff
 80207fe:	681b      	ldr	r3, [r3, #0]
 8020800:	2201      	movs	r2, #1
 8020802:	4013      	ands	r3, r2
 8020804:	d004      	beq.n	8020810 <USB_EPStartXfer+0x858>
 8020806:	187b      	adds	r3, r7, r1
 8020808:	681b      	ldr	r3, [r3, #0]
 802080a:	3301      	adds	r3, #1
 802080c:	187a      	adds	r2, r7, r1
 802080e:	6013      	str	r3, [r2, #0]
 8020810:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020812:	881b      	ldrh	r3, [r3, #0]
 8020814:	b29a      	uxth	r2, r3
 8020816:	23f0      	movs	r3, #240	@ 0xf0
 8020818:	18fb      	adds	r3, r7, r3
 802081a:	681b      	ldr	r3, [r3, #0]
 802081c:	b29b      	uxth	r3, r3
 802081e:	029b      	lsls	r3, r3, #10
 8020820:	b29b      	uxth	r3, r3
 8020822:	4313      	orrs	r3, r2
 8020824:	b29a      	uxth	r2, r3
 8020826:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020828:	801a      	strh	r2, [r3, #0]
 802082a:	e01a      	b.n	8020862 <USB_EPStartXfer+0x8aa>
 802082c:	683b      	ldr	r3, [r7, #0]
 802082e:	785b      	ldrb	r3, [r3, #1]
 8020830:	2b01      	cmp	r3, #1
 8020832:	d116      	bne.n	8020862 <USB_EPStartXfer+0x8aa>
 8020834:	687b      	ldr	r3, [r7, #4]
 8020836:	2250      	movs	r2, #80	@ 0x50
 8020838:	5a9b      	ldrh	r3, [r3, r2]
 802083a:	b29b      	uxth	r3, r3
 802083c:	001a      	movs	r2, r3
 802083e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8020840:	189b      	adds	r3, r3, r2
 8020842:	673b      	str	r3, [r7, #112]	@ 0x70
 8020844:	683b      	ldr	r3, [r7, #0]
 8020846:	781b      	ldrb	r3, [r3, #0]
 8020848:	00da      	lsls	r2, r3, #3
 802084a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 802084c:	18d3      	adds	r3, r2, r3
 802084e:	4a83      	ldr	r2, [pc, #524]	@ (8020a5c <USB_EPStartXfer+0xaa4>)
 8020850:	4694      	mov	ip, r2
 8020852:	4463      	add	r3, ip
 8020854:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8020856:	1d7b      	adds	r3, r7, #5
 8020858:	33ff      	adds	r3, #255	@ 0xff
 802085a:	681b      	ldr	r3, [r3, #0]
 802085c:	b29a      	uxth	r2, r3
 802085e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8020860:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8020862:	2076      	movs	r0, #118	@ 0x76
 8020864:	183b      	adds	r3, r7, r0
 8020866:	683a      	ldr	r2, [r7, #0]
 8020868:	8952      	ldrh	r2, [r2, #10]
 802086a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 802086c:	683b      	ldr	r3, [r7, #0]
 802086e:	6959      	ldr	r1, [r3, #20]
 8020870:	1d7b      	adds	r3, r7, #5
 8020872:	33ff      	adds	r3, #255	@ 0xff
 8020874:	681b      	ldr	r3, [r3, #0]
 8020876:	b29c      	uxth	r4, r3
 8020878:	183b      	adds	r3, r7, r0
 802087a:	881a      	ldrh	r2, [r3, #0]
 802087c:	6878      	ldr	r0, [r7, #4]
 802087e:	0023      	movs	r3, r4
 8020880:	f000 fe0c 	bl	802149c <USB_WritePMA>
 8020884:	e0ab      	b.n	80209de <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8020886:	683b      	ldr	r3, [r7, #0]
 8020888:	785b      	ldrb	r3, [r3, #1]
 802088a:	2b00      	cmp	r3, #0
 802088c:	d000      	beq.n	8020890 <USB_EPStartXfer+0x8d8>
 802088e:	e070      	b.n	8020972 <USB_EPStartXfer+0x9ba>
 8020890:	687b      	ldr	r3, [r7, #4]
 8020892:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8020894:	687b      	ldr	r3, [r7, #4]
 8020896:	2250      	movs	r2, #80	@ 0x50
 8020898:	5a9b      	ldrh	r3, [r3, r2]
 802089a:	b29b      	uxth	r3, r3
 802089c:	001a      	movs	r2, r3
 802089e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80208a0:	189b      	adds	r3, r3, r2
 80208a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80208a4:	683b      	ldr	r3, [r7, #0]
 80208a6:	781b      	ldrb	r3, [r3, #0]
 80208a8:	00da      	lsls	r2, r3, #3
 80208aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80208ac:	18d3      	adds	r3, r2, r3
 80208ae:	4a6d      	ldr	r2, [pc, #436]	@ (8020a64 <USB_EPStartXfer+0xaac>)
 80208b0:	4694      	mov	ip, r2
 80208b2:	4463      	add	r3, ip
 80208b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80208b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80208b8:	881b      	ldrh	r3, [r3, #0]
 80208ba:	b29b      	uxth	r3, r3
 80208bc:	059b      	lsls	r3, r3, #22
 80208be:	0d9b      	lsrs	r3, r3, #22
 80208c0:	b29a      	uxth	r2, r3
 80208c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80208c4:	801a      	strh	r2, [r3, #0]
 80208c6:	1d7b      	adds	r3, r7, #5
 80208c8:	33ff      	adds	r3, #255	@ 0xff
 80208ca:	681b      	ldr	r3, [r3, #0]
 80208cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80208ce:	d922      	bls.n	8020916 <USB_EPStartXfer+0x95e>
 80208d0:	1d7b      	adds	r3, r7, #5
 80208d2:	33ff      	adds	r3, #255	@ 0xff
 80208d4:	681b      	ldr	r3, [r3, #0]
 80208d6:	095b      	lsrs	r3, r3, #5
 80208d8:	21ec      	movs	r1, #236	@ 0xec
 80208da:	187a      	adds	r2, r7, r1
 80208dc:	6013      	str	r3, [r2, #0]
 80208de:	1d7b      	adds	r3, r7, #5
 80208e0:	33ff      	adds	r3, #255	@ 0xff
 80208e2:	681b      	ldr	r3, [r3, #0]
 80208e4:	221f      	movs	r2, #31
 80208e6:	4013      	ands	r3, r2
 80208e8:	d104      	bne.n	80208f4 <USB_EPStartXfer+0x93c>
 80208ea:	187b      	adds	r3, r7, r1
 80208ec:	681b      	ldr	r3, [r3, #0]
 80208ee:	3b01      	subs	r3, #1
 80208f0:	187a      	adds	r2, r7, r1
 80208f2:	6013      	str	r3, [r2, #0]
 80208f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80208f6:	881b      	ldrh	r3, [r3, #0]
 80208f8:	b29a      	uxth	r2, r3
 80208fa:	23ec      	movs	r3, #236	@ 0xec
 80208fc:	18fb      	adds	r3, r7, r3
 80208fe:	681b      	ldr	r3, [r3, #0]
 8020900:	b29b      	uxth	r3, r3
 8020902:	029b      	lsls	r3, r3, #10
 8020904:	b29b      	uxth	r3, r3
 8020906:	4313      	orrs	r3, r2
 8020908:	b29b      	uxth	r3, r3
 802090a:	4a55      	ldr	r2, [pc, #340]	@ (8020a60 <USB_EPStartXfer+0xaa8>)
 802090c:	4313      	orrs	r3, r2
 802090e:	b29a      	uxth	r2, r3
 8020910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020912:	801a      	strh	r2, [r3, #0]
 8020914:	e052      	b.n	80209bc <USB_EPStartXfer+0xa04>
 8020916:	1d7b      	adds	r3, r7, #5
 8020918:	33ff      	adds	r3, #255	@ 0xff
 802091a:	681b      	ldr	r3, [r3, #0]
 802091c:	2b00      	cmp	r3, #0
 802091e:	d108      	bne.n	8020932 <USB_EPStartXfer+0x97a>
 8020920:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020922:	881b      	ldrh	r3, [r3, #0]
 8020924:	b29b      	uxth	r3, r3
 8020926:	4a4e      	ldr	r2, [pc, #312]	@ (8020a60 <USB_EPStartXfer+0xaa8>)
 8020928:	4313      	orrs	r3, r2
 802092a:	b29a      	uxth	r2, r3
 802092c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802092e:	801a      	strh	r2, [r3, #0]
 8020930:	e044      	b.n	80209bc <USB_EPStartXfer+0xa04>
 8020932:	1d7b      	adds	r3, r7, #5
 8020934:	33ff      	adds	r3, #255	@ 0xff
 8020936:	681b      	ldr	r3, [r3, #0]
 8020938:	085b      	lsrs	r3, r3, #1
 802093a:	21ec      	movs	r1, #236	@ 0xec
 802093c:	187a      	adds	r2, r7, r1
 802093e:	6013      	str	r3, [r2, #0]
 8020940:	1d7b      	adds	r3, r7, #5
 8020942:	33ff      	adds	r3, #255	@ 0xff
 8020944:	681b      	ldr	r3, [r3, #0]
 8020946:	2201      	movs	r2, #1
 8020948:	4013      	ands	r3, r2
 802094a:	d004      	beq.n	8020956 <USB_EPStartXfer+0x99e>
 802094c:	187b      	adds	r3, r7, r1
 802094e:	681b      	ldr	r3, [r3, #0]
 8020950:	3301      	adds	r3, #1
 8020952:	187a      	adds	r2, r7, r1
 8020954:	6013      	str	r3, [r2, #0]
 8020956:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8020958:	881b      	ldrh	r3, [r3, #0]
 802095a:	b29a      	uxth	r2, r3
 802095c:	23ec      	movs	r3, #236	@ 0xec
 802095e:	18fb      	adds	r3, r7, r3
 8020960:	681b      	ldr	r3, [r3, #0]
 8020962:	b29b      	uxth	r3, r3
 8020964:	029b      	lsls	r3, r3, #10
 8020966:	b29b      	uxth	r3, r3
 8020968:	4313      	orrs	r3, r2
 802096a:	b29a      	uxth	r2, r3
 802096c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802096e:	801a      	strh	r2, [r3, #0]
 8020970:	e024      	b.n	80209bc <USB_EPStartXfer+0xa04>
 8020972:	683b      	ldr	r3, [r7, #0]
 8020974:	785b      	ldrb	r3, [r3, #1]
 8020976:	2b01      	cmp	r3, #1
 8020978:	d120      	bne.n	80209bc <USB_EPStartXfer+0xa04>
 802097a:	687b      	ldr	r3, [r7, #4]
 802097c:	2184      	movs	r1, #132	@ 0x84
 802097e:	187a      	adds	r2, r7, r1
 8020980:	6013      	str	r3, [r2, #0]
 8020982:	687b      	ldr	r3, [r7, #4]
 8020984:	2250      	movs	r2, #80	@ 0x50
 8020986:	5a9b      	ldrh	r3, [r3, r2]
 8020988:	b29b      	uxth	r3, r3
 802098a:	001a      	movs	r2, r3
 802098c:	187b      	adds	r3, r7, r1
 802098e:	681b      	ldr	r3, [r3, #0]
 8020990:	189b      	adds	r3, r3, r2
 8020992:	187a      	adds	r2, r7, r1
 8020994:	6013      	str	r3, [r2, #0]
 8020996:	683b      	ldr	r3, [r7, #0]
 8020998:	781b      	ldrb	r3, [r3, #0]
 802099a:	00da      	lsls	r2, r3, #3
 802099c:	187b      	adds	r3, r7, r1
 802099e:	681b      	ldr	r3, [r3, #0]
 80209a0:	18d3      	adds	r3, r2, r3
 80209a2:	4a30      	ldr	r2, [pc, #192]	@ (8020a64 <USB_EPStartXfer+0xaac>)
 80209a4:	4694      	mov	ip, r2
 80209a6:	4463      	add	r3, ip
 80209a8:	2180      	movs	r1, #128	@ 0x80
 80209aa:	187a      	adds	r2, r7, r1
 80209ac:	6013      	str	r3, [r2, #0]
 80209ae:	1d7b      	adds	r3, r7, #5
 80209b0:	33ff      	adds	r3, #255	@ 0xff
 80209b2:	681b      	ldr	r3, [r3, #0]
 80209b4:	b29a      	uxth	r2, r3
 80209b6:	187b      	adds	r3, r7, r1
 80209b8:	681b      	ldr	r3, [r3, #0]
 80209ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80209bc:	2076      	movs	r0, #118	@ 0x76
 80209be:	183b      	adds	r3, r7, r0
 80209c0:	683a      	ldr	r2, [r7, #0]
 80209c2:	8912      	ldrh	r2, [r2, #8]
 80209c4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80209c6:	683b      	ldr	r3, [r7, #0]
 80209c8:	6959      	ldr	r1, [r3, #20]
 80209ca:	1d7b      	adds	r3, r7, #5
 80209cc:	33ff      	adds	r3, #255	@ 0xff
 80209ce:	681b      	ldr	r3, [r3, #0]
 80209d0:	b29c      	uxth	r4, r3
 80209d2:	183b      	adds	r3, r7, r0
 80209d4:	881a      	ldrh	r2, [r3, #0]
 80209d6:	6878      	ldr	r0, [r7, #4]
 80209d8:	0023      	movs	r3, r4
 80209da:	f000 fd5f 	bl	802149c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80209de:	687a      	ldr	r2, [r7, #4]
 80209e0:	683b      	ldr	r3, [r7, #0]
 80209e2:	781b      	ldrb	r3, [r3, #0]
 80209e4:	009b      	lsls	r3, r3, #2
 80209e6:	18d3      	adds	r3, r2, r3
 80209e8:	881b      	ldrh	r3, [r3, #0]
 80209ea:	b29a      	uxth	r2, r3
 80209ec:	200a      	movs	r0, #10
 80209ee:	183b      	adds	r3, r7, r0
 80209f0:	491d      	ldr	r1, [pc, #116]	@ (8020a68 <USB_EPStartXfer+0xab0>)
 80209f2:	400a      	ands	r2, r1
 80209f4:	801a      	strh	r2, [r3, #0]
 80209f6:	183b      	adds	r3, r7, r0
 80209f8:	183a      	adds	r2, r7, r0
 80209fa:	8812      	ldrh	r2, [r2, #0]
 80209fc:	2110      	movs	r1, #16
 80209fe:	404a      	eors	r2, r1
 8020a00:	801a      	strh	r2, [r3, #0]
 8020a02:	183b      	adds	r3, r7, r0
 8020a04:	183a      	adds	r2, r7, r0
 8020a06:	8812      	ldrh	r2, [r2, #0]
 8020a08:	2120      	movs	r1, #32
 8020a0a:	404a      	eors	r2, r1
 8020a0c:	801a      	strh	r2, [r3, #0]
 8020a0e:	687a      	ldr	r2, [r7, #4]
 8020a10:	683b      	ldr	r3, [r7, #0]
 8020a12:	781b      	ldrb	r3, [r3, #0]
 8020a14:	009b      	lsls	r3, r3, #2
 8020a16:	18d3      	adds	r3, r2, r3
 8020a18:	183a      	adds	r2, r7, r0
 8020a1a:	8812      	ldrh	r2, [r2, #0]
 8020a1c:	4913      	ldr	r1, [pc, #76]	@ (8020a6c <USB_EPStartXfer+0xab4>)
 8020a1e:	430a      	orrs	r2, r1
 8020a20:	b292      	uxth	r2, r2
 8020a22:	801a      	strh	r2, [r3, #0]
 8020a24:	f000 fbf4 	bl	8021210 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8020a28:	683b      	ldr	r3, [r7, #0]
 8020a2a:	7b1b      	ldrb	r3, [r3, #12]
 8020a2c:	2b00      	cmp	r3, #0
 8020a2e:	d000      	beq.n	8020a32 <USB_EPStartXfer+0xa7a>
 8020a30:	e0a9      	b.n	8020b86 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8020a32:	683b      	ldr	r3, [r7, #0]
 8020a34:	699a      	ldr	r2, [r3, #24]
 8020a36:	683b      	ldr	r3, [r7, #0]
 8020a38:	691b      	ldr	r3, [r3, #16]
 8020a3a:	429a      	cmp	r2, r3
 8020a3c:	d918      	bls.n	8020a70 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8020a3e:	683b      	ldr	r3, [r7, #0]
 8020a40:	691b      	ldr	r3, [r3, #16]
 8020a42:	1d7a      	adds	r2, r7, #5
 8020a44:	32ff      	adds	r2, #255	@ 0xff
 8020a46:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8020a48:	683b      	ldr	r3, [r7, #0]
 8020a4a:	699a      	ldr	r2, [r3, #24]
 8020a4c:	1d7b      	adds	r3, r7, #5
 8020a4e:	33ff      	adds	r3, #255	@ 0xff
 8020a50:	681b      	ldr	r3, [r3, #0]
 8020a52:	1ad2      	subs	r2, r2, r3
 8020a54:	683b      	ldr	r3, [r7, #0]
 8020a56:	619a      	str	r2, [r3, #24]
 8020a58:	e012      	b.n	8020a80 <USB_EPStartXfer+0xac8>
 8020a5a:	46c0      	nop			@ (mov r8, r8)
 8020a5c:	00000406 	.word	0x00000406
 8020a60:	ffff8000 	.word	0xffff8000
 8020a64:	00000402 	.word	0x00000402
 8020a68:	ffff8fbf 	.word	0xffff8fbf
 8020a6c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8020a70:	683b      	ldr	r3, [r7, #0]
 8020a72:	699b      	ldr	r3, [r3, #24]
 8020a74:	1d7a      	adds	r2, r7, #5
 8020a76:	32ff      	adds	r2, #255	@ 0xff
 8020a78:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8020a7a:	683b      	ldr	r3, [r7, #0]
 8020a7c:	2200      	movs	r2, #0
 8020a7e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8020a80:	687b      	ldr	r3, [r7, #4]
 8020a82:	2190      	movs	r1, #144	@ 0x90
 8020a84:	187a      	adds	r2, r7, r1
 8020a86:	6013      	str	r3, [r2, #0]
 8020a88:	687b      	ldr	r3, [r7, #4]
 8020a8a:	2250      	movs	r2, #80	@ 0x50
 8020a8c:	5a9b      	ldrh	r3, [r3, r2]
 8020a8e:	b29b      	uxth	r3, r3
 8020a90:	001a      	movs	r2, r3
 8020a92:	187b      	adds	r3, r7, r1
 8020a94:	681b      	ldr	r3, [r3, #0]
 8020a96:	189b      	adds	r3, r3, r2
 8020a98:	187a      	adds	r2, r7, r1
 8020a9a:	6013      	str	r3, [r2, #0]
 8020a9c:	683b      	ldr	r3, [r7, #0]
 8020a9e:	781b      	ldrb	r3, [r3, #0]
 8020aa0:	00da      	lsls	r2, r3, #3
 8020aa2:	187b      	adds	r3, r7, r1
 8020aa4:	681b      	ldr	r3, [r3, #0]
 8020aa6:	18d3      	adds	r3, r2, r3
 8020aa8:	4acf      	ldr	r2, [pc, #828]	@ (8020de8 <USB_EPStartXfer+0xe30>)
 8020aaa:	4694      	mov	ip, r2
 8020aac:	4463      	add	r3, ip
 8020aae:	218c      	movs	r1, #140	@ 0x8c
 8020ab0:	187a      	adds	r2, r7, r1
 8020ab2:	6013      	str	r3, [r2, #0]
 8020ab4:	187b      	adds	r3, r7, r1
 8020ab6:	681b      	ldr	r3, [r3, #0]
 8020ab8:	881b      	ldrh	r3, [r3, #0]
 8020aba:	b29b      	uxth	r3, r3
 8020abc:	059b      	lsls	r3, r3, #22
 8020abe:	0d9b      	lsrs	r3, r3, #22
 8020ac0:	b29a      	uxth	r2, r3
 8020ac2:	187b      	adds	r3, r7, r1
 8020ac4:	681b      	ldr	r3, [r3, #0]
 8020ac6:	801a      	strh	r2, [r3, #0]
 8020ac8:	1d7b      	adds	r3, r7, #5
 8020aca:	33ff      	adds	r3, #255	@ 0xff
 8020acc:	681b      	ldr	r3, [r3, #0]
 8020ace:	2b3e      	cmp	r3, #62	@ 0x3e
 8020ad0:	d925      	bls.n	8020b1e <USB_EPStartXfer+0xb66>
 8020ad2:	1d7b      	adds	r3, r7, #5
 8020ad4:	33ff      	adds	r3, #255	@ 0xff
 8020ad6:	681b      	ldr	r3, [r3, #0]
 8020ad8:	095b      	lsrs	r3, r3, #5
 8020ada:	21e8      	movs	r1, #232	@ 0xe8
 8020adc:	187a      	adds	r2, r7, r1
 8020ade:	6013      	str	r3, [r2, #0]
 8020ae0:	1d7b      	adds	r3, r7, #5
 8020ae2:	33ff      	adds	r3, #255	@ 0xff
 8020ae4:	681b      	ldr	r3, [r3, #0]
 8020ae6:	221f      	movs	r2, #31
 8020ae8:	4013      	ands	r3, r2
 8020aea:	d104      	bne.n	8020af6 <USB_EPStartXfer+0xb3e>
 8020aec:	187b      	adds	r3, r7, r1
 8020aee:	681b      	ldr	r3, [r3, #0]
 8020af0:	3b01      	subs	r3, #1
 8020af2:	187a      	adds	r2, r7, r1
 8020af4:	6013      	str	r3, [r2, #0]
 8020af6:	218c      	movs	r1, #140	@ 0x8c
 8020af8:	187b      	adds	r3, r7, r1
 8020afa:	681b      	ldr	r3, [r3, #0]
 8020afc:	881b      	ldrh	r3, [r3, #0]
 8020afe:	b29a      	uxth	r2, r3
 8020b00:	23e8      	movs	r3, #232	@ 0xe8
 8020b02:	18fb      	adds	r3, r7, r3
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	b29b      	uxth	r3, r3
 8020b08:	029b      	lsls	r3, r3, #10
 8020b0a:	b29b      	uxth	r3, r3
 8020b0c:	4313      	orrs	r3, r2
 8020b0e:	b29b      	uxth	r3, r3
 8020b10:	4ab6      	ldr	r2, [pc, #728]	@ (8020dec <USB_EPStartXfer+0xe34>)
 8020b12:	4313      	orrs	r3, r2
 8020b14:	b29a      	uxth	r2, r3
 8020b16:	187b      	adds	r3, r7, r1
 8020b18:	681b      	ldr	r3, [r3, #0]
 8020b1a:	801a      	strh	r2, [r3, #0]
 8020b1c:	e353      	b.n	80211c6 <USB_EPStartXfer+0x120e>
 8020b1e:	1d7b      	adds	r3, r7, #5
 8020b20:	33ff      	adds	r3, #255	@ 0xff
 8020b22:	681b      	ldr	r3, [r3, #0]
 8020b24:	2b00      	cmp	r3, #0
 8020b26:	d10b      	bne.n	8020b40 <USB_EPStartXfer+0xb88>
 8020b28:	218c      	movs	r1, #140	@ 0x8c
 8020b2a:	187b      	adds	r3, r7, r1
 8020b2c:	681b      	ldr	r3, [r3, #0]
 8020b2e:	881b      	ldrh	r3, [r3, #0]
 8020b30:	b29b      	uxth	r3, r3
 8020b32:	4aae      	ldr	r2, [pc, #696]	@ (8020dec <USB_EPStartXfer+0xe34>)
 8020b34:	4313      	orrs	r3, r2
 8020b36:	b29a      	uxth	r2, r3
 8020b38:	187b      	adds	r3, r7, r1
 8020b3a:	681b      	ldr	r3, [r3, #0]
 8020b3c:	801a      	strh	r2, [r3, #0]
 8020b3e:	e342      	b.n	80211c6 <USB_EPStartXfer+0x120e>
 8020b40:	1d7b      	adds	r3, r7, #5
 8020b42:	33ff      	adds	r3, #255	@ 0xff
 8020b44:	681b      	ldr	r3, [r3, #0]
 8020b46:	085b      	lsrs	r3, r3, #1
 8020b48:	21e8      	movs	r1, #232	@ 0xe8
 8020b4a:	187a      	adds	r2, r7, r1
 8020b4c:	6013      	str	r3, [r2, #0]
 8020b4e:	1d7b      	adds	r3, r7, #5
 8020b50:	33ff      	adds	r3, #255	@ 0xff
 8020b52:	681b      	ldr	r3, [r3, #0]
 8020b54:	2201      	movs	r2, #1
 8020b56:	4013      	ands	r3, r2
 8020b58:	d004      	beq.n	8020b64 <USB_EPStartXfer+0xbac>
 8020b5a:	187b      	adds	r3, r7, r1
 8020b5c:	681b      	ldr	r3, [r3, #0]
 8020b5e:	3301      	adds	r3, #1
 8020b60:	187a      	adds	r2, r7, r1
 8020b62:	6013      	str	r3, [r2, #0]
 8020b64:	218c      	movs	r1, #140	@ 0x8c
 8020b66:	187b      	adds	r3, r7, r1
 8020b68:	681b      	ldr	r3, [r3, #0]
 8020b6a:	881b      	ldrh	r3, [r3, #0]
 8020b6c:	b29a      	uxth	r2, r3
 8020b6e:	23e8      	movs	r3, #232	@ 0xe8
 8020b70:	18fb      	adds	r3, r7, r3
 8020b72:	681b      	ldr	r3, [r3, #0]
 8020b74:	b29b      	uxth	r3, r3
 8020b76:	029b      	lsls	r3, r3, #10
 8020b78:	b29b      	uxth	r3, r3
 8020b7a:	4313      	orrs	r3, r2
 8020b7c:	b29a      	uxth	r2, r3
 8020b7e:	187b      	adds	r3, r7, r1
 8020b80:	681b      	ldr	r3, [r3, #0]
 8020b82:	801a      	strh	r2, [r3, #0]
 8020b84:	e31f      	b.n	80211c6 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8020b86:	683b      	ldr	r3, [r7, #0]
 8020b88:	78db      	ldrb	r3, [r3, #3]
 8020b8a:	2b02      	cmp	r3, #2
 8020b8c:	d000      	beq.n	8020b90 <USB_EPStartXfer+0xbd8>
 8020b8e:	e191      	b.n	8020eb4 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8020b90:	683b      	ldr	r3, [r7, #0]
 8020b92:	785b      	ldrb	r3, [r3, #1]
 8020b94:	2b00      	cmp	r3, #0
 8020b96:	d000      	beq.n	8020b9a <USB_EPStartXfer+0xbe2>
 8020b98:	e07c      	b.n	8020c94 <USB_EPStartXfer+0xcdc>
 8020b9a:	687b      	ldr	r3, [r7, #4]
 8020b9c:	21ac      	movs	r1, #172	@ 0xac
 8020b9e:	187a      	adds	r2, r7, r1
 8020ba0:	6013      	str	r3, [r2, #0]
 8020ba2:	687b      	ldr	r3, [r7, #4]
 8020ba4:	2250      	movs	r2, #80	@ 0x50
 8020ba6:	5a9b      	ldrh	r3, [r3, r2]
 8020ba8:	b29b      	uxth	r3, r3
 8020baa:	001a      	movs	r2, r3
 8020bac:	187b      	adds	r3, r7, r1
 8020bae:	681b      	ldr	r3, [r3, #0]
 8020bb0:	189b      	adds	r3, r3, r2
 8020bb2:	187a      	adds	r2, r7, r1
 8020bb4:	6013      	str	r3, [r2, #0]
 8020bb6:	683b      	ldr	r3, [r7, #0]
 8020bb8:	781b      	ldrb	r3, [r3, #0]
 8020bba:	00da      	lsls	r2, r3, #3
 8020bbc:	187b      	adds	r3, r7, r1
 8020bbe:	681b      	ldr	r3, [r3, #0]
 8020bc0:	18d3      	adds	r3, r2, r3
 8020bc2:	4a8b      	ldr	r2, [pc, #556]	@ (8020df0 <USB_EPStartXfer+0xe38>)
 8020bc4:	4694      	mov	ip, r2
 8020bc6:	4463      	add	r3, ip
 8020bc8:	21a8      	movs	r1, #168	@ 0xa8
 8020bca:	187a      	adds	r2, r7, r1
 8020bcc:	6013      	str	r3, [r2, #0]
 8020bce:	187b      	adds	r3, r7, r1
 8020bd0:	681b      	ldr	r3, [r3, #0]
 8020bd2:	881b      	ldrh	r3, [r3, #0]
 8020bd4:	b29b      	uxth	r3, r3
 8020bd6:	059b      	lsls	r3, r3, #22
 8020bd8:	0d9b      	lsrs	r3, r3, #22
 8020bda:	b29a      	uxth	r2, r3
 8020bdc:	187b      	adds	r3, r7, r1
 8020bde:	681b      	ldr	r3, [r3, #0]
 8020be0:	801a      	strh	r2, [r3, #0]
 8020be2:	683b      	ldr	r3, [r7, #0]
 8020be4:	691b      	ldr	r3, [r3, #16]
 8020be6:	2b3e      	cmp	r3, #62	@ 0x3e
 8020be8:	d923      	bls.n	8020c32 <USB_EPStartXfer+0xc7a>
 8020bea:	683b      	ldr	r3, [r7, #0]
 8020bec:	691b      	ldr	r3, [r3, #16]
 8020bee:	095b      	lsrs	r3, r3, #5
 8020bf0:	21e4      	movs	r1, #228	@ 0xe4
 8020bf2:	187a      	adds	r2, r7, r1
 8020bf4:	6013      	str	r3, [r2, #0]
 8020bf6:	683b      	ldr	r3, [r7, #0]
 8020bf8:	691b      	ldr	r3, [r3, #16]
 8020bfa:	221f      	movs	r2, #31
 8020bfc:	4013      	ands	r3, r2
 8020bfe:	d104      	bne.n	8020c0a <USB_EPStartXfer+0xc52>
 8020c00:	187b      	adds	r3, r7, r1
 8020c02:	681b      	ldr	r3, [r3, #0]
 8020c04:	3b01      	subs	r3, #1
 8020c06:	187a      	adds	r2, r7, r1
 8020c08:	6013      	str	r3, [r2, #0]
 8020c0a:	21a8      	movs	r1, #168	@ 0xa8
 8020c0c:	187b      	adds	r3, r7, r1
 8020c0e:	681b      	ldr	r3, [r3, #0]
 8020c10:	881b      	ldrh	r3, [r3, #0]
 8020c12:	b29a      	uxth	r2, r3
 8020c14:	23e4      	movs	r3, #228	@ 0xe4
 8020c16:	18fb      	adds	r3, r7, r3
 8020c18:	681b      	ldr	r3, [r3, #0]
 8020c1a:	b29b      	uxth	r3, r3
 8020c1c:	029b      	lsls	r3, r3, #10
 8020c1e:	b29b      	uxth	r3, r3
 8020c20:	4313      	orrs	r3, r2
 8020c22:	b29b      	uxth	r3, r3
 8020c24:	4a71      	ldr	r2, [pc, #452]	@ (8020dec <USB_EPStartXfer+0xe34>)
 8020c26:	4313      	orrs	r3, r2
 8020c28:	b29a      	uxth	r2, r3
 8020c2a:	187b      	adds	r3, r7, r1
 8020c2c:	681b      	ldr	r3, [r3, #0]
 8020c2e:	801a      	strh	r2, [r3, #0]
 8020c30:	e054      	b.n	8020cdc <USB_EPStartXfer+0xd24>
 8020c32:	683b      	ldr	r3, [r7, #0]
 8020c34:	691b      	ldr	r3, [r3, #16]
 8020c36:	2b00      	cmp	r3, #0
 8020c38:	d10b      	bne.n	8020c52 <USB_EPStartXfer+0xc9a>
 8020c3a:	21a8      	movs	r1, #168	@ 0xa8
 8020c3c:	187b      	adds	r3, r7, r1
 8020c3e:	681b      	ldr	r3, [r3, #0]
 8020c40:	881b      	ldrh	r3, [r3, #0]
 8020c42:	b29b      	uxth	r3, r3
 8020c44:	4a69      	ldr	r2, [pc, #420]	@ (8020dec <USB_EPStartXfer+0xe34>)
 8020c46:	4313      	orrs	r3, r2
 8020c48:	b29a      	uxth	r2, r3
 8020c4a:	187b      	adds	r3, r7, r1
 8020c4c:	681b      	ldr	r3, [r3, #0]
 8020c4e:	801a      	strh	r2, [r3, #0]
 8020c50:	e044      	b.n	8020cdc <USB_EPStartXfer+0xd24>
 8020c52:	683b      	ldr	r3, [r7, #0]
 8020c54:	691b      	ldr	r3, [r3, #16]
 8020c56:	085b      	lsrs	r3, r3, #1
 8020c58:	21e4      	movs	r1, #228	@ 0xe4
 8020c5a:	187a      	adds	r2, r7, r1
 8020c5c:	6013      	str	r3, [r2, #0]
 8020c5e:	683b      	ldr	r3, [r7, #0]
 8020c60:	691b      	ldr	r3, [r3, #16]
 8020c62:	2201      	movs	r2, #1
 8020c64:	4013      	ands	r3, r2
 8020c66:	d004      	beq.n	8020c72 <USB_EPStartXfer+0xcba>
 8020c68:	187b      	adds	r3, r7, r1
 8020c6a:	681b      	ldr	r3, [r3, #0]
 8020c6c:	3301      	adds	r3, #1
 8020c6e:	187a      	adds	r2, r7, r1
 8020c70:	6013      	str	r3, [r2, #0]
 8020c72:	21a8      	movs	r1, #168	@ 0xa8
 8020c74:	187b      	adds	r3, r7, r1
 8020c76:	681b      	ldr	r3, [r3, #0]
 8020c78:	881b      	ldrh	r3, [r3, #0]
 8020c7a:	b29a      	uxth	r2, r3
 8020c7c:	23e4      	movs	r3, #228	@ 0xe4
 8020c7e:	18fb      	adds	r3, r7, r3
 8020c80:	681b      	ldr	r3, [r3, #0]
 8020c82:	b29b      	uxth	r3, r3
 8020c84:	029b      	lsls	r3, r3, #10
 8020c86:	b29b      	uxth	r3, r3
 8020c88:	4313      	orrs	r3, r2
 8020c8a:	b29a      	uxth	r2, r3
 8020c8c:	187b      	adds	r3, r7, r1
 8020c8e:	681b      	ldr	r3, [r3, #0]
 8020c90:	801a      	strh	r2, [r3, #0]
 8020c92:	e023      	b.n	8020cdc <USB_EPStartXfer+0xd24>
 8020c94:	683b      	ldr	r3, [r7, #0]
 8020c96:	785b      	ldrb	r3, [r3, #1]
 8020c98:	2b01      	cmp	r3, #1
 8020c9a:	d11f      	bne.n	8020cdc <USB_EPStartXfer+0xd24>
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	21b4      	movs	r1, #180	@ 0xb4
 8020ca0:	187a      	adds	r2, r7, r1
 8020ca2:	6013      	str	r3, [r2, #0]
 8020ca4:	687b      	ldr	r3, [r7, #4]
 8020ca6:	2250      	movs	r2, #80	@ 0x50
 8020ca8:	5a9b      	ldrh	r3, [r3, r2]
 8020caa:	b29b      	uxth	r3, r3
 8020cac:	001a      	movs	r2, r3
 8020cae:	187b      	adds	r3, r7, r1
 8020cb0:	681b      	ldr	r3, [r3, #0]
 8020cb2:	189b      	adds	r3, r3, r2
 8020cb4:	187a      	adds	r2, r7, r1
 8020cb6:	6013      	str	r3, [r2, #0]
 8020cb8:	683b      	ldr	r3, [r7, #0]
 8020cba:	781b      	ldrb	r3, [r3, #0]
 8020cbc:	00da      	lsls	r2, r3, #3
 8020cbe:	187b      	adds	r3, r7, r1
 8020cc0:	681b      	ldr	r3, [r3, #0]
 8020cc2:	18d3      	adds	r3, r2, r3
 8020cc4:	4a4a      	ldr	r2, [pc, #296]	@ (8020df0 <USB_EPStartXfer+0xe38>)
 8020cc6:	4694      	mov	ip, r2
 8020cc8:	4463      	add	r3, ip
 8020cca:	21b0      	movs	r1, #176	@ 0xb0
 8020ccc:	187a      	adds	r2, r7, r1
 8020cce:	6013      	str	r3, [r2, #0]
 8020cd0:	683b      	ldr	r3, [r7, #0]
 8020cd2:	691b      	ldr	r3, [r3, #16]
 8020cd4:	b29a      	uxth	r2, r3
 8020cd6:	187b      	adds	r3, r7, r1
 8020cd8:	681b      	ldr	r3, [r3, #0]
 8020cda:	801a      	strh	r2, [r3, #0]
 8020cdc:	687b      	ldr	r3, [r7, #4]
 8020cde:	22a4      	movs	r2, #164	@ 0xa4
 8020ce0:	18ba      	adds	r2, r7, r2
 8020ce2:	6013      	str	r3, [r2, #0]
 8020ce4:	683b      	ldr	r3, [r7, #0]
 8020ce6:	785b      	ldrb	r3, [r3, #1]
 8020ce8:	2b00      	cmp	r3, #0
 8020cea:	d000      	beq.n	8020cee <USB_EPStartXfer+0xd36>
 8020cec:	e082      	b.n	8020df4 <USB_EPStartXfer+0xe3c>
 8020cee:	687b      	ldr	r3, [r7, #4]
 8020cf0:	219c      	movs	r1, #156	@ 0x9c
 8020cf2:	187a      	adds	r2, r7, r1
 8020cf4:	6013      	str	r3, [r2, #0]
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	2250      	movs	r2, #80	@ 0x50
 8020cfa:	5a9b      	ldrh	r3, [r3, r2]
 8020cfc:	b29b      	uxth	r3, r3
 8020cfe:	001a      	movs	r2, r3
 8020d00:	187b      	adds	r3, r7, r1
 8020d02:	681b      	ldr	r3, [r3, #0]
 8020d04:	189b      	adds	r3, r3, r2
 8020d06:	187a      	adds	r2, r7, r1
 8020d08:	6013      	str	r3, [r2, #0]
 8020d0a:	683b      	ldr	r3, [r7, #0]
 8020d0c:	781b      	ldrb	r3, [r3, #0]
 8020d0e:	00da      	lsls	r2, r3, #3
 8020d10:	187b      	adds	r3, r7, r1
 8020d12:	681b      	ldr	r3, [r3, #0]
 8020d14:	18d3      	adds	r3, r2, r3
 8020d16:	4a34      	ldr	r2, [pc, #208]	@ (8020de8 <USB_EPStartXfer+0xe30>)
 8020d18:	4694      	mov	ip, r2
 8020d1a:	4463      	add	r3, ip
 8020d1c:	2198      	movs	r1, #152	@ 0x98
 8020d1e:	187a      	adds	r2, r7, r1
 8020d20:	6013      	str	r3, [r2, #0]
 8020d22:	187b      	adds	r3, r7, r1
 8020d24:	681b      	ldr	r3, [r3, #0]
 8020d26:	881b      	ldrh	r3, [r3, #0]
 8020d28:	b29b      	uxth	r3, r3
 8020d2a:	059b      	lsls	r3, r3, #22
 8020d2c:	0d9b      	lsrs	r3, r3, #22
 8020d2e:	b29a      	uxth	r2, r3
 8020d30:	187b      	adds	r3, r7, r1
 8020d32:	681b      	ldr	r3, [r3, #0]
 8020d34:	801a      	strh	r2, [r3, #0]
 8020d36:	683b      	ldr	r3, [r7, #0]
 8020d38:	691b      	ldr	r3, [r3, #16]
 8020d3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8020d3c:	d923      	bls.n	8020d86 <USB_EPStartXfer+0xdce>
 8020d3e:	683b      	ldr	r3, [r7, #0]
 8020d40:	691b      	ldr	r3, [r3, #16]
 8020d42:	095b      	lsrs	r3, r3, #5
 8020d44:	21e0      	movs	r1, #224	@ 0xe0
 8020d46:	187a      	adds	r2, r7, r1
 8020d48:	6013      	str	r3, [r2, #0]
 8020d4a:	683b      	ldr	r3, [r7, #0]
 8020d4c:	691b      	ldr	r3, [r3, #16]
 8020d4e:	221f      	movs	r2, #31
 8020d50:	4013      	ands	r3, r2
 8020d52:	d104      	bne.n	8020d5e <USB_EPStartXfer+0xda6>
 8020d54:	187b      	adds	r3, r7, r1
 8020d56:	681b      	ldr	r3, [r3, #0]
 8020d58:	3b01      	subs	r3, #1
 8020d5a:	187a      	adds	r2, r7, r1
 8020d5c:	6013      	str	r3, [r2, #0]
 8020d5e:	2198      	movs	r1, #152	@ 0x98
 8020d60:	187b      	adds	r3, r7, r1
 8020d62:	681b      	ldr	r3, [r3, #0]
 8020d64:	881b      	ldrh	r3, [r3, #0]
 8020d66:	b29a      	uxth	r2, r3
 8020d68:	23e0      	movs	r3, #224	@ 0xe0
 8020d6a:	18fb      	adds	r3, r7, r3
 8020d6c:	681b      	ldr	r3, [r3, #0]
 8020d6e:	b29b      	uxth	r3, r3
 8020d70:	029b      	lsls	r3, r3, #10
 8020d72:	b29b      	uxth	r3, r3
 8020d74:	4313      	orrs	r3, r2
 8020d76:	b29b      	uxth	r3, r3
 8020d78:	4a1c      	ldr	r2, [pc, #112]	@ (8020dec <USB_EPStartXfer+0xe34>)
 8020d7a:	4313      	orrs	r3, r2
 8020d7c:	b29a      	uxth	r2, r3
 8020d7e:	187b      	adds	r3, r7, r1
 8020d80:	681b      	ldr	r3, [r3, #0]
 8020d82:	801a      	strh	r2, [r3, #0]
 8020d84:	e057      	b.n	8020e36 <USB_EPStartXfer+0xe7e>
 8020d86:	683b      	ldr	r3, [r7, #0]
 8020d88:	691b      	ldr	r3, [r3, #16]
 8020d8a:	2b00      	cmp	r3, #0
 8020d8c:	d10b      	bne.n	8020da6 <USB_EPStartXfer+0xdee>
 8020d8e:	2198      	movs	r1, #152	@ 0x98
 8020d90:	187b      	adds	r3, r7, r1
 8020d92:	681b      	ldr	r3, [r3, #0]
 8020d94:	881b      	ldrh	r3, [r3, #0]
 8020d96:	b29b      	uxth	r3, r3
 8020d98:	4a14      	ldr	r2, [pc, #80]	@ (8020dec <USB_EPStartXfer+0xe34>)
 8020d9a:	4313      	orrs	r3, r2
 8020d9c:	b29a      	uxth	r2, r3
 8020d9e:	187b      	adds	r3, r7, r1
 8020da0:	681b      	ldr	r3, [r3, #0]
 8020da2:	801a      	strh	r2, [r3, #0]
 8020da4:	e047      	b.n	8020e36 <USB_EPStartXfer+0xe7e>
 8020da6:	683b      	ldr	r3, [r7, #0]
 8020da8:	691b      	ldr	r3, [r3, #16]
 8020daa:	085b      	lsrs	r3, r3, #1
 8020dac:	21e0      	movs	r1, #224	@ 0xe0
 8020dae:	187a      	adds	r2, r7, r1
 8020db0:	6013      	str	r3, [r2, #0]
 8020db2:	683b      	ldr	r3, [r7, #0]
 8020db4:	691b      	ldr	r3, [r3, #16]
 8020db6:	2201      	movs	r2, #1
 8020db8:	4013      	ands	r3, r2
 8020dba:	d004      	beq.n	8020dc6 <USB_EPStartXfer+0xe0e>
 8020dbc:	187b      	adds	r3, r7, r1
 8020dbe:	681b      	ldr	r3, [r3, #0]
 8020dc0:	3301      	adds	r3, #1
 8020dc2:	187a      	adds	r2, r7, r1
 8020dc4:	6013      	str	r3, [r2, #0]
 8020dc6:	2198      	movs	r1, #152	@ 0x98
 8020dc8:	187b      	adds	r3, r7, r1
 8020dca:	681b      	ldr	r3, [r3, #0]
 8020dcc:	881b      	ldrh	r3, [r3, #0]
 8020dce:	b29a      	uxth	r2, r3
 8020dd0:	23e0      	movs	r3, #224	@ 0xe0
 8020dd2:	18fb      	adds	r3, r7, r3
 8020dd4:	681b      	ldr	r3, [r3, #0]
 8020dd6:	b29b      	uxth	r3, r3
 8020dd8:	029b      	lsls	r3, r3, #10
 8020dda:	b29b      	uxth	r3, r3
 8020ddc:	4313      	orrs	r3, r2
 8020dde:	b29a      	uxth	r2, r3
 8020de0:	187b      	adds	r3, r7, r1
 8020de2:	681b      	ldr	r3, [r3, #0]
 8020de4:	801a      	strh	r2, [r3, #0]
 8020de6:	e026      	b.n	8020e36 <USB_EPStartXfer+0xe7e>
 8020de8:	00000406 	.word	0x00000406
 8020dec:	ffff8000 	.word	0xffff8000
 8020df0:	00000402 	.word	0x00000402
 8020df4:	683b      	ldr	r3, [r7, #0]
 8020df6:	785b      	ldrb	r3, [r3, #1]
 8020df8:	2b01      	cmp	r3, #1
 8020dfa:	d11c      	bne.n	8020e36 <USB_EPStartXfer+0xe7e>
 8020dfc:	687b      	ldr	r3, [r7, #4]
 8020dfe:	2250      	movs	r2, #80	@ 0x50
 8020e00:	5a9b      	ldrh	r3, [r3, r2]
 8020e02:	b29b      	uxth	r3, r3
 8020e04:	001a      	movs	r2, r3
 8020e06:	21a4      	movs	r1, #164	@ 0xa4
 8020e08:	187b      	adds	r3, r7, r1
 8020e0a:	681b      	ldr	r3, [r3, #0]
 8020e0c:	189b      	adds	r3, r3, r2
 8020e0e:	187a      	adds	r2, r7, r1
 8020e10:	6013      	str	r3, [r2, #0]
 8020e12:	683b      	ldr	r3, [r7, #0]
 8020e14:	781b      	ldrb	r3, [r3, #0]
 8020e16:	00da      	lsls	r2, r3, #3
 8020e18:	187b      	adds	r3, r7, r1
 8020e1a:	681b      	ldr	r3, [r3, #0]
 8020e1c:	18d3      	adds	r3, r2, r3
 8020e1e:	4ad2      	ldr	r2, [pc, #840]	@ (8021168 <USB_EPStartXfer+0x11b0>)
 8020e20:	4694      	mov	ip, r2
 8020e22:	4463      	add	r3, ip
 8020e24:	21a0      	movs	r1, #160	@ 0xa0
 8020e26:	187a      	adds	r2, r7, r1
 8020e28:	6013      	str	r3, [r2, #0]
 8020e2a:	683b      	ldr	r3, [r7, #0]
 8020e2c:	691b      	ldr	r3, [r3, #16]
 8020e2e:	b29a      	uxth	r2, r3
 8020e30:	187b      	adds	r3, r7, r1
 8020e32:	681b      	ldr	r3, [r3, #0]
 8020e34:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8020e36:	683b      	ldr	r3, [r7, #0]
 8020e38:	69db      	ldr	r3, [r3, #28]
 8020e3a:	2b00      	cmp	r3, #0
 8020e3c:	d100      	bne.n	8020e40 <USB_EPStartXfer+0xe88>
 8020e3e:	e1c2      	b.n	80211c6 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8020e40:	687a      	ldr	r2, [r7, #4]
 8020e42:	683b      	ldr	r3, [r7, #0]
 8020e44:	781b      	ldrb	r3, [r3, #0]
 8020e46:	009b      	lsls	r3, r3, #2
 8020e48:	18d2      	adds	r2, r2, r3
 8020e4a:	2196      	movs	r1, #150	@ 0x96
 8020e4c:	187b      	adds	r3, r7, r1
 8020e4e:	8812      	ldrh	r2, [r2, #0]
 8020e50:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020e52:	187b      	adds	r3, r7, r1
 8020e54:	881a      	ldrh	r2, [r3, #0]
 8020e56:	2380      	movs	r3, #128	@ 0x80
 8020e58:	01db      	lsls	r3, r3, #7
 8020e5a:	4013      	ands	r3, r2
 8020e5c:	d004      	beq.n	8020e68 <USB_EPStartXfer+0xeb0>
 8020e5e:	187b      	adds	r3, r7, r1
 8020e60:	881b      	ldrh	r3, [r3, #0]
 8020e62:	2240      	movs	r2, #64	@ 0x40
 8020e64:	4013      	ands	r3, r2
 8020e66:	d10d      	bne.n	8020e84 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020e68:	2196      	movs	r1, #150	@ 0x96
 8020e6a:	187b      	adds	r3, r7, r1
 8020e6c:	881a      	ldrh	r2, [r3, #0]
 8020e6e:	2380      	movs	r3, #128	@ 0x80
 8020e70:	01db      	lsls	r3, r3, #7
 8020e72:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8020e74:	d000      	beq.n	8020e78 <USB_EPStartXfer+0xec0>
 8020e76:	e1a6      	b.n	80211c6 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8020e78:	187b      	adds	r3, r7, r1
 8020e7a:	881b      	ldrh	r3, [r3, #0]
 8020e7c:	2240      	movs	r2, #64	@ 0x40
 8020e7e:	4013      	ands	r3, r2
 8020e80:	d000      	beq.n	8020e84 <USB_EPStartXfer+0xecc>
 8020e82:	e1a0      	b.n	80211c6 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8020e84:	687a      	ldr	r2, [r7, #4]
 8020e86:	683b      	ldr	r3, [r7, #0]
 8020e88:	781b      	ldrb	r3, [r3, #0]
 8020e8a:	009b      	lsls	r3, r3, #2
 8020e8c:	18d3      	adds	r3, r2, r3
 8020e8e:	881b      	ldrh	r3, [r3, #0]
 8020e90:	b29a      	uxth	r2, r3
 8020e92:	2094      	movs	r0, #148	@ 0x94
 8020e94:	183b      	adds	r3, r7, r0
 8020e96:	49b5      	ldr	r1, [pc, #724]	@ (802116c <USB_EPStartXfer+0x11b4>)
 8020e98:	400a      	ands	r2, r1
 8020e9a:	801a      	strh	r2, [r3, #0]
 8020e9c:	687a      	ldr	r2, [r7, #4]
 8020e9e:	683b      	ldr	r3, [r7, #0]
 8020ea0:	781b      	ldrb	r3, [r3, #0]
 8020ea2:	009b      	lsls	r3, r3, #2
 8020ea4:	18d3      	adds	r3, r2, r3
 8020ea6:	183a      	adds	r2, r7, r0
 8020ea8:	8812      	ldrh	r2, [r2, #0]
 8020eaa:	49b1      	ldr	r1, [pc, #708]	@ (8021170 <USB_EPStartXfer+0x11b8>)
 8020eac:	430a      	orrs	r2, r1
 8020eae:	b292      	uxth	r2, r2
 8020eb0:	801a      	strh	r2, [r3, #0]
 8020eb2:	e188      	b.n	80211c6 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8020eb4:	683b      	ldr	r3, [r7, #0]
 8020eb6:	78db      	ldrb	r3, [r3, #3]
 8020eb8:	2b01      	cmp	r3, #1
 8020eba:	d000      	beq.n	8020ebe <USB_EPStartXfer+0xf06>
 8020ebc:	e181      	b.n	80211c2 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8020ebe:	683b      	ldr	r3, [r7, #0]
 8020ec0:	699a      	ldr	r2, [r3, #24]
 8020ec2:	683b      	ldr	r3, [r7, #0]
 8020ec4:	691b      	ldr	r3, [r3, #16]
 8020ec6:	429a      	cmp	r2, r3
 8020ec8:	d90d      	bls.n	8020ee6 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8020eca:	683b      	ldr	r3, [r7, #0]
 8020ecc:	691b      	ldr	r3, [r3, #16]
 8020ece:	1d7a      	adds	r2, r7, #5
 8020ed0:	32ff      	adds	r2, #255	@ 0xff
 8020ed2:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8020ed4:	683b      	ldr	r3, [r7, #0]
 8020ed6:	699a      	ldr	r2, [r3, #24]
 8020ed8:	1d7b      	adds	r3, r7, #5
 8020eda:	33ff      	adds	r3, #255	@ 0xff
 8020edc:	681b      	ldr	r3, [r3, #0]
 8020ede:	1ad2      	subs	r2, r2, r3
 8020ee0:	683b      	ldr	r3, [r7, #0]
 8020ee2:	619a      	str	r2, [r3, #24]
 8020ee4:	e007      	b.n	8020ef6 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8020ee6:	683b      	ldr	r3, [r7, #0]
 8020ee8:	699b      	ldr	r3, [r3, #24]
 8020eea:	1d7a      	adds	r2, r7, #5
 8020eec:	32ff      	adds	r2, #255	@ 0xff
 8020eee:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8020ef0:	683b      	ldr	r3, [r7, #0]
 8020ef2:	2200      	movs	r2, #0
 8020ef4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8020ef6:	683b      	ldr	r3, [r7, #0]
 8020ef8:	785b      	ldrb	r3, [r3, #1]
 8020efa:	2b00      	cmp	r3, #0
 8020efc:	d000      	beq.n	8020f00 <USB_EPStartXfer+0xf48>
 8020efe:	e082      	b.n	8021006 <USB_EPStartXfer+0x104e>
 8020f00:	687b      	ldr	r3, [r7, #4]
 8020f02:	21cc      	movs	r1, #204	@ 0xcc
 8020f04:	187a      	adds	r2, r7, r1
 8020f06:	6013      	str	r3, [r2, #0]
 8020f08:	687b      	ldr	r3, [r7, #4]
 8020f0a:	2250      	movs	r2, #80	@ 0x50
 8020f0c:	5a9b      	ldrh	r3, [r3, r2]
 8020f0e:	b29b      	uxth	r3, r3
 8020f10:	001a      	movs	r2, r3
 8020f12:	187b      	adds	r3, r7, r1
 8020f14:	681b      	ldr	r3, [r3, #0]
 8020f16:	189b      	adds	r3, r3, r2
 8020f18:	187a      	adds	r2, r7, r1
 8020f1a:	6013      	str	r3, [r2, #0]
 8020f1c:	683b      	ldr	r3, [r7, #0]
 8020f1e:	781b      	ldrb	r3, [r3, #0]
 8020f20:	00da      	lsls	r2, r3, #3
 8020f22:	187b      	adds	r3, r7, r1
 8020f24:	681b      	ldr	r3, [r3, #0]
 8020f26:	18d3      	adds	r3, r2, r3
 8020f28:	4a92      	ldr	r2, [pc, #584]	@ (8021174 <USB_EPStartXfer+0x11bc>)
 8020f2a:	4694      	mov	ip, r2
 8020f2c:	4463      	add	r3, ip
 8020f2e:	21c8      	movs	r1, #200	@ 0xc8
 8020f30:	187a      	adds	r2, r7, r1
 8020f32:	6013      	str	r3, [r2, #0]
 8020f34:	187b      	adds	r3, r7, r1
 8020f36:	681b      	ldr	r3, [r3, #0]
 8020f38:	881b      	ldrh	r3, [r3, #0]
 8020f3a:	b29b      	uxth	r3, r3
 8020f3c:	059b      	lsls	r3, r3, #22
 8020f3e:	0d9b      	lsrs	r3, r3, #22
 8020f40:	b29a      	uxth	r2, r3
 8020f42:	187b      	adds	r3, r7, r1
 8020f44:	681b      	ldr	r3, [r3, #0]
 8020f46:	801a      	strh	r2, [r3, #0]
 8020f48:	1d7b      	adds	r3, r7, #5
 8020f4a:	33ff      	adds	r3, #255	@ 0xff
 8020f4c:	681b      	ldr	r3, [r3, #0]
 8020f4e:	2b3e      	cmp	r3, #62	@ 0x3e
 8020f50:	d925      	bls.n	8020f9e <USB_EPStartXfer+0xfe6>
 8020f52:	1d7b      	adds	r3, r7, #5
 8020f54:	33ff      	adds	r3, #255	@ 0xff
 8020f56:	681b      	ldr	r3, [r3, #0]
 8020f58:	095b      	lsrs	r3, r3, #5
 8020f5a:	21dc      	movs	r1, #220	@ 0xdc
 8020f5c:	187a      	adds	r2, r7, r1
 8020f5e:	6013      	str	r3, [r2, #0]
 8020f60:	1d7b      	adds	r3, r7, #5
 8020f62:	33ff      	adds	r3, #255	@ 0xff
 8020f64:	681b      	ldr	r3, [r3, #0]
 8020f66:	221f      	movs	r2, #31
 8020f68:	4013      	ands	r3, r2
 8020f6a:	d104      	bne.n	8020f76 <USB_EPStartXfer+0xfbe>
 8020f6c:	187b      	adds	r3, r7, r1
 8020f6e:	681b      	ldr	r3, [r3, #0]
 8020f70:	3b01      	subs	r3, #1
 8020f72:	187a      	adds	r2, r7, r1
 8020f74:	6013      	str	r3, [r2, #0]
 8020f76:	21c8      	movs	r1, #200	@ 0xc8
 8020f78:	187b      	adds	r3, r7, r1
 8020f7a:	681b      	ldr	r3, [r3, #0]
 8020f7c:	881b      	ldrh	r3, [r3, #0]
 8020f7e:	b29a      	uxth	r2, r3
 8020f80:	23dc      	movs	r3, #220	@ 0xdc
 8020f82:	18fb      	adds	r3, r7, r3
 8020f84:	681b      	ldr	r3, [r3, #0]
 8020f86:	b29b      	uxth	r3, r3
 8020f88:	029b      	lsls	r3, r3, #10
 8020f8a:	b29b      	uxth	r3, r3
 8020f8c:	4313      	orrs	r3, r2
 8020f8e:	b29b      	uxth	r3, r3
 8020f90:	4a79      	ldr	r2, [pc, #484]	@ (8021178 <USB_EPStartXfer+0x11c0>)
 8020f92:	4313      	orrs	r3, r2
 8020f94:	b29a      	uxth	r2, r3
 8020f96:	187b      	adds	r3, r7, r1
 8020f98:	681b      	ldr	r3, [r3, #0]
 8020f9a:	801a      	strh	r2, [r3, #0]
 8020f9c:	e058      	b.n	8021050 <USB_EPStartXfer+0x1098>
 8020f9e:	1d7b      	adds	r3, r7, #5
 8020fa0:	33ff      	adds	r3, #255	@ 0xff
 8020fa2:	681b      	ldr	r3, [r3, #0]
 8020fa4:	2b00      	cmp	r3, #0
 8020fa6:	d10b      	bne.n	8020fc0 <USB_EPStartXfer+0x1008>
 8020fa8:	21c8      	movs	r1, #200	@ 0xc8
 8020faa:	187b      	adds	r3, r7, r1
 8020fac:	681b      	ldr	r3, [r3, #0]
 8020fae:	881b      	ldrh	r3, [r3, #0]
 8020fb0:	b29b      	uxth	r3, r3
 8020fb2:	4a71      	ldr	r2, [pc, #452]	@ (8021178 <USB_EPStartXfer+0x11c0>)
 8020fb4:	4313      	orrs	r3, r2
 8020fb6:	b29a      	uxth	r2, r3
 8020fb8:	187b      	adds	r3, r7, r1
 8020fba:	681b      	ldr	r3, [r3, #0]
 8020fbc:	801a      	strh	r2, [r3, #0]
 8020fbe:	e047      	b.n	8021050 <USB_EPStartXfer+0x1098>
 8020fc0:	1d7b      	adds	r3, r7, #5
 8020fc2:	33ff      	adds	r3, #255	@ 0xff
 8020fc4:	681b      	ldr	r3, [r3, #0]
 8020fc6:	085b      	lsrs	r3, r3, #1
 8020fc8:	21dc      	movs	r1, #220	@ 0xdc
 8020fca:	187a      	adds	r2, r7, r1
 8020fcc:	6013      	str	r3, [r2, #0]
 8020fce:	1d7b      	adds	r3, r7, #5
 8020fd0:	33ff      	adds	r3, #255	@ 0xff
 8020fd2:	681b      	ldr	r3, [r3, #0]
 8020fd4:	2201      	movs	r2, #1
 8020fd6:	4013      	ands	r3, r2
 8020fd8:	d004      	beq.n	8020fe4 <USB_EPStartXfer+0x102c>
 8020fda:	187b      	adds	r3, r7, r1
 8020fdc:	681b      	ldr	r3, [r3, #0]
 8020fde:	3301      	adds	r3, #1
 8020fe0:	187a      	adds	r2, r7, r1
 8020fe2:	6013      	str	r3, [r2, #0]
 8020fe4:	21c8      	movs	r1, #200	@ 0xc8
 8020fe6:	187b      	adds	r3, r7, r1
 8020fe8:	681b      	ldr	r3, [r3, #0]
 8020fea:	881b      	ldrh	r3, [r3, #0]
 8020fec:	b29a      	uxth	r2, r3
 8020fee:	23dc      	movs	r3, #220	@ 0xdc
 8020ff0:	18fb      	adds	r3, r7, r3
 8020ff2:	681b      	ldr	r3, [r3, #0]
 8020ff4:	b29b      	uxth	r3, r3
 8020ff6:	029b      	lsls	r3, r3, #10
 8020ff8:	b29b      	uxth	r3, r3
 8020ffa:	4313      	orrs	r3, r2
 8020ffc:	b29a      	uxth	r2, r3
 8020ffe:	187b      	adds	r3, r7, r1
 8021000:	681b      	ldr	r3, [r3, #0]
 8021002:	801a      	strh	r2, [r3, #0]
 8021004:	e024      	b.n	8021050 <USB_EPStartXfer+0x1098>
 8021006:	683b      	ldr	r3, [r7, #0]
 8021008:	785b      	ldrb	r3, [r3, #1]
 802100a:	2b01      	cmp	r3, #1
 802100c:	d120      	bne.n	8021050 <USB_EPStartXfer+0x1098>
 802100e:	687b      	ldr	r3, [r7, #4]
 8021010:	21d4      	movs	r1, #212	@ 0xd4
 8021012:	187a      	adds	r2, r7, r1
 8021014:	6013      	str	r3, [r2, #0]
 8021016:	687b      	ldr	r3, [r7, #4]
 8021018:	2250      	movs	r2, #80	@ 0x50
 802101a:	5a9b      	ldrh	r3, [r3, r2]
 802101c:	b29b      	uxth	r3, r3
 802101e:	001a      	movs	r2, r3
 8021020:	187b      	adds	r3, r7, r1
 8021022:	681b      	ldr	r3, [r3, #0]
 8021024:	189b      	adds	r3, r3, r2
 8021026:	187a      	adds	r2, r7, r1
 8021028:	6013      	str	r3, [r2, #0]
 802102a:	683b      	ldr	r3, [r7, #0]
 802102c:	781b      	ldrb	r3, [r3, #0]
 802102e:	00da      	lsls	r2, r3, #3
 8021030:	187b      	adds	r3, r7, r1
 8021032:	681b      	ldr	r3, [r3, #0]
 8021034:	18d3      	adds	r3, r2, r3
 8021036:	4a4f      	ldr	r2, [pc, #316]	@ (8021174 <USB_EPStartXfer+0x11bc>)
 8021038:	4694      	mov	ip, r2
 802103a:	4463      	add	r3, ip
 802103c:	21d0      	movs	r1, #208	@ 0xd0
 802103e:	187a      	adds	r2, r7, r1
 8021040:	6013      	str	r3, [r2, #0]
 8021042:	1d7b      	adds	r3, r7, #5
 8021044:	33ff      	adds	r3, #255	@ 0xff
 8021046:	681b      	ldr	r3, [r3, #0]
 8021048:	b29a      	uxth	r2, r3
 802104a:	187b      	adds	r3, r7, r1
 802104c:	681b      	ldr	r3, [r3, #0]
 802104e:	801a      	strh	r2, [r3, #0]
 8021050:	687b      	ldr	r3, [r7, #4]
 8021052:	22c4      	movs	r2, #196	@ 0xc4
 8021054:	18ba      	adds	r2, r7, r2
 8021056:	6013      	str	r3, [r2, #0]
 8021058:	683b      	ldr	r3, [r7, #0]
 802105a:	785b      	ldrb	r3, [r3, #1]
 802105c:	2b00      	cmp	r3, #0
 802105e:	d000      	beq.n	8021062 <USB_EPStartXfer+0x10aa>
 8021060:	e08c      	b.n	802117c <USB_EPStartXfer+0x11c4>
 8021062:	687b      	ldr	r3, [r7, #4]
 8021064:	21bc      	movs	r1, #188	@ 0xbc
 8021066:	187a      	adds	r2, r7, r1
 8021068:	6013      	str	r3, [r2, #0]
 802106a:	687b      	ldr	r3, [r7, #4]
 802106c:	2250      	movs	r2, #80	@ 0x50
 802106e:	5a9b      	ldrh	r3, [r3, r2]
 8021070:	b29b      	uxth	r3, r3
 8021072:	001a      	movs	r2, r3
 8021074:	187b      	adds	r3, r7, r1
 8021076:	681b      	ldr	r3, [r3, #0]
 8021078:	189b      	adds	r3, r3, r2
 802107a:	187a      	adds	r2, r7, r1
 802107c:	6013      	str	r3, [r2, #0]
 802107e:	683b      	ldr	r3, [r7, #0]
 8021080:	781b      	ldrb	r3, [r3, #0]
 8021082:	00da      	lsls	r2, r3, #3
 8021084:	187b      	adds	r3, r7, r1
 8021086:	681b      	ldr	r3, [r3, #0]
 8021088:	18d3      	adds	r3, r2, r3
 802108a:	4a37      	ldr	r2, [pc, #220]	@ (8021168 <USB_EPStartXfer+0x11b0>)
 802108c:	4694      	mov	ip, r2
 802108e:	4463      	add	r3, ip
 8021090:	21b8      	movs	r1, #184	@ 0xb8
 8021092:	187a      	adds	r2, r7, r1
 8021094:	6013      	str	r3, [r2, #0]
 8021096:	187b      	adds	r3, r7, r1
 8021098:	681b      	ldr	r3, [r3, #0]
 802109a:	881b      	ldrh	r3, [r3, #0]
 802109c:	b29b      	uxth	r3, r3
 802109e:	059b      	lsls	r3, r3, #22
 80210a0:	0d9b      	lsrs	r3, r3, #22
 80210a2:	b29a      	uxth	r2, r3
 80210a4:	187b      	adds	r3, r7, r1
 80210a6:	681b      	ldr	r3, [r3, #0]
 80210a8:	801a      	strh	r2, [r3, #0]
 80210aa:	1d7b      	adds	r3, r7, #5
 80210ac:	33ff      	adds	r3, #255	@ 0xff
 80210ae:	681b      	ldr	r3, [r3, #0]
 80210b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80210b2:	d925      	bls.n	8021100 <USB_EPStartXfer+0x1148>
 80210b4:	1d7b      	adds	r3, r7, #5
 80210b6:	33ff      	adds	r3, #255	@ 0xff
 80210b8:	681b      	ldr	r3, [r3, #0]
 80210ba:	095b      	lsrs	r3, r3, #5
 80210bc:	21d8      	movs	r1, #216	@ 0xd8
 80210be:	187a      	adds	r2, r7, r1
 80210c0:	6013      	str	r3, [r2, #0]
 80210c2:	1d7b      	adds	r3, r7, #5
 80210c4:	33ff      	adds	r3, #255	@ 0xff
 80210c6:	681b      	ldr	r3, [r3, #0]
 80210c8:	221f      	movs	r2, #31
 80210ca:	4013      	ands	r3, r2
 80210cc:	d104      	bne.n	80210d8 <USB_EPStartXfer+0x1120>
 80210ce:	187b      	adds	r3, r7, r1
 80210d0:	681b      	ldr	r3, [r3, #0]
 80210d2:	3b01      	subs	r3, #1
 80210d4:	187a      	adds	r2, r7, r1
 80210d6:	6013      	str	r3, [r2, #0]
 80210d8:	21b8      	movs	r1, #184	@ 0xb8
 80210da:	187b      	adds	r3, r7, r1
 80210dc:	681b      	ldr	r3, [r3, #0]
 80210de:	881b      	ldrh	r3, [r3, #0]
 80210e0:	b29a      	uxth	r2, r3
 80210e2:	23d8      	movs	r3, #216	@ 0xd8
 80210e4:	18fb      	adds	r3, r7, r3
 80210e6:	681b      	ldr	r3, [r3, #0]
 80210e8:	b29b      	uxth	r3, r3
 80210ea:	029b      	lsls	r3, r3, #10
 80210ec:	b29b      	uxth	r3, r3
 80210ee:	4313      	orrs	r3, r2
 80210f0:	b29b      	uxth	r3, r3
 80210f2:	4a21      	ldr	r2, [pc, #132]	@ (8021178 <USB_EPStartXfer+0x11c0>)
 80210f4:	4313      	orrs	r3, r2
 80210f6:	b29a      	uxth	r2, r3
 80210f8:	187b      	adds	r3, r7, r1
 80210fa:	681b      	ldr	r3, [r3, #0]
 80210fc:	801a      	strh	r2, [r3, #0]
 80210fe:	e062      	b.n	80211c6 <USB_EPStartXfer+0x120e>
 8021100:	1d7b      	adds	r3, r7, #5
 8021102:	33ff      	adds	r3, #255	@ 0xff
 8021104:	681b      	ldr	r3, [r3, #0]
 8021106:	2b00      	cmp	r3, #0
 8021108:	d10b      	bne.n	8021122 <USB_EPStartXfer+0x116a>
 802110a:	21b8      	movs	r1, #184	@ 0xb8
 802110c:	187b      	adds	r3, r7, r1
 802110e:	681b      	ldr	r3, [r3, #0]
 8021110:	881b      	ldrh	r3, [r3, #0]
 8021112:	b29b      	uxth	r3, r3
 8021114:	4a18      	ldr	r2, [pc, #96]	@ (8021178 <USB_EPStartXfer+0x11c0>)
 8021116:	4313      	orrs	r3, r2
 8021118:	b29a      	uxth	r2, r3
 802111a:	187b      	adds	r3, r7, r1
 802111c:	681b      	ldr	r3, [r3, #0]
 802111e:	801a      	strh	r2, [r3, #0]
 8021120:	e051      	b.n	80211c6 <USB_EPStartXfer+0x120e>
 8021122:	1d7b      	adds	r3, r7, #5
 8021124:	33ff      	adds	r3, #255	@ 0xff
 8021126:	681b      	ldr	r3, [r3, #0]
 8021128:	085b      	lsrs	r3, r3, #1
 802112a:	21d8      	movs	r1, #216	@ 0xd8
 802112c:	187a      	adds	r2, r7, r1
 802112e:	6013      	str	r3, [r2, #0]
 8021130:	1d7b      	adds	r3, r7, #5
 8021132:	33ff      	adds	r3, #255	@ 0xff
 8021134:	681b      	ldr	r3, [r3, #0]
 8021136:	2201      	movs	r2, #1
 8021138:	4013      	ands	r3, r2
 802113a:	d004      	beq.n	8021146 <USB_EPStartXfer+0x118e>
 802113c:	187b      	adds	r3, r7, r1
 802113e:	681b      	ldr	r3, [r3, #0]
 8021140:	3301      	adds	r3, #1
 8021142:	187a      	adds	r2, r7, r1
 8021144:	6013      	str	r3, [r2, #0]
 8021146:	21b8      	movs	r1, #184	@ 0xb8
 8021148:	187b      	adds	r3, r7, r1
 802114a:	681b      	ldr	r3, [r3, #0]
 802114c:	881b      	ldrh	r3, [r3, #0]
 802114e:	b29a      	uxth	r2, r3
 8021150:	23d8      	movs	r3, #216	@ 0xd8
 8021152:	18fb      	adds	r3, r7, r3
 8021154:	681b      	ldr	r3, [r3, #0]
 8021156:	b29b      	uxth	r3, r3
 8021158:	029b      	lsls	r3, r3, #10
 802115a:	b29b      	uxth	r3, r3
 802115c:	4313      	orrs	r3, r2
 802115e:	b29a      	uxth	r2, r3
 8021160:	187b      	adds	r3, r7, r1
 8021162:	681b      	ldr	r3, [r3, #0]
 8021164:	801a      	strh	r2, [r3, #0]
 8021166:	e02e      	b.n	80211c6 <USB_EPStartXfer+0x120e>
 8021168:	00000406 	.word	0x00000406
 802116c:	ffff8f8f 	.word	0xffff8f8f
 8021170:	ffff80c0 	.word	0xffff80c0
 8021174:	00000402 	.word	0x00000402
 8021178:	ffff8000 	.word	0xffff8000
 802117c:	683b      	ldr	r3, [r7, #0]
 802117e:	785b      	ldrb	r3, [r3, #1]
 8021180:	2b01      	cmp	r3, #1
 8021182:	d120      	bne.n	80211c6 <USB_EPStartXfer+0x120e>
 8021184:	687b      	ldr	r3, [r7, #4]
 8021186:	2250      	movs	r2, #80	@ 0x50
 8021188:	5a9b      	ldrh	r3, [r3, r2]
 802118a:	b29b      	uxth	r3, r3
 802118c:	001a      	movs	r2, r3
 802118e:	21c4      	movs	r1, #196	@ 0xc4
 8021190:	187b      	adds	r3, r7, r1
 8021192:	681b      	ldr	r3, [r3, #0]
 8021194:	189b      	adds	r3, r3, r2
 8021196:	187a      	adds	r2, r7, r1
 8021198:	6013      	str	r3, [r2, #0]
 802119a:	683b      	ldr	r3, [r7, #0]
 802119c:	781b      	ldrb	r3, [r3, #0]
 802119e:	00da      	lsls	r2, r3, #3
 80211a0:	187b      	adds	r3, r7, r1
 80211a2:	681b      	ldr	r3, [r3, #0]
 80211a4:	18d3      	adds	r3, r2, r3
 80211a6:	4a1d      	ldr	r2, [pc, #116]	@ (802121c <USB_EPStartXfer+0x1264>)
 80211a8:	4694      	mov	ip, r2
 80211aa:	4463      	add	r3, ip
 80211ac:	21c0      	movs	r1, #192	@ 0xc0
 80211ae:	187a      	adds	r2, r7, r1
 80211b0:	6013      	str	r3, [r2, #0]
 80211b2:	1d7b      	adds	r3, r7, #5
 80211b4:	33ff      	adds	r3, #255	@ 0xff
 80211b6:	681b      	ldr	r3, [r3, #0]
 80211b8:	b29a      	uxth	r2, r3
 80211ba:	187b      	adds	r3, r7, r1
 80211bc:	681b      	ldr	r3, [r3, #0]
 80211be:	801a      	strh	r2, [r3, #0]
 80211c0:	e001      	b.n	80211c6 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80211c2:	2301      	movs	r3, #1
 80211c4:	e025      	b.n	8021212 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80211c6:	687a      	ldr	r2, [r7, #4]
 80211c8:	683b      	ldr	r3, [r7, #0]
 80211ca:	781b      	ldrb	r3, [r3, #0]
 80211cc:	009b      	lsls	r3, r3, #2
 80211ce:	18d3      	adds	r3, r2, r3
 80211d0:	881b      	ldrh	r3, [r3, #0]
 80211d2:	b29a      	uxth	r2, r3
 80211d4:	208a      	movs	r0, #138	@ 0x8a
 80211d6:	183b      	adds	r3, r7, r0
 80211d8:	4911      	ldr	r1, [pc, #68]	@ (8021220 <USB_EPStartXfer+0x1268>)
 80211da:	400a      	ands	r2, r1
 80211dc:	801a      	strh	r2, [r3, #0]
 80211de:	183b      	adds	r3, r7, r0
 80211e0:	183a      	adds	r2, r7, r0
 80211e2:	8812      	ldrh	r2, [r2, #0]
 80211e4:	2180      	movs	r1, #128	@ 0x80
 80211e6:	0149      	lsls	r1, r1, #5
 80211e8:	404a      	eors	r2, r1
 80211ea:	801a      	strh	r2, [r3, #0]
 80211ec:	183b      	adds	r3, r7, r0
 80211ee:	183a      	adds	r2, r7, r0
 80211f0:	8812      	ldrh	r2, [r2, #0]
 80211f2:	2180      	movs	r1, #128	@ 0x80
 80211f4:	0189      	lsls	r1, r1, #6
 80211f6:	404a      	eors	r2, r1
 80211f8:	801a      	strh	r2, [r3, #0]
 80211fa:	687a      	ldr	r2, [r7, #4]
 80211fc:	683b      	ldr	r3, [r7, #0]
 80211fe:	781b      	ldrb	r3, [r3, #0]
 8021200:	009b      	lsls	r3, r3, #2
 8021202:	18d3      	adds	r3, r2, r3
 8021204:	183a      	adds	r2, r7, r0
 8021206:	8812      	ldrh	r2, [r2, #0]
 8021208:	4906      	ldr	r1, [pc, #24]	@ (8021224 <USB_EPStartXfer+0x126c>)
 802120a:	430a      	orrs	r2, r1
 802120c:	b292      	uxth	r2, r2
 802120e:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8021210:	2300      	movs	r3, #0
}
 8021212:	0018      	movs	r0, r3
 8021214:	46bd      	mov	sp, r7
 8021216:	b043      	add	sp, #268	@ 0x10c
 8021218:	bd90      	pop	{r4, r7, pc}
 802121a:	46c0      	nop			@ (mov r8, r8)
 802121c:	00000406 	.word	0x00000406
 8021220:	ffffbf8f 	.word	0xffffbf8f
 8021224:	ffff8080 	.word	0xffff8080

08021228 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8021228:	b580      	push	{r7, lr}
 802122a:	b084      	sub	sp, #16
 802122c:	af00      	add	r7, sp, #0
 802122e:	6078      	str	r0, [r7, #4]
 8021230:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8021232:	683b      	ldr	r3, [r7, #0]
 8021234:	785b      	ldrb	r3, [r3, #1]
 8021236:	2b00      	cmp	r3, #0
 8021238:	d01d      	beq.n	8021276 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 802123a:	687a      	ldr	r2, [r7, #4]
 802123c:	683b      	ldr	r3, [r7, #0]
 802123e:	781b      	ldrb	r3, [r3, #0]
 8021240:	009b      	lsls	r3, r3, #2
 8021242:	18d3      	adds	r3, r2, r3
 8021244:	881b      	ldrh	r3, [r3, #0]
 8021246:	b29a      	uxth	r2, r3
 8021248:	200c      	movs	r0, #12
 802124a:	183b      	adds	r3, r7, r0
 802124c:	491b      	ldr	r1, [pc, #108]	@ (80212bc <USB_EPSetStall+0x94>)
 802124e:	400a      	ands	r2, r1
 8021250:	801a      	strh	r2, [r3, #0]
 8021252:	183b      	adds	r3, r7, r0
 8021254:	183a      	adds	r2, r7, r0
 8021256:	8812      	ldrh	r2, [r2, #0]
 8021258:	2110      	movs	r1, #16
 802125a:	404a      	eors	r2, r1
 802125c:	801a      	strh	r2, [r3, #0]
 802125e:	687a      	ldr	r2, [r7, #4]
 8021260:	683b      	ldr	r3, [r7, #0]
 8021262:	781b      	ldrb	r3, [r3, #0]
 8021264:	009b      	lsls	r3, r3, #2
 8021266:	18d3      	adds	r3, r2, r3
 8021268:	183a      	adds	r2, r7, r0
 802126a:	8812      	ldrh	r2, [r2, #0]
 802126c:	4914      	ldr	r1, [pc, #80]	@ (80212c0 <USB_EPSetStall+0x98>)
 802126e:	430a      	orrs	r2, r1
 8021270:	b292      	uxth	r2, r2
 8021272:	801a      	strh	r2, [r3, #0]
 8021274:	e01d      	b.n	80212b2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8021276:	687a      	ldr	r2, [r7, #4]
 8021278:	683b      	ldr	r3, [r7, #0]
 802127a:	781b      	ldrb	r3, [r3, #0]
 802127c:	009b      	lsls	r3, r3, #2
 802127e:	18d3      	adds	r3, r2, r3
 8021280:	881b      	ldrh	r3, [r3, #0]
 8021282:	b29a      	uxth	r2, r3
 8021284:	200e      	movs	r0, #14
 8021286:	183b      	adds	r3, r7, r0
 8021288:	490e      	ldr	r1, [pc, #56]	@ (80212c4 <USB_EPSetStall+0x9c>)
 802128a:	400a      	ands	r2, r1
 802128c:	801a      	strh	r2, [r3, #0]
 802128e:	183b      	adds	r3, r7, r0
 8021290:	183a      	adds	r2, r7, r0
 8021292:	8812      	ldrh	r2, [r2, #0]
 8021294:	2180      	movs	r1, #128	@ 0x80
 8021296:	0149      	lsls	r1, r1, #5
 8021298:	404a      	eors	r2, r1
 802129a:	801a      	strh	r2, [r3, #0]
 802129c:	687a      	ldr	r2, [r7, #4]
 802129e:	683b      	ldr	r3, [r7, #0]
 80212a0:	781b      	ldrb	r3, [r3, #0]
 80212a2:	009b      	lsls	r3, r3, #2
 80212a4:	18d3      	adds	r3, r2, r3
 80212a6:	183a      	adds	r2, r7, r0
 80212a8:	8812      	ldrh	r2, [r2, #0]
 80212aa:	4905      	ldr	r1, [pc, #20]	@ (80212c0 <USB_EPSetStall+0x98>)
 80212ac:	430a      	orrs	r2, r1
 80212ae:	b292      	uxth	r2, r2
 80212b0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80212b2:	2300      	movs	r3, #0
}
 80212b4:	0018      	movs	r0, r3
 80212b6:	46bd      	mov	sp, r7
 80212b8:	b004      	add	sp, #16
 80212ba:	bd80      	pop	{r7, pc}
 80212bc:	ffff8fbf 	.word	0xffff8fbf
 80212c0:	ffff8080 	.word	0xffff8080
 80212c4:	ffffbf8f 	.word	0xffffbf8f

080212c8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80212c8:	b580      	push	{r7, lr}
 80212ca:	b086      	sub	sp, #24
 80212cc:	af00      	add	r7, sp, #0
 80212ce:	6078      	str	r0, [r7, #4]
 80212d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80212d2:	683b      	ldr	r3, [r7, #0]
 80212d4:	7b1b      	ldrb	r3, [r3, #12]
 80212d6:	2b00      	cmp	r3, #0
 80212d8:	d000      	beq.n	80212dc <USB_EPClearStall+0x14>
 80212da:	e095      	b.n	8021408 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80212dc:	683b      	ldr	r3, [r7, #0]
 80212de:	785b      	ldrb	r3, [r3, #1]
 80212e0:	2b00      	cmp	r3, #0
 80212e2:	d046      	beq.n	8021372 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80212e4:	687a      	ldr	r2, [r7, #4]
 80212e6:	683b      	ldr	r3, [r7, #0]
 80212e8:	781b      	ldrb	r3, [r3, #0]
 80212ea:	009b      	lsls	r3, r3, #2
 80212ec:	18d2      	adds	r2, r2, r3
 80212ee:	2110      	movs	r1, #16
 80212f0:	187b      	adds	r3, r7, r1
 80212f2:	8812      	ldrh	r2, [r2, #0]
 80212f4:	801a      	strh	r2, [r3, #0]
 80212f6:	187b      	adds	r3, r7, r1
 80212f8:	881b      	ldrh	r3, [r3, #0]
 80212fa:	2240      	movs	r2, #64	@ 0x40
 80212fc:	4013      	ands	r3, r2
 80212fe:	d016      	beq.n	802132e <USB_EPClearStall+0x66>
 8021300:	687a      	ldr	r2, [r7, #4]
 8021302:	683b      	ldr	r3, [r7, #0]
 8021304:	781b      	ldrb	r3, [r3, #0]
 8021306:	009b      	lsls	r3, r3, #2
 8021308:	18d3      	adds	r3, r2, r3
 802130a:	881b      	ldrh	r3, [r3, #0]
 802130c:	b29a      	uxth	r2, r3
 802130e:	200e      	movs	r0, #14
 8021310:	183b      	adds	r3, r7, r0
 8021312:	4940      	ldr	r1, [pc, #256]	@ (8021414 <USB_EPClearStall+0x14c>)
 8021314:	400a      	ands	r2, r1
 8021316:	801a      	strh	r2, [r3, #0]
 8021318:	687a      	ldr	r2, [r7, #4]
 802131a:	683b      	ldr	r3, [r7, #0]
 802131c:	781b      	ldrb	r3, [r3, #0]
 802131e:	009b      	lsls	r3, r3, #2
 8021320:	18d3      	adds	r3, r2, r3
 8021322:	183a      	adds	r2, r7, r0
 8021324:	8812      	ldrh	r2, [r2, #0]
 8021326:	493c      	ldr	r1, [pc, #240]	@ (8021418 <USB_EPClearStall+0x150>)
 8021328:	430a      	orrs	r2, r1
 802132a:	b292      	uxth	r2, r2
 802132c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 802132e:	683b      	ldr	r3, [r7, #0]
 8021330:	78db      	ldrb	r3, [r3, #3]
 8021332:	2b01      	cmp	r3, #1
 8021334:	d068      	beq.n	8021408 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8021336:	687a      	ldr	r2, [r7, #4]
 8021338:	683b      	ldr	r3, [r7, #0]
 802133a:	781b      	ldrb	r3, [r3, #0]
 802133c:	009b      	lsls	r3, r3, #2
 802133e:	18d3      	adds	r3, r2, r3
 8021340:	881b      	ldrh	r3, [r3, #0]
 8021342:	b29a      	uxth	r2, r3
 8021344:	200c      	movs	r0, #12
 8021346:	183b      	adds	r3, r7, r0
 8021348:	4934      	ldr	r1, [pc, #208]	@ (802141c <USB_EPClearStall+0x154>)
 802134a:	400a      	ands	r2, r1
 802134c:	801a      	strh	r2, [r3, #0]
 802134e:	183b      	adds	r3, r7, r0
 8021350:	183a      	adds	r2, r7, r0
 8021352:	8812      	ldrh	r2, [r2, #0]
 8021354:	2120      	movs	r1, #32
 8021356:	404a      	eors	r2, r1
 8021358:	801a      	strh	r2, [r3, #0]
 802135a:	687a      	ldr	r2, [r7, #4]
 802135c:	683b      	ldr	r3, [r7, #0]
 802135e:	781b      	ldrb	r3, [r3, #0]
 8021360:	009b      	lsls	r3, r3, #2
 8021362:	18d3      	adds	r3, r2, r3
 8021364:	183a      	adds	r2, r7, r0
 8021366:	8812      	ldrh	r2, [r2, #0]
 8021368:	492d      	ldr	r1, [pc, #180]	@ (8021420 <USB_EPClearStall+0x158>)
 802136a:	430a      	orrs	r2, r1
 802136c:	b292      	uxth	r2, r2
 802136e:	801a      	strh	r2, [r3, #0]
 8021370:	e04a      	b.n	8021408 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8021372:	687a      	ldr	r2, [r7, #4]
 8021374:	683b      	ldr	r3, [r7, #0]
 8021376:	781b      	ldrb	r3, [r3, #0]
 8021378:	009b      	lsls	r3, r3, #2
 802137a:	18d2      	adds	r2, r2, r3
 802137c:	2116      	movs	r1, #22
 802137e:	187b      	adds	r3, r7, r1
 8021380:	8812      	ldrh	r2, [r2, #0]
 8021382:	801a      	strh	r2, [r3, #0]
 8021384:	187b      	adds	r3, r7, r1
 8021386:	881a      	ldrh	r2, [r3, #0]
 8021388:	2380      	movs	r3, #128	@ 0x80
 802138a:	01db      	lsls	r3, r3, #7
 802138c:	4013      	ands	r3, r2
 802138e:	d016      	beq.n	80213be <USB_EPClearStall+0xf6>
 8021390:	687a      	ldr	r2, [r7, #4]
 8021392:	683b      	ldr	r3, [r7, #0]
 8021394:	781b      	ldrb	r3, [r3, #0]
 8021396:	009b      	lsls	r3, r3, #2
 8021398:	18d3      	adds	r3, r2, r3
 802139a:	881b      	ldrh	r3, [r3, #0]
 802139c:	b29a      	uxth	r2, r3
 802139e:	2014      	movs	r0, #20
 80213a0:	183b      	adds	r3, r7, r0
 80213a2:	491c      	ldr	r1, [pc, #112]	@ (8021414 <USB_EPClearStall+0x14c>)
 80213a4:	400a      	ands	r2, r1
 80213a6:	801a      	strh	r2, [r3, #0]
 80213a8:	687a      	ldr	r2, [r7, #4]
 80213aa:	683b      	ldr	r3, [r7, #0]
 80213ac:	781b      	ldrb	r3, [r3, #0]
 80213ae:	009b      	lsls	r3, r3, #2
 80213b0:	18d3      	adds	r3, r2, r3
 80213b2:	183a      	adds	r2, r7, r0
 80213b4:	8812      	ldrh	r2, [r2, #0]
 80213b6:	491b      	ldr	r1, [pc, #108]	@ (8021424 <USB_EPClearStall+0x15c>)
 80213b8:	430a      	orrs	r2, r1
 80213ba:	b292      	uxth	r2, r2
 80213bc:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80213be:	687a      	ldr	r2, [r7, #4]
 80213c0:	683b      	ldr	r3, [r7, #0]
 80213c2:	781b      	ldrb	r3, [r3, #0]
 80213c4:	009b      	lsls	r3, r3, #2
 80213c6:	18d3      	adds	r3, r2, r3
 80213c8:	881b      	ldrh	r3, [r3, #0]
 80213ca:	b29a      	uxth	r2, r3
 80213cc:	2012      	movs	r0, #18
 80213ce:	183b      	adds	r3, r7, r0
 80213d0:	4915      	ldr	r1, [pc, #84]	@ (8021428 <USB_EPClearStall+0x160>)
 80213d2:	400a      	ands	r2, r1
 80213d4:	801a      	strh	r2, [r3, #0]
 80213d6:	183b      	adds	r3, r7, r0
 80213d8:	183a      	adds	r2, r7, r0
 80213da:	8812      	ldrh	r2, [r2, #0]
 80213dc:	2180      	movs	r1, #128	@ 0x80
 80213de:	0149      	lsls	r1, r1, #5
 80213e0:	404a      	eors	r2, r1
 80213e2:	801a      	strh	r2, [r3, #0]
 80213e4:	183b      	adds	r3, r7, r0
 80213e6:	183a      	adds	r2, r7, r0
 80213e8:	8812      	ldrh	r2, [r2, #0]
 80213ea:	2180      	movs	r1, #128	@ 0x80
 80213ec:	0189      	lsls	r1, r1, #6
 80213ee:	404a      	eors	r2, r1
 80213f0:	801a      	strh	r2, [r3, #0]
 80213f2:	687a      	ldr	r2, [r7, #4]
 80213f4:	683b      	ldr	r3, [r7, #0]
 80213f6:	781b      	ldrb	r3, [r3, #0]
 80213f8:	009b      	lsls	r3, r3, #2
 80213fa:	18d3      	adds	r3, r2, r3
 80213fc:	183a      	adds	r2, r7, r0
 80213fe:	8812      	ldrh	r2, [r2, #0]
 8021400:	4907      	ldr	r1, [pc, #28]	@ (8021420 <USB_EPClearStall+0x158>)
 8021402:	430a      	orrs	r2, r1
 8021404:	b292      	uxth	r2, r2
 8021406:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8021408:	2300      	movs	r3, #0
}
 802140a:	0018      	movs	r0, r3
 802140c:	46bd      	mov	sp, r7
 802140e:	b006      	add	sp, #24
 8021410:	bd80      	pop	{r7, pc}
 8021412:	46c0      	nop			@ (mov r8, r8)
 8021414:	ffff8f8f 	.word	0xffff8f8f
 8021418:	ffff80c0 	.word	0xffff80c0
 802141c:	ffff8fbf 	.word	0xffff8fbf
 8021420:	ffff8080 	.word	0xffff8080
 8021424:	ffffc080 	.word	0xffffc080
 8021428:	ffffbf8f 	.word	0xffffbf8f

0802142c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 802142c:	b580      	push	{r7, lr}
 802142e:	b082      	sub	sp, #8
 8021430:	af00      	add	r7, sp, #0
 8021432:	6078      	str	r0, [r7, #4]
 8021434:	000a      	movs	r2, r1
 8021436:	1cfb      	adds	r3, r7, #3
 8021438:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 802143a:	1cfb      	adds	r3, r7, #3
 802143c:	781b      	ldrb	r3, [r3, #0]
 802143e:	2b00      	cmp	r3, #0
 8021440:	d103      	bne.n	802144a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8021442:	687b      	ldr	r3, [r7, #4]
 8021444:	224c      	movs	r2, #76	@ 0x4c
 8021446:	2180      	movs	r1, #128	@ 0x80
 8021448:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 802144a:	2300      	movs	r3, #0
}
 802144c:	0018      	movs	r0, r3
 802144e:	46bd      	mov	sp, r7
 8021450:	b002      	add	sp, #8
 8021452:	bd80      	pop	{r7, pc}

08021454 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8021454:	b580      	push	{r7, lr}
 8021456:	b082      	sub	sp, #8
 8021458:	af00      	add	r7, sp, #0
 802145a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 802145c:	687b      	ldr	r3, [r7, #4]
 802145e:	2258      	movs	r2, #88	@ 0x58
 8021460:	5a9b      	ldrh	r3, [r3, r2]
 8021462:	b29b      	uxth	r3, r3
 8021464:	4a05      	ldr	r2, [pc, #20]	@ (802147c <USB_DevConnect+0x28>)
 8021466:	4313      	orrs	r3, r2
 8021468:	b299      	uxth	r1, r3
 802146a:	687b      	ldr	r3, [r7, #4]
 802146c:	2258      	movs	r2, #88	@ 0x58
 802146e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8021470:	2300      	movs	r3, #0
}
 8021472:	0018      	movs	r0, r3
 8021474:	46bd      	mov	sp, r7
 8021476:	b002      	add	sp, #8
 8021478:	bd80      	pop	{r7, pc}
 802147a:	46c0      	nop			@ (mov r8, r8)
 802147c:	ffff8000 	.word	0xffff8000

08021480 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8021480:	b580      	push	{r7, lr}
 8021482:	b084      	sub	sp, #16
 8021484:	af00      	add	r7, sp, #0
 8021486:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8021488:	687b      	ldr	r3, [r7, #4]
 802148a:	2244      	movs	r2, #68	@ 0x44
 802148c:	5a9b      	ldrh	r3, [r3, r2]
 802148e:	b29b      	uxth	r3, r3
 8021490:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8021492:	68fb      	ldr	r3, [r7, #12]
}
 8021494:	0018      	movs	r0, r3
 8021496:	46bd      	mov	sp, r7
 8021498:	b004      	add	sp, #16
 802149a:	bd80      	pop	{r7, pc}

0802149c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 802149c:	b580      	push	{r7, lr}
 802149e:	b08a      	sub	sp, #40	@ 0x28
 80214a0:	af00      	add	r7, sp, #0
 80214a2:	60f8      	str	r0, [r7, #12]
 80214a4:	60b9      	str	r1, [r7, #8]
 80214a6:	0019      	movs	r1, r3
 80214a8:	1dbb      	adds	r3, r7, #6
 80214aa:	801a      	strh	r2, [r3, #0]
 80214ac:	1d3b      	adds	r3, r7, #4
 80214ae:	1c0a      	adds	r2, r1, #0
 80214b0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80214b2:	1d3b      	adds	r3, r7, #4
 80214b4:	881b      	ldrh	r3, [r3, #0]
 80214b6:	3301      	adds	r3, #1
 80214b8:	085b      	lsrs	r3, r3, #1
 80214ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80214bc:	68fb      	ldr	r3, [r7, #12]
 80214be:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80214c0:	68bb      	ldr	r3, [r7, #8]
 80214c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80214c4:	1dbb      	adds	r3, r7, #6
 80214c6:	881a      	ldrh	r2, [r3, #0]
 80214c8:	697b      	ldr	r3, [r7, #20]
 80214ca:	18d3      	adds	r3, r2, r3
 80214cc:	2280      	movs	r2, #128	@ 0x80
 80214ce:	00d2      	lsls	r2, r2, #3
 80214d0:	4694      	mov	ip, r2
 80214d2:	4463      	add	r3, ip
 80214d4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80214d6:	69bb      	ldr	r3, [r7, #24]
 80214d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80214da:	e021      	b.n	8021520 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 80214dc:	69fb      	ldr	r3, [r7, #28]
 80214de:	781a      	ldrb	r2, [r3, #0]
 80214e0:	2112      	movs	r1, #18
 80214e2:	187b      	adds	r3, r7, r1
 80214e4:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80214e6:	69fb      	ldr	r3, [r7, #28]
 80214e8:	3301      	adds	r3, #1
 80214ea:	781b      	ldrb	r3, [r3, #0]
 80214ec:	b21b      	sxth	r3, r3
 80214ee:	021b      	lsls	r3, r3, #8
 80214f0:	b21a      	sxth	r2, r3
 80214f2:	187b      	adds	r3, r7, r1
 80214f4:	2000      	movs	r0, #0
 80214f6:	5e1b      	ldrsh	r3, [r3, r0]
 80214f8:	4313      	orrs	r3, r2
 80214fa:	b21a      	sxth	r2, r3
 80214fc:	187b      	adds	r3, r7, r1
 80214fe:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8021500:	6a3b      	ldr	r3, [r7, #32]
 8021502:	187a      	adds	r2, r7, r1
 8021504:	8812      	ldrh	r2, [r2, #0]
 8021506:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8021508:	6a3b      	ldr	r3, [r7, #32]
 802150a:	3302      	adds	r3, #2
 802150c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 802150e:	69fb      	ldr	r3, [r7, #28]
 8021510:	3301      	adds	r3, #1
 8021512:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8021514:	69fb      	ldr	r3, [r7, #28]
 8021516:	3301      	adds	r3, #1
 8021518:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 802151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802151c:	3b01      	subs	r3, #1
 802151e:	627b      	str	r3, [r7, #36]	@ 0x24
 8021520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021522:	2b00      	cmp	r3, #0
 8021524:	d1da      	bne.n	80214dc <USB_WritePMA+0x40>
  }
}
 8021526:	46c0      	nop			@ (mov r8, r8)
 8021528:	46c0      	nop			@ (mov r8, r8)
 802152a:	46bd      	mov	sp, r7
 802152c:	b00a      	add	sp, #40	@ 0x28
 802152e:	bd80      	pop	{r7, pc}

08021530 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8021530:	b580      	push	{r7, lr}
 8021532:	b08a      	sub	sp, #40	@ 0x28
 8021534:	af00      	add	r7, sp, #0
 8021536:	60f8      	str	r0, [r7, #12]
 8021538:	60b9      	str	r1, [r7, #8]
 802153a:	0019      	movs	r1, r3
 802153c:	1dbb      	adds	r3, r7, #6
 802153e:	801a      	strh	r2, [r3, #0]
 8021540:	1d3b      	adds	r3, r7, #4
 8021542:	1c0a      	adds	r2, r1, #0
 8021544:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8021546:	1d3b      	adds	r3, r7, #4
 8021548:	881b      	ldrh	r3, [r3, #0]
 802154a:	085b      	lsrs	r3, r3, #1
 802154c:	b29b      	uxth	r3, r3
 802154e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8021550:	68fb      	ldr	r3, [r7, #12]
 8021552:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8021554:	68bb      	ldr	r3, [r7, #8]
 8021556:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8021558:	1dbb      	adds	r3, r7, #6
 802155a:	881a      	ldrh	r2, [r3, #0]
 802155c:	697b      	ldr	r3, [r7, #20]
 802155e:	18d3      	adds	r3, r2, r3
 8021560:	2280      	movs	r2, #128	@ 0x80
 8021562:	00d2      	lsls	r2, r2, #3
 8021564:	4694      	mov	ip, r2
 8021566:	4463      	add	r3, ip
 8021568:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 802156a:	69bb      	ldr	r3, [r7, #24]
 802156c:	627b      	str	r3, [r7, #36]	@ 0x24
 802156e:	e018      	b.n	80215a2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8021570:	6a3b      	ldr	r3, [r7, #32]
 8021572:	881b      	ldrh	r3, [r3, #0]
 8021574:	b29b      	uxth	r3, r3
 8021576:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8021578:	6a3b      	ldr	r3, [r7, #32]
 802157a:	3302      	adds	r3, #2
 802157c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 802157e:	693b      	ldr	r3, [r7, #16]
 8021580:	b2da      	uxtb	r2, r3
 8021582:	69fb      	ldr	r3, [r7, #28]
 8021584:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8021586:	69fb      	ldr	r3, [r7, #28]
 8021588:	3301      	adds	r3, #1
 802158a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 802158c:	693b      	ldr	r3, [r7, #16]
 802158e:	0a1b      	lsrs	r3, r3, #8
 8021590:	b2da      	uxtb	r2, r3
 8021592:	69fb      	ldr	r3, [r7, #28]
 8021594:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8021596:	69fb      	ldr	r3, [r7, #28]
 8021598:	3301      	adds	r3, #1
 802159a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 802159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802159e:	3b01      	subs	r3, #1
 80215a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80215a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80215a4:	2b00      	cmp	r3, #0
 80215a6:	d1e3      	bne.n	8021570 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80215a8:	1d3b      	adds	r3, r7, #4
 80215aa:	881b      	ldrh	r3, [r3, #0]
 80215ac:	2201      	movs	r2, #1
 80215ae:	4013      	ands	r3, r2
 80215b0:	b29b      	uxth	r3, r3
 80215b2:	2b00      	cmp	r3, #0
 80215b4:	d007      	beq.n	80215c6 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80215b6:	6a3b      	ldr	r3, [r7, #32]
 80215b8:	881b      	ldrh	r3, [r3, #0]
 80215ba:	b29b      	uxth	r3, r3
 80215bc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80215be:	693b      	ldr	r3, [r7, #16]
 80215c0:	b2da      	uxtb	r2, r3
 80215c2:	69fb      	ldr	r3, [r7, #28]
 80215c4:	701a      	strb	r2, [r3, #0]
  }
}
 80215c6:	46c0      	nop			@ (mov r8, r8)
 80215c8:	46bd      	mov	sp, r7
 80215ca:	b00a      	add	sp, #40	@ 0x28
 80215cc:	bd80      	pop	{r7, pc}

080215ce <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80215ce:	b580      	push	{r7, lr}
 80215d0:	b084      	sub	sp, #16
 80215d2:	af00      	add	r7, sp, #0
 80215d4:	6078      	str	r0, [r7, #4]
 80215d6:	000a      	movs	r2, r1
 80215d8:	1cfb      	adds	r3, r7, #3
 80215da:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80215dc:	230f      	movs	r3, #15
 80215de:	18fb      	adds	r3, r7, r3
 80215e0:	2200      	movs	r2, #0
 80215e2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80215e4:	687b      	ldr	r3, [r7, #4]
 80215e6:	7c1b      	ldrb	r3, [r3, #16]
 80215e8:	2b00      	cmp	r3, #0
 80215ea:	d116      	bne.n	802161a <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80215ec:	2380      	movs	r3, #128	@ 0x80
 80215ee:	009b      	lsls	r3, r3, #2
 80215f0:	6878      	ldr	r0, [r7, #4]
 80215f2:	2202      	movs	r2, #2
 80215f4:	2181      	movs	r1, #129	@ 0x81
 80215f6:	f002 f8f8 	bl	80237ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80215fa:	687b      	ldr	r3, [r7, #4]
 80215fc:	2201      	movs	r2, #1
 80215fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8021600:	2380      	movs	r3, #128	@ 0x80
 8021602:	009b      	lsls	r3, r3, #2
 8021604:	6878      	ldr	r0, [r7, #4]
 8021606:	2202      	movs	r2, #2
 8021608:	2101      	movs	r1, #1
 802160a:	f002 f8ee 	bl	80237ea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 802160e:	687a      	ldr	r2, [r7, #4]
 8021610:	23b6      	movs	r3, #182	@ 0xb6
 8021612:	005b      	lsls	r3, r3, #1
 8021614:	2101      	movs	r1, #1
 8021616:	50d1      	str	r1, [r2, r3]
 8021618:	e013      	b.n	8021642 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 802161a:	6878      	ldr	r0, [r7, #4]
 802161c:	2340      	movs	r3, #64	@ 0x40
 802161e:	2202      	movs	r2, #2
 8021620:	2181      	movs	r1, #129	@ 0x81
 8021622:	f002 f8e2 	bl	80237ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8021626:	687b      	ldr	r3, [r7, #4]
 8021628:	2201      	movs	r2, #1
 802162a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 802162c:	6878      	ldr	r0, [r7, #4]
 802162e:	2340      	movs	r3, #64	@ 0x40
 8021630:	2202      	movs	r2, #2
 8021632:	2101      	movs	r1, #1
 8021634:	f002 f8d9 	bl	80237ea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8021638:	687a      	ldr	r2, [r7, #4]
 802163a:	23b6      	movs	r3, #182	@ 0xb6
 802163c:	005b      	lsls	r3, r3, #1
 802163e:	2101      	movs	r1, #1
 8021640:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8021642:	6878      	ldr	r0, [r7, #4]
 8021644:	2308      	movs	r3, #8
 8021646:	2203      	movs	r2, #3
 8021648:	2182      	movs	r1, #130	@ 0x82
 802164a:	f002 f8ce 	bl	80237ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 802164e:	687b      	ldr	r3, [r7, #4]
 8021650:	2201      	movs	r2, #1
 8021652:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8021654:	2387      	movs	r3, #135	@ 0x87
 8021656:	009b      	lsls	r3, r3, #2
 8021658:	0018      	movs	r0, r3
 802165a:	f002 fa5f 	bl	8023b1c <USBD_static_malloc>
 802165e:	0001      	movs	r1, r0
 8021660:	687a      	ldr	r2, [r7, #4]
 8021662:	23ae      	movs	r3, #174	@ 0xae
 8021664:	009b      	lsls	r3, r3, #2
 8021666:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8021668:	687a      	ldr	r2, [r7, #4]
 802166a:	23ae      	movs	r3, #174	@ 0xae
 802166c:	009b      	lsls	r3, r3, #2
 802166e:	58d3      	ldr	r3, [r2, r3]
 8021670:	2b00      	cmp	r3, #0
 8021672:	d104      	bne.n	802167e <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8021674:	230f      	movs	r3, #15
 8021676:	18fb      	adds	r3, r7, r3
 8021678:	2201      	movs	r2, #1
 802167a:	701a      	strb	r2, [r3, #0]
 802167c:	e02c      	b.n	80216d8 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802167e:	687a      	ldr	r2, [r7, #4]
 8021680:	23ae      	movs	r3, #174	@ 0xae
 8021682:	009b      	lsls	r3, r3, #2
 8021684:	58d3      	ldr	r3, [r2, r3]
 8021686:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8021688:	687a      	ldr	r2, [r7, #4]
 802168a:	23af      	movs	r3, #175	@ 0xaf
 802168c:	009b      	lsls	r3, r3, #2
 802168e:	58d3      	ldr	r3, [r2, r3]
 8021690:	681b      	ldr	r3, [r3, #0]
 8021692:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8021694:	68ba      	ldr	r2, [r7, #8]
 8021696:	2385      	movs	r3, #133	@ 0x85
 8021698:	009b      	lsls	r3, r3, #2
 802169a:	2100      	movs	r1, #0
 802169c:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 802169e:	68ba      	ldr	r2, [r7, #8]
 80216a0:	2386      	movs	r3, #134	@ 0x86
 80216a2:	009b      	lsls	r3, r3, #2
 80216a4:	2100      	movs	r1, #0
 80216a6:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80216a8:	687b      	ldr	r3, [r7, #4]
 80216aa:	7c1b      	ldrb	r3, [r3, #16]
 80216ac:	2b00      	cmp	r3, #0
 80216ae:	d10a      	bne.n	80216c6 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80216b0:	68ba      	ldr	r2, [r7, #8]
 80216b2:	2381      	movs	r3, #129	@ 0x81
 80216b4:	009b      	lsls	r3, r3, #2
 80216b6:	58d2      	ldr	r2, [r2, r3]
 80216b8:	2380      	movs	r3, #128	@ 0x80
 80216ba:	009b      	lsls	r3, r3, #2
 80216bc:	6878      	ldr	r0, [r7, #4]
 80216be:	2101      	movs	r1, #1
 80216c0:	f002 f9de 	bl	8023a80 <USBD_LL_PrepareReceive>
 80216c4:	e008      	b.n	80216d8 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80216c6:	68ba      	ldr	r2, [r7, #8]
 80216c8:	2381      	movs	r3, #129	@ 0x81
 80216ca:	009b      	lsls	r3, r3, #2
 80216cc:	58d2      	ldr	r2, [r2, r3]
 80216ce:	6878      	ldr	r0, [r7, #4]
 80216d0:	2340      	movs	r3, #64	@ 0x40
 80216d2:	2101      	movs	r1, #1
 80216d4:	f002 f9d4 	bl	8023a80 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80216d8:	230f      	movs	r3, #15
 80216da:	18fb      	adds	r3, r7, r3
 80216dc:	781b      	ldrb	r3, [r3, #0]
}
 80216de:	0018      	movs	r0, r3
 80216e0:	46bd      	mov	sp, r7
 80216e2:	b004      	add	sp, #16
 80216e4:	bd80      	pop	{r7, pc}

080216e6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80216e6:	b580      	push	{r7, lr}
 80216e8:	b084      	sub	sp, #16
 80216ea:	af00      	add	r7, sp, #0
 80216ec:	6078      	str	r0, [r7, #4]
 80216ee:	000a      	movs	r2, r1
 80216f0:	1cfb      	adds	r3, r7, #3
 80216f2:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80216f4:	230f      	movs	r3, #15
 80216f6:	18fb      	adds	r3, r7, r3
 80216f8:	2200      	movs	r2, #0
 80216fa:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80216fc:	687b      	ldr	r3, [r7, #4]
 80216fe:	2181      	movs	r1, #129	@ 0x81
 8021700:	0018      	movs	r0, r3
 8021702:	f002 f8a9 	bl	8023858 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8021706:	687b      	ldr	r3, [r7, #4]
 8021708:	2200      	movs	r2, #0
 802170a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 802170c:	687b      	ldr	r3, [r7, #4]
 802170e:	2101      	movs	r1, #1
 8021710:	0018      	movs	r0, r3
 8021712:	f002 f8a1 	bl	8023858 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8021716:	687a      	ldr	r2, [r7, #4]
 8021718:	23b6      	movs	r3, #182	@ 0xb6
 802171a:	005b      	lsls	r3, r3, #1
 802171c:	2100      	movs	r1, #0
 802171e:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8021720:	687b      	ldr	r3, [r7, #4]
 8021722:	2182      	movs	r1, #130	@ 0x82
 8021724:	0018      	movs	r0, r3
 8021726:	f002 f897 	bl	8023858 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 802172a:	687b      	ldr	r3, [r7, #4]
 802172c:	2200      	movs	r2, #0
 802172e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8021730:	687a      	ldr	r2, [r7, #4]
 8021732:	23ae      	movs	r3, #174	@ 0xae
 8021734:	009b      	lsls	r3, r3, #2
 8021736:	58d3      	ldr	r3, [r2, r3]
 8021738:	2b00      	cmp	r3, #0
 802173a:	d011      	beq.n	8021760 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 802173c:	687a      	ldr	r2, [r7, #4]
 802173e:	23af      	movs	r3, #175	@ 0xaf
 8021740:	009b      	lsls	r3, r3, #2
 8021742:	58d3      	ldr	r3, [r2, r3]
 8021744:	685b      	ldr	r3, [r3, #4]
 8021746:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8021748:	687a      	ldr	r2, [r7, #4]
 802174a:	23ae      	movs	r3, #174	@ 0xae
 802174c:	009b      	lsls	r3, r3, #2
 802174e:	58d3      	ldr	r3, [r2, r3]
 8021750:	0018      	movs	r0, r3
 8021752:	f002 f9ef 	bl	8023b34 <USBD_static_free>
    pdev->pClassData = NULL;
 8021756:	687a      	ldr	r2, [r7, #4]
 8021758:	23ae      	movs	r3, #174	@ 0xae
 802175a:	009b      	lsls	r3, r3, #2
 802175c:	2100      	movs	r1, #0
 802175e:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8021760:	230f      	movs	r3, #15
 8021762:	18fb      	adds	r3, r7, r3
 8021764:	781b      	ldrb	r3, [r3, #0]
}
 8021766:	0018      	movs	r0, r3
 8021768:	46bd      	mov	sp, r7
 802176a:	b004      	add	sp, #16
 802176c:	bd80      	pop	{r7, pc}
	...

08021770 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8021770:	b580      	push	{r7, lr}
 8021772:	b086      	sub	sp, #24
 8021774:	af00      	add	r7, sp, #0
 8021776:	6078      	str	r0, [r7, #4]
 8021778:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 802177a:	687a      	ldr	r2, [r7, #4]
 802177c:	23ae      	movs	r3, #174	@ 0xae
 802177e:	009b      	lsls	r3, r3, #2
 8021780:	58d3      	ldr	r3, [r2, r3]
 8021782:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8021784:	230f      	movs	r3, #15
 8021786:	18fb      	adds	r3, r7, r3
 8021788:	2200      	movs	r2, #0
 802178a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 802178c:	230c      	movs	r3, #12
 802178e:	18fb      	adds	r3, r7, r3
 8021790:	2200      	movs	r2, #0
 8021792:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8021794:	2317      	movs	r3, #23
 8021796:	18fb      	adds	r3, r7, r3
 8021798:	2200      	movs	r2, #0
 802179a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802179c:	683b      	ldr	r3, [r7, #0]
 802179e:	781b      	ldrb	r3, [r3, #0]
 80217a0:	001a      	movs	r2, r3
 80217a2:	2360      	movs	r3, #96	@ 0x60
 80217a4:	4013      	ands	r3, r2
 80217a6:	d03d      	beq.n	8021824 <USBD_CDC_Setup+0xb4>
 80217a8:	2b20      	cmp	r3, #32
 80217aa:	d000      	beq.n	80217ae <USBD_CDC_Setup+0x3e>
 80217ac:	e094      	b.n	80218d8 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80217ae:	683b      	ldr	r3, [r7, #0]
 80217b0:	88db      	ldrh	r3, [r3, #6]
 80217b2:	2b00      	cmp	r3, #0
 80217b4:	d02b      	beq.n	802180e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80217b6:	683b      	ldr	r3, [r7, #0]
 80217b8:	781b      	ldrb	r3, [r3, #0]
 80217ba:	b25b      	sxtb	r3, r3
 80217bc:	2b00      	cmp	r3, #0
 80217be:	da12      	bge.n	80217e6 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80217c0:	687a      	ldr	r2, [r7, #4]
 80217c2:	23af      	movs	r3, #175	@ 0xaf
 80217c4:	009b      	lsls	r3, r3, #2
 80217c6:	58d3      	ldr	r3, [r2, r3]
 80217c8:	689b      	ldr	r3, [r3, #8]
 80217ca:	683a      	ldr	r2, [r7, #0]
 80217cc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80217ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80217d0:	683a      	ldr	r2, [r7, #0]
 80217d2:	88d2      	ldrh	r2, [r2, #6]
 80217d4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80217d6:	6939      	ldr	r1, [r7, #16]
 80217d8:	683b      	ldr	r3, [r7, #0]
 80217da:	88da      	ldrh	r2, [r3, #6]
 80217dc:	687b      	ldr	r3, [r7, #4]
 80217de:	0018      	movs	r0, r3
 80217e0:	f001 fbaf 	bl	8022f42 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80217e4:	e083      	b.n	80218ee <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80217e6:	683b      	ldr	r3, [r7, #0]
 80217e8:	7859      	ldrb	r1, [r3, #1]
 80217ea:	693a      	ldr	r2, [r7, #16]
 80217ec:	2380      	movs	r3, #128	@ 0x80
 80217ee:	009b      	lsls	r3, r3, #2
 80217f0:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80217f2:	683b      	ldr	r3, [r7, #0]
 80217f4:	88db      	ldrh	r3, [r3, #6]
 80217f6:	b2d9      	uxtb	r1, r3
 80217f8:	693b      	ldr	r3, [r7, #16]
 80217fa:	4a40      	ldr	r2, [pc, #256]	@ (80218fc <USBD_CDC_Setup+0x18c>)
 80217fc:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80217fe:	6939      	ldr	r1, [r7, #16]
 8021800:	683b      	ldr	r3, [r7, #0]
 8021802:	88da      	ldrh	r2, [r3, #6]
 8021804:	687b      	ldr	r3, [r7, #4]
 8021806:	0018      	movs	r0, r3
 8021808:	f001 fbce 	bl	8022fa8 <USBD_CtlPrepareRx>
      break;
 802180c:	e06f      	b.n	80218ee <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 802180e:	687a      	ldr	r2, [r7, #4]
 8021810:	23af      	movs	r3, #175	@ 0xaf
 8021812:	009b      	lsls	r3, r3, #2
 8021814:	58d3      	ldr	r3, [r2, r3]
 8021816:	689b      	ldr	r3, [r3, #8]
 8021818:	683a      	ldr	r2, [r7, #0]
 802181a:	7850      	ldrb	r0, [r2, #1]
 802181c:	6839      	ldr	r1, [r7, #0]
 802181e:	2200      	movs	r2, #0
 8021820:	4798      	blx	r3
      break;
 8021822:	e064      	b.n	80218ee <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021824:	683b      	ldr	r3, [r7, #0]
 8021826:	785b      	ldrb	r3, [r3, #1]
 8021828:	2b0b      	cmp	r3, #11
 802182a:	d037      	beq.n	802189c <USBD_CDC_Setup+0x12c>
 802182c:	dc47      	bgt.n	80218be <USBD_CDC_Setup+0x14e>
 802182e:	2b00      	cmp	r3, #0
 8021830:	d002      	beq.n	8021838 <USBD_CDC_Setup+0xc8>
 8021832:	2b0a      	cmp	r3, #10
 8021834:	d019      	beq.n	802186a <USBD_CDC_Setup+0xfa>
 8021836:	e042      	b.n	80218be <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8021838:	687a      	ldr	r2, [r7, #4]
 802183a:	23a7      	movs	r3, #167	@ 0xa7
 802183c:	009b      	lsls	r3, r3, #2
 802183e:	5cd3      	ldrb	r3, [r2, r3]
 8021840:	2b03      	cmp	r3, #3
 8021842:	d107      	bne.n	8021854 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8021844:	230c      	movs	r3, #12
 8021846:	18f9      	adds	r1, r7, r3
 8021848:	687b      	ldr	r3, [r7, #4]
 802184a:	2202      	movs	r2, #2
 802184c:	0018      	movs	r0, r3
 802184e:	f001 fb78 	bl	8022f42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8021852:	e040      	b.n	80218d6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8021854:	683a      	ldr	r2, [r7, #0]
 8021856:	687b      	ldr	r3, [r7, #4]
 8021858:	0011      	movs	r1, r2
 802185a:	0018      	movs	r0, r3
 802185c:	f001 faf3 	bl	8022e46 <USBD_CtlError>
            ret = USBD_FAIL;
 8021860:	2317      	movs	r3, #23
 8021862:	18fb      	adds	r3, r7, r3
 8021864:	2202      	movs	r2, #2
 8021866:	701a      	strb	r2, [r3, #0]
          break;
 8021868:	e035      	b.n	80218d6 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802186a:	687a      	ldr	r2, [r7, #4]
 802186c:	23a7      	movs	r3, #167	@ 0xa7
 802186e:	009b      	lsls	r3, r3, #2
 8021870:	5cd3      	ldrb	r3, [r2, r3]
 8021872:	2b03      	cmp	r3, #3
 8021874:	d107      	bne.n	8021886 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8021876:	230f      	movs	r3, #15
 8021878:	18f9      	adds	r1, r7, r3
 802187a:	687b      	ldr	r3, [r7, #4]
 802187c:	2201      	movs	r2, #1
 802187e:	0018      	movs	r0, r3
 8021880:	f001 fb5f 	bl	8022f42 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8021884:	e027      	b.n	80218d6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8021886:	683a      	ldr	r2, [r7, #0]
 8021888:	687b      	ldr	r3, [r7, #4]
 802188a:	0011      	movs	r1, r2
 802188c:	0018      	movs	r0, r3
 802188e:	f001 fada 	bl	8022e46 <USBD_CtlError>
            ret = USBD_FAIL;
 8021892:	2317      	movs	r3, #23
 8021894:	18fb      	adds	r3, r7, r3
 8021896:	2202      	movs	r2, #2
 8021898:	701a      	strb	r2, [r3, #0]
          break;
 802189a:	e01c      	b.n	80218d6 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 802189c:	687a      	ldr	r2, [r7, #4]
 802189e:	23a7      	movs	r3, #167	@ 0xa7
 80218a0:	009b      	lsls	r3, r3, #2
 80218a2:	5cd3      	ldrb	r3, [r2, r3]
 80218a4:	2b03      	cmp	r3, #3
 80218a6:	d015      	beq.n	80218d4 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 80218a8:	683a      	ldr	r2, [r7, #0]
 80218aa:	687b      	ldr	r3, [r7, #4]
 80218ac:	0011      	movs	r1, r2
 80218ae:	0018      	movs	r0, r3
 80218b0:	f001 fac9 	bl	8022e46 <USBD_CtlError>
            ret = USBD_FAIL;
 80218b4:	2317      	movs	r3, #23
 80218b6:	18fb      	adds	r3, r7, r3
 80218b8:	2202      	movs	r2, #2
 80218ba:	701a      	strb	r2, [r3, #0]
          }
          break;
 80218bc:	e00a      	b.n	80218d4 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 80218be:	683a      	ldr	r2, [r7, #0]
 80218c0:	687b      	ldr	r3, [r7, #4]
 80218c2:	0011      	movs	r1, r2
 80218c4:	0018      	movs	r0, r3
 80218c6:	f001 fabe 	bl	8022e46 <USBD_CtlError>
          ret = USBD_FAIL;
 80218ca:	2317      	movs	r3, #23
 80218cc:	18fb      	adds	r3, r7, r3
 80218ce:	2202      	movs	r2, #2
 80218d0:	701a      	strb	r2, [r3, #0]
          break;
 80218d2:	e000      	b.n	80218d6 <USBD_CDC_Setup+0x166>
          break;
 80218d4:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80218d6:	e00a      	b.n	80218ee <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80218d8:	683a      	ldr	r2, [r7, #0]
 80218da:	687b      	ldr	r3, [r7, #4]
 80218dc:	0011      	movs	r1, r2
 80218de:	0018      	movs	r0, r3
 80218e0:	f001 fab1 	bl	8022e46 <USBD_CtlError>
      ret = USBD_FAIL;
 80218e4:	2317      	movs	r3, #23
 80218e6:	18fb      	adds	r3, r7, r3
 80218e8:	2202      	movs	r2, #2
 80218ea:	701a      	strb	r2, [r3, #0]
      break;
 80218ec:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80218ee:	2317      	movs	r3, #23
 80218f0:	18fb      	adds	r3, r7, r3
 80218f2:	781b      	ldrb	r3, [r3, #0]
}
 80218f4:	0018      	movs	r0, r3
 80218f6:	46bd      	mov	sp, r7
 80218f8:	b006      	add	sp, #24
 80218fa:	bd80      	pop	{r7, pc}
 80218fc:	00000201 	.word	0x00000201

08021900 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8021900:	b580      	push	{r7, lr}
 8021902:	b084      	sub	sp, #16
 8021904:	af00      	add	r7, sp, #0
 8021906:	6078      	str	r0, [r7, #4]
 8021908:	000a      	movs	r2, r1
 802190a:	1cfb      	adds	r3, r7, #3
 802190c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 802190e:	687a      	ldr	r2, [r7, #4]
 8021910:	23ae      	movs	r3, #174	@ 0xae
 8021912:	009b      	lsls	r3, r3, #2
 8021914:	58d3      	ldr	r3, [r2, r3]
 8021916:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8021918:	687a      	ldr	r2, [r7, #4]
 802191a:	23b0      	movs	r3, #176	@ 0xb0
 802191c:	009b      	lsls	r3, r3, #2
 802191e:	58d3      	ldr	r3, [r2, r3]
 8021920:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8021922:	687a      	ldr	r2, [r7, #4]
 8021924:	23ae      	movs	r3, #174	@ 0xae
 8021926:	009b      	lsls	r3, r3, #2
 8021928:	58d3      	ldr	r3, [r2, r3]
 802192a:	2b00      	cmp	r3, #0
 802192c:	d03e      	beq.n	80219ac <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 802192e:	1cfb      	adds	r3, r7, #3
 8021930:	781a      	ldrb	r2, [r3, #0]
 8021932:	6879      	ldr	r1, [r7, #4]
 8021934:	0013      	movs	r3, r2
 8021936:	009b      	lsls	r3, r3, #2
 8021938:	189b      	adds	r3, r3, r2
 802193a:	009b      	lsls	r3, r3, #2
 802193c:	18cb      	adds	r3, r1, r3
 802193e:	331c      	adds	r3, #28
 8021940:	681b      	ldr	r3, [r3, #0]
 8021942:	2b00      	cmp	r3, #0
 8021944:	d02b      	beq.n	802199e <USBD_CDC_DataIn+0x9e>
 8021946:	1cfb      	adds	r3, r7, #3
 8021948:	781a      	ldrb	r2, [r3, #0]
 802194a:	6879      	ldr	r1, [r7, #4]
 802194c:	0013      	movs	r3, r2
 802194e:	009b      	lsls	r3, r3, #2
 8021950:	189b      	adds	r3, r3, r2
 8021952:	009b      	lsls	r3, r3, #2
 8021954:	18cb      	adds	r3, r1, r3
 8021956:	331c      	adds	r3, #28
 8021958:	6818      	ldr	r0, [r3, #0]
 802195a:	1cfb      	adds	r3, r7, #3
 802195c:	781a      	ldrb	r2, [r3, #0]
 802195e:	68b9      	ldr	r1, [r7, #8]
 8021960:	0013      	movs	r3, r2
 8021962:	009b      	lsls	r3, r3, #2
 8021964:	189b      	adds	r3, r3, r2
 8021966:	00db      	lsls	r3, r3, #3
 8021968:	18cb      	adds	r3, r1, r3
 802196a:	3338      	adds	r3, #56	@ 0x38
 802196c:	681b      	ldr	r3, [r3, #0]
 802196e:	0019      	movs	r1, r3
 8021970:	f7de fc9e 	bl	80002b0 <__aeabi_uidivmod>
 8021974:	1e0b      	subs	r3, r1, #0
 8021976:	d112      	bne.n	802199e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8021978:	1cfb      	adds	r3, r7, #3
 802197a:	781a      	ldrb	r2, [r3, #0]
 802197c:	6879      	ldr	r1, [r7, #4]
 802197e:	0013      	movs	r3, r2
 8021980:	009b      	lsls	r3, r3, #2
 8021982:	189b      	adds	r3, r3, r2
 8021984:	009b      	lsls	r3, r3, #2
 8021986:	18cb      	adds	r3, r1, r3
 8021988:	331c      	adds	r3, #28
 802198a:	2200      	movs	r2, #0
 802198c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 802198e:	1cfb      	adds	r3, r7, #3
 8021990:	7819      	ldrb	r1, [r3, #0]
 8021992:	6878      	ldr	r0, [r7, #4]
 8021994:	2300      	movs	r3, #0
 8021996:	2200      	movs	r2, #0
 8021998:	f002 f83b 	bl	8023a12 <USBD_LL_Transmit>
 802199c:	e004      	b.n	80219a8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 802199e:	68fa      	ldr	r2, [r7, #12]
 80219a0:	2385      	movs	r3, #133	@ 0x85
 80219a2:	009b      	lsls	r3, r3, #2
 80219a4:	2100      	movs	r1, #0
 80219a6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80219a8:	2300      	movs	r3, #0
 80219aa:	e000      	b.n	80219ae <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80219ac:	2302      	movs	r3, #2
  }
}
 80219ae:	0018      	movs	r0, r3
 80219b0:	46bd      	mov	sp, r7
 80219b2:	b004      	add	sp, #16
 80219b4:	bd80      	pop	{r7, pc}

080219b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80219b6:	b580      	push	{r7, lr}
 80219b8:	b084      	sub	sp, #16
 80219ba:	af00      	add	r7, sp, #0
 80219bc:	6078      	str	r0, [r7, #4]
 80219be:	000a      	movs	r2, r1
 80219c0:	1cfb      	adds	r3, r7, #3
 80219c2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80219c4:	687a      	ldr	r2, [r7, #4]
 80219c6:	23ae      	movs	r3, #174	@ 0xae
 80219c8:	009b      	lsls	r3, r3, #2
 80219ca:	58d3      	ldr	r3, [r2, r3]
 80219cc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80219ce:	1cfb      	adds	r3, r7, #3
 80219d0:	781a      	ldrb	r2, [r3, #0]
 80219d2:	687b      	ldr	r3, [r7, #4]
 80219d4:	0011      	movs	r1, r2
 80219d6:	0018      	movs	r0, r3
 80219d8:	f002 f889 	bl	8023aee <USBD_LL_GetRxDataSize>
 80219dc:	0001      	movs	r1, r0
 80219de:	68fa      	ldr	r2, [r7, #12]
 80219e0:	2383      	movs	r3, #131	@ 0x83
 80219e2:	009b      	lsls	r3, r3, #2
 80219e4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80219e6:	687a      	ldr	r2, [r7, #4]
 80219e8:	23ae      	movs	r3, #174	@ 0xae
 80219ea:	009b      	lsls	r3, r3, #2
 80219ec:	58d3      	ldr	r3, [r2, r3]
 80219ee:	2b00      	cmp	r3, #0
 80219f0:	d011      	beq.n	8021a16 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80219f2:	687a      	ldr	r2, [r7, #4]
 80219f4:	23af      	movs	r3, #175	@ 0xaf
 80219f6:	009b      	lsls	r3, r3, #2
 80219f8:	58d3      	ldr	r3, [r2, r3]
 80219fa:	68da      	ldr	r2, [r3, #12]
 80219fc:	68f9      	ldr	r1, [r7, #12]
 80219fe:	2381      	movs	r3, #129	@ 0x81
 8021a00:	009b      	lsls	r3, r3, #2
 8021a02:	58c8      	ldr	r0, [r1, r3]
 8021a04:	68fb      	ldr	r3, [r7, #12]
 8021a06:	2183      	movs	r1, #131	@ 0x83
 8021a08:	0089      	lsls	r1, r1, #2
 8021a0a:	468c      	mov	ip, r1
 8021a0c:	4463      	add	r3, ip
 8021a0e:	0019      	movs	r1, r3
 8021a10:	4790      	blx	r2

    return USBD_OK;
 8021a12:	2300      	movs	r3, #0
 8021a14:	e000      	b.n	8021a18 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8021a16:	2302      	movs	r3, #2
  }
}
 8021a18:	0018      	movs	r0, r3
 8021a1a:	46bd      	mov	sp, r7
 8021a1c:	b004      	add	sp, #16
 8021a1e:	bd80      	pop	{r7, pc}

08021a20 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8021a20:	b590      	push	{r4, r7, lr}
 8021a22:	b085      	sub	sp, #20
 8021a24:	af00      	add	r7, sp, #0
 8021a26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021a28:	687a      	ldr	r2, [r7, #4]
 8021a2a:	23ae      	movs	r3, #174	@ 0xae
 8021a2c:	009b      	lsls	r3, r3, #2
 8021a2e:	58d3      	ldr	r3, [r2, r3]
 8021a30:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8021a32:	687a      	ldr	r2, [r7, #4]
 8021a34:	23af      	movs	r3, #175	@ 0xaf
 8021a36:	009b      	lsls	r3, r3, #2
 8021a38:	58d3      	ldr	r3, [r2, r3]
 8021a3a:	2b00      	cmp	r3, #0
 8021a3c:	d018      	beq.n	8021a70 <USBD_CDC_EP0_RxReady+0x50>
 8021a3e:	68fa      	ldr	r2, [r7, #12]
 8021a40:	2380      	movs	r3, #128	@ 0x80
 8021a42:	009b      	lsls	r3, r3, #2
 8021a44:	5cd3      	ldrb	r3, [r2, r3]
 8021a46:	2bff      	cmp	r3, #255	@ 0xff
 8021a48:	d012      	beq.n	8021a70 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8021a4a:	687a      	ldr	r2, [r7, #4]
 8021a4c:	23af      	movs	r3, #175	@ 0xaf
 8021a4e:	009b      	lsls	r3, r3, #2
 8021a50:	58d3      	ldr	r3, [r2, r3]
 8021a52:	689b      	ldr	r3, [r3, #8]
 8021a54:	68f9      	ldr	r1, [r7, #12]
 8021a56:	2280      	movs	r2, #128	@ 0x80
 8021a58:	0092      	lsls	r2, r2, #2
 8021a5a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8021a5c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8021a5e:	68fa      	ldr	r2, [r7, #12]
 8021a60:	4c06      	ldr	r4, [pc, #24]	@ (8021a7c <USBD_CDC_EP0_RxReady+0x5c>)
 8021a62:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8021a64:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8021a66:	68fa      	ldr	r2, [r7, #12]
 8021a68:	2380      	movs	r3, #128	@ 0x80
 8021a6a:	009b      	lsls	r3, r3, #2
 8021a6c:	21ff      	movs	r1, #255	@ 0xff
 8021a6e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8021a70:	2300      	movs	r3, #0
}
 8021a72:	0018      	movs	r0, r3
 8021a74:	46bd      	mov	sp, r7
 8021a76:	b005      	add	sp, #20
 8021a78:	bd90      	pop	{r4, r7, pc}
 8021a7a:	46c0      	nop			@ (mov r8, r8)
 8021a7c:	00000201 	.word	0x00000201

08021a80 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8021a80:	b580      	push	{r7, lr}
 8021a82:	b082      	sub	sp, #8
 8021a84:	af00      	add	r7, sp, #0
 8021a86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8021a88:	687b      	ldr	r3, [r7, #4]
 8021a8a:	2243      	movs	r2, #67	@ 0x43
 8021a8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8021a8e:	4b02      	ldr	r3, [pc, #8]	@ (8021a98 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8021a90:	0018      	movs	r0, r3
 8021a92:	46bd      	mov	sp, r7
 8021a94:	b002      	add	sp, #8
 8021a96:	bd80      	pop	{r7, pc}
 8021a98:	2000018c 	.word	0x2000018c

08021a9c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8021a9c:	b580      	push	{r7, lr}
 8021a9e:	b082      	sub	sp, #8
 8021aa0:	af00      	add	r7, sp, #0
 8021aa2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8021aa4:	687b      	ldr	r3, [r7, #4]
 8021aa6:	2243      	movs	r2, #67	@ 0x43
 8021aa8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8021aaa:	4b02      	ldr	r3, [pc, #8]	@ (8021ab4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8021aac:	0018      	movs	r0, r3
 8021aae:	46bd      	mov	sp, r7
 8021ab0:	b002      	add	sp, #8
 8021ab2:	bd80      	pop	{r7, pc}
 8021ab4:	20000148 	.word	0x20000148

08021ab8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8021ab8:	b580      	push	{r7, lr}
 8021aba:	b082      	sub	sp, #8
 8021abc:	af00      	add	r7, sp, #0
 8021abe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8021ac0:	687b      	ldr	r3, [r7, #4]
 8021ac2:	2243      	movs	r2, #67	@ 0x43
 8021ac4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8021ac6:	4b02      	ldr	r3, [pc, #8]	@ (8021ad0 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8021ac8:	0018      	movs	r0, r3
 8021aca:	46bd      	mov	sp, r7
 8021acc:	b002      	add	sp, #8
 8021ace:	bd80      	pop	{r7, pc}
 8021ad0:	200001d0 	.word	0x200001d0

08021ad4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8021ad4:	b580      	push	{r7, lr}
 8021ad6:	b082      	sub	sp, #8
 8021ad8:	af00      	add	r7, sp, #0
 8021ada:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8021adc:	687b      	ldr	r3, [r7, #4]
 8021ade:	220a      	movs	r2, #10
 8021ae0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8021ae2:	4b02      	ldr	r3, [pc, #8]	@ (8021aec <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8021ae4:	0018      	movs	r0, r3
 8021ae6:	46bd      	mov	sp, r7
 8021ae8:	b002      	add	sp, #8
 8021aea:	bd80      	pop	{r7, pc}
 8021aec:	20000104 	.word	0x20000104

08021af0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8021af0:	b580      	push	{r7, lr}
 8021af2:	b084      	sub	sp, #16
 8021af4:	af00      	add	r7, sp, #0
 8021af6:	6078      	str	r0, [r7, #4]
 8021af8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8021afa:	200f      	movs	r0, #15
 8021afc:	183b      	adds	r3, r7, r0
 8021afe:	2202      	movs	r2, #2
 8021b00:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8021b02:	683b      	ldr	r3, [r7, #0]
 8021b04:	2b00      	cmp	r3, #0
 8021b06:	d007      	beq.n	8021b18 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8021b08:	687a      	ldr	r2, [r7, #4]
 8021b0a:	23af      	movs	r3, #175	@ 0xaf
 8021b0c:	009b      	lsls	r3, r3, #2
 8021b0e:	6839      	ldr	r1, [r7, #0]
 8021b10:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8021b12:	183b      	adds	r3, r7, r0
 8021b14:	2200      	movs	r2, #0
 8021b16:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8021b18:	230f      	movs	r3, #15
 8021b1a:	18fb      	adds	r3, r7, r3
 8021b1c:	781b      	ldrb	r3, [r3, #0]
}
 8021b1e:	0018      	movs	r0, r3
 8021b20:	46bd      	mov	sp, r7
 8021b22:	b004      	add	sp, #16
 8021b24:	bd80      	pop	{r7, pc}

08021b26 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8021b26:	b580      	push	{r7, lr}
 8021b28:	b086      	sub	sp, #24
 8021b2a:	af00      	add	r7, sp, #0
 8021b2c:	60f8      	str	r0, [r7, #12]
 8021b2e:	60b9      	str	r1, [r7, #8]
 8021b30:	1dbb      	adds	r3, r7, #6
 8021b32:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021b34:	68fa      	ldr	r2, [r7, #12]
 8021b36:	23ae      	movs	r3, #174	@ 0xae
 8021b38:	009b      	lsls	r3, r3, #2
 8021b3a:	58d3      	ldr	r3, [r2, r3]
 8021b3c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8021b3e:	697a      	ldr	r2, [r7, #20]
 8021b40:	2382      	movs	r3, #130	@ 0x82
 8021b42:	009b      	lsls	r3, r3, #2
 8021b44:	68b9      	ldr	r1, [r7, #8]
 8021b46:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8021b48:	1dbb      	adds	r3, r7, #6
 8021b4a:	8819      	ldrh	r1, [r3, #0]
 8021b4c:	697a      	ldr	r2, [r7, #20]
 8021b4e:	2384      	movs	r3, #132	@ 0x84
 8021b50:	009b      	lsls	r3, r3, #2
 8021b52:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8021b54:	2300      	movs	r3, #0
}
 8021b56:	0018      	movs	r0, r3
 8021b58:	46bd      	mov	sp, r7
 8021b5a:	b006      	add	sp, #24
 8021b5c:	bd80      	pop	{r7, pc}

08021b5e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8021b5e:	b580      	push	{r7, lr}
 8021b60:	b084      	sub	sp, #16
 8021b62:	af00      	add	r7, sp, #0
 8021b64:	6078      	str	r0, [r7, #4]
 8021b66:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021b68:	687a      	ldr	r2, [r7, #4]
 8021b6a:	23ae      	movs	r3, #174	@ 0xae
 8021b6c:	009b      	lsls	r3, r3, #2
 8021b6e:	58d3      	ldr	r3, [r2, r3]
 8021b70:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8021b72:	68fa      	ldr	r2, [r7, #12]
 8021b74:	2381      	movs	r3, #129	@ 0x81
 8021b76:	009b      	lsls	r3, r3, #2
 8021b78:	6839      	ldr	r1, [r7, #0]
 8021b7a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8021b7c:	2300      	movs	r3, #0
}
 8021b7e:	0018      	movs	r0, r3
 8021b80:	46bd      	mov	sp, r7
 8021b82:	b004      	add	sp, #16
 8021b84:	bd80      	pop	{r7, pc}

08021b86 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8021b86:	b580      	push	{r7, lr}
 8021b88:	b084      	sub	sp, #16
 8021b8a:	af00      	add	r7, sp, #0
 8021b8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021b8e:	687a      	ldr	r2, [r7, #4]
 8021b90:	23ae      	movs	r3, #174	@ 0xae
 8021b92:	009b      	lsls	r3, r3, #2
 8021b94:	58d3      	ldr	r3, [r2, r3]
 8021b96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8021b98:	687a      	ldr	r2, [r7, #4]
 8021b9a:	23ae      	movs	r3, #174	@ 0xae
 8021b9c:	009b      	lsls	r3, r3, #2
 8021b9e:	58d3      	ldr	r3, [r2, r3]
 8021ba0:	2b00      	cmp	r3, #0
 8021ba2:	d022      	beq.n	8021bea <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8021ba4:	68fa      	ldr	r2, [r7, #12]
 8021ba6:	2385      	movs	r3, #133	@ 0x85
 8021ba8:	009b      	lsls	r3, r3, #2
 8021baa:	58d3      	ldr	r3, [r2, r3]
 8021bac:	2b00      	cmp	r3, #0
 8021bae:	d11a      	bne.n	8021be6 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8021bb0:	68fa      	ldr	r2, [r7, #12]
 8021bb2:	2385      	movs	r3, #133	@ 0x85
 8021bb4:	009b      	lsls	r3, r3, #2
 8021bb6:	2101      	movs	r1, #1
 8021bb8:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8021bba:	68fa      	ldr	r2, [r7, #12]
 8021bbc:	2384      	movs	r3, #132	@ 0x84
 8021bbe:	009b      	lsls	r3, r3, #2
 8021bc0:	58d2      	ldr	r2, [r2, r3]
 8021bc2:	687b      	ldr	r3, [r7, #4]
 8021bc4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8021bc6:	68fa      	ldr	r2, [r7, #12]
 8021bc8:	2382      	movs	r3, #130	@ 0x82
 8021bca:	009b      	lsls	r3, r3, #2
 8021bcc:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8021bce:	68fa      	ldr	r2, [r7, #12]
 8021bd0:	2384      	movs	r3, #132	@ 0x84
 8021bd2:	009b      	lsls	r3, r3, #2
 8021bd4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8021bd6:	b29b      	uxth	r3, r3
 8021bd8:	6878      	ldr	r0, [r7, #4]
 8021bda:	000a      	movs	r2, r1
 8021bdc:	2181      	movs	r1, #129	@ 0x81
 8021bde:	f001 ff18 	bl	8023a12 <USBD_LL_Transmit>

      return USBD_OK;
 8021be2:	2300      	movs	r3, #0
 8021be4:	e002      	b.n	8021bec <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8021be6:	2301      	movs	r3, #1
 8021be8:	e000      	b.n	8021bec <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8021bea:	2302      	movs	r3, #2
  }
}
 8021bec:	0018      	movs	r0, r3
 8021bee:	46bd      	mov	sp, r7
 8021bf0:	b004      	add	sp, #16
 8021bf2:	bd80      	pop	{r7, pc}

08021bf4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8021bf4:	b580      	push	{r7, lr}
 8021bf6:	b084      	sub	sp, #16
 8021bf8:	af00      	add	r7, sp, #0
 8021bfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8021bfc:	687a      	ldr	r2, [r7, #4]
 8021bfe:	23ae      	movs	r3, #174	@ 0xae
 8021c00:	009b      	lsls	r3, r3, #2
 8021c02:	58d3      	ldr	r3, [r2, r3]
 8021c04:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8021c06:	687a      	ldr	r2, [r7, #4]
 8021c08:	23ae      	movs	r3, #174	@ 0xae
 8021c0a:	009b      	lsls	r3, r3, #2
 8021c0c:	58d3      	ldr	r3, [r2, r3]
 8021c0e:	2b00      	cmp	r3, #0
 8021c10:	d019      	beq.n	8021c46 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8021c12:	687b      	ldr	r3, [r7, #4]
 8021c14:	7c1b      	ldrb	r3, [r3, #16]
 8021c16:	2b00      	cmp	r3, #0
 8021c18:	d10a      	bne.n	8021c30 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021c1a:	68fa      	ldr	r2, [r7, #12]
 8021c1c:	2381      	movs	r3, #129	@ 0x81
 8021c1e:	009b      	lsls	r3, r3, #2
 8021c20:	58d2      	ldr	r2, [r2, r3]
 8021c22:	2380      	movs	r3, #128	@ 0x80
 8021c24:	009b      	lsls	r3, r3, #2
 8021c26:	6878      	ldr	r0, [r7, #4]
 8021c28:	2101      	movs	r1, #1
 8021c2a:	f001 ff29 	bl	8023a80 <USBD_LL_PrepareReceive>
 8021c2e:	e008      	b.n	8021c42 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8021c30:	68fa      	ldr	r2, [r7, #12]
 8021c32:	2381      	movs	r3, #129	@ 0x81
 8021c34:	009b      	lsls	r3, r3, #2
 8021c36:	58d2      	ldr	r2, [r2, r3]
 8021c38:	6878      	ldr	r0, [r7, #4]
 8021c3a:	2340      	movs	r3, #64	@ 0x40
 8021c3c:	2101      	movs	r1, #1
 8021c3e:	f001 ff1f 	bl	8023a80 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8021c42:	2300      	movs	r3, #0
 8021c44:	e000      	b.n	8021c48 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8021c46:	2302      	movs	r3, #2
  }
}
 8021c48:	0018      	movs	r0, r3
 8021c4a:	46bd      	mov	sp, r7
 8021c4c:	b004      	add	sp, #16
 8021c4e:	bd80      	pop	{r7, pc}

08021c50 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8021c50:	b580      	push	{r7, lr}
 8021c52:	b084      	sub	sp, #16
 8021c54:	af00      	add	r7, sp, #0
 8021c56:	60f8      	str	r0, [r7, #12]
 8021c58:	60b9      	str	r1, [r7, #8]
 8021c5a:	1dfb      	adds	r3, r7, #7
 8021c5c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8021c5e:	68fb      	ldr	r3, [r7, #12]
 8021c60:	2b00      	cmp	r3, #0
 8021c62:	d101      	bne.n	8021c68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8021c64:	2302      	movs	r3, #2
 8021c66:	e020      	b.n	8021caa <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8021c68:	68fa      	ldr	r2, [r7, #12]
 8021c6a:	23ad      	movs	r3, #173	@ 0xad
 8021c6c:	009b      	lsls	r3, r3, #2
 8021c6e:	58d3      	ldr	r3, [r2, r3]
 8021c70:	2b00      	cmp	r3, #0
 8021c72:	d004      	beq.n	8021c7e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8021c74:	68fa      	ldr	r2, [r7, #12]
 8021c76:	23ad      	movs	r3, #173	@ 0xad
 8021c78:	009b      	lsls	r3, r3, #2
 8021c7a:	2100      	movs	r1, #0
 8021c7c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8021c7e:	68bb      	ldr	r3, [r7, #8]
 8021c80:	2b00      	cmp	r3, #0
 8021c82:	d004      	beq.n	8021c8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8021c84:	68fa      	ldr	r2, [r7, #12]
 8021c86:	23ac      	movs	r3, #172	@ 0xac
 8021c88:	009b      	lsls	r3, r3, #2
 8021c8a:	68b9      	ldr	r1, [r7, #8]
 8021c8c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8021c8e:	68fa      	ldr	r2, [r7, #12]
 8021c90:	23a7      	movs	r3, #167	@ 0xa7
 8021c92:	009b      	lsls	r3, r3, #2
 8021c94:	2101      	movs	r1, #1
 8021c96:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8021c98:	68fb      	ldr	r3, [r7, #12]
 8021c9a:	1dfa      	adds	r2, r7, #7
 8021c9c:	7812      	ldrb	r2, [r2, #0]
 8021c9e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8021ca0:	68fb      	ldr	r3, [r7, #12]
 8021ca2:	0018      	movs	r0, r3
 8021ca4:	f001 fd18 	bl	80236d8 <USBD_LL_Init>

  return USBD_OK;
 8021ca8:	2300      	movs	r3, #0
}
 8021caa:	0018      	movs	r0, r3
 8021cac:	46bd      	mov	sp, r7
 8021cae:	b004      	add	sp, #16
 8021cb0:	bd80      	pop	{r7, pc}

08021cb2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8021cb2:	b580      	push	{r7, lr}
 8021cb4:	b084      	sub	sp, #16
 8021cb6:	af00      	add	r7, sp, #0
 8021cb8:	6078      	str	r0, [r7, #4]
 8021cba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8021cbc:	200f      	movs	r0, #15
 8021cbe:	183b      	adds	r3, r7, r0
 8021cc0:	2200      	movs	r2, #0
 8021cc2:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8021cc4:	683b      	ldr	r3, [r7, #0]
 8021cc6:	2b00      	cmp	r3, #0
 8021cc8:	d008      	beq.n	8021cdc <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8021cca:	687a      	ldr	r2, [r7, #4]
 8021ccc:	23ad      	movs	r3, #173	@ 0xad
 8021cce:	009b      	lsls	r3, r3, #2
 8021cd0:	6839      	ldr	r1, [r7, #0]
 8021cd2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8021cd4:	183b      	adds	r3, r7, r0
 8021cd6:	2200      	movs	r2, #0
 8021cd8:	701a      	strb	r2, [r3, #0]
 8021cda:	e003      	b.n	8021ce4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8021cdc:	230f      	movs	r3, #15
 8021cde:	18fb      	adds	r3, r7, r3
 8021ce0:	2202      	movs	r2, #2
 8021ce2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8021ce4:	230f      	movs	r3, #15
 8021ce6:	18fb      	adds	r3, r7, r3
 8021ce8:	781b      	ldrb	r3, [r3, #0]
}
 8021cea:	0018      	movs	r0, r3
 8021cec:	46bd      	mov	sp, r7
 8021cee:	b004      	add	sp, #16
 8021cf0:	bd80      	pop	{r7, pc}

08021cf2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8021cf2:	b580      	push	{r7, lr}
 8021cf4:	b082      	sub	sp, #8
 8021cf6:	af00      	add	r7, sp, #0
 8021cf8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8021cfa:	687b      	ldr	r3, [r7, #4]
 8021cfc:	0018      	movs	r0, r3
 8021cfe:	f001 fd4f 	bl	80237a0 <USBD_LL_Start>

  return USBD_OK;
 8021d02:	2300      	movs	r3, #0
}
 8021d04:	0018      	movs	r0, r3
 8021d06:	46bd      	mov	sp, r7
 8021d08:	b002      	add	sp, #8
 8021d0a:	bd80      	pop	{r7, pc}

08021d0c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8021d0c:	b580      	push	{r7, lr}
 8021d0e:	b082      	sub	sp, #8
 8021d10:	af00      	add	r7, sp, #0
 8021d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8021d14:	2300      	movs	r3, #0
}
 8021d16:	0018      	movs	r0, r3
 8021d18:	46bd      	mov	sp, r7
 8021d1a:	b002      	add	sp, #8
 8021d1c:	bd80      	pop	{r7, pc}

08021d1e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021d1e:	b590      	push	{r4, r7, lr}
 8021d20:	b085      	sub	sp, #20
 8021d22:	af00      	add	r7, sp, #0
 8021d24:	6078      	str	r0, [r7, #4]
 8021d26:	000a      	movs	r2, r1
 8021d28:	1cfb      	adds	r3, r7, #3
 8021d2a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8021d2c:	240f      	movs	r4, #15
 8021d2e:	193b      	adds	r3, r7, r4
 8021d30:	2202      	movs	r2, #2
 8021d32:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8021d34:	687a      	ldr	r2, [r7, #4]
 8021d36:	23ad      	movs	r3, #173	@ 0xad
 8021d38:	009b      	lsls	r3, r3, #2
 8021d3a:	58d3      	ldr	r3, [r2, r3]
 8021d3c:	2b00      	cmp	r3, #0
 8021d3e:	d00e      	beq.n	8021d5e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8021d40:	687a      	ldr	r2, [r7, #4]
 8021d42:	23ad      	movs	r3, #173	@ 0xad
 8021d44:	009b      	lsls	r3, r3, #2
 8021d46:	58d3      	ldr	r3, [r2, r3]
 8021d48:	681b      	ldr	r3, [r3, #0]
 8021d4a:	1cfa      	adds	r2, r7, #3
 8021d4c:	7811      	ldrb	r1, [r2, #0]
 8021d4e:	687a      	ldr	r2, [r7, #4]
 8021d50:	0010      	movs	r0, r2
 8021d52:	4798      	blx	r3
 8021d54:	1e03      	subs	r3, r0, #0
 8021d56:	d102      	bne.n	8021d5e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8021d58:	193b      	adds	r3, r7, r4
 8021d5a:	2200      	movs	r2, #0
 8021d5c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8021d5e:	230f      	movs	r3, #15
 8021d60:	18fb      	adds	r3, r7, r3
 8021d62:	781b      	ldrb	r3, [r3, #0]
}
 8021d64:	0018      	movs	r0, r3
 8021d66:	46bd      	mov	sp, r7
 8021d68:	b005      	add	sp, #20
 8021d6a:	bd90      	pop	{r4, r7, pc}

08021d6c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8021d6c:	b580      	push	{r7, lr}
 8021d6e:	b082      	sub	sp, #8
 8021d70:	af00      	add	r7, sp, #0
 8021d72:	6078      	str	r0, [r7, #4]
 8021d74:	000a      	movs	r2, r1
 8021d76:	1cfb      	adds	r3, r7, #3
 8021d78:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8021d7a:	687a      	ldr	r2, [r7, #4]
 8021d7c:	23ad      	movs	r3, #173	@ 0xad
 8021d7e:	009b      	lsls	r3, r3, #2
 8021d80:	58d3      	ldr	r3, [r2, r3]
 8021d82:	685b      	ldr	r3, [r3, #4]
 8021d84:	1cfa      	adds	r2, r7, #3
 8021d86:	7811      	ldrb	r1, [r2, #0]
 8021d88:	687a      	ldr	r2, [r7, #4]
 8021d8a:	0010      	movs	r0, r2
 8021d8c:	4798      	blx	r3

  return USBD_OK;
 8021d8e:	2300      	movs	r3, #0
}
 8021d90:	0018      	movs	r0, r3
 8021d92:	46bd      	mov	sp, r7
 8021d94:	b002      	add	sp, #8
 8021d96:	bd80      	pop	{r7, pc}

08021d98 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8021d98:	b580      	push	{r7, lr}
 8021d9a:	b082      	sub	sp, #8
 8021d9c:	af00      	add	r7, sp, #0
 8021d9e:	6078      	str	r0, [r7, #4]
 8021da0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8021da2:	687b      	ldr	r3, [r7, #4]
 8021da4:	22aa      	movs	r2, #170	@ 0xaa
 8021da6:	0092      	lsls	r2, r2, #2
 8021da8:	4694      	mov	ip, r2
 8021daa:	4463      	add	r3, ip
 8021dac:	683a      	ldr	r2, [r7, #0]
 8021dae:	0011      	movs	r1, r2
 8021db0:	0018      	movs	r0, r3
 8021db2:	f001 f810 	bl	8022dd6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8021db6:	687a      	ldr	r2, [r7, #4]
 8021db8:	23a5      	movs	r3, #165	@ 0xa5
 8021dba:	009b      	lsls	r3, r3, #2
 8021dbc:	2101      	movs	r1, #1
 8021dbe:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8021dc0:	687b      	ldr	r3, [r7, #4]
 8021dc2:	4a23      	ldr	r2, [pc, #140]	@ (8021e50 <USBD_LL_SetupStage+0xb8>)
 8021dc4:	5a9b      	ldrh	r3, [r3, r2]
 8021dc6:	0019      	movs	r1, r3
 8021dc8:	687a      	ldr	r2, [r7, #4]
 8021dca:	23a6      	movs	r3, #166	@ 0xa6
 8021dcc:	009b      	lsls	r3, r3, #2
 8021dce:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8021dd0:	687a      	ldr	r2, [r7, #4]
 8021dd2:	23aa      	movs	r3, #170	@ 0xaa
 8021dd4:	009b      	lsls	r3, r3, #2
 8021dd6:	5cd3      	ldrb	r3, [r2, r3]
 8021dd8:	001a      	movs	r2, r3
 8021dda:	231f      	movs	r3, #31
 8021ddc:	4013      	ands	r3, r2
 8021dde:	2b02      	cmp	r3, #2
 8021de0:	d019      	beq.n	8021e16 <USBD_LL_SetupStage+0x7e>
 8021de2:	d822      	bhi.n	8021e2a <USBD_LL_SetupStage+0x92>
 8021de4:	2b00      	cmp	r3, #0
 8021de6:	d002      	beq.n	8021dee <USBD_LL_SetupStage+0x56>
 8021de8:	2b01      	cmp	r3, #1
 8021dea:	d00a      	beq.n	8021e02 <USBD_LL_SetupStage+0x6a>
 8021dec:	e01d      	b.n	8021e2a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8021dee:	687b      	ldr	r3, [r7, #4]
 8021df0:	22aa      	movs	r2, #170	@ 0xaa
 8021df2:	0092      	lsls	r2, r2, #2
 8021df4:	189a      	adds	r2, r3, r2
 8021df6:	687b      	ldr	r3, [r7, #4]
 8021df8:	0011      	movs	r1, r2
 8021dfa:	0018      	movs	r0, r3
 8021dfc:	f000 fa10 	bl	8022220 <USBD_StdDevReq>
      break;
 8021e00:	e020      	b.n	8021e44 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8021e02:	687b      	ldr	r3, [r7, #4]
 8021e04:	22aa      	movs	r2, #170	@ 0xaa
 8021e06:	0092      	lsls	r2, r2, #2
 8021e08:	189a      	adds	r2, r3, r2
 8021e0a:	687b      	ldr	r3, [r7, #4]
 8021e0c:	0011      	movs	r1, r2
 8021e0e:	0018      	movs	r0, r3
 8021e10:	f000 fa78 	bl	8022304 <USBD_StdItfReq>
      break;
 8021e14:	e016      	b.n	8021e44 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8021e16:	687b      	ldr	r3, [r7, #4]
 8021e18:	22aa      	movs	r2, #170	@ 0xaa
 8021e1a:	0092      	lsls	r2, r2, #2
 8021e1c:	189a      	adds	r2, r3, r2
 8021e1e:	687b      	ldr	r3, [r7, #4]
 8021e20:	0011      	movs	r1, r2
 8021e22:	0018      	movs	r0, r3
 8021e24:	f000 fac5 	bl	80223b2 <USBD_StdEPReq>
      break;
 8021e28:	e00c      	b.n	8021e44 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8021e2a:	687a      	ldr	r2, [r7, #4]
 8021e2c:	23aa      	movs	r3, #170	@ 0xaa
 8021e2e:	009b      	lsls	r3, r3, #2
 8021e30:	5cd3      	ldrb	r3, [r2, r3]
 8021e32:	227f      	movs	r2, #127	@ 0x7f
 8021e34:	4393      	bics	r3, r2
 8021e36:	b2da      	uxtb	r2, r3
 8021e38:	687b      	ldr	r3, [r7, #4]
 8021e3a:	0011      	movs	r1, r2
 8021e3c:	0018      	movs	r0, r3
 8021e3e:	f001 fd36 	bl	80238ae <USBD_LL_StallEP>
      break;
 8021e42:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8021e44:	2300      	movs	r3, #0
}
 8021e46:	0018      	movs	r0, r3
 8021e48:	46bd      	mov	sp, r7
 8021e4a:	b002      	add	sp, #8
 8021e4c:	bd80      	pop	{r7, pc}
 8021e4e:	46c0      	nop			@ (mov r8, r8)
 8021e50:	000002ae 	.word	0x000002ae

08021e54 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8021e54:	b580      	push	{r7, lr}
 8021e56:	b086      	sub	sp, #24
 8021e58:	af00      	add	r7, sp, #0
 8021e5a:	60f8      	str	r0, [r7, #12]
 8021e5c:	607a      	str	r2, [r7, #4]
 8021e5e:	200b      	movs	r0, #11
 8021e60:	183b      	adds	r3, r7, r0
 8021e62:	1c0a      	adds	r2, r1, #0
 8021e64:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021e66:	183b      	adds	r3, r7, r0
 8021e68:	781b      	ldrb	r3, [r3, #0]
 8021e6a:	2b00      	cmp	r3, #0
 8021e6c:	d154      	bne.n	8021f18 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8021e6e:	68fb      	ldr	r3, [r7, #12]
 8021e70:	3355      	adds	r3, #85	@ 0x55
 8021e72:	33ff      	adds	r3, #255	@ 0xff
 8021e74:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8021e76:	68fa      	ldr	r2, [r7, #12]
 8021e78:	23a5      	movs	r3, #165	@ 0xa5
 8021e7a:	009b      	lsls	r3, r3, #2
 8021e7c:	58d3      	ldr	r3, [r2, r3]
 8021e7e:	2b03      	cmp	r3, #3
 8021e80:	d139      	bne.n	8021ef6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8021e82:	697b      	ldr	r3, [r7, #20]
 8021e84:	68da      	ldr	r2, [r3, #12]
 8021e86:	697b      	ldr	r3, [r7, #20]
 8021e88:	691b      	ldr	r3, [r3, #16]
 8021e8a:	429a      	cmp	r2, r3
 8021e8c:	d919      	bls.n	8021ec2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8021e8e:	697b      	ldr	r3, [r7, #20]
 8021e90:	68da      	ldr	r2, [r3, #12]
 8021e92:	697b      	ldr	r3, [r7, #20]
 8021e94:	691b      	ldr	r3, [r3, #16]
 8021e96:	1ad2      	subs	r2, r2, r3
 8021e98:	697b      	ldr	r3, [r7, #20]
 8021e9a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021e9c:	697b      	ldr	r3, [r7, #20]
 8021e9e:	68da      	ldr	r2, [r3, #12]
 8021ea0:	697b      	ldr	r3, [r7, #20]
 8021ea2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8021ea4:	429a      	cmp	r2, r3
 8021ea6:	d203      	bcs.n	8021eb0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021ea8:	697b      	ldr	r3, [r7, #20]
 8021eaa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8021eac:	b29b      	uxth	r3, r3
 8021eae:	e002      	b.n	8021eb6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8021eb0:	697b      	ldr	r3, [r7, #20]
 8021eb2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8021eb4:	b29b      	uxth	r3, r3
 8021eb6:	6879      	ldr	r1, [r7, #4]
 8021eb8:	68f8      	ldr	r0, [r7, #12]
 8021eba:	001a      	movs	r2, r3
 8021ebc:	f001 f898 	bl	8022ff0 <USBD_CtlContinueRx>
 8021ec0:	e045      	b.n	8021f4e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021ec2:	68fa      	ldr	r2, [r7, #12]
 8021ec4:	23ad      	movs	r3, #173	@ 0xad
 8021ec6:	009b      	lsls	r3, r3, #2
 8021ec8:	58d3      	ldr	r3, [r2, r3]
 8021eca:	691b      	ldr	r3, [r3, #16]
 8021ecc:	2b00      	cmp	r3, #0
 8021ece:	d00d      	beq.n	8021eec <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021ed0:	68fa      	ldr	r2, [r7, #12]
 8021ed2:	23a7      	movs	r3, #167	@ 0xa7
 8021ed4:	009b      	lsls	r3, r3, #2
 8021ed6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8021ed8:	2b03      	cmp	r3, #3
 8021eda:	d107      	bne.n	8021eec <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8021edc:	68fa      	ldr	r2, [r7, #12]
 8021ede:	23ad      	movs	r3, #173	@ 0xad
 8021ee0:	009b      	lsls	r3, r3, #2
 8021ee2:	58d3      	ldr	r3, [r2, r3]
 8021ee4:	691b      	ldr	r3, [r3, #16]
 8021ee6:	68fa      	ldr	r2, [r7, #12]
 8021ee8:	0010      	movs	r0, r2
 8021eea:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8021eec:	68fb      	ldr	r3, [r7, #12]
 8021eee:	0018      	movs	r0, r3
 8021ef0:	f001 f891 	bl	8023016 <USBD_CtlSendStatus>
 8021ef4:	e02b      	b.n	8021f4e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8021ef6:	68fa      	ldr	r2, [r7, #12]
 8021ef8:	23a5      	movs	r3, #165	@ 0xa5
 8021efa:	009b      	lsls	r3, r3, #2
 8021efc:	58d3      	ldr	r3, [r2, r3]
 8021efe:	2b05      	cmp	r3, #5
 8021f00:	d125      	bne.n	8021f4e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8021f02:	68fa      	ldr	r2, [r7, #12]
 8021f04:	23a5      	movs	r3, #165	@ 0xa5
 8021f06:	009b      	lsls	r3, r3, #2
 8021f08:	2100      	movs	r1, #0
 8021f0a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8021f0c:	68fb      	ldr	r3, [r7, #12]
 8021f0e:	2100      	movs	r1, #0
 8021f10:	0018      	movs	r0, r3
 8021f12:	f001 fccc 	bl	80238ae <USBD_LL_StallEP>
 8021f16:	e01a      	b.n	8021f4e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8021f18:	68fa      	ldr	r2, [r7, #12]
 8021f1a:	23ad      	movs	r3, #173	@ 0xad
 8021f1c:	009b      	lsls	r3, r3, #2
 8021f1e:	58d3      	ldr	r3, [r2, r3]
 8021f20:	699b      	ldr	r3, [r3, #24]
 8021f22:	2b00      	cmp	r3, #0
 8021f24:	d011      	beq.n	8021f4a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8021f26:	68fa      	ldr	r2, [r7, #12]
 8021f28:	23a7      	movs	r3, #167	@ 0xa7
 8021f2a:	009b      	lsls	r3, r3, #2
 8021f2c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8021f2e:	2b03      	cmp	r3, #3
 8021f30:	d10b      	bne.n	8021f4a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8021f32:	68fa      	ldr	r2, [r7, #12]
 8021f34:	23ad      	movs	r3, #173	@ 0xad
 8021f36:	009b      	lsls	r3, r3, #2
 8021f38:	58d3      	ldr	r3, [r2, r3]
 8021f3a:	699b      	ldr	r3, [r3, #24]
 8021f3c:	220b      	movs	r2, #11
 8021f3e:	18ba      	adds	r2, r7, r2
 8021f40:	7811      	ldrb	r1, [r2, #0]
 8021f42:	68fa      	ldr	r2, [r7, #12]
 8021f44:	0010      	movs	r0, r2
 8021f46:	4798      	blx	r3
 8021f48:	e001      	b.n	8021f4e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8021f4a:	2302      	movs	r3, #2
 8021f4c:	e000      	b.n	8021f50 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8021f4e:	2300      	movs	r3, #0
}
 8021f50:	0018      	movs	r0, r3
 8021f52:	46bd      	mov	sp, r7
 8021f54:	b006      	add	sp, #24
 8021f56:	bd80      	pop	{r7, pc}

08021f58 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8021f58:	b580      	push	{r7, lr}
 8021f5a:	b086      	sub	sp, #24
 8021f5c:	af00      	add	r7, sp, #0
 8021f5e:	60f8      	str	r0, [r7, #12]
 8021f60:	607a      	str	r2, [r7, #4]
 8021f62:	200b      	movs	r0, #11
 8021f64:	183b      	adds	r3, r7, r0
 8021f66:	1c0a      	adds	r2, r1, #0
 8021f68:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8021f6a:	183b      	adds	r3, r7, r0
 8021f6c:	781b      	ldrb	r3, [r3, #0]
 8021f6e:	2b00      	cmp	r3, #0
 8021f70:	d000      	beq.n	8021f74 <USBD_LL_DataInStage+0x1c>
 8021f72:	e08e      	b.n	8022092 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8021f74:	68fb      	ldr	r3, [r7, #12]
 8021f76:	3314      	adds	r3, #20
 8021f78:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8021f7a:	68fa      	ldr	r2, [r7, #12]
 8021f7c:	23a5      	movs	r3, #165	@ 0xa5
 8021f7e:	009b      	lsls	r3, r3, #2
 8021f80:	58d3      	ldr	r3, [r2, r3]
 8021f82:	2b02      	cmp	r3, #2
 8021f84:	d164      	bne.n	8022050 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8021f86:	697b      	ldr	r3, [r7, #20]
 8021f88:	68da      	ldr	r2, [r3, #12]
 8021f8a:	697b      	ldr	r3, [r7, #20]
 8021f8c:	691b      	ldr	r3, [r3, #16]
 8021f8e:	429a      	cmp	r2, r3
 8021f90:	d915      	bls.n	8021fbe <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8021f92:	697b      	ldr	r3, [r7, #20]
 8021f94:	68da      	ldr	r2, [r3, #12]
 8021f96:	697b      	ldr	r3, [r7, #20]
 8021f98:	691b      	ldr	r3, [r3, #16]
 8021f9a:	1ad2      	subs	r2, r2, r3
 8021f9c:	697b      	ldr	r3, [r7, #20]
 8021f9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8021fa0:	697b      	ldr	r3, [r7, #20]
 8021fa2:	68db      	ldr	r3, [r3, #12]
 8021fa4:	b29a      	uxth	r2, r3
 8021fa6:	6879      	ldr	r1, [r7, #4]
 8021fa8:	68fb      	ldr	r3, [r7, #12]
 8021faa:	0018      	movs	r0, r3
 8021fac:	f000 ffe9 	bl	8022f82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021fb0:	68f8      	ldr	r0, [r7, #12]
 8021fb2:	2300      	movs	r3, #0
 8021fb4:	2200      	movs	r2, #0
 8021fb6:	2100      	movs	r1, #0
 8021fb8:	f001 fd62 	bl	8023a80 <USBD_LL_PrepareReceive>
 8021fbc:	e059      	b.n	8022072 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8021fbe:	697b      	ldr	r3, [r7, #20]
 8021fc0:	689a      	ldr	r2, [r3, #8]
 8021fc2:	697b      	ldr	r3, [r7, #20]
 8021fc4:	691b      	ldr	r3, [r3, #16]
 8021fc6:	0019      	movs	r1, r3
 8021fc8:	0010      	movs	r0, r2
 8021fca:	f7de f971 	bl	80002b0 <__aeabi_uidivmod>
 8021fce:	1e0b      	subs	r3, r1, #0
 8021fd0:	d11f      	bne.n	8022012 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8021fd2:	697b      	ldr	r3, [r7, #20]
 8021fd4:	689a      	ldr	r2, [r3, #8]
 8021fd6:	697b      	ldr	r3, [r7, #20]
 8021fd8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8021fda:	429a      	cmp	r2, r3
 8021fdc:	d319      	bcc.n	8022012 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8021fde:	697b      	ldr	r3, [r7, #20]
 8021fe0:	689a      	ldr	r2, [r3, #8]
 8021fe2:	68f9      	ldr	r1, [r7, #12]
 8021fe4:	23a6      	movs	r3, #166	@ 0xa6
 8021fe6:	009b      	lsls	r3, r3, #2
 8021fe8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8021fea:	429a      	cmp	r2, r3
 8021fec:	d211      	bcs.n	8022012 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8021fee:	68fb      	ldr	r3, [r7, #12]
 8021ff0:	2200      	movs	r2, #0
 8021ff2:	2100      	movs	r1, #0
 8021ff4:	0018      	movs	r0, r3
 8021ff6:	f000 ffc4 	bl	8022f82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8021ffa:	68fa      	ldr	r2, [r7, #12]
 8021ffc:	23a6      	movs	r3, #166	@ 0xa6
 8021ffe:	009b      	lsls	r3, r3, #2
 8022000:	2100      	movs	r1, #0
 8022002:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8022004:	68f8      	ldr	r0, [r7, #12]
 8022006:	2300      	movs	r3, #0
 8022008:	2200      	movs	r2, #0
 802200a:	2100      	movs	r1, #0
 802200c:	f001 fd38 	bl	8023a80 <USBD_LL_PrepareReceive>
 8022010:	e02f      	b.n	8022072 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8022012:	68fa      	ldr	r2, [r7, #12]
 8022014:	23ad      	movs	r3, #173	@ 0xad
 8022016:	009b      	lsls	r3, r3, #2
 8022018:	58d3      	ldr	r3, [r2, r3]
 802201a:	68db      	ldr	r3, [r3, #12]
 802201c:	2b00      	cmp	r3, #0
 802201e:	d00d      	beq.n	802203c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8022020:	68fa      	ldr	r2, [r7, #12]
 8022022:	23a7      	movs	r3, #167	@ 0xa7
 8022024:	009b      	lsls	r3, r3, #2
 8022026:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8022028:	2b03      	cmp	r3, #3
 802202a:	d107      	bne.n	802203c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 802202c:	68fa      	ldr	r2, [r7, #12]
 802202e:	23ad      	movs	r3, #173	@ 0xad
 8022030:	009b      	lsls	r3, r3, #2
 8022032:	58d3      	ldr	r3, [r2, r3]
 8022034:	68db      	ldr	r3, [r3, #12]
 8022036:	68fa      	ldr	r2, [r7, #12]
 8022038:	0010      	movs	r0, r2
 802203a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 802203c:	68fb      	ldr	r3, [r7, #12]
 802203e:	2180      	movs	r1, #128	@ 0x80
 8022040:	0018      	movs	r0, r3
 8022042:	f001 fc34 	bl	80238ae <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8022046:	68fb      	ldr	r3, [r7, #12]
 8022048:	0018      	movs	r0, r3
 802204a:	f000 fff8 	bl	802303e <USBD_CtlReceiveStatus>
 802204e:	e010      	b.n	8022072 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8022050:	68fa      	ldr	r2, [r7, #12]
 8022052:	23a5      	movs	r3, #165	@ 0xa5
 8022054:	009b      	lsls	r3, r3, #2
 8022056:	58d3      	ldr	r3, [r2, r3]
 8022058:	2b04      	cmp	r3, #4
 802205a:	d005      	beq.n	8022068 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 802205c:	68fa      	ldr	r2, [r7, #12]
 802205e:	23a5      	movs	r3, #165	@ 0xa5
 8022060:	009b      	lsls	r3, r3, #2
 8022062:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8022064:	2b00      	cmp	r3, #0
 8022066:	d104      	bne.n	8022072 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8022068:	68fb      	ldr	r3, [r7, #12]
 802206a:	2180      	movs	r1, #128	@ 0x80
 802206c:	0018      	movs	r0, r3
 802206e:	f001 fc1e 	bl	80238ae <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8022072:	68fa      	ldr	r2, [r7, #12]
 8022074:	23a8      	movs	r3, #168	@ 0xa8
 8022076:	009b      	lsls	r3, r3, #2
 8022078:	5cd3      	ldrb	r3, [r2, r3]
 802207a:	2b01      	cmp	r3, #1
 802207c:	d124      	bne.n	80220c8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 802207e:	68fb      	ldr	r3, [r7, #12]
 8022080:	0018      	movs	r0, r3
 8022082:	f7ff fe43 	bl	8021d0c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8022086:	68fa      	ldr	r2, [r7, #12]
 8022088:	23a8      	movs	r3, #168	@ 0xa8
 802208a:	009b      	lsls	r3, r3, #2
 802208c:	2100      	movs	r1, #0
 802208e:	54d1      	strb	r1, [r2, r3]
 8022090:	e01a      	b.n	80220c8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8022092:	68fa      	ldr	r2, [r7, #12]
 8022094:	23ad      	movs	r3, #173	@ 0xad
 8022096:	009b      	lsls	r3, r3, #2
 8022098:	58d3      	ldr	r3, [r2, r3]
 802209a:	695b      	ldr	r3, [r3, #20]
 802209c:	2b00      	cmp	r3, #0
 802209e:	d011      	beq.n	80220c4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80220a0:	68fa      	ldr	r2, [r7, #12]
 80220a2:	23a7      	movs	r3, #167	@ 0xa7
 80220a4:	009b      	lsls	r3, r3, #2
 80220a6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80220a8:	2b03      	cmp	r3, #3
 80220aa:	d10b      	bne.n	80220c4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80220ac:	68fa      	ldr	r2, [r7, #12]
 80220ae:	23ad      	movs	r3, #173	@ 0xad
 80220b0:	009b      	lsls	r3, r3, #2
 80220b2:	58d3      	ldr	r3, [r2, r3]
 80220b4:	695b      	ldr	r3, [r3, #20]
 80220b6:	220b      	movs	r2, #11
 80220b8:	18ba      	adds	r2, r7, r2
 80220ba:	7811      	ldrb	r1, [r2, #0]
 80220bc:	68fa      	ldr	r2, [r7, #12]
 80220be:	0010      	movs	r0, r2
 80220c0:	4798      	blx	r3
 80220c2:	e001      	b.n	80220c8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80220c4:	2302      	movs	r3, #2
 80220c6:	e000      	b.n	80220ca <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80220c8:	2300      	movs	r3, #0
}
 80220ca:	0018      	movs	r0, r3
 80220cc:	46bd      	mov	sp, r7
 80220ce:	b006      	add	sp, #24
 80220d0:	bd80      	pop	{r7, pc}

080220d2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80220d2:	b580      	push	{r7, lr}
 80220d4:	b082      	sub	sp, #8
 80220d6:	af00      	add	r7, sp, #0
 80220d8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80220da:	6878      	ldr	r0, [r7, #4]
 80220dc:	2340      	movs	r3, #64	@ 0x40
 80220de:	2200      	movs	r2, #0
 80220e0:	2100      	movs	r1, #0
 80220e2:	f001 fb82 	bl	80237ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80220e6:	687a      	ldr	r2, [r7, #4]
 80220e8:	23ac      	movs	r3, #172	@ 0xac
 80220ea:	005b      	lsls	r3, r3, #1
 80220ec:	2101      	movs	r1, #1
 80220ee:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80220f0:	687a      	ldr	r2, [r7, #4]
 80220f2:	23b2      	movs	r3, #178	@ 0xb2
 80220f4:	005b      	lsls	r3, r3, #1
 80220f6:	2140      	movs	r1, #64	@ 0x40
 80220f8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80220fa:	6878      	ldr	r0, [r7, #4]
 80220fc:	2340      	movs	r3, #64	@ 0x40
 80220fe:	2200      	movs	r2, #0
 8022100:	2180      	movs	r1, #128	@ 0x80
 8022102:	f001 fb72 	bl	80237ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8022106:	687b      	ldr	r3, [r7, #4]
 8022108:	2201      	movs	r2, #1
 802210a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 802210c:	687b      	ldr	r3, [r7, #4]
 802210e:	2240      	movs	r2, #64	@ 0x40
 8022110:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8022112:	687a      	ldr	r2, [r7, #4]
 8022114:	23a7      	movs	r3, #167	@ 0xa7
 8022116:	009b      	lsls	r3, r3, #2
 8022118:	2101      	movs	r1, #1
 802211a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 802211c:	687a      	ldr	r2, [r7, #4]
 802211e:	23a5      	movs	r3, #165	@ 0xa5
 8022120:	009b      	lsls	r3, r3, #2
 8022122:	2100      	movs	r1, #0
 8022124:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8022126:	687b      	ldr	r3, [r7, #4]
 8022128:	2200      	movs	r2, #0
 802212a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 802212c:	687a      	ldr	r2, [r7, #4]
 802212e:	23a9      	movs	r3, #169	@ 0xa9
 8022130:	009b      	lsls	r3, r3, #2
 8022132:	2100      	movs	r1, #0
 8022134:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8022136:	687a      	ldr	r2, [r7, #4]
 8022138:	23ae      	movs	r3, #174	@ 0xae
 802213a:	009b      	lsls	r3, r3, #2
 802213c:	58d3      	ldr	r3, [r2, r3]
 802213e:	2b00      	cmp	r3, #0
 8022140:	d00a      	beq.n	8022158 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8022142:	687a      	ldr	r2, [r7, #4]
 8022144:	23ad      	movs	r3, #173	@ 0xad
 8022146:	009b      	lsls	r3, r3, #2
 8022148:	58d3      	ldr	r3, [r2, r3]
 802214a:	685a      	ldr	r2, [r3, #4]
 802214c:	687b      	ldr	r3, [r7, #4]
 802214e:	685b      	ldr	r3, [r3, #4]
 8022150:	b2d9      	uxtb	r1, r3
 8022152:	687b      	ldr	r3, [r7, #4]
 8022154:	0018      	movs	r0, r3
 8022156:	4790      	blx	r2
  }

  return USBD_OK;
 8022158:	2300      	movs	r3, #0
}
 802215a:	0018      	movs	r0, r3
 802215c:	46bd      	mov	sp, r7
 802215e:	b002      	add	sp, #8
 8022160:	bd80      	pop	{r7, pc}

08022162 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8022162:	b580      	push	{r7, lr}
 8022164:	b082      	sub	sp, #8
 8022166:	af00      	add	r7, sp, #0
 8022168:	6078      	str	r0, [r7, #4]
 802216a:	000a      	movs	r2, r1
 802216c:	1cfb      	adds	r3, r7, #3
 802216e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8022170:	687b      	ldr	r3, [r7, #4]
 8022172:	1cfa      	adds	r2, r7, #3
 8022174:	7812      	ldrb	r2, [r2, #0]
 8022176:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8022178:	2300      	movs	r3, #0
}
 802217a:	0018      	movs	r0, r3
 802217c:	46bd      	mov	sp, r7
 802217e:	b002      	add	sp, #8
 8022180:	bd80      	pop	{r7, pc}
	...

08022184 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8022184:	b580      	push	{r7, lr}
 8022186:	b082      	sub	sp, #8
 8022188:	af00      	add	r7, sp, #0
 802218a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 802218c:	687a      	ldr	r2, [r7, #4]
 802218e:	23a7      	movs	r3, #167	@ 0xa7
 8022190:	009b      	lsls	r3, r3, #2
 8022192:	5cd1      	ldrb	r1, [r2, r3]
 8022194:	687b      	ldr	r3, [r7, #4]
 8022196:	4a06      	ldr	r2, [pc, #24]	@ (80221b0 <USBD_LL_Suspend+0x2c>)
 8022198:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 802219a:	687a      	ldr	r2, [r7, #4]
 802219c:	23a7      	movs	r3, #167	@ 0xa7
 802219e:	009b      	lsls	r3, r3, #2
 80221a0:	2104      	movs	r1, #4
 80221a2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80221a4:	2300      	movs	r3, #0
}
 80221a6:	0018      	movs	r0, r3
 80221a8:	46bd      	mov	sp, r7
 80221aa:	b002      	add	sp, #8
 80221ac:	bd80      	pop	{r7, pc}
 80221ae:	46c0      	nop			@ (mov r8, r8)
 80221b0:	0000029d 	.word	0x0000029d

080221b4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80221b4:	b580      	push	{r7, lr}
 80221b6:	b082      	sub	sp, #8
 80221b8:	af00      	add	r7, sp, #0
 80221ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80221bc:	687a      	ldr	r2, [r7, #4]
 80221be:	23a7      	movs	r3, #167	@ 0xa7
 80221c0:	009b      	lsls	r3, r3, #2
 80221c2:	5cd3      	ldrb	r3, [r2, r3]
 80221c4:	2b04      	cmp	r3, #4
 80221c6:	d106      	bne.n	80221d6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80221c8:	687b      	ldr	r3, [r7, #4]
 80221ca:	4a05      	ldr	r2, [pc, #20]	@ (80221e0 <USBD_LL_Resume+0x2c>)
 80221cc:	5c99      	ldrb	r1, [r3, r2]
 80221ce:	687a      	ldr	r2, [r7, #4]
 80221d0:	23a7      	movs	r3, #167	@ 0xa7
 80221d2:	009b      	lsls	r3, r3, #2
 80221d4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80221d6:	2300      	movs	r3, #0
}
 80221d8:	0018      	movs	r0, r3
 80221da:	46bd      	mov	sp, r7
 80221dc:	b002      	add	sp, #8
 80221de:	bd80      	pop	{r7, pc}
 80221e0:	0000029d 	.word	0x0000029d

080221e4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80221e4:	b580      	push	{r7, lr}
 80221e6:	b082      	sub	sp, #8
 80221e8:	af00      	add	r7, sp, #0
 80221ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80221ec:	687a      	ldr	r2, [r7, #4]
 80221ee:	23a7      	movs	r3, #167	@ 0xa7
 80221f0:	009b      	lsls	r3, r3, #2
 80221f2:	5cd3      	ldrb	r3, [r2, r3]
 80221f4:	2b03      	cmp	r3, #3
 80221f6:	d10e      	bne.n	8022216 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80221f8:	687a      	ldr	r2, [r7, #4]
 80221fa:	23ad      	movs	r3, #173	@ 0xad
 80221fc:	009b      	lsls	r3, r3, #2
 80221fe:	58d3      	ldr	r3, [r2, r3]
 8022200:	69db      	ldr	r3, [r3, #28]
 8022202:	2b00      	cmp	r3, #0
 8022204:	d007      	beq.n	8022216 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8022206:	687a      	ldr	r2, [r7, #4]
 8022208:	23ad      	movs	r3, #173	@ 0xad
 802220a:	009b      	lsls	r3, r3, #2
 802220c:	58d3      	ldr	r3, [r2, r3]
 802220e:	69db      	ldr	r3, [r3, #28]
 8022210:	687a      	ldr	r2, [r7, #4]
 8022212:	0010      	movs	r0, r2
 8022214:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8022216:	2300      	movs	r3, #0
}
 8022218:	0018      	movs	r0, r3
 802221a:	46bd      	mov	sp, r7
 802221c:	b002      	add	sp, #8
 802221e:	bd80      	pop	{r7, pc}

08022220 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8022220:	b580      	push	{r7, lr}
 8022222:	b084      	sub	sp, #16
 8022224:	af00      	add	r7, sp, #0
 8022226:	6078      	str	r0, [r7, #4]
 8022228:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802222a:	230f      	movs	r3, #15
 802222c:	18fb      	adds	r3, r7, r3
 802222e:	2200      	movs	r2, #0
 8022230:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8022232:	683b      	ldr	r3, [r7, #0]
 8022234:	781b      	ldrb	r3, [r3, #0]
 8022236:	001a      	movs	r2, r3
 8022238:	2360      	movs	r3, #96	@ 0x60
 802223a:	4013      	ands	r3, r2
 802223c:	2b40      	cmp	r3, #64	@ 0x40
 802223e:	d004      	beq.n	802224a <USBD_StdDevReq+0x2a>
 8022240:	d84f      	bhi.n	80222e2 <USBD_StdDevReq+0xc2>
 8022242:	2b00      	cmp	r3, #0
 8022244:	d00b      	beq.n	802225e <USBD_StdDevReq+0x3e>
 8022246:	2b20      	cmp	r3, #32
 8022248:	d14b      	bne.n	80222e2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 802224a:	687a      	ldr	r2, [r7, #4]
 802224c:	23ad      	movs	r3, #173	@ 0xad
 802224e:	009b      	lsls	r3, r3, #2
 8022250:	58d3      	ldr	r3, [r2, r3]
 8022252:	689b      	ldr	r3, [r3, #8]
 8022254:	6839      	ldr	r1, [r7, #0]
 8022256:	687a      	ldr	r2, [r7, #4]
 8022258:	0010      	movs	r0, r2
 802225a:	4798      	blx	r3
      break;
 802225c:	e048      	b.n	80222f0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802225e:	683b      	ldr	r3, [r7, #0]
 8022260:	785b      	ldrb	r3, [r3, #1]
 8022262:	2b09      	cmp	r3, #9
 8022264:	d835      	bhi.n	80222d2 <USBD_StdDevReq+0xb2>
 8022266:	009a      	lsls	r2, r3, #2
 8022268:	4b25      	ldr	r3, [pc, #148]	@ (8022300 <USBD_StdDevReq+0xe0>)
 802226a:	18d3      	adds	r3, r2, r3
 802226c:	681b      	ldr	r3, [r3, #0]
 802226e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8022270:	683a      	ldr	r2, [r7, #0]
 8022272:	687b      	ldr	r3, [r7, #4]
 8022274:	0011      	movs	r1, r2
 8022276:	0018      	movs	r0, r3
 8022278:	f000 fa52 	bl	8022720 <USBD_GetDescriptor>
          break;
 802227c:	e030      	b.n	80222e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 802227e:	683a      	ldr	r2, [r7, #0]
 8022280:	687b      	ldr	r3, [r7, #4]
 8022282:	0011      	movs	r1, r2
 8022284:	0018      	movs	r0, r3
 8022286:	f000 fbfd 	bl	8022a84 <USBD_SetAddress>
          break;
 802228a:	e029      	b.n	80222e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 802228c:	683a      	ldr	r2, [r7, #0]
 802228e:	687b      	ldr	r3, [r7, #4]
 8022290:	0011      	movs	r1, r2
 8022292:	0018      	movs	r0, r3
 8022294:	f000 fc4a 	bl	8022b2c <USBD_SetConfig>
          break;
 8022298:	e022      	b.n	80222e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 802229a:	683a      	ldr	r2, [r7, #0]
 802229c:	687b      	ldr	r3, [r7, #4]
 802229e:	0011      	movs	r1, r2
 80222a0:	0018      	movs	r0, r3
 80222a2:	f000 fce7 	bl	8022c74 <USBD_GetConfig>
          break;
 80222a6:	e01b      	b.n	80222e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80222a8:	683a      	ldr	r2, [r7, #0]
 80222aa:	687b      	ldr	r3, [r7, #4]
 80222ac:	0011      	movs	r1, r2
 80222ae:	0018      	movs	r0, r3
 80222b0:	f000 fd1b 	bl	8022cea <USBD_GetStatus>
          break;
 80222b4:	e014      	b.n	80222e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80222b6:	683a      	ldr	r2, [r7, #0]
 80222b8:	687b      	ldr	r3, [r7, #4]
 80222ba:	0011      	movs	r1, r2
 80222bc:	0018      	movs	r0, r3
 80222be:	f000 fd4e 	bl	8022d5e <USBD_SetFeature>
          break;
 80222c2:	e00d      	b.n	80222e0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80222c4:	683a      	ldr	r2, [r7, #0]
 80222c6:	687b      	ldr	r3, [r7, #4]
 80222c8:	0011      	movs	r1, r2
 80222ca:	0018      	movs	r0, r3
 80222cc:	f000 fd5d 	bl	8022d8a <USBD_ClrFeature>
          break;
 80222d0:	e006      	b.n	80222e0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80222d2:	683a      	ldr	r2, [r7, #0]
 80222d4:	687b      	ldr	r3, [r7, #4]
 80222d6:	0011      	movs	r1, r2
 80222d8:	0018      	movs	r0, r3
 80222da:	f000 fdb4 	bl	8022e46 <USBD_CtlError>
          break;
 80222de:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80222e0:	e006      	b.n	80222f0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80222e2:	683a      	ldr	r2, [r7, #0]
 80222e4:	687b      	ldr	r3, [r7, #4]
 80222e6:	0011      	movs	r1, r2
 80222e8:	0018      	movs	r0, r3
 80222ea:	f000 fdac 	bl	8022e46 <USBD_CtlError>
      break;
 80222ee:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80222f0:	230f      	movs	r3, #15
 80222f2:	18fb      	adds	r3, r7, r3
 80222f4:	781b      	ldrb	r3, [r3, #0]
}
 80222f6:	0018      	movs	r0, r3
 80222f8:	46bd      	mov	sp, r7
 80222fa:	b004      	add	sp, #16
 80222fc:	bd80      	pop	{r7, pc}
 80222fe:	46c0      	nop			@ (mov r8, r8)
 8022300:	0802ea60 	.word	0x0802ea60

08022304 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8022304:	b5b0      	push	{r4, r5, r7, lr}
 8022306:	b084      	sub	sp, #16
 8022308:	af00      	add	r7, sp, #0
 802230a:	6078      	str	r0, [r7, #4]
 802230c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802230e:	230f      	movs	r3, #15
 8022310:	18fb      	adds	r3, r7, r3
 8022312:	2200      	movs	r2, #0
 8022314:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8022316:	683b      	ldr	r3, [r7, #0]
 8022318:	781b      	ldrb	r3, [r3, #0]
 802231a:	001a      	movs	r2, r3
 802231c:	2360      	movs	r3, #96	@ 0x60
 802231e:	4013      	ands	r3, r2
 8022320:	2b40      	cmp	r3, #64	@ 0x40
 8022322:	d004      	beq.n	802232e <USBD_StdItfReq+0x2a>
 8022324:	d839      	bhi.n	802239a <USBD_StdItfReq+0x96>
 8022326:	2b00      	cmp	r3, #0
 8022328:	d001      	beq.n	802232e <USBD_StdItfReq+0x2a>
 802232a:	2b20      	cmp	r3, #32
 802232c:	d135      	bne.n	802239a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 802232e:	687a      	ldr	r2, [r7, #4]
 8022330:	23a7      	movs	r3, #167	@ 0xa7
 8022332:	009b      	lsls	r3, r3, #2
 8022334:	5cd3      	ldrb	r3, [r2, r3]
 8022336:	3b01      	subs	r3, #1
 8022338:	2b02      	cmp	r3, #2
 802233a:	d825      	bhi.n	8022388 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 802233c:	683b      	ldr	r3, [r7, #0]
 802233e:	889b      	ldrh	r3, [r3, #4]
 8022340:	b2db      	uxtb	r3, r3
 8022342:	2b01      	cmp	r3, #1
 8022344:	d819      	bhi.n	802237a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8022346:	687a      	ldr	r2, [r7, #4]
 8022348:	23ad      	movs	r3, #173	@ 0xad
 802234a:	009b      	lsls	r3, r3, #2
 802234c:	58d3      	ldr	r3, [r2, r3]
 802234e:	689b      	ldr	r3, [r3, #8]
 8022350:	250f      	movs	r5, #15
 8022352:	197c      	adds	r4, r7, r5
 8022354:	6839      	ldr	r1, [r7, #0]
 8022356:	687a      	ldr	r2, [r7, #4]
 8022358:	0010      	movs	r0, r2
 802235a:	4798      	blx	r3
 802235c:	0003      	movs	r3, r0
 802235e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8022360:	683b      	ldr	r3, [r7, #0]
 8022362:	88db      	ldrh	r3, [r3, #6]
 8022364:	2b00      	cmp	r3, #0
 8022366:	d116      	bne.n	8022396 <USBD_StdItfReq+0x92>
 8022368:	197b      	adds	r3, r7, r5
 802236a:	781b      	ldrb	r3, [r3, #0]
 802236c:	2b00      	cmp	r3, #0
 802236e:	d112      	bne.n	8022396 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8022370:	687b      	ldr	r3, [r7, #4]
 8022372:	0018      	movs	r0, r3
 8022374:	f000 fe4f 	bl	8023016 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8022378:	e00d      	b.n	8022396 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 802237a:	683a      	ldr	r2, [r7, #0]
 802237c:	687b      	ldr	r3, [r7, #4]
 802237e:	0011      	movs	r1, r2
 8022380:	0018      	movs	r0, r3
 8022382:	f000 fd60 	bl	8022e46 <USBD_CtlError>
          break;
 8022386:	e006      	b.n	8022396 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8022388:	683a      	ldr	r2, [r7, #0]
 802238a:	687b      	ldr	r3, [r7, #4]
 802238c:	0011      	movs	r1, r2
 802238e:	0018      	movs	r0, r3
 8022390:	f000 fd59 	bl	8022e46 <USBD_CtlError>
          break;
 8022394:	e000      	b.n	8022398 <USBD_StdItfReq+0x94>
          break;
 8022396:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8022398:	e006      	b.n	80223a8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 802239a:	683a      	ldr	r2, [r7, #0]
 802239c:	687b      	ldr	r3, [r7, #4]
 802239e:	0011      	movs	r1, r2
 80223a0:	0018      	movs	r0, r3
 80223a2:	f000 fd50 	bl	8022e46 <USBD_CtlError>
      break;
 80223a6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80223a8:	2300      	movs	r3, #0
}
 80223aa:	0018      	movs	r0, r3
 80223ac:	46bd      	mov	sp, r7
 80223ae:	b004      	add	sp, #16
 80223b0:	bdb0      	pop	{r4, r5, r7, pc}

080223b2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80223b2:	b5b0      	push	{r4, r5, r7, lr}
 80223b4:	b084      	sub	sp, #16
 80223b6:	af00      	add	r7, sp, #0
 80223b8:	6078      	str	r0, [r7, #4]
 80223ba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80223bc:	230f      	movs	r3, #15
 80223be:	18fb      	adds	r3, r7, r3
 80223c0:	2200      	movs	r2, #0
 80223c2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80223c4:	683b      	ldr	r3, [r7, #0]
 80223c6:	889a      	ldrh	r2, [r3, #4]
 80223c8:	230e      	movs	r3, #14
 80223ca:	18fb      	adds	r3, r7, r3
 80223cc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80223ce:	683b      	ldr	r3, [r7, #0]
 80223d0:	781b      	ldrb	r3, [r3, #0]
 80223d2:	001a      	movs	r2, r3
 80223d4:	2360      	movs	r3, #96	@ 0x60
 80223d6:	4013      	ands	r3, r2
 80223d8:	2b40      	cmp	r3, #64	@ 0x40
 80223da:	d006      	beq.n	80223ea <USBD_StdEPReq+0x38>
 80223dc:	d900      	bls.n	80223e0 <USBD_StdEPReq+0x2e>
 80223de:	e190      	b.n	8022702 <USBD_StdEPReq+0x350>
 80223e0:	2b00      	cmp	r3, #0
 80223e2:	d00c      	beq.n	80223fe <USBD_StdEPReq+0x4c>
 80223e4:	2b20      	cmp	r3, #32
 80223e6:	d000      	beq.n	80223ea <USBD_StdEPReq+0x38>
 80223e8:	e18b      	b.n	8022702 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80223ea:	687a      	ldr	r2, [r7, #4]
 80223ec:	23ad      	movs	r3, #173	@ 0xad
 80223ee:	009b      	lsls	r3, r3, #2
 80223f0:	58d3      	ldr	r3, [r2, r3]
 80223f2:	689b      	ldr	r3, [r3, #8]
 80223f4:	6839      	ldr	r1, [r7, #0]
 80223f6:	687a      	ldr	r2, [r7, #4]
 80223f8:	0010      	movs	r0, r2
 80223fa:	4798      	blx	r3
      break;
 80223fc:	e188      	b.n	8022710 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80223fe:	683b      	ldr	r3, [r7, #0]
 8022400:	781b      	ldrb	r3, [r3, #0]
 8022402:	001a      	movs	r2, r3
 8022404:	2360      	movs	r3, #96	@ 0x60
 8022406:	4013      	ands	r3, r2
 8022408:	2b20      	cmp	r3, #32
 802240a:	d10f      	bne.n	802242c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 802240c:	687a      	ldr	r2, [r7, #4]
 802240e:	23ad      	movs	r3, #173	@ 0xad
 8022410:	009b      	lsls	r3, r3, #2
 8022412:	58d3      	ldr	r3, [r2, r3]
 8022414:	689b      	ldr	r3, [r3, #8]
 8022416:	250f      	movs	r5, #15
 8022418:	197c      	adds	r4, r7, r5
 802241a:	6839      	ldr	r1, [r7, #0]
 802241c:	687a      	ldr	r2, [r7, #4]
 802241e:	0010      	movs	r0, r2
 8022420:	4798      	blx	r3
 8022422:	0003      	movs	r3, r0
 8022424:	7023      	strb	r3, [r4, #0]

        return ret;
 8022426:	197b      	adds	r3, r7, r5
 8022428:	781b      	ldrb	r3, [r3, #0]
 802242a:	e174      	b.n	8022716 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 802242c:	683b      	ldr	r3, [r7, #0]
 802242e:	785b      	ldrb	r3, [r3, #1]
 8022430:	2b03      	cmp	r3, #3
 8022432:	d007      	beq.n	8022444 <USBD_StdEPReq+0x92>
 8022434:	dd00      	ble.n	8022438 <USBD_StdEPReq+0x86>
 8022436:	e15c      	b.n	80226f2 <USBD_StdEPReq+0x340>
 8022438:	2b00      	cmp	r3, #0
 802243a:	d100      	bne.n	802243e <USBD_StdEPReq+0x8c>
 802243c:	e092      	b.n	8022564 <USBD_StdEPReq+0x1b2>
 802243e:	2b01      	cmp	r3, #1
 8022440:	d04b      	beq.n	80224da <USBD_StdEPReq+0x128>
 8022442:	e156      	b.n	80226f2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8022444:	687a      	ldr	r2, [r7, #4]
 8022446:	23a7      	movs	r3, #167	@ 0xa7
 8022448:	009b      	lsls	r3, r3, #2
 802244a:	5cd3      	ldrb	r3, [r2, r3]
 802244c:	2b02      	cmp	r3, #2
 802244e:	d002      	beq.n	8022456 <USBD_StdEPReq+0xa4>
 8022450:	2b03      	cmp	r3, #3
 8022452:	d01d      	beq.n	8022490 <USBD_StdEPReq+0xde>
 8022454:	e039      	b.n	80224ca <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8022456:	220e      	movs	r2, #14
 8022458:	18bb      	adds	r3, r7, r2
 802245a:	781b      	ldrb	r3, [r3, #0]
 802245c:	2b00      	cmp	r3, #0
 802245e:	d010      	beq.n	8022482 <USBD_StdEPReq+0xd0>
 8022460:	18bb      	adds	r3, r7, r2
 8022462:	781b      	ldrb	r3, [r3, #0]
 8022464:	2b80      	cmp	r3, #128	@ 0x80
 8022466:	d00c      	beq.n	8022482 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8022468:	18bb      	adds	r3, r7, r2
 802246a:	781a      	ldrb	r2, [r3, #0]
 802246c:	687b      	ldr	r3, [r7, #4]
 802246e:	0011      	movs	r1, r2
 8022470:	0018      	movs	r0, r3
 8022472:	f001 fa1c 	bl	80238ae <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8022476:	687b      	ldr	r3, [r7, #4]
 8022478:	2180      	movs	r1, #128	@ 0x80
 802247a:	0018      	movs	r0, r3
 802247c:	f001 fa17 	bl	80238ae <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8022480:	e02a      	b.n	80224d8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8022482:	683a      	ldr	r2, [r7, #0]
 8022484:	687b      	ldr	r3, [r7, #4]
 8022486:	0011      	movs	r1, r2
 8022488:	0018      	movs	r0, r3
 802248a:	f000 fcdc 	bl	8022e46 <USBD_CtlError>
              break;
 802248e:	e023      	b.n	80224d8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8022490:	683b      	ldr	r3, [r7, #0]
 8022492:	885b      	ldrh	r3, [r3, #2]
 8022494:	2b00      	cmp	r3, #0
 8022496:	d113      	bne.n	80224c0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8022498:	220e      	movs	r2, #14
 802249a:	18bb      	adds	r3, r7, r2
 802249c:	781b      	ldrb	r3, [r3, #0]
 802249e:	2b00      	cmp	r3, #0
 80224a0:	d00e      	beq.n	80224c0 <USBD_StdEPReq+0x10e>
 80224a2:	18bb      	adds	r3, r7, r2
 80224a4:	781b      	ldrb	r3, [r3, #0]
 80224a6:	2b80      	cmp	r3, #128	@ 0x80
 80224a8:	d00a      	beq.n	80224c0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80224aa:	683b      	ldr	r3, [r7, #0]
 80224ac:	88db      	ldrh	r3, [r3, #6]
 80224ae:	2b00      	cmp	r3, #0
 80224b0:	d106      	bne.n	80224c0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80224b2:	18bb      	adds	r3, r7, r2
 80224b4:	781a      	ldrb	r2, [r3, #0]
 80224b6:	687b      	ldr	r3, [r7, #4]
 80224b8:	0011      	movs	r1, r2
 80224ba:	0018      	movs	r0, r3
 80224bc:	f001 f9f7 	bl	80238ae <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80224c0:	687b      	ldr	r3, [r7, #4]
 80224c2:	0018      	movs	r0, r3
 80224c4:	f000 fda7 	bl	8023016 <USBD_CtlSendStatus>

              break;
 80224c8:	e006      	b.n	80224d8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80224ca:	683a      	ldr	r2, [r7, #0]
 80224cc:	687b      	ldr	r3, [r7, #4]
 80224ce:	0011      	movs	r1, r2
 80224d0:	0018      	movs	r0, r3
 80224d2:	f000 fcb8 	bl	8022e46 <USBD_CtlError>
              break;
 80224d6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80224d8:	e112      	b.n	8022700 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80224da:	687a      	ldr	r2, [r7, #4]
 80224dc:	23a7      	movs	r3, #167	@ 0xa7
 80224de:	009b      	lsls	r3, r3, #2
 80224e0:	5cd3      	ldrb	r3, [r2, r3]
 80224e2:	2b02      	cmp	r3, #2
 80224e4:	d002      	beq.n	80224ec <USBD_StdEPReq+0x13a>
 80224e6:	2b03      	cmp	r3, #3
 80224e8:	d01d      	beq.n	8022526 <USBD_StdEPReq+0x174>
 80224ea:	e032      	b.n	8022552 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80224ec:	220e      	movs	r2, #14
 80224ee:	18bb      	adds	r3, r7, r2
 80224f0:	781b      	ldrb	r3, [r3, #0]
 80224f2:	2b00      	cmp	r3, #0
 80224f4:	d010      	beq.n	8022518 <USBD_StdEPReq+0x166>
 80224f6:	18bb      	adds	r3, r7, r2
 80224f8:	781b      	ldrb	r3, [r3, #0]
 80224fa:	2b80      	cmp	r3, #128	@ 0x80
 80224fc:	d00c      	beq.n	8022518 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80224fe:	18bb      	adds	r3, r7, r2
 8022500:	781a      	ldrb	r2, [r3, #0]
 8022502:	687b      	ldr	r3, [r7, #4]
 8022504:	0011      	movs	r1, r2
 8022506:	0018      	movs	r0, r3
 8022508:	f001 f9d1 	bl	80238ae <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 802250c:	687b      	ldr	r3, [r7, #4]
 802250e:	2180      	movs	r1, #128	@ 0x80
 8022510:	0018      	movs	r0, r3
 8022512:	f001 f9cc 	bl	80238ae <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8022516:	e024      	b.n	8022562 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8022518:	683a      	ldr	r2, [r7, #0]
 802251a:	687b      	ldr	r3, [r7, #4]
 802251c:	0011      	movs	r1, r2
 802251e:	0018      	movs	r0, r3
 8022520:	f000 fc91 	bl	8022e46 <USBD_CtlError>
              break;
 8022524:	e01d      	b.n	8022562 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8022526:	683b      	ldr	r3, [r7, #0]
 8022528:	885b      	ldrh	r3, [r3, #2]
 802252a:	2b00      	cmp	r3, #0
 802252c:	d118      	bne.n	8022560 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 802252e:	210e      	movs	r1, #14
 8022530:	187b      	adds	r3, r7, r1
 8022532:	781b      	ldrb	r3, [r3, #0]
 8022534:	227f      	movs	r2, #127	@ 0x7f
 8022536:	4013      	ands	r3, r2
 8022538:	d006      	beq.n	8022548 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 802253a:	187b      	adds	r3, r7, r1
 802253c:	781a      	ldrb	r2, [r3, #0]
 802253e:	687b      	ldr	r3, [r7, #4]
 8022540:	0011      	movs	r1, r2
 8022542:	0018      	movs	r0, r3
 8022544:	f001 f9de 	bl	8023904 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8022548:	687b      	ldr	r3, [r7, #4]
 802254a:	0018      	movs	r0, r3
 802254c:	f000 fd63 	bl	8023016 <USBD_CtlSendStatus>
              }
              break;
 8022550:	e006      	b.n	8022560 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8022552:	683a      	ldr	r2, [r7, #0]
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	0011      	movs	r1, r2
 8022558:	0018      	movs	r0, r3
 802255a:	f000 fc74 	bl	8022e46 <USBD_CtlError>
              break;
 802255e:	e000      	b.n	8022562 <USBD_StdEPReq+0x1b0>
              break;
 8022560:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8022562:	e0cd      	b.n	8022700 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8022564:	687a      	ldr	r2, [r7, #4]
 8022566:	23a7      	movs	r3, #167	@ 0xa7
 8022568:	009b      	lsls	r3, r3, #2
 802256a:	5cd3      	ldrb	r3, [r2, r3]
 802256c:	2b02      	cmp	r3, #2
 802256e:	d002      	beq.n	8022576 <USBD_StdEPReq+0x1c4>
 8022570:	2b03      	cmp	r3, #3
 8022572:	d03c      	beq.n	80225ee <USBD_StdEPReq+0x23c>
 8022574:	e0b5      	b.n	80226e2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8022576:	220e      	movs	r2, #14
 8022578:	18bb      	adds	r3, r7, r2
 802257a:	781b      	ldrb	r3, [r3, #0]
 802257c:	2b00      	cmp	r3, #0
 802257e:	d00a      	beq.n	8022596 <USBD_StdEPReq+0x1e4>
 8022580:	18bb      	adds	r3, r7, r2
 8022582:	781b      	ldrb	r3, [r3, #0]
 8022584:	2b80      	cmp	r3, #128	@ 0x80
 8022586:	d006      	beq.n	8022596 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8022588:	683a      	ldr	r2, [r7, #0]
 802258a:	687b      	ldr	r3, [r7, #4]
 802258c:	0011      	movs	r1, r2
 802258e:	0018      	movs	r0, r3
 8022590:	f000 fc59 	bl	8022e46 <USBD_CtlError>
                break;
 8022594:	e0ac      	b.n	80226f0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022596:	220e      	movs	r2, #14
 8022598:	18bb      	adds	r3, r7, r2
 802259a:	781b      	ldrb	r3, [r3, #0]
 802259c:	b25b      	sxtb	r3, r3
 802259e:	2b00      	cmp	r3, #0
 80225a0:	da0c      	bge.n	80225bc <USBD_StdEPReq+0x20a>
 80225a2:	18bb      	adds	r3, r7, r2
 80225a4:	781b      	ldrb	r3, [r3, #0]
 80225a6:	227f      	movs	r2, #127	@ 0x7f
 80225a8:	401a      	ands	r2, r3
 80225aa:	0013      	movs	r3, r2
 80225ac:	009b      	lsls	r3, r3, #2
 80225ae:	189b      	adds	r3, r3, r2
 80225b0:	009b      	lsls	r3, r3, #2
 80225b2:	3310      	adds	r3, #16
 80225b4:	687a      	ldr	r2, [r7, #4]
 80225b6:	18d3      	adds	r3, r2, r3
 80225b8:	3304      	adds	r3, #4
 80225ba:	e00d      	b.n	80225d8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80225bc:	230e      	movs	r3, #14
 80225be:	18fb      	adds	r3, r7, r3
 80225c0:	781b      	ldrb	r3, [r3, #0]
 80225c2:	227f      	movs	r2, #127	@ 0x7f
 80225c4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80225c6:	0013      	movs	r3, r2
 80225c8:	009b      	lsls	r3, r3, #2
 80225ca:	189b      	adds	r3, r3, r2
 80225cc:	009b      	lsls	r3, r3, #2
 80225ce:	3351      	adds	r3, #81	@ 0x51
 80225d0:	33ff      	adds	r3, #255	@ 0xff
 80225d2:	687a      	ldr	r2, [r7, #4]
 80225d4:	18d3      	adds	r3, r2, r3
 80225d6:	3304      	adds	r3, #4
 80225d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80225da:	68bb      	ldr	r3, [r7, #8]
 80225dc:	2200      	movs	r2, #0
 80225de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80225e0:	68b9      	ldr	r1, [r7, #8]
 80225e2:	687b      	ldr	r3, [r7, #4]
 80225e4:	2202      	movs	r2, #2
 80225e6:	0018      	movs	r0, r3
 80225e8:	f000 fcab 	bl	8022f42 <USBD_CtlSendData>
              break;
 80225ec:	e080      	b.n	80226f0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80225ee:	220e      	movs	r2, #14
 80225f0:	18bb      	adds	r3, r7, r2
 80225f2:	781b      	ldrb	r3, [r3, #0]
 80225f4:	b25b      	sxtb	r3, r3
 80225f6:	2b00      	cmp	r3, #0
 80225f8:	da14      	bge.n	8022624 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80225fa:	18bb      	adds	r3, r7, r2
 80225fc:	781b      	ldrb	r3, [r3, #0]
 80225fe:	220f      	movs	r2, #15
 8022600:	401a      	ands	r2, r3
 8022602:	6879      	ldr	r1, [r7, #4]
 8022604:	0013      	movs	r3, r2
 8022606:	009b      	lsls	r3, r3, #2
 8022608:	189b      	adds	r3, r3, r2
 802260a:	009b      	lsls	r3, r3, #2
 802260c:	18cb      	adds	r3, r1, r3
 802260e:	3318      	adds	r3, #24
 8022610:	681b      	ldr	r3, [r3, #0]
 8022612:	2b00      	cmp	r3, #0
 8022614:	d11e      	bne.n	8022654 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8022616:	683a      	ldr	r2, [r7, #0]
 8022618:	687b      	ldr	r3, [r7, #4]
 802261a:	0011      	movs	r1, r2
 802261c:	0018      	movs	r0, r3
 802261e:	f000 fc12 	bl	8022e46 <USBD_CtlError>
                  break;
 8022622:	e065      	b.n	80226f0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8022624:	230e      	movs	r3, #14
 8022626:	18fb      	adds	r3, r7, r3
 8022628:	781b      	ldrb	r3, [r3, #0]
 802262a:	220f      	movs	r2, #15
 802262c:	401a      	ands	r2, r3
 802262e:	6878      	ldr	r0, [r7, #4]
 8022630:	23ac      	movs	r3, #172	@ 0xac
 8022632:	0059      	lsls	r1, r3, #1
 8022634:	0013      	movs	r3, r2
 8022636:	009b      	lsls	r3, r3, #2
 8022638:	189b      	adds	r3, r3, r2
 802263a:	009b      	lsls	r3, r3, #2
 802263c:	18c3      	adds	r3, r0, r3
 802263e:	185b      	adds	r3, r3, r1
 8022640:	681b      	ldr	r3, [r3, #0]
 8022642:	2b00      	cmp	r3, #0
 8022644:	d106      	bne.n	8022654 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8022646:	683a      	ldr	r2, [r7, #0]
 8022648:	687b      	ldr	r3, [r7, #4]
 802264a:	0011      	movs	r1, r2
 802264c:	0018      	movs	r0, r3
 802264e:	f000 fbfa 	bl	8022e46 <USBD_CtlError>
                  break;
 8022652:	e04d      	b.n	80226f0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022654:	220e      	movs	r2, #14
 8022656:	18bb      	adds	r3, r7, r2
 8022658:	781b      	ldrb	r3, [r3, #0]
 802265a:	b25b      	sxtb	r3, r3
 802265c:	2b00      	cmp	r3, #0
 802265e:	da0c      	bge.n	802267a <USBD_StdEPReq+0x2c8>
 8022660:	18bb      	adds	r3, r7, r2
 8022662:	781b      	ldrb	r3, [r3, #0]
 8022664:	227f      	movs	r2, #127	@ 0x7f
 8022666:	401a      	ands	r2, r3
 8022668:	0013      	movs	r3, r2
 802266a:	009b      	lsls	r3, r3, #2
 802266c:	189b      	adds	r3, r3, r2
 802266e:	009b      	lsls	r3, r3, #2
 8022670:	3310      	adds	r3, #16
 8022672:	687a      	ldr	r2, [r7, #4]
 8022674:	18d3      	adds	r3, r2, r3
 8022676:	3304      	adds	r3, #4
 8022678:	e00d      	b.n	8022696 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802267a:	230e      	movs	r3, #14
 802267c:	18fb      	adds	r3, r7, r3
 802267e:	781b      	ldrb	r3, [r3, #0]
 8022680:	227f      	movs	r2, #127	@ 0x7f
 8022682:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8022684:	0013      	movs	r3, r2
 8022686:	009b      	lsls	r3, r3, #2
 8022688:	189b      	adds	r3, r3, r2
 802268a:	009b      	lsls	r3, r3, #2
 802268c:	3351      	adds	r3, #81	@ 0x51
 802268e:	33ff      	adds	r3, #255	@ 0xff
 8022690:	687a      	ldr	r2, [r7, #4]
 8022692:	18d3      	adds	r3, r2, r3
 8022694:	3304      	adds	r3, #4
 8022696:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8022698:	220e      	movs	r2, #14
 802269a:	18bb      	adds	r3, r7, r2
 802269c:	781b      	ldrb	r3, [r3, #0]
 802269e:	2b00      	cmp	r3, #0
 80226a0:	d003      	beq.n	80226aa <USBD_StdEPReq+0x2f8>
 80226a2:	18bb      	adds	r3, r7, r2
 80226a4:	781b      	ldrb	r3, [r3, #0]
 80226a6:	2b80      	cmp	r3, #128	@ 0x80
 80226a8:	d103      	bne.n	80226b2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80226aa:	68bb      	ldr	r3, [r7, #8]
 80226ac:	2200      	movs	r2, #0
 80226ae:	601a      	str	r2, [r3, #0]
 80226b0:	e010      	b.n	80226d4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80226b2:	230e      	movs	r3, #14
 80226b4:	18fb      	adds	r3, r7, r3
 80226b6:	781a      	ldrb	r2, [r3, #0]
 80226b8:	687b      	ldr	r3, [r7, #4]
 80226ba:	0011      	movs	r1, r2
 80226bc:	0018      	movs	r0, r3
 80226be:	f001 f94c 	bl	802395a <USBD_LL_IsStallEP>
 80226c2:	1e03      	subs	r3, r0, #0
 80226c4:	d003      	beq.n	80226ce <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80226c6:	68bb      	ldr	r3, [r7, #8]
 80226c8:	2201      	movs	r2, #1
 80226ca:	601a      	str	r2, [r3, #0]
 80226cc:	e002      	b.n	80226d4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80226ce:	68bb      	ldr	r3, [r7, #8]
 80226d0:	2200      	movs	r2, #0
 80226d2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80226d4:	68b9      	ldr	r1, [r7, #8]
 80226d6:	687b      	ldr	r3, [r7, #4]
 80226d8:	2202      	movs	r2, #2
 80226da:	0018      	movs	r0, r3
 80226dc:	f000 fc31 	bl	8022f42 <USBD_CtlSendData>
              break;
 80226e0:	e006      	b.n	80226f0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80226e2:	683a      	ldr	r2, [r7, #0]
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	0011      	movs	r1, r2
 80226e8:	0018      	movs	r0, r3
 80226ea:	f000 fbac 	bl	8022e46 <USBD_CtlError>
              break;
 80226ee:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80226f0:	e006      	b.n	8022700 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80226f2:	683a      	ldr	r2, [r7, #0]
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	0011      	movs	r1, r2
 80226f8:	0018      	movs	r0, r3
 80226fa:	f000 fba4 	bl	8022e46 <USBD_CtlError>
          break;
 80226fe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8022700:	e006      	b.n	8022710 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8022702:	683a      	ldr	r2, [r7, #0]
 8022704:	687b      	ldr	r3, [r7, #4]
 8022706:	0011      	movs	r1, r2
 8022708:	0018      	movs	r0, r3
 802270a:	f000 fb9c 	bl	8022e46 <USBD_CtlError>
      break;
 802270e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8022710:	230f      	movs	r3, #15
 8022712:	18fb      	adds	r3, r7, r3
 8022714:	781b      	ldrb	r3, [r3, #0]
}
 8022716:	0018      	movs	r0, r3
 8022718:	46bd      	mov	sp, r7
 802271a:	b004      	add	sp, #16
 802271c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08022720 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8022720:	b580      	push	{r7, lr}
 8022722:	b084      	sub	sp, #16
 8022724:	af00      	add	r7, sp, #0
 8022726:	6078      	str	r0, [r7, #4]
 8022728:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802272a:	2308      	movs	r3, #8
 802272c:	18fb      	adds	r3, r7, r3
 802272e:	2200      	movs	r2, #0
 8022730:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8022732:	2300      	movs	r3, #0
 8022734:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8022736:	230b      	movs	r3, #11
 8022738:	18fb      	adds	r3, r7, r3
 802273a:	2200      	movs	r2, #0
 802273c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 802273e:	683b      	ldr	r3, [r7, #0]
 8022740:	885b      	ldrh	r3, [r3, #2]
 8022742:	0a1b      	lsrs	r3, r3, #8
 8022744:	b29b      	uxth	r3, r3
 8022746:	2b07      	cmp	r3, #7
 8022748:	d900      	bls.n	802274c <USBD_GetDescriptor+0x2c>
 802274a:	e159      	b.n	8022a00 <USBD_GetDescriptor+0x2e0>
 802274c:	009a      	lsls	r2, r3, #2
 802274e:	4bcb      	ldr	r3, [pc, #812]	@ (8022a7c <USBD_GetDescriptor+0x35c>)
 8022750:	18d3      	adds	r3, r2, r3
 8022752:	681b      	ldr	r3, [r3, #0]
 8022754:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8022756:	687a      	ldr	r2, [r7, #4]
 8022758:	23ac      	movs	r3, #172	@ 0xac
 802275a:	009b      	lsls	r3, r3, #2
 802275c:	58d3      	ldr	r3, [r2, r3]
 802275e:	681b      	ldr	r3, [r3, #0]
 8022760:	687a      	ldr	r2, [r7, #4]
 8022762:	7c12      	ldrb	r2, [r2, #16]
 8022764:	2108      	movs	r1, #8
 8022766:	1879      	adds	r1, r7, r1
 8022768:	0010      	movs	r0, r2
 802276a:	4798      	blx	r3
 802276c:	0003      	movs	r3, r0
 802276e:	60fb      	str	r3, [r7, #12]
      break;
 8022770:	e153      	b.n	8022a1a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8022772:	687b      	ldr	r3, [r7, #4]
 8022774:	7c1b      	ldrb	r3, [r3, #16]
 8022776:	2b00      	cmp	r3, #0
 8022778:	d10f      	bne.n	802279a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 802277a:	687a      	ldr	r2, [r7, #4]
 802277c:	23ad      	movs	r3, #173	@ 0xad
 802277e:	009b      	lsls	r3, r3, #2
 8022780:	58d3      	ldr	r3, [r2, r3]
 8022782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022784:	2208      	movs	r2, #8
 8022786:	18ba      	adds	r2, r7, r2
 8022788:	0010      	movs	r0, r2
 802278a:	4798      	blx	r3
 802278c:	0003      	movs	r3, r0
 802278e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8022790:	68fb      	ldr	r3, [r7, #12]
 8022792:	3301      	adds	r3, #1
 8022794:	2202      	movs	r2, #2
 8022796:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8022798:	e13f      	b.n	8022a1a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 802279a:	687a      	ldr	r2, [r7, #4]
 802279c:	23ad      	movs	r3, #173	@ 0xad
 802279e:	009b      	lsls	r3, r3, #2
 80227a0:	58d3      	ldr	r3, [r2, r3]
 80227a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80227a4:	2208      	movs	r2, #8
 80227a6:	18ba      	adds	r2, r7, r2
 80227a8:	0010      	movs	r0, r2
 80227aa:	4798      	blx	r3
 80227ac:	0003      	movs	r3, r0
 80227ae:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80227b0:	68fb      	ldr	r3, [r7, #12]
 80227b2:	3301      	adds	r3, #1
 80227b4:	2202      	movs	r2, #2
 80227b6:	701a      	strb	r2, [r3, #0]
      break;
 80227b8:	e12f      	b.n	8022a1a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80227ba:	683b      	ldr	r3, [r7, #0]
 80227bc:	885b      	ldrh	r3, [r3, #2]
 80227be:	b2db      	uxtb	r3, r3
 80227c0:	2b05      	cmp	r3, #5
 80227c2:	d900      	bls.n	80227c6 <USBD_GetDescriptor+0xa6>
 80227c4:	e0d0      	b.n	8022968 <USBD_GetDescriptor+0x248>
 80227c6:	009a      	lsls	r2, r3, #2
 80227c8:	4bad      	ldr	r3, [pc, #692]	@ (8022a80 <USBD_GetDescriptor+0x360>)
 80227ca:	18d3      	adds	r3, r2, r3
 80227cc:	681b      	ldr	r3, [r3, #0]
 80227ce:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80227d0:	687a      	ldr	r2, [r7, #4]
 80227d2:	23ac      	movs	r3, #172	@ 0xac
 80227d4:	009b      	lsls	r3, r3, #2
 80227d6:	58d3      	ldr	r3, [r2, r3]
 80227d8:	685b      	ldr	r3, [r3, #4]
 80227da:	2b00      	cmp	r3, #0
 80227dc:	d00d      	beq.n	80227fa <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80227de:	687a      	ldr	r2, [r7, #4]
 80227e0:	23ac      	movs	r3, #172	@ 0xac
 80227e2:	009b      	lsls	r3, r3, #2
 80227e4:	58d3      	ldr	r3, [r2, r3]
 80227e6:	685b      	ldr	r3, [r3, #4]
 80227e8:	687a      	ldr	r2, [r7, #4]
 80227ea:	7c12      	ldrb	r2, [r2, #16]
 80227ec:	2108      	movs	r1, #8
 80227ee:	1879      	adds	r1, r7, r1
 80227f0:	0010      	movs	r0, r2
 80227f2:	4798      	blx	r3
 80227f4:	0003      	movs	r3, r0
 80227f6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80227f8:	e0c3      	b.n	8022982 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80227fa:	683a      	ldr	r2, [r7, #0]
 80227fc:	687b      	ldr	r3, [r7, #4]
 80227fe:	0011      	movs	r1, r2
 8022800:	0018      	movs	r0, r3
 8022802:	f000 fb20 	bl	8022e46 <USBD_CtlError>
            err++;
 8022806:	210b      	movs	r1, #11
 8022808:	187b      	adds	r3, r7, r1
 802280a:	781a      	ldrb	r2, [r3, #0]
 802280c:	187b      	adds	r3, r7, r1
 802280e:	3201      	adds	r2, #1
 8022810:	701a      	strb	r2, [r3, #0]
          break;
 8022812:	e0b6      	b.n	8022982 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8022814:	687a      	ldr	r2, [r7, #4]
 8022816:	23ac      	movs	r3, #172	@ 0xac
 8022818:	009b      	lsls	r3, r3, #2
 802281a:	58d3      	ldr	r3, [r2, r3]
 802281c:	689b      	ldr	r3, [r3, #8]
 802281e:	2b00      	cmp	r3, #0
 8022820:	d00d      	beq.n	802283e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8022822:	687a      	ldr	r2, [r7, #4]
 8022824:	23ac      	movs	r3, #172	@ 0xac
 8022826:	009b      	lsls	r3, r3, #2
 8022828:	58d3      	ldr	r3, [r2, r3]
 802282a:	689b      	ldr	r3, [r3, #8]
 802282c:	687a      	ldr	r2, [r7, #4]
 802282e:	7c12      	ldrb	r2, [r2, #16]
 8022830:	2108      	movs	r1, #8
 8022832:	1879      	adds	r1, r7, r1
 8022834:	0010      	movs	r0, r2
 8022836:	4798      	blx	r3
 8022838:	0003      	movs	r3, r0
 802283a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802283c:	e0a1      	b.n	8022982 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802283e:	683a      	ldr	r2, [r7, #0]
 8022840:	687b      	ldr	r3, [r7, #4]
 8022842:	0011      	movs	r1, r2
 8022844:	0018      	movs	r0, r3
 8022846:	f000 fafe 	bl	8022e46 <USBD_CtlError>
            err++;
 802284a:	210b      	movs	r1, #11
 802284c:	187b      	adds	r3, r7, r1
 802284e:	781a      	ldrb	r2, [r3, #0]
 8022850:	187b      	adds	r3, r7, r1
 8022852:	3201      	adds	r2, #1
 8022854:	701a      	strb	r2, [r3, #0]
          break;
 8022856:	e094      	b.n	8022982 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8022858:	687a      	ldr	r2, [r7, #4]
 802285a:	23ac      	movs	r3, #172	@ 0xac
 802285c:	009b      	lsls	r3, r3, #2
 802285e:	58d3      	ldr	r3, [r2, r3]
 8022860:	68db      	ldr	r3, [r3, #12]
 8022862:	2b00      	cmp	r3, #0
 8022864:	d00d      	beq.n	8022882 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8022866:	687a      	ldr	r2, [r7, #4]
 8022868:	23ac      	movs	r3, #172	@ 0xac
 802286a:	009b      	lsls	r3, r3, #2
 802286c:	58d3      	ldr	r3, [r2, r3]
 802286e:	68db      	ldr	r3, [r3, #12]
 8022870:	687a      	ldr	r2, [r7, #4]
 8022872:	7c12      	ldrb	r2, [r2, #16]
 8022874:	2108      	movs	r1, #8
 8022876:	1879      	adds	r1, r7, r1
 8022878:	0010      	movs	r0, r2
 802287a:	4798      	blx	r3
 802287c:	0003      	movs	r3, r0
 802287e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022880:	e07f      	b.n	8022982 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8022882:	683a      	ldr	r2, [r7, #0]
 8022884:	687b      	ldr	r3, [r7, #4]
 8022886:	0011      	movs	r1, r2
 8022888:	0018      	movs	r0, r3
 802288a:	f000 fadc 	bl	8022e46 <USBD_CtlError>
            err++;
 802288e:	210b      	movs	r1, #11
 8022890:	187b      	adds	r3, r7, r1
 8022892:	781a      	ldrb	r2, [r3, #0]
 8022894:	187b      	adds	r3, r7, r1
 8022896:	3201      	adds	r2, #1
 8022898:	701a      	strb	r2, [r3, #0]
          break;
 802289a:	e072      	b.n	8022982 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 802289c:	687a      	ldr	r2, [r7, #4]
 802289e:	23ac      	movs	r3, #172	@ 0xac
 80228a0:	009b      	lsls	r3, r3, #2
 80228a2:	58d3      	ldr	r3, [r2, r3]
 80228a4:	691b      	ldr	r3, [r3, #16]
 80228a6:	2b00      	cmp	r3, #0
 80228a8:	d00d      	beq.n	80228c6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80228aa:	687a      	ldr	r2, [r7, #4]
 80228ac:	23ac      	movs	r3, #172	@ 0xac
 80228ae:	009b      	lsls	r3, r3, #2
 80228b0:	58d3      	ldr	r3, [r2, r3]
 80228b2:	691b      	ldr	r3, [r3, #16]
 80228b4:	687a      	ldr	r2, [r7, #4]
 80228b6:	7c12      	ldrb	r2, [r2, #16]
 80228b8:	2108      	movs	r1, #8
 80228ba:	1879      	adds	r1, r7, r1
 80228bc:	0010      	movs	r0, r2
 80228be:	4798      	blx	r3
 80228c0:	0003      	movs	r3, r0
 80228c2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80228c4:	e05d      	b.n	8022982 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80228c6:	683a      	ldr	r2, [r7, #0]
 80228c8:	687b      	ldr	r3, [r7, #4]
 80228ca:	0011      	movs	r1, r2
 80228cc:	0018      	movs	r0, r3
 80228ce:	f000 faba 	bl	8022e46 <USBD_CtlError>
            err++;
 80228d2:	210b      	movs	r1, #11
 80228d4:	187b      	adds	r3, r7, r1
 80228d6:	781a      	ldrb	r2, [r3, #0]
 80228d8:	187b      	adds	r3, r7, r1
 80228da:	3201      	adds	r2, #1
 80228dc:	701a      	strb	r2, [r3, #0]
          break;
 80228de:	e050      	b.n	8022982 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80228e0:	687a      	ldr	r2, [r7, #4]
 80228e2:	23ac      	movs	r3, #172	@ 0xac
 80228e4:	009b      	lsls	r3, r3, #2
 80228e6:	58d3      	ldr	r3, [r2, r3]
 80228e8:	695b      	ldr	r3, [r3, #20]
 80228ea:	2b00      	cmp	r3, #0
 80228ec:	d00d      	beq.n	802290a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80228ee:	687a      	ldr	r2, [r7, #4]
 80228f0:	23ac      	movs	r3, #172	@ 0xac
 80228f2:	009b      	lsls	r3, r3, #2
 80228f4:	58d3      	ldr	r3, [r2, r3]
 80228f6:	695b      	ldr	r3, [r3, #20]
 80228f8:	687a      	ldr	r2, [r7, #4]
 80228fa:	7c12      	ldrb	r2, [r2, #16]
 80228fc:	2108      	movs	r1, #8
 80228fe:	1879      	adds	r1, r7, r1
 8022900:	0010      	movs	r0, r2
 8022902:	4798      	blx	r3
 8022904:	0003      	movs	r3, r0
 8022906:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8022908:	e03b      	b.n	8022982 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802290a:	683a      	ldr	r2, [r7, #0]
 802290c:	687b      	ldr	r3, [r7, #4]
 802290e:	0011      	movs	r1, r2
 8022910:	0018      	movs	r0, r3
 8022912:	f000 fa98 	bl	8022e46 <USBD_CtlError>
            err++;
 8022916:	210b      	movs	r1, #11
 8022918:	187b      	adds	r3, r7, r1
 802291a:	781a      	ldrb	r2, [r3, #0]
 802291c:	187b      	adds	r3, r7, r1
 802291e:	3201      	adds	r2, #1
 8022920:	701a      	strb	r2, [r3, #0]
          break;
 8022922:	e02e      	b.n	8022982 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8022924:	687a      	ldr	r2, [r7, #4]
 8022926:	23ac      	movs	r3, #172	@ 0xac
 8022928:	009b      	lsls	r3, r3, #2
 802292a:	58d3      	ldr	r3, [r2, r3]
 802292c:	699b      	ldr	r3, [r3, #24]
 802292e:	2b00      	cmp	r3, #0
 8022930:	d00d      	beq.n	802294e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8022932:	687a      	ldr	r2, [r7, #4]
 8022934:	23ac      	movs	r3, #172	@ 0xac
 8022936:	009b      	lsls	r3, r3, #2
 8022938:	58d3      	ldr	r3, [r2, r3]
 802293a:	699b      	ldr	r3, [r3, #24]
 802293c:	687a      	ldr	r2, [r7, #4]
 802293e:	7c12      	ldrb	r2, [r2, #16]
 8022940:	2108      	movs	r1, #8
 8022942:	1879      	adds	r1, r7, r1
 8022944:	0010      	movs	r0, r2
 8022946:	4798      	blx	r3
 8022948:	0003      	movs	r3, r0
 802294a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802294c:	e019      	b.n	8022982 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 802294e:	683a      	ldr	r2, [r7, #0]
 8022950:	687b      	ldr	r3, [r7, #4]
 8022952:	0011      	movs	r1, r2
 8022954:	0018      	movs	r0, r3
 8022956:	f000 fa76 	bl	8022e46 <USBD_CtlError>
            err++;
 802295a:	210b      	movs	r1, #11
 802295c:	187b      	adds	r3, r7, r1
 802295e:	781a      	ldrb	r2, [r3, #0]
 8022960:	187b      	adds	r3, r7, r1
 8022962:	3201      	adds	r2, #1
 8022964:	701a      	strb	r2, [r3, #0]
          break;
 8022966:	e00c      	b.n	8022982 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8022968:	683a      	ldr	r2, [r7, #0]
 802296a:	687b      	ldr	r3, [r7, #4]
 802296c:	0011      	movs	r1, r2
 802296e:	0018      	movs	r0, r3
 8022970:	f000 fa69 	bl	8022e46 <USBD_CtlError>
          err++;
 8022974:	210b      	movs	r1, #11
 8022976:	187b      	adds	r3, r7, r1
 8022978:	781a      	ldrb	r2, [r3, #0]
 802297a:	187b      	adds	r3, r7, r1
 802297c:	3201      	adds	r2, #1
 802297e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8022980:	e04b      	b.n	8022a1a <USBD_GetDescriptor+0x2fa>
 8022982:	e04a      	b.n	8022a1a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8022984:	687b      	ldr	r3, [r7, #4]
 8022986:	7c1b      	ldrb	r3, [r3, #16]
 8022988:	2b00      	cmp	r3, #0
 802298a:	d10b      	bne.n	80229a4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 802298c:	687a      	ldr	r2, [r7, #4]
 802298e:	23ad      	movs	r3, #173	@ 0xad
 8022990:	009b      	lsls	r3, r3, #2
 8022992:	58d3      	ldr	r3, [r2, r3]
 8022994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022996:	2208      	movs	r2, #8
 8022998:	18ba      	adds	r2, r7, r2
 802299a:	0010      	movs	r0, r2
 802299c:	4798      	blx	r3
 802299e:	0003      	movs	r3, r0
 80229a0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80229a2:	e03a      	b.n	8022a1a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80229a4:	683a      	ldr	r2, [r7, #0]
 80229a6:	687b      	ldr	r3, [r7, #4]
 80229a8:	0011      	movs	r1, r2
 80229aa:	0018      	movs	r0, r3
 80229ac:	f000 fa4b 	bl	8022e46 <USBD_CtlError>
        err++;
 80229b0:	210b      	movs	r1, #11
 80229b2:	187b      	adds	r3, r7, r1
 80229b4:	781a      	ldrb	r2, [r3, #0]
 80229b6:	187b      	adds	r3, r7, r1
 80229b8:	3201      	adds	r2, #1
 80229ba:	701a      	strb	r2, [r3, #0]
      break;
 80229bc:	e02d      	b.n	8022a1a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80229be:	687b      	ldr	r3, [r7, #4]
 80229c0:	7c1b      	ldrb	r3, [r3, #16]
 80229c2:	2b00      	cmp	r3, #0
 80229c4:	d10f      	bne.n	80229e6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80229c6:	687a      	ldr	r2, [r7, #4]
 80229c8:	23ad      	movs	r3, #173	@ 0xad
 80229ca:	009b      	lsls	r3, r3, #2
 80229cc:	58d3      	ldr	r3, [r2, r3]
 80229ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80229d0:	2208      	movs	r2, #8
 80229d2:	18ba      	adds	r2, r7, r2
 80229d4:	0010      	movs	r0, r2
 80229d6:	4798      	blx	r3
 80229d8:	0003      	movs	r3, r0
 80229da:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80229dc:	68fb      	ldr	r3, [r7, #12]
 80229de:	3301      	adds	r3, #1
 80229e0:	2207      	movs	r2, #7
 80229e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80229e4:	e019      	b.n	8022a1a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80229e6:	683a      	ldr	r2, [r7, #0]
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	0011      	movs	r1, r2
 80229ec:	0018      	movs	r0, r3
 80229ee:	f000 fa2a 	bl	8022e46 <USBD_CtlError>
        err++;
 80229f2:	210b      	movs	r1, #11
 80229f4:	187b      	adds	r3, r7, r1
 80229f6:	781a      	ldrb	r2, [r3, #0]
 80229f8:	187b      	adds	r3, r7, r1
 80229fa:	3201      	adds	r2, #1
 80229fc:	701a      	strb	r2, [r3, #0]
      break;
 80229fe:	e00c      	b.n	8022a1a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8022a00:	683a      	ldr	r2, [r7, #0]
 8022a02:	687b      	ldr	r3, [r7, #4]
 8022a04:	0011      	movs	r1, r2
 8022a06:	0018      	movs	r0, r3
 8022a08:	f000 fa1d 	bl	8022e46 <USBD_CtlError>
      err++;
 8022a0c:	210b      	movs	r1, #11
 8022a0e:	187b      	adds	r3, r7, r1
 8022a10:	781a      	ldrb	r2, [r3, #0]
 8022a12:	187b      	adds	r3, r7, r1
 8022a14:	3201      	adds	r2, #1
 8022a16:	701a      	strb	r2, [r3, #0]
      break;
 8022a18:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8022a1a:	230b      	movs	r3, #11
 8022a1c:	18fb      	adds	r3, r7, r3
 8022a1e:	781b      	ldrb	r3, [r3, #0]
 8022a20:	2b00      	cmp	r3, #0
 8022a22:	d127      	bne.n	8022a74 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8022a24:	2108      	movs	r1, #8
 8022a26:	187b      	adds	r3, r7, r1
 8022a28:	881b      	ldrh	r3, [r3, #0]
 8022a2a:	2b00      	cmp	r3, #0
 8022a2c:	d019      	beq.n	8022a62 <USBD_GetDescriptor+0x342>
 8022a2e:	683b      	ldr	r3, [r7, #0]
 8022a30:	88db      	ldrh	r3, [r3, #6]
 8022a32:	2b00      	cmp	r3, #0
 8022a34:	d015      	beq.n	8022a62 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8022a36:	683b      	ldr	r3, [r7, #0]
 8022a38:	88da      	ldrh	r2, [r3, #6]
 8022a3a:	187b      	adds	r3, r7, r1
 8022a3c:	881b      	ldrh	r3, [r3, #0]
 8022a3e:	1c18      	adds	r0, r3, #0
 8022a40:	1c11      	adds	r1, r2, #0
 8022a42:	b28a      	uxth	r2, r1
 8022a44:	b283      	uxth	r3, r0
 8022a46:	429a      	cmp	r2, r3
 8022a48:	d900      	bls.n	8022a4c <USBD_GetDescriptor+0x32c>
 8022a4a:	1c01      	adds	r1, r0, #0
 8022a4c:	b28a      	uxth	r2, r1
 8022a4e:	2108      	movs	r1, #8
 8022a50:	187b      	adds	r3, r7, r1
 8022a52:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8022a54:	187b      	adds	r3, r7, r1
 8022a56:	881a      	ldrh	r2, [r3, #0]
 8022a58:	68f9      	ldr	r1, [r7, #12]
 8022a5a:	687b      	ldr	r3, [r7, #4]
 8022a5c:	0018      	movs	r0, r3
 8022a5e:	f000 fa70 	bl	8022f42 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8022a62:	683b      	ldr	r3, [r7, #0]
 8022a64:	88db      	ldrh	r3, [r3, #6]
 8022a66:	2b00      	cmp	r3, #0
 8022a68:	d105      	bne.n	8022a76 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8022a6a:	687b      	ldr	r3, [r7, #4]
 8022a6c:	0018      	movs	r0, r3
 8022a6e:	f000 fad2 	bl	8023016 <USBD_CtlSendStatus>
 8022a72:	e000      	b.n	8022a76 <USBD_GetDescriptor+0x356>
    return;
 8022a74:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022a76:	46bd      	mov	sp, r7
 8022a78:	b004      	add	sp, #16
 8022a7a:	bd80      	pop	{r7, pc}
 8022a7c:	0802ea88 	.word	0x0802ea88
 8022a80:	0802eaa8 	.word	0x0802eaa8

08022a84 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022a84:	b590      	push	{r4, r7, lr}
 8022a86:	b085      	sub	sp, #20
 8022a88:	af00      	add	r7, sp, #0
 8022a8a:	6078      	str	r0, [r7, #4]
 8022a8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8022a8e:	683b      	ldr	r3, [r7, #0]
 8022a90:	889b      	ldrh	r3, [r3, #4]
 8022a92:	2b00      	cmp	r3, #0
 8022a94:	d13d      	bne.n	8022b12 <USBD_SetAddress+0x8e>
 8022a96:	683b      	ldr	r3, [r7, #0]
 8022a98:	88db      	ldrh	r3, [r3, #6]
 8022a9a:	2b00      	cmp	r3, #0
 8022a9c:	d139      	bne.n	8022b12 <USBD_SetAddress+0x8e>
 8022a9e:	683b      	ldr	r3, [r7, #0]
 8022aa0:	885b      	ldrh	r3, [r3, #2]
 8022aa2:	2b7f      	cmp	r3, #127	@ 0x7f
 8022aa4:	d835      	bhi.n	8022b12 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8022aa6:	683b      	ldr	r3, [r7, #0]
 8022aa8:	885b      	ldrh	r3, [r3, #2]
 8022aaa:	b2da      	uxtb	r2, r3
 8022aac:	230f      	movs	r3, #15
 8022aae:	18fb      	adds	r3, r7, r3
 8022ab0:	217f      	movs	r1, #127	@ 0x7f
 8022ab2:	400a      	ands	r2, r1
 8022ab4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022ab6:	687a      	ldr	r2, [r7, #4]
 8022ab8:	23a7      	movs	r3, #167	@ 0xa7
 8022aba:	009b      	lsls	r3, r3, #2
 8022abc:	5cd3      	ldrb	r3, [r2, r3]
 8022abe:	2b03      	cmp	r3, #3
 8022ac0:	d106      	bne.n	8022ad0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8022ac2:	683a      	ldr	r2, [r7, #0]
 8022ac4:	687b      	ldr	r3, [r7, #4]
 8022ac6:	0011      	movs	r1, r2
 8022ac8:	0018      	movs	r0, r3
 8022aca:	f000 f9bc 	bl	8022e46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022ace:	e027      	b.n	8022b20 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8022ad0:	687b      	ldr	r3, [r7, #4]
 8022ad2:	240f      	movs	r4, #15
 8022ad4:	193a      	adds	r2, r7, r4
 8022ad6:	4914      	ldr	r1, [pc, #80]	@ (8022b28 <USBD_SetAddress+0xa4>)
 8022ad8:	7812      	ldrb	r2, [r2, #0]
 8022ada:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8022adc:	193b      	adds	r3, r7, r4
 8022ade:	781a      	ldrb	r2, [r3, #0]
 8022ae0:	687b      	ldr	r3, [r7, #4]
 8022ae2:	0011      	movs	r1, r2
 8022ae4:	0018      	movs	r0, r3
 8022ae6:	f000 ff69 	bl	80239bc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8022aea:	687b      	ldr	r3, [r7, #4]
 8022aec:	0018      	movs	r0, r3
 8022aee:	f000 fa92 	bl	8023016 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8022af2:	193b      	adds	r3, r7, r4
 8022af4:	781b      	ldrb	r3, [r3, #0]
 8022af6:	2b00      	cmp	r3, #0
 8022af8:	d005      	beq.n	8022b06 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8022afa:	687a      	ldr	r2, [r7, #4]
 8022afc:	23a7      	movs	r3, #167	@ 0xa7
 8022afe:	009b      	lsls	r3, r3, #2
 8022b00:	2102      	movs	r1, #2
 8022b02:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022b04:	e00c      	b.n	8022b20 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8022b06:	687a      	ldr	r2, [r7, #4]
 8022b08:	23a7      	movs	r3, #167	@ 0xa7
 8022b0a:	009b      	lsls	r3, r3, #2
 8022b0c:	2101      	movs	r1, #1
 8022b0e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8022b10:	e006      	b.n	8022b20 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8022b12:	683a      	ldr	r2, [r7, #0]
 8022b14:	687b      	ldr	r3, [r7, #4]
 8022b16:	0011      	movs	r1, r2
 8022b18:	0018      	movs	r0, r3
 8022b1a:	f000 f994 	bl	8022e46 <USBD_CtlError>
  }
}
 8022b1e:	46c0      	nop			@ (mov r8, r8)
 8022b20:	46c0      	nop			@ (mov r8, r8)
 8022b22:	46bd      	mov	sp, r7
 8022b24:	b005      	add	sp, #20
 8022b26:	bd90      	pop	{r4, r7, pc}
 8022b28:	0000029e 	.word	0x0000029e

08022b2c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022b2c:	b580      	push	{r7, lr}
 8022b2e:	b082      	sub	sp, #8
 8022b30:	af00      	add	r7, sp, #0
 8022b32:	6078      	str	r0, [r7, #4]
 8022b34:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8022b36:	683b      	ldr	r3, [r7, #0]
 8022b38:	885b      	ldrh	r3, [r3, #2]
 8022b3a:	b2da      	uxtb	r2, r3
 8022b3c:	4b4c      	ldr	r3, [pc, #304]	@ (8022c70 <USBD_SetConfig+0x144>)
 8022b3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8022b40:	4b4b      	ldr	r3, [pc, #300]	@ (8022c70 <USBD_SetConfig+0x144>)
 8022b42:	781b      	ldrb	r3, [r3, #0]
 8022b44:	2b01      	cmp	r3, #1
 8022b46:	d906      	bls.n	8022b56 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8022b48:	683a      	ldr	r2, [r7, #0]
 8022b4a:	687b      	ldr	r3, [r7, #4]
 8022b4c:	0011      	movs	r1, r2
 8022b4e:	0018      	movs	r0, r3
 8022b50:	f000 f979 	bl	8022e46 <USBD_CtlError>
 8022b54:	e088      	b.n	8022c68 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8022b56:	687a      	ldr	r2, [r7, #4]
 8022b58:	23a7      	movs	r3, #167	@ 0xa7
 8022b5a:	009b      	lsls	r3, r3, #2
 8022b5c:	5cd3      	ldrb	r3, [r2, r3]
 8022b5e:	2b02      	cmp	r3, #2
 8022b60:	d002      	beq.n	8022b68 <USBD_SetConfig+0x3c>
 8022b62:	2b03      	cmp	r3, #3
 8022b64:	d029      	beq.n	8022bba <USBD_SetConfig+0x8e>
 8022b66:	e071      	b.n	8022c4c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8022b68:	4b41      	ldr	r3, [pc, #260]	@ (8022c70 <USBD_SetConfig+0x144>)
 8022b6a:	781b      	ldrb	r3, [r3, #0]
 8022b6c:	2b00      	cmp	r3, #0
 8022b6e:	d01f      	beq.n	8022bb0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8022b70:	4b3f      	ldr	r3, [pc, #252]	@ (8022c70 <USBD_SetConfig+0x144>)
 8022b72:	781b      	ldrb	r3, [r3, #0]
 8022b74:	001a      	movs	r2, r3
 8022b76:	687b      	ldr	r3, [r7, #4]
 8022b78:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8022b7a:	687a      	ldr	r2, [r7, #4]
 8022b7c:	23a7      	movs	r3, #167	@ 0xa7
 8022b7e:	009b      	lsls	r3, r3, #2
 8022b80:	2103      	movs	r1, #3
 8022b82:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8022b84:	4b3a      	ldr	r3, [pc, #232]	@ (8022c70 <USBD_SetConfig+0x144>)
 8022b86:	781a      	ldrb	r2, [r3, #0]
 8022b88:	687b      	ldr	r3, [r7, #4]
 8022b8a:	0011      	movs	r1, r2
 8022b8c:	0018      	movs	r0, r3
 8022b8e:	f7ff f8c6 	bl	8021d1e <USBD_SetClassConfig>
 8022b92:	0003      	movs	r3, r0
 8022b94:	2b02      	cmp	r3, #2
 8022b96:	d106      	bne.n	8022ba6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8022b98:	683a      	ldr	r2, [r7, #0]
 8022b9a:	687b      	ldr	r3, [r7, #4]
 8022b9c:	0011      	movs	r1, r2
 8022b9e:	0018      	movs	r0, r3
 8022ba0:	f000 f951 	bl	8022e46 <USBD_CtlError>
            return;
 8022ba4:	e060      	b.n	8022c68 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8022ba6:	687b      	ldr	r3, [r7, #4]
 8022ba8:	0018      	movs	r0, r3
 8022baa:	f000 fa34 	bl	8023016 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8022bae:	e05b      	b.n	8022c68 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022bb0:	687b      	ldr	r3, [r7, #4]
 8022bb2:	0018      	movs	r0, r3
 8022bb4:	f000 fa2f 	bl	8023016 <USBD_CtlSendStatus>
        break;
 8022bb8:	e056      	b.n	8022c68 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8022bba:	4b2d      	ldr	r3, [pc, #180]	@ (8022c70 <USBD_SetConfig+0x144>)
 8022bbc:	781b      	ldrb	r3, [r3, #0]
 8022bbe:	2b00      	cmp	r3, #0
 8022bc0:	d115      	bne.n	8022bee <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8022bc2:	687a      	ldr	r2, [r7, #4]
 8022bc4:	23a7      	movs	r3, #167	@ 0xa7
 8022bc6:	009b      	lsls	r3, r3, #2
 8022bc8:	2102      	movs	r1, #2
 8022bca:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8022bcc:	4b28      	ldr	r3, [pc, #160]	@ (8022c70 <USBD_SetConfig+0x144>)
 8022bce:	781b      	ldrb	r3, [r3, #0]
 8022bd0:	001a      	movs	r2, r3
 8022bd2:	687b      	ldr	r3, [r7, #4]
 8022bd4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8022bd6:	4b26      	ldr	r3, [pc, #152]	@ (8022c70 <USBD_SetConfig+0x144>)
 8022bd8:	781a      	ldrb	r2, [r3, #0]
 8022bda:	687b      	ldr	r3, [r7, #4]
 8022bdc:	0011      	movs	r1, r2
 8022bde:	0018      	movs	r0, r3
 8022be0:	f7ff f8c4 	bl	8021d6c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8022be4:	687b      	ldr	r3, [r7, #4]
 8022be6:	0018      	movs	r0, r3
 8022be8:	f000 fa15 	bl	8023016 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8022bec:	e03c      	b.n	8022c68 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8022bee:	4b20      	ldr	r3, [pc, #128]	@ (8022c70 <USBD_SetConfig+0x144>)
 8022bf0:	781b      	ldrb	r3, [r3, #0]
 8022bf2:	001a      	movs	r2, r3
 8022bf4:	687b      	ldr	r3, [r7, #4]
 8022bf6:	685b      	ldr	r3, [r3, #4]
 8022bf8:	429a      	cmp	r2, r3
 8022bfa:	d022      	beq.n	8022c42 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8022bfc:	687b      	ldr	r3, [r7, #4]
 8022bfe:	685b      	ldr	r3, [r3, #4]
 8022c00:	b2da      	uxtb	r2, r3
 8022c02:	687b      	ldr	r3, [r7, #4]
 8022c04:	0011      	movs	r1, r2
 8022c06:	0018      	movs	r0, r3
 8022c08:	f7ff f8b0 	bl	8021d6c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8022c0c:	4b18      	ldr	r3, [pc, #96]	@ (8022c70 <USBD_SetConfig+0x144>)
 8022c0e:	781b      	ldrb	r3, [r3, #0]
 8022c10:	001a      	movs	r2, r3
 8022c12:	687b      	ldr	r3, [r7, #4]
 8022c14:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8022c16:	4b16      	ldr	r3, [pc, #88]	@ (8022c70 <USBD_SetConfig+0x144>)
 8022c18:	781a      	ldrb	r2, [r3, #0]
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	0011      	movs	r1, r2
 8022c1e:	0018      	movs	r0, r3
 8022c20:	f7ff f87d 	bl	8021d1e <USBD_SetClassConfig>
 8022c24:	0003      	movs	r3, r0
 8022c26:	2b02      	cmp	r3, #2
 8022c28:	d106      	bne.n	8022c38 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8022c2a:	683a      	ldr	r2, [r7, #0]
 8022c2c:	687b      	ldr	r3, [r7, #4]
 8022c2e:	0011      	movs	r1, r2
 8022c30:	0018      	movs	r0, r3
 8022c32:	f000 f908 	bl	8022e46 <USBD_CtlError>
            return;
 8022c36:	e017      	b.n	8022c68 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022c38:	687b      	ldr	r3, [r7, #4]
 8022c3a:	0018      	movs	r0, r3
 8022c3c:	f000 f9eb 	bl	8023016 <USBD_CtlSendStatus>
        break;
 8022c40:	e012      	b.n	8022c68 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8022c42:	687b      	ldr	r3, [r7, #4]
 8022c44:	0018      	movs	r0, r3
 8022c46:	f000 f9e6 	bl	8023016 <USBD_CtlSendStatus>
        break;
 8022c4a:	e00d      	b.n	8022c68 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8022c4c:	683a      	ldr	r2, [r7, #0]
 8022c4e:	687b      	ldr	r3, [r7, #4]
 8022c50:	0011      	movs	r1, r2
 8022c52:	0018      	movs	r0, r3
 8022c54:	f000 f8f7 	bl	8022e46 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8022c58:	4b05      	ldr	r3, [pc, #20]	@ (8022c70 <USBD_SetConfig+0x144>)
 8022c5a:	781a      	ldrb	r2, [r3, #0]
 8022c5c:	687b      	ldr	r3, [r7, #4]
 8022c5e:	0011      	movs	r1, r2
 8022c60:	0018      	movs	r0, r3
 8022c62:	f7ff f883 	bl	8021d6c <USBD_ClrClassConfig>
        break;
 8022c66:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8022c68:	46bd      	mov	sp, r7
 8022c6a:	b002      	add	sp, #8
 8022c6c:	bd80      	pop	{r7, pc}
 8022c6e:	46c0      	nop			@ (mov r8, r8)
 8022c70:	200024e4 	.word	0x200024e4

08022c74 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022c74:	b580      	push	{r7, lr}
 8022c76:	b082      	sub	sp, #8
 8022c78:	af00      	add	r7, sp, #0
 8022c7a:	6078      	str	r0, [r7, #4]
 8022c7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8022c7e:	683b      	ldr	r3, [r7, #0]
 8022c80:	88db      	ldrh	r3, [r3, #6]
 8022c82:	2b01      	cmp	r3, #1
 8022c84:	d006      	beq.n	8022c94 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8022c86:	683a      	ldr	r2, [r7, #0]
 8022c88:	687b      	ldr	r3, [r7, #4]
 8022c8a:	0011      	movs	r1, r2
 8022c8c:	0018      	movs	r0, r3
 8022c8e:	f000 f8da 	bl	8022e46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8022c92:	e026      	b.n	8022ce2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8022c94:	687a      	ldr	r2, [r7, #4]
 8022c96:	23a7      	movs	r3, #167	@ 0xa7
 8022c98:	009b      	lsls	r3, r3, #2
 8022c9a:	5cd3      	ldrb	r3, [r2, r3]
 8022c9c:	2b02      	cmp	r3, #2
 8022c9e:	dc02      	bgt.n	8022ca6 <USBD_GetConfig+0x32>
 8022ca0:	2b00      	cmp	r3, #0
 8022ca2:	dc03      	bgt.n	8022cac <USBD_GetConfig+0x38>
 8022ca4:	e016      	b.n	8022cd4 <USBD_GetConfig+0x60>
 8022ca6:	2b03      	cmp	r3, #3
 8022ca8:	d00c      	beq.n	8022cc4 <USBD_GetConfig+0x50>
 8022caa:	e013      	b.n	8022cd4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8022cac:	687b      	ldr	r3, [r7, #4]
 8022cae:	2200      	movs	r2, #0
 8022cb0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8022cb2:	687b      	ldr	r3, [r7, #4]
 8022cb4:	3308      	adds	r3, #8
 8022cb6:	0019      	movs	r1, r3
 8022cb8:	687b      	ldr	r3, [r7, #4]
 8022cba:	2201      	movs	r2, #1
 8022cbc:	0018      	movs	r0, r3
 8022cbe:	f000 f940 	bl	8022f42 <USBD_CtlSendData>
        break;
 8022cc2:	e00e      	b.n	8022ce2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8022cc4:	687b      	ldr	r3, [r7, #4]
 8022cc6:	1d19      	adds	r1, r3, #4
 8022cc8:	687b      	ldr	r3, [r7, #4]
 8022cca:	2201      	movs	r2, #1
 8022ccc:	0018      	movs	r0, r3
 8022cce:	f000 f938 	bl	8022f42 <USBD_CtlSendData>
        break;
 8022cd2:	e006      	b.n	8022ce2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8022cd4:	683a      	ldr	r2, [r7, #0]
 8022cd6:	687b      	ldr	r3, [r7, #4]
 8022cd8:	0011      	movs	r1, r2
 8022cda:	0018      	movs	r0, r3
 8022cdc:	f000 f8b3 	bl	8022e46 <USBD_CtlError>
        break;
 8022ce0:	46c0      	nop			@ (mov r8, r8)
}
 8022ce2:	46c0      	nop			@ (mov r8, r8)
 8022ce4:	46bd      	mov	sp, r7
 8022ce6:	b002      	add	sp, #8
 8022ce8:	bd80      	pop	{r7, pc}

08022cea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8022cea:	b580      	push	{r7, lr}
 8022cec:	b082      	sub	sp, #8
 8022cee:	af00      	add	r7, sp, #0
 8022cf0:	6078      	str	r0, [r7, #4]
 8022cf2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022cf4:	687a      	ldr	r2, [r7, #4]
 8022cf6:	23a7      	movs	r3, #167	@ 0xa7
 8022cf8:	009b      	lsls	r3, r3, #2
 8022cfa:	5cd3      	ldrb	r3, [r2, r3]
 8022cfc:	3b01      	subs	r3, #1
 8022cfe:	2b02      	cmp	r3, #2
 8022d00:	d822      	bhi.n	8022d48 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8022d02:	683b      	ldr	r3, [r7, #0]
 8022d04:	88db      	ldrh	r3, [r3, #6]
 8022d06:	2b02      	cmp	r3, #2
 8022d08:	d006      	beq.n	8022d18 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8022d0a:	683a      	ldr	r2, [r7, #0]
 8022d0c:	687b      	ldr	r3, [r7, #4]
 8022d0e:	0011      	movs	r1, r2
 8022d10:	0018      	movs	r0, r3
 8022d12:	f000 f898 	bl	8022e46 <USBD_CtlError>
        break;
 8022d16:	e01e      	b.n	8022d56 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8022d18:	687b      	ldr	r3, [r7, #4]
 8022d1a:	2201      	movs	r2, #1
 8022d1c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8022d1e:	687a      	ldr	r2, [r7, #4]
 8022d20:	23a9      	movs	r3, #169	@ 0xa9
 8022d22:	009b      	lsls	r3, r3, #2
 8022d24:	58d3      	ldr	r3, [r2, r3]
 8022d26:	2b00      	cmp	r3, #0
 8022d28:	d005      	beq.n	8022d36 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8022d2a:	687b      	ldr	r3, [r7, #4]
 8022d2c:	68db      	ldr	r3, [r3, #12]
 8022d2e:	2202      	movs	r2, #2
 8022d30:	431a      	orrs	r2, r3
 8022d32:	687b      	ldr	r3, [r7, #4]
 8022d34:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8022d36:	687b      	ldr	r3, [r7, #4]
 8022d38:	330c      	adds	r3, #12
 8022d3a:	0019      	movs	r1, r3
 8022d3c:	687b      	ldr	r3, [r7, #4]
 8022d3e:	2202      	movs	r2, #2
 8022d40:	0018      	movs	r0, r3
 8022d42:	f000 f8fe 	bl	8022f42 <USBD_CtlSendData>
      break;
 8022d46:	e006      	b.n	8022d56 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8022d48:	683a      	ldr	r2, [r7, #0]
 8022d4a:	687b      	ldr	r3, [r7, #4]
 8022d4c:	0011      	movs	r1, r2
 8022d4e:	0018      	movs	r0, r3
 8022d50:	f000 f879 	bl	8022e46 <USBD_CtlError>
      break;
 8022d54:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022d56:	46c0      	nop			@ (mov r8, r8)
 8022d58:	46bd      	mov	sp, r7
 8022d5a:	b002      	add	sp, #8
 8022d5c:	bd80      	pop	{r7, pc}

08022d5e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022d5e:	b580      	push	{r7, lr}
 8022d60:	b082      	sub	sp, #8
 8022d62:	af00      	add	r7, sp, #0
 8022d64:	6078      	str	r0, [r7, #4]
 8022d66:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022d68:	683b      	ldr	r3, [r7, #0]
 8022d6a:	885b      	ldrh	r3, [r3, #2]
 8022d6c:	2b01      	cmp	r3, #1
 8022d6e:	d108      	bne.n	8022d82 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8022d70:	687a      	ldr	r2, [r7, #4]
 8022d72:	23a9      	movs	r3, #169	@ 0xa9
 8022d74:	009b      	lsls	r3, r3, #2
 8022d76:	2101      	movs	r1, #1
 8022d78:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8022d7a:	687b      	ldr	r3, [r7, #4]
 8022d7c:	0018      	movs	r0, r3
 8022d7e:	f000 f94a 	bl	8023016 <USBD_CtlSendStatus>
  }
}
 8022d82:	46c0      	nop			@ (mov r8, r8)
 8022d84:	46bd      	mov	sp, r7
 8022d86:	b002      	add	sp, #8
 8022d88:	bd80      	pop	{r7, pc}

08022d8a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8022d8a:	b580      	push	{r7, lr}
 8022d8c:	b082      	sub	sp, #8
 8022d8e:	af00      	add	r7, sp, #0
 8022d90:	6078      	str	r0, [r7, #4]
 8022d92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8022d94:	687a      	ldr	r2, [r7, #4]
 8022d96:	23a7      	movs	r3, #167	@ 0xa7
 8022d98:	009b      	lsls	r3, r3, #2
 8022d9a:	5cd3      	ldrb	r3, [r2, r3]
 8022d9c:	3b01      	subs	r3, #1
 8022d9e:	2b02      	cmp	r3, #2
 8022da0:	d80d      	bhi.n	8022dbe <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8022da2:	683b      	ldr	r3, [r7, #0]
 8022da4:	885b      	ldrh	r3, [r3, #2]
 8022da6:	2b01      	cmp	r3, #1
 8022da8:	d110      	bne.n	8022dcc <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8022daa:	687a      	ldr	r2, [r7, #4]
 8022dac:	23a9      	movs	r3, #169	@ 0xa9
 8022dae:	009b      	lsls	r3, r3, #2
 8022db0:	2100      	movs	r1, #0
 8022db2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8022db4:	687b      	ldr	r3, [r7, #4]
 8022db6:	0018      	movs	r0, r3
 8022db8:	f000 f92d 	bl	8023016 <USBD_CtlSendStatus>
      }
      break;
 8022dbc:	e006      	b.n	8022dcc <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8022dbe:	683a      	ldr	r2, [r7, #0]
 8022dc0:	687b      	ldr	r3, [r7, #4]
 8022dc2:	0011      	movs	r1, r2
 8022dc4:	0018      	movs	r0, r3
 8022dc6:	f000 f83e 	bl	8022e46 <USBD_CtlError>
      break;
 8022dca:	e000      	b.n	8022dce <USBD_ClrFeature+0x44>
      break;
 8022dcc:	46c0      	nop			@ (mov r8, r8)
  }
}
 8022dce:	46c0      	nop			@ (mov r8, r8)
 8022dd0:	46bd      	mov	sp, r7
 8022dd2:	b002      	add	sp, #8
 8022dd4:	bd80      	pop	{r7, pc}

08022dd6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8022dd6:	b580      	push	{r7, lr}
 8022dd8:	b082      	sub	sp, #8
 8022dda:	af00      	add	r7, sp, #0
 8022ddc:	6078      	str	r0, [r7, #4]
 8022dde:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8022de0:	683b      	ldr	r3, [r7, #0]
 8022de2:	781a      	ldrb	r2, [r3, #0]
 8022de4:	687b      	ldr	r3, [r7, #4]
 8022de6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8022de8:	683b      	ldr	r3, [r7, #0]
 8022dea:	785a      	ldrb	r2, [r3, #1]
 8022dec:	687b      	ldr	r3, [r7, #4]
 8022dee:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8022df0:	683b      	ldr	r3, [r7, #0]
 8022df2:	3302      	adds	r3, #2
 8022df4:	781b      	ldrb	r3, [r3, #0]
 8022df6:	001a      	movs	r2, r3
 8022df8:	683b      	ldr	r3, [r7, #0]
 8022dfa:	3303      	adds	r3, #3
 8022dfc:	781b      	ldrb	r3, [r3, #0]
 8022dfe:	021b      	lsls	r3, r3, #8
 8022e00:	b29b      	uxth	r3, r3
 8022e02:	18d3      	adds	r3, r2, r3
 8022e04:	b29a      	uxth	r2, r3
 8022e06:	687b      	ldr	r3, [r7, #4]
 8022e08:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8022e0a:	683b      	ldr	r3, [r7, #0]
 8022e0c:	3304      	adds	r3, #4
 8022e0e:	781b      	ldrb	r3, [r3, #0]
 8022e10:	001a      	movs	r2, r3
 8022e12:	683b      	ldr	r3, [r7, #0]
 8022e14:	3305      	adds	r3, #5
 8022e16:	781b      	ldrb	r3, [r3, #0]
 8022e18:	021b      	lsls	r3, r3, #8
 8022e1a:	b29b      	uxth	r3, r3
 8022e1c:	18d3      	adds	r3, r2, r3
 8022e1e:	b29a      	uxth	r2, r3
 8022e20:	687b      	ldr	r3, [r7, #4]
 8022e22:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8022e24:	683b      	ldr	r3, [r7, #0]
 8022e26:	3306      	adds	r3, #6
 8022e28:	781b      	ldrb	r3, [r3, #0]
 8022e2a:	001a      	movs	r2, r3
 8022e2c:	683b      	ldr	r3, [r7, #0]
 8022e2e:	3307      	adds	r3, #7
 8022e30:	781b      	ldrb	r3, [r3, #0]
 8022e32:	021b      	lsls	r3, r3, #8
 8022e34:	b29b      	uxth	r3, r3
 8022e36:	18d3      	adds	r3, r2, r3
 8022e38:	b29a      	uxth	r2, r3
 8022e3a:	687b      	ldr	r3, [r7, #4]
 8022e3c:	80da      	strh	r2, [r3, #6]

}
 8022e3e:	46c0      	nop			@ (mov r8, r8)
 8022e40:	46bd      	mov	sp, r7
 8022e42:	b002      	add	sp, #8
 8022e44:	bd80      	pop	{r7, pc}

08022e46 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8022e46:	b580      	push	{r7, lr}
 8022e48:	b082      	sub	sp, #8
 8022e4a:	af00      	add	r7, sp, #0
 8022e4c:	6078      	str	r0, [r7, #4]
 8022e4e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8022e50:	687b      	ldr	r3, [r7, #4]
 8022e52:	2180      	movs	r1, #128	@ 0x80
 8022e54:	0018      	movs	r0, r3
 8022e56:	f000 fd2a 	bl	80238ae <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8022e5a:	687b      	ldr	r3, [r7, #4]
 8022e5c:	2100      	movs	r1, #0
 8022e5e:	0018      	movs	r0, r3
 8022e60:	f000 fd25 	bl	80238ae <USBD_LL_StallEP>
}
 8022e64:	46c0      	nop			@ (mov r8, r8)
 8022e66:	46bd      	mov	sp, r7
 8022e68:	b002      	add	sp, #8
 8022e6a:	bd80      	pop	{r7, pc}

08022e6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8022e6c:	b590      	push	{r4, r7, lr}
 8022e6e:	b087      	sub	sp, #28
 8022e70:	af00      	add	r7, sp, #0
 8022e72:	60f8      	str	r0, [r7, #12]
 8022e74:	60b9      	str	r1, [r7, #8]
 8022e76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8022e78:	2417      	movs	r4, #23
 8022e7a:	193b      	adds	r3, r7, r4
 8022e7c:	2200      	movs	r2, #0
 8022e7e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8022e80:	68fb      	ldr	r3, [r7, #12]
 8022e82:	2b00      	cmp	r3, #0
 8022e84:	d03c      	beq.n	8022f00 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8022e86:	68fb      	ldr	r3, [r7, #12]
 8022e88:	0018      	movs	r0, r3
 8022e8a:	f000 f83d 	bl	8022f08 <USBD_GetLen>
 8022e8e:	0003      	movs	r3, r0
 8022e90:	3301      	adds	r3, #1
 8022e92:	b29b      	uxth	r3, r3
 8022e94:	18db      	adds	r3, r3, r3
 8022e96:	b29a      	uxth	r2, r3
 8022e98:	687b      	ldr	r3, [r7, #4]
 8022e9a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8022e9c:	193b      	adds	r3, r7, r4
 8022e9e:	781b      	ldrb	r3, [r3, #0]
 8022ea0:	193a      	adds	r2, r7, r4
 8022ea2:	1c59      	adds	r1, r3, #1
 8022ea4:	7011      	strb	r1, [r2, #0]
 8022ea6:	001a      	movs	r2, r3
 8022ea8:	68bb      	ldr	r3, [r7, #8]
 8022eaa:	189b      	adds	r3, r3, r2
 8022eac:	687a      	ldr	r2, [r7, #4]
 8022eae:	7812      	ldrb	r2, [r2, #0]
 8022eb0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8022eb2:	193b      	adds	r3, r7, r4
 8022eb4:	781b      	ldrb	r3, [r3, #0]
 8022eb6:	193a      	adds	r2, r7, r4
 8022eb8:	1c59      	adds	r1, r3, #1
 8022eba:	7011      	strb	r1, [r2, #0]
 8022ebc:	001a      	movs	r2, r3
 8022ebe:	68bb      	ldr	r3, [r7, #8]
 8022ec0:	189b      	adds	r3, r3, r2
 8022ec2:	2203      	movs	r2, #3
 8022ec4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8022ec6:	e017      	b.n	8022ef8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8022ec8:	68fb      	ldr	r3, [r7, #12]
 8022eca:	1c5a      	adds	r2, r3, #1
 8022ecc:	60fa      	str	r2, [r7, #12]
 8022ece:	2417      	movs	r4, #23
 8022ed0:	193a      	adds	r2, r7, r4
 8022ed2:	7812      	ldrb	r2, [r2, #0]
 8022ed4:	1939      	adds	r1, r7, r4
 8022ed6:	1c50      	adds	r0, r2, #1
 8022ed8:	7008      	strb	r0, [r1, #0]
 8022eda:	0011      	movs	r1, r2
 8022edc:	68ba      	ldr	r2, [r7, #8]
 8022ede:	1852      	adds	r2, r2, r1
 8022ee0:	781b      	ldrb	r3, [r3, #0]
 8022ee2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8022ee4:	193b      	adds	r3, r7, r4
 8022ee6:	781b      	ldrb	r3, [r3, #0]
 8022ee8:	193a      	adds	r2, r7, r4
 8022eea:	1c59      	adds	r1, r3, #1
 8022eec:	7011      	strb	r1, [r2, #0]
 8022eee:	001a      	movs	r2, r3
 8022ef0:	68bb      	ldr	r3, [r7, #8]
 8022ef2:	189b      	adds	r3, r3, r2
 8022ef4:	2200      	movs	r2, #0
 8022ef6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8022ef8:	68fb      	ldr	r3, [r7, #12]
 8022efa:	781b      	ldrb	r3, [r3, #0]
 8022efc:	2b00      	cmp	r3, #0
 8022efe:	d1e3      	bne.n	8022ec8 <USBD_GetString+0x5c>
    }
  }
}
 8022f00:	46c0      	nop			@ (mov r8, r8)
 8022f02:	46bd      	mov	sp, r7
 8022f04:	b007      	add	sp, #28
 8022f06:	bd90      	pop	{r4, r7, pc}

08022f08 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8022f08:	b580      	push	{r7, lr}
 8022f0a:	b084      	sub	sp, #16
 8022f0c:	af00      	add	r7, sp, #0
 8022f0e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8022f10:	230f      	movs	r3, #15
 8022f12:	18fb      	adds	r3, r7, r3
 8022f14:	2200      	movs	r2, #0
 8022f16:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8022f18:	e008      	b.n	8022f2c <USBD_GetLen+0x24>
  {
    len++;
 8022f1a:	210f      	movs	r1, #15
 8022f1c:	187b      	adds	r3, r7, r1
 8022f1e:	781a      	ldrb	r2, [r3, #0]
 8022f20:	187b      	adds	r3, r7, r1
 8022f22:	3201      	adds	r2, #1
 8022f24:	701a      	strb	r2, [r3, #0]
    buf++;
 8022f26:	687b      	ldr	r3, [r7, #4]
 8022f28:	3301      	adds	r3, #1
 8022f2a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8022f2c:	687b      	ldr	r3, [r7, #4]
 8022f2e:	781b      	ldrb	r3, [r3, #0]
 8022f30:	2b00      	cmp	r3, #0
 8022f32:	d1f2      	bne.n	8022f1a <USBD_GetLen+0x12>
  }

  return len;
 8022f34:	230f      	movs	r3, #15
 8022f36:	18fb      	adds	r3, r7, r3
 8022f38:	781b      	ldrb	r3, [r3, #0]
}
 8022f3a:	0018      	movs	r0, r3
 8022f3c:	46bd      	mov	sp, r7
 8022f3e:	b004      	add	sp, #16
 8022f40:	bd80      	pop	{r7, pc}

08022f42 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8022f42:	b580      	push	{r7, lr}
 8022f44:	b084      	sub	sp, #16
 8022f46:	af00      	add	r7, sp, #0
 8022f48:	60f8      	str	r0, [r7, #12]
 8022f4a:	60b9      	str	r1, [r7, #8]
 8022f4c:	1dbb      	adds	r3, r7, #6
 8022f4e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8022f50:	68fa      	ldr	r2, [r7, #12]
 8022f52:	23a5      	movs	r3, #165	@ 0xa5
 8022f54:	009b      	lsls	r3, r3, #2
 8022f56:	2102      	movs	r1, #2
 8022f58:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8022f5a:	1dbb      	adds	r3, r7, #6
 8022f5c:	881a      	ldrh	r2, [r3, #0]
 8022f5e:	68fb      	ldr	r3, [r7, #12]
 8022f60:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8022f62:	1dbb      	adds	r3, r7, #6
 8022f64:	881a      	ldrh	r2, [r3, #0]
 8022f66:	68fb      	ldr	r3, [r7, #12]
 8022f68:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022f6a:	1dbb      	adds	r3, r7, #6
 8022f6c:	881b      	ldrh	r3, [r3, #0]
 8022f6e:	68ba      	ldr	r2, [r7, #8]
 8022f70:	68f8      	ldr	r0, [r7, #12]
 8022f72:	2100      	movs	r1, #0
 8022f74:	f000 fd4d 	bl	8023a12 <USBD_LL_Transmit>

  return USBD_OK;
 8022f78:	2300      	movs	r3, #0
}
 8022f7a:	0018      	movs	r0, r3
 8022f7c:	46bd      	mov	sp, r7
 8022f7e:	b004      	add	sp, #16
 8022f80:	bd80      	pop	{r7, pc}

08022f82 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8022f82:	b580      	push	{r7, lr}
 8022f84:	b084      	sub	sp, #16
 8022f86:	af00      	add	r7, sp, #0
 8022f88:	60f8      	str	r0, [r7, #12]
 8022f8a:	60b9      	str	r1, [r7, #8]
 8022f8c:	1dbb      	adds	r3, r7, #6
 8022f8e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8022f90:	1dbb      	adds	r3, r7, #6
 8022f92:	881b      	ldrh	r3, [r3, #0]
 8022f94:	68ba      	ldr	r2, [r7, #8]
 8022f96:	68f8      	ldr	r0, [r7, #12]
 8022f98:	2100      	movs	r1, #0
 8022f9a:	f000 fd3a 	bl	8023a12 <USBD_LL_Transmit>

  return USBD_OK;
 8022f9e:	2300      	movs	r3, #0
}
 8022fa0:	0018      	movs	r0, r3
 8022fa2:	46bd      	mov	sp, r7
 8022fa4:	b004      	add	sp, #16
 8022fa6:	bd80      	pop	{r7, pc}

08022fa8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8022fa8:	b580      	push	{r7, lr}
 8022faa:	b084      	sub	sp, #16
 8022fac:	af00      	add	r7, sp, #0
 8022fae:	60f8      	str	r0, [r7, #12]
 8022fb0:	60b9      	str	r1, [r7, #8]
 8022fb2:	1dbb      	adds	r3, r7, #6
 8022fb4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8022fb6:	68fa      	ldr	r2, [r7, #12]
 8022fb8:	23a5      	movs	r3, #165	@ 0xa5
 8022fba:	009b      	lsls	r3, r3, #2
 8022fbc:	2103      	movs	r1, #3
 8022fbe:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8022fc0:	1dbb      	adds	r3, r7, #6
 8022fc2:	8819      	ldrh	r1, [r3, #0]
 8022fc4:	68fa      	ldr	r2, [r7, #12]
 8022fc6:	23ae      	movs	r3, #174	@ 0xae
 8022fc8:	005b      	lsls	r3, r3, #1
 8022fca:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8022fcc:	1dbb      	adds	r3, r7, #6
 8022fce:	8819      	ldrh	r1, [r3, #0]
 8022fd0:	68fa      	ldr	r2, [r7, #12]
 8022fd2:	23b0      	movs	r3, #176	@ 0xb0
 8022fd4:	005b      	lsls	r3, r3, #1
 8022fd6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022fd8:	1dbb      	adds	r3, r7, #6
 8022fda:	881b      	ldrh	r3, [r3, #0]
 8022fdc:	68ba      	ldr	r2, [r7, #8]
 8022fde:	68f8      	ldr	r0, [r7, #12]
 8022fe0:	2100      	movs	r1, #0
 8022fe2:	f000 fd4d 	bl	8023a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8022fe6:	2300      	movs	r3, #0
}
 8022fe8:	0018      	movs	r0, r3
 8022fea:	46bd      	mov	sp, r7
 8022fec:	b004      	add	sp, #16
 8022fee:	bd80      	pop	{r7, pc}

08022ff0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8022ff0:	b580      	push	{r7, lr}
 8022ff2:	b084      	sub	sp, #16
 8022ff4:	af00      	add	r7, sp, #0
 8022ff6:	60f8      	str	r0, [r7, #12]
 8022ff8:	60b9      	str	r1, [r7, #8]
 8022ffa:	1dbb      	adds	r3, r7, #6
 8022ffc:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8022ffe:	1dbb      	adds	r3, r7, #6
 8023000:	881b      	ldrh	r3, [r3, #0]
 8023002:	68ba      	ldr	r2, [r7, #8]
 8023004:	68f8      	ldr	r0, [r7, #12]
 8023006:	2100      	movs	r1, #0
 8023008:	f000 fd3a 	bl	8023a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802300c:	2300      	movs	r3, #0
}
 802300e:	0018      	movs	r0, r3
 8023010:	46bd      	mov	sp, r7
 8023012:	b004      	add	sp, #16
 8023014:	bd80      	pop	{r7, pc}

08023016 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8023016:	b580      	push	{r7, lr}
 8023018:	b082      	sub	sp, #8
 802301a:	af00      	add	r7, sp, #0
 802301c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 802301e:	687a      	ldr	r2, [r7, #4]
 8023020:	23a5      	movs	r3, #165	@ 0xa5
 8023022:	009b      	lsls	r3, r3, #2
 8023024:	2104      	movs	r1, #4
 8023026:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8023028:	6878      	ldr	r0, [r7, #4]
 802302a:	2300      	movs	r3, #0
 802302c:	2200      	movs	r2, #0
 802302e:	2100      	movs	r1, #0
 8023030:	f000 fcef 	bl	8023a12 <USBD_LL_Transmit>

  return USBD_OK;
 8023034:	2300      	movs	r3, #0
}
 8023036:	0018      	movs	r0, r3
 8023038:	46bd      	mov	sp, r7
 802303a:	b002      	add	sp, #8
 802303c:	bd80      	pop	{r7, pc}

0802303e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 802303e:	b580      	push	{r7, lr}
 8023040:	b082      	sub	sp, #8
 8023042:	af00      	add	r7, sp, #0
 8023044:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8023046:	687a      	ldr	r2, [r7, #4]
 8023048:	23a5      	movs	r3, #165	@ 0xa5
 802304a:	009b      	lsls	r3, r3, #2
 802304c:	2105      	movs	r1, #5
 802304e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8023050:	6878      	ldr	r0, [r7, #4]
 8023052:	2300      	movs	r3, #0
 8023054:	2200      	movs	r2, #0
 8023056:	2100      	movs	r1, #0
 8023058:	f000 fd12 	bl	8023a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 802305c:	2300      	movs	r3, #0
}
 802305e:	0018      	movs	r0, r3
 8023060:	46bd      	mov	sp, r7
 8023062:	b002      	add	sp, #8
 8023064:	bd80      	pop	{r7, pc}
	...

08023068 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8023068:	b580      	push	{r7, lr}
 802306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 802306c:	4914      	ldr	r1, [pc, #80]	@ (80230c0 <MX_USB_DEVICE_Init+0x58>)
 802306e:	4b15      	ldr	r3, [pc, #84]	@ (80230c4 <MX_USB_DEVICE_Init+0x5c>)
 8023070:	2200      	movs	r2, #0
 8023072:	0018      	movs	r0, r3
 8023074:	f7fe fdec 	bl	8021c50 <USBD_Init>
 8023078:	1e03      	subs	r3, r0, #0
 802307a:	d001      	beq.n	8023080 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 802307c:	f7ea faa2 	bl	800d5c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8023080:	4a11      	ldr	r2, [pc, #68]	@ (80230c8 <MX_USB_DEVICE_Init+0x60>)
 8023082:	4b10      	ldr	r3, [pc, #64]	@ (80230c4 <MX_USB_DEVICE_Init+0x5c>)
 8023084:	0011      	movs	r1, r2
 8023086:	0018      	movs	r0, r3
 8023088:	f7fe fe13 	bl	8021cb2 <USBD_RegisterClass>
 802308c:	1e03      	subs	r3, r0, #0
 802308e:	d001      	beq.n	8023094 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8023090:	f7ea fa98 	bl	800d5c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8023094:	4a0d      	ldr	r2, [pc, #52]	@ (80230cc <MX_USB_DEVICE_Init+0x64>)
 8023096:	4b0b      	ldr	r3, [pc, #44]	@ (80230c4 <MX_USB_DEVICE_Init+0x5c>)
 8023098:	0011      	movs	r1, r2
 802309a:	0018      	movs	r0, r3
 802309c:	f7fe fd28 	bl	8021af0 <USBD_CDC_RegisterInterface>
 80230a0:	1e03      	subs	r3, r0, #0
 80230a2:	d001      	beq.n	80230a8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80230a4:	f7ea fa8e 	bl	800d5c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80230a8:	4b06      	ldr	r3, [pc, #24]	@ (80230c4 <MX_USB_DEVICE_Init+0x5c>)
 80230aa:	0018      	movs	r0, r3
 80230ac:	f7fe fe21 	bl	8021cf2 <USBD_Start>
 80230b0:	1e03      	subs	r3, r0, #0
 80230b2:	d001      	beq.n	80230b8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80230b4:	f7ea fa86 	bl	800d5c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80230b8:	46c0      	nop			@ (mov r8, r8)
 80230ba:	46bd      	mov	sp, r7
 80230bc:	bd80      	pop	{r7, pc}
 80230be:	46c0      	nop			@ (mov r8, r8)
 80230c0:	20000224 	.word	0x20000224
 80230c4:	200024e8 	.word	0x200024e8
 80230c8:	20000110 	.word	0x20000110
 80230cc:	20000214 	.word	0x20000214

080230d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80230d0:	b580      	push	{r7, lr}
 80230d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80230d4:	4907      	ldr	r1, [pc, #28]	@ (80230f4 <CDC_Init_FS+0x24>)
 80230d6:	4b08      	ldr	r3, [pc, #32]	@ (80230f8 <CDC_Init_FS+0x28>)
 80230d8:	2200      	movs	r2, #0
 80230da:	0018      	movs	r0, r3
 80230dc:	f7fe fd23 	bl	8021b26 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80230e0:	4a06      	ldr	r2, [pc, #24]	@ (80230fc <CDC_Init_FS+0x2c>)
 80230e2:	4b05      	ldr	r3, [pc, #20]	@ (80230f8 <CDC_Init_FS+0x28>)
 80230e4:	0011      	movs	r1, r2
 80230e6:	0018      	movs	r0, r3
 80230e8:	f7fe fd39 	bl	8021b5e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80230ec:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80230ee:	0018      	movs	r0, r3
 80230f0:	46bd      	mov	sp, r7
 80230f2:	bd80      	pop	{r7, pc}
 80230f4:	20002c6c 	.word	0x20002c6c
 80230f8:	200024e8 	.word	0x200024e8
 80230fc:	2000286c 	.word	0x2000286c

08023100 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8023100:	b580      	push	{r7, lr}
 8023102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8023104:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8023106:	0018      	movs	r0, r3
 8023108:	46bd      	mov	sp, r7
 802310a:	bd80      	pop	{r7, pc}

0802310c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 802310c:	b580      	push	{r7, lr}
 802310e:	b084      	sub	sp, #16
 8023110:	af00      	add	r7, sp, #0
 8023112:	6039      	str	r1, [r7, #0]
 8023114:	0011      	movs	r1, r2
 8023116:	1dfb      	adds	r3, r7, #7
 8023118:	1c02      	adds	r2, r0, #0
 802311a:	701a      	strb	r2, [r3, #0]
 802311c:	1d3b      	adds	r3, r7, #4
 802311e:	1c0a      	adds	r2, r1, #0
 8023120:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8023122:	1dfb      	adds	r3, r7, #7
 8023124:	781b      	ldrb	r3, [r3, #0]
 8023126:	2b23      	cmp	r3, #35	@ 0x23
 8023128:	d810      	bhi.n	802314c <CDC_Control_FS+0x40>
 802312a:	009a      	lsls	r2, r3, #2
 802312c:	4b0a      	ldr	r3, [pc, #40]	@ (8023158 <CDC_Control_FS+0x4c>)
 802312e:	18d3      	adds	r3, r2, r3
 8023130:	681b      	ldr	r3, [r3, #0]
 8023132:	469f      	mov	pc, r3

    break;

    case CDC_SET_CONTROL_LINE_STATE:
      // === inserted for detecting USB is ready for dumping USB_LOGGING 28-jul-2025
            USBD_SetupReqTypedef * req = (USBD_SetupReqTypedef *)pbuf;
 8023134:	683b      	ldr	r3, [r7, #0]
 8023136:	60fb      	str	r3, [r7, #12]

            if((req->wValue &0x0001) != 0)
 8023138:	68fb      	ldr	r3, [r7, #12]
 802313a:	885b      	ldrh	r3, [r3, #2]
 802313c:	001a      	movs	r2, r3
 802313e:	2301      	movs	r3, #1
 8023140:	4013      	ands	r3, r2
 8023142:	d001      	beq.n	8023148 <CDC_Control_FS+0x3c>
              return (USBD_FAIL);
 8023144:	2302      	movs	r3, #2
 8023146:	e003      	b.n	8023150 <CDC_Control_FS+0x44>
              //host_com_port_open = 1;
            else
              return (USBD_OK);
 8023148:	2300      	movs	r3, #0
 802314a:	e001      	b.n	8023150 <CDC_Control_FS+0x44>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 802314c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 802314e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8023150:	0018      	movs	r0, r3
 8023152:	46bd      	mov	sp, r7
 8023154:	b004      	add	sp, #16
 8023156:	bd80      	pop	{r7, pc}
 8023158:	0802eac0 	.word	0x0802eac0

0802315c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 802315c:	b580      	push	{r7, lr}
 802315e:	b082      	sub	sp, #8
 8023160:	af00      	add	r7, sp, #0
 8023162:	6078      	str	r0, [r7, #4]
 8023164:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8023166:	4b12      	ldr	r3, [pc, #72]	@ (80231b0 <CDC_Receive_FS+0x54>)
 8023168:	781b      	ldrb	r3, [r3, #0]
 802316a:	2b00      	cmp	r3, #0
 802316c:	d013      	beq.n	8023196 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 802316e:	683b      	ldr	r3, [r7, #0]
 8023170:	681b      	ldr	r3, [r3, #0]
 8023172:	b29a      	uxth	r2, r3
 8023174:	2301      	movs	r3, #1
 8023176:	425b      	negs	r3, r3
 8023178:	6879      	ldr	r1, [r7, #4]
 802317a:	480e      	ldr	r0, [pc, #56]	@ (80231b4 <CDC_Receive_FS+0x58>)
 802317c:	f7fa fa38 	bl	801d5f0 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8023180:	687a      	ldr	r2, [r7, #4]
 8023182:	4b0d      	ldr	r3, [pc, #52]	@ (80231b8 <CDC_Receive_FS+0x5c>)
 8023184:	0011      	movs	r1, r2
 8023186:	0018      	movs	r0, r3
 8023188:	f7fe fce9 	bl	8021b5e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802318c:	4b0a      	ldr	r3, [pc, #40]	@ (80231b8 <CDC_Receive_FS+0x5c>)
 802318e:	0018      	movs	r0, r3
 8023190:	f7fe fd30 	bl	8021bf4 <USBD_CDC_ReceivePacket>
 8023194:	e006      	b.n	80231a4 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8023196:	683b      	ldr	r3, [r7, #0]
 8023198:	681a      	ldr	r2, [r3, #0]
 802319a:	4b08      	ldr	r3, [pc, #32]	@ (80231bc <CDC_Receive_FS+0x60>)
 802319c:	681b      	ldr	r3, [r3, #0]
 802319e:	18d2      	adds	r2, r2, r3
 80231a0:	4b06      	ldr	r3, [pc, #24]	@ (80231bc <CDC_Receive_FS+0x60>)
 80231a2:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 80231a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80231a6:	0018      	movs	r0, r3
 80231a8:	46bd      	mov	sp, r7
 80231aa:	b002      	add	sp, #8
 80231ac:	bd80      	pop	{r7, pc}
 80231ae:	46c0      	nop			@ (mov r8, r8)
 80231b0:	200027ad 	.word	0x200027ad
 80231b4:	200027b0 	.word	0x200027b0
 80231b8:	200024e8 	.word	0x200024e8
 80231bc:	20002868 	.word	0x20002868

080231c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80231c0:	b5b0      	push	{r4, r5, r7, lr}
 80231c2:	b084      	sub	sp, #16
 80231c4:	af00      	add	r7, sp, #0
 80231c6:	6078      	str	r0, [r7, #4]
 80231c8:	000a      	movs	r2, r1
 80231ca:	1cbb      	adds	r3, r7, #2
 80231cc:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80231ce:	230f      	movs	r3, #15
 80231d0:	18fb      	adds	r3, r7, r3
 80231d2:	2200      	movs	r2, #0
 80231d4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80231d6:	4a11      	ldr	r2, [pc, #68]	@ (802321c <CDC_Transmit_FS+0x5c>)
 80231d8:	23ae      	movs	r3, #174	@ 0xae
 80231da:	009b      	lsls	r3, r3, #2
 80231dc:	58d3      	ldr	r3, [r2, r3]
 80231de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80231e0:	68ba      	ldr	r2, [r7, #8]
 80231e2:	2385      	movs	r3, #133	@ 0x85
 80231e4:	009b      	lsls	r3, r3, #2
 80231e6:	58d3      	ldr	r3, [r2, r3]
 80231e8:	2b00      	cmp	r3, #0
 80231ea:	d001      	beq.n	80231f0 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80231ec:	2301      	movs	r3, #1
 80231ee:	e010      	b.n	8023212 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80231f0:	1cbb      	adds	r3, r7, #2
 80231f2:	881a      	ldrh	r2, [r3, #0]
 80231f4:	6879      	ldr	r1, [r7, #4]
 80231f6:	4b09      	ldr	r3, [pc, #36]	@ (802321c <CDC_Transmit_FS+0x5c>)
 80231f8:	0018      	movs	r0, r3
 80231fa:	f7fe fc94 	bl	8021b26 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80231fe:	250f      	movs	r5, #15
 8023200:	197c      	adds	r4, r7, r5
 8023202:	4b06      	ldr	r3, [pc, #24]	@ (802321c <CDC_Transmit_FS+0x5c>)
 8023204:	0018      	movs	r0, r3
 8023206:	f7fe fcbe 	bl	8021b86 <USBD_CDC_TransmitPacket>
 802320a:	0003      	movs	r3, r0
 802320c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 802320e:	197b      	adds	r3, r7, r5
 8023210:	781b      	ldrb	r3, [r3, #0]
}
 8023212:	0018      	movs	r0, r3
 8023214:	46bd      	mov	sp, r7
 8023216:	b004      	add	sp, #16
 8023218:	bdb0      	pop	{r4, r5, r7, pc}
 802321a:	46c0      	nop			@ (mov r8, r8)
 802321c:	200024e8 	.word	0x200024e8

08023220 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8023220:	b580      	push	{r7, lr}
 8023222:	af00      	add	r7, sp, #0
  ESPProg = true;
 8023224:	4b02      	ldr	r3, [pc, #8]	@ (8023230 <EnableESPProg+0x10>)
 8023226:	2201      	movs	r2, #1
 8023228:	701a      	strb	r2, [r3, #0]
}
 802322a:	46c0      	nop			@ (mov r8, r8)
 802322c:	46bd      	mov	sp, r7
 802322e:	bd80      	pop	{r7, pc}
 8023230:	200027ad 	.word	0x200027ad

08023234 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8023234:	b580      	push	{r7, lr}
 8023236:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8023238:	4b01      	ldr	r3, [pc, #4]	@ (8023240 <GetUsbRxPointer+0xc>)
}
 802323a:	0018      	movs	r0, r3
 802323c:	46bd      	mov	sp, r7
 802323e:	bd80      	pop	{r7, pc}
 8023240:	2000286c 	.word	0x2000286c

08023244 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8023244:	b580      	push	{r7, lr}
 8023246:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8023248:	4b07      	ldr	r3, [pc, #28]	@ (8023268 <ResetUsbRxDataSize+0x24>)
 802324a:	2200      	movs	r2, #0
 802324c:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 802324e:	4a07      	ldr	r2, [pc, #28]	@ (802326c <ResetUsbRxDataSize+0x28>)
 8023250:	4b07      	ldr	r3, [pc, #28]	@ (8023270 <ResetUsbRxDataSize+0x2c>)
 8023252:	0011      	movs	r1, r2
 8023254:	0018      	movs	r0, r3
 8023256:	f7fe fc82 	bl	8021b5e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802325a:	4b05      	ldr	r3, [pc, #20]	@ (8023270 <ResetUsbRxDataSize+0x2c>)
 802325c:	0018      	movs	r0, r3
 802325e:	f7fe fcc9 	bl	8021bf4 <USBD_CDC_ReceivePacket>
}
 8023262:	46c0      	nop			@ (mov r8, r8)
 8023264:	46bd      	mov	sp, r7
 8023266:	bd80      	pop	{r7, pc}
 8023268:	20002868 	.word	0x20002868
 802326c:	2000286c 	.word	0x2000286c
 8023270:	200024e8 	.word	0x200024e8

08023274 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8023274:	b580      	push	{r7, lr}
 8023276:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8023278:	4b02      	ldr	r3, [pc, #8]	@ (8023284 <GetUsbRxDataSize+0x10>)
 802327a:	681b      	ldr	r3, [r3, #0]
}
 802327c:	0018      	movs	r0, r3
 802327e:	46bd      	mov	sp, r7
 8023280:	bd80      	pop	{r7, pc}
 8023282:	46c0      	nop			@ (mov r8, r8)
 8023284:	20002868 	.word	0x20002868

08023288 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8023288:	b580      	push	{r7, lr}
 802328a:	b082      	sub	sp, #8
 802328c:	af00      	add	r7, sp, #0
 802328e:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8023290:	687a      	ldr	r2, [r7, #4]
 8023292:	4b07      	ldr	r3, [pc, #28]	@ (80232b0 <GetUsbRxNextChunk+0x28>)
 8023294:	18d2      	adds	r2, r2, r3
 8023296:	4b07      	ldr	r3, [pc, #28]	@ (80232b4 <GetUsbRxNextChunk+0x2c>)
 8023298:	0011      	movs	r1, r2
 802329a:	0018      	movs	r0, r3
 802329c:	f7fe fc5f 	bl	8021b5e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80232a0:	4b04      	ldr	r3, [pc, #16]	@ (80232b4 <GetUsbRxNextChunk+0x2c>)
 80232a2:	0018      	movs	r0, r3
 80232a4:	f7fe fca6 	bl	8021bf4 <USBD_CDC_ReceivePacket>
}
 80232a8:	46c0      	nop			@ (mov r8, r8)
 80232aa:	46bd      	mov	sp, r7
 80232ac:	b002      	add	sp, #8
 80232ae:	bd80      	pop	{r7, pc}
 80232b0:	2000286c 	.word	0x2000286c
 80232b4:	200024e8 	.word	0x200024e8

080232b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80232b8:	b580      	push	{r7, lr}
 80232ba:	b082      	sub	sp, #8
 80232bc:	af00      	add	r7, sp, #0
 80232be:	0002      	movs	r2, r0
 80232c0:	6039      	str	r1, [r7, #0]
 80232c2:	1dfb      	adds	r3, r7, #7
 80232c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80232c6:	683b      	ldr	r3, [r7, #0]
 80232c8:	2212      	movs	r2, #18
 80232ca:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80232cc:	4b02      	ldr	r3, [pc, #8]	@ (80232d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80232ce:	0018      	movs	r0, r3
 80232d0:	46bd      	mov	sp, r7
 80232d2:	b002      	add	sp, #8
 80232d4:	bd80      	pop	{r7, pc}
 80232d6:	46c0      	nop			@ (mov r8, r8)
 80232d8:	20000240 	.word	0x20000240

080232dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80232dc:	b580      	push	{r7, lr}
 80232de:	b082      	sub	sp, #8
 80232e0:	af00      	add	r7, sp, #0
 80232e2:	0002      	movs	r2, r0
 80232e4:	6039      	str	r1, [r7, #0]
 80232e6:	1dfb      	adds	r3, r7, #7
 80232e8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80232ea:	683b      	ldr	r3, [r7, #0]
 80232ec:	2204      	movs	r2, #4
 80232ee:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80232f0:	4b02      	ldr	r3, [pc, #8]	@ (80232fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80232f2:	0018      	movs	r0, r3
 80232f4:	46bd      	mov	sp, r7
 80232f6:	b002      	add	sp, #8
 80232f8:	bd80      	pop	{r7, pc}
 80232fa:	46c0      	nop			@ (mov r8, r8)
 80232fc:	20000254 	.word	0x20000254

08023300 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023300:	b580      	push	{r7, lr}
 8023302:	b082      	sub	sp, #8
 8023304:	af00      	add	r7, sp, #0
 8023306:	0002      	movs	r2, r0
 8023308:	6039      	str	r1, [r7, #0]
 802330a:	1dfb      	adds	r3, r7, #7
 802330c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 802330e:	1dfb      	adds	r3, r7, #7
 8023310:	781b      	ldrb	r3, [r3, #0]
 8023312:	2b00      	cmp	r3, #0
 8023314:	d106      	bne.n	8023324 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8023316:	683a      	ldr	r2, [r7, #0]
 8023318:	4908      	ldr	r1, [pc, #32]	@ (802333c <USBD_FS_ProductStrDescriptor+0x3c>)
 802331a:	4b09      	ldr	r3, [pc, #36]	@ (8023340 <USBD_FS_ProductStrDescriptor+0x40>)
 802331c:	0018      	movs	r0, r3
 802331e:	f7ff fda5 	bl	8022e6c <USBD_GetString>
 8023322:	e005      	b.n	8023330 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8023324:	683a      	ldr	r2, [r7, #0]
 8023326:	4905      	ldr	r1, [pc, #20]	@ (802333c <USBD_FS_ProductStrDescriptor+0x3c>)
 8023328:	4b05      	ldr	r3, [pc, #20]	@ (8023340 <USBD_FS_ProductStrDescriptor+0x40>)
 802332a:	0018      	movs	r0, r3
 802332c:	f7ff fd9e 	bl	8022e6c <USBD_GetString>
  }
  return USBD_StrDesc;
 8023330:	4b02      	ldr	r3, [pc, #8]	@ (802333c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8023332:	0018      	movs	r0, r3
 8023334:	46bd      	mov	sp, r7
 8023336:	b002      	add	sp, #8
 8023338:	bd80      	pop	{r7, pc}
 802333a:	46c0      	nop			@ (mov r8, r8)
 802333c:	2000306c 	.word	0x2000306c
 8023340:	0802e470 	.word	0x0802e470

08023344 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023344:	b580      	push	{r7, lr}
 8023346:	b082      	sub	sp, #8
 8023348:	af00      	add	r7, sp, #0
 802334a:	0002      	movs	r2, r0
 802334c:	6039      	str	r1, [r7, #0]
 802334e:	1dfb      	adds	r3, r7, #7
 8023350:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8023352:	683a      	ldr	r2, [r7, #0]
 8023354:	4904      	ldr	r1, [pc, #16]	@ (8023368 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8023356:	4b05      	ldr	r3, [pc, #20]	@ (802336c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8023358:	0018      	movs	r0, r3
 802335a:	f7ff fd87 	bl	8022e6c <USBD_GetString>
  return USBD_StrDesc;
 802335e:	4b02      	ldr	r3, [pc, #8]	@ (8023368 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8023360:	0018      	movs	r0, r3
 8023362:	46bd      	mov	sp, r7
 8023364:	b002      	add	sp, #8
 8023366:	bd80      	pop	{r7, pc}
 8023368:	2000306c 	.word	0x2000306c
 802336c:	0802e488 	.word	0x0802e488

08023370 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023370:	b580      	push	{r7, lr}
 8023372:	b082      	sub	sp, #8
 8023374:	af00      	add	r7, sp, #0
 8023376:	0002      	movs	r2, r0
 8023378:	6039      	str	r1, [r7, #0]
 802337a:	1dfb      	adds	r3, r7, #7
 802337c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 802337e:	683b      	ldr	r3, [r7, #0]
 8023380:	221a      	movs	r2, #26
 8023382:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8023384:	f000 f84c 	bl	8023420 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8023388:	4b02      	ldr	r3, [pc, #8]	@ (8023394 <USBD_FS_SerialStrDescriptor+0x24>)
}
 802338a:	0018      	movs	r0, r3
 802338c:	46bd      	mov	sp, r7
 802338e:	b002      	add	sp, #8
 8023390:	bd80      	pop	{r7, pc}
 8023392:	46c0      	nop			@ (mov r8, r8)
 8023394:	20000258 	.word	0x20000258

08023398 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8023398:	b580      	push	{r7, lr}
 802339a:	b082      	sub	sp, #8
 802339c:	af00      	add	r7, sp, #0
 802339e:	0002      	movs	r2, r0
 80233a0:	6039      	str	r1, [r7, #0]
 80233a2:	1dfb      	adds	r3, r7, #7
 80233a4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80233a6:	1dfb      	adds	r3, r7, #7
 80233a8:	781b      	ldrb	r3, [r3, #0]
 80233aa:	2b00      	cmp	r3, #0
 80233ac:	d106      	bne.n	80233bc <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80233ae:	683a      	ldr	r2, [r7, #0]
 80233b0:	4908      	ldr	r1, [pc, #32]	@ (80233d4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80233b2:	4b09      	ldr	r3, [pc, #36]	@ (80233d8 <USBD_FS_ConfigStrDescriptor+0x40>)
 80233b4:	0018      	movs	r0, r3
 80233b6:	f7ff fd59 	bl	8022e6c <USBD_GetString>
 80233ba:	e005      	b.n	80233c8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80233bc:	683a      	ldr	r2, [r7, #0]
 80233be:	4905      	ldr	r1, [pc, #20]	@ (80233d4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80233c0:	4b05      	ldr	r3, [pc, #20]	@ (80233d8 <USBD_FS_ConfigStrDescriptor+0x40>)
 80233c2:	0018      	movs	r0, r3
 80233c4:	f7ff fd52 	bl	8022e6c <USBD_GetString>
  }
  return USBD_StrDesc;
 80233c8:	4b02      	ldr	r3, [pc, #8]	@ (80233d4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80233ca:	0018      	movs	r0, r3
 80233cc:	46bd      	mov	sp, r7
 80233ce:	b002      	add	sp, #8
 80233d0:	bd80      	pop	{r7, pc}
 80233d2:	46c0      	nop			@ (mov r8, r8)
 80233d4:	2000306c 	.word	0x2000306c
 80233d8:	0802e49c 	.word	0x0802e49c

080233dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80233dc:	b580      	push	{r7, lr}
 80233de:	b082      	sub	sp, #8
 80233e0:	af00      	add	r7, sp, #0
 80233e2:	0002      	movs	r2, r0
 80233e4:	6039      	str	r1, [r7, #0]
 80233e6:	1dfb      	adds	r3, r7, #7
 80233e8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80233ea:	1dfb      	adds	r3, r7, #7
 80233ec:	781b      	ldrb	r3, [r3, #0]
 80233ee:	2b00      	cmp	r3, #0
 80233f0:	d106      	bne.n	8023400 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80233f2:	683a      	ldr	r2, [r7, #0]
 80233f4:	4908      	ldr	r1, [pc, #32]	@ (8023418 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80233f6:	4b09      	ldr	r3, [pc, #36]	@ (802341c <USBD_FS_InterfaceStrDescriptor+0x40>)
 80233f8:	0018      	movs	r0, r3
 80233fa:	f7ff fd37 	bl	8022e6c <USBD_GetString>
 80233fe:	e005      	b.n	802340c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8023400:	683a      	ldr	r2, [r7, #0]
 8023402:	4905      	ldr	r1, [pc, #20]	@ (8023418 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8023404:	4b05      	ldr	r3, [pc, #20]	@ (802341c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8023406:	0018      	movs	r0, r3
 8023408:	f7ff fd30 	bl	8022e6c <USBD_GetString>
  }
  return USBD_StrDesc;
 802340c:	4b02      	ldr	r3, [pc, #8]	@ (8023418 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 802340e:	0018      	movs	r0, r3
 8023410:	46bd      	mov	sp, r7
 8023412:	b002      	add	sp, #8
 8023414:	bd80      	pop	{r7, pc}
 8023416:	46c0      	nop			@ (mov r8, r8)
 8023418:	2000306c 	.word	0x2000306c
 802341c:	0802e4a8 	.word	0x0802e4a8

08023420 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8023420:	b580      	push	{r7, lr}
 8023422:	b084      	sub	sp, #16
 8023424:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8023426:	4b10      	ldr	r3, [pc, #64]	@ (8023468 <Get_SerialNum+0x48>)
 8023428:	681b      	ldr	r3, [r3, #0]
 802342a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 802342c:	4b0f      	ldr	r3, [pc, #60]	@ (802346c <Get_SerialNum+0x4c>)
 802342e:	681b      	ldr	r3, [r3, #0]
 8023430:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8023432:	4b0f      	ldr	r3, [pc, #60]	@ (8023470 <Get_SerialNum+0x50>)
 8023434:	681b      	ldr	r3, [r3, #0]
 8023436:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8023438:	68fa      	ldr	r2, [r7, #12]
 802343a:	687b      	ldr	r3, [r7, #4]
 802343c:	18d3      	adds	r3, r2, r3
 802343e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8023440:	68fb      	ldr	r3, [r7, #12]
 8023442:	2b00      	cmp	r3, #0
 8023444:	d00b      	beq.n	802345e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8023446:	490b      	ldr	r1, [pc, #44]	@ (8023474 <Get_SerialNum+0x54>)
 8023448:	68fb      	ldr	r3, [r7, #12]
 802344a:	2208      	movs	r2, #8
 802344c:	0018      	movs	r0, r3
 802344e:	f000 f815 	bl	802347c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8023452:	4909      	ldr	r1, [pc, #36]	@ (8023478 <Get_SerialNum+0x58>)
 8023454:	68bb      	ldr	r3, [r7, #8]
 8023456:	2204      	movs	r2, #4
 8023458:	0018      	movs	r0, r3
 802345a:	f000 f80f 	bl	802347c <IntToUnicode>
  }
}
 802345e:	46c0      	nop			@ (mov r8, r8)
 8023460:	46bd      	mov	sp, r7
 8023462:	b004      	add	sp, #16
 8023464:	bd80      	pop	{r7, pc}
 8023466:	46c0      	nop			@ (mov r8, r8)
 8023468:	1ff80050 	.word	0x1ff80050
 802346c:	1ff80054 	.word	0x1ff80054
 8023470:	1ff80058 	.word	0x1ff80058
 8023474:	2000025a 	.word	0x2000025a
 8023478:	2000026a 	.word	0x2000026a

0802347c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 802347c:	b580      	push	{r7, lr}
 802347e:	b086      	sub	sp, #24
 8023480:	af00      	add	r7, sp, #0
 8023482:	60f8      	str	r0, [r7, #12]
 8023484:	60b9      	str	r1, [r7, #8]
 8023486:	1dfb      	adds	r3, r7, #7
 8023488:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 802348a:	2117      	movs	r1, #23
 802348c:	187b      	adds	r3, r7, r1
 802348e:	2200      	movs	r2, #0
 8023490:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8023492:	187b      	adds	r3, r7, r1
 8023494:	2200      	movs	r2, #0
 8023496:	701a      	strb	r2, [r3, #0]
 8023498:	e02f      	b.n	80234fa <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 802349a:	68fb      	ldr	r3, [r7, #12]
 802349c:	0f1b      	lsrs	r3, r3, #28
 802349e:	2b09      	cmp	r3, #9
 80234a0:	d80d      	bhi.n	80234be <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80234a2:	68fb      	ldr	r3, [r7, #12]
 80234a4:	0f1b      	lsrs	r3, r3, #28
 80234a6:	b2da      	uxtb	r2, r3
 80234a8:	2317      	movs	r3, #23
 80234aa:	18fb      	adds	r3, r7, r3
 80234ac:	781b      	ldrb	r3, [r3, #0]
 80234ae:	005b      	lsls	r3, r3, #1
 80234b0:	0019      	movs	r1, r3
 80234b2:	68bb      	ldr	r3, [r7, #8]
 80234b4:	185b      	adds	r3, r3, r1
 80234b6:	3230      	adds	r2, #48	@ 0x30
 80234b8:	b2d2      	uxtb	r2, r2
 80234ba:	701a      	strb	r2, [r3, #0]
 80234bc:	e00c      	b.n	80234d8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80234be:	68fb      	ldr	r3, [r7, #12]
 80234c0:	0f1b      	lsrs	r3, r3, #28
 80234c2:	b2da      	uxtb	r2, r3
 80234c4:	2317      	movs	r3, #23
 80234c6:	18fb      	adds	r3, r7, r3
 80234c8:	781b      	ldrb	r3, [r3, #0]
 80234ca:	005b      	lsls	r3, r3, #1
 80234cc:	0019      	movs	r1, r3
 80234ce:	68bb      	ldr	r3, [r7, #8]
 80234d0:	185b      	adds	r3, r3, r1
 80234d2:	3237      	adds	r2, #55	@ 0x37
 80234d4:	b2d2      	uxtb	r2, r2
 80234d6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80234d8:	68fb      	ldr	r3, [r7, #12]
 80234da:	011b      	lsls	r3, r3, #4
 80234dc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80234de:	2117      	movs	r1, #23
 80234e0:	187b      	adds	r3, r7, r1
 80234e2:	781b      	ldrb	r3, [r3, #0]
 80234e4:	005b      	lsls	r3, r3, #1
 80234e6:	3301      	adds	r3, #1
 80234e8:	68ba      	ldr	r2, [r7, #8]
 80234ea:	18d3      	adds	r3, r2, r3
 80234ec:	2200      	movs	r2, #0
 80234ee:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80234f0:	187b      	adds	r3, r7, r1
 80234f2:	781a      	ldrb	r2, [r3, #0]
 80234f4:	187b      	adds	r3, r7, r1
 80234f6:	3201      	adds	r2, #1
 80234f8:	701a      	strb	r2, [r3, #0]
 80234fa:	2317      	movs	r3, #23
 80234fc:	18fa      	adds	r2, r7, r3
 80234fe:	1dfb      	adds	r3, r7, #7
 8023500:	7812      	ldrb	r2, [r2, #0]
 8023502:	781b      	ldrb	r3, [r3, #0]
 8023504:	429a      	cmp	r2, r3
 8023506:	d3c8      	bcc.n	802349a <IntToUnicode+0x1e>
  }
}
 8023508:	46c0      	nop			@ (mov r8, r8)
 802350a:	46c0      	nop			@ (mov r8, r8)
 802350c:	46bd      	mov	sp, r7
 802350e:	b006      	add	sp, #24
 8023510:	bd80      	pop	{r7, pc}
	...

08023514 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8023514:	b580      	push	{r7, lr}
 8023516:	b082      	sub	sp, #8
 8023518:	af00      	add	r7, sp, #0
 802351a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 802351c:	687b      	ldr	r3, [r7, #4]
 802351e:	681b      	ldr	r3, [r3, #0]
 8023520:	4a0a      	ldr	r2, [pc, #40]	@ (802354c <HAL_PCD_MspInit+0x38>)
 8023522:	4293      	cmp	r3, r2
 8023524:	d10e      	bne.n	8023544 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8023526:	4b0a      	ldr	r3, [pc, #40]	@ (8023550 <HAL_PCD_MspInit+0x3c>)
 8023528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802352a:	4b09      	ldr	r3, [pc, #36]	@ (8023550 <HAL_PCD_MspInit+0x3c>)
 802352c:	2180      	movs	r1, #128	@ 0x80
 802352e:	0409      	lsls	r1, r1, #16
 8023530:	430a      	orrs	r2, r1
 8023532:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8023534:	2200      	movs	r2, #0
 8023536:	2100      	movs	r1, #0
 8023538:	201f      	movs	r0, #31
 802353a:	f7f1 ffa7 	bl	801548c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 802353e:	201f      	movs	r0, #31
 8023540:	f7f1 ffb9 	bl	80154b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8023544:	46c0      	nop			@ (mov r8, r8)
 8023546:	46bd      	mov	sp, r7
 8023548:	b002      	add	sp, #8
 802354a:	bd80      	pop	{r7, pc}
 802354c:	40005c00 	.word	0x40005c00
 8023550:	40021000 	.word	0x40021000

08023554 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023554:	b580      	push	{r7, lr}
 8023556:	b082      	sub	sp, #8
 8023558:	af00      	add	r7, sp, #0
 802355a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 802355c:	687a      	ldr	r2, [r7, #4]
 802355e:	23bc      	movs	r3, #188	@ 0xbc
 8023560:	009b      	lsls	r3, r3, #2
 8023562:	58d2      	ldr	r2, [r2, r3]
 8023564:	687b      	ldr	r3, [r7, #4]
 8023566:	21ac      	movs	r1, #172	@ 0xac
 8023568:	0089      	lsls	r1, r1, #2
 802356a:	468c      	mov	ip, r1
 802356c:	4463      	add	r3, ip
 802356e:	0019      	movs	r1, r3
 8023570:	0010      	movs	r0, r2
 8023572:	f7fe fc11 	bl	8021d98 <USBD_LL_SetupStage>
}
 8023576:	46c0      	nop			@ (mov r8, r8)
 8023578:	46bd      	mov	sp, r7
 802357a:	b002      	add	sp, #8
 802357c:	bd80      	pop	{r7, pc}

0802357e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802357e:	b590      	push	{r4, r7, lr}
 8023580:	b083      	sub	sp, #12
 8023582:	af00      	add	r7, sp, #0
 8023584:	6078      	str	r0, [r7, #4]
 8023586:	000a      	movs	r2, r1
 8023588:	1cfb      	adds	r3, r7, #3
 802358a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 802358c:	687a      	ldr	r2, [r7, #4]
 802358e:	23bc      	movs	r3, #188	@ 0xbc
 8023590:	009b      	lsls	r3, r3, #2
 8023592:	58d4      	ldr	r4, [r2, r3]
 8023594:	1cfb      	adds	r3, r7, #3
 8023596:	781a      	ldrb	r2, [r3, #0]
 8023598:	6878      	ldr	r0, [r7, #4]
 802359a:	23be      	movs	r3, #190	@ 0xbe
 802359c:	0059      	lsls	r1, r3, #1
 802359e:	0013      	movs	r3, r2
 80235a0:	009b      	lsls	r3, r3, #2
 80235a2:	189b      	adds	r3, r3, r2
 80235a4:	00db      	lsls	r3, r3, #3
 80235a6:	18c3      	adds	r3, r0, r3
 80235a8:	185b      	adds	r3, r3, r1
 80235aa:	681a      	ldr	r2, [r3, #0]
 80235ac:	1cfb      	adds	r3, r7, #3
 80235ae:	781b      	ldrb	r3, [r3, #0]
 80235b0:	0019      	movs	r1, r3
 80235b2:	0020      	movs	r0, r4
 80235b4:	f7fe fc4e 	bl	8021e54 <USBD_LL_DataOutStage>
}
 80235b8:	46c0      	nop			@ (mov r8, r8)
 80235ba:	46bd      	mov	sp, r7
 80235bc:	b003      	add	sp, #12
 80235be:	bd90      	pop	{r4, r7, pc}

080235c0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80235c0:	b580      	push	{r7, lr}
 80235c2:	b082      	sub	sp, #8
 80235c4:	af00      	add	r7, sp, #0
 80235c6:	6078      	str	r0, [r7, #4]
 80235c8:	000a      	movs	r2, r1
 80235ca:	1cfb      	adds	r3, r7, #3
 80235cc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80235ce:	687a      	ldr	r2, [r7, #4]
 80235d0:	23bc      	movs	r3, #188	@ 0xbc
 80235d2:	009b      	lsls	r3, r3, #2
 80235d4:	58d0      	ldr	r0, [r2, r3]
 80235d6:	1cfb      	adds	r3, r7, #3
 80235d8:	781a      	ldrb	r2, [r3, #0]
 80235da:	6879      	ldr	r1, [r7, #4]
 80235dc:	0013      	movs	r3, r2
 80235de:	009b      	lsls	r3, r3, #2
 80235e0:	189b      	adds	r3, r3, r2
 80235e2:	00db      	lsls	r3, r3, #3
 80235e4:	18cb      	adds	r3, r1, r3
 80235e6:	333c      	adds	r3, #60	@ 0x3c
 80235e8:	681a      	ldr	r2, [r3, #0]
 80235ea:	1cfb      	adds	r3, r7, #3
 80235ec:	781b      	ldrb	r3, [r3, #0]
 80235ee:	0019      	movs	r1, r3
 80235f0:	f7fe fcb2 	bl	8021f58 <USBD_LL_DataInStage>
}
 80235f4:	46c0      	nop			@ (mov r8, r8)
 80235f6:	46bd      	mov	sp, r7
 80235f8:	b002      	add	sp, #8
 80235fa:	bd80      	pop	{r7, pc}

080235fc <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80235fc:	b580      	push	{r7, lr}
 80235fe:	b082      	sub	sp, #8
 8023600:	af00      	add	r7, sp, #0
 8023602:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8023604:	687a      	ldr	r2, [r7, #4]
 8023606:	23bc      	movs	r3, #188	@ 0xbc
 8023608:	009b      	lsls	r3, r3, #2
 802360a:	58d3      	ldr	r3, [r2, r3]
 802360c:	0018      	movs	r0, r3
 802360e:	f7fe fde9 	bl	80221e4 <USBD_LL_SOF>
}
 8023612:	46c0      	nop			@ (mov r8, r8)
 8023614:	46bd      	mov	sp, r7
 8023616:	b002      	add	sp, #8
 8023618:	bd80      	pop	{r7, pc}

0802361a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802361a:	b580      	push	{r7, lr}
 802361c:	b084      	sub	sp, #16
 802361e:	af00      	add	r7, sp, #0
 8023620:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8023622:	230f      	movs	r3, #15
 8023624:	18fb      	adds	r3, r7, r3
 8023626:	2201      	movs	r2, #1
 8023628:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 802362a:	687b      	ldr	r3, [r7, #4]
 802362c:	689b      	ldr	r3, [r3, #8]
 802362e:	2b02      	cmp	r3, #2
 8023630:	d001      	beq.n	8023636 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8023632:	f7e9 ffc7 	bl	800d5c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8023636:	687a      	ldr	r2, [r7, #4]
 8023638:	23bc      	movs	r3, #188	@ 0xbc
 802363a:	009b      	lsls	r3, r3, #2
 802363c:	58d2      	ldr	r2, [r2, r3]
 802363e:	230f      	movs	r3, #15
 8023640:	18fb      	adds	r3, r7, r3
 8023642:	781b      	ldrb	r3, [r3, #0]
 8023644:	0019      	movs	r1, r3
 8023646:	0010      	movs	r0, r2
 8023648:	f7fe fd8b 	bl	8022162 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802364c:	687a      	ldr	r2, [r7, #4]
 802364e:	23bc      	movs	r3, #188	@ 0xbc
 8023650:	009b      	lsls	r3, r3, #2
 8023652:	58d3      	ldr	r3, [r2, r3]
 8023654:	0018      	movs	r0, r3
 8023656:	f7fe fd3c 	bl	80220d2 <USBD_LL_Reset>
}
 802365a:	46c0      	nop			@ (mov r8, r8)
 802365c:	46bd      	mov	sp, r7
 802365e:	b004      	add	sp, #16
 8023660:	bd80      	pop	{r7, pc}
	...

08023664 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023664:	b580      	push	{r7, lr}
 8023666:	b082      	sub	sp, #8
 8023668:	af00      	add	r7, sp, #0
 802366a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 802366c:	687a      	ldr	r2, [r7, #4]
 802366e:	23bc      	movs	r3, #188	@ 0xbc
 8023670:	009b      	lsls	r3, r3, #2
 8023672:	58d3      	ldr	r3, [r2, r3]
 8023674:	0018      	movs	r0, r3
 8023676:	f7fe fd85 	bl	8022184 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802367a:	687b      	ldr	r3, [r7, #4]
 802367c:	699b      	ldr	r3, [r3, #24]
 802367e:	2b00      	cmp	r3, #0
 8023680:	d005      	beq.n	802368e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023682:	4b05      	ldr	r3, [pc, #20]	@ (8023698 <HAL_PCD_SuspendCallback+0x34>)
 8023684:	691a      	ldr	r2, [r3, #16]
 8023686:	4b04      	ldr	r3, [pc, #16]	@ (8023698 <HAL_PCD_SuspendCallback+0x34>)
 8023688:	2106      	movs	r1, #6
 802368a:	430a      	orrs	r2, r1
 802368c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 802368e:	46c0      	nop			@ (mov r8, r8)
 8023690:	46bd      	mov	sp, r7
 8023692:	b002      	add	sp, #8
 8023694:	bd80      	pop	{r7, pc}
 8023696:	46c0      	nop			@ (mov r8, r8)
 8023698:	e000ed00 	.word	0xe000ed00

0802369c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802369c:	b580      	push	{r7, lr}
 802369e:	b082      	sub	sp, #8
 80236a0:	af00      	add	r7, sp, #0
 80236a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80236a4:	687b      	ldr	r3, [r7, #4]
 80236a6:	699b      	ldr	r3, [r3, #24]
 80236a8:	2b00      	cmp	r3, #0
 80236aa:	d007      	beq.n	80236bc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80236ac:	4b09      	ldr	r3, [pc, #36]	@ (80236d4 <HAL_PCD_ResumeCallback+0x38>)
 80236ae:	691a      	ldr	r2, [r3, #16]
 80236b0:	4b08      	ldr	r3, [pc, #32]	@ (80236d4 <HAL_PCD_ResumeCallback+0x38>)
 80236b2:	2106      	movs	r1, #6
 80236b4:	438a      	bics	r2, r1
 80236b6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80236b8:	f000 fa44 	bl	8023b44 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80236bc:	687a      	ldr	r2, [r7, #4]
 80236be:	23bc      	movs	r3, #188	@ 0xbc
 80236c0:	009b      	lsls	r3, r3, #2
 80236c2:	58d3      	ldr	r3, [r2, r3]
 80236c4:	0018      	movs	r0, r3
 80236c6:	f7fe fd75 	bl	80221b4 <USBD_LL_Resume>
}
 80236ca:	46c0      	nop			@ (mov r8, r8)
 80236cc:	46bd      	mov	sp, r7
 80236ce:	b002      	add	sp, #8
 80236d0:	bd80      	pop	{r7, pc}
 80236d2:	46c0      	nop			@ (mov r8, r8)
 80236d4:	e000ed00 	.word	0xe000ed00

080236d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80236d8:	b580      	push	{r7, lr}
 80236da:	b082      	sub	sp, #8
 80236dc:	af00      	add	r7, sp, #0
 80236de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80236e0:	4a2d      	ldr	r2, [pc, #180]	@ (8023798 <USBD_LL_Init+0xc0>)
 80236e2:	23bc      	movs	r3, #188	@ 0xbc
 80236e4:	009b      	lsls	r3, r3, #2
 80236e6:	6879      	ldr	r1, [r7, #4]
 80236e8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80236ea:	687a      	ldr	r2, [r7, #4]
 80236ec:	23b0      	movs	r3, #176	@ 0xb0
 80236ee:	009b      	lsls	r3, r3, #2
 80236f0:	4929      	ldr	r1, [pc, #164]	@ (8023798 <USBD_LL_Init+0xc0>)
 80236f2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80236f4:	4b28      	ldr	r3, [pc, #160]	@ (8023798 <USBD_LL_Init+0xc0>)
 80236f6:	4a29      	ldr	r2, [pc, #164]	@ (802379c <USBD_LL_Init+0xc4>)
 80236f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80236fa:	4b27      	ldr	r3, [pc, #156]	@ (8023798 <USBD_LL_Init+0xc0>)
 80236fc:	2208      	movs	r2, #8
 80236fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8023700:	4b25      	ldr	r3, [pc, #148]	@ (8023798 <USBD_LL_Init+0xc0>)
 8023702:	2202      	movs	r2, #2
 8023704:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8023706:	4b24      	ldr	r3, [pc, #144]	@ (8023798 <USBD_LL_Init+0xc0>)
 8023708:	2202      	movs	r2, #2
 802370a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 802370c:	4b22      	ldr	r3, [pc, #136]	@ (8023798 <USBD_LL_Init+0xc0>)
 802370e:	2200      	movs	r2, #0
 8023710:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8023712:	4b21      	ldr	r3, [pc, #132]	@ (8023798 <USBD_LL_Init+0xc0>)
 8023714:	2200      	movs	r2, #0
 8023716:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8023718:	4b1f      	ldr	r3, [pc, #124]	@ (8023798 <USBD_LL_Init+0xc0>)
 802371a:	2200      	movs	r2, #0
 802371c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 802371e:	4b1e      	ldr	r3, [pc, #120]	@ (8023798 <USBD_LL_Init+0xc0>)
 8023720:	0018      	movs	r0, r3
 8023722:	f7f5 ff69 	bl	80195f8 <HAL_PCD_Init>
 8023726:	1e03      	subs	r3, r0, #0
 8023728:	d001      	beq.n	802372e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 802372a:	f7e9 ff4b 	bl	800d5c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 802372e:	687a      	ldr	r2, [r7, #4]
 8023730:	23b0      	movs	r3, #176	@ 0xb0
 8023732:	009b      	lsls	r3, r3, #2
 8023734:	58d0      	ldr	r0, [r2, r3]
 8023736:	2318      	movs	r3, #24
 8023738:	2200      	movs	r2, #0
 802373a:	2100      	movs	r1, #0
 802373c:	f7f7 fd2a 	bl	801b194 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8023740:	687a      	ldr	r2, [r7, #4]
 8023742:	23b0      	movs	r3, #176	@ 0xb0
 8023744:	009b      	lsls	r3, r3, #2
 8023746:	58d0      	ldr	r0, [r2, r3]
 8023748:	2358      	movs	r3, #88	@ 0x58
 802374a:	2200      	movs	r2, #0
 802374c:	2180      	movs	r1, #128	@ 0x80
 802374e:	f7f7 fd21 	bl	801b194 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8023752:	687a      	ldr	r2, [r7, #4]
 8023754:	23b0      	movs	r3, #176	@ 0xb0
 8023756:	009b      	lsls	r3, r3, #2
 8023758:	58d0      	ldr	r0, [r2, r3]
 802375a:	23c0      	movs	r3, #192	@ 0xc0
 802375c:	2200      	movs	r2, #0
 802375e:	2181      	movs	r1, #129	@ 0x81
 8023760:	f7f7 fd18 	bl	801b194 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8023764:	687a      	ldr	r2, [r7, #4]
 8023766:	23b0      	movs	r3, #176	@ 0xb0
 8023768:	009b      	lsls	r3, r3, #2
 802376a:	58d0      	ldr	r0, [r2, r3]
 802376c:	2388      	movs	r3, #136	@ 0x88
 802376e:	005b      	lsls	r3, r3, #1
 8023770:	2200      	movs	r2, #0
 8023772:	2101      	movs	r1, #1
 8023774:	f7f7 fd0e 	bl	801b194 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8023778:	687a      	ldr	r2, [r7, #4]
 802377a:	23b0      	movs	r3, #176	@ 0xb0
 802377c:	009b      	lsls	r3, r3, #2
 802377e:	58d0      	ldr	r0, [r2, r3]
 8023780:	2380      	movs	r3, #128	@ 0x80
 8023782:	005b      	lsls	r3, r3, #1
 8023784:	2200      	movs	r2, #0
 8023786:	2182      	movs	r1, #130	@ 0x82
 8023788:	f7f7 fd04 	bl	801b194 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 802378c:	2300      	movs	r3, #0
}
 802378e:	0018      	movs	r0, r3
 8023790:	46bd      	mov	sp, r7
 8023792:	b002      	add	sp, #8
 8023794:	bd80      	pop	{r7, pc}
 8023796:	46c0      	nop			@ (mov r8, r8)
 8023798:	2000326c 	.word	0x2000326c
 802379c:	40005c00 	.word	0x40005c00

080237a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80237a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80237a2:	b085      	sub	sp, #20
 80237a4:	af00      	add	r7, sp, #0
 80237a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80237a8:	210f      	movs	r1, #15
 80237aa:	187b      	adds	r3, r7, r1
 80237ac:	2200      	movs	r2, #0
 80237ae:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80237b0:	260e      	movs	r6, #14
 80237b2:	19bb      	adds	r3, r7, r6
 80237b4:	2200      	movs	r2, #0
 80237b6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80237b8:	687a      	ldr	r2, [r7, #4]
 80237ba:	23b0      	movs	r3, #176	@ 0xb0
 80237bc:	009b      	lsls	r3, r3, #2
 80237be:	58d3      	ldr	r3, [r2, r3]
 80237c0:	000d      	movs	r5, r1
 80237c2:	187c      	adds	r4, r7, r1
 80237c4:	0018      	movs	r0, r3
 80237c6:	f7f6 f817 	bl	80197f8 <HAL_PCD_Start>
 80237ca:	0003      	movs	r3, r0
 80237cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80237ce:	19bc      	adds	r4, r7, r6
 80237d0:	197b      	adds	r3, r7, r5
 80237d2:	781b      	ldrb	r3, [r3, #0]
 80237d4:	0018      	movs	r0, r3
 80237d6:	f000 f9bc 	bl	8023b52 <USBD_Get_USB_Status>
 80237da:	0003      	movs	r3, r0
 80237dc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80237de:	19bb      	adds	r3, r7, r6
 80237e0:	781b      	ldrb	r3, [r3, #0]
}
 80237e2:	0018      	movs	r0, r3
 80237e4:	46bd      	mov	sp, r7
 80237e6:	b005      	add	sp, #20
 80237e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080237ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80237ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80237ec:	b085      	sub	sp, #20
 80237ee:	af00      	add	r7, sp, #0
 80237f0:	6078      	str	r0, [r7, #4]
 80237f2:	000c      	movs	r4, r1
 80237f4:	0010      	movs	r0, r2
 80237f6:	0019      	movs	r1, r3
 80237f8:	1cfb      	adds	r3, r7, #3
 80237fa:	1c22      	adds	r2, r4, #0
 80237fc:	701a      	strb	r2, [r3, #0]
 80237fe:	1cbb      	adds	r3, r7, #2
 8023800:	1c02      	adds	r2, r0, #0
 8023802:	701a      	strb	r2, [r3, #0]
 8023804:	003b      	movs	r3, r7
 8023806:	1c0a      	adds	r2, r1, #0
 8023808:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802380a:	260f      	movs	r6, #15
 802380c:	19bb      	adds	r3, r7, r6
 802380e:	2200      	movs	r2, #0
 8023810:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023812:	250e      	movs	r5, #14
 8023814:	197b      	adds	r3, r7, r5
 8023816:	2200      	movs	r2, #0
 8023818:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802381a:	687a      	ldr	r2, [r7, #4]
 802381c:	23b0      	movs	r3, #176	@ 0xb0
 802381e:	009b      	lsls	r3, r3, #2
 8023820:	58d0      	ldr	r0, [r2, r3]
 8023822:	19bc      	adds	r4, r7, r6
 8023824:	1cbb      	adds	r3, r7, #2
 8023826:	781d      	ldrb	r5, [r3, #0]
 8023828:	003b      	movs	r3, r7
 802382a:	881a      	ldrh	r2, [r3, #0]
 802382c:	1cfb      	adds	r3, r7, #3
 802382e:	7819      	ldrb	r1, [r3, #0]
 8023830:	002b      	movs	r3, r5
 8023832:	f7f6 f976 	bl	8019b22 <HAL_PCD_EP_Open>
 8023836:	0003      	movs	r3, r0
 8023838:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802383a:	250e      	movs	r5, #14
 802383c:	197c      	adds	r4, r7, r5
 802383e:	19bb      	adds	r3, r7, r6
 8023840:	781b      	ldrb	r3, [r3, #0]
 8023842:	0018      	movs	r0, r3
 8023844:	f000 f985 	bl	8023b52 <USBD_Get_USB_Status>
 8023848:	0003      	movs	r3, r0
 802384a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802384c:	197b      	adds	r3, r7, r5
 802384e:	781b      	ldrb	r3, [r3, #0]
}
 8023850:	0018      	movs	r0, r3
 8023852:	46bd      	mov	sp, r7
 8023854:	b005      	add	sp, #20
 8023856:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023858 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023858:	b5f0      	push	{r4, r5, r6, r7, lr}
 802385a:	b085      	sub	sp, #20
 802385c:	af00      	add	r7, sp, #0
 802385e:	6078      	str	r0, [r7, #4]
 8023860:	000a      	movs	r2, r1
 8023862:	1cfb      	adds	r3, r7, #3
 8023864:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023866:	210f      	movs	r1, #15
 8023868:	187b      	adds	r3, r7, r1
 802386a:	2200      	movs	r2, #0
 802386c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802386e:	260e      	movs	r6, #14
 8023870:	19bb      	adds	r3, r7, r6
 8023872:	2200      	movs	r2, #0
 8023874:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023876:	687a      	ldr	r2, [r7, #4]
 8023878:	23b0      	movs	r3, #176	@ 0xb0
 802387a:	009b      	lsls	r3, r3, #2
 802387c:	58d2      	ldr	r2, [r2, r3]
 802387e:	000d      	movs	r5, r1
 8023880:	187c      	adds	r4, r7, r1
 8023882:	1cfb      	adds	r3, r7, #3
 8023884:	781b      	ldrb	r3, [r3, #0]
 8023886:	0019      	movs	r1, r3
 8023888:	0010      	movs	r0, r2
 802388a:	f7f6 f9b9 	bl	8019c00 <HAL_PCD_EP_Close>
 802388e:	0003      	movs	r3, r0
 8023890:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023892:	19bc      	adds	r4, r7, r6
 8023894:	197b      	adds	r3, r7, r5
 8023896:	781b      	ldrb	r3, [r3, #0]
 8023898:	0018      	movs	r0, r3
 802389a:	f000 f95a 	bl	8023b52 <USBD_Get_USB_Status>
 802389e:	0003      	movs	r3, r0
 80238a0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80238a2:	19bb      	adds	r3, r7, r6
 80238a4:	781b      	ldrb	r3, [r3, #0]
}
 80238a6:	0018      	movs	r0, r3
 80238a8:	46bd      	mov	sp, r7
 80238aa:	b005      	add	sp, #20
 80238ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080238ae <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80238ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80238b0:	b085      	sub	sp, #20
 80238b2:	af00      	add	r7, sp, #0
 80238b4:	6078      	str	r0, [r7, #4]
 80238b6:	000a      	movs	r2, r1
 80238b8:	1cfb      	adds	r3, r7, #3
 80238ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80238bc:	210f      	movs	r1, #15
 80238be:	187b      	adds	r3, r7, r1
 80238c0:	2200      	movs	r2, #0
 80238c2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80238c4:	260e      	movs	r6, #14
 80238c6:	19bb      	adds	r3, r7, r6
 80238c8:	2200      	movs	r2, #0
 80238ca:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80238cc:	687a      	ldr	r2, [r7, #4]
 80238ce:	23b0      	movs	r3, #176	@ 0xb0
 80238d0:	009b      	lsls	r3, r3, #2
 80238d2:	58d2      	ldr	r2, [r2, r3]
 80238d4:	000d      	movs	r5, r1
 80238d6:	187c      	adds	r4, r7, r1
 80238d8:	1cfb      	adds	r3, r7, #3
 80238da:	781b      	ldrb	r3, [r3, #0]
 80238dc:	0019      	movs	r1, r3
 80238de:	0010      	movs	r0, r2
 80238e0:	f7f6 fa6b 	bl	8019dba <HAL_PCD_EP_SetStall>
 80238e4:	0003      	movs	r3, r0
 80238e6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80238e8:	19bc      	adds	r4, r7, r6
 80238ea:	197b      	adds	r3, r7, r5
 80238ec:	781b      	ldrb	r3, [r3, #0]
 80238ee:	0018      	movs	r0, r3
 80238f0:	f000 f92f 	bl	8023b52 <USBD_Get_USB_Status>
 80238f4:	0003      	movs	r3, r0
 80238f6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80238f8:	19bb      	adds	r3, r7, r6
 80238fa:	781b      	ldrb	r3, [r3, #0]
}
 80238fc:	0018      	movs	r0, r3
 80238fe:	46bd      	mov	sp, r7
 8023900:	b005      	add	sp, #20
 8023902:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023904 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023906:	b085      	sub	sp, #20
 8023908:	af00      	add	r7, sp, #0
 802390a:	6078      	str	r0, [r7, #4]
 802390c:	000a      	movs	r2, r1
 802390e:	1cfb      	adds	r3, r7, #3
 8023910:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023912:	210f      	movs	r1, #15
 8023914:	187b      	adds	r3, r7, r1
 8023916:	2200      	movs	r2, #0
 8023918:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802391a:	260e      	movs	r6, #14
 802391c:	19bb      	adds	r3, r7, r6
 802391e:	2200      	movs	r2, #0
 8023920:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023922:	687a      	ldr	r2, [r7, #4]
 8023924:	23b0      	movs	r3, #176	@ 0xb0
 8023926:	009b      	lsls	r3, r3, #2
 8023928:	58d2      	ldr	r2, [r2, r3]
 802392a:	000d      	movs	r5, r1
 802392c:	187c      	adds	r4, r7, r1
 802392e:	1cfb      	adds	r3, r7, #3
 8023930:	781b      	ldrb	r3, [r3, #0]
 8023932:	0019      	movs	r1, r3
 8023934:	0010      	movs	r0, r2
 8023936:	f7f6 fa9c 	bl	8019e72 <HAL_PCD_EP_ClrStall>
 802393a:	0003      	movs	r3, r0
 802393c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802393e:	19bc      	adds	r4, r7, r6
 8023940:	197b      	adds	r3, r7, r5
 8023942:	781b      	ldrb	r3, [r3, #0]
 8023944:	0018      	movs	r0, r3
 8023946:	f000 f904 	bl	8023b52 <USBD_Get_USB_Status>
 802394a:	0003      	movs	r3, r0
 802394c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 802394e:	19bb      	adds	r3, r7, r6
 8023950:	781b      	ldrb	r3, [r3, #0]
}
 8023952:	0018      	movs	r0, r3
 8023954:	46bd      	mov	sp, r7
 8023956:	b005      	add	sp, #20
 8023958:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802395a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802395a:	b580      	push	{r7, lr}
 802395c:	b084      	sub	sp, #16
 802395e:	af00      	add	r7, sp, #0
 8023960:	6078      	str	r0, [r7, #4]
 8023962:	000a      	movs	r2, r1
 8023964:	1cfb      	adds	r3, r7, #3
 8023966:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8023968:	687a      	ldr	r2, [r7, #4]
 802396a:	23b0      	movs	r3, #176	@ 0xb0
 802396c:	009b      	lsls	r3, r3, #2
 802396e:	58d3      	ldr	r3, [r2, r3]
 8023970:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8023972:	1cfb      	adds	r3, r7, #3
 8023974:	781b      	ldrb	r3, [r3, #0]
 8023976:	b25b      	sxtb	r3, r3
 8023978:	2b00      	cmp	r3, #0
 802397a:	da0d      	bge.n	8023998 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802397c:	1cfb      	adds	r3, r7, #3
 802397e:	781b      	ldrb	r3, [r3, #0]
 8023980:	227f      	movs	r2, #127	@ 0x7f
 8023982:	4013      	ands	r3, r2
 8023984:	68f9      	ldr	r1, [r7, #12]
 8023986:	1c5a      	adds	r2, r3, #1
 8023988:	0013      	movs	r3, r2
 802398a:	009b      	lsls	r3, r3, #2
 802398c:	189b      	adds	r3, r3, r2
 802398e:	00db      	lsls	r3, r3, #3
 8023990:	18cb      	adds	r3, r1, r3
 8023992:	3302      	adds	r3, #2
 8023994:	781b      	ldrb	r3, [r3, #0]
 8023996:	e00d      	b.n	80239b4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8023998:	1cfb      	adds	r3, r7, #3
 802399a:	781b      	ldrb	r3, [r3, #0]
 802399c:	227f      	movs	r2, #127	@ 0x7f
 802399e:	401a      	ands	r2, r3
 80239a0:	68f8      	ldr	r0, [r7, #12]
 80239a2:	23b5      	movs	r3, #181	@ 0xb5
 80239a4:	0059      	lsls	r1, r3, #1
 80239a6:	0013      	movs	r3, r2
 80239a8:	009b      	lsls	r3, r3, #2
 80239aa:	189b      	adds	r3, r3, r2
 80239ac:	00db      	lsls	r3, r3, #3
 80239ae:	18c3      	adds	r3, r0, r3
 80239b0:	185b      	adds	r3, r3, r1
 80239b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80239b4:	0018      	movs	r0, r3
 80239b6:	46bd      	mov	sp, r7
 80239b8:	b004      	add	sp, #16
 80239ba:	bd80      	pop	{r7, pc}

080239bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80239bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80239be:	b085      	sub	sp, #20
 80239c0:	af00      	add	r7, sp, #0
 80239c2:	6078      	str	r0, [r7, #4]
 80239c4:	000a      	movs	r2, r1
 80239c6:	1cfb      	adds	r3, r7, #3
 80239c8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80239ca:	210f      	movs	r1, #15
 80239cc:	187b      	adds	r3, r7, r1
 80239ce:	2200      	movs	r2, #0
 80239d0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80239d2:	260e      	movs	r6, #14
 80239d4:	19bb      	adds	r3, r7, r6
 80239d6:	2200      	movs	r2, #0
 80239d8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80239da:	687a      	ldr	r2, [r7, #4]
 80239dc:	23b0      	movs	r3, #176	@ 0xb0
 80239de:	009b      	lsls	r3, r3, #2
 80239e0:	58d2      	ldr	r2, [r2, r3]
 80239e2:	000d      	movs	r5, r1
 80239e4:	187c      	adds	r4, r7, r1
 80239e6:	1cfb      	adds	r3, r7, #3
 80239e8:	781b      	ldrb	r3, [r3, #0]
 80239ea:	0019      	movs	r1, r3
 80239ec:	0010      	movs	r0, r2
 80239ee:	f7f6 f86d 	bl	8019acc <HAL_PCD_SetAddress>
 80239f2:	0003      	movs	r3, r0
 80239f4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80239f6:	19bc      	adds	r4, r7, r6
 80239f8:	197b      	adds	r3, r7, r5
 80239fa:	781b      	ldrb	r3, [r3, #0]
 80239fc:	0018      	movs	r0, r3
 80239fe:	f000 f8a8 	bl	8023b52 <USBD_Get_USB_Status>
 8023a02:	0003      	movs	r3, r0
 8023a04:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023a06:	19bb      	adds	r3, r7, r6
 8023a08:	781b      	ldrb	r3, [r3, #0]
}
 8023a0a:	0018      	movs	r0, r3
 8023a0c:	46bd      	mov	sp, r7
 8023a0e:	b005      	add	sp, #20
 8023a10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023a12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8023a12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a14:	b087      	sub	sp, #28
 8023a16:	af00      	add	r7, sp, #0
 8023a18:	60f8      	str	r0, [r7, #12]
 8023a1a:	0008      	movs	r0, r1
 8023a1c:	607a      	str	r2, [r7, #4]
 8023a1e:	0019      	movs	r1, r3
 8023a20:	230b      	movs	r3, #11
 8023a22:	18fb      	adds	r3, r7, r3
 8023a24:	1c02      	adds	r2, r0, #0
 8023a26:	701a      	strb	r2, [r3, #0]
 8023a28:	2408      	movs	r4, #8
 8023a2a:	193b      	adds	r3, r7, r4
 8023a2c:	1c0a      	adds	r2, r1, #0
 8023a2e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023a30:	2117      	movs	r1, #23
 8023a32:	187b      	adds	r3, r7, r1
 8023a34:	2200      	movs	r2, #0
 8023a36:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023a38:	2516      	movs	r5, #22
 8023a3a:	197b      	adds	r3, r7, r5
 8023a3c:	2200      	movs	r2, #0
 8023a3e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023a40:	68fa      	ldr	r2, [r7, #12]
 8023a42:	23b0      	movs	r3, #176	@ 0xb0
 8023a44:	009b      	lsls	r3, r3, #2
 8023a46:	58d0      	ldr	r0, [r2, r3]
 8023a48:	193b      	adds	r3, r7, r4
 8023a4a:	881d      	ldrh	r5, [r3, #0]
 8023a4c:	000e      	movs	r6, r1
 8023a4e:	187c      	adds	r4, r7, r1
 8023a50:	687a      	ldr	r2, [r7, #4]
 8023a52:	230b      	movs	r3, #11
 8023a54:	18fb      	adds	r3, r7, r3
 8023a56:	7819      	ldrb	r1, [r3, #0]
 8023a58:	002b      	movs	r3, r5
 8023a5a:	f7f6 f972 	bl	8019d42 <HAL_PCD_EP_Transmit>
 8023a5e:	0003      	movs	r3, r0
 8023a60:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023a62:	2516      	movs	r5, #22
 8023a64:	197c      	adds	r4, r7, r5
 8023a66:	19bb      	adds	r3, r7, r6
 8023a68:	781b      	ldrb	r3, [r3, #0]
 8023a6a:	0018      	movs	r0, r3
 8023a6c:	f000 f871 	bl	8023b52 <USBD_Get_USB_Status>
 8023a70:	0003      	movs	r3, r0
 8023a72:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023a74:	197b      	adds	r3, r7, r5
 8023a76:	781b      	ldrb	r3, [r3, #0]
}
 8023a78:	0018      	movs	r0, r3
 8023a7a:	46bd      	mov	sp, r7
 8023a7c:	b007      	add	sp, #28
 8023a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023a80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8023a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023a82:	b087      	sub	sp, #28
 8023a84:	af00      	add	r7, sp, #0
 8023a86:	60f8      	str	r0, [r7, #12]
 8023a88:	0008      	movs	r0, r1
 8023a8a:	607a      	str	r2, [r7, #4]
 8023a8c:	0019      	movs	r1, r3
 8023a8e:	230b      	movs	r3, #11
 8023a90:	18fb      	adds	r3, r7, r3
 8023a92:	1c02      	adds	r2, r0, #0
 8023a94:	701a      	strb	r2, [r3, #0]
 8023a96:	2408      	movs	r4, #8
 8023a98:	193b      	adds	r3, r7, r4
 8023a9a:	1c0a      	adds	r2, r1, #0
 8023a9c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8023a9e:	2117      	movs	r1, #23
 8023aa0:	187b      	adds	r3, r7, r1
 8023aa2:	2200      	movs	r2, #0
 8023aa4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023aa6:	2516      	movs	r5, #22
 8023aa8:	197b      	adds	r3, r7, r5
 8023aaa:	2200      	movs	r2, #0
 8023aac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023aae:	68fa      	ldr	r2, [r7, #12]
 8023ab0:	23b0      	movs	r3, #176	@ 0xb0
 8023ab2:	009b      	lsls	r3, r3, #2
 8023ab4:	58d0      	ldr	r0, [r2, r3]
 8023ab6:	193b      	adds	r3, r7, r4
 8023ab8:	881d      	ldrh	r5, [r3, #0]
 8023aba:	000e      	movs	r6, r1
 8023abc:	187c      	adds	r4, r7, r1
 8023abe:	687a      	ldr	r2, [r7, #4]
 8023ac0:	230b      	movs	r3, #11
 8023ac2:	18fb      	adds	r3, r7, r3
 8023ac4:	7819      	ldrb	r1, [r3, #0]
 8023ac6:	002b      	movs	r3, r5
 8023ac8:	f7f6 f8eb 	bl	8019ca2 <HAL_PCD_EP_Receive>
 8023acc:	0003      	movs	r3, r0
 8023ace:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8023ad0:	2516      	movs	r5, #22
 8023ad2:	197c      	adds	r4, r7, r5
 8023ad4:	19bb      	adds	r3, r7, r6
 8023ad6:	781b      	ldrb	r3, [r3, #0]
 8023ad8:	0018      	movs	r0, r3
 8023ada:	f000 f83a 	bl	8023b52 <USBD_Get_USB_Status>
 8023ade:	0003      	movs	r3, r0
 8023ae0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8023ae2:	197b      	adds	r3, r7, r5
 8023ae4:	781b      	ldrb	r3, [r3, #0]
}
 8023ae6:	0018      	movs	r0, r3
 8023ae8:	46bd      	mov	sp, r7
 8023aea:	b007      	add	sp, #28
 8023aec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023aee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8023aee:	b580      	push	{r7, lr}
 8023af0:	b082      	sub	sp, #8
 8023af2:	af00      	add	r7, sp, #0
 8023af4:	6078      	str	r0, [r7, #4]
 8023af6:	000a      	movs	r2, r1
 8023af8:	1cfb      	adds	r3, r7, #3
 8023afa:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8023afc:	687a      	ldr	r2, [r7, #4]
 8023afe:	23b0      	movs	r3, #176	@ 0xb0
 8023b00:	009b      	lsls	r3, r3, #2
 8023b02:	58d2      	ldr	r2, [r2, r3]
 8023b04:	1cfb      	adds	r3, r7, #3
 8023b06:	781b      	ldrb	r3, [r3, #0]
 8023b08:	0019      	movs	r1, r3
 8023b0a:	0010      	movs	r0, r2
 8023b0c:	f7f6 f900 	bl	8019d10 <HAL_PCD_EP_GetRxCount>
 8023b10:	0003      	movs	r3, r0
}
 8023b12:	0018      	movs	r0, r3
 8023b14:	46bd      	mov	sp, r7
 8023b16:	b002      	add	sp, #8
 8023b18:	bd80      	pop	{r7, pc}
	...

08023b1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8023b1c:	b580      	push	{r7, lr}
 8023b1e:	b082      	sub	sp, #8
 8023b20:	af00      	add	r7, sp, #0
 8023b22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8023b24:	4b02      	ldr	r3, [pc, #8]	@ (8023b30 <USBD_static_malloc+0x14>)
}
 8023b26:	0018      	movs	r0, r3
 8023b28:	46bd      	mov	sp, r7
 8023b2a:	b002      	add	sp, #8
 8023b2c:	bd80      	pop	{r7, pc}
 8023b2e:	46c0      	nop			@ (mov r8, r8)
 8023b30:	20003560 	.word	0x20003560

08023b34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8023b34:	b580      	push	{r7, lr}
 8023b36:	b082      	sub	sp, #8
 8023b38:	af00      	add	r7, sp, #0
 8023b3a:	6078      	str	r0, [r7, #4]

}
 8023b3c:	46c0      	nop			@ (mov r8, r8)
 8023b3e:	46bd      	mov	sp, r7
 8023b40:	b002      	add	sp, #8
 8023b42:	bd80      	pop	{r7, pc}

08023b44 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8023b44:	b580      	push	{r7, lr}
 8023b46:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8023b48:	f7e9 fbd0 	bl	800d2ec <SystemClock_Config>
}
 8023b4c:	46c0      	nop			@ (mov r8, r8)
 8023b4e:	46bd      	mov	sp, r7
 8023b50:	bd80      	pop	{r7, pc}

08023b52 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8023b52:	b580      	push	{r7, lr}
 8023b54:	b084      	sub	sp, #16
 8023b56:	af00      	add	r7, sp, #0
 8023b58:	0002      	movs	r2, r0
 8023b5a:	1dfb      	adds	r3, r7, #7
 8023b5c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8023b5e:	230f      	movs	r3, #15
 8023b60:	18fb      	adds	r3, r7, r3
 8023b62:	2200      	movs	r2, #0
 8023b64:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8023b66:	1dfb      	adds	r3, r7, #7
 8023b68:	781b      	ldrb	r3, [r3, #0]
 8023b6a:	2b03      	cmp	r3, #3
 8023b6c:	d017      	beq.n	8023b9e <USBD_Get_USB_Status+0x4c>
 8023b6e:	dc1b      	bgt.n	8023ba8 <USBD_Get_USB_Status+0x56>
 8023b70:	2b02      	cmp	r3, #2
 8023b72:	d00f      	beq.n	8023b94 <USBD_Get_USB_Status+0x42>
 8023b74:	dc18      	bgt.n	8023ba8 <USBD_Get_USB_Status+0x56>
 8023b76:	2b00      	cmp	r3, #0
 8023b78:	d002      	beq.n	8023b80 <USBD_Get_USB_Status+0x2e>
 8023b7a:	2b01      	cmp	r3, #1
 8023b7c:	d005      	beq.n	8023b8a <USBD_Get_USB_Status+0x38>
 8023b7e:	e013      	b.n	8023ba8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8023b80:	230f      	movs	r3, #15
 8023b82:	18fb      	adds	r3, r7, r3
 8023b84:	2200      	movs	r2, #0
 8023b86:	701a      	strb	r2, [r3, #0]
    break;
 8023b88:	e013      	b.n	8023bb2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8023b8a:	230f      	movs	r3, #15
 8023b8c:	18fb      	adds	r3, r7, r3
 8023b8e:	2202      	movs	r2, #2
 8023b90:	701a      	strb	r2, [r3, #0]
    break;
 8023b92:	e00e      	b.n	8023bb2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8023b94:	230f      	movs	r3, #15
 8023b96:	18fb      	adds	r3, r7, r3
 8023b98:	2201      	movs	r2, #1
 8023b9a:	701a      	strb	r2, [r3, #0]
    break;
 8023b9c:	e009      	b.n	8023bb2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8023b9e:	230f      	movs	r3, #15
 8023ba0:	18fb      	adds	r3, r7, r3
 8023ba2:	2202      	movs	r2, #2
 8023ba4:	701a      	strb	r2, [r3, #0]
    break;
 8023ba6:	e004      	b.n	8023bb2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8023ba8:	230f      	movs	r3, #15
 8023baa:	18fb      	adds	r3, r7, r3
 8023bac:	2202      	movs	r2, #2
 8023bae:	701a      	strb	r2, [r3, #0]
    break;
 8023bb0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8023bb2:	230f      	movs	r3, #15
 8023bb4:	18fb      	adds	r3, r7, r3
 8023bb6:	781b      	ldrb	r3, [r3, #0]
}
 8023bb8:	0018      	movs	r0, r3
 8023bba:	46bd      	mov	sp, r7
 8023bbc:	b004      	add	sp, #16
 8023bbe:	bd80      	pop	{r7, pc}

08023bc0 <arm_cfft_radix4by2_q31>:
 8023bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023bc2:	465f      	mov	r7, fp
 8023bc4:	4656      	mov	r6, sl
 8023bc6:	464d      	mov	r5, r9
 8023bc8:	4644      	mov	r4, r8
 8023bca:	000b      	movs	r3, r1
 8023bcc:	b4f0      	push	{r4, r5, r6, r7}
 8023bce:	085b      	lsrs	r3, r3, #1
 8023bd0:	b08f      	sub	sp, #60	@ 0x3c
 8023bd2:	910a      	str	r1, [sp, #40]	@ 0x28
 8023bd4:	0007      	movs	r7, r0
 8023bd6:	9009      	str	r0, [sp, #36]	@ 0x24
 8023bd8:	0011      	movs	r1, r2
 8023bda:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023bdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8023bde:	2b00      	cmp	r3, #0
 8023be0:	d100      	bne.n	8023be4 <arm_cfft_radix4by2_q31+0x24>
 8023be2:	e0a0      	b.n	8023d26 <arm_cfft_radix4by2_q31+0x166>
 8023be4:	0002      	movs	r2, r0
 8023be6:	00db      	lsls	r3, r3, #3
 8023be8:	3204      	adds	r2, #4
 8023bea:	4691      	mov	r9, r2
 8023bec:	4698      	mov	r8, r3
 8023bee:	000a      	movs	r2, r1
 8023bf0:	464e      	mov	r6, r9
 8023bf2:	4442      	add	r2, r8
 8023bf4:	4699      	mov	r9, r3
 8023bf6:	4688      	mov	r8, r1
 8023bf8:	9208      	str	r2, [sp, #32]
 8023bfa:	900d      	str	r0, [sp, #52]	@ 0x34
 8023bfc:	4643      	mov	r3, r8
 8023bfe:	681b      	ldr	r3, [r3, #0]
 8023c00:	469b      	mov	fp, r3
 8023c02:	4643      	mov	r3, r8
 8023c04:	685b      	ldr	r3, [r3, #4]
 8023c06:	469a      	mov	sl, r3
 8023c08:	683b      	ldr	r3, [r7, #0]
 8023c0a:	109c      	asrs	r4, r3, #2
 8023c0c:	464b      	mov	r3, r9
 8023c0e:	58fb      	ldr	r3, [r7, r3]
 8023c10:	109a      	asrs	r2, r3, #2
 8023c12:	18a3      	adds	r3, r4, r2
 8023c14:	603b      	str	r3, [r7, #0]
 8023c16:	6833      	ldr	r3, [r6, #0]
 8023c18:	1aa4      	subs	r4, r4, r2
 8023c1a:	109d      	asrs	r5, r3, #2
 8023c1c:	464b      	mov	r3, r9
 8023c1e:	58f3      	ldr	r3, [r6, r3]
 8023c20:	17e2      	asrs	r2, r4, #31
 8023c22:	109b      	asrs	r3, r3, #2
 8023c24:	18e9      	adds	r1, r5, r3
 8023c26:	6031      	str	r1, [r6, #0]
 8023c28:	0011      	movs	r1, r2
 8023c2a:	465a      	mov	r2, fp
 8023c2c:	17d2      	asrs	r2, r2, #31
 8023c2e:	0010      	movs	r0, r2
 8023c30:	4652      	mov	r2, sl
 8023c32:	1aed      	subs	r5, r5, r3
 8023c34:	17eb      	asrs	r3, r5, #31
 8023c36:	17d2      	asrs	r2, r2, #31
 8023c38:	9307      	str	r3, [sp, #28]
 8023c3a:	9204      	str	r2, [sp, #16]
 8023c3c:	0003      	movs	r3, r0
 8023c3e:	465a      	mov	r2, fp
 8023c40:	9006      	str	r0, [sp, #24]
 8023c42:	0020      	movs	r0, r4
 8023c44:	9105      	str	r1, [sp, #20]
 8023c46:	f7dc fcbb 	bl	80005c0 <__aeabi_lmul>
 8023c4a:	2280      	movs	r2, #128	@ 0x80
 8023c4c:	2300      	movs	r3, #0
 8023c4e:	0612      	lsls	r2, r2, #24
 8023c50:	1880      	adds	r0, r0, r2
 8023c52:	4159      	adcs	r1, r3
 8023c54:	2300      	movs	r3, #0
 8023c56:	9101      	str	r1, [sp, #4]
 8023c58:	9300      	str	r3, [sp, #0]
 8023c5a:	4652      	mov	r2, sl
 8023c5c:	9b04      	ldr	r3, [sp, #16]
 8023c5e:	0028      	movs	r0, r5
 8023c60:	17e9      	asrs	r1, r5, #31
 8023c62:	f7dc fcad 	bl	80005c0 <__aeabi_lmul>
 8023c66:	9a00      	ldr	r2, [sp, #0]
 8023c68:	9b01      	ldr	r3, [sp, #4]
 8023c6a:	1880      	adds	r0, r0, r2
 8023c6c:	4159      	adcs	r1, r3
 8023c6e:	2280      	movs	r2, #128	@ 0x80
 8023c70:	2300      	movs	r3, #0
 8023c72:	0612      	lsls	r2, r2, #24
 8023c74:	1880      	adds	r0, r0, r2
 8023c76:	4159      	adcs	r1, r3
 8023c78:	464a      	mov	r2, r9
 8023c7a:	004b      	lsls	r3, r1, #1
 8023c7c:	50bb      	str	r3, [r7, r2]
 8023c7e:	4658      	mov	r0, fp
 8023c80:	002a      	movs	r2, r5
 8023c82:	9b07      	ldr	r3, [sp, #28]
 8023c84:	9906      	ldr	r1, [sp, #24]
 8023c86:	f7dc fc9b 	bl	80005c0 <__aeabi_lmul>
 8023c8a:	2280      	movs	r2, #128	@ 0x80
 8023c8c:	2300      	movs	r3, #0
 8023c8e:	0612      	lsls	r2, r2, #24
 8023c90:	1880      	adds	r0, r0, r2
 8023c92:	4159      	adcs	r1, r3
 8023c94:	2000      	movs	r0, #0
 8023c96:	9103      	str	r1, [sp, #12]
 8023c98:	9002      	str	r0, [sp, #8]
 8023c9a:	4652      	mov	r2, sl
 8023c9c:	9b04      	ldr	r3, [sp, #16]
 8023c9e:	0020      	movs	r0, r4
 8023ca0:	9905      	ldr	r1, [sp, #20]
 8023ca2:	f7dc fc8d 	bl	80005c0 <__aeabi_lmul>
 8023ca6:	9a02      	ldr	r2, [sp, #8]
 8023ca8:	9b03      	ldr	r3, [sp, #12]
 8023caa:	1a12      	subs	r2, r2, r0
 8023cac:	418b      	sbcs	r3, r1
 8023cae:	2080      	movs	r0, #128	@ 0x80
 8023cb0:	2100      	movs	r1, #0
 8023cb2:	0600      	lsls	r0, r0, #24
 8023cb4:	1812      	adds	r2, r2, r0
 8023cb6:	414b      	adcs	r3, r1
 8023cb8:	464a      	mov	r2, r9
 8023cba:	005b      	lsls	r3, r3, #1
 8023cbc:	50b3      	str	r3, [r6, r2]
 8023cbe:	2308      	movs	r3, #8
 8023cc0:	469c      	mov	ip, r3
 8023cc2:	9b08      	ldr	r3, [sp, #32]
 8023cc4:	44e0      	add	r8, ip
 8023cc6:	3708      	adds	r7, #8
 8023cc8:	3608      	adds	r6, #8
 8023cca:	4598      	cmp	r8, r3
 8023ccc:	d196      	bne.n	8023bfc <arm_cfft_radix4by2_q31+0x3c>
 8023cce:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023cd0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023cd2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023cd4:	2302      	movs	r3, #2
 8023cd6:	003a      	movs	r2, r7
 8023cd8:	0029      	movs	r1, r5
 8023cda:	0020      	movs	r0, r4
 8023cdc:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023cde:	f000 f957 	bl	8023f90 <arm_radix4_butterfly_q31>
 8023ce2:	46a4      	mov	ip, r4
 8023ce4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023ce6:	2302      	movs	r3, #2
 8023ce8:	0088      	lsls	r0, r1, #2
 8023cea:	4460      	add	r0, ip
 8023cec:	003a      	movs	r2, r7
 8023cee:	0029      	movs	r1, r5
 8023cf0:	f000 f94e 	bl	8023f90 <arm_radix4_butterfly_q31>
 8023cf4:	46a4      	mov	ip, r4
 8023cf6:	0128      	lsls	r0, r5, #4
 8023cf8:	4460      	add	r0, ip
 8023cfa:	6833      	ldr	r3, [r6, #0]
 8023cfc:	005b      	lsls	r3, r3, #1
 8023cfe:	6033      	str	r3, [r6, #0]
 8023d00:	6873      	ldr	r3, [r6, #4]
 8023d02:	005b      	lsls	r3, r3, #1
 8023d04:	6073      	str	r3, [r6, #4]
 8023d06:	68b3      	ldr	r3, [r6, #8]
 8023d08:	005b      	lsls	r3, r3, #1
 8023d0a:	60b3      	str	r3, [r6, #8]
 8023d0c:	68f3      	ldr	r3, [r6, #12]
 8023d0e:	005b      	lsls	r3, r3, #1
 8023d10:	60f3      	str	r3, [r6, #12]
 8023d12:	3610      	adds	r6, #16
 8023d14:	42b0      	cmp	r0, r6
 8023d16:	d1f0      	bne.n	8023cfa <arm_cfft_radix4by2_q31+0x13a>
 8023d18:	b00f      	add	sp, #60	@ 0x3c
 8023d1a:	bc3c      	pop	{r2, r3, r4, r5}
 8023d1c:	4690      	mov	r8, r2
 8023d1e:	4699      	mov	r9, r3
 8023d20:	46a2      	mov	sl, r4
 8023d22:	46ab      	mov	fp, r5
 8023d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023d26:	2302      	movs	r3, #2
 8023d28:	2100      	movs	r1, #0
 8023d2a:	0015      	movs	r5, r2
 8023d2c:	f000 f930 	bl	8023f90 <arm_radix4_butterfly_q31>
 8023d30:	46bc      	mov	ip, r7
 8023d32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023d34:	002a      	movs	r2, r5
 8023d36:	0098      	lsls	r0, r3, #2
 8023d38:	4460      	add	r0, ip
 8023d3a:	2302      	movs	r3, #2
 8023d3c:	2100      	movs	r1, #0
 8023d3e:	f000 f927 	bl	8023f90 <arm_radix4_butterfly_q31>
 8023d42:	e7e9      	b.n	8023d18 <arm_cfft_radix4by2_q31+0x158>

08023d44 <arm_cfft_radix4by2_inverse_q31>:
 8023d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023d46:	465f      	mov	r7, fp
 8023d48:	4656      	mov	r6, sl
 8023d4a:	464d      	mov	r5, r9
 8023d4c:	4644      	mov	r4, r8
 8023d4e:	000b      	movs	r3, r1
 8023d50:	b4f0      	push	{r4, r5, r6, r7}
 8023d52:	085b      	lsrs	r3, r3, #1
 8023d54:	b08f      	sub	sp, #60	@ 0x3c
 8023d56:	910a      	str	r1, [sp, #40]	@ 0x28
 8023d58:	0007      	movs	r7, r0
 8023d5a:	9009      	str	r0, [sp, #36]	@ 0x24
 8023d5c:	0011      	movs	r1, r2
 8023d5e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8023d60:	930c      	str	r3, [sp, #48]	@ 0x30
 8023d62:	2b00      	cmp	r3, #0
 8023d64:	d100      	bne.n	8023d68 <arm_cfft_radix4by2_inverse_q31+0x24>
 8023d66:	e0a0      	b.n	8023eaa <arm_cfft_radix4by2_inverse_q31+0x166>
 8023d68:	0002      	movs	r2, r0
 8023d6a:	00db      	lsls	r3, r3, #3
 8023d6c:	3204      	adds	r2, #4
 8023d6e:	4691      	mov	r9, r2
 8023d70:	4698      	mov	r8, r3
 8023d72:	000a      	movs	r2, r1
 8023d74:	464e      	mov	r6, r9
 8023d76:	4442      	add	r2, r8
 8023d78:	4699      	mov	r9, r3
 8023d7a:	4688      	mov	r8, r1
 8023d7c:	9208      	str	r2, [sp, #32]
 8023d7e:	900d      	str	r0, [sp, #52]	@ 0x34
 8023d80:	4643      	mov	r3, r8
 8023d82:	681b      	ldr	r3, [r3, #0]
 8023d84:	469b      	mov	fp, r3
 8023d86:	4643      	mov	r3, r8
 8023d88:	685b      	ldr	r3, [r3, #4]
 8023d8a:	469a      	mov	sl, r3
 8023d8c:	683b      	ldr	r3, [r7, #0]
 8023d8e:	109c      	asrs	r4, r3, #2
 8023d90:	464b      	mov	r3, r9
 8023d92:	58fb      	ldr	r3, [r7, r3]
 8023d94:	109a      	asrs	r2, r3, #2
 8023d96:	18a3      	adds	r3, r4, r2
 8023d98:	603b      	str	r3, [r7, #0]
 8023d9a:	6833      	ldr	r3, [r6, #0]
 8023d9c:	1aa4      	subs	r4, r4, r2
 8023d9e:	109d      	asrs	r5, r3, #2
 8023da0:	464b      	mov	r3, r9
 8023da2:	58f3      	ldr	r3, [r6, r3]
 8023da4:	17e2      	asrs	r2, r4, #31
 8023da6:	109b      	asrs	r3, r3, #2
 8023da8:	18e9      	adds	r1, r5, r3
 8023daa:	6031      	str	r1, [r6, #0]
 8023dac:	0011      	movs	r1, r2
 8023dae:	465a      	mov	r2, fp
 8023db0:	17d2      	asrs	r2, r2, #31
 8023db2:	0010      	movs	r0, r2
 8023db4:	4652      	mov	r2, sl
 8023db6:	1aed      	subs	r5, r5, r3
 8023db8:	17eb      	asrs	r3, r5, #31
 8023dba:	17d2      	asrs	r2, r2, #31
 8023dbc:	9307      	str	r3, [sp, #28]
 8023dbe:	9204      	str	r2, [sp, #16]
 8023dc0:	0003      	movs	r3, r0
 8023dc2:	465a      	mov	r2, fp
 8023dc4:	9006      	str	r0, [sp, #24]
 8023dc6:	0020      	movs	r0, r4
 8023dc8:	9105      	str	r1, [sp, #20]
 8023dca:	f7dc fbf9 	bl	80005c0 <__aeabi_lmul>
 8023dce:	2280      	movs	r2, #128	@ 0x80
 8023dd0:	2300      	movs	r3, #0
 8023dd2:	0612      	lsls	r2, r2, #24
 8023dd4:	1880      	adds	r0, r0, r2
 8023dd6:	4159      	adcs	r1, r3
 8023dd8:	2300      	movs	r3, #0
 8023dda:	9101      	str	r1, [sp, #4]
 8023ddc:	9300      	str	r3, [sp, #0]
 8023dde:	4652      	mov	r2, sl
 8023de0:	9b04      	ldr	r3, [sp, #16]
 8023de2:	0028      	movs	r0, r5
 8023de4:	17e9      	asrs	r1, r5, #31
 8023de6:	f7dc fbeb 	bl	80005c0 <__aeabi_lmul>
 8023dea:	9a00      	ldr	r2, [sp, #0]
 8023dec:	9b01      	ldr	r3, [sp, #4]
 8023dee:	1a12      	subs	r2, r2, r0
 8023df0:	418b      	sbcs	r3, r1
 8023df2:	2080      	movs	r0, #128	@ 0x80
 8023df4:	2100      	movs	r1, #0
 8023df6:	0600      	lsls	r0, r0, #24
 8023df8:	1812      	adds	r2, r2, r0
 8023dfa:	414b      	adcs	r3, r1
 8023dfc:	464a      	mov	r2, r9
 8023dfe:	005b      	lsls	r3, r3, #1
 8023e00:	50bb      	str	r3, [r7, r2]
 8023e02:	4658      	mov	r0, fp
 8023e04:	002a      	movs	r2, r5
 8023e06:	9b07      	ldr	r3, [sp, #28]
 8023e08:	9906      	ldr	r1, [sp, #24]
 8023e0a:	f7dc fbd9 	bl	80005c0 <__aeabi_lmul>
 8023e0e:	2280      	movs	r2, #128	@ 0x80
 8023e10:	2300      	movs	r3, #0
 8023e12:	0612      	lsls	r2, r2, #24
 8023e14:	1880      	adds	r0, r0, r2
 8023e16:	4159      	adcs	r1, r3
 8023e18:	2000      	movs	r0, #0
 8023e1a:	9103      	str	r1, [sp, #12]
 8023e1c:	9002      	str	r0, [sp, #8]
 8023e1e:	4652      	mov	r2, sl
 8023e20:	9b04      	ldr	r3, [sp, #16]
 8023e22:	0020      	movs	r0, r4
 8023e24:	9905      	ldr	r1, [sp, #20]
 8023e26:	f7dc fbcb 	bl	80005c0 <__aeabi_lmul>
 8023e2a:	9b02      	ldr	r3, [sp, #8]
 8023e2c:	9c03      	ldr	r4, [sp, #12]
 8023e2e:	18c0      	adds	r0, r0, r3
 8023e30:	4161      	adcs	r1, r4
 8023e32:	2380      	movs	r3, #128	@ 0x80
 8023e34:	2400      	movs	r4, #0
 8023e36:	061b      	lsls	r3, r3, #24
 8023e38:	18c0      	adds	r0, r0, r3
 8023e3a:	4161      	adcs	r1, r4
 8023e3c:	464a      	mov	r2, r9
 8023e3e:	004b      	lsls	r3, r1, #1
 8023e40:	50b3      	str	r3, [r6, r2]
 8023e42:	2308      	movs	r3, #8
 8023e44:	469c      	mov	ip, r3
 8023e46:	9b08      	ldr	r3, [sp, #32]
 8023e48:	44e0      	add	r8, ip
 8023e4a:	3708      	adds	r7, #8
 8023e4c:	3608      	adds	r6, #8
 8023e4e:	4598      	cmp	r8, r3
 8023e50:	d196      	bne.n	8023d80 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8023e52:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8023e54:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8023e56:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8023e58:	2302      	movs	r3, #2
 8023e5a:	003a      	movs	r2, r7
 8023e5c:	0029      	movs	r1, r5
 8023e5e:	0020      	movs	r0, r4
 8023e60:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8023e62:	f000 fb3b 	bl	80244dc <arm_radix4_butterfly_inverse_q31>
 8023e66:	46a4      	mov	ip, r4
 8023e68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8023e6a:	2302      	movs	r3, #2
 8023e6c:	0088      	lsls	r0, r1, #2
 8023e6e:	4460      	add	r0, ip
 8023e70:	003a      	movs	r2, r7
 8023e72:	0029      	movs	r1, r5
 8023e74:	f000 fb32 	bl	80244dc <arm_radix4_butterfly_inverse_q31>
 8023e78:	46a4      	mov	ip, r4
 8023e7a:	0128      	lsls	r0, r5, #4
 8023e7c:	4460      	add	r0, ip
 8023e7e:	6833      	ldr	r3, [r6, #0]
 8023e80:	005b      	lsls	r3, r3, #1
 8023e82:	6033      	str	r3, [r6, #0]
 8023e84:	6873      	ldr	r3, [r6, #4]
 8023e86:	005b      	lsls	r3, r3, #1
 8023e88:	6073      	str	r3, [r6, #4]
 8023e8a:	68b3      	ldr	r3, [r6, #8]
 8023e8c:	005b      	lsls	r3, r3, #1
 8023e8e:	60b3      	str	r3, [r6, #8]
 8023e90:	68f3      	ldr	r3, [r6, #12]
 8023e92:	005b      	lsls	r3, r3, #1
 8023e94:	60f3      	str	r3, [r6, #12]
 8023e96:	3610      	adds	r6, #16
 8023e98:	42b0      	cmp	r0, r6
 8023e9a:	d1f0      	bne.n	8023e7e <arm_cfft_radix4by2_inverse_q31+0x13a>
 8023e9c:	b00f      	add	sp, #60	@ 0x3c
 8023e9e:	bc3c      	pop	{r2, r3, r4, r5}
 8023ea0:	4690      	mov	r8, r2
 8023ea2:	4699      	mov	r9, r3
 8023ea4:	46a2      	mov	sl, r4
 8023ea6:	46ab      	mov	fp, r5
 8023ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023eaa:	2302      	movs	r3, #2
 8023eac:	2100      	movs	r1, #0
 8023eae:	0015      	movs	r5, r2
 8023eb0:	f000 fb14 	bl	80244dc <arm_radix4_butterfly_inverse_q31>
 8023eb4:	46bc      	mov	ip, r7
 8023eb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023eb8:	002a      	movs	r2, r5
 8023eba:	0098      	lsls	r0, r3, #2
 8023ebc:	4460      	add	r0, ip
 8023ebe:	2302      	movs	r3, #2
 8023ec0:	2100      	movs	r1, #0
 8023ec2:	f000 fb0b 	bl	80244dc <arm_radix4_butterfly_inverse_q31>
 8023ec6:	e7e9      	b.n	8023e9c <arm_cfft_radix4by2_inverse_q31+0x158>

08023ec8 <arm_cfft_q31>:
 8023ec8:	b570      	push	{r4, r5, r6, lr}
 8023eca:	001e      	movs	r6, r3
 8023ecc:	2380      	movs	r3, #128	@ 0x80
 8023ece:	000d      	movs	r5, r1
 8023ed0:	0004      	movs	r4, r0
 8023ed2:	8801      	ldrh	r1, [r0, #0]
 8023ed4:	005b      	lsls	r3, r3, #1
 8023ed6:	2a01      	cmp	r2, #1
 8023ed8:	d028      	beq.n	8023f2c <arm_cfft_q31+0x64>
 8023eda:	4299      	cmp	r1, r3
 8023edc:	d020      	beq.n	8023f20 <arm_cfft_q31+0x58>
 8023ede:	d812      	bhi.n	8023f06 <arm_cfft_q31+0x3e>
 8023ee0:	2920      	cmp	r1, #32
 8023ee2:	d004      	beq.n	8023eee <arm_cfft_q31+0x26>
 8023ee4:	d949      	bls.n	8023f7a <arm_cfft_q31+0xb2>
 8023ee6:	2940      	cmp	r1, #64	@ 0x40
 8023ee8:	d01a      	beq.n	8023f20 <arm_cfft_q31+0x58>
 8023eea:	2980      	cmp	r1, #128	@ 0x80
 8023eec:	d103      	bne.n	8023ef6 <arm_cfft_q31+0x2e>
 8023eee:	6862      	ldr	r2, [r4, #4]
 8023ef0:	0028      	movs	r0, r5
 8023ef2:	f7ff fe65 	bl	8023bc0 <arm_cfft_radix4by2_q31>
 8023ef6:	2e00      	cmp	r6, #0
 8023ef8:	d004      	beq.n	8023f04 <arm_cfft_q31+0x3c>
 8023efa:	68a2      	ldr	r2, [r4, #8]
 8023efc:	89a1      	ldrh	r1, [r4, #12]
 8023efe:	0028      	movs	r0, r5
 8023f00:	f7dc f902 	bl	8000108 <arm_bitreversal_32>
 8023f04:	bd70      	pop	{r4, r5, r6, pc}
 8023f06:	2380      	movs	r3, #128	@ 0x80
 8023f08:	00db      	lsls	r3, r3, #3
 8023f0a:	4299      	cmp	r1, r3
 8023f0c:	d008      	beq.n	8023f20 <arm_cfft_q31+0x58>
 8023f0e:	d92f      	bls.n	8023f70 <arm_cfft_q31+0xa8>
 8023f10:	2380      	movs	r3, #128	@ 0x80
 8023f12:	011b      	lsls	r3, r3, #4
 8023f14:	4299      	cmp	r1, r3
 8023f16:	d0ea      	beq.n	8023eee <arm_cfft_q31+0x26>
 8023f18:	2380      	movs	r3, #128	@ 0x80
 8023f1a:	015b      	lsls	r3, r3, #5
 8023f1c:	4299      	cmp	r1, r3
 8023f1e:	d1ea      	bne.n	8023ef6 <arm_cfft_q31+0x2e>
 8023f20:	2301      	movs	r3, #1
 8023f22:	6862      	ldr	r2, [r4, #4]
 8023f24:	0028      	movs	r0, r5
 8023f26:	f000 f833 	bl	8023f90 <arm_radix4_butterfly_q31>
 8023f2a:	e7e4      	b.n	8023ef6 <arm_cfft_q31+0x2e>
 8023f2c:	4299      	cmp	r1, r3
 8023f2e:	d019      	beq.n	8023f64 <arm_cfft_q31+0x9c>
 8023f30:	d80b      	bhi.n	8023f4a <arm_cfft_q31+0x82>
 8023f32:	2920      	cmp	r1, #32
 8023f34:	d004      	beq.n	8023f40 <arm_cfft_q31+0x78>
 8023f36:	d928      	bls.n	8023f8a <arm_cfft_q31+0xc2>
 8023f38:	2940      	cmp	r1, #64	@ 0x40
 8023f3a:	d013      	beq.n	8023f64 <arm_cfft_q31+0x9c>
 8023f3c:	2980      	cmp	r1, #128	@ 0x80
 8023f3e:	d1da      	bne.n	8023ef6 <arm_cfft_q31+0x2e>
 8023f40:	6862      	ldr	r2, [r4, #4]
 8023f42:	0028      	movs	r0, r5
 8023f44:	f7ff fefe 	bl	8023d44 <arm_cfft_radix4by2_inverse_q31>
 8023f48:	e7d5      	b.n	8023ef6 <arm_cfft_q31+0x2e>
 8023f4a:	2380      	movs	r3, #128	@ 0x80
 8023f4c:	00db      	lsls	r3, r3, #3
 8023f4e:	4299      	cmp	r1, r3
 8023f50:	d008      	beq.n	8023f64 <arm_cfft_q31+0x9c>
 8023f52:	d915      	bls.n	8023f80 <arm_cfft_q31+0xb8>
 8023f54:	2380      	movs	r3, #128	@ 0x80
 8023f56:	011b      	lsls	r3, r3, #4
 8023f58:	4299      	cmp	r1, r3
 8023f5a:	d0f1      	beq.n	8023f40 <arm_cfft_q31+0x78>
 8023f5c:	2380      	movs	r3, #128	@ 0x80
 8023f5e:	015b      	lsls	r3, r3, #5
 8023f60:	4299      	cmp	r1, r3
 8023f62:	d1c8      	bne.n	8023ef6 <arm_cfft_q31+0x2e>
 8023f64:	2301      	movs	r3, #1
 8023f66:	6862      	ldr	r2, [r4, #4]
 8023f68:	0028      	movs	r0, r5
 8023f6a:	f000 fab7 	bl	80244dc <arm_radix4_butterfly_inverse_q31>
 8023f6e:	e7c2      	b.n	8023ef6 <arm_cfft_q31+0x2e>
 8023f70:	2380      	movs	r3, #128	@ 0x80
 8023f72:	009b      	lsls	r3, r3, #2
 8023f74:	4299      	cmp	r1, r3
 8023f76:	d0ba      	beq.n	8023eee <arm_cfft_q31+0x26>
 8023f78:	e7bd      	b.n	8023ef6 <arm_cfft_q31+0x2e>
 8023f7a:	2910      	cmp	r1, #16
 8023f7c:	d1bb      	bne.n	8023ef6 <arm_cfft_q31+0x2e>
 8023f7e:	e7cf      	b.n	8023f20 <arm_cfft_q31+0x58>
 8023f80:	2380      	movs	r3, #128	@ 0x80
 8023f82:	009b      	lsls	r3, r3, #2
 8023f84:	4299      	cmp	r1, r3
 8023f86:	d0db      	beq.n	8023f40 <arm_cfft_q31+0x78>
 8023f88:	e7b5      	b.n	8023ef6 <arm_cfft_q31+0x2e>
 8023f8a:	2910      	cmp	r1, #16
 8023f8c:	d1b3      	bne.n	8023ef6 <arm_cfft_q31+0x2e>
 8023f8e:	e7e9      	b.n	8023f64 <arm_cfft_q31+0x9c>

08023f90 <arm_radix4_butterfly_q31>:
 8023f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023f92:	464d      	mov	r5, r9
 8023f94:	4644      	mov	r4, r8
 8023f96:	465f      	mov	r7, fp
 8023f98:	4656      	mov	r6, sl
 8023f9a:	469c      	mov	ip, r3
 8023f9c:	b4f0      	push	{r4, r5, r6, r7}
 8023f9e:	b0a7      	sub	sp, #156	@ 0x9c
 8023fa0:	9114      	str	r1, [sp, #80]	@ 0x50
 8023fa2:	0889      	lsrs	r1, r1, #2
 8023fa4:	9310      	str	r3, [sp, #64]	@ 0x40
 8023fa6:	00cb      	lsls	r3, r1, #3
 8023fa8:	0015      	movs	r5, r2
 8023faa:	9223      	str	r2, [sp, #140]	@ 0x8c
 8023fac:	18c2      	adds	r2, r0, r3
 8023fae:	000c      	movs	r4, r1
 8023fb0:	469a      	mov	sl, r3
 8023fb2:	9124      	str	r1, [sp, #144]	@ 0x90
 8023fb4:	18d1      	adds	r1, r2, r3
 8023fb6:	4663      	mov	r3, ip
 8023fb8:	468b      	mov	fp, r1
 8023fba:	0119      	lsls	r1, r3, #4
 8023fbc:	910d      	str	r1, [sp, #52]	@ 0x34
 8023fbe:	00d9      	lsls	r1, r3, #3
 8023fc0:	005b      	lsls	r3, r3, #1
 8023fc2:	4463      	add	r3, ip
 8023fc4:	910e      	str	r1, [sp, #56]	@ 0x38
 8023fc6:	00d9      	lsls	r1, r3, #3
 8023fc8:	465b      	mov	r3, fp
 8023fca:	44da      	add	sl, fp
 8023fcc:	4690      	mov	r8, r2
 8023fce:	4683      	mov	fp, r0
 8023fd0:	4699      	mov	r9, r3
 8023fd2:	9022      	str	r0, [sp, #136]	@ 0x88
 8023fd4:	9025      	str	r0, [sp, #148]	@ 0x94
 8023fd6:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023fd8:	9502      	str	r5, [sp, #8]
 8023fda:	9500      	str	r5, [sp, #0]
 8023fdc:	9501      	str	r5, [sp, #4]
 8023fde:	9407      	str	r4, [sp, #28]
 8023fe0:	465b      	mov	r3, fp
 8023fe2:	681b      	ldr	r3, [r3, #0]
 8023fe4:	4642      	mov	r2, r8
 8023fe6:	111c      	asrs	r4, r3, #4
 8023fe8:	464b      	mov	r3, r9
 8023fea:	4658      	mov	r0, fp
 8023fec:	681b      	ldr	r3, [r3, #0]
 8023fee:	6812      	ldr	r2, [r2, #0]
 8023ff0:	111b      	asrs	r3, r3, #4
 8023ff2:	18e7      	adds	r7, r4, r3
 8023ff4:	1ae3      	subs	r3, r4, r3
 8023ff6:	1114      	asrs	r4, r2, #4
 8023ff8:	4652      	mov	r2, sl
 8023ffa:	6840      	ldr	r0, [r0, #4]
 8023ffc:	6812      	ldr	r2, [r2, #0]
 8023ffe:	1105      	asrs	r5, r0, #4
 8024000:	4648      	mov	r0, r9
 8024002:	9303      	str	r3, [sp, #12]
 8024004:	1113      	asrs	r3, r2, #4
 8024006:	18e2      	adds	r2, r4, r3
 8024008:	465c      	mov	r4, fp
 802400a:	6840      	ldr	r0, [r0, #4]
 802400c:	1103      	asrs	r3, r0, #4
 802400e:	18ee      	adds	r6, r5, r3
 8024010:	1ae8      	subs	r0, r5, r3
 8024012:	18bb      	adds	r3, r7, r2
 8024014:	6023      	str	r3, [r4, #0]
 8024016:	4644      	mov	r4, r8
 8024018:	6864      	ldr	r4, [r4, #4]
 802401a:	9004      	str	r0, [sp, #16]
 802401c:	1125      	asrs	r5, r4, #4
 802401e:	4654      	mov	r4, sl
 8024020:	6864      	ldr	r4, [r4, #4]
 8024022:	1123      	asrs	r3, r4, #4
 8024024:	465c      	mov	r4, fp
 8024026:	18eb      	adds	r3, r5, r3
 8024028:	18f1      	adds	r1, r6, r3
 802402a:	6061      	str	r1, [r4, #4]
 802402c:	4655      	mov	r5, sl
 802402e:	4644      	mov	r4, r8
 8024030:	686d      	ldr	r5, [r5, #4]
 8024032:	6864      	ldr	r4, [r4, #4]
 8024034:	1129      	asrs	r1, r5, #4
 8024036:	1124      	asrs	r4, r4, #4
 8024038:	1a64      	subs	r4, r4, r1
 802403a:	4641      	mov	r1, r8
 802403c:	6809      	ldr	r1, [r1, #0]
 802403e:	9405      	str	r4, [sp, #20]
 8024040:	1108      	asrs	r0, r1, #4
 8024042:	4651      	mov	r1, sl
 8024044:	6809      	ldr	r1, [r1, #0]
 8024046:	1abc      	subs	r4, r7, r2
 8024048:	1109      	asrs	r1, r1, #4
 802404a:	1a41      	subs	r1, r0, r1
 802404c:	17e2      	asrs	r2, r4, #31
 802404e:	9106      	str	r1, [sp, #24]
 8024050:	0011      	movs	r1, r2
 8024052:	9a01      	ldr	r2, [sp, #4]
 8024054:	9108      	str	r1, [sp, #32]
 8024056:	6817      	ldr	r7, [r2, #0]
 8024058:	17fd      	asrs	r5, r7, #31
 802405a:	0028      	movs	r0, r5
 802405c:	1af5      	subs	r5, r6, r3
 802405e:	17ee      	asrs	r6, r5, #31
 8024060:	960a      	str	r6, [sp, #40]	@ 0x28
 8024062:	6856      	ldr	r6, [r2, #4]
 8024064:	9009      	str	r0, [sp, #36]	@ 0x24
 8024066:	17f3      	asrs	r3, r6, #31
 8024068:	003a      	movs	r2, r7
 802406a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802406c:	0003      	movs	r3, r0
 802406e:	0020      	movs	r0, r4
 8024070:	f7dc faa6 	bl	80005c0 <__aeabi_lmul>
 8024074:	0032      	movs	r2, r6
 8024076:	17f3      	asrs	r3, r6, #31
 8024078:	910c      	str	r1, [sp, #48]	@ 0x30
 802407a:	0028      	movs	r0, r5
 802407c:	17e9      	asrs	r1, r5, #31
 802407e:	f7dc fa9f 	bl	80005c0 <__aeabi_lmul>
 8024082:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8024084:	002a      	movs	r2, r5
 8024086:	4684      	mov	ip, r0
 8024088:	4640      	mov	r0, r8
 802408a:	4461      	add	r1, ip
 802408c:	0049      	lsls	r1, r1, #1
 802408e:	6001      	str	r1, [r0, #0]
 8024090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024092:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024094:	0038      	movs	r0, r7
 8024096:	f7dc fa93 	bl	80005c0 <__aeabi_lmul>
 802409a:	0032      	movs	r2, r6
 802409c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802409e:	000d      	movs	r5, r1
 80240a0:	0020      	movs	r0, r4
 80240a2:	9908      	ldr	r1, [sp, #32]
 80240a4:	f7dc fa8c 	bl	80005c0 <__aeabi_lmul>
 80240a8:	4646      	mov	r6, r8
 80240aa:	1a6d      	subs	r5, r5, r1
 80240ac:	006d      	lsls	r5, r5, #1
 80240ae:	6075      	str	r5, [r6, #4]
 80240b0:	9903      	ldr	r1, [sp, #12]
 80240b2:	9d05      	ldr	r5, [sp, #20]
 80240b4:	000c      	movs	r4, r1
 80240b6:	46ac      	mov	ip, r5
 80240b8:	4464      	add	r4, ip
 80240ba:	17e6      	asrs	r6, r4, #31
 80240bc:	0031      	movs	r1, r6
 80240be:	9b00      	ldr	r3, [sp, #0]
 80240c0:	9804      	ldr	r0, [sp, #16]
 80240c2:	681e      	ldr	r6, [r3, #0]
 80240c4:	17f7      	asrs	r7, r6, #31
 80240c6:	9709      	str	r7, [sp, #36]	@ 0x24
 80240c8:	9f06      	ldr	r7, [sp, #24]
 80240ca:	0032      	movs	r2, r6
 80240cc:	1bc7      	subs	r7, r0, r7
 80240ce:	17fd      	asrs	r5, r7, #31
 80240d0:	950a      	str	r5, [sp, #40]	@ 0x28
 80240d2:	685d      	ldr	r5, [r3, #4]
 80240d4:	17f3      	asrs	r3, r6, #31
 80240d6:	17e8      	asrs	r0, r5, #31
 80240d8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80240da:	0020      	movs	r0, r4
 80240dc:	9108      	str	r1, [sp, #32]
 80240de:	f7dc fa6f 	bl	80005c0 <__aeabi_lmul>
 80240e2:	002a      	movs	r2, r5
 80240e4:	17eb      	asrs	r3, r5, #31
 80240e6:	910c      	str	r1, [sp, #48]	@ 0x30
 80240e8:	0038      	movs	r0, r7
 80240ea:	17f9      	asrs	r1, r7, #31
 80240ec:	f7dc fa68 	bl	80005c0 <__aeabi_lmul>
 80240f0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80240f2:	003a      	movs	r2, r7
 80240f4:	4684      	mov	ip, r0
 80240f6:	4648      	mov	r0, r9
 80240f8:	4461      	add	r1, ip
 80240fa:	0049      	lsls	r1, r1, #1
 80240fc:	6001      	str	r1, [r0, #0]
 80240fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024100:	0030      	movs	r0, r6
 8024102:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024104:	f7dc fa5c 	bl	80005c0 <__aeabi_lmul>
 8024108:	002a      	movs	r2, r5
 802410a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802410c:	000e      	movs	r6, r1
 802410e:	0020      	movs	r0, r4
 8024110:	9908      	ldr	r1, [sp, #32]
 8024112:	f7dc fa55 	bl	80005c0 <__aeabi_lmul>
 8024116:	464c      	mov	r4, r9
 8024118:	9d05      	ldr	r5, [sp, #20]
 802411a:	1a76      	subs	r6, r6, r1
 802411c:	9903      	ldr	r1, [sp, #12]
 802411e:	0076      	lsls	r6, r6, #1
 8024120:	6066      	str	r6, [r4, #4]
 8024122:	1b4c      	subs	r4, r1, r5
 8024124:	9e06      	ldr	r6, [sp, #24]
 8024126:	17e1      	asrs	r1, r4, #31
 8024128:	9103      	str	r1, [sp, #12]
 802412a:	9902      	ldr	r1, [sp, #8]
 802412c:	46b4      	mov	ip, r6
 802412e:	680f      	ldr	r7, [r1, #0]
 8024130:	9804      	ldr	r0, [sp, #16]
 8024132:	17fd      	asrs	r5, r7, #31
 8024134:	002b      	movs	r3, r5
 8024136:	684e      	ldr	r6, [r1, #4]
 8024138:	4460      	add	r0, ip
 802413a:	0005      	movs	r5, r0
 802413c:	17c0      	asrs	r0, r0, #31
 802413e:	9005      	str	r0, [sp, #20]
 8024140:	17f0      	asrs	r0, r6, #31
 8024142:	9006      	str	r0, [sp, #24]
 8024144:	003a      	movs	r2, r7
 8024146:	0020      	movs	r0, r4
 8024148:	17e1      	asrs	r1, r4, #31
 802414a:	9304      	str	r3, [sp, #16]
 802414c:	f7dc fa38 	bl	80005c0 <__aeabi_lmul>
 8024150:	0032      	movs	r2, r6
 8024152:	9108      	str	r1, [sp, #32]
 8024154:	17f3      	asrs	r3, r6, #31
 8024156:	0028      	movs	r0, r5
 8024158:	17e9      	asrs	r1, r5, #31
 802415a:	f7dc fa31 	bl	80005c0 <__aeabi_lmul>
 802415e:	9808      	ldr	r0, [sp, #32]
 8024160:	002a      	movs	r2, r5
 8024162:	4684      	mov	ip, r0
 8024164:	4650      	mov	r0, sl
 8024166:	4461      	add	r1, ip
 8024168:	0049      	lsls	r1, r1, #1
 802416a:	6001      	str	r1, [r0, #0]
 802416c:	9b05      	ldr	r3, [sp, #20]
 802416e:	9904      	ldr	r1, [sp, #16]
 8024170:	0038      	movs	r0, r7
 8024172:	f7dc fa25 	bl	80005c0 <__aeabi_lmul>
 8024176:	0020      	movs	r0, r4
 8024178:	2408      	movs	r4, #8
 802417a:	000d      	movs	r5, r1
 802417c:	0032      	movs	r2, r6
 802417e:	9b06      	ldr	r3, [sp, #24]
 8024180:	9903      	ldr	r1, [sp, #12]
 8024182:	f7dc fa1d 	bl	80005c0 <__aeabi_lmul>
 8024186:	46a4      	mov	ip, r4
 8024188:	4650      	mov	r0, sl
 802418a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802418c:	44e3      	add	fp, ip
 802418e:	44e0      	add	r8, ip
 8024190:	44e1      	add	r9, ip
 8024192:	44e2      	add	sl, ip
 8024194:	46a4      	mov	ip, r4
 8024196:	1a6d      	subs	r5, r5, r1
 8024198:	006d      	lsls	r5, r5, #1
 802419a:	9a01      	ldr	r2, [sp, #4]
 802419c:	6045      	str	r5, [r0, #4]
 802419e:	9807      	ldr	r0, [sp, #28]
 80241a0:	4462      	add	r2, ip
 80241a2:	3801      	subs	r0, #1
 80241a4:	9201      	str	r2, [sp, #4]
 80241a6:	9007      	str	r0, [sp, #28]
 80241a8:	9b00      	ldr	r3, [sp, #0]
 80241aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80241ac:	9902      	ldr	r1, [sp, #8]
 80241ae:	4694      	mov	ip, r2
 80241b0:	4463      	add	r3, ip
 80241b2:	9300      	str	r3, [sp, #0]
 80241b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80241b6:	469c      	mov	ip, r3
 80241b8:	4461      	add	r1, ip
 80241ba:	9102      	str	r1, [sp, #8]
 80241bc:	2800      	cmp	r0, #0
 80241be:	d000      	beq.n	80241c2 <arm_radix4_butterfly_q31+0x232>
 80241c0:	e70e      	b.n	8023fe0 <arm_radix4_butterfly_q31+0x50>
 80241c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80241c4:	009b      	lsls	r3, r3, #2
 80241c6:	931f      	str	r3, [sp, #124]	@ 0x7c
 80241c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80241ca:	9320      	str	r3, [sp, #128]	@ 0x80
 80241cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80241ce:	2b04      	cmp	r3, #4
 80241d0:	d800      	bhi.n	80241d4 <arm_radix4_butterfly_q31+0x244>
 80241d2:	e180      	b.n	80244d6 <arm_radix4_butterfly_q31+0x546>
 80241d4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80241d6:	0893      	lsrs	r3, r2, #2
 80241d8:	1e59      	subs	r1, r3, #1
 80241da:	9321      	str	r3, [sp, #132]	@ 0x84
 80241dc:	00db      	lsls	r3, r3, #3
 80241de:	931b      	str	r3, [sp, #108]	@ 0x6c
 80241e0:	00d3      	lsls	r3, r2, #3
 80241e2:	9300      	str	r3, [sp, #0]
 80241e4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80241e6:	911a      	str	r1, [sp, #104]	@ 0x68
 80241e8:	00da      	lsls	r2, r3, #3
 80241ea:	921e      	str	r2, [sp, #120]	@ 0x78
 80241ec:	011a      	lsls	r2, r3, #4
 80241ee:	921d      	str	r2, [sp, #116]	@ 0x74
 80241f0:	001a      	movs	r2, r3
 80241f2:	4694      	mov	ip, r2
 80241f4:	005b      	lsls	r3, r3, #1
 80241f6:	4463      	add	r3, ip
 80241f8:	00db      	lsls	r3, r3, #3
 80241fa:	931c      	str	r3, [sp, #112]	@ 0x70
 80241fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80241fe:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024200:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8024202:	9318      	str	r3, [sp, #96]	@ 0x60
 8024204:	9319      	str	r3, [sp, #100]	@ 0x64
 8024206:	9316      	str	r3, [sp, #88]	@ 0x58
 8024208:	2300      	movs	r3, #0
 802420a:	9315      	str	r3, [sp, #84]	@ 0x54
 802420c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802420e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024210:	681a      	ldr	r2, [r3, #0]
 8024212:	685b      	ldr	r3, [r3, #4]
 8024214:	9205      	str	r2, [sp, #20]
 8024216:	9306      	str	r3, [sp, #24]
 8024218:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802421a:	468c      	mov	ip, r1
 802421c:	681a      	ldr	r2, [r3, #0]
 802421e:	685b      	ldr	r3, [r3, #4]
 8024220:	9207      	str	r2, [sp, #28]
 8024222:	9308      	str	r3, [sp, #32]
 8024224:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8024226:	681a      	ldr	r2, [r3, #0]
 8024228:	685b      	ldr	r3, [r3, #4]
 802422a:	9209      	str	r2, [sp, #36]	@ 0x24
 802422c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802422e:	930a      	str	r3, [sp, #40]	@ 0x28
 8024230:	0013      	movs	r3, r2
 8024232:	4463      	add	r3, ip
 8024234:	4698      	mov	r8, r3
 8024236:	0013      	movs	r3, r2
 8024238:	4442      	add	r2, r8
 802423a:	4691      	mov	r9, r2
 802423c:	001a      	movs	r2, r3
 802423e:	444a      	add	r2, r9
 8024240:	4692      	mov	sl, r2
 8024242:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024244:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024246:	4293      	cmp	r3, r2
 8024248:	d800      	bhi.n	802424c <arm_radix4_butterfly_q31+0x2bc>
 802424a:	e0dd      	b.n	8024408 <arm_radix4_butterfly_q31+0x478>
 802424c:	4694      	mov	ip, r2
 802424e:	468b      	mov	fp, r1
 8024250:	4644      	mov	r4, r8
 8024252:	4655      	mov	r5, sl
 8024254:	9b07      	ldr	r3, [sp, #28]
 8024256:	17db      	asrs	r3, r3, #31
 8024258:	930c      	str	r3, [sp, #48]	@ 0x30
 802425a:	9b08      	ldr	r3, [sp, #32]
 802425c:	17db      	asrs	r3, r3, #31
 802425e:	930d      	str	r3, [sp, #52]	@ 0x34
 8024260:	9b05      	ldr	r3, [sp, #20]
 8024262:	17db      	asrs	r3, r3, #31
 8024264:	930e      	str	r3, [sp, #56]	@ 0x38
 8024266:	9b06      	ldr	r3, [sp, #24]
 8024268:	17db      	asrs	r3, r3, #31
 802426a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802426c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802426e:	17db      	asrs	r3, r3, #31
 8024270:	9310      	str	r3, [sp, #64]	@ 0x40
 8024272:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024274:	17db      	asrs	r3, r3, #31
 8024276:	9311      	str	r3, [sp, #68]	@ 0x44
 8024278:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802427a:	4463      	add	r3, ip
 802427c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802427e:	465b      	mov	r3, fp
 8024280:	4659      	mov	r1, fp
 8024282:	681a      	ldr	r2, [r3, #0]
 8024284:	464b      	mov	r3, r9
 8024286:	684f      	ldr	r7, [r1, #4]
 8024288:	4649      	mov	r1, r9
 802428a:	681b      	ldr	r3, [r3, #0]
 802428c:	18d6      	adds	r6, r2, r3
 802428e:	1ad3      	subs	r3, r2, r3
 8024290:	9301      	str	r3, [sp, #4]
 8024292:	684b      	ldr	r3, [r1, #4]
 8024294:	18f8      	adds	r0, r7, r3
 8024296:	1af9      	subs	r1, r7, r3
 8024298:	6827      	ldr	r7, [r4, #0]
 802429a:	9102      	str	r1, [sp, #8]
 802429c:	003a      	movs	r2, r7
 802429e:	682f      	ldr	r7, [r5, #0]
 80242a0:	46bc      	mov	ip, r7
 80242a2:	465f      	mov	r7, fp
 80242a4:	4462      	add	r2, ip
 80242a6:	18b3      	adds	r3, r6, r2
 80242a8:	109b      	asrs	r3, r3, #2
 80242aa:	603b      	str	r3, [r7, #0]
 80242ac:	6867      	ldr	r7, [r4, #4]
 80242ae:	1ab6      	subs	r6, r6, r2
 80242b0:	46b8      	mov	r8, r7
 80242b2:	686f      	ldr	r7, [r5, #4]
 80242b4:	17f2      	asrs	r2, r6, #31
 80242b6:	46bc      	mov	ip, r7
 80242b8:	44e0      	add	r8, ip
 80242ba:	4643      	mov	r3, r8
 80242bc:	465f      	mov	r7, fp
 80242be:	18c1      	adds	r1, r0, r3
 80242c0:	1089      	asrs	r1, r1, #2
 80242c2:	6079      	str	r1, [r7, #4]
 80242c4:	9900      	ldr	r1, [sp, #0]
 80242c6:	4690      	mov	r8, r2
 80242c8:	468c      	mov	ip, r1
 80242ca:	6867      	ldr	r7, [r4, #4]
 80242cc:	6869      	ldr	r1, [r5, #4]
 80242ce:	44e3      	add	fp, ip
 80242d0:	1a7f      	subs	r7, r7, r1
 80242d2:	9703      	str	r7, [sp, #12]
 80242d4:	6829      	ldr	r1, [r5, #0]
 80242d6:	6827      	ldr	r7, [r4, #0]
 80242d8:	1a7f      	subs	r7, r7, r1
 80242da:	9704      	str	r7, [sp, #16]
 80242dc:	1ac7      	subs	r7, r0, r3
 80242de:	17fa      	asrs	r2, r7, #31
 80242e0:	4692      	mov	sl, r2
 80242e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80242e4:	9a07      	ldr	r2, [sp, #28]
 80242e6:	0030      	movs	r0, r6
 80242e8:	4641      	mov	r1, r8
 80242ea:	f7dc f969 	bl	80005c0 <__aeabi_lmul>
 80242ee:	9a08      	ldr	r2, [sp, #32]
 80242f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80242f2:	9112      	str	r1, [sp, #72]	@ 0x48
 80242f4:	0038      	movs	r0, r7
 80242f6:	4651      	mov	r1, sl
 80242f8:	f7dc f962 	bl	80005c0 <__aeabi_lmul>
 80242fc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80242fe:	9a07      	ldr	r2, [sp, #28]
 8024300:	4684      	mov	ip, r0
 8024302:	4461      	add	r1, ip
 8024304:	1049      	asrs	r1, r1, #1
 8024306:	6021      	str	r1, [r4, #0]
 8024308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802430a:	0038      	movs	r0, r7
 802430c:	4651      	mov	r1, sl
 802430e:	f7dc f957 	bl	80005c0 <__aeabi_lmul>
 8024312:	9a08      	ldr	r2, [sp, #32]
 8024314:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024316:	000f      	movs	r7, r1
 8024318:	0030      	movs	r0, r6
 802431a:	4641      	mov	r1, r8
 802431c:	f7dc f950 	bl	80005c0 <__aeabi_lmul>
 8024320:	9b00      	ldr	r3, [sp, #0]
 8024322:	9a01      	ldr	r2, [sp, #4]
 8024324:	469c      	mov	ip, r3
 8024326:	9803      	ldr	r0, [sp, #12]
 8024328:	1a7f      	subs	r7, r7, r1
 802432a:	107f      	asrs	r7, r7, #1
 802432c:	6067      	str	r7, [r4, #4]
 802432e:	0016      	movs	r6, r2
 8024330:	4464      	add	r4, ip
 8024332:	4684      	mov	ip, r0
 8024334:	4466      	add	r6, ip
 8024336:	17f2      	asrs	r2, r6, #31
 8024338:	4690      	mov	r8, r2
 802433a:	9902      	ldr	r1, [sp, #8]
 802433c:	9f04      	ldr	r7, [sp, #16]
 802433e:	0030      	movs	r0, r6
 8024340:	1bcf      	subs	r7, r1, r7
 8024342:	17fa      	asrs	r2, r7, #31
 8024344:	4692      	mov	sl, r2
 8024346:	4641      	mov	r1, r8
 8024348:	9a05      	ldr	r2, [sp, #20]
 802434a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802434c:	f7dc f938 	bl	80005c0 <__aeabi_lmul>
 8024350:	9a06      	ldr	r2, [sp, #24]
 8024352:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024354:	9112      	str	r1, [sp, #72]	@ 0x48
 8024356:	0038      	movs	r0, r7
 8024358:	4651      	mov	r1, sl
 802435a:	f7dc f931 	bl	80005c0 <__aeabi_lmul>
 802435e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024360:	9a05      	ldr	r2, [sp, #20]
 8024362:	4684      	mov	ip, r0
 8024364:	4648      	mov	r0, r9
 8024366:	4461      	add	r1, ip
 8024368:	1049      	asrs	r1, r1, #1
 802436a:	6001      	str	r1, [r0, #0]
 802436c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802436e:	0038      	movs	r0, r7
 8024370:	4651      	mov	r1, sl
 8024372:	f7dc f925 	bl	80005c0 <__aeabi_lmul>
 8024376:	9a06      	ldr	r2, [sp, #24]
 8024378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802437a:	000f      	movs	r7, r1
 802437c:	0030      	movs	r0, r6
 802437e:	4641      	mov	r1, r8
 8024380:	f7dc f91e 	bl	80005c0 <__aeabi_lmul>
 8024384:	464e      	mov	r6, r9
 8024386:	9a00      	ldr	r2, [sp, #0]
 8024388:	9b01      	ldr	r3, [sp, #4]
 802438a:	4694      	mov	ip, r2
 802438c:	9803      	ldr	r0, [sp, #12]
 802438e:	1a7f      	subs	r7, r7, r1
 8024390:	107f      	asrs	r7, r7, #1
 8024392:	6077      	str	r7, [r6, #4]
 8024394:	1a1e      	subs	r6, r3, r0
 8024396:	9b04      	ldr	r3, [sp, #16]
 8024398:	44e1      	add	r9, ip
 802439a:	469c      	mov	ip, r3
 802439c:	17f0      	asrs	r0, r6, #31
 802439e:	4680      	mov	r8, r0
 80243a0:	9902      	ldr	r1, [sp, #8]
 80243a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80243a4:	4461      	add	r1, ip
 80243a6:	17cb      	asrs	r3, r1, #31
 80243a8:	000f      	movs	r7, r1
 80243aa:	469a      	mov	sl, r3
 80243ac:	0030      	movs	r0, r6
 80243ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80243b0:	4641      	mov	r1, r8
 80243b2:	f7dc f905 	bl	80005c0 <__aeabi_lmul>
 80243b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80243b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80243ba:	9101      	str	r1, [sp, #4]
 80243bc:	0038      	movs	r0, r7
 80243be:	4651      	mov	r1, sl
 80243c0:	f7dc f8fe 	bl	80005c0 <__aeabi_lmul>
 80243c4:	9801      	ldr	r0, [sp, #4]
 80243c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80243c8:	4684      	mov	ip, r0
 80243ca:	4461      	add	r1, ip
 80243cc:	1049      	asrs	r1, r1, #1
 80243ce:	6029      	str	r1, [r5, #0]
 80243d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80243d2:	0038      	movs	r0, r7
 80243d4:	4651      	mov	r1, sl
 80243d6:	f7dc f8f3 	bl	80005c0 <__aeabi_lmul>
 80243da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80243dc:	000f      	movs	r7, r1
 80243de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80243e0:	0030      	movs	r0, r6
 80243e2:	4641      	mov	r1, r8
 80243e4:	f7dc f8ec 	bl	80005c0 <__aeabi_lmul>
 80243e8:	1a7f      	subs	r7, r7, r1
 80243ea:	107f      	asrs	r7, r7, #1
 80243ec:	606f      	str	r7, [r5, #4]
 80243ee:	9a00      	ldr	r2, [sp, #0]
 80243f0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80243f2:	4694      	mov	ip, r2
 80243f4:	4465      	add	r5, ip
 80243f6:	468c      	mov	ip, r1
 80243f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80243fa:	0013      	movs	r3, r2
 80243fc:	4462      	add	r2, ip
 80243fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024400:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024402:	429a      	cmp	r2, r3
 8024404:	d900      	bls.n	8024408 <arm_radix4_butterfly_q31+0x478>
 8024406:	e73a      	b.n	802427e <arm_radix4_butterfly_q31+0x2ee>
 8024408:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802440a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802440c:	468c      	mov	ip, r1
 802440e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8024410:	4462      	add	r2, ip
 8024412:	468c      	mov	ip, r1
 8024414:	9216      	str	r2, [sp, #88]	@ 0x58
 8024416:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8024418:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802441a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802441c:	4462      	add	r2, ip
 802441e:	468c      	mov	ip, r1
 8024420:	9219      	str	r2, [sp, #100]	@ 0x64
 8024422:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024424:	3301      	adds	r3, #1
 8024426:	4462      	add	r2, ip
 8024428:	9218      	str	r2, [sp, #96]	@ 0x60
 802442a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802442c:	9315      	str	r3, [sp, #84]	@ 0x54
 802442e:	3208      	adds	r2, #8
 8024430:	9217      	str	r2, [sp, #92]	@ 0x5c
 8024432:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024434:	4293      	cmp	r3, r2
 8024436:	d800      	bhi.n	802443a <arm_radix4_butterfly_q31+0x4aa>
 8024438:	e6e8      	b.n	802420c <arm_radix4_butterfly_q31+0x27c>
 802443a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802443c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802443e:	009b      	lsls	r3, r3, #2
 8024440:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024442:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024444:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024446:	089b      	lsrs	r3, r3, #2
 8024448:	9320      	str	r3, [sp, #128]	@ 0x80
 802444a:	2b04      	cmp	r3, #4
 802444c:	d900      	bls.n	8024450 <arm_radix4_butterfly_q31+0x4c0>
 802444e:	e6c1      	b.n	80241d4 <arm_radix4_butterfly_q31+0x244>
 8024450:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024452:	469a      	mov	sl, r3
 8024454:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024456:	691c      	ldr	r4, [r3, #16]
 8024458:	685a      	ldr	r2, [r3, #4]
 802445a:	46a1      	mov	r9, r4
 802445c:	4690      	mov	r8, r2
 802445e:	6819      	ldr	r1, [r3, #0]
 8024460:	689a      	ldr	r2, [r3, #8]
 8024462:	699f      	ldr	r7, [r3, #24]
 8024464:	188d      	adds	r5, r1, r2
 8024466:	444d      	add	r5, r9
 8024468:	19ed      	adds	r5, r5, r7
 802446a:	69de      	ldr	r6, [r3, #28]
 802446c:	601d      	str	r5, [r3, #0]
 802446e:	4645      	mov	r5, r8
 8024470:	46b4      	mov	ip, r6
 8024472:	68d8      	ldr	r0, [r3, #12]
 8024474:	695c      	ldr	r4, [r3, #20]
 8024476:	182d      	adds	r5, r5, r0
 8024478:	192d      	adds	r5, r5, r4
 802447a:	4465      	add	r5, ip
 802447c:	605d      	str	r5, [r3, #4]
 802447e:	1a8d      	subs	r5, r1, r2
 8024480:	444d      	add	r5, r9
 8024482:	1bed      	subs	r5, r5, r7
 8024484:	609d      	str	r5, [r3, #8]
 8024486:	4645      	mov	r5, r8
 8024488:	1a2d      	subs	r5, r5, r0
 802448a:	192d      	adds	r5, r5, r4
 802448c:	1bad      	subs	r5, r5, r6
 802448e:	464e      	mov	r6, r9
 8024490:	60dd      	str	r5, [r3, #12]
 8024492:	180d      	adds	r5, r1, r0
 8024494:	1bad      	subs	r5, r5, r6
 8024496:	4666      	mov	r6, ip
 8024498:	1bad      	subs	r5, r5, r6
 802449a:	611d      	str	r5, [r3, #16]
 802449c:	4645      	mov	r5, r8
 802449e:	1aad      	subs	r5, r5, r2
 80244a0:	4442      	add	r2, r8
 80244a2:	1b12      	subs	r2, r2, r4
 80244a4:	1bd2      	subs	r2, r2, r7
 80244a6:	1a08      	subs	r0, r1, r0
 80244a8:	61da      	str	r2, [r3, #28]
 80244aa:	4649      	mov	r1, r9
 80244ac:	2201      	movs	r2, #1
 80244ae:	1a41      	subs	r1, r0, r1
 80244b0:	4252      	negs	r2, r2
 80244b2:	4461      	add	r1, ip
 80244b4:	4694      	mov	ip, r2
 80244b6:	44e2      	add	sl, ip
 80244b8:	4652      	mov	r2, sl
 80244ba:	1b2d      	subs	r5, r5, r4
 80244bc:	19ed      	adds	r5, r5, r7
 80244be:	615d      	str	r5, [r3, #20]
 80244c0:	6199      	str	r1, [r3, #24]
 80244c2:	3320      	adds	r3, #32
 80244c4:	2a00      	cmp	r2, #0
 80244c6:	d1c6      	bne.n	8024456 <arm_radix4_butterfly_q31+0x4c6>
 80244c8:	b027      	add	sp, #156	@ 0x9c
 80244ca:	bc3c      	pop	{r2, r3, r4, r5}
 80244cc:	4690      	mov	r8, r2
 80244ce:	4699      	mov	r9, r3
 80244d0:	46a2      	mov	sl, r4
 80244d2:	46ab      	mov	fp, r5
 80244d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80244d6:	469a      	mov	sl, r3
 80244d8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80244da:	e7bc      	b.n	8024456 <arm_radix4_butterfly_q31+0x4c6>

080244dc <arm_radix4_butterfly_inverse_q31>:
 80244dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80244de:	464d      	mov	r5, r9
 80244e0:	4644      	mov	r4, r8
 80244e2:	465f      	mov	r7, fp
 80244e4:	4656      	mov	r6, sl
 80244e6:	b4f0      	push	{r4, r5, r6, r7}
 80244e8:	b0a7      	sub	sp, #156	@ 0x9c
 80244ea:	469c      	mov	ip, r3
 80244ec:	9114      	str	r1, [sp, #80]	@ 0x50
 80244ee:	0889      	lsrs	r1, r1, #2
 80244f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80244f2:	00cb      	lsls	r3, r1, #3
 80244f4:	0015      	movs	r5, r2
 80244f6:	9223      	str	r2, [sp, #140]	@ 0x8c
 80244f8:	18c2      	adds	r2, r0, r3
 80244fa:	000c      	movs	r4, r1
 80244fc:	9124      	str	r1, [sp, #144]	@ 0x90
 80244fe:	18d1      	adds	r1, r2, r3
 8024500:	468b      	mov	fp, r1
 8024502:	469a      	mov	sl, r3
 8024504:	4663      	mov	r3, ip
 8024506:	44da      	add	sl, fp
 8024508:	46d0      	mov	r8, sl
 802450a:	4681      	mov	r9, r0
 802450c:	4692      	mov	sl, r2
 802450e:	0119      	lsls	r1, r3, #4
 8024510:	910d      	str	r1, [sp, #52]	@ 0x34
 8024512:	00d9      	lsls	r1, r3, #3
 8024514:	005b      	lsls	r3, r3, #1
 8024516:	4463      	add	r3, ip
 8024518:	910e      	str	r1, [sp, #56]	@ 0x38
 802451a:	00d9      	lsls	r1, r3, #3
 802451c:	9022      	str	r0, [sp, #136]	@ 0x88
 802451e:	9025      	str	r0, [sp, #148]	@ 0x94
 8024520:	910f      	str	r1, [sp, #60]	@ 0x3c
 8024522:	9502      	str	r5, [sp, #8]
 8024524:	9500      	str	r5, [sp, #0]
 8024526:	9501      	str	r5, [sp, #4]
 8024528:	9409      	str	r4, [sp, #36]	@ 0x24
 802452a:	464b      	mov	r3, r9
 802452c:	681b      	ldr	r3, [r3, #0]
 802452e:	4652      	mov	r2, sl
 8024530:	111c      	asrs	r4, r3, #4
 8024532:	465b      	mov	r3, fp
 8024534:	4648      	mov	r0, r9
 8024536:	681b      	ldr	r3, [r3, #0]
 8024538:	6812      	ldr	r2, [r2, #0]
 802453a:	6840      	ldr	r0, [r0, #4]
 802453c:	111b      	asrs	r3, r3, #4
 802453e:	18e7      	adds	r7, r4, r3
 8024540:	1ae3      	subs	r3, r4, r3
 8024542:	1114      	asrs	r4, r2, #4
 8024544:	4642      	mov	r2, r8
 8024546:	1105      	asrs	r5, r0, #4
 8024548:	4658      	mov	r0, fp
 802454a:	6812      	ldr	r2, [r2, #0]
 802454c:	6840      	ldr	r0, [r0, #4]
 802454e:	9303      	str	r3, [sp, #12]
 8024550:	1113      	asrs	r3, r2, #4
 8024552:	18e2      	adds	r2, r4, r3
 8024554:	1103      	asrs	r3, r0, #4
 8024556:	18ee      	adds	r6, r5, r3
 8024558:	1ae8      	subs	r0, r5, r3
 802455a:	464d      	mov	r5, r9
 802455c:	18bb      	adds	r3, r7, r2
 802455e:	602b      	str	r3, [r5, #0]
 8024560:	4641      	mov	r1, r8
 8024562:	4655      	mov	r5, sl
 8024564:	6849      	ldr	r1, [r1, #4]
 8024566:	686d      	ldr	r5, [r5, #4]
 8024568:	110b      	asrs	r3, r1, #4
 802456a:	112d      	asrs	r5, r5, #4
 802456c:	18eb      	adds	r3, r5, r3
 802456e:	464d      	mov	r5, r9
 8024570:	18f1      	adds	r1, r6, r3
 8024572:	6069      	str	r1, [r5, #4]
 8024574:	4655      	mov	r5, sl
 8024576:	686d      	ldr	r5, [r5, #4]
 8024578:	9004      	str	r0, [sp, #16]
 802457a:	112c      	asrs	r4, r5, #4
 802457c:	4645      	mov	r5, r8
 802457e:	686d      	ldr	r5, [r5, #4]
 8024580:	1129      	asrs	r1, r5, #4
 8024582:	1a65      	subs	r5, r4, r1
 8024584:	4651      	mov	r1, sl
 8024586:	6809      	ldr	r1, [r1, #0]
 8024588:	1abc      	subs	r4, r7, r2
 802458a:	1108      	asrs	r0, r1, #4
 802458c:	4641      	mov	r1, r8
 802458e:	17e2      	asrs	r2, r4, #31
 8024590:	6809      	ldr	r1, [r1, #0]
 8024592:	9207      	str	r2, [sp, #28]
 8024594:	9a01      	ldr	r2, [sp, #4]
 8024596:	1109      	asrs	r1, r1, #4
 8024598:	6817      	ldr	r7, [r2, #0]
 802459a:	1a41      	subs	r1, r0, r1
 802459c:	9106      	str	r1, [sp, #24]
 802459e:	0039      	movs	r1, r7
 80245a0:	17ff      	asrs	r7, r7, #31
 80245a2:	0038      	movs	r0, r7
 80245a4:	9505      	str	r5, [sp, #20]
 80245a6:	1af5      	subs	r5, r6, r3
 80245a8:	17ef      	asrs	r7, r5, #31
 80245aa:	970b      	str	r7, [sp, #44]	@ 0x2c
 80245ac:	6857      	ldr	r7, [r2, #4]
 80245ae:	0003      	movs	r3, r0
 80245b0:	17fe      	asrs	r6, r7, #31
 80245b2:	000a      	movs	r2, r1
 80245b4:	9108      	str	r1, [sp, #32]
 80245b6:	900a      	str	r0, [sp, #40]	@ 0x28
 80245b8:	17e1      	asrs	r1, r4, #31
 80245ba:	0020      	movs	r0, r4
 80245bc:	960c      	str	r6, [sp, #48]	@ 0x30
 80245be:	f7db ffff 	bl	80005c0 <__aeabi_lmul>
 80245c2:	003a      	movs	r2, r7
 80245c4:	17fb      	asrs	r3, r7, #31
 80245c6:	000e      	movs	r6, r1
 80245c8:	0028      	movs	r0, r5
 80245ca:	17e9      	asrs	r1, r5, #31
 80245cc:	f7db fff8 	bl	80005c0 <__aeabi_lmul>
 80245d0:	4653      	mov	r3, sl
 80245d2:	1a76      	subs	r6, r6, r1
 80245d4:	0076      	lsls	r6, r6, #1
 80245d6:	601e      	str	r6, [r3, #0]
 80245d8:	002a      	movs	r2, r5
 80245da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80245dc:	9808      	ldr	r0, [sp, #32]
 80245de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80245e0:	f7db ffee 	bl	80005c0 <__aeabi_lmul>
 80245e4:	003a      	movs	r2, r7
 80245e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80245e8:	000d      	movs	r5, r1
 80245ea:	0020      	movs	r0, r4
 80245ec:	9907      	ldr	r1, [sp, #28]
 80245ee:	f7db ffe7 	bl	80005c0 <__aeabi_lmul>
 80245f2:	4657      	mov	r7, sl
 80245f4:	186d      	adds	r5, r5, r1
 80245f6:	006d      	lsls	r5, r5, #1
 80245f8:	607d      	str	r5, [r7, #4]
 80245fa:	9b03      	ldr	r3, [sp, #12]
 80245fc:	9e06      	ldr	r6, [sp, #24]
 80245fe:	9d05      	ldr	r5, [sp, #20]
 8024600:	46b4      	mov	ip, r6
 8024602:	1b5d      	subs	r5, r3, r5
 8024604:	9b00      	ldr	r3, [sp, #0]
 8024606:	17ef      	asrs	r7, r5, #31
 8024608:	0039      	movs	r1, r7
 802460a:	681f      	ldr	r7, [r3, #0]
 802460c:	17fc      	asrs	r4, r7, #31
 802460e:	0020      	movs	r0, r4
 8024610:	9c04      	ldr	r4, [sp, #16]
 8024612:	4464      	add	r4, ip
 8024614:	17e6      	asrs	r6, r4, #31
 8024616:	9407      	str	r4, [sp, #28]
 8024618:	9608      	str	r6, [sp, #32]
 802461a:	685e      	ldr	r6, [r3, #4]
 802461c:	900b      	str	r0, [sp, #44]	@ 0x2c
 802461e:	17f2      	asrs	r2, r6, #31
 8024620:	0003      	movs	r3, r0
 8024622:	920c      	str	r2, [sp, #48]	@ 0x30
 8024624:	0028      	movs	r0, r5
 8024626:	003a      	movs	r2, r7
 8024628:	910a      	str	r1, [sp, #40]	@ 0x28
 802462a:	f7db ffc9 	bl	80005c0 <__aeabi_lmul>
 802462e:	0032      	movs	r2, r6
 8024630:	17f3      	asrs	r3, r6, #31
 8024632:	9807      	ldr	r0, [sp, #28]
 8024634:	000c      	movs	r4, r1
 8024636:	9908      	ldr	r1, [sp, #32]
 8024638:	f7db ffc2 	bl	80005c0 <__aeabi_lmul>
 802463c:	4658      	mov	r0, fp
 802463e:	1a64      	subs	r4, r4, r1
 8024640:	0064      	lsls	r4, r4, #1
 8024642:	9a07      	ldr	r2, [sp, #28]
 8024644:	6004      	str	r4, [r0, #0]
 8024646:	9b08      	ldr	r3, [sp, #32]
 8024648:	0038      	movs	r0, r7
 802464a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802464c:	f7db ffb8 	bl	80005c0 <__aeabi_lmul>
 8024650:	0032      	movs	r2, r6
 8024652:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024654:	000c      	movs	r4, r1
 8024656:	0028      	movs	r0, r5
 8024658:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802465a:	f7db ffb1 	bl	80005c0 <__aeabi_lmul>
 802465e:	9d05      	ldr	r5, [sp, #20]
 8024660:	465f      	mov	r7, fp
 8024662:	46ac      	mov	ip, r5
 8024664:	1864      	adds	r4, r4, r1
 8024666:	9903      	ldr	r1, [sp, #12]
 8024668:	0064      	lsls	r4, r4, #1
 802466a:	4461      	add	r1, ip
 802466c:	607c      	str	r4, [r7, #4]
 802466e:	000c      	movs	r4, r1
 8024670:	17c9      	asrs	r1, r1, #31
 8024672:	9105      	str	r1, [sp, #20]
 8024674:	9902      	ldr	r1, [sp, #8]
 8024676:	9804      	ldr	r0, [sp, #16]
 8024678:	680d      	ldr	r5, [r1, #0]
 802467a:	9e06      	ldr	r6, [sp, #24]
 802467c:	002b      	movs	r3, r5
 802467e:	17ed      	asrs	r5, r5, #31
 8024680:	684f      	ldr	r7, [r1, #4]
 8024682:	9503      	str	r5, [sp, #12]
 8024684:	1b85      	subs	r5, r0, r6
 8024686:	17e8      	asrs	r0, r5, #31
 8024688:	001a      	movs	r2, r3
 802468a:	9006      	str	r0, [sp, #24]
 802468c:	17fe      	asrs	r6, r7, #31
 802468e:	9304      	str	r3, [sp, #16]
 8024690:	0020      	movs	r0, r4
 8024692:	9b03      	ldr	r3, [sp, #12]
 8024694:	17e1      	asrs	r1, r4, #31
 8024696:	9607      	str	r6, [sp, #28]
 8024698:	f7db ff92 	bl	80005c0 <__aeabi_lmul>
 802469c:	003a      	movs	r2, r7
 802469e:	000e      	movs	r6, r1
 80246a0:	17fb      	asrs	r3, r7, #31
 80246a2:	0028      	movs	r0, r5
 80246a4:	17e9      	asrs	r1, r5, #31
 80246a6:	f7db ff8b 	bl	80005c0 <__aeabi_lmul>
 80246aa:	4640      	mov	r0, r8
 80246ac:	1a76      	subs	r6, r6, r1
 80246ae:	0076      	lsls	r6, r6, #1
 80246b0:	002a      	movs	r2, r5
 80246b2:	9b06      	ldr	r3, [sp, #24]
 80246b4:	6006      	str	r6, [r0, #0]
 80246b6:	9903      	ldr	r1, [sp, #12]
 80246b8:	9804      	ldr	r0, [sp, #16]
 80246ba:	f7db ff81 	bl	80005c0 <__aeabi_lmul>
 80246be:	0020      	movs	r0, r4
 80246c0:	2408      	movs	r4, #8
 80246c2:	9b07      	ldr	r3, [sp, #28]
 80246c4:	000d      	movs	r5, r1
 80246c6:	003a      	movs	r2, r7
 80246c8:	9905      	ldr	r1, [sp, #20]
 80246ca:	f7db ff79 	bl	80005c0 <__aeabi_lmul>
 80246ce:	4640      	mov	r0, r8
 80246d0:	46a4      	mov	ip, r4
 80246d2:	186d      	adds	r5, r5, r1
 80246d4:	006d      	lsls	r5, r5, #1
 80246d6:	6045      	str	r5, [r0, #4]
 80246d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80246da:	44e1      	add	r9, ip
 80246dc:	3801      	subs	r0, #1
 80246de:	9009      	str	r0, [sp, #36]	@ 0x24
 80246e0:	9a01      	ldr	r2, [sp, #4]
 80246e2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80246e4:	44e2      	add	sl, ip
 80246e6:	44e3      	add	fp, ip
 80246e8:	44e0      	add	r8, ip
 80246ea:	46a4      	mov	ip, r4
 80246ec:	4462      	add	r2, ip
 80246ee:	9201      	str	r2, [sp, #4]
 80246f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80246f2:	9b00      	ldr	r3, [sp, #0]
 80246f4:	4694      	mov	ip, r2
 80246f6:	4463      	add	r3, ip
 80246f8:	9300      	str	r3, [sp, #0]
 80246fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80246fc:	9902      	ldr	r1, [sp, #8]
 80246fe:	469c      	mov	ip, r3
 8024700:	4461      	add	r1, ip
 8024702:	9102      	str	r1, [sp, #8]
 8024704:	2800      	cmp	r0, #0
 8024706:	d000      	beq.n	802470a <arm_radix4_butterfly_inverse_q31+0x22e>
 8024708:	e70f      	b.n	802452a <arm_radix4_butterfly_inverse_q31+0x4e>
 802470a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802470c:	009b      	lsls	r3, r3, #2
 802470e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024710:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024712:	9320      	str	r3, [sp, #128]	@ 0x80
 8024714:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024716:	2b04      	cmp	r3, #4
 8024718:	d800      	bhi.n	802471c <arm_radix4_butterfly_inverse_q31+0x240>
 802471a:	e17c      	b.n	8024a16 <arm_radix4_butterfly_inverse_q31+0x53a>
 802471c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802471e:	0893      	lsrs	r3, r2, #2
 8024720:	1e59      	subs	r1, r3, #1
 8024722:	9321      	str	r3, [sp, #132]	@ 0x84
 8024724:	00db      	lsls	r3, r3, #3
 8024726:	931b      	str	r3, [sp, #108]	@ 0x6c
 8024728:	00d3      	lsls	r3, r2, #3
 802472a:	9300      	str	r3, [sp, #0]
 802472c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802472e:	911a      	str	r1, [sp, #104]	@ 0x68
 8024730:	00da      	lsls	r2, r3, #3
 8024732:	921e      	str	r2, [sp, #120]	@ 0x78
 8024734:	011a      	lsls	r2, r3, #4
 8024736:	921d      	str	r2, [sp, #116]	@ 0x74
 8024738:	001a      	movs	r2, r3
 802473a:	4694      	mov	ip, r2
 802473c:	005b      	lsls	r3, r3, #1
 802473e:	4463      	add	r3, ip
 8024740:	00db      	lsls	r3, r3, #3
 8024742:	931c      	str	r3, [sp, #112]	@ 0x70
 8024744:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024746:	9317      	str	r3, [sp, #92]	@ 0x5c
 8024748:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802474a:	9318      	str	r3, [sp, #96]	@ 0x60
 802474c:	9319      	str	r3, [sp, #100]	@ 0x64
 802474e:	9316      	str	r3, [sp, #88]	@ 0x58
 8024750:	2300      	movs	r3, #0
 8024752:	9315      	str	r3, [sp, #84]	@ 0x54
 8024754:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8024756:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8024758:	681a      	ldr	r2, [r3, #0]
 802475a:	685b      	ldr	r3, [r3, #4]
 802475c:	9205      	str	r2, [sp, #20]
 802475e:	9306      	str	r3, [sp, #24]
 8024760:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8024762:	468c      	mov	ip, r1
 8024764:	681a      	ldr	r2, [r3, #0]
 8024766:	685b      	ldr	r3, [r3, #4]
 8024768:	9207      	str	r2, [sp, #28]
 802476a:	9308      	str	r3, [sp, #32]
 802476c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802476e:	681a      	ldr	r2, [r3, #0]
 8024770:	685b      	ldr	r3, [r3, #4]
 8024772:	9209      	str	r2, [sp, #36]	@ 0x24
 8024774:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024776:	930a      	str	r3, [sp, #40]	@ 0x28
 8024778:	0013      	movs	r3, r2
 802477a:	4463      	add	r3, ip
 802477c:	4698      	mov	r8, r3
 802477e:	0013      	movs	r3, r2
 8024780:	4442      	add	r2, r8
 8024782:	4691      	mov	r9, r2
 8024784:	001a      	movs	r2, r3
 8024786:	444a      	add	r2, r9
 8024788:	4692      	mov	sl, r2
 802478a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802478c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802478e:	4293      	cmp	r3, r2
 8024790:	d800      	bhi.n	8024794 <arm_radix4_butterfly_inverse_q31+0x2b8>
 8024792:	e0d9      	b.n	8024948 <arm_radix4_butterfly_inverse_q31+0x46c>
 8024794:	4694      	mov	ip, r2
 8024796:	4644      	mov	r4, r8
 8024798:	4655      	mov	r5, sl
 802479a:	4688      	mov	r8, r1
 802479c:	9b07      	ldr	r3, [sp, #28]
 802479e:	17db      	asrs	r3, r3, #31
 80247a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80247a2:	9b08      	ldr	r3, [sp, #32]
 80247a4:	17db      	asrs	r3, r3, #31
 80247a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80247a8:	9b05      	ldr	r3, [sp, #20]
 80247aa:	17db      	asrs	r3, r3, #31
 80247ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80247ae:	9b06      	ldr	r3, [sp, #24]
 80247b0:	17db      	asrs	r3, r3, #31
 80247b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80247b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80247b6:	17db      	asrs	r3, r3, #31
 80247b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80247ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80247bc:	17db      	asrs	r3, r3, #31
 80247be:	9311      	str	r3, [sp, #68]	@ 0x44
 80247c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80247c2:	4463      	add	r3, ip
 80247c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80247c6:	4643      	mov	r3, r8
 80247c8:	4641      	mov	r1, r8
 80247ca:	681a      	ldr	r2, [r3, #0]
 80247cc:	464b      	mov	r3, r9
 80247ce:	684f      	ldr	r7, [r1, #4]
 80247d0:	4649      	mov	r1, r9
 80247d2:	681b      	ldr	r3, [r3, #0]
 80247d4:	18d6      	adds	r6, r2, r3
 80247d6:	1ad3      	subs	r3, r2, r3
 80247d8:	9301      	str	r3, [sp, #4]
 80247da:	684b      	ldr	r3, [r1, #4]
 80247dc:	1af9      	subs	r1, r7, r3
 80247de:	9102      	str	r1, [sp, #8]
 80247e0:	6829      	ldr	r1, [r5, #0]
 80247e2:	18f8      	adds	r0, r7, r3
 80247e4:	468c      	mov	ip, r1
 80247e6:	6827      	ldr	r7, [r4, #0]
 80247e8:	4467      	add	r7, ip
 80247ea:	003a      	movs	r2, r7
 80247ec:	19f3      	adds	r3, r6, r7
 80247ee:	4647      	mov	r7, r8
 80247f0:	109b      	asrs	r3, r3, #2
 80247f2:	603b      	str	r3, [r7, #0]
 80247f4:	6869      	ldr	r1, [r5, #4]
 80247f6:	6867      	ldr	r7, [r4, #4]
 80247f8:	468c      	mov	ip, r1
 80247fa:	4467      	add	r7, ip
 80247fc:	003b      	movs	r3, r7
 80247fe:	19c1      	adds	r1, r0, r7
 8024800:	4647      	mov	r7, r8
 8024802:	1ab6      	subs	r6, r6, r2
 8024804:	1089      	asrs	r1, r1, #2
 8024806:	6079      	str	r1, [r7, #4]
 8024808:	17f2      	asrs	r2, r6, #31
 802480a:	9900      	ldr	r1, [sp, #0]
 802480c:	4692      	mov	sl, r2
 802480e:	468c      	mov	ip, r1
 8024810:	6867      	ldr	r7, [r4, #4]
 8024812:	6869      	ldr	r1, [r5, #4]
 8024814:	44e0      	add	r8, ip
 8024816:	1a7f      	subs	r7, r7, r1
 8024818:	9703      	str	r7, [sp, #12]
 802481a:	6821      	ldr	r1, [r4, #0]
 802481c:	682f      	ldr	r7, [r5, #0]
 802481e:	1bc9      	subs	r1, r1, r7
 8024820:	1ac7      	subs	r7, r0, r3
 8024822:	17fa      	asrs	r2, r7, #31
 8024824:	4693      	mov	fp, r2
 8024826:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024828:	9a07      	ldr	r2, [sp, #28]
 802482a:	9104      	str	r1, [sp, #16]
 802482c:	0030      	movs	r0, r6
 802482e:	4651      	mov	r1, sl
 8024830:	f7db fec6 	bl	80005c0 <__aeabi_lmul>
 8024834:	9a08      	ldr	r2, [sp, #32]
 8024836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024838:	9112      	str	r1, [sp, #72]	@ 0x48
 802483a:	0038      	movs	r0, r7
 802483c:	4659      	mov	r1, fp
 802483e:	f7db febf 	bl	80005c0 <__aeabi_lmul>
 8024842:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8024844:	9a07      	ldr	r2, [sp, #28]
 8024846:	1a41      	subs	r1, r0, r1
 8024848:	1049      	asrs	r1, r1, #1
 802484a:	6021      	str	r1, [r4, #0]
 802484c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802484e:	0038      	movs	r0, r7
 8024850:	4659      	mov	r1, fp
 8024852:	f7db feb5 	bl	80005c0 <__aeabi_lmul>
 8024856:	9a08      	ldr	r2, [sp, #32]
 8024858:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802485a:	000f      	movs	r7, r1
 802485c:	0030      	movs	r0, r6
 802485e:	4651      	mov	r1, sl
 8024860:	f7db feae 	bl	80005c0 <__aeabi_lmul>
 8024864:	9b00      	ldr	r3, [sp, #0]
 8024866:	187f      	adds	r7, r7, r1
 8024868:	469c      	mov	ip, r3
 802486a:	107f      	asrs	r7, r7, #1
 802486c:	6067      	str	r7, [r4, #4]
 802486e:	9a01      	ldr	r2, [sp, #4]
 8024870:	9f03      	ldr	r7, [sp, #12]
 8024872:	9802      	ldr	r0, [sp, #8]
 8024874:	1bd7      	subs	r7, r2, r7
 8024876:	17fe      	asrs	r6, r7, #31
 8024878:	0031      	movs	r1, r6
 802487a:	9e04      	ldr	r6, [sp, #16]
 802487c:	4682      	mov	sl, r0
 802487e:	4464      	add	r4, ip
 8024880:	46b4      	mov	ip, r6
 8024882:	44e2      	add	sl, ip
 8024884:	4652      	mov	r2, sl
 8024886:	17d2      	asrs	r2, r2, #31
 8024888:	4693      	mov	fp, r2
 802488a:	0038      	movs	r0, r7
 802488c:	9a05      	ldr	r2, [sp, #20]
 802488e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024890:	9112      	str	r1, [sp, #72]	@ 0x48
 8024892:	f7db fe95 	bl	80005c0 <__aeabi_lmul>
 8024896:	9a06      	ldr	r2, [sp, #24]
 8024898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802489a:	000e      	movs	r6, r1
 802489c:	4650      	mov	r0, sl
 802489e:	4659      	mov	r1, fp
 80248a0:	f7db fe8e 	bl	80005c0 <__aeabi_lmul>
 80248a4:	4648      	mov	r0, r9
 80248a6:	1a76      	subs	r6, r6, r1
 80248a8:	1076      	asrs	r6, r6, #1
 80248aa:	6006      	str	r6, [r0, #0]
 80248ac:	9a05      	ldr	r2, [sp, #20]
 80248ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80248b0:	4650      	mov	r0, sl
 80248b2:	4659      	mov	r1, fp
 80248b4:	f7db fe84 	bl	80005c0 <__aeabi_lmul>
 80248b8:	9a06      	ldr	r2, [sp, #24]
 80248ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80248bc:	000e      	movs	r6, r1
 80248be:	0038      	movs	r0, r7
 80248c0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80248c2:	f7db fe7d 	bl	80005c0 <__aeabi_lmul>
 80248c6:	9a00      	ldr	r2, [sp, #0]
 80248c8:	9f03      	ldr	r7, [sp, #12]
 80248ca:	4694      	mov	ip, r2
 80248cc:	1876      	adds	r6, r6, r1
 80248ce:	4649      	mov	r1, r9
 80248d0:	44e1      	add	r9, ip
 80248d2:	46bc      	mov	ip, r7
 80248d4:	9b01      	ldr	r3, [sp, #4]
 80248d6:	1076      	asrs	r6, r6, #1
 80248d8:	4463      	add	r3, ip
 80248da:	17df      	asrs	r7, r3, #31
 80248dc:	604e      	str	r6, [r1, #4]
 80248de:	46ba      	mov	sl, r7
 80248e0:	001e      	movs	r6, r3
 80248e2:	9802      	ldr	r0, [sp, #8]
 80248e4:	9b04      	ldr	r3, [sp, #16]
 80248e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80248e8:	1ac7      	subs	r7, r0, r3
 80248ea:	17fb      	asrs	r3, r7, #31
 80248ec:	469b      	mov	fp, r3
 80248ee:	0030      	movs	r0, r6
 80248f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80248f2:	4651      	mov	r1, sl
 80248f4:	f7db fe64 	bl	80005c0 <__aeabi_lmul>
 80248f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80248fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80248fc:	9101      	str	r1, [sp, #4]
 80248fe:	0038      	movs	r0, r7
 8024900:	4659      	mov	r1, fp
 8024902:	f7db fe5d 	bl	80005c0 <__aeabi_lmul>
 8024906:	9801      	ldr	r0, [sp, #4]
 8024908:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802490a:	1a41      	subs	r1, r0, r1
 802490c:	1049      	asrs	r1, r1, #1
 802490e:	6029      	str	r1, [r5, #0]
 8024910:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024912:	0038      	movs	r0, r7
 8024914:	4659      	mov	r1, fp
 8024916:	f7db fe53 	bl	80005c0 <__aeabi_lmul>
 802491a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802491c:	000f      	movs	r7, r1
 802491e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024920:	0030      	movs	r0, r6
 8024922:	4651      	mov	r1, sl
 8024924:	f7db fe4c 	bl	80005c0 <__aeabi_lmul>
 8024928:	187f      	adds	r7, r7, r1
 802492a:	107f      	asrs	r7, r7, #1
 802492c:	606f      	str	r7, [r5, #4]
 802492e:	9a00      	ldr	r2, [sp, #0]
 8024930:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8024932:	4694      	mov	ip, r2
 8024934:	4465      	add	r5, ip
 8024936:	468c      	mov	ip, r1
 8024938:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802493a:	0013      	movs	r3, r2
 802493c:	4462      	add	r2, ip
 802493e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024940:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8024942:	429a      	cmp	r2, r3
 8024944:	d900      	bls.n	8024948 <arm_radix4_butterfly_inverse_q31+0x46c>
 8024946:	e73e      	b.n	80247c6 <arm_radix4_butterfly_inverse_q31+0x2ea>
 8024948:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802494a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802494c:	468c      	mov	ip, r1
 802494e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8024950:	4462      	add	r2, ip
 8024952:	468c      	mov	ip, r1
 8024954:	9216      	str	r2, [sp, #88]	@ 0x58
 8024956:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8024958:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802495a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802495c:	4462      	add	r2, ip
 802495e:	468c      	mov	ip, r1
 8024960:	9219      	str	r2, [sp, #100]	@ 0x64
 8024962:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8024964:	3301      	adds	r3, #1
 8024966:	4462      	add	r2, ip
 8024968:	9218      	str	r2, [sp, #96]	@ 0x60
 802496a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 802496c:	9315      	str	r3, [sp, #84]	@ 0x54
 802496e:	3208      	adds	r2, #8
 8024970:	9217      	str	r2, [sp, #92]	@ 0x5c
 8024972:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8024974:	4293      	cmp	r3, r2
 8024976:	d800      	bhi.n	802497a <arm_radix4_butterfly_inverse_q31+0x49e>
 8024978:	e6ec      	b.n	8024754 <arm_radix4_butterfly_inverse_q31+0x278>
 802497a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802497c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802497e:	009b      	lsls	r3, r3, #2
 8024980:	931f      	str	r3, [sp, #124]	@ 0x7c
 8024982:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024984:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024986:	089b      	lsrs	r3, r3, #2
 8024988:	9320      	str	r3, [sp, #128]	@ 0x80
 802498a:	2b04      	cmp	r3, #4
 802498c:	d900      	bls.n	8024990 <arm_radix4_butterfly_inverse_q31+0x4b4>
 802498e:	e6c5      	b.n	802471c <arm_radix4_butterfly_inverse_q31+0x240>
 8024990:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8024992:	469a      	mov	sl, r3
 8024994:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024996:	681a      	ldr	r2, [r3, #0]
 8024998:	6918      	ldr	r0, [r3, #16]
 802499a:	4691      	mov	r9, r2
 802499c:	464c      	mov	r4, r9
 802499e:	4680      	mov	r8, r0
 80249a0:	69de      	ldr	r6, [r3, #28]
 80249a2:	689d      	ldr	r5, [r3, #8]
 80249a4:	46b4      	mov	ip, r6
 80249a6:	6998      	ldr	r0, [r3, #24]
 80249a8:	1964      	adds	r4, r4, r5
 80249aa:	6859      	ldr	r1, [r3, #4]
 80249ac:	68da      	ldr	r2, [r3, #12]
 80249ae:	4444      	add	r4, r8
 80249b0:	695f      	ldr	r7, [r3, #20]
 80249b2:	1824      	adds	r4, r4, r0
 80249b4:	601c      	str	r4, [r3, #0]
 80249b6:	188c      	adds	r4, r1, r2
 80249b8:	19e4      	adds	r4, r4, r7
 80249ba:	4464      	add	r4, ip
 80249bc:	605c      	str	r4, [r3, #4]
 80249be:	464c      	mov	r4, r9
 80249c0:	1b64      	subs	r4, r4, r5
 80249c2:	4444      	add	r4, r8
 80249c4:	1a24      	subs	r4, r4, r0
 80249c6:	609c      	str	r4, [r3, #8]
 80249c8:	1a8c      	subs	r4, r1, r2
 80249ca:	19e4      	adds	r4, r4, r7
 80249cc:	1ba4      	subs	r4, r4, r6
 80249ce:	60dc      	str	r4, [r3, #12]
 80249d0:	464c      	mov	r4, r9
 80249d2:	4646      	mov	r6, r8
 80249d4:	1aa4      	subs	r4, r4, r2
 80249d6:	1ba4      	subs	r4, r4, r6
 80249d8:	4464      	add	r4, ip
 80249da:	611c      	str	r4, [r3, #16]
 80249dc:	194c      	adds	r4, r1, r5
 80249de:	1be4      	subs	r4, r4, r7
 80249e0:	1a24      	subs	r4, r4, r0
 80249e2:	615c      	str	r4, [r3, #20]
 80249e4:	4644      	mov	r4, r8
 80249e6:	4666      	mov	r6, ip
 80249e8:	444a      	add	r2, r9
 80249ea:	1b12      	subs	r2, r2, r4
 80249ec:	1b92      	subs	r2, r2, r6
 80249ee:	619a      	str	r2, [r3, #24]
 80249f0:	1b4a      	subs	r2, r1, r5
 80249f2:	1bd1      	subs	r1, r2, r7
 80249f4:	2201      	movs	r2, #1
 80249f6:	4252      	negs	r2, r2
 80249f8:	4694      	mov	ip, r2
 80249fa:	44e2      	add	sl, ip
 80249fc:	4652      	mov	r2, sl
 80249fe:	1809      	adds	r1, r1, r0
 8024a00:	61d9      	str	r1, [r3, #28]
 8024a02:	3320      	adds	r3, #32
 8024a04:	2a00      	cmp	r2, #0
 8024a06:	d1c6      	bne.n	8024996 <arm_radix4_butterfly_inverse_q31+0x4ba>
 8024a08:	b027      	add	sp, #156	@ 0x9c
 8024a0a:	bc3c      	pop	{r2, r3, r4, r5}
 8024a0c:	4690      	mov	r8, r2
 8024a0e:	4699      	mov	r9, r3
 8024a10:	46a2      	mov	sl, r4
 8024a12:	46ab      	mov	fp, r5
 8024a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024a16:	469a      	mov	sl, r3
 8024a18:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024a1a:	e7bc      	b.n	8024996 <arm_radix4_butterfly_inverse_q31+0x4ba>

08024a1c <arm_cmplx_mag_squared_q31>:
 8024a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024a1e:	464f      	mov	r7, r9
 8024a20:	4646      	mov	r6, r8
 8024a22:	0004      	movs	r4, r0
 8024a24:	b4c0      	push	{r6, r7}
 8024a26:	0016      	movs	r6, r2
 8024a28:	000f      	movs	r7, r1
 8024a2a:	2a00      	cmp	r2, #0
 8024a2c:	d018      	beq.n	8024a60 <arm_cmplx_mag_squared_q31+0x44>
 8024a2e:	6823      	ldr	r3, [r4, #0]
 8024a30:	6822      	ldr	r2, [r4, #0]
 8024a32:	17d9      	asrs	r1, r3, #31
 8024a34:	6863      	ldr	r3, [r4, #4]
 8024a36:	0010      	movs	r0, r2
 8024a38:	4698      	mov	r8, r3
 8024a3a:	17db      	asrs	r3, r3, #31
 8024a3c:	4699      	mov	r9, r3
 8024a3e:	000b      	movs	r3, r1
 8024a40:	f7db fdbe 	bl	80005c0 <__aeabi_lmul>
 8024a44:	4642      	mov	r2, r8
 8024a46:	104d      	asrs	r5, r1, #1
 8024a48:	464b      	mov	r3, r9
 8024a4a:	4640      	mov	r0, r8
 8024a4c:	4649      	mov	r1, r9
 8024a4e:	f7db fdb7 	bl	80005c0 <__aeabi_lmul>
 8024a52:	1049      	asrs	r1, r1, #1
 8024a54:	1869      	adds	r1, r5, r1
 8024a56:	3e01      	subs	r6, #1
 8024a58:	c702      	stmia	r7!, {r1}
 8024a5a:	3408      	adds	r4, #8
 8024a5c:	2e00      	cmp	r6, #0
 8024a5e:	d1e6      	bne.n	8024a2e <arm_cmplx_mag_squared_q31+0x12>
 8024a60:	bc0c      	pop	{r2, r3}
 8024a62:	4690      	mov	r8, r2
 8024a64:	4699      	mov	r9, r3
 8024a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024a68 <arm_mult_q31>:
 8024a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024a6a:	4646      	mov	r6, r8
 8024a6c:	464f      	mov	r7, r9
 8024a6e:	4690      	mov	r8, r2
 8024a70:	b4c0      	push	{r6, r7}
 8024a72:	001d      	movs	r5, r3
 8024a74:	0006      	movs	r6, r0
 8024a76:	000f      	movs	r7, r1
 8024a78:	2400      	movs	r4, #0
 8024a7a:	2b00      	cmp	r3, #0
 8024a7c:	d020      	beq.n	8024ac0 <arm_mult_q31+0x58>
 8024a7e:	4b12      	ldr	r3, [pc, #72]	@ (8024ac8 <arm_mult_q31+0x60>)
 8024a80:	4699      	mov	r9, r3
 8024a82:	e007      	b.n	8024a94 <arm_mult_q31+0x2c>
 8024a84:	464b      	mov	r3, r9
 8024a86:	4059      	eors	r1, r3
 8024a88:	4643      	mov	r3, r8
 8024a8a:	3d01      	subs	r5, #1
 8024a8c:	5119      	str	r1, [r3, r4]
 8024a8e:	3404      	adds	r4, #4
 8024a90:	2d00      	cmp	r5, #0
 8024a92:	d015      	beq.n	8024ac0 <arm_mult_q31+0x58>
 8024a94:	5933      	ldr	r3, [r6, r4]
 8024a96:	593a      	ldr	r2, [r7, r4]
 8024a98:	17d9      	asrs	r1, r3, #31
 8024a9a:	593b      	ldr	r3, [r7, r4]
 8024a9c:	5930      	ldr	r0, [r6, r4]
 8024a9e:	17db      	asrs	r3, r3, #31
 8024aa0:	f7db fd8e 	bl	80005c0 <__aeabi_lmul>
 8024aa4:	004b      	lsls	r3, r1, #1
 8024aa6:	0fc0      	lsrs	r0, r0, #31
 8024aa8:	4318      	orrs	r0, r3
 8024aaa:	17c9      	asrs	r1, r1, #31
 8024aac:	17c3      	asrs	r3, r0, #31
 8024aae:	428b      	cmp	r3, r1
 8024ab0:	d1e8      	bne.n	8024a84 <arm_mult_q31+0x1c>
 8024ab2:	0001      	movs	r1, r0
 8024ab4:	4643      	mov	r3, r8
 8024ab6:	3d01      	subs	r5, #1
 8024ab8:	5119      	str	r1, [r3, r4]
 8024aba:	3404      	adds	r4, #4
 8024abc:	2d00      	cmp	r5, #0
 8024abe:	d1e9      	bne.n	8024a94 <arm_mult_q31+0x2c>
 8024ac0:	bc0c      	pop	{r2, r3}
 8024ac2:	4690      	mov	r8, r2
 8024ac4:	4699      	mov	r9, r3
 8024ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024ac8:	7fffffff 	.word	0x7fffffff

08024acc <arm_add_q31>:
 8024acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024ace:	465f      	mov	r7, fp
 8024ad0:	4656      	mov	r6, sl
 8024ad2:	464d      	mov	r5, r9
 8024ad4:	4644      	mov	r4, r8
 8024ad6:	b4f0      	push	{r4, r5, r6, r7}
 8024ad8:	4693      	mov	fp, r2
 8024ada:	b083      	sub	sp, #12
 8024adc:	4681      	mov	r9, r0
 8024ade:	468a      	mov	sl, r1
 8024ae0:	4698      	mov	r8, r3
 8024ae2:	2200      	movs	r2, #0
 8024ae4:	2b00      	cmp	r3, #0
 8024ae6:	d020      	beq.n	8024b2a <arm_add_q31+0x5e>
 8024ae8:	4649      	mov	r1, r9
 8024aea:	4653      	mov	r3, sl
 8024aec:	588e      	ldr	r6, [r1, r2]
 8024aee:	589b      	ldr	r3, [r3, r2]
 8024af0:	17f7      	asrs	r7, r6, #31
 8024af2:	001c      	movs	r4, r3
 8024af4:	0030      	movs	r0, r6
 8024af6:	0039      	movs	r1, r7
 8024af8:	17dd      	asrs	r5, r3, #31
 8024afa:	46b4      	mov	ip, r6
 8024afc:	1900      	adds	r0, r0, r4
 8024afe:	4169      	adcs	r1, r5
 8024b00:	4463      	add	r3, ip
 8024b02:	9000      	str	r0, [sp, #0]
 8024b04:	9101      	str	r1, [sp, #4]
 8024b06:	17d9      	asrs	r1, r3, #31
 8024b08:	468c      	mov	ip, r1
 8024b0a:	9901      	ldr	r1, [sp, #4]
 8024b0c:	458c      	cmp	ip, r1
 8024b0e:	d002      	beq.n	8024b16 <arm_add_q31+0x4a>
 8024b10:	17cb      	asrs	r3, r1, #31
 8024b12:	4909      	ldr	r1, [pc, #36]	@ (8024b38 <arm_add_q31+0x6c>)
 8024b14:	404b      	eors	r3, r1
 8024b16:	4659      	mov	r1, fp
 8024b18:	508b      	str	r3, [r1, r2]
 8024b1a:	2301      	movs	r3, #1
 8024b1c:	425b      	negs	r3, r3
 8024b1e:	469c      	mov	ip, r3
 8024b20:	44e0      	add	r8, ip
 8024b22:	4643      	mov	r3, r8
 8024b24:	3204      	adds	r2, #4
 8024b26:	2b00      	cmp	r3, #0
 8024b28:	d1de      	bne.n	8024ae8 <arm_add_q31+0x1c>
 8024b2a:	b003      	add	sp, #12
 8024b2c:	bc3c      	pop	{r2, r3, r4, r5}
 8024b2e:	4690      	mov	r8, r2
 8024b30:	4699      	mov	r9, r3
 8024b32:	46a2      	mov	sl, r4
 8024b34:	46ab      	mov	fp, r5
 8024b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024b38:	7fffffff 	.word	0x7fffffff

08024b3c <atof>:
 8024b3c:	b510      	push	{r4, lr}
 8024b3e:	2100      	movs	r1, #0
 8024b40:	f000 fe1e 	bl	8025780 <strtod>
 8024b44:	bd10      	pop	{r4, pc}

08024b46 <atoi>:
 8024b46:	b510      	push	{r4, lr}
 8024b48:	220a      	movs	r2, #10
 8024b4a:	2100      	movs	r1, #0
 8024b4c:	f000 feb0 	bl	80258b0 <strtol>
 8024b50:	bd10      	pop	{r4, pc}
	...

08024b54 <sulp>:
 8024b54:	b570      	push	{r4, r5, r6, lr}
 8024b56:	0016      	movs	r6, r2
 8024b58:	000d      	movs	r5, r1
 8024b5a:	f003 fd0f 	bl	802857c <__ulp>
 8024b5e:	2e00      	cmp	r6, #0
 8024b60:	d00d      	beq.n	8024b7e <sulp+0x2a>
 8024b62:	236b      	movs	r3, #107	@ 0x6b
 8024b64:	006a      	lsls	r2, r5, #1
 8024b66:	0d52      	lsrs	r2, r2, #21
 8024b68:	1a9b      	subs	r3, r3, r2
 8024b6a:	2b00      	cmp	r3, #0
 8024b6c:	dd07      	ble.n	8024b7e <sulp+0x2a>
 8024b6e:	2400      	movs	r4, #0
 8024b70:	4a03      	ldr	r2, [pc, #12]	@ (8024b80 <sulp+0x2c>)
 8024b72:	051b      	lsls	r3, r3, #20
 8024b74:	189d      	adds	r5, r3, r2
 8024b76:	002b      	movs	r3, r5
 8024b78:	0022      	movs	r2, r4
 8024b7a:	f7dd feeb 	bl	8002954 <__aeabi_dmul>
 8024b7e:	bd70      	pop	{r4, r5, r6, pc}
 8024b80:	3ff00000 	.word	0x3ff00000

08024b84 <_strtod_l>:
 8024b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024b86:	b0a3      	sub	sp, #140	@ 0x8c
 8024b88:	921b      	str	r2, [sp, #108]	@ 0x6c
 8024b8a:	2200      	movs	r2, #0
 8024b8c:	2600      	movs	r6, #0
 8024b8e:	2700      	movs	r7, #0
 8024b90:	9005      	str	r0, [sp, #20]
 8024b92:	9109      	str	r1, [sp, #36]	@ 0x24
 8024b94:	921e      	str	r2, [sp, #120]	@ 0x78
 8024b96:	911d      	str	r1, [sp, #116]	@ 0x74
 8024b98:	780a      	ldrb	r2, [r1, #0]
 8024b9a:	2a2b      	cmp	r2, #43	@ 0x2b
 8024b9c:	d053      	beq.n	8024c46 <_strtod_l+0xc2>
 8024b9e:	d83f      	bhi.n	8024c20 <_strtod_l+0x9c>
 8024ba0:	2a0d      	cmp	r2, #13
 8024ba2:	d839      	bhi.n	8024c18 <_strtod_l+0x94>
 8024ba4:	2a08      	cmp	r2, #8
 8024ba6:	d839      	bhi.n	8024c1c <_strtod_l+0x98>
 8024ba8:	2a00      	cmp	r2, #0
 8024baa:	d042      	beq.n	8024c32 <_strtod_l+0xae>
 8024bac:	2200      	movs	r2, #0
 8024bae:	9212      	str	r2, [sp, #72]	@ 0x48
 8024bb0:	2100      	movs	r1, #0
 8024bb2:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8024bb4:	910c      	str	r1, [sp, #48]	@ 0x30
 8024bb6:	782a      	ldrb	r2, [r5, #0]
 8024bb8:	2a30      	cmp	r2, #48	@ 0x30
 8024bba:	d000      	beq.n	8024bbe <_strtod_l+0x3a>
 8024bbc:	e083      	b.n	8024cc6 <_strtod_l+0x142>
 8024bbe:	786a      	ldrb	r2, [r5, #1]
 8024bc0:	3120      	adds	r1, #32
 8024bc2:	438a      	bics	r2, r1
 8024bc4:	2a58      	cmp	r2, #88	@ 0x58
 8024bc6:	d000      	beq.n	8024bca <_strtod_l+0x46>
 8024bc8:	e073      	b.n	8024cb2 <_strtod_l+0x12e>
 8024bca:	9302      	str	r3, [sp, #8]
 8024bcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024bce:	4a9b      	ldr	r2, [pc, #620]	@ (8024e3c <_strtod_l+0x2b8>)
 8024bd0:	9301      	str	r3, [sp, #4]
 8024bd2:	ab1e      	add	r3, sp, #120	@ 0x78
 8024bd4:	9300      	str	r3, [sp, #0]
 8024bd6:	9805      	ldr	r0, [sp, #20]
 8024bd8:	ab1f      	add	r3, sp, #124	@ 0x7c
 8024bda:	a91d      	add	r1, sp, #116	@ 0x74
 8024bdc:	f002 fd86 	bl	80276ec <__gethex>
 8024be0:	230f      	movs	r3, #15
 8024be2:	0002      	movs	r2, r0
 8024be4:	401a      	ands	r2, r3
 8024be6:	0004      	movs	r4, r0
 8024be8:	9206      	str	r2, [sp, #24]
 8024bea:	4218      	tst	r0, r3
 8024bec:	d005      	beq.n	8024bfa <_strtod_l+0x76>
 8024bee:	2a06      	cmp	r2, #6
 8024bf0:	d12b      	bne.n	8024c4a <_strtod_l+0xc6>
 8024bf2:	2300      	movs	r3, #0
 8024bf4:	3501      	adds	r5, #1
 8024bf6:	951d      	str	r5, [sp, #116]	@ 0x74
 8024bf8:	9312      	str	r3, [sp, #72]	@ 0x48
 8024bfa:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024bfc:	2b00      	cmp	r3, #0
 8024bfe:	d002      	beq.n	8024c06 <_strtod_l+0x82>
 8024c00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024c02:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8024c04:	6013      	str	r3, [r2, #0]
 8024c06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024c08:	2b00      	cmp	r3, #0
 8024c0a:	d019      	beq.n	8024c40 <_strtod_l+0xbc>
 8024c0c:	2380      	movs	r3, #128	@ 0x80
 8024c0e:	0030      	movs	r0, r6
 8024c10:	061b      	lsls	r3, r3, #24
 8024c12:	18f9      	adds	r1, r7, r3
 8024c14:	b023      	add	sp, #140	@ 0x8c
 8024c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024c18:	2a20      	cmp	r2, #32
 8024c1a:	d1c7      	bne.n	8024bac <_strtod_l+0x28>
 8024c1c:	3101      	adds	r1, #1
 8024c1e:	e7ba      	b.n	8024b96 <_strtod_l+0x12>
 8024c20:	2a2d      	cmp	r2, #45	@ 0x2d
 8024c22:	d1c3      	bne.n	8024bac <_strtod_l+0x28>
 8024c24:	3a2c      	subs	r2, #44	@ 0x2c
 8024c26:	9212      	str	r2, [sp, #72]	@ 0x48
 8024c28:	1c4a      	adds	r2, r1, #1
 8024c2a:	921d      	str	r2, [sp, #116]	@ 0x74
 8024c2c:	784a      	ldrb	r2, [r1, #1]
 8024c2e:	2a00      	cmp	r2, #0
 8024c30:	d1be      	bne.n	8024bb0 <_strtod_l+0x2c>
 8024c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c34:	931d      	str	r3, [sp, #116]	@ 0x74
 8024c36:	2300      	movs	r3, #0
 8024c38:	9312      	str	r3, [sp, #72]	@ 0x48
 8024c3a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8024c3c:	2b00      	cmp	r3, #0
 8024c3e:	d1df      	bne.n	8024c00 <_strtod_l+0x7c>
 8024c40:	0030      	movs	r0, r6
 8024c42:	0039      	movs	r1, r7
 8024c44:	e7e6      	b.n	8024c14 <_strtod_l+0x90>
 8024c46:	2200      	movs	r2, #0
 8024c48:	e7ed      	b.n	8024c26 <_strtod_l+0xa2>
 8024c4a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8024c4c:	2a00      	cmp	r2, #0
 8024c4e:	d007      	beq.n	8024c60 <_strtod_l+0xdc>
 8024c50:	2135      	movs	r1, #53	@ 0x35
 8024c52:	a820      	add	r0, sp, #128	@ 0x80
 8024c54:	f003 fd88 	bl	8028768 <__copybits>
 8024c58:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8024c5a:	9805      	ldr	r0, [sp, #20]
 8024c5c:	f003 f94a 	bl	8027ef4 <_Bfree>
 8024c60:	9806      	ldr	r0, [sp, #24]
 8024c62:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8024c64:	3801      	subs	r0, #1
 8024c66:	2804      	cmp	r0, #4
 8024c68:	d806      	bhi.n	8024c78 <_strtod_l+0xf4>
 8024c6a:	f7db fa87 	bl	800017c <__gnu_thumb1_case_uqi>
 8024c6e:	0312      	.short	0x0312
 8024c70:	1e1c      	.short	0x1e1c
 8024c72:	12          	.byte	0x12
 8024c73:	00          	.byte	0x00
 8024c74:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024c76:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8024c78:	05e4      	lsls	r4, r4, #23
 8024c7a:	d502      	bpl.n	8024c82 <_strtod_l+0xfe>
 8024c7c:	2380      	movs	r3, #128	@ 0x80
 8024c7e:	061b      	lsls	r3, r3, #24
 8024c80:	431f      	orrs	r7, r3
 8024c82:	4b6f      	ldr	r3, [pc, #444]	@ (8024e40 <_strtod_l+0x2bc>)
 8024c84:	423b      	tst	r3, r7
 8024c86:	d1b8      	bne.n	8024bfa <_strtod_l+0x76>
 8024c88:	f001 fdc0 	bl	802680c <__errno>
 8024c8c:	2322      	movs	r3, #34	@ 0x22
 8024c8e:	6003      	str	r3, [r0, #0]
 8024c90:	e7b3      	b.n	8024bfa <_strtod_l+0x76>
 8024c92:	496c      	ldr	r1, [pc, #432]	@ (8024e44 <_strtod_l+0x2c0>)
 8024c94:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8024c96:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024c98:	400a      	ands	r2, r1
 8024c9a:	496b      	ldr	r1, [pc, #428]	@ (8024e48 <_strtod_l+0x2c4>)
 8024c9c:	185b      	adds	r3, r3, r1
 8024c9e:	051b      	lsls	r3, r3, #20
 8024ca0:	431a      	orrs	r2, r3
 8024ca2:	0017      	movs	r7, r2
 8024ca4:	e7e8      	b.n	8024c78 <_strtod_l+0xf4>
 8024ca6:	4f66      	ldr	r7, [pc, #408]	@ (8024e40 <_strtod_l+0x2bc>)
 8024ca8:	e7e6      	b.n	8024c78 <_strtod_l+0xf4>
 8024caa:	2601      	movs	r6, #1
 8024cac:	4f67      	ldr	r7, [pc, #412]	@ (8024e4c <_strtod_l+0x2c8>)
 8024cae:	4276      	negs	r6, r6
 8024cb0:	e7e2      	b.n	8024c78 <_strtod_l+0xf4>
 8024cb2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024cb4:	1c5a      	adds	r2, r3, #1
 8024cb6:	921d      	str	r2, [sp, #116]	@ 0x74
 8024cb8:	785b      	ldrb	r3, [r3, #1]
 8024cba:	2b30      	cmp	r3, #48	@ 0x30
 8024cbc:	d0f9      	beq.n	8024cb2 <_strtod_l+0x12e>
 8024cbe:	2b00      	cmp	r3, #0
 8024cc0:	d09b      	beq.n	8024bfa <_strtod_l+0x76>
 8024cc2:	2301      	movs	r3, #1
 8024cc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8024cc6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024cc8:	220a      	movs	r2, #10
 8024cca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024ccc:	2300      	movs	r3, #0
 8024cce:	9310      	str	r3, [sp, #64]	@ 0x40
 8024cd0:	930d      	str	r3, [sp, #52]	@ 0x34
 8024cd2:	9308      	str	r3, [sp, #32]
 8024cd4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8024cd6:	7804      	ldrb	r4, [r0, #0]
 8024cd8:	0023      	movs	r3, r4
 8024cda:	3b30      	subs	r3, #48	@ 0x30
 8024cdc:	b2d9      	uxtb	r1, r3
 8024cde:	2909      	cmp	r1, #9
 8024ce0:	d927      	bls.n	8024d32 <_strtod_l+0x1ae>
 8024ce2:	2201      	movs	r2, #1
 8024ce4:	495a      	ldr	r1, [pc, #360]	@ (8024e50 <_strtod_l+0x2cc>)
 8024ce6:	f001 fd03 	bl	80266f0 <strncmp>
 8024cea:	2800      	cmp	r0, #0
 8024cec:	d033      	beq.n	8024d56 <_strtod_l+0x1d2>
 8024cee:	2000      	movs	r0, #0
 8024cf0:	0023      	movs	r3, r4
 8024cf2:	4684      	mov	ip, r0
 8024cf4:	9a08      	ldr	r2, [sp, #32]
 8024cf6:	900e      	str	r0, [sp, #56]	@ 0x38
 8024cf8:	9206      	str	r2, [sp, #24]
 8024cfa:	2220      	movs	r2, #32
 8024cfc:	0019      	movs	r1, r3
 8024cfe:	4391      	bics	r1, r2
 8024d00:	000a      	movs	r2, r1
 8024d02:	2100      	movs	r1, #0
 8024d04:	9107      	str	r1, [sp, #28]
 8024d06:	2a45      	cmp	r2, #69	@ 0x45
 8024d08:	d000      	beq.n	8024d0c <_strtod_l+0x188>
 8024d0a:	e0cb      	b.n	8024ea4 <_strtod_l+0x320>
 8024d0c:	9b06      	ldr	r3, [sp, #24]
 8024d0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024d10:	4303      	orrs	r3, r0
 8024d12:	4313      	orrs	r3, r2
 8024d14:	428b      	cmp	r3, r1
 8024d16:	d08c      	beq.n	8024c32 <_strtod_l+0xae>
 8024d18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8024d1c:	3301      	adds	r3, #1
 8024d1e:	931d      	str	r3, [sp, #116]	@ 0x74
 8024d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024d22:	785b      	ldrb	r3, [r3, #1]
 8024d24:	2b2b      	cmp	r3, #43	@ 0x2b
 8024d26:	d07b      	beq.n	8024e20 <_strtod_l+0x29c>
 8024d28:	000c      	movs	r4, r1
 8024d2a:	2b2d      	cmp	r3, #45	@ 0x2d
 8024d2c:	d17e      	bne.n	8024e2c <_strtod_l+0x2a8>
 8024d2e:	2401      	movs	r4, #1
 8024d30:	e077      	b.n	8024e22 <_strtod_l+0x29e>
 8024d32:	9908      	ldr	r1, [sp, #32]
 8024d34:	2908      	cmp	r1, #8
 8024d36:	dc09      	bgt.n	8024d4c <_strtod_l+0x1c8>
 8024d38:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024d3a:	4351      	muls	r1, r2
 8024d3c:	185b      	adds	r3, r3, r1
 8024d3e:	930d      	str	r3, [sp, #52]	@ 0x34
 8024d40:	9b08      	ldr	r3, [sp, #32]
 8024d42:	3001      	adds	r0, #1
 8024d44:	3301      	adds	r3, #1
 8024d46:	9308      	str	r3, [sp, #32]
 8024d48:	901d      	str	r0, [sp, #116]	@ 0x74
 8024d4a:	e7c3      	b.n	8024cd4 <_strtod_l+0x150>
 8024d4c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024d4e:	4355      	muls	r5, r2
 8024d50:	195b      	adds	r3, r3, r5
 8024d52:	9310      	str	r3, [sp, #64]	@ 0x40
 8024d54:	e7f4      	b.n	8024d40 <_strtod_l+0x1bc>
 8024d56:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d58:	1c5a      	adds	r2, r3, #1
 8024d5a:	921d      	str	r2, [sp, #116]	@ 0x74
 8024d5c:	9a08      	ldr	r2, [sp, #32]
 8024d5e:	785b      	ldrb	r3, [r3, #1]
 8024d60:	2a00      	cmp	r2, #0
 8024d62:	d03e      	beq.n	8024de2 <_strtod_l+0x25e>
 8024d64:	900e      	str	r0, [sp, #56]	@ 0x38
 8024d66:	9206      	str	r2, [sp, #24]
 8024d68:	001a      	movs	r2, r3
 8024d6a:	3a30      	subs	r2, #48	@ 0x30
 8024d6c:	2a09      	cmp	r2, #9
 8024d6e:	d912      	bls.n	8024d96 <_strtod_l+0x212>
 8024d70:	2201      	movs	r2, #1
 8024d72:	4694      	mov	ip, r2
 8024d74:	e7c1      	b.n	8024cfa <_strtod_l+0x176>
 8024d76:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024d78:	3001      	adds	r0, #1
 8024d7a:	1c5a      	adds	r2, r3, #1
 8024d7c:	921d      	str	r2, [sp, #116]	@ 0x74
 8024d7e:	785b      	ldrb	r3, [r3, #1]
 8024d80:	2b30      	cmp	r3, #48	@ 0x30
 8024d82:	d0f8      	beq.n	8024d76 <_strtod_l+0x1f2>
 8024d84:	001a      	movs	r2, r3
 8024d86:	3a31      	subs	r2, #49	@ 0x31
 8024d88:	2a08      	cmp	r2, #8
 8024d8a:	d844      	bhi.n	8024e16 <_strtod_l+0x292>
 8024d8c:	900e      	str	r0, [sp, #56]	@ 0x38
 8024d8e:	2000      	movs	r0, #0
 8024d90:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8024d92:	9006      	str	r0, [sp, #24]
 8024d94:	9213      	str	r2, [sp, #76]	@ 0x4c
 8024d96:	001c      	movs	r4, r3
 8024d98:	1c42      	adds	r2, r0, #1
 8024d9a:	3c30      	subs	r4, #48	@ 0x30
 8024d9c:	2b30      	cmp	r3, #48	@ 0x30
 8024d9e:	d01a      	beq.n	8024dd6 <_strtod_l+0x252>
 8024da0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024da2:	9906      	ldr	r1, [sp, #24]
 8024da4:	189b      	adds	r3, r3, r2
 8024da6:	930e      	str	r3, [sp, #56]	@ 0x38
 8024da8:	230a      	movs	r3, #10
 8024daa:	469c      	mov	ip, r3
 8024dac:	9d06      	ldr	r5, [sp, #24]
 8024dae:	1c4b      	adds	r3, r1, #1
 8024db0:	1b5d      	subs	r5, r3, r5
 8024db2:	42aa      	cmp	r2, r5
 8024db4:	dc17      	bgt.n	8024de6 <_strtod_l+0x262>
 8024db6:	43c3      	mvns	r3, r0
 8024db8:	9a06      	ldr	r2, [sp, #24]
 8024dba:	17db      	asrs	r3, r3, #31
 8024dbc:	4003      	ands	r3, r0
 8024dbe:	18d1      	adds	r1, r2, r3
 8024dc0:	3201      	adds	r2, #1
 8024dc2:	18d3      	adds	r3, r2, r3
 8024dc4:	9306      	str	r3, [sp, #24]
 8024dc6:	2908      	cmp	r1, #8
 8024dc8:	dc1c      	bgt.n	8024e04 <_strtod_l+0x280>
 8024dca:	230a      	movs	r3, #10
 8024dcc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8024dce:	4353      	muls	r3, r2
 8024dd0:	2200      	movs	r2, #0
 8024dd2:	18e3      	adds	r3, r4, r3
 8024dd4:	930d      	str	r3, [sp, #52]	@ 0x34
 8024dd6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024dd8:	0010      	movs	r0, r2
 8024dda:	1c59      	adds	r1, r3, #1
 8024ddc:	911d      	str	r1, [sp, #116]	@ 0x74
 8024dde:	785b      	ldrb	r3, [r3, #1]
 8024de0:	e7c2      	b.n	8024d68 <_strtod_l+0x1e4>
 8024de2:	9808      	ldr	r0, [sp, #32]
 8024de4:	e7cc      	b.n	8024d80 <_strtod_l+0x1fc>
 8024de6:	2908      	cmp	r1, #8
 8024de8:	dc05      	bgt.n	8024df6 <_strtod_l+0x272>
 8024dea:	4665      	mov	r5, ip
 8024dec:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024dee:	4369      	muls	r1, r5
 8024df0:	910d      	str	r1, [sp, #52]	@ 0x34
 8024df2:	0019      	movs	r1, r3
 8024df4:	e7da      	b.n	8024dac <_strtod_l+0x228>
 8024df6:	2b10      	cmp	r3, #16
 8024df8:	dcfb      	bgt.n	8024df2 <_strtod_l+0x26e>
 8024dfa:	4661      	mov	r1, ip
 8024dfc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024dfe:	434d      	muls	r5, r1
 8024e00:	9510      	str	r5, [sp, #64]	@ 0x40
 8024e02:	e7f6      	b.n	8024df2 <_strtod_l+0x26e>
 8024e04:	2200      	movs	r2, #0
 8024e06:	290f      	cmp	r1, #15
 8024e08:	dce5      	bgt.n	8024dd6 <_strtod_l+0x252>
 8024e0a:	230a      	movs	r3, #10
 8024e0c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8024e0e:	435d      	muls	r5, r3
 8024e10:	1963      	adds	r3, r4, r5
 8024e12:	9310      	str	r3, [sp, #64]	@ 0x40
 8024e14:	e7df      	b.n	8024dd6 <_strtod_l+0x252>
 8024e16:	2200      	movs	r2, #0
 8024e18:	920e      	str	r2, [sp, #56]	@ 0x38
 8024e1a:	9206      	str	r2, [sp, #24]
 8024e1c:	3201      	adds	r2, #1
 8024e1e:	e7a8      	b.n	8024d72 <_strtod_l+0x1ee>
 8024e20:	2400      	movs	r4, #0
 8024e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e24:	3302      	adds	r3, #2
 8024e26:	931d      	str	r3, [sp, #116]	@ 0x74
 8024e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e2a:	789b      	ldrb	r3, [r3, #2]
 8024e2c:	001a      	movs	r2, r3
 8024e2e:	3a30      	subs	r2, #48	@ 0x30
 8024e30:	2a09      	cmp	r2, #9
 8024e32:	d913      	bls.n	8024e5c <_strtod_l+0x2d8>
 8024e34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024e36:	921d      	str	r2, [sp, #116]	@ 0x74
 8024e38:	2200      	movs	r2, #0
 8024e3a:	e032      	b.n	8024ea2 <_strtod_l+0x31e>
 8024e3c:	0802f128 	.word	0x0802f128
 8024e40:	7ff00000 	.word	0x7ff00000
 8024e44:	ffefffff 	.word	0xffefffff
 8024e48:	00000433 	.word	0x00000433
 8024e4c:	7fffffff 	.word	0x7fffffff
 8024e50:	0802ef40 	.word	0x0802ef40
 8024e54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024e56:	1c5a      	adds	r2, r3, #1
 8024e58:	921d      	str	r2, [sp, #116]	@ 0x74
 8024e5a:	785b      	ldrb	r3, [r3, #1]
 8024e5c:	2b30      	cmp	r3, #48	@ 0x30
 8024e5e:	d0f9      	beq.n	8024e54 <_strtod_l+0x2d0>
 8024e60:	2200      	movs	r2, #0
 8024e62:	9207      	str	r2, [sp, #28]
 8024e64:	001a      	movs	r2, r3
 8024e66:	3a31      	subs	r2, #49	@ 0x31
 8024e68:	2a08      	cmp	r2, #8
 8024e6a:	d81b      	bhi.n	8024ea4 <_strtod_l+0x320>
 8024e6c:	3b30      	subs	r3, #48	@ 0x30
 8024e6e:	001a      	movs	r2, r3
 8024e70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024e72:	9307      	str	r3, [sp, #28]
 8024e74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024e76:	1c59      	adds	r1, r3, #1
 8024e78:	911d      	str	r1, [sp, #116]	@ 0x74
 8024e7a:	785b      	ldrb	r3, [r3, #1]
 8024e7c:	001d      	movs	r5, r3
 8024e7e:	3d30      	subs	r5, #48	@ 0x30
 8024e80:	2d09      	cmp	r5, #9
 8024e82:	d93a      	bls.n	8024efa <_strtod_l+0x376>
 8024e84:	9d07      	ldr	r5, [sp, #28]
 8024e86:	1b49      	subs	r1, r1, r5
 8024e88:	000d      	movs	r5, r1
 8024e8a:	49b3      	ldr	r1, [pc, #716]	@ (8025158 <_strtod_l+0x5d4>)
 8024e8c:	9107      	str	r1, [sp, #28]
 8024e8e:	2d08      	cmp	r5, #8
 8024e90:	dc03      	bgt.n	8024e9a <_strtod_l+0x316>
 8024e92:	9207      	str	r2, [sp, #28]
 8024e94:	428a      	cmp	r2, r1
 8024e96:	dd00      	ble.n	8024e9a <_strtod_l+0x316>
 8024e98:	9107      	str	r1, [sp, #28]
 8024e9a:	2c00      	cmp	r4, #0
 8024e9c:	d002      	beq.n	8024ea4 <_strtod_l+0x320>
 8024e9e:	9a07      	ldr	r2, [sp, #28]
 8024ea0:	4252      	negs	r2, r2
 8024ea2:	9207      	str	r2, [sp, #28]
 8024ea4:	9a06      	ldr	r2, [sp, #24]
 8024ea6:	2a00      	cmp	r2, #0
 8024ea8:	d14b      	bne.n	8024f42 <_strtod_l+0x3be>
 8024eaa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8024eac:	4310      	orrs	r0, r2
 8024eae:	d000      	beq.n	8024eb2 <_strtod_l+0x32e>
 8024eb0:	e6a3      	b.n	8024bfa <_strtod_l+0x76>
 8024eb2:	4662      	mov	r2, ip
 8024eb4:	2a00      	cmp	r2, #0
 8024eb6:	d000      	beq.n	8024eba <_strtod_l+0x336>
 8024eb8:	e6bb      	b.n	8024c32 <_strtod_l+0xae>
 8024eba:	2b69      	cmp	r3, #105	@ 0x69
 8024ebc:	d025      	beq.n	8024f0a <_strtod_l+0x386>
 8024ebe:	dc21      	bgt.n	8024f04 <_strtod_l+0x380>
 8024ec0:	2b49      	cmp	r3, #73	@ 0x49
 8024ec2:	d022      	beq.n	8024f0a <_strtod_l+0x386>
 8024ec4:	2b4e      	cmp	r3, #78	@ 0x4e
 8024ec6:	d000      	beq.n	8024eca <_strtod_l+0x346>
 8024ec8:	e6b3      	b.n	8024c32 <_strtod_l+0xae>
 8024eca:	49a4      	ldr	r1, [pc, #656]	@ (802515c <_strtod_l+0x5d8>)
 8024ecc:	a81d      	add	r0, sp, #116	@ 0x74
 8024ece:	f002 fe43 	bl	8027b58 <__match>
 8024ed2:	2800      	cmp	r0, #0
 8024ed4:	d100      	bne.n	8024ed8 <_strtod_l+0x354>
 8024ed6:	e6ac      	b.n	8024c32 <_strtod_l+0xae>
 8024ed8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024eda:	781b      	ldrb	r3, [r3, #0]
 8024edc:	2b28      	cmp	r3, #40	@ 0x28
 8024ede:	d12a      	bne.n	8024f36 <_strtod_l+0x3b2>
 8024ee0:	499f      	ldr	r1, [pc, #636]	@ (8025160 <_strtod_l+0x5dc>)
 8024ee2:	aa20      	add	r2, sp, #128	@ 0x80
 8024ee4:	a81d      	add	r0, sp, #116	@ 0x74
 8024ee6:	f002 fe4b 	bl	8027b80 <__hexnan>
 8024eea:	2805      	cmp	r0, #5
 8024eec:	d123      	bne.n	8024f36 <_strtod_l+0x3b2>
 8024eee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8024ef0:	4a9c      	ldr	r2, [pc, #624]	@ (8025164 <_strtod_l+0x5e0>)
 8024ef2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8024ef4:	431a      	orrs	r2, r3
 8024ef6:	0017      	movs	r7, r2
 8024ef8:	e67f      	b.n	8024bfa <_strtod_l+0x76>
 8024efa:	210a      	movs	r1, #10
 8024efc:	434a      	muls	r2, r1
 8024efe:	18d2      	adds	r2, r2, r3
 8024f00:	3a30      	subs	r2, #48	@ 0x30
 8024f02:	e7b7      	b.n	8024e74 <_strtod_l+0x2f0>
 8024f04:	2b6e      	cmp	r3, #110	@ 0x6e
 8024f06:	d0e0      	beq.n	8024eca <_strtod_l+0x346>
 8024f08:	e693      	b.n	8024c32 <_strtod_l+0xae>
 8024f0a:	4997      	ldr	r1, [pc, #604]	@ (8025168 <_strtod_l+0x5e4>)
 8024f0c:	a81d      	add	r0, sp, #116	@ 0x74
 8024f0e:	f002 fe23 	bl	8027b58 <__match>
 8024f12:	2800      	cmp	r0, #0
 8024f14:	d100      	bne.n	8024f18 <_strtod_l+0x394>
 8024f16:	e68c      	b.n	8024c32 <_strtod_l+0xae>
 8024f18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024f1a:	4994      	ldr	r1, [pc, #592]	@ (802516c <_strtod_l+0x5e8>)
 8024f1c:	3b01      	subs	r3, #1
 8024f1e:	a81d      	add	r0, sp, #116	@ 0x74
 8024f20:	931d      	str	r3, [sp, #116]	@ 0x74
 8024f22:	f002 fe19 	bl	8027b58 <__match>
 8024f26:	2800      	cmp	r0, #0
 8024f28:	d102      	bne.n	8024f30 <_strtod_l+0x3ac>
 8024f2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8024f2c:	3301      	adds	r3, #1
 8024f2e:	931d      	str	r3, [sp, #116]	@ 0x74
 8024f30:	2600      	movs	r6, #0
 8024f32:	4f8c      	ldr	r7, [pc, #560]	@ (8025164 <_strtod_l+0x5e0>)
 8024f34:	e661      	b.n	8024bfa <_strtod_l+0x76>
 8024f36:	488e      	ldr	r0, [pc, #568]	@ (8025170 <_strtod_l+0x5ec>)
 8024f38:	f001 fcaa 	bl	8026890 <nan>
 8024f3c:	0006      	movs	r6, r0
 8024f3e:	000f      	movs	r7, r1
 8024f40:	e65b      	b.n	8024bfa <_strtod_l+0x76>
 8024f42:	9b07      	ldr	r3, [sp, #28]
 8024f44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8024f46:	1a9b      	subs	r3, r3, r2
 8024f48:	930c      	str	r3, [sp, #48]	@ 0x30
 8024f4a:	9b08      	ldr	r3, [sp, #32]
 8024f4c:	2b00      	cmp	r3, #0
 8024f4e:	d101      	bne.n	8024f54 <_strtod_l+0x3d0>
 8024f50:	9b06      	ldr	r3, [sp, #24]
 8024f52:	9308      	str	r3, [sp, #32]
 8024f54:	9c06      	ldr	r4, [sp, #24]
 8024f56:	2c10      	cmp	r4, #16
 8024f58:	dd00      	ble.n	8024f5c <_strtod_l+0x3d8>
 8024f5a:	2410      	movs	r4, #16
 8024f5c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024f5e:	f7de fc75 	bl	800384c <__aeabi_ui2d>
 8024f62:	9b06      	ldr	r3, [sp, #24]
 8024f64:	0006      	movs	r6, r0
 8024f66:	000f      	movs	r7, r1
 8024f68:	2b09      	cmp	r3, #9
 8024f6a:	dc13      	bgt.n	8024f94 <_strtod_l+0x410>
 8024f6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024f6e:	2b00      	cmp	r3, #0
 8024f70:	d100      	bne.n	8024f74 <_strtod_l+0x3f0>
 8024f72:	e642      	b.n	8024bfa <_strtod_l+0x76>
 8024f74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024f76:	2b00      	cmp	r3, #0
 8024f78:	dc00      	bgt.n	8024f7c <_strtod_l+0x3f8>
 8024f7a:	e07e      	b.n	802507a <_strtod_l+0x4f6>
 8024f7c:	2b16      	cmp	r3, #22
 8024f7e:	dc63      	bgt.n	8025048 <_strtod_l+0x4c4>
 8024f80:	497c      	ldr	r1, [pc, #496]	@ (8025174 <_strtod_l+0x5f0>)
 8024f82:	00db      	lsls	r3, r3, #3
 8024f84:	18c9      	adds	r1, r1, r3
 8024f86:	0032      	movs	r2, r6
 8024f88:	6808      	ldr	r0, [r1, #0]
 8024f8a:	6849      	ldr	r1, [r1, #4]
 8024f8c:	003b      	movs	r3, r7
 8024f8e:	f7dd fce1 	bl	8002954 <__aeabi_dmul>
 8024f92:	e7d3      	b.n	8024f3c <_strtod_l+0x3b8>
 8024f94:	0022      	movs	r2, r4
 8024f96:	4b77      	ldr	r3, [pc, #476]	@ (8025174 <_strtod_l+0x5f0>)
 8024f98:	3a09      	subs	r2, #9
 8024f9a:	00d2      	lsls	r2, r2, #3
 8024f9c:	189b      	adds	r3, r3, r2
 8024f9e:	681a      	ldr	r2, [r3, #0]
 8024fa0:	685b      	ldr	r3, [r3, #4]
 8024fa2:	f7dd fcd7 	bl	8002954 <__aeabi_dmul>
 8024fa6:	0006      	movs	r6, r0
 8024fa8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8024faa:	000f      	movs	r7, r1
 8024fac:	f7de fc4e 	bl	800384c <__aeabi_ui2d>
 8024fb0:	000b      	movs	r3, r1
 8024fb2:	0002      	movs	r2, r0
 8024fb4:	0039      	movs	r1, r7
 8024fb6:	0030      	movs	r0, r6
 8024fb8:	f7dc fccc 	bl	8001954 <__aeabi_dadd>
 8024fbc:	9b06      	ldr	r3, [sp, #24]
 8024fbe:	0006      	movs	r6, r0
 8024fc0:	000f      	movs	r7, r1
 8024fc2:	2b0f      	cmp	r3, #15
 8024fc4:	ddd2      	ble.n	8024f6c <_strtod_l+0x3e8>
 8024fc6:	9b06      	ldr	r3, [sp, #24]
 8024fc8:	1b1c      	subs	r4, r3, r4
 8024fca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024fcc:	18e4      	adds	r4, r4, r3
 8024fce:	2c00      	cmp	r4, #0
 8024fd0:	dc00      	bgt.n	8024fd4 <_strtod_l+0x450>
 8024fd2:	e09b      	b.n	802510c <_strtod_l+0x588>
 8024fd4:	220f      	movs	r2, #15
 8024fd6:	0023      	movs	r3, r4
 8024fd8:	4013      	ands	r3, r2
 8024fda:	4214      	tst	r4, r2
 8024fdc:	d00a      	beq.n	8024ff4 <_strtod_l+0x470>
 8024fde:	4965      	ldr	r1, [pc, #404]	@ (8025174 <_strtod_l+0x5f0>)
 8024fe0:	00db      	lsls	r3, r3, #3
 8024fe2:	18c9      	adds	r1, r1, r3
 8024fe4:	0032      	movs	r2, r6
 8024fe6:	6808      	ldr	r0, [r1, #0]
 8024fe8:	6849      	ldr	r1, [r1, #4]
 8024fea:	003b      	movs	r3, r7
 8024fec:	f7dd fcb2 	bl	8002954 <__aeabi_dmul>
 8024ff0:	0006      	movs	r6, r0
 8024ff2:	000f      	movs	r7, r1
 8024ff4:	230f      	movs	r3, #15
 8024ff6:	439c      	bics	r4, r3
 8024ff8:	d073      	beq.n	80250e2 <_strtod_l+0x55e>
 8024ffa:	3326      	adds	r3, #38	@ 0x26
 8024ffc:	33ff      	adds	r3, #255	@ 0xff
 8024ffe:	429c      	cmp	r4, r3
 8025000:	dd4b      	ble.n	802509a <_strtod_l+0x516>
 8025002:	2300      	movs	r3, #0
 8025004:	9306      	str	r3, [sp, #24]
 8025006:	9307      	str	r3, [sp, #28]
 8025008:	930d      	str	r3, [sp, #52]	@ 0x34
 802500a:	9308      	str	r3, [sp, #32]
 802500c:	2322      	movs	r3, #34	@ 0x22
 802500e:	2600      	movs	r6, #0
 8025010:	9a05      	ldr	r2, [sp, #20]
 8025012:	4f54      	ldr	r7, [pc, #336]	@ (8025164 <_strtod_l+0x5e0>)
 8025014:	6013      	str	r3, [r2, #0]
 8025016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025018:	42b3      	cmp	r3, r6
 802501a:	d100      	bne.n	802501e <_strtod_l+0x49a>
 802501c:	e5ed      	b.n	8024bfa <_strtod_l+0x76>
 802501e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025020:	9805      	ldr	r0, [sp, #20]
 8025022:	f002 ff67 	bl	8027ef4 <_Bfree>
 8025026:	9908      	ldr	r1, [sp, #32]
 8025028:	9805      	ldr	r0, [sp, #20]
 802502a:	f002 ff63 	bl	8027ef4 <_Bfree>
 802502e:	9907      	ldr	r1, [sp, #28]
 8025030:	9805      	ldr	r0, [sp, #20]
 8025032:	f002 ff5f 	bl	8027ef4 <_Bfree>
 8025036:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8025038:	9805      	ldr	r0, [sp, #20]
 802503a:	f002 ff5b 	bl	8027ef4 <_Bfree>
 802503e:	9906      	ldr	r1, [sp, #24]
 8025040:	9805      	ldr	r0, [sp, #20]
 8025042:	f002 ff57 	bl	8027ef4 <_Bfree>
 8025046:	e5d8      	b.n	8024bfa <_strtod_l+0x76>
 8025048:	2325      	movs	r3, #37	@ 0x25
 802504a:	9a06      	ldr	r2, [sp, #24]
 802504c:	1a9b      	subs	r3, r3, r2
 802504e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025050:	4293      	cmp	r3, r2
 8025052:	dbb8      	blt.n	8024fc6 <_strtod_l+0x442>
 8025054:	240f      	movs	r4, #15
 8025056:	9b06      	ldr	r3, [sp, #24]
 8025058:	4d46      	ldr	r5, [pc, #280]	@ (8025174 <_strtod_l+0x5f0>)
 802505a:	1ae4      	subs	r4, r4, r3
 802505c:	00e1      	lsls	r1, r4, #3
 802505e:	1869      	adds	r1, r5, r1
 8025060:	0032      	movs	r2, r6
 8025062:	6808      	ldr	r0, [r1, #0]
 8025064:	6849      	ldr	r1, [r1, #4]
 8025066:	003b      	movs	r3, r7
 8025068:	f7dd fc74 	bl	8002954 <__aeabi_dmul>
 802506c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802506e:	1b1c      	subs	r4, r3, r4
 8025070:	00e4      	lsls	r4, r4, #3
 8025072:	192d      	adds	r5, r5, r4
 8025074:	682a      	ldr	r2, [r5, #0]
 8025076:	686b      	ldr	r3, [r5, #4]
 8025078:	e789      	b.n	8024f8e <_strtod_l+0x40a>
 802507a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802507c:	3316      	adds	r3, #22
 802507e:	dba2      	blt.n	8024fc6 <_strtod_l+0x442>
 8025080:	9907      	ldr	r1, [sp, #28]
 8025082:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025084:	4b3b      	ldr	r3, [pc, #236]	@ (8025174 <_strtod_l+0x5f0>)
 8025086:	1a52      	subs	r2, r2, r1
 8025088:	00d2      	lsls	r2, r2, #3
 802508a:	189b      	adds	r3, r3, r2
 802508c:	0030      	movs	r0, r6
 802508e:	681a      	ldr	r2, [r3, #0]
 8025090:	685b      	ldr	r3, [r3, #4]
 8025092:	0039      	movs	r1, r7
 8025094:	f7dd f824 	bl	80020e0 <__aeabi_ddiv>
 8025098:	e750      	b.n	8024f3c <_strtod_l+0x3b8>
 802509a:	2300      	movs	r3, #0
 802509c:	0030      	movs	r0, r6
 802509e:	0039      	movs	r1, r7
 80250a0:	4d35      	ldr	r5, [pc, #212]	@ (8025178 <_strtod_l+0x5f4>)
 80250a2:	1124      	asrs	r4, r4, #4
 80250a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80250a6:	2c01      	cmp	r4, #1
 80250a8:	dc1e      	bgt.n	80250e8 <_strtod_l+0x564>
 80250aa:	2b00      	cmp	r3, #0
 80250ac:	d001      	beq.n	80250b2 <_strtod_l+0x52e>
 80250ae:	0006      	movs	r6, r0
 80250b0:	000f      	movs	r7, r1
 80250b2:	4b32      	ldr	r3, [pc, #200]	@ (802517c <_strtod_l+0x5f8>)
 80250b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80250b6:	18ff      	adds	r7, r7, r3
 80250b8:	4b2f      	ldr	r3, [pc, #188]	@ (8025178 <_strtod_l+0x5f4>)
 80250ba:	00d5      	lsls	r5, r2, #3
 80250bc:	195d      	adds	r5, r3, r5
 80250be:	0032      	movs	r2, r6
 80250c0:	6828      	ldr	r0, [r5, #0]
 80250c2:	6869      	ldr	r1, [r5, #4]
 80250c4:	003b      	movs	r3, r7
 80250c6:	f7dd fc45 	bl	8002954 <__aeabi_dmul>
 80250ca:	4b26      	ldr	r3, [pc, #152]	@ (8025164 <_strtod_l+0x5e0>)
 80250cc:	4a2c      	ldr	r2, [pc, #176]	@ (8025180 <_strtod_l+0x5fc>)
 80250ce:	0006      	movs	r6, r0
 80250d0:	400b      	ands	r3, r1
 80250d2:	4293      	cmp	r3, r2
 80250d4:	d895      	bhi.n	8025002 <_strtod_l+0x47e>
 80250d6:	4a2b      	ldr	r2, [pc, #172]	@ (8025184 <_strtod_l+0x600>)
 80250d8:	4293      	cmp	r3, r2
 80250da:	d913      	bls.n	8025104 <_strtod_l+0x580>
 80250dc:	2601      	movs	r6, #1
 80250de:	4f2a      	ldr	r7, [pc, #168]	@ (8025188 <_strtod_l+0x604>)
 80250e0:	4276      	negs	r6, r6
 80250e2:	2300      	movs	r3, #0
 80250e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80250e6:	e086      	b.n	80251f6 <_strtod_l+0x672>
 80250e8:	2201      	movs	r2, #1
 80250ea:	4214      	tst	r4, r2
 80250ec:	d004      	beq.n	80250f8 <_strtod_l+0x574>
 80250ee:	682a      	ldr	r2, [r5, #0]
 80250f0:	686b      	ldr	r3, [r5, #4]
 80250f2:	f7dd fc2f 	bl	8002954 <__aeabi_dmul>
 80250f6:	2301      	movs	r3, #1
 80250f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80250fa:	1064      	asrs	r4, r4, #1
 80250fc:	3201      	adds	r2, #1
 80250fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8025100:	3508      	adds	r5, #8
 8025102:	e7d0      	b.n	80250a6 <_strtod_l+0x522>
 8025104:	23d4      	movs	r3, #212	@ 0xd4
 8025106:	049b      	lsls	r3, r3, #18
 8025108:	18cf      	adds	r7, r1, r3
 802510a:	e7ea      	b.n	80250e2 <_strtod_l+0x55e>
 802510c:	2c00      	cmp	r4, #0
 802510e:	d0e8      	beq.n	80250e2 <_strtod_l+0x55e>
 8025110:	4264      	negs	r4, r4
 8025112:	230f      	movs	r3, #15
 8025114:	0022      	movs	r2, r4
 8025116:	401a      	ands	r2, r3
 8025118:	421c      	tst	r4, r3
 802511a:	d00a      	beq.n	8025132 <_strtod_l+0x5ae>
 802511c:	4b15      	ldr	r3, [pc, #84]	@ (8025174 <_strtod_l+0x5f0>)
 802511e:	00d2      	lsls	r2, r2, #3
 8025120:	189b      	adds	r3, r3, r2
 8025122:	0030      	movs	r0, r6
 8025124:	681a      	ldr	r2, [r3, #0]
 8025126:	685b      	ldr	r3, [r3, #4]
 8025128:	0039      	movs	r1, r7
 802512a:	f7dc ffd9 	bl	80020e0 <__aeabi_ddiv>
 802512e:	0006      	movs	r6, r0
 8025130:	000f      	movs	r7, r1
 8025132:	1124      	asrs	r4, r4, #4
 8025134:	d0d5      	beq.n	80250e2 <_strtod_l+0x55e>
 8025136:	2c1f      	cmp	r4, #31
 8025138:	dd28      	ble.n	802518c <_strtod_l+0x608>
 802513a:	2300      	movs	r3, #0
 802513c:	9306      	str	r3, [sp, #24]
 802513e:	9307      	str	r3, [sp, #28]
 8025140:	930d      	str	r3, [sp, #52]	@ 0x34
 8025142:	9308      	str	r3, [sp, #32]
 8025144:	2322      	movs	r3, #34	@ 0x22
 8025146:	9a05      	ldr	r2, [sp, #20]
 8025148:	2600      	movs	r6, #0
 802514a:	6013      	str	r3, [r2, #0]
 802514c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802514e:	2700      	movs	r7, #0
 8025150:	2b00      	cmp	r3, #0
 8025152:	d000      	beq.n	8025156 <_strtod_l+0x5d2>
 8025154:	e763      	b.n	802501e <_strtod_l+0x49a>
 8025156:	e550      	b.n	8024bfa <_strtod_l+0x76>
 8025158:	00004e1f 	.word	0x00004e1f
 802515c:	0802ef4f 	.word	0x0802ef4f
 8025160:	0802f114 	.word	0x0802f114
 8025164:	7ff00000 	.word	0x7ff00000
 8025168:	0802ef47 	.word	0x0802ef47
 802516c:	0802ef81 	.word	0x0802ef81
 8025170:	0802f110 	.word	0x0802f110
 8025174:	0802f2a0 	.word	0x0802f2a0
 8025178:	0802f278 	.word	0x0802f278
 802517c:	fcb00000 	.word	0xfcb00000
 8025180:	7ca00000 	.word	0x7ca00000
 8025184:	7c900000 	.word	0x7c900000
 8025188:	7fefffff 	.word	0x7fefffff
 802518c:	2310      	movs	r3, #16
 802518e:	0022      	movs	r2, r4
 8025190:	401a      	ands	r2, r3
 8025192:	9209      	str	r2, [sp, #36]	@ 0x24
 8025194:	421c      	tst	r4, r3
 8025196:	d001      	beq.n	802519c <_strtod_l+0x618>
 8025198:	335a      	adds	r3, #90	@ 0x5a
 802519a:	9309      	str	r3, [sp, #36]	@ 0x24
 802519c:	0030      	movs	r0, r6
 802519e:	0039      	movs	r1, r7
 80251a0:	2300      	movs	r3, #0
 80251a2:	4dc0      	ldr	r5, [pc, #768]	@ (80254a4 <_strtod_l+0x920>)
 80251a4:	2201      	movs	r2, #1
 80251a6:	4214      	tst	r4, r2
 80251a8:	d004      	beq.n	80251b4 <_strtod_l+0x630>
 80251aa:	682a      	ldr	r2, [r5, #0]
 80251ac:	686b      	ldr	r3, [r5, #4]
 80251ae:	f7dd fbd1 	bl	8002954 <__aeabi_dmul>
 80251b2:	2301      	movs	r3, #1
 80251b4:	1064      	asrs	r4, r4, #1
 80251b6:	3508      	adds	r5, #8
 80251b8:	2c00      	cmp	r4, #0
 80251ba:	d1f3      	bne.n	80251a4 <_strtod_l+0x620>
 80251bc:	2b00      	cmp	r3, #0
 80251be:	d001      	beq.n	80251c4 <_strtod_l+0x640>
 80251c0:	0006      	movs	r6, r0
 80251c2:	000f      	movs	r7, r1
 80251c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80251c6:	2b00      	cmp	r3, #0
 80251c8:	d00d      	beq.n	80251e6 <_strtod_l+0x662>
 80251ca:	236b      	movs	r3, #107	@ 0x6b
 80251cc:	007a      	lsls	r2, r7, #1
 80251ce:	0d52      	lsrs	r2, r2, #21
 80251d0:	0039      	movs	r1, r7
 80251d2:	1a9b      	subs	r3, r3, r2
 80251d4:	2b00      	cmp	r3, #0
 80251d6:	dd06      	ble.n	80251e6 <_strtod_l+0x662>
 80251d8:	2b1f      	cmp	r3, #31
 80251da:	dd5c      	ble.n	8025296 <_strtod_l+0x712>
 80251dc:	2600      	movs	r6, #0
 80251de:	2b34      	cmp	r3, #52	@ 0x34
 80251e0:	dd52      	ble.n	8025288 <_strtod_l+0x704>
 80251e2:	27dc      	movs	r7, #220	@ 0xdc
 80251e4:	04bf      	lsls	r7, r7, #18
 80251e6:	2200      	movs	r2, #0
 80251e8:	2300      	movs	r3, #0
 80251ea:	0030      	movs	r0, r6
 80251ec:	0039      	movs	r1, r7
 80251ee:	f7db f95f 	bl	80004b0 <__aeabi_dcmpeq>
 80251f2:	2800      	cmp	r0, #0
 80251f4:	d1a1      	bne.n	802513a <_strtod_l+0x5b6>
 80251f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80251f8:	9a08      	ldr	r2, [sp, #32]
 80251fa:	9300      	str	r3, [sp, #0]
 80251fc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80251fe:	9b06      	ldr	r3, [sp, #24]
 8025200:	9805      	ldr	r0, [sp, #20]
 8025202:	f002 fedf 	bl	8027fc4 <__s2b>
 8025206:	900d      	str	r0, [sp, #52]	@ 0x34
 8025208:	2800      	cmp	r0, #0
 802520a:	d100      	bne.n	802520e <_strtod_l+0x68a>
 802520c:	e6f9      	b.n	8025002 <_strtod_l+0x47e>
 802520e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025210:	9907      	ldr	r1, [sp, #28]
 8025212:	43db      	mvns	r3, r3
 8025214:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025216:	17db      	asrs	r3, r3, #31
 8025218:	1a52      	subs	r2, r2, r1
 802521a:	9214      	str	r2, [sp, #80]	@ 0x50
 802521c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802521e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8025220:	17d2      	asrs	r2, r2, #31
 8025222:	4011      	ands	r1, r2
 8025224:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025226:	9114      	str	r1, [sp, #80]	@ 0x50
 8025228:	401a      	ands	r2, r3
 802522a:	2300      	movs	r3, #0
 802522c:	921a      	str	r2, [sp, #104]	@ 0x68
 802522e:	9306      	str	r3, [sp, #24]
 8025230:	9307      	str	r3, [sp, #28]
 8025232:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025234:	9805      	ldr	r0, [sp, #20]
 8025236:	6859      	ldr	r1, [r3, #4]
 8025238:	f002 fe18 	bl	8027e6c <_Balloc>
 802523c:	9008      	str	r0, [sp, #32]
 802523e:	2800      	cmp	r0, #0
 8025240:	d100      	bne.n	8025244 <_strtod_l+0x6c0>
 8025242:	e6e3      	b.n	802500c <_strtod_l+0x488>
 8025244:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025246:	300c      	adds	r0, #12
 8025248:	0019      	movs	r1, r3
 802524a:	691a      	ldr	r2, [r3, #16]
 802524c:	310c      	adds	r1, #12
 802524e:	3202      	adds	r2, #2
 8025250:	0092      	lsls	r2, r2, #2
 8025252:	f001 fb13 	bl	802687c <memcpy>
 8025256:	ab20      	add	r3, sp, #128	@ 0x80
 8025258:	9301      	str	r3, [sp, #4]
 802525a:	ab1f      	add	r3, sp, #124	@ 0x7c
 802525c:	9300      	str	r3, [sp, #0]
 802525e:	0032      	movs	r2, r6
 8025260:	003b      	movs	r3, r7
 8025262:	9805      	ldr	r0, [sp, #20]
 8025264:	9610      	str	r6, [sp, #64]	@ 0x40
 8025266:	9711      	str	r7, [sp, #68]	@ 0x44
 8025268:	f003 f9f4 	bl	8028654 <__d2b>
 802526c:	901e      	str	r0, [sp, #120]	@ 0x78
 802526e:	2800      	cmp	r0, #0
 8025270:	d100      	bne.n	8025274 <_strtod_l+0x6f0>
 8025272:	e6cb      	b.n	802500c <_strtod_l+0x488>
 8025274:	2101      	movs	r1, #1
 8025276:	9805      	ldr	r0, [sp, #20]
 8025278:	f002 ff40 	bl	80280fc <__i2b>
 802527c:	9007      	str	r0, [sp, #28]
 802527e:	2800      	cmp	r0, #0
 8025280:	d10e      	bne.n	80252a0 <_strtod_l+0x71c>
 8025282:	2300      	movs	r3, #0
 8025284:	9307      	str	r3, [sp, #28]
 8025286:	e6c1      	b.n	802500c <_strtod_l+0x488>
 8025288:	234b      	movs	r3, #75	@ 0x4b
 802528a:	1a9a      	subs	r2, r3, r2
 802528c:	3b4c      	subs	r3, #76	@ 0x4c
 802528e:	4093      	lsls	r3, r2
 8025290:	4019      	ands	r1, r3
 8025292:	000f      	movs	r7, r1
 8025294:	e7a7      	b.n	80251e6 <_strtod_l+0x662>
 8025296:	2201      	movs	r2, #1
 8025298:	4252      	negs	r2, r2
 802529a:	409a      	lsls	r2, r3
 802529c:	4016      	ands	r6, r2
 802529e:	e7a2      	b.n	80251e6 <_strtod_l+0x662>
 80252a0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80252a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80252a4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80252a6:	1ad4      	subs	r4, r2, r3
 80252a8:	2b00      	cmp	r3, #0
 80252aa:	db01      	blt.n	80252b0 <_strtod_l+0x72c>
 80252ac:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80252ae:	195d      	adds	r5, r3, r5
 80252b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80252b2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80252b4:	1a5b      	subs	r3, r3, r1
 80252b6:	2136      	movs	r1, #54	@ 0x36
 80252b8:	189b      	adds	r3, r3, r2
 80252ba:	1a8a      	subs	r2, r1, r2
 80252bc:	497a      	ldr	r1, [pc, #488]	@ (80254a8 <_strtod_l+0x924>)
 80252be:	2001      	movs	r0, #1
 80252c0:	468c      	mov	ip, r1
 80252c2:	2100      	movs	r1, #0
 80252c4:	3b01      	subs	r3, #1
 80252c6:	9115      	str	r1, [sp, #84]	@ 0x54
 80252c8:	9016      	str	r0, [sp, #88]	@ 0x58
 80252ca:	4563      	cmp	r3, ip
 80252cc:	da06      	bge.n	80252dc <_strtod_l+0x758>
 80252ce:	4661      	mov	r1, ip
 80252d0:	1ac9      	subs	r1, r1, r3
 80252d2:	1a52      	subs	r2, r2, r1
 80252d4:	291f      	cmp	r1, #31
 80252d6:	dc3f      	bgt.n	8025358 <_strtod_l+0x7d4>
 80252d8:	4088      	lsls	r0, r1
 80252da:	9016      	str	r0, [sp, #88]	@ 0x58
 80252dc:	18ab      	adds	r3, r5, r2
 80252de:	930e      	str	r3, [sp, #56]	@ 0x38
 80252e0:	18a4      	adds	r4, r4, r2
 80252e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80252e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80252e6:	191c      	adds	r4, r3, r4
 80252e8:	002b      	movs	r3, r5
 80252ea:	4295      	cmp	r5, r2
 80252ec:	dd00      	ble.n	80252f0 <_strtod_l+0x76c>
 80252ee:	0013      	movs	r3, r2
 80252f0:	42a3      	cmp	r3, r4
 80252f2:	dd00      	ble.n	80252f6 <_strtod_l+0x772>
 80252f4:	0023      	movs	r3, r4
 80252f6:	2b00      	cmp	r3, #0
 80252f8:	dd04      	ble.n	8025304 <_strtod_l+0x780>
 80252fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80252fc:	1ae4      	subs	r4, r4, r3
 80252fe:	1ad2      	subs	r2, r2, r3
 8025300:	920e      	str	r2, [sp, #56]	@ 0x38
 8025302:	1aed      	subs	r5, r5, r3
 8025304:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025306:	2b00      	cmp	r3, #0
 8025308:	dd16      	ble.n	8025338 <_strtod_l+0x7b4>
 802530a:	001a      	movs	r2, r3
 802530c:	9907      	ldr	r1, [sp, #28]
 802530e:	9805      	ldr	r0, [sp, #20]
 8025310:	f002 ffb6 	bl	8028280 <__pow5mult>
 8025314:	9007      	str	r0, [sp, #28]
 8025316:	2800      	cmp	r0, #0
 8025318:	d0b3      	beq.n	8025282 <_strtod_l+0x6fe>
 802531a:	0001      	movs	r1, r0
 802531c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 802531e:	9805      	ldr	r0, [sp, #20]
 8025320:	f002 ff04 	bl	802812c <__multiply>
 8025324:	9013      	str	r0, [sp, #76]	@ 0x4c
 8025326:	2800      	cmp	r0, #0
 8025328:	d100      	bne.n	802532c <_strtod_l+0x7a8>
 802532a:	e66f      	b.n	802500c <_strtod_l+0x488>
 802532c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 802532e:	9805      	ldr	r0, [sp, #20]
 8025330:	f002 fde0 	bl	8027ef4 <_Bfree>
 8025334:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025336:	931e      	str	r3, [sp, #120]	@ 0x78
 8025338:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802533a:	2b00      	cmp	r3, #0
 802533c:	dc12      	bgt.n	8025364 <_strtod_l+0x7e0>
 802533e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025340:	2b00      	cmp	r3, #0
 8025342:	dd18      	ble.n	8025376 <_strtod_l+0x7f2>
 8025344:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8025346:	9908      	ldr	r1, [sp, #32]
 8025348:	9805      	ldr	r0, [sp, #20]
 802534a:	f002 ff99 	bl	8028280 <__pow5mult>
 802534e:	9008      	str	r0, [sp, #32]
 8025350:	2800      	cmp	r0, #0
 8025352:	d110      	bne.n	8025376 <_strtod_l+0x7f2>
 8025354:	2300      	movs	r3, #0
 8025356:	e658      	b.n	802500a <_strtod_l+0x486>
 8025358:	4954      	ldr	r1, [pc, #336]	@ (80254ac <_strtod_l+0x928>)
 802535a:	1acb      	subs	r3, r1, r3
 802535c:	0001      	movs	r1, r0
 802535e:	4099      	lsls	r1, r3
 8025360:	9115      	str	r1, [sp, #84]	@ 0x54
 8025362:	e7ba      	b.n	80252da <_strtod_l+0x756>
 8025364:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025366:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8025368:	9805      	ldr	r0, [sp, #20]
 802536a:	f002 ffe5 	bl	8028338 <__lshift>
 802536e:	901e      	str	r0, [sp, #120]	@ 0x78
 8025370:	2800      	cmp	r0, #0
 8025372:	d1e4      	bne.n	802533e <_strtod_l+0x7ba>
 8025374:	e64a      	b.n	802500c <_strtod_l+0x488>
 8025376:	2c00      	cmp	r4, #0
 8025378:	dd07      	ble.n	802538a <_strtod_l+0x806>
 802537a:	0022      	movs	r2, r4
 802537c:	9908      	ldr	r1, [sp, #32]
 802537e:	9805      	ldr	r0, [sp, #20]
 8025380:	f002 ffda 	bl	8028338 <__lshift>
 8025384:	9008      	str	r0, [sp, #32]
 8025386:	2800      	cmp	r0, #0
 8025388:	d0e4      	beq.n	8025354 <_strtod_l+0x7d0>
 802538a:	2d00      	cmp	r5, #0
 802538c:	dd08      	ble.n	80253a0 <_strtod_l+0x81c>
 802538e:	002a      	movs	r2, r5
 8025390:	9907      	ldr	r1, [sp, #28]
 8025392:	9805      	ldr	r0, [sp, #20]
 8025394:	f002 ffd0 	bl	8028338 <__lshift>
 8025398:	9007      	str	r0, [sp, #28]
 802539a:	2800      	cmp	r0, #0
 802539c:	d100      	bne.n	80253a0 <_strtod_l+0x81c>
 802539e:	e635      	b.n	802500c <_strtod_l+0x488>
 80253a0:	9a08      	ldr	r2, [sp, #32]
 80253a2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80253a4:	9805      	ldr	r0, [sp, #20]
 80253a6:	f003 f84f 	bl	8028448 <__mdiff>
 80253aa:	9006      	str	r0, [sp, #24]
 80253ac:	2800      	cmp	r0, #0
 80253ae:	d100      	bne.n	80253b2 <_strtod_l+0x82e>
 80253b0:	e62c      	b.n	802500c <_strtod_l+0x488>
 80253b2:	68c3      	ldr	r3, [r0, #12]
 80253b4:	9907      	ldr	r1, [sp, #28]
 80253b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80253b8:	2300      	movs	r3, #0
 80253ba:	60c3      	str	r3, [r0, #12]
 80253bc:	f003 f828 	bl	8028410 <__mcmp>
 80253c0:	2800      	cmp	r0, #0
 80253c2:	da3b      	bge.n	802543c <_strtod_l+0x8b8>
 80253c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80253c6:	4333      	orrs	r3, r6
 80253c8:	d167      	bne.n	802549a <_strtod_l+0x916>
 80253ca:	033b      	lsls	r3, r7, #12
 80253cc:	d165      	bne.n	802549a <_strtod_l+0x916>
 80253ce:	22d6      	movs	r2, #214	@ 0xd6
 80253d0:	4b37      	ldr	r3, [pc, #220]	@ (80254b0 <_strtod_l+0x92c>)
 80253d2:	04d2      	lsls	r2, r2, #19
 80253d4:	403b      	ands	r3, r7
 80253d6:	4293      	cmp	r3, r2
 80253d8:	d95f      	bls.n	802549a <_strtod_l+0x916>
 80253da:	9b06      	ldr	r3, [sp, #24]
 80253dc:	695b      	ldr	r3, [r3, #20]
 80253de:	2b00      	cmp	r3, #0
 80253e0:	d103      	bne.n	80253ea <_strtod_l+0x866>
 80253e2:	9b06      	ldr	r3, [sp, #24]
 80253e4:	691b      	ldr	r3, [r3, #16]
 80253e6:	2b01      	cmp	r3, #1
 80253e8:	dd57      	ble.n	802549a <_strtod_l+0x916>
 80253ea:	9906      	ldr	r1, [sp, #24]
 80253ec:	2201      	movs	r2, #1
 80253ee:	9805      	ldr	r0, [sp, #20]
 80253f0:	f002 ffa2 	bl	8028338 <__lshift>
 80253f4:	9907      	ldr	r1, [sp, #28]
 80253f6:	9006      	str	r0, [sp, #24]
 80253f8:	f003 f80a 	bl	8028410 <__mcmp>
 80253fc:	2800      	cmp	r0, #0
 80253fe:	dd4c      	ble.n	802549a <_strtod_l+0x916>
 8025400:	4b2b      	ldr	r3, [pc, #172]	@ (80254b0 <_strtod_l+0x92c>)
 8025402:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025404:	403b      	ands	r3, r7
 8025406:	2a00      	cmp	r2, #0
 8025408:	d074      	beq.n	80254f4 <_strtod_l+0x970>
 802540a:	22d6      	movs	r2, #214	@ 0xd6
 802540c:	04d2      	lsls	r2, r2, #19
 802540e:	4293      	cmp	r3, r2
 8025410:	d870      	bhi.n	80254f4 <_strtod_l+0x970>
 8025412:	22dc      	movs	r2, #220	@ 0xdc
 8025414:	0492      	lsls	r2, r2, #18
 8025416:	4293      	cmp	r3, r2
 8025418:	d800      	bhi.n	802541c <_strtod_l+0x898>
 802541a:	e693      	b.n	8025144 <_strtod_l+0x5c0>
 802541c:	0030      	movs	r0, r6
 802541e:	0039      	movs	r1, r7
 8025420:	4b24      	ldr	r3, [pc, #144]	@ (80254b4 <_strtod_l+0x930>)
 8025422:	2200      	movs	r2, #0
 8025424:	f7dd fa96 	bl	8002954 <__aeabi_dmul>
 8025428:	4b21      	ldr	r3, [pc, #132]	@ (80254b0 <_strtod_l+0x92c>)
 802542a:	0006      	movs	r6, r0
 802542c:	000f      	movs	r7, r1
 802542e:	420b      	tst	r3, r1
 8025430:	d000      	beq.n	8025434 <_strtod_l+0x8b0>
 8025432:	e5f4      	b.n	802501e <_strtod_l+0x49a>
 8025434:	2322      	movs	r3, #34	@ 0x22
 8025436:	9a05      	ldr	r2, [sp, #20]
 8025438:	6013      	str	r3, [r2, #0]
 802543a:	e5f0      	b.n	802501e <_strtod_l+0x49a>
 802543c:	970e      	str	r7, [sp, #56]	@ 0x38
 802543e:	2800      	cmp	r0, #0
 8025440:	d175      	bne.n	802552e <_strtod_l+0x9aa>
 8025442:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025444:	033b      	lsls	r3, r7, #12
 8025446:	0b1b      	lsrs	r3, r3, #12
 8025448:	2a00      	cmp	r2, #0
 802544a:	d039      	beq.n	80254c0 <_strtod_l+0x93c>
 802544c:	4a1a      	ldr	r2, [pc, #104]	@ (80254b8 <_strtod_l+0x934>)
 802544e:	4293      	cmp	r3, r2
 8025450:	d138      	bne.n	80254c4 <_strtod_l+0x940>
 8025452:	2101      	movs	r1, #1
 8025454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025456:	4249      	negs	r1, r1
 8025458:	0032      	movs	r2, r6
 802545a:	0008      	movs	r0, r1
 802545c:	2b00      	cmp	r3, #0
 802545e:	d00b      	beq.n	8025478 <_strtod_l+0x8f4>
 8025460:	24d4      	movs	r4, #212	@ 0xd4
 8025462:	4b13      	ldr	r3, [pc, #76]	@ (80254b0 <_strtod_l+0x92c>)
 8025464:	0008      	movs	r0, r1
 8025466:	403b      	ands	r3, r7
 8025468:	04e4      	lsls	r4, r4, #19
 802546a:	42a3      	cmp	r3, r4
 802546c:	d804      	bhi.n	8025478 <_strtod_l+0x8f4>
 802546e:	306c      	adds	r0, #108	@ 0x6c
 8025470:	0d1b      	lsrs	r3, r3, #20
 8025472:	1ac3      	subs	r3, r0, r3
 8025474:	4099      	lsls	r1, r3
 8025476:	0008      	movs	r0, r1
 8025478:	4282      	cmp	r2, r0
 802547a:	d123      	bne.n	80254c4 <_strtod_l+0x940>
 802547c:	4b0f      	ldr	r3, [pc, #60]	@ (80254bc <_strtod_l+0x938>)
 802547e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025480:	4299      	cmp	r1, r3
 8025482:	d102      	bne.n	802548a <_strtod_l+0x906>
 8025484:	3201      	adds	r2, #1
 8025486:	d100      	bne.n	802548a <_strtod_l+0x906>
 8025488:	e5c0      	b.n	802500c <_strtod_l+0x488>
 802548a:	4b09      	ldr	r3, [pc, #36]	@ (80254b0 <_strtod_l+0x92c>)
 802548c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802548e:	2600      	movs	r6, #0
 8025490:	401a      	ands	r2, r3
 8025492:	0013      	movs	r3, r2
 8025494:	2280      	movs	r2, #128	@ 0x80
 8025496:	0352      	lsls	r2, r2, #13
 8025498:	189f      	adds	r7, r3, r2
 802549a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802549c:	2b00      	cmp	r3, #0
 802549e:	d1bd      	bne.n	802541c <_strtod_l+0x898>
 80254a0:	e5bd      	b.n	802501e <_strtod_l+0x49a>
 80254a2:	46c0      	nop			@ (mov r8, r8)
 80254a4:	0802f140 	.word	0x0802f140
 80254a8:	fffffc02 	.word	0xfffffc02
 80254ac:	fffffbe2 	.word	0xfffffbe2
 80254b0:	7ff00000 	.word	0x7ff00000
 80254b4:	39500000 	.word	0x39500000
 80254b8:	000fffff 	.word	0x000fffff
 80254bc:	7fefffff 	.word	0x7fefffff
 80254c0:	4333      	orrs	r3, r6
 80254c2:	d09d      	beq.n	8025400 <_strtod_l+0x87c>
 80254c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80254c6:	2b00      	cmp	r3, #0
 80254c8:	d01c      	beq.n	8025504 <_strtod_l+0x980>
 80254ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80254cc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80254ce:	4213      	tst	r3, r2
 80254d0:	d0e3      	beq.n	802549a <_strtod_l+0x916>
 80254d2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80254d4:	0030      	movs	r0, r6
 80254d6:	0039      	movs	r1, r7
 80254d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80254da:	2b00      	cmp	r3, #0
 80254dc:	d016      	beq.n	802550c <_strtod_l+0x988>
 80254de:	f7ff fb39 	bl	8024b54 <sulp>
 80254e2:	0002      	movs	r2, r0
 80254e4:	000b      	movs	r3, r1
 80254e6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80254e8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80254ea:	f7dc fa33 	bl	8001954 <__aeabi_dadd>
 80254ee:	0006      	movs	r6, r0
 80254f0:	000f      	movs	r7, r1
 80254f2:	e7d2      	b.n	802549a <_strtod_l+0x916>
 80254f4:	2601      	movs	r6, #1
 80254f6:	4a92      	ldr	r2, [pc, #584]	@ (8025740 <_strtod_l+0xbbc>)
 80254f8:	4276      	negs	r6, r6
 80254fa:	189b      	adds	r3, r3, r2
 80254fc:	4a91      	ldr	r2, [pc, #580]	@ (8025744 <_strtod_l+0xbc0>)
 80254fe:	431a      	orrs	r2, r3
 8025500:	0017      	movs	r7, r2
 8025502:	e7ca      	b.n	802549a <_strtod_l+0x916>
 8025504:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8025506:	4233      	tst	r3, r6
 8025508:	d0c7      	beq.n	802549a <_strtod_l+0x916>
 802550a:	e7e2      	b.n	80254d2 <_strtod_l+0x94e>
 802550c:	f7ff fb22 	bl	8024b54 <sulp>
 8025510:	0002      	movs	r2, r0
 8025512:	000b      	movs	r3, r1
 8025514:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025516:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025518:	f7dd fd02 	bl	8002f20 <__aeabi_dsub>
 802551c:	2200      	movs	r2, #0
 802551e:	2300      	movs	r3, #0
 8025520:	0006      	movs	r6, r0
 8025522:	000f      	movs	r7, r1
 8025524:	f7da ffc4 	bl	80004b0 <__aeabi_dcmpeq>
 8025528:	2800      	cmp	r0, #0
 802552a:	d0b6      	beq.n	802549a <_strtod_l+0x916>
 802552c:	e60a      	b.n	8025144 <_strtod_l+0x5c0>
 802552e:	9907      	ldr	r1, [sp, #28]
 8025530:	9806      	ldr	r0, [sp, #24]
 8025532:	f003 f8ef 	bl	8028714 <__ratio>
 8025536:	2380      	movs	r3, #128	@ 0x80
 8025538:	2200      	movs	r2, #0
 802553a:	05db      	lsls	r3, r3, #23
 802553c:	0004      	movs	r4, r0
 802553e:	000d      	movs	r5, r1
 8025540:	f7da ffc6 	bl	80004d0 <__aeabi_dcmple>
 8025544:	2800      	cmp	r0, #0
 8025546:	d06c      	beq.n	8025622 <_strtod_l+0xa9e>
 8025548:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802554a:	2b00      	cmp	r3, #0
 802554c:	d177      	bne.n	802563e <_strtod_l+0xaba>
 802554e:	2e00      	cmp	r6, #0
 8025550:	d157      	bne.n	8025602 <_strtod_l+0xa7e>
 8025552:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025554:	031b      	lsls	r3, r3, #12
 8025556:	d15a      	bne.n	802560e <_strtod_l+0xa8a>
 8025558:	2200      	movs	r2, #0
 802555a:	0020      	movs	r0, r4
 802555c:	0029      	movs	r1, r5
 802555e:	4b7a      	ldr	r3, [pc, #488]	@ (8025748 <_strtod_l+0xbc4>)
 8025560:	f7da ffac 	bl	80004bc <__aeabi_dcmplt>
 8025564:	2800      	cmp	r0, #0
 8025566:	d159      	bne.n	802561c <_strtod_l+0xa98>
 8025568:	0020      	movs	r0, r4
 802556a:	0029      	movs	r1, r5
 802556c:	2200      	movs	r2, #0
 802556e:	4b77      	ldr	r3, [pc, #476]	@ (802574c <_strtod_l+0xbc8>)
 8025570:	f7dd f9f0 	bl	8002954 <__aeabi_dmul>
 8025574:	0004      	movs	r4, r0
 8025576:	000d      	movs	r5, r1
 8025578:	2380      	movs	r3, #128	@ 0x80
 802557a:	061b      	lsls	r3, r3, #24
 802557c:	18eb      	adds	r3, r5, r3
 802557e:	940a      	str	r4, [sp, #40]	@ 0x28
 8025580:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025582:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025584:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025586:	9216      	str	r2, [sp, #88]	@ 0x58
 8025588:	9317      	str	r3, [sp, #92]	@ 0x5c
 802558a:	4a71      	ldr	r2, [pc, #452]	@ (8025750 <_strtod_l+0xbcc>)
 802558c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802558e:	4013      	ands	r3, r2
 8025590:	9315      	str	r3, [sp, #84]	@ 0x54
 8025592:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025594:	4b6f      	ldr	r3, [pc, #444]	@ (8025754 <_strtod_l+0xbd0>)
 8025596:	429a      	cmp	r2, r3
 8025598:	d000      	beq.n	802559c <_strtod_l+0xa18>
 802559a:	e087      	b.n	80256ac <_strtod_l+0xb28>
 802559c:	4a6e      	ldr	r2, [pc, #440]	@ (8025758 <_strtod_l+0xbd4>)
 802559e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80255a0:	4694      	mov	ip, r2
 80255a2:	4463      	add	r3, ip
 80255a4:	001f      	movs	r7, r3
 80255a6:	0030      	movs	r0, r6
 80255a8:	0019      	movs	r1, r3
 80255aa:	f002 ffe7 	bl	802857c <__ulp>
 80255ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80255b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80255b2:	f7dd f9cf 	bl	8002954 <__aeabi_dmul>
 80255b6:	0032      	movs	r2, r6
 80255b8:	003b      	movs	r3, r7
 80255ba:	f7dc f9cb 	bl	8001954 <__aeabi_dadd>
 80255be:	4a64      	ldr	r2, [pc, #400]	@ (8025750 <_strtod_l+0xbcc>)
 80255c0:	4b66      	ldr	r3, [pc, #408]	@ (802575c <_strtod_l+0xbd8>)
 80255c2:	0006      	movs	r6, r0
 80255c4:	400a      	ands	r2, r1
 80255c6:	429a      	cmp	r2, r3
 80255c8:	d940      	bls.n	802564c <_strtod_l+0xac8>
 80255ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80255cc:	4a64      	ldr	r2, [pc, #400]	@ (8025760 <_strtod_l+0xbdc>)
 80255ce:	4293      	cmp	r3, r2
 80255d0:	d103      	bne.n	80255da <_strtod_l+0xa56>
 80255d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80255d4:	3301      	adds	r3, #1
 80255d6:	d100      	bne.n	80255da <_strtod_l+0xa56>
 80255d8:	e518      	b.n	802500c <_strtod_l+0x488>
 80255da:	2601      	movs	r6, #1
 80255dc:	4f60      	ldr	r7, [pc, #384]	@ (8025760 <_strtod_l+0xbdc>)
 80255de:	4276      	negs	r6, r6
 80255e0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80255e2:	9805      	ldr	r0, [sp, #20]
 80255e4:	f002 fc86 	bl	8027ef4 <_Bfree>
 80255e8:	9908      	ldr	r1, [sp, #32]
 80255ea:	9805      	ldr	r0, [sp, #20]
 80255ec:	f002 fc82 	bl	8027ef4 <_Bfree>
 80255f0:	9907      	ldr	r1, [sp, #28]
 80255f2:	9805      	ldr	r0, [sp, #20]
 80255f4:	f002 fc7e 	bl	8027ef4 <_Bfree>
 80255f8:	9906      	ldr	r1, [sp, #24]
 80255fa:	9805      	ldr	r0, [sp, #20]
 80255fc:	f002 fc7a 	bl	8027ef4 <_Bfree>
 8025600:	e617      	b.n	8025232 <_strtod_l+0x6ae>
 8025602:	2e01      	cmp	r6, #1
 8025604:	d103      	bne.n	802560e <_strtod_l+0xa8a>
 8025606:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025608:	2b00      	cmp	r3, #0
 802560a:	d100      	bne.n	802560e <_strtod_l+0xa8a>
 802560c:	e59a      	b.n	8025144 <_strtod_l+0x5c0>
 802560e:	2300      	movs	r3, #0
 8025610:	4c54      	ldr	r4, [pc, #336]	@ (8025764 <_strtod_l+0xbe0>)
 8025612:	4d4d      	ldr	r5, [pc, #308]	@ (8025748 <_strtod_l+0xbc4>)
 8025614:	930a      	str	r3, [sp, #40]	@ 0x28
 8025616:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025618:	2400      	movs	r4, #0
 802561a:	e7b2      	b.n	8025582 <_strtod_l+0x9fe>
 802561c:	2400      	movs	r4, #0
 802561e:	4d4b      	ldr	r5, [pc, #300]	@ (802574c <_strtod_l+0xbc8>)
 8025620:	e7aa      	b.n	8025578 <_strtod_l+0x9f4>
 8025622:	0020      	movs	r0, r4
 8025624:	0029      	movs	r1, r5
 8025626:	4b49      	ldr	r3, [pc, #292]	@ (802574c <_strtod_l+0xbc8>)
 8025628:	2200      	movs	r2, #0
 802562a:	f7dd f993 	bl	8002954 <__aeabi_dmul>
 802562e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025630:	0004      	movs	r4, r0
 8025632:	000d      	movs	r5, r1
 8025634:	2b00      	cmp	r3, #0
 8025636:	d09f      	beq.n	8025578 <_strtod_l+0x9f4>
 8025638:	940a      	str	r4, [sp, #40]	@ 0x28
 802563a:	950b      	str	r5, [sp, #44]	@ 0x2c
 802563c:	e7a1      	b.n	8025582 <_strtod_l+0x9fe>
 802563e:	2300      	movs	r3, #0
 8025640:	4c41      	ldr	r4, [pc, #260]	@ (8025748 <_strtod_l+0xbc4>)
 8025642:	0025      	movs	r5, r4
 8025644:	930a      	str	r3, [sp, #40]	@ 0x28
 8025646:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025648:	001c      	movs	r4, r3
 802564a:	e79a      	b.n	8025582 <_strtod_l+0x9fe>
 802564c:	23d4      	movs	r3, #212	@ 0xd4
 802564e:	049b      	lsls	r3, r3, #18
 8025650:	18cf      	adds	r7, r1, r3
 8025652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025654:	9710      	str	r7, [sp, #64]	@ 0x40
 8025656:	2b00      	cmp	r3, #0
 8025658:	d1c2      	bne.n	80255e0 <_strtod_l+0xa5c>
 802565a:	4b3d      	ldr	r3, [pc, #244]	@ (8025750 <_strtod_l+0xbcc>)
 802565c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802565e:	403b      	ands	r3, r7
 8025660:	429a      	cmp	r2, r3
 8025662:	d1bd      	bne.n	80255e0 <_strtod_l+0xa5c>
 8025664:	0020      	movs	r0, r4
 8025666:	0029      	movs	r1, r5
 8025668:	f7db f80e 	bl	8000688 <__aeabi_d2lz>
 802566c:	f7db f846 	bl	80006fc <__aeabi_l2d>
 8025670:	0002      	movs	r2, r0
 8025672:	000b      	movs	r3, r1
 8025674:	0020      	movs	r0, r4
 8025676:	0029      	movs	r1, r5
 8025678:	f7dd fc52 	bl	8002f20 <__aeabi_dsub>
 802567c:	033c      	lsls	r4, r7, #12
 802567e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025680:	0b24      	lsrs	r4, r4, #12
 8025682:	4334      	orrs	r4, r6
 8025684:	900e      	str	r0, [sp, #56]	@ 0x38
 8025686:	910f      	str	r1, [sp, #60]	@ 0x3c
 8025688:	4a37      	ldr	r2, [pc, #220]	@ (8025768 <_strtod_l+0xbe4>)
 802568a:	431c      	orrs	r4, r3
 802568c:	d052      	beq.n	8025734 <_strtod_l+0xbb0>
 802568e:	4b37      	ldr	r3, [pc, #220]	@ (802576c <_strtod_l+0xbe8>)
 8025690:	f7da ff14 	bl	80004bc <__aeabi_dcmplt>
 8025694:	2800      	cmp	r0, #0
 8025696:	d000      	beq.n	802569a <_strtod_l+0xb16>
 8025698:	e4c1      	b.n	802501e <_strtod_l+0x49a>
 802569a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 802569c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802569e:	4a34      	ldr	r2, [pc, #208]	@ (8025770 <_strtod_l+0xbec>)
 80256a0:	4b2a      	ldr	r3, [pc, #168]	@ (802574c <_strtod_l+0xbc8>)
 80256a2:	f7da ff1f 	bl	80004e4 <__aeabi_dcmpgt>
 80256a6:	2800      	cmp	r0, #0
 80256a8:	d09a      	beq.n	80255e0 <_strtod_l+0xa5c>
 80256aa:	e4b8      	b.n	802501e <_strtod_l+0x49a>
 80256ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80256ae:	2b00      	cmp	r3, #0
 80256b0:	d02a      	beq.n	8025708 <_strtod_l+0xb84>
 80256b2:	23d4      	movs	r3, #212	@ 0xd4
 80256b4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80256b6:	04db      	lsls	r3, r3, #19
 80256b8:	429a      	cmp	r2, r3
 80256ba:	d825      	bhi.n	8025708 <_strtod_l+0xb84>
 80256bc:	0020      	movs	r0, r4
 80256be:	0029      	movs	r1, r5
 80256c0:	4a2c      	ldr	r2, [pc, #176]	@ (8025774 <_strtod_l+0xbf0>)
 80256c2:	4b2d      	ldr	r3, [pc, #180]	@ (8025778 <_strtod_l+0xbf4>)
 80256c4:	f7da ff04 	bl	80004d0 <__aeabi_dcmple>
 80256c8:	2800      	cmp	r0, #0
 80256ca:	d016      	beq.n	80256fa <_strtod_l+0xb76>
 80256cc:	0020      	movs	r0, r4
 80256ce:	0029      	movs	r1, r5
 80256d0:	f7da ffbc 	bl	800064c <__aeabi_d2uiz>
 80256d4:	2800      	cmp	r0, #0
 80256d6:	d100      	bne.n	80256da <_strtod_l+0xb56>
 80256d8:	3001      	adds	r0, #1
 80256da:	f7de f8b7 	bl	800384c <__aeabi_ui2d>
 80256de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80256e0:	0004      	movs	r4, r0
 80256e2:	000d      	movs	r5, r1
 80256e4:	2b00      	cmp	r3, #0
 80256e6:	d122      	bne.n	802572e <_strtod_l+0xbaa>
 80256e8:	2380      	movs	r3, #128	@ 0x80
 80256ea:	061b      	lsls	r3, r3, #24
 80256ec:	18cb      	adds	r3, r1, r3
 80256ee:	9018      	str	r0, [sp, #96]	@ 0x60
 80256f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80256f2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80256f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80256f6:	9216      	str	r2, [sp, #88]	@ 0x58
 80256f8:	9317      	str	r3, [sp, #92]	@ 0x5c
 80256fa:	22d6      	movs	r2, #214	@ 0xd6
 80256fc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80256fe:	04d2      	lsls	r2, r2, #19
 8025700:	189b      	adds	r3, r3, r2
 8025702:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025704:	1a9b      	subs	r3, r3, r2
 8025706:	9317      	str	r3, [sp, #92]	@ 0x5c
 8025708:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802570a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802570c:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 802570e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8025710:	f002 ff34 	bl	802857c <__ulp>
 8025714:	0002      	movs	r2, r0
 8025716:	000b      	movs	r3, r1
 8025718:	0030      	movs	r0, r6
 802571a:	0039      	movs	r1, r7
 802571c:	f7dd f91a 	bl	8002954 <__aeabi_dmul>
 8025720:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8025722:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025724:	f7dc f916 	bl	8001954 <__aeabi_dadd>
 8025728:	0006      	movs	r6, r0
 802572a:	000f      	movs	r7, r1
 802572c:	e791      	b.n	8025652 <_strtod_l+0xace>
 802572e:	9418      	str	r4, [sp, #96]	@ 0x60
 8025730:	9519      	str	r5, [sp, #100]	@ 0x64
 8025732:	e7de      	b.n	80256f2 <_strtod_l+0xb6e>
 8025734:	4b11      	ldr	r3, [pc, #68]	@ (802577c <_strtod_l+0xbf8>)
 8025736:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8025738:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802573a:	f7da febf 	bl	80004bc <__aeabi_dcmplt>
 802573e:	e7b2      	b.n	80256a6 <_strtod_l+0xb22>
 8025740:	fff00000 	.word	0xfff00000
 8025744:	000fffff 	.word	0x000fffff
 8025748:	3ff00000 	.word	0x3ff00000
 802574c:	3fe00000 	.word	0x3fe00000
 8025750:	7ff00000 	.word	0x7ff00000
 8025754:	7fe00000 	.word	0x7fe00000
 8025758:	fcb00000 	.word	0xfcb00000
 802575c:	7c9fffff 	.word	0x7c9fffff
 8025760:	7fefffff 	.word	0x7fefffff
 8025764:	bff00000 	.word	0xbff00000
 8025768:	94a03595 	.word	0x94a03595
 802576c:	3fdfffff 	.word	0x3fdfffff
 8025770:	35afe535 	.word	0x35afe535
 8025774:	ffc00000 	.word	0xffc00000
 8025778:	41dfffff 	.word	0x41dfffff
 802577c:	3fcfffff 	.word	0x3fcfffff

08025780 <strtod>:
 8025780:	b510      	push	{r4, lr}
 8025782:	4c04      	ldr	r4, [pc, #16]	@ (8025794 <strtod+0x14>)
 8025784:	000a      	movs	r2, r1
 8025786:	0001      	movs	r1, r0
 8025788:	4b03      	ldr	r3, [pc, #12]	@ (8025798 <strtod+0x18>)
 802578a:	6820      	ldr	r0, [r4, #0]
 802578c:	f7ff f9fa 	bl	8024b84 <_strtod_l>
 8025790:	bd10      	pop	{r4, pc}
 8025792:	46c0      	nop			@ (mov r8, r8)
 8025794:	200003ec 	.word	0x200003ec
 8025798:	20000280 	.word	0x20000280

0802579c <_strtol_l.isra.0>:
 802579c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802579e:	b085      	sub	sp, #20
 80257a0:	0017      	movs	r7, r2
 80257a2:	001e      	movs	r6, r3
 80257a4:	9003      	str	r0, [sp, #12]
 80257a6:	9101      	str	r1, [sp, #4]
 80257a8:	2b24      	cmp	r3, #36	@ 0x24
 80257aa:	d823      	bhi.n	80257f4 <_strtol_l.isra.0+0x58>
 80257ac:	000c      	movs	r4, r1
 80257ae:	2b01      	cmp	r3, #1
 80257b0:	d020      	beq.n	80257f4 <_strtol_l.isra.0+0x58>
 80257b2:	4b3d      	ldr	r3, [pc, #244]	@ (80258a8 <_strtol_l.isra.0+0x10c>)
 80257b4:	2208      	movs	r2, #8
 80257b6:	469c      	mov	ip, r3
 80257b8:	0023      	movs	r3, r4
 80257ba:	4661      	mov	r1, ip
 80257bc:	781d      	ldrb	r5, [r3, #0]
 80257be:	3401      	adds	r4, #1
 80257c0:	5d48      	ldrb	r0, [r1, r5]
 80257c2:	0001      	movs	r1, r0
 80257c4:	4011      	ands	r1, r2
 80257c6:	4210      	tst	r0, r2
 80257c8:	d1f6      	bne.n	80257b8 <_strtol_l.isra.0+0x1c>
 80257ca:	2d2d      	cmp	r5, #45	@ 0x2d
 80257cc:	d119      	bne.n	8025802 <_strtol_l.isra.0+0x66>
 80257ce:	7825      	ldrb	r5, [r4, #0]
 80257d0:	1c9c      	adds	r4, r3, #2
 80257d2:	2301      	movs	r3, #1
 80257d4:	9300      	str	r3, [sp, #0]
 80257d6:	2210      	movs	r2, #16
 80257d8:	0033      	movs	r3, r6
 80257da:	4393      	bics	r3, r2
 80257dc:	d11d      	bne.n	802581a <_strtol_l.isra.0+0x7e>
 80257de:	2d30      	cmp	r5, #48	@ 0x30
 80257e0:	d115      	bne.n	802580e <_strtol_l.isra.0+0x72>
 80257e2:	2120      	movs	r1, #32
 80257e4:	7823      	ldrb	r3, [r4, #0]
 80257e6:	438b      	bics	r3, r1
 80257e8:	2b58      	cmp	r3, #88	@ 0x58
 80257ea:	d110      	bne.n	802580e <_strtol_l.isra.0+0x72>
 80257ec:	7865      	ldrb	r5, [r4, #1]
 80257ee:	3402      	adds	r4, #2
 80257f0:	2610      	movs	r6, #16
 80257f2:	e012      	b.n	802581a <_strtol_l.isra.0+0x7e>
 80257f4:	f001 f80a 	bl	802680c <__errno>
 80257f8:	2316      	movs	r3, #22
 80257fa:	6003      	str	r3, [r0, #0]
 80257fc:	2000      	movs	r0, #0
 80257fe:	b005      	add	sp, #20
 8025800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025802:	9100      	str	r1, [sp, #0]
 8025804:	2d2b      	cmp	r5, #43	@ 0x2b
 8025806:	d1e6      	bne.n	80257d6 <_strtol_l.isra.0+0x3a>
 8025808:	7825      	ldrb	r5, [r4, #0]
 802580a:	1c9c      	adds	r4, r3, #2
 802580c:	e7e3      	b.n	80257d6 <_strtol_l.isra.0+0x3a>
 802580e:	2e00      	cmp	r6, #0
 8025810:	d1ee      	bne.n	80257f0 <_strtol_l.isra.0+0x54>
 8025812:	360a      	adds	r6, #10
 8025814:	2d30      	cmp	r5, #48	@ 0x30
 8025816:	d100      	bne.n	802581a <_strtol_l.isra.0+0x7e>
 8025818:	3e02      	subs	r6, #2
 802581a:	4a24      	ldr	r2, [pc, #144]	@ (80258ac <_strtol_l.isra.0+0x110>)
 802581c:	9b00      	ldr	r3, [sp, #0]
 802581e:	4694      	mov	ip, r2
 8025820:	4463      	add	r3, ip
 8025822:	0031      	movs	r1, r6
 8025824:	0018      	movs	r0, r3
 8025826:	9302      	str	r3, [sp, #8]
 8025828:	f7da fd42 	bl	80002b0 <__aeabi_uidivmod>
 802582c:	2200      	movs	r2, #0
 802582e:	4684      	mov	ip, r0
 8025830:	0010      	movs	r0, r2
 8025832:	002b      	movs	r3, r5
 8025834:	3b30      	subs	r3, #48	@ 0x30
 8025836:	2b09      	cmp	r3, #9
 8025838:	d811      	bhi.n	802585e <_strtol_l.isra.0+0xc2>
 802583a:	001d      	movs	r5, r3
 802583c:	42ae      	cmp	r6, r5
 802583e:	dd1d      	ble.n	802587c <_strtol_l.isra.0+0xe0>
 8025840:	1c53      	adds	r3, r2, #1
 8025842:	d009      	beq.n	8025858 <_strtol_l.isra.0+0xbc>
 8025844:	2201      	movs	r2, #1
 8025846:	4252      	negs	r2, r2
 8025848:	4584      	cmp	ip, r0
 802584a:	d305      	bcc.n	8025858 <_strtol_l.isra.0+0xbc>
 802584c:	d101      	bne.n	8025852 <_strtol_l.isra.0+0xb6>
 802584e:	42a9      	cmp	r1, r5
 8025850:	db11      	blt.n	8025876 <_strtol_l.isra.0+0xda>
 8025852:	2201      	movs	r2, #1
 8025854:	4370      	muls	r0, r6
 8025856:	1828      	adds	r0, r5, r0
 8025858:	7825      	ldrb	r5, [r4, #0]
 802585a:	3401      	adds	r4, #1
 802585c:	e7e9      	b.n	8025832 <_strtol_l.isra.0+0x96>
 802585e:	002b      	movs	r3, r5
 8025860:	3b41      	subs	r3, #65	@ 0x41
 8025862:	2b19      	cmp	r3, #25
 8025864:	d801      	bhi.n	802586a <_strtol_l.isra.0+0xce>
 8025866:	3d37      	subs	r5, #55	@ 0x37
 8025868:	e7e8      	b.n	802583c <_strtol_l.isra.0+0xa0>
 802586a:	002b      	movs	r3, r5
 802586c:	3b61      	subs	r3, #97	@ 0x61
 802586e:	2b19      	cmp	r3, #25
 8025870:	d804      	bhi.n	802587c <_strtol_l.isra.0+0xe0>
 8025872:	3d57      	subs	r5, #87	@ 0x57
 8025874:	e7e2      	b.n	802583c <_strtol_l.isra.0+0xa0>
 8025876:	2201      	movs	r2, #1
 8025878:	4252      	negs	r2, r2
 802587a:	e7ed      	b.n	8025858 <_strtol_l.isra.0+0xbc>
 802587c:	1c53      	adds	r3, r2, #1
 802587e:	d108      	bne.n	8025892 <_strtol_l.isra.0+0xf6>
 8025880:	2322      	movs	r3, #34	@ 0x22
 8025882:	9a03      	ldr	r2, [sp, #12]
 8025884:	9802      	ldr	r0, [sp, #8]
 8025886:	6013      	str	r3, [r2, #0]
 8025888:	2f00      	cmp	r7, #0
 802588a:	d0b8      	beq.n	80257fe <_strtol_l.isra.0+0x62>
 802588c:	1e63      	subs	r3, r4, #1
 802588e:	9301      	str	r3, [sp, #4]
 8025890:	e007      	b.n	80258a2 <_strtol_l.isra.0+0x106>
 8025892:	9b00      	ldr	r3, [sp, #0]
 8025894:	2b00      	cmp	r3, #0
 8025896:	d000      	beq.n	802589a <_strtol_l.isra.0+0xfe>
 8025898:	4240      	negs	r0, r0
 802589a:	2f00      	cmp	r7, #0
 802589c:	d0af      	beq.n	80257fe <_strtol_l.isra.0+0x62>
 802589e:	2a00      	cmp	r2, #0
 80258a0:	d1f4      	bne.n	802588c <_strtol_l.isra.0+0xf0>
 80258a2:	9b01      	ldr	r3, [sp, #4]
 80258a4:	603b      	str	r3, [r7, #0]
 80258a6:	e7aa      	b.n	80257fe <_strtol_l.isra.0+0x62>
 80258a8:	0802f169 	.word	0x0802f169
 80258ac:	7fffffff 	.word	0x7fffffff

080258b0 <strtol>:
 80258b0:	b510      	push	{r4, lr}
 80258b2:	4c04      	ldr	r4, [pc, #16]	@ (80258c4 <strtol+0x14>)
 80258b4:	0013      	movs	r3, r2
 80258b6:	000a      	movs	r2, r1
 80258b8:	0001      	movs	r1, r0
 80258ba:	6820      	ldr	r0, [r4, #0]
 80258bc:	f7ff ff6e 	bl	802579c <_strtol_l.isra.0>
 80258c0:	bd10      	pop	{r4, pc}
 80258c2:	46c0      	nop			@ (mov r8, r8)
 80258c4:	200003ec 	.word	0x200003ec

080258c8 <__cvt>:
 80258c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80258ca:	001f      	movs	r7, r3
 80258cc:	2300      	movs	r3, #0
 80258ce:	0016      	movs	r6, r2
 80258d0:	b08b      	sub	sp, #44	@ 0x2c
 80258d2:	429f      	cmp	r7, r3
 80258d4:	da04      	bge.n	80258e0 <__cvt+0x18>
 80258d6:	2180      	movs	r1, #128	@ 0x80
 80258d8:	0609      	lsls	r1, r1, #24
 80258da:	187b      	adds	r3, r7, r1
 80258dc:	001f      	movs	r7, r3
 80258de:	232d      	movs	r3, #45	@ 0x2d
 80258e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80258e2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80258e4:	7013      	strb	r3, [r2, #0]
 80258e6:	2320      	movs	r3, #32
 80258e8:	2203      	movs	r2, #3
 80258ea:	439d      	bics	r5, r3
 80258ec:	2d46      	cmp	r5, #70	@ 0x46
 80258ee:	d007      	beq.n	8025900 <__cvt+0x38>
 80258f0:	002b      	movs	r3, r5
 80258f2:	3b45      	subs	r3, #69	@ 0x45
 80258f4:	4259      	negs	r1, r3
 80258f6:	414b      	adcs	r3, r1
 80258f8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80258fa:	3a01      	subs	r2, #1
 80258fc:	18cb      	adds	r3, r1, r3
 80258fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8025900:	ab09      	add	r3, sp, #36	@ 0x24
 8025902:	9304      	str	r3, [sp, #16]
 8025904:	ab08      	add	r3, sp, #32
 8025906:	9303      	str	r3, [sp, #12]
 8025908:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802590a:	9200      	str	r2, [sp, #0]
 802590c:	9302      	str	r3, [sp, #8]
 802590e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025910:	0032      	movs	r2, r6
 8025912:	9301      	str	r3, [sp, #4]
 8025914:	003b      	movs	r3, r7
 8025916:	f001 f847 	bl	80269a8 <_dtoa_r>
 802591a:	0004      	movs	r4, r0
 802591c:	2d47      	cmp	r5, #71	@ 0x47
 802591e:	d11b      	bne.n	8025958 <__cvt+0x90>
 8025920:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025922:	07db      	lsls	r3, r3, #31
 8025924:	d511      	bpl.n	802594a <__cvt+0x82>
 8025926:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025928:	18c3      	adds	r3, r0, r3
 802592a:	9307      	str	r3, [sp, #28]
 802592c:	2200      	movs	r2, #0
 802592e:	2300      	movs	r3, #0
 8025930:	0030      	movs	r0, r6
 8025932:	0039      	movs	r1, r7
 8025934:	f7da fdbc 	bl	80004b0 <__aeabi_dcmpeq>
 8025938:	2800      	cmp	r0, #0
 802593a:	d001      	beq.n	8025940 <__cvt+0x78>
 802593c:	9b07      	ldr	r3, [sp, #28]
 802593e:	9309      	str	r3, [sp, #36]	@ 0x24
 8025940:	2230      	movs	r2, #48	@ 0x30
 8025942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025944:	9907      	ldr	r1, [sp, #28]
 8025946:	428b      	cmp	r3, r1
 8025948:	d320      	bcc.n	802598c <__cvt+0xc4>
 802594a:	0020      	movs	r0, r4
 802594c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802594e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025950:	1b1b      	subs	r3, r3, r4
 8025952:	6013      	str	r3, [r2, #0]
 8025954:	b00b      	add	sp, #44	@ 0x2c
 8025956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025958:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802595a:	18c3      	adds	r3, r0, r3
 802595c:	9307      	str	r3, [sp, #28]
 802595e:	2d46      	cmp	r5, #70	@ 0x46
 8025960:	d1e4      	bne.n	802592c <__cvt+0x64>
 8025962:	7803      	ldrb	r3, [r0, #0]
 8025964:	2b30      	cmp	r3, #48	@ 0x30
 8025966:	d10c      	bne.n	8025982 <__cvt+0xba>
 8025968:	2200      	movs	r2, #0
 802596a:	2300      	movs	r3, #0
 802596c:	0030      	movs	r0, r6
 802596e:	0039      	movs	r1, r7
 8025970:	f7da fd9e 	bl	80004b0 <__aeabi_dcmpeq>
 8025974:	2800      	cmp	r0, #0
 8025976:	d104      	bne.n	8025982 <__cvt+0xba>
 8025978:	2301      	movs	r3, #1
 802597a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802597c:	1a9b      	subs	r3, r3, r2
 802597e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025980:	6013      	str	r3, [r2, #0]
 8025982:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025984:	9a07      	ldr	r2, [sp, #28]
 8025986:	681b      	ldr	r3, [r3, #0]
 8025988:	18d3      	adds	r3, r2, r3
 802598a:	e7ce      	b.n	802592a <__cvt+0x62>
 802598c:	1c59      	adds	r1, r3, #1
 802598e:	9109      	str	r1, [sp, #36]	@ 0x24
 8025990:	701a      	strb	r2, [r3, #0]
 8025992:	e7d6      	b.n	8025942 <__cvt+0x7a>

08025994 <__exponent>:
 8025994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025996:	232b      	movs	r3, #43	@ 0x2b
 8025998:	b085      	sub	sp, #20
 802599a:	0005      	movs	r5, r0
 802599c:	1e0c      	subs	r4, r1, #0
 802599e:	7002      	strb	r2, [r0, #0]
 80259a0:	da01      	bge.n	80259a6 <__exponent+0x12>
 80259a2:	424c      	negs	r4, r1
 80259a4:	3302      	adds	r3, #2
 80259a6:	706b      	strb	r3, [r5, #1]
 80259a8:	2c09      	cmp	r4, #9
 80259aa:	dd2c      	ble.n	8025a06 <__exponent+0x72>
 80259ac:	ab02      	add	r3, sp, #8
 80259ae:	1dde      	adds	r6, r3, #7
 80259b0:	0020      	movs	r0, r4
 80259b2:	210a      	movs	r1, #10
 80259b4:	f7da fd66 	bl	8000484 <__aeabi_idivmod>
 80259b8:	0037      	movs	r7, r6
 80259ba:	3130      	adds	r1, #48	@ 0x30
 80259bc:	3e01      	subs	r6, #1
 80259be:	0020      	movs	r0, r4
 80259c0:	7031      	strb	r1, [r6, #0]
 80259c2:	210a      	movs	r1, #10
 80259c4:	9401      	str	r4, [sp, #4]
 80259c6:	f7da fc77 	bl	80002b8 <__divsi3>
 80259ca:	9b01      	ldr	r3, [sp, #4]
 80259cc:	0004      	movs	r4, r0
 80259ce:	2b63      	cmp	r3, #99	@ 0x63
 80259d0:	dcee      	bgt.n	80259b0 <__exponent+0x1c>
 80259d2:	1eba      	subs	r2, r7, #2
 80259d4:	1ca8      	adds	r0, r5, #2
 80259d6:	0001      	movs	r1, r0
 80259d8:	0013      	movs	r3, r2
 80259da:	3430      	adds	r4, #48	@ 0x30
 80259dc:	7014      	strb	r4, [r2, #0]
 80259de:	ac02      	add	r4, sp, #8
 80259e0:	3407      	adds	r4, #7
 80259e2:	429c      	cmp	r4, r3
 80259e4:	d80a      	bhi.n	80259fc <__exponent+0x68>
 80259e6:	2300      	movs	r3, #0
 80259e8:	4294      	cmp	r4, r2
 80259ea:	d303      	bcc.n	80259f4 <__exponent+0x60>
 80259ec:	3309      	adds	r3, #9
 80259ee:	aa02      	add	r2, sp, #8
 80259f0:	189b      	adds	r3, r3, r2
 80259f2:	1bdb      	subs	r3, r3, r7
 80259f4:	18c0      	adds	r0, r0, r3
 80259f6:	1b40      	subs	r0, r0, r5
 80259f8:	b005      	add	sp, #20
 80259fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80259fc:	781c      	ldrb	r4, [r3, #0]
 80259fe:	3301      	adds	r3, #1
 8025a00:	700c      	strb	r4, [r1, #0]
 8025a02:	3101      	adds	r1, #1
 8025a04:	e7eb      	b.n	80259de <__exponent+0x4a>
 8025a06:	2330      	movs	r3, #48	@ 0x30
 8025a08:	18e4      	adds	r4, r4, r3
 8025a0a:	70ab      	strb	r3, [r5, #2]
 8025a0c:	1d28      	adds	r0, r5, #4
 8025a0e:	70ec      	strb	r4, [r5, #3]
 8025a10:	e7f1      	b.n	80259f6 <__exponent+0x62>
	...

08025a14 <_printf_float>:
 8025a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a16:	b097      	sub	sp, #92	@ 0x5c
 8025a18:	000d      	movs	r5, r1
 8025a1a:	920a      	str	r2, [sp, #40]	@ 0x28
 8025a1c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8025a1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025a20:	9009      	str	r0, [sp, #36]	@ 0x24
 8025a22:	f000 fea1 	bl	8026768 <_localeconv_r>
 8025a26:	6803      	ldr	r3, [r0, #0]
 8025a28:	0018      	movs	r0, r3
 8025a2a:	930d      	str	r3, [sp, #52]	@ 0x34
 8025a2c:	f7da fb9e 	bl	800016c <strlen>
 8025a30:	2300      	movs	r3, #0
 8025a32:	900f      	str	r0, [sp, #60]	@ 0x3c
 8025a34:	9314      	str	r3, [sp, #80]	@ 0x50
 8025a36:	7e2b      	ldrb	r3, [r5, #24]
 8025a38:	2207      	movs	r2, #7
 8025a3a:	930c      	str	r3, [sp, #48]	@ 0x30
 8025a3c:	682b      	ldr	r3, [r5, #0]
 8025a3e:	930e      	str	r3, [sp, #56]	@ 0x38
 8025a40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8025a42:	6823      	ldr	r3, [r4, #0]
 8025a44:	05c9      	lsls	r1, r1, #23
 8025a46:	d545      	bpl.n	8025ad4 <_printf_float+0xc0>
 8025a48:	189b      	adds	r3, r3, r2
 8025a4a:	4393      	bics	r3, r2
 8025a4c:	001a      	movs	r2, r3
 8025a4e:	3208      	adds	r2, #8
 8025a50:	6022      	str	r2, [r4, #0]
 8025a52:	2201      	movs	r2, #1
 8025a54:	681e      	ldr	r6, [r3, #0]
 8025a56:	685f      	ldr	r7, [r3, #4]
 8025a58:	007b      	lsls	r3, r7, #1
 8025a5a:	085b      	lsrs	r3, r3, #1
 8025a5c:	9311      	str	r3, [sp, #68]	@ 0x44
 8025a5e:	9610      	str	r6, [sp, #64]	@ 0x40
 8025a60:	64ae      	str	r6, [r5, #72]	@ 0x48
 8025a62:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8025a64:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025a66:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025a68:	4ba7      	ldr	r3, [pc, #668]	@ (8025d08 <_printf_float+0x2f4>)
 8025a6a:	4252      	negs	r2, r2
 8025a6c:	f7dd fe62 	bl	8003734 <__aeabi_dcmpun>
 8025a70:	2800      	cmp	r0, #0
 8025a72:	d131      	bne.n	8025ad8 <_printf_float+0xc4>
 8025a74:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8025a76:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8025a78:	2201      	movs	r2, #1
 8025a7a:	4ba3      	ldr	r3, [pc, #652]	@ (8025d08 <_printf_float+0x2f4>)
 8025a7c:	4252      	negs	r2, r2
 8025a7e:	f7da fd27 	bl	80004d0 <__aeabi_dcmple>
 8025a82:	2800      	cmp	r0, #0
 8025a84:	d128      	bne.n	8025ad8 <_printf_float+0xc4>
 8025a86:	2200      	movs	r2, #0
 8025a88:	2300      	movs	r3, #0
 8025a8a:	0030      	movs	r0, r6
 8025a8c:	0039      	movs	r1, r7
 8025a8e:	f7da fd15 	bl	80004bc <__aeabi_dcmplt>
 8025a92:	2800      	cmp	r0, #0
 8025a94:	d003      	beq.n	8025a9e <_printf_float+0x8a>
 8025a96:	002b      	movs	r3, r5
 8025a98:	222d      	movs	r2, #45	@ 0x2d
 8025a9a:	3343      	adds	r3, #67	@ 0x43
 8025a9c:	701a      	strb	r2, [r3, #0]
 8025a9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025aa0:	4f9a      	ldr	r7, [pc, #616]	@ (8025d0c <_printf_float+0x2f8>)
 8025aa2:	2b47      	cmp	r3, #71	@ 0x47
 8025aa4:	d800      	bhi.n	8025aa8 <_printf_float+0x94>
 8025aa6:	4f9a      	ldr	r7, [pc, #616]	@ (8025d10 <_printf_float+0x2fc>)
 8025aa8:	2303      	movs	r3, #3
 8025aaa:	2400      	movs	r4, #0
 8025aac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025aae:	612b      	str	r3, [r5, #16]
 8025ab0:	3301      	adds	r3, #1
 8025ab2:	439a      	bics	r2, r3
 8025ab4:	602a      	str	r2, [r5, #0]
 8025ab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025ab8:	0029      	movs	r1, r5
 8025aba:	9300      	str	r3, [sp, #0]
 8025abc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025abe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025ac0:	aa15      	add	r2, sp, #84	@ 0x54
 8025ac2:	f000 f9e5 	bl	8025e90 <_printf_common>
 8025ac6:	3001      	adds	r0, #1
 8025ac8:	d000      	beq.n	8025acc <_printf_float+0xb8>
 8025aca:	e09e      	b.n	8025c0a <_printf_float+0x1f6>
 8025acc:	2001      	movs	r0, #1
 8025ace:	4240      	negs	r0, r0
 8025ad0:	b017      	add	sp, #92	@ 0x5c
 8025ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025ad4:	3307      	adds	r3, #7
 8025ad6:	e7b8      	b.n	8025a4a <_printf_float+0x36>
 8025ad8:	0032      	movs	r2, r6
 8025ada:	003b      	movs	r3, r7
 8025adc:	0030      	movs	r0, r6
 8025ade:	0039      	movs	r1, r7
 8025ae0:	f7dd fe28 	bl	8003734 <__aeabi_dcmpun>
 8025ae4:	2800      	cmp	r0, #0
 8025ae6:	d00b      	beq.n	8025b00 <_printf_float+0xec>
 8025ae8:	2f00      	cmp	r7, #0
 8025aea:	da03      	bge.n	8025af4 <_printf_float+0xe0>
 8025aec:	002b      	movs	r3, r5
 8025aee:	222d      	movs	r2, #45	@ 0x2d
 8025af0:	3343      	adds	r3, #67	@ 0x43
 8025af2:	701a      	strb	r2, [r3, #0]
 8025af4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025af6:	4f87      	ldr	r7, [pc, #540]	@ (8025d14 <_printf_float+0x300>)
 8025af8:	2b47      	cmp	r3, #71	@ 0x47
 8025afa:	d8d5      	bhi.n	8025aa8 <_printf_float+0x94>
 8025afc:	4f86      	ldr	r7, [pc, #536]	@ (8025d18 <_printf_float+0x304>)
 8025afe:	e7d3      	b.n	8025aa8 <_printf_float+0x94>
 8025b00:	2220      	movs	r2, #32
 8025b02:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8025b04:	686b      	ldr	r3, [r5, #4]
 8025b06:	4394      	bics	r4, r2
 8025b08:	1c5a      	adds	r2, r3, #1
 8025b0a:	d146      	bne.n	8025b9a <_printf_float+0x186>
 8025b0c:	3307      	adds	r3, #7
 8025b0e:	606b      	str	r3, [r5, #4]
 8025b10:	2380      	movs	r3, #128	@ 0x80
 8025b12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025b14:	00db      	lsls	r3, r3, #3
 8025b16:	4313      	orrs	r3, r2
 8025b18:	2200      	movs	r2, #0
 8025b1a:	602b      	str	r3, [r5, #0]
 8025b1c:	9206      	str	r2, [sp, #24]
 8025b1e:	aa14      	add	r2, sp, #80	@ 0x50
 8025b20:	9205      	str	r2, [sp, #20]
 8025b22:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025b24:	a90a      	add	r1, sp, #40	@ 0x28
 8025b26:	9204      	str	r2, [sp, #16]
 8025b28:	aa13      	add	r2, sp, #76	@ 0x4c
 8025b2a:	9203      	str	r2, [sp, #12]
 8025b2c:	2223      	movs	r2, #35	@ 0x23
 8025b2e:	1852      	adds	r2, r2, r1
 8025b30:	9202      	str	r2, [sp, #8]
 8025b32:	9301      	str	r3, [sp, #4]
 8025b34:	686b      	ldr	r3, [r5, #4]
 8025b36:	0032      	movs	r2, r6
 8025b38:	9300      	str	r3, [sp, #0]
 8025b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b3c:	003b      	movs	r3, r7
 8025b3e:	f7ff fec3 	bl	80258c8 <__cvt>
 8025b42:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025b44:	0007      	movs	r7, r0
 8025b46:	2c47      	cmp	r4, #71	@ 0x47
 8025b48:	d12d      	bne.n	8025ba6 <_printf_float+0x192>
 8025b4a:	1cd3      	adds	r3, r2, #3
 8025b4c:	db02      	blt.n	8025b54 <_printf_float+0x140>
 8025b4e:	686b      	ldr	r3, [r5, #4]
 8025b50:	429a      	cmp	r2, r3
 8025b52:	dd47      	ble.n	8025be4 <_printf_float+0x1d0>
 8025b54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025b56:	3b02      	subs	r3, #2
 8025b58:	b2db      	uxtb	r3, r3
 8025b5a:	930c      	str	r3, [sp, #48]	@ 0x30
 8025b5c:	0028      	movs	r0, r5
 8025b5e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025b60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025b62:	3901      	subs	r1, #1
 8025b64:	3050      	adds	r0, #80	@ 0x50
 8025b66:	9113      	str	r1, [sp, #76]	@ 0x4c
 8025b68:	f7ff ff14 	bl	8025994 <__exponent>
 8025b6c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025b6e:	0004      	movs	r4, r0
 8025b70:	1813      	adds	r3, r2, r0
 8025b72:	612b      	str	r3, [r5, #16]
 8025b74:	2a01      	cmp	r2, #1
 8025b76:	dc02      	bgt.n	8025b7e <_printf_float+0x16a>
 8025b78:	682a      	ldr	r2, [r5, #0]
 8025b7a:	07d2      	lsls	r2, r2, #31
 8025b7c:	d501      	bpl.n	8025b82 <_printf_float+0x16e>
 8025b7e:	3301      	adds	r3, #1
 8025b80:	612b      	str	r3, [r5, #16]
 8025b82:	2323      	movs	r3, #35	@ 0x23
 8025b84:	aa0a      	add	r2, sp, #40	@ 0x28
 8025b86:	189b      	adds	r3, r3, r2
 8025b88:	781b      	ldrb	r3, [r3, #0]
 8025b8a:	2b00      	cmp	r3, #0
 8025b8c:	d100      	bne.n	8025b90 <_printf_float+0x17c>
 8025b8e:	e792      	b.n	8025ab6 <_printf_float+0xa2>
 8025b90:	002b      	movs	r3, r5
 8025b92:	222d      	movs	r2, #45	@ 0x2d
 8025b94:	3343      	adds	r3, #67	@ 0x43
 8025b96:	701a      	strb	r2, [r3, #0]
 8025b98:	e78d      	b.n	8025ab6 <_printf_float+0xa2>
 8025b9a:	2c47      	cmp	r4, #71	@ 0x47
 8025b9c:	d1b8      	bne.n	8025b10 <_printf_float+0xfc>
 8025b9e:	2b00      	cmp	r3, #0
 8025ba0:	d1b6      	bne.n	8025b10 <_printf_float+0xfc>
 8025ba2:	3301      	adds	r3, #1
 8025ba4:	e7b3      	b.n	8025b0e <_printf_float+0xfa>
 8025ba6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025ba8:	2b65      	cmp	r3, #101	@ 0x65
 8025baa:	d9d7      	bls.n	8025b5c <_printf_float+0x148>
 8025bac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025bae:	2b66      	cmp	r3, #102	@ 0x66
 8025bb0:	d11a      	bne.n	8025be8 <_printf_float+0x1d4>
 8025bb2:	686b      	ldr	r3, [r5, #4]
 8025bb4:	2a00      	cmp	r2, #0
 8025bb6:	dd09      	ble.n	8025bcc <_printf_float+0x1b8>
 8025bb8:	612a      	str	r2, [r5, #16]
 8025bba:	2b00      	cmp	r3, #0
 8025bbc:	d102      	bne.n	8025bc4 <_printf_float+0x1b0>
 8025bbe:	6829      	ldr	r1, [r5, #0]
 8025bc0:	07c9      	lsls	r1, r1, #31
 8025bc2:	d50b      	bpl.n	8025bdc <_printf_float+0x1c8>
 8025bc4:	3301      	adds	r3, #1
 8025bc6:	189b      	adds	r3, r3, r2
 8025bc8:	612b      	str	r3, [r5, #16]
 8025bca:	e007      	b.n	8025bdc <_printf_float+0x1c8>
 8025bcc:	2b00      	cmp	r3, #0
 8025bce:	d103      	bne.n	8025bd8 <_printf_float+0x1c4>
 8025bd0:	2201      	movs	r2, #1
 8025bd2:	6829      	ldr	r1, [r5, #0]
 8025bd4:	4211      	tst	r1, r2
 8025bd6:	d000      	beq.n	8025bda <_printf_float+0x1c6>
 8025bd8:	1c9a      	adds	r2, r3, #2
 8025bda:	612a      	str	r2, [r5, #16]
 8025bdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025bde:	2400      	movs	r4, #0
 8025be0:	65ab      	str	r3, [r5, #88]	@ 0x58
 8025be2:	e7ce      	b.n	8025b82 <_printf_float+0x16e>
 8025be4:	2367      	movs	r3, #103	@ 0x67
 8025be6:	930c      	str	r3, [sp, #48]	@ 0x30
 8025be8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8025bea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025bec:	4299      	cmp	r1, r3
 8025bee:	db06      	blt.n	8025bfe <_printf_float+0x1ea>
 8025bf0:	682b      	ldr	r3, [r5, #0]
 8025bf2:	6129      	str	r1, [r5, #16]
 8025bf4:	07db      	lsls	r3, r3, #31
 8025bf6:	d5f1      	bpl.n	8025bdc <_printf_float+0x1c8>
 8025bf8:	3101      	adds	r1, #1
 8025bfa:	6129      	str	r1, [r5, #16]
 8025bfc:	e7ee      	b.n	8025bdc <_printf_float+0x1c8>
 8025bfe:	2201      	movs	r2, #1
 8025c00:	2900      	cmp	r1, #0
 8025c02:	dce0      	bgt.n	8025bc6 <_printf_float+0x1b2>
 8025c04:	1892      	adds	r2, r2, r2
 8025c06:	1a52      	subs	r2, r2, r1
 8025c08:	e7dd      	b.n	8025bc6 <_printf_float+0x1b2>
 8025c0a:	682a      	ldr	r2, [r5, #0]
 8025c0c:	0553      	lsls	r3, r2, #21
 8025c0e:	d408      	bmi.n	8025c22 <_printf_float+0x20e>
 8025c10:	692b      	ldr	r3, [r5, #16]
 8025c12:	003a      	movs	r2, r7
 8025c14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c18:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025c1a:	47a0      	blx	r4
 8025c1c:	3001      	adds	r0, #1
 8025c1e:	d129      	bne.n	8025c74 <_printf_float+0x260>
 8025c20:	e754      	b.n	8025acc <_printf_float+0xb8>
 8025c22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c24:	2b65      	cmp	r3, #101	@ 0x65
 8025c26:	d800      	bhi.n	8025c2a <_printf_float+0x216>
 8025c28:	e0db      	b.n	8025de2 <_printf_float+0x3ce>
 8025c2a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025c2c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025c2e:	2200      	movs	r2, #0
 8025c30:	2300      	movs	r3, #0
 8025c32:	f7da fc3d 	bl	80004b0 <__aeabi_dcmpeq>
 8025c36:	2800      	cmp	r0, #0
 8025c38:	d033      	beq.n	8025ca2 <_printf_float+0x28e>
 8025c3a:	2301      	movs	r3, #1
 8025c3c:	4a37      	ldr	r2, [pc, #220]	@ (8025d1c <_printf_float+0x308>)
 8025c3e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c40:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c42:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025c44:	47a0      	blx	r4
 8025c46:	3001      	adds	r0, #1
 8025c48:	d100      	bne.n	8025c4c <_printf_float+0x238>
 8025c4a:	e73f      	b.n	8025acc <_printf_float+0xb8>
 8025c4c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025c4e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025c50:	42b3      	cmp	r3, r6
 8025c52:	db02      	blt.n	8025c5a <_printf_float+0x246>
 8025c54:	682b      	ldr	r3, [r5, #0]
 8025c56:	07db      	lsls	r3, r3, #31
 8025c58:	d50c      	bpl.n	8025c74 <_printf_float+0x260>
 8025c5a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025c5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025c5e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025c60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c64:	47a0      	blx	r4
 8025c66:	2400      	movs	r4, #0
 8025c68:	3001      	adds	r0, #1
 8025c6a:	d100      	bne.n	8025c6e <_printf_float+0x25a>
 8025c6c:	e72e      	b.n	8025acc <_printf_float+0xb8>
 8025c6e:	1e73      	subs	r3, r6, #1
 8025c70:	42a3      	cmp	r3, r4
 8025c72:	dc0a      	bgt.n	8025c8a <_printf_float+0x276>
 8025c74:	682b      	ldr	r3, [r5, #0]
 8025c76:	079b      	lsls	r3, r3, #30
 8025c78:	d500      	bpl.n	8025c7c <_printf_float+0x268>
 8025c7a:	e106      	b.n	8025e8a <_printf_float+0x476>
 8025c7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8025c7e:	68e8      	ldr	r0, [r5, #12]
 8025c80:	4298      	cmp	r0, r3
 8025c82:	db00      	blt.n	8025c86 <_printf_float+0x272>
 8025c84:	e724      	b.n	8025ad0 <_printf_float+0xbc>
 8025c86:	0018      	movs	r0, r3
 8025c88:	e722      	b.n	8025ad0 <_printf_float+0xbc>
 8025c8a:	002a      	movs	r2, r5
 8025c8c:	2301      	movs	r3, #1
 8025c8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025c90:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025c92:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025c94:	321a      	adds	r2, #26
 8025c96:	47b8      	blx	r7
 8025c98:	3001      	adds	r0, #1
 8025c9a:	d100      	bne.n	8025c9e <_printf_float+0x28a>
 8025c9c:	e716      	b.n	8025acc <_printf_float+0xb8>
 8025c9e:	3401      	adds	r4, #1
 8025ca0:	e7e5      	b.n	8025c6e <_printf_float+0x25a>
 8025ca2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025ca4:	2b00      	cmp	r3, #0
 8025ca6:	dc3b      	bgt.n	8025d20 <_printf_float+0x30c>
 8025ca8:	2301      	movs	r3, #1
 8025caa:	4a1c      	ldr	r2, [pc, #112]	@ (8025d1c <_printf_float+0x308>)
 8025cac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025cae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025cb0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025cb2:	47a0      	blx	r4
 8025cb4:	3001      	adds	r0, #1
 8025cb6:	d100      	bne.n	8025cba <_printf_float+0x2a6>
 8025cb8:	e708      	b.n	8025acc <_printf_float+0xb8>
 8025cba:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8025cbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025cbe:	4333      	orrs	r3, r6
 8025cc0:	d102      	bne.n	8025cc8 <_printf_float+0x2b4>
 8025cc2:	682b      	ldr	r3, [r5, #0]
 8025cc4:	07db      	lsls	r3, r3, #31
 8025cc6:	d5d5      	bpl.n	8025c74 <_printf_float+0x260>
 8025cc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025cca:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025ccc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025cce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025cd0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025cd2:	47a0      	blx	r4
 8025cd4:	2300      	movs	r3, #0
 8025cd6:	3001      	adds	r0, #1
 8025cd8:	d100      	bne.n	8025cdc <_printf_float+0x2c8>
 8025cda:	e6f7      	b.n	8025acc <_printf_float+0xb8>
 8025cdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8025cde:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025ce0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025ce2:	425b      	negs	r3, r3
 8025ce4:	4293      	cmp	r3, r2
 8025ce6:	dc01      	bgt.n	8025cec <_printf_float+0x2d8>
 8025ce8:	0033      	movs	r3, r6
 8025cea:	e792      	b.n	8025c12 <_printf_float+0x1fe>
 8025cec:	002a      	movs	r2, r5
 8025cee:	2301      	movs	r3, #1
 8025cf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025cf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025cf4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025cf6:	321a      	adds	r2, #26
 8025cf8:	47a0      	blx	r4
 8025cfa:	3001      	adds	r0, #1
 8025cfc:	d100      	bne.n	8025d00 <_printf_float+0x2ec>
 8025cfe:	e6e5      	b.n	8025acc <_printf_float+0xb8>
 8025d00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025d02:	3301      	adds	r3, #1
 8025d04:	e7ea      	b.n	8025cdc <_printf_float+0x2c8>
 8025d06:	46c0      	nop			@ (mov r8, r8)
 8025d08:	7fefffff 	.word	0x7fefffff
 8025d0c:	0802ef46 	.word	0x0802ef46
 8025d10:	0802ef42 	.word	0x0802ef42
 8025d14:	0802ef4e 	.word	0x0802ef4e
 8025d18:	0802ef4a 	.word	0x0802ef4a
 8025d1c:	0802ef52 	.word	0x0802ef52
 8025d20:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025d22:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025d24:	930c      	str	r3, [sp, #48]	@ 0x30
 8025d26:	429e      	cmp	r6, r3
 8025d28:	dd00      	ble.n	8025d2c <_printf_float+0x318>
 8025d2a:	001e      	movs	r6, r3
 8025d2c:	2e00      	cmp	r6, #0
 8025d2e:	dc31      	bgt.n	8025d94 <_printf_float+0x380>
 8025d30:	43f3      	mvns	r3, r6
 8025d32:	2400      	movs	r4, #0
 8025d34:	17db      	asrs	r3, r3, #31
 8025d36:	4033      	ands	r3, r6
 8025d38:	930e      	str	r3, [sp, #56]	@ 0x38
 8025d3a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8025d3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025d3e:	1af3      	subs	r3, r6, r3
 8025d40:	42a3      	cmp	r3, r4
 8025d42:	dc30      	bgt.n	8025da6 <_printf_float+0x392>
 8025d44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025d46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025d48:	429a      	cmp	r2, r3
 8025d4a:	dc38      	bgt.n	8025dbe <_printf_float+0x3aa>
 8025d4c:	682b      	ldr	r3, [r5, #0]
 8025d4e:	07db      	lsls	r3, r3, #31
 8025d50:	d435      	bmi.n	8025dbe <_printf_float+0x3aa>
 8025d52:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8025d54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025d56:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025d58:	1b9b      	subs	r3, r3, r6
 8025d5a:	1b14      	subs	r4, r2, r4
 8025d5c:	429c      	cmp	r4, r3
 8025d5e:	dd00      	ble.n	8025d62 <_printf_float+0x34e>
 8025d60:	001c      	movs	r4, r3
 8025d62:	2c00      	cmp	r4, #0
 8025d64:	dc34      	bgt.n	8025dd0 <_printf_float+0x3bc>
 8025d66:	43e3      	mvns	r3, r4
 8025d68:	2600      	movs	r6, #0
 8025d6a:	17db      	asrs	r3, r3, #31
 8025d6c:	401c      	ands	r4, r3
 8025d6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8025d70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025d72:	1ad3      	subs	r3, r2, r3
 8025d74:	1b1b      	subs	r3, r3, r4
 8025d76:	42b3      	cmp	r3, r6
 8025d78:	dc00      	bgt.n	8025d7c <_printf_float+0x368>
 8025d7a:	e77b      	b.n	8025c74 <_printf_float+0x260>
 8025d7c:	002a      	movs	r2, r5
 8025d7e:	2301      	movs	r3, #1
 8025d80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025d82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025d84:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025d86:	321a      	adds	r2, #26
 8025d88:	47b8      	blx	r7
 8025d8a:	3001      	adds	r0, #1
 8025d8c:	d100      	bne.n	8025d90 <_printf_float+0x37c>
 8025d8e:	e69d      	b.n	8025acc <_printf_float+0xb8>
 8025d90:	3601      	adds	r6, #1
 8025d92:	e7ec      	b.n	8025d6e <_printf_float+0x35a>
 8025d94:	0033      	movs	r3, r6
 8025d96:	003a      	movs	r2, r7
 8025d98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025d9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025d9c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025d9e:	47a0      	blx	r4
 8025da0:	3001      	adds	r0, #1
 8025da2:	d1c5      	bne.n	8025d30 <_printf_float+0x31c>
 8025da4:	e692      	b.n	8025acc <_printf_float+0xb8>
 8025da6:	002a      	movs	r2, r5
 8025da8:	2301      	movs	r3, #1
 8025daa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025dac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025dae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025db0:	321a      	adds	r2, #26
 8025db2:	47b0      	blx	r6
 8025db4:	3001      	adds	r0, #1
 8025db6:	d100      	bne.n	8025dba <_printf_float+0x3a6>
 8025db8:	e688      	b.n	8025acc <_printf_float+0xb8>
 8025dba:	3401      	adds	r4, #1
 8025dbc:	e7bd      	b.n	8025d3a <_printf_float+0x326>
 8025dbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025dc0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025dc2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025dc4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025dc6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025dc8:	47a0      	blx	r4
 8025dca:	3001      	adds	r0, #1
 8025dcc:	d1c1      	bne.n	8025d52 <_printf_float+0x33e>
 8025dce:	e67d      	b.n	8025acc <_printf_float+0xb8>
 8025dd0:	19ba      	adds	r2, r7, r6
 8025dd2:	0023      	movs	r3, r4
 8025dd4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025dd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025dd8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025dda:	47b0      	blx	r6
 8025ddc:	3001      	adds	r0, #1
 8025dde:	d1c2      	bne.n	8025d66 <_printf_float+0x352>
 8025de0:	e674      	b.n	8025acc <_printf_float+0xb8>
 8025de2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8025de4:	930c      	str	r3, [sp, #48]	@ 0x30
 8025de6:	2b01      	cmp	r3, #1
 8025de8:	dc02      	bgt.n	8025df0 <_printf_float+0x3dc>
 8025dea:	2301      	movs	r3, #1
 8025dec:	421a      	tst	r2, r3
 8025dee:	d039      	beq.n	8025e64 <_printf_float+0x450>
 8025df0:	2301      	movs	r3, #1
 8025df2:	003a      	movs	r2, r7
 8025df4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025df6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025df8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025dfa:	47b0      	blx	r6
 8025dfc:	3001      	adds	r0, #1
 8025dfe:	d100      	bne.n	8025e02 <_printf_float+0x3ee>
 8025e00:	e664      	b.n	8025acc <_printf_float+0xb8>
 8025e02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025e04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025e06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e08:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e0a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025e0c:	47b0      	blx	r6
 8025e0e:	3001      	adds	r0, #1
 8025e10:	d100      	bne.n	8025e14 <_printf_float+0x400>
 8025e12:	e65b      	b.n	8025acc <_printf_float+0xb8>
 8025e14:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8025e16:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8025e18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025e1a:	2200      	movs	r2, #0
 8025e1c:	3b01      	subs	r3, #1
 8025e1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8025e20:	2300      	movs	r3, #0
 8025e22:	f7da fb45 	bl	80004b0 <__aeabi_dcmpeq>
 8025e26:	2800      	cmp	r0, #0
 8025e28:	d11a      	bne.n	8025e60 <_printf_float+0x44c>
 8025e2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025e2c:	1c7a      	adds	r2, r7, #1
 8025e2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e32:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025e34:	47b0      	blx	r6
 8025e36:	3001      	adds	r0, #1
 8025e38:	d10e      	bne.n	8025e58 <_printf_float+0x444>
 8025e3a:	e647      	b.n	8025acc <_printf_float+0xb8>
 8025e3c:	002a      	movs	r2, r5
 8025e3e:	2301      	movs	r3, #1
 8025e40:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e44:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8025e46:	321a      	adds	r2, #26
 8025e48:	47b8      	blx	r7
 8025e4a:	3001      	adds	r0, #1
 8025e4c:	d100      	bne.n	8025e50 <_printf_float+0x43c>
 8025e4e:	e63d      	b.n	8025acc <_printf_float+0xb8>
 8025e50:	3601      	adds	r6, #1
 8025e52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025e54:	429e      	cmp	r6, r3
 8025e56:	dbf1      	blt.n	8025e3c <_printf_float+0x428>
 8025e58:	002a      	movs	r2, r5
 8025e5a:	0023      	movs	r3, r4
 8025e5c:	3250      	adds	r2, #80	@ 0x50
 8025e5e:	e6d9      	b.n	8025c14 <_printf_float+0x200>
 8025e60:	2600      	movs	r6, #0
 8025e62:	e7f6      	b.n	8025e52 <_printf_float+0x43e>
 8025e64:	003a      	movs	r2, r7
 8025e66:	e7e2      	b.n	8025e2e <_printf_float+0x41a>
 8025e68:	002a      	movs	r2, r5
 8025e6a:	2301      	movs	r3, #1
 8025e6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025e70:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8025e72:	3219      	adds	r2, #25
 8025e74:	47b0      	blx	r6
 8025e76:	3001      	adds	r0, #1
 8025e78:	d100      	bne.n	8025e7c <_printf_float+0x468>
 8025e7a:	e627      	b.n	8025acc <_printf_float+0xb8>
 8025e7c:	3401      	adds	r4, #1
 8025e7e:	68eb      	ldr	r3, [r5, #12]
 8025e80:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8025e82:	1a9b      	subs	r3, r3, r2
 8025e84:	42a3      	cmp	r3, r4
 8025e86:	dcef      	bgt.n	8025e68 <_printf_float+0x454>
 8025e88:	e6f8      	b.n	8025c7c <_printf_float+0x268>
 8025e8a:	2400      	movs	r4, #0
 8025e8c:	e7f7      	b.n	8025e7e <_printf_float+0x46a>
 8025e8e:	46c0      	nop			@ (mov r8, r8)

08025e90 <_printf_common>:
 8025e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025e92:	0016      	movs	r6, r2
 8025e94:	9301      	str	r3, [sp, #4]
 8025e96:	688a      	ldr	r2, [r1, #8]
 8025e98:	690b      	ldr	r3, [r1, #16]
 8025e9a:	000c      	movs	r4, r1
 8025e9c:	9000      	str	r0, [sp, #0]
 8025e9e:	4293      	cmp	r3, r2
 8025ea0:	da00      	bge.n	8025ea4 <_printf_common+0x14>
 8025ea2:	0013      	movs	r3, r2
 8025ea4:	0022      	movs	r2, r4
 8025ea6:	6033      	str	r3, [r6, #0]
 8025ea8:	3243      	adds	r2, #67	@ 0x43
 8025eaa:	7812      	ldrb	r2, [r2, #0]
 8025eac:	2a00      	cmp	r2, #0
 8025eae:	d001      	beq.n	8025eb4 <_printf_common+0x24>
 8025eb0:	3301      	adds	r3, #1
 8025eb2:	6033      	str	r3, [r6, #0]
 8025eb4:	6823      	ldr	r3, [r4, #0]
 8025eb6:	069b      	lsls	r3, r3, #26
 8025eb8:	d502      	bpl.n	8025ec0 <_printf_common+0x30>
 8025eba:	6833      	ldr	r3, [r6, #0]
 8025ebc:	3302      	adds	r3, #2
 8025ebe:	6033      	str	r3, [r6, #0]
 8025ec0:	6822      	ldr	r2, [r4, #0]
 8025ec2:	2306      	movs	r3, #6
 8025ec4:	0015      	movs	r5, r2
 8025ec6:	401d      	ands	r5, r3
 8025ec8:	421a      	tst	r2, r3
 8025eca:	d027      	beq.n	8025f1c <_printf_common+0x8c>
 8025ecc:	0023      	movs	r3, r4
 8025ece:	3343      	adds	r3, #67	@ 0x43
 8025ed0:	781b      	ldrb	r3, [r3, #0]
 8025ed2:	1e5a      	subs	r2, r3, #1
 8025ed4:	4193      	sbcs	r3, r2
 8025ed6:	6822      	ldr	r2, [r4, #0]
 8025ed8:	0692      	lsls	r2, r2, #26
 8025eda:	d430      	bmi.n	8025f3e <_printf_common+0xae>
 8025edc:	0022      	movs	r2, r4
 8025ede:	9901      	ldr	r1, [sp, #4]
 8025ee0:	9800      	ldr	r0, [sp, #0]
 8025ee2:	9d08      	ldr	r5, [sp, #32]
 8025ee4:	3243      	adds	r2, #67	@ 0x43
 8025ee6:	47a8      	blx	r5
 8025ee8:	3001      	adds	r0, #1
 8025eea:	d025      	beq.n	8025f38 <_printf_common+0xa8>
 8025eec:	2206      	movs	r2, #6
 8025eee:	6823      	ldr	r3, [r4, #0]
 8025ef0:	2500      	movs	r5, #0
 8025ef2:	4013      	ands	r3, r2
 8025ef4:	2b04      	cmp	r3, #4
 8025ef6:	d105      	bne.n	8025f04 <_printf_common+0x74>
 8025ef8:	6833      	ldr	r3, [r6, #0]
 8025efa:	68e5      	ldr	r5, [r4, #12]
 8025efc:	1aed      	subs	r5, r5, r3
 8025efe:	43eb      	mvns	r3, r5
 8025f00:	17db      	asrs	r3, r3, #31
 8025f02:	401d      	ands	r5, r3
 8025f04:	68a3      	ldr	r3, [r4, #8]
 8025f06:	6922      	ldr	r2, [r4, #16]
 8025f08:	4293      	cmp	r3, r2
 8025f0a:	dd01      	ble.n	8025f10 <_printf_common+0x80>
 8025f0c:	1a9b      	subs	r3, r3, r2
 8025f0e:	18ed      	adds	r5, r5, r3
 8025f10:	2600      	movs	r6, #0
 8025f12:	42b5      	cmp	r5, r6
 8025f14:	d120      	bne.n	8025f58 <_printf_common+0xc8>
 8025f16:	2000      	movs	r0, #0
 8025f18:	e010      	b.n	8025f3c <_printf_common+0xac>
 8025f1a:	3501      	adds	r5, #1
 8025f1c:	68e3      	ldr	r3, [r4, #12]
 8025f1e:	6832      	ldr	r2, [r6, #0]
 8025f20:	1a9b      	subs	r3, r3, r2
 8025f22:	42ab      	cmp	r3, r5
 8025f24:	ddd2      	ble.n	8025ecc <_printf_common+0x3c>
 8025f26:	0022      	movs	r2, r4
 8025f28:	2301      	movs	r3, #1
 8025f2a:	9901      	ldr	r1, [sp, #4]
 8025f2c:	9800      	ldr	r0, [sp, #0]
 8025f2e:	9f08      	ldr	r7, [sp, #32]
 8025f30:	3219      	adds	r2, #25
 8025f32:	47b8      	blx	r7
 8025f34:	3001      	adds	r0, #1
 8025f36:	d1f0      	bne.n	8025f1a <_printf_common+0x8a>
 8025f38:	2001      	movs	r0, #1
 8025f3a:	4240      	negs	r0, r0
 8025f3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8025f3e:	2030      	movs	r0, #48	@ 0x30
 8025f40:	18e1      	adds	r1, r4, r3
 8025f42:	3143      	adds	r1, #67	@ 0x43
 8025f44:	7008      	strb	r0, [r1, #0]
 8025f46:	0021      	movs	r1, r4
 8025f48:	1c5a      	adds	r2, r3, #1
 8025f4a:	3145      	adds	r1, #69	@ 0x45
 8025f4c:	7809      	ldrb	r1, [r1, #0]
 8025f4e:	18a2      	adds	r2, r4, r2
 8025f50:	3243      	adds	r2, #67	@ 0x43
 8025f52:	3302      	adds	r3, #2
 8025f54:	7011      	strb	r1, [r2, #0]
 8025f56:	e7c1      	b.n	8025edc <_printf_common+0x4c>
 8025f58:	0022      	movs	r2, r4
 8025f5a:	2301      	movs	r3, #1
 8025f5c:	9901      	ldr	r1, [sp, #4]
 8025f5e:	9800      	ldr	r0, [sp, #0]
 8025f60:	9f08      	ldr	r7, [sp, #32]
 8025f62:	321a      	adds	r2, #26
 8025f64:	47b8      	blx	r7
 8025f66:	3001      	adds	r0, #1
 8025f68:	d0e6      	beq.n	8025f38 <_printf_common+0xa8>
 8025f6a:	3601      	adds	r6, #1
 8025f6c:	e7d1      	b.n	8025f12 <_printf_common+0x82>
	...

08025f70 <_printf_i>:
 8025f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025f72:	b08b      	sub	sp, #44	@ 0x2c
 8025f74:	9206      	str	r2, [sp, #24]
 8025f76:	000a      	movs	r2, r1
 8025f78:	3243      	adds	r2, #67	@ 0x43
 8025f7a:	9307      	str	r3, [sp, #28]
 8025f7c:	9005      	str	r0, [sp, #20]
 8025f7e:	9203      	str	r2, [sp, #12]
 8025f80:	7e0a      	ldrb	r2, [r1, #24]
 8025f82:	000c      	movs	r4, r1
 8025f84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025f86:	2a78      	cmp	r2, #120	@ 0x78
 8025f88:	d809      	bhi.n	8025f9e <_printf_i+0x2e>
 8025f8a:	2a62      	cmp	r2, #98	@ 0x62
 8025f8c:	d80b      	bhi.n	8025fa6 <_printf_i+0x36>
 8025f8e:	2a00      	cmp	r2, #0
 8025f90:	d100      	bne.n	8025f94 <_printf_i+0x24>
 8025f92:	e0ba      	b.n	802610a <_printf_i+0x19a>
 8025f94:	497a      	ldr	r1, [pc, #488]	@ (8026180 <_printf_i+0x210>)
 8025f96:	9104      	str	r1, [sp, #16]
 8025f98:	2a58      	cmp	r2, #88	@ 0x58
 8025f9a:	d100      	bne.n	8025f9e <_printf_i+0x2e>
 8025f9c:	e08e      	b.n	80260bc <_printf_i+0x14c>
 8025f9e:	0025      	movs	r5, r4
 8025fa0:	3542      	adds	r5, #66	@ 0x42
 8025fa2:	702a      	strb	r2, [r5, #0]
 8025fa4:	e022      	b.n	8025fec <_printf_i+0x7c>
 8025fa6:	0010      	movs	r0, r2
 8025fa8:	3863      	subs	r0, #99	@ 0x63
 8025faa:	2815      	cmp	r0, #21
 8025fac:	d8f7      	bhi.n	8025f9e <_printf_i+0x2e>
 8025fae:	f7da f8ef 	bl	8000190 <__gnu_thumb1_case_shi>
 8025fb2:	0016      	.short	0x0016
 8025fb4:	fff6001f 	.word	0xfff6001f
 8025fb8:	fff6fff6 	.word	0xfff6fff6
 8025fbc:	001ffff6 	.word	0x001ffff6
 8025fc0:	fff6fff6 	.word	0xfff6fff6
 8025fc4:	fff6fff6 	.word	0xfff6fff6
 8025fc8:	0036009f 	.word	0x0036009f
 8025fcc:	fff6007e 	.word	0xfff6007e
 8025fd0:	00b0fff6 	.word	0x00b0fff6
 8025fd4:	0036fff6 	.word	0x0036fff6
 8025fd8:	fff6fff6 	.word	0xfff6fff6
 8025fdc:	0082      	.short	0x0082
 8025fde:	0025      	movs	r5, r4
 8025fe0:	681a      	ldr	r2, [r3, #0]
 8025fe2:	3542      	adds	r5, #66	@ 0x42
 8025fe4:	1d11      	adds	r1, r2, #4
 8025fe6:	6019      	str	r1, [r3, #0]
 8025fe8:	6813      	ldr	r3, [r2, #0]
 8025fea:	702b      	strb	r3, [r5, #0]
 8025fec:	2301      	movs	r3, #1
 8025fee:	e09e      	b.n	802612e <_printf_i+0x1be>
 8025ff0:	6818      	ldr	r0, [r3, #0]
 8025ff2:	6809      	ldr	r1, [r1, #0]
 8025ff4:	1d02      	adds	r2, r0, #4
 8025ff6:	060d      	lsls	r5, r1, #24
 8025ff8:	d50b      	bpl.n	8026012 <_printf_i+0xa2>
 8025ffa:	6806      	ldr	r6, [r0, #0]
 8025ffc:	601a      	str	r2, [r3, #0]
 8025ffe:	2e00      	cmp	r6, #0
 8026000:	da03      	bge.n	802600a <_printf_i+0x9a>
 8026002:	232d      	movs	r3, #45	@ 0x2d
 8026004:	9a03      	ldr	r2, [sp, #12]
 8026006:	4276      	negs	r6, r6
 8026008:	7013      	strb	r3, [r2, #0]
 802600a:	4b5d      	ldr	r3, [pc, #372]	@ (8026180 <_printf_i+0x210>)
 802600c:	270a      	movs	r7, #10
 802600e:	9304      	str	r3, [sp, #16]
 8026010:	e018      	b.n	8026044 <_printf_i+0xd4>
 8026012:	6806      	ldr	r6, [r0, #0]
 8026014:	601a      	str	r2, [r3, #0]
 8026016:	0649      	lsls	r1, r1, #25
 8026018:	d5f1      	bpl.n	8025ffe <_printf_i+0x8e>
 802601a:	b236      	sxth	r6, r6
 802601c:	e7ef      	b.n	8025ffe <_printf_i+0x8e>
 802601e:	6808      	ldr	r0, [r1, #0]
 8026020:	6819      	ldr	r1, [r3, #0]
 8026022:	c940      	ldmia	r1!, {r6}
 8026024:	0605      	lsls	r5, r0, #24
 8026026:	d402      	bmi.n	802602e <_printf_i+0xbe>
 8026028:	0640      	lsls	r0, r0, #25
 802602a:	d500      	bpl.n	802602e <_printf_i+0xbe>
 802602c:	b2b6      	uxth	r6, r6
 802602e:	6019      	str	r1, [r3, #0]
 8026030:	4b53      	ldr	r3, [pc, #332]	@ (8026180 <_printf_i+0x210>)
 8026032:	270a      	movs	r7, #10
 8026034:	9304      	str	r3, [sp, #16]
 8026036:	2a6f      	cmp	r2, #111	@ 0x6f
 8026038:	d100      	bne.n	802603c <_printf_i+0xcc>
 802603a:	3f02      	subs	r7, #2
 802603c:	0023      	movs	r3, r4
 802603e:	2200      	movs	r2, #0
 8026040:	3343      	adds	r3, #67	@ 0x43
 8026042:	701a      	strb	r2, [r3, #0]
 8026044:	6863      	ldr	r3, [r4, #4]
 8026046:	60a3      	str	r3, [r4, #8]
 8026048:	2b00      	cmp	r3, #0
 802604a:	db06      	blt.n	802605a <_printf_i+0xea>
 802604c:	2104      	movs	r1, #4
 802604e:	6822      	ldr	r2, [r4, #0]
 8026050:	9d03      	ldr	r5, [sp, #12]
 8026052:	438a      	bics	r2, r1
 8026054:	6022      	str	r2, [r4, #0]
 8026056:	4333      	orrs	r3, r6
 8026058:	d00c      	beq.n	8026074 <_printf_i+0x104>
 802605a:	9d03      	ldr	r5, [sp, #12]
 802605c:	0030      	movs	r0, r6
 802605e:	0039      	movs	r1, r7
 8026060:	f7da f926 	bl	80002b0 <__aeabi_uidivmod>
 8026064:	9b04      	ldr	r3, [sp, #16]
 8026066:	3d01      	subs	r5, #1
 8026068:	5c5b      	ldrb	r3, [r3, r1]
 802606a:	702b      	strb	r3, [r5, #0]
 802606c:	0033      	movs	r3, r6
 802606e:	0006      	movs	r6, r0
 8026070:	429f      	cmp	r7, r3
 8026072:	d9f3      	bls.n	802605c <_printf_i+0xec>
 8026074:	2f08      	cmp	r7, #8
 8026076:	d109      	bne.n	802608c <_printf_i+0x11c>
 8026078:	6823      	ldr	r3, [r4, #0]
 802607a:	07db      	lsls	r3, r3, #31
 802607c:	d506      	bpl.n	802608c <_printf_i+0x11c>
 802607e:	6862      	ldr	r2, [r4, #4]
 8026080:	6923      	ldr	r3, [r4, #16]
 8026082:	429a      	cmp	r2, r3
 8026084:	dc02      	bgt.n	802608c <_printf_i+0x11c>
 8026086:	2330      	movs	r3, #48	@ 0x30
 8026088:	3d01      	subs	r5, #1
 802608a:	702b      	strb	r3, [r5, #0]
 802608c:	9b03      	ldr	r3, [sp, #12]
 802608e:	1b5b      	subs	r3, r3, r5
 8026090:	6123      	str	r3, [r4, #16]
 8026092:	9b07      	ldr	r3, [sp, #28]
 8026094:	0021      	movs	r1, r4
 8026096:	9300      	str	r3, [sp, #0]
 8026098:	9805      	ldr	r0, [sp, #20]
 802609a:	9b06      	ldr	r3, [sp, #24]
 802609c:	aa09      	add	r2, sp, #36	@ 0x24
 802609e:	f7ff fef7 	bl	8025e90 <_printf_common>
 80260a2:	3001      	adds	r0, #1
 80260a4:	d148      	bne.n	8026138 <_printf_i+0x1c8>
 80260a6:	2001      	movs	r0, #1
 80260a8:	4240      	negs	r0, r0
 80260aa:	b00b      	add	sp, #44	@ 0x2c
 80260ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80260ae:	2220      	movs	r2, #32
 80260b0:	6809      	ldr	r1, [r1, #0]
 80260b2:	430a      	orrs	r2, r1
 80260b4:	6022      	str	r2, [r4, #0]
 80260b6:	2278      	movs	r2, #120	@ 0x78
 80260b8:	4932      	ldr	r1, [pc, #200]	@ (8026184 <_printf_i+0x214>)
 80260ba:	9104      	str	r1, [sp, #16]
 80260bc:	0021      	movs	r1, r4
 80260be:	3145      	adds	r1, #69	@ 0x45
 80260c0:	700a      	strb	r2, [r1, #0]
 80260c2:	6819      	ldr	r1, [r3, #0]
 80260c4:	6822      	ldr	r2, [r4, #0]
 80260c6:	c940      	ldmia	r1!, {r6}
 80260c8:	0610      	lsls	r0, r2, #24
 80260ca:	d402      	bmi.n	80260d2 <_printf_i+0x162>
 80260cc:	0650      	lsls	r0, r2, #25
 80260ce:	d500      	bpl.n	80260d2 <_printf_i+0x162>
 80260d0:	b2b6      	uxth	r6, r6
 80260d2:	6019      	str	r1, [r3, #0]
 80260d4:	07d3      	lsls	r3, r2, #31
 80260d6:	d502      	bpl.n	80260de <_printf_i+0x16e>
 80260d8:	2320      	movs	r3, #32
 80260da:	4313      	orrs	r3, r2
 80260dc:	6023      	str	r3, [r4, #0]
 80260de:	2e00      	cmp	r6, #0
 80260e0:	d001      	beq.n	80260e6 <_printf_i+0x176>
 80260e2:	2710      	movs	r7, #16
 80260e4:	e7aa      	b.n	802603c <_printf_i+0xcc>
 80260e6:	2220      	movs	r2, #32
 80260e8:	6823      	ldr	r3, [r4, #0]
 80260ea:	4393      	bics	r3, r2
 80260ec:	6023      	str	r3, [r4, #0]
 80260ee:	e7f8      	b.n	80260e2 <_printf_i+0x172>
 80260f0:	681a      	ldr	r2, [r3, #0]
 80260f2:	680d      	ldr	r5, [r1, #0]
 80260f4:	1d10      	adds	r0, r2, #4
 80260f6:	6949      	ldr	r1, [r1, #20]
 80260f8:	6018      	str	r0, [r3, #0]
 80260fa:	6813      	ldr	r3, [r2, #0]
 80260fc:	062e      	lsls	r6, r5, #24
 80260fe:	d501      	bpl.n	8026104 <_printf_i+0x194>
 8026100:	6019      	str	r1, [r3, #0]
 8026102:	e002      	b.n	802610a <_printf_i+0x19a>
 8026104:	066d      	lsls	r5, r5, #25
 8026106:	d5fb      	bpl.n	8026100 <_printf_i+0x190>
 8026108:	8019      	strh	r1, [r3, #0]
 802610a:	2300      	movs	r3, #0
 802610c:	9d03      	ldr	r5, [sp, #12]
 802610e:	6123      	str	r3, [r4, #16]
 8026110:	e7bf      	b.n	8026092 <_printf_i+0x122>
 8026112:	681a      	ldr	r2, [r3, #0]
 8026114:	1d11      	adds	r1, r2, #4
 8026116:	6019      	str	r1, [r3, #0]
 8026118:	6815      	ldr	r5, [r2, #0]
 802611a:	2100      	movs	r1, #0
 802611c:	0028      	movs	r0, r5
 802611e:	6862      	ldr	r2, [r4, #4]
 8026120:	f000 fba1 	bl	8026866 <memchr>
 8026124:	2800      	cmp	r0, #0
 8026126:	d001      	beq.n	802612c <_printf_i+0x1bc>
 8026128:	1b40      	subs	r0, r0, r5
 802612a:	6060      	str	r0, [r4, #4]
 802612c:	6863      	ldr	r3, [r4, #4]
 802612e:	6123      	str	r3, [r4, #16]
 8026130:	2300      	movs	r3, #0
 8026132:	9a03      	ldr	r2, [sp, #12]
 8026134:	7013      	strb	r3, [r2, #0]
 8026136:	e7ac      	b.n	8026092 <_printf_i+0x122>
 8026138:	002a      	movs	r2, r5
 802613a:	6923      	ldr	r3, [r4, #16]
 802613c:	9906      	ldr	r1, [sp, #24]
 802613e:	9805      	ldr	r0, [sp, #20]
 8026140:	9d07      	ldr	r5, [sp, #28]
 8026142:	47a8      	blx	r5
 8026144:	3001      	adds	r0, #1
 8026146:	d0ae      	beq.n	80260a6 <_printf_i+0x136>
 8026148:	6823      	ldr	r3, [r4, #0]
 802614a:	079b      	lsls	r3, r3, #30
 802614c:	d415      	bmi.n	802617a <_printf_i+0x20a>
 802614e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026150:	68e0      	ldr	r0, [r4, #12]
 8026152:	4298      	cmp	r0, r3
 8026154:	daa9      	bge.n	80260aa <_printf_i+0x13a>
 8026156:	0018      	movs	r0, r3
 8026158:	e7a7      	b.n	80260aa <_printf_i+0x13a>
 802615a:	0022      	movs	r2, r4
 802615c:	2301      	movs	r3, #1
 802615e:	9906      	ldr	r1, [sp, #24]
 8026160:	9805      	ldr	r0, [sp, #20]
 8026162:	9e07      	ldr	r6, [sp, #28]
 8026164:	3219      	adds	r2, #25
 8026166:	47b0      	blx	r6
 8026168:	3001      	adds	r0, #1
 802616a:	d09c      	beq.n	80260a6 <_printf_i+0x136>
 802616c:	3501      	adds	r5, #1
 802616e:	68e3      	ldr	r3, [r4, #12]
 8026170:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026172:	1a9b      	subs	r3, r3, r2
 8026174:	42ab      	cmp	r3, r5
 8026176:	dcf0      	bgt.n	802615a <_printf_i+0x1ea>
 8026178:	e7e9      	b.n	802614e <_printf_i+0x1de>
 802617a:	2500      	movs	r5, #0
 802617c:	e7f7      	b.n	802616e <_printf_i+0x1fe>
 802617e:	46c0      	nop			@ (mov r8, r8)
 8026180:	0802ef54 	.word	0x0802ef54
 8026184:	0802ef65 	.word	0x0802ef65

08026188 <std>:
 8026188:	2300      	movs	r3, #0
 802618a:	b510      	push	{r4, lr}
 802618c:	0004      	movs	r4, r0
 802618e:	6003      	str	r3, [r0, #0]
 8026190:	6043      	str	r3, [r0, #4]
 8026192:	6083      	str	r3, [r0, #8]
 8026194:	8181      	strh	r1, [r0, #12]
 8026196:	6643      	str	r3, [r0, #100]	@ 0x64
 8026198:	81c2      	strh	r2, [r0, #14]
 802619a:	6103      	str	r3, [r0, #16]
 802619c:	6143      	str	r3, [r0, #20]
 802619e:	6183      	str	r3, [r0, #24]
 80261a0:	0019      	movs	r1, r3
 80261a2:	2208      	movs	r2, #8
 80261a4:	305c      	adds	r0, #92	@ 0x5c
 80261a6:	f000 fa8d 	bl	80266c4 <memset>
 80261aa:	4b0b      	ldr	r3, [pc, #44]	@ (80261d8 <std+0x50>)
 80261ac:	6224      	str	r4, [r4, #32]
 80261ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80261b0:	4b0a      	ldr	r3, [pc, #40]	@ (80261dc <std+0x54>)
 80261b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80261b4:	4b0a      	ldr	r3, [pc, #40]	@ (80261e0 <std+0x58>)
 80261b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80261b8:	4b0a      	ldr	r3, [pc, #40]	@ (80261e4 <std+0x5c>)
 80261ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80261bc:	4b0a      	ldr	r3, [pc, #40]	@ (80261e8 <std+0x60>)
 80261be:	429c      	cmp	r4, r3
 80261c0:	d005      	beq.n	80261ce <std+0x46>
 80261c2:	4b0a      	ldr	r3, [pc, #40]	@ (80261ec <std+0x64>)
 80261c4:	429c      	cmp	r4, r3
 80261c6:	d002      	beq.n	80261ce <std+0x46>
 80261c8:	4b09      	ldr	r3, [pc, #36]	@ (80261f0 <std+0x68>)
 80261ca:	429c      	cmp	r4, r3
 80261cc:	d103      	bne.n	80261d6 <std+0x4e>
 80261ce:	0020      	movs	r0, r4
 80261d0:	3058      	adds	r0, #88	@ 0x58
 80261d2:	f000 fb45 	bl	8026860 <__retarget_lock_init_recursive>
 80261d6:	bd10      	pop	{r4, pc}
 80261d8:	08026435 	.word	0x08026435
 80261dc:	0802645d 	.word	0x0802645d
 80261e0:	08026495 	.word	0x08026495
 80261e4:	080264c1 	.word	0x080264c1
 80261e8:	20003780 	.word	0x20003780
 80261ec:	200037e8 	.word	0x200037e8
 80261f0:	20003850 	.word	0x20003850

080261f4 <stdio_exit_handler>:
 80261f4:	b510      	push	{r4, lr}
 80261f6:	4a03      	ldr	r2, [pc, #12]	@ (8026204 <stdio_exit_handler+0x10>)
 80261f8:	4903      	ldr	r1, [pc, #12]	@ (8026208 <stdio_exit_handler+0x14>)
 80261fa:	4804      	ldr	r0, [pc, #16]	@ (802620c <stdio_exit_handler+0x18>)
 80261fc:	f000 f86c 	bl	80262d8 <_fwalk_sglue>
 8026200:	bd10      	pop	{r4, pc}
 8026202:	46c0      	nop			@ (mov r8, r8)
 8026204:	20000274 	.word	0x20000274
 8026208:	08028e5d 	.word	0x08028e5d
 802620c:	200003f0 	.word	0x200003f0

08026210 <cleanup_stdio>:
 8026210:	6841      	ldr	r1, [r0, #4]
 8026212:	4b0b      	ldr	r3, [pc, #44]	@ (8026240 <cleanup_stdio+0x30>)
 8026214:	b510      	push	{r4, lr}
 8026216:	0004      	movs	r4, r0
 8026218:	4299      	cmp	r1, r3
 802621a:	d001      	beq.n	8026220 <cleanup_stdio+0x10>
 802621c:	f002 fe1e 	bl	8028e5c <_fflush_r>
 8026220:	68a1      	ldr	r1, [r4, #8]
 8026222:	4b08      	ldr	r3, [pc, #32]	@ (8026244 <cleanup_stdio+0x34>)
 8026224:	4299      	cmp	r1, r3
 8026226:	d002      	beq.n	802622e <cleanup_stdio+0x1e>
 8026228:	0020      	movs	r0, r4
 802622a:	f002 fe17 	bl	8028e5c <_fflush_r>
 802622e:	68e1      	ldr	r1, [r4, #12]
 8026230:	4b05      	ldr	r3, [pc, #20]	@ (8026248 <cleanup_stdio+0x38>)
 8026232:	4299      	cmp	r1, r3
 8026234:	d002      	beq.n	802623c <cleanup_stdio+0x2c>
 8026236:	0020      	movs	r0, r4
 8026238:	f002 fe10 	bl	8028e5c <_fflush_r>
 802623c:	bd10      	pop	{r4, pc}
 802623e:	46c0      	nop			@ (mov r8, r8)
 8026240:	20003780 	.word	0x20003780
 8026244:	200037e8 	.word	0x200037e8
 8026248:	20003850 	.word	0x20003850

0802624c <global_stdio_init.part.0>:
 802624c:	b510      	push	{r4, lr}
 802624e:	4b09      	ldr	r3, [pc, #36]	@ (8026274 <global_stdio_init.part.0+0x28>)
 8026250:	4a09      	ldr	r2, [pc, #36]	@ (8026278 <global_stdio_init.part.0+0x2c>)
 8026252:	2104      	movs	r1, #4
 8026254:	601a      	str	r2, [r3, #0]
 8026256:	4809      	ldr	r0, [pc, #36]	@ (802627c <global_stdio_init.part.0+0x30>)
 8026258:	2200      	movs	r2, #0
 802625a:	f7ff ff95 	bl	8026188 <std>
 802625e:	2201      	movs	r2, #1
 8026260:	2109      	movs	r1, #9
 8026262:	4807      	ldr	r0, [pc, #28]	@ (8026280 <global_stdio_init.part.0+0x34>)
 8026264:	f7ff ff90 	bl	8026188 <std>
 8026268:	2202      	movs	r2, #2
 802626a:	2112      	movs	r1, #18
 802626c:	4805      	ldr	r0, [pc, #20]	@ (8026284 <global_stdio_init.part.0+0x38>)
 802626e:	f7ff ff8b 	bl	8026188 <std>
 8026272:	bd10      	pop	{r4, pc}
 8026274:	200038b8 	.word	0x200038b8
 8026278:	080261f5 	.word	0x080261f5
 802627c:	20003780 	.word	0x20003780
 8026280:	200037e8 	.word	0x200037e8
 8026284:	20003850 	.word	0x20003850

08026288 <__sfp_lock_acquire>:
 8026288:	b510      	push	{r4, lr}
 802628a:	4802      	ldr	r0, [pc, #8]	@ (8026294 <__sfp_lock_acquire+0xc>)
 802628c:	f000 fae9 	bl	8026862 <__retarget_lock_acquire_recursive>
 8026290:	bd10      	pop	{r4, pc}
 8026292:	46c0      	nop			@ (mov r8, r8)
 8026294:	200038c1 	.word	0x200038c1

08026298 <__sfp_lock_release>:
 8026298:	b510      	push	{r4, lr}
 802629a:	4802      	ldr	r0, [pc, #8]	@ (80262a4 <__sfp_lock_release+0xc>)
 802629c:	f000 fae2 	bl	8026864 <__retarget_lock_release_recursive>
 80262a0:	bd10      	pop	{r4, pc}
 80262a2:	46c0      	nop			@ (mov r8, r8)
 80262a4:	200038c1 	.word	0x200038c1

080262a8 <__sinit>:
 80262a8:	b510      	push	{r4, lr}
 80262aa:	0004      	movs	r4, r0
 80262ac:	f7ff ffec 	bl	8026288 <__sfp_lock_acquire>
 80262b0:	6a23      	ldr	r3, [r4, #32]
 80262b2:	2b00      	cmp	r3, #0
 80262b4:	d002      	beq.n	80262bc <__sinit+0x14>
 80262b6:	f7ff ffef 	bl	8026298 <__sfp_lock_release>
 80262ba:	bd10      	pop	{r4, pc}
 80262bc:	4b04      	ldr	r3, [pc, #16]	@ (80262d0 <__sinit+0x28>)
 80262be:	6223      	str	r3, [r4, #32]
 80262c0:	4b04      	ldr	r3, [pc, #16]	@ (80262d4 <__sinit+0x2c>)
 80262c2:	681b      	ldr	r3, [r3, #0]
 80262c4:	2b00      	cmp	r3, #0
 80262c6:	d1f6      	bne.n	80262b6 <__sinit+0xe>
 80262c8:	f7ff ffc0 	bl	802624c <global_stdio_init.part.0>
 80262cc:	e7f3      	b.n	80262b6 <__sinit+0xe>
 80262ce:	46c0      	nop			@ (mov r8, r8)
 80262d0:	08026211 	.word	0x08026211
 80262d4:	200038b8 	.word	0x200038b8

080262d8 <_fwalk_sglue>:
 80262d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80262da:	0014      	movs	r4, r2
 80262dc:	2600      	movs	r6, #0
 80262de:	9000      	str	r0, [sp, #0]
 80262e0:	9101      	str	r1, [sp, #4]
 80262e2:	68a5      	ldr	r5, [r4, #8]
 80262e4:	6867      	ldr	r7, [r4, #4]
 80262e6:	3f01      	subs	r7, #1
 80262e8:	d504      	bpl.n	80262f4 <_fwalk_sglue+0x1c>
 80262ea:	6824      	ldr	r4, [r4, #0]
 80262ec:	2c00      	cmp	r4, #0
 80262ee:	d1f8      	bne.n	80262e2 <_fwalk_sglue+0xa>
 80262f0:	0030      	movs	r0, r6
 80262f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80262f4:	89ab      	ldrh	r3, [r5, #12]
 80262f6:	2b01      	cmp	r3, #1
 80262f8:	d908      	bls.n	802630c <_fwalk_sglue+0x34>
 80262fa:	220e      	movs	r2, #14
 80262fc:	5eab      	ldrsh	r3, [r5, r2]
 80262fe:	3301      	adds	r3, #1
 8026300:	d004      	beq.n	802630c <_fwalk_sglue+0x34>
 8026302:	0029      	movs	r1, r5
 8026304:	9800      	ldr	r0, [sp, #0]
 8026306:	9b01      	ldr	r3, [sp, #4]
 8026308:	4798      	blx	r3
 802630a:	4306      	orrs	r6, r0
 802630c:	3568      	adds	r5, #104	@ 0x68
 802630e:	e7ea      	b.n	80262e6 <_fwalk_sglue+0xe>

08026310 <iprintf>:
 8026310:	b40f      	push	{r0, r1, r2, r3}
 8026312:	b507      	push	{r0, r1, r2, lr}
 8026314:	4905      	ldr	r1, [pc, #20]	@ (802632c <iprintf+0x1c>)
 8026316:	ab04      	add	r3, sp, #16
 8026318:	6808      	ldr	r0, [r1, #0]
 802631a:	cb04      	ldmia	r3!, {r2}
 802631c:	6881      	ldr	r1, [r0, #8]
 802631e:	9301      	str	r3, [sp, #4]
 8026320:	f002 fbfa 	bl	8028b18 <_vfiprintf_r>
 8026324:	b003      	add	sp, #12
 8026326:	bc08      	pop	{r3}
 8026328:	b004      	add	sp, #16
 802632a:	4718      	bx	r3
 802632c:	200003ec 	.word	0x200003ec

08026330 <_puts_r>:
 8026330:	6a03      	ldr	r3, [r0, #32]
 8026332:	b570      	push	{r4, r5, r6, lr}
 8026334:	0005      	movs	r5, r0
 8026336:	000e      	movs	r6, r1
 8026338:	6884      	ldr	r4, [r0, #8]
 802633a:	2b00      	cmp	r3, #0
 802633c:	d101      	bne.n	8026342 <_puts_r+0x12>
 802633e:	f7ff ffb3 	bl	80262a8 <__sinit>
 8026342:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026344:	07db      	lsls	r3, r3, #31
 8026346:	d405      	bmi.n	8026354 <_puts_r+0x24>
 8026348:	89a3      	ldrh	r3, [r4, #12]
 802634a:	059b      	lsls	r3, r3, #22
 802634c:	d402      	bmi.n	8026354 <_puts_r+0x24>
 802634e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026350:	f000 fa87 	bl	8026862 <__retarget_lock_acquire_recursive>
 8026354:	89a3      	ldrh	r3, [r4, #12]
 8026356:	071b      	lsls	r3, r3, #28
 8026358:	d502      	bpl.n	8026360 <_puts_r+0x30>
 802635a:	6923      	ldr	r3, [r4, #16]
 802635c:	2b00      	cmp	r3, #0
 802635e:	d11f      	bne.n	80263a0 <_puts_r+0x70>
 8026360:	0021      	movs	r1, r4
 8026362:	0028      	movs	r0, r5
 8026364:	f000 f950 	bl	8026608 <__swsetup_r>
 8026368:	2800      	cmp	r0, #0
 802636a:	d019      	beq.n	80263a0 <_puts_r+0x70>
 802636c:	2501      	movs	r5, #1
 802636e:	426d      	negs	r5, r5
 8026370:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026372:	07db      	lsls	r3, r3, #31
 8026374:	d405      	bmi.n	8026382 <_puts_r+0x52>
 8026376:	89a3      	ldrh	r3, [r4, #12]
 8026378:	059b      	lsls	r3, r3, #22
 802637a:	d402      	bmi.n	8026382 <_puts_r+0x52>
 802637c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802637e:	f000 fa71 	bl	8026864 <__retarget_lock_release_recursive>
 8026382:	0028      	movs	r0, r5
 8026384:	bd70      	pop	{r4, r5, r6, pc}
 8026386:	3601      	adds	r6, #1
 8026388:	60a3      	str	r3, [r4, #8]
 802638a:	2b00      	cmp	r3, #0
 802638c:	da04      	bge.n	8026398 <_puts_r+0x68>
 802638e:	69a2      	ldr	r2, [r4, #24]
 8026390:	429a      	cmp	r2, r3
 8026392:	dc16      	bgt.n	80263c2 <_puts_r+0x92>
 8026394:	290a      	cmp	r1, #10
 8026396:	d014      	beq.n	80263c2 <_puts_r+0x92>
 8026398:	6823      	ldr	r3, [r4, #0]
 802639a:	1c5a      	adds	r2, r3, #1
 802639c:	6022      	str	r2, [r4, #0]
 802639e:	7019      	strb	r1, [r3, #0]
 80263a0:	68a3      	ldr	r3, [r4, #8]
 80263a2:	7831      	ldrb	r1, [r6, #0]
 80263a4:	3b01      	subs	r3, #1
 80263a6:	2900      	cmp	r1, #0
 80263a8:	d1ed      	bne.n	8026386 <_puts_r+0x56>
 80263aa:	60a3      	str	r3, [r4, #8]
 80263ac:	2b00      	cmp	r3, #0
 80263ae:	da0f      	bge.n	80263d0 <_puts_r+0xa0>
 80263b0:	0022      	movs	r2, r4
 80263b2:	0028      	movs	r0, r5
 80263b4:	310a      	adds	r1, #10
 80263b6:	f000 f8e5 	bl	8026584 <__swbuf_r>
 80263ba:	3001      	adds	r0, #1
 80263bc:	d0d6      	beq.n	802636c <_puts_r+0x3c>
 80263be:	250a      	movs	r5, #10
 80263c0:	e7d6      	b.n	8026370 <_puts_r+0x40>
 80263c2:	0022      	movs	r2, r4
 80263c4:	0028      	movs	r0, r5
 80263c6:	f000 f8dd 	bl	8026584 <__swbuf_r>
 80263ca:	3001      	adds	r0, #1
 80263cc:	d1e8      	bne.n	80263a0 <_puts_r+0x70>
 80263ce:	e7cd      	b.n	802636c <_puts_r+0x3c>
 80263d0:	6823      	ldr	r3, [r4, #0]
 80263d2:	1c5a      	adds	r2, r3, #1
 80263d4:	6022      	str	r2, [r4, #0]
 80263d6:	220a      	movs	r2, #10
 80263d8:	701a      	strb	r2, [r3, #0]
 80263da:	e7f0      	b.n	80263be <_puts_r+0x8e>

080263dc <puts>:
 80263dc:	b510      	push	{r4, lr}
 80263de:	4b03      	ldr	r3, [pc, #12]	@ (80263ec <puts+0x10>)
 80263e0:	0001      	movs	r1, r0
 80263e2:	6818      	ldr	r0, [r3, #0]
 80263e4:	f7ff ffa4 	bl	8026330 <_puts_r>
 80263e8:	bd10      	pop	{r4, pc}
 80263ea:	46c0      	nop			@ (mov r8, r8)
 80263ec:	200003ec 	.word	0x200003ec

080263f0 <siprintf>:
 80263f0:	b40e      	push	{r1, r2, r3}
 80263f2:	b510      	push	{r4, lr}
 80263f4:	2400      	movs	r4, #0
 80263f6:	490c      	ldr	r1, [pc, #48]	@ (8026428 <siprintf+0x38>)
 80263f8:	b09d      	sub	sp, #116	@ 0x74
 80263fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80263fc:	9002      	str	r0, [sp, #8]
 80263fe:	9006      	str	r0, [sp, #24]
 8026400:	9107      	str	r1, [sp, #28]
 8026402:	9104      	str	r1, [sp, #16]
 8026404:	4809      	ldr	r0, [pc, #36]	@ (802642c <siprintf+0x3c>)
 8026406:	490a      	ldr	r1, [pc, #40]	@ (8026430 <siprintf+0x40>)
 8026408:	cb04      	ldmia	r3!, {r2}
 802640a:	9105      	str	r1, [sp, #20]
 802640c:	6800      	ldr	r0, [r0, #0]
 802640e:	a902      	add	r1, sp, #8
 8026410:	9301      	str	r3, [sp, #4]
 8026412:	941b      	str	r4, [sp, #108]	@ 0x6c
 8026414:	f002 fa5a 	bl	80288cc <_svfiprintf_r>
 8026418:	9b02      	ldr	r3, [sp, #8]
 802641a:	701c      	strb	r4, [r3, #0]
 802641c:	b01d      	add	sp, #116	@ 0x74
 802641e:	bc10      	pop	{r4}
 8026420:	bc08      	pop	{r3}
 8026422:	b003      	add	sp, #12
 8026424:	4718      	bx	r3
 8026426:	46c0      	nop			@ (mov r8, r8)
 8026428:	7fffffff 	.word	0x7fffffff
 802642c:	200003ec 	.word	0x200003ec
 8026430:	ffff0208 	.word	0xffff0208

08026434 <__sread>:
 8026434:	b570      	push	{r4, r5, r6, lr}
 8026436:	000c      	movs	r4, r1
 8026438:	250e      	movs	r5, #14
 802643a:	5f49      	ldrsh	r1, [r1, r5]
 802643c:	f000 f9be 	bl	80267bc <_read_r>
 8026440:	2800      	cmp	r0, #0
 8026442:	db03      	blt.n	802644c <__sread+0x18>
 8026444:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8026446:	181b      	adds	r3, r3, r0
 8026448:	6563      	str	r3, [r4, #84]	@ 0x54
 802644a:	bd70      	pop	{r4, r5, r6, pc}
 802644c:	89a3      	ldrh	r3, [r4, #12]
 802644e:	4a02      	ldr	r2, [pc, #8]	@ (8026458 <__sread+0x24>)
 8026450:	4013      	ands	r3, r2
 8026452:	81a3      	strh	r3, [r4, #12]
 8026454:	e7f9      	b.n	802644a <__sread+0x16>
 8026456:	46c0      	nop			@ (mov r8, r8)
 8026458:	ffffefff 	.word	0xffffefff

0802645c <__swrite>:
 802645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802645e:	001f      	movs	r7, r3
 8026460:	898b      	ldrh	r3, [r1, #12]
 8026462:	0005      	movs	r5, r0
 8026464:	000c      	movs	r4, r1
 8026466:	0016      	movs	r6, r2
 8026468:	05db      	lsls	r3, r3, #23
 802646a:	d505      	bpl.n	8026478 <__swrite+0x1c>
 802646c:	230e      	movs	r3, #14
 802646e:	5ec9      	ldrsh	r1, [r1, r3]
 8026470:	2200      	movs	r2, #0
 8026472:	2302      	movs	r3, #2
 8026474:	f000 f98e 	bl	8026794 <_lseek_r>
 8026478:	89a3      	ldrh	r3, [r4, #12]
 802647a:	4a05      	ldr	r2, [pc, #20]	@ (8026490 <__swrite+0x34>)
 802647c:	0028      	movs	r0, r5
 802647e:	4013      	ands	r3, r2
 8026480:	81a3      	strh	r3, [r4, #12]
 8026482:	0032      	movs	r2, r6
 8026484:	230e      	movs	r3, #14
 8026486:	5ee1      	ldrsh	r1, [r4, r3]
 8026488:	003b      	movs	r3, r7
 802648a:	f000 f9ab 	bl	80267e4 <_write_r>
 802648e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026490:	ffffefff 	.word	0xffffefff

08026494 <__sseek>:
 8026494:	b570      	push	{r4, r5, r6, lr}
 8026496:	000c      	movs	r4, r1
 8026498:	250e      	movs	r5, #14
 802649a:	5f49      	ldrsh	r1, [r1, r5]
 802649c:	f000 f97a 	bl	8026794 <_lseek_r>
 80264a0:	89a3      	ldrh	r3, [r4, #12]
 80264a2:	1c42      	adds	r2, r0, #1
 80264a4:	d103      	bne.n	80264ae <__sseek+0x1a>
 80264a6:	4a05      	ldr	r2, [pc, #20]	@ (80264bc <__sseek+0x28>)
 80264a8:	4013      	ands	r3, r2
 80264aa:	81a3      	strh	r3, [r4, #12]
 80264ac:	bd70      	pop	{r4, r5, r6, pc}
 80264ae:	2280      	movs	r2, #128	@ 0x80
 80264b0:	0152      	lsls	r2, r2, #5
 80264b2:	4313      	orrs	r3, r2
 80264b4:	81a3      	strh	r3, [r4, #12]
 80264b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80264b8:	e7f8      	b.n	80264ac <__sseek+0x18>
 80264ba:	46c0      	nop			@ (mov r8, r8)
 80264bc:	ffffefff 	.word	0xffffefff

080264c0 <__sclose>:
 80264c0:	b510      	push	{r4, lr}
 80264c2:	230e      	movs	r3, #14
 80264c4:	5ec9      	ldrsh	r1, [r1, r3]
 80264c6:	f000 f953 	bl	8026770 <_close_r>
 80264ca:	bd10      	pop	{r4, pc}

080264cc <_vsniprintf_r>:
 80264cc:	b530      	push	{r4, r5, lr}
 80264ce:	0005      	movs	r5, r0
 80264d0:	0014      	movs	r4, r2
 80264d2:	0008      	movs	r0, r1
 80264d4:	001a      	movs	r2, r3
 80264d6:	b09b      	sub	sp, #108	@ 0x6c
 80264d8:	2c00      	cmp	r4, #0
 80264da:	da05      	bge.n	80264e8 <_vsniprintf_r+0x1c>
 80264dc:	238b      	movs	r3, #139	@ 0x8b
 80264de:	2001      	movs	r0, #1
 80264e0:	602b      	str	r3, [r5, #0]
 80264e2:	4240      	negs	r0, r0
 80264e4:	b01b      	add	sp, #108	@ 0x6c
 80264e6:	bd30      	pop	{r4, r5, pc}
 80264e8:	2382      	movs	r3, #130	@ 0x82
 80264ea:	4669      	mov	r1, sp
 80264ec:	009b      	lsls	r3, r3, #2
 80264ee:	818b      	strh	r3, [r1, #12]
 80264f0:	2100      	movs	r1, #0
 80264f2:	9000      	str	r0, [sp, #0]
 80264f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80264f6:	9004      	str	r0, [sp, #16]
 80264f8:	428c      	cmp	r4, r1
 80264fa:	d000      	beq.n	80264fe <_vsniprintf_r+0x32>
 80264fc:	1e61      	subs	r1, r4, #1
 80264fe:	2301      	movs	r3, #1
 8026500:	9102      	str	r1, [sp, #8]
 8026502:	9105      	str	r1, [sp, #20]
 8026504:	4669      	mov	r1, sp
 8026506:	425b      	negs	r3, r3
 8026508:	81cb      	strh	r3, [r1, #14]
 802650a:	0028      	movs	r0, r5
 802650c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802650e:	f002 f9dd 	bl	80288cc <_svfiprintf_r>
 8026512:	1c43      	adds	r3, r0, #1
 8026514:	da01      	bge.n	802651a <_vsniprintf_r+0x4e>
 8026516:	238b      	movs	r3, #139	@ 0x8b
 8026518:	602b      	str	r3, [r5, #0]
 802651a:	2c00      	cmp	r4, #0
 802651c:	d0e2      	beq.n	80264e4 <_vsniprintf_r+0x18>
 802651e:	2200      	movs	r2, #0
 8026520:	9b00      	ldr	r3, [sp, #0]
 8026522:	701a      	strb	r2, [r3, #0]
 8026524:	e7de      	b.n	80264e4 <_vsniprintf_r+0x18>
	...

08026528 <vsniprintf>:
 8026528:	b513      	push	{r0, r1, r4, lr}
 802652a:	4c04      	ldr	r4, [pc, #16]	@ (802653c <vsniprintf+0x14>)
 802652c:	9300      	str	r3, [sp, #0]
 802652e:	0013      	movs	r3, r2
 8026530:	000a      	movs	r2, r1
 8026532:	0001      	movs	r1, r0
 8026534:	6820      	ldr	r0, [r4, #0]
 8026536:	f7ff ffc9 	bl	80264cc <_vsniprintf_r>
 802653a:	bd16      	pop	{r1, r2, r4, pc}
 802653c:	200003ec 	.word	0x200003ec

08026540 <_vsiprintf_r>:
 8026540:	b510      	push	{r4, lr}
 8026542:	2400      	movs	r4, #0
 8026544:	b09a      	sub	sp, #104	@ 0x68
 8026546:	9100      	str	r1, [sp, #0]
 8026548:	9104      	str	r1, [sp, #16]
 802654a:	4906      	ldr	r1, [pc, #24]	@ (8026564 <_vsiprintf_r+0x24>)
 802654c:	9419      	str	r4, [sp, #100]	@ 0x64
 802654e:	9105      	str	r1, [sp, #20]
 8026550:	9102      	str	r1, [sp, #8]
 8026552:	4905      	ldr	r1, [pc, #20]	@ (8026568 <_vsiprintf_r+0x28>)
 8026554:	9103      	str	r1, [sp, #12]
 8026556:	4669      	mov	r1, sp
 8026558:	f002 f9b8 	bl	80288cc <_svfiprintf_r>
 802655c:	9b00      	ldr	r3, [sp, #0]
 802655e:	701c      	strb	r4, [r3, #0]
 8026560:	b01a      	add	sp, #104	@ 0x68
 8026562:	bd10      	pop	{r4, pc}
 8026564:	7fffffff 	.word	0x7fffffff
 8026568:	ffff0208 	.word	0xffff0208

0802656c <vsiprintf>:
 802656c:	b510      	push	{r4, lr}
 802656e:	4c04      	ldr	r4, [pc, #16]	@ (8026580 <vsiprintf+0x14>)
 8026570:	0013      	movs	r3, r2
 8026572:	000a      	movs	r2, r1
 8026574:	0001      	movs	r1, r0
 8026576:	6820      	ldr	r0, [r4, #0]
 8026578:	f7ff ffe2 	bl	8026540 <_vsiprintf_r>
 802657c:	bd10      	pop	{r4, pc}
 802657e:	46c0      	nop			@ (mov r8, r8)
 8026580:	200003ec 	.word	0x200003ec

08026584 <__swbuf_r>:
 8026584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026586:	0006      	movs	r6, r0
 8026588:	000d      	movs	r5, r1
 802658a:	0014      	movs	r4, r2
 802658c:	2800      	cmp	r0, #0
 802658e:	d004      	beq.n	802659a <__swbuf_r+0x16>
 8026590:	6a03      	ldr	r3, [r0, #32]
 8026592:	2b00      	cmp	r3, #0
 8026594:	d101      	bne.n	802659a <__swbuf_r+0x16>
 8026596:	f7ff fe87 	bl	80262a8 <__sinit>
 802659a:	69a3      	ldr	r3, [r4, #24]
 802659c:	60a3      	str	r3, [r4, #8]
 802659e:	89a3      	ldrh	r3, [r4, #12]
 80265a0:	071b      	lsls	r3, r3, #28
 80265a2:	d502      	bpl.n	80265aa <__swbuf_r+0x26>
 80265a4:	6923      	ldr	r3, [r4, #16]
 80265a6:	2b00      	cmp	r3, #0
 80265a8:	d109      	bne.n	80265be <__swbuf_r+0x3a>
 80265aa:	0021      	movs	r1, r4
 80265ac:	0030      	movs	r0, r6
 80265ae:	f000 f82b 	bl	8026608 <__swsetup_r>
 80265b2:	2800      	cmp	r0, #0
 80265b4:	d003      	beq.n	80265be <__swbuf_r+0x3a>
 80265b6:	2501      	movs	r5, #1
 80265b8:	426d      	negs	r5, r5
 80265ba:	0028      	movs	r0, r5
 80265bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80265be:	6923      	ldr	r3, [r4, #16]
 80265c0:	6820      	ldr	r0, [r4, #0]
 80265c2:	b2ef      	uxtb	r7, r5
 80265c4:	1ac0      	subs	r0, r0, r3
 80265c6:	6963      	ldr	r3, [r4, #20]
 80265c8:	b2ed      	uxtb	r5, r5
 80265ca:	4283      	cmp	r3, r0
 80265cc:	dc05      	bgt.n	80265da <__swbuf_r+0x56>
 80265ce:	0021      	movs	r1, r4
 80265d0:	0030      	movs	r0, r6
 80265d2:	f002 fc43 	bl	8028e5c <_fflush_r>
 80265d6:	2800      	cmp	r0, #0
 80265d8:	d1ed      	bne.n	80265b6 <__swbuf_r+0x32>
 80265da:	68a3      	ldr	r3, [r4, #8]
 80265dc:	3001      	adds	r0, #1
 80265de:	3b01      	subs	r3, #1
 80265e0:	60a3      	str	r3, [r4, #8]
 80265e2:	6823      	ldr	r3, [r4, #0]
 80265e4:	1c5a      	adds	r2, r3, #1
 80265e6:	6022      	str	r2, [r4, #0]
 80265e8:	701f      	strb	r7, [r3, #0]
 80265ea:	6963      	ldr	r3, [r4, #20]
 80265ec:	4283      	cmp	r3, r0
 80265ee:	d004      	beq.n	80265fa <__swbuf_r+0x76>
 80265f0:	89a3      	ldrh	r3, [r4, #12]
 80265f2:	07db      	lsls	r3, r3, #31
 80265f4:	d5e1      	bpl.n	80265ba <__swbuf_r+0x36>
 80265f6:	2d0a      	cmp	r5, #10
 80265f8:	d1df      	bne.n	80265ba <__swbuf_r+0x36>
 80265fa:	0021      	movs	r1, r4
 80265fc:	0030      	movs	r0, r6
 80265fe:	f002 fc2d 	bl	8028e5c <_fflush_r>
 8026602:	2800      	cmp	r0, #0
 8026604:	d0d9      	beq.n	80265ba <__swbuf_r+0x36>
 8026606:	e7d6      	b.n	80265b6 <__swbuf_r+0x32>

08026608 <__swsetup_r>:
 8026608:	4b2d      	ldr	r3, [pc, #180]	@ (80266c0 <__swsetup_r+0xb8>)
 802660a:	b570      	push	{r4, r5, r6, lr}
 802660c:	0005      	movs	r5, r0
 802660e:	6818      	ldr	r0, [r3, #0]
 8026610:	000c      	movs	r4, r1
 8026612:	2800      	cmp	r0, #0
 8026614:	d004      	beq.n	8026620 <__swsetup_r+0x18>
 8026616:	6a03      	ldr	r3, [r0, #32]
 8026618:	2b00      	cmp	r3, #0
 802661a:	d101      	bne.n	8026620 <__swsetup_r+0x18>
 802661c:	f7ff fe44 	bl	80262a8 <__sinit>
 8026620:	220c      	movs	r2, #12
 8026622:	5ea3      	ldrsh	r3, [r4, r2]
 8026624:	071a      	lsls	r2, r3, #28
 8026626:	d423      	bmi.n	8026670 <__swsetup_r+0x68>
 8026628:	06da      	lsls	r2, r3, #27
 802662a:	d407      	bmi.n	802663c <__swsetup_r+0x34>
 802662c:	2209      	movs	r2, #9
 802662e:	602a      	str	r2, [r5, #0]
 8026630:	2240      	movs	r2, #64	@ 0x40
 8026632:	2001      	movs	r0, #1
 8026634:	4313      	orrs	r3, r2
 8026636:	81a3      	strh	r3, [r4, #12]
 8026638:	4240      	negs	r0, r0
 802663a:	e03a      	b.n	80266b2 <__swsetup_r+0xaa>
 802663c:	075b      	lsls	r3, r3, #29
 802663e:	d513      	bpl.n	8026668 <__swsetup_r+0x60>
 8026640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026642:	2900      	cmp	r1, #0
 8026644:	d008      	beq.n	8026658 <__swsetup_r+0x50>
 8026646:	0023      	movs	r3, r4
 8026648:	3344      	adds	r3, #68	@ 0x44
 802664a:	4299      	cmp	r1, r3
 802664c:	d002      	beq.n	8026654 <__swsetup_r+0x4c>
 802664e:	0028      	movs	r0, r5
 8026650:	f000 ff9a 	bl	8027588 <_free_r>
 8026654:	2300      	movs	r3, #0
 8026656:	6363      	str	r3, [r4, #52]	@ 0x34
 8026658:	2224      	movs	r2, #36	@ 0x24
 802665a:	89a3      	ldrh	r3, [r4, #12]
 802665c:	4393      	bics	r3, r2
 802665e:	81a3      	strh	r3, [r4, #12]
 8026660:	2300      	movs	r3, #0
 8026662:	6063      	str	r3, [r4, #4]
 8026664:	6923      	ldr	r3, [r4, #16]
 8026666:	6023      	str	r3, [r4, #0]
 8026668:	2308      	movs	r3, #8
 802666a:	89a2      	ldrh	r2, [r4, #12]
 802666c:	4313      	orrs	r3, r2
 802666e:	81a3      	strh	r3, [r4, #12]
 8026670:	6923      	ldr	r3, [r4, #16]
 8026672:	2b00      	cmp	r3, #0
 8026674:	d10b      	bne.n	802668e <__swsetup_r+0x86>
 8026676:	21a0      	movs	r1, #160	@ 0xa0
 8026678:	2280      	movs	r2, #128	@ 0x80
 802667a:	89a3      	ldrh	r3, [r4, #12]
 802667c:	0089      	lsls	r1, r1, #2
 802667e:	0092      	lsls	r2, r2, #2
 8026680:	400b      	ands	r3, r1
 8026682:	4293      	cmp	r3, r2
 8026684:	d003      	beq.n	802668e <__swsetup_r+0x86>
 8026686:	0021      	movs	r1, r4
 8026688:	0028      	movs	r0, r5
 802668a:	f002 fc3d 	bl	8028f08 <__smakebuf_r>
 802668e:	220c      	movs	r2, #12
 8026690:	5ea3      	ldrsh	r3, [r4, r2]
 8026692:	2101      	movs	r1, #1
 8026694:	001a      	movs	r2, r3
 8026696:	400a      	ands	r2, r1
 8026698:	420b      	tst	r3, r1
 802669a:	d00b      	beq.n	80266b4 <__swsetup_r+0xac>
 802669c:	2200      	movs	r2, #0
 802669e:	60a2      	str	r2, [r4, #8]
 80266a0:	6962      	ldr	r2, [r4, #20]
 80266a2:	4252      	negs	r2, r2
 80266a4:	61a2      	str	r2, [r4, #24]
 80266a6:	2000      	movs	r0, #0
 80266a8:	6922      	ldr	r2, [r4, #16]
 80266aa:	4282      	cmp	r2, r0
 80266ac:	d101      	bne.n	80266b2 <__swsetup_r+0xaa>
 80266ae:	061a      	lsls	r2, r3, #24
 80266b0:	d4be      	bmi.n	8026630 <__swsetup_r+0x28>
 80266b2:	bd70      	pop	{r4, r5, r6, pc}
 80266b4:	0799      	lsls	r1, r3, #30
 80266b6:	d400      	bmi.n	80266ba <__swsetup_r+0xb2>
 80266b8:	6962      	ldr	r2, [r4, #20]
 80266ba:	60a2      	str	r2, [r4, #8]
 80266bc:	e7f3      	b.n	80266a6 <__swsetup_r+0x9e>
 80266be:	46c0      	nop			@ (mov r8, r8)
 80266c0:	200003ec 	.word	0x200003ec

080266c4 <memset>:
 80266c4:	0003      	movs	r3, r0
 80266c6:	1882      	adds	r2, r0, r2
 80266c8:	4293      	cmp	r3, r2
 80266ca:	d100      	bne.n	80266ce <memset+0xa>
 80266cc:	4770      	bx	lr
 80266ce:	7019      	strb	r1, [r3, #0]
 80266d0:	3301      	adds	r3, #1
 80266d2:	e7f9      	b.n	80266c8 <memset+0x4>

080266d4 <strchr>:
 80266d4:	b2c9      	uxtb	r1, r1
 80266d6:	7803      	ldrb	r3, [r0, #0]
 80266d8:	2b00      	cmp	r3, #0
 80266da:	d004      	beq.n	80266e6 <strchr+0x12>
 80266dc:	428b      	cmp	r3, r1
 80266de:	d100      	bne.n	80266e2 <strchr+0xe>
 80266e0:	4770      	bx	lr
 80266e2:	3001      	adds	r0, #1
 80266e4:	e7f7      	b.n	80266d6 <strchr+0x2>
 80266e6:	424b      	negs	r3, r1
 80266e8:	4159      	adcs	r1, r3
 80266ea:	4249      	negs	r1, r1
 80266ec:	4008      	ands	r0, r1
 80266ee:	e7f7      	b.n	80266e0 <strchr+0xc>

080266f0 <strncmp>:
 80266f0:	b530      	push	{r4, r5, lr}
 80266f2:	0005      	movs	r5, r0
 80266f4:	1e10      	subs	r0, r2, #0
 80266f6:	d00b      	beq.n	8026710 <strncmp+0x20>
 80266f8:	2400      	movs	r4, #0
 80266fa:	3a01      	subs	r2, #1
 80266fc:	5d2b      	ldrb	r3, [r5, r4]
 80266fe:	5d08      	ldrb	r0, [r1, r4]
 8026700:	4283      	cmp	r3, r0
 8026702:	d104      	bne.n	802670e <strncmp+0x1e>
 8026704:	4294      	cmp	r4, r2
 8026706:	d002      	beq.n	802670e <strncmp+0x1e>
 8026708:	3401      	adds	r4, #1
 802670a:	2b00      	cmp	r3, #0
 802670c:	d1f6      	bne.n	80266fc <strncmp+0xc>
 802670e:	1a18      	subs	r0, r3, r0
 8026710:	bd30      	pop	{r4, r5, pc}

08026712 <strncpy>:
 8026712:	0003      	movs	r3, r0
 8026714:	b530      	push	{r4, r5, lr}
 8026716:	001d      	movs	r5, r3
 8026718:	2a00      	cmp	r2, #0
 802671a:	d006      	beq.n	802672a <strncpy+0x18>
 802671c:	780c      	ldrb	r4, [r1, #0]
 802671e:	3a01      	subs	r2, #1
 8026720:	3301      	adds	r3, #1
 8026722:	702c      	strb	r4, [r5, #0]
 8026724:	3101      	adds	r1, #1
 8026726:	2c00      	cmp	r4, #0
 8026728:	d1f5      	bne.n	8026716 <strncpy+0x4>
 802672a:	2100      	movs	r1, #0
 802672c:	189a      	adds	r2, r3, r2
 802672e:	4293      	cmp	r3, r2
 8026730:	d100      	bne.n	8026734 <strncpy+0x22>
 8026732:	bd30      	pop	{r4, r5, pc}
 8026734:	7019      	strb	r1, [r3, #0]
 8026736:	3301      	adds	r3, #1
 8026738:	e7f9      	b.n	802672e <strncpy+0x1c>

0802673a <strstr>:
 802673a:	780a      	ldrb	r2, [r1, #0]
 802673c:	b530      	push	{r4, r5, lr}
 802673e:	2a00      	cmp	r2, #0
 8026740:	d10c      	bne.n	802675c <strstr+0x22>
 8026742:	bd30      	pop	{r4, r5, pc}
 8026744:	429a      	cmp	r2, r3
 8026746:	d108      	bne.n	802675a <strstr+0x20>
 8026748:	2301      	movs	r3, #1
 802674a:	5ccc      	ldrb	r4, [r1, r3]
 802674c:	2c00      	cmp	r4, #0
 802674e:	d0f8      	beq.n	8026742 <strstr+0x8>
 8026750:	5cc5      	ldrb	r5, [r0, r3]
 8026752:	42a5      	cmp	r5, r4
 8026754:	d101      	bne.n	802675a <strstr+0x20>
 8026756:	3301      	adds	r3, #1
 8026758:	e7f7      	b.n	802674a <strstr+0x10>
 802675a:	3001      	adds	r0, #1
 802675c:	7803      	ldrb	r3, [r0, #0]
 802675e:	2b00      	cmp	r3, #0
 8026760:	d1f0      	bne.n	8026744 <strstr+0xa>
 8026762:	0018      	movs	r0, r3
 8026764:	e7ed      	b.n	8026742 <strstr+0x8>
	...

08026768 <_localeconv_r>:
 8026768:	4800      	ldr	r0, [pc, #0]	@ (802676c <_localeconv_r+0x4>)
 802676a:	4770      	bx	lr
 802676c:	20000370 	.word	0x20000370

08026770 <_close_r>:
 8026770:	2300      	movs	r3, #0
 8026772:	b570      	push	{r4, r5, r6, lr}
 8026774:	4d06      	ldr	r5, [pc, #24]	@ (8026790 <_close_r+0x20>)
 8026776:	0004      	movs	r4, r0
 8026778:	0008      	movs	r0, r1
 802677a:	602b      	str	r3, [r5, #0]
 802677c:	f7ed f80c 	bl	8013798 <_close>
 8026780:	1c43      	adds	r3, r0, #1
 8026782:	d103      	bne.n	802678c <_close_r+0x1c>
 8026784:	682b      	ldr	r3, [r5, #0]
 8026786:	2b00      	cmp	r3, #0
 8026788:	d000      	beq.n	802678c <_close_r+0x1c>
 802678a:	6023      	str	r3, [r4, #0]
 802678c:	bd70      	pop	{r4, r5, r6, pc}
 802678e:	46c0      	nop			@ (mov r8, r8)
 8026790:	200038bc 	.word	0x200038bc

08026794 <_lseek_r>:
 8026794:	b570      	push	{r4, r5, r6, lr}
 8026796:	0004      	movs	r4, r0
 8026798:	0008      	movs	r0, r1
 802679a:	0011      	movs	r1, r2
 802679c:	001a      	movs	r2, r3
 802679e:	2300      	movs	r3, #0
 80267a0:	4d05      	ldr	r5, [pc, #20]	@ (80267b8 <_lseek_r+0x24>)
 80267a2:	602b      	str	r3, [r5, #0]
 80267a4:	f7ed f819 	bl	80137da <_lseek>
 80267a8:	1c43      	adds	r3, r0, #1
 80267aa:	d103      	bne.n	80267b4 <_lseek_r+0x20>
 80267ac:	682b      	ldr	r3, [r5, #0]
 80267ae:	2b00      	cmp	r3, #0
 80267b0:	d000      	beq.n	80267b4 <_lseek_r+0x20>
 80267b2:	6023      	str	r3, [r4, #0]
 80267b4:	bd70      	pop	{r4, r5, r6, pc}
 80267b6:	46c0      	nop			@ (mov r8, r8)
 80267b8:	200038bc 	.word	0x200038bc

080267bc <_read_r>:
 80267bc:	b570      	push	{r4, r5, r6, lr}
 80267be:	0004      	movs	r4, r0
 80267c0:	0008      	movs	r0, r1
 80267c2:	0011      	movs	r1, r2
 80267c4:	001a      	movs	r2, r3
 80267c6:	2300      	movs	r3, #0
 80267c8:	4d05      	ldr	r5, [pc, #20]	@ (80267e0 <_read_r+0x24>)
 80267ca:	602b      	str	r3, [r5, #0]
 80267cc:	f7ec ffc7 	bl	801375e <_read>
 80267d0:	1c43      	adds	r3, r0, #1
 80267d2:	d103      	bne.n	80267dc <_read_r+0x20>
 80267d4:	682b      	ldr	r3, [r5, #0]
 80267d6:	2b00      	cmp	r3, #0
 80267d8:	d000      	beq.n	80267dc <_read_r+0x20>
 80267da:	6023      	str	r3, [r4, #0]
 80267dc:	bd70      	pop	{r4, r5, r6, pc}
 80267de:	46c0      	nop			@ (mov r8, r8)
 80267e0:	200038bc 	.word	0x200038bc

080267e4 <_write_r>:
 80267e4:	b570      	push	{r4, r5, r6, lr}
 80267e6:	0004      	movs	r4, r0
 80267e8:	0008      	movs	r0, r1
 80267ea:	0011      	movs	r1, r2
 80267ec:	001a      	movs	r2, r3
 80267ee:	2300      	movs	r3, #0
 80267f0:	4d05      	ldr	r5, [pc, #20]	@ (8026808 <_write_r+0x24>)
 80267f2:	602b      	str	r3, [r5, #0]
 80267f4:	f7ed fc94 	bl	8014120 <_write>
 80267f8:	1c43      	adds	r3, r0, #1
 80267fa:	d103      	bne.n	8026804 <_write_r+0x20>
 80267fc:	682b      	ldr	r3, [r5, #0]
 80267fe:	2b00      	cmp	r3, #0
 8026800:	d000      	beq.n	8026804 <_write_r+0x20>
 8026802:	6023      	str	r3, [r4, #0]
 8026804:	bd70      	pop	{r4, r5, r6, pc}
 8026806:	46c0      	nop			@ (mov r8, r8)
 8026808:	200038bc 	.word	0x200038bc

0802680c <__errno>:
 802680c:	4b01      	ldr	r3, [pc, #4]	@ (8026814 <__errno+0x8>)
 802680e:	6818      	ldr	r0, [r3, #0]
 8026810:	4770      	bx	lr
 8026812:	46c0      	nop			@ (mov r8, r8)
 8026814:	200003ec 	.word	0x200003ec

08026818 <__libc_init_array>:
 8026818:	b570      	push	{r4, r5, r6, lr}
 802681a:	2600      	movs	r6, #0
 802681c:	4c0c      	ldr	r4, [pc, #48]	@ (8026850 <__libc_init_array+0x38>)
 802681e:	4d0d      	ldr	r5, [pc, #52]	@ (8026854 <__libc_init_array+0x3c>)
 8026820:	1b64      	subs	r4, r4, r5
 8026822:	10a4      	asrs	r4, r4, #2
 8026824:	42a6      	cmp	r6, r4
 8026826:	d109      	bne.n	802683c <__libc_init_array+0x24>
 8026828:	2600      	movs	r6, #0
 802682a:	f003 ffcb 	bl	802a7c4 <_init>
 802682e:	4c0a      	ldr	r4, [pc, #40]	@ (8026858 <__libc_init_array+0x40>)
 8026830:	4d0a      	ldr	r5, [pc, #40]	@ (802685c <__libc_init_array+0x44>)
 8026832:	1b64      	subs	r4, r4, r5
 8026834:	10a4      	asrs	r4, r4, #2
 8026836:	42a6      	cmp	r6, r4
 8026838:	d105      	bne.n	8026846 <__libc_init_array+0x2e>
 802683a:	bd70      	pop	{r4, r5, r6, pc}
 802683c:	00b3      	lsls	r3, r6, #2
 802683e:	58eb      	ldr	r3, [r5, r3]
 8026840:	4798      	blx	r3
 8026842:	3601      	adds	r6, #1
 8026844:	e7ee      	b.n	8026824 <__libc_init_array+0xc>
 8026846:	00b3      	lsls	r3, r6, #2
 8026848:	58eb      	ldr	r3, [r5, r3]
 802684a:	4798      	blx	r3
 802684c:	3601      	adds	r6, #1
 802684e:	e7f2      	b.n	8026836 <__libc_init_array+0x1e>
 8026850:	0802f3d0 	.word	0x0802f3d0
 8026854:	0802f3d0 	.word	0x0802f3d0
 8026858:	0802f3d4 	.word	0x0802f3d4
 802685c:	0802f3d0 	.word	0x0802f3d0

08026860 <__retarget_lock_init_recursive>:
 8026860:	4770      	bx	lr

08026862 <__retarget_lock_acquire_recursive>:
 8026862:	4770      	bx	lr

08026864 <__retarget_lock_release_recursive>:
 8026864:	4770      	bx	lr

08026866 <memchr>:
 8026866:	b2c9      	uxtb	r1, r1
 8026868:	1882      	adds	r2, r0, r2
 802686a:	4290      	cmp	r0, r2
 802686c:	d101      	bne.n	8026872 <memchr+0xc>
 802686e:	2000      	movs	r0, #0
 8026870:	4770      	bx	lr
 8026872:	7803      	ldrb	r3, [r0, #0]
 8026874:	428b      	cmp	r3, r1
 8026876:	d0fb      	beq.n	8026870 <memchr+0xa>
 8026878:	3001      	adds	r0, #1
 802687a:	e7f6      	b.n	802686a <memchr+0x4>

0802687c <memcpy>:
 802687c:	2300      	movs	r3, #0
 802687e:	b510      	push	{r4, lr}
 8026880:	429a      	cmp	r2, r3
 8026882:	d100      	bne.n	8026886 <memcpy+0xa>
 8026884:	bd10      	pop	{r4, pc}
 8026886:	5ccc      	ldrb	r4, [r1, r3]
 8026888:	54c4      	strb	r4, [r0, r3]
 802688a:	3301      	adds	r3, #1
 802688c:	e7f8      	b.n	8026880 <memcpy+0x4>
	...

08026890 <nan>:
 8026890:	2000      	movs	r0, #0
 8026892:	4901      	ldr	r1, [pc, #4]	@ (8026898 <nan+0x8>)
 8026894:	4770      	bx	lr
 8026896:	46c0      	nop			@ (mov r8, r8)
 8026898:	7ff80000 	.word	0x7ff80000

0802689c <quorem>:
 802689c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802689e:	6903      	ldr	r3, [r0, #16]
 80268a0:	690c      	ldr	r4, [r1, #16]
 80268a2:	b089      	sub	sp, #36	@ 0x24
 80268a4:	9003      	str	r0, [sp, #12]
 80268a6:	9106      	str	r1, [sp, #24]
 80268a8:	2000      	movs	r0, #0
 80268aa:	42a3      	cmp	r3, r4
 80268ac:	db63      	blt.n	8026976 <quorem+0xda>
 80268ae:	000b      	movs	r3, r1
 80268b0:	3c01      	subs	r4, #1
 80268b2:	3314      	adds	r3, #20
 80268b4:	00a5      	lsls	r5, r4, #2
 80268b6:	9304      	str	r3, [sp, #16]
 80268b8:	195b      	adds	r3, r3, r5
 80268ba:	9305      	str	r3, [sp, #20]
 80268bc:	9b03      	ldr	r3, [sp, #12]
 80268be:	3314      	adds	r3, #20
 80268c0:	9301      	str	r3, [sp, #4]
 80268c2:	195d      	adds	r5, r3, r5
 80268c4:	9b05      	ldr	r3, [sp, #20]
 80268c6:	682f      	ldr	r7, [r5, #0]
 80268c8:	681e      	ldr	r6, [r3, #0]
 80268ca:	0038      	movs	r0, r7
 80268cc:	3601      	adds	r6, #1
 80268ce:	0031      	movs	r1, r6
 80268d0:	f7d9 fc68 	bl	80001a4 <__udivsi3>
 80268d4:	9002      	str	r0, [sp, #8]
 80268d6:	42b7      	cmp	r7, r6
 80268d8:	d327      	bcc.n	802692a <quorem+0x8e>
 80268da:	9b04      	ldr	r3, [sp, #16]
 80268dc:	2700      	movs	r7, #0
 80268de:	469c      	mov	ip, r3
 80268e0:	9e01      	ldr	r6, [sp, #4]
 80268e2:	9707      	str	r7, [sp, #28]
 80268e4:	4662      	mov	r2, ip
 80268e6:	ca08      	ldmia	r2!, {r3}
 80268e8:	6830      	ldr	r0, [r6, #0]
 80268ea:	4694      	mov	ip, r2
 80268ec:	9a02      	ldr	r2, [sp, #8]
 80268ee:	b299      	uxth	r1, r3
 80268f0:	4351      	muls	r1, r2
 80268f2:	0c1b      	lsrs	r3, r3, #16
 80268f4:	4353      	muls	r3, r2
 80268f6:	19c9      	adds	r1, r1, r7
 80268f8:	0c0a      	lsrs	r2, r1, #16
 80268fa:	189b      	adds	r3, r3, r2
 80268fc:	b289      	uxth	r1, r1
 80268fe:	b282      	uxth	r2, r0
 8026900:	1a52      	subs	r2, r2, r1
 8026902:	9907      	ldr	r1, [sp, #28]
 8026904:	0c1f      	lsrs	r7, r3, #16
 8026906:	1852      	adds	r2, r2, r1
 8026908:	0c00      	lsrs	r0, r0, #16
 802690a:	b29b      	uxth	r3, r3
 802690c:	1411      	asrs	r1, r2, #16
 802690e:	1ac3      	subs	r3, r0, r3
 8026910:	185b      	adds	r3, r3, r1
 8026912:	1419      	asrs	r1, r3, #16
 8026914:	b292      	uxth	r2, r2
 8026916:	041b      	lsls	r3, r3, #16
 8026918:	431a      	orrs	r2, r3
 802691a:	9b05      	ldr	r3, [sp, #20]
 802691c:	9107      	str	r1, [sp, #28]
 802691e:	c604      	stmia	r6!, {r2}
 8026920:	4563      	cmp	r3, ip
 8026922:	d2df      	bcs.n	80268e4 <quorem+0x48>
 8026924:	682b      	ldr	r3, [r5, #0]
 8026926:	2b00      	cmp	r3, #0
 8026928:	d02b      	beq.n	8026982 <quorem+0xe6>
 802692a:	9906      	ldr	r1, [sp, #24]
 802692c:	9803      	ldr	r0, [sp, #12]
 802692e:	f001 fd6f 	bl	8028410 <__mcmp>
 8026932:	2800      	cmp	r0, #0
 8026934:	db1e      	blt.n	8026974 <quorem+0xd8>
 8026936:	2600      	movs	r6, #0
 8026938:	9d01      	ldr	r5, [sp, #4]
 802693a:	9904      	ldr	r1, [sp, #16]
 802693c:	c901      	ldmia	r1!, {r0}
 802693e:	682b      	ldr	r3, [r5, #0]
 8026940:	b287      	uxth	r7, r0
 8026942:	b29a      	uxth	r2, r3
 8026944:	1bd2      	subs	r2, r2, r7
 8026946:	1992      	adds	r2, r2, r6
 8026948:	0c00      	lsrs	r0, r0, #16
 802694a:	0c1b      	lsrs	r3, r3, #16
 802694c:	1a1b      	subs	r3, r3, r0
 802694e:	1410      	asrs	r0, r2, #16
 8026950:	181b      	adds	r3, r3, r0
 8026952:	141e      	asrs	r6, r3, #16
 8026954:	b292      	uxth	r2, r2
 8026956:	041b      	lsls	r3, r3, #16
 8026958:	431a      	orrs	r2, r3
 802695a:	9b05      	ldr	r3, [sp, #20]
 802695c:	c504      	stmia	r5!, {r2}
 802695e:	428b      	cmp	r3, r1
 8026960:	d2ec      	bcs.n	802693c <quorem+0xa0>
 8026962:	9a01      	ldr	r2, [sp, #4]
 8026964:	00a3      	lsls	r3, r4, #2
 8026966:	18d3      	adds	r3, r2, r3
 8026968:	681a      	ldr	r2, [r3, #0]
 802696a:	2a00      	cmp	r2, #0
 802696c:	d014      	beq.n	8026998 <quorem+0xfc>
 802696e:	9b02      	ldr	r3, [sp, #8]
 8026970:	3301      	adds	r3, #1
 8026972:	9302      	str	r3, [sp, #8]
 8026974:	9802      	ldr	r0, [sp, #8]
 8026976:	b009      	add	sp, #36	@ 0x24
 8026978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802697a:	682b      	ldr	r3, [r5, #0]
 802697c:	2b00      	cmp	r3, #0
 802697e:	d104      	bne.n	802698a <quorem+0xee>
 8026980:	3c01      	subs	r4, #1
 8026982:	9b01      	ldr	r3, [sp, #4]
 8026984:	3d04      	subs	r5, #4
 8026986:	42ab      	cmp	r3, r5
 8026988:	d3f7      	bcc.n	802697a <quorem+0xde>
 802698a:	9b03      	ldr	r3, [sp, #12]
 802698c:	611c      	str	r4, [r3, #16]
 802698e:	e7cc      	b.n	802692a <quorem+0x8e>
 8026990:	681a      	ldr	r2, [r3, #0]
 8026992:	2a00      	cmp	r2, #0
 8026994:	d104      	bne.n	80269a0 <quorem+0x104>
 8026996:	3c01      	subs	r4, #1
 8026998:	9a01      	ldr	r2, [sp, #4]
 802699a:	3b04      	subs	r3, #4
 802699c:	429a      	cmp	r2, r3
 802699e:	d3f7      	bcc.n	8026990 <quorem+0xf4>
 80269a0:	9b03      	ldr	r3, [sp, #12]
 80269a2:	611c      	str	r4, [r3, #16]
 80269a4:	e7e3      	b.n	802696e <quorem+0xd2>
	...

080269a8 <_dtoa_r>:
 80269a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80269aa:	0014      	movs	r4, r2
 80269ac:	001d      	movs	r5, r3
 80269ae:	69c6      	ldr	r6, [r0, #28]
 80269b0:	b09d      	sub	sp, #116	@ 0x74
 80269b2:	940a      	str	r4, [sp, #40]	@ 0x28
 80269b4:	950b      	str	r5, [sp, #44]	@ 0x2c
 80269b6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80269b8:	9003      	str	r0, [sp, #12]
 80269ba:	2e00      	cmp	r6, #0
 80269bc:	d10f      	bne.n	80269de <_dtoa_r+0x36>
 80269be:	2010      	movs	r0, #16
 80269c0:	f001 f986 	bl	8027cd0 <malloc>
 80269c4:	9b03      	ldr	r3, [sp, #12]
 80269c6:	1e02      	subs	r2, r0, #0
 80269c8:	61d8      	str	r0, [r3, #28]
 80269ca:	d104      	bne.n	80269d6 <_dtoa_r+0x2e>
 80269cc:	21ef      	movs	r1, #239	@ 0xef
 80269ce:	4bc7      	ldr	r3, [pc, #796]	@ (8026cec <_dtoa_r+0x344>)
 80269d0:	48c7      	ldr	r0, [pc, #796]	@ (8026cf0 <_dtoa_r+0x348>)
 80269d2:	f002 fb23 	bl	802901c <__assert_func>
 80269d6:	6046      	str	r6, [r0, #4]
 80269d8:	6086      	str	r6, [r0, #8]
 80269da:	6006      	str	r6, [r0, #0]
 80269dc:	60c6      	str	r6, [r0, #12]
 80269de:	9b03      	ldr	r3, [sp, #12]
 80269e0:	69db      	ldr	r3, [r3, #28]
 80269e2:	6819      	ldr	r1, [r3, #0]
 80269e4:	2900      	cmp	r1, #0
 80269e6:	d00b      	beq.n	8026a00 <_dtoa_r+0x58>
 80269e8:	685a      	ldr	r2, [r3, #4]
 80269ea:	2301      	movs	r3, #1
 80269ec:	4093      	lsls	r3, r2
 80269ee:	604a      	str	r2, [r1, #4]
 80269f0:	608b      	str	r3, [r1, #8]
 80269f2:	9803      	ldr	r0, [sp, #12]
 80269f4:	f001 fa7e 	bl	8027ef4 <_Bfree>
 80269f8:	2200      	movs	r2, #0
 80269fa:	9b03      	ldr	r3, [sp, #12]
 80269fc:	69db      	ldr	r3, [r3, #28]
 80269fe:	601a      	str	r2, [r3, #0]
 8026a00:	2d00      	cmp	r5, #0
 8026a02:	da1e      	bge.n	8026a42 <_dtoa_r+0x9a>
 8026a04:	2301      	movs	r3, #1
 8026a06:	603b      	str	r3, [r7, #0]
 8026a08:	006b      	lsls	r3, r5, #1
 8026a0a:	085b      	lsrs	r3, r3, #1
 8026a0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026a0e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026a10:	4bb8      	ldr	r3, [pc, #736]	@ (8026cf4 <_dtoa_r+0x34c>)
 8026a12:	4ab8      	ldr	r2, [pc, #736]	@ (8026cf4 <_dtoa_r+0x34c>)
 8026a14:	403b      	ands	r3, r7
 8026a16:	4293      	cmp	r3, r2
 8026a18:	d116      	bne.n	8026a48 <_dtoa_r+0xa0>
 8026a1a:	4bb7      	ldr	r3, [pc, #732]	@ (8026cf8 <_dtoa_r+0x350>)
 8026a1c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026a1e:	6013      	str	r3, [r2, #0]
 8026a20:	033b      	lsls	r3, r7, #12
 8026a22:	0b1b      	lsrs	r3, r3, #12
 8026a24:	4323      	orrs	r3, r4
 8026a26:	d101      	bne.n	8026a2c <_dtoa_r+0x84>
 8026a28:	f000 fd80 	bl	802752c <_dtoa_r+0xb84>
 8026a2c:	4bb3      	ldr	r3, [pc, #716]	@ (8026cfc <_dtoa_r+0x354>)
 8026a2e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026a30:	9308      	str	r3, [sp, #32]
 8026a32:	2a00      	cmp	r2, #0
 8026a34:	d002      	beq.n	8026a3c <_dtoa_r+0x94>
 8026a36:	4bb2      	ldr	r3, [pc, #712]	@ (8026d00 <_dtoa_r+0x358>)
 8026a38:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026a3a:	6013      	str	r3, [r2, #0]
 8026a3c:	9808      	ldr	r0, [sp, #32]
 8026a3e:	b01d      	add	sp, #116	@ 0x74
 8026a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026a42:	2300      	movs	r3, #0
 8026a44:	603b      	str	r3, [r7, #0]
 8026a46:	e7e2      	b.n	8026a0e <_dtoa_r+0x66>
 8026a48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026a4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026a4c:	9212      	str	r2, [sp, #72]	@ 0x48
 8026a4e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026a50:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026a52:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026a54:	2200      	movs	r2, #0
 8026a56:	2300      	movs	r3, #0
 8026a58:	f7d9 fd2a 	bl	80004b0 <__aeabi_dcmpeq>
 8026a5c:	1e06      	subs	r6, r0, #0
 8026a5e:	d00b      	beq.n	8026a78 <_dtoa_r+0xd0>
 8026a60:	2301      	movs	r3, #1
 8026a62:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8026a64:	6013      	str	r3, [r2, #0]
 8026a66:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8026a68:	2b00      	cmp	r3, #0
 8026a6a:	d002      	beq.n	8026a72 <_dtoa_r+0xca>
 8026a6c:	4ba5      	ldr	r3, [pc, #660]	@ (8026d04 <_dtoa_r+0x35c>)
 8026a6e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8026a70:	6013      	str	r3, [r2, #0]
 8026a72:	4ba5      	ldr	r3, [pc, #660]	@ (8026d08 <_dtoa_r+0x360>)
 8026a74:	9308      	str	r3, [sp, #32]
 8026a76:	e7e1      	b.n	8026a3c <_dtoa_r+0x94>
 8026a78:	ab1a      	add	r3, sp, #104	@ 0x68
 8026a7a:	9301      	str	r3, [sp, #4]
 8026a7c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8026a7e:	9300      	str	r3, [sp, #0]
 8026a80:	9803      	ldr	r0, [sp, #12]
 8026a82:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026a84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026a86:	f001 fde5 	bl	8028654 <__d2b>
 8026a8a:	007a      	lsls	r2, r7, #1
 8026a8c:	9005      	str	r0, [sp, #20]
 8026a8e:	0d52      	lsrs	r2, r2, #21
 8026a90:	d100      	bne.n	8026a94 <_dtoa_r+0xec>
 8026a92:	e07b      	b.n	8026b8c <_dtoa_r+0x1e4>
 8026a94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026a96:	9618      	str	r6, [sp, #96]	@ 0x60
 8026a98:	0319      	lsls	r1, r3, #12
 8026a9a:	4b9c      	ldr	r3, [pc, #624]	@ (8026d0c <_dtoa_r+0x364>)
 8026a9c:	0b09      	lsrs	r1, r1, #12
 8026a9e:	430b      	orrs	r3, r1
 8026aa0:	499b      	ldr	r1, [pc, #620]	@ (8026d10 <_dtoa_r+0x368>)
 8026aa2:	1857      	adds	r7, r2, r1
 8026aa4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026aa6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026aa8:	0019      	movs	r1, r3
 8026aaa:	2200      	movs	r2, #0
 8026aac:	4b99      	ldr	r3, [pc, #612]	@ (8026d14 <_dtoa_r+0x36c>)
 8026aae:	f7dc fa37 	bl	8002f20 <__aeabi_dsub>
 8026ab2:	4a99      	ldr	r2, [pc, #612]	@ (8026d18 <_dtoa_r+0x370>)
 8026ab4:	4b99      	ldr	r3, [pc, #612]	@ (8026d1c <_dtoa_r+0x374>)
 8026ab6:	f7db ff4d 	bl	8002954 <__aeabi_dmul>
 8026aba:	4a99      	ldr	r2, [pc, #612]	@ (8026d20 <_dtoa_r+0x378>)
 8026abc:	4b99      	ldr	r3, [pc, #612]	@ (8026d24 <_dtoa_r+0x37c>)
 8026abe:	f7da ff49 	bl	8001954 <__aeabi_dadd>
 8026ac2:	0004      	movs	r4, r0
 8026ac4:	0038      	movs	r0, r7
 8026ac6:	000d      	movs	r5, r1
 8026ac8:	f7dc fe92 	bl	80037f0 <__aeabi_i2d>
 8026acc:	4a96      	ldr	r2, [pc, #600]	@ (8026d28 <_dtoa_r+0x380>)
 8026ace:	4b97      	ldr	r3, [pc, #604]	@ (8026d2c <_dtoa_r+0x384>)
 8026ad0:	f7db ff40 	bl	8002954 <__aeabi_dmul>
 8026ad4:	0002      	movs	r2, r0
 8026ad6:	000b      	movs	r3, r1
 8026ad8:	0020      	movs	r0, r4
 8026ada:	0029      	movs	r1, r5
 8026adc:	f7da ff3a 	bl	8001954 <__aeabi_dadd>
 8026ae0:	0004      	movs	r4, r0
 8026ae2:	000d      	movs	r5, r1
 8026ae4:	f7dc fe48 	bl	8003778 <__aeabi_d2iz>
 8026ae8:	2200      	movs	r2, #0
 8026aea:	9004      	str	r0, [sp, #16]
 8026aec:	2300      	movs	r3, #0
 8026aee:	0020      	movs	r0, r4
 8026af0:	0029      	movs	r1, r5
 8026af2:	f7d9 fce3 	bl	80004bc <__aeabi_dcmplt>
 8026af6:	2800      	cmp	r0, #0
 8026af8:	d00b      	beq.n	8026b12 <_dtoa_r+0x16a>
 8026afa:	9804      	ldr	r0, [sp, #16]
 8026afc:	f7dc fe78 	bl	80037f0 <__aeabi_i2d>
 8026b00:	002b      	movs	r3, r5
 8026b02:	0022      	movs	r2, r4
 8026b04:	f7d9 fcd4 	bl	80004b0 <__aeabi_dcmpeq>
 8026b08:	4243      	negs	r3, r0
 8026b0a:	4158      	adcs	r0, r3
 8026b0c:	9b04      	ldr	r3, [sp, #16]
 8026b0e:	1a1b      	subs	r3, r3, r0
 8026b10:	9304      	str	r3, [sp, #16]
 8026b12:	2301      	movs	r3, #1
 8026b14:	9315      	str	r3, [sp, #84]	@ 0x54
 8026b16:	9b04      	ldr	r3, [sp, #16]
 8026b18:	2b16      	cmp	r3, #22
 8026b1a:	d810      	bhi.n	8026b3e <_dtoa_r+0x196>
 8026b1c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026b1e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026b20:	9a04      	ldr	r2, [sp, #16]
 8026b22:	4b83      	ldr	r3, [pc, #524]	@ (8026d30 <_dtoa_r+0x388>)
 8026b24:	00d2      	lsls	r2, r2, #3
 8026b26:	189b      	adds	r3, r3, r2
 8026b28:	681a      	ldr	r2, [r3, #0]
 8026b2a:	685b      	ldr	r3, [r3, #4]
 8026b2c:	f7d9 fcc6 	bl	80004bc <__aeabi_dcmplt>
 8026b30:	2800      	cmp	r0, #0
 8026b32:	d047      	beq.n	8026bc4 <_dtoa_r+0x21c>
 8026b34:	9b04      	ldr	r3, [sp, #16]
 8026b36:	3b01      	subs	r3, #1
 8026b38:	9304      	str	r3, [sp, #16]
 8026b3a:	2300      	movs	r3, #0
 8026b3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8026b3e:	2200      	movs	r2, #0
 8026b40:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8026b42:	9206      	str	r2, [sp, #24]
 8026b44:	1bdb      	subs	r3, r3, r7
 8026b46:	1e5a      	subs	r2, r3, #1
 8026b48:	d53e      	bpl.n	8026bc8 <_dtoa_r+0x220>
 8026b4a:	2201      	movs	r2, #1
 8026b4c:	1ad3      	subs	r3, r2, r3
 8026b4e:	9306      	str	r3, [sp, #24]
 8026b50:	2300      	movs	r3, #0
 8026b52:	930d      	str	r3, [sp, #52]	@ 0x34
 8026b54:	9b04      	ldr	r3, [sp, #16]
 8026b56:	2b00      	cmp	r3, #0
 8026b58:	db38      	blt.n	8026bcc <_dtoa_r+0x224>
 8026b5a:	9a04      	ldr	r2, [sp, #16]
 8026b5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026b5e:	4694      	mov	ip, r2
 8026b60:	4463      	add	r3, ip
 8026b62:	930d      	str	r3, [sp, #52]	@ 0x34
 8026b64:	2300      	movs	r3, #0
 8026b66:	9214      	str	r2, [sp, #80]	@ 0x50
 8026b68:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026b6a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026b6c:	2401      	movs	r4, #1
 8026b6e:	2b09      	cmp	r3, #9
 8026b70:	d862      	bhi.n	8026c38 <_dtoa_r+0x290>
 8026b72:	2b05      	cmp	r3, #5
 8026b74:	dd02      	ble.n	8026b7c <_dtoa_r+0x1d4>
 8026b76:	2400      	movs	r4, #0
 8026b78:	3b04      	subs	r3, #4
 8026b7a:	9322      	str	r3, [sp, #136]	@ 0x88
 8026b7c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8026b7e:	1e98      	subs	r0, r3, #2
 8026b80:	2803      	cmp	r0, #3
 8026b82:	d863      	bhi.n	8026c4c <_dtoa_r+0x2a4>
 8026b84:	f7d9 fafa 	bl	800017c <__gnu_thumb1_case_uqi>
 8026b88:	2b385654 	.word	0x2b385654
 8026b8c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026b8e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8026b90:	18f6      	adds	r6, r6, r3
 8026b92:	4b68      	ldr	r3, [pc, #416]	@ (8026d34 <_dtoa_r+0x38c>)
 8026b94:	18f2      	adds	r2, r6, r3
 8026b96:	2a20      	cmp	r2, #32
 8026b98:	dd0f      	ble.n	8026bba <_dtoa_r+0x212>
 8026b9a:	2340      	movs	r3, #64	@ 0x40
 8026b9c:	1a9b      	subs	r3, r3, r2
 8026b9e:	409f      	lsls	r7, r3
 8026ba0:	4b65      	ldr	r3, [pc, #404]	@ (8026d38 <_dtoa_r+0x390>)
 8026ba2:	0038      	movs	r0, r7
 8026ba4:	18f3      	adds	r3, r6, r3
 8026ba6:	40dc      	lsrs	r4, r3
 8026ba8:	4320      	orrs	r0, r4
 8026baa:	f7dc fe4f 	bl	800384c <__aeabi_ui2d>
 8026bae:	2201      	movs	r2, #1
 8026bb0:	4b62      	ldr	r3, [pc, #392]	@ (8026d3c <_dtoa_r+0x394>)
 8026bb2:	1e77      	subs	r7, r6, #1
 8026bb4:	18cb      	adds	r3, r1, r3
 8026bb6:	9218      	str	r2, [sp, #96]	@ 0x60
 8026bb8:	e776      	b.n	8026aa8 <_dtoa_r+0x100>
 8026bba:	2320      	movs	r3, #32
 8026bbc:	0020      	movs	r0, r4
 8026bbe:	1a9b      	subs	r3, r3, r2
 8026bc0:	4098      	lsls	r0, r3
 8026bc2:	e7f2      	b.n	8026baa <_dtoa_r+0x202>
 8026bc4:	9015      	str	r0, [sp, #84]	@ 0x54
 8026bc6:	e7ba      	b.n	8026b3e <_dtoa_r+0x196>
 8026bc8:	920d      	str	r2, [sp, #52]	@ 0x34
 8026bca:	e7c3      	b.n	8026b54 <_dtoa_r+0x1ac>
 8026bcc:	9b06      	ldr	r3, [sp, #24]
 8026bce:	9a04      	ldr	r2, [sp, #16]
 8026bd0:	1a9b      	subs	r3, r3, r2
 8026bd2:	9306      	str	r3, [sp, #24]
 8026bd4:	4253      	negs	r3, r2
 8026bd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026bd8:	2300      	movs	r3, #0
 8026bda:	9314      	str	r3, [sp, #80]	@ 0x50
 8026bdc:	e7c5      	b.n	8026b6a <_dtoa_r+0x1c2>
 8026bde:	2301      	movs	r3, #1
 8026be0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8026be2:	9310      	str	r3, [sp, #64]	@ 0x40
 8026be4:	4694      	mov	ip, r2
 8026be6:	9b04      	ldr	r3, [sp, #16]
 8026be8:	4463      	add	r3, ip
 8026bea:	930e      	str	r3, [sp, #56]	@ 0x38
 8026bec:	3301      	adds	r3, #1
 8026bee:	9309      	str	r3, [sp, #36]	@ 0x24
 8026bf0:	2b00      	cmp	r3, #0
 8026bf2:	dc08      	bgt.n	8026c06 <_dtoa_r+0x25e>
 8026bf4:	2301      	movs	r3, #1
 8026bf6:	e006      	b.n	8026c06 <_dtoa_r+0x25e>
 8026bf8:	2301      	movs	r3, #1
 8026bfa:	9310      	str	r3, [sp, #64]	@ 0x40
 8026bfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026bfe:	2b00      	cmp	r3, #0
 8026c00:	dd28      	ble.n	8026c54 <_dtoa_r+0x2ac>
 8026c02:	930e      	str	r3, [sp, #56]	@ 0x38
 8026c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8026c06:	9a03      	ldr	r2, [sp, #12]
 8026c08:	2100      	movs	r1, #0
 8026c0a:	69d0      	ldr	r0, [r2, #28]
 8026c0c:	2204      	movs	r2, #4
 8026c0e:	0015      	movs	r5, r2
 8026c10:	3514      	adds	r5, #20
 8026c12:	429d      	cmp	r5, r3
 8026c14:	d923      	bls.n	8026c5e <_dtoa_r+0x2b6>
 8026c16:	6041      	str	r1, [r0, #4]
 8026c18:	9803      	ldr	r0, [sp, #12]
 8026c1a:	f001 f927 	bl	8027e6c <_Balloc>
 8026c1e:	9008      	str	r0, [sp, #32]
 8026c20:	2800      	cmp	r0, #0
 8026c22:	d11f      	bne.n	8026c64 <_dtoa_r+0x2bc>
 8026c24:	21b0      	movs	r1, #176	@ 0xb0
 8026c26:	4b46      	ldr	r3, [pc, #280]	@ (8026d40 <_dtoa_r+0x398>)
 8026c28:	4831      	ldr	r0, [pc, #196]	@ (8026cf0 <_dtoa_r+0x348>)
 8026c2a:	9a08      	ldr	r2, [sp, #32]
 8026c2c:	31ff      	adds	r1, #255	@ 0xff
 8026c2e:	e6d0      	b.n	80269d2 <_dtoa_r+0x2a>
 8026c30:	2300      	movs	r3, #0
 8026c32:	e7e2      	b.n	8026bfa <_dtoa_r+0x252>
 8026c34:	2300      	movs	r3, #0
 8026c36:	e7d3      	b.n	8026be0 <_dtoa_r+0x238>
 8026c38:	2300      	movs	r3, #0
 8026c3a:	9410      	str	r4, [sp, #64]	@ 0x40
 8026c3c:	9322      	str	r3, [sp, #136]	@ 0x88
 8026c3e:	3b01      	subs	r3, #1
 8026c40:	2200      	movs	r2, #0
 8026c42:	930e      	str	r3, [sp, #56]	@ 0x38
 8026c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8026c46:	3313      	adds	r3, #19
 8026c48:	9223      	str	r2, [sp, #140]	@ 0x8c
 8026c4a:	e7dc      	b.n	8026c06 <_dtoa_r+0x25e>
 8026c4c:	2301      	movs	r3, #1
 8026c4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8026c50:	3b02      	subs	r3, #2
 8026c52:	e7f5      	b.n	8026c40 <_dtoa_r+0x298>
 8026c54:	2301      	movs	r3, #1
 8026c56:	001a      	movs	r2, r3
 8026c58:	930e      	str	r3, [sp, #56]	@ 0x38
 8026c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8026c5c:	e7f4      	b.n	8026c48 <_dtoa_r+0x2a0>
 8026c5e:	3101      	adds	r1, #1
 8026c60:	0052      	lsls	r2, r2, #1
 8026c62:	e7d4      	b.n	8026c0e <_dtoa_r+0x266>
 8026c64:	9b03      	ldr	r3, [sp, #12]
 8026c66:	9a08      	ldr	r2, [sp, #32]
 8026c68:	69db      	ldr	r3, [r3, #28]
 8026c6a:	601a      	str	r2, [r3, #0]
 8026c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026c6e:	2b0e      	cmp	r3, #14
 8026c70:	d900      	bls.n	8026c74 <_dtoa_r+0x2cc>
 8026c72:	e0d6      	b.n	8026e22 <_dtoa_r+0x47a>
 8026c74:	2c00      	cmp	r4, #0
 8026c76:	d100      	bne.n	8026c7a <_dtoa_r+0x2d2>
 8026c78:	e0d3      	b.n	8026e22 <_dtoa_r+0x47a>
 8026c7a:	9b04      	ldr	r3, [sp, #16]
 8026c7c:	2b00      	cmp	r3, #0
 8026c7e:	dd63      	ble.n	8026d48 <_dtoa_r+0x3a0>
 8026c80:	210f      	movs	r1, #15
 8026c82:	9a04      	ldr	r2, [sp, #16]
 8026c84:	4b2a      	ldr	r3, [pc, #168]	@ (8026d30 <_dtoa_r+0x388>)
 8026c86:	400a      	ands	r2, r1
 8026c88:	00d2      	lsls	r2, r2, #3
 8026c8a:	189b      	adds	r3, r3, r2
 8026c8c:	681e      	ldr	r6, [r3, #0]
 8026c8e:	685f      	ldr	r7, [r3, #4]
 8026c90:	9b04      	ldr	r3, [sp, #16]
 8026c92:	2402      	movs	r4, #2
 8026c94:	111d      	asrs	r5, r3, #4
 8026c96:	05db      	lsls	r3, r3, #23
 8026c98:	d50a      	bpl.n	8026cb0 <_dtoa_r+0x308>
 8026c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8026d44 <_dtoa_r+0x39c>)
 8026c9c:	400d      	ands	r5, r1
 8026c9e:	6a1a      	ldr	r2, [r3, #32]
 8026ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8026ca2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026ca4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026ca6:	f7db fa1b 	bl	80020e0 <__aeabi_ddiv>
 8026caa:	900a      	str	r0, [sp, #40]	@ 0x28
 8026cac:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026cae:	3401      	adds	r4, #1
 8026cb0:	4b24      	ldr	r3, [pc, #144]	@ (8026d44 <_dtoa_r+0x39c>)
 8026cb2:	930c      	str	r3, [sp, #48]	@ 0x30
 8026cb4:	2d00      	cmp	r5, #0
 8026cb6:	d108      	bne.n	8026cca <_dtoa_r+0x322>
 8026cb8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026cba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026cbc:	0032      	movs	r2, r6
 8026cbe:	003b      	movs	r3, r7
 8026cc0:	f7db fa0e 	bl	80020e0 <__aeabi_ddiv>
 8026cc4:	900a      	str	r0, [sp, #40]	@ 0x28
 8026cc6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026cc8:	e059      	b.n	8026d7e <_dtoa_r+0x3d6>
 8026cca:	2301      	movs	r3, #1
 8026ccc:	421d      	tst	r5, r3
 8026cce:	d009      	beq.n	8026ce4 <_dtoa_r+0x33c>
 8026cd0:	18e4      	adds	r4, r4, r3
 8026cd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026cd4:	0030      	movs	r0, r6
 8026cd6:	681a      	ldr	r2, [r3, #0]
 8026cd8:	685b      	ldr	r3, [r3, #4]
 8026cda:	0039      	movs	r1, r7
 8026cdc:	f7db fe3a 	bl	8002954 <__aeabi_dmul>
 8026ce0:	0006      	movs	r6, r0
 8026ce2:	000f      	movs	r7, r1
 8026ce4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026ce6:	106d      	asrs	r5, r5, #1
 8026ce8:	3308      	adds	r3, #8
 8026cea:	e7e2      	b.n	8026cb2 <_dtoa_r+0x30a>
 8026cec:	0802ef8b 	.word	0x0802ef8b
 8026cf0:	0802efa2 	.word	0x0802efa2
 8026cf4:	7ff00000 	.word	0x7ff00000
 8026cf8:	0000270f 	.word	0x0000270f
 8026cfc:	0802ef87 	.word	0x0802ef87
 8026d00:	0802ef8a 	.word	0x0802ef8a
 8026d04:	0802ef53 	.word	0x0802ef53
 8026d08:	0802ef52 	.word	0x0802ef52
 8026d0c:	3ff00000 	.word	0x3ff00000
 8026d10:	fffffc01 	.word	0xfffffc01
 8026d14:	3ff80000 	.word	0x3ff80000
 8026d18:	636f4361 	.word	0x636f4361
 8026d1c:	3fd287a7 	.word	0x3fd287a7
 8026d20:	8b60c8b3 	.word	0x8b60c8b3
 8026d24:	3fc68a28 	.word	0x3fc68a28
 8026d28:	509f79fb 	.word	0x509f79fb
 8026d2c:	3fd34413 	.word	0x3fd34413
 8026d30:	0802f2a0 	.word	0x0802f2a0
 8026d34:	00000432 	.word	0x00000432
 8026d38:	00000412 	.word	0x00000412
 8026d3c:	fe100000 	.word	0xfe100000
 8026d40:	0802effa 	.word	0x0802effa
 8026d44:	0802f278 	.word	0x0802f278
 8026d48:	9b04      	ldr	r3, [sp, #16]
 8026d4a:	2402      	movs	r4, #2
 8026d4c:	2b00      	cmp	r3, #0
 8026d4e:	d016      	beq.n	8026d7e <_dtoa_r+0x3d6>
 8026d50:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8026d52:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8026d54:	220f      	movs	r2, #15
 8026d56:	425d      	negs	r5, r3
 8026d58:	402a      	ands	r2, r5
 8026d5a:	4bd5      	ldr	r3, [pc, #852]	@ (80270b0 <_dtoa_r+0x708>)
 8026d5c:	00d2      	lsls	r2, r2, #3
 8026d5e:	189b      	adds	r3, r3, r2
 8026d60:	681a      	ldr	r2, [r3, #0]
 8026d62:	685b      	ldr	r3, [r3, #4]
 8026d64:	f7db fdf6 	bl	8002954 <__aeabi_dmul>
 8026d68:	2701      	movs	r7, #1
 8026d6a:	2300      	movs	r3, #0
 8026d6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8026d6e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026d70:	4ed0      	ldr	r6, [pc, #832]	@ (80270b4 <_dtoa_r+0x70c>)
 8026d72:	112d      	asrs	r5, r5, #4
 8026d74:	2d00      	cmp	r5, #0
 8026d76:	d000      	beq.n	8026d7a <_dtoa_r+0x3d2>
 8026d78:	e095      	b.n	8026ea6 <_dtoa_r+0x4fe>
 8026d7a:	2b00      	cmp	r3, #0
 8026d7c:	d1a2      	bne.n	8026cc4 <_dtoa_r+0x31c>
 8026d7e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8026d80:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8026d82:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8026d84:	2b00      	cmp	r3, #0
 8026d86:	d100      	bne.n	8026d8a <_dtoa_r+0x3e2>
 8026d88:	e098      	b.n	8026ebc <_dtoa_r+0x514>
 8026d8a:	2200      	movs	r2, #0
 8026d8c:	0030      	movs	r0, r6
 8026d8e:	0039      	movs	r1, r7
 8026d90:	4bc9      	ldr	r3, [pc, #804]	@ (80270b8 <_dtoa_r+0x710>)
 8026d92:	f7d9 fb93 	bl	80004bc <__aeabi_dcmplt>
 8026d96:	2800      	cmp	r0, #0
 8026d98:	d100      	bne.n	8026d9c <_dtoa_r+0x3f4>
 8026d9a:	e08f      	b.n	8026ebc <_dtoa_r+0x514>
 8026d9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026d9e:	2b00      	cmp	r3, #0
 8026da0:	d100      	bne.n	8026da4 <_dtoa_r+0x3fc>
 8026da2:	e08b      	b.n	8026ebc <_dtoa_r+0x514>
 8026da4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026da6:	2b00      	cmp	r3, #0
 8026da8:	dd37      	ble.n	8026e1a <_dtoa_r+0x472>
 8026daa:	9b04      	ldr	r3, [sp, #16]
 8026dac:	2200      	movs	r2, #0
 8026dae:	3b01      	subs	r3, #1
 8026db0:	930c      	str	r3, [sp, #48]	@ 0x30
 8026db2:	0030      	movs	r0, r6
 8026db4:	4bc1      	ldr	r3, [pc, #772]	@ (80270bc <_dtoa_r+0x714>)
 8026db6:	0039      	movs	r1, r7
 8026db8:	f7db fdcc 	bl	8002954 <__aeabi_dmul>
 8026dbc:	900a      	str	r0, [sp, #40]	@ 0x28
 8026dbe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026dc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8026dc2:	3401      	adds	r4, #1
 8026dc4:	0020      	movs	r0, r4
 8026dc6:	9311      	str	r3, [sp, #68]	@ 0x44
 8026dc8:	f7dc fd12 	bl	80037f0 <__aeabi_i2d>
 8026dcc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026dce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026dd0:	f7db fdc0 	bl	8002954 <__aeabi_dmul>
 8026dd4:	4bba      	ldr	r3, [pc, #744]	@ (80270c0 <_dtoa_r+0x718>)
 8026dd6:	2200      	movs	r2, #0
 8026dd8:	f7da fdbc 	bl	8001954 <__aeabi_dadd>
 8026ddc:	4bb9      	ldr	r3, [pc, #740]	@ (80270c4 <_dtoa_r+0x71c>)
 8026dde:	0006      	movs	r6, r0
 8026de0:	18cf      	adds	r7, r1, r3
 8026de2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026de4:	2b00      	cmp	r3, #0
 8026de6:	d16d      	bne.n	8026ec4 <_dtoa_r+0x51c>
 8026de8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026dea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026dec:	2200      	movs	r2, #0
 8026dee:	4bb6      	ldr	r3, [pc, #728]	@ (80270c8 <_dtoa_r+0x720>)
 8026df0:	f7dc f896 	bl	8002f20 <__aeabi_dsub>
 8026df4:	0032      	movs	r2, r6
 8026df6:	003b      	movs	r3, r7
 8026df8:	0004      	movs	r4, r0
 8026dfa:	000d      	movs	r5, r1
 8026dfc:	f7d9 fb72 	bl	80004e4 <__aeabi_dcmpgt>
 8026e00:	2800      	cmp	r0, #0
 8026e02:	d000      	beq.n	8026e06 <_dtoa_r+0x45e>
 8026e04:	e2b6      	b.n	8027374 <_dtoa_r+0x9cc>
 8026e06:	2180      	movs	r1, #128	@ 0x80
 8026e08:	0609      	lsls	r1, r1, #24
 8026e0a:	187b      	adds	r3, r7, r1
 8026e0c:	0032      	movs	r2, r6
 8026e0e:	0020      	movs	r0, r4
 8026e10:	0029      	movs	r1, r5
 8026e12:	f7d9 fb53 	bl	80004bc <__aeabi_dcmplt>
 8026e16:	2800      	cmp	r0, #0
 8026e18:	d128      	bne.n	8026e6c <_dtoa_r+0x4c4>
 8026e1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8026e1c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8026e20:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026e22:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8026e24:	2b00      	cmp	r3, #0
 8026e26:	da00      	bge.n	8026e2a <_dtoa_r+0x482>
 8026e28:	e174      	b.n	8027114 <_dtoa_r+0x76c>
 8026e2a:	9a04      	ldr	r2, [sp, #16]
 8026e2c:	2a0e      	cmp	r2, #14
 8026e2e:	dd00      	ble.n	8026e32 <_dtoa_r+0x48a>
 8026e30:	e170      	b.n	8027114 <_dtoa_r+0x76c>
 8026e32:	4b9f      	ldr	r3, [pc, #636]	@ (80270b0 <_dtoa_r+0x708>)
 8026e34:	00d2      	lsls	r2, r2, #3
 8026e36:	189b      	adds	r3, r3, r2
 8026e38:	685c      	ldr	r4, [r3, #4]
 8026e3a:	681b      	ldr	r3, [r3, #0]
 8026e3c:	9306      	str	r3, [sp, #24]
 8026e3e:	9407      	str	r4, [sp, #28]
 8026e40:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026e42:	2b00      	cmp	r3, #0
 8026e44:	db00      	blt.n	8026e48 <_dtoa_r+0x4a0>
 8026e46:	e0e7      	b.n	8027018 <_dtoa_r+0x670>
 8026e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e4a:	2b00      	cmp	r3, #0
 8026e4c:	dd00      	ble.n	8026e50 <_dtoa_r+0x4a8>
 8026e4e:	e0e3      	b.n	8027018 <_dtoa_r+0x670>
 8026e50:	d10c      	bne.n	8026e6c <_dtoa_r+0x4c4>
 8026e52:	9806      	ldr	r0, [sp, #24]
 8026e54:	9907      	ldr	r1, [sp, #28]
 8026e56:	2200      	movs	r2, #0
 8026e58:	4b9b      	ldr	r3, [pc, #620]	@ (80270c8 <_dtoa_r+0x720>)
 8026e5a:	f7db fd7b 	bl	8002954 <__aeabi_dmul>
 8026e5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026e60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026e62:	f7d9 fb49 	bl	80004f8 <__aeabi_dcmpge>
 8026e66:	2800      	cmp	r0, #0
 8026e68:	d100      	bne.n	8026e6c <_dtoa_r+0x4c4>
 8026e6a:	e286      	b.n	802737a <_dtoa_r+0x9d2>
 8026e6c:	2600      	movs	r6, #0
 8026e6e:	0037      	movs	r7, r6
 8026e70:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8026e72:	9c08      	ldr	r4, [sp, #32]
 8026e74:	43db      	mvns	r3, r3
 8026e76:	930c      	str	r3, [sp, #48]	@ 0x30
 8026e78:	9704      	str	r7, [sp, #16]
 8026e7a:	2700      	movs	r7, #0
 8026e7c:	0031      	movs	r1, r6
 8026e7e:	9803      	ldr	r0, [sp, #12]
 8026e80:	f001 f838 	bl	8027ef4 <_Bfree>
 8026e84:	9b04      	ldr	r3, [sp, #16]
 8026e86:	2b00      	cmp	r3, #0
 8026e88:	d100      	bne.n	8026e8c <_dtoa_r+0x4e4>
 8026e8a:	e0bb      	b.n	8027004 <_dtoa_r+0x65c>
 8026e8c:	2f00      	cmp	r7, #0
 8026e8e:	d005      	beq.n	8026e9c <_dtoa_r+0x4f4>
 8026e90:	429f      	cmp	r7, r3
 8026e92:	d003      	beq.n	8026e9c <_dtoa_r+0x4f4>
 8026e94:	0039      	movs	r1, r7
 8026e96:	9803      	ldr	r0, [sp, #12]
 8026e98:	f001 f82c 	bl	8027ef4 <_Bfree>
 8026e9c:	9904      	ldr	r1, [sp, #16]
 8026e9e:	9803      	ldr	r0, [sp, #12]
 8026ea0:	f001 f828 	bl	8027ef4 <_Bfree>
 8026ea4:	e0ae      	b.n	8027004 <_dtoa_r+0x65c>
 8026ea6:	423d      	tst	r5, r7
 8026ea8:	d005      	beq.n	8026eb6 <_dtoa_r+0x50e>
 8026eaa:	6832      	ldr	r2, [r6, #0]
 8026eac:	6873      	ldr	r3, [r6, #4]
 8026eae:	f7db fd51 	bl	8002954 <__aeabi_dmul>
 8026eb2:	003b      	movs	r3, r7
 8026eb4:	3401      	adds	r4, #1
 8026eb6:	106d      	asrs	r5, r5, #1
 8026eb8:	3608      	adds	r6, #8
 8026eba:	e75b      	b.n	8026d74 <_dtoa_r+0x3cc>
 8026ebc:	9b04      	ldr	r3, [sp, #16]
 8026ebe:	930c      	str	r3, [sp, #48]	@ 0x30
 8026ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026ec2:	e77f      	b.n	8026dc4 <_dtoa_r+0x41c>
 8026ec4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026ec6:	4b7a      	ldr	r3, [pc, #488]	@ (80270b0 <_dtoa_r+0x708>)
 8026ec8:	3a01      	subs	r2, #1
 8026eca:	00d2      	lsls	r2, r2, #3
 8026ecc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8026ece:	189b      	adds	r3, r3, r2
 8026ed0:	681a      	ldr	r2, [r3, #0]
 8026ed2:	685b      	ldr	r3, [r3, #4]
 8026ed4:	2900      	cmp	r1, #0
 8026ed6:	d04c      	beq.n	8026f72 <_dtoa_r+0x5ca>
 8026ed8:	2000      	movs	r0, #0
 8026eda:	497c      	ldr	r1, [pc, #496]	@ (80270cc <_dtoa_r+0x724>)
 8026edc:	f7db f900 	bl	80020e0 <__aeabi_ddiv>
 8026ee0:	0032      	movs	r2, r6
 8026ee2:	003b      	movs	r3, r7
 8026ee4:	f7dc f81c 	bl	8002f20 <__aeabi_dsub>
 8026ee8:	9a08      	ldr	r2, [sp, #32]
 8026eea:	0006      	movs	r6, r0
 8026eec:	4694      	mov	ip, r2
 8026eee:	000f      	movs	r7, r1
 8026ef0:	9b08      	ldr	r3, [sp, #32]
 8026ef2:	9316      	str	r3, [sp, #88]	@ 0x58
 8026ef4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026ef6:	4463      	add	r3, ip
 8026ef8:	9311      	str	r3, [sp, #68]	@ 0x44
 8026efa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026efc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026efe:	f7dc fc3b 	bl	8003778 <__aeabi_d2iz>
 8026f02:	0005      	movs	r5, r0
 8026f04:	f7dc fc74 	bl	80037f0 <__aeabi_i2d>
 8026f08:	0002      	movs	r2, r0
 8026f0a:	000b      	movs	r3, r1
 8026f0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026f0e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026f10:	f7dc f806 	bl	8002f20 <__aeabi_dsub>
 8026f14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026f16:	3530      	adds	r5, #48	@ 0x30
 8026f18:	1c5c      	adds	r4, r3, #1
 8026f1a:	701d      	strb	r5, [r3, #0]
 8026f1c:	0032      	movs	r2, r6
 8026f1e:	003b      	movs	r3, r7
 8026f20:	900a      	str	r0, [sp, #40]	@ 0x28
 8026f22:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026f24:	f7d9 faca 	bl	80004bc <__aeabi_dcmplt>
 8026f28:	2800      	cmp	r0, #0
 8026f2a:	d16b      	bne.n	8027004 <_dtoa_r+0x65c>
 8026f2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026f30:	2000      	movs	r0, #0
 8026f32:	4961      	ldr	r1, [pc, #388]	@ (80270b8 <_dtoa_r+0x710>)
 8026f34:	f7db fff4 	bl	8002f20 <__aeabi_dsub>
 8026f38:	0032      	movs	r2, r6
 8026f3a:	003b      	movs	r3, r7
 8026f3c:	f7d9 fabe 	bl	80004bc <__aeabi_dcmplt>
 8026f40:	2800      	cmp	r0, #0
 8026f42:	d000      	beq.n	8026f46 <_dtoa_r+0x59e>
 8026f44:	e0c6      	b.n	80270d4 <_dtoa_r+0x72c>
 8026f46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026f48:	42a3      	cmp	r3, r4
 8026f4a:	d100      	bne.n	8026f4e <_dtoa_r+0x5a6>
 8026f4c:	e765      	b.n	8026e1a <_dtoa_r+0x472>
 8026f4e:	2200      	movs	r2, #0
 8026f50:	0030      	movs	r0, r6
 8026f52:	0039      	movs	r1, r7
 8026f54:	4b59      	ldr	r3, [pc, #356]	@ (80270bc <_dtoa_r+0x714>)
 8026f56:	f7db fcfd 	bl	8002954 <__aeabi_dmul>
 8026f5a:	2200      	movs	r2, #0
 8026f5c:	0006      	movs	r6, r0
 8026f5e:	000f      	movs	r7, r1
 8026f60:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026f62:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026f64:	4b55      	ldr	r3, [pc, #340]	@ (80270bc <_dtoa_r+0x714>)
 8026f66:	f7db fcf5 	bl	8002954 <__aeabi_dmul>
 8026f6a:	9416      	str	r4, [sp, #88]	@ 0x58
 8026f6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8026f6e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026f70:	e7c3      	b.n	8026efa <_dtoa_r+0x552>
 8026f72:	0030      	movs	r0, r6
 8026f74:	0039      	movs	r1, r7
 8026f76:	f7db fced 	bl	8002954 <__aeabi_dmul>
 8026f7a:	9d08      	ldr	r5, [sp, #32]
 8026f7c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026f7e:	002b      	movs	r3, r5
 8026f80:	4694      	mov	ip, r2
 8026f82:	9016      	str	r0, [sp, #88]	@ 0x58
 8026f84:	9117      	str	r1, [sp, #92]	@ 0x5c
 8026f86:	4463      	add	r3, ip
 8026f88:	9319      	str	r3, [sp, #100]	@ 0x64
 8026f8a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026f8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026f8e:	f7dc fbf3 	bl	8003778 <__aeabi_d2iz>
 8026f92:	0004      	movs	r4, r0
 8026f94:	f7dc fc2c 	bl	80037f0 <__aeabi_i2d>
 8026f98:	000b      	movs	r3, r1
 8026f9a:	0002      	movs	r2, r0
 8026f9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8026f9e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8026fa0:	f7db ffbe 	bl	8002f20 <__aeabi_dsub>
 8026fa4:	3430      	adds	r4, #48	@ 0x30
 8026fa6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8026fa8:	702c      	strb	r4, [r5, #0]
 8026faa:	3501      	adds	r5, #1
 8026fac:	0006      	movs	r6, r0
 8026fae:	000f      	movs	r7, r1
 8026fb0:	42ab      	cmp	r3, r5
 8026fb2:	d12a      	bne.n	802700a <_dtoa_r+0x662>
 8026fb4:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8026fb6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8026fb8:	9b08      	ldr	r3, [sp, #32]
 8026fba:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026fbc:	469c      	mov	ip, r3
 8026fbe:	2200      	movs	r2, #0
 8026fc0:	4b42      	ldr	r3, [pc, #264]	@ (80270cc <_dtoa_r+0x724>)
 8026fc2:	4464      	add	r4, ip
 8026fc4:	f7da fcc6 	bl	8001954 <__aeabi_dadd>
 8026fc8:	0002      	movs	r2, r0
 8026fca:	000b      	movs	r3, r1
 8026fcc:	0030      	movs	r0, r6
 8026fce:	0039      	movs	r1, r7
 8026fd0:	f7d9 fa88 	bl	80004e4 <__aeabi_dcmpgt>
 8026fd4:	2800      	cmp	r0, #0
 8026fd6:	d000      	beq.n	8026fda <_dtoa_r+0x632>
 8026fd8:	e07c      	b.n	80270d4 <_dtoa_r+0x72c>
 8026fda:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8026fdc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026fde:	2000      	movs	r0, #0
 8026fe0:	493a      	ldr	r1, [pc, #232]	@ (80270cc <_dtoa_r+0x724>)
 8026fe2:	f7db ff9d 	bl	8002f20 <__aeabi_dsub>
 8026fe6:	0002      	movs	r2, r0
 8026fe8:	000b      	movs	r3, r1
 8026fea:	0030      	movs	r0, r6
 8026fec:	0039      	movs	r1, r7
 8026fee:	f7d9 fa65 	bl	80004bc <__aeabi_dcmplt>
 8026ff2:	2800      	cmp	r0, #0
 8026ff4:	d100      	bne.n	8026ff8 <_dtoa_r+0x650>
 8026ff6:	e710      	b.n	8026e1a <_dtoa_r+0x472>
 8026ff8:	0023      	movs	r3, r4
 8026ffa:	3c01      	subs	r4, #1
 8026ffc:	7822      	ldrb	r2, [r4, #0]
 8026ffe:	2a30      	cmp	r2, #48	@ 0x30
 8027000:	d0fa      	beq.n	8026ff8 <_dtoa_r+0x650>
 8027002:	001c      	movs	r4, r3
 8027004:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027006:	9304      	str	r3, [sp, #16]
 8027008:	e042      	b.n	8027090 <_dtoa_r+0x6e8>
 802700a:	2200      	movs	r2, #0
 802700c:	4b2b      	ldr	r3, [pc, #172]	@ (80270bc <_dtoa_r+0x714>)
 802700e:	f7db fca1 	bl	8002954 <__aeabi_dmul>
 8027012:	900a      	str	r0, [sp, #40]	@ 0x28
 8027014:	910b      	str	r1, [sp, #44]	@ 0x2c
 8027016:	e7b8      	b.n	8026f8a <_dtoa_r+0x5e2>
 8027018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802701a:	9d08      	ldr	r5, [sp, #32]
 802701c:	3b01      	subs	r3, #1
 802701e:	195b      	adds	r3, r3, r5
 8027020:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8027022:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8027024:	930a      	str	r3, [sp, #40]	@ 0x28
 8027026:	9a06      	ldr	r2, [sp, #24]
 8027028:	9b07      	ldr	r3, [sp, #28]
 802702a:	0030      	movs	r0, r6
 802702c:	0039      	movs	r1, r7
 802702e:	f7db f857 	bl	80020e0 <__aeabi_ddiv>
 8027032:	f7dc fba1 	bl	8003778 <__aeabi_d2iz>
 8027036:	9009      	str	r0, [sp, #36]	@ 0x24
 8027038:	f7dc fbda 	bl	80037f0 <__aeabi_i2d>
 802703c:	9a06      	ldr	r2, [sp, #24]
 802703e:	9b07      	ldr	r3, [sp, #28]
 8027040:	f7db fc88 	bl	8002954 <__aeabi_dmul>
 8027044:	0002      	movs	r2, r0
 8027046:	000b      	movs	r3, r1
 8027048:	0030      	movs	r0, r6
 802704a:	0039      	movs	r1, r7
 802704c:	f7db ff68 	bl	8002f20 <__aeabi_dsub>
 8027050:	002b      	movs	r3, r5
 8027052:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027054:	3501      	adds	r5, #1
 8027056:	3230      	adds	r2, #48	@ 0x30
 8027058:	701a      	strb	r2, [r3, #0]
 802705a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802705c:	002c      	movs	r4, r5
 802705e:	429a      	cmp	r2, r3
 8027060:	d14b      	bne.n	80270fa <_dtoa_r+0x752>
 8027062:	0002      	movs	r2, r0
 8027064:	000b      	movs	r3, r1
 8027066:	f7da fc75 	bl	8001954 <__aeabi_dadd>
 802706a:	9a06      	ldr	r2, [sp, #24]
 802706c:	9b07      	ldr	r3, [sp, #28]
 802706e:	0006      	movs	r6, r0
 8027070:	000f      	movs	r7, r1
 8027072:	f7d9 fa37 	bl	80004e4 <__aeabi_dcmpgt>
 8027076:	2800      	cmp	r0, #0
 8027078:	d12a      	bne.n	80270d0 <_dtoa_r+0x728>
 802707a:	9a06      	ldr	r2, [sp, #24]
 802707c:	9b07      	ldr	r3, [sp, #28]
 802707e:	0030      	movs	r0, r6
 8027080:	0039      	movs	r1, r7
 8027082:	f7d9 fa15 	bl	80004b0 <__aeabi_dcmpeq>
 8027086:	2800      	cmp	r0, #0
 8027088:	d002      	beq.n	8027090 <_dtoa_r+0x6e8>
 802708a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802708c:	07dd      	lsls	r5, r3, #31
 802708e:	d41f      	bmi.n	80270d0 <_dtoa_r+0x728>
 8027090:	9905      	ldr	r1, [sp, #20]
 8027092:	9803      	ldr	r0, [sp, #12]
 8027094:	f000 ff2e 	bl	8027ef4 <_Bfree>
 8027098:	2300      	movs	r3, #0
 802709a:	7023      	strb	r3, [r4, #0]
 802709c:	9b04      	ldr	r3, [sp, #16]
 802709e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80270a0:	3301      	adds	r3, #1
 80270a2:	6013      	str	r3, [r2, #0]
 80270a4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80270a6:	2b00      	cmp	r3, #0
 80270a8:	d100      	bne.n	80270ac <_dtoa_r+0x704>
 80270aa:	e4c7      	b.n	8026a3c <_dtoa_r+0x94>
 80270ac:	601c      	str	r4, [r3, #0]
 80270ae:	e4c5      	b.n	8026a3c <_dtoa_r+0x94>
 80270b0:	0802f2a0 	.word	0x0802f2a0
 80270b4:	0802f278 	.word	0x0802f278
 80270b8:	3ff00000 	.word	0x3ff00000
 80270bc:	40240000 	.word	0x40240000
 80270c0:	401c0000 	.word	0x401c0000
 80270c4:	fcc00000 	.word	0xfcc00000
 80270c8:	40140000 	.word	0x40140000
 80270cc:	3fe00000 	.word	0x3fe00000
 80270d0:	9b04      	ldr	r3, [sp, #16]
 80270d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80270d4:	0023      	movs	r3, r4
 80270d6:	001c      	movs	r4, r3
 80270d8:	3b01      	subs	r3, #1
 80270da:	781a      	ldrb	r2, [r3, #0]
 80270dc:	2a39      	cmp	r2, #57	@ 0x39
 80270de:	d108      	bne.n	80270f2 <_dtoa_r+0x74a>
 80270e0:	9a08      	ldr	r2, [sp, #32]
 80270e2:	429a      	cmp	r2, r3
 80270e4:	d1f7      	bne.n	80270d6 <_dtoa_r+0x72e>
 80270e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80270e8:	9908      	ldr	r1, [sp, #32]
 80270ea:	3201      	adds	r2, #1
 80270ec:	920c      	str	r2, [sp, #48]	@ 0x30
 80270ee:	2230      	movs	r2, #48	@ 0x30
 80270f0:	700a      	strb	r2, [r1, #0]
 80270f2:	781a      	ldrb	r2, [r3, #0]
 80270f4:	3201      	adds	r2, #1
 80270f6:	701a      	strb	r2, [r3, #0]
 80270f8:	e784      	b.n	8027004 <_dtoa_r+0x65c>
 80270fa:	2200      	movs	r2, #0
 80270fc:	4bc6      	ldr	r3, [pc, #792]	@ (8027418 <_dtoa_r+0xa70>)
 80270fe:	f7db fc29 	bl	8002954 <__aeabi_dmul>
 8027102:	2200      	movs	r2, #0
 8027104:	2300      	movs	r3, #0
 8027106:	0006      	movs	r6, r0
 8027108:	000f      	movs	r7, r1
 802710a:	f7d9 f9d1 	bl	80004b0 <__aeabi_dcmpeq>
 802710e:	2800      	cmp	r0, #0
 8027110:	d089      	beq.n	8027026 <_dtoa_r+0x67e>
 8027112:	e7bd      	b.n	8027090 <_dtoa_r+0x6e8>
 8027114:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8027116:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8027118:	9c06      	ldr	r4, [sp, #24]
 802711a:	2f00      	cmp	r7, #0
 802711c:	d014      	beq.n	8027148 <_dtoa_r+0x7a0>
 802711e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8027120:	2a01      	cmp	r2, #1
 8027122:	dd00      	ble.n	8027126 <_dtoa_r+0x77e>
 8027124:	e0e4      	b.n	80272f0 <_dtoa_r+0x948>
 8027126:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8027128:	2a00      	cmp	r2, #0
 802712a:	d100      	bne.n	802712e <_dtoa_r+0x786>
 802712c:	e0da      	b.n	80272e4 <_dtoa_r+0x93c>
 802712e:	4abb      	ldr	r2, [pc, #748]	@ (802741c <_dtoa_r+0xa74>)
 8027130:	189b      	adds	r3, r3, r2
 8027132:	9a06      	ldr	r2, [sp, #24]
 8027134:	2101      	movs	r1, #1
 8027136:	18d2      	adds	r2, r2, r3
 8027138:	9206      	str	r2, [sp, #24]
 802713a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802713c:	9803      	ldr	r0, [sp, #12]
 802713e:	18d3      	adds	r3, r2, r3
 8027140:	930d      	str	r3, [sp, #52]	@ 0x34
 8027142:	f000 ffdb 	bl	80280fc <__i2b>
 8027146:	0007      	movs	r7, r0
 8027148:	2c00      	cmp	r4, #0
 802714a:	d00e      	beq.n	802716a <_dtoa_r+0x7c2>
 802714c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802714e:	2b00      	cmp	r3, #0
 8027150:	dd0b      	ble.n	802716a <_dtoa_r+0x7c2>
 8027152:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027154:	0023      	movs	r3, r4
 8027156:	4294      	cmp	r4, r2
 8027158:	dd00      	ble.n	802715c <_dtoa_r+0x7b4>
 802715a:	0013      	movs	r3, r2
 802715c:	9a06      	ldr	r2, [sp, #24]
 802715e:	1ae4      	subs	r4, r4, r3
 8027160:	1ad2      	subs	r2, r2, r3
 8027162:	9206      	str	r2, [sp, #24]
 8027164:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027166:	1ad3      	subs	r3, r2, r3
 8027168:	930d      	str	r3, [sp, #52]	@ 0x34
 802716a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802716c:	2b00      	cmp	r3, #0
 802716e:	d021      	beq.n	80271b4 <_dtoa_r+0x80c>
 8027170:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027172:	2b00      	cmp	r3, #0
 8027174:	d100      	bne.n	8027178 <_dtoa_r+0x7d0>
 8027176:	e0d3      	b.n	8027320 <_dtoa_r+0x978>
 8027178:	9e05      	ldr	r6, [sp, #20]
 802717a:	2d00      	cmp	r5, #0
 802717c:	d014      	beq.n	80271a8 <_dtoa_r+0x800>
 802717e:	0039      	movs	r1, r7
 8027180:	002a      	movs	r2, r5
 8027182:	9803      	ldr	r0, [sp, #12]
 8027184:	f001 f87c 	bl	8028280 <__pow5mult>
 8027188:	9a05      	ldr	r2, [sp, #20]
 802718a:	0001      	movs	r1, r0
 802718c:	0007      	movs	r7, r0
 802718e:	9803      	ldr	r0, [sp, #12]
 8027190:	f000 ffcc 	bl	802812c <__multiply>
 8027194:	0006      	movs	r6, r0
 8027196:	9905      	ldr	r1, [sp, #20]
 8027198:	9803      	ldr	r0, [sp, #12]
 802719a:	f000 feab 	bl	8027ef4 <_Bfree>
 802719e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80271a0:	9605      	str	r6, [sp, #20]
 80271a2:	1b5b      	subs	r3, r3, r5
 80271a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80271a6:	d005      	beq.n	80271b4 <_dtoa_r+0x80c>
 80271a8:	0031      	movs	r1, r6
 80271aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80271ac:	9803      	ldr	r0, [sp, #12]
 80271ae:	f001 f867 	bl	8028280 <__pow5mult>
 80271b2:	9005      	str	r0, [sp, #20]
 80271b4:	2101      	movs	r1, #1
 80271b6:	9803      	ldr	r0, [sp, #12]
 80271b8:	f000 ffa0 	bl	80280fc <__i2b>
 80271bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80271be:	0006      	movs	r6, r0
 80271c0:	2b00      	cmp	r3, #0
 80271c2:	d100      	bne.n	80271c6 <_dtoa_r+0x81e>
 80271c4:	e1bc      	b.n	8027540 <_dtoa_r+0xb98>
 80271c6:	001a      	movs	r2, r3
 80271c8:	0001      	movs	r1, r0
 80271ca:	9803      	ldr	r0, [sp, #12]
 80271cc:	f001 f858 	bl	8028280 <__pow5mult>
 80271d0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80271d2:	0006      	movs	r6, r0
 80271d4:	2500      	movs	r5, #0
 80271d6:	2b01      	cmp	r3, #1
 80271d8:	dc16      	bgt.n	8027208 <_dtoa_r+0x860>
 80271da:	2500      	movs	r5, #0
 80271dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80271de:	42ab      	cmp	r3, r5
 80271e0:	d10e      	bne.n	8027200 <_dtoa_r+0x858>
 80271e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80271e4:	031b      	lsls	r3, r3, #12
 80271e6:	42ab      	cmp	r3, r5
 80271e8:	d10a      	bne.n	8027200 <_dtoa_r+0x858>
 80271ea:	4b8d      	ldr	r3, [pc, #564]	@ (8027420 <_dtoa_r+0xa78>)
 80271ec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80271ee:	4213      	tst	r3, r2
 80271f0:	d006      	beq.n	8027200 <_dtoa_r+0x858>
 80271f2:	9b06      	ldr	r3, [sp, #24]
 80271f4:	3501      	adds	r5, #1
 80271f6:	3301      	adds	r3, #1
 80271f8:	9306      	str	r3, [sp, #24]
 80271fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80271fc:	3301      	adds	r3, #1
 80271fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8027200:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8027202:	2001      	movs	r0, #1
 8027204:	2b00      	cmp	r3, #0
 8027206:	d008      	beq.n	802721a <_dtoa_r+0x872>
 8027208:	6933      	ldr	r3, [r6, #16]
 802720a:	3303      	adds	r3, #3
 802720c:	009b      	lsls	r3, r3, #2
 802720e:	18f3      	adds	r3, r6, r3
 8027210:	6858      	ldr	r0, [r3, #4]
 8027212:	f000 ff23 	bl	802805c <__hi0bits>
 8027216:	2320      	movs	r3, #32
 8027218:	1a18      	subs	r0, r3, r0
 802721a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802721c:	1818      	adds	r0, r3, r0
 802721e:	0002      	movs	r2, r0
 8027220:	231f      	movs	r3, #31
 8027222:	401a      	ands	r2, r3
 8027224:	4218      	tst	r0, r3
 8027226:	d100      	bne.n	802722a <_dtoa_r+0x882>
 8027228:	e081      	b.n	802732e <_dtoa_r+0x986>
 802722a:	3301      	adds	r3, #1
 802722c:	1a9b      	subs	r3, r3, r2
 802722e:	2b04      	cmp	r3, #4
 8027230:	dd79      	ble.n	8027326 <_dtoa_r+0x97e>
 8027232:	231c      	movs	r3, #28
 8027234:	1a9b      	subs	r3, r3, r2
 8027236:	9a06      	ldr	r2, [sp, #24]
 8027238:	18e4      	adds	r4, r4, r3
 802723a:	18d2      	adds	r2, r2, r3
 802723c:	9206      	str	r2, [sp, #24]
 802723e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8027240:	18d3      	adds	r3, r2, r3
 8027242:	930d      	str	r3, [sp, #52]	@ 0x34
 8027244:	9b06      	ldr	r3, [sp, #24]
 8027246:	2b00      	cmp	r3, #0
 8027248:	dd05      	ble.n	8027256 <_dtoa_r+0x8ae>
 802724a:	001a      	movs	r2, r3
 802724c:	9905      	ldr	r1, [sp, #20]
 802724e:	9803      	ldr	r0, [sp, #12]
 8027250:	f001 f872 	bl	8028338 <__lshift>
 8027254:	9005      	str	r0, [sp, #20]
 8027256:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027258:	2b00      	cmp	r3, #0
 802725a:	dd05      	ble.n	8027268 <_dtoa_r+0x8c0>
 802725c:	0031      	movs	r1, r6
 802725e:	001a      	movs	r2, r3
 8027260:	9803      	ldr	r0, [sp, #12]
 8027262:	f001 f869 	bl	8028338 <__lshift>
 8027266:	0006      	movs	r6, r0
 8027268:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 802726a:	2b00      	cmp	r3, #0
 802726c:	d061      	beq.n	8027332 <_dtoa_r+0x98a>
 802726e:	0031      	movs	r1, r6
 8027270:	9805      	ldr	r0, [sp, #20]
 8027272:	f001 f8cd 	bl	8028410 <__mcmp>
 8027276:	2800      	cmp	r0, #0
 8027278:	da5b      	bge.n	8027332 <_dtoa_r+0x98a>
 802727a:	9b04      	ldr	r3, [sp, #16]
 802727c:	220a      	movs	r2, #10
 802727e:	3b01      	subs	r3, #1
 8027280:	930c      	str	r3, [sp, #48]	@ 0x30
 8027282:	9905      	ldr	r1, [sp, #20]
 8027284:	2300      	movs	r3, #0
 8027286:	9803      	ldr	r0, [sp, #12]
 8027288:	f000 fe58 	bl	8027f3c <__multadd>
 802728c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802728e:	9005      	str	r0, [sp, #20]
 8027290:	2b00      	cmp	r3, #0
 8027292:	d100      	bne.n	8027296 <_dtoa_r+0x8ee>
 8027294:	e15b      	b.n	802754e <_dtoa_r+0xba6>
 8027296:	2300      	movs	r3, #0
 8027298:	0039      	movs	r1, r7
 802729a:	220a      	movs	r2, #10
 802729c:	9803      	ldr	r0, [sp, #12]
 802729e:	f000 fe4d 	bl	8027f3c <__multadd>
 80272a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80272a4:	0007      	movs	r7, r0
 80272a6:	2b00      	cmp	r3, #0
 80272a8:	dc4d      	bgt.n	8027346 <_dtoa_r+0x99e>
 80272aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80272ac:	2b02      	cmp	r3, #2
 80272ae:	dd46      	ble.n	802733e <_dtoa_r+0x996>
 80272b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80272b2:	2b00      	cmp	r3, #0
 80272b4:	d000      	beq.n	80272b8 <_dtoa_r+0x910>
 80272b6:	e5db      	b.n	8026e70 <_dtoa_r+0x4c8>
 80272b8:	0031      	movs	r1, r6
 80272ba:	2205      	movs	r2, #5
 80272bc:	9803      	ldr	r0, [sp, #12]
 80272be:	f000 fe3d 	bl	8027f3c <__multadd>
 80272c2:	0006      	movs	r6, r0
 80272c4:	0001      	movs	r1, r0
 80272c6:	9805      	ldr	r0, [sp, #20]
 80272c8:	f001 f8a2 	bl	8028410 <__mcmp>
 80272cc:	2800      	cmp	r0, #0
 80272ce:	dc00      	bgt.n	80272d2 <_dtoa_r+0x92a>
 80272d0:	e5ce      	b.n	8026e70 <_dtoa_r+0x4c8>
 80272d2:	9b08      	ldr	r3, [sp, #32]
 80272d4:	9a08      	ldr	r2, [sp, #32]
 80272d6:	1c5c      	adds	r4, r3, #1
 80272d8:	2331      	movs	r3, #49	@ 0x31
 80272da:	7013      	strb	r3, [r2, #0]
 80272dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80272de:	3301      	adds	r3, #1
 80272e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80272e2:	e5c9      	b.n	8026e78 <_dtoa_r+0x4d0>
 80272e4:	2336      	movs	r3, #54	@ 0x36
 80272e6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80272e8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80272ea:	1a9b      	subs	r3, r3, r2
 80272ec:	9c06      	ldr	r4, [sp, #24]
 80272ee:	e720      	b.n	8027132 <_dtoa_r+0x78a>
 80272f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80272f2:	1e5d      	subs	r5, r3, #1
 80272f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80272f6:	42ab      	cmp	r3, r5
 80272f8:	db08      	blt.n	802730c <_dtoa_r+0x964>
 80272fa:	1b5d      	subs	r5, r3, r5
 80272fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80272fe:	2b00      	cmp	r3, #0
 8027300:	daf4      	bge.n	80272ec <_dtoa_r+0x944>
 8027302:	9b06      	ldr	r3, [sp, #24]
 8027304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027306:	1a9c      	subs	r4, r3, r2
 8027308:	2300      	movs	r3, #0
 802730a:	e712      	b.n	8027132 <_dtoa_r+0x78a>
 802730c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802730e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027310:	1aeb      	subs	r3, r5, r3
 8027312:	18d3      	adds	r3, r2, r3
 8027314:	9314      	str	r3, [sp, #80]	@ 0x50
 8027316:	950f      	str	r5, [sp, #60]	@ 0x3c
 8027318:	9c06      	ldr	r4, [sp, #24]
 802731a:	2500      	movs	r5, #0
 802731c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802731e:	e708      	b.n	8027132 <_dtoa_r+0x78a>
 8027320:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027322:	9905      	ldr	r1, [sp, #20]
 8027324:	e742      	b.n	80271ac <_dtoa_r+0x804>
 8027326:	2b04      	cmp	r3, #4
 8027328:	d08c      	beq.n	8027244 <_dtoa_r+0x89c>
 802732a:	331c      	adds	r3, #28
 802732c:	e783      	b.n	8027236 <_dtoa_r+0x88e>
 802732e:	0013      	movs	r3, r2
 8027330:	e7fb      	b.n	802732a <_dtoa_r+0x982>
 8027332:	9b04      	ldr	r3, [sp, #16]
 8027334:	930c      	str	r3, [sp, #48]	@ 0x30
 8027336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027338:	930e      	str	r3, [sp, #56]	@ 0x38
 802733a:	2b00      	cmp	r3, #0
 802733c:	ddb5      	ble.n	80272aa <_dtoa_r+0x902>
 802733e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027340:	2b00      	cmp	r3, #0
 8027342:	d100      	bne.n	8027346 <_dtoa_r+0x99e>
 8027344:	e107      	b.n	8027556 <_dtoa_r+0xbae>
 8027346:	2c00      	cmp	r4, #0
 8027348:	dd05      	ble.n	8027356 <_dtoa_r+0x9ae>
 802734a:	0039      	movs	r1, r7
 802734c:	0022      	movs	r2, r4
 802734e:	9803      	ldr	r0, [sp, #12]
 8027350:	f000 fff2 	bl	8028338 <__lshift>
 8027354:	0007      	movs	r7, r0
 8027356:	9704      	str	r7, [sp, #16]
 8027358:	2d00      	cmp	r5, #0
 802735a:	d020      	beq.n	802739e <_dtoa_r+0x9f6>
 802735c:	6879      	ldr	r1, [r7, #4]
 802735e:	9803      	ldr	r0, [sp, #12]
 8027360:	f000 fd84 	bl	8027e6c <_Balloc>
 8027364:	1e04      	subs	r4, r0, #0
 8027366:	d10c      	bne.n	8027382 <_dtoa_r+0x9da>
 8027368:	0022      	movs	r2, r4
 802736a:	4b2e      	ldr	r3, [pc, #184]	@ (8027424 <_dtoa_r+0xa7c>)
 802736c:	482e      	ldr	r0, [pc, #184]	@ (8027428 <_dtoa_r+0xa80>)
 802736e:	492f      	ldr	r1, [pc, #188]	@ (802742c <_dtoa_r+0xa84>)
 8027370:	f7ff fb2f 	bl	80269d2 <_dtoa_r+0x2a>
 8027374:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8027376:	0037      	movs	r7, r6
 8027378:	e7ab      	b.n	80272d2 <_dtoa_r+0x92a>
 802737a:	9b04      	ldr	r3, [sp, #16]
 802737c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 802737e:	930c      	str	r3, [sp, #48]	@ 0x30
 8027380:	e7f9      	b.n	8027376 <_dtoa_r+0x9ce>
 8027382:	0039      	movs	r1, r7
 8027384:	693a      	ldr	r2, [r7, #16]
 8027386:	310c      	adds	r1, #12
 8027388:	3202      	adds	r2, #2
 802738a:	0092      	lsls	r2, r2, #2
 802738c:	300c      	adds	r0, #12
 802738e:	f7ff fa75 	bl	802687c <memcpy>
 8027392:	2201      	movs	r2, #1
 8027394:	0021      	movs	r1, r4
 8027396:	9803      	ldr	r0, [sp, #12]
 8027398:	f000 ffce 	bl	8028338 <__lshift>
 802739c:	9004      	str	r0, [sp, #16]
 802739e:	9b08      	ldr	r3, [sp, #32]
 80273a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80273a2:	9306      	str	r3, [sp, #24]
 80273a4:	3b01      	subs	r3, #1
 80273a6:	189b      	adds	r3, r3, r2
 80273a8:	2201      	movs	r2, #1
 80273aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80273ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80273ae:	4013      	ands	r3, r2
 80273b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80273b2:	0031      	movs	r1, r6
 80273b4:	9805      	ldr	r0, [sp, #20]
 80273b6:	f7ff fa71 	bl	802689c <quorem>
 80273ba:	0039      	movs	r1, r7
 80273bc:	0005      	movs	r5, r0
 80273be:	900a      	str	r0, [sp, #40]	@ 0x28
 80273c0:	9805      	ldr	r0, [sp, #20]
 80273c2:	f001 f825 	bl	8028410 <__mcmp>
 80273c6:	9a04      	ldr	r2, [sp, #16]
 80273c8:	900d      	str	r0, [sp, #52]	@ 0x34
 80273ca:	0031      	movs	r1, r6
 80273cc:	9803      	ldr	r0, [sp, #12]
 80273ce:	f001 f83b 	bl	8028448 <__mdiff>
 80273d2:	2201      	movs	r2, #1
 80273d4:	68c3      	ldr	r3, [r0, #12]
 80273d6:	0004      	movs	r4, r0
 80273d8:	3530      	adds	r5, #48	@ 0x30
 80273da:	9209      	str	r2, [sp, #36]	@ 0x24
 80273dc:	2b00      	cmp	r3, #0
 80273de:	d104      	bne.n	80273ea <_dtoa_r+0xa42>
 80273e0:	0001      	movs	r1, r0
 80273e2:	9805      	ldr	r0, [sp, #20]
 80273e4:	f001 f814 	bl	8028410 <__mcmp>
 80273e8:	9009      	str	r0, [sp, #36]	@ 0x24
 80273ea:	0021      	movs	r1, r4
 80273ec:	9803      	ldr	r0, [sp, #12]
 80273ee:	f000 fd81 	bl	8027ef4 <_Bfree>
 80273f2:	9b06      	ldr	r3, [sp, #24]
 80273f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80273f6:	1c5c      	adds	r4, r3, #1
 80273f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80273fa:	4313      	orrs	r3, r2
 80273fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80273fe:	4313      	orrs	r3, r2
 8027400:	d116      	bne.n	8027430 <_dtoa_r+0xa88>
 8027402:	2d39      	cmp	r5, #57	@ 0x39
 8027404:	d02f      	beq.n	8027466 <_dtoa_r+0xabe>
 8027406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027408:	2b00      	cmp	r3, #0
 802740a:	dd01      	ble.n	8027410 <_dtoa_r+0xa68>
 802740c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802740e:	3531      	adds	r5, #49	@ 0x31
 8027410:	9b06      	ldr	r3, [sp, #24]
 8027412:	701d      	strb	r5, [r3, #0]
 8027414:	e532      	b.n	8026e7c <_dtoa_r+0x4d4>
 8027416:	46c0      	nop			@ (mov r8, r8)
 8027418:	40240000 	.word	0x40240000
 802741c:	00000433 	.word	0x00000433
 8027420:	7ff00000 	.word	0x7ff00000
 8027424:	0802effa 	.word	0x0802effa
 8027428:	0802efa2 	.word	0x0802efa2
 802742c:	000002ef 	.word	0x000002ef
 8027430:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8027432:	2b00      	cmp	r3, #0
 8027434:	db04      	blt.n	8027440 <_dtoa_r+0xa98>
 8027436:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8027438:	4313      	orrs	r3, r2
 802743a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802743c:	4313      	orrs	r3, r2
 802743e:	d11e      	bne.n	802747e <_dtoa_r+0xad6>
 8027440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027442:	2b00      	cmp	r3, #0
 8027444:	dde4      	ble.n	8027410 <_dtoa_r+0xa68>
 8027446:	9905      	ldr	r1, [sp, #20]
 8027448:	2201      	movs	r2, #1
 802744a:	9803      	ldr	r0, [sp, #12]
 802744c:	f000 ff74 	bl	8028338 <__lshift>
 8027450:	0031      	movs	r1, r6
 8027452:	9005      	str	r0, [sp, #20]
 8027454:	f000 ffdc 	bl	8028410 <__mcmp>
 8027458:	2800      	cmp	r0, #0
 802745a:	dc02      	bgt.n	8027462 <_dtoa_r+0xaba>
 802745c:	d1d8      	bne.n	8027410 <_dtoa_r+0xa68>
 802745e:	07eb      	lsls	r3, r5, #31
 8027460:	d5d6      	bpl.n	8027410 <_dtoa_r+0xa68>
 8027462:	2d39      	cmp	r5, #57	@ 0x39
 8027464:	d1d2      	bne.n	802740c <_dtoa_r+0xa64>
 8027466:	2339      	movs	r3, #57	@ 0x39
 8027468:	9a06      	ldr	r2, [sp, #24]
 802746a:	7013      	strb	r3, [r2, #0]
 802746c:	0023      	movs	r3, r4
 802746e:	001c      	movs	r4, r3
 8027470:	3b01      	subs	r3, #1
 8027472:	781a      	ldrb	r2, [r3, #0]
 8027474:	2a39      	cmp	r2, #57	@ 0x39
 8027476:	d050      	beq.n	802751a <_dtoa_r+0xb72>
 8027478:	3201      	adds	r2, #1
 802747a:	701a      	strb	r2, [r3, #0]
 802747c:	e4fe      	b.n	8026e7c <_dtoa_r+0x4d4>
 802747e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027480:	2b00      	cmp	r3, #0
 8027482:	dd03      	ble.n	802748c <_dtoa_r+0xae4>
 8027484:	2d39      	cmp	r5, #57	@ 0x39
 8027486:	d0ee      	beq.n	8027466 <_dtoa_r+0xabe>
 8027488:	3501      	adds	r5, #1
 802748a:	e7c1      	b.n	8027410 <_dtoa_r+0xa68>
 802748c:	9b06      	ldr	r3, [sp, #24]
 802748e:	9a06      	ldr	r2, [sp, #24]
 8027490:	701d      	strb	r5, [r3, #0]
 8027492:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027494:	4293      	cmp	r3, r2
 8027496:	d02b      	beq.n	80274f0 <_dtoa_r+0xb48>
 8027498:	2300      	movs	r3, #0
 802749a:	220a      	movs	r2, #10
 802749c:	9905      	ldr	r1, [sp, #20]
 802749e:	9803      	ldr	r0, [sp, #12]
 80274a0:	f000 fd4c 	bl	8027f3c <__multadd>
 80274a4:	9b04      	ldr	r3, [sp, #16]
 80274a6:	9005      	str	r0, [sp, #20]
 80274a8:	429f      	cmp	r7, r3
 80274aa:	d109      	bne.n	80274c0 <_dtoa_r+0xb18>
 80274ac:	0039      	movs	r1, r7
 80274ae:	2300      	movs	r3, #0
 80274b0:	220a      	movs	r2, #10
 80274b2:	9803      	ldr	r0, [sp, #12]
 80274b4:	f000 fd42 	bl	8027f3c <__multadd>
 80274b8:	0007      	movs	r7, r0
 80274ba:	9004      	str	r0, [sp, #16]
 80274bc:	9406      	str	r4, [sp, #24]
 80274be:	e778      	b.n	80273b2 <_dtoa_r+0xa0a>
 80274c0:	0039      	movs	r1, r7
 80274c2:	2300      	movs	r3, #0
 80274c4:	220a      	movs	r2, #10
 80274c6:	9803      	ldr	r0, [sp, #12]
 80274c8:	f000 fd38 	bl	8027f3c <__multadd>
 80274cc:	2300      	movs	r3, #0
 80274ce:	0007      	movs	r7, r0
 80274d0:	220a      	movs	r2, #10
 80274d2:	9904      	ldr	r1, [sp, #16]
 80274d4:	9803      	ldr	r0, [sp, #12]
 80274d6:	f000 fd31 	bl	8027f3c <__multadd>
 80274da:	9004      	str	r0, [sp, #16]
 80274dc:	e7ee      	b.n	80274bc <_dtoa_r+0xb14>
 80274de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80274e0:	2401      	movs	r4, #1
 80274e2:	2b00      	cmp	r3, #0
 80274e4:	dd00      	ble.n	80274e8 <_dtoa_r+0xb40>
 80274e6:	001c      	movs	r4, r3
 80274e8:	9704      	str	r7, [sp, #16]
 80274ea:	2700      	movs	r7, #0
 80274ec:	9b08      	ldr	r3, [sp, #32]
 80274ee:	191c      	adds	r4, r3, r4
 80274f0:	9905      	ldr	r1, [sp, #20]
 80274f2:	2201      	movs	r2, #1
 80274f4:	9803      	ldr	r0, [sp, #12]
 80274f6:	f000 ff1f 	bl	8028338 <__lshift>
 80274fa:	0031      	movs	r1, r6
 80274fc:	9005      	str	r0, [sp, #20]
 80274fe:	f000 ff87 	bl	8028410 <__mcmp>
 8027502:	2800      	cmp	r0, #0
 8027504:	dcb2      	bgt.n	802746c <_dtoa_r+0xac4>
 8027506:	d101      	bne.n	802750c <_dtoa_r+0xb64>
 8027508:	07ed      	lsls	r5, r5, #31
 802750a:	d4af      	bmi.n	802746c <_dtoa_r+0xac4>
 802750c:	0023      	movs	r3, r4
 802750e:	001c      	movs	r4, r3
 8027510:	3b01      	subs	r3, #1
 8027512:	781a      	ldrb	r2, [r3, #0]
 8027514:	2a30      	cmp	r2, #48	@ 0x30
 8027516:	d0fa      	beq.n	802750e <_dtoa_r+0xb66>
 8027518:	e4b0      	b.n	8026e7c <_dtoa_r+0x4d4>
 802751a:	9a08      	ldr	r2, [sp, #32]
 802751c:	429a      	cmp	r2, r3
 802751e:	d1a6      	bne.n	802746e <_dtoa_r+0xac6>
 8027520:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027522:	3301      	adds	r3, #1
 8027524:	930c      	str	r3, [sp, #48]	@ 0x30
 8027526:	2331      	movs	r3, #49	@ 0x31
 8027528:	7013      	strb	r3, [r2, #0]
 802752a:	e4a7      	b.n	8026e7c <_dtoa_r+0x4d4>
 802752c:	4b14      	ldr	r3, [pc, #80]	@ (8027580 <_dtoa_r+0xbd8>)
 802752e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8027530:	9308      	str	r3, [sp, #32]
 8027532:	4b14      	ldr	r3, [pc, #80]	@ (8027584 <_dtoa_r+0xbdc>)
 8027534:	2a00      	cmp	r2, #0
 8027536:	d001      	beq.n	802753c <_dtoa_r+0xb94>
 8027538:	f7ff fa7e 	bl	8026a38 <_dtoa_r+0x90>
 802753c:	f7ff fa7e 	bl	8026a3c <_dtoa_r+0x94>
 8027540:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027542:	2b01      	cmp	r3, #1
 8027544:	dc00      	bgt.n	8027548 <_dtoa_r+0xba0>
 8027546:	e648      	b.n	80271da <_dtoa_r+0x832>
 8027548:	2001      	movs	r0, #1
 802754a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802754c:	e665      	b.n	802721a <_dtoa_r+0x872>
 802754e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027550:	2b00      	cmp	r3, #0
 8027552:	dc00      	bgt.n	8027556 <_dtoa_r+0xbae>
 8027554:	e6a9      	b.n	80272aa <_dtoa_r+0x902>
 8027556:	2400      	movs	r4, #0
 8027558:	0031      	movs	r1, r6
 802755a:	9805      	ldr	r0, [sp, #20]
 802755c:	f7ff f99e 	bl	802689c <quorem>
 8027560:	9b08      	ldr	r3, [sp, #32]
 8027562:	3030      	adds	r0, #48	@ 0x30
 8027564:	5518      	strb	r0, [r3, r4]
 8027566:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027568:	3401      	adds	r4, #1
 802756a:	0005      	movs	r5, r0
 802756c:	42a3      	cmp	r3, r4
 802756e:	ddb6      	ble.n	80274de <_dtoa_r+0xb36>
 8027570:	2300      	movs	r3, #0
 8027572:	220a      	movs	r2, #10
 8027574:	9905      	ldr	r1, [sp, #20]
 8027576:	9803      	ldr	r0, [sp, #12]
 8027578:	f000 fce0 	bl	8027f3c <__multadd>
 802757c:	9005      	str	r0, [sp, #20]
 802757e:	e7eb      	b.n	8027558 <_dtoa_r+0xbb0>
 8027580:	0802ef7e 	.word	0x0802ef7e
 8027584:	0802ef86 	.word	0x0802ef86

08027588 <_free_r>:
 8027588:	b570      	push	{r4, r5, r6, lr}
 802758a:	0005      	movs	r5, r0
 802758c:	1e0c      	subs	r4, r1, #0
 802758e:	d010      	beq.n	80275b2 <_free_r+0x2a>
 8027590:	3c04      	subs	r4, #4
 8027592:	6823      	ldr	r3, [r4, #0]
 8027594:	2b00      	cmp	r3, #0
 8027596:	da00      	bge.n	802759a <_free_r+0x12>
 8027598:	18e4      	adds	r4, r4, r3
 802759a:	0028      	movs	r0, r5
 802759c:	f000 fc56 	bl	8027e4c <__malloc_lock>
 80275a0:	4a1d      	ldr	r2, [pc, #116]	@ (8027618 <_free_r+0x90>)
 80275a2:	6813      	ldr	r3, [r2, #0]
 80275a4:	2b00      	cmp	r3, #0
 80275a6:	d105      	bne.n	80275b4 <_free_r+0x2c>
 80275a8:	6063      	str	r3, [r4, #4]
 80275aa:	6014      	str	r4, [r2, #0]
 80275ac:	0028      	movs	r0, r5
 80275ae:	f000 fc55 	bl	8027e5c <__malloc_unlock>
 80275b2:	bd70      	pop	{r4, r5, r6, pc}
 80275b4:	42a3      	cmp	r3, r4
 80275b6:	d908      	bls.n	80275ca <_free_r+0x42>
 80275b8:	6820      	ldr	r0, [r4, #0]
 80275ba:	1821      	adds	r1, r4, r0
 80275bc:	428b      	cmp	r3, r1
 80275be:	d1f3      	bne.n	80275a8 <_free_r+0x20>
 80275c0:	6819      	ldr	r1, [r3, #0]
 80275c2:	685b      	ldr	r3, [r3, #4]
 80275c4:	1809      	adds	r1, r1, r0
 80275c6:	6021      	str	r1, [r4, #0]
 80275c8:	e7ee      	b.n	80275a8 <_free_r+0x20>
 80275ca:	001a      	movs	r2, r3
 80275cc:	685b      	ldr	r3, [r3, #4]
 80275ce:	2b00      	cmp	r3, #0
 80275d0:	d001      	beq.n	80275d6 <_free_r+0x4e>
 80275d2:	42a3      	cmp	r3, r4
 80275d4:	d9f9      	bls.n	80275ca <_free_r+0x42>
 80275d6:	6811      	ldr	r1, [r2, #0]
 80275d8:	1850      	adds	r0, r2, r1
 80275da:	42a0      	cmp	r0, r4
 80275dc:	d10b      	bne.n	80275f6 <_free_r+0x6e>
 80275de:	6820      	ldr	r0, [r4, #0]
 80275e0:	1809      	adds	r1, r1, r0
 80275e2:	1850      	adds	r0, r2, r1
 80275e4:	6011      	str	r1, [r2, #0]
 80275e6:	4283      	cmp	r3, r0
 80275e8:	d1e0      	bne.n	80275ac <_free_r+0x24>
 80275ea:	6818      	ldr	r0, [r3, #0]
 80275ec:	685b      	ldr	r3, [r3, #4]
 80275ee:	1841      	adds	r1, r0, r1
 80275f0:	6011      	str	r1, [r2, #0]
 80275f2:	6053      	str	r3, [r2, #4]
 80275f4:	e7da      	b.n	80275ac <_free_r+0x24>
 80275f6:	42a0      	cmp	r0, r4
 80275f8:	d902      	bls.n	8027600 <_free_r+0x78>
 80275fa:	230c      	movs	r3, #12
 80275fc:	602b      	str	r3, [r5, #0]
 80275fe:	e7d5      	b.n	80275ac <_free_r+0x24>
 8027600:	6820      	ldr	r0, [r4, #0]
 8027602:	1821      	adds	r1, r4, r0
 8027604:	428b      	cmp	r3, r1
 8027606:	d103      	bne.n	8027610 <_free_r+0x88>
 8027608:	6819      	ldr	r1, [r3, #0]
 802760a:	685b      	ldr	r3, [r3, #4]
 802760c:	1809      	adds	r1, r1, r0
 802760e:	6021      	str	r1, [r4, #0]
 8027610:	6063      	str	r3, [r4, #4]
 8027612:	6054      	str	r4, [r2, #4]
 8027614:	e7ca      	b.n	80275ac <_free_r+0x24>
 8027616:	46c0      	nop			@ (mov r8, r8)
 8027618:	200038c8 	.word	0x200038c8

0802761c <rshift>:
 802761c:	0002      	movs	r2, r0
 802761e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027620:	6904      	ldr	r4, [r0, #16]
 8027622:	b085      	sub	sp, #20
 8027624:	3214      	adds	r2, #20
 8027626:	114b      	asrs	r3, r1, #5
 8027628:	0016      	movs	r6, r2
 802762a:	9302      	str	r3, [sp, #8]
 802762c:	429c      	cmp	r4, r3
 802762e:	dd31      	ble.n	8027694 <rshift+0x78>
 8027630:	261f      	movs	r6, #31
 8027632:	000f      	movs	r7, r1
 8027634:	009b      	lsls	r3, r3, #2
 8027636:	00a5      	lsls	r5, r4, #2
 8027638:	18d3      	adds	r3, r2, r3
 802763a:	4037      	ands	r7, r6
 802763c:	1955      	adds	r5, r2, r5
 802763e:	9300      	str	r3, [sp, #0]
 8027640:	9701      	str	r7, [sp, #4]
 8027642:	4231      	tst	r1, r6
 8027644:	d10d      	bne.n	8027662 <rshift+0x46>
 8027646:	0016      	movs	r6, r2
 8027648:	0019      	movs	r1, r3
 802764a:	428d      	cmp	r5, r1
 802764c:	d836      	bhi.n	80276bc <rshift+0xa0>
 802764e:	9b00      	ldr	r3, [sp, #0]
 8027650:	2600      	movs	r6, #0
 8027652:	3b03      	subs	r3, #3
 8027654:	429d      	cmp	r5, r3
 8027656:	d302      	bcc.n	802765e <rshift+0x42>
 8027658:	9b02      	ldr	r3, [sp, #8]
 802765a:	1ae4      	subs	r4, r4, r3
 802765c:	00a6      	lsls	r6, r4, #2
 802765e:	1996      	adds	r6, r2, r6
 8027660:	e018      	b.n	8027694 <rshift+0x78>
 8027662:	2120      	movs	r1, #32
 8027664:	9e01      	ldr	r6, [sp, #4]
 8027666:	9f01      	ldr	r7, [sp, #4]
 8027668:	1b89      	subs	r1, r1, r6
 802766a:	9e00      	ldr	r6, [sp, #0]
 802766c:	9103      	str	r1, [sp, #12]
 802766e:	ce02      	ldmia	r6!, {r1}
 8027670:	4694      	mov	ip, r2
 8027672:	40f9      	lsrs	r1, r7
 8027674:	42b5      	cmp	r5, r6
 8027676:	d816      	bhi.n	80276a6 <rshift+0x8a>
 8027678:	9b00      	ldr	r3, [sp, #0]
 802767a:	2600      	movs	r6, #0
 802767c:	3301      	adds	r3, #1
 802767e:	429d      	cmp	r5, r3
 8027680:	d303      	bcc.n	802768a <rshift+0x6e>
 8027682:	9b02      	ldr	r3, [sp, #8]
 8027684:	1ae4      	subs	r4, r4, r3
 8027686:	00a6      	lsls	r6, r4, #2
 8027688:	3e04      	subs	r6, #4
 802768a:	1996      	adds	r6, r2, r6
 802768c:	6031      	str	r1, [r6, #0]
 802768e:	2900      	cmp	r1, #0
 8027690:	d000      	beq.n	8027694 <rshift+0x78>
 8027692:	3604      	adds	r6, #4
 8027694:	1ab1      	subs	r1, r6, r2
 8027696:	1089      	asrs	r1, r1, #2
 8027698:	6101      	str	r1, [r0, #16]
 802769a:	4296      	cmp	r6, r2
 802769c:	d101      	bne.n	80276a2 <rshift+0x86>
 802769e:	2300      	movs	r3, #0
 80276a0:	6143      	str	r3, [r0, #20]
 80276a2:	b005      	add	sp, #20
 80276a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80276a6:	6837      	ldr	r7, [r6, #0]
 80276a8:	9b03      	ldr	r3, [sp, #12]
 80276aa:	409f      	lsls	r7, r3
 80276ac:	430f      	orrs	r7, r1
 80276ae:	4661      	mov	r1, ip
 80276b0:	c180      	stmia	r1!, {r7}
 80276b2:	468c      	mov	ip, r1
 80276b4:	9b01      	ldr	r3, [sp, #4]
 80276b6:	ce02      	ldmia	r6!, {r1}
 80276b8:	40d9      	lsrs	r1, r3
 80276ba:	e7db      	b.n	8027674 <rshift+0x58>
 80276bc:	c980      	ldmia	r1!, {r7}
 80276be:	c680      	stmia	r6!, {r7}
 80276c0:	e7c3      	b.n	802764a <rshift+0x2e>

080276c2 <__hexdig_fun>:
 80276c2:	0002      	movs	r2, r0
 80276c4:	3a30      	subs	r2, #48	@ 0x30
 80276c6:	0003      	movs	r3, r0
 80276c8:	2a09      	cmp	r2, #9
 80276ca:	d802      	bhi.n	80276d2 <__hexdig_fun+0x10>
 80276cc:	3b20      	subs	r3, #32
 80276ce:	b2d8      	uxtb	r0, r3
 80276d0:	4770      	bx	lr
 80276d2:	0002      	movs	r2, r0
 80276d4:	3a61      	subs	r2, #97	@ 0x61
 80276d6:	2a05      	cmp	r2, #5
 80276d8:	d801      	bhi.n	80276de <__hexdig_fun+0x1c>
 80276da:	3b47      	subs	r3, #71	@ 0x47
 80276dc:	e7f7      	b.n	80276ce <__hexdig_fun+0xc>
 80276de:	001a      	movs	r2, r3
 80276e0:	3a41      	subs	r2, #65	@ 0x41
 80276e2:	2000      	movs	r0, #0
 80276e4:	2a05      	cmp	r2, #5
 80276e6:	d8f3      	bhi.n	80276d0 <__hexdig_fun+0xe>
 80276e8:	3b27      	subs	r3, #39	@ 0x27
 80276ea:	e7f0      	b.n	80276ce <__hexdig_fun+0xc>

080276ec <__gethex>:
 80276ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80276ee:	b089      	sub	sp, #36	@ 0x24
 80276f0:	9307      	str	r3, [sp, #28]
 80276f2:	680b      	ldr	r3, [r1, #0]
 80276f4:	9201      	str	r2, [sp, #4]
 80276f6:	9003      	str	r0, [sp, #12]
 80276f8:	9106      	str	r1, [sp, #24]
 80276fa:	1c9a      	adds	r2, r3, #2
 80276fc:	0011      	movs	r1, r2
 80276fe:	3201      	adds	r2, #1
 8027700:	1e50      	subs	r0, r2, #1
 8027702:	7800      	ldrb	r0, [r0, #0]
 8027704:	2830      	cmp	r0, #48	@ 0x30
 8027706:	d0f9      	beq.n	80276fc <__gethex+0x10>
 8027708:	1acb      	subs	r3, r1, r3
 802770a:	3b02      	subs	r3, #2
 802770c:	9305      	str	r3, [sp, #20]
 802770e:	9100      	str	r1, [sp, #0]
 8027710:	f7ff ffd7 	bl	80276c2 <__hexdig_fun>
 8027714:	2300      	movs	r3, #0
 8027716:	001d      	movs	r5, r3
 8027718:	9302      	str	r3, [sp, #8]
 802771a:	4298      	cmp	r0, r3
 802771c:	d11e      	bne.n	802775c <__gethex+0x70>
 802771e:	2201      	movs	r2, #1
 8027720:	49a6      	ldr	r1, [pc, #664]	@ (80279bc <__gethex+0x2d0>)
 8027722:	9800      	ldr	r0, [sp, #0]
 8027724:	f7fe ffe4 	bl	80266f0 <strncmp>
 8027728:	0007      	movs	r7, r0
 802772a:	42a8      	cmp	r0, r5
 802772c:	d000      	beq.n	8027730 <__gethex+0x44>
 802772e:	e06a      	b.n	8027806 <__gethex+0x11a>
 8027730:	9b00      	ldr	r3, [sp, #0]
 8027732:	7858      	ldrb	r0, [r3, #1]
 8027734:	1c5c      	adds	r4, r3, #1
 8027736:	f7ff ffc4 	bl	80276c2 <__hexdig_fun>
 802773a:	2301      	movs	r3, #1
 802773c:	9302      	str	r3, [sp, #8]
 802773e:	42a8      	cmp	r0, r5
 8027740:	d02f      	beq.n	80277a2 <__gethex+0xb6>
 8027742:	9400      	str	r4, [sp, #0]
 8027744:	9b00      	ldr	r3, [sp, #0]
 8027746:	7818      	ldrb	r0, [r3, #0]
 8027748:	2830      	cmp	r0, #48	@ 0x30
 802774a:	d009      	beq.n	8027760 <__gethex+0x74>
 802774c:	f7ff ffb9 	bl	80276c2 <__hexdig_fun>
 8027750:	4242      	negs	r2, r0
 8027752:	4142      	adcs	r2, r0
 8027754:	2301      	movs	r3, #1
 8027756:	0025      	movs	r5, r4
 8027758:	9202      	str	r2, [sp, #8]
 802775a:	9305      	str	r3, [sp, #20]
 802775c:	9c00      	ldr	r4, [sp, #0]
 802775e:	e004      	b.n	802776a <__gethex+0x7e>
 8027760:	9b00      	ldr	r3, [sp, #0]
 8027762:	3301      	adds	r3, #1
 8027764:	9300      	str	r3, [sp, #0]
 8027766:	e7ed      	b.n	8027744 <__gethex+0x58>
 8027768:	3401      	adds	r4, #1
 802776a:	7820      	ldrb	r0, [r4, #0]
 802776c:	f7ff ffa9 	bl	80276c2 <__hexdig_fun>
 8027770:	1e07      	subs	r7, r0, #0
 8027772:	d1f9      	bne.n	8027768 <__gethex+0x7c>
 8027774:	2201      	movs	r2, #1
 8027776:	0020      	movs	r0, r4
 8027778:	4990      	ldr	r1, [pc, #576]	@ (80279bc <__gethex+0x2d0>)
 802777a:	f7fe ffb9 	bl	80266f0 <strncmp>
 802777e:	2800      	cmp	r0, #0
 8027780:	d10d      	bne.n	802779e <__gethex+0xb2>
 8027782:	2d00      	cmp	r5, #0
 8027784:	d106      	bne.n	8027794 <__gethex+0xa8>
 8027786:	3401      	adds	r4, #1
 8027788:	0025      	movs	r5, r4
 802778a:	7820      	ldrb	r0, [r4, #0]
 802778c:	f7ff ff99 	bl	80276c2 <__hexdig_fun>
 8027790:	2800      	cmp	r0, #0
 8027792:	d102      	bne.n	802779a <__gethex+0xae>
 8027794:	1b2d      	subs	r5, r5, r4
 8027796:	00af      	lsls	r7, r5, #2
 8027798:	e003      	b.n	80277a2 <__gethex+0xb6>
 802779a:	3401      	adds	r4, #1
 802779c:	e7f5      	b.n	802778a <__gethex+0x9e>
 802779e:	2d00      	cmp	r5, #0
 80277a0:	d1f8      	bne.n	8027794 <__gethex+0xa8>
 80277a2:	2220      	movs	r2, #32
 80277a4:	7823      	ldrb	r3, [r4, #0]
 80277a6:	0026      	movs	r6, r4
 80277a8:	4393      	bics	r3, r2
 80277aa:	2b50      	cmp	r3, #80	@ 0x50
 80277ac:	d11d      	bne.n	80277ea <__gethex+0xfe>
 80277ae:	7863      	ldrb	r3, [r4, #1]
 80277b0:	2b2b      	cmp	r3, #43	@ 0x2b
 80277b2:	d02d      	beq.n	8027810 <__gethex+0x124>
 80277b4:	2b2d      	cmp	r3, #45	@ 0x2d
 80277b6:	d02f      	beq.n	8027818 <__gethex+0x12c>
 80277b8:	2300      	movs	r3, #0
 80277ba:	1c66      	adds	r6, r4, #1
 80277bc:	9304      	str	r3, [sp, #16]
 80277be:	7830      	ldrb	r0, [r6, #0]
 80277c0:	f7ff ff7f 	bl	80276c2 <__hexdig_fun>
 80277c4:	1e43      	subs	r3, r0, #1
 80277c6:	b2db      	uxtb	r3, r3
 80277c8:	0005      	movs	r5, r0
 80277ca:	2b18      	cmp	r3, #24
 80277cc:	d82a      	bhi.n	8027824 <__gethex+0x138>
 80277ce:	7870      	ldrb	r0, [r6, #1]
 80277d0:	f7ff ff77 	bl	80276c2 <__hexdig_fun>
 80277d4:	1e43      	subs	r3, r0, #1
 80277d6:	b2db      	uxtb	r3, r3
 80277d8:	3601      	adds	r6, #1
 80277da:	3d10      	subs	r5, #16
 80277dc:	2b18      	cmp	r3, #24
 80277de:	d91d      	bls.n	802781c <__gethex+0x130>
 80277e0:	9b04      	ldr	r3, [sp, #16]
 80277e2:	2b00      	cmp	r3, #0
 80277e4:	d000      	beq.n	80277e8 <__gethex+0xfc>
 80277e6:	426d      	negs	r5, r5
 80277e8:	197f      	adds	r7, r7, r5
 80277ea:	9b06      	ldr	r3, [sp, #24]
 80277ec:	601e      	str	r6, [r3, #0]
 80277ee:	9b02      	ldr	r3, [sp, #8]
 80277f0:	2b00      	cmp	r3, #0
 80277f2:	d019      	beq.n	8027828 <__gethex+0x13c>
 80277f4:	9b05      	ldr	r3, [sp, #20]
 80277f6:	2606      	movs	r6, #6
 80277f8:	425a      	negs	r2, r3
 80277fa:	4153      	adcs	r3, r2
 80277fc:	425b      	negs	r3, r3
 80277fe:	401e      	ands	r6, r3
 8027800:	0030      	movs	r0, r6
 8027802:	b009      	add	sp, #36	@ 0x24
 8027804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027806:	2301      	movs	r3, #1
 8027808:	2700      	movs	r7, #0
 802780a:	9c00      	ldr	r4, [sp, #0]
 802780c:	9302      	str	r3, [sp, #8]
 802780e:	e7c8      	b.n	80277a2 <__gethex+0xb6>
 8027810:	2300      	movs	r3, #0
 8027812:	9304      	str	r3, [sp, #16]
 8027814:	1ca6      	adds	r6, r4, #2
 8027816:	e7d2      	b.n	80277be <__gethex+0xd2>
 8027818:	2301      	movs	r3, #1
 802781a:	e7fa      	b.n	8027812 <__gethex+0x126>
 802781c:	230a      	movs	r3, #10
 802781e:	435d      	muls	r5, r3
 8027820:	182d      	adds	r5, r5, r0
 8027822:	e7d4      	b.n	80277ce <__gethex+0xe2>
 8027824:	0026      	movs	r6, r4
 8027826:	e7e0      	b.n	80277ea <__gethex+0xfe>
 8027828:	9b00      	ldr	r3, [sp, #0]
 802782a:	9902      	ldr	r1, [sp, #8]
 802782c:	1ae3      	subs	r3, r4, r3
 802782e:	3b01      	subs	r3, #1
 8027830:	2b07      	cmp	r3, #7
 8027832:	dc0a      	bgt.n	802784a <__gethex+0x15e>
 8027834:	9803      	ldr	r0, [sp, #12]
 8027836:	f000 fb19 	bl	8027e6c <_Balloc>
 802783a:	1e05      	subs	r5, r0, #0
 802783c:	d108      	bne.n	8027850 <__gethex+0x164>
 802783e:	002a      	movs	r2, r5
 8027840:	21e4      	movs	r1, #228	@ 0xe4
 8027842:	4b5f      	ldr	r3, [pc, #380]	@ (80279c0 <__gethex+0x2d4>)
 8027844:	485f      	ldr	r0, [pc, #380]	@ (80279c4 <__gethex+0x2d8>)
 8027846:	f001 fbe9 	bl	802901c <__assert_func>
 802784a:	3101      	adds	r1, #1
 802784c:	105b      	asrs	r3, r3, #1
 802784e:	e7ef      	b.n	8027830 <__gethex+0x144>
 8027850:	0003      	movs	r3, r0
 8027852:	3314      	adds	r3, #20
 8027854:	9302      	str	r3, [sp, #8]
 8027856:	9305      	str	r3, [sp, #20]
 8027858:	2300      	movs	r3, #0
 802785a:	001e      	movs	r6, r3
 802785c:	9304      	str	r3, [sp, #16]
 802785e:	9b00      	ldr	r3, [sp, #0]
 8027860:	42a3      	cmp	r3, r4
 8027862:	d338      	bcc.n	80278d6 <__gethex+0x1ea>
 8027864:	9c05      	ldr	r4, [sp, #20]
 8027866:	9b02      	ldr	r3, [sp, #8]
 8027868:	c440      	stmia	r4!, {r6}
 802786a:	1ae4      	subs	r4, r4, r3
 802786c:	10a4      	asrs	r4, r4, #2
 802786e:	0030      	movs	r0, r6
 8027870:	612c      	str	r4, [r5, #16]
 8027872:	f000 fbf3 	bl	802805c <__hi0bits>
 8027876:	9b01      	ldr	r3, [sp, #4]
 8027878:	0164      	lsls	r4, r4, #5
 802787a:	681b      	ldr	r3, [r3, #0]
 802787c:	1a26      	subs	r6, r4, r0
 802787e:	9300      	str	r3, [sp, #0]
 8027880:	429e      	cmp	r6, r3
 8027882:	dd52      	ble.n	802792a <__gethex+0x23e>
 8027884:	1af6      	subs	r6, r6, r3
 8027886:	0031      	movs	r1, r6
 8027888:	0028      	movs	r0, r5
 802788a:	f000 ff8e 	bl	80287aa <__any_on>
 802788e:	1e04      	subs	r4, r0, #0
 8027890:	d00f      	beq.n	80278b2 <__gethex+0x1c6>
 8027892:	2401      	movs	r4, #1
 8027894:	211f      	movs	r1, #31
 8027896:	0020      	movs	r0, r4
 8027898:	1e73      	subs	r3, r6, #1
 802789a:	4019      	ands	r1, r3
 802789c:	4088      	lsls	r0, r1
 802789e:	0001      	movs	r1, r0
 80278a0:	115a      	asrs	r2, r3, #5
 80278a2:	9802      	ldr	r0, [sp, #8]
 80278a4:	0092      	lsls	r2, r2, #2
 80278a6:	5812      	ldr	r2, [r2, r0]
 80278a8:	420a      	tst	r2, r1
 80278aa:	d002      	beq.n	80278b2 <__gethex+0x1c6>
 80278ac:	42a3      	cmp	r3, r4
 80278ae:	dc34      	bgt.n	802791a <__gethex+0x22e>
 80278b0:	2402      	movs	r4, #2
 80278b2:	0031      	movs	r1, r6
 80278b4:	0028      	movs	r0, r5
 80278b6:	f7ff feb1 	bl	802761c <rshift>
 80278ba:	19bf      	adds	r7, r7, r6
 80278bc:	9b01      	ldr	r3, [sp, #4]
 80278be:	689b      	ldr	r3, [r3, #8]
 80278c0:	42bb      	cmp	r3, r7
 80278c2:	da42      	bge.n	802794a <__gethex+0x25e>
 80278c4:	0029      	movs	r1, r5
 80278c6:	9803      	ldr	r0, [sp, #12]
 80278c8:	f000 fb14 	bl	8027ef4 <_Bfree>
 80278cc:	2300      	movs	r3, #0
 80278ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80278d0:	26a3      	movs	r6, #163	@ 0xa3
 80278d2:	6013      	str	r3, [r2, #0]
 80278d4:	e794      	b.n	8027800 <__gethex+0x114>
 80278d6:	3c01      	subs	r4, #1
 80278d8:	7823      	ldrb	r3, [r4, #0]
 80278da:	2b2e      	cmp	r3, #46	@ 0x2e
 80278dc:	d012      	beq.n	8027904 <__gethex+0x218>
 80278de:	9b04      	ldr	r3, [sp, #16]
 80278e0:	2b20      	cmp	r3, #32
 80278e2:	d104      	bne.n	80278ee <__gethex+0x202>
 80278e4:	9b05      	ldr	r3, [sp, #20]
 80278e6:	c340      	stmia	r3!, {r6}
 80278e8:	2600      	movs	r6, #0
 80278ea:	9305      	str	r3, [sp, #20]
 80278ec:	9604      	str	r6, [sp, #16]
 80278ee:	7820      	ldrb	r0, [r4, #0]
 80278f0:	f7ff fee7 	bl	80276c2 <__hexdig_fun>
 80278f4:	230f      	movs	r3, #15
 80278f6:	4018      	ands	r0, r3
 80278f8:	9b04      	ldr	r3, [sp, #16]
 80278fa:	4098      	lsls	r0, r3
 80278fc:	3304      	adds	r3, #4
 80278fe:	4306      	orrs	r6, r0
 8027900:	9304      	str	r3, [sp, #16]
 8027902:	e7ac      	b.n	802785e <__gethex+0x172>
 8027904:	9b00      	ldr	r3, [sp, #0]
 8027906:	42a3      	cmp	r3, r4
 8027908:	d8e9      	bhi.n	80278de <__gethex+0x1f2>
 802790a:	2201      	movs	r2, #1
 802790c:	0020      	movs	r0, r4
 802790e:	492b      	ldr	r1, [pc, #172]	@ (80279bc <__gethex+0x2d0>)
 8027910:	f7fe feee 	bl	80266f0 <strncmp>
 8027914:	2800      	cmp	r0, #0
 8027916:	d1e2      	bne.n	80278de <__gethex+0x1f2>
 8027918:	e7a1      	b.n	802785e <__gethex+0x172>
 802791a:	0028      	movs	r0, r5
 802791c:	1eb1      	subs	r1, r6, #2
 802791e:	f000 ff44 	bl	80287aa <__any_on>
 8027922:	2800      	cmp	r0, #0
 8027924:	d0c4      	beq.n	80278b0 <__gethex+0x1c4>
 8027926:	2403      	movs	r4, #3
 8027928:	e7c3      	b.n	80278b2 <__gethex+0x1c6>
 802792a:	9b00      	ldr	r3, [sp, #0]
 802792c:	2400      	movs	r4, #0
 802792e:	429e      	cmp	r6, r3
 8027930:	dac4      	bge.n	80278bc <__gethex+0x1d0>
 8027932:	1b9e      	subs	r6, r3, r6
 8027934:	0029      	movs	r1, r5
 8027936:	0032      	movs	r2, r6
 8027938:	9803      	ldr	r0, [sp, #12]
 802793a:	f000 fcfd 	bl	8028338 <__lshift>
 802793e:	0003      	movs	r3, r0
 8027940:	3314      	adds	r3, #20
 8027942:	0005      	movs	r5, r0
 8027944:	1bbf      	subs	r7, r7, r6
 8027946:	9302      	str	r3, [sp, #8]
 8027948:	e7b8      	b.n	80278bc <__gethex+0x1d0>
 802794a:	9b01      	ldr	r3, [sp, #4]
 802794c:	685e      	ldr	r6, [r3, #4]
 802794e:	42be      	cmp	r6, r7
 8027950:	dd6f      	ble.n	8027a32 <__gethex+0x346>
 8027952:	9b00      	ldr	r3, [sp, #0]
 8027954:	1bf6      	subs	r6, r6, r7
 8027956:	42b3      	cmp	r3, r6
 8027958:	dc36      	bgt.n	80279c8 <__gethex+0x2dc>
 802795a:	9b01      	ldr	r3, [sp, #4]
 802795c:	68db      	ldr	r3, [r3, #12]
 802795e:	2b02      	cmp	r3, #2
 8027960:	d024      	beq.n	80279ac <__gethex+0x2c0>
 8027962:	2b03      	cmp	r3, #3
 8027964:	d026      	beq.n	80279b4 <__gethex+0x2c8>
 8027966:	2b01      	cmp	r3, #1
 8027968:	d117      	bne.n	802799a <__gethex+0x2ae>
 802796a:	9b00      	ldr	r3, [sp, #0]
 802796c:	42b3      	cmp	r3, r6
 802796e:	d114      	bne.n	802799a <__gethex+0x2ae>
 8027970:	2b01      	cmp	r3, #1
 8027972:	d10b      	bne.n	802798c <__gethex+0x2a0>
 8027974:	9b01      	ldr	r3, [sp, #4]
 8027976:	9a07      	ldr	r2, [sp, #28]
 8027978:	685b      	ldr	r3, [r3, #4]
 802797a:	2662      	movs	r6, #98	@ 0x62
 802797c:	6013      	str	r3, [r2, #0]
 802797e:	2301      	movs	r3, #1
 8027980:	9a02      	ldr	r2, [sp, #8]
 8027982:	612b      	str	r3, [r5, #16]
 8027984:	6013      	str	r3, [r2, #0]
 8027986:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027988:	601d      	str	r5, [r3, #0]
 802798a:	e739      	b.n	8027800 <__gethex+0x114>
 802798c:	9900      	ldr	r1, [sp, #0]
 802798e:	0028      	movs	r0, r5
 8027990:	3901      	subs	r1, #1
 8027992:	f000 ff0a 	bl	80287aa <__any_on>
 8027996:	2800      	cmp	r0, #0
 8027998:	d1ec      	bne.n	8027974 <__gethex+0x288>
 802799a:	0029      	movs	r1, r5
 802799c:	9803      	ldr	r0, [sp, #12]
 802799e:	f000 faa9 	bl	8027ef4 <_Bfree>
 80279a2:	2300      	movs	r3, #0
 80279a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80279a6:	2650      	movs	r6, #80	@ 0x50
 80279a8:	6013      	str	r3, [r2, #0]
 80279aa:	e729      	b.n	8027800 <__gethex+0x114>
 80279ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80279ae:	2b00      	cmp	r3, #0
 80279b0:	d1f3      	bne.n	802799a <__gethex+0x2ae>
 80279b2:	e7df      	b.n	8027974 <__gethex+0x288>
 80279b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80279b6:	2b00      	cmp	r3, #0
 80279b8:	d1dc      	bne.n	8027974 <__gethex+0x288>
 80279ba:	e7ee      	b.n	802799a <__gethex+0x2ae>
 80279bc:	0802ef40 	.word	0x0802ef40
 80279c0:	0802effa 	.word	0x0802effa
 80279c4:	0802f00b 	.word	0x0802f00b
 80279c8:	1e77      	subs	r7, r6, #1
 80279ca:	2c00      	cmp	r4, #0
 80279cc:	d12f      	bne.n	8027a2e <__gethex+0x342>
 80279ce:	2f00      	cmp	r7, #0
 80279d0:	d004      	beq.n	80279dc <__gethex+0x2f0>
 80279d2:	0039      	movs	r1, r7
 80279d4:	0028      	movs	r0, r5
 80279d6:	f000 fee8 	bl	80287aa <__any_on>
 80279da:	0004      	movs	r4, r0
 80279dc:	231f      	movs	r3, #31
 80279de:	117a      	asrs	r2, r7, #5
 80279e0:	401f      	ands	r7, r3
 80279e2:	3b1e      	subs	r3, #30
 80279e4:	40bb      	lsls	r3, r7
 80279e6:	9902      	ldr	r1, [sp, #8]
 80279e8:	0092      	lsls	r2, r2, #2
 80279ea:	5852      	ldr	r2, [r2, r1]
 80279ec:	421a      	tst	r2, r3
 80279ee:	d001      	beq.n	80279f4 <__gethex+0x308>
 80279f0:	2302      	movs	r3, #2
 80279f2:	431c      	orrs	r4, r3
 80279f4:	9b00      	ldr	r3, [sp, #0]
 80279f6:	0031      	movs	r1, r6
 80279f8:	1b9b      	subs	r3, r3, r6
 80279fa:	2602      	movs	r6, #2
 80279fc:	0028      	movs	r0, r5
 80279fe:	9300      	str	r3, [sp, #0]
 8027a00:	f7ff fe0c 	bl	802761c <rshift>
 8027a04:	9b01      	ldr	r3, [sp, #4]
 8027a06:	685f      	ldr	r7, [r3, #4]
 8027a08:	2c00      	cmp	r4, #0
 8027a0a:	d03f      	beq.n	8027a8c <__gethex+0x3a0>
 8027a0c:	9b01      	ldr	r3, [sp, #4]
 8027a0e:	68db      	ldr	r3, [r3, #12]
 8027a10:	2b02      	cmp	r3, #2
 8027a12:	d010      	beq.n	8027a36 <__gethex+0x34a>
 8027a14:	2b03      	cmp	r3, #3
 8027a16:	d012      	beq.n	8027a3e <__gethex+0x352>
 8027a18:	2b01      	cmp	r3, #1
 8027a1a:	d106      	bne.n	8027a2a <__gethex+0x33e>
 8027a1c:	07a2      	lsls	r2, r4, #30
 8027a1e:	d504      	bpl.n	8027a2a <__gethex+0x33e>
 8027a20:	9a02      	ldr	r2, [sp, #8]
 8027a22:	6812      	ldr	r2, [r2, #0]
 8027a24:	4314      	orrs	r4, r2
 8027a26:	421c      	tst	r4, r3
 8027a28:	d10c      	bne.n	8027a44 <__gethex+0x358>
 8027a2a:	2310      	movs	r3, #16
 8027a2c:	e02d      	b.n	8027a8a <__gethex+0x39e>
 8027a2e:	2401      	movs	r4, #1
 8027a30:	e7d4      	b.n	80279dc <__gethex+0x2f0>
 8027a32:	2601      	movs	r6, #1
 8027a34:	e7e8      	b.n	8027a08 <__gethex+0x31c>
 8027a36:	2301      	movs	r3, #1
 8027a38:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8027a3a:	1a9b      	subs	r3, r3, r2
 8027a3c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027a3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027a40:	2b00      	cmp	r3, #0
 8027a42:	d0f2      	beq.n	8027a2a <__gethex+0x33e>
 8027a44:	692b      	ldr	r3, [r5, #16]
 8027a46:	2000      	movs	r0, #0
 8027a48:	9302      	str	r3, [sp, #8]
 8027a4a:	009b      	lsls	r3, r3, #2
 8027a4c:	9304      	str	r3, [sp, #16]
 8027a4e:	002b      	movs	r3, r5
 8027a50:	9a04      	ldr	r2, [sp, #16]
 8027a52:	3314      	adds	r3, #20
 8027a54:	1899      	adds	r1, r3, r2
 8027a56:	681a      	ldr	r2, [r3, #0]
 8027a58:	1c54      	adds	r4, r2, #1
 8027a5a:	d01c      	beq.n	8027a96 <__gethex+0x3aa>
 8027a5c:	3201      	adds	r2, #1
 8027a5e:	601a      	str	r2, [r3, #0]
 8027a60:	002b      	movs	r3, r5
 8027a62:	3314      	adds	r3, #20
 8027a64:	2e02      	cmp	r6, #2
 8027a66:	d13f      	bne.n	8027ae8 <__gethex+0x3fc>
 8027a68:	9a01      	ldr	r2, [sp, #4]
 8027a6a:	9900      	ldr	r1, [sp, #0]
 8027a6c:	6812      	ldr	r2, [r2, #0]
 8027a6e:	3a01      	subs	r2, #1
 8027a70:	428a      	cmp	r2, r1
 8027a72:	d109      	bne.n	8027a88 <__gethex+0x39c>
 8027a74:	000a      	movs	r2, r1
 8027a76:	201f      	movs	r0, #31
 8027a78:	4010      	ands	r0, r2
 8027a7a:	2201      	movs	r2, #1
 8027a7c:	4082      	lsls	r2, r0
 8027a7e:	1149      	asrs	r1, r1, #5
 8027a80:	0089      	lsls	r1, r1, #2
 8027a82:	58cb      	ldr	r3, [r1, r3]
 8027a84:	4213      	tst	r3, r2
 8027a86:	d13d      	bne.n	8027b04 <__gethex+0x418>
 8027a88:	2320      	movs	r3, #32
 8027a8a:	431e      	orrs	r6, r3
 8027a8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027a8e:	601d      	str	r5, [r3, #0]
 8027a90:	9b07      	ldr	r3, [sp, #28]
 8027a92:	601f      	str	r7, [r3, #0]
 8027a94:	e6b4      	b.n	8027800 <__gethex+0x114>
 8027a96:	c301      	stmia	r3!, {r0}
 8027a98:	4299      	cmp	r1, r3
 8027a9a:	d8dc      	bhi.n	8027a56 <__gethex+0x36a>
 8027a9c:	68ab      	ldr	r3, [r5, #8]
 8027a9e:	9a02      	ldr	r2, [sp, #8]
 8027aa0:	429a      	cmp	r2, r3
 8027aa2:	db18      	blt.n	8027ad6 <__gethex+0x3ea>
 8027aa4:	6869      	ldr	r1, [r5, #4]
 8027aa6:	9803      	ldr	r0, [sp, #12]
 8027aa8:	3101      	adds	r1, #1
 8027aaa:	f000 f9df 	bl	8027e6c <_Balloc>
 8027aae:	1e04      	subs	r4, r0, #0
 8027ab0:	d104      	bne.n	8027abc <__gethex+0x3d0>
 8027ab2:	0022      	movs	r2, r4
 8027ab4:	2184      	movs	r1, #132	@ 0x84
 8027ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8027b2c <__gethex+0x440>)
 8027ab8:	481d      	ldr	r0, [pc, #116]	@ (8027b30 <__gethex+0x444>)
 8027aba:	e6c4      	b.n	8027846 <__gethex+0x15a>
 8027abc:	0029      	movs	r1, r5
 8027abe:	692a      	ldr	r2, [r5, #16]
 8027ac0:	310c      	adds	r1, #12
 8027ac2:	3202      	adds	r2, #2
 8027ac4:	0092      	lsls	r2, r2, #2
 8027ac6:	300c      	adds	r0, #12
 8027ac8:	f7fe fed8 	bl	802687c <memcpy>
 8027acc:	0029      	movs	r1, r5
 8027ace:	9803      	ldr	r0, [sp, #12]
 8027ad0:	f000 fa10 	bl	8027ef4 <_Bfree>
 8027ad4:	0025      	movs	r5, r4
 8027ad6:	692b      	ldr	r3, [r5, #16]
 8027ad8:	1c5a      	adds	r2, r3, #1
 8027ada:	612a      	str	r2, [r5, #16]
 8027adc:	2201      	movs	r2, #1
 8027ade:	3304      	adds	r3, #4
 8027ae0:	009b      	lsls	r3, r3, #2
 8027ae2:	18eb      	adds	r3, r5, r3
 8027ae4:	605a      	str	r2, [r3, #4]
 8027ae6:	e7bb      	b.n	8027a60 <__gethex+0x374>
 8027ae8:	692a      	ldr	r2, [r5, #16]
 8027aea:	9902      	ldr	r1, [sp, #8]
 8027aec:	428a      	cmp	r2, r1
 8027aee:	dd0b      	ble.n	8027b08 <__gethex+0x41c>
 8027af0:	2101      	movs	r1, #1
 8027af2:	0028      	movs	r0, r5
 8027af4:	f7ff fd92 	bl	802761c <rshift>
 8027af8:	9b01      	ldr	r3, [sp, #4]
 8027afa:	3701      	adds	r7, #1
 8027afc:	689b      	ldr	r3, [r3, #8]
 8027afe:	42bb      	cmp	r3, r7
 8027b00:	da00      	bge.n	8027b04 <__gethex+0x418>
 8027b02:	e6df      	b.n	80278c4 <__gethex+0x1d8>
 8027b04:	2601      	movs	r6, #1
 8027b06:	e7bf      	b.n	8027a88 <__gethex+0x39c>
 8027b08:	221f      	movs	r2, #31
 8027b0a:	9c00      	ldr	r4, [sp, #0]
 8027b0c:	9900      	ldr	r1, [sp, #0]
 8027b0e:	4014      	ands	r4, r2
 8027b10:	4211      	tst	r1, r2
 8027b12:	d0f7      	beq.n	8027b04 <__gethex+0x418>
 8027b14:	9a04      	ldr	r2, [sp, #16]
 8027b16:	189b      	adds	r3, r3, r2
 8027b18:	3b04      	subs	r3, #4
 8027b1a:	6818      	ldr	r0, [r3, #0]
 8027b1c:	f000 fa9e 	bl	802805c <__hi0bits>
 8027b20:	2320      	movs	r3, #32
 8027b22:	1b1b      	subs	r3, r3, r4
 8027b24:	4298      	cmp	r0, r3
 8027b26:	dbe3      	blt.n	8027af0 <__gethex+0x404>
 8027b28:	e7ec      	b.n	8027b04 <__gethex+0x418>
 8027b2a:	46c0      	nop			@ (mov r8, r8)
 8027b2c:	0802effa 	.word	0x0802effa
 8027b30:	0802f00b 	.word	0x0802f00b

08027b34 <L_shift>:
 8027b34:	2308      	movs	r3, #8
 8027b36:	b570      	push	{r4, r5, r6, lr}
 8027b38:	2520      	movs	r5, #32
 8027b3a:	1a9a      	subs	r2, r3, r2
 8027b3c:	0092      	lsls	r2, r2, #2
 8027b3e:	1aad      	subs	r5, r5, r2
 8027b40:	6843      	ldr	r3, [r0, #4]
 8027b42:	6804      	ldr	r4, [r0, #0]
 8027b44:	001e      	movs	r6, r3
 8027b46:	40ae      	lsls	r6, r5
 8027b48:	40d3      	lsrs	r3, r2
 8027b4a:	4334      	orrs	r4, r6
 8027b4c:	6004      	str	r4, [r0, #0]
 8027b4e:	6043      	str	r3, [r0, #4]
 8027b50:	3004      	adds	r0, #4
 8027b52:	4288      	cmp	r0, r1
 8027b54:	d3f4      	bcc.n	8027b40 <L_shift+0xc>
 8027b56:	bd70      	pop	{r4, r5, r6, pc}

08027b58 <__match>:
 8027b58:	b530      	push	{r4, r5, lr}
 8027b5a:	6803      	ldr	r3, [r0, #0]
 8027b5c:	780c      	ldrb	r4, [r1, #0]
 8027b5e:	3301      	adds	r3, #1
 8027b60:	2c00      	cmp	r4, #0
 8027b62:	d102      	bne.n	8027b6a <__match+0x12>
 8027b64:	6003      	str	r3, [r0, #0]
 8027b66:	2001      	movs	r0, #1
 8027b68:	bd30      	pop	{r4, r5, pc}
 8027b6a:	781a      	ldrb	r2, [r3, #0]
 8027b6c:	0015      	movs	r5, r2
 8027b6e:	3d41      	subs	r5, #65	@ 0x41
 8027b70:	2d19      	cmp	r5, #25
 8027b72:	d800      	bhi.n	8027b76 <__match+0x1e>
 8027b74:	3220      	adds	r2, #32
 8027b76:	3101      	adds	r1, #1
 8027b78:	42a2      	cmp	r2, r4
 8027b7a:	d0ef      	beq.n	8027b5c <__match+0x4>
 8027b7c:	2000      	movs	r0, #0
 8027b7e:	e7f3      	b.n	8027b68 <__match+0x10>

08027b80 <__hexnan>:
 8027b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8027b82:	680b      	ldr	r3, [r1, #0]
 8027b84:	b08b      	sub	sp, #44	@ 0x2c
 8027b86:	9201      	str	r2, [sp, #4]
 8027b88:	9901      	ldr	r1, [sp, #4]
 8027b8a:	115a      	asrs	r2, r3, #5
 8027b8c:	0092      	lsls	r2, r2, #2
 8027b8e:	188a      	adds	r2, r1, r2
 8027b90:	9202      	str	r2, [sp, #8]
 8027b92:	0019      	movs	r1, r3
 8027b94:	221f      	movs	r2, #31
 8027b96:	4011      	ands	r1, r2
 8027b98:	9008      	str	r0, [sp, #32]
 8027b9a:	9106      	str	r1, [sp, #24]
 8027b9c:	4213      	tst	r3, r2
 8027b9e:	d002      	beq.n	8027ba6 <__hexnan+0x26>
 8027ba0:	9b02      	ldr	r3, [sp, #8]
 8027ba2:	3304      	adds	r3, #4
 8027ba4:	9302      	str	r3, [sp, #8]
 8027ba6:	9b02      	ldr	r3, [sp, #8]
 8027ba8:	2500      	movs	r5, #0
 8027baa:	1f1f      	subs	r7, r3, #4
 8027bac:	003e      	movs	r6, r7
 8027bae:	003c      	movs	r4, r7
 8027bb0:	9b08      	ldr	r3, [sp, #32]
 8027bb2:	603d      	str	r5, [r7, #0]
 8027bb4:	681b      	ldr	r3, [r3, #0]
 8027bb6:	9507      	str	r5, [sp, #28]
 8027bb8:	9305      	str	r3, [sp, #20]
 8027bba:	9503      	str	r5, [sp, #12]
 8027bbc:	9b05      	ldr	r3, [sp, #20]
 8027bbe:	3301      	adds	r3, #1
 8027bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8027bc2:	9b05      	ldr	r3, [sp, #20]
 8027bc4:	785b      	ldrb	r3, [r3, #1]
 8027bc6:	9304      	str	r3, [sp, #16]
 8027bc8:	2b00      	cmp	r3, #0
 8027bca:	d028      	beq.n	8027c1e <__hexnan+0x9e>
 8027bcc:	9804      	ldr	r0, [sp, #16]
 8027bce:	f7ff fd78 	bl	80276c2 <__hexdig_fun>
 8027bd2:	2800      	cmp	r0, #0
 8027bd4:	d155      	bne.n	8027c82 <__hexnan+0x102>
 8027bd6:	9b04      	ldr	r3, [sp, #16]
 8027bd8:	2b20      	cmp	r3, #32
 8027bda:	d819      	bhi.n	8027c10 <__hexnan+0x90>
 8027bdc:	9b03      	ldr	r3, [sp, #12]
 8027bde:	9a07      	ldr	r2, [sp, #28]
 8027be0:	4293      	cmp	r3, r2
 8027be2:	dd12      	ble.n	8027c0a <__hexnan+0x8a>
 8027be4:	42b4      	cmp	r4, r6
 8027be6:	d206      	bcs.n	8027bf6 <__hexnan+0x76>
 8027be8:	2d07      	cmp	r5, #7
 8027bea:	dc04      	bgt.n	8027bf6 <__hexnan+0x76>
 8027bec:	002a      	movs	r2, r5
 8027bee:	0031      	movs	r1, r6
 8027bf0:	0020      	movs	r0, r4
 8027bf2:	f7ff ff9f 	bl	8027b34 <L_shift>
 8027bf6:	9b01      	ldr	r3, [sp, #4]
 8027bf8:	2508      	movs	r5, #8
 8027bfa:	429c      	cmp	r4, r3
 8027bfc:	d905      	bls.n	8027c0a <__hexnan+0x8a>
 8027bfe:	1f26      	subs	r6, r4, #4
 8027c00:	2500      	movs	r5, #0
 8027c02:	0034      	movs	r4, r6
 8027c04:	9b03      	ldr	r3, [sp, #12]
 8027c06:	6035      	str	r5, [r6, #0]
 8027c08:	9307      	str	r3, [sp, #28]
 8027c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027c0c:	9305      	str	r3, [sp, #20]
 8027c0e:	e7d5      	b.n	8027bbc <__hexnan+0x3c>
 8027c10:	9b04      	ldr	r3, [sp, #16]
 8027c12:	2b29      	cmp	r3, #41	@ 0x29
 8027c14:	d15a      	bne.n	8027ccc <__hexnan+0x14c>
 8027c16:	9b05      	ldr	r3, [sp, #20]
 8027c18:	9a08      	ldr	r2, [sp, #32]
 8027c1a:	3302      	adds	r3, #2
 8027c1c:	6013      	str	r3, [r2, #0]
 8027c1e:	9b03      	ldr	r3, [sp, #12]
 8027c20:	2b00      	cmp	r3, #0
 8027c22:	d053      	beq.n	8027ccc <__hexnan+0x14c>
 8027c24:	42b4      	cmp	r4, r6
 8027c26:	d206      	bcs.n	8027c36 <__hexnan+0xb6>
 8027c28:	2d07      	cmp	r5, #7
 8027c2a:	dc04      	bgt.n	8027c36 <__hexnan+0xb6>
 8027c2c:	002a      	movs	r2, r5
 8027c2e:	0031      	movs	r1, r6
 8027c30:	0020      	movs	r0, r4
 8027c32:	f7ff ff7f 	bl	8027b34 <L_shift>
 8027c36:	9b01      	ldr	r3, [sp, #4]
 8027c38:	429c      	cmp	r4, r3
 8027c3a:	d936      	bls.n	8027caa <__hexnan+0x12a>
 8027c3c:	001a      	movs	r2, r3
 8027c3e:	0023      	movs	r3, r4
 8027c40:	cb02      	ldmia	r3!, {r1}
 8027c42:	c202      	stmia	r2!, {r1}
 8027c44:	429f      	cmp	r7, r3
 8027c46:	d2fb      	bcs.n	8027c40 <__hexnan+0xc0>
 8027c48:	9b02      	ldr	r3, [sp, #8]
 8027c4a:	1c62      	adds	r2, r4, #1
 8027c4c:	1ed9      	subs	r1, r3, #3
 8027c4e:	2304      	movs	r3, #4
 8027c50:	4291      	cmp	r1, r2
 8027c52:	d305      	bcc.n	8027c60 <__hexnan+0xe0>
 8027c54:	9b02      	ldr	r3, [sp, #8]
 8027c56:	3b04      	subs	r3, #4
 8027c58:	1b1b      	subs	r3, r3, r4
 8027c5a:	089b      	lsrs	r3, r3, #2
 8027c5c:	3301      	adds	r3, #1
 8027c5e:	009b      	lsls	r3, r3, #2
 8027c60:	9a01      	ldr	r2, [sp, #4]
 8027c62:	18d3      	adds	r3, r2, r3
 8027c64:	2200      	movs	r2, #0
 8027c66:	c304      	stmia	r3!, {r2}
 8027c68:	429f      	cmp	r7, r3
 8027c6a:	d2fc      	bcs.n	8027c66 <__hexnan+0xe6>
 8027c6c:	683b      	ldr	r3, [r7, #0]
 8027c6e:	2b00      	cmp	r3, #0
 8027c70:	d104      	bne.n	8027c7c <__hexnan+0xfc>
 8027c72:	9b01      	ldr	r3, [sp, #4]
 8027c74:	429f      	cmp	r7, r3
 8027c76:	d127      	bne.n	8027cc8 <__hexnan+0x148>
 8027c78:	2301      	movs	r3, #1
 8027c7a:	603b      	str	r3, [r7, #0]
 8027c7c:	2005      	movs	r0, #5
 8027c7e:	b00b      	add	sp, #44	@ 0x2c
 8027c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027c82:	9b03      	ldr	r3, [sp, #12]
 8027c84:	3501      	adds	r5, #1
 8027c86:	3301      	adds	r3, #1
 8027c88:	9303      	str	r3, [sp, #12]
 8027c8a:	2d08      	cmp	r5, #8
 8027c8c:	dd06      	ble.n	8027c9c <__hexnan+0x11c>
 8027c8e:	9b01      	ldr	r3, [sp, #4]
 8027c90:	429c      	cmp	r4, r3
 8027c92:	d9ba      	bls.n	8027c0a <__hexnan+0x8a>
 8027c94:	2300      	movs	r3, #0
 8027c96:	2501      	movs	r5, #1
 8027c98:	3c04      	subs	r4, #4
 8027c9a:	6023      	str	r3, [r4, #0]
 8027c9c:	220f      	movs	r2, #15
 8027c9e:	6823      	ldr	r3, [r4, #0]
 8027ca0:	4010      	ands	r0, r2
 8027ca2:	011b      	lsls	r3, r3, #4
 8027ca4:	4303      	orrs	r3, r0
 8027ca6:	6023      	str	r3, [r4, #0]
 8027ca8:	e7af      	b.n	8027c0a <__hexnan+0x8a>
 8027caa:	9b06      	ldr	r3, [sp, #24]
 8027cac:	2b00      	cmp	r3, #0
 8027cae:	d0dd      	beq.n	8027c6c <__hexnan+0xec>
 8027cb0:	2320      	movs	r3, #32
 8027cb2:	9a06      	ldr	r2, [sp, #24]
 8027cb4:	9902      	ldr	r1, [sp, #8]
 8027cb6:	1a9b      	subs	r3, r3, r2
 8027cb8:	2201      	movs	r2, #1
 8027cba:	4252      	negs	r2, r2
 8027cbc:	40da      	lsrs	r2, r3
 8027cbe:	3904      	subs	r1, #4
 8027cc0:	680b      	ldr	r3, [r1, #0]
 8027cc2:	4013      	ands	r3, r2
 8027cc4:	600b      	str	r3, [r1, #0]
 8027cc6:	e7d1      	b.n	8027c6c <__hexnan+0xec>
 8027cc8:	3f04      	subs	r7, #4
 8027cca:	e7cf      	b.n	8027c6c <__hexnan+0xec>
 8027ccc:	2004      	movs	r0, #4
 8027cce:	e7d6      	b.n	8027c7e <__hexnan+0xfe>

08027cd0 <malloc>:
 8027cd0:	b510      	push	{r4, lr}
 8027cd2:	4b03      	ldr	r3, [pc, #12]	@ (8027ce0 <malloc+0x10>)
 8027cd4:	0001      	movs	r1, r0
 8027cd6:	6818      	ldr	r0, [r3, #0]
 8027cd8:	f000 f826 	bl	8027d28 <_malloc_r>
 8027cdc:	bd10      	pop	{r4, pc}
 8027cde:	46c0      	nop			@ (mov r8, r8)
 8027ce0:	200003ec 	.word	0x200003ec

08027ce4 <sbrk_aligned>:
 8027ce4:	b570      	push	{r4, r5, r6, lr}
 8027ce6:	4e0f      	ldr	r6, [pc, #60]	@ (8027d24 <sbrk_aligned+0x40>)
 8027ce8:	000d      	movs	r5, r1
 8027cea:	6831      	ldr	r1, [r6, #0]
 8027cec:	0004      	movs	r4, r0
 8027cee:	2900      	cmp	r1, #0
 8027cf0:	d102      	bne.n	8027cf8 <sbrk_aligned+0x14>
 8027cf2:	f001 f981 	bl	8028ff8 <_sbrk_r>
 8027cf6:	6030      	str	r0, [r6, #0]
 8027cf8:	0029      	movs	r1, r5
 8027cfa:	0020      	movs	r0, r4
 8027cfc:	f001 f97c 	bl	8028ff8 <_sbrk_r>
 8027d00:	1c43      	adds	r3, r0, #1
 8027d02:	d103      	bne.n	8027d0c <sbrk_aligned+0x28>
 8027d04:	2501      	movs	r5, #1
 8027d06:	426d      	negs	r5, r5
 8027d08:	0028      	movs	r0, r5
 8027d0a:	bd70      	pop	{r4, r5, r6, pc}
 8027d0c:	2303      	movs	r3, #3
 8027d0e:	1cc5      	adds	r5, r0, #3
 8027d10:	439d      	bics	r5, r3
 8027d12:	42a8      	cmp	r0, r5
 8027d14:	d0f8      	beq.n	8027d08 <sbrk_aligned+0x24>
 8027d16:	1a29      	subs	r1, r5, r0
 8027d18:	0020      	movs	r0, r4
 8027d1a:	f001 f96d 	bl	8028ff8 <_sbrk_r>
 8027d1e:	3001      	adds	r0, #1
 8027d20:	d1f2      	bne.n	8027d08 <sbrk_aligned+0x24>
 8027d22:	e7ef      	b.n	8027d04 <sbrk_aligned+0x20>
 8027d24:	200038c4 	.word	0x200038c4

08027d28 <_malloc_r>:
 8027d28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027d2a:	2203      	movs	r2, #3
 8027d2c:	1ccb      	adds	r3, r1, #3
 8027d2e:	4393      	bics	r3, r2
 8027d30:	3308      	adds	r3, #8
 8027d32:	0005      	movs	r5, r0
 8027d34:	001f      	movs	r7, r3
 8027d36:	2b0c      	cmp	r3, #12
 8027d38:	d234      	bcs.n	8027da4 <_malloc_r+0x7c>
 8027d3a:	270c      	movs	r7, #12
 8027d3c:	42b9      	cmp	r1, r7
 8027d3e:	d833      	bhi.n	8027da8 <_malloc_r+0x80>
 8027d40:	0028      	movs	r0, r5
 8027d42:	f000 f883 	bl	8027e4c <__malloc_lock>
 8027d46:	4e37      	ldr	r6, [pc, #220]	@ (8027e24 <_malloc_r+0xfc>)
 8027d48:	6833      	ldr	r3, [r6, #0]
 8027d4a:	001c      	movs	r4, r3
 8027d4c:	2c00      	cmp	r4, #0
 8027d4e:	d12f      	bne.n	8027db0 <_malloc_r+0x88>
 8027d50:	0039      	movs	r1, r7
 8027d52:	0028      	movs	r0, r5
 8027d54:	f7ff ffc6 	bl	8027ce4 <sbrk_aligned>
 8027d58:	0004      	movs	r4, r0
 8027d5a:	1c43      	adds	r3, r0, #1
 8027d5c:	d15f      	bne.n	8027e1e <_malloc_r+0xf6>
 8027d5e:	6834      	ldr	r4, [r6, #0]
 8027d60:	9400      	str	r4, [sp, #0]
 8027d62:	9b00      	ldr	r3, [sp, #0]
 8027d64:	2b00      	cmp	r3, #0
 8027d66:	d14a      	bne.n	8027dfe <_malloc_r+0xd6>
 8027d68:	2c00      	cmp	r4, #0
 8027d6a:	d052      	beq.n	8027e12 <_malloc_r+0xea>
 8027d6c:	6823      	ldr	r3, [r4, #0]
 8027d6e:	0028      	movs	r0, r5
 8027d70:	18e3      	adds	r3, r4, r3
 8027d72:	9900      	ldr	r1, [sp, #0]
 8027d74:	9301      	str	r3, [sp, #4]
 8027d76:	f001 f93f 	bl	8028ff8 <_sbrk_r>
 8027d7a:	9b01      	ldr	r3, [sp, #4]
 8027d7c:	4283      	cmp	r3, r0
 8027d7e:	d148      	bne.n	8027e12 <_malloc_r+0xea>
 8027d80:	6823      	ldr	r3, [r4, #0]
 8027d82:	0028      	movs	r0, r5
 8027d84:	1aff      	subs	r7, r7, r3
 8027d86:	0039      	movs	r1, r7
 8027d88:	f7ff ffac 	bl	8027ce4 <sbrk_aligned>
 8027d8c:	3001      	adds	r0, #1
 8027d8e:	d040      	beq.n	8027e12 <_malloc_r+0xea>
 8027d90:	6823      	ldr	r3, [r4, #0]
 8027d92:	19db      	adds	r3, r3, r7
 8027d94:	6023      	str	r3, [r4, #0]
 8027d96:	6833      	ldr	r3, [r6, #0]
 8027d98:	685a      	ldr	r2, [r3, #4]
 8027d9a:	2a00      	cmp	r2, #0
 8027d9c:	d133      	bne.n	8027e06 <_malloc_r+0xde>
 8027d9e:	9b00      	ldr	r3, [sp, #0]
 8027da0:	6033      	str	r3, [r6, #0]
 8027da2:	e019      	b.n	8027dd8 <_malloc_r+0xb0>
 8027da4:	2b00      	cmp	r3, #0
 8027da6:	dac9      	bge.n	8027d3c <_malloc_r+0x14>
 8027da8:	230c      	movs	r3, #12
 8027daa:	602b      	str	r3, [r5, #0]
 8027dac:	2000      	movs	r0, #0
 8027dae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027db0:	6821      	ldr	r1, [r4, #0]
 8027db2:	1bc9      	subs	r1, r1, r7
 8027db4:	d420      	bmi.n	8027df8 <_malloc_r+0xd0>
 8027db6:	290b      	cmp	r1, #11
 8027db8:	d90a      	bls.n	8027dd0 <_malloc_r+0xa8>
 8027dba:	19e2      	adds	r2, r4, r7
 8027dbc:	6027      	str	r7, [r4, #0]
 8027dbe:	42a3      	cmp	r3, r4
 8027dc0:	d104      	bne.n	8027dcc <_malloc_r+0xa4>
 8027dc2:	6032      	str	r2, [r6, #0]
 8027dc4:	6863      	ldr	r3, [r4, #4]
 8027dc6:	6011      	str	r1, [r2, #0]
 8027dc8:	6053      	str	r3, [r2, #4]
 8027dca:	e005      	b.n	8027dd8 <_malloc_r+0xb0>
 8027dcc:	605a      	str	r2, [r3, #4]
 8027dce:	e7f9      	b.n	8027dc4 <_malloc_r+0x9c>
 8027dd0:	6862      	ldr	r2, [r4, #4]
 8027dd2:	42a3      	cmp	r3, r4
 8027dd4:	d10e      	bne.n	8027df4 <_malloc_r+0xcc>
 8027dd6:	6032      	str	r2, [r6, #0]
 8027dd8:	0028      	movs	r0, r5
 8027dda:	f000 f83f 	bl	8027e5c <__malloc_unlock>
 8027dde:	0020      	movs	r0, r4
 8027de0:	2207      	movs	r2, #7
 8027de2:	300b      	adds	r0, #11
 8027de4:	1d23      	adds	r3, r4, #4
 8027de6:	4390      	bics	r0, r2
 8027de8:	1ac2      	subs	r2, r0, r3
 8027dea:	4298      	cmp	r0, r3
 8027dec:	d0df      	beq.n	8027dae <_malloc_r+0x86>
 8027dee:	1a1b      	subs	r3, r3, r0
 8027df0:	50a3      	str	r3, [r4, r2]
 8027df2:	e7dc      	b.n	8027dae <_malloc_r+0x86>
 8027df4:	605a      	str	r2, [r3, #4]
 8027df6:	e7ef      	b.n	8027dd8 <_malloc_r+0xb0>
 8027df8:	0023      	movs	r3, r4
 8027dfa:	6864      	ldr	r4, [r4, #4]
 8027dfc:	e7a6      	b.n	8027d4c <_malloc_r+0x24>
 8027dfe:	9c00      	ldr	r4, [sp, #0]
 8027e00:	6863      	ldr	r3, [r4, #4]
 8027e02:	9300      	str	r3, [sp, #0]
 8027e04:	e7ad      	b.n	8027d62 <_malloc_r+0x3a>
 8027e06:	001a      	movs	r2, r3
 8027e08:	685b      	ldr	r3, [r3, #4]
 8027e0a:	42a3      	cmp	r3, r4
 8027e0c:	d1fb      	bne.n	8027e06 <_malloc_r+0xde>
 8027e0e:	2300      	movs	r3, #0
 8027e10:	e7da      	b.n	8027dc8 <_malloc_r+0xa0>
 8027e12:	230c      	movs	r3, #12
 8027e14:	0028      	movs	r0, r5
 8027e16:	602b      	str	r3, [r5, #0]
 8027e18:	f000 f820 	bl	8027e5c <__malloc_unlock>
 8027e1c:	e7c6      	b.n	8027dac <_malloc_r+0x84>
 8027e1e:	6007      	str	r7, [r0, #0]
 8027e20:	e7da      	b.n	8027dd8 <_malloc_r+0xb0>
 8027e22:	46c0      	nop			@ (mov r8, r8)
 8027e24:	200038c8 	.word	0x200038c8

08027e28 <__ascii_mbtowc>:
 8027e28:	b082      	sub	sp, #8
 8027e2a:	2900      	cmp	r1, #0
 8027e2c:	d100      	bne.n	8027e30 <__ascii_mbtowc+0x8>
 8027e2e:	a901      	add	r1, sp, #4
 8027e30:	1e10      	subs	r0, r2, #0
 8027e32:	d006      	beq.n	8027e42 <__ascii_mbtowc+0x1a>
 8027e34:	2b00      	cmp	r3, #0
 8027e36:	d006      	beq.n	8027e46 <__ascii_mbtowc+0x1e>
 8027e38:	7813      	ldrb	r3, [r2, #0]
 8027e3a:	600b      	str	r3, [r1, #0]
 8027e3c:	7810      	ldrb	r0, [r2, #0]
 8027e3e:	1e43      	subs	r3, r0, #1
 8027e40:	4198      	sbcs	r0, r3
 8027e42:	b002      	add	sp, #8
 8027e44:	4770      	bx	lr
 8027e46:	2002      	movs	r0, #2
 8027e48:	4240      	negs	r0, r0
 8027e4a:	e7fa      	b.n	8027e42 <__ascii_mbtowc+0x1a>

08027e4c <__malloc_lock>:
 8027e4c:	b510      	push	{r4, lr}
 8027e4e:	4802      	ldr	r0, [pc, #8]	@ (8027e58 <__malloc_lock+0xc>)
 8027e50:	f7fe fd07 	bl	8026862 <__retarget_lock_acquire_recursive>
 8027e54:	bd10      	pop	{r4, pc}
 8027e56:	46c0      	nop			@ (mov r8, r8)
 8027e58:	200038c0 	.word	0x200038c0

08027e5c <__malloc_unlock>:
 8027e5c:	b510      	push	{r4, lr}
 8027e5e:	4802      	ldr	r0, [pc, #8]	@ (8027e68 <__malloc_unlock+0xc>)
 8027e60:	f7fe fd00 	bl	8026864 <__retarget_lock_release_recursive>
 8027e64:	bd10      	pop	{r4, pc}
 8027e66:	46c0      	nop			@ (mov r8, r8)
 8027e68:	200038c0 	.word	0x200038c0

08027e6c <_Balloc>:
 8027e6c:	b570      	push	{r4, r5, r6, lr}
 8027e6e:	69c5      	ldr	r5, [r0, #28]
 8027e70:	0006      	movs	r6, r0
 8027e72:	000c      	movs	r4, r1
 8027e74:	2d00      	cmp	r5, #0
 8027e76:	d10e      	bne.n	8027e96 <_Balloc+0x2a>
 8027e78:	2010      	movs	r0, #16
 8027e7a:	f7ff ff29 	bl	8027cd0 <malloc>
 8027e7e:	1e02      	subs	r2, r0, #0
 8027e80:	61f0      	str	r0, [r6, #28]
 8027e82:	d104      	bne.n	8027e8e <_Balloc+0x22>
 8027e84:	216b      	movs	r1, #107	@ 0x6b
 8027e86:	4b19      	ldr	r3, [pc, #100]	@ (8027eec <_Balloc+0x80>)
 8027e88:	4819      	ldr	r0, [pc, #100]	@ (8027ef0 <_Balloc+0x84>)
 8027e8a:	f001 f8c7 	bl	802901c <__assert_func>
 8027e8e:	6045      	str	r5, [r0, #4]
 8027e90:	6085      	str	r5, [r0, #8]
 8027e92:	6005      	str	r5, [r0, #0]
 8027e94:	60c5      	str	r5, [r0, #12]
 8027e96:	69f5      	ldr	r5, [r6, #28]
 8027e98:	68eb      	ldr	r3, [r5, #12]
 8027e9a:	2b00      	cmp	r3, #0
 8027e9c:	d013      	beq.n	8027ec6 <_Balloc+0x5a>
 8027e9e:	69f3      	ldr	r3, [r6, #28]
 8027ea0:	00a2      	lsls	r2, r4, #2
 8027ea2:	68db      	ldr	r3, [r3, #12]
 8027ea4:	189b      	adds	r3, r3, r2
 8027ea6:	6818      	ldr	r0, [r3, #0]
 8027ea8:	2800      	cmp	r0, #0
 8027eaa:	d118      	bne.n	8027ede <_Balloc+0x72>
 8027eac:	2101      	movs	r1, #1
 8027eae:	000d      	movs	r5, r1
 8027eb0:	40a5      	lsls	r5, r4
 8027eb2:	1d6a      	adds	r2, r5, #5
 8027eb4:	0030      	movs	r0, r6
 8027eb6:	0092      	lsls	r2, r2, #2
 8027eb8:	f001 f8ce 	bl	8029058 <_calloc_r>
 8027ebc:	2800      	cmp	r0, #0
 8027ebe:	d00c      	beq.n	8027eda <_Balloc+0x6e>
 8027ec0:	6044      	str	r4, [r0, #4]
 8027ec2:	6085      	str	r5, [r0, #8]
 8027ec4:	e00d      	b.n	8027ee2 <_Balloc+0x76>
 8027ec6:	2221      	movs	r2, #33	@ 0x21
 8027ec8:	2104      	movs	r1, #4
 8027eca:	0030      	movs	r0, r6
 8027ecc:	f001 f8c4 	bl	8029058 <_calloc_r>
 8027ed0:	69f3      	ldr	r3, [r6, #28]
 8027ed2:	60e8      	str	r0, [r5, #12]
 8027ed4:	68db      	ldr	r3, [r3, #12]
 8027ed6:	2b00      	cmp	r3, #0
 8027ed8:	d1e1      	bne.n	8027e9e <_Balloc+0x32>
 8027eda:	2000      	movs	r0, #0
 8027edc:	bd70      	pop	{r4, r5, r6, pc}
 8027ede:	6802      	ldr	r2, [r0, #0]
 8027ee0:	601a      	str	r2, [r3, #0]
 8027ee2:	2300      	movs	r3, #0
 8027ee4:	6103      	str	r3, [r0, #16]
 8027ee6:	60c3      	str	r3, [r0, #12]
 8027ee8:	e7f8      	b.n	8027edc <_Balloc+0x70>
 8027eea:	46c0      	nop			@ (mov r8, r8)
 8027eec:	0802ef8b 	.word	0x0802ef8b
 8027ef0:	0802f06b 	.word	0x0802f06b

08027ef4 <_Bfree>:
 8027ef4:	b570      	push	{r4, r5, r6, lr}
 8027ef6:	69c6      	ldr	r6, [r0, #28]
 8027ef8:	0005      	movs	r5, r0
 8027efa:	000c      	movs	r4, r1
 8027efc:	2e00      	cmp	r6, #0
 8027efe:	d10e      	bne.n	8027f1e <_Bfree+0x2a>
 8027f00:	2010      	movs	r0, #16
 8027f02:	f7ff fee5 	bl	8027cd0 <malloc>
 8027f06:	1e02      	subs	r2, r0, #0
 8027f08:	61e8      	str	r0, [r5, #28]
 8027f0a:	d104      	bne.n	8027f16 <_Bfree+0x22>
 8027f0c:	218f      	movs	r1, #143	@ 0x8f
 8027f0e:	4b09      	ldr	r3, [pc, #36]	@ (8027f34 <_Bfree+0x40>)
 8027f10:	4809      	ldr	r0, [pc, #36]	@ (8027f38 <_Bfree+0x44>)
 8027f12:	f001 f883 	bl	802901c <__assert_func>
 8027f16:	6046      	str	r6, [r0, #4]
 8027f18:	6086      	str	r6, [r0, #8]
 8027f1a:	6006      	str	r6, [r0, #0]
 8027f1c:	60c6      	str	r6, [r0, #12]
 8027f1e:	2c00      	cmp	r4, #0
 8027f20:	d007      	beq.n	8027f32 <_Bfree+0x3e>
 8027f22:	69eb      	ldr	r3, [r5, #28]
 8027f24:	6862      	ldr	r2, [r4, #4]
 8027f26:	68db      	ldr	r3, [r3, #12]
 8027f28:	0092      	lsls	r2, r2, #2
 8027f2a:	189b      	adds	r3, r3, r2
 8027f2c:	681a      	ldr	r2, [r3, #0]
 8027f2e:	6022      	str	r2, [r4, #0]
 8027f30:	601c      	str	r4, [r3, #0]
 8027f32:	bd70      	pop	{r4, r5, r6, pc}
 8027f34:	0802ef8b 	.word	0x0802ef8b
 8027f38:	0802f06b 	.word	0x0802f06b

08027f3c <__multadd>:
 8027f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027f3e:	000f      	movs	r7, r1
 8027f40:	9001      	str	r0, [sp, #4]
 8027f42:	000c      	movs	r4, r1
 8027f44:	001e      	movs	r6, r3
 8027f46:	2000      	movs	r0, #0
 8027f48:	690d      	ldr	r5, [r1, #16]
 8027f4a:	3714      	adds	r7, #20
 8027f4c:	683b      	ldr	r3, [r7, #0]
 8027f4e:	3001      	adds	r0, #1
 8027f50:	b299      	uxth	r1, r3
 8027f52:	4351      	muls	r1, r2
 8027f54:	0c1b      	lsrs	r3, r3, #16
 8027f56:	4353      	muls	r3, r2
 8027f58:	1989      	adds	r1, r1, r6
 8027f5a:	0c0e      	lsrs	r6, r1, #16
 8027f5c:	199b      	adds	r3, r3, r6
 8027f5e:	0c1e      	lsrs	r6, r3, #16
 8027f60:	b289      	uxth	r1, r1
 8027f62:	041b      	lsls	r3, r3, #16
 8027f64:	185b      	adds	r3, r3, r1
 8027f66:	c708      	stmia	r7!, {r3}
 8027f68:	4285      	cmp	r5, r0
 8027f6a:	dcef      	bgt.n	8027f4c <__multadd+0x10>
 8027f6c:	2e00      	cmp	r6, #0
 8027f6e:	d022      	beq.n	8027fb6 <__multadd+0x7a>
 8027f70:	68a3      	ldr	r3, [r4, #8]
 8027f72:	42ab      	cmp	r3, r5
 8027f74:	dc19      	bgt.n	8027faa <__multadd+0x6e>
 8027f76:	6861      	ldr	r1, [r4, #4]
 8027f78:	9801      	ldr	r0, [sp, #4]
 8027f7a:	3101      	adds	r1, #1
 8027f7c:	f7ff ff76 	bl	8027e6c <_Balloc>
 8027f80:	1e07      	subs	r7, r0, #0
 8027f82:	d105      	bne.n	8027f90 <__multadd+0x54>
 8027f84:	003a      	movs	r2, r7
 8027f86:	21ba      	movs	r1, #186	@ 0xba
 8027f88:	4b0c      	ldr	r3, [pc, #48]	@ (8027fbc <__multadd+0x80>)
 8027f8a:	480d      	ldr	r0, [pc, #52]	@ (8027fc0 <__multadd+0x84>)
 8027f8c:	f001 f846 	bl	802901c <__assert_func>
 8027f90:	0021      	movs	r1, r4
 8027f92:	6922      	ldr	r2, [r4, #16]
 8027f94:	310c      	adds	r1, #12
 8027f96:	3202      	adds	r2, #2
 8027f98:	0092      	lsls	r2, r2, #2
 8027f9a:	300c      	adds	r0, #12
 8027f9c:	f7fe fc6e 	bl	802687c <memcpy>
 8027fa0:	0021      	movs	r1, r4
 8027fa2:	9801      	ldr	r0, [sp, #4]
 8027fa4:	f7ff ffa6 	bl	8027ef4 <_Bfree>
 8027fa8:	003c      	movs	r4, r7
 8027faa:	1d2b      	adds	r3, r5, #4
 8027fac:	009b      	lsls	r3, r3, #2
 8027fae:	18e3      	adds	r3, r4, r3
 8027fb0:	3501      	adds	r5, #1
 8027fb2:	605e      	str	r6, [r3, #4]
 8027fb4:	6125      	str	r5, [r4, #16]
 8027fb6:	0020      	movs	r0, r4
 8027fb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8027fba:	46c0      	nop			@ (mov r8, r8)
 8027fbc:	0802effa 	.word	0x0802effa
 8027fc0:	0802f06b 	.word	0x0802f06b

08027fc4 <__s2b>:
 8027fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027fc6:	0007      	movs	r7, r0
 8027fc8:	0018      	movs	r0, r3
 8027fca:	000c      	movs	r4, r1
 8027fcc:	3008      	adds	r0, #8
 8027fce:	2109      	movs	r1, #9
 8027fd0:	9301      	str	r3, [sp, #4]
 8027fd2:	0015      	movs	r5, r2
 8027fd4:	f7d8 f970 	bl	80002b8 <__divsi3>
 8027fd8:	2301      	movs	r3, #1
 8027fda:	2100      	movs	r1, #0
 8027fdc:	4283      	cmp	r3, r0
 8027fde:	db0a      	blt.n	8027ff6 <__s2b+0x32>
 8027fe0:	0038      	movs	r0, r7
 8027fe2:	f7ff ff43 	bl	8027e6c <_Balloc>
 8027fe6:	1e01      	subs	r1, r0, #0
 8027fe8:	d108      	bne.n	8027ffc <__s2b+0x38>
 8027fea:	000a      	movs	r2, r1
 8027fec:	4b19      	ldr	r3, [pc, #100]	@ (8028054 <__s2b+0x90>)
 8027fee:	481a      	ldr	r0, [pc, #104]	@ (8028058 <__s2b+0x94>)
 8027ff0:	31d3      	adds	r1, #211	@ 0xd3
 8027ff2:	f001 f813 	bl	802901c <__assert_func>
 8027ff6:	005b      	lsls	r3, r3, #1
 8027ff8:	3101      	adds	r1, #1
 8027ffa:	e7ef      	b.n	8027fdc <__s2b+0x18>
 8027ffc:	9b08      	ldr	r3, [sp, #32]
 8027ffe:	6143      	str	r3, [r0, #20]
 8028000:	2301      	movs	r3, #1
 8028002:	6103      	str	r3, [r0, #16]
 8028004:	2d09      	cmp	r5, #9
 8028006:	dd18      	ble.n	802803a <__s2b+0x76>
 8028008:	0023      	movs	r3, r4
 802800a:	3309      	adds	r3, #9
 802800c:	001e      	movs	r6, r3
 802800e:	9300      	str	r3, [sp, #0]
 8028010:	1964      	adds	r4, r4, r5
 8028012:	7833      	ldrb	r3, [r6, #0]
 8028014:	220a      	movs	r2, #10
 8028016:	0038      	movs	r0, r7
 8028018:	3b30      	subs	r3, #48	@ 0x30
 802801a:	f7ff ff8f 	bl	8027f3c <__multadd>
 802801e:	3601      	adds	r6, #1
 8028020:	0001      	movs	r1, r0
 8028022:	42a6      	cmp	r6, r4
 8028024:	d1f5      	bne.n	8028012 <__s2b+0x4e>
 8028026:	002c      	movs	r4, r5
 8028028:	9b00      	ldr	r3, [sp, #0]
 802802a:	3c08      	subs	r4, #8
 802802c:	191c      	adds	r4, r3, r4
 802802e:	002e      	movs	r6, r5
 8028030:	9b01      	ldr	r3, [sp, #4]
 8028032:	429e      	cmp	r6, r3
 8028034:	db04      	blt.n	8028040 <__s2b+0x7c>
 8028036:	0008      	movs	r0, r1
 8028038:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802803a:	2509      	movs	r5, #9
 802803c:	340a      	adds	r4, #10
 802803e:	e7f6      	b.n	802802e <__s2b+0x6a>
 8028040:	1b63      	subs	r3, r4, r5
 8028042:	5d9b      	ldrb	r3, [r3, r6]
 8028044:	220a      	movs	r2, #10
 8028046:	0038      	movs	r0, r7
 8028048:	3b30      	subs	r3, #48	@ 0x30
 802804a:	f7ff ff77 	bl	8027f3c <__multadd>
 802804e:	3601      	adds	r6, #1
 8028050:	0001      	movs	r1, r0
 8028052:	e7ed      	b.n	8028030 <__s2b+0x6c>
 8028054:	0802effa 	.word	0x0802effa
 8028058:	0802f06b 	.word	0x0802f06b

0802805c <__hi0bits>:
 802805c:	2280      	movs	r2, #128	@ 0x80
 802805e:	0003      	movs	r3, r0
 8028060:	0252      	lsls	r2, r2, #9
 8028062:	2000      	movs	r0, #0
 8028064:	4293      	cmp	r3, r2
 8028066:	d201      	bcs.n	802806c <__hi0bits+0x10>
 8028068:	041b      	lsls	r3, r3, #16
 802806a:	3010      	adds	r0, #16
 802806c:	2280      	movs	r2, #128	@ 0x80
 802806e:	0452      	lsls	r2, r2, #17
 8028070:	4293      	cmp	r3, r2
 8028072:	d201      	bcs.n	8028078 <__hi0bits+0x1c>
 8028074:	3008      	adds	r0, #8
 8028076:	021b      	lsls	r3, r3, #8
 8028078:	2280      	movs	r2, #128	@ 0x80
 802807a:	0552      	lsls	r2, r2, #21
 802807c:	4293      	cmp	r3, r2
 802807e:	d201      	bcs.n	8028084 <__hi0bits+0x28>
 8028080:	3004      	adds	r0, #4
 8028082:	011b      	lsls	r3, r3, #4
 8028084:	2280      	movs	r2, #128	@ 0x80
 8028086:	05d2      	lsls	r2, r2, #23
 8028088:	4293      	cmp	r3, r2
 802808a:	d201      	bcs.n	8028090 <__hi0bits+0x34>
 802808c:	3002      	adds	r0, #2
 802808e:	009b      	lsls	r3, r3, #2
 8028090:	2b00      	cmp	r3, #0
 8028092:	db03      	blt.n	802809c <__hi0bits+0x40>
 8028094:	3001      	adds	r0, #1
 8028096:	4213      	tst	r3, r2
 8028098:	d100      	bne.n	802809c <__hi0bits+0x40>
 802809a:	2020      	movs	r0, #32
 802809c:	4770      	bx	lr

0802809e <__lo0bits>:
 802809e:	6803      	ldr	r3, [r0, #0]
 80280a0:	0001      	movs	r1, r0
 80280a2:	2207      	movs	r2, #7
 80280a4:	0018      	movs	r0, r3
 80280a6:	4010      	ands	r0, r2
 80280a8:	4213      	tst	r3, r2
 80280aa:	d00d      	beq.n	80280c8 <__lo0bits+0x2a>
 80280ac:	3a06      	subs	r2, #6
 80280ae:	2000      	movs	r0, #0
 80280b0:	4213      	tst	r3, r2
 80280b2:	d105      	bne.n	80280c0 <__lo0bits+0x22>
 80280b4:	3002      	adds	r0, #2
 80280b6:	4203      	tst	r3, r0
 80280b8:	d003      	beq.n	80280c2 <__lo0bits+0x24>
 80280ba:	40d3      	lsrs	r3, r2
 80280bc:	0010      	movs	r0, r2
 80280be:	600b      	str	r3, [r1, #0]
 80280c0:	4770      	bx	lr
 80280c2:	089b      	lsrs	r3, r3, #2
 80280c4:	600b      	str	r3, [r1, #0]
 80280c6:	e7fb      	b.n	80280c0 <__lo0bits+0x22>
 80280c8:	b29a      	uxth	r2, r3
 80280ca:	2a00      	cmp	r2, #0
 80280cc:	d101      	bne.n	80280d2 <__lo0bits+0x34>
 80280ce:	2010      	movs	r0, #16
 80280d0:	0c1b      	lsrs	r3, r3, #16
 80280d2:	b2da      	uxtb	r2, r3
 80280d4:	2a00      	cmp	r2, #0
 80280d6:	d101      	bne.n	80280dc <__lo0bits+0x3e>
 80280d8:	3008      	adds	r0, #8
 80280da:	0a1b      	lsrs	r3, r3, #8
 80280dc:	071a      	lsls	r2, r3, #28
 80280de:	d101      	bne.n	80280e4 <__lo0bits+0x46>
 80280e0:	3004      	adds	r0, #4
 80280e2:	091b      	lsrs	r3, r3, #4
 80280e4:	079a      	lsls	r2, r3, #30
 80280e6:	d101      	bne.n	80280ec <__lo0bits+0x4e>
 80280e8:	3002      	adds	r0, #2
 80280ea:	089b      	lsrs	r3, r3, #2
 80280ec:	07da      	lsls	r2, r3, #31
 80280ee:	d4e9      	bmi.n	80280c4 <__lo0bits+0x26>
 80280f0:	3001      	adds	r0, #1
 80280f2:	085b      	lsrs	r3, r3, #1
 80280f4:	d1e6      	bne.n	80280c4 <__lo0bits+0x26>
 80280f6:	2020      	movs	r0, #32
 80280f8:	e7e2      	b.n	80280c0 <__lo0bits+0x22>
	...

080280fc <__i2b>:
 80280fc:	b510      	push	{r4, lr}
 80280fe:	000c      	movs	r4, r1
 8028100:	2101      	movs	r1, #1
 8028102:	f7ff feb3 	bl	8027e6c <_Balloc>
 8028106:	2800      	cmp	r0, #0
 8028108:	d107      	bne.n	802811a <__i2b+0x1e>
 802810a:	2146      	movs	r1, #70	@ 0x46
 802810c:	4c05      	ldr	r4, [pc, #20]	@ (8028124 <__i2b+0x28>)
 802810e:	0002      	movs	r2, r0
 8028110:	4b05      	ldr	r3, [pc, #20]	@ (8028128 <__i2b+0x2c>)
 8028112:	0020      	movs	r0, r4
 8028114:	31ff      	adds	r1, #255	@ 0xff
 8028116:	f000 ff81 	bl	802901c <__assert_func>
 802811a:	2301      	movs	r3, #1
 802811c:	6144      	str	r4, [r0, #20]
 802811e:	6103      	str	r3, [r0, #16]
 8028120:	bd10      	pop	{r4, pc}
 8028122:	46c0      	nop			@ (mov r8, r8)
 8028124:	0802f06b 	.word	0x0802f06b
 8028128:	0802effa 	.word	0x0802effa

0802812c <__multiply>:
 802812c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802812e:	0014      	movs	r4, r2
 8028130:	690a      	ldr	r2, [r1, #16]
 8028132:	6923      	ldr	r3, [r4, #16]
 8028134:	000d      	movs	r5, r1
 8028136:	b089      	sub	sp, #36	@ 0x24
 8028138:	429a      	cmp	r2, r3
 802813a:	db02      	blt.n	8028142 <__multiply+0x16>
 802813c:	0023      	movs	r3, r4
 802813e:	000c      	movs	r4, r1
 8028140:	001d      	movs	r5, r3
 8028142:	6927      	ldr	r7, [r4, #16]
 8028144:	692e      	ldr	r6, [r5, #16]
 8028146:	6861      	ldr	r1, [r4, #4]
 8028148:	19bb      	adds	r3, r7, r6
 802814a:	9300      	str	r3, [sp, #0]
 802814c:	68a3      	ldr	r3, [r4, #8]
 802814e:	19ba      	adds	r2, r7, r6
 8028150:	4293      	cmp	r3, r2
 8028152:	da00      	bge.n	8028156 <__multiply+0x2a>
 8028154:	3101      	adds	r1, #1
 8028156:	f7ff fe89 	bl	8027e6c <_Balloc>
 802815a:	4684      	mov	ip, r0
 802815c:	2800      	cmp	r0, #0
 802815e:	d106      	bne.n	802816e <__multiply+0x42>
 8028160:	21b1      	movs	r1, #177	@ 0xb1
 8028162:	4662      	mov	r2, ip
 8028164:	4b44      	ldr	r3, [pc, #272]	@ (8028278 <__multiply+0x14c>)
 8028166:	4845      	ldr	r0, [pc, #276]	@ (802827c <__multiply+0x150>)
 8028168:	0049      	lsls	r1, r1, #1
 802816a:	f000 ff57 	bl	802901c <__assert_func>
 802816e:	0002      	movs	r2, r0
 8028170:	19bb      	adds	r3, r7, r6
 8028172:	3214      	adds	r2, #20
 8028174:	009b      	lsls	r3, r3, #2
 8028176:	18d3      	adds	r3, r2, r3
 8028178:	9301      	str	r3, [sp, #4]
 802817a:	2100      	movs	r1, #0
 802817c:	0013      	movs	r3, r2
 802817e:	9801      	ldr	r0, [sp, #4]
 8028180:	4283      	cmp	r3, r0
 8028182:	d328      	bcc.n	80281d6 <__multiply+0xaa>
 8028184:	0023      	movs	r3, r4
 8028186:	00bf      	lsls	r7, r7, #2
 8028188:	3314      	adds	r3, #20
 802818a:	9304      	str	r3, [sp, #16]
 802818c:	3514      	adds	r5, #20
 802818e:	19db      	adds	r3, r3, r7
 8028190:	00b6      	lsls	r6, r6, #2
 8028192:	9302      	str	r3, [sp, #8]
 8028194:	19ab      	adds	r3, r5, r6
 8028196:	9307      	str	r3, [sp, #28]
 8028198:	2304      	movs	r3, #4
 802819a:	9305      	str	r3, [sp, #20]
 802819c:	0023      	movs	r3, r4
 802819e:	9902      	ldr	r1, [sp, #8]
 80281a0:	3315      	adds	r3, #21
 80281a2:	4299      	cmp	r1, r3
 80281a4:	d305      	bcc.n	80281b2 <__multiply+0x86>
 80281a6:	1b0c      	subs	r4, r1, r4
 80281a8:	3c15      	subs	r4, #21
 80281aa:	08a4      	lsrs	r4, r4, #2
 80281ac:	3401      	adds	r4, #1
 80281ae:	00a3      	lsls	r3, r4, #2
 80281b0:	9305      	str	r3, [sp, #20]
 80281b2:	9b07      	ldr	r3, [sp, #28]
 80281b4:	429d      	cmp	r5, r3
 80281b6:	d310      	bcc.n	80281da <__multiply+0xae>
 80281b8:	9b00      	ldr	r3, [sp, #0]
 80281ba:	2b00      	cmp	r3, #0
 80281bc:	dd05      	ble.n	80281ca <__multiply+0x9e>
 80281be:	9b01      	ldr	r3, [sp, #4]
 80281c0:	3b04      	subs	r3, #4
 80281c2:	9301      	str	r3, [sp, #4]
 80281c4:	681b      	ldr	r3, [r3, #0]
 80281c6:	2b00      	cmp	r3, #0
 80281c8:	d052      	beq.n	8028270 <__multiply+0x144>
 80281ca:	4663      	mov	r3, ip
 80281cc:	4660      	mov	r0, ip
 80281ce:	9a00      	ldr	r2, [sp, #0]
 80281d0:	611a      	str	r2, [r3, #16]
 80281d2:	b009      	add	sp, #36	@ 0x24
 80281d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80281d6:	c302      	stmia	r3!, {r1}
 80281d8:	e7d1      	b.n	802817e <__multiply+0x52>
 80281da:	682c      	ldr	r4, [r5, #0]
 80281dc:	b2a4      	uxth	r4, r4
 80281de:	2c00      	cmp	r4, #0
 80281e0:	d01f      	beq.n	8028222 <__multiply+0xf6>
 80281e2:	2300      	movs	r3, #0
 80281e4:	0017      	movs	r7, r2
 80281e6:	9e04      	ldr	r6, [sp, #16]
 80281e8:	9303      	str	r3, [sp, #12]
 80281ea:	ce08      	ldmia	r6!, {r3}
 80281ec:	6839      	ldr	r1, [r7, #0]
 80281ee:	9306      	str	r3, [sp, #24]
 80281f0:	466b      	mov	r3, sp
 80281f2:	8b1b      	ldrh	r3, [r3, #24]
 80281f4:	b288      	uxth	r0, r1
 80281f6:	4363      	muls	r3, r4
 80281f8:	181b      	adds	r3, r3, r0
 80281fa:	9803      	ldr	r0, [sp, #12]
 80281fc:	0c09      	lsrs	r1, r1, #16
 80281fe:	181b      	adds	r3, r3, r0
 8028200:	9806      	ldr	r0, [sp, #24]
 8028202:	0c00      	lsrs	r0, r0, #16
 8028204:	4360      	muls	r0, r4
 8028206:	1840      	adds	r0, r0, r1
 8028208:	0c19      	lsrs	r1, r3, #16
 802820a:	1841      	adds	r1, r0, r1
 802820c:	0c08      	lsrs	r0, r1, #16
 802820e:	b29b      	uxth	r3, r3
 8028210:	0409      	lsls	r1, r1, #16
 8028212:	4319      	orrs	r1, r3
 8028214:	9b02      	ldr	r3, [sp, #8]
 8028216:	9003      	str	r0, [sp, #12]
 8028218:	c702      	stmia	r7!, {r1}
 802821a:	42b3      	cmp	r3, r6
 802821c:	d8e5      	bhi.n	80281ea <__multiply+0xbe>
 802821e:	9b05      	ldr	r3, [sp, #20]
 8028220:	50d0      	str	r0, [r2, r3]
 8028222:	682c      	ldr	r4, [r5, #0]
 8028224:	0c24      	lsrs	r4, r4, #16
 8028226:	d020      	beq.n	802826a <__multiply+0x13e>
 8028228:	2100      	movs	r1, #0
 802822a:	0010      	movs	r0, r2
 802822c:	6813      	ldr	r3, [r2, #0]
 802822e:	9e04      	ldr	r6, [sp, #16]
 8028230:	9103      	str	r1, [sp, #12]
 8028232:	6831      	ldr	r1, [r6, #0]
 8028234:	6807      	ldr	r7, [r0, #0]
 8028236:	b289      	uxth	r1, r1
 8028238:	4361      	muls	r1, r4
 802823a:	0c3f      	lsrs	r7, r7, #16
 802823c:	19c9      	adds	r1, r1, r7
 802823e:	9f03      	ldr	r7, [sp, #12]
 8028240:	b29b      	uxth	r3, r3
 8028242:	19c9      	adds	r1, r1, r7
 8028244:	040f      	lsls	r7, r1, #16
 8028246:	431f      	orrs	r7, r3
 8028248:	6007      	str	r7, [r0, #0]
 802824a:	ce80      	ldmia	r6!, {r7}
 802824c:	6843      	ldr	r3, [r0, #4]
 802824e:	0c3f      	lsrs	r7, r7, #16
 8028250:	4367      	muls	r7, r4
 8028252:	b29b      	uxth	r3, r3
 8028254:	0c09      	lsrs	r1, r1, #16
 8028256:	18fb      	adds	r3, r7, r3
 8028258:	185b      	adds	r3, r3, r1
 802825a:	0c19      	lsrs	r1, r3, #16
 802825c:	9103      	str	r1, [sp, #12]
 802825e:	9902      	ldr	r1, [sp, #8]
 8028260:	3004      	adds	r0, #4
 8028262:	42b1      	cmp	r1, r6
 8028264:	d8e5      	bhi.n	8028232 <__multiply+0x106>
 8028266:	9905      	ldr	r1, [sp, #20]
 8028268:	5053      	str	r3, [r2, r1]
 802826a:	3504      	adds	r5, #4
 802826c:	3204      	adds	r2, #4
 802826e:	e7a0      	b.n	80281b2 <__multiply+0x86>
 8028270:	9b00      	ldr	r3, [sp, #0]
 8028272:	3b01      	subs	r3, #1
 8028274:	9300      	str	r3, [sp, #0]
 8028276:	e79f      	b.n	80281b8 <__multiply+0x8c>
 8028278:	0802effa 	.word	0x0802effa
 802827c:	0802f06b 	.word	0x0802f06b

08028280 <__pow5mult>:
 8028280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028282:	2303      	movs	r3, #3
 8028284:	0015      	movs	r5, r2
 8028286:	0007      	movs	r7, r0
 8028288:	000e      	movs	r6, r1
 802828a:	401a      	ands	r2, r3
 802828c:	421d      	tst	r5, r3
 802828e:	d008      	beq.n	80282a2 <__pow5mult+0x22>
 8028290:	4925      	ldr	r1, [pc, #148]	@ (8028328 <__pow5mult+0xa8>)
 8028292:	3a01      	subs	r2, #1
 8028294:	0092      	lsls	r2, r2, #2
 8028296:	5852      	ldr	r2, [r2, r1]
 8028298:	2300      	movs	r3, #0
 802829a:	0031      	movs	r1, r6
 802829c:	f7ff fe4e 	bl	8027f3c <__multadd>
 80282a0:	0006      	movs	r6, r0
 80282a2:	10ad      	asrs	r5, r5, #2
 80282a4:	d03d      	beq.n	8028322 <__pow5mult+0xa2>
 80282a6:	69fc      	ldr	r4, [r7, #28]
 80282a8:	2c00      	cmp	r4, #0
 80282aa:	d10f      	bne.n	80282cc <__pow5mult+0x4c>
 80282ac:	2010      	movs	r0, #16
 80282ae:	f7ff fd0f 	bl	8027cd0 <malloc>
 80282b2:	1e02      	subs	r2, r0, #0
 80282b4:	61f8      	str	r0, [r7, #28]
 80282b6:	d105      	bne.n	80282c4 <__pow5mult+0x44>
 80282b8:	21b4      	movs	r1, #180	@ 0xb4
 80282ba:	4b1c      	ldr	r3, [pc, #112]	@ (802832c <__pow5mult+0xac>)
 80282bc:	481c      	ldr	r0, [pc, #112]	@ (8028330 <__pow5mult+0xb0>)
 80282be:	31ff      	adds	r1, #255	@ 0xff
 80282c0:	f000 feac 	bl	802901c <__assert_func>
 80282c4:	6044      	str	r4, [r0, #4]
 80282c6:	6084      	str	r4, [r0, #8]
 80282c8:	6004      	str	r4, [r0, #0]
 80282ca:	60c4      	str	r4, [r0, #12]
 80282cc:	69fb      	ldr	r3, [r7, #28]
 80282ce:	689c      	ldr	r4, [r3, #8]
 80282d0:	9301      	str	r3, [sp, #4]
 80282d2:	2c00      	cmp	r4, #0
 80282d4:	d108      	bne.n	80282e8 <__pow5mult+0x68>
 80282d6:	0038      	movs	r0, r7
 80282d8:	4916      	ldr	r1, [pc, #88]	@ (8028334 <__pow5mult+0xb4>)
 80282da:	f7ff ff0f 	bl	80280fc <__i2b>
 80282de:	9b01      	ldr	r3, [sp, #4]
 80282e0:	0004      	movs	r4, r0
 80282e2:	6098      	str	r0, [r3, #8]
 80282e4:	2300      	movs	r3, #0
 80282e6:	6003      	str	r3, [r0, #0]
 80282e8:	2301      	movs	r3, #1
 80282ea:	421d      	tst	r5, r3
 80282ec:	d00a      	beq.n	8028304 <__pow5mult+0x84>
 80282ee:	0031      	movs	r1, r6
 80282f0:	0022      	movs	r2, r4
 80282f2:	0038      	movs	r0, r7
 80282f4:	f7ff ff1a 	bl	802812c <__multiply>
 80282f8:	0031      	movs	r1, r6
 80282fa:	9001      	str	r0, [sp, #4]
 80282fc:	0038      	movs	r0, r7
 80282fe:	f7ff fdf9 	bl	8027ef4 <_Bfree>
 8028302:	9e01      	ldr	r6, [sp, #4]
 8028304:	106d      	asrs	r5, r5, #1
 8028306:	d00c      	beq.n	8028322 <__pow5mult+0xa2>
 8028308:	6820      	ldr	r0, [r4, #0]
 802830a:	2800      	cmp	r0, #0
 802830c:	d107      	bne.n	802831e <__pow5mult+0x9e>
 802830e:	0022      	movs	r2, r4
 8028310:	0021      	movs	r1, r4
 8028312:	0038      	movs	r0, r7
 8028314:	f7ff ff0a 	bl	802812c <__multiply>
 8028318:	2300      	movs	r3, #0
 802831a:	6020      	str	r0, [r4, #0]
 802831c:	6003      	str	r3, [r0, #0]
 802831e:	0004      	movs	r4, r0
 8028320:	e7e2      	b.n	80282e8 <__pow5mult+0x68>
 8028322:	0030      	movs	r0, r6
 8028324:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028326:	46c0      	nop			@ (mov r8, r8)
 8028328:	0802f26c 	.word	0x0802f26c
 802832c:	0802ef8b 	.word	0x0802ef8b
 8028330:	0802f06b 	.word	0x0802f06b
 8028334:	00000271 	.word	0x00000271

08028338 <__lshift>:
 8028338:	b5f0      	push	{r4, r5, r6, r7, lr}
 802833a:	000c      	movs	r4, r1
 802833c:	0016      	movs	r6, r2
 802833e:	6923      	ldr	r3, [r4, #16]
 8028340:	1157      	asrs	r7, r2, #5
 8028342:	b085      	sub	sp, #20
 8028344:	18fb      	adds	r3, r7, r3
 8028346:	9301      	str	r3, [sp, #4]
 8028348:	3301      	adds	r3, #1
 802834a:	9300      	str	r3, [sp, #0]
 802834c:	6849      	ldr	r1, [r1, #4]
 802834e:	68a3      	ldr	r3, [r4, #8]
 8028350:	9002      	str	r0, [sp, #8]
 8028352:	9a00      	ldr	r2, [sp, #0]
 8028354:	4293      	cmp	r3, r2
 8028356:	db10      	blt.n	802837a <__lshift+0x42>
 8028358:	9802      	ldr	r0, [sp, #8]
 802835a:	f7ff fd87 	bl	8027e6c <_Balloc>
 802835e:	2300      	movs	r3, #0
 8028360:	0001      	movs	r1, r0
 8028362:	0005      	movs	r5, r0
 8028364:	001a      	movs	r2, r3
 8028366:	3114      	adds	r1, #20
 8028368:	4298      	cmp	r0, r3
 802836a:	d10c      	bne.n	8028386 <__lshift+0x4e>
 802836c:	21ef      	movs	r1, #239	@ 0xef
 802836e:	002a      	movs	r2, r5
 8028370:	4b25      	ldr	r3, [pc, #148]	@ (8028408 <__lshift+0xd0>)
 8028372:	4826      	ldr	r0, [pc, #152]	@ (802840c <__lshift+0xd4>)
 8028374:	0049      	lsls	r1, r1, #1
 8028376:	f000 fe51 	bl	802901c <__assert_func>
 802837a:	3101      	adds	r1, #1
 802837c:	005b      	lsls	r3, r3, #1
 802837e:	e7e8      	b.n	8028352 <__lshift+0x1a>
 8028380:	0098      	lsls	r0, r3, #2
 8028382:	500a      	str	r2, [r1, r0]
 8028384:	3301      	adds	r3, #1
 8028386:	42bb      	cmp	r3, r7
 8028388:	dbfa      	blt.n	8028380 <__lshift+0x48>
 802838a:	43fb      	mvns	r3, r7
 802838c:	17db      	asrs	r3, r3, #31
 802838e:	401f      	ands	r7, r3
 8028390:	00bf      	lsls	r7, r7, #2
 8028392:	0023      	movs	r3, r4
 8028394:	201f      	movs	r0, #31
 8028396:	19c9      	adds	r1, r1, r7
 8028398:	0037      	movs	r7, r6
 802839a:	6922      	ldr	r2, [r4, #16]
 802839c:	3314      	adds	r3, #20
 802839e:	0092      	lsls	r2, r2, #2
 80283a0:	189a      	adds	r2, r3, r2
 80283a2:	4007      	ands	r7, r0
 80283a4:	4206      	tst	r6, r0
 80283a6:	d029      	beq.n	80283fc <__lshift+0xc4>
 80283a8:	3001      	adds	r0, #1
 80283aa:	1bc0      	subs	r0, r0, r7
 80283ac:	9003      	str	r0, [sp, #12]
 80283ae:	468c      	mov	ip, r1
 80283b0:	2000      	movs	r0, #0
 80283b2:	681e      	ldr	r6, [r3, #0]
 80283b4:	40be      	lsls	r6, r7
 80283b6:	4306      	orrs	r6, r0
 80283b8:	4660      	mov	r0, ip
 80283ba:	c040      	stmia	r0!, {r6}
 80283bc:	4684      	mov	ip, r0
 80283be:	9e03      	ldr	r6, [sp, #12]
 80283c0:	cb01      	ldmia	r3!, {r0}
 80283c2:	40f0      	lsrs	r0, r6
 80283c4:	429a      	cmp	r2, r3
 80283c6:	d8f4      	bhi.n	80283b2 <__lshift+0x7a>
 80283c8:	0026      	movs	r6, r4
 80283ca:	3615      	adds	r6, #21
 80283cc:	2304      	movs	r3, #4
 80283ce:	42b2      	cmp	r2, r6
 80283d0:	d304      	bcc.n	80283dc <__lshift+0xa4>
 80283d2:	1b13      	subs	r3, r2, r4
 80283d4:	3b15      	subs	r3, #21
 80283d6:	089b      	lsrs	r3, r3, #2
 80283d8:	3301      	adds	r3, #1
 80283da:	009b      	lsls	r3, r3, #2
 80283dc:	50c8      	str	r0, [r1, r3]
 80283de:	2800      	cmp	r0, #0
 80283e0:	d002      	beq.n	80283e8 <__lshift+0xb0>
 80283e2:	9b01      	ldr	r3, [sp, #4]
 80283e4:	3302      	adds	r3, #2
 80283e6:	9300      	str	r3, [sp, #0]
 80283e8:	9b00      	ldr	r3, [sp, #0]
 80283ea:	9802      	ldr	r0, [sp, #8]
 80283ec:	3b01      	subs	r3, #1
 80283ee:	0021      	movs	r1, r4
 80283f0:	612b      	str	r3, [r5, #16]
 80283f2:	f7ff fd7f 	bl	8027ef4 <_Bfree>
 80283f6:	0028      	movs	r0, r5
 80283f8:	b005      	add	sp, #20
 80283fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80283fc:	cb01      	ldmia	r3!, {r0}
 80283fe:	c101      	stmia	r1!, {r0}
 8028400:	429a      	cmp	r2, r3
 8028402:	d8fb      	bhi.n	80283fc <__lshift+0xc4>
 8028404:	e7f0      	b.n	80283e8 <__lshift+0xb0>
 8028406:	46c0      	nop			@ (mov r8, r8)
 8028408:	0802effa 	.word	0x0802effa
 802840c:	0802f06b 	.word	0x0802f06b

08028410 <__mcmp>:
 8028410:	b530      	push	{r4, r5, lr}
 8028412:	690b      	ldr	r3, [r1, #16]
 8028414:	6904      	ldr	r4, [r0, #16]
 8028416:	0002      	movs	r2, r0
 8028418:	1ae0      	subs	r0, r4, r3
 802841a:	429c      	cmp	r4, r3
 802841c:	d10f      	bne.n	802843e <__mcmp+0x2e>
 802841e:	3214      	adds	r2, #20
 8028420:	009b      	lsls	r3, r3, #2
 8028422:	3114      	adds	r1, #20
 8028424:	0014      	movs	r4, r2
 8028426:	18c9      	adds	r1, r1, r3
 8028428:	18d2      	adds	r2, r2, r3
 802842a:	3a04      	subs	r2, #4
 802842c:	3904      	subs	r1, #4
 802842e:	6815      	ldr	r5, [r2, #0]
 8028430:	680b      	ldr	r3, [r1, #0]
 8028432:	429d      	cmp	r5, r3
 8028434:	d004      	beq.n	8028440 <__mcmp+0x30>
 8028436:	2001      	movs	r0, #1
 8028438:	429d      	cmp	r5, r3
 802843a:	d200      	bcs.n	802843e <__mcmp+0x2e>
 802843c:	3802      	subs	r0, #2
 802843e:	bd30      	pop	{r4, r5, pc}
 8028440:	4294      	cmp	r4, r2
 8028442:	d3f2      	bcc.n	802842a <__mcmp+0x1a>
 8028444:	e7fb      	b.n	802843e <__mcmp+0x2e>
	...

08028448 <__mdiff>:
 8028448:	b5f0      	push	{r4, r5, r6, r7, lr}
 802844a:	000c      	movs	r4, r1
 802844c:	b087      	sub	sp, #28
 802844e:	9000      	str	r0, [sp, #0]
 8028450:	0011      	movs	r1, r2
 8028452:	0020      	movs	r0, r4
 8028454:	0017      	movs	r7, r2
 8028456:	f7ff ffdb 	bl	8028410 <__mcmp>
 802845a:	1e05      	subs	r5, r0, #0
 802845c:	d110      	bne.n	8028480 <__mdiff+0x38>
 802845e:	0001      	movs	r1, r0
 8028460:	9800      	ldr	r0, [sp, #0]
 8028462:	f7ff fd03 	bl	8027e6c <_Balloc>
 8028466:	1e02      	subs	r2, r0, #0
 8028468:	d104      	bne.n	8028474 <__mdiff+0x2c>
 802846a:	4b40      	ldr	r3, [pc, #256]	@ (802856c <__mdiff+0x124>)
 802846c:	4840      	ldr	r0, [pc, #256]	@ (8028570 <__mdiff+0x128>)
 802846e:	4941      	ldr	r1, [pc, #260]	@ (8028574 <__mdiff+0x12c>)
 8028470:	f000 fdd4 	bl	802901c <__assert_func>
 8028474:	2301      	movs	r3, #1
 8028476:	6145      	str	r5, [r0, #20]
 8028478:	6103      	str	r3, [r0, #16]
 802847a:	0010      	movs	r0, r2
 802847c:	b007      	add	sp, #28
 802847e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028480:	2600      	movs	r6, #0
 8028482:	42b0      	cmp	r0, r6
 8028484:	da03      	bge.n	802848e <__mdiff+0x46>
 8028486:	0023      	movs	r3, r4
 8028488:	003c      	movs	r4, r7
 802848a:	001f      	movs	r7, r3
 802848c:	3601      	adds	r6, #1
 802848e:	6861      	ldr	r1, [r4, #4]
 8028490:	9800      	ldr	r0, [sp, #0]
 8028492:	f7ff fceb 	bl	8027e6c <_Balloc>
 8028496:	1e02      	subs	r2, r0, #0
 8028498:	d103      	bne.n	80284a2 <__mdiff+0x5a>
 802849a:	4b34      	ldr	r3, [pc, #208]	@ (802856c <__mdiff+0x124>)
 802849c:	4834      	ldr	r0, [pc, #208]	@ (8028570 <__mdiff+0x128>)
 802849e:	4936      	ldr	r1, [pc, #216]	@ (8028578 <__mdiff+0x130>)
 80284a0:	e7e6      	b.n	8028470 <__mdiff+0x28>
 80284a2:	6923      	ldr	r3, [r4, #16]
 80284a4:	3414      	adds	r4, #20
 80284a6:	9300      	str	r3, [sp, #0]
 80284a8:	009b      	lsls	r3, r3, #2
 80284aa:	18e3      	adds	r3, r4, r3
 80284ac:	0021      	movs	r1, r4
 80284ae:	9401      	str	r4, [sp, #4]
 80284b0:	003c      	movs	r4, r7
 80284b2:	9302      	str	r3, [sp, #8]
 80284b4:	693b      	ldr	r3, [r7, #16]
 80284b6:	3414      	adds	r4, #20
 80284b8:	009b      	lsls	r3, r3, #2
 80284ba:	18e3      	adds	r3, r4, r3
 80284bc:	9303      	str	r3, [sp, #12]
 80284be:	0003      	movs	r3, r0
 80284c0:	60c6      	str	r6, [r0, #12]
 80284c2:	468c      	mov	ip, r1
 80284c4:	2000      	movs	r0, #0
 80284c6:	3314      	adds	r3, #20
 80284c8:	9304      	str	r3, [sp, #16]
 80284ca:	9305      	str	r3, [sp, #20]
 80284cc:	4663      	mov	r3, ip
 80284ce:	cb20      	ldmia	r3!, {r5}
 80284d0:	b2a9      	uxth	r1, r5
 80284d2:	000e      	movs	r6, r1
 80284d4:	469c      	mov	ip, r3
 80284d6:	cc08      	ldmia	r4!, {r3}
 80284d8:	0c2d      	lsrs	r5, r5, #16
 80284da:	b299      	uxth	r1, r3
 80284dc:	1a71      	subs	r1, r6, r1
 80284de:	1809      	adds	r1, r1, r0
 80284e0:	0c1b      	lsrs	r3, r3, #16
 80284e2:	1408      	asrs	r0, r1, #16
 80284e4:	1aeb      	subs	r3, r5, r3
 80284e6:	181b      	adds	r3, r3, r0
 80284e8:	1418      	asrs	r0, r3, #16
 80284ea:	b289      	uxth	r1, r1
 80284ec:	041b      	lsls	r3, r3, #16
 80284ee:	4319      	orrs	r1, r3
 80284f0:	9b05      	ldr	r3, [sp, #20]
 80284f2:	c302      	stmia	r3!, {r1}
 80284f4:	9305      	str	r3, [sp, #20]
 80284f6:	9b03      	ldr	r3, [sp, #12]
 80284f8:	42a3      	cmp	r3, r4
 80284fa:	d8e7      	bhi.n	80284cc <__mdiff+0x84>
 80284fc:	0039      	movs	r1, r7
 80284fe:	9c03      	ldr	r4, [sp, #12]
 8028500:	3115      	adds	r1, #21
 8028502:	2304      	movs	r3, #4
 8028504:	428c      	cmp	r4, r1
 8028506:	d304      	bcc.n	8028512 <__mdiff+0xca>
 8028508:	1be3      	subs	r3, r4, r7
 802850a:	3b15      	subs	r3, #21
 802850c:	089b      	lsrs	r3, r3, #2
 802850e:	3301      	adds	r3, #1
 8028510:	009b      	lsls	r3, r3, #2
 8028512:	9901      	ldr	r1, [sp, #4]
 8028514:	18cd      	adds	r5, r1, r3
 8028516:	9904      	ldr	r1, [sp, #16]
 8028518:	002e      	movs	r6, r5
 802851a:	18cb      	adds	r3, r1, r3
 802851c:	001f      	movs	r7, r3
 802851e:	9902      	ldr	r1, [sp, #8]
 8028520:	428e      	cmp	r6, r1
 8028522:	d311      	bcc.n	8028548 <__mdiff+0x100>
 8028524:	9c02      	ldr	r4, [sp, #8]
 8028526:	1ee9      	subs	r1, r5, #3
 8028528:	2000      	movs	r0, #0
 802852a:	428c      	cmp	r4, r1
 802852c:	d304      	bcc.n	8028538 <__mdiff+0xf0>
 802852e:	0021      	movs	r1, r4
 8028530:	3103      	adds	r1, #3
 8028532:	1b49      	subs	r1, r1, r5
 8028534:	0889      	lsrs	r1, r1, #2
 8028536:	0088      	lsls	r0, r1, #2
 8028538:	181b      	adds	r3, r3, r0
 802853a:	3b04      	subs	r3, #4
 802853c:	6819      	ldr	r1, [r3, #0]
 802853e:	2900      	cmp	r1, #0
 8028540:	d010      	beq.n	8028564 <__mdiff+0x11c>
 8028542:	9b00      	ldr	r3, [sp, #0]
 8028544:	6113      	str	r3, [r2, #16]
 8028546:	e798      	b.n	802847a <__mdiff+0x32>
 8028548:	4684      	mov	ip, r0
 802854a:	ce02      	ldmia	r6!, {r1}
 802854c:	b288      	uxth	r0, r1
 802854e:	4460      	add	r0, ip
 8028550:	1400      	asrs	r0, r0, #16
 8028552:	0c0c      	lsrs	r4, r1, #16
 8028554:	1904      	adds	r4, r0, r4
 8028556:	4461      	add	r1, ip
 8028558:	1420      	asrs	r0, r4, #16
 802855a:	b289      	uxth	r1, r1
 802855c:	0424      	lsls	r4, r4, #16
 802855e:	4321      	orrs	r1, r4
 8028560:	c702      	stmia	r7!, {r1}
 8028562:	e7dc      	b.n	802851e <__mdiff+0xd6>
 8028564:	9900      	ldr	r1, [sp, #0]
 8028566:	3901      	subs	r1, #1
 8028568:	9100      	str	r1, [sp, #0]
 802856a:	e7e6      	b.n	802853a <__mdiff+0xf2>
 802856c:	0802effa 	.word	0x0802effa
 8028570:	0802f06b 	.word	0x0802f06b
 8028574:	00000237 	.word	0x00000237
 8028578:	00000245 	.word	0x00000245

0802857c <__ulp>:
 802857c:	b510      	push	{r4, lr}
 802857e:	2400      	movs	r4, #0
 8028580:	4b0c      	ldr	r3, [pc, #48]	@ (80285b4 <__ulp+0x38>)
 8028582:	4a0d      	ldr	r2, [pc, #52]	@ (80285b8 <__ulp+0x3c>)
 8028584:	400b      	ands	r3, r1
 8028586:	189b      	adds	r3, r3, r2
 8028588:	42a3      	cmp	r3, r4
 802858a:	dc06      	bgt.n	802859a <__ulp+0x1e>
 802858c:	425b      	negs	r3, r3
 802858e:	151a      	asrs	r2, r3, #20
 8028590:	2a13      	cmp	r2, #19
 8028592:	dc05      	bgt.n	80285a0 <__ulp+0x24>
 8028594:	2380      	movs	r3, #128	@ 0x80
 8028596:	031b      	lsls	r3, r3, #12
 8028598:	4113      	asrs	r3, r2
 802859a:	0019      	movs	r1, r3
 802859c:	0020      	movs	r0, r4
 802859e:	bd10      	pop	{r4, pc}
 80285a0:	3a14      	subs	r2, #20
 80285a2:	2401      	movs	r4, #1
 80285a4:	2a1e      	cmp	r2, #30
 80285a6:	dc02      	bgt.n	80285ae <__ulp+0x32>
 80285a8:	2480      	movs	r4, #128	@ 0x80
 80285aa:	0624      	lsls	r4, r4, #24
 80285ac:	40d4      	lsrs	r4, r2
 80285ae:	2300      	movs	r3, #0
 80285b0:	e7f3      	b.n	802859a <__ulp+0x1e>
 80285b2:	46c0      	nop			@ (mov r8, r8)
 80285b4:	7ff00000 	.word	0x7ff00000
 80285b8:	fcc00000 	.word	0xfcc00000

080285bc <__b2d>:
 80285bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80285be:	0006      	movs	r6, r0
 80285c0:	6903      	ldr	r3, [r0, #16]
 80285c2:	3614      	adds	r6, #20
 80285c4:	009b      	lsls	r3, r3, #2
 80285c6:	18f3      	adds	r3, r6, r3
 80285c8:	1f1d      	subs	r5, r3, #4
 80285ca:	682c      	ldr	r4, [r5, #0]
 80285cc:	000f      	movs	r7, r1
 80285ce:	0020      	movs	r0, r4
 80285d0:	9301      	str	r3, [sp, #4]
 80285d2:	f7ff fd43 	bl	802805c <__hi0bits>
 80285d6:	2220      	movs	r2, #32
 80285d8:	1a12      	subs	r2, r2, r0
 80285da:	603a      	str	r2, [r7, #0]
 80285dc:	0003      	movs	r3, r0
 80285de:	4a1c      	ldr	r2, [pc, #112]	@ (8028650 <__b2d+0x94>)
 80285e0:	280a      	cmp	r0, #10
 80285e2:	dc15      	bgt.n	8028610 <__b2d+0x54>
 80285e4:	210b      	movs	r1, #11
 80285e6:	0027      	movs	r7, r4
 80285e8:	1a09      	subs	r1, r1, r0
 80285ea:	40cf      	lsrs	r7, r1
 80285ec:	433a      	orrs	r2, r7
 80285ee:	468c      	mov	ip, r1
 80285f0:	0011      	movs	r1, r2
 80285f2:	2200      	movs	r2, #0
 80285f4:	42ae      	cmp	r6, r5
 80285f6:	d202      	bcs.n	80285fe <__b2d+0x42>
 80285f8:	9a01      	ldr	r2, [sp, #4]
 80285fa:	3a08      	subs	r2, #8
 80285fc:	6812      	ldr	r2, [r2, #0]
 80285fe:	3315      	adds	r3, #21
 8028600:	409c      	lsls	r4, r3
 8028602:	4663      	mov	r3, ip
 8028604:	0027      	movs	r7, r4
 8028606:	40da      	lsrs	r2, r3
 8028608:	4317      	orrs	r7, r2
 802860a:	0038      	movs	r0, r7
 802860c:	b003      	add	sp, #12
 802860e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028610:	2700      	movs	r7, #0
 8028612:	42ae      	cmp	r6, r5
 8028614:	d202      	bcs.n	802861c <__b2d+0x60>
 8028616:	9d01      	ldr	r5, [sp, #4]
 8028618:	3d08      	subs	r5, #8
 802861a:	682f      	ldr	r7, [r5, #0]
 802861c:	210b      	movs	r1, #11
 802861e:	4249      	negs	r1, r1
 8028620:	468c      	mov	ip, r1
 8028622:	449c      	add	ip, r3
 8028624:	2b0b      	cmp	r3, #11
 8028626:	d010      	beq.n	802864a <__b2d+0x8e>
 8028628:	4661      	mov	r1, ip
 802862a:	2320      	movs	r3, #32
 802862c:	408c      	lsls	r4, r1
 802862e:	1a5b      	subs	r3, r3, r1
 8028630:	0039      	movs	r1, r7
 8028632:	40d9      	lsrs	r1, r3
 8028634:	430c      	orrs	r4, r1
 8028636:	4322      	orrs	r2, r4
 8028638:	0011      	movs	r1, r2
 802863a:	2200      	movs	r2, #0
 802863c:	42b5      	cmp	r5, r6
 802863e:	d901      	bls.n	8028644 <__b2d+0x88>
 8028640:	3d04      	subs	r5, #4
 8028642:	682a      	ldr	r2, [r5, #0]
 8028644:	4664      	mov	r4, ip
 8028646:	40a7      	lsls	r7, r4
 8028648:	e7dd      	b.n	8028606 <__b2d+0x4a>
 802864a:	4322      	orrs	r2, r4
 802864c:	0011      	movs	r1, r2
 802864e:	e7dc      	b.n	802860a <__b2d+0x4e>
 8028650:	3ff00000 	.word	0x3ff00000

08028654 <__d2b>:
 8028654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028656:	2101      	movs	r1, #1
 8028658:	0016      	movs	r6, r2
 802865a:	001f      	movs	r7, r3
 802865c:	f7ff fc06 	bl	8027e6c <_Balloc>
 8028660:	1e04      	subs	r4, r0, #0
 8028662:	d105      	bne.n	8028670 <__d2b+0x1c>
 8028664:	0022      	movs	r2, r4
 8028666:	4b25      	ldr	r3, [pc, #148]	@ (80286fc <__d2b+0xa8>)
 8028668:	4825      	ldr	r0, [pc, #148]	@ (8028700 <__d2b+0xac>)
 802866a:	4926      	ldr	r1, [pc, #152]	@ (8028704 <__d2b+0xb0>)
 802866c:	f000 fcd6 	bl	802901c <__assert_func>
 8028670:	033b      	lsls	r3, r7, #12
 8028672:	007d      	lsls	r5, r7, #1
 8028674:	0b1b      	lsrs	r3, r3, #12
 8028676:	0d6d      	lsrs	r5, r5, #21
 8028678:	d002      	beq.n	8028680 <__d2b+0x2c>
 802867a:	2280      	movs	r2, #128	@ 0x80
 802867c:	0352      	lsls	r2, r2, #13
 802867e:	4313      	orrs	r3, r2
 8028680:	9301      	str	r3, [sp, #4]
 8028682:	2e00      	cmp	r6, #0
 8028684:	d025      	beq.n	80286d2 <__d2b+0x7e>
 8028686:	4668      	mov	r0, sp
 8028688:	9600      	str	r6, [sp, #0]
 802868a:	f7ff fd08 	bl	802809e <__lo0bits>
 802868e:	9b01      	ldr	r3, [sp, #4]
 8028690:	9900      	ldr	r1, [sp, #0]
 8028692:	2800      	cmp	r0, #0
 8028694:	d01b      	beq.n	80286ce <__d2b+0x7a>
 8028696:	2220      	movs	r2, #32
 8028698:	001e      	movs	r6, r3
 802869a:	1a12      	subs	r2, r2, r0
 802869c:	4096      	lsls	r6, r2
 802869e:	0032      	movs	r2, r6
 80286a0:	40c3      	lsrs	r3, r0
 80286a2:	430a      	orrs	r2, r1
 80286a4:	6162      	str	r2, [r4, #20]
 80286a6:	9301      	str	r3, [sp, #4]
 80286a8:	9e01      	ldr	r6, [sp, #4]
 80286aa:	61a6      	str	r6, [r4, #24]
 80286ac:	1e73      	subs	r3, r6, #1
 80286ae:	419e      	sbcs	r6, r3
 80286b0:	3601      	adds	r6, #1
 80286b2:	6126      	str	r6, [r4, #16]
 80286b4:	2d00      	cmp	r5, #0
 80286b6:	d014      	beq.n	80286e2 <__d2b+0x8e>
 80286b8:	2635      	movs	r6, #53	@ 0x35
 80286ba:	4b13      	ldr	r3, [pc, #76]	@ (8028708 <__d2b+0xb4>)
 80286bc:	18ed      	adds	r5, r5, r3
 80286be:	9b08      	ldr	r3, [sp, #32]
 80286c0:	182d      	adds	r5, r5, r0
 80286c2:	601d      	str	r5, [r3, #0]
 80286c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80286c6:	1a36      	subs	r6, r6, r0
 80286c8:	601e      	str	r6, [r3, #0]
 80286ca:	0020      	movs	r0, r4
 80286cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80286ce:	6161      	str	r1, [r4, #20]
 80286d0:	e7ea      	b.n	80286a8 <__d2b+0x54>
 80286d2:	a801      	add	r0, sp, #4
 80286d4:	f7ff fce3 	bl	802809e <__lo0bits>
 80286d8:	9b01      	ldr	r3, [sp, #4]
 80286da:	2601      	movs	r6, #1
 80286dc:	6163      	str	r3, [r4, #20]
 80286de:	3020      	adds	r0, #32
 80286e0:	e7e7      	b.n	80286b2 <__d2b+0x5e>
 80286e2:	4b0a      	ldr	r3, [pc, #40]	@ (802870c <__d2b+0xb8>)
 80286e4:	18c0      	adds	r0, r0, r3
 80286e6:	9b08      	ldr	r3, [sp, #32]
 80286e8:	6018      	str	r0, [r3, #0]
 80286ea:	4b09      	ldr	r3, [pc, #36]	@ (8028710 <__d2b+0xbc>)
 80286ec:	18f3      	adds	r3, r6, r3
 80286ee:	009b      	lsls	r3, r3, #2
 80286f0:	18e3      	adds	r3, r4, r3
 80286f2:	6958      	ldr	r0, [r3, #20]
 80286f4:	f7ff fcb2 	bl	802805c <__hi0bits>
 80286f8:	0176      	lsls	r6, r6, #5
 80286fa:	e7e3      	b.n	80286c4 <__d2b+0x70>
 80286fc:	0802effa 	.word	0x0802effa
 8028700:	0802f06b 	.word	0x0802f06b
 8028704:	0000030f 	.word	0x0000030f
 8028708:	fffffbcd 	.word	0xfffffbcd
 802870c:	fffffbce 	.word	0xfffffbce
 8028710:	3fffffff 	.word	0x3fffffff

08028714 <__ratio>:
 8028714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028716:	b087      	sub	sp, #28
 8028718:	000f      	movs	r7, r1
 802871a:	a904      	add	r1, sp, #16
 802871c:	0006      	movs	r6, r0
 802871e:	f7ff ff4d 	bl	80285bc <__b2d>
 8028722:	9000      	str	r0, [sp, #0]
 8028724:	9101      	str	r1, [sp, #4]
 8028726:	9b00      	ldr	r3, [sp, #0]
 8028728:	9c01      	ldr	r4, [sp, #4]
 802872a:	0038      	movs	r0, r7
 802872c:	a905      	add	r1, sp, #20
 802872e:	9302      	str	r3, [sp, #8]
 8028730:	9403      	str	r4, [sp, #12]
 8028732:	f7ff ff43 	bl	80285bc <__b2d>
 8028736:	000d      	movs	r5, r1
 8028738:	0002      	movs	r2, r0
 802873a:	000b      	movs	r3, r1
 802873c:	6930      	ldr	r0, [r6, #16]
 802873e:	6939      	ldr	r1, [r7, #16]
 8028740:	9e04      	ldr	r6, [sp, #16]
 8028742:	1a40      	subs	r0, r0, r1
 8028744:	9905      	ldr	r1, [sp, #20]
 8028746:	0140      	lsls	r0, r0, #5
 8028748:	1a71      	subs	r1, r6, r1
 802874a:	1841      	adds	r1, r0, r1
 802874c:	0508      	lsls	r0, r1, #20
 802874e:	2900      	cmp	r1, #0
 8028750:	dd08      	ble.n	8028764 <__ratio+0x50>
 8028752:	9901      	ldr	r1, [sp, #4]
 8028754:	1841      	adds	r1, r0, r1
 8028756:	9103      	str	r1, [sp, #12]
 8028758:	9802      	ldr	r0, [sp, #8]
 802875a:	9903      	ldr	r1, [sp, #12]
 802875c:	f7d9 fcc0 	bl	80020e0 <__aeabi_ddiv>
 8028760:	b007      	add	sp, #28
 8028762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028764:	1a2b      	subs	r3, r5, r0
 8028766:	e7f7      	b.n	8028758 <__ratio+0x44>

08028768 <__copybits>:
 8028768:	b570      	push	{r4, r5, r6, lr}
 802876a:	0014      	movs	r4, r2
 802876c:	0005      	movs	r5, r0
 802876e:	3901      	subs	r1, #1
 8028770:	6913      	ldr	r3, [r2, #16]
 8028772:	1149      	asrs	r1, r1, #5
 8028774:	3101      	adds	r1, #1
 8028776:	0089      	lsls	r1, r1, #2
 8028778:	3414      	adds	r4, #20
 802877a:	009b      	lsls	r3, r3, #2
 802877c:	1841      	adds	r1, r0, r1
 802877e:	18e3      	adds	r3, r4, r3
 8028780:	42a3      	cmp	r3, r4
 8028782:	d80d      	bhi.n	80287a0 <__copybits+0x38>
 8028784:	0014      	movs	r4, r2
 8028786:	3411      	adds	r4, #17
 8028788:	2500      	movs	r5, #0
 802878a:	42a3      	cmp	r3, r4
 802878c:	d303      	bcc.n	8028796 <__copybits+0x2e>
 802878e:	1a9b      	subs	r3, r3, r2
 8028790:	3b11      	subs	r3, #17
 8028792:	089b      	lsrs	r3, r3, #2
 8028794:	009d      	lsls	r5, r3, #2
 8028796:	2300      	movs	r3, #0
 8028798:	1940      	adds	r0, r0, r5
 802879a:	4281      	cmp	r1, r0
 802879c:	d803      	bhi.n	80287a6 <__copybits+0x3e>
 802879e:	bd70      	pop	{r4, r5, r6, pc}
 80287a0:	cc40      	ldmia	r4!, {r6}
 80287a2:	c540      	stmia	r5!, {r6}
 80287a4:	e7ec      	b.n	8028780 <__copybits+0x18>
 80287a6:	c008      	stmia	r0!, {r3}
 80287a8:	e7f7      	b.n	802879a <__copybits+0x32>

080287aa <__any_on>:
 80287aa:	0002      	movs	r2, r0
 80287ac:	6900      	ldr	r0, [r0, #16]
 80287ae:	b510      	push	{r4, lr}
 80287b0:	3214      	adds	r2, #20
 80287b2:	114b      	asrs	r3, r1, #5
 80287b4:	4298      	cmp	r0, r3
 80287b6:	db13      	blt.n	80287e0 <__any_on+0x36>
 80287b8:	dd0c      	ble.n	80287d4 <__any_on+0x2a>
 80287ba:	241f      	movs	r4, #31
 80287bc:	0008      	movs	r0, r1
 80287be:	4020      	ands	r0, r4
 80287c0:	4221      	tst	r1, r4
 80287c2:	d007      	beq.n	80287d4 <__any_on+0x2a>
 80287c4:	0099      	lsls	r1, r3, #2
 80287c6:	588c      	ldr	r4, [r1, r2]
 80287c8:	0021      	movs	r1, r4
 80287ca:	40c1      	lsrs	r1, r0
 80287cc:	4081      	lsls	r1, r0
 80287ce:	2001      	movs	r0, #1
 80287d0:	428c      	cmp	r4, r1
 80287d2:	d104      	bne.n	80287de <__any_on+0x34>
 80287d4:	009b      	lsls	r3, r3, #2
 80287d6:	18d3      	adds	r3, r2, r3
 80287d8:	4293      	cmp	r3, r2
 80287da:	d803      	bhi.n	80287e4 <__any_on+0x3a>
 80287dc:	2000      	movs	r0, #0
 80287de:	bd10      	pop	{r4, pc}
 80287e0:	0003      	movs	r3, r0
 80287e2:	e7f7      	b.n	80287d4 <__any_on+0x2a>
 80287e4:	3b04      	subs	r3, #4
 80287e6:	6819      	ldr	r1, [r3, #0]
 80287e8:	2900      	cmp	r1, #0
 80287ea:	d0f5      	beq.n	80287d8 <__any_on+0x2e>
 80287ec:	2001      	movs	r0, #1
 80287ee:	e7f6      	b.n	80287de <__any_on+0x34>

080287f0 <__ascii_wctomb>:
 80287f0:	0003      	movs	r3, r0
 80287f2:	1e08      	subs	r0, r1, #0
 80287f4:	d005      	beq.n	8028802 <__ascii_wctomb+0x12>
 80287f6:	2aff      	cmp	r2, #255	@ 0xff
 80287f8:	d904      	bls.n	8028804 <__ascii_wctomb+0x14>
 80287fa:	228a      	movs	r2, #138	@ 0x8a
 80287fc:	2001      	movs	r0, #1
 80287fe:	601a      	str	r2, [r3, #0]
 8028800:	4240      	negs	r0, r0
 8028802:	4770      	bx	lr
 8028804:	2001      	movs	r0, #1
 8028806:	700a      	strb	r2, [r1, #0]
 8028808:	e7fb      	b.n	8028802 <__ascii_wctomb+0x12>
	...

0802880c <__ssputs_r>:
 802880c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802880e:	688e      	ldr	r6, [r1, #8]
 8028810:	b085      	sub	sp, #20
 8028812:	001f      	movs	r7, r3
 8028814:	000c      	movs	r4, r1
 8028816:	680b      	ldr	r3, [r1, #0]
 8028818:	9002      	str	r0, [sp, #8]
 802881a:	9203      	str	r2, [sp, #12]
 802881c:	42be      	cmp	r6, r7
 802881e:	d830      	bhi.n	8028882 <__ssputs_r+0x76>
 8028820:	210c      	movs	r1, #12
 8028822:	5e62      	ldrsh	r2, [r4, r1]
 8028824:	2190      	movs	r1, #144	@ 0x90
 8028826:	00c9      	lsls	r1, r1, #3
 8028828:	420a      	tst	r2, r1
 802882a:	d028      	beq.n	802887e <__ssputs_r+0x72>
 802882c:	2003      	movs	r0, #3
 802882e:	6921      	ldr	r1, [r4, #16]
 8028830:	1a5b      	subs	r3, r3, r1
 8028832:	9301      	str	r3, [sp, #4]
 8028834:	6963      	ldr	r3, [r4, #20]
 8028836:	4343      	muls	r3, r0
 8028838:	9801      	ldr	r0, [sp, #4]
 802883a:	0fdd      	lsrs	r5, r3, #31
 802883c:	18ed      	adds	r5, r5, r3
 802883e:	1c7b      	adds	r3, r7, #1
 8028840:	181b      	adds	r3, r3, r0
 8028842:	106d      	asrs	r5, r5, #1
 8028844:	42ab      	cmp	r3, r5
 8028846:	d900      	bls.n	802884a <__ssputs_r+0x3e>
 8028848:	001d      	movs	r5, r3
 802884a:	0552      	lsls	r2, r2, #21
 802884c:	d528      	bpl.n	80288a0 <__ssputs_r+0x94>
 802884e:	0029      	movs	r1, r5
 8028850:	9802      	ldr	r0, [sp, #8]
 8028852:	f7ff fa69 	bl	8027d28 <_malloc_r>
 8028856:	1e06      	subs	r6, r0, #0
 8028858:	d02c      	beq.n	80288b4 <__ssputs_r+0xa8>
 802885a:	9a01      	ldr	r2, [sp, #4]
 802885c:	6921      	ldr	r1, [r4, #16]
 802885e:	f7fe f80d 	bl	802687c <memcpy>
 8028862:	89a2      	ldrh	r2, [r4, #12]
 8028864:	4b18      	ldr	r3, [pc, #96]	@ (80288c8 <__ssputs_r+0xbc>)
 8028866:	401a      	ands	r2, r3
 8028868:	2380      	movs	r3, #128	@ 0x80
 802886a:	4313      	orrs	r3, r2
 802886c:	81a3      	strh	r3, [r4, #12]
 802886e:	9b01      	ldr	r3, [sp, #4]
 8028870:	6126      	str	r6, [r4, #16]
 8028872:	18f6      	adds	r6, r6, r3
 8028874:	6026      	str	r6, [r4, #0]
 8028876:	003e      	movs	r6, r7
 8028878:	6165      	str	r5, [r4, #20]
 802887a:	1aed      	subs	r5, r5, r3
 802887c:	60a5      	str	r5, [r4, #8]
 802887e:	42be      	cmp	r6, r7
 8028880:	d900      	bls.n	8028884 <__ssputs_r+0x78>
 8028882:	003e      	movs	r6, r7
 8028884:	0032      	movs	r2, r6
 8028886:	9903      	ldr	r1, [sp, #12]
 8028888:	6820      	ldr	r0, [r4, #0]
 802888a:	f000 fb7e 	bl	8028f8a <memmove>
 802888e:	2000      	movs	r0, #0
 8028890:	68a3      	ldr	r3, [r4, #8]
 8028892:	1b9b      	subs	r3, r3, r6
 8028894:	60a3      	str	r3, [r4, #8]
 8028896:	6823      	ldr	r3, [r4, #0]
 8028898:	199b      	adds	r3, r3, r6
 802889a:	6023      	str	r3, [r4, #0]
 802889c:	b005      	add	sp, #20
 802889e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80288a0:	002a      	movs	r2, r5
 80288a2:	9802      	ldr	r0, [sp, #8]
 80288a4:	f000 fc05 	bl	80290b2 <_realloc_r>
 80288a8:	1e06      	subs	r6, r0, #0
 80288aa:	d1e0      	bne.n	802886e <__ssputs_r+0x62>
 80288ac:	6921      	ldr	r1, [r4, #16]
 80288ae:	9802      	ldr	r0, [sp, #8]
 80288b0:	f7fe fe6a 	bl	8027588 <_free_r>
 80288b4:	230c      	movs	r3, #12
 80288b6:	2001      	movs	r0, #1
 80288b8:	9a02      	ldr	r2, [sp, #8]
 80288ba:	4240      	negs	r0, r0
 80288bc:	6013      	str	r3, [r2, #0]
 80288be:	89a2      	ldrh	r2, [r4, #12]
 80288c0:	3334      	adds	r3, #52	@ 0x34
 80288c2:	4313      	orrs	r3, r2
 80288c4:	81a3      	strh	r3, [r4, #12]
 80288c6:	e7e9      	b.n	802889c <__ssputs_r+0x90>
 80288c8:	fffffb7f 	.word	0xfffffb7f

080288cc <_svfiprintf_r>:
 80288cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80288ce:	b0a1      	sub	sp, #132	@ 0x84
 80288d0:	9003      	str	r0, [sp, #12]
 80288d2:	001d      	movs	r5, r3
 80288d4:	898b      	ldrh	r3, [r1, #12]
 80288d6:	000f      	movs	r7, r1
 80288d8:	0016      	movs	r6, r2
 80288da:	061b      	lsls	r3, r3, #24
 80288dc:	d511      	bpl.n	8028902 <_svfiprintf_r+0x36>
 80288de:	690b      	ldr	r3, [r1, #16]
 80288e0:	2b00      	cmp	r3, #0
 80288e2:	d10e      	bne.n	8028902 <_svfiprintf_r+0x36>
 80288e4:	2140      	movs	r1, #64	@ 0x40
 80288e6:	f7ff fa1f 	bl	8027d28 <_malloc_r>
 80288ea:	6038      	str	r0, [r7, #0]
 80288ec:	6138      	str	r0, [r7, #16]
 80288ee:	2800      	cmp	r0, #0
 80288f0:	d105      	bne.n	80288fe <_svfiprintf_r+0x32>
 80288f2:	230c      	movs	r3, #12
 80288f4:	9a03      	ldr	r2, [sp, #12]
 80288f6:	6013      	str	r3, [r2, #0]
 80288f8:	2001      	movs	r0, #1
 80288fa:	4240      	negs	r0, r0
 80288fc:	e0cf      	b.n	8028a9e <_svfiprintf_r+0x1d2>
 80288fe:	2340      	movs	r3, #64	@ 0x40
 8028900:	617b      	str	r3, [r7, #20]
 8028902:	2300      	movs	r3, #0
 8028904:	ac08      	add	r4, sp, #32
 8028906:	6163      	str	r3, [r4, #20]
 8028908:	3320      	adds	r3, #32
 802890a:	7663      	strb	r3, [r4, #25]
 802890c:	3310      	adds	r3, #16
 802890e:	76a3      	strb	r3, [r4, #26]
 8028910:	9507      	str	r5, [sp, #28]
 8028912:	0035      	movs	r5, r6
 8028914:	782b      	ldrb	r3, [r5, #0]
 8028916:	2b00      	cmp	r3, #0
 8028918:	d001      	beq.n	802891e <_svfiprintf_r+0x52>
 802891a:	2b25      	cmp	r3, #37	@ 0x25
 802891c:	d148      	bne.n	80289b0 <_svfiprintf_r+0xe4>
 802891e:	1bab      	subs	r3, r5, r6
 8028920:	9305      	str	r3, [sp, #20]
 8028922:	42b5      	cmp	r5, r6
 8028924:	d00b      	beq.n	802893e <_svfiprintf_r+0x72>
 8028926:	0032      	movs	r2, r6
 8028928:	0039      	movs	r1, r7
 802892a:	9803      	ldr	r0, [sp, #12]
 802892c:	f7ff ff6e 	bl	802880c <__ssputs_r>
 8028930:	3001      	adds	r0, #1
 8028932:	d100      	bne.n	8028936 <_svfiprintf_r+0x6a>
 8028934:	e0ae      	b.n	8028a94 <_svfiprintf_r+0x1c8>
 8028936:	6963      	ldr	r3, [r4, #20]
 8028938:	9a05      	ldr	r2, [sp, #20]
 802893a:	189b      	adds	r3, r3, r2
 802893c:	6163      	str	r3, [r4, #20]
 802893e:	782b      	ldrb	r3, [r5, #0]
 8028940:	2b00      	cmp	r3, #0
 8028942:	d100      	bne.n	8028946 <_svfiprintf_r+0x7a>
 8028944:	e0a6      	b.n	8028a94 <_svfiprintf_r+0x1c8>
 8028946:	2201      	movs	r2, #1
 8028948:	2300      	movs	r3, #0
 802894a:	4252      	negs	r2, r2
 802894c:	6062      	str	r2, [r4, #4]
 802894e:	a904      	add	r1, sp, #16
 8028950:	3254      	adds	r2, #84	@ 0x54
 8028952:	1852      	adds	r2, r2, r1
 8028954:	1c6e      	adds	r6, r5, #1
 8028956:	6023      	str	r3, [r4, #0]
 8028958:	60e3      	str	r3, [r4, #12]
 802895a:	60a3      	str	r3, [r4, #8]
 802895c:	7013      	strb	r3, [r2, #0]
 802895e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028960:	4b54      	ldr	r3, [pc, #336]	@ (8028ab4 <_svfiprintf_r+0x1e8>)
 8028962:	2205      	movs	r2, #5
 8028964:	0018      	movs	r0, r3
 8028966:	7831      	ldrb	r1, [r6, #0]
 8028968:	9305      	str	r3, [sp, #20]
 802896a:	f7fd ff7c 	bl	8026866 <memchr>
 802896e:	1c75      	adds	r5, r6, #1
 8028970:	2800      	cmp	r0, #0
 8028972:	d11f      	bne.n	80289b4 <_svfiprintf_r+0xe8>
 8028974:	6822      	ldr	r2, [r4, #0]
 8028976:	06d3      	lsls	r3, r2, #27
 8028978:	d504      	bpl.n	8028984 <_svfiprintf_r+0xb8>
 802897a:	2353      	movs	r3, #83	@ 0x53
 802897c:	a904      	add	r1, sp, #16
 802897e:	185b      	adds	r3, r3, r1
 8028980:	2120      	movs	r1, #32
 8028982:	7019      	strb	r1, [r3, #0]
 8028984:	0713      	lsls	r3, r2, #28
 8028986:	d504      	bpl.n	8028992 <_svfiprintf_r+0xc6>
 8028988:	2353      	movs	r3, #83	@ 0x53
 802898a:	a904      	add	r1, sp, #16
 802898c:	185b      	adds	r3, r3, r1
 802898e:	212b      	movs	r1, #43	@ 0x2b
 8028990:	7019      	strb	r1, [r3, #0]
 8028992:	7833      	ldrb	r3, [r6, #0]
 8028994:	2b2a      	cmp	r3, #42	@ 0x2a
 8028996:	d016      	beq.n	80289c6 <_svfiprintf_r+0xfa>
 8028998:	0035      	movs	r5, r6
 802899a:	2100      	movs	r1, #0
 802899c:	200a      	movs	r0, #10
 802899e:	68e3      	ldr	r3, [r4, #12]
 80289a0:	782a      	ldrb	r2, [r5, #0]
 80289a2:	1c6e      	adds	r6, r5, #1
 80289a4:	3a30      	subs	r2, #48	@ 0x30
 80289a6:	2a09      	cmp	r2, #9
 80289a8:	d950      	bls.n	8028a4c <_svfiprintf_r+0x180>
 80289aa:	2900      	cmp	r1, #0
 80289ac:	d111      	bne.n	80289d2 <_svfiprintf_r+0x106>
 80289ae:	e017      	b.n	80289e0 <_svfiprintf_r+0x114>
 80289b0:	3501      	adds	r5, #1
 80289b2:	e7af      	b.n	8028914 <_svfiprintf_r+0x48>
 80289b4:	9b05      	ldr	r3, [sp, #20]
 80289b6:	6822      	ldr	r2, [r4, #0]
 80289b8:	1ac0      	subs	r0, r0, r3
 80289ba:	2301      	movs	r3, #1
 80289bc:	4083      	lsls	r3, r0
 80289be:	4313      	orrs	r3, r2
 80289c0:	002e      	movs	r6, r5
 80289c2:	6023      	str	r3, [r4, #0]
 80289c4:	e7cc      	b.n	8028960 <_svfiprintf_r+0x94>
 80289c6:	9b07      	ldr	r3, [sp, #28]
 80289c8:	1d19      	adds	r1, r3, #4
 80289ca:	681b      	ldr	r3, [r3, #0]
 80289cc:	9107      	str	r1, [sp, #28]
 80289ce:	2b00      	cmp	r3, #0
 80289d0:	db01      	blt.n	80289d6 <_svfiprintf_r+0x10a>
 80289d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80289d4:	e004      	b.n	80289e0 <_svfiprintf_r+0x114>
 80289d6:	425b      	negs	r3, r3
 80289d8:	60e3      	str	r3, [r4, #12]
 80289da:	2302      	movs	r3, #2
 80289dc:	4313      	orrs	r3, r2
 80289de:	6023      	str	r3, [r4, #0]
 80289e0:	782b      	ldrb	r3, [r5, #0]
 80289e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80289e4:	d10c      	bne.n	8028a00 <_svfiprintf_r+0x134>
 80289e6:	786b      	ldrb	r3, [r5, #1]
 80289e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80289ea:	d134      	bne.n	8028a56 <_svfiprintf_r+0x18a>
 80289ec:	9b07      	ldr	r3, [sp, #28]
 80289ee:	3502      	adds	r5, #2
 80289f0:	1d1a      	adds	r2, r3, #4
 80289f2:	681b      	ldr	r3, [r3, #0]
 80289f4:	9207      	str	r2, [sp, #28]
 80289f6:	2b00      	cmp	r3, #0
 80289f8:	da01      	bge.n	80289fe <_svfiprintf_r+0x132>
 80289fa:	2301      	movs	r3, #1
 80289fc:	425b      	negs	r3, r3
 80289fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8028a00:	4e2d      	ldr	r6, [pc, #180]	@ (8028ab8 <_svfiprintf_r+0x1ec>)
 8028a02:	2203      	movs	r2, #3
 8028a04:	0030      	movs	r0, r6
 8028a06:	7829      	ldrb	r1, [r5, #0]
 8028a08:	f7fd ff2d 	bl	8026866 <memchr>
 8028a0c:	2800      	cmp	r0, #0
 8028a0e:	d006      	beq.n	8028a1e <_svfiprintf_r+0x152>
 8028a10:	2340      	movs	r3, #64	@ 0x40
 8028a12:	1b80      	subs	r0, r0, r6
 8028a14:	4083      	lsls	r3, r0
 8028a16:	6822      	ldr	r2, [r4, #0]
 8028a18:	3501      	adds	r5, #1
 8028a1a:	4313      	orrs	r3, r2
 8028a1c:	6023      	str	r3, [r4, #0]
 8028a1e:	7829      	ldrb	r1, [r5, #0]
 8028a20:	2206      	movs	r2, #6
 8028a22:	4826      	ldr	r0, [pc, #152]	@ (8028abc <_svfiprintf_r+0x1f0>)
 8028a24:	1c6e      	adds	r6, r5, #1
 8028a26:	7621      	strb	r1, [r4, #24]
 8028a28:	f7fd ff1d 	bl	8026866 <memchr>
 8028a2c:	2800      	cmp	r0, #0
 8028a2e:	d038      	beq.n	8028aa2 <_svfiprintf_r+0x1d6>
 8028a30:	4b23      	ldr	r3, [pc, #140]	@ (8028ac0 <_svfiprintf_r+0x1f4>)
 8028a32:	2b00      	cmp	r3, #0
 8028a34:	d122      	bne.n	8028a7c <_svfiprintf_r+0x1b0>
 8028a36:	2207      	movs	r2, #7
 8028a38:	9b07      	ldr	r3, [sp, #28]
 8028a3a:	3307      	adds	r3, #7
 8028a3c:	4393      	bics	r3, r2
 8028a3e:	3308      	adds	r3, #8
 8028a40:	9307      	str	r3, [sp, #28]
 8028a42:	6963      	ldr	r3, [r4, #20]
 8028a44:	9a04      	ldr	r2, [sp, #16]
 8028a46:	189b      	adds	r3, r3, r2
 8028a48:	6163      	str	r3, [r4, #20]
 8028a4a:	e762      	b.n	8028912 <_svfiprintf_r+0x46>
 8028a4c:	4343      	muls	r3, r0
 8028a4e:	0035      	movs	r5, r6
 8028a50:	2101      	movs	r1, #1
 8028a52:	189b      	adds	r3, r3, r2
 8028a54:	e7a4      	b.n	80289a0 <_svfiprintf_r+0xd4>
 8028a56:	2300      	movs	r3, #0
 8028a58:	200a      	movs	r0, #10
 8028a5a:	0019      	movs	r1, r3
 8028a5c:	3501      	adds	r5, #1
 8028a5e:	6063      	str	r3, [r4, #4]
 8028a60:	782a      	ldrb	r2, [r5, #0]
 8028a62:	1c6e      	adds	r6, r5, #1
 8028a64:	3a30      	subs	r2, #48	@ 0x30
 8028a66:	2a09      	cmp	r2, #9
 8028a68:	d903      	bls.n	8028a72 <_svfiprintf_r+0x1a6>
 8028a6a:	2b00      	cmp	r3, #0
 8028a6c:	d0c8      	beq.n	8028a00 <_svfiprintf_r+0x134>
 8028a6e:	9109      	str	r1, [sp, #36]	@ 0x24
 8028a70:	e7c6      	b.n	8028a00 <_svfiprintf_r+0x134>
 8028a72:	4341      	muls	r1, r0
 8028a74:	0035      	movs	r5, r6
 8028a76:	2301      	movs	r3, #1
 8028a78:	1889      	adds	r1, r1, r2
 8028a7a:	e7f1      	b.n	8028a60 <_svfiprintf_r+0x194>
 8028a7c:	aa07      	add	r2, sp, #28
 8028a7e:	9200      	str	r2, [sp, #0]
 8028a80:	0021      	movs	r1, r4
 8028a82:	003a      	movs	r2, r7
 8028a84:	4b0f      	ldr	r3, [pc, #60]	@ (8028ac4 <_svfiprintf_r+0x1f8>)
 8028a86:	9803      	ldr	r0, [sp, #12]
 8028a88:	f7fc ffc4 	bl	8025a14 <_printf_float>
 8028a8c:	9004      	str	r0, [sp, #16]
 8028a8e:	9b04      	ldr	r3, [sp, #16]
 8028a90:	3301      	adds	r3, #1
 8028a92:	d1d6      	bne.n	8028a42 <_svfiprintf_r+0x176>
 8028a94:	89bb      	ldrh	r3, [r7, #12]
 8028a96:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028a98:	065b      	lsls	r3, r3, #25
 8028a9a:	d500      	bpl.n	8028a9e <_svfiprintf_r+0x1d2>
 8028a9c:	e72c      	b.n	80288f8 <_svfiprintf_r+0x2c>
 8028a9e:	b021      	add	sp, #132	@ 0x84
 8028aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028aa2:	aa07      	add	r2, sp, #28
 8028aa4:	9200      	str	r2, [sp, #0]
 8028aa6:	0021      	movs	r1, r4
 8028aa8:	003a      	movs	r2, r7
 8028aaa:	4b06      	ldr	r3, [pc, #24]	@ (8028ac4 <_svfiprintf_r+0x1f8>)
 8028aac:	9803      	ldr	r0, [sp, #12]
 8028aae:	f7fd fa5f 	bl	8025f70 <_printf_i>
 8028ab2:	e7eb      	b.n	8028a8c <_svfiprintf_r+0x1c0>
 8028ab4:	0802f0c4 	.word	0x0802f0c4
 8028ab8:	0802f0ca 	.word	0x0802f0ca
 8028abc:	0802f0ce 	.word	0x0802f0ce
 8028ac0:	08025a15 	.word	0x08025a15
 8028ac4:	0802880d 	.word	0x0802880d

08028ac8 <__sfputc_r>:
 8028ac8:	6893      	ldr	r3, [r2, #8]
 8028aca:	b510      	push	{r4, lr}
 8028acc:	3b01      	subs	r3, #1
 8028ace:	6093      	str	r3, [r2, #8]
 8028ad0:	2b00      	cmp	r3, #0
 8028ad2:	da04      	bge.n	8028ade <__sfputc_r+0x16>
 8028ad4:	6994      	ldr	r4, [r2, #24]
 8028ad6:	42a3      	cmp	r3, r4
 8028ad8:	db07      	blt.n	8028aea <__sfputc_r+0x22>
 8028ada:	290a      	cmp	r1, #10
 8028adc:	d005      	beq.n	8028aea <__sfputc_r+0x22>
 8028ade:	6813      	ldr	r3, [r2, #0]
 8028ae0:	1c58      	adds	r0, r3, #1
 8028ae2:	6010      	str	r0, [r2, #0]
 8028ae4:	7019      	strb	r1, [r3, #0]
 8028ae6:	0008      	movs	r0, r1
 8028ae8:	bd10      	pop	{r4, pc}
 8028aea:	f7fd fd4b 	bl	8026584 <__swbuf_r>
 8028aee:	0001      	movs	r1, r0
 8028af0:	e7f9      	b.n	8028ae6 <__sfputc_r+0x1e>

08028af2 <__sfputs_r>:
 8028af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028af4:	0006      	movs	r6, r0
 8028af6:	000f      	movs	r7, r1
 8028af8:	0014      	movs	r4, r2
 8028afa:	18d5      	adds	r5, r2, r3
 8028afc:	42ac      	cmp	r4, r5
 8028afe:	d101      	bne.n	8028b04 <__sfputs_r+0x12>
 8028b00:	2000      	movs	r0, #0
 8028b02:	e007      	b.n	8028b14 <__sfputs_r+0x22>
 8028b04:	7821      	ldrb	r1, [r4, #0]
 8028b06:	003a      	movs	r2, r7
 8028b08:	0030      	movs	r0, r6
 8028b0a:	f7ff ffdd 	bl	8028ac8 <__sfputc_r>
 8028b0e:	3401      	adds	r4, #1
 8028b10:	1c43      	adds	r3, r0, #1
 8028b12:	d1f3      	bne.n	8028afc <__sfputs_r+0xa>
 8028b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028b18 <_vfiprintf_r>:
 8028b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028b1a:	b0a1      	sub	sp, #132	@ 0x84
 8028b1c:	000f      	movs	r7, r1
 8028b1e:	0015      	movs	r5, r2
 8028b20:	001e      	movs	r6, r3
 8028b22:	9003      	str	r0, [sp, #12]
 8028b24:	2800      	cmp	r0, #0
 8028b26:	d004      	beq.n	8028b32 <_vfiprintf_r+0x1a>
 8028b28:	6a03      	ldr	r3, [r0, #32]
 8028b2a:	2b00      	cmp	r3, #0
 8028b2c:	d101      	bne.n	8028b32 <_vfiprintf_r+0x1a>
 8028b2e:	f7fd fbbb 	bl	80262a8 <__sinit>
 8028b32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028b34:	07db      	lsls	r3, r3, #31
 8028b36:	d405      	bmi.n	8028b44 <_vfiprintf_r+0x2c>
 8028b38:	89bb      	ldrh	r3, [r7, #12]
 8028b3a:	059b      	lsls	r3, r3, #22
 8028b3c:	d402      	bmi.n	8028b44 <_vfiprintf_r+0x2c>
 8028b3e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028b40:	f7fd fe8f 	bl	8026862 <__retarget_lock_acquire_recursive>
 8028b44:	89bb      	ldrh	r3, [r7, #12]
 8028b46:	071b      	lsls	r3, r3, #28
 8028b48:	d502      	bpl.n	8028b50 <_vfiprintf_r+0x38>
 8028b4a:	693b      	ldr	r3, [r7, #16]
 8028b4c:	2b00      	cmp	r3, #0
 8028b4e:	d113      	bne.n	8028b78 <_vfiprintf_r+0x60>
 8028b50:	0039      	movs	r1, r7
 8028b52:	9803      	ldr	r0, [sp, #12]
 8028b54:	f7fd fd58 	bl	8026608 <__swsetup_r>
 8028b58:	2800      	cmp	r0, #0
 8028b5a:	d00d      	beq.n	8028b78 <_vfiprintf_r+0x60>
 8028b5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028b5e:	07db      	lsls	r3, r3, #31
 8028b60:	d503      	bpl.n	8028b6a <_vfiprintf_r+0x52>
 8028b62:	2001      	movs	r0, #1
 8028b64:	4240      	negs	r0, r0
 8028b66:	b021      	add	sp, #132	@ 0x84
 8028b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028b6a:	89bb      	ldrh	r3, [r7, #12]
 8028b6c:	059b      	lsls	r3, r3, #22
 8028b6e:	d4f8      	bmi.n	8028b62 <_vfiprintf_r+0x4a>
 8028b70:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028b72:	f7fd fe77 	bl	8026864 <__retarget_lock_release_recursive>
 8028b76:	e7f4      	b.n	8028b62 <_vfiprintf_r+0x4a>
 8028b78:	2300      	movs	r3, #0
 8028b7a:	ac08      	add	r4, sp, #32
 8028b7c:	6163      	str	r3, [r4, #20]
 8028b7e:	3320      	adds	r3, #32
 8028b80:	7663      	strb	r3, [r4, #25]
 8028b82:	3310      	adds	r3, #16
 8028b84:	76a3      	strb	r3, [r4, #26]
 8028b86:	9607      	str	r6, [sp, #28]
 8028b88:	002e      	movs	r6, r5
 8028b8a:	7833      	ldrb	r3, [r6, #0]
 8028b8c:	2b00      	cmp	r3, #0
 8028b8e:	d001      	beq.n	8028b94 <_vfiprintf_r+0x7c>
 8028b90:	2b25      	cmp	r3, #37	@ 0x25
 8028b92:	d148      	bne.n	8028c26 <_vfiprintf_r+0x10e>
 8028b94:	1b73      	subs	r3, r6, r5
 8028b96:	9305      	str	r3, [sp, #20]
 8028b98:	42ae      	cmp	r6, r5
 8028b9a:	d00b      	beq.n	8028bb4 <_vfiprintf_r+0x9c>
 8028b9c:	002a      	movs	r2, r5
 8028b9e:	0039      	movs	r1, r7
 8028ba0:	9803      	ldr	r0, [sp, #12]
 8028ba2:	f7ff ffa6 	bl	8028af2 <__sfputs_r>
 8028ba6:	3001      	adds	r0, #1
 8028ba8:	d100      	bne.n	8028bac <_vfiprintf_r+0x94>
 8028baa:	e0ae      	b.n	8028d0a <_vfiprintf_r+0x1f2>
 8028bac:	6963      	ldr	r3, [r4, #20]
 8028bae:	9a05      	ldr	r2, [sp, #20]
 8028bb0:	189b      	adds	r3, r3, r2
 8028bb2:	6163      	str	r3, [r4, #20]
 8028bb4:	7833      	ldrb	r3, [r6, #0]
 8028bb6:	2b00      	cmp	r3, #0
 8028bb8:	d100      	bne.n	8028bbc <_vfiprintf_r+0xa4>
 8028bba:	e0a6      	b.n	8028d0a <_vfiprintf_r+0x1f2>
 8028bbc:	2201      	movs	r2, #1
 8028bbe:	2300      	movs	r3, #0
 8028bc0:	4252      	negs	r2, r2
 8028bc2:	6062      	str	r2, [r4, #4]
 8028bc4:	a904      	add	r1, sp, #16
 8028bc6:	3254      	adds	r2, #84	@ 0x54
 8028bc8:	1852      	adds	r2, r2, r1
 8028bca:	1c75      	adds	r5, r6, #1
 8028bcc:	6023      	str	r3, [r4, #0]
 8028bce:	60e3      	str	r3, [r4, #12]
 8028bd0:	60a3      	str	r3, [r4, #8]
 8028bd2:	7013      	strb	r3, [r2, #0]
 8028bd4:	65a3      	str	r3, [r4, #88]	@ 0x58
 8028bd6:	4b59      	ldr	r3, [pc, #356]	@ (8028d3c <_vfiprintf_r+0x224>)
 8028bd8:	2205      	movs	r2, #5
 8028bda:	0018      	movs	r0, r3
 8028bdc:	7829      	ldrb	r1, [r5, #0]
 8028bde:	9305      	str	r3, [sp, #20]
 8028be0:	f7fd fe41 	bl	8026866 <memchr>
 8028be4:	1c6e      	adds	r6, r5, #1
 8028be6:	2800      	cmp	r0, #0
 8028be8:	d11f      	bne.n	8028c2a <_vfiprintf_r+0x112>
 8028bea:	6822      	ldr	r2, [r4, #0]
 8028bec:	06d3      	lsls	r3, r2, #27
 8028bee:	d504      	bpl.n	8028bfa <_vfiprintf_r+0xe2>
 8028bf0:	2353      	movs	r3, #83	@ 0x53
 8028bf2:	a904      	add	r1, sp, #16
 8028bf4:	185b      	adds	r3, r3, r1
 8028bf6:	2120      	movs	r1, #32
 8028bf8:	7019      	strb	r1, [r3, #0]
 8028bfa:	0713      	lsls	r3, r2, #28
 8028bfc:	d504      	bpl.n	8028c08 <_vfiprintf_r+0xf0>
 8028bfe:	2353      	movs	r3, #83	@ 0x53
 8028c00:	a904      	add	r1, sp, #16
 8028c02:	185b      	adds	r3, r3, r1
 8028c04:	212b      	movs	r1, #43	@ 0x2b
 8028c06:	7019      	strb	r1, [r3, #0]
 8028c08:	782b      	ldrb	r3, [r5, #0]
 8028c0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8028c0c:	d016      	beq.n	8028c3c <_vfiprintf_r+0x124>
 8028c0e:	002e      	movs	r6, r5
 8028c10:	2100      	movs	r1, #0
 8028c12:	200a      	movs	r0, #10
 8028c14:	68e3      	ldr	r3, [r4, #12]
 8028c16:	7832      	ldrb	r2, [r6, #0]
 8028c18:	1c75      	adds	r5, r6, #1
 8028c1a:	3a30      	subs	r2, #48	@ 0x30
 8028c1c:	2a09      	cmp	r2, #9
 8028c1e:	d950      	bls.n	8028cc2 <_vfiprintf_r+0x1aa>
 8028c20:	2900      	cmp	r1, #0
 8028c22:	d111      	bne.n	8028c48 <_vfiprintf_r+0x130>
 8028c24:	e017      	b.n	8028c56 <_vfiprintf_r+0x13e>
 8028c26:	3601      	adds	r6, #1
 8028c28:	e7af      	b.n	8028b8a <_vfiprintf_r+0x72>
 8028c2a:	9b05      	ldr	r3, [sp, #20]
 8028c2c:	6822      	ldr	r2, [r4, #0]
 8028c2e:	1ac0      	subs	r0, r0, r3
 8028c30:	2301      	movs	r3, #1
 8028c32:	4083      	lsls	r3, r0
 8028c34:	4313      	orrs	r3, r2
 8028c36:	0035      	movs	r5, r6
 8028c38:	6023      	str	r3, [r4, #0]
 8028c3a:	e7cc      	b.n	8028bd6 <_vfiprintf_r+0xbe>
 8028c3c:	9b07      	ldr	r3, [sp, #28]
 8028c3e:	1d19      	adds	r1, r3, #4
 8028c40:	681b      	ldr	r3, [r3, #0]
 8028c42:	9107      	str	r1, [sp, #28]
 8028c44:	2b00      	cmp	r3, #0
 8028c46:	db01      	blt.n	8028c4c <_vfiprintf_r+0x134>
 8028c48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028c4a:	e004      	b.n	8028c56 <_vfiprintf_r+0x13e>
 8028c4c:	425b      	negs	r3, r3
 8028c4e:	60e3      	str	r3, [r4, #12]
 8028c50:	2302      	movs	r3, #2
 8028c52:	4313      	orrs	r3, r2
 8028c54:	6023      	str	r3, [r4, #0]
 8028c56:	7833      	ldrb	r3, [r6, #0]
 8028c58:	2b2e      	cmp	r3, #46	@ 0x2e
 8028c5a:	d10c      	bne.n	8028c76 <_vfiprintf_r+0x15e>
 8028c5c:	7873      	ldrb	r3, [r6, #1]
 8028c5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8028c60:	d134      	bne.n	8028ccc <_vfiprintf_r+0x1b4>
 8028c62:	9b07      	ldr	r3, [sp, #28]
 8028c64:	3602      	adds	r6, #2
 8028c66:	1d1a      	adds	r2, r3, #4
 8028c68:	681b      	ldr	r3, [r3, #0]
 8028c6a:	9207      	str	r2, [sp, #28]
 8028c6c:	2b00      	cmp	r3, #0
 8028c6e:	da01      	bge.n	8028c74 <_vfiprintf_r+0x15c>
 8028c70:	2301      	movs	r3, #1
 8028c72:	425b      	negs	r3, r3
 8028c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8028c76:	4d32      	ldr	r5, [pc, #200]	@ (8028d40 <_vfiprintf_r+0x228>)
 8028c78:	2203      	movs	r2, #3
 8028c7a:	0028      	movs	r0, r5
 8028c7c:	7831      	ldrb	r1, [r6, #0]
 8028c7e:	f7fd fdf2 	bl	8026866 <memchr>
 8028c82:	2800      	cmp	r0, #0
 8028c84:	d006      	beq.n	8028c94 <_vfiprintf_r+0x17c>
 8028c86:	2340      	movs	r3, #64	@ 0x40
 8028c88:	1b40      	subs	r0, r0, r5
 8028c8a:	4083      	lsls	r3, r0
 8028c8c:	6822      	ldr	r2, [r4, #0]
 8028c8e:	3601      	adds	r6, #1
 8028c90:	4313      	orrs	r3, r2
 8028c92:	6023      	str	r3, [r4, #0]
 8028c94:	7831      	ldrb	r1, [r6, #0]
 8028c96:	2206      	movs	r2, #6
 8028c98:	482a      	ldr	r0, [pc, #168]	@ (8028d44 <_vfiprintf_r+0x22c>)
 8028c9a:	1c75      	adds	r5, r6, #1
 8028c9c:	7621      	strb	r1, [r4, #24]
 8028c9e:	f7fd fde2 	bl	8026866 <memchr>
 8028ca2:	2800      	cmp	r0, #0
 8028ca4:	d040      	beq.n	8028d28 <_vfiprintf_r+0x210>
 8028ca6:	4b28      	ldr	r3, [pc, #160]	@ (8028d48 <_vfiprintf_r+0x230>)
 8028ca8:	2b00      	cmp	r3, #0
 8028caa:	d122      	bne.n	8028cf2 <_vfiprintf_r+0x1da>
 8028cac:	2207      	movs	r2, #7
 8028cae:	9b07      	ldr	r3, [sp, #28]
 8028cb0:	3307      	adds	r3, #7
 8028cb2:	4393      	bics	r3, r2
 8028cb4:	3308      	adds	r3, #8
 8028cb6:	9307      	str	r3, [sp, #28]
 8028cb8:	6963      	ldr	r3, [r4, #20]
 8028cba:	9a04      	ldr	r2, [sp, #16]
 8028cbc:	189b      	adds	r3, r3, r2
 8028cbe:	6163      	str	r3, [r4, #20]
 8028cc0:	e762      	b.n	8028b88 <_vfiprintf_r+0x70>
 8028cc2:	4343      	muls	r3, r0
 8028cc4:	002e      	movs	r6, r5
 8028cc6:	2101      	movs	r1, #1
 8028cc8:	189b      	adds	r3, r3, r2
 8028cca:	e7a4      	b.n	8028c16 <_vfiprintf_r+0xfe>
 8028ccc:	2300      	movs	r3, #0
 8028cce:	200a      	movs	r0, #10
 8028cd0:	0019      	movs	r1, r3
 8028cd2:	3601      	adds	r6, #1
 8028cd4:	6063      	str	r3, [r4, #4]
 8028cd6:	7832      	ldrb	r2, [r6, #0]
 8028cd8:	1c75      	adds	r5, r6, #1
 8028cda:	3a30      	subs	r2, #48	@ 0x30
 8028cdc:	2a09      	cmp	r2, #9
 8028cde:	d903      	bls.n	8028ce8 <_vfiprintf_r+0x1d0>
 8028ce0:	2b00      	cmp	r3, #0
 8028ce2:	d0c8      	beq.n	8028c76 <_vfiprintf_r+0x15e>
 8028ce4:	9109      	str	r1, [sp, #36]	@ 0x24
 8028ce6:	e7c6      	b.n	8028c76 <_vfiprintf_r+0x15e>
 8028ce8:	4341      	muls	r1, r0
 8028cea:	002e      	movs	r6, r5
 8028cec:	2301      	movs	r3, #1
 8028cee:	1889      	adds	r1, r1, r2
 8028cf0:	e7f1      	b.n	8028cd6 <_vfiprintf_r+0x1be>
 8028cf2:	aa07      	add	r2, sp, #28
 8028cf4:	9200      	str	r2, [sp, #0]
 8028cf6:	0021      	movs	r1, r4
 8028cf8:	003a      	movs	r2, r7
 8028cfa:	4b14      	ldr	r3, [pc, #80]	@ (8028d4c <_vfiprintf_r+0x234>)
 8028cfc:	9803      	ldr	r0, [sp, #12]
 8028cfe:	f7fc fe89 	bl	8025a14 <_printf_float>
 8028d02:	9004      	str	r0, [sp, #16]
 8028d04:	9b04      	ldr	r3, [sp, #16]
 8028d06:	3301      	adds	r3, #1
 8028d08:	d1d6      	bne.n	8028cb8 <_vfiprintf_r+0x1a0>
 8028d0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8028d0c:	07db      	lsls	r3, r3, #31
 8028d0e:	d405      	bmi.n	8028d1c <_vfiprintf_r+0x204>
 8028d10:	89bb      	ldrh	r3, [r7, #12]
 8028d12:	059b      	lsls	r3, r3, #22
 8028d14:	d402      	bmi.n	8028d1c <_vfiprintf_r+0x204>
 8028d16:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8028d18:	f7fd fda4 	bl	8026864 <__retarget_lock_release_recursive>
 8028d1c:	89bb      	ldrh	r3, [r7, #12]
 8028d1e:	065b      	lsls	r3, r3, #25
 8028d20:	d500      	bpl.n	8028d24 <_vfiprintf_r+0x20c>
 8028d22:	e71e      	b.n	8028b62 <_vfiprintf_r+0x4a>
 8028d24:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028d26:	e71e      	b.n	8028b66 <_vfiprintf_r+0x4e>
 8028d28:	aa07      	add	r2, sp, #28
 8028d2a:	9200      	str	r2, [sp, #0]
 8028d2c:	0021      	movs	r1, r4
 8028d2e:	003a      	movs	r2, r7
 8028d30:	4b06      	ldr	r3, [pc, #24]	@ (8028d4c <_vfiprintf_r+0x234>)
 8028d32:	9803      	ldr	r0, [sp, #12]
 8028d34:	f7fd f91c 	bl	8025f70 <_printf_i>
 8028d38:	e7e3      	b.n	8028d02 <_vfiprintf_r+0x1ea>
 8028d3a:	46c0      	nop			@ (mov r8, r8)
 8028d3c:	0802f0c4 	.word	0x0802f0c4
 8028d40:	0802f0ca 	.word	0x0802f0ca
 8028d44:	0802f0ce 	.word	0x0802f0ce
 8028d48:	08025a15 	.word	0x08025a15
 8028d4c:	08028af3 	.word	0x08028af3

08028d50 <__sflush_r>:
 8028d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028d52:	220c      	movs	r2, #12
 8028d54:	5e8b      	ldrsh	r3, [r1, r2]
 8028d56:	0005      	movs	r5, r0
 8028d58:	000c      	movs	r4, r1
 8028d5a:	071a      	lsls	r2, r3, #28
 8028d5c:	d456      	bmi.n	8028e0c <__sflush_r+0xbc>
 8028d5e:	684a      	ldr	r2, [r1, #4]
 8028d60:	2a00      	cmp	r2, #0
 8028d62:	dc02      	bgt.n	8028d6a <__sflush_r+0x1a>
 8028d64:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8028d66:	2a00      	cmp	r2, #0
 8028d68:	dd4e      	ble.n	8028e08 <__sflush_r+0xb8>
 8028d6a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028d6c:	2f00      	cmp	r7, #0
 8028d6e:	d04b      	beq.n	8028e08 <__sflush_r+0xb8>
 8028d70:	2200      	movs	r2, #0
 8028d72:	2080      	movs	r0, #128	@ 0x80
 8028d74:	682e      	ldr	r6, [r5, #0]
 8028d76:	602a      	str	r2, [r5, #0]
 8028d78:	001a      	movs	r2, r3
 8028d7a:	0140      	lsls	r0, r0, #5
 8028d7c:	6a21      	ldr	r1, [r4, #32]
 8028d7e:	4002      	ands	r2, r0
 8028d80:	4203      	tst	r3, r0
 8028d82:	d033      	beq.n	8028dec <__sflush_r+0x9c>
 8028d84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8028d86:	89a3      	ldrh	r3, [r4, #12]
 8028d88:	075b      	lsls	r3, r3, #29
 8028d8a:	d506      	bpl.n	8028d9a <__sflush_r+0x4a>
 8028d8c:	6863      	ldr	r3, [r4, #4]
 8028d8e:	1ad2      	subs	r2, r2, r3
 8028d90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8028d92:	2b00      	cmp	r3, #0
 8028d94:	d001      	beq.n	8028d9a <__sflush_r+0x4a>
 8028d96:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8028d98:	1ad2      	subs	r2, r2, r3
 8028d9a:	2300      	movs	r3, #0
 8028d9c:	0028      	movs	r0, r5
 8028d9e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8028da0:	6a21      	ldr	r1, [r4, #32]
 8028da2:	47b8      	blx	r7
 8028da4:	89a2      	ldrh	r2, [r4, #12]
 8028da6:	1c43      	adds	r3, r0, #1
 8028da8:	d106      	bne.n	8028db8 <__sflush_r+0x68>
 8028daa:	6829      	ldr	r1, [r5, #0]
 8028dac:	291d      	cmp	r1, #29
 8028dae:	d846      	bhi.n	8028e3e <__sflush_r+0xee>
 8028db0:	4b29      	ldr	r3, [pc, #164]	@ (8028e58 <__sflush_r+0x108>)
 8028db2:	40cb      	lsrs	r3, r1
 8028db4:	07db      	lsls	r3, r3, #31
 8028db6:	d542      	bpl.n	8028e3e <__sflush_r+0xee>
 8028db8:	2300      	movs	r3, #0
 8028dba:	6063      	str	r3, [r4, #4]
 8028dbc:	6923      	ldr	r3, [r4, #16]
 8028dbe:	6023      	str	r3, [r4, #0]
 8028dc0:	04d2      	lsls	r2, r2, #19
 8028dc2:	d505      	bpl.n	8028dd0 <__sflush_r+0x80>
 8028dc4:	1c43      	adds	r3, r0, #1
 8028dc6:	d102      	bne.n	8028dce <__sflush_r+0x7e>
 8028dc8:	682b      	ldr	r3, [r5, #0]
 8028dca:	2b00      	cmp	r3, #0
 8028dcc:	d100      	bne.n	8028dd0 <__sflush_r+0x80>
 8028dce:	6560      	str	r0, [r4, #84]	@ 0x54
 8028dd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028dd2:	602e      	str	r6, [r5, #0]
 8028dd4:	2900      	cmp	r1, #0
 8028dd6:	d017      	beq.n	8028e08 <__sflush_r+0xb8>
 8028dd8:	0023      	movs	r3, r4
 8028dda:	3344      	adds	r3, #68	@ 0x44
 8028ddc:	4299      	cmp	r1, r3
 8028dde:	d002      	beq.n	8028de6 <__sflush_r+0x96>
 8028de0:	0028      	movs	r0, r5
 8028de2:	f7fe fbd1 	bl	8027588 <_free_r>
 8028de6:	2300      	movs	r3, #0
 8028de8:	6363      	str	r3, [r4, #52]	@ 0x34
 8028dea:	e00d      	b.n	8028e08 <__sflush_r+0xb8>
 8028dec:	2301      	movs	r3, #1
 8028dee:	0028      	movs	r0, r5
 8028df0:	47b8      	blx	r7
 8028df2:	0002      	movs	r2, r0
 8028df4:	1c43      	adds	r3, r0, #1
 8028df6:	d1c6      	bne.n	8028d86 <__sflush_r+0x36>
 8028df8:	682b      	ldr	r3, [r5, #0]
 8028dfa:	2b00      	cmp	r3, #0
 8028dfc:	d0c3      	beq.n	8028d86 <__sflush_r+0x36>
 8028dfe:	2b1d      	cmp	r3, #29
 8028e00:	d001      	beq.n	8028e06 <__sflush_r+0xb6>
 8028e02:	2b16      	cmp	r3, #22
 8028e04:	d11a      	bne.n	8028e3c <__sflush_r+0xec>
 8028e06:	602e      	str	r6, [r5, #0]
 8028e08:	2000      	movs	r0, #0
 8028e0a:	e01e      	b.n	8028e4a <__sflush_r+0xfa>
 8028e0c:	690e      	ldr	r6, [r1, #16]
 8028e0e:	2e00      	cmp	r6, #0
 8028e10:	d0fa      	beq.n	8028e08 <__sflush_r+0xb8>
 8028e12:	680f      	ldr	r7, [r1, #0]
 8028e14:	600e      	str	r6, [r1, #0]
 8028e16:	1bba      	subs	r2, r7, r6
 8028e18:	9201      	str	r2, [sp, #4]
 8028e1a:	2200      	movs	r2, #0
 8028e1c:	079b      	lsls	r3, r3, #30
 8028e1e:	d100      	bne.n	8028e22 <__sflush_r+0xd2>
 8028e20:	694a      	ldr	r2, [r1, #20]
 8028e22:	60a2      	str	r2, [r4, #8]
 8028e24:	9b01      	ldr	r3, [sp, #4]
 8028e26:	2b00      	cmp	r3, #0
 8028e28:	ddee      	ble.n	8028e08 <__sflush_r+0xb8>
 8028e2a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8028e2c:	0032      	movs	r2, r6
 8028e2e:	001f      	movs	r7, r3
 8028e30:	0028      	movs	r0, r5
 8028e32:	9b01      	ldr	r3, [sp, #4]
 8028e34:	6a21      	ldr	r1, [r4, #32]
 8028e36:	47b8      	blx	r7
 8028e38:	2800      	cmp	r0, #0
 8028e3a:	dc07      	bgt.n	8028e4c <__sflush_r+0xfc>
 8028e3c:	89a2      	ldrh	r2, [r4, #12]
 8028e3e:	2340      	movs	r3, #64	@ 0x40
 8028e40:	2001      	movs	r0, #1
 8028e42:	4313      	orrs	r3, r2
 8028e44:	b21b      	sxth	r3, r3
 8028e46:	81a3      	strh	r3, [r4, #12]
 8028e48:	4240      	negs	r0, r0
 8028e4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8028e4c:	9b01      	ldr	r3, [sp, #4]
 8028e4e:	1836      	adds	r6, r6, r0
 8028e50:	1a1b      	subs	r3, r3, r0
 8028e52:	9301      	str	r3, [sp, #4]
 8028e54:	e7e6      	b.n	8028e24 <__sflush_r+0xd4>
 8028e56:	46c0      	nop			@ (mov r8, r8)
 8028e58:	20400001 	.word	0x20400001

08028e5c <_fflush_r>:
 8028e5c:	690b      	ldr	r3, [r1, #16]
 8028e5e:	b570      	push	{r4, r5, r6, lr}
 8028e60:	0005      	movs	r5, r0
 8028e62:	000c      	movs	r4, r1
 8028e64:	2b00      	cmp	r3, #0
 8028e66:	d102      	bne.n	8028e6e <_fflush_r+0x12>
 8028e68:	2500      	movs	r5, #0
 8028e6a:	0028      	movs	r0, r5
 8028e6c:	bd70      	pop	{r4, r5, r6, pc}
 8028e6e:	2800      	cmp	r0, #0
 8028e70:	d004      	beq.n	8028e7c <_fflush_r+0x20>
 8028e72:	6a03      	ldr	r3, [r0, #32]
 8028e74:	2b00      	cmp	r3, #0
 8028e76:	d101      	bne.n	8028e7c <_fflush_r+0x20>
 8028e78:	f7fd fa16 	bl	80262a8 <__sinit>
 8028e7c:	220c      	movs	r2, #12
 8028e7e:	5ea3      	ldrsh	r3, [r4, r2]
 8028e80:	2b00      	cmp	r3, #0
 8028e82:	d0f1      	beq.n	8028e68 <_fflush_r+0xc>
 8028e84:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8028e86:	07d2      	lsls	r2, r2, #31
 8028e88:	d404      	bmi.n	8028e94 <_fflush_r+0x38>
 8028e8a:	059b      	lsls	r3, r3, #22
 8028e8c:	d402      	bmi.n	8028e94 <_fflush_r+0x38>
 8028e8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028e90:	f7fd fce7 	bl	8026862 <__retarget_lock_acquire_recursive>
 8028e94:	0028      	movs	r0, r5
 8028e96:	0021      	movs	r1, r4
 8028e98:	f7ff ff5a 	bl	8028d50 <__sflush_r>
 8028e9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028e9e:	0005      	movs	r5, r0
 8028ea0:	07db      	lsls	r3, r3, #31
 8028ea2:	d4e2      	bmi.n	8028e6a <_fflush_r+0xe>
 8028ea4:	89a3      	ldrh	r3, [r4, #12]
 8028ea6:	059b      	lsls	r3, r3, #22
 8028ea8:	d4df      	bmi.n	8028e6a <_fflush_r+0xe>
 8028eaa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028eac:	f7fd fcda 	bl	8026864 <__retarget_lock_release_recursive>
 8028eb0:	e7db      	b.n	8028e6a <_fflush_r+0xe>
	...

08028eb4 <__swhatbuf_r>:
 8028eb4:	b570      	push	{r4, r5, r6, lr}
 8028eb6:	000e      	movs	r6, r1
 8028eb8:	001d      	movs	r5, r3
 8028eba:	230e      	movs	r3, #14
 8028ebc:	5ec9      	ldrsh	r1, [r1, r3]
 8028ebe:	0014      	movs	r4, r2
 8028ec0:	b096      	sub	sp, #88	@ 0x58
 8028ec2:	2900      	cmp	r1, #0
 8028ec4:	da0c      	bge.n	8028ee0 <__swhatbuf_r+0x2c>
 8028ec6:	89b2      	ldrh	r2, [r6, #12]
 8028ec8:	2380      	movs	r3, #128	@ 0x80
 8028eca:	0011      	movs	r1, r2
 8028ecc:	4019      	ands	r1, r3
 8028ece:	421a      	tst	r2, r3
 8028ed0:	d114      	bne.n	8028efc <__swhatbuf_r+0x48>
 8028ed2:	2380      	movs	r3, #128	@ 0x80
 8028ed4:	00db      	lsls	r3, r3, #3
 8028ed6:	2000      	movs	r0, #0
 8028ed8:	6029      	str	r1, [r5, #0]
 8028eda:	6023      	str	r3, [r4, #0]
 8028edc:	b016      	add	sp, #88	@ 0x58
 8028ede:	bd70      	pop	{r4, r5, r6, pc}
 8028ee0:	466a      	mov	r2, sp
 8028ee2:	f000 f865 	bl	8028fb0 <_fstat_r>
 8028ee6:	2800      	cmp	r0, #0
 8028ee8:	dbed      	blt.n	8028ec6 <__swhatbuf_r+0x12>
 8028eea:	23f0      	movs	r3, #240	@ 0xf0
 8028eec:	9901      	ldr	r1, [sp, #4]
 8028eee:	021b      	lsls	r3, r3, #8
 8028ef0:	4019      	ands	r1, r3
 8028ef2:	4b04      	ldr	r3, [pc, #16]	@ (8028f04 <__swhatbuf_r+0x50>)
 8028ef4:	18c9      	adds	r1, r1, r3
 8028ef6:	424b      	negs	r3, r1
 8028ef8:	4159      	adcs	r1, r3
 8028efa:	e7ea      	b.n	8028ed2 <__swhatbuf_r+0x1e>
 8028efc:	2100      	movs	r1, #0
 8028efe:	2340      	movs	r3, #64	@ 0x40
 8028f00:	e7e9      	b.n	8028ed6 <__swhatbuf_r+0x22>
 8028f02:	46c0      	nop			@ (mov r8, r8)
 8028f04:	ffffe000 	.word	0xffffe000

08028f08 <__smakebuf_r>:
 8028f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028f0a:	2602      	movs	r6, #2
 8028f0c:	898b      	ldrh	r3, [r1, #12]
 8028f0e:	0005      	movs	r5, r0
 8028f10:	000c      	movs	r4, r1
 8028f12:	b085      	sub	sp, #20
 8028f14:	4233      	tst	r3, r6
 8028f16:	d007      	beq.n	8028f28 <__smakebuf_r+0x20>
 8028f18:	0023      	movs	r3, r4
 8028f1a:	3347      	adds	r3, #71	@ 0x47
 8028f1c:	6023      	str	r3, [r4, #0]
 8028f1e:	6123      	str	r3, [r4, #16]
 8028f20:	2301      	movs	r3, #1
 8028f22:	6163      	str	r3, [r4, #20]
 8028f24:	b005      	add	sp, #20
 8028f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028f28:	ab03      	add	r3, sp, #12
 8028f2a:	aa02      	add	r2, sp, #8
 8028f2c:	f7ff ffc2 	bl	8028eb4 <__swhatbuf_r>
 8028f30:	9f02      	ldr	r7, [sp, #8]
 8028f32:	9001      	str	r0, [sp, #4]
 8028f34:	0039      	movs	r1, r7
 8028f36:	0028      	movs	r0, r5
 8028f38:	f7fe fef6 	bl	8027d28 <_malloc_r>
 8028f3c:	2800      	cmp	r0, #0
 8028f3e:	d108      	bne.n	8028f52 <__smakebuf_r+0x4a>
 8028f40:	220c      	movs	r2, #12
 8028f42:	5ea3      	ldrsh	r3, [r4, r2]
 8028f44:	059a      	lsls	r2, r3, #22
 8028f46:	d4ed      	bmi.n	8028f24 <__smakebuf_r+0x1c>
 8028f48:	2203      	movs	r2, #3
 8028f4a:	4393      	bics	r3, r2
 8028f4c:	431e      	orrs	r6, r3
 8028f4e:	81a6      	strh	r6, [r4, #12]
 8028f50:	e7e2      	b.n	8028f18 <__smakebuf_r+0x10>
 8028f52:	2380      	movs	r3, #128	@ 0x80
 8028f54:	89a2      	ldrh	r2, [r4, #12]
 8028f56:	6020      	str	r0, [r4, #0]
 8028f58:	4313      	orrs	r3, r2
 8028f5a:	81a3      	strh	r3, [r4, #12]
 8028f5c:	9b03      	ldr	r3, [sp, #12]
 8028f5e:	6120      	str	r0, [r4, #16]
 8028f60:	6167      	str	r7, [r4, #20]
 8028f62:	2b00      	cmp	r3, #0
 8028f64:	d00c      	beq.n	8028f80 <__smakebuf_r+0x78>
 8028f66:	0028      	movs	r0, r5
 8028f68:	230e      	movs	r3, #14
 8028f6a:	5ee1      	ldrsh	r1, [r4, r3]
 8028f6c:	f000 f832 	bl	8028fd4 <_isatty_r>
 8028f70:	2800      	cmp	r0, #0
 8028f72:	d005      	beq.n	8028f80 <__smakebuf_r+0x78>
 8028f74:	2303      	movs	r3, #3
 8028f76:	89a2      	ldrh	r2, [r4, #12]
 8028f78:	439a      	bics	r2, r3
 8028f7a:	3b02      	subs	r3, #2
 8028f7c:	4313      	orrs	r3, r2
 8028f7e:	81a3      	strh	r3, [r4, #12]
 8028f80:	89a3      	ldrh	r3, [r4, #12]
 8028f82:	9a01      	ldr	r2, [sp, #4]
 8028f84:	4313      	orrs	r3, r2
 8028f86:	81a3      	strh	r3, [r4, #12]
 8028f88:	e7cc      	b.n	8028f24 <__smakebuf_r+0x1c>

08028f8a <memmove>:
 8028f8a:	b510      	push	{r4, lr}
 8028f8c:	4288      	cmp	r0, r1
 8028f8e:	d902      	bls.n	8028f96 <memmove+0xc>
 8028f90:	188b      	adds	r3, r1, r2
 8028f92:	4298      	cmp	r0, r3
 8028f94:	d308      	bcc.n	8028fa8 <memmove+0x1e>
 8028f96:	2300      	movs	r3, #0
 8028f98:	429a      	cmp	r2, r3
 8028f9a:	d007      	beq.n	8028fac <memmove+0x22>
 8028f9c:	5ccc      	ldrb	r4, [r1, r3]
 8028f9e:	54c4      	strb	r4, [r0, r3]
 8028fa0:	3301      	adds	r3, #1
 8028fa2:	e7f9      	b.n	8028f98 <memmove+0xe>
 8028fa4:	5c8b      	ldrb	r3, [r1, r2]
 8028fa6:	5483      	strb	r3, [r0, r2]
 8028fa8:	3a01      	subs	r2, #1
 8028faa:	d2fb      	bcs.n	8028fa4 <memmove+0x1a>
 8028fac:	bd10      	pop	{r4, pc}
	...

08028fb0 <_fstat_r>:
 8028fb0:	2300      	movs	r3, #0
 8028fb2:	b570      	push	{r4, r5, r6, lr}
 8028fb4:	4d06      	ldr	r5, [pc, #24]	@ (8028fd0 <_fstat_r+0x20>)
 8028fb6:	0004      	movs	r4, r0
 8028fb8:	0008      	movs	r0, r1
 8028fba:	0011      	movs	r1, r2
 8028fbc:	602b      	str	r3, [r5, #0]
 8028fbe:	f7ea fbf5 	bl	80137ac <_fstat>
 8028fc2:	1c43      	adds	r3, r0, #1
 8028fc4:	d103      	bne.n	8028fce <_fstat_r+0x1e>
 8028fc6:	682b      	ldr	r3, [r5, #0]
 8028fc8:	2b00      	cmp	r3, #0
 8028fca:	d000      	beq.n	8028fce <_fstat_r+0x1e>
 8028fcc:	6023      	str	r3, [r4, #0]
 8028fce:	bd70      	pop	{r4, r5, r6, pc}
 8028fd0:	200038bc 	.word	0x200038bc

08028fd4 <_isatty_r>:
 8028fd4:	2300      	movs	r3, #0
 8028fd6:	b570      	push	{r4, r5, r6, lr}
 8028fd8:	4d06      	ldr	r5, [pc, #24]	@ (8028ff4 <_isatty_r+0x20>)
 8028fda:	0004      	movs	r4, r0
 8028fdc:	0008      	movs	r0, r1
 8028fde:	602b      	str	r3, [r5, #0]
 8028fe0:	f7ea fbf2 	bl	80137c8 <_isatty>
 8028fe4:	1c43      	adds	r3, r0, #1
 8028fe6:	d103      	bne.n	8028ff0 <_isatty_r+0x1c>
 8028fe8:	682b      	ldr	r3, [r5, #0]
 8028fea:	2b00      	cmp	r3, #0
 8028fec:	d000      	beq.n	8028ff0 <_isatty_r+0x1c>
 8028fee:	6023      	str	r3, [r4, #0]
 8028ff0:	bd70      	pop	{r4, r5, r6, pc}
 8028ff2:	46c0      	nop			@ (mov r8, r8)
 8028ff4:	200038bc 	.word	0x200038bc

08028ff8 <_sbrk_r>:
 8028ff8:	2300      	movs	r3, #0
 8028ffa:	b570      	push	{r4, r5, r6, lr}
 8028ffc:	4d06      	ldr	r5, [pc, #24]	@ (8029018 <_sbrk_r+0x20>)
 8028ffe:	0004      	movs	r4, r0
 8029000:	0008      	movs	r0, r1
 8029002:	602b      	str	r3, [r5, #0]
 8029004:	f7ea fbf4 	bl	80137f0 <_sbrk>
 8029008:	1c43      	adds	r3, r0, #1
 802900a:	d103      	bne.n	8029014 <_sbrk_r+0x1c>
 802900c:	682b      	ldr	r3, [r5, #0]
 802900e:	2b00      	cmp	r3, #0
 8029010:	d000      	beq.n	8029014 <_sbrk_r+0x1c>
 8029012:	6023      	str	r3, [r4, #0]
 8029014:	bd70      	pop	{r4, r5, r6, pc}
 8029016:	46c0      	nop			@ (mov r8, r8)
 8029018:	200038bc 	.word	0x200038bc

0802901c <__assert_func>:
 802901c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802901e:	0014      	movs	r4, r2
 8029020:	001a      	movs	r2, r3
 8029022:	4b09      	ldr	r3, [pc, #36]	@ (8029048 <__assert_func+0x2c>)
 8029024:	0005      	movs	r5, r0
 8029026:	681b      	ldr	r3, [r3, #0]
 8029028:	000e      	movs	r6, r1
 802902a:	68d8      	ldr	r0, [r3, #12]
 802902c:	4b07      	ldr	r3, [pc, #28]	@ (802904c <__assert_func+0x30>)
 802902e:	2c00      	cmp	r4, #0
 8029030:	d101      	bne.n	8029036 <__assert_func+0x1a>
 8029032:	4b07      	ldr	r3, [pc, #28]	@ (8029050 <__assert_func+0x34>)
 8029034:	001c      	movs	r4, r3
 8029036:	4907      	ldr	r1, [pc, #28]	@ (8029054 <__assert_func+0x38>)
 8029038:	9301      	str	r3, [sp, #4]
 802903a:	9402      	str	r4, [sp, #8]
 802903c:	002b      	movs	r3, r5
 802903e:	9600      	str	r6, [sp, #0]
 8029040:	f000 f868 	bl	8029114 <fiprintf>
 8029044:	f000 f876 	bl	8029134 <abort>
 8029048:	200003ec 	.word	0x200003ec
 802904c:	0802f0d5 	.word	0x0802f0d5
 8029050:	0802f110 	.word	0x0802f110
 8029054:	0802f0e2 	.word	0x0802f0e2

08029058 <_calloc_r>:
 8029058:	b570      	push	{r4, r5, r6, lr}
 802905a:	0c0b      	lsrs	r3, r1, #16
 802905c:	0c15      	lsrs	r5, r2, #16
 802905e:	2b00      	cmp	r3, #0
 8029060:	d11e      	bne.n	80290a0 <_calloc_r+0x48>
 8029062:	2d00      	cmp	r5, #0
 8029064:	d10c      	bne.n	8029080 <_calloc_r+0x28>
 8029066:	b289      	uxth	r1, r1
 8029068:	b294      	uxth	r4, r2
 802906a:	434c      	muls	r4, r1
 802906c:	0021      	movs	r1, r4
 802906e:	f7fe fe5b 	bl	8027d28 <_malloc_r>
 8029072:	1e05      	subs	r5, r0, #0
 8029074:	d01b      	beq.n	80290ae <_calloc_r+0x56>
 8029076:	0022      	movs	r2, r4
 8029078:	2100      	movs	r1, #0
 802907a:	f7fd fb23 	bl	80266c4 <memset>
 802907e:	e016      	b.n	80290ae <_calloc_r+0x56>
 8029080:	1c2b      	adds	r3, r5, #0
 8029082:	1c0c      	adds	r4, r1, #0
 8029084:	b289      	uxth	r1, r1
 8029086:	b292      	uxth	r2, r2
 8029088:	434a      	muls	r2, r1
 802908a:	b29b      	uxth	r3, r3
 802908c:	b2a1      	uxth	r1, r4
 802908e:	4359      	muls	r1, r3
 8029090:	0c14      	lsrs	r4, r2, #16
 8029092:	190c      	adds	r4, r1, r4
 8029094:	0c23      	lsrs	r3, r4, #16
 8029096:	d107      	bne.n	80290a8 <_calloc_r+0x50>
 8029098:	0424      	lsls	r4, r4, #16
 802909a:	b292      	uxth	r2, r2
 802909c:	4314      	orrs	r4, r2
 802909e:	e7e5      	b.n	802906c <_calloc_r+0x14>
 80290a0:	2d00      	cmp	r5, #0
 80290a2:	d101      	bne.n	80290a8 <_calloc_r+0x50>
 80290a4:	1c14      	adds	r4, r2, #0
 80290a6:	e7ed      	b.n	8029084 <_calloc_r+0x2c>
 80290a8:	230c      	movs	r3, #12
 80290aa:	2500      	movs	r5, #0
 80290ac:	6003      	str	r3, [r0, #0]
 80290ae:	0028      	movs	r0, r5
 80290b0:	bd70      	pop	{r4, r5, r6, pc}

080290b2 <_realloc_r>:
 80290b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80290b4:	0006      	movs	r6, r0
 80290b6:	000c      	movs	r4, r1
 80290b8:	0015      	movs	r5, r2
 80290ba:	2900      	cmp	r1, #0
 80290bc:	d105      	bne.n	80290ca <_realloc_r+0x18>
 80290be:	0011      	movs	r1, r2
 80290c0:	f7fe fe32 	bl	8027d28 <_malloc_r>
 80290c4:	0004      	movs	r4, r0
 80290c6:	0020      	movs	r0, r4
 80290c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80290ca:	2a00      	cmp	r2, #0
 80290cc:	d103      	bne.n	80290d6 <_realloc_r+0x24>
 80290ce:	f7fe fa5b 	bl	8027588 <_free_r>
 80290d2:	002c      	movs	r4, r5
 80290d4:	e7f7      	b.n	80290c6 <_realloc_r+0x14>
 80290d6:	f000 f834 	bl	8029142 <_malloc_usable_size_r>
 80290da:	0007      	movs	r7, r0
 80290dc:	4285      	cmp	r5, r0
 80290de:	d802      	bhi.n	80290e6 <_realloc_r+0x34>
 80290e0:	0843      	lsrs	r3, r0, #1
 80290e2:	42ab      	cmp	r3, r5
 80290e4:	d3ef      	bcc.n	80290c6 <_realloc_r+0x14>
 80290e6:	0029      	movs	r1, r5
 80290e8:	0030      	movs	r0, r6
 80290ea:	f7fe fe1d 	bl	8027d28 <_malloc_r>
 80290ee:	9001      	str	r0, [sp, #4]
 80290f0:	2800      	cmp	r0, #0
 80290f2:	d101      	bne.n	80290f8 <_realloc_r+0x46>
 80290f4:	9c01      	ldr	r4, [sp, #4]
 80290f6:	e7e6      	b.n	80290c6 <_realloc_r+0x14>
 80290f8:	002a      	movs	r2, r5
 80290fa:	42bd      	cmp	r5, r7
 80290fc:	d900      	bls.n	8029100 <_realloc_r+0x4e>
 80290fe:	003a      	movs	r2, r7
 8029100:	0021      	movs	r1, r4
 8029102:	9801      	ldr	r0, [sp, #4]
 8029104:	f7fd fbba 	bl	802687c <memcpy>
 8029108:	0021      	movs	r1, r4
 802910a:	0030      	movs	r0, r6
 802910c:	f7fe fa3c 	bl	8027588 <_free_r>
 8029110:	e7f0      	b.n	80290f4 <_realloc_r+0x42>
	...

08029114 <fiprintf>:
 8029114:	b40e      	push	{r1, r2, r3}
 8029116:	b517      	push	{r0, r1, r2, r4, lr}
 8029118:	4c05      	ldr	r4, [pc, #20]	@ (8029130 <fiprintf+0x1c>)
 802911a:	ab05      	add	r3, sp, #20
 802911c:	cb04      	ldmia	r3!, {r2}
 802911e:	0001      	movs	r1, r0
 8029120:	6820      	ldr	r0, [r4, #0]
 8029122:	9301      	str	r3, [sp, #4]
 8029124:	f7ff fcf8 	bl	8028b18 <_vfiprintf_r>
 8029128:	bc1e      	pop	{r1, r2, r3, r4}
 802912a:	bc08      	pop	{r3}
 802912c:	b003      	add	sp, #12
 802912e:	4718      	bx	r3
 8029130:	200003ec 	.word	0x200003ec

08029134 <abort>:
 8029134:	2006      	movs	r0, #6
 8029136:	b510      	push	{r4, lr}
 8029138:	f000 f834 	bl	80291a4 <raise>
 802913c:	2001      	movs	r0, #1
 802913e:	f7ea fb01 	bl	8013744 <_exit>

08029142 <_malloc_usable_size_r>:
 8029142:	1f0b      	subs	r3, r1, #4
 8029144:	681b      	ldr	r3, [r3, #0]
 8029146:	1f18      	subs	r0, r3, #4
 8029148:	2b00      	cmp	r3, #0
 802914a:	da01      	bge.n	8029150 <_malloc_usable_size_r+0xe>
 802914c:	580b      	ldr	r3, [r1, r0]
 802914e:	18c0      	adds	r0, r0, r3
 8029150:	4770      	bx	lr

08029152 <_raise_r>:
 8029152:	b570      	push	{r4, r5, r6, lr}
 8029154:	0004      	movs	r4, r0
 8029156:	000d      	movs	r5, r1
 8029158:	291f      	cmp	r1, #31
 802915a:	d904      	bls.n	8029166 <_raise_r+0x14>
 802915c:	2316      	movs	r3, #22
 802915e:	6003      	str	r3, [r0, #0]
 8029160:	2001      	movs	r0, #1
 8029162:	4240      	negs	r0, r0
 8029164:	bd70      	pop	{r4, r5, r6, pc}
 8029166:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8029168:	2b00      	cmp	r3, #0
 802916a:	d004      	beq.n	8029176 <_raise_r+0x24>
 802916c:	008a      	lsls	r2, r1, #2
 802916e:	189b      	adds	r3, r3, r2
 8029170:	681a      	ldr	r2, [r3, #0]
 8029172:	2a00      	cmp	r2, #0
 8029174:	d108      	bne.n	8029188 <_raise_r+0x36>
 8029176:	0020      	movs	r0, r4
 8029178:	f000 f830 	bl	80291dc <_getpid_r>
 802917c:	002a      	movs	r2, r5
 802917e:	0001      	movs	r1, r0
 8029180:	0020      	movs	r0, r4
 8029182:	f000 f819 	bl	80291b8 <_kill_r>
 8029186:	e7ed      	b.n	8029164 <_raise_r+0x12>
 8029188:	2a01      	cmp	r2, #1
 802918a:	d009      	beq.n	80291a0 <_raise_r+0x4e>
 802918c:	1c51      	adds	r1, r2, #1
 802918e:	d103      	bne.n	8029198 <_raise_r+0x46>
 8029190:	2316      	movs	r3, #22
 8029192:	6003      	str	r3, [r0, #0]
 8029194:	2001      	movs	r0, #1
 8029196:	e7e5      	b.n	8029164 <_raise_r+0x12>
 8029198:	2100      	movs	r1, #0
 802919a:	0028      	movs	r0, r5
 802919c:	6019      	str	r1, [r3, #0]
 802919e:	4790      	blx	r2
 80291a0:	2000      	movs	r0, #0
 80291a2:	e7df      	b.n	8029164 <_raise_r+0x12>

080291a4 <raise>:
 80291a4:	b510      	push	{r4, lr}
 80291a6:	4b03      	ldr	r3, [pc, #12]	@ (80291b4 <raise+0x10>)
 80291a8:	0001      	movs	r1, r0
 80291aa:	6818      	ldr	r0, [r3, #0]
 80291ac:	f7ff ffd1 	bl	8029152 <_raise_r>
 80291b0:	bd10      	pop	{r4, pc}
 80291b2:	46c0      	nop			@ (mov r8, r8)
 80291b4:	200003ec 	.word	0x200003ec

080291b8 <_kill_r>:
 80291b8:	2300      	movs	r3, #0
 80291ba:	b570      	push	{r4, r5, r6, lr}
 80291bc:	4d06      	ldr	r5, [pc, #24]	@ (80291d8 <_kill_r+0x20>)
 80291be:	0004      	movs	r4, r0
 80291c0:	0008      	movs	r0, r1
 80291c2:	0011      	movs	r1, r2
 80291c4:	602b      	str	r3, [r5, #0]
 80291c6:	f7ea faad 	bl	8013724 <_kill>
 80291ca:	1c43      	adds	r3, r0, #1
 80291cc:	d103      	bne.n	80291d6 <_kill_r+0x1e>
 80291ce:	682b      	ldr	r3, [r5, #0]
 80291d0:	2b00      	cmp	r3, #0
 80291d2:	d000      	beq.n	80291d6 <_kill_r+0x1e>
 80291d4:	6023      	str	r3, [r4, #0]
 80291d6:	bd70      	pop	{r4, r5, r6, pc}
 80291d8:	200038bc 	.word	0x200038bc

080291dc <_getpid_r>:
 80291dc:	b510      	push	{r4, lr}
 80291de:	f7ea fa9b 	bl	8013718 <_getpid>
 80291e2:	bd10      	pop	{r4, pc}

080291e4 <log>:
 80291e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80291e6:	0004      	movs	r4, r0
 80291e8:	000d      	movs	r5, r1
 80291ea:	f000 f98d 	bl	8029508 <__ieee754_log>
 80291ee:	0022      	movs	r2, r4
 80291f0:	0006      	movs	r6, r0
 80291f2:	000f      	movs	r7, r1
 80291f4:	002b      	movs	r3, r5
 80291f6:	0020      	movs	r0, r4
 80291f8:	0029      	movs	r1, r5
 80291fa:	f7da fa9b 	bl	8003734 <__aeabi_dcmpun>
 80291fe:	2800      	cmp	r0, #0
 8029200:	d115      	bne.n	802922e <log+0x4a>
 8029202:	2200      	movs	r2, #0
 8029204:	2300      	movs	r3, #0
 8029206:	0020      	movs	r0, r4
 8029208:	0029      	movs	r1, r5
 802920a:	f7d7 f96b 	bl	80004e4 <__aeabi_dcmpgt>
 802920e:	2800      	cmp	r0, #0
 8029210:	d10d      	bne.n	802922e <log+0x4a>
 8029212:	2200      	movs	r2, #0
 8029214:	2300      	movs	r3, #0
 8029216:	0020      	movs	r0, r4
 8029218:	0029      	movs	r1, r5
 802921a:	f7d7 f949 	bl	80004b0 <__aeabi_dcmpeq>
 802921e:	2800      	cmp	r0, #0
 8029220:	d008      	beq.n	8029234 <log+0x50>
 8029222:	f7fd faf3 	bl	802680c <__errno>
 8029226:	2322      	movs	r3, #34	@ 0x22
 8029228:	2600      	movs	r6, #0
 802922a:	4f07      	ldr	r7, [pc, #28]	@ (8029248 <log+0x64>)
 802922c:	6003      	str	r3, [r0, #0]
 802922e:	0030      	movs	r0, r6
 8029230:	0039      	movs	r1, r7
 8029232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029234:	f7fd faea 	bl	802680c <__errno>
 8029238:	2321      	movs	r3, #33	@ 0x21
 802923a:	6003      	str	r3, [r0, #0]
 802923c:	4803      	ldr	r0, [pc, #12]	@ (802924c <log+0x68>)
 802923e:	f7fd fb27 	bl	8026890 <nan>
 8029242:	0006      	movs	r6, r0
 8029244:	000f      	movs	r7, r1
 8029246:	e7f2      	b.n	802922e <log+0x4a>
 8029248:	fff00000 	.word	0xfff00000
 802924c:	0802f110 	.word	0x0802f110

08029250 <pow>:
 8029250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029252:	0014      	movs	r4, r2
 8029254:	001d      	movs	r5, r3
 8029256:	9000      	str	r0, [sp, #0]
 8029258:	9101      	str	r1, [sp, #4]
 802925a:	f000 fb07 	bl	802986c <__ieee754_pow>
 802925e:	0022      	movs	r2, r4
 8029260:	0006      	movs	r6, r0
 8029262:	000f      	movs	r7, r1
 8029264:	002b      	movs	r3, r5
 8029266:	0020      	movs	r0, r4
 8029268:	0029      	movs	r1, r5
 802926a:	f7da fa63 	bl	8003734 <__aeabi_dcmpun>
 802926e:	2800      	cmp	r0, #0
 8029270:	d13f      	bne.n	80292f2 <pow+0xa2>
 8029272:	9800      	ldr	r0, [sp, #0]
 8029274:	9901      	ldr	r1, [sp, #4]
 8029276:	2200      	movs	r2, #0
 8029278:	2300      	movs	r3, #0
 802927a:	f7d7 f919 	bl	80004b0 <__aeabi_dcmpeq>
 802927e:	2800      	cmp	r0, #0
 8029280:	d019      	beq.n	80292b6 <pow+0x66>
 8029282:	2200      	movs	r2, #0
 8029284:	2300      	movs	r3, #0
 8029286:	0020      	movs	r0, r4
 8029288:	0029      	movs	r1, r5
 802928a:	f7d7 f911 	bl	80004b0 <__aeabi_dcmpeq>
 802928e:	2800      	cmp	r0, #0
 8029290:	d146      	bne.n	8029320 <pow+0xd0>
 8029292:	0020      	movs	r0, r4
 8029294:	0029      	movs	r1, r5
 8029296:	f000 f88d 	bl	80293b4 <finite>
 802929a:	2800      	cmp	r0, #0
 802929c:	d029      	beq.n	80292f2 <pow+0xa2>
 802929e:	2200      	movs	r2, #0
 80292a0:	2300      	movs	r3, #0
 80292a2:	0020      	movs	r0, r4
 80292a4:	0029      	movs	r1, r5
 80292a6:	f7d7 f909 	bl	80004bc <__aeabi_dcmplt>
 80292aa:	2800      	cmp	r0, #0
 80292ac:	d021      	beq.n	80292f2 <pow+0xa2>
 80292ae:	f7fd faad 	bl	802680c <__errno>
 80292b2:	2322      	movs	r3, #34	@ 0x22
 80292b4:	e01c      	b.n	80292f0 <pow+0xa0>
 80292b6:	0030      	movs	r0, r6
 80292b8:	0039      	movs	r1, r7
 80292ba:	f000 f87b 	bl	80293b4 <finite>
 80292be:	2800      	cmp	r0, #0
 80292c0:	d11b      	bne.n	80292fa <pow+0xaa>
 80292c2:	9800      	ldr	r0, [sp, #0]
 80292c4:	9901      	ldr	r1, [sp, #4]
 80292c6:	f000 f875 	bl	80293b4 <finite>
 80292ca:	2800      	cmp	r0, #0
 80292cc:	d015      	beq.n	80292fa <pow+0xaa>
 80292ce:	0020      	movs	r0, r4
 80292d0:	0029      	movs	r1, r5
 80292d2:	f000 f86f 	bl	80293b4 <finite>
 80292d6:	2800      	cmp	r0, #0
 80292d8:	d00f      	beq.n	80292fa <pow+0xaa>
 80292da:	0032      	movs	r2, r6
 80292dc:	003b      	movs	r3, r7
 80292de:	0030      	movs	r0, r6
 80292e0:	0039      	movs	r1, r7
 80292e2:	f7da fa27 	bl	8003734 <__aeabi_dcmpun>
 80292e6:	2800      	cmp	r0, #0
 80292e8:	d0e1      	beq.n	80292ae <pow+0x5e>
 80292ea:	f7fd fa8f 	bl	802680c <__errno>
 80292ee:	2321      	movs	r3, #33	@ 0x21
 80292f0:	6003      	str	r3, [r0, #0]
 80292f2:	0030      	movs	r0, r6
 80292f4:	0039      	movs	r1, r7
 80292f6:	b003      	add	sp, #12
 80292f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80292fa:	2200      	movs	r2, #0
 80292fc:	2300      	movs	r3, #0
 80292fe:	0030      	movs	r0, r6
 8029300:	0039      	movs	r1, r7
 8029302:	f7d7 f8d5 	bl	80004b0 <__aeabi_dcmpeq>
 8029306:	2800      	cmp	r0, #0
 8029308:	d0f3      	beq.n	80292f2 <pow+0xa2>
 802930a:	9800      	ldr	r0, [sp, #0]
 802930c:	9901      	ldr	r1, [sp, #4]
 802930e:	f000 f851 	bl	80293b4 <finite>
 8029312:	2800      	cmp	r0, #0
 8029314:	d0ed      	beq.n	80292f2 <pow+0xa2>
 8029316:	0020      	movs	r0, r4
 8029318:	0029      	movs	r1, r5
 802931a:	f000 f84b 	bl	80293b4 <finite>
 802931e:	e7c4      	b.n	80292aa <pow+0x5a>
 8029320:	2600      	movs	r6, #0
 8029322:	4f01      	ldr	r7, [pc, #4]	@ (8029328 <pow+0xd8>)
 8029324:	e7e5      	b.n	80292f2 <pow+0xa2>
 8029326:	46c0      	nop			@ (mov r8, r8)
 8029328:	3ff00000 	.word	0x3ff00000

0802932c <expf>:
 802932c:	b570      	push	{r4, r5, r6, lr}
 802932e:	1c04      	adds	r4, r0, #0
 8029330:	f000 ffb8 	bl	802a2a4 <__ieee754_expf>
 8029334:	1c05      	adds	r5, r0, #0
 8029336:	1c20      	adds	r0, r4, #0
 8029338:	f000 f844 	bl	80293c4 <finitef>
 802933c:	2800      	cmp	r0, #0
 802933e:	d00b      	beq.n	8029358 <expf+0x2c>
 8029340:	490c      	ldr	r1, [pc, #48]	@ (8029374 <expf+0x48>)
 8029342:	1c20      	adds	r0, r4, #0
 8029344:	f7d7 f908 	bl	8000558 <__aeabi_fcmpgt>
 8029348:	2800      	cmp	r0, #0
 802934a:	d007      	beq.n	802935c <expf+0x30>
 802934c:	f7fd fa5e 	bl	802680c <__errno>
 8029350:	25ff      	movs	r5, #255	@ 0xff
 8029352:	2322      	movs	r3, #34	@ 0x22
 8029354:	05ed      	lsls	r5, r5, #23
 8029356:	6003      	str	r3, [r0, #0]
 8029358:	1c28      	adds	r0, r5, #0
 802935a:	bd70      	pop	{r4, r5, r6, pc}
 802935c:	4906      	ldr	r1, [pc, #24]	@ (8029378 <expf+0x4c>)
 802935e:	1c20      	adds	r0, r4, #0
 8029360:	f7d7 f8e6 	bl	8000530 <__aeabi_fcmplt>
 8029364:	2800      	cmp	r0, #0
 8029366:	d0f7      	beq.n	8029358 <expf+0x2c>
 8029368:	f7fd fa50 	bl	802680c <__errno>
 802936c:	2322      	movs	r3, #34	@ 0x22
 802936e:	2500      	movs	r5, #0
 8029370:	6003      	str	r3, [r0, #0]
 8029372:	e7f1      	b.n	8029358 <expf+0x2c>
 8029374:	42b17217 	.word	0x42b17217
 8029378:	c2cff1b5 	.word	0xc2cff1b5

0802937c <sqrtf>:
 802937c:	b570      	push	{r4, r5, r6, lr}
 802937e:	1c05      	adds	r5, r0, #0
 8029380:	f000 f82a 	bl	80293d8 <__ieee754_sqrtf>
 8029384:	1c29      	adds	r1, r5, #0
 8029386:	1c04      	adds	r4, r0, #0
 8029388:	1c28      	adds	r0, r5, #0
 802938a:	f7d8 fa17 	bl	80017bc <__aeabi_fcmpun>
 802938e:	2800      	cmp	r0, #0
 8029390:	d10e      	bne.n	80293b0 <sqrtf+0x34>
 8029392:	2100      	movs	r1, #0
 8029394:	1c28      	adds	r0, r5, #0
 8029396:	f7d7 f8cb 	bl	8000530 <__aeabi_fcmplt>
 802939a:	2800      	cmp	r0, #0
 802939c:	d008      	beq.n	80293b0 <sqrtf+0x34>
 802939e:	f7fd fa35 	bl	802680c <__errno>
 80293a2:	2321      	movs	r3, #33	@ 0x21
 80293a4:	2100      	movs	r1, #0
 80293a6:	6003      	str	r3, [r0, #0]
 80293a8:	1c08      	adds	r0, r1, #0
 80293aa:	f7d7 fc7b 	bl	8000ca4 <__aeabi_fdiv>
 80293ae:	1c04      	adds	r4, r0, #0
 80293b0:	1c20      	adds	r0, r4, #0
 80293b2:	bd70      	pop	{r4, r5, r6, pc}

080293b4 <finite>:
 80293b4:	4b02      	ldr	r3, [pc, #8]	@ (80293c0 <finite+0xc>)
 80293b6:	0048      	lsls	r0, r1, #1
 80293b8:	0840      	lsrs	r0, r0, #1
 80293ba:	18c0      	adds	r0, r0, r3
 80293bc:	0fc0      	lsrs	r0, r0, #31
 80293be:	4770      	bx	lr
 80293c0:	80100000 	.word	0x80100000

080293c4 <finitef>:
 80293c4:	22ff      	movs	r2, #255	@ 0xff
 80293c6:	0043      	lsls	r3, r0, #1
 80293c8:	085b      	lsrs	r3, r3, #1
 80293ca:	2001      	movs	r0, #1
 80293cc:	05d2      	lsls	r2, r2, #23
 80293ce:	4293      	cmp	r3, r2
 80293d0:	db00      	blt.n	80293d4 <finitef+0x10>
 80293d2:	2000      	movs	r0, #0
 80293d4:	4770      	bx	lr
	...

080293d8 <__ieee754_sqrtf>:
 80293d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80293da:	21ff      	movs	r1, #255	@ 0xff
 80293dc:	0042      	lsls	r2, r0, #1
 80293de:	0003      	movs	r3, r0
 80293e0:	1c04      	adds	r4, r0, #0
 80293e2:	0852      	lsrs	r2, r2, #1
 80293e4:	05c9      	lsls	r1, r1, #23
 80293e6:	428a      	cmp	r2, r1
 80293e8:	d309      	bcc.n	80293fe <__ieee754_sqrtf+0x26>
 80293ea:	1c01      	adds	r1, r0, #0
 80293ec:	f7d7 fe28 	bl	8001040 <__aeabi_fmul>
 80293f0:	1c01      	adds	r1, r0, #0
 80293f2:	1c20      	adds	r0, r4, #0
 80293f4:	f7d7 fa64 	bl	80008c0 <__aeabi_fadd>
 80293f8:	1c04      	adds	r4, r0, #0
 80293fa:	1c20      	adds	r0, r4, #0
 80293fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80293fe:	2a00      	cmp	r2, #0
 8029400:	d0fb      	beq.n	80293fa <__ieee754_sqrtf+0x22>
 8029402:	2800      	cmp	r0, #0
 8029404:	da06      	bge.n	8029414 <__ieee754_sqrtf+0x3c>
 8029406:	1c01      	adds	r1, r0, #0
 8029408:	f7d7 ff74 	bl	80012f4 <__aeabi_fsub>
 802940c:	1c01      	adds	r1, r0, #0
 802940e:	f7d7 fc49 	bl	8000ca4 <__aeabi_fdiv>
 8029412:	e7f1      	b.n	80293f8 <__ieee754_sqrtf+0x20>
 8029414:	0002      	movs	r2, r0
 8029416:	400a      	ands	r2, r1
 8029418:	4208      	tst	r0, r1
 802941a:	d040      	beq.n	802949e <__ieee754_sqrtf+0xc6>
 802941c:	15c1      	asrs	r1, r0, #23
 802941e:	2280      	movs	r2, #128	@ 0x80
 8029420:	000f      	movs	r7, r1
 8029422:	025b      	lsls	r3, r3, #9
 8029424:	0a5b      	lsrs	r3, r3, #9
 8029426:	0412      	lsls	r2, r2, #16
 8029428:	3f7f      	subs	r7, #127	@ 0x7f
 802942a:	4313      	orrs	r3, r2
 802942c:	07c9      	lsls	r1, r1, #31
 802942e:	d400      	bmi.n	8029432 <__ieee754_sqrtf+0x5a>
 8029430:	005b      	lsls	r3, r3, #1
 8029432:	2400      	movs	r4, #0
 8029434:	2180      	movs	r1, #128	@ 0x80
 8029436:	2019      	movs	r0, #25
 8029438:	0026      	movs	r6, r4
 802943a:	107f      	asrs	r7, r7, #1
 802943c:	005b      	lsls	r3, r3, #1
 802943e:	0449      	lsls	r1, r1, #17
 8029440:	1875      	adds	r5, r6, r1
 8029442:	001a      	movs	r2, r3
 8029444:	429d      	cmp	r5, r3
 8029446:	dc02      	bgt.n	802944e <__ieee754_sqrtf+0x76>
 8029448:	186e      	adds	r6, r5, r1
 802944a:	1b5a      	subs	r2, r3, r5
 802944c:	1864      	adds	r4, r4, r1
 802944e:	3801      	subs	r0, #1
 8029450:	0053      	lsls	r3, r2, #1
 8029452:	0849      	lsrs	r1, r1, #1
 8029454:	2800      	cmp	r0, #0
 8029456:	d1f3      	bne.n	8029440 <__ieee754_sqrtf+0x68>
 8029458:	2a00      	cmp	r2, #0
 802945a:	d019      	beq.n	8029490 <__ieee754_sqrtf+0xb8>
 802945c:	4d16      	ldr	r5, [pc, #88]	@ (80294b8 <__ieee754_sqrtf+0xe0>)
 802945e:	4e17      	ldr	r6, [pc, #92]	@ (80294bc <__ieee754_sqrtf+0xe4>)
 8029460:	6828      	ldr	r0, [r5, #0]
 8029462:	6831      	ldr	r1, [r6, #0]
 8029464:	682b      	ldr	r3, [r5, #0]
 8029466:	9301      	str	r3, [sp, #4]
 8029468:	f7d7 ff44 	bl	80012f4 <__aeabi_fsub>
 802946c:	1c01      	adds	r1, r0, #0
 802946e:	9801      	ldr	r0, [sp, #4]
 8029470:	f7d7 f868 	bl	8000544 <__aeabi_fcmple>
 8029474:	2800      	cmp	r0, #0
 8029476:	d00b      	beq.n	8029490 <__ieee754_sqrtf+0xb8>
 8029478:	6828      	ldr	r0, [r5, #0]
 802947a:	6831      	ldr	r1, [r6, #0]
 802947c:	f7d7 fa20 	bl	80008c0 <__aeabi_fadd>
 8029480:	682d      	ldr	r5, [r5, #0]
 8029482:	1c01      	adds	r1, r0, #0
 8029484:	1c28      	adds	r0, r5, #0
 8029486:	f7d7 f853 	bl	8000530 <__aeabi_fcmplt>
 802948a:	2800      	cmp	r0, #0
 802948c:	d010      	beq.n	80294b0 <__ieee754_sqrtf+0xd8>
 802948e:	3402      	adds	r4, #2
 8029490:	23fc      	movs	r3, #252	@ 0xfc
 8029492:	1064      	asrs	r4, r4, #1
 8029494:	059b      	lsls	r3, r3, #22
 8029496:	18e3      	adds	r3, r4, r3
 8029498:	05fc      	lsls	r4, r7, #23
 802949a:	18e4      	adds	r4, r4, r3
 802949c:	e7ad      	b.n	80293fa <__ieee754_sqrtf+0x22>
 802949e:	2080      	movs	r0, #128	@ 0x80
 80294a0:	0400      	lsls	r0, r0, #16
 80294a2:	005b      	lsls	r3, r3, #1
 80294a4:	0011      	movs	r1, r2
 80294a6:	3201      	adds	r2, #1
 80294a8:	4203      	tst	r3, r0
 80294aa:	d0fa      	beq.n	80294a2 <__ieee754_sqrtf+0xca>
 80294ac:	4249      	negs	r1, r1
 80294ae:	e7b6      	b.n	802941e <__ieee754_sqrtf+0x46>
 80294b0:	2301      	movs	r3, #1
 80294b2:	3401      	adds	r4, #1
 80294b4:	439c      	bics	r4, r3
 80294b6:	e7eb      	b.n	8029490 <__ieee754_sqrtf+0xb8>
 80294b8:	0802f36c 	.word	0x0802f36c
 80294bc:	0802f368 	.word	0x0802f368

080294c0 <roundf>:
 80294c0:	0dc3      	lsrs	r3, r0, #23
 80294c2:	b2db      	uxtb	r3, r3
 80294c4:	3b7f      	subs	r3, #127	@ 0x7f
 80294c6:	0002      	movs	r2, r0
 80294c8:	b510      	push	{r4, lr}
 80294ca:	2b16      	cmp	r3, #22
 80294cc:	dc13      	bgt.n	80294f6 <roundf+0x36>
 80294ce:	2b00      	cmp	r3, #0
 80294d0:	da07      	bge.n	80294e2 <roundf+0x22>
 80294d2:	0fc2      	lsrs	r2, r0, #31
 80294d4:	07d0      	lsls	r0, r2, #31
 80294d6:	3301      	adds	r3, #1
 80294d8:	d102      	bne.n	80294e0 <roundf+0x20>
 80294da:	23fe      	movs	r3, #254	@ 0xfe
 80294dc:	059b      	lsls	r3, r3, #22
 80294de:	4318      	orrs	r0, r3
 80294e0:	bd10      	pop	{r4, pc}
 80294e2:	4908      	ldr	r1, [pc, #32]	@ (8029504 <roundf+0x44>)
 80294e4:	4119      	asrs	r1, r3
 80294e6:	4208      	tst	r0, r1
 80294e8:	d0fa      	beq.n	80294e0 <roundf+0x20>
 80294ea:	2080      	movs	r0, #128	@ 0x80
 80294ec:	03c0      	lsls	r0, r0, #15
 80294ee:	4118      	asrs	r0, r3
 80294f0:	1880      	adds	r0, r0, r2
 80294f2:	4388      	bics	r0, r1
 80294f4:	e7f4      	b.n	80294e0 <roundf+0x20>
 80294f6:	2b80      	cmp	r3, #128	@ 0x80
 80294f8:	d1f2      	bne.n	80294e0 <roundf+0x20>
 80294fa:	1c01      	adds	r1, r0, #0
 80294fc:	f7d7 f9e0 	bl	80008c0 <__aeabi_fadd>
 8029500:	e7ee      	b.n	80294e0 <roundf+0x20>
 8029502:	46c0      	nop			@ (mov r8, r8)
 8029504:	007fffff 	.word	0x007fffff

08029508 <__ieee754_log>:
 8029508:	2380      	movs	r3, #128	@ 0x80
 802950a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802950c:	035b      	lsls	r3, r3, #13
 802950e:	000e      	movs	r6, r1
 8029510:	b08d      	sub	sp, #52	@ 0x34
 8029512:	4299      	cmp	r1, r3
 8029514:	da23      	bge.n	802955e <__ieee754_log+0x56>
 8029516:	004b      	lsls	r3, r1, #1
 8029518:	085b      	lsrs	r3, r3, #1
 802951a:	4303      	orrs	r3, r0
 802951c:	d107      	bne.n	802952e <__ieee754_log+0x26>
 802951e:	2200      	movs	r2, #0
 8029520:	2300      	movs	r3, #0
 8029522:	2000      	movs	r0, #0
 8029524:	49b4      	ldr	r1, [pc, #720]	@ (80297f8 <__ieee754_log+0x2f0>)
 8029526:	f7d8 fddb 	bl	80020e0 <__aeabi_ddiv>
 802952a:	b00d      	add	sp, #52	@ 0x34
 802952c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802952e:	2900      	cmp	r1, #0
 8029530:	da06      	bge.n	8029540 <__ieee754_log+0x38>
 8029532:	0002      	movs	r2, r0
 8029534:	000b      	movs	r3, r1
 8029536:	f7d9 fcf3 	bl	8002f20 <__aeabi_dsub>
 802953a:	2200      	movs	r2, #0
 802953c:	2300      	movs	r3, #0
 802953e:	e7f2      	b.n	8029526 <__ieee754_log+0x1e>
 8029540:	4bae      	ldr	r3, [pc, #696]	@ (80297fc <__ieee754_log+0x2f4>)
 8029542:	2200      	movs	r2, #0
 8029544:	f7d9 fa06 	bl	8002954 <__aeabi_dmul>
 8029548:	2336      	movs	r3, #54	@ 0x36
 802954a:	000e      	movs	r6, r1
 802954c:	425b      	negs	r3, r3
 802954e:	4aac      	ldr	r2, [pc, #688]	@ (8029800 <__ieee754_log+0x2f8>)
 8029550:	4296      	cmp	r6, r2
 8029552:	dd06      	ble.n	8029562 <__ieee754_log+0x5a>
 8029554:	0002      	movs	r2, r0
 8029556:	000b      	movs	r3, r1
 8029558:	f7d8 f9fc 	bl	8001954 <__aeabi_dadd>
 802955c:	e7e5      	b.n	802952a <__ieee754_log+0x22>
 802955e:	2300      	movs	r3, #0
 8029560:	e7f5      	b.n	802954e <__ieee754_log+0x46>
 8029562:	4ca8      	ldr	r4, [pc, #672]	@ (8029804 <__ieee754_log+0x2fc>)
 8029564:	1532      	asrs	r2, r6, #20
 8029566:	1912      	adds	r2, r2, r4
 8029568:	0336      	lsls	r6, r6, #12
 802956a:	4ca7      	ldr	r4, [pc, #668]	@ (8029808 <__ieee754_log+0x300>)
 802956c:	18d2      	adds	r2, r2, r3
 802956e:	0b33      	lsrs	r3, r6, #12
 8029570:	9302      	str	r3, [sp, #8]
 8029572:	191b      	adds	r3, r3, r4
 8029574:	2480      	movs	r4, #128	@ 0x80
 8029576:	0364      	lsls	r4, r4, #13
 8029578:	4023      	ands	r3, r4
 802957a:	4ca4      	ldr	r4, [pc, #656]	@ (802980c <__ieee754_log+0x304>)
 802957c:	9d02      	ldr	r5, [sp, #8]
 802957e:	405c      	eors	r4, r3
 8029580:	151b      	asrs	r3, r3, #20
 8029582:	189b      	adds	r3, r3, r2
 8029584:	4325      	orrs	r5, r4
 8029586:	2200      	movs	r2, #0
 8029588:	9300      	str	r3, [sp, #0]
 802958a:	0029      	movs	r1, r5
 802958c:	4b9f      	ldr	r3, [pc, #636]	@ (802980c <__ieee754_log+0x304>)
 802958e:	f7d9 fcc7 	bl	8002f20 <__aeabi_dsub>
 8029592:	9b02      	ldr	r3, [sp, #8]
 8029594:	0006      	movs	r6, r0
 8029596:	3302      	adds	r3, #2
 8029598:	031b      	lsls	r3, r3, #12
 802959a:	000f      	movs	r7, r1
 802959c:	2200      	movs	r2, #0
 802959e:	0b1b      	lsrs	r3, r3, #12
 80295a0:	2b02      	cmp	r3, #2
 80295a2:	dc64      	bgt.n	802966e <__ieee754_log+0x166>
 80295a4:	2300      	movs	r3, #0
 80295a6:	f7d6 ff83 	bl	80004b0 <__aeabi_dcmpeq>
 80295aa:	2800      	cmp	r0, #0
 80295ac:	d019      	beq.n	80295e2 <__ieee754_log+0xda>
 80295ae:	9b00      	ldr	r3, [sp, #0]
 80295b0:	2b00      	cmp	r3, #0
 80295b2:	d100      	bne.n	80295b6 <__ieee754_log+0xae>
 80295b4:	e11c      	b.n	80297f0 <__ieee754_log+0x2e8>
 80295b6:	0018      	movs	r0, r3
 80295b8:	f7da f91a 	bl	80037f0 <__aeabi_i2d>
 80295bc:	4a94      	ldr	r2, [pc, #592]	@ (8029810 <__ieee754_log+0x308>)
 80295be:	4b95      	ldr	r3, [pc, #596]	@ (8029814 <__ieee754_log+0x30c>)
 80295c0:	0004      	movs	r4, r0
 80295c2:	000d      	movs	r5, r1
 80295c4:	f7d9 f9c6 	bl	8002954 <__aeabi_dmul>
 80295c8:	4a93      	ldr	r2, [pc, #588]	@ (8029818 <__ieee754_log+0x310>)
 80295ca:	0006      	movs	r6, r0
 80295cc:	000f      	movs	r7, r1
 80295ce:	4b93      	ldr	r3, [pc, #588]	@ (802981c <__ieee754_log+0x314>)
 80295d0:	0020      	movs	r0, r4
 80295d2:	0029      	movs	r1, r5
 80295d4:	f7d9 f9be 	bl	8002954 <__aeabi_dmul>
 80295d8:	0002      	movs	r2, r0
 80295da:	000b      	movs	r3, r1
 80295dc:	0030      	movs	r0, r6
 80295de:	0039      	movs	r1, r7
 80295e0:	e7ba      	b.n	8029558 <__ieee754_log+0x50>
 80295e2:	4a8f      	ldr	r2, [pc, #572]	@ (8029820 <__ieee754_log+0x318>)
 80295e4:	4b8f      	ldr	r3, [pc, #572]	@ (8029824 <__ieee754_log+0x31c>)
 80295e6:	0030      	movs	r0, r6
 80295e8:	0039      	movs	r1, r7
 80295ea:	f7d9 f9b3 	bl	8002954 <__aeabi_dmul>
 80295ee:	0002      	movs	r2, r0
 80295f0:	000b      	movs	r3, r1
 80295f2:	2000      	movs	r0, #0
 80295f4:	498c      	ldr	r1, [pc, #560]	@ (8029828 <__ieee754_log+0x320>)
 80295f6:	f7d9 fc93 	bl	8002f20 <__aeabi_dsub>
 80295fa:	0032      	movs	r2, r6
 80295fc:	0004      	movs	r4, r0
 80295fe:	000d      	movs	r5, r1
 8029600:	003b      	movs	r3, r7
 8029602:	0030      	movs	r0, r6
 8029604:	0039      	movs	r1, r7
 8029606:	f7d9 f9a5 	bl	8002954 <__aeabi_dmul>
 802960a:	000b      	movs	r3, r1
 802960c:	0002      	movs	r2, r0
 802960e:	0029      	movs	r1, r5
 8029610:	0020      	movs	r0, r4
 8029612:	f7d9 f99f 	bl	8002954 <__aeabi_dmul>
 8029616:	9b00      	ldr	r3, [sp, #0]
 8029618:	9002      	str	r0, [sp, #8]
 802961a:	9103      	str	r1, [sp, #12]
 802961c:	2b00      	cmp	r3, #0
 802961e:	d106      	bne.n	802962e <__ieee754_log+0x126>
 8029620:	0002      	movs	r2, r0
 8029622:	000b      	movs	r3, r1
 8029624:	0030      	movs	r0, r6
 8029626:	0039      	movs	r1, r7
 8029628:	f7d9 fc7a 	bl	8002f20 <__aeabi_dsub>
 802962c:	e77d      	b.n	802952a <__ieee754_log+0x22>
 802962e:	9800      	ldr	r0, [sp, #0]
 8029630:	f7da f8de 	bl	80037f0 <__aeabi_i2d>
 8029634:	4a76      	ldr	r2, [pc, #472]	@ (8029810 <__ieee754_log+0x308>)
 8029636:	4b77      	ldr	r3, [pc, #476]	@ (8029814 <__ieee754_log+0x30c>)
 8029638:	0004      	movs	r4, r0
 802963a:	000d      	movs	r5, r1
 802963c:	f7d9 f98a 	bl	8002954 <__aeabi_dmul>
 8029640:	4a75      	ldr	r2, [pc, #468]	@ (8029818 <__ieee754_log+0x310>)
 8029642:	9000      	str	r0, [sp, #0]
 8029644:	9101      	str	r1, [sp, #4]
 8029646:	4b75      	ldr	r3, [pc, #468]	@ (802981c <__ieee754_log+0x314>)
 8029648:	0020      	movs	r0, r4
 802964a:	0029      	movs	r1, r5
 802964c:	f7d9 f982 	bl	8002954 <__aeabi_dmul>
 8029650:	0002      	movs	r2, r0
 8029652:	000b      	movs	r3, r1
 8029654:	9802      	ldr	r0, [sp, #8]
 8029656:	9903      	ldr	r1, [sp, #12]
 8029658:	f7d9 fc62 	bl	8002f20 <__aeabi_dsub>
 802965c:	0032      	movs	r2, r6
 802965e:	003b      	movs	r3, r7
 8029660:	f7d9 fc5e 	bl	8002f20 <__aeabi_dsub>
 8029664:	0002      	movs	r2, r0
 8029666:	000b      	movs	r3, r1
 8029668:	9800      	ldr	r0, [sp, #0]
 802966a:	9901      	ldr	r1, [sp, #4]
 802966c:	e7dc      	b.n	8029628 <__ieee754_log+0x120>
 802966e:	2380      	movs	r3, #128	@ 0x80
 8029670:	05db      	lsls	r3, r3, #23
 8029672:	f7d8 f96f 	bl	8001954 <__aeabi_dadd>
 8029676:	0002      	movs	r2, r0
 8029678:	000b      	movs	r3, r1
 802967a:	0030      	movs	r0, r6
 802967c:	0039      	movs	r1, r7
 802967e:	f7d8 fd2f 	bl	80020e0 <__aeabi_ddiv>
 8029682:	9004      	str	r0, [sp, #16]
 8029684:	9105      	str	r1, [sp, #20]
 8029686:	9800      	ldr	r0, [sp, #0]
 8029688:	f7da f8b2 	bl	80037f0 <__aeabi_i2d>
 802968c:	9a04      	ldr	r2, [sp, #16]
 802968e:	9b05      	ldr	r3, [sp, #20]
 8029690:	9006      	str	r0, [sp, #24]
 8029692:	9107      	str	r1, [sp, #28]
 8029694:	0010      	movs	r0, r2
 8029696:	0019      	movs	r1, r3
 8029698:	f7d9 f95c 	bl	8002954 <__aeabi_dmul>
 802969c:	4a63      	ldr	r2, [pc, #396]	@ (802982c <__ieee754_log+0x324>)
 802969e:	9b02      	ldr	r3, [sp, #8]
 80296a0:	4694      	mov	ip, r2
 80296a2:	4463      	add	r3, ip
 80296a4:	0002      	movs	r2, r0
 80296a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80296a8:	000b      	movs	r3, r1
 80296aa:	9008      	str	r0, [sp, #32]
 80296ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80296ae:	f7d9 f951 	bl	8002954 <__aeabi_dmul>
 80296b2:	0004      	movs	r4, r0
 80296b4:	000d      	movs	r5, r1
 80296b6:	4a5e      	ldr	r2, [pc, #376]	@ (8029830 <__ieee754_log+0x328>)
 80296b8:	4b5e      	ldr	r3, [pc, #376]	@ (8029834 <__ieee754_log+0x32c>)
 80296ba:	f7d9 f94b 	bl	8002954 <__aeabi_dmul>
 80296be:	4a5e      	ldr	r2, [pc, #376]	@ (8029838 <__ieee754_log+0x330>)
 80296c0:	4b5e      	ldr	r3, [pc, #376]	@ (802983c <__ieee754_log+0x334>)
 80296c2:	f7d8 f947 	bl	8001954 <__aeabi_dadd>
 80296c6:	0022      	movs	r2, r4
 80296c8:	002b      	movs	r3, r5
 80296ca:	f7d9 f943 	bl	8002954 <__aeabi_dmul>
 80296ce:	4a5c      	ldr	r2, [pc, #368]	@ (8029840 <__ieee754_log+0x338>)
 80296d0:	4b5c      	ldr	r3, [pc, #368]	@ (8029844 <__ieee754_log+0x33c>)
 80296d2:	f7d8 f93f 	bl	8001954 <__aeabi_dadd>
 80296d6:	0022      	movs	r2, r4
 80296d8:	002b      	movs	r3, r5
 80296da:	f7d9 f93b 	bl	8002954 <__aeabi_dmul>
 80296de:	4a5a      	ldr	r2, [pc, #360]	@ (8029848 <__ieee754_log+0x340>)
 80296e0:	4b5a      	ldr	r3, [pc, #360]	@ (802984c <__ieee754_log+0x344>)
 80296e2:	f7d8 f937 	bl	8001954 <__aeabi_dadd>
 80296e6:	9a08      	ldr	r2, [sp, #32]
 80296e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80296ea:	f7d9 f933 	bl	8002954 <__aeabi_dmul>
 80296ee:	4a58      	ldr	r2, [pc, #352]	@ (8029850 <__ieee754_log+0x348>)
 80296f0:	9008      	str	r0, [sp, #32]
 80296f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80296f4:	4b57      	ldr	r3, [pc, #348]	@ (8029854 <__ieee754_log+0x34c>)
 80296f6:	0020      	movs	r0, r4
 80296f8:	0029      	movs	r1, r5
 80296fa:	f7d9 f92b 	bl	8002954 <__aeabi_dmul>
 80296fe:	4a56      	ldr	r2, [pc, #344]	@ (8029858 <__ieee754_log+0x350>)
 8029700:	4b56      	ldr	r3, [pc, #344]	@ (802985c <__ieee754_log+0x354>)
 8029702:	f7d8 f927 	bl	8001954 <__aeabi_dadd>
 8029706:	0022      	movs	r2, r4
 8029708:	002b      	movs	r3, r5
 802970a:	f7d9 f923 	bl	8002954 <__aeabi_dmul>
 802970e:	4a54      	ldr	r2, [pc, #336]	@ (8029860 <__ieee754_log+0x358>)
 8029710:	4b54      	ldr	r3, [pc, #336]	@ (8029864 <__ieee754_log+0x35c>)
 8029712:	f7d8 f91f 	bl	8001954 <__aeabi_dadd>
 8029716:	0022      	movs	r2, r4
 8029718:	002b      	movs	r3, r5
 802971a:	f7d9 f91b 	bl	8002954 <__aeabi_dmul>
 802971e:	0002      	movs	r2, r0
 8029720:	000b      	movs	r3, r1
 8029722:	9808      	ldr	r0, [sp, #32]
 8029724:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029726:	f7d8 f915 	bl	8001954 <__aeabi_dadd>
 802972a:	9a02      	ldr	r2, [sp, #8]
 802972c:	4b4e      	ldr	r3, [pc, #312]	@ (8029868 <__ieee754_log+0x360>)
 802972e:	0004      	movs	r4, r0
 8029730:	1a9b      	subs	r3, r3, r2
 8029732:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029734:	000d      	movs	r5, r1
 8029736:	4313      	orrs	r3, r2
 8029738:	2b00      	cmp	r3, #0
 802973a:	dd34      	ble.n	80297a6 <__ieee754_log+0x29e>
 802973c:	2200      	movs	r2, #0
 802973e:	4b3a      	ldr	r3, [pc, #232]	@ (8029828 <__ieee754_log+0x320>)
 8029740:	0030      	movs	r0, r6
 8029742:	0039      	movs	r1, r7
 8029744:	f7d9 f906 	bl	8002954 <__aeabi_dmul>
 8029748:	0032      	movs	r2, r6
 802974a:	003b      	movs	r3, r7
 802974c:	f7d9 f902 	bl	8002954 <__aeabi_dmul>
 8029750:	0002      	movs	r2, r0
 8029752:	000b      	movs	r3, r1
 8029754:	9002      	str	r0, [sp, #8]
 8029756:	9103      	str	r1, [sp, #12]
 8029758:	0020      	movs	r0, r4
 802975a:	0029      	movs	r1, r5
 802975c:	f7d8 f8fa 	bl	8001954 <__aeabi_dadd>
 8029760:	9a04      	ldr	r2, [sp, #16]
 8029762:	9b05      	ldr	r3, [sp, #20]
 8029764:	f7d9 f8f6 	bl	8002954 <__aeabi_dmul>
 8029768:	9b00      	ldr	r3, [sp, #0]
 802976a:	0004      	movs	r4, r0
 802976c:	000d      	movs	r5, r1
 802976e:	2b00      	cmp	r3, #0
 8029770:	d106      	bne.n	8029780 <__ieee754_log+0x278>
 8029772:	0002      	movs	r2, r0
 8029774:	000b      	movs	r3, r1
 8029776:	9802      	ldr	r0, [sp, #8]
 8029778:	9903      	ldr	r1, [sp, #12]
 802977a:	f7d9 fbd1 	bl	8002f20 <__aeabi_dsub>
 802977e:	e74f      	b.n	8029620 <__ieee754_log+0x118>
 8029780:	4a23      	ldr	r2, [pc, #140]	@ (8029810 <__ieee754_log+0x308>)
 8029782:	4b24      	ldr	r3, [pc, #144]	@ (8029814 <__ieee754_log+0x30c>)
 8029784:	9806      	ldr	r0, [sp, #24]
 8029786:	9907      	ldr	r1, [sp, #28]
 8029788:	f7d9 f8e4 	bl	8002954 <__aeabi_dmul>
 802978c:	4a22      	ldr	r2, [pc, #136]	@ (8029818 <__ieee754_log+0x310>)
 802978e:	9000      	str	r0, [sp, #0]
 8029790:	9101      	str	r1, [sp, #4]
 8029792:	9806      	ldr	r0, [sp, #24]
 8029794:	9907      	ldr	r1, [sp, #28]
 8029796:	4b21      	ldr	r3, [pc, #132]	@ (802981c <__ieee754_log+0x314>)
 8029798:	f7d9 f8dc 	bl	8002954 <__aeabi_dmul>
 802979c:	0022      	movs	r2, r4
 802979e:	002b      	movs	r3, r5
 80297a0:	f7d8 f8d8 	bl	8001954 <__aeabi_dadd>
 80297a4:	e754      	b.n	8029650 <__ieee754_log+0x148>
 80297a6:	0002      	movs	r2, r0
 80297a8:	000b      	movs	r3, r1
 80297aa:	0030      	movs	r0, r6
 80297ac:	0039      	movs	r1, r7
 80297ae:	f7d9 fbb7 	bl	8002f20 <__aeabi_dsub>
 80297b2:	9a04      	ldr	r2, [sp, #16]
 80297b4:	9b05      	ldr	r3, [sp, #20]
 80297b6:	f7d9 f8cd 	bl	8002954 <__aeabi_dmul>
 80297ba:	9b00      	ldr	r3, [sp, #0]
 80297bc:	0004      	movs	r4, r0
 80297be:	000d      	movs	r5, r1
 80297c0:	2b00      	cmp	r3, #0
 80297c2:	d102      	bne.n	80297ca <__ieee754_log+0x2c2>
 80297c4:	0002      	movs	r2, r0
 80297c6:	000b      	movs	r3, r1
 80297c8:	e72c      	b.n	8029624 <__ieee754_log+0x11c>
 80297ca:	4a11      	ldr	r2, [pc, #68]	@ (8029810 <__ieee754_log+0x308>)
 80297cc:	4b11      	ldr	r3, [pc, #68]	@ (8029814 <__ieee754_log+0x30c>)
 80297ce:	9806      	ldr	r0, [sp, #24]
 80297d0:	9907      	ldr	r1, [sp, #28]
 80297d2:	f7d9 f8bf 	bl	8002954 <__aeabi_dmul>
 80297d6:	4a10      	ldr	r2, [pc, #64]	@ (8029818 <__ieee754_log+0x310>)
 80297d8:	9000      	str	r0, [sp, #0]
 80297da:	9101      	str	r1, [sp, #4]
 80297dc:	9806      	ldr	r0, [sp, #24]
 80297de:	9907      	ldr	r1, [sp, #28]
 80297e0:	4b0e      	ldr	r3, [pc, #56]	@ (802981c <__ieee754_log+0x314>)
 80297e2:	f7d9 f8b7 	bl	8002954 <__aeabi_dmul>
 80297e6:	0002      	movs	r2, r0
 80297e8:	000b      	movs	r3, r1
 80297ea:	0020      	movs	r0, r4
 80297ec:	0029      	movs	r1, r5
 80297ee:	e733      	b.n	8029658 <__ieee754_log+0x150>
 80297f0:	2000      	movs	r0, #0
 80297f2:	2100      	movs	r1, #0
 80297f4:	e699      	b.n	802952a <__ieee754_log+0x22>
 80297f6:	46c0      	nop			@ (mov r8, r8)
 80297f8:	c3500000 	.word	0xc3500000
 80297fc:	43500000 	.word	0x43500000
 8029800:	7fefffff 	.word	0x7fefffff
 8029804:	fffffc01 	.word	0xfffffc01
 8029808:	00095f64 	.word	0x00095f64
 802980c:	3ff00000 	.word	0x3ff00000
 8029810:	fee00000 	.word	0xfee00000
 8029814:	3fe62e42 	.word	0x3fe62e42
 8029818:	35793c76 	.word	0x35793c76
 802981c:	3dea39ef 	.word	0x3dea39ef
 8029820:	55555555 	.word	0x55555555
 8029824:	3fd55555 	.word	0x3fd55555
 8029828:	3fe00000 	.word	0x3fe00000
 802982c:	fff9eb86 	.word	0xfff9eb86
 8029830:	df3e5244 	.word	0xdf3e5244
 8029834:	3fc2f112 	.word	0x3fc2f112
 8029838:	96cb03de 	.word	0x96cb03de
 802983c:	3fc74664 	.word	0x3fc74664
 8029840:	94229359 	.word	0x94229359
 8029844:	3fd24924 	.word	0x3fd24924
 8029848:	55555593 	.word	0x55555593
 802984c:	3fe55555 	.word	0x3fe55555
 8029850:	d078c69f 	.word	0xd078c69f
 8029854:	3fc39a09 	.word	0x3fc39a09
 8029858:	1d8e78af 	.word	0x1d8e78af
 802985c:	3fcc71c5 	.word	0x3fcc71c5
 8029860:	9997fa04 	.word	0x9997fa04
 8029864:	3fd99999 	.word	0x3fd99999
 8029868:	0006b851 	.word	0x0006b851

0802986c <__ieee754_pow>:
 802986c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802986e:	b095      	sub	sp, #84	@ 0x54
 8029870:	9204      	str	r2, [sp, #16]
 8029872:	9305      	str	r3, [sp, #20]
 8029874:	9b04      	ldr	r3, [sp, #16]
 8029876:	9f05      	ldr	r7, [sp, #20]
 8029878:	001a      	movs	r2, r3
 802987a:	007d      	lsls	r5, r7, #1
 802987c:	086d      	lsrs	r5, r5, #1
 802987e:	9002      	str	r0, [sp, #8]
 8029880:	9103      	str	r1, [sp, #12]
 8029882:	432a      	orrs	r2, r5
 8029884:	d11a      	bne.n	80298bc <__ieee754_pow+0x50>
 8029886:	2180      	movs	r1, #128	@ 0x80
 8029888:	9a02      	ldr	r2, [sp, #8]
 802988a:	9803      	ldr	r0, [sp, #12]
 802988c:	0309      	lsls	r1, r1, #12
 802988e:	4048      	eors	r0, r1
 8029890:	0003      	movs	r3, r0
 8029892:	1892      	adds	r2, r2, r2
 8029894:	415b      	adcs	r3, r3
 8029896:	4996      	ldr	r1, [pc, #600]	@ (8029af0 <__ieee754_pow+0x284>)
 8029898:	428b      	cmp	r3, r1
 802989a:	d806      	bhi.n	80298aa <__ieee754_pow+0x3e>
 802989c:	d001      	beq.n	80298a2 <__ieee754_pow+0x36>
 802989e:	f000 fcce 	bl	802a23e <__ieee754_pow+0x9d2>
 80298a2:	2a00      	cmp	r2, #0
 80298a4:	d101      	bne.n	80298aa <__ieee754_pow+0x3e>
 80298a6:	f000 fcca 	bl	802a23e <__ieee754_pow+0x9d2>
 80298aa:	9a04      	ldr	r2, [sp, #16]
 80298ac:	9b05      	ldr	r3, [sp, #20]
 80298ae:	9802      	ldr	r0, [sp, #8]
 80298b0:	9903      	ldr	r1, [sp, #12]
 80298b2:	f7d8 f84f 	bl	8001954 <__aeabi_dadd>
 80298b6:	9000      	str	r0, [sp, #0]
 80298b8:	9101      	str	r1, [sp, #4]
 80298ba:	e08e      	b.n	80299da <__ieee754_pow+0x16e>
 80298bc:	9a03      	ldr	r2, [sp, #12]
 80298be:	9206      	str	r2, [sp, #24]
 80298c0:	9a02      	ldr	r2, [sp, #8]
 80298c2:	920a      	str	r2, [sp, #40]	@ 0x28
 80298c4:	9a03      	ldr	r2, [sp, #12]
 80298c6:	0054      	lsls	r4, r2, #1
 80298c8:	4a8a      	ldr	r2, [pc, #552]	@ (8029af4 <__ieee754_pow+0x288>)
 80298ca:	0864      	lsrs	r4, r4, #1
 80298cc:	4294      	cmp	r4, r2
 80298ce:	d80e      	bhi.n	80298ee <__ieee754_pow+0x82>
 80298d0:	d105      	bne.n	80298de <__ieee754_pow+0x72>
 80298d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80298d4:	2a00      	cmp	r2, #0
 80298d6:	d1e8      	bne.n	80298aa <__ieee754_pow+0x3e>
 80298d8:	42a5      	cmp	r5, r4
 80298da:	d8e6      	bhi.n	80298aa <__ieee754_pow+0x3e>
 80298dc:	e002      	b.n	80298e4 <__ieee754_pow+0x78>
 80298de:	4a85      	ldr	r2, [pc, #532]	@ (8029af4 <__ieee754_pow+0x288>)
 80298e0:	4295      	cmp	r5, r2
 80298e2:	d804      	bhi.n	80298ee <__ieee754_pow+0x82>
 80298e4:	4a83      	ldr	r2, [pc, #524]	@ (8029af4 <__ieee754_pow+0x288>)
 80298e6:	4295      	cmp	r5, r2
 80298e8:	d10c      	bne.n	8029904 <__ieee754_pow+0x98>
 80298ea:	2b00      	cmp	r3, #0
 80298ec:	d00a      	beq.n	8029904 <__ieee754_pow+0x98>
 80298ee:	4a82      	ldr	r2, [pc, #520]	@ (8029af8 <__ieee754_pow+0x28c>)
 80298f0:	9b03      	ldr	r3, [sp, #12]
 80298f2:	189b      	adds	r3, r3, r2
 80298f4:	9a02      	ldr	r2, [sp, #8]
 80298f6:	4313      	orrs	r3, r2
 80298f8:	d1d7      	bne.n	80298aa <__ieee754_pow+0x3e>
 80298fa:	2180      	movs	r1, #128	@ 0x80
 80298fc:	9a04      	ldr	r2, [sp, #16]
 80298fe:	9805      	ldr	r0, [sp, #20]
 8029900:	0309      	lsls	r1, r1, #12
 8029902:	e7c4      	b.n	802988e <__ieee754_pow+0x22>
 8029904:	2600      	movs	r6, #0
 8029906:	9a06      	ldr	r2, [sp, #24]
 8029908:	9408      	str	r4, [sp, #32]
 802990a:	42b2      	cmp	r2, r6
 802990c:	da42      	bge.n	8029994 <__ieee754_pow+0x128>
 802990e:	4a7b      	ldr	r2, [pc, #492]	@ (8029afc <__ieee754_pow+0x290>)
 8029910:	4295      	cmp	r5, r2
 8029912:	d83e      	bhi.n	8029992 <__ieee754_pow+0x126>
 8029914:	4a7a      	ldr	r2, [pc, #488]	@ (8029b00 <__ieee754_pow+0x294>)
 8029916:	4295      	cmp	r5, r2
 8029918:	d910      	bls.n	802993c <__ieee754_pow+0xd0>
 802991a:	497a      	ldr	r1, [pc, #488]	@ (8029b04 <__ieee754_pow+0x298>)
 802991c:	152a      	asrs	r2, r5, #20
 802991e:	1852      	adds	r2, r2, r1
 8029920:	2a14      	cmp	r2, #20
 8029922:	dd18      	ble.n	8029956 <__ieee754_pow+0xea>
 8029924:	2134      	movs	r1, #52	@ 0x34
 8029926:	1a89      	subs	r1, r1, r2
 8029928:	9a04      	ldr	r2, [sp, #16]
 802992a:	40ca      	lsrs	r2, r1
 802992c:	0010      	movs	r0, r2
 802992e:	4088      	lsls	r0, r1
 8029930:	4298      	cmp	r0, r3
 8029932:	d103      	bne.n	802993c <__ieee754_pow+0xd0>
 8029934:	2101      	movs	r1, #1
 8029936:	3602      	adds	r6, #2
 8029938:	400a      	ands	r2, r1
 802993a:	1ab6      	subs	r6, r6, r2
 802993c:	2b00      	cmp	r3, #0
 802993e:	d15b      	bne.n	80299f8 <__ieee754_pow+0x18c>
 8029940:	2380      	movs	r3, #128	@ 0x80
 8029942:	05db      	lsls	r3, r3, #23
 8029944:	429f      	cmp	r7, r3
 8029946:	d14c      	bne.n	80299e2 <__ieee754_pow+0x176>
 8029948:	9a02      	ldr	r2, [sp, #8]
 802994a:	9b03      	ldr	r3, [sp, #12]
 802994c:	0010      	movs	r0, r2
 802994e:	0019      	movs	r1, r3
 8029950:	f7d9 f800 	bl	8002954 <__aeabi_dmul>
 8029954:	e7af      	b.n	80298b6 <__ieee754_pow+0x4a>
 8029956:	2b00      	cmp	r3, #0
 8029958:	d14e      	bne.n	80299f8 <__ieee754_pow+0x18c>
 802995a:	3314      	adds	r3, #20
 802995c:	1a9a      	subs	r2, r3, r2
 802995e:	002b      	movs	r3, r5
 8029960:	4113      	asrs	r3, r2
 8029962:	0019      	movs	r1, r3
 8029964:	4091      	lsls	r1, r2
 8029966:	42a9      	cmp	r1, r5
 8029968:	d103      	bne.n	8029972 <__ieee754_pow+0x106>
 802996a:	2201      	movs	r2, #1
 802996c:	2602      	movs	r6, #2
 802996e:	4013      	ands	r3, r2
 8029970:	1af6      	subs	r6, r6, r3
 8029972:	4b65      	ldr	r3, [pc, #404]	@ (8029b08 <__ieee754_pow+0x29c>)
 8029974:	429d      	cmp	r5, r3
 8029976:	d1e3      	bne.n	8029940 <__ieee754_pow+0xd4>
 8029978:	9b02      	ldr	r3, [sp, #8]
 802997a:	9c03      	ldr	r4, [sp, #12]
 802997c:	9300      	str	r3, [sp, #0]
 802997e:	9401      	str	r4, [sp, #4]
 8029980:	2f00      	cmp	r7, #0
 8029982:	da2a      	bge.n	80299da <__ieee754_pow+0x16e>
 8029984:	001a      	movs	r2, r3
 8029986:	2000      	movs	r0, #0
 8029988:	0023      	movs	r3, r4
 802998a:	495f      	ldr	r1, [pc, #380]	@ (8029b08 <__ieee754_pow+0x29c>)
 802998c:	f7d8 fba8 	bl	80020e0 <__aeabi_ddiv>
 8029990:	e791      	b.n	80298b6 <__ieee754_pow+0x4a>
 8029992:	2602      	movs	r6, #2
 8029994:	2b00      	cmp	r3, #0
 8029996:	d12f      	bne.n	80299f8 <__ieee754_pow+0x18c>
 8029998:	4b56      	ldr	r3, [pc, #344]	@ (8029af4 <__ieee754_pow+0x288>)
 802999a:	429d      	cmp	r5, r3
 802999c:	d1e9      	bne.n	8029972 <__ieee754_pow+0x106>
 802999e:	4b56      	ldr	r3, [pc, #344]	@ (8029af8 <__ieee754_pow+0x28c>)
 80299a0:	9a02      	ldr	r2, [sp, #8]
 80299a2:	18e3      	adds	r3, r4, r3
 80299a4:	4313      	orrs	r3, r2
 80299a6:	d101      	bne.n	80299ac <__ieee754_pow+0x140>
 80299a8:	f000 fc49 	bl	802a23e <__ieee754_pow+0x9d2>
 80299ac:	4b54      	ldr	r3, [pc, #336]	@ (8029b00 <__ieee754_pow+0x294>)
 80299ae:	429c      	cmp	r4, r3
 80299b0:	d909      	bls.n	80299c6 <__ieee754_pow+0x15a>
 80299b2:	9b04      	ldr	r3, [sp, #16]
 80299b4:	9c05      	ldr	r4, [sp, #20]
 80299b6:	9300      	str	r3, [sp, #0]
 80299b8:	9401      	str	r4, [sp, #4]
 80299ba:	2f00      	cmp	r7, #0
 80299bc:	da0d      	bge.n	80299da <__ieee754_pow+0x16e>
 80299be:	2300      	movs	r3, #0
 80299c0:	2400      	movs	r4, #0
 80299c2:	f000 fc3e 	bl	802a242 <__ieee754_pow+0x9d6>
 80299c6:	2f00      	cmp	r7, #0
 80299c8:	daf9      	bge.n	80299be <__ieee754_pow+0x152>
 80299ca:	2280      	movs	r2, #128	@ 0x80
 80299cc:	0612      	lsls	r2, r2, #24
 80299ce:	4694      	mov	ip, r2
 80299d0:	9b04      	ldr	r3, [sp, #16]
 80299d2:	9300      	str	r3, [sp, #0]
 80299d4:	9b05      	ldr	r3, [sp, #20]
 80299d6:	4463      	add	r3, ip
 80299d8:	9301      	str	r3, [sp, #4]
 80299da:	9800      	ldr	r0, [sp, #0]
 80299dc:	9901      	ldr	r1, [sp, #4]
 80299de:	b015      	add	sp, #84	@ 0x54
 80299e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80299e2:	4b4a      	ldr	r3, [pc, #296]	@ (8029b0c <__ieee754_pow+0x2a0>)
 80299e4:	429f      	cmp	r7, r3
 80299e6:	d107      	bne.n	80299f8 <__ieee754_pow+0x18c>
 80299e8:	9b06      	ldr	r3, [sp, #24]
 80299ea:	2b00      	cmp	r3, #0
 80299ec:	db04      	blt.n	80299f8 <__ieee754_pow+0x18c>
 80299ee:	9802      	ldr	r0, [sp, #8]
 80299f0:	9903      	ldr	r1, [sp, #12]
 80299f2:	f000 fe03 	bl	802a5fc <__ieee754_sqrt>
 80299f6:	e75e      	b.n	80298b6 <__ieee754_pow+0x4a>
 80299f8:	9802      	ldr	r0, [sp, #8]
 80299fa:	9903      	ldr	r1, [sp, #12]
 80299fc:	f000 fc4e 	bl	802a29c <fabs>
 8029a00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029a02:	9000      	str	r0, [sp, #0]
 8029a04:	9101      	str	r1, [sp, #4]
 8029a06:	2b00      	cmp	r3, #0
 8029a08:	d12c      	bne.n	8029a64 <__ieee754_pow+0x1f8>
 8029a0a:	9b03      	ldr	r3, [sp, #12]
 8029a0c:	4a3e      	ldr	r2, [pc, #248]	@ (8029b08 <__ieee754_pow+0x29c>)
 8029a0e:	009b      	lsls	r3, r3, #2
 8029a10:	089b      	lsrs	r3, r3, #2
 8029a12:	4293      	cmp	r3, r2
 8029a14:	d001      	beq.n	8029a1a <__ieee754_pow+0x1ae>
 8029a16:	2c00      	cmp	r4, #0
 8029a18:	d124      	bne.n	8029a64 <__ieee754_pow+0x1f8>
 8029a1a:	2f00      	cmp	r7, #0
 8029a1c:	da07      	bge.n	8029a2e <__ieee754_pow+0x1c2>
 8029a1e:	9a00      	ldr	r2, [sp, #0]
 8029a20:	9b01      	ldr	r3, [sp, #4]
 8029a22:	2000      	movs	r0, #0
 8029a24:	4938      	ldr	r1, [pc, #224]	@ (8029b08 <__ieee754_pow+0x29c>)
 8029a26:	f7d8 fb5b 	bl	80020e0 <__aeabi_ddiv>
 8029a2a:	9000      	str	r0, [sp, #0]
 8029a2c:	9101      	str	r1, [sp, #4]
 8029a2e:	9b06      	ldr	r3, [sp, #24]
 8029a30:	2b00      	cmp	r3, #0
 8029a32:	dad2      	bge.n	80299da <__ieee754_pow+0x16e>
 8029a34:	4b30      	ldr	r3, [pc, #192]	@ (8029af8 <__ieee754_pow+0x28c>)
 8029a36:	18e4      	adds	r4, r4, r3
 8029a38:	4334      	orrs	r4, r6
 8029a3a:	d108      	bne.n	8029a4e <__ieee754_pow+0x1e2>
 8029a3c:	9a00      	ldr	r2, [sp, #0]
 8029a3e:	9b01      	ldr	r3, [sp, #4]
 8029a40:	0010      	movs	r0, r2
 8029a42:	0019      	movs	r1, r3
 8029a44:	f7d9 fa6c 	bl	8002f20 <__aeabi_dsub>
 8029a48:	0002      	movs	r2, r0
 8029a4a:	000b      	movs	r3, r1
 8029a4c:	e79e      	b.n	802998c <__ieee754_pow+0x120>
 8029a4e:	2e01      	cmp	r6, #1
 8029a50:	d1c3      	bne.n	80299da <__ieee754_pow+0x16e>
 8029a52:	9800      	ldr	r0, [sp, #0]
 8029a54:	2180      	movs	r1, #128	@ 0x80
 8029a56:	0002      	movs	r2, r0
 8029a58:	9801      	ldr	r0, [sp, #4]
 8029a5a:	0609      	lsls	r1, r1, #24
 8029a5c:	1843      	adds	r3, r0, r1
 8029a5e:	9200      	str	r2, [sp, #0]
 8029a60:	9301      	str	r3, [sp, #4]
 8029a62:	e7ba      	b.n	80299da <__ieee754_pow+0x16e>
 8029a64:	9b03      	ldr	r3, [sp, #12]
 8029a66:	0fdb      	lsrs	r3, r3, #31
 8029a68:	3b01      	subs	r3, #1
 8029a6a:	001a      	movs	r2, r3
 8029a6c:	4332      	orrs	r2, r6
 8029a6e:	d102      	bne.n	8029a76 <__ieee754_pow+0x20a>
 8029a70:	9a02      	ldr	r2, [sp, #8]
 8029a72:	9b03      	ldr	r3, [sp, #12]
 8029a74:	e7e4      	b.n	8029a40 <__ieee754_pow+0x1d4>
 8029a76:	3e01      	subs	r6, #1
 8029a78:	2200      	movs	r2, #0
 8029a7a:	431e      	orrs	r6, r3
 8029a7c:	d013      	beq.n	8029aa6 <__ieee754_pow+0x23a>
 8029a7e:	4b22      	ldr	r3, [pc, #136]	@ (8029b08 <__ieee754_pow+0x29c>)
 8029a80:	9206      	str	r2, [sp, #24]
 8029a82:	9307      	str	r3, [sp, #28]
 8029a84:	2384      	movs	r3, #132	@ 0x84
 8029a86:	05db      	lsls	r3, r3, #23
 8029a88:	429d      	cmp	r5, r3
 8029a8a:	d800      	bhi.n	8029a8e <__ieee754_pow+0x222>
 8029a8c:	e0fa      	b.n	8029c84 <__ieee754_pow+0x418>
 8029a8e:	4b20      	ldr	r3, [pc, #128]	@ (8029b10 <__ieee754_pow+0x2a4>)
 8029a90:	429d      	cmp	r5, r3
 8029a92:	d910      	bls.n	8029ab6 <__ieee754_pow+0x24a>
 8029a94:	4b1a      	ldr	r3, [pc, #104]	@ (8029b00 <__ieee754_pow+0x294>)
 8029a96:	429c      	cmp	r4, r3
 8029a98:	d807      	bhi.n	8029aaa <__ieee754_pow+0x23e>
 8029a9a:	2f00      	cmp	r7, #0
 8029a9c:	da07      	bge.n	8029aae <__ieee754_pow+0x242>
 8029a9e:	2000      	movs	r0, #0
 8029aa0:	f000 fd82 	bl	802a5a8 <__math_oflow>
 8029aa4:	e707      	b.n	80298b6 <__ieee754_pow+0x4a>
 8029aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8029b14 <__ieee754_pow+0x2a8>)
 8029aa8:	e7ea      	b.n	8029a80 <__ieee754_pow+0x214>
 8029aaa:	2f00      	cmp	r7, #0
 8029aac:	dcf7      	bgt.n	8029a9e <__ieee754_pow+0x232>
 8029aae:	2000      	movs	r0, #0
 8029ab0:	f000 fd73 	bl	802a59a <__math_uflow>
 8029ab4:	e6ff      	b.n	80298b6 <__ieee754_pow+0x4a>
 8029ab6:	4b18      	ldr	r3, [pc, #96]	@ (8029b18 <__ieee754_pow+0x2ac>)
 8029ab8:	429c      	cmp	r4, r3
 8029aba:	d80a      	bhi.n	8029ad2 <__ieee754_pow+0x266>
 8029abc:	9806      	ldr	r0, [sp, #24]
 8029abe:	9907      	ldr	r1, [sp, #28]
 8029ac0:	2300      	movs	r3, #0
 8029ac2:	2200      	movs	r2, #0
 8029ac4:	f7d6 fcfa 	bl	80004bc <__aeabi_dcmplt>
 8029ac8:	1e43      	subs	r3, r0, #1
 8029aca:	4198      	sbcs	r0, r3
 8029acc:	2f00      	cmp	r7, #0
 8029ace:	daef      	bge.n	8029ab0 <__ieee754_pow+0x244>
 8029ad0:	e7e6      	b.n	8029aa0 <__ieee754_pow+0x234>
 8029ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8029b08 <__ieee754_pow+0x29c>)
 8029ad4:	2200      	movs	r2, #0
 8029ad6:	429c      	cmp	r4, r3
 8029ad8:	d920      	bls.n	8029b1c <__ieee754_pow+0x2b0>
 8029ada:	9806      	ldr	r0, [sp, #24]
 8029adc:	9907      	ldr	r1, [sp, #28]
 8029ade:	2300      	movs	r3, #0
 8029ae0:	f7d6 fcec 	bl	80004bc <__aeabi_dcmplt>
 8029ae4:	1e43      	subs	r3, r0, #1
 8029ae6:	4198      	sbcs	r0, r3
 8029ae8:	2f00      	cmp	r7, #0
 8029aea:	dcd9      	bgt.n	8029aa0 <__ieee754_pow+0x234>
 8029aec:	e7e0      	b.n	8029ab0 <__ieee754_pow+0x244>
 8029aee:	46c0      	nop			@ (mov r8, r8)
 8029af0:	fff00000 	.word	0xfff00000
 8029af4:	7ff00000 	.word	0x7ff00000
 8029af8:	c0100000 	.word	0xc0100000
 8029afc:	433fffff 	.word	0x433fffff
 8029b00:	3fefffff 	.word	0x3fefffff
 8029b04:	fffffc01 	.word	0xfffffc01
 8029b08:	3ff00000 	.word	0x3ff00000
 8029b0c:	3fe00000 	.word	0x3fe00000
 8029b10:	43f00000 	.word	0x43f00000
 8029b14:	bff00000 	.word	0xbff00000
 8029b18:	3feffffe 	.word	0x3feffffe
 8029b1c:	9800      	ldr	r0, [sp, #0]
 8029b1e:	9901      	ldr	r1, [sp, #4]
 8029b20:	4b4d      	ldr	r3, [pc, #308]	@ (8029c58 <__ieee754_pow+0x3ec>)
 8029b22:	f7d9 f9fd 	bl	8002f20 <__aeabi_dsub>
 8029b26:	22c0      	movs	r2, #192	@ 0xc0
 8029b28:	4b4c      	ldr	r3, [pc, #304]	@ (8029c5c <__ieee754_pow+0x3f0>)
 8029b2a:	05d2      	lsls	r2, r2, #23
 8029b2c:	0006      	movs	r6, r0
 8029b2e:	000f      	movs	r7, r1
 8029b30:	f7d8 ff10 	bl	8002954 <__aeabi_dmul>
 8029b34:	4a4a      	ldr	r2, [pc, #296]	@ (8029c60 <__ieee754_pow+0x3f4>)
 8029b36:	9002      	str	r0, [sp, #8]
 8029b38:	9103      	str	r1, [sp, #12]
 8029b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8029c64 <__ieee754_pow+0x3f8>)
 8029b3c:	0030      	movs	r0, r6
 8029b3e:	0039      	movs	r1, r7
 8029b40:	f7d8 ff08 	bl	8002954 <__aeabi_dmul>
 8029b44:	2200      	movs	r2, #0
 8029b46:	9000      	str	r0, [sp, #0]
 8029b48:	9101      	str	r1, [sp, #4]
 8029b4a:	4b47      	ldr	r3, [pc, #284]	@ (8029c68 <__ieee754_pow+0x3fc>)
 8029b4c:	0030      	movs	r0, r6
 8029b4e:	0039      	movs	r1, r7
 8029b50:	f7d8 ff00 	bl	8002954 <__aeabi_dmul>
 8029b54:	0002      	movs	r2, r0
 8029b56:	000b      	movs	r3, r1
 8029b58:	4844      	ldr	r0, [pc, #272]	@ (8029c6c <__ieee754_pow+0x400>)
 8029b5a:	4945      	ldr	r1, [pc, #276]	@ (8029c70 <__ieee754_pow+0x404>)
 8029b5c:	f7d9 f9e0 	bl	8002f20 <__aeabi_dsub>
 8029b60:	0032      	movs	r2, r6
 8029b62:	003b      	movs	r3, r7
 8029b64:	f7d8 fef6 	bl	8002954 <__aeabi_dmul>
 8029b68:	0002      	movs	r2, r0
 8029b6a:	000b      	movs	r3, r1
 8029b6c:	2000      	movs	r0, #0
 8029b6e:	4941      	ldr	r1, [pc, #260]	@ (8029c74 <__ieee754_pow+0x408>)
 8029b70:	f7d9 f9d6 	bl	8002f20 <__aeabi_dsub>
 8029b74:	0032      	movs	r2, r6
 8029b76:	0004      	movs	r4, r0
 8029b78:	000d      	movs	r5, r1
 8029b7a:	003b      	movs	r3, r7
 8029b7c:	0030      	movs	r0, r6
 8029b7e:	0039      	movs	r1, r7
 8029b80:	f7d8 fee8 	bl	8002954 <__aeabi_dmul>
 8029b84:	0002      	movs	r2, r0
 8029b86:	000b      	movs	r3, r1
 8029b88:	0020      	movs	r0, r4
 8029b8a:	0029      	movs	r1, r5
 8029b8c:	f7d8 fee2 	bl	8002954 <__aeabi_dmul>
 8029b90:	4a39      	ldr	r2, [pc, #228]	@ (8029c78 <__ieee754_pow+0x40c>)
 8029b92:	4b32      	ldr	r3, [pc, #200]	@ (8029c5c <__ieee754_pow+0x3f0>)
 8029b94:	f7d8 fede 	bl	8002954 <__aeabi_dmul>
 8029b98:	0002      	movs	r2, r0
 8029b9a:	000b      	movs	r3, r1
 8029b9c:	9800      	ldr	r0, [sp, #0]
 8029b9e:	9901      	ldr	r1, [sp, #4]
 8029ba0:	f7d9 f9be 	bl	8002f20 <__aeabi_dsub>
 8029ba4:	0002      	movs	r2, r0
 8029ba6:	000b      	movs	r3, r1
 8029ba8:	0004      	movs	r4, r0
 8029baa:	000d      	movs	r5, r1
 8029bac:	9802      	ldr	r0, [sp, #8]
 8029bae:	9903      	ldr	r1, [sp, #12]
 8029bb0:	f7d7 fed0 	bl	8001954 <__aeabi_dadd>
 8029bb4:	9a02      	ldr	r2, [sp, #8]
 8029bb6:	9b03      	ldr	r3, [sp, #12]
 8029bb8:	2000      	movs	r0, #0
 8029bba:	9000      	str	r0, [sp, #0]
 8029bbc:	9101      	str	r1, [sp, #4]
 8029bbe:	f7d9 f9af 	bl	8002f20 <__aeabi_dsub>
 8029bc2:	0002      	movs	r2, r0
 8029bc4:	000b      	movs	r3, r1
 8029bc6:	0020      	movs	r0, r4
 8029bc8:	0029      	movs	r1, r5
 8029bca:	f7d9 f9a9 	bl	8002f20 <__aeabi_dsub>
 8029bce:	9c04      	ldr	r4, [sp, #16]
 8029bd0:	9d05      	ldr	r5, [sp, #20]
 8029bd2:	2400      	movs	r4, #0
 8029bd4:	0006      	movs	r6, r0
 8029bd6:	000f      	movs	r7, r1
 8029bd8:	9804      	ldr	r0, [sp, #16]
 8029bda:	9905      	ldr	r1, [sp, #20]
 8029bdc:	0022      	movs	r2, r4
 8029bde:	002b      	movs	r3, r5
 8029be0:	9402      	str	r4, [sp, #8]
 8029be2:	9503      	str	r5, [sp, #12]
 8029be4:	f7d9 f99c 	bl	8002f20 <__aeabi_dsub>
 8029be8:	9a00      	ldr	r2, [sp, #0]
 8029bea:	9b01      	ldr	r3, [sp, #4]
 8029bec:	f7d8 feb2 	bl	8002954 <__aeabi_dmul>
 8029bf0:	9a04      	ldr	r2, [sp, #16]
 8029bf2:	9b05      	ldr	r3, [sp, #20]
 8029bf4:	9008      	str	r0, [sp, #32]
 8029bf6:	9109      	str	r1, [sp, #36]	@ 0x24
 8029bf8:	0030      	movs	r0, r6
 8029bfa:	0039      	movs	r1, r7
 8029bfc:	f7d8 feaa 	bl	8002954 <__aeabi_dmul>
 8029c00:	0002      	movs	r2, r0
 8029c02:	000b      	movs	r3, r1
 8029c04:	9808      	ldr	r0, [sp, #32]
 8029c06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029c08:	f7d7 fea4 	bl	8001954 <__aeabi_dadd>
 8029c0c:	0022      	movs	r2, r4
 8029c0e:	002b      	movs	r3, r5
 8029c10:	9004      	str	r0, [sp, #16]
 8029c12:	9105      	str	r1, [sp, #20]
 8029c14:	9800      	ldr	r0, [sp, #0]
 8029c16:	9901      	ldr	r1, [sp, #4]
 8029c18:	f7d8 fe9c 	bl	8002954 <__aeabi_dmul>
 8029c1c:	000b      	movs	r3, r1
 8029c1e:	0002      	movs	r2, r0
 8029c20:	9000      	str	r0, [sp, #0]
 8029c22:	9101      	str	r1, [sp, #4]
 8029c24:	9804      	ldr	r0, [sp, #16]
 8029c26:	9905      	ldr	r1, [sp, #20]
 8029c28:	f7d7 fe94 	bl	8001954 <__aeabi_dadd>
 8029c2c:	4b13      	ldr	r3, [pc, #76]	@ (8029c7c <__ieee754_pow+0x410>)
 8029c2e:	0006      	movs	r6, r0
 8029c30:	000f      	movs	r7, r1
 8029c32:	9108      	str	r1, [sp, #32]
 8029c34:	4299      	cmp	r1, r3
 8029c36:	dc00      	bgt.n	8029c3a <__ieee754_pow+0x3ce>
 8029c38:	e1c0      	b.n	8029fbc <__ieee754_pow+0x750>
 8029c3a:	4b11      	ldr	r3, [pc, #68]	@ (8029c80 <__ieee754_pow+0x414>)
 8029c3c:	18cb      	adds	r3, r1, r3
 8029c3e:	4303      	orrs	r3, r0
 8029c40:	42a3      	cmp	r3, r4
 8029c42:	d100      	bne.n	8029c46 <__ieee754_pow+0x3da>
 8029c44:	e1a1      	b.n	8029f8a <__ieee754_pow+0x71e>
 8029c46:	9806      	ldr	r0, [sp, #24]
 8029c48:	9907      	ldr	r1, [sp, #28]
 8029c4a:	2300      	movs	r3, #0
 8029c4c:	2200      	movs	r2, #0
 8029c4e:	f7d6 fc35 	bl	80004bc <__aeabi_dcmplt>
 8029c52:	1e43      	subs	r3, r0, #1
 8029c54:	4198      	sbcs	r0, r3
 8029c56:	e723      	b.n	8029aa0 <__ieee754_pow+0x234>
 8029c58:	3ff00000 	.word	0x3ff00000
 8029c5c:	3ff71547 	.word	0x3ff71547
 8029c60:	f85ddf44 	.word	0xf85ddf44
 8029c64:	3e54ae0b 	.word	0x3e54ae0b
 8029c68:	3fd00000 	.word	0x3fd00000
 8029c6c:	55555555 	.word	0x55555555
 8029c70:	3fd55555 	.word	0x3fd55555
 8029c74:	3fe00000 	.word	0x3fe00000
 8029c78:	652b82fe 	.word	0x652b82fe
 8029c7c:	408fffff 	.word	0x408fffff
 8029c80:	bf700000 	.word	0xbf700000
 8029c84:	4bdc      	ldr	r3, [pc, #880]	@ (8029ff8 <__ieee754_pow+0x78c>)
 8029c86:	9903      	ldr	r1, [sp, #12]
 8029c88:	2200      	movs	r2, #0
 8029c8a:	420b      	tst	r3, r1
 8029c8c:	d10b      	bne.n	8029ca6 <__ieee754_pow+0x43a>
 8029c8e:	9800      	ldr	r0, [sp, #0]
 8029c90:	9901      	ldr	r1, [sp, #4]
 8029c92:	2200      	movs	r2, #0
 8029c94:	4bd9      	ldr	r3, [pc, #868]	@ (8029ffc <__ieee754_pow+0x790>)
 8029c96:	f7d8 fe5d 	bl	8002954 <__aeabi_dmul>
 8029c9a:	2235      	movs	r2, #53	@ 0x35
 8029c9c:	9000      	str	r0, [sp, #0]
 8029c9e:	9101      	str	r1, [sp, #4]
 8029ca0:	9b01      	ldr	r3, [sp, #4]
 8029ca2:	4252      	negs	r2, r2
 8029ca4:	9308      	str	r3, [sp, #32]
 8029ca6:	9b08      	ldr	r3, [sp, #32]
 8029ca8:	49d5      	ldr	r1, [pc, #852]	@ (802a000 <__ieee754_pow+0x794>)
 8029caa:	151b      	asrs	r3, r3, #20
 8029cac:	185b      	adds	r3, r3, r1
 8029cae:	189b      	adds	r3, r3, r2
 8029cb0:	930e      	str	r3, [sp, #56]	@ 0x38
 8029cb2:	9b08      	ldr	r3, [sp, #32]
 8029cb4:	4dd3      	ldr	r5, [pc, #844]	@ (802a004 <__ieee754_pow+0x798>)
 8029cb6:	031b      	lsls	r3, r3, #12
 8029cb8:	4ad3      	ldr	r2, [pc, #844]	@ (802a008 <__ieee754_pow+0x79c>)
 8029cba:	0b1b      	lsrs	r3, r3, #12
 8029cbc:	2600      	movs	r6, #0
 8029cbe:	431d      	orrs	r5, r3
 8029cc0:	4293      	cmp	r3, r2
 8029cc2:	dd09      	ble.n	8029cd8 <__ieee754_pow+0x46c>
 8029cc4:	4ad1      	ldr	r2, [pc, #836]	@ (802a00c <__ieee754_pow+0x7a0>)
 8029cc6:	3601      	adds	r6, #1
 8029cc8:	4293      	cmp	r3, r2
 8029cca:	dd05      	ble.n	8029cd8 <__ieee754_pow+0x46c>
 8029ccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8029cce:	199b      	adds	r3, r3, r6
 8029cd0:	2600      	movs	r6, #0
 8029cd2:	930e      	str	r3, [sp, #56]	@ 0x38
 8029cd4:	4bce      	ldr	r3, [pc, #824]	@ (802a010 <__ieee754_pow+0x7a4>)
 8029cd6:	18ed      	adds	r5, r5, r3
 8029cd8:	9800      	ldr	r0, [sp, #0]
 8029cda:	9901      	ldr	r1, [sp, #4]
 8029cdc:	0029      	movs	r1, r5
 8029cde:	4bcd      	ldr	r3, [pc, #820]	@ (802a014 <__ieee754_pow+0x7a8>)
 8029ce0:	00f2      	lsls	r2, r6, #3
 8029ce2:	189b      	adds	r3, r3, r2
 8029ce4:	685c      	ldr	r4, [r3, #4]
 8029ce6:	681b      	ldr	r3, [r3, #0]
 8029ce8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8029cea:	930a      	str	r3, [sp, #40]	@ 0x28
 8029cec:	940b      	str	r4, [sp, #44]	@ 0x2c
 8029cee:	001a      	movs	r2, r3
 8029cf0:	0023      	movs	r3, r4
 8029cf2:	900c      	str	r0, [sp, #48]	@ 0x30
 8029cf4:	910d      	str	r1, [sp, #52]	@ 0x34
 8029cf6:	f7d9 f913 	bl	8002f20 <__aeabi_dsub>
 8029cfa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029cfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029cfe:	9010      	str	r0, [sp, #64]	@ 0x40
 8029d00:	9111      	str	r1, [sp, #68]	@ 0x44
 8029d02:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029d04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029d06:	f7d7 fe25 	bl	8001954 <__aeabi_dadd>
 8029d0a:	0002      	movs	r2, r0
 8029d0c:	000b      	movs	r3, r1
 8029d0e:	2000      	movs	r0, #0
 8029d10:	49bc      	ldr	r1, [pc, #752]	@ (802a004 <__ieee754_pow+0x798>)
 8029d12:	f7d8 f9e5 	bl	80020e0 <__aeabi_ddiv>
 8029d16:	0002      	movs	r2, r0
 8029d18:	000b      	movs	r3, r1
 8029d1a:	9012      	str	r0, [sp, #72]	@ 0x48
 8029d1c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8029d1e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029d20:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029d22:	f7d8 fe17 	bl	8002954 <__aeabi_dmul>
 8029d26:	9008      	str	r0, [sp, #32]
 8029d28:	9109      	str	r1, [sp, #36]	@ 0x24
 8029d2a:	9b08      	ldr	r3, [sp, #32]
 8029d2c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8029d2e:	2180      	movs	r1, #128	@ 0x80
 8029d30:	9302      	str	r3, [sp, #8]
 8029d32:	9403      	str	r4, [sp, #12]
 8029d34:	2080      	movs	r0, #128	@ 0x80
 8029d36:	2300      	movs	r3, #0
 8029d38:	2200      	movs	r2, #0
 8029d3a:	106d      	asrs	r5, r5, #1
 8029d3c:	0589      	lsls	r1, r1, #22
 8029d3e:	9302      	str	r3, [sp, #8]
 8029d40:	4329      	orrs	r1, r5
 8029d42:	0300      	lsls	r0, r0, #12
 8029d44:	9b02      	ldr	r3, [sp, #8]
 8029d46:	9c03      	ldr	r4, [sp, #12]
 8029d48:	1809      	adds	r1, r1, r0
 8029d4a:	9300      	str	r3, [sp, #0]
 8029d4c:	9401      	str	r4, [sp, #4]
 8029d4e:	04b6      	lsls	r6, r6, #18
 8029d50:	198b      	adds	r3, r1, r6
 8029d52:	9800      	ldr	r0, [sp, #0]
 8029d54:	9901      	ldr	r1, [sp, #4]
 8029d56:	0014      	movs	r4, r2
 8029d58:	001d      	movs	r5, r3
 8029d5a:	f7d8 fdfb 	bl	8002954 <__aeabi_dmul>
 8029d5e:	0002      	movs	r2, r0
 8029d60:	000b      	movs	r3, r1
 8029d62:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8029d64:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8029d66:	f7d9 f8db 	bl	8002f20 <__aeabi_dsub>
 8029d6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029d6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029d6e:	0006      	movs	r6, r0
 8029d70:	000f      	movs	r7, r1
 8029d72:	0020      	movs	r0, r4
 8029d74:	0029      	movs	r1, r5
 8029d76:	f7d9 f8d3 	bl	8002f20 <__aeabi_dsub>
 8029d7a:	0002      	movs	r2, r0
 8029d7c:	000b      	movs	r3, r1
 8029d7e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029d80:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029d82:	f7d9 f8cd 	bl	8002f20 <__aeabi_dsub>
 8029d86:	9a00      	ldr	r2, [sp, #0]
 8029d88:	9b01      	ldr	r3, [sp, #4]
 8029d8a:	f7d8 fde3 	bl	8002954 <__aeabi_dmul>
 8029d8e:	0002      	movs	r2, r0
 8029d90:	000b      	movs	r3, r1
 8029d92:	0030      	movs	r0, r6
 8029d94:	0039      	movs	r1, r7
 8029d96:	f7d9 f8c3 	bl	8002f20 <__aeabi_dsub>
 8029d9a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8029d9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8029d9e:	f7d8 fdd9 	bl	8002954 <__aeabi_dmul>
 8029da2:	9a08      	ldr	r2, [sp, #32]
 8029da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029da6:	900a      	str	r0, [sp, #40]	@ 0x28
 8029da8:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029daa:	0010      	movs	r0, r2
 8029dac:	0019      	movs	r1, r3
 8029dae:	f7d8 fdd1 	bl	8002954 <__aeabi_dmul>
 8029db2:	0006      	movs	r6, r0
 8029db4:	000f      	movs	r7, r1
 8029db6:	4a98      	ldr	r2, [pc, #608]	@ (802a018 <__ieee754_pow+0x7ac>)
 8029db8:	4b98      	ldr	r3, [pc, #608]	@ (802a01c <__ieee754_pow+0x7b0>)
 8029dba:	f7d8 fdcb 	bl	8002954 <__aeabi_dmul>
 8029dbe:	4a98      	ldr	r2, [pc, #608]	@ (802a020 <__ieee754_pow+0x7b4>)
 8029dc0:	4b98      	ldr	r3, [pc, #608]	@ (802a024 <__ieee754_pow+0x7b8>)
 8029dc2:	f7d7 fdc7 	bl	8001954 <__aeabi_dadd>
 8029dc6:	0032      	movs	r2, r6
 8029dc8:	003b      	movs	r3, r7
 8029dca:	f7d8 fdc3 	bl	8002954 <__aeabi_dmul>
 8029dce:	4a96      	ldr	r2, [pc, #600]	@ (802a028 <__ieee754_pow+0x7bc>)
 8029dd0:	4b96      	ldr	r3, [pc, #600]	@ (802a02c <__ieee754_pow+0x7c0>)
 8029dd2:	f7d7 fdbf 	bl	8001954 <__aeabi_dadd>
 8029dd6:	0032      	movs	r2, r6
 8029dd8:	003b      	movs	r3, r7
 8029dda:	f7d8 fdbb 	bl	8002954 <__aeabi_dmul>
 8029dde:	4a94      	ldr	r2, [pc, #592]	@ (802a030 <__ieee754_pow+0x7c4>)
 8029de0:	4b94      	ldr	r3, [pc, #592]	@ (802a034 <__ieee754_pow+0x7c8>)
 8029de2:	f7d7 fdb7 	bl	8001954 <__aeabi_dadd>
 8029de6:	0032      	movs	r2, r6
 8029de8:	003b      	movs	r3, r7
 8029dea:	f7d8 fdb3 	bl	8002954 <__aeabi_dmul>
 8029dee:	4a92      	ldr	r2, [pc, #584]	@ (802a038 <__ieee754_pow+0x7cc>)
 8029df0:	4b92      	ldr	r3, [pc, #584]	@ (802a03c <__ieee754_pow+0x7d0>)
 8029df2:	f7d7 fdaf 	bl	8001954 <__aeabi_dadd>
 8029df6:	0032      	movs	r2, r6
 8029df8:	003b      	movs	r3, r7
 8029dfa:	f7d8 fdab 	bl	8002954 <__aeabi_dmul>
 8029dfe:	4a90      	ldr	r2, [pc, #576]	@ (802a040 <__ieee754_pow+0x7d4>)
 8029e00:	4b90      	ldr	r3, [pc, #576]	@ (802a044 <__ieee754_pow+0x7d8>)
 8029e02:	f7d7 fda7 	bl	8001954 <__aeabi_dadd>
 8029e06:	0032      	movs	r2, r6
 8029e08:	0004      	movs	r4, r0
 8029e0a:	000d      	movs	r5, r1
 8029e0c:	003b      	movs	r3, r7
 8029e0e:	0030      	movs	r0, r6
 8029e10:	0039      	movs	r1, r7
 8029e12:	f7d8 fd9f 	bl	8002954 <__aeabi_dmul>
 8029e16:	0002      	movs	r2, r0
 8029e18:	000b      	movs	r3, r1
 8029e1a:	0020      	movs	r0, r4
 8029e1c:	0029      	movs	r1, r5
 8029e1e:	f7d8 fd99 	bl	8002954 <__aeabi_dmul>
 8029e22:	9a00      	ldr	r2, [sp, #0]
 8029e24:	9b01      	ldr	r3, [sp, #4]
 8029e26:	0004      	movs	r4, r0
 8029e28:	000d      	movs	r5, r1
 8029e2a:	9808      	ldr	r0, [sp, #32]
 8029e2c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029e2e:	f7d7 fd91 	bl	8001954 <__aeabi_dadd>
 8029e32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029e34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029e36:	f7d8 fd8d 	bl	8002954 <__aeabi_dmul>
 8029e3a:	0022      	movs	r2, r4
 8029e3c:	002b      	movs	r3, r5
 8029e3e:	f7d7 fd89 	bl	8001954 <__aeabi_dadd>
 8029e42:	9a00      	ldr	r2, [sp, #0]
 8029e44:	9b01      	ldr	r3, [sp, #4]
 8029e46:	900c      	str	r0, [sp, #48]	@ 0x30
 8029e48:	910d      	str	r1, [sp, #52]	@ 0x34
 8029e4a:	0010      	movs	r0, r2
 8029e4c:	0019      	movs	r1, r3
 8029e4e:	f7d8 fd81 	bl	8002954 <__aeabi_dmul>
 8029e52:	2200      	movs	r2, #0
 8029e54:	4b7c      	ldr	r3, [pc, #496]	@ (802a048 <__ieee754_pow+0x7dc>)
 8029e56:	0004      	movs	r4, r0
 8029e58:	000d      	movs	r5, r1
 8029e5a:	f7d7 fd7b 	bl	8001954 <__aeabi_dadd>
 8029e5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029e60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029e62:	f7d7 fd77 	bl	8001954 <__aeabi_dadd>
 8029e66:	2000      	movs	r0, #0
 8029e68:	000f      	movs	r7, r1
 8029e6a:	0006      	movs	r6, r0
 8029e6c:	0002      	movs	r2, r0
 8029e6e:	000b      	movs	r3, r1
 8029e70:	9800      	ldr	r0, [sp, #0]
 8029e72:	9901      	ldr	r1, [sp, #4]
 8029e74:	f7d8 fd6e 	bl	8002954 <__aeabi_dmul>
 8029e78:	2200      	movs	r2, #0
 8029e7a:	9000      	str	r0, [sp, #0]
 8029e7c:	9101      	str	r1, [sp, #4]
 8029e7e:	4b72      	ldr	r3, [pc, #456]	@ (802a048 <__ieee754_pow+0x7dc>)
 8029e80:	0030      	movs	r0, r6
 8029e82:	0039      	movs	r1, r7
 8029e84:	f7d9 f84c 	bl	8002f20 <__aeabi_dsub>
 8029e88:	0022      	movs	r2, r4
 8029e8a:	002b      	movs	r3, r5
 8029e8c:	f7d9 f848 	bl	8002f20 <__aeabi_dsub>
 8029e90:	0002      	movs	r2, r0
 8029e92:	000b      	movs	r3, r1
 8029e94:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8029e96:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8029e98:	f7d9 f842 	bl	8002f20 <__aeabi_dsub>
 8029e9c:	9a08      	ldr	r2, [sp, #32]
 8029e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029ea0:	f7d8 fd58 	bl	8002954 <__aeabi_dmul>
 8029ea4:	0032      	movs	r2, r6
 8029ea6:	0004      	movs	r4, r0
 8029ea8:	000d      	movs	r5, r1
 8029eaa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029eac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029eae:	003b      	movs	r3, r7
 8029eb0:	f7d8 fd50 	bl	8002954 <__aeabi_dmul>
 8029eb4:	0002      	movs	r2, r0
 8029eb6:	000b      	movs	r3, r1
 8029eb8:	0020      	movs	r0, r4
 8029eba:	0029      	movs	r1, r5
 8029ebc:	f7d7 fd4a 	bl	8001954 <__aeabi_dadd>
 8029ec0:	0004      	movs	r4, r0
 8029ec2:	000d      	movs	r5, r1
 8029ec4:	0002      	movs	r2, r0
 8029ec6:	000b      	movs	r3, r1
 8029ec8:	9800      	ldr	r0, [sp, #0]
 8029eca:	9901      	ldr	r1, [sp, #4]
 8029ecc:	f7d7 fd42 	bl	8001954 <__aeabi_dadd>
 8029ed0:	22e0      	movs	r2, #224	@ 0xe0
 8029ed2:	2000      	movs	r0, #0
 8029ed4:	4b5d      	ldr	r3, [pc, #372]	@ (802a04c <__ieee754_pow+0x7e0>)
 8029ed6:	0612      	lsls	r2, r2, #24
 8029ed8:	0006      	movs	r6, r0
 8029eda:	000f      	movs	r7, r1
 8029edc:	f7d8 fd3a 	bl	8002954 <__aeabi_dmul>
 8029ee0:	9008      	str	r0, [sp, #32]
 8029ee2:	9109      	str	r1, [sp, #36]	@ 0x24
 8029ee4:	9a00      	ldr	r2, [sp, #0]
 8029ee6:	9b01      	ldr	r3, [sp, #4]
 8029ee8:	0030      	movs	r0, r6
 8029eea:	0039      	movs	r1, r7
 8029eec:	f7d9 f818 	bl	8002f20 <__aeabi_dsub>
 8029ef0:	0002      	movs	r2, r0
 8029ef2:	000b      	movs	r3, r1
 8029ef4:	0020      	movs	r0, r4
 8029ef6:	0029      	movs	r1, r5
 8029ef8:	f7d9 f812 	bl	8002f20 <__aeabi_dsub>
 8029efc:	4a54      	ldr	r2, [pc, #336]	@ (802a050 <__ieee754_pow+0x7e4>)
 8029efe:	4b53      	ldr	r3, [pc, #332]	@ (802a04c <__ieee754_pow+0x7e0>)
 8029f00:	f7d8 fd28 	bl	8002954 <__aeabi_dmul>
 8029f04:	4a53      	ldr	r2, [pc, #332]	@ (802a054 <__ieee754_pow+0x7e8>)
 8029f06:	0004      	movs	r4, r0
 8029f08:	000d      	movs	r5, r1
 8029f0a:	0030      	movs	r0, r6
 8029f0c:	0039      	movs	r1, r7
 8029f0e:	4b52      	ldr	r3, [pc, #328]	@ (802a058 <__ieee754_pow+0x7ec>)
 8029f10:	f7d8 fd20 	bl	8002954 <__aeabi_dmul>
 8029f14:	0002      	movs	r2, r0
 8029f16:	000b      	movs	r3, r1
 8029f18:	0020      	movs	r0, r4
 8029f1a:	0029      	movs	r1, r5
 8029f1c:	f7d7 fd1a 	bl	8001954 <__aeabi_dadd>
 8029f20:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029f22:	4b4e      	ldr	r3, [pc, #312]	@ (802a05c <__ieee754_pow+0x7f0>)
 8029f24:	189b      	adds	r3, r3, r2
 8029f26:	681a      	ldr	r2, [r3, #0]
 8029f28:	685b      	ldr	r3, [r3, #4]
 8029f2a:	f7d7 fd13 	bl	8001954 <__aeabi_dadd>
 8029f2e:	900a      	str	r0, [sp, #40]	@ 0x28
 8029f30:	910b      	str	r1, [sp, #44]	@ 0x2c
 8029f32:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029f34:	f7d9 fc5c 	bl	80037f0 <__aeabi_i2d>
 8029f38:	0004      	movs	r4, r0
 8029f3a:	000d      	movs	r5, r1
 8029f3c:	9808      	ldr	r0, [sp, #32]
 8029f3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029f40:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029f42:	4b47      	ldr	r3, [pc, #284]	@ (802a060 <__ieee754_pow+0x7f4>)
 8029f44:	189b      	adds	r3, r3, r2
 8029f46:	681e      	ldr	r6, [r3, #0]
 8029f48:	685f      	ldr	r7, [r3, #4]
 8029f4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8029f4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029f4e:	f7d7 fd01 	bl	8001954 <__aeabi_dadd>
 8029f52:	0032      	movs	r2, r6
 8029f54:	003b      	movs	r3, r7
 8029f56:	f7d7 fcfd 	bl	8001954 <__aeabi_dadd>
 8029f5a:	0022      	movs	r2, r4
 8029f5c:	002b      	movs	r3, r5
 8029f5e:	f7d7 fcf9 	bl	8001954 <__aeabi_dadd>
 8029f62:	2000      	movs	r0, #0
 8029f64:	0022      	movs	r2, r4
 8029f66:	002b      	movs	r3, r5
 8029f68:	9000      	str	r0, [sp, #0]
 8029f6a:	9101      	str	r1, [sp, #4]
 8029f6c:	f7d8 ffd8 	bl	8002f20 <__aeabi_dsub>
 8029f70:	0032      	movs	r2, r6
 8029f72:	003b      	movs	r3, r7
 8029f74:	f7d8 ffd4 	bl	8002f20 <__aeabi_dsub>
 8029f78:	9a08      	ldr	r2, [sp, #32]
 8029f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029f7c:	f7d8 ffd0 	bl	8002f20 <__aeabi_dsub>
 8029f80:	0002      	movs	r2, r0
 8029f82:	000b      	movs	r3, r1
 8029f84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8029f86:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8029f88:	e61f      	b.n	8029bca <__ieee754_pow+0x35e>
 8029f8a:	4a36      	ldr	r2, [pc, #216]	@ (802a064 <__ieee754_pow+0x7f8>)
 8029f8c:	4b36      	ldr	r3, [pc, #216]	@ (802a068 <__ieee754_pow+0x7fc>)
 8029f8e:	9804      	ldr	r0, [sp, #16]
 8029f90:	9905      	ldr	r1, [sp, #20]
 8029f92:	f7d7 fcdf 	bl	8001954 <__aeabi_dadd>
 8029f96:	9a00      	ldr	r2, [sp, #0]
 8029f98:	9b01      	ldr	r3, [sp, #4]
 8029f9a:	0004      	movs	r4, r0
 8029f9c:	000d      	movs	r5, r1
 8029f9e:	0030      	movs	r0, r6
 8029fa0:	0039      	movs	r1, r7
 8029fa2:	f7d8 ffbd 	bl	8002f20 <__aeabi_dsub>
 8029fa6:	0002      	movs	r2, r0
 8029fa8:	000b      	movs	r3, r1
 8029faa:	0020      	movs	r0, r4
 8029fac:	0029      	movs	r1, r5
 8029fae:	f7d6 fa99 	bl	80004e4 <__aeabi_dcmpgt>
 8029fb2:	2800      	cmp	r0, #0
 8029fb4:	d000      	beq.n	8029fb8 <__ieee754_pow+0x74c>
 8029fb6:	e646      	b.n	8029c46 <__ieee754_pow+0x3da>
 8029fb8:	4b2c      	ldr	r3, [pc, #176]	@ (802a06c <__ieee754_pow+0x800>)
 8029fba:	e063      	b.n	802a084 <__ieee754_pow+0x818>
 8029fbc:	4a2c      	ldr	r2, [pc, #176]	@ (802a070 <__ieee754_pow+0x804>)
 8029fbe:	004b      	lsls	r3, r1, #1
 8029fc0:	085b      	lsrs	r3, r3, #1
 8029fc2:	4293      	cmp	r3, r2
 8029fc4:	d95a      	bls.n	802a07c <__ieee754_pow+0x810>
 8029fc6:	4b2b      	ldr	r3, [pc, #172]	@ (802a074 <__ieee754_pow+0x808>)
 8029fc8:	18cb      	adds	r3, r1, r3
 8029fca:	4303      	orrs	r3, r0
 8029fcc:	d008      	beq.n	8029fe0 <__ieee754_pow+0x774>
 8029fce:	9806      	ldr	r0, [sp, #24]
 8029fd0:	9907      	ldr	r1, [sp, #28]
 8029fd2:	2300      	movs	r3, #0
 8029fd4:	2200      	movs	r2, #0
 8029fd6:	f7d6 fa71 	bl	80004bc <__aeabi_dcmplt>
 8029fda:	1e43      	subs	r3, r0, #1
 8029fdc:	4198      	sbcs	r0, r3
 8029fde:	e567      	b.n	8029ab0 <__ieee754_pow+0x244>
 8029fe0:	9a00      	ldr	r2, [sp, #0]
 8029fe2:	9b01      	ldr	r3, [sp, #4]
 8029fe4:	f7d8 ff9c 	bl	8002f20 <__aeabi_dsub>
 8029fe8:	9a04      	ldr	r2, [sp, #16]
 8029fea:	9b05      	ldr	r3, [sp, #20]
 8029fec:	f7d6 fa84 	bl	80004f8 <__aeabi_dcmpge>
 8029ff0:	2800      	cmp	r0, #0
 8029ff2:	d1ec      	bne.n	8029fce <__ieee754_pow+0x762>
 8029ff4:	4b20      	ldr	r3, [pc, #128]	@ (802a078 <__ieee754_pow+0x80c>)
 8029ff6:	e045      	b.n	802a084 <__ieee754_pow+0x818>
 8029ff8:	7ff00000 	.word	0x7ff00000
 8029ffc:	43400000 	.word	0x43400000
 802a000:	fffffc01 	.word	0xfffffc01
 802a004:	3ff00000 	.word	0x3ff00000
 802a008:	0003988e 	.word	0x0003988e
 802a00c:	000bb679 	.word	0x000bb679
 802a010:	fff00000 	.word	0xfff00000
 802a014:	0802f390 	.word	0x0802f390
 802a018:	4a454eef 	.word	0x4a454eef
 802a01c:	3fca7e28 	.word	0x3fca7e28
 802a020:	93c9db65 	.word	0x93c9db65
 802a024:	3fcd864a 	.word	0x3fcd864a
 802a028:	a91d4101 	.word	0xa91d4101
 802a02c:	3fd17460 	.word	0x3fd17460
 802a030:	518f264d 	.word	0x518f264d
 802a034:	3fd55555 	.word	0x3fd55555
 802a038:	db6fabff 	.word	0xdb6fabff
 802a03c:	3fdb6db6 	.word	0x3fdb6db6
 802a040:	33333303 	.word	0x33333303
 802a044:	3fe33333 	.word	0x3fe33333
 802a048:	40080000 	.word	0x40080000
 802a04c:	3feec709 	.word	0x3feec709
 802a050:	dc3a03fd 	.word	0xdc3a03fd
 802a054:	145b01f5 	.word	0x145b01f5
 802a058:	be3e2fe0 	.word	0xbe3e2fe0
 802a05c:	0802f370 	.word	0x0802f370
 802a060:	0802f380 	.word	0x0802f380
 802a064:	652b82fe 	.word	0x652b82fe
 802a068:	3c971547 	.word	0x3c971547
 802a06c:	40900000 	.word	0x40900000
 802a070:	4090cbff 	.word	0x4090cbff
 802a074:	3f6f3400 	.word	0x3f6f3400
 802a078:	4090cc00 	.word	0x4090cc00
 802a07c:	4a73      	ldr	r2, [pc, #460]	@ (802a24c <__ieee754_pow+0x9e0>)
 802a07e:	9402      	str	r4, [sp, #8]
 802a080:	4293      	cmp	r3, r2
 802a082:	d925      	bls.n	802a0d0 <__ieee754_pow+0x864>
 802a084:	4a72      	ldr	r2, [pc, #456]	@ (802a250 <__ieee754_pow+0x9e4>)
 802a086:	151b      	asrs	r3, r3, #20
 802a088:	189b      	adds	r3, r3, r2
 802a08a:	2280      	movs	r2, #128	@ 0x80
 802a08c:	0352      	lsls	r2, r2, #13
 802a08e:	0011      	movs	r1, r2
 802a090:	4119      	asrs	r1, r3
 802a092:	19cb      	adds	r3, r1, r7
 802a094:	005c      	lsls	r4, r3, #1
 802a096:	496f      	ldr	r1, [pc, #444]	@ (802a254 <__ieee754_pow+0x9e8>)
 802a098:	4d6f      	ldr	r5, [pc, #444]	@ (802a258 <__ieee754_pow+0x9ec>)
 802a09a:	0d64      	lsrs	r4, r4, #21
 802a09c:	1864      	adds	r4, r4, r1
 802a09e:	4125      	asrs	r5, r4
 802a0a0:	401d      	ands	r5, r3
 802a0a2:	031b      	lsls	r3, r3, #12
 802a0a4:	0b1b      	lsrs	r3, r3, #12
 802a0a6:	4313      	orrs	r3, r2
 802a0a8:	2214      	movs	r2, #20
 802a0aa:	1b12      	subs	r2, r2, r4
 802a0ac:	4113      	asrs	r3, r2
 802a0ae:	9302      	str	r3, [sp, #8]
 802a0b0:	9b08      	ldr	r3, [sp, #32]
 802a0b2:	2000      	movs	r0, #0
 802a0b4:	0029      	movs	r1, r5
 802a0b6:	2b00      	cmp	r3, #0
 802a0b8:	da02      	bge.n	802a0c0 <__ieee754_pow+0x854>
 802a0ba:	9b02      	ldr	r3, [sp, #8]
 802a0bc:	425b      	negs	r3, r3
 802a0be:	9302      	str	r3, [sp, #8]
 802a0c0:	0002      	movs	r2, r0
 802a0c2:	000b      	movs	r3, r1
 802a0c4:	9800      	ldr	r0, [sp, #0]
 802a0c6:	9901      	ldr	r1, [sp, #4]
 802a0c8:	f7d8 ff2a 	bl	8002f20 <__aeabi_dsub>
 802a0cc:	9000      	str	r0, [sp, #0]
 802a0ce:	9101      	str	r1, [sp, #4]
 802a0d0:	9a04      	ldr	r2, [sp, #16]
 802a0d2:	9b05      	ldr	r3, [sp, #20]
 802a0d4:	9800      	ldr	r0, [sp, #0]
 802a0d6:	9901      	ldr	r1, [sp, #4]
 802a0d8:	f7d7 fc3c 	bl	8001954 <__aeabi_dadd>
 802a0dc:	2000      	movs	r0, #0
 802a0de:	2200      	movs	r2, #0
 802a0e0:	4b5e      	ldr	r3, [pc, #376]	@ (802a25c <__ieee754_pow+0x9f0>)
 802a0e2:	0006      	movs	r6, r0
 802a0e4:	000f      	movs	r7, r1
 802a0e6:	f7d8 fc35 	bl	8002954 <__aeabi_dmul>
 802a0ea:	9a00      	ldr	r2, [sp, #0]
 802a0ec:	9b01      	ldr	r3, [sp, #4]
 802a0ee:	9008      	str	r0, [sp, #32]
 802a0f0:	9109      	str	r1, [sp, #36]	@ 0x24
 802a0f2:	0030      	movs	r0, r6
 802a0f4:	0039      	movs	r1, r7
 802a0f6:	f7d8 ff13 	bl	8002f20 <__aeabi_dsub>
 802a0fa:	0002      	movs	r2, r0
 802a0fc:	000b      	movs	r3, r1
 802a0fe:	9804      	ldr	r0, [sp, #16]
 802a100:	9905      	ldr	r1, [sp, #20]
 802a102:	f7d8 ff0d 	bl	8002f20 <__aeabi_dsub>
 802a106:	4a56      	ldr	r2, [pc, #344]	@ (802a260 <__ieee754_pow+0x9f4>)
 802a108:	4b56      	ldr	r3, [pc, #344]	@ (802a264 <__ieee754_pow+0x9f8>)
 802a10a:	f7d8 fc23 	bl	8002954 <__aeabi_dmul>
 802a10e:	4a56      	ldr	r2, [pc, #344]	@ (802a268 <__ieee754_pow+0x9fc>)
 802a110:	0004      	movs	r4, r0
 802a112:	000d      	movs	r5, r1
 802a114:	0030      	movs	r0, r6
 802a116:	0039      	movs	r1, r7
 802a118:	4b54      	ldr	r3, [pc, #336]	@ (802a26c <__ieee754_pow+0xa00>)
 802a11a:	f7d8 fc1b 	bl	8002954 <__aeabi_dmul>
 802a11e:	0002      	movs	r2, r0
 802a120:	000b      	movs	r3, r1
 802a122:	0020      	movs	r0, r4
 802a124:	0029      	movs	r1, r5
 802a126:	f7d7 fc15 	bl	8001954 <__aeabi_dadd>
 802a12a:	0004      	movs	r4, r0
 802a12c:	000d      	movs	r5, r1
 802a12e:	0002      	movs	r2, r0
 802a130:	000b      	movs	r3, r1
 802a132:	9808      	ldr	r0, [sp, #32]
 802a134:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a136:	f7d7 fc0d 	bl	8001954 <__aeabi_dadd>
 802a13a:	9a08      	ldr	r2, [sp, #32]
 802a13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a13e:	0006      	movs	r6, r0
 802a140:	000f      	movs	r7, r1
 802a142:	f7d8 feed 	bl	8002f20 <__aeabi_dsub>
 802a146:	0002      	movs	r2, r0
 802a148:	000b      	movs	r3, r1
 802a14a:	0020      	movs	r0, r4
 802a14c:	0029      	movs	r1, r5
 802a14e:	f7d8 fee7 	bl	8002f20 <__aeabi_dsub>
 802a152:	0032      	movs	r2, r6
 802a154:	9000      	str	r0, [sp, #0]
 802a156:	9101      	str	r1, [sp, #4]
 802a158:	003b      	movs	r3, r7
 802a15a:	0030      	movs	r0, r6
 802a15c:	0039      	movs	r1, r7
 802a15e:	f7d8 fbf9 	bl	8002954 <__aeabi_dmul>
 802a162:	0004      	movs	r4, r0
 802a164:	000d      	movs	r5, r1
 802a166:	4a42      	ldr	r2, [pc, #264]	@ (802a270 <__ieee754_pow+0xa04>)
 802a168:	4b42      	ldr	r3, [pc, #264]	@ (802a274 <__ieee754_pow+0xa08>)
 802a16a:	f7d8 fbf3 	bl	8002954 <__aeabi_dmul>
 802a16e:	4a42      	ldr	r2, [pc, #264]	@ (802a278 <__ieee754_pow+0xa0c>)
 802a170:	4b42      	ldr	r3, [pc, #264]	@ (802a27c <__ieee754_pow+0xa10>)
 802a172:	f7d8 fed5 	bl	8002f20 <__aeabi_dsub>
 802a176:	0022      	movs	r2, r4
 802a178:	002b      	movs	r3, r5
 802a17a:	f7d8 fbeb 	bl	8002954 <__aeabi_dmul>
 802a17e:	4a40      	ldr	r2, [pc, #256]	@ (802a280 <__ieee754_pow+0xa14>)
 802a180:	4b40      	ldr	r3, [pc, #256]	@ (802a284 <__ieee754_pow+0xa18>)
 802a182:	f7d7 fbe7 	bl	8001954 <__aeabi_dadd>
 802a186:	0022      	movs	r2, r4
 802a188:	002b      	movs	r3, r5
 802a18a:	f7d8 fbe3 	bl	8002954 <__aeabi_dmul>
 802a18e:	4a3e      	ldr	r2, [pc, #248]	@ (802a288 <__ieee754_pow+0xa1c>)
 802a190:	4b3e      	ldr	r3, [pc, #248]	@ (802a28c <__ieee754_pow+0xa20>)
 802a192:	f7d8 fec5 	bl	8002f20 <__aeabi_dsub>
 802a196:	0022      	movs	r2, r4
 802a198:	002b      	movs	r3, r5
 802a19a:	f7d8 fbdb 	bl	8002954 <__aeabi_dmul>
 802a19e:	4a3c      	ldr	r2, [pc, #240]	@ (802a290 <__ieee754_pow+0xa24>)
 802a1a0:	4b3c      	ldr	r3, [pc, #240]	@ (802a294 <__ieee754_pow+0xa28>)
 802a1a2:	f7d7 fbd7 	bl	8001954 <__aeabi_dadd>
 802a1a6:	0022      	movs	r2, r4
 802a1a8:	002b      	movs	r3, r5
 802a1aa:	f7d8 fbd3 	bl	8002954 <__aeabi_dmul>
 802a1ae:	0002      	movs	r2, r0
 802a1b0:	000b      	movs	r3, r1
 802a1b2:	0030      	movs	r0, r6
 802a1b4:	0039      	movs	r1, r7
 802a1b6:	f7d8 feb3 	bl	8002f20 <__aeabi_dsub>
 802a1ba:	0004      	movs	r4, r0
 802a1bc:	000d      	movs	r5, r1
 802a1be:	0002      	movs	r2, r0
 802a1c0:	000b      	movs	r3, r1
 802a1c2:	0030      	movs	r0, r6
 802a1c4:	0039      	movs	r1, r7
 802a1c6:	f7d8 fbc5 	bl	8002954 <__aeabi_dmul>
 802a1ca:	2380      	movs	r3, #128	@ 0x80
 802a1cc:	9004      	str	r0, [sp, #16]
 802a1ce:	9105      	str	r1, [sp, #20]
 802a1d0:	2200      	movs	r2, #0
 802a1d2:	0020      	movs	r0, r4
 802a1d4:	0029      	movs	r1, r5
 802a1d6:	05db      	lsls	r3, r3, #23
 802a1d8:	f7d8 fea2 	bl	8002f20 <__aeabi_dsub>
 802a1dc:	0002      	movs	r2, r0
 802a1de:	000b      	movs	r3, r1
 802a1e0:	9804      	ldr	r0, [sp, #16]
 802a1e2:	9905      	ldr	r1, [sp, #20]
 802a1e4:	f7d7 ff7c 	bl	80020e0 <__aeabi_ddiv>
 802a1e8:	9a00      	ldr	r2, [sp, #0]
 802a1ea:	9b01      	ldr	r3, [sp, #4]
 802a1ec:	0004      	movs	r4, r0
 802a1ee:	000d      	movs	r5, r1
 802a1f0:	0030      	movs	r0, r6
 802a1f2:	0039      	movs	r1, r7
 802a1f4:	f7d8 fbae 	bl	8002954 <__aeabi_dmul>
 802a1f8:	9a00      	ldr	r2, [sp, #0]
 802a1fa:	9b01      	ldr	r3, [sp, #4]
 802a1fc:	f7d7 fbaa 	bl	8001954 <__aeabi_dadd>
 802a200:	0002      	movs	r2, r0
 802a202:	000b      	movs	r3, r1
 802a204:	0020      	movs	r0, r4
 802a206:	0029      	movs	r1, r5
 802a208:	f7d8 fe8a 	bl	8002f20 <__aeabi_dsub>
 802a20c:	0032      	movs	r2, r6
 802a20e:	003b      	movs	r3, r7
 802a210:	f7d8 fe86 	bl	8002f20 <__aeabi_dsub>
 802a214:	0002      	movs	r2, r0
 802a216:	000b      	movs	r3, r1
 802a218:	2000      	movs	r0, #0
 802a21a:	491f      	ldr	r1, [pc, #124]	@ (802a298 <__ieee754_pow+0xa2c>)
 802a21c:	f7d8 fe80 	bl	8002f20 <__aeabi_dsub>
 802a220:	9b02      	ldr	r3, [sp, #8]
 802a222:	051b      	lsls	r3, r3, #20
 802a224:	185b      	adds	r3, r3, r1
 802a226:	151a      	asrs	r2, r3, #20
 802a228:	2a00      	cmp	r2, #0
 802a22a:	dc06      	bgt.n	802a23a <__ieee754_pow+0x9ce>
 802a22c:	9a02      	ldr	r2, [sp, #8]
 802a22e:	f000 f929 	bl	802a484 <scalbn>
 802a232:	9a06      	ldr	r2, [sp, #24]
 802a234:	9b07      	ldr	r3, [sp, #28]
 802a236:	f7ff fb8b 	bl	8029950 <__ieee754_pow+0xe4>
 802a23a:	0019      	movs	r1, r3
 802a23c:	e7f9      	b.n	802a232 <__ieee754_pow+0x9c6>
 802a23e:	2300      	movs	r3, #0
 802a240:	4c15      	ldr	r4, [pc, #84]	@ (802a298 <__ieee754_pow+0xa2c>)
 802a242:	9300      	str	r3, [sp, #0]
 802a244:	9401      	str	r4, [sp, #4]
 802a246:	f7ff fbc8 	bl	80299da <__ieee754_pow+0x16e>
 802a24a:	46c0      	nop			@ (mov r8, r8)
 802a24c:	3fe00000 	.word	0x3fe00000
 802a250:	fffffc02 	.word	0xfffffc02
 802a254:	fffffc01 	.word	0xfffffc01
 802a258:	fff00000 	.word	0xfff00000
 802a25c:	3fe62e43 	.word	0x3fe62e43
 802a260:	fefa39ef 	.word	0xfefa39ef
 802a264:	3fe62e42 	.word	0x3fe62e42
 802a268:	0ca86c39 	.word	0x0ca86c39
 802a26c:	be205c61 	.word	0xbe205c61
 802a270:	72bea4d0 	.word	0x72bea4d0
 802a274:	3e663769 	.word	0x3e663769
 802a278:	c5d26bf1 	.word	0xc5d26bf1
 802a27c:	3ebbbd41 	.word	0x3ebbbd41
 802a280:	af25de2c 	.word	0xaf25de2c
 802a284:	3f11566a 	.word	0x3f11566a
 802a288:	16bebd93 	.word	0x16bebd93
 802a28c:	3f66c16c 	.word	0x3f66c16c
 802a290:	5555553e 	.word	0x5555553e
 802a294:	3fc55555 	.word	0x3fc55555
 802a298:	3ff00000 	.word	0x3ff00000

0802a29c <fabs>:
 802a29c:	0049      	lsls	r1, r1, #1
 802a29e:	084b      	lsrs	r3, r1, #1
 802a2a0:	0019      	movs	r1, r3
 802a2a2:	4770      	bx	lr

0802a2a4 <__ieee754_expf>:
 802a2a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a2a6:	21ff      	movs	r1, #255	@ 0xff
 802a2a8:	0043      	lsls	r3, r0, #1
 802a2aa:	1c04      	adds	r4, r0, #0
 802a2ac:	085b      	lsrs	r3, r3, #1
 802a2ae:	05c9      	lsls	r1, r1, #23
 802a2b0:	428b      	cmp	r3, r1
 802a2b2:	d904      	bls.n	802a2be <__ieee754_expf+0x1a>
 802a2b4:	1c01      	adds	r1, r0, #0
 802a2b6:	1c20      	adds	r0, r4, #0
 802a2b8:	f7d6 fb02 	bl	80008c0 <__aeabi_fadd>
 802a2bc:	e00d      	b.n	802a2da <__ieee754_expf+0x36>
 802a2be:	0fc6      	lsrs	r6, r0, #31
 802a2c0:	428b      	cmp	r3, r1
 802a2c2:	d104      	bne.n	802a2ce <__ieee754_expf+0x2a>
 802a2c4:	2e00      	cmp	r6, #0
 802a2c6:	d000      	beq.n	802a2ca <__ieee754_expf+0x26>
 802a2c8:	e0ba      	b.n	802a440 <__ieee754_expf+0x19c>
 802a2ca:	1c20      	adds	r0, r4, #0
 802a2cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802a2ce:	495d      	ldr	r1, [pc, #372]	@ (802a444 <__ieee754_expf+0x1a0>)
 802a2d0:	4288      	cmp	r0, r1
 802a2d2:	dd04      	ble.n	802a2de <__ieee754_expf+0x3a>
 802a2d4:	2000      	movs	r0, #0
 802a2d6:	f000 f98a 	bl	802a5ee <__math_oflowf>
 802a2da:	1c04      	adds	r4, r0, #0
 802a2dc:	e7f5      	b.n	802a2ca <__ieee754_expf+0x26>
 802a2de:	2800      	cmp	r0, #0
 802a2e0:	da06      	bge.n	802a2f0 <__ieee754_expf+0x4c>
 802a2e2:	4a59      	ldr	r2, [pc, #356]	@ (802a448 <__ieee754_expf+0x1a4>)
 802a2e4:	4293      	cmp	r3, r2
 802a2e6:	d903      	bls.n	802a2f0 <__ieee754_expf+0x4c>
 802a2e8:	2000      	movs	r0, #0
 802a2ea:	f000 f97a 	bl	802a5e2 <__math_uflowf>
 802a2ee:	e7f4      	b.n	802a2da <__ieee754_expf+0x36>
 802a2f0:	4a56      	ldr	r2, [pc, #344]	@ (802a44c <__ieee754_expf+0x1a8>)
 802a2f2:	4293      	cmp	r3, r2
 802a2f4:	d96e      	bls.n	802a3d4 <__ieee754_expf+0x130>
 802a2f6:	4a56      	ldr	r2, [pc, #344]	@ (802a450 <__ieee754_expf+0x1ac>)
 802a2f8:	00b5      	lsls	r5, r6, #2
 802a2fa:	4293      	cmp	r3, r2
 802a2fc:	d84e      	bhi.n	802a39c <__ieee754_expf+0xf8>
 802a2fe:	4b55      	ldr	r3, [pc, #340]	@ (802a454 <__ieee754_expf+0x1b0>)
 802a300:	1c20      	adds	r0, r4, #0
 802a302:	5959      	ldr	r1, [r3, r5]
 802a304:	f7d6 fff6 	bl	80012f4 <__aeabi_fsub>
 802a308:	4b53      	ldr	r3, [pc, #332]	@ (802a458 <__ieee754_expf+0x1b4>)
 802a30a:	1c07      	adds	r7, r0, #0
 802a30c:	595b      	ldr	r3, [r3, r5]
 802a30e:	2501      	movs	r5, #1
 802a310:	4075      	eors	r5, r6
 802a312:	9300      	str	r3, [sp, #0]
 802a314:	1bad      	subs	r5, r5, r6
 802a316:	9900      	ldr	r1, [sp, #0]
 802a318:	1c38      	adds	r0, r7, #0
 802a31a:	f7d6 ffeb 	bl	80012f4 <__aeabi_fsub>
 802a31e:	1c04      	adds	r4, r0, #0
 802a320:	1c21      	adds	r1, r4, #0
 802a322:	1c20      	adds	r0, r4, #0
 802a324:	f7d6 fe8c 	bl	8001040 <__aeabi_fmul>
 802a328:	494c      	ldr	r1, [pc, #304]	@ (802a45c <__ieee754_expf+0x1b8>)
 802a32a:	1c06      	adds	r6, r0, #0
 802a32c:	f7d6 fe88 	bl	8001040 <__aeabi_fmul>
 802a330:	494b      	ldr	r1, [pc, #300]	@ (802a460 <__ieee754_expf+0x1bc>)
 802a332:	f7d6 ffdf 	bl	80012f4 <__aeabi_fsub>
 802a336:	1c31      	adds	r1, r6, #0
 802a338:	f7d6 fe82 	bl	8001040 <__aeabi_fmul>
 802a33c:	4949      	ldr	r1, [pc, #292]	@ (802a464 <__ieee754_expf+0x1c0>)
 802a33e:	f7d6 fabf 	bl	80008c0 <__aeabi_fadd>
 802a342:	1c31      	adds	r1, r6, #0
 802a344:	f7d6 fe7c 	bl	8001040 <__aeabi_fmul>
 802a348:	4947      	ldr	r1, [pc, #284]	@ (802a468 <__ieee754_expf+0x1c4>)
 802a34a:	f7d6 ffd3 	bl	80012f4 <__aeabi_fsub>
 802a34e:	1c31      	adds	r1, r6, #0
 802a350:	f7d6 fe76 	bl	8001040 <__aeabi_fmul>
 802a354:	4945      	ldr	r1, [pc, #276]	@ (802a46c <__ieee754_expf+0x1c8>)
 802a356:	f7d6 fab3 	bl	80008c0 <__aeabi_fadd>
 802a35a:	1c31      	adds	r1, r6, #0
 802a35c:	f7d6 fe70 	bl	8001040 <__aeabi_fmul>
 802a360:	1c01      	adds	r1, r0, #0
 802a362:	1c20      	adds	r0, r4, #0
 802a364:	f7d6 ffc6 	bl	80012f4 <__aeabi_fsub>
 802a368:	1c01      	adds	r1, r0, #0
 802a36a:	1c06      	adds	r6, r0, #0
 802a36c:	1c20      	adds	r0, r4, #0
 802a36e:	f7d6 fe67 	bl	8001040 <__aeabi_fmul>
 802a372:	9001      	str	r0, [sp, #4]
 802a374:	2d00      	cmp	r5, #0
 802a376:	d140      	bne.n	802a3fa <__ieee754_expf+0x156>
 802a378:	2180      	movs	r1, #128	@ 0x80
 802a37a:	1c30      	adds	r0, r6, #0
 802a37c:	05c9      	lsls	r1, r1, #23
 802a37e:	f7d6 ffb9 	bl	80012f4 <__aeabi_fsub>
 802a382:	1c01      	adds	r1, r0, #0
 802a384:	9801      	ldr	r0, [sp, #4]
 802a386:	f7d6 fc8d 	bl	8000ca4 <__aeabi_fdiv>
 802a38a:	1c21      	adds	r1, r4, #0
 802a38c:	f7d6 ffb2 	bl	80012f4 <__aeabi_fsub>
 802a390:	1c01      	adds	r1, r0, #0
 802a392:	20fe      	movs	r0, #254	@ 0xfe
 802a394:	0580      	lsls	r0, r0, #22
 802a396:	f7d6 ffad 	bl	80012f4 <__aeabi_fsub>
 802a39a:	e79e      	b.n	802a2da <__ieee754_expf+0x36>
 802a39c:	4934      	ldr	r1, [pc, #208]	@ (802a470 <__ieee754_expf+0x1cc>)
 802a39e:	1c20      	adds	r0, r4, #0
 802a3a0:	f7d6 fe4e 	bl	8001040 <__aeabi_fmul>
 802a3a4:	4b33      	ldr	r3, [pc, #204]	@ (802a474 <__ieee754_expf+0x1d0>)
 802a3a6:	5959      	ldr	r1, [r3, r5]
 802a3a8:	f7d6 fa8a 	bl	80008c0 <__aeabi_fadd>
 802a3ac:	f7d7 fa1c 	bl	80017e8 <__aeabi_f2iz>
 802a3b0:	0005      	movs	r5, r0
 802a3b2:	f7d7 fa39 	bl	8001828 <__aeabi_i2f>
 802a3b6:	4930      	ldr	r1, [pc, #192]	@ (802a478 <__ieee754_expf+0x1d4>)
 802a3b8:	1c06      	adds	r6, r0, #0
 802a3ba:	f7d6 fe41 	bl	8001040 <__aeabi_fmul>
 802a3be:	1c01      	adds	r1, r0, #0
 802a3c0:	1c20      	adds	r0, r4, #0
 802a3c2:	f7d6 ff97 	bl	80012f4 <__aeabi_fsub>
 802a3c6:	492d      	ldr	r1, [pc, #180]	@ (802a47c <__ieee754_expf+0x1d8>)
 802a3c8:	1c07      	adds	r7, r0, #0
 802a3ca:	1c30      	adds	r0, r6, #0
 802a3cc:	f7d6 fe38 	bl	8001040 <__aeabi_fmul>
 802a3d0:	9000      	str	r0, [sp, #0]
 802a3d2:	e7a0      	b.n	802a316 <__ieee754_expf+0x72>
 802a3d4:	22d0      	movs	r2, #208	@ 0xd0
 802a3d6:	0592      	lsls	r2, r2, #22
 802a3d8:	4293      	cmp	r3, r2
 802a3da:	d20c      	bcs.n	802a3f6 <__ieee754_expf+0x152>
 802a3dc:	4928      	ldr	r1, [pc, #160]	@ (802a480 <__ieee754_expf+0x1dc>)
 802a3de:	1c20      	adds	r0, r4, #0
 802a3e0:	f7d6 fa6e 	bl	80008c0 <__aeabi_fadd>
 802a3e4:	21fe      	movs	r1, #254	@ 0xfe
 802a3e6:	0589      	lsls	r1, r1, #22
 802a3e8:	f7d6 f8b6 	bl	8000558 <__aeabi_fcmpgt>
 802a3ec:	1e05      	subs	r5, r0, #0
 802a3ee:	d097      	beq.n	802a320 <__ieee754_expf+0x7c>
 802a3f0:	21fe      	movs	r1, #254	@ 0xfe
 802a3f2:	0589      	lsls	r1, r1, #22
 802a3f4:	e75f      	b.n	802a2b6 <__ieee754_expf+0x12>
 802a3f6:	2500      	movs	r5, #0
 802a3f8:	e792      	b.n	802a320 <__ieee754_expf+0x7c>
 802a3fa:	2080      	movs	r0, #128	@ 0x80
 802a3fc:	1c31      	adds	r1, r6, #0
 802a3fe:	05c0      	lsls	r0, r0, #23
 802a400:	f7d6 ff78 	bl	80012f4 <__aeabi_fsub>
 802a404:	1c01      	adds	r1, r0, #0
 802a406:	9801      	ldr	r0, [sp, #4]
 802a408:	f7d6 fc4c 	bl	8000ca4 <__aeabi_fdiv>
 802a40c:	1c01      	adds	r1, r0, #0
 802a40e:	9800      	ldr	r0, [sp, #0]
 802a410:	f7d6 ff70 	bl	80012f4 <__aeabi_fsub>
 802a414:	1c39      	adds	r1, r7, #0
 802a416:	f7d6 ff6d 	bl	80012f4 <__aeabi_fsub>
 802a41a:	1c01      	adds	r1, r0, #0
 802a41c:	20fe      	movs	r0, #254	@ 0xfe
 802a41e:	0580      	lsls	r0, r0, #22
 802a420:	f7d6 ff68 	bl	80012f4 <__aeabi_fsub>
 802a424:	002b      	movs	r3, r5
 802a426:	337d      	adds	r3, #125	@ 0x7d
 802a428:	db02      	blt.n	802a430 <__ieee754_expf+0x18c>
 802a42a:	05ec      	lsls	r4, r5, #23
 802a42c:	1824      	adds	r4, r4, r0
 802a42e:	e74c      	b.n	802a2ca <__ieee754_expf+0x26>
 802a430:	21d8      	movs	r1, #216	@ 0xd8
 802a432:	3564      	adds	r5, #100	@ 0x64
 802a434:	05ed      	lsls	r5, r5, #23
 802a436:	1828      	adds	r0, r5, r0
 802a438:	0509      	lsls	r1, r1, #20
 802a43a:	f7d6 fe01 	bl	8001040 <__aeabi_fmul>
 802a43e:	e74c      	b.n	802a2da <__ieee754_expf+0x36>
 802a440:	2400      	movs	r4, #0
 802a442:	e742      	b.n	802a2ca <__ieee754_expf+0x26>
 802a444:	42b17217 	.word	0x42b17217
 802a448:	42cff1b5 	.word	0x42cff1b5
 802a44c:	3eb17218 	.word	0x3eb17218
 802a450:	3f851591 	.word	0x3f851591
 802a454:	0802f3a8 	.word	0x0802f3a8
 802a458:	0802f3a0 	.word	0x0802f3a0
 802a45c:	3331bb4c 	.word	0x3331bb4c
 802a460:	35ddea0e 	.word	0x35ddea0e
 802a464:	388ab355 	.word	0x388ab355
 802a468:	3b360b61 	.word	0x3b360b61
 802a46c:	3e2aaaab 	.word	0x3e2aaaab
 802a470:	3fb8aa3b 	.word	0x3fb8aa3b
 802a474:	0802f3b0 	.word	0x0802f3b0
 802a478:	3f317180 	.word	0x3f317180
 802a47c:	3717f7d1 	.word	0x3717f7d1
 802a480:	7149f2ca 	.word	0x7149f2ca

0802a484 <scalbn>:
 802a484:	004b      	lsls	r3, r1, #1
 802a486:	b570      	push	{r4, r5, r6, lr}
 802a488:	0d5b      	lsrs	r3, r3, #21
 802a48a:	0014      	movs	r4, r2
 802a48c:	000d      	movs	r5, r1
 802a48e:	2b00      	cmp	r3, #0
 802a490:	d10f      	bne.n	802a4b2 <scalbn+0x2e>
 802a492:	004b      	lsls	r3, r1, #1
 802a494:	085b      	lsrs	r3, r3, #1
 802a496:	4303      	orrs	r3, r0
 802a498:	d012      	beq.n	802a4c0 <scalbn+0x3c>
 802a49a:	4b23      	ldr	r3, [pc, #140]	@ (802a528 <scalbn+0xa4>)
 802a49c:	2200      	movs	r2, #0
 802a49e:	f7d8 fa59 	bl	8002954 <__aeabi_dmul>
 802a4a2:	4b22      	ldr	r3, [pc, #136]	@ (802a52c <scalbn+0xa8>)
 802a4a4:	429c      	cmp	r4, r3
 802a4a6:	da0c      	bge.n	802a4c2 <scalbn+0x3e>
 802a4a8:	4a21      	ldr	r2, [pc, #132]	@ (802a530 <scalbn+0xac>)
 802a4aa:	4b22      	ldr	r3, [pc, #136]	@ (802a534 <scalbn+0xb0>)
 802a4ac:	f7d8 fa52 	bl	8002954 <__aeabi_dmul>
 802a4b0:	e006      	b.n	802a4c0 <scalbn+0x3c>
 802a4b2:	4a21      	ldr	r2, [pc, #132]	@ (802a538 <scalbn+0xb4>)
 802a4b4:	4293      	cmp	r3, r2
 802a4b6:	d108      	bne.n	802a4ca <scalbn+0x46>
 802a4b8:	0002      	movs	r2, r0
 802a4ba:	000b      	movs	r3, r1
 802a4bc:	f7d7 fa4a 	bl	8001954 <__aeabi_dadd>
 802a4c0:	bd70      	pop	{r4, r5, r6, pc}
 802a4c2:	000d      	movs	r5, r1
 802a4c4:	004b      	lsls	r3, r1, #1
 802a4c6:	0d5b      	lsrs	r3, r3, #21
 802a4c8:	3b36      	subs	r3, #54	@ 0x36
 802a4ca:	4a1c      	ldr	r2, [pc, #112]	@ (802a53c <scalbn+0xb8>)
 802a4cc:	4294      	cmp	r4, r2
 802a4ce:	dd0a      	ble.n	802a4e6 <scalbn+0x62>
 802a4d0:	4c1b      	ldr	r4, [pc, #108]	@ (802a540 <scalbn+0xbc>)
 802a4d2:	4d1c      	ldr	r5, [pc, #112]	@ (802a544 <scalbn+0xc0>)
 802a4d4:	2900      	cmp	r1, #0
 802a4d6:	da01      	bge.n	802a4dc <scalbn+0x58>
 802a4d8:	4c19      	ldr	r4, [pc, #100]	@ (802a540 <scalbn+0xbc>)
 802a4da:	4d1b      	ldr	r5, [pc, #108]	@ (802a548 <scalbn+0xc4>)
 802a4dc:	4a18      	ldr	r2, [pc, #96]	@ (802a540 <scalbn+0xbc>)
 802a4de:	4b19      	ldr	r3, [pc, #100]	@ (802a544 <scalbn+0xc0>)
 802a4e0:	0020      	movs	r0, r4
 802a4e2:	0029      	movs	r1, r5
 802a4e4:	e7e2      	b.n	802a4ac <scalbn+0x28>
 802a4e6:	18e2      	adds	r2, r4, r3
 802a4e8:	4b18      	ldr	r3, [pc, #96]	@ (802a54c <scalbn+0xc8>)
 802a4ea:	429a      	cmp	r2, r3
 802a4ec:	dcf0      	bgt.n	802a4d0 <scalbn+0x4c>
 802a4ee:	2a00      	cmp	r2, #0
 802a4f0:	dd05      	ble.n	802a4fe <scalbn+0x7a>
 802a4f2:	4b17      	ldr	r3, [pc, #92]	@ (802a550 <scalbn+0xcc>)
 802a4f4:	0512      	lsls	r2, r2, #20
 802a4f6:	402b      	ands	r3, r5
 802a4f8:	4313      	orrs	r3, r2
 802a4fa:	0019      	movs	r1, r3
 802a4fc:	e7e0      	b.n	802a4c0 <scalbn+0x3c>
 802a4fe:	0013      	movs	r3, r2
 802a500:	3335      	adds	r3, #53	@ 0x35
 802a502:	da08      	bge.n	802a516 <scalbn+0x92>
 802a504:	4c0a      	ldr	r4, [pc, #40]	@ (802a530 <scalbn+0xac>)
 802a506:	4d0b      	ldr	r5, [pc, #44]	@ (802a534 <scalbn+0xb0>)
 802a508:	2900      	cmp	r1, #0
 802a50a:	da01      	bge.n	802a510 <scalbn+0x8c>
 802a50c:	4c08      	ldr	r4, [pc, #32]	@ (802a530 <scalbn+0xac>)
 802a50e:	4d11      	ldr	r5, [pc, #68]	@ (802a554 <scalbn+0xd0>)
 802a510:	4a07      	ldr	r2, [pc, #28]	@ (802a530 <scalbn+0xac>)
 802a512:	4b08      	ldr	r3, [pc, #32]	@ (802a534 <scalbn+0xb0>)
 802a514:	e7e4      	b.n	802a4e0 <scalbn+0x5c>
 802a516:	4b0e      	ldr	r3, [pc, #56]	@ (802a550 <scalbn+0xcc>)
 802a518:	3236      	adds	r2, #54	@ 0x36
 802a51a:	401d      	ands	r5, r3
 802a51c:	0512      	lsls	r2, r2, #20
 802a51e:	432a      	orrs	r2, r5
 802a520:	0011      	movs	r1, r2
 802a522:	4b0d      	ldr	r3, [pc, #52]	@ (802a558 <scalbn+0xd4>)
 802a524:	2200      	movs	r2, #0
 802a526:	e7c1      	b.n	802a4ac <scalbn+0x28>
 802a528:	43500000 	.word	0x43500000
 802a52c:	ffff3cb0 	.word	0xffff3cb0
 802a530:	c2f8f359 	.word	0xc2f8f359
 802a534:	01a56e1f 	.word	0x01a56e1f
 802a538:	000007ff 	.word	0x000007ff
 802a53c:	0000c350 	.word	0x0000c350
 802a540:	8800759c 	.word	0x8800759c
 802a544:	7e37e43c 	.word	0x7e37e43c
 802a548:	fe37e43c 	.word	0xfe37e43c
 802a54c:	000007fe 	.word	0x000007fe
 802a550:	800fffff 	.word	0x800fffff
 802a554:	81a56e1f 	.word	0x81a56e1f
 802a558:	3c900000 	.word	0x3c900000

0802a55c <with_errno>:
 802a55c:	b570      	push	{r4, r5, r6, lr}
 802a55e:	000d      	movs	r5, r1
 802a560:	0016      	movs	r6, r2
 802a562:	0004      	movs	r4, r0
 802a564:	f7fc f952 	bl	802680c <__errno>
 802a568:	0029      	movs	r1, r5
 802a56a:	6006      	str	r6, [r0, #0]
 802a56c:	0020      	movs	r0, r4
 802a56e:	bd70      	pop	{r4, r5, r6, pc}

0802a570 <xflow>:
 802a570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a572:	0014      	movs	r4, r2
 802a574:	001d      	movs	r5, r3
 802a576:	2800      	cmp	r0, #0
 802a578:	d002      	beq.n	802a580 <xflow+0x10>
 802a57a:	2180      	movs	r1, #128	@ 0x80
 802a57c:	0609      	lsls	r1, r1, #24
 802a57e:	185b      	adds	r3, r3, r1
 802a580:	9200      	str	r2, [sp, #0]
 802a582:	9301      	str	r3, [sp, #4]
 802a584:	9a00      	ldr	r2, [sp, #0]
 802a586:	9b01      	ldr	r3, [sp, #4]
 802a588:	0020      	movs	r0, r4
 802a58a:	0029      	movs	r1, r5
 802a58c:	f7d8 f9e2 	bl	8002954 <__aeabi_dmul>
 802a590:	2222      	movs	r2, #34	@ 0x22
 802a592:	f7ff ffe3 	bl	802a55c <with_errno>
 802a596:	b003      	add	sp, #12
 802a598:	bd30      	pop	{r4, r5, pc}

0802a59a <__math_uflow>:
 802a59a:	2380      	movs	r3, #128	@ 0x80
 802a59c:	b510      	push	{r4, lr}
 802a59e:	2200      	movs	r2, #0
 802a5a0:	055b      	lsls	r3, r3, #21
 802a5a2:	f7ff ffe5 	bl	802a570 <xflow>
 802a5a6:	bd10      	pop	{r4, pc}

0802a5a8 <__math_oflow>:
 802a5a8:	23e0      	movs	r3, #224	@ 0xe0
 802a5aa:	b510      	push	{r4, lr}
 802a5ac:	2200      	movs	r2, #0
 802a5ae:	05db      	lsls	r3, r3, #23
 802a5b0:	f7ff ffde 	bl	802a570 <xflow>
 802a5b4:	bd10      	pop	{r4, pc}

0802a5b6 <with_errnof>:
 802a5b6:	b570      	push	{r4, r5, r6, lr}
 802a5b8:	000d      	movs	r5, r1
 802a5ba:	1c04      	adds	r4, r0, #0
 802a5bc:	f7fc f926 	bl	802680c <__errno>
 802a5c0:	6005      	str	r5, [r0, #0]
 802a5c2:	1c20      	adds	r0, r4, #0
 802a5c4:	bd70      	pop	{r4, r5, r6, pc}

0802a5c6 <xflowf>:
 802a5c6:	b510      	push	{r4, lr}
 802a5c8:	1c0b      	adds	r3, r1, #0
 802a5ca:	2800      	cmp	r0, #0
 802a5cc:	d002      	beq.n	802a5d4 <xflowf+0xe>
 802a5ce:	2380      	movs	r3, #128	@ 0x80
 802a5d0:	061b      	lsls	r3, r3, #24
 802a5d2:	18cb      	adds	r3, r1, r3
 802a5d4:	1c18      	adds	r0, r3, #0
 802a5d6:	f7d6 fd33 	bl	8001040 <__aeabi_fmul>
 802a5da:	2122      	movs	r1, #34	@ 0x22
 802a5dc:	f7ff ffeb 	bl	802a5b6 <with_errnof>
 802a5e0:	bd10      	pop	{r4, pc}

0802a5e2 <__math_uflowf>:
 802a5e2:	2180      	movs	r1, #128	@ 0x80
 802a5e4:	b510      	push	{r4, lr}
 802a5e6:	0549      	lsls	r1, r1, #21
 802a5e8:	f7ff ffed 	bl	802a5c6 <xflowf>
 802a5ec:	bd10      	pop	{r4, pc}

0802a5ee <__math_oflowf>:
 802a5ee:	21e0      	movs	r1, #224	@ 0xe0
 802a5f0:	b510      	push	{r4, lr}
 802a5f2:	05c9      	lsls	r1, r1, #23
 802a5f4:	f7ff ffe7 	bl	802a5c6 <xflowf>
 802a5f8:	bd10      	pop	{r4, pc}
	...

0802a5fc <__ieee754_sqrt>:
 802a5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a5fe:	000a      	movs	r2, r1
 802a600:	000d      	movs	r5, r1
 802a602:	496b      	ldr	r1, [pc, #428]	@ (802a7b0 <__ieee754_sqrt+0x1b4>)
 802a604:	0004      	movs	r4, r0
 802a606:	0003      	movs	r3, r0
 802a608:	0008      	movs	r0, r1
 802a60a:	b087      	sub	sp, #28
 802a60c:	4028      	ands	r0, r5
 802a60e:	4288      	cmp	r0, r1
 802a610:	d111      	bne.n	802a636 <__ieee754_sqrt+0x3a>
 802a612:	0022      	movs	r2, r4
 802a614:	002b      	movs	r3, r5
 802a616:	0020      	movs	r0, r4
 802a618:	0029      	movs	r1, r5
 802a61a:	f7d8 f99b 	bl	8002954 <__aeabi_dmul>
 802a61e:	0002      	movs	r2, r0
 802a620:	000b      	movs	r3, r1
 802a622:	0020      	movs	r0, r4
 802a624:	0029      	movs	r1, r5
 802a626:	f7d7 f995 	bl	8001954 <__aeabi_dadd>
 802a62a:	0004      	movs	r4, r0
 802a62c:	000d      	movs	r5, r1
 802a62e:	0020      	movs	r0, r4
 802a630:	0029      	movs	r1, r5
 802a632:	b007      	add	sp, #28
 802a634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a636:	2d00      	cmp	r5, #0
 802a638:	dc11      	bgt.n	802a65e <__ieee754_sqrt+0x62>
 802a63a:	0069      	lsls	r1, r5, #1
 802a63c:	0849      	lsrs	r1, r1, #1
 802a63e:	4321      	orrs	r1, r4
 802a640:	d0f5      	beq.n	802a62e <__ieee754_sqrt+0x32>
 802a642:	2000      	movs	r0, #0
 802a644:	4285      	cmp	r5, r0
 802a646:	d010      	beq.n	802a66a <__ieee754_sqrt+0x6e>
 802a648:	0022      	movs	r2, r4
 802a64a:	002b      	movs	r3, r5
 802a64c:	0020      	movs	r0, r4
 802a64e:	0029      	movs	r1, r5
 802a650:	f7d8 fc66 	bl	8002f20 <__aeabi_dsub>
 802a654:	0002      	movs	r2, r0
 802a656:	000b      	movs	r3, r1
 802a658:	f7d7 fd42 	bl	80020e0 <__aeabi_ddiv>
 802a65c:	e7e5      	b.n	802a62a <__ieee754_sqrt+0x2e>
 802a65e:	1528      	asrs	r0, r5, #20
 802a660:	d115      	bne.n	802a68e <__ieee754_sqrt+0x92>
 802a662:	2480      	movs	r4, #128	@ 0x80
 802a664:	2100      	movs	r1, #0
 802a666:	0364      	lsls	r4, r4, #13
 802a668:	e007      	b.n	802a67a <__ieee754_sqrt+0x7e>
 802a66a:	0ada      	lsrs	r2, r3, #11
 802a66c:	3815      	subs	r0, #21
 802a66e:	055b      	lsls	r3, r3, #21
 802a670:	2a00      	cmp	r2, #0
 802a672:	d0fa      	beq.n	802a66a <__ieee754_sqrt+0x6e>
 802a674:	e7f5      	b.n	802a662 <__ieee754_sqrt+0x66>
 802a676:	0052      	lsls	r2, r2, #1
 802a678:	3101      	adds	r1, #1
 802a67a:	4222      	tst	r2, r4
 802a67c:	d0fb      	beq.n	802a676 <__ieee754_sqrt+0x7a>
 802a67e:	1e4c      	subs	r4, r1, #1
 802a680:	1b00      	subs	r0, r0, r4
 802a682:	2420      	movs	r4, #32
 802a684:	001d      	movs	r5, r3
 802a686:	1a64      	subs	r4, r4, r1
 802a688:	40e5      	lsrs	r5, r4
 802a68a:	408b      	lsls	r3, r1
 802a68c:	432a      	orrs	r2, r5
 802a68e:	4949      	ldr	r1, [pc, #292]	@ (802a7b4 <__ieee754_sqrt+0x1b8>)
 802a690:	0312      	lsls	r2, r2, #12
 802a692:	1844      	adds	r4, r0, r1
 802a694:	2180      	movs	r1, #128	@ 0x80
 802a696:	0b12      	lsrs	r2, r2, #12
 802a698:	0349      	lsls	r1, r1, #13
 802a69a:	4311      	orrs	r1, r2
 802a69c:	07c0      	lsls	r0, r0, #31
 802a69e:	d403      	bmi.n	802a6a8 <__ieee754_sqrt+0xac>
 802a6a0:	0fda      	lsrs	r2, r3, #31
 802a6a2:	0049      	lsls	r1, r1, #1
 802a6a4:	1851      	adds	r1, r2, r1
 802a6a6:	005b      	lsls	r3, r3, #1
 802a6a8:	2500      	movs	r5, #0
 802a6aa:	1062      	asrs	r2, r4, #1
 802a6ac:	0049      	lsls	r1, r1, #1
 802a6ae:	2480      	movs	r4, #128	@ 0x80
 802a6b0:	9205      	str	r2, [sp, #20]
 802a6b2:	0fda      	lsrs	r2, r3, #31
 802a6b4:	1852      	adds	r2, r2, r1
 802a6b6:	2016      	movs	r0, #22
 802a6b8:	0029      	movs	r1, r5
 802a6ba:	005b      	lsls	r3, r3, #1
 802a6bc:	03a4      	lsls	r4, r4, #14
 802a6be:	190e      	adds	r6, r1, r4
 802a6c0:	4296      	cmp	r6, r2
 802a6c2:	dc02      	bgt.n	802a6ca <__ieee754_sqrt+0xce>
 802a6c4:	1931      	adds	r1, r6, r4
 802a6c6:	1b92      	subs	r2, r2, r6
 802a6c8:	192d      	adds	r5, r5, r4
 802a6ca:	0fde      	lsrs	r6, r3, #31
 802a6cc:	0052      	lsls	r2, r2, #1
 802a6ce:	3801      	subs	r0, #1
 802a6d0:	1992      	adds	r2, r2, r6
 802a6d2:	005b      	lsls	r3, r3, #1
 802a6d4:	0864      	lsrs	r4, r4, #1
 802a6d6:	2800      	cmp	r0, #0
 802a6d8:	d1f1      	bne.n	802a6be <__ieee754_sqrt+0xc2>
 802a6da:	2620      	movs	r6, #32
 802a6dc:	2780      	movs	r7, #128	@ 0x80
 802a6de:	0004      	movs	r4, r0
 802a6e0:	9604      	str	r6, [sp, #16]
 802a6e2:	063f      	lsls	r7, r7, #24
 802a6e4:	183e      	adds	r6, r7, r0
 802a6e6:	46b4      	mov	ip, r6
 802a6e8:	428a      	cmp	r2, r1
 802a6ea:	dc02      	bgt.n	802a6f2 <__ieee754_sqrt+0xf6>
 802a6ec:	d114      	bne.n	802a718 <__ieee754_sqrt+0x11c>
 802a6ee:	429e      	cmp	r6, r3
 802a6f0:	d812      	bhi.n	802a718 <__ieee754_sqrt+0x11c>
 802a6f2:	4660      	mov	r0, ip
 802a6f4:	4666      	mov	r6, ip
 802a6f6:	19c0      	adds	r0, r0, r7
 802a6f8:	9100      	str	r1, [sp, #0]
 802a6fa:	2e00      	cmp	r6, #0
 802a6fc:	da03      	bge.n	802a706 <__ieee754_sqrt+0x10a>
 802a6fe:	43c6      	mvns	r6, r0
 802a700:	0ff6      	lsrs	r6, r6, #31
 802a702:	198e      	adds	r6, r1, r6
 802a704:	9600      	str	r6, [sp, #0]
 802a706:	1a52      	subs	r2, r2, r1
 802a708:	4563      	cmp	r3, ip
 802a70a:	4189      	sbcs	r1, r1
 802a70c:	4249      	negs	r1, r1
 802a70e:	1a52      	subs	r2, r2, r1
 802a710:	4661      	mov	r1, ip
 802a712:	1a5b      	subs	r3, r3, r1
 802a714:	9900      	ldr	r1, [sp, #0]
 802a716:	19e4      	adds	r4, r4, r7
 802a718:	0fde      	lsrs	r6, r3, #31
 802a71a:	0052      	lsls	r2, r2, #1
 802a71c:	1992      	adds	r2, r2, r6
 802a71e:	9e04      	ldr	r6, [sp, #16]
 802a720:	005b      	lsls	r3, r3, #1
 802a722:	3e01      	subs	r6, #1
 802a724:	087f      	lsrs	r7, r7, #1
 802a726:	9604      	str	r6, [sp, #16]
 802a728:	2e00      	cmp	r6, #0
 802a72a:	d1db      	bne.n	802a6e4 <__ieee754_sqrt+0xe8>
 802a72c:	431a      	orrs	r2, r3
 802a72e:	d01f      	beq.n	802a770 <__ieee754_sqrt+0x174>
 802a730:	4e21      	ldr	r6, [pc, #132]	@ (802a7b8 <__ieee754_sqrt+0x1bc>)
 802a732:	4f22      	ldr	r7, [pc, #136]	@ (802a7bc <__ieee754_sqrt+0x1c0>)
 802a734:	6830      	ldr	r0, [r6, #0]
 802a736:	6871      	ldr	r1, [r6, #4]
 802a738:	683a      	ldr	r2, [r7, #0]
 802a73a:	687b      	ldr	r3, [r7, #4]
 802a73c:	9200      	str	r2, [sp, #0]
 802a73e:	9301      	str	r3, [sp, #4]
 802a740:	6832      	ldr	r2, [r6, #0]
 802a742:	6873      	ldr	r3, [r6, #4]
 802a744:	9202      	str	r2, [sp, #8]
 802a746:	9303      	str	r3, [sp, #12]
 802a748:	9a00      	ldr	r2, [sp, #0]
 802a74a:	9b01      	ldr	r3, [sp, #4]
 802a74c:	f7d8 fbe8 	bl	8002f20 <__aeabi_dsub>
 802a750:	0002      	movs	r2, r0
 802a752:	000b      	movs	r3, r1
 802a754:	9802      	ldr	r0, [sp, #8]
 802a756:	9903      	ldr	r1, [sp, #12]
 802a758:	f7d5 feba 	bl	80004d0 <__aeabi_dcmple>
 802a75c:	2800      	cmp	r0, #0
 802a75e:	d007      	beq.n	802a770 <__ieee754_sqrt+0x174>
 802a760:	6830      	ldr	r0, [r6, #0]
 802a762:	6871      	ldr	r1, [r6, #4]
 802a764:	683a      	ldr	r2, [r7, #0]
 802a766:	687b      	ldr	r3, [r7, #4]
 802a768:	1c67      	adds	r7, r4, #1
 802a76a:	d10c      	bne.n	802a786 <__ieee754_sqrt+0x18a>
 802a76c:	9c04      	ldr	r4, [sp, #16]
 802a76e:	3501      	adds	r5, #1
 802a770:	4a13      	ldr	r2, [pc, #76]	@ (802a7c0 <__ieee754_sqrt+0x1c4>)
 802a772:	106b      	asrs	r3, r5, #1
 802a774:	189b      	adds	r3, r3, r2
 802a776:	9a05      	ldr	r2, [sp, #20]
 802a778:	07ed      	lsls	r5, r5, #31
 802a77a:	0864      	lsrs	r4, r4, #1
 802a77c:	0512      	lsls	r2, r2, #20
 802a77e:	4325      	orrs	r5, r4
 802a780:	0028      	movs	r0, r5
 802a782:	18d1      	adds	r1, r2, r3
 802a784:	e751      	b.n	802a62a <__ieee754_sqrt+0x2e>
 802a786:	f7d7 f8e5 	bl	8001954 <__aeabi_dadd>
 802a78a:	6877      	ldr	r7, [r6, #4]
 802a78c:	6836      	ldr	r6, [r6, #0]
 802a78e:	0002      	movs	r2, r0
 802a790:	000b      	movs	r3, r1
 802a792:	0030      	movs	r0, r6
 802a794:	0039      	movs	r1, r7
 802a796:	f7d5 fe91 	bl	80004bc <__aeabi_dcmplt>
 802a79a:	2800      	cmp	r0, #0
 802a79c:	d004      	beq.n	802a7a8 <__ieee754_sqrt+0x1ac>
 802a79e:	3402      	adds	r4, #2
 802a7a0:	4263      	negs	r3, r4
 802a7a2:	4163      	adcs	r3, r4
 802a7a4:	18ed      	adds	r5, r5, r3
 802a7a6:	e7e3      	b.n	802a770 <__ieee754_sqrt+0x174>
 802a7a8:	2301      	movs	r3, #1
 802a7aa:	3401      	adds	r4, #1
 802a7ac:	439c      	bics	r4, r3
 802a7ae:	e7df      	b.n	802a770 <__ieee754_sqrt+0x174>
 802a7b0:	7ff00000 	.word	0x7ff00000
 802a7b4:	fffffc01 	.word	0xfffffc01
 802a7b8:	0802f3c0 	.word	0x0802f3c0
 802a7bc:	0802f3b8 	.word	0x0802f3b8
 802a7c0:	3fe00000 	.word	0x3fe00000

0802a7c4 <_init>:
 802a7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a7c6:	46c0      	nop			@ (mov r8, r8)
 802a7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a7ca:	bc08      	pop	{r3}
 802a7cc:	469e      	mov	lr, r3
 802a7ce:	4770      	bx	lr

0802a7d0 <_fini>:
 802a7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a7d2:	46c0      	nop			@ (mov r8, r8)
 802a7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a7d6:	bc08      	pop	{r3}
 802a7d8:	469e      	mov	lr, r3
 802a7da:	4770      	bx	lr
